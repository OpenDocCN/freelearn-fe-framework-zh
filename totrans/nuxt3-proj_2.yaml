- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Simple Portfolio Using Tailwind CSS and a Dive into Nuxt 3’s Project
    Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this second chapter, we will intertwine the robustness of Nuxt 3 with the
    stylistic efficiency of Tailwind CSS to construct a portfolio that gracefully
    showcases your projects and technical prowess. Tailwind CSS, renowned for its
    utility-first approach, enables us to create intricate designs with minimal custom
    CSS, facilitating a streamlined development process. When combined with Nuxt 3,
    a framework lauded for its developer-friendly abstractions and powerful Vue.js
    functionalities, we equip ourselves with a potent toolkit to build a portfolio
    that is not only functionally stellar but also visually captivating.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will meticulously create a portfolio, ensuring each component
    and style is crafted with precision and intentionality. We aim to ensure your
    projects are not only showcased but also narrated in a manner that resonates with
    every visitor, providing them with not just a visual experience but also a journey
    through your technical endeavors and achievements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and integrating with **TailwindCSS 3**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a website layout and customizing the font
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing images in the `assets` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the `ProjectShowcase` and `SkillChip` components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling directly within the component’s scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `useScrollTo` composable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter02](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: The CiA video for this chapter can be found on [https://packt.link/kCqMV](https://packt.link/kCqMV)
  prefs: []
  type: TYPE_NORMAL
- en: Essential background – what is Tailwind CSS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we commence our coding journey, let’s equip ourselves with some pivotal
    knowledge about Tailwind CSS, which is a utility-first CSS framework that provides
    low-level utility classes to build designs directly in your markup. Unlike other
    CSS frameworks that offer predefined components, Tailwind allows for more flexibility
    and customization in your design implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more in-depth look at Tailwind CSS and its features, you can visit Tailwind
    CSS’s official website: [https://tailwindcss.com/](https://tailwindcss.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s go through the process of setting up and integrating Tailwind CSS
    into your project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and integrating with Tailwind CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll initiate our portfolio journey by crafting a new Nuxt 3 project from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we learned in the previous chapter, let’s create a new Nuxt 3 project named
    `my-portfolio` and open it in VS Code to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we navigate further, it’s prudent to ensure that our setup was successful.
    Let’s spin up our development server and take a glimpse at the initial state of
    our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Executing `pnpm dev` will ignite the development server, and you should be greeted
    with the default `NuxtWelcome` component when you visit [http://localhost:3000](http://localhost:3000)
    in your web browser. This veritable component signifies that our project has been
    set up successfully and we’re primed to weave in Tailwind CSS in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Tailwind CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start, let’s equip our development environment with a tool that’ll
    enhance our coding experience – **Tailwind CSS IntelliSense**. If you’re utilizing
    **Visual Studio Code** (**VS Code**) as your code editor, consider installing
    the Tailwind CSS IntelliSense extension. This extension amplifies your development
    efficiency by providing autocompletions for Tailwind CSS classes, syntax highlighting,
    and much more, making it easier to apply styles without needing to memorize or
    frequently refer to the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: To install, simply navigate to the Extensions view by clicking on the Extensions
    icon in the Activity Bar on the left side of the window, search for `Tailwind
    CSS IntelliSense`, and click on **Install**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: The Tailwind VS Code extension](img/B19760_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: The Tailwind VS Code extension'
  prefs: []
  type: TYPE_NORMAL
- en: Now, your VS Code is supercharged with Tailwind CSS capabilities, streamlining
    your development with intelligent code completion and error-checking. Let’s proceed,
    ensuring that our coding journey is as smooth as possible!
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we shall incorporate Tailwind CSS into our project. Execute the following
    command to install the Tailwind CSS module for Nuxt 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Post-installation, we direct our Nuxt 3 project to utilize Tailwind CSS. This
    involves a slight modification to the `nuxt.config.ts` file. Navigate to the modules
    array and introduce the Tailwind CSS package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Appending `'@nuxtjs/tailwindcss` to the modules array ensures that Tailwind
    CSS is recognized and utilized by our Nuxt 3 project, enabling the use of its
    utility classes within our components.
  prefs: []
  type: TYPE_NORMAL
- en: To tailor Tailwind CSS to meet our project’s aesthetic and functional needs,
    we will craft a configuration file, named `tailwind.config.js`. This file will
    serve as our control center for any adjustments or customizations to the default
    setup of Tailwind CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s generate `tailwind.config.js` at the root of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also run the following command to generate the same file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `tailwind.config.js` file will act as our vessel for custom styling, component
    definition, and theme adjustments, ensuring that our utility classes are optimized
    and maintain a consistent design language throughout our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating from our generalized setup into something more specific, here’s
    my preferred startup configuration in Tailwind CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Diving deeper, let’s explore how each part of my chosen configuration ensures
    a smooth, consistent, and Vue-themed aesthetic across our portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Color customization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tailwind CSS allows us to customize its default colors, offering the flexibility
    to infuse our own brand or thematic colors in a project. By specifying our colors
    in the configuration, such as green shades that echo the Vue.js color scheme,
    we ensure that our design is both aesthetically pleasing and subtly communicates
    our technological focus to the viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Container customization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The container section ensures that our content is neatly centered and provides
    horizontal padding to prevent content from abutting the edge of the viewport.
    By default, we have a `1.5rem` horizontal padding, which extends to `4rem` for
    larger `(lg, xl, and 2xl)` screens, ensuring our content remains readable and
    aesthetically placed across all screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Screen breakpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The screens section in Tailwind CSS configuration utilizes itsresponsive design
    by defining breakpoints. Breakpoints are viewport widths where the layout of the
    page will change, aiming to provide an optimal user experience across various
    screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: In our custom configuration, we opted for these particular breakpoints to align
    more closely with the widely used Bootstrap framework’s breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wrapping up the configuration setup, let’s put our adjustments to the test
    by crafting a simple layout. Create a `div` element and apply our custom primary
    color to ensure that our color configuration has been applied correctly. Navigate
    to your `app.vue` file and clear the existing template content. Now, let’s infuse
    our custom primary color in a welcoming header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This simple test allows us to visually validate that our Tailwind CSS customizations
    have been successfully integrated into the Nuxt 3 project. Following the implementation,
    you should see a screen similar to the following depiction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2: Tailwind CSS configured](img/B19760_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Tailwind CSS configured'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, changes in the Tailwind CSS configuration might not reflect immediately
    in your development environment. If the color doesn’t apply as expected, halt
    your development server and restart it to ensure all configurations are properly
    loaded.
  prefs: []
  type: TYPE_NORMAL
- en: In our initial journey, we’ve successfully set up and integrated Tailwind CSS
    into our Nuxt 3 project. We tested the waters by applying our custom primary color
    to a header in our app, ensuring our foundational setup is robust and ready for
    the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: As we transition into the next segment, we’ll start creating the layout for
    our portfolio, ensuring our custom styles seamlessly permeate through every component
    and view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the website layout and customizing the font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stepping into the next section of our development saga, our focus shifts toward
    establishing the visual groundwork of our portfolio. In this crucial phase, every
    design decision, from layout constructs to typographic selections, converges to
    narrate our professional story through a seamless user journey. Let’s delve into
    crafting this visual journey, commencing with a fundamental element – typography.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding the Lato font (or any Google font)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the structural development of our layout, typographic choices play a crucial
    role, serving not only the aesthetic but also enhancing the readability and user
    experience of our portfolio. Our chosen font, Lato, is known for its clean, sans-serif
    character, offering a professional yet approachable vibe to our portfolio’s textual
    content.
  prefs: []
  type: TYPE_NORMAL
- en: To integrate Lato into our Nuxt project, we have a couple of viable options.
    Let’s dissect both.
  prefs: []
  type: TYPE_NORMAL
- en: Option 1 – manually adding a font to nuxt.config.ts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first option involves fetching and utilizing a direct link from Google Fonts.
    When you select Lato on the `<``head>` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Nuxt 3, to insert links, meta tags, scripts, or other elements within the
    `<head>` of your HTML, we must configure them within the app object in the `nuxt.config.ts`
    file. The subsequent configuration illustrates how to integrate external links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a breakdown of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`preconnect`: This directive establishes early connections to the domain, optimizing
    resource fetching and, thereby, improving loading performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `stylesheet` link is where we specify the Lato font and its weights (100,
    300, 400, 700, and 900), which we intend to use throughout our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option 2 – using the `@nuxtjs/google-fonts` package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A seamless, alternative method to introduce Google Fonts into our Nuxt 3 project
    is by utilizing the `@nuxtjs/google-fonts` module. This Plug and Play module embeds
    Google fonts on our website.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s walk through the integration process and then delve into configuring Lato
    for our portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by installing the `@``nuxtjs/google-fonts` dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll register this module within the `nuxt.config.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify the Google font(s) and their respective weights, utilize the `googleFonts`
    property in `nuxt.config.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`families`: This property is an object where you specify the Google Font family
    (or families) you wish to include in your project. Each font family is an object
    key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `key` reflects the name of the google font. , and the `value` determines
    the font weights to be loaded. In our context, `Lato: [100, 300, 400, 700, 900]`
    implies that we are instructing the module to load the Lato font family with the
    specified font weights (100, 300, 400, 700, and 900) for our project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With two viable options at your disposal – directly embedding font links into
    your `nuxt.config.ts` or utilizing the `@nuxtjs/google-fonts` module – you’re
    empowered to choose the method that aligns best with your project needs. Having
    configured our chosen font, let’s move toward tailoring our `tailwind.config.js`
    to recognize and utilize Lato throughout our design.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make Lato easily accessible throughout our project using Tailwind CSS’s
    utility classes, we modify our `tailwind.config.js` to recognize Lato as the default
    sans-serif font:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This adjustment ensures that whenever we apply Tailwind CSS’s `font-sans` utility
    (which is applied by default), Lato is utilized, facilitating a coherent typography
    across our portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve sorted out our font options, let’s move on to laying out the
    foundation of our website in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we lay out the main `<div>` in the `app.vue` file with a background
    color that sets the overall tone for our portfolio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, `bg-neutral` is a Tailwind CSS class that applies the neutral color we
    defined earlier in our `tailwind.config.js`. This serves as the backdrop for our
    entire portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s construct the header. Here’s how we’ll do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `hidden md:block` Tailwind CSS class hides `<nav>` by default
    and displays it as a block on medium (`md:`) screens and up, catering to responsive
    design.
  prefs: []
  type: TYPE_NORMAL
- en: But how about the header navigation links? Shall we add them manually and repeat
    them for each one? But what if we want to add more header links in the future?
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s no need to manually update the template each time. Instead, let’s harness
    Vue’s dynamic rendering capabilities. In your script, define an array named `headerLinks`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, modify the `<li>` elements in your header to loop through this array,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: By combining Tailwind CSS and Vue.js, especially the Composition API, we craft
    a layout that’s as functional as it is visually cohesive. This also paves the
    way for future-proof, scalable code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: The header section](img/B19760_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: The header section'
  prefs: []
  type: TYPE_NORMAL
- en: With our layout finely tuned and our font seamlessly integrated, let’s shift
    our focus to managing images in the `assets` folder in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing images in the assets folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Nuxt 3, managing assets such as style sheets, fonts, or images is a straightforward
    process. The framework offers two primary directories for this purpose – `public/`
    and `assets/`.
  prefs: []
  type: TYPE_NORMAL
- en: The `public/` directory serves as a public server for static assets that are
    publicly available at the root URL of your application. Files in this directory
    are served as-is without any processing from build tools such as Vite or webpack.
    For example, an image in the `public/img/` directory can be accessed at the `/img/nuxt.png`
    static URL.
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, the `assets/` directory is used to store files that you want to
    be processed by build tools such as `public/` directory, files in the `assets/`
    directory are not served at a static URL.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s apply this by creating a hero section with a large Vue image.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, to include images in our project, we create a new folder within the
    `assets/` directory and call it `images`. Inside this folder, we’ve placed an
    image file named `vue-logo.webp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the implementation of the hero section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the hero section, you’ll see this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `~` symbol represents the project root, and Nuxt automatically understands
    to look in the `assets/images` directory for `vue-logo.webp`. During the build
    process, Nuxt will optimize this image, giving it a new path that aids in efficient
    caching.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4: The hero section](img/B19760_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: The hero section'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `avatar.jpeg`, in the `assets/images` folder. The image is displayed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the final hero section that contains an avatar image, bio, and skills:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This code contains three main elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An avatar image**: This displays our profile picture, styled to be circular
    with a unique dashed border'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A bio**: A brief introduction about us, highlighting our role as frontend
    developers and our expertise in Vue.js, Nuxt.js, and other technologies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skills**: Presented as stylized tags, these showcase our primary technical
    proficiencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows a screenshot of this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5: The About Me section](img/B19760_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: The About Me section'
  prefs: []
  type: TYPE_NORMAL
- en: Now, have you noticed the skills we’ve listed in the `span` element with almost
    identical classes. To make our code more maintainable and cleaner, how about we
    convert these into a reusable Vue component? Let’s delve into that in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ProjectShowcase and SkillChip components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve been closely following along, you might have noticed redundancy in
    our code, particularly in the `span` element. This approach is not only verbose
    but also makes future changes cumbersome.
  prefs: []
  type: TYPE_NORMAL
- en: In Nuxt, the `components/` directory serves as the hub for all your Vue components.
    These components can be readily imported into your pages or even into other components.
    Nuxt automatically recognizes any components in this directory, sparing you from
    manual import statements.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SkillChip component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `components/` directory of your Nuxt project, create a new file named
    `SkillChip.vue`. Open `SkillChip.vue` and copy the provided code into this file.
    This code defines the template for your new SkillChip component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `<slot></slot>` tag acts as a placeholder for any content you’ll place
    between the opening and closing `<skill-chip>` tags. This makes the component
    reusable and customizable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the `nuxtr` extension, which we installed in a previous
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: In VS Code, press *Ctrl* + *Shift* + *P* (or *Cmd* + *Shift* + *P* on a Mac)
    to open the command palette.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `nuxtr: Create new Component` and select the first option that occur in
    the menu (it should have the same name that you typed”.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `SkillChip` as the name of the component when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose to create the component at the root level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s swap out the repetitive `span` elements in the `SkillChip` component.
    Update your code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: With this simple change, our code becomes more maintainable, and adding or modifying
    a skill in the future becomes a breeze.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve optimized our skill listing, let’s turn our attention to showcasing
    your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ProjectShowcase component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our goal is to streamline the process of displaying multiple projects on the
    website. Instead of duplicating HTML code for each project, we can make this process
    more efficient by creating a reusable `ProjectShowcase` component.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s set up our data. We’ll use an array of objects, where each object
    represents a project with various properties, such as a name, description, and
    link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add this array to our `app.vue` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A note on image paths
  prefs: []
  type: TYPE_NORMAL
- en: In Nuxt 3, dynamic imports for image paths aren’t supported out of the box.
    Therefore, we’ll take a simpler route by placing our project images in the public
    folder. This way, they can be accessed directly via their static URLs, such as
    `/images/projects/1.jpeg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go ahead and create a new file named `ProjectShowcase.vue` in your `components/`
    directory. Initially, let’s keep the template empty. In the component’s `<script>`
    block, we use `defineProps` to specify what properties this component expects.
    It’s an essential part of using the `defineProps` specifies that the component
    will receive a project object containing specific fields such as `name`, `description`,
    `image`, and `link`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s flesh out the component’s template. The idea is to display each project
    in a card-like format, containing the project’s image, name, description, and
    a link to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the template code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Our component’s template is designed to showcase each project elegantly. The
    main elements are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The project image**: Displays the project’s visual aspect, set to cover the
    top portion of the card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The project details**: This includes the project’s name, a brief description,
    and a clickable link to access it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, let’s bind this component to our projects array using the `v-for`
    directive in our main section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To enhance the project showcase section you’re working on, you should expand
    the `projects` object to include more than one project. Here’s how you can proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: In your existing `projects` object, add two more projects. Each project entry
    should include details such as the project title and a description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each project in your `projects` object, include an image. Save these images
    in the `public` folder of your Nuxt project. This placement ensures that the images
    are statically served in your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your project entries, reference the image paths relative to the `public`
    folder. For example, if you have an image named `project1.jpg` in the public folder,
    reference it in your project object as `/project1.jpg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure shows a screenshot of the project showcase section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6: The project showcase section](img/B19760_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: The project showcase section'
  prefs: []
  type: TYPE_NORMAL
- en: With this, you’ve successfully modularized your project showcase, making it
    easier to manage and scale in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Styling within the component itself
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building a UI, the components often have specific styles that shouldn’t
    affect other parts of the application. One way to achieve this isolation is by
    using scoped styles in Vue components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a new Vue component named `CurvedDivider` that we can use as a
    visual separator between the “About Me” and project showcase sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The component’s structure is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s add some custom styles to this component. We want to set its height
    and background color, as well as add a curved section at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note the `scoped` attribute in the `<style>` tag. When a `<style>` tag has the
    `scoped` attribute, its CSS will apply only to elements of the current component.
    This ensures that the component’s styles won’t leak into other parts of your application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7: Inspect the representation of <style scoped> in devtools](img/B19760_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Inspect the representation of <style scoped> in devtools'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the styles are applied to `.divider[data-v-a9cd7541]` (the `divider`
    class with a unique identifier).
  prefs: []
  type: TYPE_NORMAL
- en: Vue also supports style preprocessors such as `SCSS`, `SASS`, `PostCSS`, and
    `LESS`. You can use any of these preprocessors with the `scoped` attribute as
    well. For example, for `SCSS`, you’d write `<style` `lang="scss" scoped>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The divider should be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8: The CurvedDivider component](img/B19760_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: The CurvedDivider component'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve just explored how to implement scoped styling within components, making
    our code both maintainable and modular. Next, we’ll take a dive into the world
    of Vue composables by creating a `useScrollTo` composable for smoother navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a useScrollTo composable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing reusable stateful logic is crucial in any Vue application. Composables
    serve this exact purpose. They let you wrap complex stateful logic into a function
    that can be easily reused across your application. Our `useScrollTo` example demonstrates
    this by encapsulating the scroll-to-section logic.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt 3 enhances this experience with an auto-import feature for composables.
    Just place your composable in the `composables/` directory and Nuxt handles the
    rest, making manual imports a thing of the past.
  prefs: []
  type: TYPE_NORMAL
- en: Before we create our composable, let’s start by moving our header into a new
    component. Create a file called `BaseHeader.vue` inside the `components/` folder
    and move the header section with `headerLinks` from the script into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `App.vue` should now start like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Meanwhile, your `BaseHeader.vue` should contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a `composables` directory and add to it a `useScrollTo.ts` file
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here, `useScrollTo` takes an element ID, finds it, and smoothly scrolls to it.
  prefs: []
  type: TYPE_NORMAL
- en: Because of Nuxt’s auto-import capability, using this composable in different
    components is effortless. It ensures your code follows the **Don’t-Repeat-Yourself**
    (**DRY**) principle and remains maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the `BaseHeader` component, we can use `useScrollTo` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We can also apply the same reusable logic in the hero section of our application.
    For instance, we can attach it to a button to scroll smoothly to the portfolio
    section when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to implement it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'With this setup, the button in the hero section will also smoothly scroll down
    to the portfolio section when clicked. All of this is achieved without duplicating
    code, thanks to our composable and Nuxt’s auto-import feature. To wrap up this
    chapter and give you a complete visualization, you’ll find a final screenshot
    of our project in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9: A screenshot of the final project](img/B19760_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: A screenshot of the final project'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B19760_02.xhtml#_idTextAnchor036), we’ve taken a deep dive
    into building a simple but effective portfolio using Tailwind CSS and Nuxt 3\.
    We kicked off by integrating Tailwind CSS into our Nuxt project, followed by laying
    out our website and customizing its fonts. We then explored how to manage images
    in Nuxt, opting for the public folder for ease of use. From there, we moved on
    to creating reusable Vue components such as `ProjectShowcase` and `SkillChip`,
    which helped declutter our main layout. We also learned about scoped styling within
    components, ensuring that our styles are applied only where they’re needed. Lastly,
    we ventured into the powerful world of composable, crafting a `useScrollTo` function
    that we were able to use in multiple components, thanks to Nuxt’s auto-import
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapter, we’re going to up the ante by constructing a real estate
    listing project. Prepare to dive deep into the essentials of routing, views, and
    layouts to create a multi-page application that mimics a real-world project. Additionally,
    we’ll explore the powerful capabilities of Nuxt plugins to further extend the
    functionality of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do you integrate Tailwind CSS into a Nuxt 3 project?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain the difference between the `public/` and `assets/` directories in Nuxt
    3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you create a custom color scheme in Tailwind CSS?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the purpose of the scoped attribute in a component’s `<``style>` tag?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you import and use a custom font in Nuxt 3?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the benefit of using Vue’s `<slot>` element in a component?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you loop through an array of objects in Vue to create multiple instances
    of a component?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the `defineProps` function and its use case in a Nuxt 3 component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you create and use a composable in Nuxt 3?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the purpose of the `useScrollTo` composable, and how is it implemented?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does Nuxt 3’s auto-import feature work with components and composables?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tailwind CSS official documentation: [https://tailwindcss.com/docs/installation](https://tailwindcss.com/docs/installation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vue composables: [https://vuejs.org/guide/reusability/composables.html](https://vuejs.org/guide/reusability/composables.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt composables directory: [https://nuxt.com/docs/guide/directory-structure/composables](https://nuxt.com/docs/guide/directory-structure/composables)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt assets directory: [https://nuxt.com/docs/getting-started/assets](https://nuxt.com/docs/getting-started/assets)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt components directory: [https://nuxt.com/docs/guide/directory-structure/components](https://nuxt.com/docs/guide/directory-structure/components)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
