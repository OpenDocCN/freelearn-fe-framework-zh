- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dockerizing a Vue 3 App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we demonstrated how to build a complete Pinterest clone
    with Vue.js 3, GraphQL, and Strapi for the backend. You also utilized your knowledge
    of GraphQL to develop an enterprise Pinterest clone application. In this chapter,
    you will learn the nitty-gritty details of the steps involved in dockerizing your
    Vue.js 3 project. In addition, you will learn about best practices and industry
    standards to dockerize and deploy an enterprise Vue.js 3 web application. This
    chapter will also take a more practical approach by covering how to dockerize
    a full stack web application and deploy the container to a cloud platform using
    Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerizing the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the app on Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerizing Vue.js 3 and Node.js with Docker Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the app on Docker Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned about best practices and industry
    standards to dockerize and deploy an enterprise Vue.js 3 web application. You
    will also have gained practical experience by dockerizing a full stack web application
    and deploying the container to a cloud platform using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with this chapter, I recommend you read through [*Chapter 6*](B17237_06.xhtml#_idTextAnchor192)*,
    Building a Complete Pinterest Clone with GraphQL*, first, where we built a complete
    Pinterest clone using Vue.js 3, GraphQL, and the Strapi CRM for the backend. We
    will be using that application a lot in this chapter to learn about Docker and
    Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: All the code files for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7).
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker has evolved over the years and knowing how to use it has become one of
    the most critical and in-demand skills for anyone interested in DevOps. Therefore,
    whether you’re a seasoned DevOps engineer or a beginner, you definitely need to
    add Docker to your collection of skills.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is the new buzzword in the DevOps and container orchestration industry.
    It was created in 2013 and was developed by the parent company, Docker, Inc.
  prefs: []
  type: TYPE_NORMAL
- en: Docker can package an application and its dependencies in a virtual container
    that can run on any Linux, Windows, or macOS computer. A container refers to an
    isolated or bundled application with the tools, libraries, and configuration files
    needed to execute the application.
  prefs: []
  type: TYPE_NORMAL
- en: One of the benefits of Docker is that it is a toolkit that enables developers
    to build, deploy, run, update, and stop containers using simple commands and work-saving
    automation through a single API across different operating systems and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explores everything you need to know about Docker, the different
    unique features of Docker, and why you should consider dockerizing your applications.
    We will also work through creating and setting up your first Docker application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore Docker and its benefits to give us insights
    into why we need it in our development pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: What is Docker?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker is an open source platform that allows developers to build, test, and
    deploy applications quickly. Docker achieves this by packaging your application
    in standardized units called containers. These containers have everything the
    software needs to run, including libraries, system tools, code, and a runtime
    environment. It also virtualizes the operating system of the computer on which
    it is installed and running.
  prefs: []
  type: TYPE_NORMAL
- en: To further explain this, let’s say we have developed two different instances
    of our application, that is, the frontend and the backend.
  prefs: []
  type: TYPE_NORMAL
- en: The backend is developed with a Node.js stack, including a PostgreSQL database
    and other tools that make the Node.js backend execute properly on your local server.
  prefs: []
  type: TYPE_NORMAL
- en: Next, your frontend is created with Vue.js 3 and the necessary tools and configuration
    that make your Vue.js 3 application run smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a couple of problems that might arise when working in a team or individually
    if you aren’t using Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: If a new team member joins, it might be tedious to onboard the member into the
    code base since the member needs to install and configure the correct version
    of the project and download the exact versions of the files required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When deploying the application, provisioning different servers for all the services
    used by your application will be a lot of work. For instance, you will have to
    provision different servers for the database, frontend, and backend. You may also
    need to provision different servers for different environments, such as staging,
    testing, and production, or use one server with lots of configurations each time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Docker, you can solve these problems by configuring, provisioning, and
    packaging all these services with a simple configuration file called a Dockerfile
    or a YAML file to define and run multi-container Docker applications using Docker
    Compose.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how Docker will solve these problems, take a look at the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – A screenshot of the Docker host and layers (source: freeCodeCamp
    [freecodecamp.org/news/docker-simplified-96639a35ff36/])](img/Figure_7.01_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1 – A screenshot of the Docker host and layers (source: freeCodeCamp
    [freecodecamp.org/news/docker-simplified-96639a35ff36/])'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the internal layers and structure of Docker,
    where your application is bundled into containers with all the required resources
    to run smoothly. Additionally, each container uses your shared system resources.
  prefs: []
  type: TYPE_NORMAL
- en: This allows each container to be isolated from the others present on the same
    host. Thus, it allows multiple containers with different application requirements
    and dependencies to run on the same host, as long as they have the same operating
    system requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, with Docker, you can run multiple applications as containers and
    use commands and a single configuration file to control everything. In the next
    section, we will carefully examine the benefits of Docker to our development pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some of the key benefits of using Docker are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optimized storage system**: Containers are usually a few megabytes in size
    and consume very little disk space. Therefore, a large number of applications
    can be hosted on the same host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost-effective**: Docker is less demanding when it comes to the hardware
    required to run it. Therefore, it reduces the cost of acquiring expensive hardware
    for different setups drastically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robustness**: Docker has a faster boot time as it consumes very little memory
    in comparison to a virtual machine since it does not have an operating system
    installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple containers**: With the same operating requirements, Docker supports
    multiple applications with different application requirements and dependencies,
    to be hosted together on the same host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the benefits of using Docker to manage and ship your enterprise applications.
    Let’s next explore why you should use Docker in your enterprise-level application.
  prefs: []
  type: TYPE_NORMAL
- en: Why use Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker enables you to publish your code quickly and efficiently. It standardizes
    the operations of an application, allows you to move code seamlessly, and saves
    revenue by improving the utilization of resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the reasons you should start using Docker in scalable enterprise
    applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ship more software faster**: Acc[ording](https://aws.amazon.com/docker/)
    to Amazon ([https://aws.amazon.com/docker/](https://aws.amazon.com/docker/)),
    Docker users ship products 7x faster than non-Docker users. Docker enables you
    to ship isolated services as often as needed. When building enterprise-level and
    scalable applications, features and bug fixes happen in hours, if not minutes.
    Therefore, urgent building, testing, and deployment are needed and Docker comes
    in handy in this area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standardize operations**: Docker follows industry-standard application development
    practices. Isolated standardized units called containers make it easy to deploy,
    identify issues, and roll back for remediation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Seamlessly move**: Developers can move applications between different environments
    and systems without worrying about installing any libraries or missing configuration
    files. Docker-based applications can be moved seamlessly from local development
    to a production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save money**: Docker-based applications are cost-effective since you can
    run multiple applications on one server in the form of containers. Docker containers
    make it easier to run more code on each server, improving your utilization of
    CPU resources and saving you money.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now you know why you should use Docker in your enterprise applications and the
    benefits you can incur from using Docker. With Docker, you can ship products faster
    and more efficiently. When combined with other industry-standard tools, you can
    completely remove the hassle of manual deployment by instead adopting automated
    deployment. In the next section, we are going to explore how to dockerize your
    first application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Docker with Vue.js 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is an enterprise-ready container platform that enables organizations
    to seamlessly build, share, and run any application, anywhere. Almost all enterprise-level
    companies containerize their applications for faster production workloads so that
    they can deploy anytime, sometimes several times a day.
  prefs: []
  type: TYPE_NORMAL
- en: One way to build an enterprise-level application is to dockerize the project
    from the beginning. Therefore, we are going to dockerize the Pinterest Vue.js
    3 app with the Strapi backend we developed in [*Chapter 6*](B17237_06.xhtml#_idTextAnchor192)*,
    Building a Complete Pinterest Clone with GraphQL*, and create a Docker image so
    that we can deploy that image any time or sometimes several times a day.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most importantly, you must download and install Docker in your local development
    system for local testing. You can go to this link to download and install it on
    different operating systems: [https://docs.docker.com/install/](https://docs.docker.com/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: Example project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 6*](B17237_06.xhtml#_idTextAnchor192)*, Building a Complete Pinterest
    Clone with GraphQL*, we developed a Pinterest clone using Vue.js 3 and Strapi
    for the backend. In this section, we will learn how to dockerize the project from
    scratch. Here is a demo of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – A screenshot of the Pinterest clone demo](img/Figure_7.02_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – A screenshot of the Pinterest clone demo
  prefs: []
  type: TYPE_NORMAL
- en: The application displays images in a masonry grid layout based on the number
    of images we have stored in our Strapi database.
  prefs: []
  type: TYPE_NORMAL
- en: The Strapi backend allows you to manage and control the entire backend of the
    application, from adding pins and boards to creating new users.
  prefs: []
  type: TYPE_NORMAL
- en: We will dockerize both the Vue.js 3 Pinterest app and the Strapi backend using
    individual Dockerfiles and multi-stage builds to create efficient Docker images.
  prefs: []
  type: TYPE_NORMAL
- en: Dockerizing the Pinterest app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will start by dockerizing the Pinterest Vue.js 3 application. In this multi-stage
    build, building a Vue.js 3 project and putting those static assets in the `dist`
    folder is the first step. So, let’s create a Dockerfile and configure our Vue.js
    3 application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Dockerfile in the root directory of your Pinterest clone Vue.js 3
    app. If the Strapi backend is still inside the frontend folder as you clone from
    the `Chapter 6` repository ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6)),
    you can create a parent folder and move the Strapi backend folder side by side
    with the frontend folder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – A screenshot of the current folder structure](img/Figure_7.03_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – A screenshot of the current folder structure
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you can clone the completed `Chapter 7` ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7))
    repository from this link, which contains the complete code base.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let’s explore the configuration file to dockerize the Vue.js 3 enterprise
    application. Open your Dockerfile and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code snippet is self-explanatory with the comments explaining every command
    we used in the Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s build the image with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Use the official Node.js 14 Alpine image from https://hub.docker.com/_/node.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using an image with specific version tags allows deterministic builds.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FROM node:14.16.1 AS builder
  prefs: []
  type: TYPE_NORMAL
- en: Create and change to the app directory.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WORKDIR /usr/src/backend
  prefs: []
  type: TYPE_NORMAL
- en: Copy important root files to the builder image.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: COPY package*.json ./
  prefs: []
  type: TYPE_NORMAL
- en: Install production dependencies.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RUN npm install
  prefs: []
  type: TYPE_NORMAL
- en: Copy the Backend source to the container image.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: COPY . .
  prefs: []
  type: TYPE_NORMAL
- en: build app for production with minification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RUN npm run build
  prefs: []
  type: TYPE_NORMAL
- en: EXPOSE 1337
  prefs: []
  type: TYPE_NORMAL
- en: Init final image generation.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FROM node:14.16.1
  prefs: []
  type: TYPE_NORMAL
- en: Run the Strapi service on container startup.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CMD ["npm", "start"]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: FROM node:14.15.0
  prefs: []
  type: TYPE_NORMAL
- en: ARG PACKAGE_PATH=
  prefs: []
  type: TYPE_NORMAL
- en: ARG WORKING_DIR=
  prefs: []
  type: TYPE_NORMAL
- en: WORKDIR ${WORKING_DIR}
  prefs: []
  type: TYPE_NORMAL
- en: COPY ${PACKAGE_PATH}/package*.json ${WORKING_DIR}
  prefs: []
  type: TYPE_NORMAL
- en: RUN npm install --silent
  prefs: []
  type: TYPE_NORMAL
- en: COPY ${PACKAGE_PATH} ${WORKING_DIR}
  prefs: []
  type: TYPE_NORMAL
- en: VOLUME $WORKING_DIR/node_modules
  prefs: []
  type: TYPE_NORMAL
- en: CMD [ "npm", "start" ]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: ARG PACKAGE_PATH=
  prefs: []
  type: TYPE_NORMAL
- en: ARG WORKING_DIR=
  prefs: []
  type: TYPE_NORMAL
- en: WORKDIR ${WORKING_DIR}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: COPY ${PACKAGE_PATH}/package*.json ${WORKING_DIR}
  prefs: []
  type: TYPE_NORMAL
- en: RUN npm install --silent
  prefs: []
  type: TYPE_NORMAL
- en: COPY ${PACKAGE_PATH} ${WORKING_DIR}
  prefs: []
  type: TYPE_NORMAL
- en: VOLUME $WORKING_DIR/node_modules
  prefs: []
  type: TYPE_NORMAL
- en: CMD [ "npm", "start" ]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'version: "3.5"'
  prefs: []
  type: TYPE_NORMAL
- en: 'services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'api:'
  prefs: []
  type: TYPE_NORMAL
- en: 'build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'context: .'
  prefs: []
  type: TYPE_NORMAL
- en: 'dockerfile: Dockerfile'
  prefs: []
  type: TYPE_NORMAL
- en: 'args:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PACKAGE_PATH: backend'
  prefs: []
  type: TYPE_NORMAL
- en: 'WORKING_DIR: /usr/src/'
  prefs: []
  type: TYPE_NORMAL
- en: 'expose:'
  prefs: []
  type: TYPE_NORMAL
- en: '- 1337'
  prefs: []
  type: TYPE_NORMAL
- en: 'ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '- 1337:1337'
  prefs: []
  type: TYPE_NORMAL
- en: 'environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '- NODE_ENV=development'
  prefs: []
  type: TYPE_NORMAL
- en: '- HOST=0.0.0.0'
  prefs: []
  type: TYPE_NORMAL
- en: '- PORT=1337'
  prefs: []
  type: TYPE_NORMAL
- en: '- BASE_URL=http://api:1337'
  prefs: []
  type: TYPE_NORMAL
- en: 'env_file:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ./.env'
  prefs: []
  type: TYPE_NORMAL
- en: 'volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ./backend:/usr/src'
  prefs: []
  type: TYPE_NORMAL
- en: 'command: >'
  prefs: []
  type: TYPE_NORMAL
- en: sh -c "npm install"
  prefs: []
  type: TYPE_NORMAL
- en: 'frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: 'build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'context: .'
  prefs: []
  type: TYPE_NORMAL
- en: 'dockerfile: Dockerfile'
  prefs: []
  type: TYPE_NORMAL
- en: 'args:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PACKAGE_PATH: frontend'
  prefs: []
  type: TYPE_NORMAL
- en: 'WORKING_DIR: /usr/src/'
  prefs: []
  type: TYPE_NORMAL
- en: 'expose:'
  prefs: []
  type: TYPE_NORMAL
- en: '- 3000'
  prefs: []
  type: TYPE_NORMAL
- en: 'ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '- 3000:3000'
  prefs: []
  type: TYPE_NORMAL
- en: 'environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '- APP_ENV=production'
  prefs: []
  type: TYPE_NORMAL
- en: '- APP_BACKEND=http://0.0.0.0:1337/api'
  prefs: []
  type: TYPE_NORMAL
- en: '- NODE_PATH=/usr/src/'
  prefs: []
  type: TYPE_NORMAL
- en: '- APP_TOKEN=eyJhbGciOiJIUzI1NiJ9.c29sb[STRAPI_TOKEN]'
  prefs: []
  type: TYPE_NORMAL
- en: 'env_file:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ./common.env'
  prefs: []
  type: TYPE_NORMAL
- en: 'volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ./frontend:/usr/src'
  prefs: []
  type: TYPE_NORMAL
- en: 'depends_on:'
  prefs: []
  type: TYPE_NORMAL
- en: '- api'
  prefs: []
  type: TYPE_NORMAL
- en: 'command: ["npm", "start"]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'build:'
  prefs: []
  type: TYPE_NORMAL
- en: 'context: .'
  prefs: []
  type: TYPE_NORMAL
- en: 'dockerfile: Dockerfile'
  prefs: []
  type: TYPE_NORMAL
- en: 'args:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PACKAGE_PATH: frontend'
  prefs: []
  type: TYPE_NORMAL
- en: 'WORKING_DIR: /usr/src/'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'expose:'
  prefs: []
  type: TYPE_NORMAL
- en: '- 3000'
  prefs: []
  type: TYPE_NORMAL
- en: 'ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '- 3000:3000'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '- APP_ENV=production'
  prefs: []
  type: TYPE_NORMAL
- en: '- APP_BACKEND=http://0.0.0.0:1337/api'
  prefs: []
  type: TYPE_NORMAL
- en: '- NODE_PATH=/usr/src/'
  prefs: []
  type: TYPE_NORMAL
- en: '- APP_TOKEN=eyJhbGciOiJIUzI1NiJ9.c29sb[STRAPI_TOKEN]'
  prefs: []
  type: TYPE_NORMAL
- en: 'env_file:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ./.env'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ./frontend:/usr/src'
  prefs: []
  type: TYPE_NORMAL
- en: 'depends_on:'
  prefs: []
  type: TYPE_NORMAL
- en: '- api'
  prefs: []
  type: TYPE_NORMAL
- en: 'command: ["npm", "start"]'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we call the command to execute the project. This same approach is repeated
    for the backend service. In the next section, we are going to learn how to run
    the project using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Running the app on Docker Compose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After creating a successful Docker Compose YAML configuration file, let’s run
    our Pinterest clone project using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start running the project, make sure to set up and install Docker
    and Docker Compose. Next, type `docker compose up` in your terminal root directory
    to deploy the project. Alternatively, type `docker-compose up` to use Docker Compose
    directly. The application will be served at `http://localhost:3000/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything is properly configured, you should be presented with a full stack
    Pinterest application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Preview of Pinterest application demo](img/Figure_7.05_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Preview of Pinterest application demo
  prefs: []
  type: TYPE_NORMAL
- en: If you are unsure about anything, please refer back to the code base of this
    chapter ([https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-7))
    to see the working and complete project setup.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored how to use Docker Compose to create and manage
    many services using the Dockerfile that we created in the previous section. We
    also learned how to bundle our full stack application, including the frontend,
    backend, and a database, using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter dove deeper into the nitty-gritty steps involved in dockerizing
    your Vue.js 3 project. In addition, we explored best practices and industry standards
    to dockerize and deploy an enterprise Vue.js 3 web application. We also learned
    how to dockerize a full stack web application using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Dockerfile, we were able to dockerize our Pinterest clone demo application
    so that it can be deployed and managed by other team members or on any cloud provider
    easily. Also, we learned how to bundle and manage a full stack application that
    includes the backend, the frontend, a database service, as well as many more features,
    all in a single file, using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will explore the concept of testing. You will learn
    what to test from an array of available components and methods. In addition, you
    will learn about best practices and industry standards related to testing libraries
    and how to integrate them with Vue.js 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Testing Enterprise Vue.js 3 Apps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing an enterprise project can be daunting and unnecessarily complex. This
    part will explore everything relating to enterprise testing and what to test precisely
    to eliminate time spent on testing the wrong code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B17237_08.xhtml#_idTextAnchor266), [*Testing and What to Test
    in*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=b958045c-cbca-b3c1-9404-61d6c95961a4)
    *Vue.js 3*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B17237_09.xhtml#_idTextAnchor322), [*Best Practices in Unit Testing*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=b5bd1ffc-0280-c217-aa63-61d6c9ee0198)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B17237_10.xhtml#_idTextAnchor363), [*Integration Testing in
    Vue.js 3*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=907b43f6-1d49-47b3-a4ac-63835de51e8f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B17237_11.xhtml#_idTextAnchor420), *Industry Standard End-to-End
    Testing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
