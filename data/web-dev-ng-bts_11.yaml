- en: Dependency Injection and Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖注入和服务
- en: In this chapter, we're going to take a look at **dependency injection** (**DI**).
    While DI is not something that you have to program directly in Angular (since
    Angular takes care of all the DI plumbing for us), it still is something that
    is very useful to understand. This is because Angular makes heavy use of DI when
    managing its services, as well as any custom services that you are likely to write
    as you create your Angular applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究**依赖注入**（**DI**）。虽然DI不是您必须直接在Angular中编程的东西（因为Angular会为我们处理所有DI管道），但了解它仍然非常有用。这是因为Angular在管理其服务时大量使用DI，以及您在创建Angular应用程序时可能编写的任何自定义服务。
- en: We'll be looking at one of Angular's most important built-in services, its HTTP
    service, in the next chapter, [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml),
    *Integrating Backend Data Services*. Without the HTTP service, our applications
    would be super boring, since they would be unable to send data to, or receive
    data from, an outside source (including our own backend APIs). And so this chapter
    will serve us well in terms of helping us gain an understanding of how Angular
    injects services such as its HTTP service into our applications for us to use.
    Moreover, this topic is a perfect segue into the next chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究Angular最重要的内置服务之一，即其HTTP服务，[第12章](9610f27b-03db-4258-8a68-24eb3901117b.xhtml)，*集成后端数据服务*。没有HTTP服务，我们的应用程序将非常无聊，因为它们将无法向外部来源（包括我们自己的后端API）发送数据或接收数据。因此，本章将有助于我们更好地理解Angular如何将诸如其HTTP服务之类的服务注入到我们的应用程序中供我们使用。此外，这个主题是进入下一章的完美过渡。
- en: 'Here is a list of the topics that we''re going to cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的主题列表：
- en: What is DI?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是DI？
- en: What problem does it solve?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它解决了什么问题？
- en: Additional advantages of using DI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DI的额外优势
- en: Revealing the magic that Angular uses to make it all work
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭示Angular用于使一切正常运行的魔法
- en: How we can guard against code minification (and why we need to)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何防范代码最小化（以及为什么我们需要这样做）
- en: By the end of this chapter, you'll have a solid grasp on what this often misunderstood
    software design pattern is, and, more importantly, how it works. Dare I say, you
    may even start to feel more technically advanced than most of your peers. Many
    developers sometimes struggle to even define DI—because it does take some effort
    to wrap your mind around it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将对这种经常被误解的软件设计模式有扎实的理解，更重要的是，它是如何工作的。我敢说，您甚至可能开始感觉比大多数同行更具技术先进性。许多开发人员有时甚至难以定义DI——因为需要一些努力来理解它。
- en: Without further ado, let's get started and discover what DI is all about by
    *injecting* some more software design knowledge into our heads.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，让我们开始吧，通过*注入*更多软件设计知识来发现DI的全部内容。
- en: What is DI?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是DI？
- en: Cutting to the chase, DI is a specific case of the **Inversion of Control**
    (**IoC**) design pattern.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不废话，DI是**控制反转**（**IoC**）设计模式的一个特定案例。
- en: 'In order to understand this high-level definition of DI, or even IoC, we first
    need to quickly define design patterns. Design patterns are reusable solutions
    to common problems in software design. There are dozens of software design patterns,
    and they are typically categorized into the following three high-level categories:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解DI的高级定义，甚至是IoC，我们首先需要快速定义设计模式。设计模式是软件设计中常见问题的可重用解决方案。有数十种软件设计模式，它们通常被分类为以下三个高级类别：
- en: Creational patterns
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模式
- en: Structural patterns
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构模式
- en: Behavioral patterns
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为模式
- en: In our case, and in the interest of brevity, we can safely ignore the creational
    and structural categories of design patterns, since DI is a type of behavioural
    design pattern, and just before we take a look at the IoC design pattern (I know,
    there are a lot of definitions and concepts we need to know as prerequisites to
    truly appreciate what DI is), let's describe what behavioral design patterns are.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，为了简洁起见，我们可以安全地忽略创建和结构类别的设计模式，因为DI是一种行为设计模式。在我们了解IoC设计模式之前，让我们先描述一下行为设计模式是什么。
- en: Simply put, behavioral design patterns concern themselves with how objects communicate
    with one another. One such pattern is known as the observer design pattern, which
    basically sets forth a way of how an object notifies its dependent objects of
    when its state changes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，行为设计模式关注对象之间的通信方式。其中一种模式被称为观察者设计模式，它基本上规定了对象如何通知其依赖对象其状态何时发生变化。
- en: Another behavioral design pattern is known as the publish-subscribe design pattern,
    which is a messaging pattern similar to the observer pattern, but a little fancier.
    Yet another behavioral design pattern is the template method. The purpose of this
    design pattern is to defer the exact implementation of an algorithm to a subclass.
    The overall idea behind all of these design patterns is the way they communicate
    (that is, message) with one another.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个行为设计模式被称为发布-订阅设计模式，这是一种类似观察者模式但更加复杂的消息模式。另一个行为设计模式是模板方法。这种设计模式的目的是将算法的具体实现推迟到子类中。所有这些设计模式的总体思想都是它们之间的通信方式（即消息）。
- en: Armed with a definition of what the template method is, we're getting much closer
    to what DI is all about, but just before we do, there is one last remaining design
    pattern that we need to define. You guessed it—the IoC design pattern. Remember,
    DI is a special case of the IoC pattern, and so we really do need to take a quick
    look at what it is.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有了模板方法的定义，我们离理解DI的本质更近了一步，但在我们开始之前，还有一个设计模式需要定义。你猜对了——IoC设计模式。记住，DI是IoC模式的一个特例，所以我们确实需要快速了解一下它是什么。
- en: IoC flips the typical flow of procedural, or imperative, code on its head. Instead
    of having a custom object's code control the flow of the program by instantiating
    another object and then calling one or more of the newly instantiated object's
    methods, it defers the instantiation to a framework—yes, a framework, not just
    another object—to do that instead. This will all make sense in a few moments.
    As an interesting tidbit, this is sometimes jokingly referred to as *Don't call
    us, we'll call you*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: IoC颠覆了典型的过程式或命令式代码流程。它不是由自定义对象的代码控制程序流程，而是将实例化的过程推迟到一个框架来完成。这一切马上就会变得清晰起来。有趣的是，有时候这被戏称为“不要打电话给我们，我们会打电话给你”。
- en: We're going to look at an example of this shortly so that it all makes sense.
    However, I need to define what I mean by a framework doing the instantiation of
    dependent objects. Don't you just love all the terms and concepts we need to know?
    (grinning). This framework is typically referred to as an IoC container. These
    containers are smart enough to be able to examine the custom code, figure out
    what other objects it depends on, instantiate those objects, and pass them into
    the custom object's constructor. This is opposed to the traditional way of having
    the instantiation of the object's dependencies happen within the custom object
    itself. Instead, the IoC container performs these duties for it. In a moment,
    I will tie this back to Angular and give you a couple of very important advantages
    that the IoC pattern provides, but we'll discuss it from the DI perspective—finally!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快将看一个例子，以便一切都说得通。然而，我需要定义一下我所说的框架实例化依赖对象的意思。你难道不喜欢我们需要了解的所有术语和概念吗？（笑）这个框架通常被称为IoC容器。这些容器足够智能，能够检查自定义代码，找出它依赖的其他对象，实例化这些对象，并将它们传递到自定义对象的构造函数中。这与传统方式相反，传统方式是在自定义对象本身内部实例化对象的依赖项。相反，IoC容器为其执行这些职责。一会儿，我将把这与Angular联系起来，并给出IoC模式提供的一些非常重要的优势，但我们将从DI的角度来讨论——最后！
- en: OK. Let's try to tie this all together and provide an example scenario, or use
    case. The Angular framework provides the functionality of an IoC container—among
    all the other things that it provides. Since Angular is a modular framework and
    encapsulates most of what it does in segregated services, it would make sense
    that its IoC capabilities are also encapsulated in one of its services—and, in
    fact, this is the case.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。让我们试着把这一切联系起来，并提供一个示例场景或用例。Angular框架提供了IoC容器的功能——除了提供的所有其他功能之外。由于Angular是一个模块化框架，并且封装了大部分功能在分离的服务中，因此它的IoC功能也被封装在其中一个服务中——事实上，就是这种情况。
- en: The Angular service responsible for DI is its injector service—aptly named because
    it injects your custom class's dependencies into your class's constructor after
    instantiating them. Not only that, but it calls the custom method for you—back
    to what I had previously mentioned, *Don't call us, we'll call you*. All we need
    to do is to list the names of the dependencies in the constructor's signature
    for our custom class.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Angular负责DI的服务是其注入器服务，恰如其名，因为它在实例化后将你的自定义类的依赖项注入到你的类构造函数中。不仅如此，它还为你调用自定义方法，回到我之前提到的，*别打电话给我们，我们会打电话给你*。我们所需要做的就是在自定义类的构造函数签名中列出依赖项的名称。
- en: From this point forward, I will not mention IoC, because we're talking about
    DI—again,this is technically not IoC, but rather a special case of it. I only
    mention this because many developers use the terms IoC and DI synonymously.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我不会再提IoC，因为我们正在谈论DI——再次强调，这在技术上不是IoC，而是它的一个特例。我之所以提到这一点，是因为许多开发人员将IoC和DI视为同义词。
- en: 'So, let''s ask a couple of questions: Since DI is a design pattern, and design
    patterns solve common software design problems, what problems does DI solve? What
    are the advantages of DI? These are excellent questions, and I believe I can answer
    them in one fell swoop in the following two paragraphs.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们问几个问题：由于DI是一种设计模式，设计模式解决常见的软件设计问题，DI解决了什么问题？DI的优势是什么？这些都是很好的问题，我相信我可以在接下来的两段话中一举解答。
- en: 'One problem that even object-oriented code has had for a very long time is
    that a class that depends on other classes (which is the whole point of object
    orientation—since we don''t want one class to do all of the work) had the code
    to instantiate these dependencies within itself, and, as a result, contained at
    least some of the logic intertwined within it as well. This is known as code that
    is tightly coupled. There are two problems with tightly coupled code: firstly,
    the implantation logic is typically encapsulated within the class—which is something
    we don''t want. We don''t want one object to know the inner workings of other
    objects. For instance—if we wanted to change the implementation of an algorithm
    in a dependent class, we''d likely also have to change our code in the class that
    calls it. Another problem that stems from this is that this code is difficult
    to test. The more tightly coupled our classes are, the harder it is to run our
    unit tests on them—and this problem has been around for as long as unit testing
    has.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是面向对象的代码也存在一个很长时间的问题，那就是一个依赖其他类的类（这也是面向对象的重点——因为我们不希望一个类来完成所有的工作）在自身内部包含了实例化这些依赖关系的代码，并且结果是至少部分逻辑也与之交织在一起。这被称为紧密耦合的代码。紧密耦合的代码有两个问题：首先，实现逻辑通常封装在类内部——这是我们不想要的。我们不希望一个对象了解其他对象的内部工作。例如——如果我们想要更改依赖类中算法的实现，我们很可能也必须更改调用它的类中的代码。由此产生的另一个问题是，这种代码很难测试。我们的类耦合得越紧，对它们进行单元测试就越困难——这个问题已经存在了很长时间。
- en: 'OK. So how does DI solve these issues? We''ll get to a specific use case to
    make everything clearer in our minds, but let''s first describe a couple of the
    advantages that DI gives us. The first advantage of the principle of DI is that
    it forces us to write decoupled code. We do this by having the classes that we
    depend on (for their abstracted implementations) implement interfaces, and we
    do this so that all our calling class needs to do is to call the interface methods
    on these objects—not caring about the implementation details behind the underlying
    class methods. When we write code in this manner, we can swap out the class we
    depend on, which has a specific implementation, for another class that has another
    implementation—all without changing any of our calling code (since our code calls
    the interface methods that these classes implement). This is also sometimes referred
    to as coding by the interface. Here''s another interesting tidbit: this technique
    is also used in a style of programming known as aspect-oriented programming, or
    AOP for short.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。那么DI是如何解决这些问题的呢？我们将会通过一个具体的用例来让我们更清楚地理解一切，但首先让我们描述一下DI给我们带来的一些优势。DI原则的第一个优势是它强制我们编写解耦的代码。我们通过让我们依赖的类（用于其抽象实现）实现接口来实现这一点，我们这样做是因为我们调用的类只需要调用这些对象上的接口方法，而不关心底层类方法的实现细节。当我们以这种方式编写代码时，我们可以替换我们依赖的具有特定实现的类，用另一个具有另一种实现的类，而不需要更改我们的任何调用代码（因为我们的代码调用这些类实现的接口方法）。这有时也被称为按接口编码。还有一点有趣的是：这种技术也被用于一种称为面向方面编程（AOP）的编程风格中。
- en: A very useful thing that we get for free by adhering to the DI design principal,
    is that we can very easily test our code—as opposed to not being able to test
    our code easily, or at all, as is the case when we have tightly coupled code.
    How do we do this? By writing stubs and/or mock classes—which also implement these
    very same interfaces that our calling class calls.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循DI设计原则所获得的一个非常有用的东西是，我们可以非常容易地测试我们的代码——与无法轻松测试我们的代码，或者根本无法测试我们的代码相比。我们如何做到这一点呢？通过编写存根和/或模拟类——这些类也实现了我们调用的这些相同的接口。
- en: As a side note, there is an important difference between stubs and mocks. Stubs
    are dumb classes, which often just return a simple value (often hardcoded). Mock
    objects, on the other hand, typically have full implementations so that things
    such as edge cases can be tested—as well as to conduct database operations, or
    make RESTful API calls. Mocks can be used to do whatever your tests call for.
    So, stubs are dumb, while mocks are smart. What they have in common, however,
    is that they help us unit test our calling class's code by having the same object
    messaging pattern (that is, their methods are called via interfaces).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，存根和模拟之间有一个重要的区别。存根是愚蠢的类，通常只返回一个简单的值（通常是硬编码的）。另一方面，模拟对象通常具有完整的实现，以便测试边缘情况，以及进行数据库操作或进行RESTful
    API调用。模拟可以用来做任何你的测试需要的事情。所以，存根是愚蠢的，而模拟是聪明的。然而，它们的共同之处在于，它们通过具有相同的对象消息模式（也就是，它们的方法是通过接口调用的）来帮助我们对调用类的代码进行单元测试。
- en: Whew! We're done with the theory part! Have you fallen asleep or are you still
    with me? Ah, you're awake—OK, good. With all that theory now out of the way, let's
    take a look at an example use case of where DI can be used for all the reasons
    mentioned previously—just so we can cement these concepts into our heads.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！我们完成了理论部分！你是不是已经睡着了，还是还在听我说话？啊，你醒着了——好的。现在所有的理论都已经讲完了，让我们来看一个使用DI的示例用例，以便我们可以将这些概念牢固地铭刻在我们的脑海中。
- en: Let's assume that we're building an e-commerce application for an online store
    where we sell our homemade beer. Our application will need to have a shopping
    cart, and we'll also have to have at least one merchant account (which is a conduit,
    known as a payment processing gateway, so we can charge our customers' credit
    cards). In this hypothetical scenario, we have two merchant accounts—maybe because
    we'd like to keep one as a spare in case the primary merchant account increases
    their discount rates (that is, fees), thereby lowering our profits—but the point
    is, we have two merchant accounts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在为一个在线商店构建一个电子商务应用程序，我们在这里出售我们自制的啤酒。我们的应用程序将需要一个购物车，我们还必须至少有一个商户账户（这是一个通道，被称为支付处理网关，这样我们就可以向我们的客户收取信用卡费用）。在这个假设的情景中，我们有两个商户账户——也许是因为我们想保留一个备用账户，以防主要的商户账户增加他们的折扣率（也就是费用），从而降低我们的利润——但重点是，我们有两个商户账户。
- en: When it comes to implementing the shopping cart, we want to be able to swap
    out one merchant account for another one—if we need to—without changing the code
    in our shopping cart class. The reason we don't want to change any code is that
    we may accidentally introduce bugs in our application (the online store), and
    this just wouldn't look good to customers. You may be saying—*Hey, I test my code—so
    bugs are fleshed out*—and if you said that, you fell right into the next benefit
    of using DI for our application, which is that we can easily test our application
    by writing test classes—remember our stubs and mocks? Yes—we write stubs and mocks
    so we can test our code. And again, thanks to DI, we don't have to change our
    shopping cart class to do so. We have our stubs and mocks implement the interfaces.
    And we would wrap the bank's APIs (that is, our merchant account classes—written
    by a third party) in a custom class that implements our interface—so that all
    these classes (that is, our stubs, mocks, and wrapped real bank objects) can be
    called in the exact same way.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现购物车时，我们希望能够在不更改购物车类中的代码的情况下，将一个商家账户替换为另一个商家账户，如果需要的话。我们不希望更改任何代码的原因是，我们可能会在我们的应用程序（在线商店）中意外引入错误，这对顾客来说并不好看。你可能会说——*嘿，我测试我的代码——所以错误都被找出来了*——如果你这样说，那么你正好掉入了使用DI为我们的应用程序带来的下一个好处，那就是我们可以通过编写测试类轻松测试我们的应用程序——还记得我们的存根和模拟吗？是的——我们编写存根和模拟，这样我们就可以测试我们的代码。再次感谢DI，我们不必更改我们的购物车类来实现这一点。我们的存根和模拟实现接口。我们会将银行的API（即，由第三方编写的商家账户类）封装在一个实现我们接口的自定义类中，这样所有这些类（即我们的存根、模拟和封装的真实银行对象）都可以以完全相同的方式被调用。
- en: Cool. So, as a bonus, let's take a quick look at how Angular knows what our
    class needs, and how it can call our class's constructor method for us. Well,
    it's not magic, but it is ingenious. However, Angular does need a little upfront
    help from us. When we create custom classes, for our application, we typically
    wrap them up as Angular services (we'll take a look at services in the next chapter,
    [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml), *Integrating Backend
    Data Services*). Angular requests that we register these services with it, and
    you'll see why we need to do this in a moment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。所以，作为一个额外的奖励，让我们快速看一下Angular如何知道我们的类需要什么，以及它如何为我们调用我们类的构造函数方法。嗯，这并不是魔术，但确实很巧妙。然而，Angular确实需要我们的一点点前期帮助。当我们为我们的应用程序创建自定义类时，通常会将它们封装为Angular服务（我们将在下一章[第12章](9610f27b-03db-4258-8a68-24eb3901117b.xhtml)中看到服务，*集成后端数据服务*）。Angular要求我们在其中注册这些服务，并且您将看到为什么我们需要在一会儿这样做。
- en: Angular's injector service scans our code, specifically, our class's constructor
    signature, and figures out its parameters. Because our parameters are services
    that we need for our class, it knows that the parameters are services. It then
    matches the text of the service name against the manifest of its own services,
    as well as any custom services that we wrote ourselves, and when a match is found,
    it instantiates that service object. The reason it can do this is that it knows
    its own services, and it knows what services we wrote because we had to register
    them with Angular.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的注入器服务扫描我们的代码，具体来说，扫描我们类的构造函数签名，并找出其参数。因为我们的参数是我们类需要的服务，它知道这些参数是服务。然后，它将服务名称的文本与自己的服务清单以及我们自己编写的任何自定义服务进行匹配，当找到匹配时，它实例化该服务对象。它之所以能够做到这一点，是因为它知道自己的服务，也知道我们编写的服务，因为我们必须在Angular中注册它们。
- en: The next thing Angular does, once it has these instantiated service objects,
    is to call our class's constructor, passing the objects in as the arguments. That
    is the injection process that Angular's injector service does. One more time,
    say it with me: *Don't call us, we'll call you*. And just like that, the magic
    behind what Angular does has been explained away. Still, it's very cool and we
    should tip our hat to the Angular development team.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Angular实例化了这些服务对象，下一步就是调用我们类的构造函数，并将对象作为参数传递进去。这就是Angular的注入器服务所做的注入过程。再说一遍：*不要打电话给我们，我们会打电话给你*。就像这样，Angular背后的魔法已经被解释清楚了。不过，这仍然非常酷，我们应该向Angular开发团队致敬。
- en: Generating services and interfaces
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成服务和接口
- en: 'Now that we have learned about DI and design patterns, in this section, we
    will learn to create our services. Angular CLI provides us with the fastest and
    easiest way to generate services inside our project. We will create a sample project
    called `LearningDIServices` by running the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了DI和设计模式，在本节中，我们将学习如何创建我们的服务。Angular CLI为我们提供了在项目内部生成服务的最快最简单的方法。我们将通过运行以下命令创建一个名为`LearningDIServices`的示例项目：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We are creating a new Angular project using the `ng` command, and we name the
    project `LearningDIServices`. Upon successful execution of the command, we should
    see the output shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ng`命令创建一个新的Angular项目，并将项目命名为`LearningDIServices`。成功执行命令后，我们应该看到以下截图中显示的输出：
- en: '![](assets/0dc77003-59b5-4b85-b4c9-b2d981395a23.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0dc77003-59b5-4b85-b4c9-b2d981395a23.png)'
- en: 'Now that we have our project directory created, using the Angular CLI, we will
    generate a few services and interfaces. We will create a service called `Photos`.
    Run the following command and we should see the service added to our project directory:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了项目目录，使用Angular CLI，我们将生成一些服务和接口。我们将创建一个名为`Photos`的服务。运行以下命令，我们应该看到服务已添加到我们的项目目录中：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Upon successful execution, we should see the output shown in the following
    screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行后，我们应该看到以下截图中显示的输出：
- en: '![](assets/fc60bcb9-dd04-46a4-9496-239097d1edfe.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc60bcb9-dd04-46a4-9496-239097d1edfe.png)'
- en: 'We can see that there are two new files generated. One is the service file,
    and the other is the spec file, which is for writing the tests for the service.
    Let''s take a closer look at the files containing autogenerated code for the `photo.service.ts`
    file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到生成了两个新文件。一个是服务文件，另一个是用于编写服务测试的规范文件。让我们仔细看看包含自动生成代码的`photo.service.ts`文件：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, we can see that the `Injectable` class needs to be imported
    from the `angular/core` library. The `Injectable` class allows us to make the
    service inject in various component classes so that we can reuse the methods.
    Using the injectable decorator, we are explicitly mentioning that the service
    needs to be injected in the root. And finally, we are exporting our `PhotosService`
    class, which will contain the constructor method and other methods that we will
    create, specific to our application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们可以看到`Injectable`类需要从`angular/core`库中导入。`Injectable`类允许我们将服务注入到各种组件类中，以便我们可以重用方法。使用可注入的装饰器，我们明确指出服务需要在根中注入。最后，我们导出我们的`PhotosService`类，其中将包含我们将为我们的应用程序创建的构造方法和其他方法。
- en: Unlike the Angular components, there is no need to update `app.module.ts` file
    with an entry of the service.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与Angular组件不同，无需更新`app.module.ts`文件以添加服务的条目。
- en: 'In previous sections, we learned about the overview of interfaces. Now, let''s
    quickly learn how to generate use of the interfaces in our applications. Using
    Angular CLI, we can also quickly create interfaces:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了接口的概述。现在，让我们快速学习如何在我们的应用程序中使用接口。使用Angular CLI，我们也可以快速创建接口：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding command, we have generated an interface named `photo` and,
    once the preceding command is executed successfully, we should see the following
    output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的命令中，我们生成了一个名为`photo`的接口，一旦上面的命令成功执行，我们应该看到以下输出：
- en: '![](assets/f020b705-6285-4798-8da1-ca1a2ce25e9a.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f020b705-6285-4798-8da1-ca1a2ce25e9a.png)'
- en: 'Let''s take a closer look at the interface files that are generated. The following
    is the default code generated:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看生成的接口文件。以下是默认生成的代码：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can see it''s empty intentionally. Since interfaces are used to define the
    entity or model classes, each interface created in the application will be unique
    and specific to each application. Now, if we want to create an interface for our
    photos, we will have to define it as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它是故意留空的。由于接口用于定义实体或模型类，应用程序中创建的每个接口都将是独特的，并且特定于每个应用程序。现在，如果我们想为我们的照片创建一个接口，我们将不得不定义如下：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding sample code, we have created an interface for photos with some
    properties and their data types. This will allow us to create strictly typed objects
    for photos.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例代码中，我们为照片创建了一个带有一些属性和它们的数据类型的接口。这将允许我们为照片创建严格类型的对象。
- en: In this section, we learned to create Angular services and interfaces. Even
    if some of the concepts are not very clear, do not worry, my friend. We have an
    entire chapter dedicated to showing you how to generate and implement services
    in our applications. In the next chapter, we will learn how to implement and use
    them, and also integrate them into our components.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何创建Angular服务和接口。即使一些概念不是很清楚，不要担心，我的朋友。我们有一个完整的章节专门向您展示如何在我们的应用程序中生成和实现服务。在下一章中，我们将学习如何实现和使用它们，并将它们集成到我们的组件中。
- en: Guarding against code minification
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止代码最小化
- en: There is one last thing that I would like to cover really quickly, and that
    is code minification and how we can guard against it. Code minification is the
    process of compressing our code by removing the whitespace, as well as replacing
    variable names with very short symbols. This is done when we compile our Angular
    application so that it becomes a smaller package that our users have to download
    (once we've deployed our application) to retrieve our application. But this does
    present a problem for us. It can wreck our day by changing the parameter names
    and then Angular can no longer match the names against the service manifest. Fortunately,
    there is an easy solution. If we add single quotes around our parameter names,
    we protect our code against code minification. How? Well, putting quotes around
    the service names turns them into literal strings, and the minification process
    does not compress or change strings—it leaves them intact. This is because literal
    strings have a meaning outside of syntax, and is not code. Minification just minifies
    code (that is, variable and function names, and whitespace). That's all you have
    to know about protecting your code from code minification.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件我想很快覆盖的最后一件事，那就是代码缩小以及我们如何防范它。代码缩小是通过去除空格以及用非常短的符号替换变量名来压缩我们的代码的过程。这是在我们编译Angular应用程序时完成的，这样它就成为了一个更小的包，我们的用户必须下载（一旦我们部署了我们的应用程序）来检索我们的应用程序。但这对我们来说确实存在问题。它可能会通过更改参数名称来破坏我们的一天，然后Angular就无法再将名称与服务清单匹配。幸运的是，有一个简单的解决方案。如果我们在参数名称周围添加单引号，我们就可以保护我们的代码免受代码缩小的影响。怎么做呢？好吧，在服务名称周围加上引号会将它们转换为文字字符串，而缩小过程不会压缩或更改字符串——它们会保持原样。这是因为文字字符串在语法之外有意义，不是代码。缩小只是缩小代码（即变量和函数名称以及空格）。这就是你需要知道的关于保护你的代码免受代码缩小的影响的一切。
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You should now feel comfortable with what DI is, and what problem it solves.
    You should also be able to list a few of the advantages—thus being able to explain
    why DI is a good principle for us to follow in designing our applications. And
    you should also be comfortable in explaining away the seemingly magical feats
    that Angular performs in making everything work out of the box. And finally, you
    should also now know how to guard your DI code against code minification.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该对DI是什么以及它解决了什么问题感到满意。你也应该能够列举一些优势，从而能够解释为什么DI是我们在设计应用程序时要遵循的一个好原则。你还应该能够轻松地解释Angular在使一切都能开箱即用方面表现出的看似神奇的技能。最后，你现在也应该知道如何保护你的DI代码免受代码缩小的影响。
- en: Armed with this DI knowledge, we can now continue our journey into discovering
    one of Angular's most useful services, its HTTP service, in [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml),
    *Integrating Backend Data Services*. Once you complete the next chapter, you will
    be ready to write code to integrate your Angular application with virtually any
    RESTful API-compliant application and/or service that your application is authorized
    to talk to. That should sound exciting to you! If it does, turn the page and continue
    your journey to Angular enlightenment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了这些DI知识，我们现在可以继续我们的旅程，探索Angular最有用的服务之一，即它的HTTP服务，在[第12章](9610f27b-03db-4258-8a68-24eb3901117b.xhtml)中，*集成后端数据服务*。一旦你完成了下一章，你就可以准备编写代码，将你的Angular应用程序与几乎任何符合RESTful
    API标准的应用程序和/或服务集成，只要你的应用程序被授权与之通信。这对你来说应该是令人兴奋的！如果是的话，翻页并继续你的Angular启蒙之旅。
