- en: '*Chapter 10*: Creating Gatsby Plugins'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：创建 Gatsby 插件'
- en: In this chapter, we will look at Gatsby's plugin ecosystem. We'll start by learning
    how to make our Gatsby site more modular as it grows. We will then create our
    first source plugin to fetch data from GitHub. We will also create our first theme
    plugin to create events pages for our website. Finally, we will learn how to share
    our plugins with the world via Gatsby's plugin ecosystem.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Gatsby 的插件生态系统。我们将从学习如何使我们的 Gatsby 网站在增长过程中变得更加模块化开始。然后，我们将创建我们的第一个源插件，从
    GitHub 获取数据。我们还将创建我们的第一个主题插件，为我们的网站创建活动页面。最后，我们将学习如何通过 Gatsby 的插件生态系统将我们的插件与世界分享。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding Gatsby plugins
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Gatsby 插件
- en: Introducing local plugin development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍本地插件开发
- en: Creating source plugins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建源插件
- en: Creating theme plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建主题插件
- en: Contributing to the plugin ecosystem
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献插件生态系统
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you will need to have completed [*Chapter 9*](B15983_09_ePub_RK.xhtml#_idTextAnchor127),
    *Deployment and Hosting*. You will also need a GitHub account.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，你需要完成 [*第 9 章*](B15983_09_ePub_RK.xhtml#_idTextAnchor127)，*部署和托管*。你还需要一个
    GitHub 账户。
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter10](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter10).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在 [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter10](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter10)
    找到。
- en: Understanding Gatsby plugins
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Gatsby 插件
- en: By this stage in this book, you should have all the tools you need to get a
    Gatsby site into production. In this chapter, we are going to go one step further
    and talk about creating reusability across multiple Gatsby sites using something
    called **Gatsby plugins**. Gatsby plugins are node packages that abstract common
    site functionality that utilizes Gatsby APIs. By bundling functionality into a
    plugin, you can source data, create pages, implement SEO, and so much more with
    just a few lines. Gatsby plugins also act as a way to modularize larger sites
    into more manageable chunks of functionality.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到这本书的这一阶段，你应该已经拥有了将 Gatsby 网站投入生产所需的所有工具。在本章中，我们将更进一步，讨论如何使用所谓的 **Gatsby 插件**
    在多个 Gatsby 网站之间实现可重用性。Gatsby 插件是抽象化利用 Gatsby API 的常见网站功能的节点包。通过将功能打包到插件中，你只需几行代码就可以获取数据、创建页面、实施
    SEO 以及更多操作。Gatsby 插件还充当了一种将大型网站模块化为更易管理的功能块的方式。
- en: 'The two most common types of plugins are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的两种插件类型如下：
- en: '`gatsby-node.js` file, as well as within your pages.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gatsby-node.js` 文件，以及在你的页面中。'
- en: '**Gatsby Theme Plugins**: Theme plugins focus more on the user interface of
    your application. Often, theme plugins contain code that creates pages of a site,
    such as an FAQ section. They act to split your Gatsby site into smaller manageable
    projects, which can be very useful when you have multiple teams working on the
    same site.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gatsby 主题插件**：主题插件更多地关注应用程序的用户界面。通常，主题插件包含创建网站页面的代码，例如常见问题解答部分。它们将你的 Gatsby
    网站分割成更小的、更易管理的项目，当有多个团队在同一网站上工作时，这非常有用。'
- en: These two types can be identified by the plugin name, which will either begin
    with `gatsby-source` or `gatsby-theme`. While these two types are the most common,
    they are not the only types. Plugins that encapsulate any other functionality
    have a plugin name that begins with `gatsby-plugin`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种类型可以通过插件名称来识别，它将分别以 `gatsby-source` 或 `gatsby-theme` 开头。虽然这两种类型是最常见的，但它们并不是唯一的类型。封装其他任何功能的插件，其插件名称将以
    `gatsby-plugin` 开头。
- en: Before we dive in and start creating plugins, let's learn about local plugin
    development so that we can avoid common pitfalls.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨并开始创建插件之前，让我们先了解本地插件开发，这样我们可以避免常见的陷阱。
- en: Introducing local plugin development
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍本地插件开发
- en: Local plugin development begins with a new folder called `plugins`, which you
    need to create within your root directory. This is the folder that will house
    the plugins we create. When you add a plugin to your Gatsby config, Gatsby first
    looks within your `node_modules` folder. If it cannot find a plugin there, it
    will check within this local `plugins` folder. If it finds a plugin here with
    the same name within its `package.json` file, it will use it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本地插件开发从名为`plugins`的新文件夹开始，您需要在您的根目录中创建此文件夹。这是我们将存放我们创建的插件的文件夹。当您将插件添加到Gatsby配置中时，Gatsby首先会在您的`node_modules`文件夹内查找。如果在那里找不到插件，它将检查这个本地的`plugins`文件夹。如果在这个文件夹中找到了具有相同名称的插件，并且其`package.json`文件中也有相同的插件，它将使用它。
- en: As you may have guessed by the mention of a `package.json` file, plugins come
    in the form of npm packages. npm packages take care of their dependencies, so
    it is important that, when you're installing packages for use in a plugin, you
    make sure that you open the terminal within the plugin's folder and not the root
    directory. Otherwise, your site and plugin dependencies may be inaccurate.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如您通过提及`package.json`文件所猜测的那样，插件以npm包的形式存在。npm包负责处理它们的依赖项，因此当您为插件安装包时，您需要确保在插件的文件夹内而不是根目录中打开终端。否则，您网站和插件的依赖项可能不准确。
- en: Quick Tip
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: If you don't have any intention of ever sharing the plugins you create, you
    can choose to install dependencies that your plugins require in the root directory
    instead. This can be easier to manage if you prefer having one source of truth
    for your dependencies. But be careful – *if you think the plugin could be shared
    at any point, do not do this*, as you will have to manually sort through your
    dependencies and find those that the plugin requires.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有打算分享您创建的插件，您可以选择在根目录中安装插件所需的依赖项。如果您更喜欢有一个依赖项的单一来源，这可能更容易管理。但请注意 - *如果您认为插件可能在任何时刻被分享，请不要这样做*，因为您将不得不手动整理您的依赖项并找到插件所需的那些。
- en: While creating local plugins, you may find that your code does not behave like
    the rest of your project. Let's look at how we can debug common issues.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建本地插件时，您可能会发现您的代码并不像您的其他项目那样表现。让我们看看我们如何调试常见的问题。
- en: Debugging local plugins
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试本地插件
- en: 'Gatsby does not treat the local plugins folder the same as the rest of the
    code base. Changes to pages, templates, and configs may not necessarily appear
    while hot reloading. Here are a couple of tips to make your life a little easier:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby不会将本地插件文件夹与其他代码库同等对待。对页面、模板和配置的更改在热重载时可能不会必然出现。这里有一些小贴士可以让您的生活更加轻松：
- en: If you make a change and do not see it reflected, even after restarting the
    server, try clearing the cache using `gatsby clean`. Gatsby caches plugin data
    in the `.cache` folder. To make itself faster, Gatsby uses this cache.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您做了更改，即使在重启服务器后也没有看到反映，请尝试使用`gatsby clean`清除缓存。Gatsby在`.cache`文件夹中缓存插件数据。为了使自身更快，Gatsby使用这个缓存。
- en: 'If you are unsure whether your plugin is even being run, try adding the following
    command to your plugin''s `gatsby-node.js` file:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不确定您的插件是否正在运行，请尝试将以下命令添加到您的插件的`gatsby-node.js`文件中：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will run first during Gatsby's execution. If Gatsby is aware of
    your plugin, you will see **Plugin Started!** logged to the console.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将在Gatsby执行期间首先运行。如果Gatsby知道您的插件，您将在控制台看到**Plugin Started!**的日志。
- en: Now that we know when it's a good idea to make plugins, let's learn how we can
    create them.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了何时创建插件是个好主意，让我们学习如何创建它们。
- en: Creating source plugins
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建源插件
- en: 'As we mentioned in the *Understanding Gatsby plugins* section, source plugins
    are those that allow us to ingest data from a new source into our GraphQL layer.
    By creating a source plugin, we abstract the logic to source this data away from
    our site so that we can reuse it across multiple Gatsby projects if we want to.
    To understand how source plugins work, let''s build one together. Let''s source
    our total contributions from GitHub so that we can display them on our **about**
    page:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在*理解Gatsby插件*部分中提到的，源插件是那些允许我们从新的数据源中摄入数据到我们的GraphQL层中的插件。通过创建源插件，我们将获取这些数据的逻辑从我们的网站中抽象出来，这样我们就可以在想要的情况下跨多个Gatsby项目重用它。为了理解源插件是如何工作的，让我们一起来构建一个。让我们从GitHub获取我们的总贡献量，以便我们可以在我们的**关于**页面上显示它们：
- en: The first thing we need to be able to do to pull data from GitHub is use an
    access token. Navigate to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要能够从 GitHub 拉取数据的第一件事是使用访问令牌。导航到 [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)。
- en: Write a **Note** to help you identify your access token later:![Figure 10.1
    – GitHub personal access token generation
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一个 **备注** 帮助您稍后识别您的访问令牌：![图 10.1 – GitHub 个人访问令牌生成
- en: '](img/Figure_10.01_B15983.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.01_B15983.jpg)'
- en: Figure 10.1 – GitHub personal access token generation
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.1 – GitHub 个人访问令牌生成
- en: Change the **Expiration** property to your desired length. Once the length of
    time has been selected, the token will be deleted and no longer work. If you prefer
    that it doesn't expire, you can select **No Expiry** from this list.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **过期** 属性更改为您希望的时间长度。一旦选择了时间长度，令牌将被删除并且不再工作。如果您希望它不失效，可以从此列表中选择 **无过期**。
- en: Scroll down the list and check **read:user**:![Figure 10.2 – GitHub personal
    access token generation (continued)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动列表并检查 **read:user**：![图 10.2 – GitHub 个人访问令牌生成（继续）
- en: '](img/Figure_10.02_B15983.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.02_B15983.jpg)'
- en: Figure 10.2 – GitHub personal access token generation (continued)
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.2 – GitHub 个人访问令牌生成（继续）
- en: Click **Generate token**.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **生成令牌**。
- en: On the next screen, you will be presented with your access token – make a note
    of this immediately as you will not be able to see it again.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏，您将看到您的访问令牌 – 立即记下这个令牌，因为您将无法再次看到它。
- en: Important Note
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要备注
- en: If you ever lose your access token, you will not be able to see it again. GitHub
    does this to prevent your key being used by someone else for malicious purposes.
    In an instance where you do lose your key, you will have to create a new one with
    the same scopes and replace the token wherever it was being used.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您丢失了访问令牌，您将无法再次看到它。GitHub 这样做是为了防止您的密钥被他人用于恶意目的。如果您丢失了密钥，您将不得不创建一个新的，具有相同的权限，并在使用的地方替换令牌。
- en: 'Create a `.env` file in your root directory and add the following line:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的根目录中创建一个 `.env` 文件并添加以下行：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You may already have a `.env` file within your project at this point. If this
    is the case, simply append the preceding code block line to that file.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个阶段，您可能已经在项目中有一个 `.env` 文件。如果是这种情况，只需将前面的代码块行追加到该文件中。
- en: 'Ensure that `dotenv` is installed as a dependency at the root of your project.
    If it is not, run the following command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在您的项目根目录中安装了 `dotenv` 作为依赖项。如果没有，请运行以下命令：
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a new folder called `gatsby-source-github-profile` in your `plugins`
    folder.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `plugins` 文件夹中创建一个名为 `gatsby-source-github-profile` 的新文件夹。
- en: 'Open a terminal in the `gatsby-source-github-profile` folder and run the following
    command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gatsby-source-github-profile` 文件夹中打开终端并运行以下命令：
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This initializes an npm package for our plugin.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这初始化了我们插件的 npm 包。
- en: 'Install the `node-fetch` package:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `node-fetch` 包：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `node-fetch` package brings the `fetch` browser API to `node`. I've used
    it in this example as I suspect most of you will be familiar with `fetch`, as
    this book is aimed at React developers.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`node-fetch` 包将 `fetch` 浏览器 API 带到 `node`。我在这个例子中使用它，因为我怀疑你们大多数人都会熟悉 `fetch`，因为这本书的目标是针对
    React 开发者。'
- en: Important Note
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要备注
- en: Node Fetch is ESM only from version 3.0\. This means it will not play nicely
    with the ES5 format that's being used in our Gatsby configuration files. The maintainers
    suggest using version 2.6.5 in our case.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Node Fetch 从版本 3.0 开始仅支持 ESM。这意味着它不会很好地与我们在 Gatsby 配置文件中使用的 ES5 格式兼容。维护者建议在我们的情况下使用版本
    2.6.5。
- en: 'Create a `gatsby-node.js` file in your `gatsby-source-github-profile` folder
    and add the following code to it:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gatsby-source-github-profile` 文件夹中创建一个 `gatsby-node.js` 文件，并将以下代码添加到其中：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we are importing our most recent install, `node-fetch`, and the `crypto`
    library (which comes with node) into our project. `crypto` provides cryptographic
    functionality, which we will be using later in this file.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在将我们的最新安装的 `node-fetch` 和 `crypto` 库（随 node 一起提供）导入到我们的项目中。`crypto` 提供了加密功能，我们将在本文件的稍后部分使用它。
- en: 'Under your imports, add the following code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的导入中，添加以下代码：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we are utilizing the `sourceNodes` Gatsby node API. As its name suggests,
    we will add code here that sources our data and then creates nodes using the `createNode`
    action. You may have also noticed that we are passing `configOptions` into this
    as an argument. This object gives us access to any of the options we provide to
    the plugin when we use it in our `gatsby-config.js` file. We are going to be passing
    our access token and username as options.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在使用`sourceNodes` Gatsby节点API。正如其名所示，我们将在此处添加代码以获取我们的数据，然后使用`createNode`操作创建节点。你可能也注意到了，我们正在将`configOptions`作为参数传递。此对象使我们能够访问我们在`gatsby-config.js`文件中使用插件时提供的任何选项。我们将传递我们的访问令牌和用户名作为选项。
- en: Quick Tip
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 快速提示
- en: To improve the understandability of this file, it's been broken down into its
    parts. If you are finding it hard to follow, you can see the file in its entirety
    within the repository listed in the *Technical requirements* section of this chapter.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了提高此文件的可理解性，它已经被分解为其各个部分。如果你觉得难以理解，你可以在本章*技术要求*部分的仓库中查看整个文件。
- en: 'Create a `POST` request, like the following, inside `sourceNodes` for the GitHub
    API:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sourceNodes`内部创建一个如下的`POST`请求，用于GitHub API：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We use `node-fetch` to make the `POST` request to the GitHub API. We provide
    it with token authentication in the request header. Here, you can see we are using
    the token that's provided within `configOptions`. Like Gatsby, the GitHub API
    uses GraphQL. As with any GraphQL API, to select which data we want from GitHub,
    we have to pass a query into the body of our request. The query that's defined
    in `body` retrieves the total contributions for a given username (in this case,
    yours!). We pass our username in from `configOptions`.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用`node-fetch`向GitHub API发送`POST`请求。我们在请求头中提供令牌身份验证。在这里，你可以看到我们正在使用`configOptions`中提供的令牌。与Gatsby一样，GitHub
    API使用GraphQL。与任何GraphQL API一样，为了从GitHub选择我们想要的数据，我们必须将查询传递到请求体中。定义在`body`中的查询检索给定用户名（在这种情况下，是你的！）的总贡献。我们从`configOptions`中传递我们的用户名。
- en: 'Add the following code after your request:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的请求后添加以下代码：
- en: '[PRE8]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we deconstruct the data from our request to receive the total contributions.
    Then, we utilize the `createNode` function to add this data to our GraphQL data
    layer. Let''s break down the object I am passing to the function:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们分解我们的请求以接收总贡献数据。然后，我们使用`createNode`函数将此数据添加到我们的GraphQL数据层。让我们分解我传递给函数的对象：
- en: 'a. `totalContributions`: The first key value in the object is the value of
    the total contributions. This is the variable we will query for later when we
    try to retrieve this information on our pages.'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a. `totalContributions`: 对象中的第一个键值是总贡献值。这是我们稍后尝试在我们的页面上检索此信息时将查询的变量。'
- en: 'b. `id`: Each node must have a globally unique ID. Because there is a single
    instance of this node type, we can just use the`"Github-Contributions"` string.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b. `id`: 每个节点都必须有一个全局唯一的ID。因为此节点类型只有一个实例，我们可以直接使用`"Github-Contributions"`字符串。'
- en: 'c. `internal.type`: A globally unique type that we can use to identify this
    data source.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c. `internal.type`: 一个全局唯一的类型，我们可以用它来识别此数据源。'
- en: 'd. `internal.contentDigest`: This field helps Gatsby avoid regenerating nodes
    when they haven''t changed. While creating the node if this field remains constant,
    it won''t regenerate. So, we need to make sure that if our total contributions
    change, so too does this `contentDigest`. To do that, I am using the `crypto`
    library to create an `md5` hash of our total contributions. This might seem a
    little overkill in this particular instance, but it works well if the amount of
    data on a node is more than one key-value pair, as you can just add them to the
    object that''s being passed to `JSON.stringify`.'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd. `internal.contentDigest`: 此字段帮助Gatsby在节点未更改时避免重新生成节点。在创建节点时，如果此字段保持不变，则不会重新生成。因此，我们需要确保如果我们的总贡献发生变化，那么这个`contentDigest`也会变化。为此，我正在使用`crypto`库创建我们总贡献的`md5`哈希。在这个特定的例子中，这可能会显得有些过度，但如果节点上的数据量超过一个键值对，那么它工作得很好，你只需将它们添加到传递给`JSON.stringify`的对象中即可。'
- en: 'e. `internal.description`: This field allows us to describe the source type,
    which is helpful if we are confused about what this source is at any point. This
    field is not required but is nice to have. Our plugin is now ready to be used
    – the process from this point is the same as it is for a plugin that''s been installed
    via npm.'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'e. `internal.description`: 此字段允许我们描述源类型，如果我们对任何时刻的此源感到困惑，这将很有帮助。此字段不是必需的，但拥有它很好。我们的插件现在已准备好使用
    – 从这一点开始的过程与通过npm安装的插件相同。'
- en: 'Navigate to your `gatsby-config.js` file at the root of your project and add
    the following code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您项目根目录下的`gatsby-config.js`文件并添加以下代码：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we are passing in the options to the plugin that we utilized in the
    plugin's `gatsby-node.js` file. We source the token from our `.env` file. You
    can pass your GitHub username in as plain text as this is public information.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们正在将选项传递给插件，这些选项在插件的`gatsby-node.js`文件中使用。我们从`.env`文件中获取令牌。你可以将GitHub用户名作为纯文本传递，因为这属于公开信息。
- en: Quick Note
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 快速提示
- en: You may be tempted to try adding someone else's username here instead of your
    own, but this will cause the fetch request to fail as your access token does not
    have permission to retrieve another user's data.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会想在这里添加别人的用户名而不是自己的，但这会导致获取请求失败，因为你的访问令牌没有权限检索其他用户的数据。
- en: 'Start your development server. Navigate to `http://localhost:8000/_graphql`
    – you should be able to query your total contributions with the following query:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的开发服务器。导航到`http://localhost:8000/_graphql` – 你应该可以使用以下查询查询你的总贡献：
- en: '[PRE10]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s add this new source of data to our `about` page:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将这个新的数据源添加到我们的`about`页面：
- en: '[PRE11]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Congratulations – you've just built your first local plugin. You could replicate
    the methods outlined here to fetch data from another API. So, at this point, we
    can create source plugins with ease, but what about theme plugins?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你 – 你刚刚构建了你的第一个本地插件。你可以复制这里概述的方法从另一个API获取数据。所以，到目前为止，我们可以轻松创建源插件，但关于主题插件呢？
- en: Creating theme plugins
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主题插件
- en: 'As we have discovered, theme plugins are all about adding visual elements to
    our Gatsby site. Theme plugins are unique in that they have to contain a `gatsby-config.js`
    file. To better understand theme plugins, let''s look at the most minimal of examples.
    Let''s use a plugin to add a simple sample page to our site:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所发现的，主题插件都是关于为我们的Gatsby网站添加视觉元素。主题插件独特之处在于它们必须包含一个`gatsby-config.js`文件。为了更好地理解主题插件，让我们看看最简单的例子。让我们使用一个插件来为我们的网站添加一个简单的示例页面：
- en: Create a new folder called `gatsby-theme-sample-page` in your `plugins` folder.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`plugins`文件夹中创建一个名为`gatsby-theme-sample-page`的新文件夹。
- en: 'Open a terminal in the `gatsby-theme-sample-page` folder and run the following
    command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`gatsby-theme-sample-page`文件夹中打开一个终端并运行以下命令：
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create an `src` folder in `/gatsby-theme-sample-page`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/gatsby-theme-sample-page`中创建一个`src`文件夹。
- en: Create a `pages` folder in your `src` folder.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`src`文件夹中创建一个`pages`文件夹。
- en: 'Create a `sample.js` file inside your new `pages` folder and add the following
    code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您新的`pages`文件夹内创建一个`sample.js`文件并添加以下代码：
- en: '[PRE13]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This page is very basic and just renders a heading on the page.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个页面非常基础，只是在页面上渲染一个标题。
- en: 'Navigate to your `gatsby-config.js` file at the root of your project and add
    the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您项目根目录下的`gatsby-config.js`文件并添加以下代码：
- en: '[PRE14]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Start your Gatsby development server and navigate to `/sample`; you should see
    your sample page.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的Gatsby开发服务器并导航到`/sample`；你应该能看到你的示例页面。
- en: You may have noticed that a plugin consists of the same building blocks as your
    Gatsby site. This is one of the reasons why creating plugins is so straightforward
    in Gatsby. By building a site with this tool, you also inherit the ability to
    create plugins.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，插件与你的Gatsby网站由相同的构建块组成。这也是在Gatsby中创建插件如此简单的原因之一。通过使用这个工具构建网站，你也继承了创建插件的能力。
- en: 'Now that we have seen a basic example, let''s try and build something a little
    more useful and a little more complex. Let''s create a plugin that takes a folder
    of events (in JSON format) and creates a page for each one:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一个基本示例，让我们尝试构建一个更有用、更复杂的示例。让我们创建一个插件，它从一个事件文件夹（JSON格式）中获取事件并为每个事件创建一个页面：
- en: 'First, we''re going to need some events that we can source within our plugin.
    Let''s assume each event will have a `title`, `description`, `location`, and `date`.
    Create a folder called `events` within your root directory. Add some JSON files
    within this folder that are in the following format:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在我们的插件中获取一些事件。假设每个事件都将包含一个`标题`、`描述`、`地点`和`日期`。在您的根目录下创建一个名为`events`的文件夹。在这个文件夹内添加一些符合以下格式的JSON文件：
- en: '[PRE15]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Ensure that the JSON is valid as errors will cause the plugin to crash out.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保JSON是有效的，因为错误会导致插件崩溃。
- en: Create a new folder called `gatsby-theme-events-section` in your `plugins` folder.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`plugins`文件夹中创建一个名为`gatsby-theme-events-section`的新文件夹。
- en: 'Open a terminal in the `gatsby-theme-events-section` folder and run the following
    command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`gatsby-theme-events-section`文件夹中打开一个终端并运行以下命令：
- en: '[PRE16]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create an `src` folder in `/gatsby-theme-events-section`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/gatsby-theme-events-section` 中创建一个 `src` 文件夹。
- en: 'Open a terminal in the `gatsby-theme-events-section` folder and run the following
    command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gatsby-theme-events-section` 文件夹中打开一个终端并运行以下命令：
- en: '[PRE17]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As its name suggests, this installs the transformer plugin for handling JSON.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如其名所示，这安装了用于处理 JSON 的转换器插件。
- en: 'Create a `gatsby-config.js` file and add the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gatsby-config.js` 文件中添加以下代码：
- en: '[PRE18]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we are adding our newly installed plugin, as well as pointing our plugin
    to source files from the filesystem that exists in the `events` directory. These
    plugins will work together to create a new node for each JSON file within the
    events directory.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们添加了我们新安装的插件，并将插件指向 `events` 目录中存在的文件系统中的源文件。这些插件将一起工作，为事件目录中的每个 JSON 文件创建一个新的节点。
- en: 'Create a `gatsby-node.js` file and add the following code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/gatsby-theme-events-section/src/templates` 中创建一个 `gatsby-node.js` 文件并添加以下代码：
- en: '[PRE19]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `onCreateNode` function is called whenever a new node is created. Using
    this function, we can transform nodes by adding, removing, or manipulating their
    fields. In this specific case, we are adding a `slug` field if the node is of
    the `EventsJson` type. A `slug` is the address of a specific page on our site,
    so in the case of our event page, we want every event to have a unique `slug`
    where it will render on the site.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每当创建一个新节点时，都会调用 `onCreateNode` 函数。使用此函数，我们可以通过添加、删除或操作它们的字段来转换节点。在这个特定的情况下，如果我们创建的节点是
    `EventsJson` 类型，我们会添加一个 `slug` 字段。`slug` 是我们网站上特定页面的地址，因此在我们的活动页面中，我们希望每个活动都有一个唯一的
    `slug`，它将在网站上渲染。
- en: 'Prepend your `gatsby-node.js` file with the following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gatsby-node.js` 文件前面添加以下代码：
- en: '[PRE20]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This code should look very familiar as it is very similar to the code we saw
    in the *Creating templates and programmatic page generation* section of [*Chapter
    4*](B15983_04_ePub_RK.xhtml#_idTextAnchor072), *Creating Reusable Templates*.
    Here, we are utilizing the `createPage` function, which allows us to create pages
    dynamically. Inside this function, we destructure the `actions` object to retrieve
    the `createPage` function. Then, we tell Gatsby where to find our event template.
    With these two pieces in place, we are now ready to query our data. You should
    see a familiar GraphQL query upon selecting the `slug` property from all the events.
    After this, we can iterate through the events and create a page for each one,
    providing the `slug` property as context.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码看起来非常熟悉，因为它与我们之前在 [*第4章*](B15983_04_ePub_RK.xhtml#_idTextAnchor072) 的 *创建模板和程序化页面生成*
    部分中看到的代码非常相似，即 *创建可重用模板*。在这里，我们正在使用 `createPage` 函数，它允许我们动态地创建页面。在这个函数内部，我们解构
    `actions` 对象以检索 `createPage` 函数。然后，我们告诉 Gatsby 在哪里可以找到我们的活动模板。有了这两部分，我们现在可以查询我们的数据了。当你从所有活动中选择
    `slug` 属性时，你应该会看到一个熟悉的 GraphQL 查询。之后，我们可以遍历活动并为每个活动创建一个页面，提供 `slug` 属性作为上下文。
- en: Create a `templates` folder in `/gatsby-theme-events-section/src`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/gatsby-theme-events-section/src` 中创建一个 `templates` 文件夹。
- en: 'Create an `event.js` file in `/gatsby-theme-events-section/src/templates` and
    add the following code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/gatsby-theme-events-section/src/templates` 中创建一个 `event.js` 文件并添加以下代码：
- en: '[PRE21]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we take `title`, `location`, `description`, and `date`, which we will
    retrieve in the page query, and render them on the screen.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们取 `title`、`location`、`description` 和 `date`，这些将在页面查询中检索，并在屏幕上渲染。
- en: 'Append the `events.js` file with the following code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `events.js` 文件附加以下代码：
- en: '[PRE22]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we are using `slug` from the context to find the event where `slug` matches
    in the node's fields. We query for all the data that we need to populate this
    page by retrieving `title`, `location`, `description`, and `date`, which have
    been formatted. This is then passed into the template via the `data` prop.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用上下文中的 `slug` 来查找与节点字段中的 `slug` 匹配的活动。我们通过检索 `title`、`location`、`description`
    和 `date`（这些已经被格式化）来查询所有我们需要填充此页面的数据。然后，通过 `data` 属性将这些传递到模板中。
- en: Now, let's create a page with all the events listed. Create a `pages` folder
    in `/gatsby-theme-events-section/src`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个列出所有活动的页面。在 `/gatsby-theme-events-section/src` 中创建一个 `pages` 文件夹。
- en: 'Create an `events.js` file in `/gatsby-theme-events-section/src/pages` and
    add the following code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/gatsby-theme-events-section/src/pages` 中创建一个 `events.js` 文件并添加以下代码：
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, we are mapping through our events and creating a `Link` to an event's
    dedicated page with `title`, `data`, and `location`.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在遍历我们的活动并为每个活动创建一个带有 `title`、`data` 和 `location` 的 `Link`。
- en: 'Append `events.js` with the following code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码附加到 `events.js`：
- en: '[PRE24]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This query will retrieve all the events and return them in a nodes array, which
    can be retrieved via the `data` prop on the page.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此查询将检索所有事件并将它们返回到节点数组中，这些可以通过页面的 `data` 属性检索。
- en: 'You''re all done – run your development server and navigate to `localhost:8000/events`.
    You should see the following output:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已完成所有操作 – 运行您的开发服务器并导航到 `localhost:8000/events`。您应该看到以下输出：
- en: '![Figure 10.3 – Events page preview'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – 事件页面预览'
- en: '](img/Figure_10.03_B15983.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.03_B15983.jpg)'
- en: Figure 10.3 – Events page preview
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 事件页面预览
- en: 'Clicking on an event should take you to its dedicated page:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 点击事件应带您进入其专属页面：
- en: '![Figure 10.4 – Events page preview'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – 事件页面预览'
- en: '](img/Figure_10.04_B15983.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.04_B15983.jpg)'
- en: Figure 10.4 – Events page preview
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 事件页面预览
- en: You've just made your first local theme plugin. Adding an event to the `events`
    folder will see it appended to the list and get a dedicated page. If we were to
    publish this plugin, we could then use it within multiple Gatsby sites to create
    these pages by simply creating an `events` folder and populating it. No additional
    configuration is required!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚制作了您的第一个本地主题插件。将事件添加到 `events` 文件夹中，它将被附加到列表中，并获得一个专属页面。如果我们发布这个插件，我们就可以在多个
    Gatsby 网站中使用它，只需创建一个 `events` 文件夹并填充它。不需要额外的配置！
- en: Quick Tip
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: You'll notice a lack of styling in the examples set out in this chapter. This
    chapter focuses on the Gatsby APIs that are being utilized and less on styling.
    By now, you should feel confident enough to create styling for these pages.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到本章中提供的示例中缺少样式。本章重点介绍正在使用的 Gatsby API，而不是样式。到目前为止，您应该有足够的信心为这些页面创建样式。
- en: Now that we understand how to create both types of plugins, let's learn how
    we can publish them and contribute them back to the community.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何创建这两种类型的插件，让我们学习如何发布它们并将它们贡献给社区。
- en: Contributing to the plugin ecosystem
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献插件生态系统
- en: So, you've built a plugin and now you want to use it in a separate Gatsby project?
    Or perhaps you think the plugin could help other developers? In either case, you'll
    need to publish your plugin. By publishing your plugin with npm, your plugin will
    automatically become visible on Gatsby's site plugins page ([https://www.gatsbyjs.com/plugins](https://www.gatsbyjs.com/plugins)).
    Let's start this journey by looking at a pre-publish checklist.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您已经构建了一个插件，现在您想在单独的 Gatsby 项目中使用它？或者也许您认为这个插件可以帮助其他开发者？在任一情况下，您都需要发布您的插件。通过使用
    npm 发布您的插件，您的插件将自动在 Gatsby 的网站插件页面上可见（[https://www.gatsbyjs.com/plugins](https://www.gatsbyjs.com/plugins)）。让我们从查看一个发布前清单开始这段旅程。
- en: Pre-publish checklist
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布前清单
- en: 'Before we publish our plugin, it''s important to ensure that we are ready to
    do so. The following is a suggested pre-publish checklist:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们发布插件之前，确保我们已经准备好这样做。以下是一个建议的发布前清单：
- en: Ensure your plugin's name explains what it does. This might seem a little trivial
    but naming your plugin in a way that makes it clear what it does will make it
    easier to find online.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的插件名称解释了它做什么。这可能看起来有点微不足道，但以使插件名称清晰表明其功能的方式命名插件将使其更容易在网上找到。
- en: Ensure your plugin's name is unique. Two npm packages cannot share the same
    name, so you mustn't try and deploy a package with a name that is already in use.
    To check whether your name is in use, visit [https://www.npmjs.com/](https://www.npmjs.com/)
    and search for your plugin's name.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的插件名称是唯一的。两个 npm 包不能有相同的名称，因此您不能尝试部署一个已经使用的名称的包。要检查您的名称是否已被使用，请访问 [https://www.npmjs.com/](https://www.npmjs.com/)
    并搜索您的插件名称。
- en: Ensure your plugin adheres to the naming convention that was outlined in the
    *Understanding Gatsby plugins* section. This is the way that Gatsby determines
    which npm packages are Gatsby plugins so that it can add them to their site.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的插件遵循在 *理解 Gatsby 插件* 部分中概述的命名约定。这是 Gatsby 确定哪些 npm 包是 Gatsby 插件并添加到其网站的方式。
- en: Ensure your plugin has a comprehensive `README.md` file. This file will be picked
    up by Gatsby and included within the plugin ecosystem, so it's vitally important
    that the `README.md` file explains what your plugin does and how to use it. You
    should include the specific configuration options that might be required.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的插件有一个全面的 `README.md` 文件。此文件将被 Gatsby 捕获并包含在插件生态系统中，因此 `README.md` 文件解释您的插件做什么以及如何使用它至关重要。您应包括可能需要的特定配置选项。
- en: Check that both React and Gatsby are peer dependencies.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 React 和 Gatsby 是否是同伴依赖项。
- en: Ensure your code has been tested properly. Unit tests are so important, but
    even more so if you're about to pass your code onto others. Aim for 100% test
    code coverage.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的代码已经经过适当的测试。单元测试非常重要，但如果您即将将代码传递给他人，那么这一点尤为重要。争取达到 100% 的测试代码覆盖率。
- en: Important Note
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you ended up changing your plugin's name, be sure that this new name is reflected
    in the `package.json` file, as well as the folder's name. Having the old name
    anywhere can be confusing when you're using/searching for your plugin later down
    the line.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您更改了插件的名称，请确保这个新名称在 `package.json` 文件以及文件夹名称中都有体现。如果您在以后使用/搜索插件时发现旧名称，可能会造成混淆。
- en: Now that we have gone through our checklist, let's learn how to publish a plugin.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了检查清单，让我们学习如何发布一个插件。
- en: Publishing a plugin
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布一个插件
- en: 'Publishing a Gatsby plugin follows the same process as publishing any npm package.
    Let''s learn how to do this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 发布 Gatsby 插件遵循与发布任何 npm 包相同的流程。让我们学习如何做这件事：
- en: Ensure you have an npm account. If you do not, you can create one at [https://www.npmjs.com/signup](https://www.npmjs.com/signup).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您有一个 npm 账户。如果您没有，您可以在 [https://www.npmjs.com/signup](https://www.npmjs.com/signup)
    创建一个。
- en: 'Log into the npm CLI from your terminal by running the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端运行以下命令从 npm CLI 登录：
- en: '[PRE25]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The CLI will ask for your name, email, and password as part of the login process.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CLI 将在登录过程中要求您输入姓名、电子邮件和密码。
- en: Navigate your terminal to your Gatsby plugin's directory. *This is vitally important*.
    If you continue these steps within your root directory, you will end up accidentally
    releasing your entire site as a package, so ensure you have navigated to the plugin.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的终端导航到 Gatsby 插件的目录。*这一点至关重要*。如果您在这些步骤中继续在根目录下操作，您可能会意外地将整个网站作为一个包发布出去，所以请确保您已经导航到插件目录。
- en: 'Finally, run the `publish` command:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行 `publish` 命令：
- en: '[PRE26]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now that your plugin has been published, it should be visible on the Gatsby
    website plugins page within 24 hours.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的插件已经发布，它应该在 24 小时内出现在 Gatsby 网站插件页面上。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned what a Gatsby plugin is and what types exist. We
    learned about local plugin development and how to create source and theme plugins.
    We created both source and theme plugins and then tested them locally by including
    them on our site. We then learned about sharing plugins online. We discussed what
    you should consider before deploying a plugin and then learned how to share a
    plugin by publishing them online via npm. By completing this chapter, you should
    now feel confident that you can create and share source and theme plugins with
    ease. This has been a brief introduction to a massive topic, and I hope you can
    build on this knowledge to create plugins for any use case.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是 Gatsby 插件以及有哪些类型。我们了解了本地插件开发以及如何创建源和主题插件。我们创建了源和主题插件，并在本地通过在我们的网站上包含它们来测试它们。然后我们学习了如何在网络上共享插件。我们讨论了在部署插件之前应该考虑的事项，然后学习了如何通过在
    npm 上发布来共享插件。通过完成本章，您现在应该有信心轻松地创建和共享源和主题插件。这只是一个关于巨大主题的简要介绍，我希望您能在此基础上构建知识，为任何用例创建插件。
- en: In the next chapter, we will look at another advanced concept – authentication.
    We will learn how to create login experiences on your website.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨另一个高级概念——身份验证。我们将学习如何在您的网站上创建登录体验。
