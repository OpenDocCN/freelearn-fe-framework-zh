["```js\nnpm install jotai\n```", "```js\nYarn add jotai\n```", "```js\n// ./App.js\nimport React, { useState, Suspense } from \"react\";\nexport default function App() {\n//…\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n  return (\n    <SafeAreaProvider>\n//…\n            <Suspense fallback={<AppLoading />}>\n              <NavigationContainer theme={MyTheme}>\n                <Stack.Navigator>\n//…\n```", "```js\n// src/atoms/imagesAtoms.js\nimport { atom } from \"jotai\";\nexport const imageListAtom = atom([\n  {\n    \"itemId\": 1,\n    \"authorId\": 11,\n    \"timeStamp\": \"2 hrs ago\",\n    \"url\": \"…\",\n    \"likes\": \"28\",\n    \"conversations\": \"12\"\n  },\n  {\n    \"itemId\": 2,\n    \"authorId\": 7,\n    \"timeStamp\": \"1 week ago\",\n    \"url\": \"…\",\n    \"likes\": \"8\",\n    \"conversations\": \"123\"\n  },\n]);\n```", "```js\nimport { useAtom } from \"jotai\";\nimport { imageListAtom } from \"../atoms/imagesAtoms\";\nexport const ListOfFavorites = ({ navigation }) => {\n  const [imageList] = useAtom(imageListAtom);\n  if (!imageList) {\n    return <AppLoading />;\n  }\n//…\n  return (\n    //…\n      <FlatList\n        data={imageList}\n//…\n```", "```js\n// src/atoms/imageAtoms.js\nimport { requestBase } from \"../utils/constants\";\nimport { atom } from \"jotai\";\nexport const imageListAtom = atom([]);\n  const urlAtom = atom(requestBase + \"/john_doe/likedImages.    json\");\nexport const fetchImagesAtom = atom(async (get) => {\n  const response = await fetch(get(urlAtom));\n  return await response.json();\n});\n```", "```js\n// src/surfaces/Home.js\nimport { useAtom } from \"jotai\";\nimport { fetchImagesAtom } from \"../atoms/imageAtoms\";\n//…\nexport const Home = () => {\n  const [json] = useAtom(fetchImagesAtom);\n```", "```js\n  const [thisIsAVeryFancyAndCuteFetchingMechanism] =    useAtom(fetchImagesAtom);\n```", "```js\nconst onlyReadMe = atom('I like to read')\n```", "```js\n  const readMeButInUpperCase  = atom((get) =>    get(onlyReadMe).toUpperCase())\n```", "```js\nconst readMeButInUpperCase  = atom(\n      (get) => get(onlyReadMe).toUpperCase(),\n      (get, set, newText) => {\n          set(onlyReadMe, newText)\n       }\n)\n```", "```js\nconst FancyTextComponent = () => {\n    const [fancyText, setFancyText] =      useAtom(readMeButInUpperCase  );\nreturn (\n      <Pressable onPress={() => setFancyText         ('I do not like to swim')>\n        <Text>Likes and dislikes: {fancyText}</Text>\n    </Pressable>\n)\n```", "```js\nconst onlyUsedForSettingValues  = atom(null,\n       (get, set) => {\n           set(onlyReadMe, 'I like using write only atoms')\n       }\n)\n```", "```js\nconst FancyTextComponent = () => {\nconst [readOnlyFancyText] = useAtom(onlyReadMe);\n    const [, setStaticText] =      useAtom(onlyUsedForSettingValues  );\nreturn (\n    <Pressable onPress={() => setFancyText()>\n        <Text>Likes and dislikes: { readOnlyFancyText }</Text>\n    </Pressable>\n)\n```", "```js\n// src/atoms/imageAtoms.js\nexport const imageListAtom = atom([], (get, set, newArray) => {\n  set(imageListAtom, newArray);\n});\n```", "```js\n// src/surfaces/Home.js\nexport const Home = () => {\n  const [json] = useAtom(fetchImagesAtom);\n  const [, setAllImages] = useAtom(imageListAtom);\n  useEffect(() => {\n    if (json) {\n      setAllImages(json);\n    }\n  }, [json]);\n```", "```js\n// src/atoms/imageAtoms.js\n  export const isImageLikedAtom = atom(false,    (get, set, newImage) => {\n  const imageList = get(imageListAtom);\n  const checkIfLiked =\n      imageList?.filter((favoritedImg) => favoritedImg.itemId         === newImage.itemId)\n      .length > 0;\n  set(isImageLikedAtom, checkIfLiked);\n});\n```", "```js\n// src/surfaces/ImageDetailsModal.js\nexport const ImageDetailsModal = ({ navigation, route }) => {\n    const [isCurrentImageLiked, setIsLiked] =      useAtom(isImageLikedAtom);\n  setIsLiked(route.params.imageItem);\n//…\n```", "```js\n// src/atoms/imageAtoms.js\nexport const addImageToArray = atom(\n         null,\n         (get, set, newImage) => {\n          const clonedArray = get(imageListAtom);\n          clonedArray.unshift(newImage);\n          set(imageListAtom, clonedArray);\n          set(isImageLikedAtom, newImage);\n         }\n);\n```", "```js\n// src/surfaces/ImageDetailsModal.js\nexport const ImageDetailsModal = ({ navigation, route }) => {\n  const [, addImage] = useAtom(addImageToArray);\n  const [isCurrentImageLiked, setIsLiked] = useAtom(isImageLikedAtom);\n  setIsLiked(route.params.imageItem);\nreturn (\n//…\n    <Pressable\n          onPress={() => {\n            if (isCurrentImageLiked) {\n              // add remove image functionality here\n            } else {\n              addImage(route.params.imageItem);\n            }\n          }}\n        >\n            <Ionicons name={isCurrentImageLiked ? \"heart\" :              \"heart-outline\"} />\n        </Pressable>\n//…\n```", "```js\n// src/surfaces/Favorites.js\nimport { useIsFocused } from \"@react-navigation/native\";\nexport const Favorites = ({ navigation }) => {\n  const isFocused = useIsFocused();\n  return (\n      <SafeAreaView style={{ flex: 1, paddingTop: headerHeight         }}>\n      <Suspense fallback={<AppLoading />}>\n        <ListOfFavorites navigation={navigation} isFocused={isFocused} />\n//…\n```"]