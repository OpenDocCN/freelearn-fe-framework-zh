- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interacting with GraphQL APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GraphQL APIs are web APIs that have a special language for interacting with
    them. These APIs are a very popular alternative to REST APIs with React frontends.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll first understand the special GraphQL language, executing
    some basic queries on the GitHub GraphQL API. We will then build a React app that
    allows users to search for a GitHub repository and star it, experiencing the benefits
    of GraphQL over REST.
  prefs: []
  type: TYPE_NORMAL
- en: The app will use the browser’s `fetch` function with React Query to interact
    with the GitHub GraphQL API. We will then refactor the implementation of the app
    to use a specialized GraphQL client called **Apollo Client**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the GraphQL syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting set up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the React Query with fetch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Apollo Client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: You can install them at [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: You can install it at [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub**: You’ll need a GitHub account. If you haven’t got an account, you
    can sign up at the following link: [https://github.com/join](https://github.com/join).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub GraphQL API Explorer**: We’ll use this tool to play with the syntax
    of GraphQL queries and mutations. The tool can be found at [https://docs.github.com/en/graphql/overview/explorer](https://docs.github.com/en/graphql/overview/explorer).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the GraphQL syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like React Query, GraphQL refers to a request to fetch data as a **query**.
    In the following subsections, we’ll learn how to write a basic GraphQL query that
    returns data from a couple of fields. These fields will have primitive values
    and so the result will be flat. We’ll then learn how to write a more advanced
    query containing object-based field values that have their own properties. Lastly,
    we will learn how to make queries more reusable using parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Returning flat data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to use the GitHub GraphQL API Explorer to get
    information about your GitHub user account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the following URL in a browser to open the GitHub GraphQL API Explorer:
    [https://docs.github.com/en/graphql/overview/explorer](https://docs.github.com/en/graphql/overview/explorer).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sign in using the **Sign in with GitHub** button if you aren’t signed in already.
    A GraphQL API Explorer page appears, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – GitHub GraphQL API Explorer](img/B19051_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – GitHub GraphQL API Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'In the top-left panel of the GraphQL API Explorer, enter the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query starts with the `query` keyword to specify that the operation is a
    query to fetch data (rather than update data). It is worth noting that the `query`
    keyword is optional because the operation defaults to a query.
  prefs: []
  type: TYPE_NORMAL
- en: After the operation, the data to be returned is specified by specifying the
    required objects and fields. In our example, we have specified that the `name`
    field in the `viewer` object is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Execute Query** button, which is the round button containing the
    black triangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The query result appears to the right of the query as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – GitHub GraphQL](img/B19051_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – GitHub GraphQL
  prefs: []
  type: TYPE_NORMAL
- en: The data we requested is returned as a JSON object. The `name` field value should
    be your name stored in your GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right-hand side of the query results is **Documentation Explorer**.
    Expand this panel if it’s not already expanded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Documentation Explorer](img/B19051_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Documentation Explorer
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `viewer`, which is the one we just queried. The object type appears
    to the right of the object name, and the object description appears underneath.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Like many languages, GraphQL’s fields have types – there are built-in types
    such as `String`, `Int`, and `Boolean`, as well as the ability to create custom
    types. See the following link for more information: [https://graphql.org/learn/schema/#type-language](https://graphql.org/learn/schema/#type-language).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the `viewer` object in **Documentation Explorer** (it should
    be right at the bottom):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – viewer object in Documentation Explorer](img/B19051_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – viewer object in Documentation Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `User` type next to the `viewer` object name in `User` type are
    listed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Fields in the User type](img/B19051_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Fields in the User type
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add `avatarUrl` to our query, as this is an additional field available
    to us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We simply add the `avatarUrl` field inside the `viewer` object with a carriage
    return between the `name` and `avatarUrl` fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `avatarUrl` field is added to the JSON result if you execute the query.
    This should be a path to an image of you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Updated query result with avatarUrl](img/B19051_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Updated query result with avatarUrl
  prefs: []
  type: TYPE_NORMAL
- en: That completes our first graphQL query.
  prefs: []
  type: TYPE_NORMAL
- en: We are already seeing how flexible GraphQL is with being able to specify which
    fields we want to be returned in the response. Next, we’ll create another query
    that returns a hierarchical structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Returning hierarchical data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will make a more complex query now by returning an object-based field rather
    than just fields with primitive values. This will mean the result will have a
    hierarchical structure rather than being flat. We’ll query for a GitHub repository,
    returning its name, description, and the number of stars it has. So, carry out
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by entering the following query into the query panel of the GitHub GraphQL
    API explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query asks for the `id`, `name`, and `description` fields in the `repository` object.
    After the `repository` object is specified, two parameters for the `owner` and `name` of
    the repository are specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now request the number of stars against the repository. To do this, add
    the `totalCount` field within the `stargazers` object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you execute the query, the result will appear like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Query for a specific repository](img/B19051_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Query for a specific repository
  prefs: []
  type: TYPE_NORMAL
- en: That completes our second GraphQL query.
  prefs: []
  type: TYPE_NORMAL
- en: So, GraphQL allows us to make a single web request for different bits of data,
    returning just the fields that we require. Doing a similar thing with a REST API
    would probably require multiple requests and we’d get a lot more data than we
    need to return. It is in these types of queries where GraphQL shines over REST.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to allow query parameter values to vary.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying query parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The query we have just made already has parameters for the repository name and
    owner. However, the `owner` parameter is hardcoded to have a value of `"facebook"`,
    and the `name` parameter to have a value of `"react"`.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed the **QUERY VARIABLES** panel under the query panel. This
    allows query parameter values to be specified. The query parameters then reference
    variable names instead of hardcoded values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to adjust the repository query so that the query
    parameters can vary:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following query variables in the **QUERY** **VARIABLES** panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the variables are specified using JSON syntax. We have named
    the variable for the repository owner, `owner`, and the variable for the repository
    name, `name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the query to reference the query variables as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query parameters are specified in parentheses after the `query` keyword.
    The parameter names must be prefixed with a dollar sign (`$`). The type for each
    parameter is specified after a colon (`:`) – both parameters are `String` in our
    case. The exclamation mark (`!`) after the type means it is a required query parameter.
    The parameters can then be referenced within the query, which, in our case, is
    where we request the repository object.
  prefs: []
  type: TYPE_NORMAL
- en: If we execute the query, the JSON result will be the same as the query with
    the hardcoded repository owner and name criteria.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, change the variable values to target a different repository and rerun
    the query. The JSON result will contain the same fields but with values for the
    repository requested. The following is the query and result for the TypeScript
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Query with parameters for the TypeScript repository](img/B19051_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Query with parameters for the TypeScript repository
  prefs: []
  type: TYPE_NORMAL
- en: We are now getting comfortable with reading data from a GraphQL server. Next,
    we’ll learn how to request changes to GraphQL data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GraphQL mutations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A change to data in GraphQL is referred to as a **mutation**. Starring a repository
    is a change to the underlying data, so we can class this as an example of a mutation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create a mutation that stars a GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to star a repository, we need the repository ID. So, copy the repository
    ID of the last query result into your clipboard. The following is the ID of the
    TypeScript repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the query variables with a variable for the repository ID we want to
    star:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the content in the query panel with the following mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break down this code:'
  prefs: []
  type: TYPE_NORMAL
- en: We prefix a mutation with the `mutation` keyword.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We put parameters to be passed into the mutation after the `mutation` keyword
    in parentheses. In our case, we have a single parameter for the repository ID we
    want to star.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addStar` is the mutation function we call, which has a parameter called `input`
    that we need to pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input` is actually an object that has a field called `starrableId` that we
    need to include. The value of this is the repository ID we want to star, so we
    set it to our `$repoId` repository ID variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the mutation parameters, we specify what we want to return in the response.
    In our case, we want to return the number of stars on the repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we execute the mutation, the star will be added to the repository, and the
    new total number of stars will be returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Mutation to star the repository](img/B19051_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Mutation to star the repository
  prefs: []
  type: TYPE_NORMAL
- en: 'That completes this section on getting comfortable with the GraphQL syntax.
    To recap, here are some key points:'
  prefs: []
  type: TYPE_NORMAL
- en: A GraphQL query fetches data, and a mutation changes data. These operations
    are specified with the `query` and `mutation` keywords, respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data required in the response can be specified in the query/mutation, which
    helps the backend interactions be efficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query parameter variables can be specified to allow a query/mutation to be reusable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will set up a React project that will eventually interact with the
    GitHub GraphQL API.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start by creating the project for the app we will build.
    We will build a React app that allows users to search for a GitHub repository
    and star it. It will use the GitHub GraphQL API, so we will generate a **personal
    access token** (**PAT**) for this and store it in an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will develop the app using Visual Studio Code and a new Create React App-based
    project setup. We’ve previously covered this several times, so we will not cover
    the steps in this chapter – instead, see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React* *and TypeScript*.
  prefs: []
  type: TYPE_NORMAL
- en: We will style the app with Tailwind CSS. We have previously covered how to install
    and configure Tailwind in a Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*. So, after you have created the React and TypeScript
    project, install and configure Tailwind.
  prefs: []
  type: TYPE_NORMAL
- en: We will use React Hook Form to implement the form that creates blog posts, and
    the `@tailwindcss/forms` plugin to style the form. So, install the `@tailwindcss/forms`
    plugin and React Hook Form (see [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188),
    *Working with Forms,* if you can’t remember how to do this).
  prefs: []
  type: TYPE_NORMAL
- en: Now that the project is set up, next, we will gain access to the GitHub GraphQL
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PAT for the GitHub GraphQL API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The GitHub GraphQL API is protected by a PAT, which is a string of characters
    and is a common mechanism for protecting web APIs. Carry out the following steps
    to generate a PAT:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a browser, go to GitHub: [https://github.com/](https://github.com/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to your GitHub account if you aren’t already signed in. You can create
    a GitHub account if you haven’t got one by using the **Sign** **Up** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the menu under your avatar and click **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, access the **Developer Settings** option at the bottom of the left-hand
    bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Personal access tokens** page on the left-hand bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Generate new token** button to start creating the PAT. You will
    likely be prompted to input your password after clicking the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before the token is generated, you will be asked to specify the scopes. Enter
    a token description, tick the repo and user scopes, and then click the **Generate**
    **token** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The token is then generated and displayed on the page. Take a copy of this because
    we’ll need this in the next section when building our app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating environment variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before writing code that interacts with the GitHub GraphQL API, we will create
    environment variables for the API URL and the PAT:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating an environment file to store the URL for the GitHub
    GraphQL API. Create a file called `.env` in the root of the project containing
    this variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This environment variable is injected into the code at build time and can be
    accessed by code using `process.env.REACT_APP_GITHUB_URL`. Environment variables
    in Create React App projects must be prefixed with `React_APP_`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on environment variables, see the following link: [https://create-react-app.dev/docs/adding-custom-environment-variables/](https://create-react-app.dev/docs/adding-custom-environment-variables/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a second environment variable for the GitHub PAT token.
    However, we don’t want to commit this file to source code control, so place it
    in a file called `.env.local` at the root of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`.env.local` is in the `.gitignore` file, so this file won’t get committed
    to source code control, reducing the risk of your PAT getting stolen. Replace
    `your-token` with your PAT token in the preceding code snippet.'
  prefs: []
  type: TYPE_NORMAL
- en: That completes the creation of the environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will start to build the app that will interact with
    the GitHub GraphQL API.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Query with fetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build an app containing a form that allows users to
    search and star GitHub repositories. The app will also have a header containing
    our name from GitHub. We will use the browser `fetch` function with React Query
    to interact with the GitHub GraphQL API. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the header for the app, which will contain our GitHub name. We
    will create a `Header` component containing this, which will be referenced from
    the `App` component. The `Header` component will use React Query to execute a
    function that gets our GitHub name calling the GitHub GraphQL API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a function to get viewer information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create a function that makes a request to
    the GitHub GraphQL API to get details about the logged-in viewer:'
  prefs: []
  type: TYPE_NORMAL
- en: We will start by creating a folder for the API calls. Create an `api` folder
    in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will create a type that the function will use. Create a file called
    `types.ts` in the `src/api` folder with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This type represents the logged-in viewer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `getViewer.ts` in the `api` folder that will contain the
    function we need to implement. Add an import statement for the type we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Under the import statement, add a constant assigned to the following GraphQL
    query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the same query we used earlier in the chapter to get the current viewer’s
    name and avatar URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following type, which represents the response from the GraphQL API
    call within this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start to implement the function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `fetch` function to make the request to the GraphQL API. We have
    used the `REACT_APP_GITHUB_URL` environment variable to specify the GraphQL API
    URL. Environment variable values can be `undefined`, but we know this isn’t the
    case, so we have added a not null assertion (`!`) after it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the GraphQL query in the request body as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: GraphQL queries are specified in the request body in an object structure with
    a `query` property containing the GraphQL query string, which is `GET_VIEWER_QUERY`
    in our case. We have also specified that the request is in JSON format using the
    `Content-Type` HTTP header.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTTP `POST` method must be used for GraphQL API requests. So, let’s specify
    this in the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A PAT protects the GitHub GraphQL API, so let’s add this to the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last steps in the function are to get the JSON response body and type it
    appropriately before returning it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We narrow the type of `body` using a type assertion function called `assertIsGetViewerResponse`.
    The implementation of this function is lengthy and follows the same pattern as
    the ones we implemented in [*Chapter 9*](B19051_09.xhtml#_idTextAnchor220), *Interacting
    with RESTful APIs*, so we won’t list it in this step, but see [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getViewer.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getViewer.ts)
    for the implementation of this function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One difference is that the function’s parameter is of the `any` type rather
    than `unknown`. This is due to a known TypeScript issue of not being able to narrow
    the `unknown` type when it is an object. For more information on this, see the
    following link: [https://github.com/microsoft/TypeScript/issues/25720](https://github.com/microsoft/TypeScript/issues/25720).
    Using the `any` type is fine in this case – the `assertIsGetViewerResponse` function
    will work perfectly fine.'
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of a function that gets the details of the
    logged-in GitHub viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create the component for the header.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the header component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will create a component for the app header, which will call the `getViewer`
    function we just implemented and show the viewer’s name and avatar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use React Query to call `getViewer` and manage the data it returns.
    So, let’s start by installing this package by running the following command in
    a terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a file for the component called `Header.tsx` in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements in `Header.tsx` to import React Query’s
    `useQuery` hook and our `getViewer` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start to implement the `Header` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `useQuery` hook to call `getViewer`. The data returned from `getViewer`
    will be in the destructured `data` variable. We have also destructured an `isLoading`
    variable to implement a loading indicator in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a loading indicator as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finish the component implementation with the following JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A `header` element with a very dark gray background is rendered. The `header`
    element contains the viewer’s avatar, name, and a heading of **GitHub Search**,
    all horizontally centered.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of the header. Next, we will add it to the
    component tree.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Header component to the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Carry out the following steps to add the `Header` component to the `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `App.tsx` and remove all the existing content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add import statements for React Query’s provider component and client as well
    as our `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the component by wrapping React Query’s provider component around
    the `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s try the app by running `npm start` in the terminal. A header containing
    your avatar and name should appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Header containing the viewer’s avatar and name](img/B19051_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Header containing the viewer’s avatar and name
  prefs: []
  type: TYPE_NORMAL
- en: That completes the app header. Next, we will start to implement the main part
    of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the repository page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main part of the app will be a page that allows a user to search for a
    GitHub repository and star it. The page component will be called `RepoPage` and
    will reference three other components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Repository page component structure](img/B19051_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Repository page component structure
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an explanation of the components:'
  prefs: []
  type: TYPE_NORMAL
- en: The form that allows users to enter their search criteria will be contained
    in a `SearchRepoForm` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FoundRepo` component will render the matched repository after a search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `StarRepoButton` component will render the button that the user can click
    to star a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RepoPage` component will use React Query to manage calls to the GitHub
    GraphQL API and store the returned data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will make a start on the repository page by implementing a function
    to do the repository search.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the search function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will start by implementing the function that calls the GitHub GraphQL API
    to find a repository. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating a couple of types that the function will use. Open
    `src/api/types.ts` and add the following types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `SearchCriteria` type represents the information we need in the GraphQL
    query parameters to find the GitHub repository. The `RepoData` type represents
    the data returned from the repository search.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file for the function called `getRepo.ts` in the `src/api` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `getRepo.ts` and start by importing the types just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a constant for the following GraphQL query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the same query we created earlier in the chapter in the GitHub GraphQL
    API explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following type beneath the constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `GetRepoResponse` type represents the data returned from the GraphQL query
    – it references the `RepoData` type we created in *step 1*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This follows the same pattern as the function we created earlier to get the
    viewer’s information. One difference is that we have specified GraphQL query `org`
    and `repo` parameters, which are set to the properties in the `searchCriteria`
    function parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `assertIsGetRepoResponse` type assertion function follows the same pattern
    as previous type assertion functions. The implementation is lengthy, so it isn’t
    listed here. You can find the implementation here: [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getRepo.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/api/getRepo.ts).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That completes the implementation of a function that finds the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create the component for the repository search form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the search form component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will implement a form component that allows the user to search for a repository.
    The form will contain fields for the organization and repository name. The component
    won’t call the GitHub GraphQL API when the form is submitted; instead, it will
    pass the submitted search criteria back to a page component to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use React Hook Form for implementation, which should already be installed.
    The pattern for the implementation is very similar to previous forms we have implemented,
    so the steps to do this implementation aren’t listed in detail here. The implemention
    for the `SearchRepoForm` component can be copied from the book’s GitHub repository
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `repoPage` in the `src` folder and then create a
    new file called `SearchRepoForm.tsx` in this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `SearchRepoForm.tsx` and copy and paste the contents into it from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/repoPage/SearchRepoForm.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter10/Using-React-Query/src/repoPage/SearchRepoForm.tsx).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The implementation for the `SearchRepoForm` component is now in place in our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement a component that renders the found repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the FoundRepo component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `FoundRepo` component will display the repository name, description, and
    number of stars. Carry out the following steps to implement this component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file in the `src/repoPage` folder called `FoundRepo.tsx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the implementation by adding the following type for the component props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, the repository name, description, and the number of stars will be passed
    into the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following component implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The repository name is rendered as a bold heading. The number of stars is rendered
    in a gray rounded background to the right of the repository name. The description
    is rendered underneath the name.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the implementation of the found repository component.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement the function that calls the GitHub GraphQL API to star
    a repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a function to star a repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will use the same GraphQL mutation we used earlier in the chapter to star
    the GitHub repository. The pattern used in the function will be similar to the
    `getViewer` function we created earlier. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `starRepo.ts` in the `src/api` folder, with the following
    GraphQL mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the same mutation we created earlier in the chapter in the GitHub GraphQL
    API explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function implementation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This follows the same pattern as the other functions that call the GitHub GraphQL
    API.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the function that calls the GitHub GraphQL API to star a repository.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement the component for the star button.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the star button
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The star button is a regular button styled to be black with white text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `StarRepoButton.tsx` in the `src/repoPage` folder and
    add the following implementation to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: That completes the implementation of the star button.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create the main page component for the app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the repository page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The repository page component will reference the `SearchRepoForm`, `FoundRepo`,
    and `StarRepoButton` components we just created. This component will also call
    the `getRepo` and `starRepo` functions we created using React Query. To do this,
    carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `RepoPage.tsx` in the `src/repoPage` folder with the following
    import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported the components and the data functions we created earlier, along
    with React Query’s hooks and client. We have also imported React’s state hook
    because we need to store a piece of state outside React Query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the component implementation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We store the search criteria in state so that we can feed it into `useQuery`
    in the next step. We will set this state when the search repository form is submitted
    in *step 6*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, call the `useQuery` hook to get the repository for the given search criteria
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We don’t want the query to execute when the component is mounted, so we use
    the `enabled` option to only run the query when `searchCriteria` is set, which
    will be when the search repository form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: We use the search criteria in the query key as well and pass it to the `getRepo`
    function. We use a type assertion on the `getRepo` argument to remove `undefined`
    from it. This is safe because we know it can’t be `undefined` when `getRepo` is
    called because of the `enabled` option expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the star mutation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The mutation calls the `getRepo` function we created earlier. We use the mutation’s
    `onSuccess` option to update the React Query’s cached repository data with the
    `viewerHasStarred` property set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return the following JSX from the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component is wrapped in a `main` element, which centers its content. The
    repository search form is placed inside the `main` element. The found repository
    is rendered (if there is a found repository) along with a star button if the repository
    hasn’t already been starred.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement the `handleSearch` and `handleStarClick` handlers in the following
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `handleSearch` handler as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The handler sets the `searchCriteria` state, which triggers a re-render and
    the `useQuery` hook to call `getRepo` with the search criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `handleStarClick` handler as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The handler calls the mutation with the found repository’s ID, which will call
    the `starRepo` function.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the implementation of the repository page component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and add the `RepoPage` component we just created under the app
    header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s try the app by running `npm start` in the terminal. The repository
    search form should appear, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Repository search form](img/B19051_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Repository search form
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a GitHub organization and repository you haven’t starred and press **Search**.
    The found repository will appear with a **Star** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Found repository with a Star button](img/B19051_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – Found repository with a Star button
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Star** button to star the repository. The **Star** button will then
    disappear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the app from running before continuing by pressing *Ctrl* + *C* in the
    terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes the first iteration of the app. Here’s a recap of the key points
    of using `fetch` and React Query to interact with a GraphQL API:'
  prefs: []
  type: TYPE_NORMAL
- en: The `fetch` function can call a GraphQL API by putting the query or mutation
    in the request body and using the HTTP `POST` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Query can execute the function containing `fetch` and manage the response
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `enabled` option on `useQuery` and `useMutation` can execute the function
    containing `fetch` when the user interacts with the app. We used this feature
    to execute a query when the repository search form was submitted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will refactor the code to use a specialized GraphQL
    client.
  prefs: []
  type: TYPE_NORMAL
- en: Using Apollo Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about Apollo Client and use it within the app
    we have built, replacing the use of React Query and `fetch`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Apollo Client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apollo Client is a client library for interacting with GraphQL servers. It has
    query and mutation hooks called `useQuery` and `useMutation`, like React Query.
    Apollo Client also stores the data in a client cache like React Query and requires
    a provider component placed above the components requiring GraphQL data.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that Apollo Client does that React Query doesn’t is that it interacts
    with the GraphQL API directly instead of requiring a function to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apollo Client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first job is to install Apollo Client, which we can do by running the following
    command in a terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: This library includes TypeScript types, so no additional package is required
    to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the App component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first component we are going to refactor is the `App` component. Carry
    out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and replace the React Query import with the following Apollo
    Client import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `queryClient` variable assignment as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are now using Apollo Client. We have specified the URL to the API and the
    PAT because Apollo Client will directly call the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to replace `QueryClientProvider` with `ApolloProvider` in
    the JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `App` component is now using Apollo Client.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will refactor the `Header` component.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the Header component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will refactor the `Header` component to use Apollo Client. Carry out
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `getViewer.ts`. The `getViewer` and `assertIsGetViewerResponse` functions
    and the `GetViewerResponse` type can be removed because Apollo Client doesn’t
    require these. The `ViewerData` import statement can also be removed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statement into `getViewer.tsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`gql` is a function that we will use in the next step to wrap around the GraphQL
    query string constant.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `gql` function in front of the GraphQL query string constant as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, `GET_VIEWER_QUERY` is now assigned to a tagged template literal rather than
    a plain string. We covered tagged template literals in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    when we used Emotion’s `css` prop. The `gql` function converts the query string
    into a query object that Apollo Client can use.
  prefs: []
  type: TYPE_NORMAL
- en: Open `Header.tsx` and update the `useQuery` import statement to come from Apollo
    Client. Also, import the constant we just exported from `getViewer.ts`. We no
    longer need to import `getViewer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now update the `useQuery` hook as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Apollo Client’s `useQuery` hook takes in a parameter for the query definition
    object and returns useful state variables similar to React Query. We have aliased
    the `loading` state variable as `isLoading` so that the rendering of the loading
    indicator remains unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Apollo Client queries, see the following link: [https://www.apollographql.com/docs/react/data/queries/](https://www.apollographql.com/docs/react/data/queries/).'
  prefs: []
  type: TYPE_NORMAL
- en: That completes the `Header` component.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will refactor the repository page.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the repository page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refactoring the repository page will be a similar process. Carry out the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `getRepo.ts` and remove the `getRepo` and `assertIsGetResponse` functions
    and the `GetRepoReponse` type. Remove the imported `RepoData` and `SearchCriteria`
    types as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `gql` function and add it in front of the query string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `starRepo.ts` and remove the `starRepo` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `gql` function and add it in front of the query string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `RepoPage.tsx` and replace the React Query import statement with an Apollo
    Client import statement. Also, import the GraphQL query constants we just changed
    in the previous two steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use the `useLazyQuery` hook rather than `useQuery` because we want to
    trigger the query during form submission rather than when the component mounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the call to `useQuery` with the following call to `useLazyQuery`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`useLazyQuery` returns a tuple, with the first element being a function that
    can be called to trigger the query. We have called this trigger function `getRepo`.
    The second tuple element is an object containing useful state variables, such
    as the data from the API response, which we have destructured.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on `useLazyQuery`, see the following link: [https://www.apollographql.com/docs/react/data/queries/#manual-execution-with-uselazyquery](https://www.apollographql.com/docs/react/data/queries/#manual-execution-with-uselazyquery).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, replace the `queryClient` variable assignment and the `useMutation` call
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first parameter in Apollo Client’s `useMutation` hook is the mutation definition
    object, which is `STAR_REPO` in our case. The second parameter contains options
    for the mutation. We have specified the `onCompleted` option, which is a function
    called after the mutation has been completed. We have used this option to update
    the data cache to indicate that the viewer has now starred the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Apollo Client mutations, see the following link: [https://www.apollographql.com/docs/react/data/mutations](https://www.apollographql.com/docs/react/data/mutations).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `handleSearch` function to call the `useLazyQuery` trigger function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `handleStarClick` function to call the `useMutation` trigger function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the refactoring of the repository page.
  prefs: []
  type: TYPE_NORMAL
- en: Now, try the app by running `npm start` in the terminal. Try searching for a
    repository and starring it – it should behave as it previously did.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes the second iteration of the app and our use of Apollo Client.
    Here are the key points on using Apollo Client:'
  prefs: []
  type: TYPE_NORMAL
- en: Apollo Client is a specialized library for interacting with GraphQL APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike React Query, Apollo Client interacts directly with the GraphQL API and,
    therefore, doesn’t require a separate function that uses `fetch`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apollo Client’s `ApolloProvider` component needs to be placed high in the component
    tree above where backend data is needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apollo Client’s `useQuery` hook allows data to be fetched and cached in state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apollo Client’s `useMutation` hook allows data to be updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will summarize the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by learning the GraphQL syntax for queries and mutations.
    A great feature of GraphQL is the ability to request and receive only the required
    objects and fields. This can really help the performance of our apps.
  prefs: []
  type: TYPE_NORMAL
- en: We used React Query and `fetch` to interact with a GraphQL API. This is very
    similar to interacting with a REST API, but the HTTP method needs to be `POST`,
    and the query or mutation needs to be placed in the request body. A new feature
    we learned about in React Query is the ability to trigger queries when the user
    interacts with the app using the `enabled` option.
  prefs: []
  type: TYPE_NORMAL
- en: We refactored the app to use Apollo Client, which is a specialized GraphQL client.
    It is very similar to React Query in that it has `useQuery` and `useMutation`
    hooks and a provider component. One advantage over React Query is that Apollo
    Client interacts directly with the GraphQL API, which means we write less code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover patterns that help us build reusable components.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to check what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an attempt at a GraphQL query to get a GitHub viewer’s name
    and email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query errors though – what is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: What is the mutation that would unstar a GitHub repository? The mutation should
    have a parameter for the repository ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following use of `fetch` is an attempt to call a GraphQL API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This doesn’t work though – what is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: Where does the authorization access token in a protected GraphQL API get specified
    when using Apollo Client?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A component uses Apollo Client’s `useQuery` hook to fetch data from a GraphQL
    API, but the component errors with the following error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Could not find “client” in the context or passed in as an option. Wrap the
    root component in an <ApolloProvider>, or pass an ApolloClient instance in** **via
    options**'
  prefs: []
  type: TYPE_NORMAL
- en: What do you think the problem is?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following attempts to use Apollo Client’s `useQuery` hook to fetch data
    from a GraphQL API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The call errors, though – what do you think the problem is?
  prefs: []
  type: TYPE_NORMAL
- en: What state variable can be destructured from Apollo Client’s `useMutation` hook
    to determine whether the request has returned an error?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The query syntax is incorrect – the syntax is like JSON but doesn’t have colons
    and commas. Also, the `query` keyword can be omitted, but it is best practice
    to include this. Here is the corrected query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following mutation will unstar a GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The request is missing the HTTP `POST` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The authorization access token gets specified when Apollo Client is created,
    which is passed into the provider component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The problem is that Apollo Client’s `ApolloProvider` component hasn’t been placed
    above the component using `useQuery` in the component tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `gql` function must be applied to the query string to convert it into the
    object format that Apollo Client expects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `error` state variable can be destructured from React Query’s `useMutation`
    hook to determine whether the HTTP request has returned an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 4: Advanced React'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will learn about a number of different patterns to enable us
    to reuse a high amount of React and TypeScript code. We will also cover how to
    implement automated tests on React components, giving us the confidence to ship
    new features of applications quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19051_11.xhtml#_idTextAnchor273), *Reusable Components*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19051_12.xhtml#_idTextAnchor294), *Unit Testing with Jest and
    React Testing Library*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
