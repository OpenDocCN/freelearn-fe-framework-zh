- en: <st c="0">9</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">9</st>
- en: <st c="2">Understanding Continuous Integration and Continuous Deployment (CI/CD)</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">理解持续集成和持续部署（CI/CD）</st>
- en: <st c="72">In software development, the combination of</st> **<st c="117">continuous
    integration and deployment</st>** <st c="154">(</st>**<st c="156">CI/CD</st>**<st
    c="161">) practices with</st> **<st c="179">test-driven development</st>** <st
    c="202">(</st>**<st c="204">TDD</st>**<st c="207">) has proven to be a powerful
    combination for delivering high-quality software at a rapid pace.</st> **<st c="304">Continuous
    integration</st>** <st c="326">(</st>**<st c="328">CI</st>**<st c="330">) and
    TDD work in synergy to automate the software development cycle, promote a culture
    of testing, and enable teams to build and deploy code iteratively and</st> <st
    c="489">with confidence.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="72">在软件开发中，**<st c="117">持续集成和部署</st>** <st c="154">(</st>**<st c="156">CI/CD</st>**<st
    c="161">)实践与**<st c="179">测试驱动开发</st>** <st c="202">(</st>**<st c="204">TDD</st>**<st
    c="207">)的结合已被证明是快速交付高质量软件的强大组合。</st> **<st c="304">持续集成</st>** <st c="326">(</st>**<st
    c="328">CI</st>**<st c="330">)和TDD协同工作，以自动化软件开发周期，促进测试文化，并使团队能够迭代和</st> <st c="489">有信心地构建和部署代码。</st>
- en: <st c="505">CI/CD covers a series of automated steps that streamline the software
    delivery pipeline, from code changes made by developers to the deployment of these
    changes in production.</st> <st c="682">By implementing CI/CD practices, development
    teams can reduce manual errors, improve collaboration between team members, increase
    delivery speed, and improve overall</st> <st c="848">software quality.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="505">CI/CD涵盖了从开发者做出的代码更改到在生产中部署这些更改的一系列自动化步骤。</st> <st c="682">通过实施CI/CD实践，开发团队能够减少人为错误，提高团队成员之间的协作，加快交付速度，并提高整体</st>
    <st c="848">软件质量。</st>
- en: <st c="865">In this chapter, we’ll explore the fundamental concepts of CI/CD,
    explore the benefits of adopting these practices, discuss the key components of
    a CI/CD pipeline, and provide an overview of how organizations can</st> <st c="1078">successfully
    implement CI/CD processes to streamline their</st> **<st c="1138">software development
    life</st>** **<st c="1164">cycle</st>** <st c="1169">(</st>**<st c="1171">SDLC</st>**<st
    c="1175">).</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="865">在本章中，我们将探讨CI/CD的基本概念，探讨采用这些实践的好处，讨论CI/CD管道的关键组件，并提供组织如何</st> <st
    c="1078">成功实施CI/CD流程以简化其</st> **<st c="1138">软件开发生命周期</st>** **<st c="1164">周期</st>**
    <st c="1169">(</st>**<st c="1171">SDLC</st>**<st c="1175">).</st>
- en: <st c="1178">In summary, here are the main topics that will be covered in</st>
    <st c="1240">this chapter:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1178">总之，本章将涵盖以下主要主题：</st> <st c="1240">：</st>
- en: <st c="1253">Understanding continuous integration and</st> <st c="1295">continuous
    deployment</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1253">理解持续集成和</st> <st c="1295">持续部署</st>
- en: <st c="1316">Setting up CI/CD pipelines for automating build with</st> <st c="1370">GitHub
    Actions</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1316">使用GitHub Actions设置CI/CD管道以自动化构建</st> <st c="1370"></st>
- en: <st c="1384">Setting up CI/CD pipelines for automating tests with</st> <st c="1438">GitHub
    Actions</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1384">使用GitHub Actions设置CI/CD管道以自动化测试</st> <st c="1438"></st>
- en: <st c="1452">Setting up CI/CD pipelines for automating deployment processes
    with</st> <st c="1521">GitHub Actions</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1452">使用GitHub Actions设置CI/CD管道以自动化部署流程</st> <st c="1521"></st>
- en: <st c="1535">Technical requirements</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1535">技术要求</st>
- en: <st c="1558">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as the following</st> <st c="1720">technical requirements:</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1558">为了跟随本章中的示例和练习，你需要对Angular和TypeScript有基本的了解，以及以下</st> <st c="1720">技术要求：</st>
- en: <st c="1743">Node.js and npm installed on</st> <st c="1773">your computer</st>
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1743">安装在你电脑上的Node.js和npm</st>
- en: <st c="1786">Angular CLI</st> <st c="1799">installed globally</st>
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1786">全局安装Angular CLI</st> <st c="1799"></st>
- en: <st c="1817">A code editor, such as Visual Studio Code, installed on</st> <st
    c="1874">your computer</st>
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1817">安装在你电脑上的代码编辑器，例如Visual Studio Code</st>
- en: <st c="1887">The code files required for this chapter can be found on GitHub</st>
    <st c="1952">at</st> [<st c="1955">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%209</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%209)<st
    c="2053">.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1887">本章所需的代码文件可以在GitHub</st> <st c="1952">上找到</st> [<st c="1955">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%209</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%209)<st
    c="2053">。</st>
- en: <st c="2054">Understanding CI and CD</st>
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2054">理解CI和CD</st>
- en: <st c="2078">CI and CD have become essential</st> <st c="2111">practices in
    modern software development, enabling teams to deliver high-quality code quickly
    and efficiently.</st> <st c="2222">This comprehensive</st> <st c="2241">guide
    covers the fundamental concepts of CI/CD, explores their benefits, discusses best
    practices, and outlines successful implementation strategies.</st> <st c="2391">From
    understanding the fundamentals to optimizing CI/CD pipelines, this chapter aims
    to equip readers with the knowledge and tools they need to harness the power of
    CI/CD and transform</st> <st c="2576">software delivery.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2078">CI和CD已成为现代软件开发中的基本</st> <st c="2111">实践，使团队能够快速高效地交付高质量的代码。</st>
    <st c="2222">本全面</st> <st c="2241">指南涵盖了CI/CD的基本概念，探讨了它们的益处，讨论了最佳实践，并概述了成功的实施策略。</st>
    <st c="2391">从理解基础知识到优化CI/CD管道，本章旨在为读者提供他们需要利用CI/CD的力量并改变</st> <st c="2576">软件交付的知识和工具。</st>
- en: <st c="2594">But before we go ahead and use these practices, let’s</st> <st
    c="2649">understand them.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2594">但在我们继续使用这些实践之前，让我们</st> <st c="2649">了解它们。</st>
- en: <st c="2665">What is CI?</st>
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2665">什么是CI？</st>
- en: <st c="2677">CI is a DevOps software development practice in which developers
    regularly merge their code changes into a central repository.</st> <st c="2805">After
    ea</st><st c="2813">ch merge, automated builds and tests are run to ensure that
    the new code is error free and meets the project’s quality standards.</st> <st
    c="2944">This process is essential for identifying</st> <st c="2986">and correcting
    bugs more quickly, improving software quality, and reducing the time needed to
    validate and release new software updates.</st> <st c="3123">CI encourages frequent
    code integration, often several times a day, so that integration problems can
    be identified early in the development cycle and corrected more easily.</st> <st
    c="3296">It also encourages a cultural shift towards more frequent code deliveries,
    which is essential if we are to reap the benefits of CI’s automation</st> <st
    c="3440">and efficiency.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2677">CI是一种DevOps软件开发实践，其中开发者定期将他们的代码更改合并到中央存储库中。</st> <st c="2805">每次合并后，都会运行自动构建和测试，以确保新代码无错误并符合项目的质量标准。</st>
    <st c="2944">这个过程对于快速识别和纠正错误、提高软件质量以及减少验证和发布新软件更新所需的时间至关重要。</st> <st c="3123">CI鼓励频繁的代码集成，通常每天几次，以便在开发周期早期识别集成问题并更容易地纠正。</st>
    <st c="3296">它还鼓励文化上的转变，向更频繁的代码交付转变，这对于我们充分利用CI的自动化</st> <st c="3440">和效率至关重要。</st>
- en: <st c="3455">CI is the first phase of the CI/CD pipeline, part of the broader
    DevOps approach to software development.</st> <st c="3562">It follows the agile
    software development methodology, where work is broken down into small, manageable
    tasks that can be completed and integrated frequently.</st> <st c="3721">The use
    of CI tools, such as GitHub Actions, Jenkins, Buildbot, Go, Travis CI, and GitLab
    CI, facilitates the automation of build and test processes, making it easier for
    developers to integrate their changes with the rest of the project and identify
    issues early in the</st> <st c="3992">development process.</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3455">持续集成（CI）是CI/CD管道的第一阶段，是更广泛的软件开发DevOps方法的一部分。</st> <st c="3562">它遵循敏捷软件开发方法，将工作分解成小而可管理的任务，这些任务可以频繁完成和集成。</st>
    <st c="3721">使用CI工具，如GitHub Actions、Jenkins、Buildbot、Go、Travis CI和GitLab CI，简化了构建和测试过程的自动化，使开发者更容易将他们的更改与项目其他部分集成，并在开发早期阶段识别问题。</st>
    <st c="3992">开发过程中。</st>
- en: <st c="4012">The benefits of CI include</st> <st c="4039">improved developer
    productivity, faster delivery of updates, and a more predictable delivery schedule.</st>
    <st c="4143">It also improves cross-team collaboration and systems integration,
    reducing testing errors and improving the efficiency of the software development
    cycle.</st> <st c="4298">However, the challenges of CI mainly concern team adoption
    and the initial technical installation of CI tools.</st> <st c="4409">Overcoming
    these challenges and effectively implementing CI practices is essential to realizing
    the full potential of CI in improving software development processes</st> <st
    c="4574">and outcomes.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4012">持续集成的好处包括</st> <st c="4039">提高开发者生产力、更快地交付更新以及更可预测的交付计划。</st> <st
    c="4143">它还改善了跨团队协作和系统集成，减少了测试错误，并提高了软件开发周期的效率。</st> <st c="4298">然而，持续集成的主要挑战主要涉及团队采用和CI工具的初始技术安装。</st>
    <st c="4409">克服这些挑战并有效地实施持续集成实践对于实现持续集成在改进软件开发过程</st> <st c="4574">和结果中的全部潜力至关重要。</st>
- en: <st c="4587">In the next section, we’ll explore in more depth the benefits of
    CI for</st> <st c="4660">development teams.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4587">在下一节中，我们将更深入地探讨持续集成（CI）对</st> <st c="4660">开发团队的好处。</st>
- en: <st c="4678">Benefits of CI for development teams</st>
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="4678">持续集成（CI）对开发团队的好处</st>
- en: <st c="4715">The benefits of CI for development</st> <st c="4750">teams are
    manifold, encompassing efficiency, quality, and customer satisfaction.</st> <st
    c="4832">Here’s a detailed overview of</st> <st c="4862">these benefits:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4715">持续集成（CI）对开发团队的好处是多方面的，包括效率、质量和客户满意度。</st> <st c="4750">以下是这些好处的详细概述：</st>
- en: '**<st c="4877">Faster iteration and problem resolution</st>**<st c="4917">:
    CI enables teams to integrate code changes more frequently, speeding up iterations
    and facilitating problem resolution.</st> <st c="5040">Small code changes are
    simpler to manage, reducing the complexity of problems that</st> <st c="5123">can
    arise.</st>'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4877">更快的迭代和问题解决</st>**<st c="4917">：持续集成使团队能够更频繁地集成代码更改，加快迭代速度并促进问题解决。</st>
    <st c="5040">小的代码更改更容易管理，从而减少了可能出现的复杂问题的复杂性。</st>'
- en: '**<st c="5133">Improved code quality and fewer bugs</st>**<st c="5170">: By
    frequently integrating and testing code, CI enables bugs to be identified and
    corrected early in the development cycle.</st> <st c="5296">The result is higher-quality
    code with fewer defects, improving the user experience and</st> <st c="5384">reducing
    downtime.</st>'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5133">提高代码质量和减少错误</st>**<st c="5170">：通过频繁集成和测试代码，持续集成能够在开发周期早期识别并纠正错误。</st>
    <st c="5296">结果是代码质量更高，缺陷更少，从而改善了用户体验并</st> <st c="5384">减少了停机时间。</st>'
- en: '**<st c="5402">Increased efficiency and reduced costs</st>**<st c="5441">:
    CI-driven automation reduces manual tasks, saving time for developers.</st> <st
    c="5515">This not only increases efficiency but also reduces the costs associated
    with manual testing and error management.</st> <st c="5630">As a result, engineers
    can devote more time to</st> <st c="5677">value-added activities.</st>'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5402">提高效率和降低成本</st>**<st c="5441">：由持续集成驱动的自动化减少了手动任务，为开发者节省了时间。</st>
    <st c="5515">这不仅提高了效率，还降低了与手动测试和错误管理相关的成本。</st> <st c="5630">因此，工程师可以有更多时间投入到</st>
    <st c="5677">增值活动中。</st>'
- en: '**<st c="5700">Improved transparency and collaboration</st>**<st c="5740">:
    CI promotes transparency by providing continuous</st> <st c="5791">feedback on
    code quality and integration issues.</st> <st c="5841">It also promotes better
    team collaboration by ensuring that code changes are integrated and tested regularly,
    enabling better coordination between</st> <st c="5988">team members.</st>'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5700">提高透明度和协作</st>**<st c="5740">：持续集成通过提供对代码质量和集成问题的持续</st> <st
    c="5791">反馈来促进透明度。</st> <st c="5841">它还通过确保代码更改定期集成和测试来促进更好的团队协作，从而在团队成员之间实现更好的协调。</st>'
- en: '**<st c="6001">Faster time to market</st>**<st c="6023">: By automating the
    build, test, and deployment processes, CI enables teams to deliver new features
    and updates to end users more quickly.</st> <st c="6163">This responsiveness keeps
    the development team competitive and ensures that customers benefit from the</st>
    <st c="6266">latest enhancements.</st>'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6001">更快的上市时间</st>**<st c="6023">：通过自动化构建、测试和部署流程，持续集成（CI）使团队能够更快地将新特性和更新交付给最终用户。</st>
    <st c="6163">这种响应性使开发团队能够保持竞争力，并确保客户能够从</st> <st c="6266">最新的增强功能中受益。</st>'
- en: '**<st c="6286">Improved customer satisfaction</st>**<st c="6317">: Fewer bugs
    and errors end up in production, improving the user experience.</st> <st c="6395">CI
    also enables rapid response to customer feedback, enabling te</st><st c="6459">ams
    to make adjustments and improvements</st> <st c="6501">more efficiently.</st>'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6286">提高客户满意度</st>**<st c="6317">：更少的错误和缺陷最终进入生产，改善了用户体验。</st> <st
    c="6395">持续集成还使团队能够快速响应客户反馈，使团队能够更高效地进行调整和改进</st> <st c="6459">。</st>'
- en: '**<st c="6518">Reduced mean time to resolution (MTTR)</st>**<st c="6557">:
    CI enables problems to be detected and resolved more quickly, thus reducing the
    MTTR.</st> <st c="6646">This ensures that the software remains stable and reliable,</st>
    <st c="6706">minimizing downtime.</st>'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6518">缩短平均故障恢复时间（MTTR）</st>**<st c="6557">：持续集成使问题能够更快地被检测和解决，从而降低MTTR。</st>
    <st c="6646">这确保了软件的稳定性和可靠性，</st> <st c="6706">最小化了停机时间。</st>'
- en: '**<st c="6726">Increased test reliability</st>**<st c="6753">: Continuous testing
    within the CI framework improves test reliability by enabling more precise tests
    to be carried out.</st> <st c="6875">This ensures that the software is thoroughly
    tested and ready for production, boosting confidence in</st> <st c="6976">software
    quality.</st>'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6726">提高测试可靠性</st>**<st c="6753">：在持续集成框架内进行持续测试，通过允许执行更精确的测试来提高测试可靠性。</st>
    <st c="6875">这确保了软件经过彻底测试并准备好投入生产，提高了对</st> <st c="6976">软件质量}的信心。</st>'
- en: '**<st c="6993">Competitive advantage</st>**<st c="7015">: Organizations that
    adopt</st> **<st c="7043">business intelligence</st>** <st c="7064">(</st>**<st
    c="7066">BI</st>**<st c="7068">) have a competitive advantage</st> <st c="7099">because
    they can deploy functionality more quickly, which in turn saves them money.</st>
    <st c="7184">This early feedback and aut</st><st c="7211">omation helps to reduce
    lead times, deployment frequency, and change failure rates, which in turn improves</st>
    <st c="7319">business results.</st>'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6993">竞争优势</st>**<st c="7015">：采用</st> **<st c="7043">商业智能</st>**
    <st c="7064">(</st>**<st c="7066">BI</st>**<st c="7068">) 的组织具有竞争优势</st> <st c="7099">，因为它们可以更快地部署功能，从而节省资金。</st>
    <st c="7184">这种早期反馈和自动化有助于缩短交货期、部署频率和变更失败率，进而提高</st> <st c="7211">业务成果。</st>'
- en: '**<st c="7336">Increased transparency and accountability within the team</st>**<st
    c="7394">: CI/CD practices increase transparency and accountability within the
    team, enabling problems to be identified and resolved quickly, including construction
    failures and architectural setbacks.</st> <st c="7588">This continuous feedback
    loop improves overall</st> <st c="7635">product quality.</st>'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7336">团队内部提高透明度和问责制</st>**<st c="7394">：CI/CD实践提高了团队内部的透明度和问责制，使问题能够迅速识别和解决，包括施工失败和架构挫折。</st>
    <st c="7588">这种持续反馈循环提高了整体</st> <st c="7635">产品质量。</st>'
- en: <st c="7651">In summary, CI offers development teams significant benefits in
    terms of efficiency, quality, and customer satisfaction.</st> <st c="7773">It
    streamlines the development process, reduces costs, and enhances</st> <st c="7840">collaboration,
    ultimately leading to the delivery of high-quality software products more quickly
    and reliably.</st> <st c="7952">In the next section, we will explore the key principles
    of</st> <st c="8011">CI implementation.</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7651">总之，持续集成在效率、质量和客户满意度方面为开发团队提供了显著的好处。</st> <st c="7773">它简化了开发过程，降低了成本，并增强了</st>
    <st c="7840">协作，最终导致能够更快、更可靠地交付高质量的软件产品。</st> <st c="7952">在下一节中，我们将探讨持续集成实施的关键原则。</st>
- en: <st c="8029">Key principles of CI implementation</st>
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="8029">持续集成（CI）实施的关键原则</st>
- en: <st c="8065">The key principles of CI implementation aim to improve the efficiency,
    quality, and speed of software development.</st> <st c="8181">Here are the</st>
    <st c="8193">key principles:</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8065">持续集成实施的关键原则旨在提高软件开发效率、质量和速度。</st> <st c="8181">以下是</st> <st c="8193">关键原则：</st>
- en: '**<st c="8209">Automate everything</st>**<st c="8229">: CI focuses on automating
    the build, test, and integration processes.</st> <st c="8301">Automation reduces
    manual effort, minimizes errors, and accelerates the</st> <st c="8373">development
    cycle.</st>'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8209">自动化一切</st>**<st c="8229">：持续集成关注自动化构建、测试和集成过程。</st> <st c="8301">自动化减少了人工工作量，最小化了错误，并加速了</st>
    <st c="8373">开发周期。</st>'
- en: '**<st c="8391">Frequent integration</st>**<st c="8412">: Frequently integrate
    code changes into a shared repository, ideally several times a day.</st> <st c="8504">This
    practice enables integration problems to be identified and resolved early in the</st>
    <st c="8590">development cycle.</st>'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8391">频繁集成</st>**<st c="8412">：频繁地将代码更改集成到共享仓库中，理想情况下每天几次。</st> <st
    c="8504">这种做法可以使集成问题在开发周期的早期就被识别和解决。</st>'
- en: '**<st c="8608">Make the build process fast</st>**<st c="8636">: The build process
    should be as fast as possible to ensure rapid feedback.</st> <st c="8713">Rapid
    construction means that problems can be detected and resolved more quickly, facilitating</st>
    <st c="8808">continuous improvement.</st>'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8608">使构建过程快速</st>**<st c="8636">：构建过程应该尽可能快，以确保快速反馈。</st> <st c="8713">快速构建意味着问题可以更快地被发现和解决，从而促进</st>
    <st c="8808">持续改进。</st>'
- en: '**<st c="8831">Immediate feedback</st>**<st c="8850">: CI relies on immediate
    feedback from automated builds and tests.</st> <st c="8918">This feedback is essential
    for identifying and resolving problems early in the</st> <st c="8997">development
    process.</st>'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8831">即时反馈</st>**<st c="8850">：持续集成依赖于自动化构建和测试的即时反馈。</st> <st c="8918">这种反馈对于在开发过程的早期识别和解决问题至关重要。</st>'
- en: '**<st c="9017">Start small and grow</st>**<st c="9038">: Start with a simple
    CI configuration and gradually add other tools and practices as required.</st>
    <st c="9135">This approach encourages flexibility and experimentation, allowing
    teams to find what works best in their</st> <st c="9241">specific context.</st>'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9017">从小处着手，逐步发展</st>**<st c="9038">：从简单的持续集成配置开始，根据需要逐步添加其他工具和实践。</st>
    <st c="9135">这种方法鼓励灵活性和实验，使团队能够在其</st> <st c="9241">特定环境中找到最佳方案。</st>'
- en: '**<st c="9258">Define success indicators</st>**<st c="9284">: Clearly define
    success indicators for your CI process, such as accelerated code construction
    or reduced error and work rates.</st> <st c="9413">Use these indicators to measure
    the effectiveness of your CI practices and to</st> <st c="9491">guide improvements.</st>'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9258">定义成功指标</st>**<st c="9284">：明确定义持续集成过程的成功指标，例如加速代码构建或降低错误和工作率。</st>
    <st c="9413">使用这些指标来衡量持续集成实践的有效性，并</st> <st c="9491">指导改进。</st>'
- en: '**<st c="9510">Documentation</st>**<st c="9524">: Document the CI process and
    the tools used by all developers and stakeholders.</st> <st c="9606">Good documentation
    ensures that everyone understands how to</st> <st c="9665">contribute to the CI
    process and solve</st> <st c="9705">problems efficiently.</st>'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9510">文档</st>**<st c="9524">：记录持续集成过程和所有开发人员和利益相关者使用的工具。</st> <st
    c="9606">良好的文档确保每个人都了解如何</st> <st c="9665">为持续集成过程做出贡献并高效地解决</st> <st c="9705">问题。</st>'
- en: '**<st c="9726">Collaboration between operations and development</st>**<st c="9775">:
    Encourage a culture in which operations and development work closely together.</st>
    <st c="9857">This collaboration is essential for understanding software reliability
    and performance from both points</st> <st c="9961">of view.</st>'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9726">运维和开发之间的协作</st>**<st c="9775">：鼓励运维和开发紧密协作的文化。</st> <st c="9857">这种协作对于从两个角度理解软件可靠性和性能至关重要。</st>'
- en: '**<st c="9969">Scalability</st>**<st c="9981">: CI breaks down barriers to
    growth by automating code integration and communication, allowing organizations
    to scale their development teams, code base,</st> <st c="10136">and infrastructure.</st>'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9969">可扩展性</st>**<st c="9981">：持续集成通过自动化代码集成和沟通，打破了增长障碍，使组织能够扩展其开发团队、代码库和</st>
    <st c="10136">基础设施。</st>'
- en: '**<st c="10155">Investment in the learning curve</st>**<st c="10188">: Implementing
    CI successfully involves learning new skills in areas such as version control
    and automation.</st> <st c="10298">However, these skills are readily available,
    and the benefits of CI outweigh the</st> <st c="10379">initial investment.</st>'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="10155">学习曲线的投资</st>**<st c="10188">：成功实施持续集成涉及在版本控制和自动化等领域学习新技能。</st>
    <st c="10298">然而，这些技能很容易获得，持续集成的益处超过了</st> <st c="10379">初始投资。</st>'
- en: <st c="10398">These principles guide the implementation of CI, ensuring that
    it becomes an integral part of the software development process, improving productivity,
    quality, and speed.</st> <st c="10571">In the next section, we will learn what</st>
    **<st c="10611">continuous deployment</st>** <st c="10632">(</st>**<st c="10634">CD</st>**<st
    c="10636">) i</st><st c="10640">s.</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10398">这些原则指导CI的实施，确保它成为软件开发过程的组成部分，提高生产力、质量和速度。</st> <st c="10571">在下一节中，我们将学习什么是</st>
    **<st c="10611">持续部署</st>** <st c="10632">(</st>**<st c="10634">CD</st>**<st c="10636">)。</st>
- en: <st c="10643">What is CD?</st>
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10643">什么是CD？</st>
- en: <st c="10655">CD is an automated software</st> <st c="10683">release practice
    in which code changes are automatically deployed at different stages as they pass
    predefined tests.</st> <st c="10801">The aim of CD is to accelerate production
    releases by using automation to minimize human intervention during the deployment
    process.</st> <st c="10934">This approach is part of the wider DevOps practice,
    which aims to accelerate innovation and value creation by applying automation
    to every stage of</st> <st c="11082">the SDLC.</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10655">CD是一种自动化软件</st> <st c="10683">发布实践，其中代码更改在通过预定义测试的不同阶段自动部署。</st>
    <st c="10801">CD的目的是通过在部署过程中最小化人工干预来加速生产发布。</st> <st c="10934">这种方法是更广泛的DevOps实践的一部分，该实践旨在通过将自动化应用于SDLC的每个阶段来加速创新和价值创造</st>
    <st c="11082">。</st>
- en: <st c="11091">Software design requires a mix of rigorous testing, close collaboration
    between teams, advanced tools, and workflow processes throughout the application
    design and development process.</st> <st c="11277">When successfully implemented,
    CD enables organizations to respond quickly to customer requests and deliver software
    updates rapidly, often within minutes of validating code changes.</st> <st c="11460">This
    process includes automating build, test, and deployment in a single</st> <st c="11533">workflow,
    with the aim of automating software deployment</st> <st c="11590">in production.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11091">软件设计需要在整个应用程序设计和开发过程中进行严格的测试、团队之间的紧密协作、先进工具和流程流程。</st> <st c="11277">当成功实施时，CD使组织能够快速响应客户请求并快速交付软件更新，通常在验证代码更改后的几分钟内。</st>
    <st c="11460">此过程包括在单个</st> <st c="11533">工作流程中自动化构建、测试和部署，目的是在生产中自动化软件部署</st>
    <st c="11590">。</st>
- en: <st c="11604">The benefits of CD include fully automated deployment cycles,
    enabling organizations to spend more time on software creation than on release
    preparation.</st> <st c="11759">It also leads to more regular, incremental deployments,
    facilitating faster product development and a continuous improvement model.</st>
    <st c="11891">In addition, CD provides rapid feedback loops on new features, updates,
    and code changes, enabling organizations to quickly receive and integrate</st>
    <st c="12037">user feedback.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11604">CD的好处包括完全自动化的部署周期，使组织能够将更多时间花在软件创建上，而不是发布准备上。</st> <st c="11759">它还导致更频繁的增量部署，促进更快的产品开发和持续改进模型。</st>
    <st c="11891">此外，CD为新功能、更新和代码更改提供快速反馈循环，使组织能够快速接收和整合</st> <st c="12037">用户反馈。</st>
- en: <st c="12051">CD goes further than CI, which automates everything right up to
    the deployment itself, requiring human intervention to set up the deployment.</st>
    <st c="12194">CD automates the whole process, including the release of the software
    itself, making it a natural evolution of CD if the pipeline is properly set up
    and designed to test all elements of a software product</st> <st c="12399">before
    release.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12051">CD比CI更进一步，它自动化了从部署本身之前的所有事情，需要人工干预来设置部署。</st> <st c="12194">CD自动化了整个过程，包括软件本身的发布，如果管道设置得当并设计用于测试软件产品的所有元素，那么它就是CD的自然演变</st>
    <st c="12399">在发布之前。</st>
- en: '<st c="12414">A CD pipeline streamlines software delivery by automatically
    building, testing, and deploying code changes directly to production.</st> <st
    c="12546">It involves automated testing and monitoring throughout the pipeline
    to detect potential errors, functional problems, and bugs, providing real-time
    alerts and preventing problems from reaching the main software branch or production.</st>
    <st c="12779">This approach underlines the main objective of DevOps: the CD of
    value to</st> <st c="12853">end users.</st>'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12414">持续交付（CD）管道通过自动构建、测试和将代码更改直接部署到生产环境中，简化了软件交付过程。</st> <st c="12546">它涉及在整个管道中进行自动化测试和监控，以检测潜在的错误、功能问题和缺陷，提供实时警报，防止问题到达主软件分支或生产环境。</st>
    <st c="12779">这种方法强调了DevOps的主要目标：为最终用户提供价值。</st> <st c="12853">最终用户。</st>
- en: <st c="12863">In practice, this means that a change made by a developer to a
    cloud application can be put into production within minutes of being written,
    provided it passes automated testing.</st> <st c="13043">This makes it much easier
    to receive and integrate user feedback on an ongoing bas</st><st c="13125">is.</st>
    <st c="13130">However, delivering value depends heavily on well-designed test
    automation, which can require a significant</st> <st c="13238">initial investment.</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12863">在实践中，这意味着开发者对云应用程序所做的更改，只要通过自动化测试，就可以在编写后几分钟内投入生产。</st> <st c="13043">这使得接收和整合用户反馈变得更加容易。</st><st
    c="13125">。</st> <st c="13130">然而，交付价值在很大程度上取决于精心设计的测试自动化，这可能需要大量的初始投资。</st> <st
    c="13238">初始投资。</st>
- en: <st c="13257">Overall, CD is an essential aspect of the DevOps approach, enabling
    organizations to release software updates</st> <st c="13368">quickly and efficiently,
    accelerating innovation and value creation</st> <st c="13436">for end-users.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13257">总的来说，持续交付（CD）是DevOps方法的一个基本方面，使组织能够快速、高效地发布软件更新，加速创新和价值创造。</st>
    <st c="13368">加速创新和价值创造</st> <st c="13436">为最终用户。</st>
- en: <st c="13450">Benefits of CD for development teams</st>
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="13450">持续交付（CD）对开发团队的好处</st>
- en: <st c="13487">CD offers several key benefits to development teams, facilitating
    a more efficient, agile, and responsive software development process.</st> <st
    c="13624">Here are the</st> <st c="13637">main benefits:</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13487">持续交付（CD）为开发团队提供了几个关键好处，促进了更高效、敏捷和响应的软件开发过程。</st> <st c="13624">以下是</st>
    <st c="13637">主要好处：</st>
- en: '**<st c="13651">Fully automated deployment cycles</st>**<st c="13685">: CD
    enables organizations to automate the entire</st> <st c="13735">deployment process,
    reducing manual intervention and allowing development teams to focus more on coding
    and less on release preparation.</st> <st c="13873">This automation speeds up
    the deployment of new features and updates, enabling teams to deliver software
    faster and</st> <st c="13989">more efficiently.</st>'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="13651">完全自动化的部署周期</st>**<st c="13685">：持续交付（CD）使组织能够自动化整个</st> <st
    c="13735">部署过程，减少人工干预，并允许开发团队更多地专注于编码，而不是发布准备。</st> <st c="13873">这种自动化加快了新功能和更新的部署，使团队能够更快、更高效地交付软件。</st>
    <st c="13989">更高效地。</st>'
- en: '**<st c="14006">More regular, incremental deployments</st>**<st c="14044">:
    By automating deployments, CD enables small, incremental changes to be released
    more frequently.</st> <st c="14144">This approach enables faster product development
    and facilitates a continuous improvement model, in which teams can rapidly iterate
    on their software based on user feedback and</st> <st c="14321">market demands.</st>'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14006">更频繁、增量部署</st>**<st c="14044">：通过自动化部署，持续交付（CD）使得小规模的增量变更能够更频繁地发布。</st>
    <st c="14144">这种方法能够加速产品开发，并促进持续改进模型，在该模型中，团队可以根据用户反馈和市场需求快速迭代他们的软件。</st> <st
    c="14321">市场需求。</st>'
- en: '**<st c="14336">Rapid feedback loops on new features</st>**<st c="14373">:
    CD provides real-time feedback on new features, updates, and code changes.</st>
    <st c="14451">This immediate feedback loop is essential to enable teams to rapidly
    adapt and improve their software, ensuring that the final product meets users’
    expectations</st> <st c="14612">and requirements.</st>'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14336">对新功能快速反馈循环</st>**<st c="14373">：持续交付（CD）为新功能、更新和代码更改提供实时反馈。</st>
    <st c="14451">这种即时反馈循环对于使团队能够快速适应和改进他们的软件至关重要，确保最终产品符合用户的期望和要求。</st> <st c="14612">和需求。</st>'
- en: '**<st c="14629">Event response</st>**<st c="14644">: The CD enables teams to
    react quickly to system errors in production, security incidents or potential
    new features to be developed during web application development.</st> <st c="14814">Immediate
    release of code to production enables organizations to address and resolve issues
    more quickly, with metrics such as MTTR enabling response times to be assessed
    and improved</st> <st c="14998">over time.</st>'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14629">事件响应</st>**<st c="14644">：持续交付（CD）使团队能够快速响应生产中的系统错误、安全事件或开发中可能开发的新功能。</st>
    <st c="14814">将代码立即发布到生产环境使组织能够更快地解决和解决问题，MTTR等指标使响应时间得以评估和随着时间的推移而改进</st> <st
    c="14998">over time.</st>'
- en: '**<st c="15008">Streamlined release cycles for faster time to market</st>**<st
    c="15061">: By automating the deployment process, CD enables software development
    teams to quickly deliver new features and bug fixes to end users.</st> <st c="15200">This
    automation reduces the risk of human error and enables small, frequent updates
    to be deployed quickly, speeding up time to market and giving companies a</st>
    <st c="15358">competitive edge.</st>'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="15008">简化发布周期，加快上市时间</st>**<st c="15061">：通过自动化部署过程，持续交付（CD）使软件开发团队能够快速将新特性和错误修复提供给最终用户。</st>
    <st c="15200">这种自动化减少了人为错误的风险，并允许快速部署小型、频繁的更新，从而加快上市时间，为公司提供</st> <st c="15358">竞争优势。</st>'
- en: '**<st c="15375">Early detection of problems thanks to automated testing</st>**<st
    c="15431">: CD emphasizes the importance of automated testing throughout the software
    development process.</st> <st c="15529">By carrying out continuous testing, developers
    can quickly identify and resolve any potential problems, thus guaranteeing the
    stability and reliability</st> <st c="15680">of the software.</st> <st c="15698">This
    early detection helps reduce the likelihood of costly errors in production and
    instills confidence in the</st> <st c="15809">development team.</st>'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过自动化测试实现问题的早期发现**<st c="15375">：持续交付（CD）强调在整个软件开发过程中自动化测试的重要性。</st> <st
    c="15431">通过进行持续测试，开发者可以快速识别和解决任何潜在问题，从而保证软件的稳定性和可靠性。</st> <st c="15529">这种早期发现有助于减少生产中成本高昂的错误的可能性，并增强开发团队的信心。</st>
    <st c="15680">of the software.</st> <st c="15698">This early detection helps reduce
    the likelihood of costly errors in production and instills confidence in the</st>
    <st c="15809">development team.</st>'
- en: '**<st c="15826">Continuous feedback loop for continuous improvement</st>**<st
    c="15878">: CD fosters a culture of continuous improvement by establishing a feedback
    loop between developers and end users.</st> <st c="15994">This iterative process
    enables organizations to adapt and respond to changing user needs, ensuring that
    their software remains relevant</st> <st c="16130">and competitive.</st>'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="15826">持续反馈循环以实现持续改进</st>**<st c="15878">：持续交付（CD）通过在开发者和最终用户之间建立反馈循环，培养了一种持续改进的文化。</st>
    <st c="15994">这个迭代过程使组织能够适应和响应不断变化的需求，确保其软件保持相关性和竞争力。</st> <st c="16130">and competitive.</st>'
- en: '**<st c="16146">Improved collaboration and communication</st>**<st c="16187">:
    CD promotes collaboration and communication between team members, improving the
    overall efficiency of the development process.</st> <st c="16317">By automating
    the deployment pipeline, developers can concentrate on their core tasks, facilitating
    seamless integration between different teams and resulting in faster, more efficient</st>
    <st c="16502">software releases.</st>'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="16146">改进协作和沟通</st>**<st c="16187">：持续交付（CD）促进团队成员之间的协作和沟通，提高了开发过程的整体效率。</st>
    <st c="16317">通过自动化部署管道，开发者可以专注于他们的核心任务，促进不同团队之间的无缝集成，从而实现更快、更高效的</st> <st c="16502">软件发布。</st>'
- en: <st c="16520">In short, CD offers development teams the ability to deliver software
    faster, ensure high quality through automated testing, and maintain a responsive
    and agile development process.</st> <st c="16703">These benefits collectively
    contribute to a more efficient, innovative, and customer-centric software</st>
    <st c="16805">development cycle.</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16520">简而言之，持续交付（CD）为开发团队提供了快速交付软件的能力，通过自动化测试确保高质量，并保持响应和敏捷的开发过程。</st>
    <st c="16703">这些好处共同促进了一个更高效、创新和以客户为中心的软件开发周期。</st> <st c="16805">development
    cycle.</st>
- en: <st c="16823">Key principles of CD implementation</st>
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16823">持续交付（CD）实施的关键原则</st>
- en: <st c="16859">Overall, CD is an essential aspect of the</st> <st c="16901">DevOps
    approach, enabling organizations to release software updates quickly and efficiently,
    accelerating innovation and value creation for end users.</st> <st c="17053">The
    key principles of CD implementation are essential to creating a streamlined and
    automated software release process.</st> <st c="17173">These principles derive
    from a combination of agile and organizational best practices aimed at delivering
    software to end users as quickly as possible, learning from their experience and
    incorporating their feedback into the next release.</st> <st c="17412">Here are
    the</st> <st c="17425">fundamental principles:</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16859">总的来说，持续交付（CD）是DevOps方法的一个基本方面，使组织能够快速高效地发布软件更新，加速创新和价值创造，为最终用户提供更多价值。</st>
    <st c="16901">持续交付（CD）实施的关键原则对于创建一个简化和自动化的软件发布流程至关重要。</st> <st c="17053">这些原则源于敏捷和最佳组织实践的组合，旨在尽可能快地将软件交付给最终用户，从他们的经验中学习，并将他们的反馈纳入下一次发布。</st>
    <st c="17173">以下是**<st c="17425">基本原则</st>**：</st>
- en: '**<st c="17448">Build quality</st>**<st c="17462">: This principle emphasizes
    building quality into the product from the outset, rather than relying on</st>
    <st c="17564">inspection to achieve it.</st> <st c="17591">It involves creating
    and evolving feedback loops to detect problems at an early stage, ideally before
    they are recorded in the version control system.</st> <st c="17742">Automated
    testing should be used to detect defects before they worsen</st> <st c="17812">over
    time.</st>'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="17448">构建质量</st>**<st c="17462">：这一原则强调从一开始就将质量构建到产品中，而不是依赖于检查来实现。</st>
    <st c="17564">它涉及创建和演变反馈循环，以便在问题被记录在版本控制系统之前尽早发现。</st> <st c="17591">应使用自动化测试在问题恶化之前检测缺陷。</st>
    <st c="17742">自动化测试应在问题恶化之前检测缺陷。</st> <st c="17812">随着时间的推移，应使用自动化测试来检测缺陷。</st>'
- en: '**<st c="17822">Work in small batches</st>**<st c="17844">: CD encourages working
    with small, manageable changes rather than large, infrequent releases.</st> <st
    c="17940">This approach reduces the time needed to obtain feedback, facilitates
    problem identification and resolution, and increases efficiency and motivation.</st>
    <st c="18090">The aim is to change the economics of the software delivery process
    to make it viable to work in</st> <st c="18187">small batches.</st>'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="17822">小批量工作</st>**<st c="17844">：持续交付（CD）鼓励使用小而可管理的变更，而不是大而稀少的发布。</st>
    <st c="17940">这种方法减少了获取反馈所需的时间，促进了问题的识别和解决，并提高了效率和动力。</st> <st c="18090">目标是改变软件交付的经济性，使其能够在小批量中工作。</st>'
- en: '**<st c="18201">Computers do repetitive tasks, people solve problems</st>**<st
    c="18254">: This principle emphasizes the importance of automating repetitive
    tasks, such as regression testing, so that humans can concentrate on solving problems.</st>
    <st c="18410">The aim is to create a balance in which computers handle the simple,
    repe</st><st c="18483">titive tasks, and humans the more complex,</st> <st c="18527">creative
    ones.</st>'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="18201">计算机执行重复性任务，人类解决问题</st>**<st c="18254">：这一原则强调了自动化重复性任务，如回归测试的重要性，以便人类可以专注于解决问题。</st>
    <st c="18410">目标是创造一种平衡，其中计算机处理简单、重复的任务，而人类处理更复杂、更具创造性的任务。</st>'
- en: '**<st c="18541">Continuous improvement</st>**<st c="18564">: CD promotes the
    idea of continuous improvement, or</st> *<st c="18618">kaizen</st>*<st c="18624">,
    derived from the Lean movement.</st> <st c="18658">It’s about seeing improvement
    work as an essential part of everyday work, and constantly striving to make things
    better.</st> <st c="18779">It’s about not being satisfied with the status quo
    and always looking for opportunities</st> <st c="18867">to improve.</st>'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="18541">持续改进</st>**<st c="18564">：持续交付（CD）推崇持续改进的理念，或称为*<st c="18618">精益运动</st>**<st
    c="18624">中的*<st c="18618">kaizen</st>**，。</st> <st c="18658">这关乎将改进工作视为日常工作的重要组成部分，并不断努力使事物变得更好。</st>
    <st c="18779">这关乎不满足于现状，并始终寻找改进的机会。</st>'
- en: '**<st c="18878">Everyone is responsible</st>**<st c="18902">: In successful
    organizations, everyone is responsible for the quality and stability of the software
    they build.</st> <st c="19016">This principle encourages a collaborative approach
    in which developers, operational teams, and other stakeholders work together to
    achieve the organization’s goals, rather than optimizing the success of their
    own team.</st> <st c="19235">It emphasizes the importance of rapid feedback loops
    based on customer feedback and</st> <st c="19319">organizational impact.</st>'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="18878">人人有责</st>**<st c="18902">：在成功的组织中，每个人都对其构建的软件的质量和稳定性负责。</st>
    <st c="19016">这一原则鼓励一种协作方法，其中开发人员、运营团队和其他利益相关者共同努力实现组织的目标，而不是优化他们自己团队的成功。</st>
    <st c="19235">它强调了基于客户反馈和组织影响的快速反馈循环的重要性。</st>'
- en: <st c="19341">Implementing these principles requires a cultural change within
    the organization, fostering a collaborative environment where everyone is encouraged
    to ensure that the product delivered to the end user is of the highest</st> <st
    c="19562">possible quality.</st> <st c="19580">This means tackling tedious or
    error-prone tasks</st> <st c="19628">early on in the process to avoid aggravating
    problems and optimize the use of resources.</st> <st c="19718">In the next section,
    we will learn how to set up CI/CD pipelines for automating build with</st> <st
    c="19809">GitHub Actions.</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19341">实施这些原则需要在组织内部进行文化变革，培养一个鼓励每个人确保最终用户获得的产品是最高</st> <st c="19562">可能质量的协作环境。</st>
    <st c="19580">这意味着在早期处理过程中解决繁琐或易出错的任务，以避免加剧问题并优化资源的使用。</st> <st c="19628">在下一节中，我们将学习如何使用</st>
    <st c="19718">GitHub Actions 设置 CI/CD 管道以自动化构建。</st>
- en: <st c="19824">Setting up CI/CD pipelines for automating build with GitHub Actions</st>
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="19824">使用 GitHub Actions 设置 CI/CD 管道以自动化构建</st>
- en: <st c="19892">Setting up CI/CD pipelines with</st> <st c="19924">GitHub Actions
    involves several steps, each of which is crucial to automating build processes.</st>
    <st c="20020">Here’s a step-by-step guide to get</st> <st c="20055">you started.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19892">使用 GitHub Actions 设置 CI/CD 管道涉及几个步骤，每个步骤对于自动化构建过程都至关重要。</st> <st
    c="19924">以下是一个逐步指南，帮助您开始。</st>
- en: <st c="20067">Step 1 – create or choose a repository and project</st>
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="20067">步骤 1 – 创建或选择一个仓库和项目</st>
- en: <st c="20118">Start by selecting a repository in</st> <st c="20153">which you
    wish to set up your CI/CD pipeline.</st> <st c="20200">This can be an existing
    project or a new one you’re working on.</st> <st c="20264">In our case, it will
    be this repository on</st> <st c="20307">GitHub:</st> [<st c="20315">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main)<st
    c="20401">.</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20118">首先，在</st> <st c="20153">您希望设置 CI/CD 管道的</st> <st c="20200">仓库中选择一个。这可以是一个现有项目，或者您正在工作的一个新项目。</st>
    <st c="20264">在我们的例子中，它将是 GitHub 上的这个仓库：</st> <st c="20307">[<st c="20315">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main)<st
    c="20401">。</st>
- en: '![Figure 9.1 – Calculator repository project](img/B21146_09_1.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 计算器仓库项目](img/B21146_09_1.jpg)'
- en: <st c="20935">Figure 9.1 – Calculator repository project</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20935">图 9.1 – 计算器仓库项目</st>
- en: <st c="20977">Step 2 – open GitHub Actions in your project repository</st>
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="20977">步骤 2 – 在您的项目仓库中打开 GitHub Actions</st>
- en: <st c="21033">Now, go to the GitHub Actions tab</st> <st c="21067">in the top
    navigation bar of your repository.</st> <st c="21114">Here, you’ll find a variety
    of CI/CD automation templates and workflows tailored to your project’s technology
    stack.</st> <st c="21231">GitHub Actions offers a wide range of predefined workflows
    and lets you create your own</st> <st c="21319">from scratch.</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21033">现在，转到您仓库顶部导航栏中的 GitHub Actions 选项卡。</st> <st c="21067">在这里，您将找到各种针对您项目技术栈定制的
    CI/CD 自动化模板和工作流程。</st> <st c="21114">GitHub Actions 提供了广泛的预定义工作流程，并允许您从头开始创建自己的。</st>
    <st c="21231">GitHub Actions 提供了广泛的预定义工作流程，并允许您从头开始创建自己的。</st>
- en: '![Figure 9.2 – GitHub Actions pipeline templates](img/B21146_09_2.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – GitHub Actions 管道模板](img/B21146_09_2.jpg)'
- en: <st c="21839">Figure 9.2 – GitHub Actions pipeline templates</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21839">图 9.2 – GitHub Actions 管道模板</st>
- en: <st c="21885">Step 3 – define your CI/CD workflow</st>
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="21885">步骤 3 – 定义您的 CI/CD 工作流程</st>
- en: <st c="21921">Our project is an Angular project, so it runs on Node.js.</st>
    <st c="21980">We’ll therefore choose the GitHub Actions template</st> <st c="22030">dedicated
    to Node.js, which we’ll modify as we go along so that it meets our needs.</st>
    <st c="22115">You need to search using the</st> `<st c="22144">node</st>` <st
    c="22148">keyword in the GitHub Actions template search bar, filtering by the</st>
    **<st c="22217">Continuous</st>** **<st c="22228">integration</st>** <st c="22239">category:</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21921">我们的项目是一个Angular项目，因此它运行在Node.js上。</st> <st c="21980">因此，我们将选择GitHub
    Actions模板</st> <st c="22030">专门针对Node.js，我们将根据需要对其进行修改，以满足我们的需求。</st> <st c="22115">您需要在GitHub
    Actions模板搜索栏中使用</st> `<st c="22144">node</st>` <st c="22148">关键字进行搜索，并通过</st>
    **<st c="22217">持续集成</st>** **<st c="22228">类别</st>进行筛选：</st>
- en: '![Figure 9.3 – GitHub Actions pipeline templates](img/B21146_09_3.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – GitHub Actions管道模板](img/B21146_09_3.jpg)'
- en: <st c="22564">Figure 9.3 – GitHub Actions pipeline templates</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22564">图9.3 – GitHub Actions管道模板</st>
- en: <st c="22610">As we can see in</st> *<st c="22628">Figure 9</st>**<st c="22636">.4</st>*<st
    c="22638">, Node.js is in</st> <st c="22654">the list:</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22610">如图</st> *<st c="22628">图9</st>**<st c="22636">.4</st>*<st c="22638">所示，Node.js在列表中：</st>
- en: '![Figure 9.4 – Node.js by GitHub Actions](img/B21146_09_4.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – GitHub Actions中的Node.js](img/B21146_09_4.jpg)'
- en: <st c="22758">Figure 9.4 – Node.js by GitHub Actions</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22758">图9.4 – GitHub Actions中的Node.js</st>
- en: <st c="22796">We can now click on the</st> **<st c="22821">Configure</st>**
    <st c="22830">button</st> <st c="22838">and we’ll be redirected to the interface
    shown in</st> *<st c="22888">Figure 9</st>**<st c="22896">.5</st>*<st c="22898">:</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22796">现在，我们可以点击</st> **<st c="22821">配置</st>** <st c="22830">按钮</st>
    <st c="22838">，然后将被重定向到如图</st> *<st c="22888">图9</st>**<st c="22896">.5</st>*<st
    c="22898">所示的界面：</st>
- en: '![Figure 9.5 – Node.js basic pipeline template](img/B21146_09_5.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – Node.js基本管道模板](img/B21146_09_5.jpg)'
- en: <st c="23629">Figure 9.5 – Node.js basic pipeline template</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23629">图9.5 – Node.js基本管道模板</st>
- en: <st c="23673">We can now begin the modifications.</st> <st c="23710">First,
    we’ll change the name of the file at the top to</st> `<st c="23765">angular-tdd.yml</st>`<st
    c="23780">, as shown in</st> *<st c="23794">Figure 9</st>**<st c="23802">.6</st>*<st
    c="23804">:</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23673">现在，我们可以开始修改了。</st> <st c="23710">首先，我们将把文件顶部的名称改为</st> `<st c="23765">angular-tdd.yml</st>`<st
    c="23780">，如图</st> *<st c="23794">图9</st>**<st c="23802">.6</st>*<st c="23804">所示：</st>
- en: '![Figure 9.6 – Workflow name](img/B21146_09_6.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图9.6 – 工作流程名称](img/B21146_09_6.jpg)'
- en: <st c="23897">Figure 9.6 – Workflow name</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23897">图9.6 – 工作流程名称</st>
- en: <st c="23923">Next, we can mo</st><st c="23939">dify the value of</st> `<st
    c="23958">name</st>` <st c="23962">at the</st> <st c="23969">beginning of our
    file.</st> <st c="23993">Instead of</st> `<st c="24004">Node.js CI</st>`<st c="24014">,
    we’ll call it</st> `<st c="24030">Angular</st>` `<st c="24038">TDD CI/CD</st>`<st
    c="24047">:</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23923">接下来，我们可以修改文件开头的</st><st c="23939">`name`</st> <st c="23962">值。</st>
    <st c="23993">而不是</st> `<st c="24004">Node.js CI</st>`<st c="24014">，我们将称之为</st>
    `<st c="24030">Angular</st>` `<st c="24038">TDD CI/CD</st>`<st c="24047">：</st>
- en: '![Figure 9.7 – Pipeline name](img/B21146_09_7.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – 管道名称](img/B21146_09_7.jpg)'
- en: <st c="24076">Figure 9.7 – Pipeline name</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24076">图9.7 – 管道名称</st>
- en: '<st c="24102">Next, we can change the</st> `<st c="24127">–version: [14.x,
    16.x, 18.x]</st>` <st c="24155">array node to</st> `<st c="24170">node-version:
    [18.x]</st>`<st c="24190">:</st>'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="24102">接下来，我们可以将</st> `<st c="24127">–version: [14.x, 16.x, 18.x]</st>`
    <st c="24155">数组节点更改为</st> `<st c="24170">node-version: [18.x]</st>`<st c="24190">：</st>'
- en: "![Figure 9.8 – Pipeline Node.js \uFEFFversion](img/B21146_09_8.jpg)"
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8 – 管道Node.js版本](img/B21146_09_8.jpg)'
- en: <st c="24302">Figure 9.8 – Pipeline Node.js</st> <st c="24332">version</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24302">图9.8 – 管道Node.js</st> <st c="24332">版本</st>
- en: '<st c="24339">Finally, we’ll delete the last line of our file (i.e.,</st> `<st
    c="24395">- run: npm test</st>`<st c="24410">) because we don’t have any tests
    at the moment.</st> <st c="24460">This is the final content of</st> <st c="24489">our
    file:</st>'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="24339">最后，我们将删除文件的最后一行（即</st> `<st c="24395">- run: npm test</st>`<st
    c="24410">），因为我们目前没有任何测试。</st> <st c="24460">这是文件的最终内容：</st> <st c="24489">：</st>'
- en: '[PRE0]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="25287">Now, we can save the file by clicking on the</st> **<st c="25333">Commit</st>**
    **<st c="25340">changes</st>** <st c="25347">button.</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25287">现在，我们可以通过点击</st> **<st c="25333">提交</st>** **<st c="25340">更改</st>**
    <st c="25347">按钮</st>来保存文件。</st>
- en: <st c="25355">This workflow is designed to automate the process of installing
    Node.js dependencies, caching them for faster future builds and building the Angular
    project.</st> <st c="25514">The following is a decomposition of the key components</st>
    <st c="25568">of our workflow and</st> <st c="25589">their functions:</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25355">此工作流程旨在自动化安装 Node.js 依赖项的过程，缓存它们以加快未来的构建，并构建 Angular 项目。</st>
    <st c="25514">以下是工作流程关键组件</st> <st c="25568">及其功能的分解：</st>
- en: '`<st c="25663">build</st>`<st c="25668">. This job runs on the latest Ubuntu
    virtual machine provided by</st> <st c="25733">GitHub Actions.</st>'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25663">构建</st>`<st c="25668">。此作业在 GitHub Actions 提供的最新 Ubuntu 虚拟机上运行。</st>'
- en: '`<st c="25773">defaults</st>` <st c="25781">section sets the working directory
    for all stages of the build job to</st> `<st c="25852">./</st>``<st c="25854">Chapter
    9</st>``<st c="25864">/getting-started-angular-tdd/</st>`<st c="25894">. This
    ensures that commands are executed in the correct location where your Angular
    project</st> <st c="25987">is located.</st>'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25773">默认值</st>` <st c="25781">部分将构建作业的所有阶段的当前工作目录设置为</st> `<st c="25852">./</st>``<st
    c="25854">第 9 章</st>``<st c="25864">/getting-started-angular-tdd/</st>`<st c="25894">。这确保了命令在您的
    Angular 项目</st> <st c="25987">所在的正确位置执行。</st>'
- en: '`<st c="26020">strategy</st>` <st c="26028">section defines a matrix that runs
    the job multiple times, each time with a different Node.js version.</st> <st c="26132">In
    this example, the matrix includes only one version:</st> `<st c="26187">18.x</st>`<st
    c="26191">. You can expand this to include more versions for broader</st> <st
    c="26250">compatibility testing.</st>'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26020">策略</st>` <st c="26028">部分定义了一个矩阵，该矩阵多次运行作业，每次使用不同的 Node.js 版本。</st>
    <st c="26132">在此示例中，矩阵仅包含一个版本：</st> `<st c="26187">18.x</st>`<st c="26191">。您可以扩展它以包含更多版本，以进行更广泛的</st>
    <st c="26250">兼容性测试。</st>'
- en: '`<st c="26300">uses: actions/checkout@v3</st>`<st c="26326">) uses the official
    GitHub Actions</st> `<st c="26362">checkout</st>` <st c="26370">action to clone
    the repository’s code onto</st> <st c="26414">the runner.</st>'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26300">uses: actions/checkout@v3</st>`<st c="26326">) 使用官方的 GitHub
    Actions</st> `<st c="26362">checkout</st>` <st c="26370">操作将存储库代码克隆到</st> <st
    c="26414">运行器上。</st>'
- en: '`<st c="26460">uses: actions/setup-node@v3</st>`<st c="26488">) uses the official
    GitHub Actions</st> `<st c="26524">setup-node</st>` <st c="26534">action to install
    and configure the specified Node.js version (</st>`<st c="26598">18.x</st>`<st
    c="26603">) on</st> <st c="26609">the runner.</st>'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26460">uses: actions/setup-node@v3</st>`<st c="26488">) 使用官方的 GitHub
    Actions</st> `<st c="26524">setup-node</st>` <st c="26534">操作来安装和配置指定的 Node.js
    版本 (</st>`<st c="26598">18.x</st>`<st c="26603">) 在</st> <st c="26609">运行器上。</st>'
- en: <st c="26620">The</st> `<st c="26625">cache</st>` <st c="26630">parameter is
    set to</st> `<st c="26651">npm</st>` <st c="26654">to enable caching of Node.js
    modules between workflow runs, potentially speeding up subsequent executions.</st>
    `<st c="26762">cache-dependency-path</st>` <st c="26783">is set to</st> `<st c="26794">**/package-lock.json</st>`
    <st c="26814">to ensure the cache is invalidated if the</st> `<st c="26857">package-lock.json</st>`
    <st c="26874">file changes (indicating a change</st> <st c="26909">in dependencies).</st>
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="26620">缓存</st> `<st c="26625">参数</st>` <st c="26630">设置为</st> `<st c="26651">npm</st>`
    <st c="26654">以启用工作流程运行之间 Node.js 模块的缓存，可能加快后续执行。</st> `<st c="26762">cache-dependency-path</st>`
    <st c="26783">设置为</st> `<st c="26794">**/package-lock.json</st>` <st c="26814">以确保当</st>
    `<st c="26857">package-lock.json</st>` <st c="26874">文件更改（表示依赖项发生变化）时，缓存失效。</st>
- en: '`<st c="26966">run: npm ci</st>`<st c="26978">) runs the</st> `<st c="26990">npm
    ci</st>` <st c="26996">command to install the project’s dependencies from the</st>
    `<st c="27052">package-lock.json</st>` <st c="27069">file.</st> <st c="27076">This
    ensures a consistent dependency state across</st> <st c="27126">different environments.</st>'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26966">run: npm ci</st>`<st c="26978">) 执行</st> `<st c="26990">npm
    ci</st>` <st c="26996">命令，从</st> `<st c="27052">package-lock.json</st>` <st c="27069">文件中安装项目的依赖项。</st>
    <st c="27076">这确保了在不同环境中保持依赖项状态的一致性。</st>'
- en: '`<st c="27191">run: npm run build --if-present</st>`<st c="27223">) conditionally
    runs the</st> `<st c="27249">npm run build</st>` <st c="27262">command if it exists
    in the project’s</st> `<st c="27301">package.json</st>` <st c="27313">file.</st>
    <st c="27320">This allows for flexibility in different project setups, where not
    all projects might have a</st> `<st c="27413">build</st>` <st c="27418">script
    defined.</st>'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="27191">run: npm run build --if-present</st>`<st c="27223">) 条件性地运行</st>
    `<st c="27249">npm run build</st>` <st c="27262">命令，如果它在项目的</st> `<st c="27301">package.json</st>`
    <st c="27313">文件中存在。</st> <st c="27320">这为不同项目设置提供了灵活性，并不是所有项目都定义了</st> `<st c="27413">build</st>`
    <st c="27418">脚本。</st>'
- en: '<st c="27434">However, it is important to note</st> <st c="27467">that if you
    clone the project from the course repository, you must add the following just
    after</st> `<st c="27564">runs-on: ubuntu-latest</st>`<st c="27586">:</st>'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="27434">然而，需要注意的是</st> <st c="27467">如果你从课程仓库克隆项目，必须在</st> `<st c="27564">runs-on:
    ubuntu-latest</st>`<st c="27586">: 之后添加以下内容：</st>'
- en: '[PRE1]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="27664">This final rendering is obtained by cloning the project from the</st>
    <st c="27730">book repository:</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27664">最终渲染是通过从</st> <st c="27730">书籍仓库</st> <st c="27664">克隆项目获得的：</st>
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="28611">Finally, if the process goes well, here’s what you’ll get in the
    GitHub</st> <st c="28684">Actions interface:</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28611">最后，如果过程顺利，这是你在GitHub</st> <st c="28684">Actions界面中会得到的结果：</st>
- en: '![Figure 9.9 – Pipeline successfully completed](img/B21146_09_9.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图9.9 – 管道成功完成](img/B21146_09_9.jpg)'
- en: <st c="28804">Figure 9.9 – Pipeline successfully completed</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28804">图9.9 – 管道成功完成</st>
- en: <st c="28848">In the next section, we will learn</st> <st c="28883">how to set
    up CI/CD pipelines for automating test with</st> <st c="28939">GitHub Actions.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28848">在下一节中，我们将学习</st> <st c="28883">如何使用GitHub Actions设置CI/CD管道来自动化测试。</st>
- en: <st c="28954">Setting up CI/CD pipelines for automating tests with GitHub Actions</st>
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="28954">使用GitHub Actions设置CI/CD管道来自动化测试</st>
- en: <st c="29022">In this new section, we’ll update our</st> <st c="29061">previous
    workflow for running tests.</st> <st c="29098">Logic dictates that tests should
    be run before the build.</st> <st c="29156">Here’s the</st> <st c="29167">test
    workflow:</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29022">在这个新部分，我们将更新我们之前用于运行测试的工作流程。</st> <st c="29061">逻辑上讲，测试应该在构建之前运行。</st>
    <st c="29098">以下是测试工作流程：</st>
- en: '[PRE3]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="29659">Now, let’s combine the two</st> <st c="29687">workflows, test
    and build; here’s how it looks in</st> <st c="29737">basic terms:</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29659">现在，让我们将两个</st> <st c="29687">工作流程，测试和构建，结合起来；以下是基本术语中的样子：</st>
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="30829">As mentioned in the preceding code</st> <st c="30864">block, the
    test workflow comes well before the build workflow.</st> <st c="30928">However,
    there is one aspect that immediately stands out.</st> <st c="30986">It’s the repetition
    of many of the sequences found in the test and build.</st> <st c="31060">Based
    on the principle of</st> `<st c="31191">test-and-build</st>`<st c="31205">, for
    example.</st> <st c="31220">Here’s how</st> <st c="31231">it looks:</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30829">如前述代码</st> <st c="30864">块中所述，测试工作流程在构建工作流程之前。</st> <st c="30928">然而，有一个方面立即引起了注意。</st>
    <st c="30986">那就是测试和构建中许多序列的重复。</st> <st c="31060">基于</st> `<st c="31191">test-and-build</st>`<st
    c="31205">原则，例如。</st> <st c="31220">以下是它的样子：</st>
- en: '[PRE5]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="32148">Now, when we run the pipeline, we</st> <st c="32183">notice that
    the</st> `<st c="32199">npm run test --if-present</st>` <st c="32224">task runs
    in a block</st> <st c="32246">like this:</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32148">现在，当我们运行管道时，我们</st> <st c="32183">注意到</st> `<st c="32199">npm
    run test --if-present</st>` <st c="32224">任务在一个类似这样的</st> <st c="32246">块中运行：</st>
- en: '![Figure 9.10 – Pipeline running](img/B21146_09_10.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图9.10 – 管道运行中](img/B21146_09_10.jpg)'
- en: <st c="32400">Figure 9.10 – Pipeline running</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32400">图9.10 – 管道运行中</st>
- en: <st c="32430">In fact, it’s quite normal for us to have this problem because
    the</st> `<st c="32498">npm run</st>` <st c="32505">test executes the</st> `<st
    c="32524">ng</st>` <st c="32526">test.</st> <st c="32533">Since we’re in an Angular
    project, it tries to launch Chrome in the pipeline.</st> <st c="32611">Unfortunately,
    it can’t find it</st> <st c="32642">because we don’t have a</st> **<st c="32667">graphical
    user interface</st>** <st c="32691">(</st>**<st c="32693">GUI</st>**<st c="32696">).</st>
    <st c="32700">Hence, we get the</st> <st c="32718">following error:</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32430">实际上，我们遇到这个问题是很正常的，因为</st> `<st c="32498">npm run</st>` <st c="32505">test</st>
    执行了 `<st c="32524">ng</st>` <st c="32526">test。</st> <st c="32533">由于我们处于 Angular
    项目中，它试图在管道中启动 Chrome。</st> <st c="32611">不幸的是，它找不到它</st> <st c="32642">因为我们没有</st>
    **<st c="32667">图形用户界面</st>** <st c="32691">(</st>**<st c="32693">GUI</st>**<st
    c="32696">).</st> <st c="32700">因此，我们得到了</st> <st c="32718">以下错误：</st>
- en: '![Figure 9.11 – Pipeline fails](img/B21146_09_11.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11 – 管道失败](img/B21146_09_11.jpg)'
- en: <st c="34516">Figure 9.11 – Pipeline fails</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34516">图 9.11 – 管道失败</st>
- en: <st c="34544">To fix this, we’re going to make</st> <st c="34578">a few changes
    to the project, in particular to the</st> `<st c="34629">angular.json</st>` <st
    c="34641">file, by adding a configuration to the test configuration</st> <st c="34700">like
    this:</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34544">为了解决这个问题，我们将对项目进行一些修改，特别是对</st> `<st c="34629">angular.json</st>`
    <st c="34641">文件，通过添加一个测试配置的配置</st> <st c="34700">如下：</st>
- en: '[PRE6]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="34808">This is the complete</st> <st c="34830">test configuration:</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34808">这是完整的</st> <st c="34830">测试配置：</st>
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="35231">After that, we need to create a</st> `<st c="35264">karma.conf.js</st>`
    <st c="35277">file in the</st> `<st c="35290">src</st>` <st c="35293">folder of
    our Angular project, if the file</st> <st c="35337">doesn’t already exist.</st>
    <st c="35360">In this file, we’ll put the source code</st> <st c="35400">related
    to</st> <st c="35411">Karma’s configuration:</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35231">之后，我们需要在我们的 Angular 项目的</st> `<st c="35290">src</st>` <st c="35293">文件夹中创建一个</st>
    `<st c="35264">karma.conf.js</st>` <st c="35277">文件，如果该文件</st> <st c="35337">尚未存在。</st>
    <st c="35360">在这个文件中，我们将放置与</st> <st c="35400">Karma 的配置</st> <st c="35411">相关的源代码：</st>
- en: '[PRE8]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="36459">Next, we need to install two packages in</st> <st c="36500">dev
    mode, namely</st> `<st c="36518">puppeteer</st>` <st c="36527">and</st> `<st c="36532">karma-coverage-istanbul-reporter</st>`<st
    c="36564">, by doing</st> <st c="36575">the following:</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36459">接下来，我们需要在</st> <st c="36500">开发模式下安装两个包，即</st> `<st c="36518">puppeteer</st>`
    <st c="36527">和</st> `<st c="36532">karma-coverage-istanbul-reporter</st>`<st
    c="36564">，通过以下操作：</st>
- en: '[PRE9]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="36651">Finally, in our GitHub Actions pipeline, we replace</st> `<st
    c="36704">npm run test –if-present</st>` <st c="36728">with</st> `<st c="36734">npm
    run test -- --configuration=ci</st>`<st c="36768">, and here’s</st> <st c="36781">the
    result:</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36651">最后，在我们的 GitHub Actions 管道中，我们将</st> `<st c="36704">npm run test
    –if-present</st>` <st c="36728">替换为</st> `<st c="36734">npm run test -- --configuration=ci</st>`<st
    c="36768">，以下是</st> <st c="36781">结果：</st>
- en: '![Figure 9.12 – Pipeline successfully completed](img/B21146_09_12.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12 – 管道成功完成](img/B21146_09_12.jpg)'
- en: <st c="37019">Figure 9.12 – Pipeline successfully completed</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37019">图 9.12 – 管道成功完成</st>
- en: <st c="37064">Well done!</st> <st c="37076">In the following, you’ll</st> <st
    c="37100">find a summary of the workflow with all the changes made to date, along
    with the associated</st> <st c="37193">source code:</st>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37064">做得好！</st> <st c="37076">在下面的内容中，你将</st> <st c="37100">找到迄今为止所有更改的流程总结，以及相关的</st>
    <st c="37193">源代码：</st>
- en: '[PRE10]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="38122">In the next section, we will learn</st> <st c="38158">how to set
    up CI/CD pipelines for automating deployment processes with</st> <st c="38229">GitHub
    Actions.</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38122">在下一节中，我们将学习</st> <st c="38158">如何使用 GitHub Actions 设置 CI/CD 管道来自动化部署流程。</st>
- en: <st c="38244">Setting up CI/CD pipelines for automating the deployment process
    with GitHub Actions</st>
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="38244">使用 GitHub Actions 自动部署流程的 CI/CD 管道设置</st>
- en: <st c="38329">CD is the practice of automatically</st> <st c="38366">deploying
    changes to production as soon as they have passed through the production pipeline.</st>
    <st c="38459">This includes the automated processes of testing, building, and
    deploying.</st> <st c="38534">GitHub Actions supports CD, enabling you to automate
    these</st> <st c="38593">processes efficiently.</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38329">CD 是一种实践，即在更改通过生产管道后自动部署到生产环境。</st> <st c="38366">这包括测试、构建和部署的自动化流程。</st>
    <st c="38459">GitHub Actions 支持CD，使您能够高效地自动化这些</st> <st c="38534">流程。</st>
- en: <st c="38615">We’re not going to do it on this project, but we’ll see how we
    can.</st> <st c="38684">To begin with, this will be a test and build stage like
    the other two.</st> <st c="38755">Deployment takes place naturally at the end
    of development, so the same will apply to the workflow.</st> <st c="38855">At
    the end of our current workflow, just after the build, we’ll add the following
    to deploy on a</st> <st c="38952">remote server:</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38615">我们不会在这个项目中这样做，但我们会看看我们如何能这样做。</st> <st c="38684">首先，这将像其他两个一样是一个测试和构建阶段。</st>
    <st c="38755">部署自然发生在开发结束时，因此工作流程也将适用。</st> <st c="38855">在我们的当前工作流程结束时，构建之后，我们将添加以下内容以在远程服务器上部署：</st>
    <st c="38952">远程服务器：</st>
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="39253">The provided GitHub Actions workflow snippet is designed to automate
    the process of uploading build files to a remote server.</st> <st c="39380">This
    is a common step in a CI/CD pipeline for deploying applications.</st> <st c="39450">Here’s
    a breakdown of the</st> <st c="39476">workflow step:</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39253">提供的 GitHub Actions 工作流程片段旨在自动化将构建文件上传到远程服务器的过程。</st> <st c="39380">这是
    CI/CD 管道中部署应用程序的常见步骤。</st> <st c="39450">以下是工作流程步骤的</st> <st c="39476">分解：</st>
- en: '`<st c="39490">appleboy/scp-action@master</st>`<st c="39517">: This specifies
    that</st> <st c="39540">this step uses the</st> `<st c="39559">scp-action</st>`
    <st c="39569">action from the</st> `<st c="39586">appleboy</st>` <st c="39594">GitHub
    repository.</st> <st c="39614">This action is designed to securely copy files
    from your GitHub Actions runner to a remote server using the</st> `<st c="39755">@master</st>`
    <st c="39762">tag indicates that the action should use the code</st> <st c="39812">from
    the master branch of</st> <st c="39839">the repository.</st>'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="39490">appleboy/scp-action@master</st>`<st c="39517">: 这指定了</st> <st
    c="39540">此步骤使用</st> `<st c="39559">scp-action</st>` <st c="39569">动作来自</st> `<st
    c="39586">appleboy</st>` <st c="39594">GitHub 仓库。</st> <st c="39614">此动作旨在使用</st>
    `<st c="39755">@master</st>` <st c="39762">标签表示动作应使用存储库的 master 分支中的代码</st> <st
    c="39812">从</st> <st c="39839">存储库。</st>'
- en: '`<st c="39854">host</st>`<st c="39859">: The address</st> <st c="39874">of
    the remote server where the files will be uploaded.</st> <st c="39929">This value
    is retrieved from a GitHub secret</st> <st c="39974">named</st> `<st c="39980">SI_HOST</st>`<st
    c="39987">.</st>'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="39854">主机</st>`<st c="39859">: 将上传文件到的远程服务器的地址。</st> <st c="39929">此值从名为</st>
    `<st c="39980">SI_HOST</st>`<st c="39987">.</st> 的 GitHub 机密中检索。</st>'
- en: '`<st c="39988">username</st>`<st c="39997">: The username for authenticating
    with the remote server.</st> <st c="40056">This value is retrieved from a GitHub
    secret</st> <st c="40101">named</st> `<st c="40107">SI_USERNAME</st>`<st c="40118">.</st>'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="39988">用户名</st>`<st c="39997">: 用于与远程服务器进行身份验证的用户名。</st> <st c="40056">此值从名为</st>
    `<st c="40107">SI_USERNAME</st>`<st c="40118">.</st> 的 GitHub 机密中检索。</st>'
- en: '`<st c="40119">password</st>`<st c="40128">: The password for authenticating
    with the remote server.</st> <st c="40187">This value is retrieved from a GitHub
    secret</st> <st c="40232">named</st> `<st c="40238">SI_PASSWORD</st>`<st c="40249">.</st>'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40119">密码</st>`<st c="40128">: 用于与远程服务器进行身份验证的密码。</st> <st c="40187">此值从名为</st>
    `<st c="40238">SI_PASSWORD</st>`<st c="40249">.</st> 的 GitHub 机密中检索。</st>'
- en: '`<st c="40250">port</st>`<st c="40255">: The port number for connecting to
    the remote server.</st> <st c="40311">This value is retrieved from a GitHub secret</st>
    <st c="40356">named</st> `<st c="40362">SI_PORT</st>`<st c="40369">.</st>'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40250">端口</st>`<st c="40255">: 连接到远程服务器的端口号。</st> <st c="40311">此值从名为</st>
    `<st c="40362">SI_PORT</st>`<st c="40369">.</st> 的 GitHub 机密中检索。</st>'
- en: '`<st c="40370">source</st>`<st c="40377">: The path to the files that will
    be uploaded.</st> <st c="40425">In this case, it’s set to upload all files in
    the source</st> <st c="40482">build directory.</st>'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40370">源</st>`<st c="40377">: 将上传的文件路径。</st> <st c="40425">在这种情况下，它被设置为上传源</st>
    <st c="40482">构建目录中的所有文件。</st>'
- en: '`<st c="40498">target</st>`<st c="40505">: The destination path on the remote
    server where the files will</st> <st c="40571">be uploaded.</st>'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40498">目标</st>`<st c="40505">: 文件将上传到的远程服务器上的目标路径。</st>'
- en: <st c="40583">For other cloud-oriented platforms, GitHub Actions makes the task
    easier by offering deployment templates for most of</st> <st c="40702">these platforms.</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40583">对于其他面向云的平台，GitHub Actions 通过提供大多数这些平台的部署模板来简化任务。</st> <st c="40702">这些平台。</st>
- en: <st c="40718">Summary</st>
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="40718">摘要</st>
- en: <st c="40726">In summary, this chapter covered the fundamental concepts of CI
    and CD practices within the SDLC, highlighting their importance and benefits.</st>
    <st c="40869">We began by understanding that CI is a process that aims to automate
    the integration of code changes into a shared repository, facilitating automated
    builds and tests to quickly detect and correct problems.</st> <st c="41076">This
    practice is crucial for the early detection of bugs and errors, promoting a faster
    feedback loop, encouraging collaboration, and improving</st> <st c="41220">code
    quality.</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本章涵盖了SDLC中CI和CD实践的基本概念，强调了它们的重要性及益处。<st c="40869">我们首先理解到CI是一个旨在自动化代码更改集成到共享存储库的过程，从而促进自动构建和测试，以便快速检测和纠正问题。</st
    c="41076">这种实践对于早期发现错误和缺陷至关重要，促进了更快的反馈循环，鼓励协作，并提高代码质量。</st c="41220">
- en: <st c="41233">CD is then introduced as an extension of CI, focusing on automating
    the deployment process while ensuring that the software is always in a releasable
    state.</st> <st c="41391">This practice enables rapid and reliable releases of
    software in different environments, reducing the risk of deployment errors and
    enabling</st> <st c="41532">faster time-to-market.</st>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，CD被介绍为CI的扩展，专注于自动化部署过程，同时确保软件始终处于可发布状态。<st c="41391">这种实践使得在不同环境中快速可靠地发布软件成为可能，降低了部署错误的风险，并缩短了上市时间。</st
    c="41532">
- en: <st c="41554">This chapter also looked at the practical aspects of setting up
    CI/CD pipelines using GitHub Actions, a popular workflow automation tool.</st>
    <st c="41693">It explained how to automate the build process, including installing
    dependencies, compiling code, and running tests, as well as automating the</st>
    <st c="41837">deployment process.</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还探讨了使用GitHub Actions设置CI/CD管道的实际方面，GitHub Actions是一个流行的流程自动化工具。<st c="41693">它解释了如何自动化构建过程，包括安装依赖项、编译代码和运行测试，以及自动化部署过程。</st
    c="41837">
- en: <st c="41856">Key concepts and practices of continuous processes were examined,
    including the importance of making small, iterative changes, adopting trunk-based
    development, maintaining rapid build and test phases, and decoupling deployment
    from production release.</st> <st c="42110">These practices are essential for
    establishing efficient, reliable continuous processes that accelerate development
    cycles, improve software quality, and deliver value to customers</st> <st c="42291">more
    quickly.</st>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 连续流程的关键概念和实践被考察，包括进行小而迭代的变更的重要性、采用主干开发、维护快速构建和测试阶段，以及将部署与生产发布解耦。<st c="42110">这些实践对于建立高效、可靠的连续流程至关重要，这些流程可以加速开发周期、提高软件质量，并更快地向客户交付价值。</st
    c="42291">
- en: <st c="42304">In addition, the chapter discussed the role of testing in CI/CD
    processes, highlighting the importance of different types of testing, such as
    smoke tests, unit tests, integration tests, system tests, and acceptance tests.</st>
    <st c="42527">These tests are essential to guarantee software quality and stability,
    providing rapid feedback on the state of the code base and helping to detect and
    correct problems early in the</st> <st c="42709">development process.</st>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本章讨论了测试在CI/CD流程中的作用，强调了不同类型测试的重要性，如冒烟测试、单元测试、集成测试、系统测试和验收测试。<st c="42527">这些测试对于保证软件质量和稳定性至关重要，它们可以快速提供代码库状态反馈，并帮助在开发过程中早期发现和纠正问题。</st
    c="42709">
- en: <st c="42729">In the next chapter, we’ll learn about the best practices and
    patterns for</st> <st c="42805">test-driven development.</st>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于**测试驱动开发**的最佳实践和模式。<st c="42805">
