- en: Pickers - Selecting Dates and Times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using date pickers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using time pickers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting initial date and time values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining date and time components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating other date and time packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most applications need to allow the user to select date and time values. For
    example, if a form includes a scheduling piece, the user needs an intuitive way
    to select date and time values. With Material-UI applications, you can use the
    date and time picker components that ship with the library.
  prefs: []
  type: TYPE_NORMAL
- en: Using date pickers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use a date picker in Material-UI applications, you can leverage the `TextField`
    component. It accepts a `type` property that you can set to `date`. However, you
    have to take care of a few other things in addition to changing the text field
    type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s some code that renders a date picker text field for the user, and another
    text field that displays the date in another format as the date selection changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the page first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55a30640-865b-4284-93f5-15f8d22a1603.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The My Date field to the left is the date picker. The Updated Date Value field
    to the right shows the selected date in a different format. Here''s what the date
    picker looks like when it receives focus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d62f3329-4068-4543-ae5d-aa894d632aef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The year portion of the date is highlighted. You can type the year, or you
    can use the up/down arrow button to change the selected value. You change to the
    month or day portion of the date by hitting the *Tab* key or by using your mouse
    pointer. The drop-down arrow to the far right will display the following native
    browser date picker when clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49a32613-c74b-4046-be94-7543d714b732.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve made a date selection, here''s what the My Date and Updated Date
    Value fields look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e085c2d-5d46-47e6-b3e1-0d38230dd308.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by taking a look at the date picker `TextField` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Most of the date picker functionality comes from the `type` property that is
    set to `date`. This applies the input mask and the native browser date picker
    control. Because of the input mask value, the `shrink` input property needs to
    be `true` to avoid overlap. The `value` property comes from the state of the `UsingDatePickers`
    component. This value defaults to an empty string, but it needs to be in a specific
    format. The date picker text field will put the date value in the correct format,
    so the `onChange()` handler doesn't actually have to do anything other than set
    the `date` state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Updated Date Value field uses a different format for the date. Let''s take
    a look at how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First, you have to take the `date` string from the component state and use it
    to construct a new `Date` instance. To do this, you need to append the time string
    to the date string. This makes it a valid ISO string, and enables the date to
    be constructed without any surprises. Now you can use any of the date formatting
    functions available to `date` instances, such as `toLocaleDateString()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can pass `dateFormatted` to the second text field, which is read-only
    since it''s only used to display values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of improvements that could be made to the preceding example.
    For starters, you could have a `DatePicker` component that hides some of the details
    about turning a `TextField` component into something that picks dates. Further,
    it would be nice if the new `DatePicker` component supported actual `Date` instances
    as values.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you''ll need a utility function that can format `Date` instances into
    the string format expected by the `TextField` component when it''s being used
    as a date picker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `formatDate()` function takes a `Date` instance and returns a string in
    the format of `YYYY-MM-dd`. Now, you''re ready to build the `DatePicker` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `DatePicker` component renders a `TextField` component. It has the `type`
    property value set to `date` and the `shrink` input property set to `true`. It
    also sets the `value` – first it checks whether the `date` property is a `Date`
    instance, and if it is, calls `formatDate()`. Otherwise, the `date` argument is
    used as is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s replace the `TextField` component in the previous example with
    the `DatePicker` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `onChange`, `label`, and `className` properties are passed to the `TextField` component
    as they were before. The big difference with the `DatePicker` component is that
    you don't need to pass `type` or `InputProps`, and that `date` is used instead
    of `value`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using time pickers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like date pickers, time pickers help users input time values. Also like date
    pickers, time pickers in Material-UI applications are derived from the `TextInput`
    components.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the same abstraction that''s used in the *Using date pickers*
    section, only this time, it''s meant for the `time` pickers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the page first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44387282-93d2-4808-a598-909c3f00b77d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the My Time field receives focus, you can change the individual time pieces
    using the up/down arrow keys or the up/down arrow buttons that are displayed to
    the right of the time value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a2f23af-f232-4b81-843a-49f6a19b7280.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Updated Time Value field doesn''t get updated until the full time is selected
    in the My Time field, because there''s no time value until this happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/061efd13-2f02-45a4-a16c-2074b731d067.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The structure of the `TimePicker` component is very similar to the `DatePicker`
    component from the previous recipe. The main difference is that `TimePicker` doesn''t
    support the `Date` instances because it only deals with time. Because there''s
    no date piece, using the `Date` instances to express only time is a lot more difficult
    than expressing only the date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `TimePicker` component sets the same properties on `TextField` as the `DatePicker`
    component. Additionally, the `step` value of `300` makes the minute portion of
    the time move by five minutes at a time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting initial date and time values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Date and time pickers can have default date and time values, respectively. For
    example, a common scenario is to have these inputs default to the current date
    and time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have a date picker and a time picker on a screen in your
    app. You want the `date` field to default to the current date and the `time` field
    to default to the current time. To do this, it''s best to rely on the `Date` instances
    to set the initial `Date/Time` value. However, a little work is involved, since
    you can''t natively pass the `Date` instances to the `TextField` components. Here''s
    an example that shows how this can work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/475b3285-5008-4701-88a9-b0fc48d4e037.png)'
  prefs: []
  type: TYPE_IMG
- en: The date and time that you see will depend on when you load the screen. You
    can then change the date and time values.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What''s nice about this approach is that you only have one piece of `state`
    to work with, `datetime`, which is a `Date` instance. Let''s step through the
    code to see how this is made possible, starting with the initial state of the
    `UsingDatePickers` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The current date and time is assigned to the `datetime` state. Next, let''s
    look at the two formatting functions that enable the `Date` instances to work
    with the `TextField` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Both of these functions, `formatDate()` and `formatTime()`, take a `Date` instance
    as an argument, and `return` a string-formatted value that works with the `TextField`
    component. Next, let''s look at the `onChangeDate()` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first check that happens in `onChangeDate()` is for the `value` property.
    The reason this check needs to happen is so that the date picker can actually
    allow the user to select an invalid date, such as Feb 31\. By not changing the
    `state` when this invalid date is selected, you're actually preventing invalid
    dates from being selected.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `year`, `month`, and `day` values are split and mapped to numbers.
    Then, the new `newDatetime` value is initialized by creating a new `Date` instance
    using `datetime` as the value. This is done to preserve the time selection. Finally,
    `setYear()`, `setMonth()`, and `setDate()` are used to update the `Date` instance
    without changing the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let''s go over the `onChangeTime()` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `onChangeTime()` handler follows the same general pattern as `onChangeDate()`.
    It's simpler because there are fewer values and no need to check for invalid times
    – every day has 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining date and time components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your application needs to collect the date and time from the user, you don't
    necessarily need two `TextField` components. Instead, you can combine them both
    into a single field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use a single `TextInput` component to collect date and time input from
    the user by setting the `type` property to `datetime-local`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b166d9b-ae2c-4a92-a774-b7a0ed5732c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how the field looks when the field has focus and the controls for changing
    the Date/Time are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38775400-e4cf-4ff2-b61a-7a78b466871e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you use the `datetime-local` type of input, it simplifies working with
    the `Date` instances. Let''s take a look at the `onChangeDate()` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pass `e.target.value` as the argument to a new `Date` instance, which
    then becomes the new `datetime` state value. Finally, let''s take a look at the
    `formatDate()` function that''s used to pass the correct value to the `value`
    property of `TextField`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The reason to use this function is to remove the seconds and milliseconds from
    the `value` property. Otherwise, these will show up as values in the input field
    that the user can then select. It's very uncommon to have the user select seconds
    or milliseconds when choosing a time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating other date and time packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You aren't stuck with only using `TextField` components for `Date/Time` selection
    in your Material-UI application. There are packages available that make the `Date/Time`
    selection experience feel more like traditional Material Design components.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `material-ui-pickers` package has a `DatePicker` component and a `TimePicker`
    component. Here''s some code that shows you how to use both components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27c696f5-e9d9-4474-bad3-b6acaf92e099.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what you''ll see when you click on the Date picker field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b64a0b2-06ca-4ea4-8837-85e3be32e8b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use this dialog to make your date selection, then click on OK to change
    it. Here''s what you''ll see when you click on the Time picker field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a21bffe3-911a-4be6-a3b5-eb7d12d6b25d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DatePicker` and `TimePicker` components from the `material-ui-pickers`
    package display dialogs that render other Material-UI components, which makes
    selecting a date/time easier. Rather than having to interact with text inputs
    directly, you can show your users dialogs such as these that are themed to look
    like the rest of your application and provide a visual interaction for selecting
    dates/times.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material-UI pickers: [https://github.com/chingyawhao/material-ui-next-pickers](https://github.com/chingyawhao/material-ui-next-pickers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
