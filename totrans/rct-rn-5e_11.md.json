["```js\nimport * as React from \"react\";\nexport default function BatchingUpdates() {\n  let [value, setValue] = React.useState(\"loading...\");\n  function onStart() {\n    setTimeout(() => {\n      for (let i = 0; i < 100; i++) {\n        setValue('value ${i + 1}');\n      }\n    }, 1);\n  }\n  return (\n    <div>\n      <p>\n        Value: <em>{value}</em>\n      </p>\n      <button onClick={onStart}>Start</button>\n    </div>\n  );\n} \n```", "```js\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n); \n```", "```js\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n); \n```", "```js\nlet unfilteredItems = new Array(25000)\n  .fill(null)\n  .map((_, i) => ({ id: i, name: 'Item ${i}' })); \n```", "```js\nlet [filter, setFilter] = React.useState(\"\");\nlet [items, setItems] = React.useState([]); \n```", "```js\n<div>\n  <div>\n    <input\n      type=\"text\"\n      placeholder=\"Filter\"\n      value={filter}\n      onChange={onChange}\n    />\n  </div>\n  <div>\n    <ul>\n      {items.map((item) => (\n        <li key={item.id}>{item.name}</li>\n      ))}\n    </ul>\n  </div>\n</div> \n```", "```js\nconst onChange = (e) => {\n  setFilter(e.target.value);\n  setItems(\n    e.target.value === \"\"\n      ? []\n      : unfilteredItems.filter((item) => item.name.includes(e.target.value))\n  );\n}; \n```", "```js\nconst onChange = (e) => {\n  setFilter(e.target.value);\n  React.startTransition(() => {\n    setItems(\n      e.target.value === \"\"\n        ? []\n        : unfilteredItems.filter((item) => item.name.includes(e.target.value))\n    );\n  });\n}; \n```", "```js\nlet unfilteredItems = new Array(25000)\n  .fill(null)\n  .map((_, i) => ({ id: i, name: 'Item ${i}' }));\nfunction filterItems(filter: string) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(unfilteredItems.filter((item) => item.name.includes(filter)));\n    }, 1000);\n  });\n}\nexport default function AsyncUpdates() {\n  const [isPending, startTransition] = React.useTransition();\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [filter, setFilter] = React.useState(\"\");\n  const [items, setItems] = React.useState<{ id: number; name: string }[]>([]);\n  const onChange: React.ChangeEventHandler<HTMLInputElement> = async (e) => {\n    setFilter(e.target.value);\n    startTransition(() => {\n      if (e.target.value === \"\") {\n        setItems([]);\n      } else {\n        filterItems(e.target.value).then((result) => {\n          setItems(result);\n        });\n      }\n    });\n  };\n  return (...);\n} \n```", "```js\n<div>\n  <div>\n    <input\n      type=\"text\"\n      placeholder=\"Filter\"\n      value={filter}\n      onChange={onChange}\n    />\n  </div>\n  <div>\n    {isPending && <em>loading...</em>}\n    <ul>\n      {items.map((item) => (\n        <li key={item.id}>{item.name}</li>\n      ))}\n    </ul>\n  </div>\n</div> \n```", "```js\nconst [isLoading, setIsLoading] = React.useState(false);\nconst [filter, setFilter] = React.useState(\"\");\nconst [items, setItems] = React.useState([]); \n```", "```js\nconst onChange: React.ChangeEventHandler<HTMLInputElement> = async (e) => {\n  setFilter(e.target.value);\n  setIsLoading(true);\n  React.startTransition(() => {\n    if (e.target.value === \"\") {\n      setItems([]);\n      setIsLoading(false);\n    } else {\n      filterItems(e.target.value).then((result) => {\n        setItems(result);\n        setIsLoading(false);\n      });\n    }\n  });\n}; \n```", "```js\n<div>\n  {isLoading && <em>loading...</em>}\n  <ul>\n    {items.map((item) => (\n      <li key={item.id}>{item.name}</li>\n    ))}\n  </ul>\n</div> \n```"]