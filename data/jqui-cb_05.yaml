- en: Chapter 5. Adding Dialogs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。添加对话框
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下示例：
- en: Applying effects to dialog components
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对对话框组件应用效果
- en: Waiting for API data to load
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待 API 数据加载
- en: Using icons in the dialog title
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对话标题中使用图标
- en: Adding actions to the dialog title
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向对话框标题添加操作
- en: Applying effects to dialog resize interactions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对对话框调整交互应用效果
- en: Using modal dialogs for messages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于消息的模态对话框
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The dialog widget gives UI developers a tool with which they can present the
    user with forms or other pieces of information without disrupting what is currently
    on the page; dialogs create a new context. Out-of-the-box, developers can do a
    lot with dialog options, and many of these capabilities are turned on by default.
    This includes the ability to resize the dialog, and move it around on the page.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框小部件为 UI 开发人员提供了一个工具，他们可以在不中断当前页面内容的情况下向用户呈现表单或其他信息片段；对话框创建了一个新的上下文。开箱即用，开发人员可以使用对话框选项做很多事情，并且其中许多功能默认情况下是打开的。这包括调整对话框的大小并在页面上移动它的能力。
- en: In this chapter, we'll address some common pitfalls of dialog usage typical
    in any web application. There is often a need to adjust the controls of the dialog
    and its overall appearance; we'll touch on a few of those. We'll also look at
    how interacting with API data complicates dialog usage and the ways to deal with
    that. Finally, we can add some polish to dialog widgets by looking at the various
    ways in which we can apply effects to them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解决在任何 Web 应用程序中典型对话框使用中的一些常见问题。通常需要调整对话框的控件和整体外观；我们将涉及其中一些。我们还将看看如何与
    API 数据交互使对话框使用变得复杂以及处理方法。最后，我们可以通过查看如何以各种方式将效果应用于它们来为对话框小部件添加一些亮点。
- en: Applying effects to dialog components
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对对话框组件应用效果
- en: Out-of-the-box, the dialog widget allows developers to show animations when
    the dialog is opened, as well as hide animations, when closed. This animation
    is applied to the dialog as a whole. So, for example, if we were to specify that
    the `show` option is a `fade` animation, the entire dialog will fade into view
    for the user. Likewise, if the `hide` option was `fade`, the dialog would fade
    out of view instead of instantaneously disappearing. To liven up this `show` and
    `hide` behavior, we could operate on individual dialog components. That is, instead
    of applying show and hide effects to the dialog as a whole, we could apply them
    to the individual parts inside the widget, like the title bar and the button pane.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开箱即用的情况下，对话框小部件允许开发人员在打开对话框时显示动画，以及在关闭时隐藏动画。此动画应用于整个对话框。因此，例如，如果我们指定`show`选项是`fade`动画，则整个对话框将对用户淡入视图。同样，如果`hide`选项是`fade`，则对话框会淡出视图，而不是立即消失。为了活跃这种`show`和`hide`行为，我们可以对各个对话框组件进行操作。也就是说，我们可以将显示和隐藏效果应用于小部件内部的各个部分，如标题栏和按钮窗格，而不是将它们应用于整个对话框。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做……
- en: The dialog we're going to create here is just about as simple as they come in
    terms of content. That is, we're going to only specify some basic `title` and
    content strings for the dialog in the HTML.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的对话框在内容上非常简单。也就是说，在 HTML 中我们只会为对话框指定一些基本的`title`和内容字符串。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In order to turn this idea of animating individual dialog components into reality,
    we''ll have to extend the dialog widget in a few places. In particular, we''re
    going to animate the title bar, at the top of the widget, as well as the button
    pane near the bottom. Here is what the JavaScript code looks like:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将对话框组件的逐个动画化的想法变为现实，我们需要在几个地方扩展对话框小部件。特别是，我们将动画化小部件顶部的标题栏以及底部的按钮窗格。下面是 JavaScript
    代码的样子：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you open the page, you''ll see the individual dialog components fade into
    view, independent of the `fade` animation we''ve specified for the dialog as a
    whole. Once visible, the dialog should look something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开页面时，你会看到独立于我们为对话指定的整体`fade`动画的各个对话框组件淡入视图。一旦可见，对话框应该看起来像这样：
- en: '![How to do it...](img/2186_05_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![怎么做……](img/2186_05_01.jpg)'
- en: You'll also notice that the `scale` effect isn't applied until the `fade` effect
    is applied to the title bar and button panes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到，直到标题栏和按钮窗格应用`fade`效果之后，`scale`效果才会被应用。
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: This code is one of those exceptions to the rule where we're not providing a
    mechanism with which to turn off our new extended functionality. That is, we have
    hard-coded changes in our custom implementation of some dialog methods that cannot
    be turned off by supplying an option value. However, the exception is made in
    an effort to trade-off complexity for desired functionality. Chances are that
    this type of custom animation work would happen as part of a specific project
    requirement, and not as a generalized extension of the dialog widget capabilities.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是规则的例外之一，我们没有提供关闭新扩展功能的机制。也就是说，我们在某些对话框方法的自定义实现中硬编码了更改，无法通过提供选项值来关闭。然而，这个例外是为了在复杂性和所需功能之间进行权衡。很可能这种自定义动画工作会作为特定项目需求的一部分进行，而不是对话框小部件功能的广泛扩展。
- en: The first thing we change about the default dialog implementation is in the
    `_create()` method, where we hide the `.ui-dialog-titlebar` and `.ui-dialog-buttonpane`
    components. This is done after calling the `_super()` method, which is responsible
    for creating the basic dialog components. Even if the dialog is set to open automatically
    with the `autoOpen` option, the `_create()` method doesn't actually display it.
    So, we can hide the title bar and button pane without the user noticing it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更改默认对话框实现的第一件事是在`_create()`方法中，我们隐藏了`.ui-dialog-titlebar`和`.ui-dialog-buttonpane`组件。这是在调用`_super()`方法之后完成的，该方法负责创建基本对话框组件。即使对话框设置为使用`autoOpen`选项自动打开，`_create()`方法也不会实际显示它。因此，我们可以在用户没有注意到的情况下隐藏标题栏和按钮面板。
- en: The reason we've hidden the two components is because we would like to apply
    a display effect once the dialog opens. The next method, `open()`, that we're
    overriding does exactly that. It first calls the `_super()` method, which initiates
    the effect for displaying the dialog (in our case, we've told it to fade on display).
    We then use the `fold` effect on the title bar and on the button pane.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们隐藏这两个组件的原因是因为我们希望在对话框打开时应用显示效果。下一个我们重写的方法`open()`就是这样做的。它首先调用`_super()`方法，该方法启动显示对话框的效果（在我们的情况下，我们告诉它在显示时淡入）。然后我们在标题栏和按钮面板上使用`fold`效果。
- en: You'll notice that we don't wait for any animations to complete before starting
    the next. The dialog display animation is started, followed by the title bar and
    the button pane. All three could be executing at the same time, potentially. The
    reason we've done it this way is to retain the correct layout of the dialog. The
    last method to override is the `close()` method. This introduces an interesting
    work-around we must use in order to get `_super()` to work in a callback. Even
    with the `self` variable in the enclosing scope, we have problems calling the
    `_super()` method inside the callback. So, we use the widget element and pretend
    like we're calling `.dialog( "close" )` from outside of the widget. The `isCallback`
    argument tells the `close()` method to call _`super()`, and return. The reason
    we need a callback to begin with is that we don't actually want to execute the
    dialog hide animation until we've finished animating the button pane.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们在开始下一个动画之前不等待任何动画完成。对话框显示动画开始，然后是标题栏和按钮面板。这三个动画可能同时执行。我们之所以这样做是为了保持对话框的正确布局。我们要重写的最后一个方法是`close()`方法。这引入了一个有趣的解决方法，我们必须使用它来使得
    `_super()` 在回调中起作用。即使在封闭范围内有 `self` 变量，我们在回调中调用 `_super()` 方法时也会遇到问题。因此，我们使用小部件元素，并假装我们是从小部件外部调用`.dialog("close")`一样。`isCallback`参数告诉`close()`方法调用
    `_super()`，然后返回。我们之所以需要回调是因为我们实际上不想在完成按钮面板动画之前执行对话框隐藏动画。
- en: Waiting for API data to load
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等待 API 数据加载
- en: More often than not, the dialog widget needs to load data from an API. That
    is, not all dialogs are composed of static HTML. They need data from the API to
    construct some of the elements using API data, such as `select` element options.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，对话框小部件需要从 API 加载数据。也就是说，并非所有对话框都由静态 HTML 构成。它们需要从 API 获取数据以使用 API 数据构建某些元素，例如`select`元素选项。
- en: Loading data from the API and building the resultant elements isn't the issue;
    we do this all the time. The challenge comes when we try to perform these activities
    within the dialog context. We don't necessarily want to display the dialog until
    the data has been loaded from the API, and the UI components used to display them
    inside the dialog components have been built. Ideally, we would block the dialog
    from displaying until the components displayed by the dialog are ready.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从 API 加载数据并构建结果元素并不是问题；我们一直在做这件事。挑战出现在我们尝试在对话上下文中执行这些活动时。我们不一定希望在从 API 加载数据并且用于显示对话框组件内部的
    UI 组件已构建之前显示对话框，并且理想情况下，我们应该阻止对话框显示，直到对话框显示的组件准备好。
- en: This is especially tricky with remote API functionally, where it is impossible
    to predict latency issues. Furthermore, the dialog may depend on more than one
    API call, each populating its own UI component in the dialog.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这在远程 API 功能中尤其棘手，因为不可能预测延迟问题。此外，对话框可能依赖于多个 API 调用，每个调用在对话框中填充自己的 UI 组件。
- en: Getting ready...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备...
- en: 'To implement a solution for the API data problem, we''ll need some basic HTML
    and CSS to define the dialog and its content. We''ll have two empty `select` elements
    in the dialog. This is what the HTML looks like:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 API 数据问题实现解决方案，我们将需要一些基本的 HTML 和 CSS 来定义对话框及其内容。我们将在对话框中有两个空的 `select` 元素。这是
    HTML 的样子：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And, this is the supporting CSS for the previous code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，这是上述代码的支持 CSS：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll give the dialog widget the ability to block while waiting on API requests
    by extending the widget with a new option. This option will allow us to pass in
    an array of deferred promises. A promise is an object used to track the state
    of an individual Ajax call. With a collection of promises, we''re able to implement
    complex blocking behavior using simple code like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将给对话框小部件增加一个新选项来阻止在等待 API 请求时阻塞。此选项将允许我们传递一个延迟承诺的数组。承诺是用于跟踪单个 Ajax 调用状态的对象。通过一组承诺，我们能够使用简单的代码实现复杂的阻塞行为，如下所示：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the API data is returned, for both the calls, the dialog is displayed
    and should look something like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 API 数据返回，对于这两个调用，对话框将被显示，并且应该看起来像这样：
- en: '![How to do it...](img/2186_05_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_05_02.jpg)'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's start by looking at the document ready handler where we're actually instantiating
    the dialog widget. The first two variables defined here, `repos` and `users`,
    are `$.Deferred` objects. These represent two API calls we're making to the GitHub
    API. The objective of these calls is to populate the `#repos` and the `#users`
    `select` elements, respectively. These `select` elements make up part of our `#dialog`
    content. The `success` option specified in each Ajax call is a callback that performs
    the work of creating the `option` elements, and placing them in the `select` element.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下文档准备好的处理程序，在这里我们实际上是在实例化对话框小部件。这里定义的前两个变量 `repos` 和 `users` 是 `$.Deferred`
    对象。这代表了我们正在向 GitHub API 发送的两个 API 调用。这些调用的目的是分别填充 `#repos` 和 `#users` `select`
    元素。这些 `select` 元素构成了我们的 `#dialog` 内容的一部分。在每个 Ajax 调用中指定的 `success` 选项是一个回调，它执行创建
    `option` 元素并将它们放置在 `select` 元素中的工作。
- en: Without customizing the dialog widget, these two API calls would work just fine.
    The dialog would open, and eventually, the options would appear in the `select`
    elements (after the dialog has already opened). You'll notice, however, that we're
    passing an array of `deferred.promise()` objects to the dialog. This is a new
    capability we've given to the dialog widget. A deferred object, simply put, allows
    developers to postpone the consequences of some action that might take a while
    to complete, such as an Ajax call. A promise is something we get from a deferred
    object that lets us compose some criteria that says when a complex sequence, such
    as making multiple Ajax calls, is complete.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不自定义对话框小部件，这两个 API 调用将正常工作。对话框将打开，最终，选项将出现在 `select` 元素中（在对话框已经打开之后）。但是，您会注意到，我们正在向对话框传递一个
    `deferred.promise()` 对象数组。这是我们赋予对话框小部件的新功能。延迟对象简单来说允许开发人员推迟某些可能需要一段时间才能完成的操作的后果，例如
    Ajax 调用。承诺是我们从延迟对象中得到的，它允许我们组合一些条件，说出一个复杂的序列，例如进行多个 Ajax 调用，何时完成。
- en: The custom `promises` option we've added to the dialog widget is used in our
    implementation of the `open()` method. It is here that we can make use of these
    promises. Essentially, we're making a transaction out of one or more promise objects
    passed to the dialog—once they've all completed or resolved to use the jQuery
    terminology, we can open the dialog. We do so by passing the array of promise
    objects to the `$.when()` function, which calls the `open()` method on the dialog.
    However, a complication arises here that we must deal with. We can't call `_super()`
    from within a callback function because the core widget machinery doesn't understand
    how to find the parent widget class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加到对话框小部件的自定义`promises`选项是在我们的`open()`方法的实现中使用的。在这里，我们可以利用这些承诺。基本上，我们正在将一个或多个承诺对象传递给对话框，一旦它们全部完成或解析为使用jQuery术语，我们就可以打开对话框。我们通过将承诺对象数组传递给`$.when()`函数来实现这一点，该函数在对话框上调用`open()`方法。但是，这里出现了一个我们必须处理的复杂情况。我们无法在回调函数内部调用`_super()`，因为核心小部件机制不知道如何找到父小部件类。
- en: So, we have to pretend as though we're calling `open()` from outside of the
    widget. We do this by using `self.element`, and the additional `isPromise` parameter,
    instructing our custom `open()` implementation on how to behave.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们必须假装我们是从小部件外部调用`open()`。我们通过使用`self.element`和额外的`isPromise`参数来做到这一点，指示我们自定义的`open()`实现如何行为。
- en: Using icons in the dialog title
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在对话框标题中使用图标
- en: With some dialogs, depending on the nature of the application and the content
    of the dialog itself, it may be beneficial to place an icon beside the dialog
    title. This could be beneficial in the sense that it provides additional context
    to the user. For example, an edit dialog might have a pencil icon, whereas a user
    profile dialog might contain a person icon.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些对话框，根据应用程序的性质和对话框本身的内容，可能有益于在对话框标题旁边放置一个图标。这可能有利于用户提供额外的上下文。例如，编辑对话框可能具有铅笔图标，而用户个人资料对话框可能包含人物图标。
- en: Getting ready...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了...
- en: 'To illustrate adding an icon to the title bar of the dialog widget, we''ll
    use the following as our basic HTML:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明在对话框小部件的标题栏中添加图标，我们将使用以下内容作为我们的基本HTML：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The first thing we''ll need to define is a custom CSS class used to properly
    align the icon once we place it in the title bar of the dialog. The CSS looks
    like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义的第一件事是一个自定义的CSS类，用于在将其放置在对话框标题栏中时正确对齐图标。CSS如下所示：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we have our JavaScript code to customize the dialog widget by adding
    a new `icon` option as well as creating an instance of the widget using our HTML
    as the source:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有我们的JavaScript代码来通过添加新的`icon`选项来自定义对话框小部件，以及使用我们的HTML作为源代码创建小部件的实例：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The resulting dialog, when opened, should look something like the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 打开时产生的对话框应该看起来像下面这样：
- en: '![How to do it...](img/2186_05_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2186_05_03.jpg)'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For this particular dialog instance, we would like to display the pencil icon.
    Our `icon` option we've added to the dialog widget allows the developer to specify
    an icon class from the theme framework. In this case, it's `ui-icon-pencil`. The
    new `icon` option has a default value of `false`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的对话框实例，我们想显示铅笔图标。我们已添加到对话框小部件的`icon`选项允许开发人员从主题框架中指定图标类。在这种情况下，它是`ui-icon-pencil`。新的`icon`选项具有默认值`false`。
- en: We're overriding the default dialog implementation of the `_create()` method
    so that we can inject a new `span` element into the dialog title bar if the `icon`
    option was provided. This new `span` element gets the icon class passed as the
    new option value, in addition to the `ui-dialog-icon` class, which is used to
    position the icon we defined earlier.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在覆盖`_create()`方法的默认对话框实现，以便我们可以在对话框标题栏中插入一个新的`span`元素，如果提供了`icon`选项。这个新的`span`元素得到了作为新选项值传递的图标类，以及`ui-dialog-icon`类，该类用于定位我们之前定义的图标。
- en: Adding actions to the dialog title
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将操作添加到对话框标题
- en: By default, the dialog widget provides the user with one action that doesn't
    require developer intervention—the close button in the title bar. This is a universal
    action that applies to almost any dialog, as users would expect to be able to
    close them. Additionally, it isn't by accident that the close dialog action button
    is an icon positioned in the top-right corner of the dialog. This is a standard
    location and action in graphical windowing environments as well, in addition to
    other actions. Let's take a look at how we might go about extending the actions
    placed in the title bar of the dialog widget.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对话框小部件为用户提供了一个不需要开发者干预的操作——标题栏中的关闭按钮。这是一个几乎适用于任何对话框的通用操作，因为用户期望能够关闭它们。此外，关闭对话框操作按钮是一个位于对话框右上角的图标，这并不是偶然的。这是一个标准的位置和动作，在图形窗口环境中以及其他操作中也是如此。让我们看看如何扩展放置在对话框小部件标题栏中的操作。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For this demonstration, we only need the following basic dialog HTML:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们只需要以下基本的对话框HTML：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we''ll implement our dialog specialization that adds a new option and
    some code that creates a new dialog instance using that option:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现我们的对话框特化，添加一个新选项和一些创建使用该选项的新对话框实例的代码：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When this dialog is opened, we''ll see the new action buttons we passed to
    the dialog in the top-right corner, as shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开此对话框时，我们将在右上角看到我们传递给对话框的新操作按钮，如下截图所示：
- en: '![How to do it...](img/2186_05_04.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/2186_05_04.jpg)'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We've created a new option for the dialog called `iconButtons`. This new option
    expects an array of objects, where each object has attributes related to an action
    button. Things like the text, the icon class, and the click event have to be executed
    when the user opens the dialog, and clicks on the button.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为对话框创建了一个名为`iconButtons`的新选项。这个新选项期望一个对象数组，其中每个对象都有与操作按钮相关的属性。像文本、图标类以及在用户打开对话框并单击按钮时执行的点击事件等。
- en: The bulk of the work in this customization takes place in our version of the
    `_create()` method. Here, we iterate over each button supplied in the `iconButtons`
    option. The first thing we do when inserting a new button into the title bar is
    create the `button` element. We also get the width of the last action button added
    using the `.ui-dialog-titlebar [role='button']:last` selector (this is needed
    to compute the horizontal placement of the action button).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个定制中，大部分工作都是在我们版本的`_create()`方法中进行的。在这里，我们遍历`iconButtons`选项中提供的每个按钮。在将新按钮插入标题栏时，我们首先创建`button`元素。我们还使用`.ui-dialog-titlebar
    [role='button']:last`选择器获取最后一个添加的操作按钮的宽度（这是需要计算操作按钮的水平位置的）。
- en: Next, we bind the `click` event as specified in the button configuration. For
    each button in the array that we're adding, we want it placed to the left of the
    previous button. So when we first start iterating over the `iconButtons` array,
    the default close action is the last button in the title bar. Since the CSS structure
    requires a fixed right value, we have to compute it. And to do that, we need the
    value of the last button in the list.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们按照按钮配置绑定`click`事件。对于我们添加的数组中的每个按钮，我们希望它放置在前一个按钮的左侧。因此，当我们首次开始遍历`iconButtons`数组时，默认的关闭操作是标题栏中的最后一个按钮。由于CSS结构需要一个固定的右值，我们必须计算它。为了做到这一点，我们需要列表中最后一个按钮的值。
- en: Applying effects to dialog resize interactions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将效果应用到对话框调整大小交互
- en: By default, the dialog widget allows users to resize by dragging the resize
    handle. The actual resize capability is provided by the `resizable()` interaction
    widget setup internally by the dialog when the `resizable` option is `true`. Let's
    take a look at how to gain access to the internal resizable component, so that
    we can use the `animate` feature. This option, when set on a resizable component,
    delays the redrawing of the resized component until the user has stopped dragging
    the resize handle.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对话框小部件允许用户通过拖动调整大小。实际的调整大小功能是由对话框在`resizable`选项为`true`时内部设置的`resizable()`交互小部件提供的。让我们看看如何访问内部可调整大小组件，以便我们可以使用`animate`特性。当设置在可调整大小组件上时，此选项会延迟重新绘制调整大小的组件，直到用户停止拖动调整大小手柄。
- en: Getting ready...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: 'We only need simple dialog HTML for this demonstration, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们只需要简单的对话框HTML，如下所示：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's add a new option to the dialog widget called `animateResize`. When this
    option is `true`, we'll turn on the `animate` option of the internal resizable
    interaction widget.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为对话框小部件添加一个名为`animateResize`的新选项。当此选项为`true`时，我们将打开内部可调整大小交互小部件的`animate`选项。
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When this dialog is created and displayed, you'll be able to resize the dialog,
    observing that the actual resize is now animated.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建并显示此对话框时，您将能够调整对话框的大小，观察到实际的调整现在是动画的。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We''ve added the `animateResize` option to the dialog and provided it with
    a default value of `false`. To actually perform this capability, we''ve completely
    overwritten the `_makeResizable()` method, which the dialog widget uses internally
    when the dialog is created. In fact, we''ve taken the internal code for `_makeResizable()`
    and changed only one thing about it—`animate: this.options.animateResize`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '我们已经向对话框添加了`animateResize`选项，并为其提供了默认值`false`。要实际执行此功能，我们已经完全重写了对话框小部件在对话框创建时内部使用的`_makeResizable()`方法。事实上，我们已经采取了`_makeResizable()`的内部代码，并仅更改了一件事情——`animate:
    this.options.animateResize`。'
- en: This is slightly redundant, copying all this code for turning on a simple feature
    like animating the dialog resize interaction. Indeed, it isn't the ideal solution.
    A better approach would be to call the `_super()` version of `_makeResizable()`,
    then just turn on animate by calling `this.uiDialog.resizable( "option", "animate",
    true )`. But at the time of this writing, this doesn't behave as expected. Our
    alternative route, even though it involves redundant code, just goes to show the
    flexibility of the widget factory. If this animation quality were a real requirement
    of a user interface, we quickly found a work-around with a negligible trade-off.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点多余，复制所有这些代码来打开一个简单的功能，比如动画化对话框调整交互。事实上，这不是理想的解决方案。一个更好的方法是调用`_makeResizable()`的`_super()`版本，然后只需通过调用`this.uiDialog.resizable(
    "option", "animate", true )`打开动画即可。但在撰写本文时，这不符合预期。尽管我们的替代路径涉及多余的代码，但它只是展示了小部件工厂的灵活性。如果这种动画质量是用户界面的真实要求，我们很快就找到了一个可以忽略的折衷方案。
- en: Using modal dialogs for messages
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模态对话框进行消息传递
- en: The dialog widget has a `modal` option reserved for when we need to focus the
    user's attention on just one thing. This option displays the dialog while preventing
    the user from interacting with the rest of the user interface. They have no choice
    but to take notice. This goes without saying, the modal dialog should be used
    sparingly, especially if you want to use it to broadcast messages to the user.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框小部件有一个保留的`modal`选项，用于当我们需要将用户的注意力集中在一件事上时。此选项显示对话框，同时防止用户与其余用户界面进行交互。他们别无选择，只能注意到。不言而喻，模态对话框应该节俭使用，特别是如果您想要用它来向用户广播消息。
- en: Let's look at how we can strip down the dialog in order to construct a generic
    notification tool in our application. It is a modal dialog in essence that is
    used for those cases where we cannot let the user continue what they're doing
    without ensuring they've seen our message.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何简化对话框以构建一个通用的通知工具在我们的应用程序中。本质上是一个模态对话框，用于那些我们不能让用户继续正在做的事情而不确保他们已经看到我们的消息的情况。
- en: Getting ready...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪...
- en: Here is what the HTML we'll need for this example looks like. Notice that the
    `#notify` `div`, which will become a dialog widget, has no content as our new
    notify widget will supply some.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个示例所需的HTML看起来像。请注意，`#notify` `div`，它将成为一个对话框小部件，没有内容，因为我们的新通知小部件将提供一些内容。
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s go ahead and define a new notify widget, capable of displaying both
    error and information messages to the user like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续定义一个新的通知小部件，能够向用户显示错误和信息消息，就像这样：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The two buttons we''ve created here are used for demonstrating the notify widget''s
    capabilities. If you click the `#show-info` button, you''ll see the following
    informational message:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里创建的两个按钮用于演示通知小部件的功能。如果您点击`#show-info`按钮，您将看到以下信息消息：
- en: '![How to do it...](img/2186_05_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_05_05.jpg)'
- en: 'If you click the `#show-error` button, you''ll see this error message:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击`#show-error`按钮，您将看到此错误消息：
- en: '![How to do it...](img/2186_05_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_05_06.jpg)'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `notify` widget we've just created inherits all of the dialog widget's capabilities.
    The first thing we define in our widget is the available options. In this case,
    we're extending the `options` object of the dialog widget, and adding some new
    options. You'll notice, too, that we're providing some updated default values
    for the dialog options such as turning `modal` on and turning `draggable` off.
    Every notify instance will share these defaults, so it doesn't make much sense
    to have to define them each and every time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的`notify`小部件继承了对话框小部件的所有功能。在我们的小部件中，我们首先定义的是可用选项。在这种情况下，我们扩展了对话框小部件的`options`对象，并添加了一些新选项。您还会注意到，我们提供了一些更新后的对话框选项的默认值，例如打开`modal`并关闭`draggable`。每个notify实例都将共享这些默认值，因此没必要每次都要定义它们。
- en: The `open()` method belongs to the dialog widget, and we're overriding it here
    to implement custom functionality that inserts the text of the notification message
    into the dialog content. We also set the state of the dialog based on the `error`
    option. If this is an error message, we apply the `ui-state-error` class to the
    entire dialog. If the `error` option is `false`, we apply the `ui-state-highlight`
    class. Finally, the dialog title bar component is stripped down by removing some
    classes, since we're not using it in the message display.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`open()`方法属于对话框小部件，我们在这里进行了重写，以实现将通知消息的文本插入对话框内容的自定义功能。我们还根据`error`选项设置对话框的状态。如果这是一个错误消息，我们将整个对话框应用`ui-state-error`类。如果`error`选项为`false`，我们应用`ui-state-highlight`类。最后，对话框标题栏组件被简化，删除了一些类，因为我们在消息显示中没有使用它。'
- en: In the application code, the first thing we're creating is an instance of the
    notify widget. We then create the demo buttons and bind the `click` event to the
    functionality that will display an error message or an informational one, depending
    on which button is clicked.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序代码中，我们首先创建的是notify小部件的实例。然后我们创建了演示按钮，并将`click`事件绑定到将显示错误消息或信息性消息的功能，具体取决于点击了哪个按钮。
