["```js\n    <template>\n      <div class=\"container\">\n        <h2>Shopping list</h2>\n        <div class=\"user-input\">\n          <input\n            placeholder=\"Press enter to add new item\"\n            v-model=\"input\"\n            @keyup.enter=\"addItem\"\n            ref=\"input\"\n          />\n        </div>\n      </div>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          input: '',\n        }\n      },\n    }\n    </script>\n    <style lang=\"scss\">\n    @import 'styles/global';\n    $color-green: #4fc08d;\n    $color-grey: #2c3e50;\n    .container {\n      max-width: 600px;\n      margin: 80px auto;\n    }\n    // Type\n    .h2 {\n      font-size: 21px;\n    }\n    .user-input {\n      display: flex;\n      align-items: center;\n      padding-bottom: 20px;\n      input {\n        width: 100%;\n        padding: 10px 6px;\n        margin-right: 10px;\n      }\n    }\n    </style>\n    ```", "```js\n    <template>\n      <div class=\"container\">\n        <h2>Shopping list</h2>\n        <div class=\"user-input\">\n          <input\n            placeholder=\"Press enter to add new item\"\n            v-model=\"input\"\n            @keyup.enter=\"addItem\"\n            ref=\"input\"\n          /><button @click=\"addItem\">Add item</button>\n        </div>\n      </div>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          input: '',\n          shoppingList: [],\n        }\n      },\n      methods: {\n        addItem() {\n          // Don't allow adding to the list if empty\n          if (!this.input) return\n          this.shoppingList.push(this.input)\n          // Clear the input after adding\n          this.input = ''\n          // Focus the input element again for quick typing!\n          this.$refs.input.focus()\n        },\n      },\n    }\n    </script>\n    <style lang=\"scss\">\n    ...\n    // Buttons\n    button {\n      appearance: none;\n      padding: 10px;\n      font-weight: bold;\n      border-radius: 10px;\n      border: none;\n      background: $color-grey;\n      color: white;\n      white-space: nowrap;\n      + button {\n        margin-left: 10px;\n      }\n    }\n    </style>\n    ```", "```js\n    <template>\n      <div class=\"container\">\n        ...\n        <ul v-if=\"shoppingList\">\n          <li v-for=\"(item, i) in shoppingList\" :key=\"i\" class=\"item\"\n             ><span>{{ item }}</span>\n            </li>\n        </ul>\n      </div>\n    </template>\n    <style lang=\"scss\">\n    .item {\n      display: flex;\n      align-items: center;\n    }\n    ul {\n      display: block;\n      margin: 0 auto;\n      padding: 30px;\n      border: 1px solid rgba(0, 0, 0, 0.25);\n      > li {\n        color: $color-grey;\n        margin-bottom: 4px;\n      }\n    }\n    </style>\n    ```", "```js\n    ...\n    <script>\n    export default {\n      data() {\n        return {\n          input: '',\n          shoppingList: [],\n        }\n      },\n      methods: {\n        addItem() {\n          // Don't allow adding to the list if empty\n          if (!this.input) return\n          this.shoppingList.push(this.input)\n          // Clear the input after adding\n          this.input = ''\n          // Focus the input element again for quick typing!\n          this.$refs.input.focus()\n        },\n        deleteItem(i) {\n          this.shoppingList = i\n            ? this.shoppingList.filter((item, x) => x !== i)\n            : []\n        },\n      },\n    }\n    </script>\n    ```", "```js\n        <button class=\"button--delete\" @click=\"deleteItem()\">      Delete all</button>\n    ...\n    <style lang=\"scss\">\n    ...\n    .button--delete {\n      display: block;\n      margin: 0 auto;\n      background: red;\n    }\n    </style>\n    ```", "```js\n    <template>\n      <div class=\"container\">\n        ...\n        <ul v-if=\"shoppingList\">\n          <li v-for=\"(item, i) in shoppingList\" :key=\"i\" class=\"item\"\n            ><span>{{ item }}</span>\n            <button class=\"button--remove\" \n              @click=\"deleteItem(i)\">Remove</button>\n          </li>\n        </ul>\n        <br />\n        <button class=\"button--delete\" @click=\"deleteItem()\">      Delete all</button>\n      </div>\n    </template>\n    ...\n    <style lang=\"scss\">\n    ...\n    .button--remove {\n      background: none;\n      color: red;\n      text-transform: uppercase;\n      font-size: 11px;\n      align-self: flex-end;\n    }\n    </style>\n    ```", "```js\n    yarn add contentful\n    ```", "```js\n    <template>\n      <div id=»app»>\n      </div>\n    </template>\n    <script>\n    import { createClient } from 'contentful'\n    const client = createClient({\n      space: ‹hpr0uushokd4›,\n      accessToken: ‹jwEHepvQx-kMtO7_2ldjhE4WMAsiDp3t1xxBT8aDp7U›,\n    })\n    </script>\n    <style lang=\"scss\">\n    #app {\n      font-family: ‹Avenir›, Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin: 60px auto 0;\n      max-width: 800px;\n    }\n    </style>\n    ```", "```js\n    <template>\n      <div id=»app»>\n        <pre>{{ authors }}</pre>\n        <pre>{{ posts }}</pre>\n      </div>\n    </template>\n    <script>\n    import { createClient } from 'contentful'\n    const client = createClient({\n      space: ‹hpr0uushokd4›,\n      accessToken: ‹jwEHepvQx-kMtO7_2ldjhE4WMAsiDp3t1xxBT8aDp7U›,\n    })\n    export default {\n      name: ‹app›,\n      data() {\n        return {\n          authors: [],\n          posts: {},\n        }\n      },\n      async created() {\n        this.authors = await this.getPeople()\n        this.posts = await this.getBlogPosts()\n      },\n      methods: {\n        async getPeople() {\n          const entries = await client.getEntries({ content_type:         'person' })\n          return entries.items\n        },\n        async getBlogPosts() {\n          const entries = await client.getEntries({\n            content_type: ‹blogPost›,\n            order: ‹-fields.publishDate›,\n          })\n          return entries.items\n        },\n      },\n    }\n    </script>\n    ```", "```js\n\n      <div class=»articles»>\n          <hr />\n          <h2>Articles</h2>\n          <section v-if=»posts» class=»articles-list»>\n            <article v-for=»(post, i) in posts» :key=»i»>\n              <img\n                class=»thumbnail»\n                :src=»\n                  post.fields.heroImage.fields.file.url +                 '?fit=scale&w=350&h=196'\n                «\n              />\n\n     class=»article-text»>\n\n    <div class=\"date\">{{\n                  new Date(post.fields.publishDate).toDateString()\n                }}</div>\n                <h4>{{ post.fields.title }}</h4>\n                <p>{{ post.fields.description }}</p>\n              </div>\n            </article>\n          </section>\n        </div>\n    ```", "```js\n    .articles-list {\n      article {\n        display: flex;\n        text-align: left;\n        padding-bottom: 15px;\n        .article-text {\n          padding: 15px 0;\n        }\n        .thumbnail {\n          margin-right: 30px;\n        }\n        .date {\n          font-size: 12px;\n          font-weight: bold;\n          text-transform: uppercase;\n        }\n      }\n    }\n    ```", "```js\n    <template>\n       ...\n\n        <div v-if=»name» class=»author»>\n          <h2\n            >{{ name }} <br />\n            <small v-if=»title» >{{ title }}</small></h2\n          >\n          <p v-if=»bio» >{{ bio }}</p>\n        </div>\n        ...\n    </template>\n    ...  \n    computed: {\n        name() {\n          return this.authors[0] && this.authors[0].fields.name\n        },\n        title() {\n          return this.authors[0] && this.authors[0].fields.title\n        },\n        bio() {\n          return this.authors[0] && this.authors[0].fields.shortBio\n        },\n    },\n    ...\n    ```", "```js\n    ? Please pick a preset: (Use arrow keys)\n      default (babel, eslint)\n     > Manually select features\n    ```", "```js\n    ? Check the features needed for your project:\n     (*) Babel\n     ( ) TypeScript\n     ( ) Progressive Web App (PWA) Support\n     ( ) Router\n     ( ) Vuex\n     (*) CSS Pre-processors\n    >(*) Linter / Formatter\n     ( ) Unit Testing\n     ( ) E2E Testing\n    ```", "```js\n    ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)\n    > Sass/SCSS (with dart-sass)\n      Sass/SCSS (with node-sass)\n      Less\n      Stylus\n    ```", "```js\n    ? Pick a linter / formatter config: (Use arrow keys)\n     ESLint with error prevention only\n     ESLint + Airbnb config\n     ESLint + Standard config\n    > ESLint + Prettier\n    ```", "```js\n    ? Pick additional lint features: (Press <space> to select,  <a> to toggle all, <i> to invert selection)\n     >(*) Lint on save\n     (*) Lint and fix on commit\n    ```", "```js\n    ? Where do you prefer placing config for Babel, PostCSS, ESLint,  etc.? (Use arrow keys)\n     > In dedicated config files\n     In package.json\n    ```", "```js\n    yarn install v1.16.0\n    info No lockfile found.\n     [1/4] Resolving packages...\n    ```", "```js\n    <template>\n      <div>\n        <textarea></textarea>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    export default {\n      data() {\n        return {\n          message: ''\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of the template -->\n        <textarea\n          @change=\"onChange($event)\"\n        >\n        </textarea>\n    </template>\n    <script>\n    export default {\n      // rest of component properties\n      methods: {\n        onChange(event) {\n          this.message = event.target.value\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of the template -->\n        <button @click=\"$emit('send', message)\">Send</button>\n      <!-- rest of the template -->\n    </template>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <MessageEditor />\n      </div>\n    </template>\n    <script>\n    import MessageEditor from './components/MessageEditor.vue'\n    export default {\n      components: {\n        MessageEditor,\n      },\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <MessageEditor @send=\"onSend($event)\" />\n      <!-- rest of template -->\n    </template>\n    <script>\n    // rest of script\n    export default {\n      // other component fields\n      data() {\n        return { messages: [] }\n      },\n      methods: {\n        onSend(message) {\n          this.messages = [...this.messages, message]\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n    </template>\n    <script>\n    export default {\n      props: {\n        messages: {\n          type: Array,\n          required: true\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n        <div>\n        <p v-for=\"(m, i) in messages\" :key=\"i\">\n          {{ m }}\n        </p>\n      </div>\n    </template>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <MessageFeed :messages=\"messages\" />\n      <!-- rest of template -->\n    </template>\n    <script>\n    // other imports\n    import MessageFeed from './components/MessageFeed.vue'\n    export default {\n      components: {\n        // other components,\n        MessageFeed\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <textarea\n          ref=\"textArea\"\n          @change=\"onChange($event)\"\n        >\n        </textarea>\n        <button @click=\"onSendClick()\">Send</button>\n      <!-- rest of template -->\n    </template>\n    <script>\n    export default {\n      // rest of component\n      methods: {\n        // other methods\n        onSendClick() {\n          this.$emit('send', this.message)\n          this.message = ''\n          this.$refs.textArea.value = ''\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    npm install --save axios\n    ```", "```js\n    import axios from 'axios'\n    export default {\n      install(Vue) {\n        Vue.prototype.axios = axios\n      }\n    }\n    ```", "```js\n    // other imports\n    import axiosPlugin from './plugins/axios.js'\n    Vue.use(axiosPlugin)\n    // other initialisation code\n    ```", "```js\n    const BASE_URL = 'https://jsonplaceholder.typicode.com'\n    Vue.use({\n      install(Vue) {\n        Vue.baseUrl = BASE_URL\n        Vue.prototype.baseUrl = BASE_URL\n      }\n    })\n    ```", "```js\n    <script>\n    export default {\n      async mounted() {\n        const { data: todos } = await this.axios.get(      `${this.baseUrl}/todos`)\n        this.todos = todos\n      }\n    }\n    </script>\n    ```", "```js\n    <template functional>\n      <ul>\n        <li v-for=\"todo in props.todos\" :key=\"todo.id\">\n          <slot name=\"todo\" :todo=\"todo\" />\n        </li>\n      </ul>\n    </template>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <TodoList :todos=\"todos\">\n          <template #todo=\"{ todo }\">\n          {{ todo.title }}\n          </template>\n        </TodoList>\n      </div>\n    </template>\n    <script>\n    import TodoList from './components/TodoList.vue'\n    export default {\n      components: {\n        TodoList\n      },\n      // other component methods\n      data() {\n        return { todos: [] }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div>\n        <label>{{ title }}</label>\n        <input\n          type=\"checkbox\"\n          :checked=\"completed\"\n        />\n      </div>\n    </template>\n    <script>\n    export default {\n      props: {\n        id: {\n          type: Number,\n          required: true\n        },\n        title: {\n          type: String,\n          required: true\n        },\n        completed: {\n          type: Boolean,\n          default: false\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <TodoList :todos=\"todos\">\n          <template #todo=\"{ todo }\">\n            <TodoEntry\n            :id=\"todo.id\"\n            :title=\"todo.title\"\n            :completed=\"todo.completed\"\n          />\n        </template>\n      </TodoList>\n     </div>\n    </template>\n    <script>\n    // other imports\n    import TodoEntry from './components/TodoEntry.vue'\n    export default {\n      components: {\n      // other components\n        TodoEntry\n     },\n     // other component methods\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of the template -->\n        <input       type=\"checkbox\"\n          :checked=\"completed\"\n          @change=\"toggleCompletion()\"\n        />\n      <!-- rest of the template -->\n    </template>\n    <script>\n    export default {\n      // other component properties\n      methods: {\n        toggleCompletion() {\n          const newCompleted = !this.completed \n          this.$emit('completeChange', newCompleted)\n          this.axios.patch(\n            `${this.baseUrl}/todos/${this.id}`,\n            { completed: newCompleted }\n          )\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n     <!-- rest of template -->\n            <TodoEntry\n              :id=\"todo.id\"\n              :title=\"todo.title\"\n              :completed=\"todo.completed\"\n              @completeChange=\"handleCompleteChange(todo.id, $event)\"\n            />\n     <!-- rest of template -->\n    </template>\n    <script>\n    // imports\n    export default {\n     // other component properties\n      methods: {\n        handleCompleteChange(id, newCompleted) {\n          this.todos = this.todos.map(\n            t => t.id === id\n             ? { ...t, completed: newCompleted }\n             : t\n          )\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div>\n        <textarea\n          ref=\"textArea\"\n          @change=\"onChange($event)\"\n        >\n        </textarea>\n        <button @click=\"onSendClick()\">Submit</button>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    export default {\n      props: {\n        list: Array\n      },\n      data() {\n        return {\n          message: ''\n        }\n      },\n      methods: {\n        onChange(event) {\n          this.message = event.target.value\n        },\n        onSendClick() {\n          if (!this.message) return;\n          this.list.push(this.message);\n          this.$emit('list:update', this.list);\n          this.message = ''\n          this.$refs.textArea.value = ''\n        }\n      },\n    }\n    </script>\n    ```", "```js\n    {\n        path: '/',\n        name: 'messages',\n        component: () => import(/* webpackChunkName: \"messages\" */       '../views/Messages.vue'),\n    }\n    ```", "```js\n    {\n        path: '/',\n        name: 'messages',\n        component: () => import(/* webpackChunkName: \"messages\" */       '../views/Messages.vue'),\n        children: [{\n          path: 'editor',\n          name: 'editor',\n          component: () => import(/* webpackChunkName: \"editor\" */         '../views/MessageList.vue'),\n          props: true,\n        }]\n    },\n    ```", "```js\n    <template>\n      <div>\n        <h2> Message Feed </h2>\n        <div v-for=\"(m, i) in list\" :key=\"i\" >\n          <router-link :to=\"`/message/${i}`\">\n            {{ i }}\n            </router-link>\n        </div>\n    </div>\n    </template>\n    <script>\n    export default {\n      props: {\n        list: {\n          type: Array,\n          default: () => []\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    {\n        path: '/',\n        name: 'messages',\n        component: () => import(/* webpackChunkName: \"messages\" */       '../views/Messages.vue'),\n        children: [{\n          path: 'list',\n          name: 'list',\n          component: () => import(/* webpackChunkName: \"list\" */         '../views/MessageList.vue'),\n          props: true,\n        }, {\n          path: 'editor',\n          name: 'editor',\n          component: () => import(/* webpackChunkName: \"editor\" */         '../views/MessageEditor.vue'),\n          props: true,\n        }]\n      },\n    ```", "```js\n    <template>\n      <div>\n        <router-link :to=\"{ name: 'list', params: { list       }}\">List</router-link> |\n        <router-link :to=\"{ name: 'editor', params: { list       }}\">Editor</router-link>\n        <router-view :list.sync=\"list\"/>\n      </div>\n    </template>\n    <script>\n    ```", "```js\n    <script>\n    export default {\n      props: {\n        list: Array\n      }\n    </script>\n    ```", "```js\n    const messages = []\n    ```", "```js\n    {\n        path: '/',\n        name: 'messages',\n        /* ... */ \n        props: {\n          list: messages\n        },\n    }\n    ```", "```js\n    beforeRouteLeave(to, from, next) {\n          if (this.$refs.textArea.value !== '') {\n            const ans = window.confirm(You have an unsaved message.           Are you sure you want to navigate away?');\n            next(!!ans);\n          }\n          else {\n            next();\n          }\n      }\n    ```", "```js\n    <template>\n      <div class=\"message\">\n        <h2>Message content:</h2>\n        <main>\n          <slot/>\n        </main>\n        <button @click=\"goBack\">Back</button>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    import MessageLayout from '../layouts/messageLayout.vue';\n    export default {\n      props: {\n        content: {\n          type: String,\n          default: ''\n        },\n      },\n      methods: {\n        goBack() {\n          if (this.$route.params.from) {\n            this.$router.go(-1)\n          }\n          else {\n            this.$router.push({\n              name: 'messages'\n            })\n          }\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    {\n        path: '/message/:id',\n        name: 'message',\n        component: () => import(/* webpackChunkName: \"message\" */       '../views/Message.vue'),\n        props:true,\n        beforeEnter(to, from, next) {\n          if (to.params && to.params.id) {\n            const id = to.params.id;\n\n            if (messages && messages.length > 0 && id <           messages.length) {\n              to.params.content = messages[id];\n              }\n          }\n          to.params.from = from;\n          next()\n        },\n      }\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <component :is=\"layout\">\n          <router-view :layout.sync=\"layout\"/>\n        </component>\n      </div>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          layout: () => import(/* webpackChunkName: \"defaultLayout\"         */ './layouts/default.vue')\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div class=\"default\">\n        <h1>Messages section</h1>\n        <main>\n          <slot/>\n        </main>\n      </div>\n    </template>\n    ```", "```js\n    <template>\n      <div class=\"message\">\n        <h2>Message content:</h2>\n        <main>\n          <slot/>\n        </main>\n        <button @click=\"goBack\">Back</button>\n      </div>\n    </template>\n    <script>\n    export default {\n      methods: {\n        goBack() {\n          if (this.$route.params.from) {\n            this.$router.go(-1)\n          }\n          else {\n            this.$router.push({\n              name: 'messages'\n            })\n          }\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    import MessageLayout from '../layouts/messageLayout.vue';\n    export default {\n    /*...*/\n      created() {\n        this.$emit('update:layout', MessageLayout);\n      }\n    }\n    ```", "```js\n    <script>\n    import DefaultLayout from '../layouts/default';\n    export default {\n      props: {\n        list: Array\n      },\n      created() {\n        this.$emit('update:layout', DefaultLayout);\n      }\n    }\n    </script>\n    ```", "```js\n    yarn serve\n    ```", "```js\n    <template>\n      <div>\n        <textarea\n          ref=\"textArea\"\n          @change=\"onChange($event)\"\n        >\n        </textarea>\n        <button @click=\"onSendClick()\">Submit</button>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    export default {\n      props: {\n        list: Array\n      },\n      data() {\n        return {\n          message: ''\n        }\n      },\n      methods: {\n        onChange(event) {\n          this.message = event.target.value\n        },\n        onSendClick() {\n          if (!this.message) return;\n          this.list.push(this.message);\n          this.$emit('list:update', this.list);\n          this.message = ''\n          this.$refs.textArea.value = ''\n        }\n      },\n      beforeRouteLeave(to, from, next) {\n          if (this.$refs.textArea.value !== '') {\n            const ans = window.confirm('You have unsaved message.           Are you sure to navigate away?');\n            next(ans);\n          }\n          else {\n            next();\n          }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div>\n        <h2> Message Feed </h2>\n        <transition-group\n          @appear=\"enter\"\n          tag=\"div\"\n          move-class=\"flip\"\n          :css=\"false\"\n        >\n          <div v-for=\"(m, i) in list\" :key=\"m\">\n            <router-link :to=\"`/message/${i}`\">\n              {{ i }}\n            </router-link>\n          </div>\n        </transition-group>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    import { TimelineMax } from 'gsap';\n    export default {\n      props: {\n        list: {\n          type: Array,\n          default: () => []\n        }\n      },\n      methods: {\n        enter(el, done) {\n          const tl = new TimelineMax({\n            onComplete: done,\n            stagger: 1.2,\n            duration: 2,\n          });\n          tl.fromTo(el, {opacity: 0}, {opacity: 1})\n            .to(el, {rotation: -270, duration: 1, ease: \"bounce\"})\n            .to(el, {rotation: -360})\n            .to(el, {rotation: -180, opacity: 0})\n            .to(el, {rotation: 0, opacity: 1});\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <style>\n    .flip-move {\n      transition: transform 1s;\n    }\n    </style>\n    ```", "```js\n    <template>\n      <div>\n        <p>{{content}}</p>\n        <router-view/>\n      </div>\n    </template>\n    <script>\n    import MessageLayout from '../layouts/messageLayout.vue';\n    export default {\n      props: {\n        content: {\n          type: String,\n          default: ''\n        }\n      },\n      created() {\n        this.$emit('update:layout', MessageLayout);\n      }\n    }\n    </script>\n    ```", "```js\n    import Vue from 'vue'\n    import VueRouter from 'vue-router'\n    import Messages from '@/views/Messages.vue'\n    Vue.use(VueRouter)\n    const messages = []\n    export const routes = [\n      {\n        path: '/',\n        name: 'messages',\n        component: () => import(/* webpackChunkName: \"messages\" */       '../views/Messages.vue'),\n        props: {\n          list: messages\n        },\n        children: [{\n          path: 'list',\n          name: 'list',\n          component: () => import(/* webpackChunkName: \"list\" */         '../views/MessageList.vue'),\n          props: true,\n        }, {\n          path: 'editor',\n          name: 'editor',\n          component: () => import(/* webpackChunkName: \"list\" */         '../views/MessageEditor.vue'),\n          props: true,\n        }]\n      },\n      {\n        path: '/message/:id',\n        name: 'message',\n        component: () => import(/* webpackChunkName: \"message\" */       '../views/Message.vue'),\n        props:true,\n        beforeEnter(to, from, next) {\n          if (to.params && to.params.id) {\n            const id = to.params.id;\n\n            if (messages && messages.length > 0 && id <           messages.length) {\n              to.params.content = messages[id];\n            }\n          }\n          to.params.from = from;\n          next()\n        },\n      }\n    ]\n    const router = new VueRouter({\n      mode: 'history',\n      base: process.env.BASE_URL,\n      routes\n    })\n    export default router\n    ```", "```js\n    <component :is=\"layout\">\n          <transition name=\"fade\" mode=\"out-in\">\n            <router-view :layout.sync=\"layout\"/>\n          </transition>\n        </component>\n    Create CSS stylings for the related classes, inside App.vue:\n    <style>\n    .fade-enter-active, .fade-leave-active {\n      transition: opacity 2s, transform 3s;\n    }\n    .fade-enter, .fade-leave-to {\n      opacity: 0;\n      transform: translateX(-20%);\n    }\n    </style>\n    ```", "```js\n    <transition name=\"fade\" enter-active-class=\"zoom-in\">\n      <router-view :list.sync=\"list\"/>\n    </transition>\n    ```", "```js\n    <style>\n    .zoom-in {\n      animation-duration: 0.3s;\n      animation-fill-mode: both;\n      animation-name: zoom;\n    }\n    .fade-enter-active {\n      transition: opacity 2s, transform 3s;\n    }\n    .fade-enter {\n      opacity: 0;\n      transform: translateX(-20%);\n    }\n    </style>\n    ```", "```js\n    <transition-group\n      appear\n      @appear=\"enter\"\n      tag=\"div\"\n      move-class=\"flip\"\n      :css=\"false\"\n    >\n      <div v-for=\"(m, i) in list\" :key=\"m\">\n        <router-link :to=\"`/message/${i}`\">\n          {{ i }}\n        </router-link>\n      </div>\n    </transition-group>\n    ```", "```js\n    <script>\n    import { TimelineMax } from 'gsap';\n    export default {\n      props: {\n        list: {\n          type: Array,\n          default: () => []\n        }\n      },\n      methods: {\n        enter(el, done) {\n          const tl = new TimelineMax({\n            onComplete: done,\n            stagger: 1.2,\n            duration: 2,\n          });\n          tl.fromTo(el, {opacity: 0}, {opacity: 1})\n            .to(el, {rotation: -270, duration: 1, ease: \"bounce\"})\n            .to(el, {rotation: -360})\n            .to(el, {rotation: -180, opacity: 0})\n            .to(el, {rotation: 0, opacity: 1});\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <style>\n    .flip-move {\n      transition: transform 1s;\n    }\n    </style>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <div class=\"flex flex-col mt-2\">\n          <label class=\"flex text-gray-800 mb-2\" for=\"email\">Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            class=\"border-2 border-solid border-blue-200 rounded           px-2 py-1\"\n          />\n        </div>\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <div class=\"flex flex-col mt-2\">\n          <label class=\"flex text-gray-800 mb-2\" for=\"phone\">Phone         Number</label>\n          <input\n            id=\"phone\"\n            type=\"tel\"\n            name=\"phone\"\n            class=\"border-2 border-solid border-blue-200 rounded           px-2 py-1\"\n          />\n        </div>\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n    // imports & Vuex setup\n    export default new Vuex.Store({\n      state: {\n        formData: {\n          // rest of formData fields\n          email: '',\n          phone: '',\n        }\n      },\n      mutations: {\n        profileUpdate(state, payload) {\n          state.formData = {\n            // rest of formData fields\n            email: payload.email || '',\n            phone: payload.phone || '',\n          }\n        },\n        profileClear(state) {\n          state.formData = {\n            // rest of formData fields\n            email: '',\n            phone: '',\n          }\n        }\n      }\n    })\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <div class=\"flex flex-col mt-2\">\n          <label class=\"flex text-gray-800 mb-2\" for=\"email\">Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            v-model=\"email\"\n            class=\"border-2 border-solid border-blue-200 rounded           px-2 py-1\"\n          />\n        </div>\n      <!-- rest of template -->\n    </template>\n    <script>\n    export default {\n      // rest of component\n      data() {\n        return {\n          // other data properties\n          email: ''\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <div class=\"flex flex-col mt-2\">\n          <label class=\"flex text-gray-800 mb-2\" for=\"phone\">Phone         Number</label>\n          <input\n            id=\"phone\"\n            type=\"tel\"\n            name=\"phone\"\n            v-model=\"phone\"\n            class=\"border-2 border-solid border-blue-200 rounded           px-2 py-1\"\n          />\n        </div>\n      <!-- rest of template -->\n    </template>\n    <script>\n    export default {\n      // rest of component\n      data() {\n        return {\n          // other data properties\n          phone: ''\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <script>\n    export default {\n      // rest of component\n      methods: {\n        submitForm() {\n          this.$store.commit('profileUpdate', {\n            // rest of payload\n            email: this.email,\n            phone: this.phone\n          })\n        },\n        resetProfileForm() {\n          // other resets\n          this.email = ''\n          this.phone = ''\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <p class=\"mt-2\" v-if=\"formData.email\">\n          Email: {{ formData.email }}\n        </p>\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <p class=\"mt-2\" v-if=\"formData.phone\">\n          Phone Number: {{ formData.phone }}\n        </p>\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n      state: {\n        products: [\n          { name: \"Widgets\", price: 10 },\n          { name: \"Doodads\", price: 8 },\n          { name: \"Roundtuits\", price: 12 },\n          { name: \"Fluff\", price: 4 },\n          { name: \"Goobers\", price: 7 }\n        ],\n        cart: [\n        ]\n    ```", "```js\n        <h2>Products</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Price</th>\n              <th>&nbsp;</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(product, idx) in products\" :key=\"idx\">\n              <td>{{ product.name }}</td>\n              <td>{{ product.price  }}</td>\n              <td>\n                <button @click=\"addToCart(product)\">Add to Cart               </button> \n                <button @click=\"removeFromCart(product)\">Remove from               Cart</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n    ```", "```js\n    import { mapState } from 'vuex';\n    export default {\n      name: 'Products',\n      computed: mapState(['products']),\n    ```", "```js\n      methods: {\n        addToCart(product) {\n          this.$store.commit('addToCart', product);\n        },\n        removeFromCart(product) {\n          this.$store.commit('removeFromCart', product);\n        }\n      }\n    ```", "```js\n      mutations: {\n        addToCart(state, product) {\n          let index = state.cart.findIndex(p => p.name ===         product.name);\n          if(index !== -1) {\n            state.cart[index].quantity++;\n          } else {\n            state.cart.push({ name: product.name, quantity: 1});\n          }\n        },\n        removeFromCart(state, product) {\n          let index = state.cart.findIndex(p => p.name ===         product.name);\n          if(index !== -1) {\n            state.cart[index].quantity--;\n            if(state.cart[index].quantity === 0) state.cart.splice           (index, 1);\n          }\n        }\n    ```", "```js\n        <h2>Cart</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Quantity</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(product, idx) in cart\" :key=\"idx\">\n              <td>{{ product.name }}</td>\n              <td>{{ product.quantity  }}</td>\n            </tr>\n          </tbody>\n        </table>\n    ```", "```js\n    import { mapState } from 'vuex';\n    export default {\n      name: 'Cart',\n      computed: mapState(['cart'])\n    }\n    ```", "```js\n    <h2>Checkout</h2>\n    Your total is ${{ cartTotal }}.\n    ```", "```js\n    import { mapGetters } from 'vuex';\n    export default {\n      name: 'Cart',\n      computed: mapGetters(['cartTotal']),\n    ```", "```js\n        <button v-show=\"cartTotal > 0\" @click=\"checkout\">Checkout       </button>\n    ```", "```js\n      methods: {\n        checkout() {\n            alert('Checkout process!');\n        }\n      }\n    ```", "```js\n      getters: {\n        cartTotal(state) {\n          return state.cart.reduce((total, item) => {\n            let product = state.products.find(p => p.name ===           item.name);\n            return total + (product.price * item.quantity);\n          }, 0);\n        }\n      },\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <Products />\n        <Cart />\n        <Checkout />\n      </div>\n    </template>\n    <script>\n    import Products from './components/Products.vue'\n    import Cart from './components/Cart.vue'\n    import Checkout from './components/Checkout.vue'\n    export default {\n      name: 'app',\n      components: {\n        Products, Cart, Checkout\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <router-view/>\n      </div>\n    </template>\n    ```", "```js\n    <template>\n      <div>\n        <h2>Login</h2>\n        <form>\n          <div>\n            <label for=\"username\">Username: </label>\n            <input type=\"text\" id=\"username\" v-model=\"username\"           required>\n          </div>\n          <div>\n            <label for=\"password\">Password: </label>\n            <input type=\"password\" id=\"password\" v-model=\"password\"           required>\n          </div>\n          <div>\n            <input type=\"submit\" @click.prevent=\"login\" value=          \"Log In\">\n          </div>\n        </form>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    export default {\n      name: 'home',\n      data() {\n        return {\n          username:'',\n          password:''\n        }\n      },\n      methods: {\n        async login() {\n          let response = await this.$store.dispatch('login',\n          { username:this.username,\n            password:this.password\n          });\n          if(response) {\n            this.$router.replace('cats');\n          } else {\n            // handle a bad login here..\n          }\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div>\n        <h2>Cats</h2>\n        <ul>\n        <li v-for=\"(cat,idx) in cats\" :key=\"idx\">\n          {{cat.name}} is {{cat.gender}}\n        </li>\n        </ul>  \n      </div>\n    </template>\n    <script>\n    import { mapState } from 'vuex';\n    export default {\n      created() {\n        this.$store.dispatch('loadCats');\n      },\n      computed: {\n        ...mapState([\"cats\"])\n      }\n    }\n    </script>\n    ```", "```js\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    Vue.use(Vuex)\n    import axios from 'axios';\n    const LOGIN_URL = 'https://api.jsonbin.io/b/  5debc045bc5ffd04009563cd';\n    const CATS_URL = 'https://api.jsonbin.io/b/  5debc16dcb4ac6042075d594';\n    ```", "```js\n    export default new Vuex.Store({\n      state: {\n        token:'',\n        cats:[]\n      },\n      mutations: {\n        setCats(state, cats) {\n          state.cats = cats;\n        },\n        setToken(state, t) {\n          state.token = t;\n        }\n      },\n    ```", "```js\n      actions: {\n        loadCats(context) {\n          axios.get(CATS_URL,\n            {\n              headers: {\n                'Authorization': 'bearer '+context.state.token\n              }\n            })\n          .then(res => {\n            context.commit('setCats', res.data);\n          })\n          .catch(error => {\n            console.error(error);\n          });\n        },\n        async login(context, credentials) {\n          return axios.get(LOGIN_URL, {\n            params:{\n              username: credentials.username,\n              password: credentials.password\n            }\n          })\n          .then(res => {\n            context.commit('setToken', res.data.token);\n            return true;\n          })\n          .catch(error => {\n            console.error(error);\n          });  \n        }\n      }\n    })\n    ```", "```js\n    import Vue from 'vue'\n    import VueRouter from 'vue-router'\n    import Home from '../views/Home.vue'\n    import store from '../store';\n    Vue.use(VueRouter)\n    const routes = [\n      {\n        path: '/',\n        name: 'home',\n        component: Home\n      },\n      {\n        path: '/cats',\n        name: 'cats',\n        component: () => import(/* webpackChunkName: \"cats\" */ '../views/Cats.vue'),\n        beforeEnter: (to, from, next) => {\n          if(!store.state.token) {\n            next('/');\n          }\n          next();\n        }\n      }\n    ]\n    const router = new VueRouter({\n      mode: 'history',\n      base: process.env.BASE_URL,\n      routes\n    })\n    export default router\n    ```", "```js\n    export default {\n        name:'Lindy',\n        job:'tank',\n        favoriteColor:'blue',\n        favoriteAnimal:'cat'\n    }\n    ```", "```js\n    export default {\n        desiredPet(state) {\n            return state.favoriteColor + ' ' + state.favoriteAnimal;\n        }\n    }\n    ```", "```js\n    export default {\n      setName(state, name) {\n        state.name = name;\n      },\n      setJob(state, job) {\n        state.job = job;\n      },\n      setFavoriteColor(state, color) {\n        state.color = color;\n      },\n      setFavoriteAnimal(state, animal) {\n        state.animal = animal;\n      }\n    }\n    ```", "```js\n    import state from './state.js';\n    import getters from './getters.js';\n    import mutations from './mutations.js';\n    ```", "```js\n    export default new Vuex.Store({\n      state,\n      getters, \n      mutations, \n    ```", "```js\n        cat: {\n            state: {\n              name:'Cracker',\n              gender:'male',\n              job:'annoyer'  \n            },\n            getters: {\n              petDescription(state) {\n                return state.name + ' is a ' + state.gender + \n                ' ' + state.job +  ' cat.';\n              }\n            },\n            mutations: {\n              setCatName(state, name) {\n                state.name = name;\n              },\n              setCatGender(state, gender) {\n                state.gender = gender;\n            },\n              setCatJob(state, job) {\n                state.job = job;\n              }\n            }\n        }\n    ```", "```js\n    <template>\n      <form class=\"flex flex-row m-auto mb-10\">\n        <input\n          placholder=\"Search\"\n          class=\"bg-white focus:outline-none focus:shadow-outline         border\n          border-gray-300 rounded py-2 px-4 flex\n          appearance-none leading-normal\"\n          type=\"text\"\n        />\n        <button\n          type=\"submit\"\n          class=\"flex bg-blue-500 hover:bg-blue-700\n          text-white font-semibold font-sm hover:text-white         py-2 px-4 border\n          border-blue-500 hover:border-transparent rounded\"\n        >\n          Search\n        </button>\n      </form>\n    </template>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <div class=\"flex flex-col\">\n          <SearchForm />\n          <!-- rest of template -->\n        </div>\n      <!-- rest of template -->\n    </template>\n    ```", "```js\n    import {render} from '@testing-library/vue'\n    import SearchForm from '../src/components/SearchForm.vue'\n    test('SearchForm should match expected HTML', () => {\n      const {html} = render(SearchForm)\n      expect(html()).toMatchSnapshot()\n    })\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n        <input\n          v-model=\"searchTerm\"\n          placholder=\"Search\"\n          class=\"bg-white focus:outline-none focus:shadow-outline         border\n          border-gray-300 rounded py-2 px-4 flex\n          appearance-none leading-normal\"\n          type=\"text\"\n        />\n      <!-- rest of template -->\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          searchTerm: ''\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <form\n        @submit=\"onSubmit()\"\n        class=\"flex flex-row m-auto mb-10\"\n      >\n      <!-- rest of template -->\n      </form>\n    </template>\n    <script>\n    export default {\n      // other properties\n      methods: {\n        onSubmit() {\n          this.$router.push({\n            path: '/'\n            query: {\n              q: this.searchTerm\n            }\n          })\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <script>\n    export default {\n      data() {\n        return {\n          searchTerm: this.$route.query.q || ''\n        }\n      },\n      // other properties\n    }\n    </script>\n    ```", "```js\n    <template>\n      <!-- rest of template -->\n          <router-view\n            :posts=\"relevantPosts\"\n          />\n      <!-- rest of template -->\n    </template>\n    <script>\n    export default {\n      // other properties\n      computed: {\n        relevantPosts() {\n          const { q } = this.$route.query\n          if (!q) {\n            return this.posts\n          }\n          return this.posts.filter(\n            p => p.title.toLowerCase().includes(q.toLowerCase())\n          )\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    // imports and other tests\n    test('SearchForm filter by keyword on submission',   async () => {\n      const {getByPlaceholderText, getByText, queryByText} =     render(App, {\n        router,\n        store\n      })\n      expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeTruthy()\n      expect(queryByText('Vue.js for React developers')).    toBeTruthy()\n      await fireEvent.update(getByPlaceholderText('Search'), 'react')\n      await fireEvent.click(getByText('Search'))\n      expect(queryByText('Vue.js for React developers')).    toBeTruthy()\n      expect(queryByText('Migrating an AngularJS app to Vue.js')).    toBeFalsy()\n    })\n    ```", "```js\n    <template>\n      <div id=\"app\" class=\"p-10\">\n        <div class=\"flex flex-col\">\n          <!-- rest of template -->\n          <div class=\"flex flex-col mx-auto mb-4\">\n            <label\n              class=\"flex text-gray-700 text-sm font-bold mb-2\"\n              for=\"email\"\n            >\n              Enter your email:\n            </label>\n            <input\n              v-model=\"email\"\n              id=\"email\"\n              type=\"email\"\n              data-test-id=\"email-input\"\n              class=\"flex shadow appearance-none border             rounded py-2 px-3 text-gray-700 leading-tight             focus:outline-none focus:shadow-outline\"\n              required\n            />\n          </div>\n          <!-- rest of template -->\n    </template>\n    <script>\n    // imports\n    export default {\n      data() {\n        return {\n          email: '',\n          // other data properties\n        }\n      },\n      // other component properties\n    }\n    </script>\n    ```", "```js\n    describe('Email input', () => {\n      beforeEach(() => {\n        cy.server()\n        cy.route('GET', '**/comments', []).as('getComments')\n      })\n    })\n    ```", "```js\n    describe('Email input', () => {\n      // setup\n      it('email input should work', () => {\n        cy.visit('/')\n        cy.get('[data-test-id=\"email-input\"]')\n          .type('hugo@example.tld')\n          .should('have.value', 'hugo@example.tld')\n      })\n    })\n    ```", "```js\n    <template>\n      <div id=\"app\" class=\"p-10\">\n        <div class=\"flex flex-col\">\n          <!-- rest of template -->\n          <button\n            @click=\"showEditor = !showEditor\"\n            class=\"flex mx-auto bg-blue-500 hover:bg-blue-700           text-white font-bold py-2 px-4 rounded\"\n            data-test-id=\"new-comment-button\"\n            :disabled=\"!email\"\n            :class=\"{ 'opacity-50 cursor-not-allowed' : !email }\"\n          >\n            Add a New Comment\n          </button>\n          <!-- rest of template -->\n        </div>\n      </div>\n    </template>\n    ```", "```js\n    describe('Email input', () => {\n      // setup & other tests\n      it('add comment button should be disabled when no email',     () => {\n        cy.visit('/')\n        cy.get('[data-test-id=\"email-input\"]')\n          .should('have.value', '')\n        cy.get('[data-test-id=\"new-comment-button\"]')\n          .should('be.disabled')\n        cy.get('[data-test-id=\"email-input\"]')\n          .type('hugo@example.tld')\n\n        cy.get('[data-test-id=\"new-comment-button\"]')\n          .should('not.be.disabled')\n      })\n    })\n    ```", "```js\n    <script>\n    // imports\n    export default {\n      // other component properties\n      methods: {\n        submitNewComment() {\n          // rest of method\n          fetch('https://jsonplaceholder.typicode.com/comments', {\n            // other fetch options\n            body: JSON.stringify({\n              email: this.email,\n              body: this.newComment\n            })\n          }).then(res => res.json())\n          // rest of promise chain\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    describe('Email input', () => {\n      // setup & other tests\n      it('when adding comment, it should be created with the     input email', () => {\n        cy.route('POST', '**/comments', {\n          body: 'My new comment',\n          email: 'hugo@example.tld'\n        }).as('newComment')\n        cy.visit('/')\n        cy.get('[data-test-id=\"email-input\"]')\n          .type('hugo@example.tld')\n        cy.get('[data-test-id=\"new-comment-button\"]')\n          .should('not.be.disabled')\n          .click()\n\n        cy.get('[data-test-id=\"new-comment-editor\"]')\n          .type('My new comment')\n\n        cy.get('[data-test-id=\"new-comment-submit\"]')\n          .should('not.be.disabled')\n          .click()\n\n        cy.wait('@newComment')\n          .its('request.body')\n          .should('deep.equal', {\n            body: 'My new comment',\n            email: 'hugo@example.tld'\n          })\n      })\n    })\n    ```", "```js\n    build:\n      image: node:lts\n      stage: build\n      script:\n        - npm ci\n        - npm run build\n      cache:\n        key: $CI_COMMIT_REF_SLUG\n        paths:\n          - dist\n      artifacts:\n        expire_in: 1 week\n        paths:\n          - dist\n    ```", "```js\n    # other jobs\n    lint:\n      image: node:lts\n      stage: test\n      script:\n        - npm ci\n        - npm run lint\n    ```", "```js\n    # other jobs\n    deploy:\n      image: python:latest\n      stage: deploy\n      cache:\n        key: $CI_COMMIT_REF_SLUG\n        paths:\n          - dist\n      before_script:\n        - pip install awscli\n      script:\n        - aws s3 sync ./dist s3://vue-workshop-book-search       --acl=public-read\n    ```"]