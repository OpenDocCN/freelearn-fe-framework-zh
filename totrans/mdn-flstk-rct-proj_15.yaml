- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interfacing with GraphQL on the Frontend Using Apollo Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After successfully implementing a GraphQL backend using Apollo Server in the
    previous chapter, we are now going to interface with our new GraphQL API on the
    frontend using Apollo Client. Apollo Client is a library that makes it easier
    and more convenient to interact with GraphQL APIs. We’ll start by replacing the
    fetching of the post list with GraphQL queries, then resolve the author usernames
    without needing extra queries, showing the power of GraphQL. Next, we’ll add variables
    to the query to allow setting filters and sorting options. Finally, we’ll learn
    how to use mutations on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Apollo Client and making our first query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using variables in GraphQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using mutations on the frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start, please install all requirements from [*Chapter 1*](B19385_01.xhtml#_idTextAnchor016),
    *Preparing For Full-Stack Development*, and [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028),
    *Getting to Know Node.js* *and MongoDB*.
  prefs: []
  type: TYPE_NORMAL
- en: The versions listed in those chapters are the ones used in the book. While installing
    a newer version should not be an issue, please note that certain steps might work
    differently on a newer version. If there is an issue with the code and steps provided
    in this book, please try using the versions mentioned in *Chapters 1* and *2.*
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch12](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch12).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/Gl_5i9DR_xA](https://youtu.be/Gl_5i9DR_xA).'
  prefs: []
  type: TYPE_NORMAL
- en: If you cloned the full repository for the book, Husky may not find the `.git`
    directory when running `npm install`. In that case, just run `git` `init` in the
    root of the corresponding chapter folder.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Apollo Client and making our first query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can get started making GraphQL queries on the frontend, we first need
    to set up Apollo Client. `POST` request to the `/graphql` endpoint), Apollo Client
    makes interacting with GraphQL much easier and more convenient. It also includes
    additional features, such as caching, out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Apollo Client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the existing **ch11** folder to a new **ch12** folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the **ch12** folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the **@apollo/client** and **graphql** dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit **.env** and add a new environment variable, pointing to the endpoint
    for our GraphQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit **src/App.jsx** and import **ApolloClient**, **InMemoryCache**, and **ApolloProvider**
    from the **@****apollo/client** package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At the time of writing, there is an issue with ESM imports in Apollo Client,
    so we need to import directly from the `index.js` files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new instance of Apollo Client, pointing to the GraphQL endpoint and
    using **InMemoryCache**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adjust the **App** component to add **ApolloProvider**, providing the Apollo
    Client context to our whole app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are also going to create a GraphQL config file now so that the VS Code GraphQL
    extension can autocomplete and validate queries for us. Create a new **graphql.config.json**
    file in the root of the project, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `schema` defines the URL to the GraphQL endpoint, and `documents` defines
    where to find files that contain GraphQL queries. We are going to put the GraphQL
    queries in the `src/api/graphql/` folder later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make sure Docker and the database container are running, then start the backend,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep the backend running throughout this chapter, so that the GraphQL extension
    can access the GraphQL endpoint.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Restart the VS Code GraphQL extension. You can do so by accessing the VS Code
    command palette (*Ctrl* + *Shift* + *P* on Windows/Linux and *Cmd* + *Shift* +
    *P* on macOS) and typing in **GraphQL:** **Manual Restart**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Querying posts from the frontend using GraphQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that Apollo Client is set up and ready to be used, let’s define our first
    GraphQL query: a simple query to fetch all posts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to define the query and use it in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new **src/api/graphql/** folder, where we will put our GraphQL queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this folder, create a new **src/api/graphql/posts.js** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **src/api/graphql/posts.js** file, import the **gql** function from
    **@apollo/client**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a new **GET_POSTS** query, which retrieves all the relevant properties
    for a post (except the author, which will come later):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see that the GraphQL extension is offering us autocomplete options
    for the types we defined in our backend! If we enter the wrong field name, it
    will also warn us that this field does not exist on the type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit **src/pages/Blog.jsx** and import the **useQuery** hook from **@apollo/client**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We renamed the `useQuery` hook from Apollo Client to `useGraphQLQuery` to avoid
    confusion with the `useQuery` hook from TanStack React Query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import the previously defined **GET_POSTS** query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the imports to **useQuery** and **getPosts**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the existing **useQuery** hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with the following hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure you are in the root of the project, then run the frontend as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open the frontend on `http://localhost:5173/` and you will see that the
    post titles are properly shown. However, the links to posts do not work and there
    is an error in the console. There is a slight difference in the results from GraphQL
    and the REST API: the REST API returns the ID of posts as an `_id` property, while
    GraphQL returns them as an `id` property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s adjust our code to accommodate this change now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit **src/components/Post.jsx** and change the **_id** prop to **id**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, update the variable name where it is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure to update **propTypes** as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the prop is changed, edit **src/pages/ViewPost.jsx** and pass in the
    new prop, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After saving all files, the frontend should refresh and properly render the
    list of all posts with working links. Now all that’s left to do to restore the
    original functionality is to show the author usernames.
  prefs: []
  type: TYPE_NORMAL
- en: Resolving author usernames in a single query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of resolving each author username separately, we can now get them all
    at once in a single query, thanks to the power of GraphQL! Let’s make use of this
    power to refactor our code a bit to make it simpler and improve the performance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by editing the GraphQL query in **src/api/graphql/posts.js**, adding
    the **author.****username** field, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, edit the **src/components/User.jsx** component. *Replace* the whole component
    with the following, simpler component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is not necessary to fetch the user info here anymore, as we can directly
    display the username from the GraphQL response.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, edit **src/components/Post.jsx** and pass the whole **author** object
    to the **User** component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to adjust **propTypes** now to accept a full **author** object
    for the **Post** component, instead of a user ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit **src/pages/ViewPost.jsx** and pass the whole **author** object to the
    **Post** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: import { useQuery } from '@tanstack/react-query'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import { getUserInfo } from '../api/users.js'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, adjust the component to get the user ID from the token (the **sub** field
    of the JWT) and make a query for the user info:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we check whether we were able to resolve the query for user info (instead
    of just checking for **token**). If so, we pass the user info to the **User**
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also removed the token decoding here, like we already did earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we are using GraphQL to fetch the list of posts and resolve the author usernames
    in one single request! However, the filters and sorting do not work anymore, as
    we are not passing this information to the GraphQL query yet.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to introduce variables for filtering and sorting
    our GraphQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Using variables in GraphQL queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add support for filters and sorting, we need to add variables to our GraphQL
    query. We can then fill in these variables when executing the query.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add variables to the query:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit **src/api/graphql/posts.js** and adjust the query to accept an **$****options**
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, pass the **$options** variable to the **posts** resolver, for which we
    already implemented an **options** argument in the previous chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we just need to pass the options when executing the query. Edit **src/pages/Blog.jsx**
    and pass the variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the blog frontend and change the sort order to ascending to see the variable
    in action!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using fragments to reuse parts of queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that sorting is working, we just need to add filtering by author. To do
    this, we need to add a second query for `postsByAuthor`. As you can imagine, this
    query should return the same fields as the `posts` query. We can make use of a
    fragment to reuse the fields for both queries, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit **src/api/graphql/posts.js** and define a new fragment in GraphQL that
    contains all the fields that we need from a post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The fragment is defined by giving it a name (`PostFields`) and specifying which
    type it can be used on (`on Post`). Then, all fields from the specified type can
    be queried in the fragment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To use the fragment, we first have to include its definition in the **GET_POSTS**
    query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, instead of listing all fields manually, we can use the fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The syntax for using a fragment is like object destructuring in JavaScript,
    where all properties defined in an object are spread into another object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes the VS Code GraphQL extension needs to be restarted to be able to
    detect fragments properly. You can do so by accessing the VS Code command palette
    (*Ctrl* + *Shift* + *P* on Windows/Linux and *Cmd* + *Shift* + *P* on macOS) and
    typing in **GraphQL:** **Manual Restart**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define a second query, where we query posts by author, and get all
    necessary fields with the fragment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We defined the `$author` variable as required for this query (by using an exclamation
    mark after the type). We need to do this because the `postsByAuthor` field also
    requires the first argument (`username`) to be set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit **src/pages/Blog.jsx** and import the newly defined query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, adjust the hook to use the **GET_POSTS_BY_AUTHOR** query if **author**
    is defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the **author** variable to the query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we need to adjust how we select the results because the **postsByAuthor**
    field from the **GET_POSTS_BY_AUTHOR** query will return the results in **data.postsByAuthor**,
    while the **GET_POSTS** query uses the **posts** field, which returns results
    in **data.posts**. As there is no case where both fields are returned at once,
    we can simply do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to the frontend and try filtering by author. The filter works again now!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see, fragments are very useful for reusing the same fields for multiple
    queries! Now that our post list is fully refactored to use GraphQL, let’s move
    on to using mutations on the frontend, allowing us to migrate the signup, login,
    and create post functionalities to GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: Using mutations on the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in the previous chapter, mutations in GraphQL are used to change
    the state of the backend (similar to `POST` requests in REST). We are now going
    to implement mutations for signing up and logging in to our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new **src/api/graphql/users.js** file and import **gql**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a new **SIGNUP_USER** mutation, which takes a username and a password
    and calls the **signupUser** mutation field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit **src/pages/Signup.jsx** and *replace* the current **useMutation** hook
    from TanStack React Query with the one from Apollo Client. As we did before for
    **useQuery**, we are also going to rename this hook to **useGraphQLMutation**
    to avoid confusion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Additionally, *replace* the import of the **signup** function with an import
    of the **SIGNUP_USER** mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the existing mutation hook with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As can be seen, the Apollo Client mutation hook has a slightly different API
    than the TanStack React Query mutation hook. It returns an array with a function
    to call the mutation, and an object with the loading state, error state, and data.
    Similar to the `useGraphQLQuery` hook, it also accepts the mutation as the first
    argument and an object with variables as the second argument. Moreover, the `onSuccess`
    function is called `onCompleted` in Apollo Client.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the **handleSubmit** function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, change the submit button as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the signup functionality is successfully migrated to GraphQL. Next, let’s
    migrate the login functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating login to GraphQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refactoring the login functionality to GraphQL is very similar to the signup
    functionality, so let’s quickly go through the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit **src/api/graphql/users.js** and define a mutation for logging in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit **src/pages/Login.jsx** and *replace* the imports to TanStack React Query
    and the **login** function with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the hook as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the **handleSubmit** function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, update the submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that signup and login are using GraphQL mutations, let’s move on to migrating
    the create post functionality to GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating create post to GraphQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The create post functionality is a bit trickier to implement, as it requires
    us to be logged in (which means that we need to send the JWT header), and invalidate
    the post list queries, so that the list gets updated after creating a new post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s get started on implementing this with Apollo Client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s define the mutation. Edit **src/api/graphql/posts.js** and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For this mutation, we are going to use the response to get the `id` and `title`
    of the created post. We are going to make use of this data to show a link to the
    post upon successful creation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, edit **src/components/CreatePost.jsx** and *replace* the TanStack React
    Query import with an import of the mutation hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, import the **Link** component and **slug** function to show a link to
    the created post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the import of the **createPost** function with imports of the **CREATE_POST**
    mutation and the **GET_POSTS** and **GET_POSTS_BY_AUTHOR** queries. We are going
    to use these query definitions to make Apollo Client re-fetch them for us later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the existing query client and mutation hooks with the following GraphQL
    mutation, where we pass the **title** and **contents** variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we provide the JWT header as **context** to the mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we provide a **refetchQueries** option to the mutation, telling Apollo
    Client to re-fetch certain queries after the mutation was called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As re-fetching after a mutation is a common operation, Apollo Client provides
    a simple way to do this in the mutation hook. Simply pass all queries that should
    be re-fetched there, and Apollo Client will take care of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust the **handleSubmit** function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adjust the submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we are going to change the success message, showing a link to the created
    post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Because of the way types and resolvers work in GraphQL, it easily allows us
    to access fields from the result of a mutation, the same way as if we were fetching
    a single post. For example, we could even tell GraphQL to fetch the username of
    the author of the created post here!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try creating a new post, and you will see that the success message now shows
    a link to the created post, and the post list automatically re-fetches for us!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a new post being successfully created, showing
    the link to the new post in the success message, and the new post in the post
    list (automatically re-fetched by Apollo Client):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.1: Creating a post using GraphQL mutations, with a re-fetching
    post list](img/B19385_12_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Creating a post using GraphQL mutations, with a re-fetching post
    list'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully implemented creating posts with GraphQL, our blog
    app is fully connected to our GraphQL server.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more advanced concepts in GraphQL that we have not covered yet
    in this book, such as advanced re-fetching, subscriptions (getting real-time updates
    from the GraphQL server), error handling, suspense, pagination, and caching. The
    GraphQL chapters in this book only serve as an introduction to GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to learn more about GraphQL and Apollo, I recommend checking out
    the extensive Apollo docs ([https://www.apollographql.com/docs/](https://www.apollographql.com/docs/)),
    which contain detailed information and hands-on examples about using Apollo Server
    and Apollo Client.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we connected our previously created GraphQL backend to the
    frontend using Apollo Client. We started by setting up Apollo Client and making
    a GraphQL query to fetch all posts. Then, we improved the performance of the post
    list by fetching author usernames in a single request, leveraging the power of
    GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we introduced variables in our query and re-implemented sorting and filtering
    by author. We also introduced fragments in our queries to reuse the same fields.
    Lastly, we implemented GraphQL mutations in the frontend to sign up, log in, and
    create posts. We also learned about re-fetching queries in Apollo Client along
    the way and briefly mentioned advanced concepts of GraphQL and Apollo.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, [*Chapter 13*](B19385_13.xhtml#_idTextAnchor245), *Building
    a Backend Based on Event-Driven Architecture Using Express and Socket.IO*, we
    are going to depart from traditional full-stack architectures and build a new
    app using a special kind of full-stack architecture: an event-based application.'
  prefs: []
  type: TYPE_NORMAL
