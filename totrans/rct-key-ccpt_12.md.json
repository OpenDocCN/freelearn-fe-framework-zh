["```js\nfunction sendAnalyticsEvent(event) {\n  useEffect(() => {\n    fetch('https://my-analytics-backend.com/events', {\n      method: 'POST',\n      body: JSON.stringify(event)\n    })\n  }, []);\n} \n```", "```js\nconst initialHttpState = {\n  data: null,\n  isLoading: false,\n  error: null,\n};\nfunction httpReducer(state, action) {\n  if (action.type === 'FETCH_START') {\n    return {\n      ...state, // copying the existing state\n      isLoading: state.data ? false : true,\n      error: null,\n    };\n  }\n  if (action.type === 'FETCH_ERROR') {\n    return {\n      data: null,\n      isLoading: false,\n      error: action.payload,\n    };\n  }\n  if (action.type === 'FETCH_SUCCESS') {\n    return {\n      data: action.payload,\n      isLoading: false,\n      error: null,\n    };\n  }\n  return initialHttpState; // default value for unknown actions\n}\nfunction App() {\n  const [httpState, dispatch] = useReducer(\n    httpReducer, \n    initialHttpState\n  );\n  const fetchPosts = useCallback(async function fetchPosts() {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: posts });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  }, []);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n  return (\n    <>\n      <header>\n        <h1>Complex State Blog</h1>\n        <button onClick={fetchPosts}>Load Posts</button>\n      </header>\n      {httpState.isLoading && <p>Loading...</p>}\n      {httpState.error && <p>{httpState.error}</p>}\n      {httpState.data && <BlogPosts posts={httpState.data} />}\n    </>\n  );\n}; \n```", "```js\nimport { useState } from 'react';\nfunction useCounter() {\n  const [counter, setCounter] = useState(0);\n  function increment() {\n    setCounter(oldCounter => oldCounter + 1);\n  };\n  function decrement() {\n    setCounter(oldCounter => oldCounter - 1);\n  };\n  return { counter, increment, decrement };\n};\nexport default useCounter; \n```", "```js\nimport useCounter from './hooks/use-counter.js';\nfunction Demo1() {\n  const { counter, increment, decrement } = useCounter();\n  return (\n    <>\n      <p>{counter}</p>\n      <button onClick={increment}>Inc</button>\n      <button onClick={decrement}>Dec</button>\n    </>\n  );\n};\nfunction Demo2() {\n  const { counter, increment, decrement } = useCounter();\n  return (\n    <>\n      <p>{counter}</p>\n      <button onClick={increment}>Inc</button>\n      <button onClick={decrement}>Dec</button>\n    </>\n  );\n};\nfunction App() {\n  return (\n    <main>\n      <Demo1 />\n      <Demo2 />\n    </main>\n  );\n};\nexport default App; \n```", "```js\nimport { useState } from 'react';\nfunction useCounter(initialValue, incVal, decVal) {\n  const [counter, setCounter] = useState(initialValue);\n  function increment() {\n    setCounter(oldCounter => oldCounter + incVal);\n  };\n  function decrement() {\n    setCounter(oldCounter => oldCounter - decVal);\n  };\n  return { counter, increment, decrement };\n};\nexport default useCounter; \n```", "```js\nfunction Demo1() {\n  const { counter, increment, decrement } = useCounter(1, 2, 1);\n  return (\n    <>\n      <p>{counter}</p>\n      <button onClick={increment}>Inc</button>\n      <button onClick={decrement}>Dec</button>\n    </>\n  );\n};\nfunction Demo2() {\n  const { counter, increment, decrement } = useCounter(0, 1, 2);\n  return (\n    <>\n      <p>{counter}</p>\n      <button onClick={increment}>Inc</button>\n      <button onClick={decrement}>Dec</button>\n    </>\n  );\n}; \n```", "```js\nimport { useState } from 'react';\nfunction useCounter(initialValue, incVal, decVal) {\n  const [counter, setCounter] = useState(initialValue);\n  function increment() {\n    setCounter((oldCounter) => oldCounter + incVal);\n  }\n  function decrement() {\n    setCounter((oldCounter) => oldCounter - decVal);\n  }\n  return [counter, increment, decrement];\n}\nexport default useCounter; \n```", "```js\nfunction Demo1() {\n  const [counter, increment, decrement] = useCounter(1, 2, 1);\n  return (\n    <>\n      <p>{counter}</p>\n      <button onClick={increment}>Inc</button>\n      <button onClick={decrement}>Dec</button>\n    </>\n  );\n}\nfunction Demo2() {\n  const [counter, increment, decrement] = useCounter(0, 1, 2);\n  return (\n    <>\n      <p>{counter}</p>\n      <button onClick={increment}>Inc</button>\n      <button onClick={decrement}>Dec</button>\n    </>\n  );\n} \n```", "```js\nconst initialHttpState = {\n  data: null,\n  isLoading: false,\n  error: null,\n};\nfunction httpReducer(state, action) {\n  if (action.type === 'FETCH_START') {\n    return {\n      ...state, // copying the existing state\n      isLoading: state.data ? false : true,\n      error: null,\n    };\n  }\n  if (action.type === 'FETCH_ERROR') {\n    return {\n      data: null,\n      isLoading: false,\n      error: action.payload,\n    };\n  }\n  if (action.type === 'FETCH_SUCCESS') {\n    return {\n      data: action.payload,\n      isLoading: false,\n      error: null,\n    };\n  }\n  return initialHttpState; // default value for unknown actions\n}\nfunction App() {\n  const [httpState, dispatch] = useReducer(\n    httpReducer, \n    initialHttpState\n  );\n  const fetchPosts = useCallback(async function fetchPosts() {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: posts });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  }, []);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n  return (\n    <>\n      <header>\n        <h1>Complex State Blog</h1>\n        <button onClick={fetchPosts}>Load Posts</button>\n      </header>\n      {httpState.isLoading && <p>Loading...</p>}\n      {httpState.error && <p>{httpState.error}</p>}\n      {httpState.data && <BlogPosts posts={httpState.data} />}\n    </>\n  );\n}; \n```", "```js\nimport { useCallback, useEffect, useReducer } from 'react';\nconst initialHttpState = {\n  data: null,\n  isLoading: false,\n  error: null,\n};\nfunction httpReducer(state, action) {\n  // same reducer code as before\n}\nfunction useFetch() {\n  const [httpState, dispatch] = useReducer(\n    httpReducer, \n    initialHttpState\n  );\n  const fetchPosts = useCallback(async function fetchPosts() {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: posts });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  }, []);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n}\nexport default useFetch; \n```", "```js\n// httpReducer function and initial state did not change, \n// hence omitted here\nfunction useFetch() {\n  const [httpState, dispatch] = useReducer(\n    httpReducer, \n    initialHttpState\n  );\n  const fetchPosts = useCallback(async function fetchPosts() {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: posts });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  }, []);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n  **return** **httpState;**\n} \n```", "```js\n// httpReducer function and initial state did not change, hence omitted here\nfunction useFetch(**url**) {\n  const [httpState, dispatch] = useReducer(\n    httpReducer, \n    initialHttpState\n  );\n  const fetchPosts = useCallback(async function fetchPosts() {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const response = await fetch(**url**);\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: posts });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  }, [**url**]);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n  return httpState;\n} \n```", "```js\nimport BlogPosts from './components/BlogPosts.jsx';\nimport useFetch from './hooks/use-fetch.js';\nfunction App() {\n  const { data, isLoading, error } = useFetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  return (\n    <>\n      <header>\n        <h1>Complex State Blog</h1>\n      </header>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      {data && <BlogPosts posts={data} />}\n    </>\n  );\n}\nexport default App; \n```", "```js\n// httpReducer function and initial state did not change, hence omitted here\nfunction useFetch(url) {\n  const [httpState, dispatch] = useReducer(\n    httpReducer, \n    initialHttpState\n   );\n  const fetchPosts = useCallback(async function fetchPosts() {\n    dispatch({ type: 'FETCH_START' });\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Failed to fetch posts.');\n      }\n      const posts = await response.json();\n      dispatch({ type: 'FETCH_SUCCESS', payload: posts });\n    } catch (error) {\n      dispatch({ type: 'FETCH_ERROR', payload: error.message });\n    }\n  }, [url]);\n  useEffect(\n    function () {\n      fetchPosts();\n    },\n    [fetchPosts]\n  );\n  **return** **[ httpState, fetchPosts ];**\n} \n```", "```js\nimport BlogPosts from './components/BlogPosts.jsx';\nimport useFetch from './hooks/use-fetch.js';\nfunction App() {\n  const [{ data, isLoading, error }, **fetchPosts**] = useFetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  return (\n    <>\n      <header>\n        <h1>Complex State Blog</h1>\n        **<****button****onClick****=****{fetchPosts}****>****Load Posts****</****button****>**\n      </header>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      {data && <BlogPosts posts={data} />}\n    </>\n  );\n}\nexport default App; \n```", "```js\nimport { use } from 'react';\nimport BookmarkContext from '../../store/bookmark-context.jsx';\nfunction BookmarkSummary() {\n  const bookmarkCtx = use(BookmarkContext);\n  // other component code, including returned JSX code\n} \n```", "```js\nimport { use } from 'react';\nimport BookmarkContext from './bookmark-context.jsx';\nfunction useBookmarkContext() {\n  const bookmarkCtx = use(BookmarkContext);\n  return bookmarkCtx;\n}\nexport default useBookmarkContext; \n```", "```js\nfunction useBookmarkContext() {\n  const bookmarkCtx = use(BookmarkContext);\n  if(!bookmarkCtx) {\n    throw new Error('BookmarkContext must be provided!')\n  }\n  return bookmarkCtx;\n} \n```", "```js\nimport useBookmarkContext from '../../store/use-bookmark-context.js';\nfunction BookmarkSummary() {\n  const bookmarkCtx = useBookmarkContext();\n  // other component code, including returned JSX code\n} \n```", "```js\nfunction App() {\n  const pressedKey = useKeyEvent(['s', 'c', 'p']); // this is your Hook!\n  let output = '';\n  if (pressedKey === 's') {\n    output = '';\n  } else if (pressedKey === 'c') {\n    output = '';\n  } else if (pressedKey === 'p') {\n    output = '';\n  }\n  return (\n    <main>\n      <h1>Press a key!</h1>\n      <p>\n        Supported keys: <kbd>s</kbd>, <kbd>c</kbd>, <kbd>p</kbd>\n      </p>\n      <p id=\"output\">{output}</p>\n    </main>\n  );\n} \n```"]