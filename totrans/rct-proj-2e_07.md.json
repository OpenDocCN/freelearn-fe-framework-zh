["```js\nnpm install && npm run dev\n```", "```js\nchapter-7-initial \n  |- /node_modules \n  |- /public \n  |- /pages \n     |- /api \n        |- /hello.js \n     |- /products \n        |- /index.js \n     |- /cart \n        |- /index.js \n     |- /login \n        |- /index.js \n     |- _app.js \n     |- index.js \n  |- /utils \n     |- hooks.js \n     |- authentication.js\n  package.json \n```", "```js\n{\"name\":\"John Doe\"}\n```", "```js\nnpm install graphql @graphql-tools/schema @graphql-tools/mock express-graphql\n```", "```js\nimport { graphqlHTTP } from 'express-graphql'; \nimport { makeExecutableSchema } from '@graphql-tools/schema'; \nimport { addMocksToSchema } from '@graphql-tools/mock';\nconst typeDefs = /* GraphQL */ ` \n  type Product { \n    id: Int! \n    title: String! \n    thumbnail: String! \n    price: Float \n  } \n  type Query {\n    product: Product\n    products(limit: Int): [Product]\n  }\n`;\n```", "```js\n// ...\nconst executableSchema = addMocksToSchema({ \n  schema: makeExecutableSchema({ typeDefs, }), \n}); \nfunction runMiddleware(req, res, fn) { \n  return new Promise((resolve, reject) => { \n    fn(req, res, (result) => { \n      if (result instanceof Error) { \n        return reject(result); \n      } \n      return resolve(result); \n    }); \n  }); \n} \nasync function handler(req, res) { \n  const result = await runMiddleware( \n    req, \n    res, \n    graphqlHTTP({ \n      schema: executableSchema, \n      graphiql: true, \n    }), \n  ); \n  res.json(result); \n} \nexport default handler;\n```", "```js\nquery {\n  products {\n    id\n    title\n    price\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"products\": [\n      {\n        \"id\": 85,\n        \"title\": \"Hello World\",\n        \"price\": 35.610056991945214\n      },\n      {\n        \"id\": 24,\n        \"title\": \"Hello World\",\n        \"price\": 89.47561381959673\n      }\n    ]\n  }\n}\n```", "```js\n// ...\n  const typeDefs = `\n    type Product {\n      id: Int!\n      title: String!\n      thumbnail: String!\n      price: Float\n+     category: Category\n    }\n+   type Category {\n+     id: Int!\n+     title: String!\n+   }\n    type Query {\n      product: Product\n      products(limit: Int): [Product]\n    }\n  `;\n  // ...\n```", "```js\n// ...\n  const typeDefs = `\n    // ...\n    type Category {\n      id: Int!\n      title: String!\n    }\n    type Query {\n      product: Product\n      products(limit: Int): [Product]\n+     categories: [Category]\n    }\n  `;\n  // ...\n```", "```js\n  // ...\n+ const mocks = {\n+     Product: () => ({\n+       thumbnail: () => 'https://picsum.photos/400/400'\n+     }),\n+   };\n   const executableSchema = addMocksToSchema({ \nschema: makeExecutableSchema({ typeDefs, }), \n+   mocks, \n  });\n  // ...\n```", "```js\n  // ...\n  const mocks = {\n+   Int: () => Math.floor(Math.random() * 99) + 1,\n+   Float: () => (Math.random() * 99.0 + 1.0).toFixed(2),\n    Product: () => ({\n      thumbnail: () => 'https://picsum.photos/400/400'\n    }),\n  };\n\n    // ...\n```", "```js\nquery {\n  products {\n    id\n    title\n    price\n    thumbnail\n    category {\n      id\n      title\n    }\n  }\n}\n```", "```js\n    npm install @apollo/client\n    ```", "```js\n      import { createGlobalStyle } from \n        'styled-components';\n    + import {\n    +   ApolloClient,\n    +   InMemoryCache,\n    +   ApolloProvider,\n    + } from \"@apollo/client\";\n      import Header from '../components/Header';\n      const GlobalStyle = createGlobalStyle` \n        // ...\n    ```", "```js\n      // ...\n    + const client = new ApolloClient({\n    +   uri: 'http://localhost:3000/api/graphql/',\n    +   cache: new InMemoryCache()\n    + });\n      function MyApp({ Component, pageProps }) {\n        return (\n          // ...\n    ```", "```js\n      // ...\n      function MyApp({ Component, pageProps }) {\n        return (\n    -     <>\n    +     <ApolloProvider client={client}>\n            <GlobalStyle />\n            <Header />\n            <Component {...pageProps} />\n    +     </ApolloProvider>\n    -     </>\n        );\n      }\n      export default MyApp;\n    ```", "```js\n      import styled from 'styled-components';\n    + import { useQuery, gql } from '@apollo/client';\n      import SubHeader from '../../components/SubHeader';\n      import ProductItem from \n        '../../components/ProductItem';\n      // ...\n    + const GET_PRODUCTS = gql`\n    +   query getProducts {\n    +     products {\n    +       id\n    +       title\n    +       price\n    +       thumbnail\n    +     }\n    +   }\n    + `;\n      function Products() {\n        // ...\n    ```", "```js\n      // ...\n      function Products() {\n    +   const { loading, data } = useQuery(GET_PRODUCTS);\n        return (\n          <>\n            <SubHeader title='Available products' goToCart />\n    +       {loading ? (\n    +         <span>Loading...</span>\n    +       ) : (\n              <ProductItemsWrapper>\n    +           {data && data.products && \n                 data.products.map((product) => (\n    +               <ProductItem key={product.id} \n                      data={product} />\n    +           ))}\n              </ProductItemsWrapper>\n    +       )}\n                </>\n        );\n      };\n      export default Products;\n    ```", "```js\n      import { graphqlHTTP } from 'express-graphql';\n      import { makeExecutableSchema } \n        from '@graphql-tools/schema'; \n      import { addMocksToSchema } from '@graphql-tools/mock';\n    + let cart = {\n    +   count: 0,\n    +   products: [],\n    +   complete: false,\n    + };\n      const typeDefs = `\n        // ... \n    ```", "```js\n      // ...\n      const typeDefs = `\n        // ...\n    +   type Cart {\n    +     count: Int\n    +     products: [Product]\n    +     complete: Boolean\n    +   }\n        type Query {\n          product: Product\n          products(limit: Int): [Product]\n          categories: [Category]\n    +     cart: Cart\n        }\n      `;\n      const mocks = {\n        // ...\n    ```", "```js\n      import styled from 'styled-components';\n    + import { useQuery, gql } from '@apollo/client';\n      import { usePrice } from '../../utils/hooks';\n      import SubHeader from '../../components/SubHeader';\n      import ProductItem from \n        '../../components/ProductItem';\n      import Button from '../../components/Button';\n      // ...\n    + const GET_CART = gql`\n    +   query getCart {\n    +     cart {\n    +       products {\n    +         id\n    +         title\n    +         price\n    +         thumbnail\n    +       }\n    +     }\n    +   }\n    + `;\n      function Cart() {\n        // ...\n    ```", "```js\n      // ...\n      function Cart() {\n    +   const { loading, data } = useQuery(GET_CART);\n        return (\n          <>\n            <SubHeader title='Cart' />\n    +       {loading ? (\n    +         <span>Loading...</span>\n    +       ) : (\n              <CartWrapper>\n                <CartItemsWrapper>\n    +             {data && data.cart.products &&\n                   data.cart.products.map((product) => (\n    +                <ProductItem key={product.id} \n                       data={product} />\n    +              ))}\n                </CartItemsWrapper>\n    +           {data && data.cart.products.length > \n                  0 && (\n    +             <Button backgroundColor='royalBlue'>\n                    Checkout\n                  </Button>\n    +           )}\n              </CartWrapper>\n    +       )}\n          </>\n        );\n      };\n    export default Cart;\n    ```", "```js\n    import { useQuery, gql } from '@apollo/client';\n    import Button from './Button';\n    export const GET_CART_TOTAL = gql`\n      query getCart {\n        cart {\n          count\n        }\n      }\n    `;\n    function CartButton({ ...props }) {\n      const { loading, data } = useQuery(GET_CART_TOTAL);\n      return (\n        <Button {...props}>\n          {loading ? 'Cart' : `Cart (${data.cart.count})`}\n        </Button>\n      );\n    }\n    export default CartButton;\n    ```", "```js\n      import styled from 'styled-components';\n      import { useRouter } from 'next/router';\n    - import Button from './Button';\n    + import CartButton from './CartButton';\n      // ...\n      function SubHeader({ title, goToCart = false }) {\n        const router = useRouter();\n        return (\n          <SubHeaderWrapper>\n            // ...\n            {goToCart && (\n    -         <Button onClick={() => \n                router.push('/cart')}>\n    -           Cart (0)\n    -         </Button>\n    +           <CartButton onClick={() => \n                  router.push('/cart')} />\n            )}\n          </SubHeaderWrapper>\n        );\n      }\n      export default SubHeader;\n    ```", "```js\n       // ...\n      const typeDefs =`\n      // ...\n      const typeDefs = gql`\n       // ...\n        type Cart {\n          total: Float\n          count: Int\n          products: [Product]\n          complete: Boolean\n        }\n        type Query {\n          product: Product\n          products(limit: Int): [Product]\n          categories: [Category]\n          cart: Cart\n        }\n    +   type Mutation {\n    +     addToCart(productId: Int!): Cart\n    +   }\n      `;\n      const mocks = {\n        // ...\n    ```", "```js\n      // ...\n    + const resolvers = {\n    +   Mutation: {\n    +     addToCart: (_, { productId }) => {\n    +       cart = {\n    +         ...cart,\n    +         count: cart.count + 1,\n    +         products: [ \n    +           ...cart.products, \n    +           { \n    +             productId, \n    +             title: 'My product', \n    +             thumbnail: 'https://picsum.photos/400/400', \n    +             price: (Math.random() * 99.0 + 1.0).\n    toFixed(2), \n    +             category: null, \n    +           }, \n    +         ],\n    +       };\n    +       return cart;\n    +     },\n    +   },\n    + };\n      const executableSchema = addMocksToSchema({\n        // ...\n    ```", "```js\n      // ...\n        const executableSchema = addMocksToSchema({ \n        schema: makeExecutableSchema({ typeDefs, }),\n        mocks, \n    +   resolvers,\n      });\n      // ...\n      export default handler;\n    ```", "```js\n  // ...\n  const resolvers = {\n+   Query: {\n+     cart: () => cart,\n+   },\n    Mutation: {\n      // ...\n    },\n  };\n    const executableSchema = addMocksToSchema({\n    // ...\n```", "```js\n    import { useMutation, gql } from '@apollo/client';\n    import Button from './Button';\n    const ADD_TO_CART = gql`\n      mutation addToCart($productId: Int!) {\n        addToCart(productId: $productId) {\n          count\n          products {\n            id\n            title\n            price\n          }\n        }\n      }\n    `;\n    function AddToCartButton({ productId }) {\n      const [addToCart, { data }] = \n        useMutation(ADD_TO_CART);\n      return (\n        <Button\n          onClick={() =>\n            !data && addToCart({ variables: { productId } })\n          }\n        >\n          {data ? 'Added to cart!' : 'Add to cart'}\n        </Button>\n      );\n    }\n    export default AddToCartButton;\n    ```", "```js\n      import styled from 'styled-components';\n      import { usePrice } from '../utils/hooks';\n    + import AddToCartButton from './AddToCartButton';\n      // ...\n      function ProductItem({ data }) {\n        const price = usePrice(data.price);\n        return (\n          <ProductItemWrapper>\n            {data.thumbnail && <Thumbnail \n              src={data.thumbnail} width={200} />}\n            <Title>{data.title}</Title>\n            <Price>{price}</Price>\n    +       <AddToCartButton productId={data.id} />\n          </ProductItemWrapper>\n        );\n      }\n      export default ProductItem;\n    ```", "```js\n      import { useMutation, gql } from '@apollo/client';\n      import Button from './Button';\n    + import { GET_CART_TOTAL } from './CartButton';\n      // ...\n      function AddToCartButton({ productId }) {\n        const [addToCart, { data }] = \n          useMutation(ADD_TO_CART);\n        return (\n          <Button\n            onClick={() =>\n              !data && addToCart({\n                variables: { productId },\n    +           refetchQueries: \n                  [{ query: GET_CART_TOTAL }],\n              })\n            }\n          >\n            {data ? 'Added to cart!' : 'Add to cart'}\n          </Button>\n        );\n      }\n    export default AddToCartButton;\n    ```", "```js\n      // ...\n    - function ProductItem({ data }) {\n    + function ProductItem({ data, addToCart = false }) {\n        const price = usePrice(data.price);\n        return (\n          <ProductItemWrapper>\n            {data.thumbnail && <Thumbnail \n              src={data.thumbnail} width={200} />}\n            <Title>{data.title}</Title>\n            <Price>{price}</Price>\n    -       <AddToCartButton productId={data.id} />\n    +       {addToCart && <AddToCartButton \n              productId={data.id} />}\n          </ProductItemWrapper>\n        );\n      }\n      export default ProductItem;\n    ```", "```js\n        // ...\n        return (\n          <>\n            <SubHeader title='Available products' goToCart \n            />\n            {loading ? (\n              <span>Loading...</span>\n            ) : (\n              <ProductItemsWrapper>\n                {data && data.products && \n                  data.products.map((product) => (\n                  <ProductItem \n                    key={product.id} \n                    data={product} \n    +               addToCart\n                  />\n                ))}\n              </ProductItemsWrapper>\n            )}\n          </>\n        );\n      };\n      export default Products;\n    ```", "```js\n      // ...\n      const typeDefs = `\n        // ... \n    +   type User {\n    +     username: String!\n    +     token: String!\n    +   }\n        type Query {\n          product: Product\n          products(limit: Int): [Product]\n          categories: [Category]\n          cart: Cart\n        }\n        type Mutation {\n          addToCart(productId: Int!): Cart \n    +     loginUser(username: String!, password: String!):\n            User\n        }\n      `;\n      // ...\n    ```", "```js\n      import { graphqlHTTP } from 'express-graphql'; \n      import { makeExecutableSchema } \n        from '@graphql-tools/schema'; \n      import { addMocksToSchema } from '@graphql-tools/mock';\n    + import { loginUser, isTokenValid } \n        from '../../../utils/authentication';\n\n      // ...\n      const resolvers = {\n        Query: {\n          cart: () => cart,\n        },\n        Mutation: {\n    +     loginUser: async (_, { username, password }) => \n          {\n    +       const user = loginUser(username, password);\n    +       if (user) {\n    +         return user;\n    +       }\n    +     },\n          // ...\n    ```", "```js\n      import { useState } from 'react';\n    + import { useMutation, gql } from '@apollo/client';\n      // ...\n    + const LOGIN_USER = gql`\n    +   mutation loginUser($username: String!, $password:\n          String!) {\n    +     loginUser(username: $username, \n            password: $password) {\n    +       username\n    +       token\n    +     }\n    +   }\n    + `;\n      function Login() {\n        const [username, setUsername] = useState('');\n        const [password, setPassword] = useState('');\n    +   const [loginUser, { data }] = \n          useMutation(LOGIN_USER);\n        return (\n          // ...\n    ```", "```js\n      // ...\n      function Login() {\n        // ...\n        return (\n          <>\n            <SubHeader title='Login' />\n            <FormWrapper>\n              <form\n    +           onSubmit={(e) => {\n    +             e.preventDefault();\n    +             loginUser({ variables: { username, \n                    password } });\n    +           }}\n              >\n                // ...\n    ```", "```js\n    - import { useState } from 'react';\n    + import { useState, useEffect } from 'react';\n      import { useMutation, gql } from '@apollo/client';\n    + import { useRouter } from 'next/router';\n      // ...\n      function Login() {\n        const [username, setUsername] = useState('');\n        const [password, setPassword] = useState('');\n        const [loginUser, { data }] = \n          useMutation(LOGIN_USER);\n    +   const router = useRouter();\n    +   useEffect(() => {\n    +     if (data && data.loginUser && \n            data.loginUser.token) {\n    +       sessionStorage.setItem('token',\n              data.loginUser.token);\n    +       router.push('/');\n    +     }\n    +   }, [data]);\n      return (\n        // ...\n    ```", "```js\n      import { createGlobalStyle } from \n        'styled-components';\n      import {\n        ApolloClient,\n        InMemoryCache,\n        ApolloProvider,\n    +   createHttpLink,\n      } from '@apollo/client';\n    + import { setContext } from \n        '@apollo/client/link/context';\n      import Header from '../components/Header';\n      // ...\n    + const httpLink = createHttpLink({\n    +   uri: 'http://localhost:3000/api/graphql/',\n    + });\n    + const authLink = setContext((_, { headers }) => {\n    +   const token = sessionStorage.getItem('token');\n    +   return {\n    +     headers: {\n    +       ...headers,\n    +       authorization: token ? `Bearer ${token}` : '',\n    +     },\n    +   };\n    + });\n      const client = new ApolloClient({\n    -   uri: 'http://localhost:3000/api/graphql/',\n    +   link: authLink.concat(httpLink),\n        cache: new InMemoryCache(),\n      });\n      function MyApp({ Component, pageProps }) {\n        // ...\n    ```", "```js\n      // ...\n        const executableSchema = addMocksToSchema({ \n        schema: makeExecutableSchema({ typeDefs, }), \n        mocks, \n        resolvers,\n    +   context: ({ req }) => {\n    +     const token = req.headers.authorization || '';\n\n    +     return { token }\n    +   },\n      });\n      // ...\n    ```", "```js\n        // ...\n        type Mutation {\n          addToCart(productId: Int!): Cart\n          loginUser(username: String!, password: String!):\n            User\n    +     completeCart: Cart\n        }\n      `;\n      const mocks = {\n        // ...\n    ```", "```js\n      // ...\n      const resolvers = {\n        Query: {\n          cart: () => cart,\n        },\n        Mutation: {\n          // ...\n    +     completeCart: (_, {}, { token }) => {\n    +       if (token && isTokenValid(token)) {\n    +         cart = {\n    +           count: 0,\n    +           products: [],\n    +           complete: true,\n    +         };\n\n    +         return cart;\n    +       }\n    +     },\n        },\n      };\n      // ...\n    ```", "```js\n      import styled from 'styled-components';\n      import { \n        useQuery, \n    +   useMutation, \n        gql \n      } from '@apollo/client';\n    + import { useRouter } from 'next/router';\n      // ...\n    + const COMPLETE_CART = gql`\n    +   mutation completeCart {\n    +     completeCart {\n    +       complete\n    +     }\n    +   }\n    + `;\n      function Cart() {\n        // ...\n    ```", "```js\n  // ...\n  function Cart() {\n    const { loading, data } = useQuery(GET_CART);\n+   const [completeCard] = useMutation(COMPLETE_CART);\n    return (\n      <>\n        <SubHeader title='Cart' />\n        {loading ? (\n          <span>Loading...</span>\n        ) : (\n          <CartWrapper>\n            // ...            \n            {data &&\n              data.cart.products.length > 0 && \n+             sessionStorage.getItem('token') && (\n                <Button\n                  backgroundColor='royalBlue'\n+                 onClick={() => {\n+                   const isAuthenticated = \n                      sessionStorage.getItem(\n                        'token');\n+                   if (isAuthenticated) {\n+                     completeCard();\n+                   }\n+                 }}\n                >\n                  Checkout\n                </Button>\n              )}\n          </CartWrapper>\n        )}\n      </>\n    );\n  }\n  export default Cart;\n```"]