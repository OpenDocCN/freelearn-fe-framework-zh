- en: Chapter 6. Working with Geolocation and Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far you've seen that React Native simplifies the creation of native UI components,
    such as lists, text fields, and buttons, and it gives you simple abstractions,
    such as AsyncStorage, to work with underlying native APIs. Soon, you'll see that
    you also have access to advanced components, such as maps using the `MapView`
    component, and that you can access more advanced native features, such as geolocation
    using React Native's Geolocation API. We'll demonstrate these capabilities by
    adding the ability to capture and save current GPS coordinates with each new note.
    Note that the next two chapters will focus on iOS development, as the feature
    set for Android is not complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to get the current geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for changes to the user's position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring that our app requires appropriate permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving location data with each note
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the original locations of all the notes on a `MapView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Geolocation API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React Native provides an easy-to-use abstraction over the native Geolocation
    APIs. It follows the **MDN** (**Mozilla Developer Network**) specification, which
    recommends the following geolocation interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This method `asynchronously` asks for the device''s current location and will
    call the `success` callback with a `Position` object if it is successful and the
    `error` callback if it fails (usually, due to misconfigured permissions in your
    app or the user explicitly rejecting the request to allow your app to know their
    location). The `options` argument allows you to request higher position accuracy,
    define how long you''re willing to wait for a response, and specify the maximum
    age of cached data that you''re willing to accept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This function enables you to register a function that will be called each time
    the position changes. This function returns an integer that represents the `id`
    of the callback you registered. This allows you to stop listening for updates
    by calling the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The location permission in iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin integrating geolocation into our notes, we need to configure
    a permission to request the user''s location. From Xcode, open `info.plist` and
    make sure that the `NSLocationWhenInUseUsageDescription` key is located in the
    file (it should be enabled by default):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The location permission in iOS](img/B05162_06_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the application starts up, you should see a permission modal automatically
    pop up in the center of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The location permission in iOS](img/B05162_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tagging notes with geolocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take geolocation for a spin and start capturing the user''s location
    when they save a new note. Since we''re going to be using the location data when
    we save notes, we''ll add our code to the `ReactNotes` component in `index.ios.js`
    or `index.android.js`. Let''s begin by adding a function called `trackLocation()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we call `getCurrentPosition` and provide a callback that will update the
    current state with the position information returned from the device. We also
    provide an error handler if something goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use `watchPosition()` to register an event handler that will be called
    when the user''s position changes. We also save the `watchId` that is returned
    from this call, so that we can stop listening when the component has been unmounted.
    It is generally good practice to clear up any listeners you initially set up in
    your constructor or `componentDidMount` method from the `componentWillUnmount`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll call our `trackLocation()` function from the constructor and add
    some notes with the position data to our initial state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Saving the position data with a note requires a minor adjustment to our `updateNote()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's all there is to it! Reload the app, create a new note, and the GPS coordinates
    will be stored when the note is saved for the first time. But how can we visualize
    the position data associated with each of our notes? Let's make a `MapView` to
    display pins for each note!
  prefs: []
  type: TYPE_NORMAL
- en: The complete documentation of geolocation can be found in the React Native documentation
    at [https://facebook.github.io/react-native/docs/geolocation.html](https://facebook.github.io/react-native/docs/geolocation.html).
  prefs: []
  type: TYPE_NORMAL
- en: NoteLocationScreen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, since we are capturing the location of the user on note creation, we want
    to display this information in a useful manner. Location data perfectly matches
    up with showing the notes on a map UI. This way the user can visually see all
    of the notes that they have created. We are going to create a new component called
    `NoteLocationScreen` to house our note locations, but before writing the code
    for this screen, let's begin by adding the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the home screen, we want to have a **Map** button in the `navbar` to transition
    to the `NoteLocationScreen`. Update the `LeftButton` and `Title` in `NavigationBarRouteMapper`
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are defining a new route called `noteLocations`. Notice that we also
    want the `back` button to be displayed on the `noteLocation` route, so we include
    the case along with the `createNote` route.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you haven''t already, add a new `NoteLocationScreen.js` file to `App/Components/`
    and import it into `ReactNotes`. The last thing we need to do is include it in
    our `renderScene` function. We are going to pass it in the list of notes and the
    same `onSelectNote` function to our `NoteLocationScreen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: MapView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MapView is another component provided by React Native to display the map corresponding
    to each platform: Apple Maps on iOS and Google Maps on Android. You can start
    by adding the `MapView` to the `NoteLocationScreen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![MapView](img/B05162_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the map does not show your location on iOS, you may need to enable locations
    in the simulator. Set a custom location by navigating to **Debug** | **Location**
    | **Custom Location**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `showsUserLocation` function will zoom and display the location of the
    user on the map; by default, this value is `false`. Next, we want to gather all
    the notes locations to display them on our map using annotations. The annotation
    format accepts an object with `longitude`, `latitude`, some `title` information,
    and `on` `press` attributes. We will loop through the list of notes passed via
    props and extract the location data. The list of annotations is then passed to
    the MapView''s `annotations` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![MapView](img/B05162_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also add the ability to view the note by adding a `callout on press`
    function to the annotations. The `callout on press` method will invoke the `onNoteSelect`
    function we passed in and transition to the `NoteScreen`. Here we are adding a
    `left callout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![MapView](img/B05162_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Check the React Native documentation for more details on `MapView` at [https://facebook.github.io/react-native/docs/mapview.html](https://facebook.github.io/react-native/docs/mapview.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored more of React Native's built-in components and
    modules to capture the device-specific location data. The Geolocation API provides
    us the mechanism which hooks into the existing component life cycle to track user
    location. By incorporating this into our existing saved data, we can use the longitude
    and latitude values to display a map of where all of our notes were taken.
  prefs: []
  type: TYPE_NORMAL
