- en: Applying Modern CSS to Create React App Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现代CSS应用于创建React App项目
- en: As we've been working on our project, we've been focusing very heavily on the
    functionality, but overall we have been perhaps slightly less focused on how everything
    actually looks! While this is fine for establishing functionality and making everything
    flow nicely at the start of the project, any designers working on the project
    will be ready to scream at this point!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们一直在工作的项目中，我们非常重视功能，但总体来说，我们对实际的外观可能关注得稍微少一些！虽然这对于建立功能和在项目开始时使一切流畅是不错的，但任何参与项目的设计师在这个时候可能会大喊大叫！
- en: Let's appease our design team, whether it's an actual team or just ourselves,
    by spending a little bit of time cleaning up the visual appeal of our project!
    In relation to our current design, while it's not necessarily hideous, it certainly
    leaves a lot to be desired!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们的设计团队满意，无论是实际团队还是我们自己，只需花一点时间清理项目的视觉吸引力！就我们当前的设计而言，虽然它并不一定难看，但确实有很多地方需要改进！
- en: So, how do we improve our application's design in a safe and sound way? Well,
    previously with Create React App, you actually didn't have a lot of options to
    be able to clean things up visually. You were frequently at the whims and mercy
    of random **Cascading Style Sheets** (**CSS**) project maintainers, and trying
    to get other libraries, frameworks, or preprocessors involved in the project compilation
    process was frequently a nightmare.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何以安全可靠的方式改进应用程序的设计呢？嗯，以前在Create React App中，你实际上没有很多选项来从视觉上清理东西。你经常受随机**层叠样式表**（**CSS**）项目维护者的摆布，试图让其他库、框架或预处理器参与项目编译过程通常是一场噩梦。
- en: A **preprocessor** in the context of Create React App is basically one of the
    steps in the build process. In this case, we're talking about something that takes
    some of the style code (CSS or another format), compiles it down to basic CSS,
    and adds it to the output of the build process.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Create React App的上下文中，**预处理器**基本上是构建过程中的一个步骤。在这种情况下，我们谈论的是一些样式代码（CSS或其他格式），将其编译成基本的CSS，并将其添加到构建过程的输出中。
- en: 'Over the span of this chapter, we''ll be covering materials that span the gamut
    of style-related functionality and highlighting what is, in my mind, one of the
    best new features in Create React App: support for CSS Modules and SASS. Specifically,
    we''ll be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖涉及样式相关功能的各个方面，并突出我认为是Create React App中最好的新功能之一：支持CSS Modules和SASS。具体来说，我们将涵盖以下主题：
- en: The different ways to get CSS into our project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CSS引入我们的项目的不同方法
- en: A brief history of CSS in Create React App projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Create React App项目中CSS的简要历史
- en: Introducing CSS Modules
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍CSS Modules
- en: Introducing SASS to our project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将SASS引入我们的项目
- en: Mixing CSS Modules and SASS together
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CSS Modules和SASS混合使用
- en: Integrating CSS Modules and SASS into our project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CSS Modules和SASS集成到我们的项目中
- en: Integrating CSS frameworks into our project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将CSS框架集成到我们的项目中
- en: Cleaning up our tests after modifying the design
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在修改设计后清理我们的测试
- en: What tools are available?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有哪些工具可用？
- en: Create React App, by default, supports us getting CSS into our application in
    a number of different ways.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Create React App支持我们以多种不同的方式将CSS引入我们的应用程序。
- en: 'We can get CSS directly into our components by writing a `style` attribute
    and giving it some arbitrary CSS, as in the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过编写一个`style`属性并给它一些任意的CSS来直接将CSS引入我们的组件中，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will give us a little `div` with the word `Hello` in it, surrounded by
    a single-pixel red line for the border. While this is something you technically
    can do, generally speaking, you should avoid it. Using inline style statements
    like the preceding example makes it hard to keep your styles organized and track
    them down when formatting does go awry. Plus, if a designer or another non-developer
    needs to update the look and feel (for example, if the standard colors for things
    change), they will have to search to find where this one random little one-pixel
    red border is coming from!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个包含单词“Hello”的`div`，周围有一个单像素的红线作为边框。虽然技术上可以这样做，但一般来说，你应该避免这样做。使用像前面示例那样的内联样式声明会使你的样式难以组织，并且在格式化出错时难以追踪。此外，如果设计师或其他非开发人员需要更新外观和感觉（例如，如果某些标准颜色发生变化），他们必须搜索以找到这个随机的一个像素红边的来源！
- en: 'We can also create `.css` files and then `import` them into our project via
    a statement like the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建`.css`文件，然后通过以下类似语句将它们导入到我们的项目中：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is a technique that you''ve seen used before and that we''ve used a great
    deal in our application. It''s useful, of course, and allows us some small amount
    of separation of code and styles, but it doesn''t give us everything that we need.
    In fact, it actually introduces a new problem that we now have to solve, and one
    that can make fixing your projects and cleaning up the visual display of your
    projects incredibly frustrating and difficult over time: CSS conflicts!'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个你之前已经看到过并且我们在我们的应用程序中大量使用的技术。它是有用的，当然，它允许我们稍微分离代码和样式，但它并不能给我们提供我们需要的所有东西。事实上，它实际上引入了一个新的问题，我们现在必须解决，这个问题可能会随着时间的推移使修复项目和清理项目的视觉显示变得极其令人沮丧和困难：CSS冲突！
- en: CSS conflicts can ruin your application
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS冲突可能会破坏你的应用程序
- en: What is a CSS conflict? Basically, when you import a CSS file into one of your
    components, it doesn't really limit it to one specific file; it gets added to
    the global CSS definitions instead. This means that if you define a particular
    style in one place, it might override or conflict with a totally different style
    in a different place. These style sheets get imported in some particular order,
    depending on how the code is loaded into your application overall, and everything
    ends up getting added to one big giant style sheet by the time your browser loads
    it all in.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是CSS冲突？基本上，当你将CSS文件导入到你的组件中时，它并不会真正限制它只针对一个特定的文件；它会被添加到全局CSS定义中。这意味着如果你在一个地方定义了特定的样式，它可能会覆盖或与另一个地方的不同样式发生冲突。这些样式表按照特定的顺序导入，这取决于代码如何加载到你的应用程序中，最终在浏览器加载所有内容时，所有内容都会添加到一个巨大的样式表中。
- en: As you can imagine, if everything is getting added to one gigantic file and
    there's no real differentiation between different files and how everything gets
    loaded, you will likely run into issues periodically where something that has
    been carelessly named ends up breaking everything!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，如果所有内容都被添加到一个巨大的文件中，而且不同文件之间以及加载方式之间没有真正的区分，你可能会定期遇到一些被粗心命名的东西最终破坏一切的问题！
- en: A quick example of CSS conflicts
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS冲突的快速示例
- en: 'The easiest way to understand this is to see it in action. For the most part,
    we were pretty smart and safe about how we named our CSS files, but we did run
    into one giant gotcha: our `Divider` component defines a global style for all
    `hr` tags, regardless of where they appear. Let''s head back into `src/Todo.js`,
    and change our `render` function to place an `hr` tag in between the `description`
    and the `button`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这个问题的最简单方法就是看到它在实际操作中的效果。大部分时间，我们都非常聪明和谨慎地命名了我们的CSS文件，但我们确实遇到了一个巨大的问题：我们的`Divider`组件为所有`hr`标签定义了一个全局样式，无论它们出现在哪里。让我们回到`src/Todo.js`，并更改我们的`render`函数，在`description`和`button`之间放置一个`hr`标签：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that we have not added any style at all to this yet! Save the file and
    reload it, and despite us having never defined a style for `hr` tags in the `Todo`
    component, we''ll see that it has inherited the style of the `Divider` components!
    Refer to the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还没有对这个文件添加任何样式！保存文件并重新加载，尽管我们从未在`Todo`组件中为`hr`标签定义过样式，但我们仍然会发现它继承了`Divider`组件的样式！请参考以下截图：
- en: '![](img/bf59d40f-550b-4ba5-973d-c63e9e14e848.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/bf59d40f-550b-4ba5-973d-c63e9e14e848.png)'
- en: 'But that''s not what we wanted! While that''s a pretty nice divider, maybe
    we want ours to have a different color! For the sake of comparison, we''ll say
    that we want the dividers inside of the `Todo` component to be solid red lines
    but we want the other ones to stay the same. We''ll add the following CSS to `src/Todo.css`
    to change our `hr` tag to red instead by changing the `border` color:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是我们想要的！虽然这是一个相当不错的分隔符，但我们可能希望我们的分隔符有不同的颜色！为了比较，我们可以说我们希望`Todo`组件内的分隔符是实心的红色线条，但我们希望其他的保持不变。我们将在`src/Todo.css`中添加以下CSS，将我们的`hr`标签改为红色，通过更改`border`颜色：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Save and reload, and nothing happens? That''s odd. The code is correct and
    it''s definitely importing the CSS into our application correctly. Just as a sanity
    check, we''ll change the `hr` tag to a `div` tag to make sure it adds a red border
    to our `Todo div` tags:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并重新加载，但什么都没有发生？这很奇怪。代码是正确的，并且它确实已经正确地将CSS导入到我们的应用程序中。为了确保一切正常，我们将`hr`标签改为`div`标签，以确保它为我们的`Todo
    div`标签添加一个红色边框：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Save and reload, and you should now see this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并重新加载，你应该现在能看到这个：
- en: '![](img/2802b385-a015-45dd-a56c-db7730276c28.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/2802b385-a015-45dd-a56c-db7730276c28.png)'
- en: Yikes, that's not what we wanted! It's added borders to *every* `div` on the
    page instead of just the `div` tag in our `Todo` component! Well, at least we've
    figured out there's nothing weird with the code, it's just something with how
    the CSS is getting loaded. It's easy to fix; we'll just toss an `!important` flag
    on the end of our `src/Todo.css` file's `hr` definition and call it a day!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，这可不是我们想要的！它给页面上的每一个`div`都添加了边框，而不是仅仅在我们的`Todo`组件中的`div`标签上！好吧，至少我们已经弄清楚代码没有问题，只是CSS加载的方式有些问题。这很容易解决；我们只需在`src/Todo.css`文件的`hr`定义的末尾加上一个`!important`标志，然后就算完成了！
- en: The `!important` flag is a way to force CSS to prioritize this directive over
    other directives. It's also a great way to make your application a living nightmare
    to maintain over time; avoid using this whenever you possibly can!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`!important`标志是一种强制CSS优先执行此指令而不是其他指令的方法。它也是一个让你的应用程序随着时间的推移变得难以维护的绝佳方式；尽可能避免使用它！'
- en: 'Back in `src/Todo.css`, we''ll commit our CSS crime by tossing an `!important` flag
    at the end of the `hr` block:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/Todo.css`中，我们将通过在`hr`块的末尾添加一个`!important`标志来犯下我们的CSS罪行：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There we go! Save and reload, and we will see the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！保存并重新加载，我们将看到以下输出：
- en: '![](img/265c16c5-e0be-4cba-9c41-73f10b60f2ba.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/265c16c5-e0be-4cba-9c41-73f10b60f2ba.png)'
- en: Now, we've ruined everything. Yikes! Hopefully our design team won't just completely
    disown us for this, right? They're really good at CSS, so they'll fix things!
    Well, they'll fix things after they're done yelling at us for botching the site's
    design inside of the code in a way that is incredibly difficult for a non-developer
    to track down.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们搞砸了一切。哎呀！希望我们的设计团队不会因此完全抛弃我们，对吧？他们真的很擅长CSS，所以他们会修复问题的！嗯，他们会在我们因为代码中破坏了网站的布局而大喊大叫之后修复问题，这对非开发者来说很难追踪到。
- en: The good news is that there is a different way to handle this situation in a
    way that works very well and prevents exactly this sort of scenario in the future!
    It is something that has been an absolute godsend to those of us that have been
    working on shared frontend development projects, which might have multiple different
    CSS files to have to search through to find the single CSS file that's causing
    a major design headache!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，有一种不同的方式来处理这种情况，效果非常好，可以防止未来发生这种类型的场景！这对那些一直在做共享前端开发项目的人来说是一个绝对的福音，这些项目可能需要搜索多个不同的CSS文件，才能找到导致主要设计头痛的单个CSS文件！
- en: Introducing CSS Modules
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍CSS Modules
- en: The first of these are CSS Modules, and in Create React App 2 and higher, you
    don't need to do anything at all to start taking advantage of it immediately.
    CSS Modules give you the ability to modularize any CSS code that you import in
    a way that prevents introducing global, overlapping namespaces, despite the fact
    that the end result is still just one giant CSS file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中的第一个是CSS Modules，在Create React App 2及以上版本中，你不需要做任何事情就可以立即开始利用它。CSS Modules允许你以防止引入全局、重叠命名空间的方式模块化你导入的任何CSS代码，尽管最终结果仍然是一个巨大的CSS文件。
- en: That being said, it's also not just going to immediately work in your project
    if you don't turn anything on or organize your code a little bit better. Right
    now, we've been placing all of our code directly into the `src/` directory, resulting
    in a scenario where the `root` folder is going to keep growing and growing over
    time until it gets so large and unwieldy that you'll never be able to find anything.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，如果你不打开任何东西或者稍微更好地组织一下代码，这东西也不会立即在你的项目中工作。目前，我们一直把所有的代码直接放入`src/`目录，导致`root`文件夹会随着时间的推移不断增大，最终变得庞大而难以管理，以至于你永远找不到任何东西。
- en: Better project organization
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的项目组织
- en: 'Let''s start off by cleaning up our directory structure in our project a little
    bit better. There are a million different ways to do this and, honestly, they
    all have their own merits and flaws. We''re going to adopt a very simple structure
    right now since this project is not really going to be terribly large, so keeping
    things simple and building up is very easy to do with this structure. What we''re
    going to do is just separate out each component that has CSS and JavaScript code
    into their own folders. We''ll start off by creating `NewTodo`, `Todo`, `App`,
    `TodoList`, and `Divider` folders and placing all of their related code in each
    of those. We''ll also need to create a new file in each of these directories called
    `index.js`, which will be responsible for only importing and exporting the appropriate
    component. For example, the `App` index file (`src/App/index.js`) will look like
    this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从更好地清理我们的项目目录结构开始。有无数种不同的方法来做这件事，而且说实话，它们都有自己的优点和缺点。由于这个项目实际上不会非常大，我们现在将采用一个非常简单的结构，因为用这个结构保持简单和构建起来非常容易。我们将要做的是将每个具有CSS和JavaScript代码的组件分开到它们自己的文件夹中。我们将从创建`NewTodo`、`Todo`、`App`、`TodoList`和`Divider`文件夹开始，并将所有相关代码放在每个文件夹中。我们还需要在每个这些目录中创建一个名为`index.js`的新文件，它将只负责导入和导出适当的组件。例如，`App`索引文件（`src/App/index.js`）将看起来像这样：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The new index file of `Todo` (`src/Todo/index.js`) will look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`Todo`索引文件（`src/Todo/index.js`）将看起来像这样：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can probably guess what the index files `NewTodo`, `TodoList`, and `Divider` will
    look like as well, based on this pattern!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能可以猜到`NewTodo`、`TodoList`和`Divider`索引文件的样子，根据这个模式！
- en: Next, we'll need to change each place that these files are referenced to make
    it easier to import all of them. This will unfortunately be a little bit of grunt
    work, but we'll need to do it all the same to make sure we don't break anything
    in the process.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更改所有引用这些文件的地方，以便更容易地导入所有文件。这无疑会是一点点的体力劳动，但无论如何我们都需要这样做，以确保在过程中不会破坏任何东西。
- en: 'First, in `src/App/App.js`, change the `TodoList import` component to the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`src/App/App.js`中，将`TodoList`导入组件更改为以下内容：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There''s nothing we need to do for `Divider` since it is a component with no
    imports. `NewTodo` and `Todo` are of a similar type, so we can skip them as well.
    `src/TodoList/TodoList.js`, on the other hand, has a lot we need to deal with,
    since it''s one of our highest-level components and imports a lot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Divider`组件，我们不需要做任何事情，因为它是一个没有导入的组件。`NewTodo`和`Todo`类型相似，所以我们可以跳过它们。另一方面，`src/TodoList/TodoList.js`有很多东西需要处理，因为它是我们最高级别的组件之一，并且导入了大量内容：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'But that''s not all. Our test file, `src/TodoList/TodoList.test.js`, also needs
    to be modified to include these new paths for our files or else our tests will
    fail! We''ll need nearly the same list of imports as earlier:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不是全部。我们的测试文件`src/TodoList/TodoList.test.js`也需要修改，以包含这些新路径，否则我们的测试将会失败！我们需要几乎与之前相同的导入列表：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, when you reload your application, your code should still be working just
    fine, your tests should all pass, and everything should be cleanly separated out!
    This makes our lives easier for a number of reasons, but when we''re talking about
    working with other developers or designers, this makes things a godsend for them
    since they can figure out exactly what CSS to modify when they need to fix things
    up! Our full project structure should now look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你重新加载你的应用程序时，你的代码应该仍然工作得很好，所有的测试都应该通过，而且一切都应该被干净地分离出来！这使我们生活变得更加容易，原因有很多，但当我们与其他开发者或设计师一起工作时，这对他们来说就像天赐之物，因为他们可以准确地找出在需要修复东西时应该修改哪些CSS！我们的完整项目结构现在应该看起来像这样：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to use CSS Modules
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用CSS模块
- en: It's time for us to jump right into incorporating CSS Modules into our project.
    Right now, we haven't set up anything to start using CSS Modules, so we'll need
    to make a few changes to make this work. Think back to our `Todo` CSS conflict,
    where introducing some conflicting CSS namespaces and poor choices around the
    use of the `!important` flag introduced a nightmare situation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候让我们直接将CSS模块整合到我们的项目中了。目前，我们还没有设置任何东西来开始使用CSS模块，所以我们需要做一些更改才能使其工作。回想一下我们的`Todo`
    CSS冲突，引入一些冲突的CSS命名空间和关于使用`!important`标志的糟糕选择，导致了一个噩梦般的情况。
- en: Instead, let's start taking advantage of CSS Modules! We can actually mix the
    old way of doing things and the new way as well, but it'd be nice to take things
    a step further and use CSS Modules all the way.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们开始利用 CSS Modules！我们实际上可以混合旧的方式和新方式，但更进一步，完全使用 CSS Modules 会更好。
- en: Introducing CSS Modules to our application
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 CSS Modules 引入我们的应用程序
- en: 'If we want to use CSS Modules, there are a few simple guidelines that we need
    to follow. The first is that we need to name our files `[whatever].module.css`,
    instead of `[whatever].css`. The next thing we need to do is to make sure that
    our styles are named simply and are easy to reference. Let''s start off by following
    these conventions and by renaming our CSS file for `Todo` as `src/Todo/Todo.module.css`,
    and then we''ll change the contents a tiny bit:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要使用 CSS Modules，有一些简单的指南我们需要遵循。首先，我们需要将我们的文件命名为 `[ whatever ].module.css`，而不是
    `[ whatever ].css`。接下来，我们需要确保我们的样式命名简单且易于引用。让我们从遵循这些约定并重命名我们的 CSS 文件 `Todo` 为
    `src/Todo/Todo.module.css` 开始，然后我们会稍作修改：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: CSS Module guidelines prefer that you use **camelCase** for naming conventions,
    so `Done` and `Todo` will become `done` and `todo`, respectively. Something like
    `NewTodo` will instead become `newTodo` as well!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CSS Module 指南建议您使用 **camelCase** 命名约定，所以 `Done` 和 `Todo` 将分别变为 `done` 和 `todo`。类似
    `NewTodo` 的东西也将变为 `newTodo`！
- en: 'Next, we''ll open up `src/Todo/Todo.js` to take advantage of CSS Modules instead.
    We created a helper function in our `Todo` component called `cssClasses()`, which
    returns the styles we should be using in our component, and there''s not much
    we need to change to make this all work exactly the same as earlier. We''ll need
    to change our `import` statement at the top as well, since we renamed the file
    and are changing how our CSS is getting loaded into our code! Take a look at the
    following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将打开 `src/Todo/Todo.js` 文件，以利用 CSS Modules。我们在 `Todo` 组件中创建了一个辅助函数 `cssClasses()`，它返回我们在组件中应该使用的样式，而且我们不需要做太多修改就能让这一切与之前完全一样。我们还需要更改顶部的
    `import` 语句，因为我们重命名了文件，并且正在更改我们的 CSS 被加载到代码中的方式！请看以下内容：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This enables our code to take advantage of any class names defined in `Todo.module.css`
    by referencing them as `styles.[className]`. For example, in the previous file,
    we defined two CSS class names: `todo` and `done`, so we can now reference them
    in our component via `styles.Todo` and `styles.done`. We''ll need to change the
    `cssClasses()` function to use this, so let''s make those exact changes now. In
    `src/Todo/Todo.js`, our `cssClasses()` function should now read as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们的代码能够通过将它们作为 `styles.[className]` 引用来利用 `Todo.module.css` 中定义的任何类名。例如，在上一个文件中，我们定义了两个
    CSS 类名：`todo` 和 `done`，因此我们现在可以通过 `styles.Todo` 和 `styles.done` 在我们的组件中引用它们。我们需要更改
    `cssClasses()` 函数以使用它，所以现在让我们进行这些精确的更改。在 `src/Todo/Todo.js` 中，我们的 `cssClasses()`
    函数现在应该如下所示：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save and reload, and our application should be back to normal! There''s more
    we can do here, though, so let''s return back to our conflict scenario. If you
    remember, the problem was that we needed to be able to change the `hr` tags inside
    of the `todo` components to have their own styles and effects, but not affect
    everything else and also not have to use the `!important` flag if we can avoid
    it. Head back into `src/Todo/Todo.module.css` and add the following block for
    our `hr` tag, which we''ll give a new class of `redDivider`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并重新加载，我们的应用程序应该恢复正常！不过，我们还可以做更多的事情，所以让我们回到我们的冲突场景。如果你还记得，问题是我们需要能够在 `todo`
    组件内部更改 `hr` 标签以拥有自己的样式和效果，同时不影响其他一切，并且如果可能的话，避免使用 `!important` 标志。回到 `src/Todo/Todo.module.css`
    文件，并为我们的 `hr` 标签添加以下块，我们将给它一个新的类名 `redDivider`：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And finally, return back to our `render()` function in `src/Todo/Todo.js`,
    and change our `render()` function''s `hr` tag inclusion to the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，回到我们的 `render()` 函数，它在 `src/Todo/Todo.js` 文件中，并将我们的 `render()` 函数的 `hr` 标签包含更改为以下内容：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Save and reload, and now we should have fully compartmentalized CSS code without
    worrying about collisions and global namespaces! Refer to the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并重新加载，现在我们应该有了完全分区的 CSS 代码，无需担心冲突和全局命名空间！请参考以下截图：
- en: '![](img/6edde697-239e-44ab-9fda-3b568ca992f6.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6edde697-239e-44ab-9fda-3b568ca992f6.png)'
- en: Composability with CSS Modules
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 CSS Modules 的组合性
- en: That's not all that CSS Modules give us, although it's certainly one of the
    great parts of CSS Modules that we get immediately and with no fuss (seriously,
    we wrote zero configuration to make all of it happen; it was all just code). We
    also get CSS composability, which is the ability to inherit CSS classes off of
    other classes, whether they're in the main file or not! This can be incredibly
    useful when you're setting up more complicated nested components that all need
    to handle slightly different style sheets, but are not wildly different from each
    other. Let's say we want to have the ability to mark some components as `critical`
    instead of just regular Todos.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是 CSS Modules 给我们的所有东西，尽管这确实是 CSS Modules 的一个伟大部分，我们可以立即获得，而且没有任何麻烦（真的，我们写了零配置来让所有这些发生；这只是一些代码）。我们还获得了
    CSS 可组合性，这是从其他类继承 CSS 类的能力，无论它们是否在主文件中！当你设置更复杂的嵌套组件，所有这些组件都需要处理稍微不同的样式表，但彼此之间并不完全不同时，这可以非常有用。让我们假设我们想要有标记一些组件为
    `critical` 而不是只是常规 Todos 的能力。
- en: 'We don''t want to change too much about the component; we want it to inherit
    the same basic rules as all of the other Todos. We''ll need to set up some code
    to make this happen. Back in `src/Todo/Todo.js`, we''re going to make some modifications
    to allow a new state property of `critical`. We''ll start off in the `constructor` component,
    where we''ll add our new `state` property and a `bind` tag for a function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想对组件做太多改动；我们希望它继承所有其他 Todos 的相同基本规则。我们需要设置一些代码来实现这一点。回到 `src/Todo/Todo.js`，我们将对允许新的
    `critical` 状态属性的代码进行一些修改。我们将在 `constructor` 组件中开始，我们将添加新的 `state` 属性和一个用于函数的 `bind`
    标签：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We add a new `critical` property in our `state` property, set it to a default
    value of `false`, and then we also reference a function (which we haven''t written
    yet) called `markCritical`, and we bind `this`, since we''ll be using it in an
    event handler later. Next, we''ll tackle the `markCritical()` function:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `state` 属性中，我们添加了一个新的 `critical` 属性，将其设置为默认值 `false`，然后我们还引用了一个（我们还没有编写的）名为
    `markCritical` 的函数，并绑定 `this`，因为我们将在事件处理程序中稍后使用它。接下来，我们将处理 `markCritical()` 函数：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''ll also need to modify our `cssClasses()` function so that it can react
    to this new `state` property. To demonstrate the composability function of CSS
    Modules, we''ll set it so that `classes` is originally an empty array, and then
    the first item either becomes `critical` or `todo`, depending on whether or not
    the item is marked as `critical`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要修改我们的 `cssClasses()` 函数，使其能够响应这个新的 `state` 属性。为了演示 CSS Modules 的可组合性功能，我们将设置
    `classes` 初始为一个空数组，然后第一个项目要么变为 `critical`，要么变为 `todo`，具体取决于项目是否被标记为 `critical`：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And finally, in our `render` function, we''ll create the `button` tag to mark
    items as `critical`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的 `render` 函数中，我们将创建 `button` 标签来标记项目为 `critical`：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''re not quite done yet, although we''re at least 90% of the way there. We''ll
    also want to go back to `src/Todo/Todo.module.css` and add a new block for the
    `critical` class name, and we''ll use our composable property as well:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经完成了至少 90%，但我们还没有完全完成。我们还需要回到 `src/Todo/Todo.module.css` 并为 `critical`
    类名添加一个新的块，同时我们也会使用我们的可组合属性：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To use composition, all you need to do is add a new CSS property called `composes`
    and give it a class name (or multiple class names) that you want it to compose.
    Compose, in this case, is a fancy way of saying that it inherits the behavior
    of the other class names and allows you to override others. In the previous case,
    we''re saying `critical` is a CSS module class that is composed of a `todo` model
    as the base, and adds a `border` component of a big red dashed line since, well,
    we''ll just say that this means it is `critical`. This previous code is the equivalent
    of us writing out the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用组合，你只需要添加一个新的 CSS 属性 `composes` 并给它一个类名（或多个类名），你想要它组合的。在这里，组合是一个花哨的说法，意思是它继承了其他类名的行为，并允许你覆盖它们。在前面的例子中，我们说的是
    `critical` 是一个由 `todo` 模型作为基础组合的 CSS 模块类，并添加了一个大红色虚线边框组件，因为，嗯，我们只能说这意味着它是 `critical`。这段之前的代码相当于我们编写以下内容：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Save and reload, as always, and you should be able to mark items as Mark as
    Done, Mark as Critical, or both, or remove them by clicking Remove Me, as in the
    following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，保存并重新加载，你应该能够标记项目为“标记为完成”、“标记为关键”或两者兼而有之，或者通过点击“移除我”来移除它们，如下面的截图所示：
- en: '![](img/4ab9c5a0-878d-4c4a-a005-513f59d21cec.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4ab9c5a0-878d-4c4a-a005-513f59d21cec.png)'
- en: And that about covers it for our brief introduction to CSS Modules! There's
    certainly more that you could cover over time, but this is more intended to be
    a quickstart guide and we could probably fill up a second book just on CSS techniques
    and libraries!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 大概这就是我们对 CSS 模块的简要介绍了！当然，随着时间的推移，你可以涵盖更多内容，但这个文档更倾向于作为一个快速入门指南，我们可能只需要再写一本书就能涵盖
    CSS 技巧和库了！
- en: Before you move on, you'll also want to quickly update your snapshots for your
    tests by hitting *U* in the `yarn test` screen!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，你还需要快速更新你的测试快照，在 `yarn test` 界面中按 *U* 键！
- en: Introducing SASS to our project
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 SASS 引入我们的项目
- en: That's not all that the Create React App added support for as part of Create
    React App 2! By very popular demand, the Create React App team added in support
    for SASS pre-processing as well! Often, you'd pretty much be guaranteed that you'd
    need to eject your project as soon as you wanted to start working with any SASS
    in your project.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这还不是 Create React App 2 部分添加的所有支持。根据非常受欢迎的需求，Create React App 团队还添加了对 SASS 预处理的支持！通常，你几乎可以保证，一旦你想在你的项目中开始使用任何
    SASS，你就需要将项目推出。
- en: What is SASS?
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 SASS？
- en: 'Let''s talk a little bit about what SASS actually is, since it''s a pretty
    important thing to cover. Otherwise, you''d have no connection to why this is
    worth the effort (even though, to be fair, it is very little effort to integrate
    into your Create React App projects). SASS is essentially CSS with extended feature
    support. When I say *extended feature support* here, though, I mean it! SASS supports
    the following feature set, which is missing in CSS, and which includes the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简单谈谈 SASS 实际上是什么，因为它是一个非常重要的内容。否则，你就不会知道为什么这值得付出努力（尽管，公平地说，将其集成到你的 Create
    React App 项目中几乎不需要付出什么努力）。SASS 实质上是具有扩展功能支持的 CSS。当我说 *扩展功能支持* 时，我确实是这个意思！SASS
    支持以下功能集，这是 CSS 中缺失的，包括以下内容：
- en: Variables
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Nesting
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套
- en: Partial CSS files
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分CSS文件
- en: Import support
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入支持
- en: Mixins
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合
- en: Extensions and inheritance
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展和继承
- en: Operators and calculations
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符和计算
- en: This feature set alone makes including SASS worth it on nearly any complicated
    frontend project that you might be working with, and honestly after using SASS
    for a long time and then not having it, it's hard to ever want to go back to vanilla
    CSS. So, let's start getting some SASS into our project!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 仅这个功能集就使得在几乎任何复杂的客户端项目中包含 SASS 都是有价值的，而且说实话，在使用了很长时间的 SASS 之后，没有它就很难再想回到纯 CSS。那么，让我们开始在我们的项目中添加一些
    SASS 吧！
- en: Installing and configuring SASS
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 SASS
- en: 'The good news is that getting SASS support working in a Create React App project
    is incredibly simple! We first need to install it via `yarn`, or `npm` first.
    We''ve used `yarn` for everything else so we''ll stick to it:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，在 Create React App 项目中使 SASS 支持工作极其简单！我们首先需要通过 `yarn` 或 `npm` 安装它。我们之前一直使用
    `yarn`，所以我们将继续使用它：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We'll see a *ton* of output from it, but assuming there are no errors and everything
    goes well, we should be able to restart our development server and get started
    with some SASS. Let's create a more general utility SASS file that will be responsible
    for storing standardized colors that we'll want to use throughout our application,
    and something to store that neat gradient `hr` pattern in case we want to use
    it elsewhere.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会看到大量的输出，但假设没有错误并且一切顺利，我们应该能够重新启动我们的开发服务器，并开始使用一些 SASS。让我们创建一个更通用的实用 SASS
    文件，它将负责存储我们将在整个应用程序中使用的标准化颜色，以及存储我们可能想要在其他地方使用的整洁渐变 `hr` 模式。
- en: 'We''ll also change some of the colors that we''re using so that there is some
    red, green, and blue, depending on whether the item is critical, done, or neither,
    respectively. In addition, we''ll need to change up our project a little bit and
    add a new file to have a concept of some shared styles and colors. So, let''s
    begin:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将更改一些我们正在使用的颜色，以便根据项目是否关键、已完成或都不是，分别使用红色、绿色和蓝色。此外，我们还需要稍微调整我们的项目，并添加一个新文件来有一个共享样式和颜色的概念。那么，让我们开始吧：
- en: 'Create a new file, `src/shared.scss`, in our project and give it the following
    body:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目中创建一个名为 `src/shared.scss` 的新文件，并给它以下内容：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, hop over to `src/Divider/Divider.css` and rename the file to `src/Divider/Divider.scss`.
    Next, we''ll change the reference to `Divider.css` in `src/Divider/Divider.js`,
    as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到 `src/Divider/Divider.css` 并将其重命名为 `src/Divider/Divider.scss`。接下来，我们将更改
    `src/Divider/Divider.js` 中对 `Divider.css` 的引用，如下所示：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we''ll need to change up the code in `Divider.scss` to import in our shared
    variables file and use a variable as part of it:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要更改 `Divider.scss` 中的代码，以导入共享变量文件并使用变量作为其一部分：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: So, we import in our new shared SASS file in `src/`, and then the `background-image`
    value just references the `$fancy-gradient` variable that we created, which means
    we can now recreate that fancy gradient whenever we need to without having to
    rewrite it over and over!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在 `src/` 中导入新的共享 SASS 文件，然后 `background-image` 的值仅引用我们创建的 `$fancy-gradient`
    变量，这意味着我们现在可以在需要时重新创建那个复杂的渐变，而无需反复重写它！
- en: Save and reload, and you should see that nothing major has changed!
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并重新加载，您应该看不到任何重大变化！
- en: This is a pretty good example of introducing SASS where it just replaces our
    standard CSS, but what about when we start to introduce CSS Modules?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，展示了如何引入 SASS 来替换我们的标准 CSS，但当我们开始引入 CSS Modules 时会发生什么呢？
- en: Mixing SASS and CSS Modules
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合 SASS 和 CSS Modules
- en: 'The good news is that it''s basically no more complicated to introduce SASS
    to CSS Modules in Create React App. In fact, the steps are borderline identical!
    So, if we want to start mixing the two, all we need to do is rename some files
    and change how our imports are handled. Let''s see this in action:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，在 Create React App 中引入 SASS 到 CSS Modules 并没有更复杂。实际上，步骤几乎完全相同！所以，如果我们想开始混合这两种技术，我们只需要重命名一些文件并更改我们的导入方式。让我们看看实际操作：
- en: 'First, head back to our `src/Todo/Todo.module.css` file and make a very minor
    modification. Specifically, let''s rename it `src/Todo/Todo.module.scss`. Next,
    we need to change our `import` statement in `src/Todo/Todo.js`, otherwise the
    whole thing will fall apart:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，回到我们的 `src/Todo/Todo.module.css` 文件，进行一个非常小的修改。具体来说，让我们将其重命名为 `src/Todo/Todo.module.scss`。接下来，我们需要更改
    `src/Todo/Todo.js` 中的 `import` 语句，否则整个项目都会崩溃：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we should have our SASS working for CSS Modules with the `Todo` component,
    so let''s start taking advantage of it. Again, we''ll need to `import` our `shared`
    file into this SASS file as well. Note the following back in `src/Todo/Todo.module.scss`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该让 SASS 在 `Todo` 组件中为 CSS Modules 工作，让我们开始利用它。同样，我们还需要将 `shared` 文件导入到这个
    SASS 文件中。注意以下在 `src/Todo/Todo.module.scss` 中的内容：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we''ll need to start changing the references to our various background
    colors. We''ll change the background for regular Todos to `$todo-normal`. Then,
    we''ll change the finished `Todo` background to `$todo-complete`. Finally, we''ll
    want to change the `critical` items to `$todo-critical`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要开始更改对各种背景颜色的引用。我们将常规待办事项的背景更改为 `$todo-normal`。然后，我们将完成的 `Todo` 背景更改为
    `$todo-complete`。最后，我们希望将 `critical` 项目更改为 `$todo-critical`：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Save and reload our project, and let''s make sure the new color scheme is being
    respected:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并重新加载我们的项目，让我们确保新的配色方案被尊重：
- en: '![](img/ffbf312e-50cd-4e47-bfb7-6cb0615af6ab.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ffbf312e-50cd-4e47-bfb7-6cb0615af6ab.png)'
- en: Honestly, everything beyond this point is just diving deeper and deeper into
    SASS-specific syntax, and again, that falls pretty far outside of the scope of
    this book. As you can see from the preceding screenshot though, we were able to
    introduce SASS into our CSS Modules code with no real complications.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 实话实说，从这一点开始，就是越来越深入地探索 SASS 特定的语法，而且，这又超出了本书的范围。然而，正如您从前面的截图中所见，我们能够将 SASS 引入我们的
    CSS Modules 代码中，而且没有遇到任何真正的困难。
- en: Even better, we've now introduced a new way to change themes and skins in our
    project without a ton of extra work, and if our designers ever want to run in
    and change, for example, the backgrounds of all of the Todos and change the general
    color scheme, they can do so by running into the `shared.scss` file quickly and
    making a few color changes, and not having to change much else!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，我们现在已经引入了一种新的方法来更改项目中的主题和皮肤，而无需做很多额外的工作，如果我们的设计师想要快速进入并更改，例如，所有待办事项的背景以及整体配色方案，他们可以通过快速进入
    `shared.scss` 文件并做一些颜色更改来实现，而无需更改其他太多内容！
- en: We can keep the lovely code modularity and developer-centric features of CSS
    Modules and SASS, but also provide nice inlets into our code to allow designers
    and other non-developers to modify the design and style elements where necessary!
    Even better, our code gets easier to maintain with the addition of two new features
    instead of making our project exponentially more complicated!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以保留 CSS Modules 和 SASS 的可爱代码模块化和以开发者为中心的特性，同时为设计师和其他非开发者提供修改设计元素和样式元素的入口！更好的是，通过添加两个新功能，我们的代码变得更加易于维护，而不是让我们的项目变得复杂指数级增长！
- en: Adding CSS frameworks
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 CSS 框架
- en: A very common use case that you'll run into as part of working on a frontend
    project is integrating some sort of third-party CSS framework. This is something
    I've had to do on nearly every frontend development project I've ever touched,
    and there's pretty good odds that you'll need to run through this same process!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端项目中工作时会遇到的一个非常常见的用例是集成某种第三方CSS框架。这是我几乎在接触过的每一个前端开发项目中都必须做的事情，而且有很大可能性你需要运行相同的流程！
- en: We'll stick to one of the most common ones, since it will give you a good introduction
    to using frameworks in general, so we'll start off by integrating bootstrap into
    our project! It won't take much for our project to go from sort of ugly to actually
    kind of decent! As with most other things we've run into as part of our development
    process with Create React App, this is equally simple for us to implement! We'll
    start off by adding both `bootstrap` to our project and `reactstrap`, which is
    a pre-made React component that takes full advantage of Twitter Bootstrap!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将坚持使用最常见的一种，因为它将为你提供一个很好的框架使用介绍，所以我们将从将bootstrap集成到我们的项目中开始！我们的项目从有点丑陋到真正有点体面不会花费太多时间！正如我们在使用Create
    React App进行开发过程中遇到的大多数其他事情一样，这同样简单易行！我们将从将`bootstrap`和`reactstrap`都添加到我们的项目中开始，`reactstrap`是一个预制的React组件，充分利用了Twitter
    Bootstrap！
- en: 'We''ll start by adding `bootstrap`, and `reactstrap`, via `yarn`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过`yarn`添加`bootstrap`和`reactstrap`：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Right now, if you use `bootstrap` at version 4.x, you'll need to include `reactstrap`,
    but at 6.5.x to avoid error messages!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果你使用的是`bootstrap` 4.x版本，你需要包含`reactstrap`，但在6.5.x版本中，为了避免错误信息！
- en: 'We should see a bunch of things get installed in our project folder, but hopefully
    no errors! After everything is successfully installed, we can then get the baseline
    `bootstrap` into our project by opening up `src/index.js` and adding a single
    `import` statement:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在项目文件夹中看到许多东西被安装，但希望没有错误！在所有内容都成功安装后，我们就可以通过打开`src/index.js`并添加一个单独的`import`语句来将基线`bootstrap`引入我们的项目：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Cleaning up our design, starting with the header
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理我们的设计，从头部开始
- en: 'Next, let''s clean up our ugly header, which will also require us to remove
    some of the code we wrote earlier to experiment with JavaScript syntax! Currently,
    our `header` is our own pre-rolled thing but it''s not very good-looking as it
    is right now. We''ll want to take advantage of the `Navbar` and `NavbarBrand`
    components that `reactstrap` provides to us as part of its standard exports! Open
    up `src/App/App.js`, and we''re going to start modifying the file pretty significantly:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们清理我们丑陋的头部，这也将要求我们移除我们之前为了实验JavaScript语法而编写的部分代码！目前，我们的`header`是我们自己预制的，但它现在看起来并不好看。我们将利用`reactstrap`作为其标准导出的一部分提供的`Navbar`和`NavbarBrand`组件！打开`src/App/App.js`，我们将开始对该文件进行相当大的修改：
- en: 'We''ll start off by adding our `Navbar` and `NavbarBrand` imports at the top:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先在顶部添加`Navbar`和`NavbarBrand`的导入：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we can remove all of the `header` configuration objects, since we won''t
    need any of them after we''re done editing this file. Instead, we''ll just replace
    it with a single `headerTitle` variable:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以移除所有的`header`配置对象，因为我们编辑完这个文件后不再需要它们。相反，我们将用单个`headerTitle`变量来替换它：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, we''ll need to replace our `headerDisplay` function, since it is going
    to be using the new `reactstrap` component instead of the previous code we had
    in place:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要替换我们的`headerDisplay`函数，因为它将使用新的`reactstrap`组件而不是我们之前放置的代码：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Notice that, now, `header` only accepts a passed-in title instead of the huge
    configuration object we were using earlier. This simplifies our code pretty significantly!
    We''ll also need to change the call in our `App` component to our `header` function:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，现在`header`只接受传入的标题，而不是我们之前使用的巨大的配置对象。这显著简化了我们的代码！我们还需要更改`App`组件中对`header`函数的调用：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Save it and we should have a significantly cleaner `header` in our project!
    Refer to the following screenshot:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存它，我们应该在我们的项目中有一个显著更干净的`header`！参考以下截图：
- en: '![](img/d479e17f-4bd0-49d6-b0ef-6de690a14d0d.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d479e17f-4bd0-49d6-b0ef-6de690a14d0d.png)'
- en: Cleaning up the NewTodo component
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理NewTodo组件
- en: We'll also want to clean up our `NewTodo` component, since it is pretty bare
    bones right now! We'll basically want to update anywhere a `Button` or `Input` function
    appears in our code to make sure our app has a clean, consistent design all over
    the place!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想要清理我们的 `NewTodo` 组件，因为它现在非常简单！我们将基本上想要更新代码中任何出现 `Button` 或 `Input` 函数的地方，以确保我们的应用程序在各个地方都有一个干净、一致的设计！
- en: 'First, at the top of `src/NewTodo/NewTodo.js`, we''ll want to add our `reactstrap`
    imports! We''ll need `Button`, `Input`, and `InputGroup`, so let''s add them as
    our named imports from `reactstrap`:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `src/NewTodo/NewTodo.js` 的顶部，我们想要添加我们的 `reactstrap` 导入！我们需要 `Button`、`Input`
    和 `InputGroup`，所以让我们从 `reactstrap` 中添加它们作为命名导入：
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, we''ll need to clean up the text `Input` and `Button` display properly,
    so let''s wrap our text field and `Button` inside of an `InputGroup` component
    to keep them together! We''ll change the text `Input` to the `reactstrap Input`
    component and the `Button` tag to a `reactstrap Button` component as well, and
    we''ll add a `placeholder` text for our input item. Also, note that we''re setting
    a new property on our `Button` tag called `color,` which is set to `"primary"`.
    This gives us a blue button instead of the default ugly grey button! Our `render()`
    function should now look like this:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要正确清理 `Input` 和 `Button` 的文本显示，所以让我们将我们的文本字段和 `Button` 包裹在 `InputGroup`
    组件中，以保持它们在一起！我们将文本 `Input` 更改为 `reactstrap Input` 组件，并将 `Button` 标签更改为 `reactstrap
    Button` 组件，并为输入项添加一个 `placeholder` 文本。此外，请注意，我们在 `Button` 标签上设置了一个新属性 `color`，其设置为
    `"primary"`。这给了我们一个蓝色的按钮，而不是默认的丑陋灰色按钮！我们的 `render()` 函数现在应该看起来像这样：
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Save and reload, and our input should look much nicer; something like the following:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并重新加载，我们的输入应该看起来好多了；类似于以下内容：
- en: '![](img/1f9d00cf-2ca8-45e7-9be4-978f9f6c4131.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f9d00cf-2ca8-45e7-9be4-978f9f6c4131.png)'
- en: Cleaning up our Todo component
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理我们的 Todo 组件
- en: 'Our `Todo` components still look a little ugly, so let''s also give them the
    same treatment. After this, we''ll be in a good enough place to call it quits
    with making our project look a little nicer, but to get there we''ll need some
    more imports:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `Todo` 组件仍然看起来有点丑，所以让我们也给它们同样的处理。在这之后，我们将足够好地完成我们的项目，使其看起来更漂亮，但要达到这个目标，我们需要更多的导入：
- en: 'We''ll need to `import`, `Button`, and `ButtonGroup` to our `Todo` components,
    since the only things we''ll want to clean up are our buttons! To do so, use the
    following code, adding it to `src/Todo/Todo.js`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将 `import`、`Button` 和 `ButtonGroup` 导入到我们的 `Todo` 组件中，因为我们想要清理的只有我们的按钮！为此，使用以下代码，将其添加到
    `src/Todo/Todo.js`：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, hop right on down to the `render()` function in `src/Todo/Todo.js`, where
    we''ll wrap our buttons inside of a `ButtonGroup` component, and change each of
    the `button` tags to `Button` components:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，直接进入 `src/Todo/Todo.js` 中的 `render()` 函数，我们将把我们的按钮包裹在 `ButtonGroup` 组件中，并将每个
    `button` 标签更改为 `Button` 组件：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Save and reload, and we should now see our project looking like this instead:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并重新加载，现在我们应该看到我们的项目看起来像这样：
- en: '![](img/e4a94cf8-dba5-478b-9f82-2106e73be7bb.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4a94cf8-dba5-478b-9f82-2106e73be7bb.png)'
- en: One thing we haven't fixed yet are our tests! We should now see a large number
    of failing tests, so we'll need to go in and fix them specifically!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有修复的一件事是我们的测试！现在我们应该看到大量的失败测试，所以我们需要进去并专门修复它们！
- en: Making our tests pass again
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们的测试再次通过
- en: 'Since we''ve changed a bunch of `input` and `button` tags and we have tests
    that are specifically looking for them, we''ll need to hop into `src/NewTodo/NewTodo.test.js`
    first, and change every instance of `.find("input")` and `.find("button")` to
    `.find("Input")`, and `.find("Button")`. We''ll start with our first test, which
    tests the form:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们更改了许多 `input` 和 `button` 标签，并且我们有针对它们的特定测试，因此我们需要首先进入 `src/NewTodo/NewTodo.test.js`，并将每个
    `.find("input")` 和 `.find("button")` 实例更改为 `.find("Input")` 和 `.find("Button")`。我们将从我们的第一个测试开始，该测试测试表单：
- en: '[PRE40]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We''ll also want to modify the next test that relies on simulating `button`
    clicks:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想要修改下一个依赖于模拟 `button` 点击的测试：
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We''re almost done with this file! We have one more place where we''re attempting
    to simulate a `button` click, so we''ll need to clean up that test too! We can
    do this as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了这个文件！我们还有一个地方正在尝试模拟一个 `button` 点击，所以我们需要清理这个测试！我们可以这样做：
- en: '[PRE42]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'After saving and reloading, we should see fewer failed tests and can then move
    on to the next test suite that''s failing! We can do this as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并重新加载后，我们应该看到失败的测试更少，然后我们可以继续进行下一个失败的测试套件！我们可以这样做：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'From the previous code snippet, we can see that the other failing test suite
    is in `src/Todo/Todo.test.js`, so let''s fix that up too in the same way! Scroll
    to the very bottom of the file and change the two failing tests that are looking
    for `button` tags instead of `Button` components:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的代码片段中，我们可以看到其他失败的测试套件位于 `src/Todo/Todo.test.js` 中，所以我们也以同样的方式修复它！滚动到文件的底部并更改两个失败的测试，这些测试正在寻找
    `button` 标签而不是 `Button` 组件：
- en: '[PRE44]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Save the file, and when the tests come back up (you may have to hit *U* to
    update the `Snapshots` as well, don''t forget), we should see a fully green test
    suite again, as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，当测试重新开始（你可能需要按 *U* 更新 `Snapshots`，别忘了），我们应该再次看到一个完全绿色的测试套件，如下所示：
- en: '[PRE45]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We're *almost* there, but remember the new functionality that we added to our
    project to mark certain `Todo` items as `critical`? We never added new tests for
    it! The good news is that there's only one more test we need to write for it!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们 *几乎* 到达目的地了，但记得我们为项目添加的新功能，用于标记某些 `Todo` 项为 `critical` 吗？我们从未为它添加新的测试！好消息是，我们只需要再写一个测试！
- en: 'This test should be almost identical to the test for seeing when `Todo` items
    are clicked and marked as done; except, this time, we''re looking for the `Mark
    Critical` button, where we''ll simulate a click on that button. After the button
    is clicked, we should expect to see the `critical` property on the `state` of
    the `component` change from `false` to `true`, which also means we''ll start off
    with a sanity check in our test to make sure the `critical` property starts off
    `false` *before* we click on the button, and ends as `true` after the button click!
    This is as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试应该几乎与查看 `Todo` 项被点击并标记为完成的测试相同；但是，这次我们正在寻找 `Mark Critical` 按钮，我们将模拟点击该按钮。按钮点击后，我们应该期望看到
    `component` 的 `critical` 属性从 `false` 变为 `true`，这也意味着我们在点击按钮之前，将在测试中进行一个健全性检查，以确保
    `critical` 属性开始时为 `false`，并在按钮点击后变为 `true`！如下所示：
- en: '[PRE46]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Get into the habit of writing these sanity checks in your tests, as they will
    help you avoid writing tests that mistakenly assume default states and lead to
    useless tests in the future!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的测试中养成编写这些健全性检查的习惯，因为这将帮助你避免编写错误地假设默认状态的测试，并在未来导致无用的测试！
- en: 'That''s it! Our design is clean, our test suite is green, and our project is
    moving forward at an awesome pace! We''ll rerun our test suite again just to make
    sure that everything is still green, but if it is, then we can safely move on
    to the next challenge:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们的设计很干净，我们的测试套件是绿色的，我们的项目正以惊人的速度前进！我们将再次运行测试套件，以确保一切仍然绿色，但如果它是的话，那么我们可以安全地继续到下一个挑战：
- en: '[PRE47]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've added some nice new functionality to our project but didn't really have
    to engage in a lot of the headache and setup (and heartache, I suppose) that comes
    with adding two new CSS processors to our project! We have CSS Modules and SASS
    playing nicely in our Create React App project and have had to install a single
    new dependency. We have them playing nicely *together* even, which is an even
    greater achievement!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为项目添加了一些很棒的新功能，但真的不必参与很多头痛和设置（我想，还有心痛）的工作，这些工作伴随着向项目中添加两个新的 CSS 处理器！我们在 Create
    React App 项目中让 CSS Modules 和 SASS 顺利地协同工作，并且只需要安装一个新依赖项。我们甚至让它们 *一起* 顺利工作，这是一个更大的成就！
- en: We've cleaned up our code a little bit and started grouping things together,
    and introduced concepts such as shared SASS files to store variables for colors
    and values, which allows us to change a color, for example, in one place and have
    it affect everywhere the variable appears!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍微清理了一下代码，并开始将事物分组在一起，引入了如共享 SASS 文件等概念来存储颜色和值等变量，这使得我们可以在一个地方更改颜色，例如，它将影响变量出现的所有地方！
- en: Our code is cleaner, our designer is happy, we're happy, and we can continue
    to push forward on our project without having to slow down. We've never had to
    dive into configuration files, or do anything much more complicated than installing
    a dependency! This is yet another massive win in favor of Create React App!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码更干净，我们的设计师很高兴，我们也很高兴，我们可以继续推进我们的项目，而无需放慢速度。我们从未需要深入研究配置文件，或做任何比安装依赖项更复杂的事情！这是
    Create React App 的又一个巨大胜利！
- en: In the next chapter, we'll dive into how to build a simulated backend to your
    frontend project via Create React App's incredibly nice proxy API functionality!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入了解如何通过 Create React App 的非常棒的代理 API 功能构建前端项目的模拟后端！
