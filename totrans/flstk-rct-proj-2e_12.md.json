["```js\nitemName: {\n    type: String,\n    trim: true,\n    required: 'Item name is required'\n},\ndescription: {\n    type: String,\n    trim: true\n},\n```", "```js\nimage: { \n    data: Buffer, \n    contentType: String \n},\n```", "```js\nseller: {\n    type: mongoose.Schema.ObjectId, \n    ref: 'User'\n},\n```", "```js\nupdated: Date,\ncreated: { \n    type: Date, \n    default: Date.now \n},\n```", "```js\nbidStart: {\n    type: Date,\n    default: Date.now\n},\n```", "```js\nbidEnd: {\n   type: Date,\n   required: \"Auction end time is required\"\n},\n```", "```js\nstartingBid: { \n    type: Number, \n    default: 0 \n},\n```", "```js\nbids: [{\n    bidder: {type: mongoose.Schema.ObjectId, ref: 'User'},\n    bid: Number,\n    time: Date\n}]\n```", "```js\n\nrouter.route('/api/auctions/by/:userId')\n  .post(authCtrl.requireSignin, authCtrl.hasAuthorization, \n        userCtrl.isSeller, auctionCtrl.create)\n```", "```js\nrouter.param('userId', userCtrl.userByID) \n```", "```js\napp.use('/', auctionRoutes)\n```", "```js\nconst create = (req, res) => {\n  let form = new formidable.IncomingForm()\n  form.keepExtensions = true\n  form.parse(req, async (err, fields, files) => {\n    if (err) {\n      res.status(400).json({\n        message: \"Image could not be uploaded\"\n      })\n    }\n    let auction = new Auction(fields)\n    auction.seller= req.profile\n    if(files.image){\n      auction.image.data = fs.readFileSync(files.image.path)\n      auction.image.contentType = files.image.type\n    }\n    try {\n      let result = await auction.save()\n      res.status(200).json(result)\n    }catch (err){\n      return res.status(400).json({\n        error: errorHandler.getErrorMessage(err)\n      })\n    }\n  })\n}\n```", "```js\nconst create = (params, credentials, auction) => {\n  return fetch('/api/auctions/by/'+ params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: auction\n    })\n    .then((response) => {\n      return response.json()\n    }).catch((err) => console.log(err))\n}\n```", "```js\n<TextField\n   label=\"Auction Start Time\"\n   type=\"datetime-local\"\n   defaultValue={defaultStartTime}\n   onChange={handleChange('bidStart')}\n/>\n<TextField\n   label=\"Auction End Time\"\n   type=\"datetime-local\"\n   defaultValue={defaultEndTime}\n   onChange={handleChange('bidEnd')}\n/>\n```", "```js\nconst currentDate = new Date()\nconst defaultStartTime = getDateString(currentDate)\nconst defaultEndTime = getDateString(new Date(currentDate.setHours(currentDate.getHours()+1)))\n```", "```js\nconst getDateString = (date) => {\n  let year = date.getFullYear()\n  let day = date.getDate().toString().length === 1 ? '0' + date.getDate() : date.getDate()\n  let month = date.getMonth().toString().length === 1 ? '0' + (date.getMonth()+1) : date.getMonth() + 1\n  let hours = date.getHours().toString().length === 1 ? '0' + date.getHours() : date.getHours()\n  let minutes = date.getMinutes().toString().length === 1 ? '0' + date.getMinutes() : date.getMinutes()\n  let dateString = `${year}-${month}-${day}T${hours}:${minutes}`\n  return dateString\n}\n```", "```js\nif(values.bidEnd < values.bidStart){\n   setValues({...values, error: \"Auction cannot end before it starts\"})\n}\n```", "```js\n<PrivateRoute path=\"/auction/new\" component={NewAuction}/>\n```", "```js\nrouter.route('/api/auctions')\n  .get(auctionCtrl.listOpen)\n```", "```js\nconst listOpen = async (req, res) => {\n  try {\n    let auctions = await Auction.find({ bidEnd: { $gt: new Date() }})\n                                .sort('bidStart')\n                                .populate('seller', '_id name')\n                                .populate('bids.bidder', '_id name')\n    res.json(auctions)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nrouter.route('/api/auctions/bid/:userId')\n  .get(auctionCtrl.listByBidder)\n```", "```js\nconst listByBidder = async (req, res) => {\n  try {\n    let auctions = await Auction.find({'bids.bidder': req.profile._id})\n                                .populate('seller', '_id name')\n                                .populate('bids.bidder', '_id name')\n    res.json(auctions)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nrouter.route('/api/auctions/by/:userId')\n  .get(authCtrl.requireSignin, authCtrl.hasAuthorization, \n       auctionCtrl.listBySeller)\n```", "```js\nconst listBySeller = async (req, res) => {\n  try {\n    let auctions = await Auction.find({seller: req.profile._id})\n                                .populate('seller', '_id name')\n                                .populate('bids.bidder', '_id name')\n    res.json(auctions)\n  } catch (err){\n    return res.status(400).json({\n      error: errorHandler.getErrorMessage(err)\n    })\n  }\n}\n```", "```js\nexport default function Auctions(props){\n    return (\n     <List dense>\n        {props.auctions.map((auction, i) => {\n            return <span key={i}>\n              <ListItem button>\n                <ListItemAvatar>\n                  <Avatar src={'/api/auctions/image/'+auction._id+\"?\" \n                                        + new Date().getTime()}/>\n                </ListItemAvatar>\n                <ListItemText primary={auction.itemName} \n                  secondary={auctionState(auction}/>\n                <ListItemSecondaryAction>\n                    <Link to={\"/auction/\" + auction._id}>\n                      <IconButton aria-label=\"View\" color=\"primary\">\n                        <ViewIcon/>\n                      </IconButton>\n                    </Link>\n                </ListItemSecondaryAction>\n              </ListItem>\n              <Divider/>\n            </span>})}\n        </List>\n    )\n}\n```", "```js\nconst currentDate = new Date()  \nconst auctionState = (auction)=>{\n    return ( <span>\n      {currentDate < new Date(auction.bidStart) && \n        `Auction Starts at ${new Date(auction.bidStart).toLocaleString()}`}\n      {currentDate > new Date(auction.bidStart) && \n        currentDate < new Date(auction.bidEnd) && <> \n            {`Auction is live | ${auction.bids.length} bids |`} \n            {showTimeLeft(new Date(auction.bidEnd))}\n          </>}\n      {currentDate > new Date(auction.bidEnd) && \n            `Auction Ended | ${auction.bids.length} bids `} \n      {currentDate > new Date(auction.bidStart) && auction.bids.length> 0 && ` \n        | Last bid: $ ${auction.bids[0].bid}`}\n      </span>\n    )\n}\n```", "```js\nconst showTimeLeft = (date) => {\n    let timeLeft = calculateTimeLeft(date)\n    return !timeLeft.timeEnd && <span>\n      {timeLeft.days != 0 && `${timeLeft.days} d `} \n      {timeLeft.hours != 0 && `${timeLeft.hours} h `} \n      {timeLeft.minutes != 0 && `${timeLeft.minutes} m `} \n      {timeLeft.seconds != 0 && `${timeLeft.seconds} s`} left\n    </span>\n}\n```", "```js\nconst calculateTimeLeft = (date) => {\n  const difference = date - new Date()\n  let timeLeft = {}\n\n  if (difference > 0) {\n    timeLeft = {\n      days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n      minutes: Math.floor((difference / 1000 / 60) % 60),\n      seconds: Math.floor((difference / 1000) % 60),\n      timeEnd: false\n    }\n  } else {\n      timeLeft = {timeEnd: true}\n  }\n  return timeLeft\n}\n```", "```js\n<ListItemSecondaryAction>\n    <Link to={\"/auction/\" + auction._id}>\n       <IconButton aria-label=\"View\" color=\"primary\">\n          <ViewIcon/>\n       </IconButton>\n    </Link>\n { auth.isAuthenticated().user && \n         auth.isAuthenticated().user._id == auction.seller._id &&\n (<>\n <Link to={\"/auction/edit/\" + auction._id}>\n <IconButton aria-label=\"Edit\" color=\"primary\">\n <Edit/>\n </IconButton>\n </Link>}\n <DeleteAuction auction={auction} onRemove={props.removeAuction}/>\n </>)\n }\n</ListItemSecondaryAction>\n```", "```js\nrouter.route('/api/auctions/:auctionId')\n  .put(authCtrl.requireSignin, auctionCtrl.isSeller, auctionCtrl.update)\n  .delete(authCtrl.requireSignin, auctionCtrl.isSeller, auctionCtrl.remove)\nrouter.param('auctionId', auctionCtrl.auctionByID)\n```", "```js\nconst auctionByID = async (req, res, next, id) => {\n  try {\n    let auction = await Auction.findById(id)\n                               .populate('seller', '_id name')\n                               .populate('bids.bidder', '_id name').exec()\n    if (!auction)\n      return res.status('400').json({\n        error: \"Auction not found\"\n      })\n    req.auction = auction\n    next()\n  } catch (err) {\n    return res.status('400').json({\n      error: \"Could not retrieve auction\"\n    })\n  }\n}\n```", "```js\nconst isSeller = (req, res, next) => {\n  const isSeller = req.auction && req.auth && req.auction.seller._id == req.auth._id\n  if(!isSeller){\n    return res.status('403').json({\n      error: \"User is not authorized\"\n    })\n  }\n  next()\n}\n```", "```js\nrouter.route('/api/auction/:auctionId')\n  .get(auctionCtrl.read)\n```", "```js\nconst read = (req, res) => {\n  req.auction.image = undefined\n  return res.json(req.auction)\n}\n```", "```js\n<Route path=\"/auction/:auctionId\" component={Auction}/>\n```", "```js\nconst currentDate = new Date()\n...\n<span>\n    {currentDate < new Date(auction.bidStart) && 'Auction Not Started'}\n    {currentDate > new Date(auction.bidStart) && currentDate < new Date(auction.bidEnd) && 'Auction Live'}\n    {currentDate > new Date(auction.bidEnd) && 'Auction Ended'}\n</span>\n```", "```js\n<Grid item xs={7} sm={7}>\n    {currentDate > new Date(auction.bidStart) \n    ? (<>\n        <Timer endTime={auction.bidEnd} update={update}/> \n        { auction.bids.length > 0 && \n            <Typography component=\"p\" variant=\"subtitle1\">\n                {` Last bid: $ ${auction.bids[0].bid}`}\n            </Typography>\n        }\n        { !auth.isAuthenticated() && \n            <Typography>\n                Please, <Link to='/signin'>\n                    sign in</Link> to place your  bid.\n            </Typography> \n        }\n        { auth.isAuthenticated() && \n            <Bidding auction={auction} justEnded=\n                 {justEnded} updateBids={updateBids}/> \n        }\n      </>)\n    : <Typography component=\"p\" variant=\"h6\"> \n        {`Auction Starts at ${new Date(auction.bidStart).toLocaleString()}`}\n      </Typography>\n    }\n</Grid>\n```", "```js\n<Timer endTime={auction.bidEnd} update={update}/> \n```", "```js\nconst [justEnded, setJustEnded] = useState(false)\nconst updateBids = () => {\n    setJustEnded(true)\n}\n```", "```js\nexport default function Timer (props) {\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft(new Date(props.endTime)))\n    ...\n}\n```", "```js\nuseEffect(() => {\n     let timer = null\n     if(!timeLeft.timeEnd){\n         timer = setTimeout(() => {\n                     setTimeLeft(calculateTimeLeft(new Date(props.endTime)))\n                 }, 1000)\n     }else{\n         props.update()\n     }\n     return () => {\n         clearTimeout(timer)\n    }\n})\n```", "```js\n    return (<div className={props.style}>\n        {!timeLeft.timeEnd ? \n            <Typography component=\"p\" variant=\"h6\" >\n              {timeLeft.days != 0 && `${timeLeft.days} d `} \n              {timeLeft.hours != 0 && `${timeLeft.hours} h `} \n              {timeLeft.minutes != 0 && `${timeLeft.minutes} m `} \n              {timeLeft.seconds != 0 && `${timeLeft.seconds} s`} left \n              <span style={{fontSize:'0.8em'}}>\n                {`(ends at ${new Date(props.endTime).toLocaleString()})`}\n              </span>\n            </Typography> : \n            <Typography component=\"p\" variant=\"h6\">Auction ended</Typography>\n        }\n        </div>\n    )\n```", "```js\nyarn add socket.io socket.io-client\n```", "```js\nimport bidding from './controllers/bidding.controller'\n\nconst server = app.listen(config.port, (err) => {\n  if (err) {\n    console.log(err)\n  }\n  console.info('Server started on port %s.', config.port)\n})\n\nbidding(server)\n```", "```js\nexport default (server) => {\n    const io = require('socket.io').listen(server)\n    io.on('connection', function(socket){\n        socket.on('join auction room', data => {\n            socket.join(data.room);\n        })\n        socket.on('leave auction room', data => {\n            socket.leave(data.room)\n        })\n    })\n}\n```", "```js\n<Bidding auction={auction} justEnded={justEnded} updateBids={updateBids}/>\n```", "```js\nconst io = require('socket.io-client')\nconst socket = io() \n\nexport default function Bidding (props) {\n    useEffect(() => {\n        socket.emit('join auction room', {room: props.auction._id})\n        return () => {\n            socket.emit('leave auction room', {\n                room: props.auction._id\n            })\n        }\n    }, [])\n    ...\n}\n```", "```js\nconst [bid, setBid] = useState('')\n\nconst handleChange = event => {\n        setBid(event.target.value)\n}\nconst minBid = props.auction.bids && props.auction.bids.length> 0 \n                ? props.auction.bids[0].bid \n                : props.auction.startingBid\n```", "```js\n{!props.justEnded && new Date() < new Date(props.auction.bidEnd) && <>\n    <TextField label=\"Your Bid ($)\" \n               value={bid} onChange={handleChange} \n               type=\"number\" margin=\"normal\"\n               helperText={`Enter $${Number(minBid)+1} or more`}/><br/>\n    <Button variant=\"contained\" color=\"secondary\" \n            disabled={bid < (minBid + 1)} \n            onClick={placeBid}>Place Bid\n    </Button><br/>\n</>}\n```", "```js\nconst placeBid = () => {\n    const jwt = auth.isAuthenticated()    \n      let newBid = {\n            bid: bid,\n            time: new Date(),\n            bidder: jwt.user\n      }\n      socket.emit('new bid', {\n            room: props.auction._id,\n            bidInfo: newBid\n      })\n      setBid('')\n}\n```", "```js\nio.on('connection', function(socket){\n    ...\n    socket.on('new bid', data => {\n        bid(data.bidInfo, data.room)\n    })\n})\n```", "```js\nconst bid = async (bid, auction) => {\n   try {\n     let result = await Auction.findOneAndUpdate({_id:auction, $or: [{'bids.0.bid':{$lt:bid.bid}},{bids:{$eq:[]}} ]}, \n                            {$push: {bids: {$each:[bid], $position: 0}}}, \n                            {new: true})\n                            .populate('bids.bidder', '_id name')\n                            .populate('seller', '_id name')\n                            .exec()\n     io.to(auction).emit('new bid', result)\n   } catch(err) {\n     console.log(err)\n   }\n}\n```", "```js\nuseEffect(() => {\n   socket.on('new bid', payload => {\n     props.updateBids(payload)\n   })\n   return () => {\n     socket.off('new bid')\n   }\n})\n```", "```js\nconst updateBids = (updatedAuction) => {\n    setAuction(updatedAuction)\n}\n```", "```js\n<div>\n   <Typography variant=\"h6\"> All bids </Typography>\n   <Grid container spacing={4}>\n       <Grid item xs={3} sm={3}>\n            <Typography variant=\"subtitle1\" \n               color=\"primary\">Bid Amount</Typography>\n       </Grid>\n       <Grid item xs={5} sm={5}>\n            <Typography variant=\"subtitle1\" \n                color=\"primary\">Bid Time</Typography>\n       </Grid>\n       <Grid item xs={4} sm={4}>\n          <Typography variant=\"subtitle1\"\n             color=\"primary\">Bidder</Typography>\n       </Grid>\n   </Grid> \n   {props.auction.bids.map((item, index) => {\n       return <Grid container spacing={4} key={index}>\n                 <Grid item xs={3} sm={3}>\n                    <Typography variant=\"body2\">${item.bid}  </Typography>\n                 </Grid>\n                 <Grid item xs={5} sm={5}>\n                    <Typography variant=\"body2\">\n                        {new Date(item.time).toLocaleString()}\n                    </Typography></Grid>\n                 <Grid item xs={4} sm={4}>\n                    <Typography variant=\"body2\">{item.bidder.name} </Typography>\n                 </Grid>\n              </Grid>\n   })}\n</div>\n```"]