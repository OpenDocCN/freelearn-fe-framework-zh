- en: <st c="0">6</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">6</st>
- en: <st c="2">Exploring End-to-End Testing with Protractor, Cypress, and Playwright</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">使用 Protractor、Cypress 和 Playwright 探索端到端测试</st>
- en: <st c="71">In software development,</st> **<st c="97">end-to-end</st>** <st
    c="107">(</st>**<st c="109">E2E</st>**<st c="112">) testing plays a crucial role
    in ensuring the integration and functionality of an application from start to
    finish.</st> <st c="230">E2E testing encompasses the entire application flow,
    simulating interactions with the real user to verify that the application functions
    as intended in various</st> <st c="390">usage scenarios.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="71">在软件开发中，**<st c="97">端到端</st>** <st c="107">(</st>**<st c="109">E2E</st>**<st
    c="112">) 测试在确保应用程序从开始到结束的集成和功能方面发挥着至关重要的作用。</st> <st c="230">端到端测试涵盖了整个应用程序流程，模拟与真实用户的交互，以验证应用程序在各种</st>
    <st c="390">使用场景中是否按预期工作。</st>
- en: <st c="406">E2E testing offers a multitude of benefits that contribute to the
    overall quality and reliability of software applications.</st> <st c="531">E2E
    testing identifies and eliminates usability issues that can hinder user satisfaction</st>
    <st c="620">and adoption.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="406">端到端测试提供了许多好处，有助于提高软件应用程序的整体质量和可靠性。</st> <st c="531">端到端测试可以发现并消除可能阻碍用户满意度和采用率的可用性问题。</st>
- en: <st c="633">By thoroughly testing the application’s integrated components, E2E
    testing reduces the likelihood of unexpected errors or disruptions during actual
    use.</st> <st c="787">E2E testing enables early identification of defects, minimizing
    the time and costs associated with problem resolution later in the development
    cycle.</st> <st c="937">Proactive fault detection with E2E testing can significantly
    reduce long-term</st> <st c="1015">maintenance costs.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="633">通过彻底测试应用程序的集成组件，端到端测试减少了在实际使用过程中出现意外错误或中断的可能性。</st> <st c="787">端到端测试能够早期发现缺陷，最大限度地减少在开发周期后期解决问题所需的时间和成本。</st>
    <st c="937">端到端测试的主动故障检测可以显著降低长期</st> <st c="1015">维护成本。</st>
- en: '<st c="1033">Several powerful tools are available to facilitate E2E testing,
    each with its own strengths and features.</st> <st c="1140">We’ll take a look
    at three major options: Protractor, Cypress,</st> <st c="1203">and Playwright.</st>'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1033">有几种强大的工具可用于简化端到端测试，每个工具都有其独特的优势和功能。</st> <st c="1140">我们将探讨三个主要选项：Protractor、Cypress、Playwright。</st>
- en: <st c="1218">In this chapter, we will explore the theory behind E2E testing,
    the benefits of E2E testing after long and deep analysis, and the philosophy behind
    some E2E tools such as Protractor, Cypress,</st> <st c="1411">and Playwright.</st>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1218">在本章中，我们将探讨端到端测试的理论，经过长期和深入的分析后端到端测试的优势，以及一些端到端工具（如 Protractor、Cypress、Playwright）背后的哲学。</st>
- en: <st c="1426">In summary, here are the main topics that will be covered in</st>
    <st c="1488">this chapter:</st>
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1426">总结，以下是本章将涵盖的主要主题：</st>
- en: <st c="1501">Discovering</st> <st c="1514">E2E testing</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1501">发现</st> <st c="1514">端到端测试</st>
- en: <st c="1525">Analyzing the benefits of E2E testing in</st> <st c="1567">a project</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1947">分析在</st> <st c="1567">项目中</st> <st c="1525">E2E 测试的优势</st>
- en: <st c="1576">Exploring the different tools that can be used for E2E testing
    such as Protractor, Cypress,</st> <st c="1669">and Playwright</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1576">探索可用于端到端测试的不同工具，如 Protractor、Cypress、Playwright</st>
- en: <st c="1683">Technical requirements</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1683">技术要求</st>
- en: <st c="1706">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as the following</st> <st c="1868">technical requirements:</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1706">为了跟随本章中的示例和练习，你需要对 Angular 和 TypeScript 有基本的了解，以及以下</st> <st c="1868">技术要求：</st>
- en: <st c="1891">Node.js and npm installed on</st> <st c="1921">your computer</st>
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1891">在你的计算机上安装 Node.js 和 npm</st>
- en: <st c="1934">Angular CLI</st> <st c="1947">installed globally</st>
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1934">全局安装 Angular CLI</st>
- en: <st c="1965">A code editor, such as Visual Studio Code, installed on</st> <st
    c="2022">your computer</st>
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1965">在你的计算机上安装代码编辑器，例如 Visual Studio Code</st>
- en: <st c="2035">Understanding E2E testing</st>
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2035">理解端到端测试</st>
- en: <st c="2061">E2E testing is an in-depth method of software testing that evaluates
    the entire application flow from the user’s point of view, ensuring that all components
    work as expected and that the software functions correctly in real-life scenarios.</st>
    <st c="2302">It encompasses testing of the application’s user interface, backend
    systems, external APIs, and data interactions to ensure a seamless and</st> <st
    c="2441">consistent user experience.</st> <st c="2469">Unlike unit testing, which
    focuses on individual components, E2E testing examines the whole application as
    a unified entity, ensuring that all components work in harmony to deliver the</st>
    <st c="2654">desired functionality.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2061">端到端测试是一种从用户角度评估整个应用程序流程的软件测试方法，确保所有组件按预期工作，并且软件在现实场景中能够正确运行。</st>
    <st c="2302">它包括对应用程序的用户界面、后端系统、外部API和数据交互的测试，以确保无缝和</st> <st c="2441">一致的用户体验。</st>
    <st c="2469">与关注单个组件的单元测试不同，端到端测试将整个应用程序作为一个统一的实体来检查，确保所有组件协同工作以提供</st> <st c="2654">所需的功能。</st>
- en: <st c="2676">Discovering the benefits of E2E testing</st>
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2676">发现端到端测试的好处</st>
- en: <st c="2716">E2E testing offers a myriad</st> <st c="2744">of benefits, making
    it an invaluable tool for software</st> <st c="2800">development teams:</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2716">端到端测试提供了众多好处，使其成为软件开发团队的无价工具：</st>
- en: '**<st c="2818">Early detection of defects</st>**<st c="2845">: E2E testing
    enables defects to be detected early in the development cycle, reducing the cost
    and effort required to correct</st> <st c="2972">them later.</st>'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2818">早期发现缺陷</st>**<st c="2845">：端到端测试能够在开发周期的早期发现缺陷，减少后期纠正所需的成本和努力。</st>'
- en: '**<st c="2983">Enhanced user experience</st>**<st c="3008">: E2E testing is
    a method of ensuring that a software application works as intended from the user’s
    point of view.</st> <st c="3124">This approach improves the overall user experience
    and minimizes the risk</st> <st c="3198">of dissatisfaction.</st>'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2983">增强用户体验</st>**<st c="3008">：端到端测试是一种确保软件应用从用户角度出发按预期工作的方法。</st>
    <st c="3124">这种方法提高了整体用户体验并最小化了不满意的风险</st> <st c="3198">。</st>'
- en: '**<st c="3217">Increased confidence in software quality</st>**<st c="3258">:
    E2E testing inspires confidence in software quality, reducing the risk of unforeseen
    problems in production and preserving the reputation of the software</st> <st
    c="3415">development team.</st>'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3217">提高软件质量信心</st>**<st c="3258">：端到端测试增强了软件质量的信心，降低了生产中意外问题的风险，并保护了软件开发团队的声誉</st>
    <st c="3415">。</st>'
- en: '**<st c="3432">Streamlined development process</st>**<st c="3464">: E2E testing
    can be automated, streamlining the development process, facilitating</st> **<st
    c="3548">continuous integration and continuous delivery</st>** <st c="3594">(</st>**<st
    c="3596">CI/CD</st>**<st c="3601">) practices, and</st> <st c="3619">enabling
    software to be released faster and</st> <st c="3663">more efficiently.</st>'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3432">简化开发流程</st>**<st c="3464">：端到端测试可以自动化，简化开发流程，促进</st> **<st c="3548">持续集成和持续交付</st>**
    <st c="3594">(</st>**<st c="3596">CI/CD</st>**<st c="3601">)实践，并</st> <st c="3619">使软件能够更快、更高效地发布。</st>'
- en: <st c="3680">In the next section, we</st> <st c="3705">will learn how to implement</st>
    <st c="3733">E2E tests.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3680">在下一节中，我们将学习如何实现</st> <st c="3705">端到端测试。</st>
- en: <st c="3743">Exploring different approaches to E2E testing</st>
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3743">探索不同的端到端测试方法</st>
- en: '<st c="3789">E2E testing encompasses two main strategies: script-based testing
    and exploratory testing.</st> <st c="3881">Script-based testing relies on automated
    scripts to execute test cases, ensuring the consistency, repeatability, and</st>
    <st c="3997">efficiency of test procedures.</st> <st c="4029">On the other hand,
    exploratory testing is a practical approach that involves manually testing the
    application while exploring different scenarios.</st> <st c="4176">Let’s take
    an in-depth look at each of the</st> <st c="4219">two approaches:</st>'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3789">端到端测试包括两种主要策略：基于脚本的测试和探索性测试。</st> <st c="3881">基于脚本的测试依赖于自动化脚本来执行测试用例，确保测试过程的连贯性、可重复性和</st>
    <st c="3997">效率。</st> <st c="4029">另一方面，探索性测试是一种实际的方法，涉及在探索不同场景的同时手动测试应用程序。</st>
    <st c="4176">让我们深入探讨这两种方法中的每一种：</st> <st c="4219">探索不同的端到端测试方法</st>
- en: '**<st c="4234">Script-based testing</st>**<st c="4255">: Script-based testing
    is a software testing methodology in which automated scripts are</st> <st c="4344">used
    to execute test cases.</st> <st c="4372">This approach guarantees the consistency,
    repeatability, and efficiency of test procedures, making it a reliable tool for
    ensuring that software applications</st> <st c="4530">run smoothly.</st>'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4234">基于脚本的测试</st>**<st c="4255">：基于脚本的测试是一种软件测试方法，其中使用自动化脚本来执行测试用例。</st>
    <st c="4344">这种方法保证了测试流程的一致性、可重复性和效率，使其成为确保软件应用程序平稳运行的可信工具。</st>'
- en: <st c="4543">There are several popular frameworks for script-based testing,
    including Protractor, Cypress, and Playwright.</st> <st c="4654">Each of these
    frameworks has its own features</st> <st c="4700">and benefits:</st>
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="4543">有几个流行的基于脚本的测试框架，包括Protractor、Cypress和Playwright。</st> <st c="4654">这些框架各有其特点和优势：</st>
- en: '**<st c="4713">Protractor</st>** <st c="4724">is an E2E testing</st> <st c="4742">framework
    for Angular and AngularJS applications.</st> <st c="4793">It aims to simplify
    the process of setting up tests, making them more readable and producing results
    that are easier</st> <st c="4910">to understand.</st>'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4713">Protractor</st>** <st c="4724">是一个用于Angular和AngularJS应用程序的端到端测试框架。</st>
    <st c="4742">它的目标是简化测试设置过程，使测试更易于阅读，并产生更容易理解的结果。</st>'
- en: '**<st c="4924">Cypress</st>** <st c="4932">is a next-generation frontend testing
    tool designed for the modern web.</st> <st c="5005">It provides</st> <st c="5016">a
    complete testing solution, including the ability to write tests directly in JavaScript,
    without the need for additional preprocessors or compilers.</st> <st c="5167">Cypress
    is renowned for its ease of use and</st> <st c="5211">rapid installation.</st>'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4924">Cypress</st>** <st c="4932">是一款为现代网络设计的下一代前端测试工具。</st> <st c="5005">它提供了一套完整的测试解决方案，包括直接在JavaScript中编写测试的能力，无需额外的预处理器或编译器。</st>
    <st c="5167">Cypress以其易用性和快速安装而闻名。</st>'
- en: '**<st c="5230">Playwright</st>**<st c="5241">, developed and maintained by
    Microsoft, is an open source, Node.js-based automation</st> <st c="5325">framework
    for E2E testing.</st> <st c="5353">It was created to meet the need for automated
    E2E testing across multiple browsers.</st> <st c="5437">Playwright’s main objective
    is to run on the main browser engines – Chromium, WebKit, and Firefox.</st> <st
    c="5536">It offers extensive, native mobile testing capabilities, supporting mobile
    automation testing on Android and</st> <st c="5645">iOS platforms.</st>'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5230">Playwright</st>**<st c="5241">，由微软开发和维护，是一个开源的基于Node.js的端到端测试自动化框架。</st>
    <st c="5325">它被创建出来是为了满足跨多个浏览器进行自动化端到端测试的需求。</st> <st c="5353">Playwright的主要目标是运行在主要的浏览器引擎上——Chromium、WebKit和Firefox。</st>
    <st c="5536">它提供了广泛的本地移动测试功能，支持在Android和</st> <st c="5645">iOS平台上的移动自动化测试。</st>'
- en: '**<st c="5659">Exploratory testing</st>**<st c="5679">: Exploratory testing
    is a dynamic and flexible approach to software testing that involves the</st>
    <st c="5774">tester actively exploring the application and trying out different
    scenarios, inputs, and interactions to identify bugs and problems.</st> <st c="5909">Unlike</st>
    <st c="5916">script-based testing, which follows predefined test cases and steps,
    exploratory testing is based on the tester’s curiosity, creativity,</st> <st c="6053">and</st>
    <st c="6056">intuition.</st>'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="5659">探索性测试</st>**<st c="5679">：探索性测试是一种动态灵活的软件测试方法，涉及测试人员积极探索应用程序并尝试不同的场景、输入和交互来识别错误和问题。</st>
    <st c="5774">与基于脚本的测试不同，后者遵循预定义的测试用例和步骤，探索性测试基于测试人员的好奇心、创造力和直觉。</st>'
- en: <st c="6067">This approach is particularly useful when there are many unknowns
    about exactly what the software is supposed to do or how it should behave in</st>
    <st c="6211">real-life situations.</st>
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="6067">这种方法在关于软件确切应该做什么或在实际情况下应该如何表现存在许多未知因素时特别有用。</st> <st c="6211">在现实生活中的情况下。</st>
- en: <st c="6232">Exploratory testing is often used when the application is complex
    or constantly evolving.</st> <st c="6323">It is also useful when rapid feedback
    is needed, when requirements are unclear, or when time is of</st> <st c="6422">the
    essence.</st>
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="6232">探索性测试通常在应用程序复杂或不断演变时使用。</st> <st c="6323">当需要快速反馈、需求不明确或时间紧迫时，它也非常有用。</st>
    <st c="6422">的精髓。</st>
- en: <st c="6434">There are different types of exploratory testing – free-style testing,
    scenario-based testing, and</st> <st c="6534">strategy-based testing:</st>
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="6434">探索性测试有不同的类型——自由式测试、基于场景的测试和</st> <st c="6534">基于策略的测试：</st>
- en: '**<st c="6557">Free-style testing</st>**<st c="6576">: This is</st> <st c="6587">useful
    when you need to quickly familiarize yourself with</st> <st c="6645">the application</st>'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6557">自由式测试</st>**<st c="6576">：这在您需要快速熟悉</st> <st c="6587">应用程序</st>
    <st c="6645">时很有用</st>'
- en: '**<st c="6660">Scenario-based testing</st>**<st c="6683">: This focuses</st>
    <st c="6698">on real-world</st> <st c="6713">usage scenarios</st>'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6660">基于场景的测试</st>**<st c="6683">：这侧重于</st> <st c="6698">现实世界的</st>
    <st c="6713">使用场景</st>'
- en: '**<st c="6728">Strategy-based testing</st>**<st c="6751">: This combines</st>
    <st c="6768">exploratory testing with well-known</st> <st c="6804">testing methods</st>'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6728">基于策略的测试</st>**<st c="6751">：这结合了</st> <st c="6768">探索性测试</st>
    <st c="6768">与</st> <st c="6804">已知的</st> <st c="6804">测试方法</st>'
- en: <st c="6819">Exploratory testing can sometimes be more useful in identifying
    more subtle defects that formal testing might miss.</st> <st c="6936">However,
    it requires a high degree of skill and understanding of</st> <st c="7000">the
    application.</st>
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="6819">探索性测试有时在识别正式测试可能遗漏的更细微的缺陷方面更有用。</st> <st c="6936">然而，它需要高度的专业技能和对</st>
    <st c="7000">应用程序</st> <st c="7000">的理解。</st>
- en: <st c="7017">Comparison between script-based testing and exploratory testing</st>
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7017">基于脚本的测试和探索性测试的比较</st>
- en: <st c="7081">The comparison between script-based and exploratory testing provides
    us with several</st> <st c="7167">important insights:</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7081">基于脚本的测试和探索性测试的比较</st> <st c="7167">提供了我们几个</st> <st c="7167">重要的见解：</st>
- en: '**<st c="7186">Consistency and efficiency</st>**<st c="7213">: Script-based
    testing guarantees the consistency and repeatability</st> <st c="7281">of test
    procedures, which is</st> <st c="7311">crucial in large-scale projects where many
    tests are required.</st> <st c="7374">It can also be more efficient, as it eliminates
    the need for manual</st> <st c="7442">test execution.</st>'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7186">一致性和效率</st>**<st c="7213">：基于脚本的测试保证了测试过程的</st> <st c="7281">一致性和可重复性</st>
    <st c="7311">，这在需要大量测试的大规模项目中至关重要。</st> <st c="7374">它也可以更高效，因为它消除了手动</st> <st
    c="7442">测试执行</st> <st c="7442">的需要。</st>'
- en: '**<st c="7457">Flexibility and discovery</st>**<st c="7483">: On the other
    hand, exploratory testing offers greater flexibility as it allows testers to freely
    explore the application.</st> <st c="7608">This can lead to the discovery of potential
    problems that scripted tests might miss, particularly in the case of complex applications
    or when the application undergoes</st> <st c="7776">frequent changes.</st>'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7457">灵活性和发现</st>**<st c="7483">：另一方面，探索性测试提供了更大的灵活性，因为它允许测试人员自由探索应用程序。</st>
    <st c="7608">这可能导致发现脚本测试可能遗漏的潜在问题，尤其是在复杂应用程序或应用程序频繁更改的情况下。</st> <st c="7776">frequent
    changes.</st>'
- en: '**<st c="7793">Documentation</st>**<st c="7807">: A significant difference
    between the two approaches is the level of documentation involved.</st> <st c="7902">Script-based
    testing typically involves detailed documentation of test cases and steps, while
    exploratory testing can involve less documentation, which can potentially lead
    to critical bugs</st> <st c="8092">being missed.</st>'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7793">文档</st>**<st c="7807">：两种方法之间的一个显著区别是文档的级别。</st> <st c="7902">基于脚本的测试通常涉及详细的测试用例和步骤的文档，而探索性测试可能涉及较少的文档，这可能导致关键错误</st>
    <st c="8092">被忽略。</st>'
- en: <st c="8105">Limitations of script-based testing and exploratory testing</st>
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="8105">基于脚本的测试和探索性测试的限制</st>
- en: <st c="8165">Both script-based testing and exploratory testing approaches have
    their limitations.</st> <st c="8251">For example, exploratory testing</st> <st
    c="8283">can be influenced by the tester’s biases, and may</st> <st c="8333">fail
    to capture all potential problems if the tester lacks sufficient knowledge or
    fails to explore thoroughly.</st> <st c="8446">Similarly, scripted tests may miss
    obvious defects if the test cases do not cover all</st> <st c="8532">possible
    scenarios.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8165">基于脚本的测试和探索性测试方法都有其局限性。</st> <st c="8251">例如，探索性测试</st> <st c="8283">可能受到测试人员偏见的影响，如果测试人员缺乏足够的知识或未能彻底探索，则可能</st>
    <st c="8333">未能捕获所有潜在问题。</st> <st c="8446">同样，如果测试用例没有涵盖所有</st> <st c="8532">可能场景，脚本测试可能会错过明显的缺陷。</st>
- en: <st c="8551">Many organizations prefer a mixed approach, combining elements
    of script-based and exploratory testing, to leverage the strengths of each method
    and mitigate</st> <st c="8710">their weaknesses.</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8551">许多组织更喜欢混合方法，结合基于脚本和探索性测试的元素，以利用每种方法的优势并减轻</st> <st c="8710">它们的弱点。</st>
- en: <st c="8727">Understanding the</st> <st c="8745">context of the project, for
    example, whether it’s a small project</st> <st c="8811">or part of a larger one,
    can guide the choice between script-based and</st> <st c="8883">exploratory testing.</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8727">了解项目的</st> <st c="8745">上下文，例如，它是一个小型项目</st> <st c="8811">还是更大项目的一部分，可以指导选择基于脚本和</st>
    <st c="8883">探索性测试之间的选择。</st>
- en: <st c="8903">We’ve looked at some of the tools previously mentioned for E2E
    testing.</st> <st c="8976">We will now explore them in</st> <st c="9004">more
    detail.</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8903">我们已经查看了一些之前提到的端到端测试工具。</st> <st c="8976">现在我们将更详细地探讨它们。</st> <st
    c="9004">。</st>
- en: <st c="9016">Harnessing the power of E2E testing tools</st>
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9016">利用端到端测试工具的力量</st>
- en: <st c="9058">A variety of tools are</st> <st c="9081">available to facilitate
    E2E testing, empowering software development teams to effectively implement this</st>
    <st c="9187">testing strategy.</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9058">有多种工具可供使用，以促进端到端测试，使软件开发团队能够有效地实施这一</st> <st c="9187">测试策略。</st>
- en: <st c="9204">Let’s take a closer look at some of</st> <st c="9241">these tools.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9204">让我们更深入地了解一下</st> <st c="9241">这些工具。</st>
- en: <st c="9253">Selenium – proven power for web application testing</st>
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="9253">Selenium – 经证实的Web应用程序测试强大工具</st>
- en: '**<st c="9305">Selenium</st>** <st c="9314">is a renowned open source framework
    for automating web application testing.</st> <st c="9391">Its comprehensive feature</st>
    <st c="9416">set meets a wide range of testing needs, including</st> <st c="9467">functional,
    integration, and cross-browser testing.</st> <st c="9520">Selenium supports a
    variety of programming languages, including Java, Python, and C#, enabling testers
    to choose the language that matches their expertise and preferences.</st> <st
    c="9692">In addition, Selenium boasts extensive compatibility with the most popular
    browsers, such as Chrome, Firefox, Safari, and Edge.</st> <st c="9820">This broad
    compatibility ensures that tests can be run on different browsers, eliminating
    browser-specific discrepancies and guaranteeing a seamless</st> <st c="9969">user
    experience.</st>'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="9305">Selenium</st>** <st c="9314">是一个著名的开源框架，用于自动化Web应用程序测试。</st>
    <st c="9391">其全面的功能集满足广泛的测试需求，包括</st> <st c="9416">功能、集成和跨浏览器测试。</st> <st c="9520">Selenium支持多种编程语言，包括Java、Python和C#，使测试人员能够选择与他们专业知识和偏好相匹配的语言。</st>
    <st c="9692">此外，Selenium与最流行的浏览器具有广泛的兼容性，如Chrome、Firefox、Safari和Edge。</st> <st
    c="9820">这种广泛的兼容性确保了测试可以在不同的浏览器上运行，消除了浏览器特定的差异，并保证了无缝</st> <st c="9969">的用户体验。</st>'
- en: <st c="9985">Cypress – simplicity and speed for web testing</st>
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="9985">Cypress – 简洁和快速进行Web测试</st>
- en: '**<st c="10032">Cypress</st>** <st c="10040">has established itself</st> <st
    c="10064">as a JavaScript-based testing framework for web</st> <st c="10111">applications,
    renowned for its simplicity, speed, and ease of use.</st> <st c="10179">Unlike
    Selenium, which requires the installation of binary drivers and configuration,
    Cypress offers a standalone package that simplifies the installation process.</st>
    <st c="10343">Cypress’s Node.js-based architecture delivers exceptional performance,
    enabling tests to run quickly, reducing test times, and improving overall efficiency.</st>
    <st c="10500">Its intuitive API and simple syntax</st> <st c="10536">make it accessible
    to testers of all levels, facilitating rapid test development</st> <st c="10617">and
    maintenance.</st>'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="10032">Cypress</st>** <st c="10040">已经确立了自己</st> <st c="10064">作为基于JavaScript的Web</st>
    <st c="10111">应用程序测试框架的地位，以其简洁、快速和易用而闻名。</st> <st c="10179">与需要安装二进制驱动程序和配置的Selenium不同，Cypress提供了一个独立的包，简化了安装过程。</st>
    <st c="10343">基于Node.js的Cypress架构提供了卓越的性能，使测试能够快速运行，减少测试时间，并提高整体效率。</st> <st c="10500">其直观的API和简单的语法</st>
    <st c="10536">使其对所有级别的测试人员都易于访问，促进了快速测试开发和维护。</st>'
- en: <st c="10633">Appium – mobile application testing on multiple platforms</st>
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="10633">Appium – 在多个平台上进行移动应用程序测试</st>
- en: '**<st c="10691">Appium</st>** <st c="10698">is a versatile framework for automating
    mobile app testing on different platforms, including iOS</st> <st c="10796">and
    Android.</st> <st c="10809">It uses the Appium driver to communicate</st> <st
    c="10850">with native mobile apps, enabling testers to simulate user interactions
    such as tapping, swiping, and typing.</st> <st c="10960">Appium’s cross-platform
    compatibility means that tests can be run on real devices or simulators, ensuring
    that the application works consistently in</st> <st c="11109">different environments.</st>'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="10691">Appium</st>** <st c="10698">是一个多功能的框架，用于在不同平台上自动化移动应用程序测试，包括iOS</st>
    <st c="10796">和Android。</st> <st c="10809">它使用Appium驱动程序与原生移动应用程序通信</st> <st c="10850">，允许测试人员模拟用户交互，如点击、滑动和输入。</st>
    <st c="10960">Appium的跨平台兼容性意味着测试可以在真实设备或模拟器上运行，确保应用程序在不同环境中的一致性。</st>'
- en: <st c="11132">Protractor – seamless automation for Angular applications</st>
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="11132">Protractor – Angular应用程序的无缝自动化</st>
- en: '**<st c="11190">Protractor</st>**<st c="11201">, designed specifically</st>
    <st c="11225">for Angular applications, leverages Selenium to provide a complete
    testing framework.</st> <st c="11311">Its integration with Angular framework components
    simplifies test</st> <st c="11377">development and maintenance, allowing testers
    to interact with elements and use Angular-specific functions.</st> <st c="11485">Protractor’s
    support for local and remote test environments meets a wide range of</st> <st
    c="11567">testing needs.</st>'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="11190">Protractor</st>**<st c="11201">，专为Angular应用程序设计，利用Selenium提供完整的测试框架。</st>
    <st c="11311">它与Angular框架组件的集成简化了测试</st> <st c="11377">开发和维护，允许测试人员与元素交互并使用Angular特定的功能。</st>
    <st c="11485">Protractor对本地和远程测试环境的支持满足广泛的</st> <st c="11567">测试需求。</st>'
- en: <st c="11581">Playwright – cross-browser testing with performance</st>
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="11581">Playwright – 具有性能的跨浏览器测试</st>
- en: '**<st c="11633">Playwright</st>**<st c="11644">, developed by Microsoft, has
    established itself as a powerful tool for cross-browser testing.</st> <st c="11739">It
    supports</st> <st c="11750">Chromium, WebKit, and Firefox browsers, enabling</st>
    <st c="11799">comprehensive tests to be carried out on different rendering engines.</st>
    <st c="11870">Playwright’s Node.js-based architecture delivers exceptional performance,
    enabling tests to run quickly and efficiently.</st> <st c="11991">Its API is simple
    and intuitive, making it accessible to testers of</st> <st c="12059">all levels.</st>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="11633">Playwright</st>**<st c="11644">，由微软开发，已成为跨浏览器测试的强大工具。</st>
    <st c="11739">它支持</st> <st c="11750">Chromium、WebKit和Firefox浏览器，使得</st> <st c="11799">可以在不同的渲染引擎上执行全面测试。</st>
    <st c="11870">基于Node.js的Playwright架构提供了卓越的性能，使得测试可以快速高效地运行。</st> <st c="11991">它的API简单直观，使得所有级别的测试人员都能轻松使用。</st>'
- en: <st c="12070">The choice of E2E testing tools depends on the specific needs
    and preferences of the software</st> <st c="12165">development team.</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12070">端到端测试工具的选择取决于软件开发团队的具体需求和偏好。</st>
- en: <st c="12182">Here are the strengths of the E2E</st> <st c="12217">testing tools:</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12182">以下是端到端</st> <st c="12217">测试工具</st>的优势：
- en: <st c="12231">Selenium’s flexibility and broad browser compatibility make it
    a solid choice for comprehensive web</st> <st c="12332">application testing</st>
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12231">Selenium的灵活性和广泛的浏览器兼容性使其成为全面Web</st> <st c="12332">应用程序测试</st>的可靠选择
- en: <st c="12351">Cypress’s simplicity and speed appeal to teams looking for a streamlined
    approach to</st> <st c="12437">web testing</st>
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12351">Cypress的简洁和速度吸引了寻求简化</st> <st c="12437">Web测试</st>方法的团队
- en: <st c="12448">Appium meets mobile testing needs, enabling automa</st><st c="12499">tion
    on iOS and</st> <st c="12516">Android platforms</st>
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12448">Appium满足移动测试需求，支持在iOS和</st> <st c="12499">Android平台</st>上自动化
- en: <st c="12533">Protractor facilitates seamless</st> <st c="12566">automation
    of</st> <st c="12580">Angular applications</st>
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12533">量角器简化了</st> <st c="12566">Angular应用程序的</st> <st c="12580">自动化</st>
- en: <st c="12600">Playwright offers high-performance,</st> <st c="12637">cross-browser
    testing</st>
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12600">Playwright提供高性能的</st> <st c="12637">跨浏览器测试</st>
- en: <st c="12658">Ultimately, the most</st> <st c="12679">effective tool is the
    one that matches the team’s expertise, project requirements, and</st> <st c="12767">testing
    objectives.</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12658">最终，最</st> <st c="12679">有效的工具是那个与团队的专业知识、项目需求和</st> <st c="12767">测试目标相匹配的工具。</st>
- en: <st c="12786">In the next section, we will analyze the benefits of E2E testing
    in</st> <st c="12855">a project.</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将分析项目中进行端到端测试的好处。
- en: <st c="12865">Analyzing the benefits of E2E testing in a project</st>
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析项目中进行端到端测试的好处
- en: <st c="12916">The adoption of E2E testing as part of software development projects
    reveals a multitude of benefits that improve</st> <st c="13030">the quality and
    u</st><st c="13048">ser experience of</st> <st c="13067">software products.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 采用端到端测试作为软件开发项目的一部分揭示了众多好处，这些好处提高了软件产品的**质量和用户体验**。
- en: <st c="13085">While E2E tests offer a multitude of advantages, their implementation
    is not without its problems.</st> <st c="13185">Understanding these obstacles
    is essential to developing effective strategies for</st> <st c="13267">overcoming
    them:</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管端到端测试提供了许多优点，但它们的实施并非没有问题。理解这些障碍对于制定克服它们的有效策略至关重要：
- en: '**<st c="13283">Complexity</st>**<st c="13294">: E2E tests often have a labyrinthine
    structure, which makes them difficult to create and maintain.</st> <st c="13395">This
    complexity stems from the need to test multiple application components and accurately
    simulate the actions of a</st> <st c="13512">real user.</st>'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="13283">复杂性</st>**：端到端测试通常具有错综复杂的结构，这使得它们难以创建和维护。这种复杂性源于需要测试多个应用程序组件和准确模拟真实用户的行为。'
- en: '**<st c="13522">Scaling</st>**<st c="13530">: E2E tests are prone to instability,
    a characteristic that manifests itself in intermittent failures for reasons tha</st><st
    c="13648">t can be difficult to decipher.</st> <st c="13681">This intermittence
    can compromise the reliability of E2E</st> <st c="13738">test results.</st>'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="13522">扩展性</st>**：端到端测试容易不稳定，这种特性表现为间歇性故障，原因难以理解。这种间歇性可能会损害端到端测试结果的可信度。'
- en: '**<st c="13751">Slowness</st>**<st c="13760">: E2E tests often run at a slow
    pace due to their global nature, which involves interactions with the whole application
    and potential delays in waiting for responses from</st> <st c="13932">external
    systems.</st>'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="13751">缓慢</st>**：由于端到端测试具有全局性质，需要与整个应用程序交互，并可能因等待外部系统响应而出现延迟，因此端到端测试通常运行速度较慢。'
- en: <st c="13949">Despite the inherent challenges, E2E testing remains an invaluable
    tool for improving software quality.</st> <st c="14054">By adopting proven strategies,
    developers and testers can effectively meet these challenges and reap the many
    benefits of</st> <st c="14176">E2E testing:</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在固有的挑战，但端到端测试仍然是提高软件质量的无价工具。通过采用经过验证的策略，开发人员和测试人员可以有效地应对这些挑战，并收获端到端测试的许多好处：
- en: '**<st c="14188">Get involved early</st>**<st c="14207">: It’s vital to launch
    E2E testing early in the development cycle.</st> <st c="14275">This proactive
    approach facilitates the early detection of defects, making their treatment considerably
    easier and</st> <st c="14390">more cost-effective.</st>'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14188">尽早参与</st>**：在开发周期早期启动端到端测试至关重要。这种积极主动的方法有助于及早发现缺陷，使缺陷的处理更加容易和成本效益更高。'
- en: '**<st c="14410">Leverage automation</st>**<st c="14430">: Automation</st> <st
    c="14443">strengthens E2E testing by streamlining the execution process and minimizing
    the expenditure of time and effort.</st> <st c="14557">Automation also facilitates
    the seamless integration of E2E tests into the</st> <st c="14632">CI/CD pipeline.</st>'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14410">利用自动化</st>**：自动化通过简化执行过程和最大限度地减少时间和精力的消耗来加强端到端测试。自动化还便于将端到端测试无缝集成到**CI/CD**管道中。'
- en: '**<st c="14647">Meticulous test design</st>**<st c="14670">: Meticulous care
    in the design of E2E tests is essential to ensure their effectiveness and efficiency.</st>
    <st c="14775">This means focusing on testing the most critical user flows and
    identifying the most likely points</st> <st c="14874">of failure.</st>'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14647">细致的测试设计</st>**：对端到端测试的设计进行细致的关注对于确保其有效性和效率至关重要。这意味着专注于测试最关键的用户流程和识别最可能发生故障的点。'
- en: '**<st c="14885">Leverage specialized tools</st>**<st c="14912">: There is a
    plethora of tools available to support E2E testing.</st> <st c="14978">It is essential
    to select a tool that matches the project’s requirements and offers</st> <st c="15062">user-friendly
    functionality.</st>'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14885">利用专用工具</st>**<st c="14912">：有大量工具可供支持端到端测试。</st> <st c="14978">选择一个符合项目需求并提供</st>
    <st c="15062">用户友好功能的工具至关重要。</st>'
- en: <st c="15090">In the next section, we’ll explore the different tools that can
    be used for E2E testing, such as Protractor, Cypress,</st> <st c="15209">and Playwright.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15090">在下一节中，我们将探讨可用于端到端测试的不同工具，例如Protractor、Cypress和Playwright。</st>
- en: <st c="15224">Exploring Protractor, Cypress, and Playwright for E2E testing</st>
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="15224">探索Protractor、Cypress和Playwright进行端到端测试</st>
- en: '<st c="15286">There are many different E2E testing tools available and choosing
    the right one can be tricky.</st> <st c="15382">This review examines three popular
    tools: Protractor, Cypress, and Playwright.</st> <st c="15461">We’ll discover
    their strengths, weaknesses, and ideal use cases, enabling you to select the ideal
    tool for your</st> <st c="15573">E2E tests.</st>'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15286">有众多不同的端到端测试工具可用，选择正确的工具可能很棘手。</st> <st c="15382">本综述将探讨三种流行的工具：Protractor、Cypress和Playwright。</st>
    <st c="15461">我们将发现它们的优点、缺点和理想的使用案例，使您能够为您的</st> <st c="15573">端到端测试选择理想的工具。</st>
- en: <st c="15583">Protractor</st>
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15583">量角器</st>
- en: <st c="15594">Produced by Google’s</st> <st c="15615">team of developers, Protractor
    was first designed for Angular applications, then made available as an open source
    solution.</st> <st c="15740">Today, it extends</st> <st c="15757">its capabilities
    beyond Angular, adapting to non-Angular applications as well.</st> <st c="15837">It
    is an enhanced version of WebDriver.js, incorporating all Selenium WebDriver features
    plus specialized functions for</st> <st c="15957">Angular development.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15594">由谷歌的开发者团队制作，Protractor最初是为Angular应用程序设计的，后来作为开源解决方案提供。</st> <st
    c="15615">今天，它扩展了</st> <st c="15740">其功能，不仅限于Angular，还适应了非Angular应用程序。</st> <st
    c="15757">它是WebDriver.js的增强版本，集成了所有Selenium WebDriver功能，并增加了专门用于</st> <st c="15957">Angular开发的函数。</st>
- en: <st c="15977">What is Protractor?</st>
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="15977">什么是Protractor？</st>
- en: <st c="15997">Protractor is an open source</st> <st c="16026">testing framework
    primarily used for E2E testing of Angular and AngularJS applications.</st> <st
    c="16115">Although originally designed for Angular, it has evolved to support
    testing of Angular and non-Angular web applications.</st> <st c="16236">It works
    in the same way as a real user, running tests in a real web browser and resulting
    in realistic test scenarios.</st> <st c="16356">Protractor is a Node.js application
    and acts as a wrapper around Selenium WebDriver using WebDriverJS, which is the
    JavaScript binding for the Selenium WebDriver API.</st> <st c="16523">It can create
    tests that interact with a real browser, enabling</st> <st c="16587">E2E testing.</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15997">Protractor是一个开源的</st> <st c="16026">测试框架，主要用于Angular和AngularJS应用程序的端到端测试。</st>
    <st c="16115">虽然最初是为Angular设计的，但它已经发展到支持测试Angular和非Angular网络应用程序。</st> <st c="16236">它以真实用户的方式工作，在真实网络浏览器中运行测试，从而产生真实的测试场景。</st>
    <st c="16356">Protractor是一个Node.js应用程序，它使用WebDriverJS作为Selenium WebDriver API的JavaScript绑定，充当Selenium
    WebDriver的包装器。</st> <st c="16523">它可以创建与真实浏览器交互的测试，从而实现</st> <st c="16587">端到端测试。</st>
- en: <st c="16599">It integrates with other technologies such as Node.js, Jasmine,
    Selenium, Mocha, and others.</st> <st c="16693">It is particularly well-suited
    to Angular applications due to its origins in the Angular team and its use of
    Angular-specific locators to identify DOM elements.</st> <st c="16854">However,
    as of November 2022, Protractor is considered obsolete, and the end of development
    was scheduled for the end of 2022\.</st> <st c="16981">The team behind Protractor
    announced this decision due to changes in web development and the JavaScript language,
    which make Protractor less compatible with</st> <st c="17138">contemporary applications.</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16599">它集成了其他技术，如Node.js、Jasmine、Selenium、Mocha等。</st> <st c="16693">由于其起源于Angular团队，并使用Angular特定的定位器来识别DOM元素，因此它特别适合Angular应用程序。</st>
    <st c="16854">然而，截至2022年11月，Protractor被认为已过时，其开发结束时间定于2022年底。</st> <st c="16981">Protractor背后的团队宣布这一决定是因为网络开发和JavaScript语言的变化，这使得Protractor与</st>
    <st c="17138">当代应用程序的兼容性降低。</st>
- en: <st c="17164">Why choose Protractor?</st>
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="17164">为什么选择Protractor？</st>
- en: <st c="17187">Protractor provides a</st> <st c="17210">set of Angular-specific
    APIs that make it easier to interact with Angular elements and perform actions
    such as waiting for Angular processes to complete, handling asynchronous operations,
    and managing synchronization with the Angular</st> <st c="17444">event loop.</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor提供了一套Angular特定的API，这使得与Angular元素交互以及执行等待Angular进程完成、处理异步操作和管理与Angular<st
    c="17444">事件循环的同步等操作变得更加容易。</st>
- en: <st c="17455">You can simulate real user interactions such as clicking buttons,
    filling out forms, navigating between pages, and verifying the behavior of Angular
    elements.</st> <st c="17615">This makes Protractor a powerful tool for E2E testing
    of</st> <st c="17672">Angular applications.</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以模拟真实用户交互，例如点击按钮、填写表单、在页面间导航以及验证Angular元素的行为。<st c="17615">这使得Protractor成为Angular应用程序端到端测试的强大工具。</st>
- en: <st c="17693">It automatically waits for Angular processes to complete before
    executing the next step, eliminating the need for explicit waits and reducing
    flakiness in tests.</st> <st c="17856">This makes it a reliable choice for testing</st>
    <st c="17900">Angular applications.</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 它会在执行下一步之前自动等待Angular进程完成，从而消除了显式等待的需要，并减少了测试中的不可靠性。<st c="17856">这使得它成为测试Angular应用程序的可靠选择。</st>
- en: <st c="17921">It supports various locators specifically designed for Angular
    applications, including model, binding, repeater, and CSS selectors.</st> <st
    c="18054">These locators make it easier to identify and interact with Angular
    elements, which is particularly useful for testing</st> <st c="18173">Angular
    applications.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持为Angular应用程序专门设计的各种定位器，包括模型、绑定、重复器和CSS选择器。<st c="18054">这些定位器使得识别和交互Angular元素更加容易，这对于测试Angular应用程序尤其有用。</st>
- en: <st c="18194">It allows you to run tests in multiple browsers, including Chrome,
    Firefox, and Safari, enabling cross-browser testing of your Angular applications.</st>
    <st c="18344">This feature ensures that your Angular application works correctly
    across different browsers, which is crucial to a good</st> <st c="18465">user
    experience.</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许您在包括Chrome、Firefox和Safari在内的多个浏览器中运行测试，从而实现Angular应用程序的跨浏览器测试。<st c="18344">这一特性确保了您的Angular应用程序在不同浏览器中都能正确运行，这对于良好的用户体验至关重要。</st>
- en: <st c="18481">Integrating it with</st> <st c="18501">a CI system allows you
    to automate the execution of tests on every code commit, ensuring that your Angular
    application remains stable and functional.</st> <st c="18652">This feature is
    particularly beneficial to large teams and projects where multiple developers
    are working on the same</st> <st c="18770">code base.</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与CI系统集成后，您可以在每次代码提交时自动执行测试，确保您的Angular应用程序保持稳定和功能正常。<st c="18652">这一特性尤其有利于大型团队和项目，其中多个开发者正在同一</st>
    <st c="18770">代码库上工作。</st>
- en: <st c="18780">Features of Protractor testing</st>
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Protractor测试功能
- en: <st c="18811">By providing built-in support</st> <st c="18842">for asynchronous
    operations via callbacks, promises, and async/await, Protractor empowers developers
    to do</st> <st c="18949">the following:</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供对异步操作的内置支持，包括回调、承诺和async/await，Protractor使开发者能够做到以下事项：<st c="18949">以下是一些Protractor测试功能：</st>
- en: '**<st c="18963">Boost test execution speed</st>**<st c="18990">: Achieve faster
    E2E testing, especially for Angular web apps with</st> <st c="19058">dynamic elements</st>'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="18963">提升测试执行速度</st>**<st c="18990">：实现更快的端到端测试，特别是对于具有动态元素的Angular
    Web应用程序</st> <st c="19058">dynamic elements</st>'
- en: '**<st c="19074">Enhance test readability</st>**<st c="19099">: Write cleaner
    and more maintainable tests with modern asynchronous</st> <st c="19169">programming
    methods</st>'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="19074">增强测试可读性</st>**<st c="19099">：使用现代异步编程方法编写更干净、更易于维护的测试</st>
    <st c="19169">programming methods</st>'
- en: '**<st c="19188">Increase test reliability</st>**<st c="19214">: Simplify handling
    dynamic behaviors and improv</st><st c="19263">e</st> <st c="19266">test stability</st>'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="19188">提高测试可靠性</st>**<st c="19214">：简化处理动态行为并提高测试稳定性</st><st c="19263">e</st>
    <st c="19266">test stability</st>'
- en: <st c="19280">One of the key features of Protractor is its</st> <st c="19325">Automatic
    Waiting feature.</st> <st c="19353">Here’s how</st> <st c="19364">it works:</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Protractor的一个关键特性是其<st c="19325">自动等待功能。</st> <st c="19353">以下是它是如何工作的：</st>
- en: '`<st c="19558">wait</st>` <st c="19562">statements between every action in</st>
    <st c="19598">your tests.</st>'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="19558">wait</st>` <st c="19562">语句在您的测试中的每个动作之间。</st>'
- en: '**<st c="19609">Angular synchronization</st>**<st c="19633">: Protractor integrates
    with Angular’s framework to understand when the application has finished processing
    and is ready for interaction.</st> <st c="19772">This ensures your tests don’t
    try to interact with elements before they’re fully loaded</st> <st c="19860">and
    available.</st>'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="19609">Angular 同步</st>**<st c="19633">：Protractor 与 Angular 框架集成，以了解应用程序何时完成处理并准备好交互。</st>
    <st c="19772">这确保了您的测试不会在元素完全加载和可用之前尝试与之交互</st> <st c="19860">。</st>'
- en: <st c="19874">While Protractor handles most waiting scenarios automatically,
    there are situations where you might still need</st> <st c="19986">explicit</st>
    <st c="19994">waits:</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19874">虽然 Protractor 可以自动处理大多数等待场景，但仍然存在一些情况，你可能仍然需要</st> <st c="19986">显式</st>
    <st c="19994">等待：</st>
- en: '`<st c="20047">ExpectedConditions</st>` <st c="20065">API to define specific
    conditions for waiting, such as waiting for an element to be clickable or for
    a specific text</st> <st c="20183">to appear.</st>'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="20047">ExpectedConditions</st>` <st c="20065">API 用于定义等待的特定条件，例如等待元素可点击或特定文本</st>
    <st c="20183">出现。</st>'
- en: '**<st c="20193">Long waits</st>**<st c="20204">: The default implicit wait
    time might be too short for certain scenarios.</st> <st c="20280">You can configur</st><st
    c="20296">e a custom wait time for specific</st> <st c="20331">test cases.</st>'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="20193">长时间等待</st>**<st c="20204">：默认的隐式等待时间可能对于某些场景来说太短。</st> <st
    c="20280">您可以为特定的测试用例配置自定义的等待时间。</st><st c="20296">。</st><st c="20331"></st>'
- en: <st c="20342">Protractor supports both Angular and non-Angular applications.</st>
    <st c="20406">It provides combined E2E testing for web applications built using
    AngularJS.</st> <st c="20483">This makes it a versatile tool</st> <st c="20514">for
    testing a wide range of</st> <st c="20542">web applications.</st>
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="20342">Protractor 支持 Angular 和非 Angular 应用程序。</st> <st c="20406">它为使用
    AngularJS 构建的 Web 应用程序提供综合的端到端测试。</st> <st c="20483">这使得它成为一个多功能的工具，可以用于测试广泛的</st>
    <st c="20514">Web 应用程序。</st>
- en: <st c="20559">Protractor supports the Page Objects pattern, which is a design
    pattern that enhances test maintenance and reduces code duplication.</st> <st
    c="20693">With this pattern, you can create reusable page objects that can be
    used across</st> <st c="20773">different tests.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20559">Protractor 支持页面对象模式，这是一种设计模式，可以增强测试维护并减少代码重复。</st> <st c="20693">使用此模式，您可以创建可重用的页面对象，这些对象可以在</st>
    <st c="20773">不同的测试中</st> <st c="20769">使用。</st>
- en: <st c="20789">Cypress</st>
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="20789">Cypress</st>
- en: <st c="20797">Designed for web</st> <st c="20815">development and test automation,
    Cypress is a JavaScript-based E2E testing framework that</st> <st c="20905">streamlines
    both web and</st> <st c="20930">API testing.</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20797">专为 Web 开发和测试自动化设计，Cypress 是一个基于 JavaScript 的端到端测试框架，它</st> <st
    c="20905">简化了 Web 和</st> <st c="20930">API 测试。</st>
- en: <st c="20942">What is Cypress?</st>
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="20942">什么是 Cypress？</st>
- en: <st c="20959">Cypress is an open source, JavaScript-based E2E testing framework
    specifically designed for modern web applications.</st> <st c="21077">It offers
    a developer-friendly approach to automating web UI tests, streamlining the process
    for both frontend developers and</st> <st c="21203">QA engineers.</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20959">Cypress 是一个开源的、基于 JavaScript 的端到端测试框架，专门为现代 Web 应用程序设计。</st> <st
    c="21077">它提供了一种开发者友好的方法来自动化 Web UI 测试，简化了前端开发人员和</st> <st c="21203">QA 工程师</st>
    <st c="21269">的流程。</st>
- en: <st c="21216">Why choose Cypress?</st>
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="21216">为什么选择 Cypress？</st>
- en: <st c="21236">Here are some key advantages of</st> <st c="21269">using Cypress
    for your web</st> <st c="21296">application testing:</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21236">以下是使用 Cypress 进行您的 Web 应用程序测试的一些关键优势：</st> <st c="21269">：</st>
    <st c="21296"></st>
- en: '**<st c="21316">Simplified setup</st>**<st c="21333">: Compared to other tools
    such as Selenium, Cypress requires minimal configuration.</st> <st c="21418">It
    often involves just installing the package and writing tests</st> <st c="21482">in
    JavaScript.</st>'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="21316">简化设置</st>**<st c="21333">：与 Selenium 等其他工具相比，Cypress 需要的最小配置。</st>
    <st c="21418">通常只需安装包并使用 JavaScript 编写测试</st><st c="21482">。</st>'
- en: '**<st c="21496">Fast and efficient</st>**<st c="21515">: Cypress runs tests
    directly in the browser, eliminating the need for separate WebDriver setup and
    browser launching.</st> <st c="21635">This makes tests execute significantly faster,
    improving development and</st> <st c="21708">testing workflows.</st>'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速高效**：Cypress直接在浏览器中运行测试，消除了单独设置WebDriver和启动浏览器的需求。<st c="21635">这使得测试执行速度显著提高，改善了开发和</st>
    <st c="21708">测试工作流程。</st>'
- en: '**<st c="21726">Automatic waiting</st>**<st c="21744">: Cypress handles waiting
    for elements to load and become interactive automatically.</st> <st c="21830">You
    don’t need to write explicit waits or sleeps into your tests, reducing code</st>
    <st c="21909">complexity and making tests</st> <st c="21938">more robust.</st>'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动等待**：Cypress自动处理等待元素加载和变为交互式的过程。<st c="21830">你不需要在测试中编写显式的等待或暂停，这减少了代码复杂性，并使测试更加健壮。<st
    c="21938"></st>'
- en: '**<st c="21950">Easy debugging</st>**<st c="21965">: Cypress provides a visual
    debugger that allows you to step through your tests, inspect element properties,
    and identify issues quickly.</st> <st c="22104">This streamlines the</st> <st
    c="22125">debugging process.</st>'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于调试**：Cypress提供了一个可视化调试器，允许你逐步执行测试，检查元素属性，并快速识别问题。<st c="22125">这简化了调试过程。</st>'
- en: '**<st c="22143">Time-travel debugging</st>**<st c="22165">: With Cypress’s
    time-travel debugging feature, you can rewind or fast-forward a test execution
    to pinpoint the exact moment when a failure occurs, making troubleshooting</st>
    <st c="22337">more efficient.</st>'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间旅行调试**：使用Cypress的时间旅行调试功能，你可以回放或快进测试执行，以确定失败发生的确切时刻，使故障排除更加高效。<st c="22337"></st>'
- en: '**<st c="22352">Cross-browser compatibility</st>**<st c="22380">: Cypress supports
    testing across different browsers (Chrome, Firefox, Edge, etc.) out of the box.</st>
    <st c="22480">You can configure tests to run on various browsers or use a CI platform
    to automate</st> <st c="22564">browser testing.</st>'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨浏览器兼容性**：Cypress支持开箱即用的跨浏览器测试（Chrome、Firefox、Edge等）。<st c="22480">你可以配置测试在多种浏览器上运行，或使用CI平台来自动化浏览器测试。</st>'
- en: '**<st c="22580">Integration with development tools</st>**<st c="22615">: Cypress
    integrates seamlessly with popular developer tools such as DevTools, allowing
    you to leverage existing debugging skills within the</st> <st c="22757">testing
    environment.</st>'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与开发工具集成**：Cypress与流行的开发者工具（如DevTools）无缝集成，允许你在测试环境中利用现有的调试技能。<st c="22757"></st>'
- en: '**<st c="22777">Active community and support</st>**<st c="22806">: Cypress
    has a large and active community offering extensive documentation, tutorials,
    and support resources.</st> <st c="22918">This makes it easier to learn it, use
    it, and get help</st> <st c="22973">when needed.</st>'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活跃的社区和支持**：Cypress拥有一个庞大且活跃的社区，提供广泛的文档、教程和支持资源。<st c="22973">这使得学习、使用和需要时获得帮助变得更加容易。</st>'
- en: <st c="22985">Features of Cypress testing</st>
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cypress测试功能
- en: <st c="23013">Cypress boasts a rich set of features that</st> <st c="23056">contribute
    to its effectiveness in web</st> <st c="23096">application testing:</st>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress拥有丰富的功能，有助于其在Web应用程序测试中的有效性：<st c="23096"></st>
- en: '**<st c="23116">Command chain API</st>**<st c="23134">: Provides a natural
    way to write tests using JavaScript syntax, making them readable</st> <st c="23221">and
    maintainable</st>'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令链API**：提供了一种使用JavaScript语法编写测试的自然方式，使测试易于阅读和维护。<st c="23221"></st>'
- en: '**<st c="23237">Automatic assertions</st>**<st c="23258">: Simplifies checking
    for expected element properties and behavior, ensuring your tests verify the</st>
    <st c="23358">correct functionality</st>'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动断言**：简化了对预期元素属性和行为的检查，确保你的测试验证了正确的功能。<st c="23358"></st>'
- en: '**<st c="23379">Screenshots and video recordings</st>**<st c="23412">: Enables
    capturing screenshots or recording videos during tests, which can be helpful for
    visualizing errors and</st> <st c="23527">debugging issues</st>'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**截图和视频录制**：允许在测试期间捕获截图或录制视频，这有助于可视化错误和调试问题。<st c="23527"></st>'
- en: '**<st c="23543">Network mocking</st>**<st c="23559">: Allows</st> <st c="23568">simulating
    server responses, facilitating testing of API interactions, edge cases, and various</st>
    <st c="23664">network scenarios</st>'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="23543">网络模拟</st>**<st c="23559">：允许</st> <st c="23568">模拟服务器响应，便于测试
    API 交互、边缘情况和各种</st> <st c="23664">网络场景</st>'
- en: '**<st c="23681">Custom commands</st>**<st c="23697">: Grants the ability to
    create reusable code blocks for frequently used testing actions, promoting code
    reusability</st> <st c="23814">and modularity</st>'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="23681">自定义命令</st>**<st c="23697">：授予创建可重用代码块的能力，用于频繁使用的测试操作，促进代码重用和模块化</st>
    <st c="23814">和模块化</st>'
- en: '**<st c="23828">Integration testing</st>**<st c="23848">: Cypress can be used
    for both unit and integration testing of web applications, offering comprehensive</st>
    <st c="23953">testing coverage</st>'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="23828">集成测试</st>**<st c="23848">：Cypress 可用于 Web 应用程序的单元和集成测试，提供全面的</st>
    <st c="23953">测试覆盖率</st>'
- en: <st c="23969">By leveraging Cypress’s strengths, you can build a robust and
    efficient test suite that helps ensure the quality and reliability of your</st>
    <st c="24107">web applications.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23969">通过利用 Cypress 的优势，您可以构建一个强大且高效的测试套件，有助于确保您</st> <st c="24107">Web
    应用程序的质量和可靠性。</st>
- en: <st c="24124">Playwright</st>
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24124">Playwright</st>
- en: <st c="24135">Playwright is a modern, versatile, and powerful browser automation
    framework created by Microsoft.</st> <st c="24235">It enables</st> <st c="24245">developers
    to write automated tests, scrape web data, and interact with web</st> <st c="24322">applications
    using a single API that works seamlessly across multiple browsers, including Chrome,
    Firefox, and</st> <st c="24433">Microsoft Edge.</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24135">Playwright 是由 Microsoft 创建的一个现代、多功能且强大的浏览器自动化框架。</st> <st c="24235">它使</st>
    <st c="24245">开发者能够使用单个 API 编写自动化测试、抓取 Web 数据，并通过多个浏览器（包括 Chrome、Firefox 和</st>
    <st c="24433">Microsoft Edge）与 Web 应用程序进行交互。</st>
- en: <st c="24448">What is Playwright?</st>
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="24448">什么是 Playwright？</st>
- en: <st c="24468">Playwright is a powerful, open source Node.js library for automating
    and testing web applications on various browsers such as Chrome, Firefox, Safari,
    and Edge.</st> <st c="24630">It can also automate browser actions such as clicks,
    form fill-ups, and page navigation.</st> <st c="24719">Playwright is an intuitive
    platform supporting several programming languages such as JavaScript, TypeScript,
    Python, and Java.</st> <st c="24846">The defining feature of parallelism is that
    you can test for multiple browsers simultaneously without the requirement of writing</st>
    <st c="24975">individual tests.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24468">Playwright 是一个强大的开源 Node.js 库，用于在 Chrome、Firefox、Safari 和 Edge
    等各种浏览器上自动化和测试 Web 应用程序。</st> <st c="24630">它还可以自动化浏览器操作，如点击、表单填写和页面导航。</st> <st
    c="24719">Playwright 是一个直观的平台，支持 JavaScript、TypeScript、Python 和 Java 等多种编程语言。</st>
    <st c="24846">并行化的定义特征是，您可以在不编写</st> <st c="24975">单独测试的情况下同时测试多个浏览器。</st>
- en: <st c="24992">Why choose Playwright?</st>
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="24992">为什么选择 Playwright？</st>
- en: <st c="25015">Playwright supports testing across multiple browsers, including
    Chromium, Firefox, and WebKit.</st> <st c="25111">This ensures cross-browser compatibility
    and a consistent</st> <st c="25169">user experience.</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25015">Playwright 支持跨多个浏览器进行测试，包括 Chromium、Firefox 和 WebKit。</st> <st
    c="25111">这确保了跨浏览器兼容性和一致的</st> <st c="25169">用户体验。</st>
- en: <st c="25185">Playwright is known for its</st> <st c="25214">speed and efficiency.</st>
    <st c="25236">Its modern architecture and efficient browser automation result
    in faster test execution compared to other frameworks, reducing the overall time
    spent</st> <st c="25387">on testing.</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25185">Playwright 以其</st> <st c="25214">速度和效率</st> 而闻名。其现代架构和高效的浏览器自动化使得与其他框架相比，测试执行速度更快，从而减少了整体测试时间</st>
    <st c="25387">。</st>
- en: <st c="25398">Playwright’s auto-wait API and advanced selector engine significantly
    improve test stability, reducing the likelihood of flaky tests and minimizing
    the need for</st> <st c="25560">manual intervention.</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25398">Playwright 的自动等待 API 和高级选择器引擎显著提高了测试稳定性，减少了测试不稳定性的可能性，并最大限度地减少了手动干预的需求。</st>
    <st c="25560">。</st>
- en: <st c="25580">Playwright is built to handle modern</st> <st c="25618">web technologies,
    such as</st> **<st c="25644">single-page applications</st>** <st c="25668">(</st>**<st
    c="25670">SPAs</st>**<st c="25674">), better than other frameworks.</st> <st c="25708">It
    provides native support for interacting with dynamic content, making writing tests
    for complex</st> <st c="25806">applications easier.</st>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25580">Playwright 是为了处理现代</st> <st c="25618">网络技术而构建的，例如</st> **<st c="25644">单页应用程序</st>**
    <st c="25668">(</st>**<st c="25670">SPAs</st>**<st c="25674">**)，比其他框架做得更好。</st>
    <st c="25708">它提供了与动态内容交互的原生支持，使得为复杂</st> <st c="25806">应用程序编写测试变得更加容易。</st>
- en: <st c="25826">Unlike some other frameworks that only support specific browsers,
    Playwright offers a consistent API for testing across multiple browsers, ensuring
    broader compatibility and a more comprehensive</st> <st c="26022">testing suite.</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25826">与其他仅支持特定浏览器的框架不同，Playwright 提供了一个跨多个浏览器的统一 API，确保更广泛的兼容性和更全面的</st>
    <st c="26022">测试套件。</st>
- en: <st c="26036">Playwright has built-in mocking that allows you to write minified
    E2E tests at the component level.</st> <st c="26137">This can be particularly
    useful for testing complex components without having to interact with the</st>
    <st c="26236">entire application.</st>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26036">Playwright 具有内置的模拟功能，允许你在组件级别编写精简的端到端测试。</st> <st c="26137">这对于测试复杂组件而不必与整个应用程序交互特别有用。</st>
- en: <st c="26255">Playwright supports powerful pseudo-CSS selectors that replace
    the only use cases for XPath.</st> <st c="26349">This can make your tests more
    readable</st> <st c="26388">and maintainable.</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26255">Playwright 支持强大的伪 CSS 选择器，可以替代 XPath 的唯一用例。</st> <st c="26349">这可以使你的测试更易于阅读</st>
    <st c="26388">和维护。</st>
- en: <st c="26405">Playwright is about 30% faster than Selenium running the same
    tests due to its ability to create test contexts in</st> <st c="26520">100 ms.</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26405">由于 Playwright 能够在 100 毫秒内创建测试上下文，因此在运行相同测试时，它比 Selenium 快约 30%。</st>
- en: <st c="26527">Playwright requires fewer dependencies and has a more straightforward
    installation process compared to Selenium.</st> <st c="26641">This means you can
    start writing tests more quickly and with</st> <st c="26702">less hassle.</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26527">与 Selenium 相比，Playwright 需要更少的依赖，并且安装过程更加简单。</st> <st c="26641">这意味着你可以更快地开始编写测试，并且</st>
    <st c="26702">更少地遇到麻烦。</st>
- en: <st c="26714">Features of Playwright testing</st>
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="26714">Playwright 测试的特点</st>
- en: <st c="26745">Let’s look at the key features</st> <st c="26776">of</st> <st
    c="26780">Playwright testing:</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26745">让我们看看 Playwright 测试的</st> <st c="26776">关键特性</st> <st c="26780">：</st>
- en: <st c="26799">Playwright provides consistent and reliable automation across
    different browsers, ensuring your web applications work well on all</st> <st c="26930">major
    platforms.</st>
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="26799">Playwright 在不同浏览器之间提供一致和可靠的自动化，确保你的网络应用程序在所有</st> <st c="26930">主要平台上都能良好运行。</st>
- en: <st c="26946">Playwright is known for its speed and efficiency, making it a
    great choice for testing and automating</st> <st c="27049">web interactions.</st>
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="26946">Playwright 以其速度和效率而闻名，使其成为测试和自动化</st> <st c="27049">网络交互的绝佳选择。</st>
- en: <st c="27066">You can run Playwright scripts in headless mode (without a visible
    browser UI) for faster execution, or in headful mode for debugging</st> <st c="27201">and
    interaction.</st>
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="27066">你可以以无头模式（没有可见的浏览器 UI）运行 Playwright 脚本以实现更快的执行，或者以有头模式进行调试</st>
    <st c="27201">和交互。</st>
- en: <st c="27217">Playwright offers support for popular programming languages such
    as TypeScript, Python, and Java.</st> <st c="27316">This means you can write automation
    scripts in the language you’re most</st> <st c="27388">comfortable with.</st>
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="27217">剧本编写者支持流行的编程语言，如 TypeScript、Python 和 Java。</st> <st c="27316">这意味着你可以用你最</st>
    <st c="27388">舒适的语言编写自动化脚本。</st>
- en: <st c="27405">Playwright uses native</st> <st c="27429">browser automation APIs
    to simulate user interactions accurately, resulting in more</st> <st c="27513">reliable
    tests.</st>
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="27405">Playwright 使用原生</st> <st c="27429">浏览器自动化 API 准确地模拟用户交互，从而产生更</st>
    <st c="27513">可靠的测试。</st>
- en: <st c="27528">You can leverage the full power of browser DevTools with Playwright,
    making it easier to inspect, debug, and diagnose issues in your</st> <st c="27662">web
    applications.</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27528">你可以利用 Playwright 的全部功能来利用浏览器 DevTools，这使得检查、调试和诊断你的</st> <st c="27662">网络应用程序中的问题变得更加容易。</st>
- en: <st c="27679">Summary</st>
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="27679">总结</st>
- en: <st c="27687">In this chapter, we have learned about E2E testing, an essential
    software development practice that ensures an application works perfectly from
    start to finish.</st> <st c="27849">E2E testing involves all integrated systems,
    both internal and external, to identify dependencies and verify the smooth flow</st>
    <st c="27974">of information.</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27687">在本章中，我们学习了端到端测试，这是一种确保应用程序从开始到结束完美运行的必要软件开发实践。</st> <st c="27849">端到端测试涉及所有集成系统，无论是内部还是外部，以识别依赖关系并验证信息流的顺畅。</st>
- en: <st c="27989">We also learned about the most common E2E testing tools, Protractor,
    Cypress, and Playwright.</st> <st c="28084">We explored the strengths of</st>
    <st c="28113">each tool:</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27989">我们还了解了最常用的端到端测试工具，Protractor、Cypress和Playwright。</st> <st c="28084">我们探讨了每个工具的优势：</st>
- en: '**<st c="28123">Protractor</st>**<st c="28134">: Designed for Angular applications,
    offering Angular-specific APIs for interacting with elements and handling</st>
    <st c="28246">asynchronous operations</st>'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28123">Protractor</st>**<st c="28134">: 专为Angular应用程序设计，提供用于与元素交互和处理异步操作的Angular特定API</st>'
- en: '**<st c="28269">Cypress</st>**<st c="28277">: A user-friendly tool that supports
    asynchronous/await syntax and concurrent test execution (albeit with limitations
    in the</st> <st c="28403">free version)</st>'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28269">Cypress</st>**<st c="28277">: 一款用户友好的工具，支持异步/await语法和并发测试执行（尽管免费版本存在一些限制）</st>'
- en: '**<st c="28416">Playwright</st>**<st c="28427">: Provides a modern async/await
    approach to test scripting, encourages simultaneous test execution for faster
    execution, and boasts a simple API for efficient</st> <st c="28587">test development</st>'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="28416">Playwright</st>**<st c="28427">: 提供了一种现代的异步/await测试脚本方法，鼓励同时执行测试以加快执行速度，并拥有一个简单的API以实现高效的测试开发</st>'
- en: <st c="28603">Understanding the advantages and limitations of these tools enables
    us, as a developer, to make informed decisions and select the tool that’s best
    suited to the specific needs of your project, taking into account the technology
    stack and</st> <st c="28842">team familiarity.</st>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28603">了解这些工具的优势和局限性，使我们作为开发者能够做出明智的决定，并选择最适合项目特定需求、考虑技术栈和团队熟悉度的工具。</st>
- en: <st c="28859">The following chapter takes a closer look at Cypress and its role
    in the E2E testing of web applications.</st> <st c="28966">This focused summary
    reinforces the chapter’s key learnings, highlights its value (learning about E2E
    testing and tools), and provides an overview of the topic of the</st> <st c="29133">next
    chapter.</st>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28859">以下章节将更深入地探讨Cypress及其在Web应用程序端到端测试中的作用。</st> <st c="28966">这个专注的总结强化了章节的关键学习成果，突出了其价值（了解端到端测试和工具），并概述了下一章的主题。</st>
    <st c="29133"></st>
