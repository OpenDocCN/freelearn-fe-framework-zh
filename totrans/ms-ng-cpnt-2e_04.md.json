["```js\nexport interface Task {\n  readonly id?: number;\n  readonly projectId?: number;\n  readonly title: string;\n  readonly done: boolean;\n}\n\nexport type TaskListFilterType = 'all' | 'open' | 'done';\n\nexport interface Project {\n readonly id?: number;\n readonly title: string;\n readonly description: string;\n}\n```", "```js\nimport {InMemoryDbService} from 'angular-in-memory-web-api';\nimport {Project, Task} from './model';\n\nexport class Database implements InMemoryDbService {\n  createDb() {\n    const projects: Project[] = [\n {id: 1, title: 'My first project', description: 'This is your first project.'},\n {id: 2, title: 'My second project', description: 'This is your second project.'}\n ];\n\n    const tasks: Task[] = [\n      {id: 1, projectId: 1, title: 'Task 1', done: false},\n      {id: 2, projectId: 1, title: 'Task 2', done: false},\n      {id: 3, projectId: 1, title: 'Task 3', done: true},\n      {id: 4, projectId: 1, title: 'Task 4', done: false}\n    ];\n\n    return {projects, tasks};\n  }\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Task} from '../model';\n\n@Injectable()\nexport class TaskService {\n  …\n\n getProjectTasks(projectId: number) {\n return this.tasks\n .asObservable()\n .pipe(\n map((tasks) => tasks.filter((task) => task.projectId === projectId))\n );\n }\n}\n```", "```js\nng generate service --spec false project/project\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject, Observable, combineLatest} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Project} from '../model';\n\n@Injectable()\nexport class ProjectService {\n  private projects = new BehaviorSubject<Project[]>([]);\n  private selectedProjectId = new BehaviorSubject<number>(1);\n  private selectedProject: Observable<Project>;\n\n  constructor(private http: HttpClient) {\n    this.loadProjects();\n    this.selectedProject = combineLatest(this.projects, this.selectedProjectId)\n      .pipe(\n        map(([projects, selectedProjectId]) =>\n        projects.find((project) => project.id === selectedProjectId)\n      )\n    );\n  }\n\n  private loadProjects() {\n    this.http.get<Project[]>('/api/projects')\n      .subscribe((projects) => this.projects.next(projects));\n  }\n\n  selectProject(id: number) {\n    this.selectedProjectId.next(id);\n  }\n\n  getSelectedProject() {\n    return this.selectedProject;\n  }\n}\n```", "```js\n…\nimport {ProjectService} from './project/project.service';\n\n…\n  providers: [ProjectService, TaskService],\n…\n```", "```js\nng generate component --spec false -ve none -cd onpush project/project\n```", "```js\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {Project} from '../../model';\n\n@Component({\n  selector: 'mac-project',\n  templateUrl: './project.component.html',\n  styleUrls: ['./project.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectComponent {\n  @Input() project: Project;\n}\n```", "```js\n<header class=\"header\">\n  <h2 class=\"title\">{{project.title}}</h2>\n  {{project.description}}\n</header>\n<mac-task-list-container>\n</mac-task-list-container>\n```", "```js\n…\nimport {Project, Task, TaskListFilterType} from '../../model';\nimport {map, switchMap, take} from 'rxjs/operators';\nimport {ProjectService} from '../../project/project.service';\n\n@Component({\n  selector: 'mac-task-list-container',\n  templateUrl: './task-list-container.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListContainerComponent {\n  selectedProject: Observable<Project>;\n  …\n\n  constructor(private taskService: TaskService, private projectService: ProjectService) {\n    this.selectedProject = this.projectService.getSelectedProject();\n\n this.tasks = this.selectedProject.pipe(\n switchMap((project) => this.taskService.getProjectTasks(project.id))\n );\n\n    …\n  }\n\n  …\n\n  addTask(title: string) {\n    this.selectedProject\n .pipe(\n take(1)\n )\n .subscribe((project) => {\n const task: Task = {\n projectId: project.id, title, done: false\n };\n this.taskService.addTask(task);\n });\n  }\n\n  …\n}\n```", "```js\nimport {from, interval} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nconst o1 = interval(1000);\nconst o2 = from(['a', 'b']);\n\no1.pipe(\n switchMap(() => o2)\n).subscribe((item) => console.log(item));\n```", "```js\nfunction timer(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\ntimer(1000)\n .then(() => timer(1000))\n .then(() => timer(1000))\n .then(() => timer(1000))\n .then(() => console.log('After 4 seconds!'));\n```", "```js\nimport {timer} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\ntimer(1000).pipe(\n switchMap(() => timer(1000)),\n switchMap(() => timer(1000)),\n switchMap(() => timer(1000))\n).subscribe((item) => console.log('After 4 seconds!'));\n```", "```js\n…  \nthis.tasks = this.selectedProject.pipe(\n switchMap((project) => this.taskService.getProjectTasks(project.id))\n);\n…\n```", "```js\nimport {from} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nfrom([1, 2, 3]).pipe(\n take(1)\n).subscribe((item) => console.log(item));\n```", "```js\n…\naddTask(title: string) {\n  this.selectedProject\n .pipe(\n take(1)\n )\n .subscribe((project) => {\n const task: Task = {\n projectId: project.id, title, done: false\n };\n this.taskService.addTask(task);\n });\n}\n…\n```", "```js\nng generate component --spec false -ve none -cd onpush container/project-container\n```", "```js\nimport {Component, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Project} from '../../model';\nimport {ProjectService} from '../../project/project.service';\n\n@Component({\n  selector: 'mac-project-container',\n  templateUrl: './project-container.component.html',\n  styleUrls: ['./project-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectContainerComponent {\n  selectedProject: Observable<Project>;\n\n  constructor(private projectService: ProjectService) {\n    this.selectedProject = projectService.getSelectedProject();\n  }\n}\n```", "```js\n<mac-project [project]=\"selectedProject | async\">\n</mac-project>\n```", "```js\n<aside class=\"side-nav\"></aside>\n<main class=\"main\">\n  <mac-project-container></mac-project-container>\n</main>\n```", "```js\n…\nexport interface Tab {\n readonly id: any;\n readonly title: string;\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush ui/tabs/tabs\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation\n} from '@angular/core';\nimport {Tab} from '../../model';\n\n@Component({\n  selector: 'mac-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabsComponent {\n  @Input() tabs: Tab[];\n  @Input() activeTab: Tab;\n  @Output() outActivateTab = new EventEmitter<Tab>();\n\n  activateTab(tab: Tab) {\n    this.outActivateTab.emit(tab);\n  }\n}\n```", "```js\n<ul class=\"tab-list\">\n  <li *ngFor=\"let tab of tabs\"\n      class=\"tab-list-item\">\n    <button class=\"tab-button\"\n            [class.tab-button-active]=\"activeTab?.id === tab.id\"\n            (click)=\"activateTab(tab)\">{{tab.title}}</button>\n  </li>\n</ul>\n```", "```js\nimport {ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation} from '@angular/core';\nimport {Project, Tab} from '../../model';\n\n…\nexport class ProjectComponent {\n  @Input() project: Project;\n @Input() tabs: Tab[];\n @Input() activeTab: Tab;\n @Output() outActivateTab = new EventEmitter<Tab>();\n\n activateTab(tab: Tab) {\n this.outActivateTab.emit(tab);\n }\n}\n```", "```js\n<header class=\"header\">\n  <h2 class=\"title\">{{project.title}}</h2>\n  {{project.description}}\n</header>\n<mac-tabs [tabs]=\"tabs\"\n [activeTab]=\"activeTab\"\n (outActivateTab)=\"activateTab($event)\">\n</mac-tabs>\n<mac-task-list-container *ngIf=\"activeTab.id === 'tasks'\">\n</mac-task-list-container>\n```", "```js\n…\nimport {Project, Tab} from '../../model';\n\n…\nexport class ProjectContainerComponent {\n  selectedProject: Observable<Project>;\n tabs: Tab[] = [\n {id: 'tasks', title: 'Tasks'},\n {id: 'comments', title: 'Comments'},\n {id: 'activities', title: 'Activities'}\n ];\n activeTab: Tab = this.tabs[0];\n\n  …\n activateTab(tab: Tab) {\n this.activeTab = tab;\n }\n}\n```", "```js\n<mac-project [project]=\"selectedProject | async\"\n             [tabs]=\"tabs\"\n [activeTab]=\"activeTab\"\n (outActivateTab)=\"activateTab($event)\">\n</mac-project>\n```", "```js\n@Component({ \n  selector: 'mac-reveal-content', \n  template: ` \n    <h2 (click)=\"showContent = !showContent\">{{revealTitle}}</h2>\n    <div *ngIf=\"showContent\" class=\"content\">\n      <ng-content></ng-content>\n    </div>\n  ` \n}) \nexport class RevealContentComponent {\n  @Input() title: string;\n  showContent = false;\n} \n\n@Component({ \n  selector: 'mac-root', \n  template: ` \n    <mac-reveal-content revealTitle=\"Click to show more\">\n      <p>I'm the content which is shown or hidden when you click the above title</p>\n    </mac-reveal-content>\n  `\n})\nexport class AppComponent {}\n```", "```js\n@Component({ \n  selector: 'mac-multi-projection', \n  template: `\n    <header class=\"title\">\n      <ng-content select=\"h1\"></ng-content>\n    </header>\n    <main class=\"rest-content\">\n      <ng-content></ng-content>\n    </main>\n  `\n}) \nexport class MultiProjectionComponent {}\n\n@Component({\n  selector: 'mac-root',\n  template: `\n    <mac-multi-projection>\n      <h1>This title will be projected in the first slot</h1>\n      <p>Any other element will be projected into the second, generic slot</p>\n    </mac-multi-projection>\n  `\n})\nexport class AppComponent {}\n```", "```js\nng generate component --spec false -ve none -cd onpush ui/navigation-item/navigation-item\n```", "```js\n{{title}}\n```", "```js\nimport {\n  ChangeDetectionStrategy, Component, EventEmitter, HostListener, Input, Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n  selector: 'mac-navigation-item',\n  templateUrl: './navigation-item.component.html',\n  styleUrls: ['./navigation-item.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NavigationItemComponent {\n  @Input() title: string;\n  @Input() navId: any;\n  @Output() outActivateNavigationItem = new EventEmitter<any>();\n\n  @HostListener('click')\n  activateNavigationItem() {\n    this.outActivateNavigationItem.emit(this.navId);\n  }\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush ui/navigation-section/navigation-section\n```", "```js\n<div class=\"title\">{{title}}</div>\n<div class=\"item-list\">\n  <ng-content select=\"mac-navigation-item\"></ng-content>\n</div>\n```", "```js\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\n\n@Component({\n  selector: 'mac-navigation-section',\n  templateUrl: './navigation-section.component.html',\n  styleUrls: ['./navigation-section.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NavigationSectionComponent {\n  @Input() title: string;\n}\n```", "```js\n<mac-navigation-section title=\"Dogs\">\n  <mac-navigation-item navId=\"pug\" title=\"Pug\"></mac-navigation-item>\n  <mac-navigation-item navId=\"french-bulldog\" title=\"French Bulldog\"></mac-navigation-item>\n  <mac-navigation-item navId=\"corgi\" title=\"Corgi\"></mac-navigation-item>\n</mac-navigation-section>\n```", "```js\nng generate component --spec false -ve none -cd onpush ui/navigation/navigation\n```", "```js\n<nav>\n  <ng-content select=\"mac-navigation-section\"></ng-content>\n</nav>\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n  selector: 'mac-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NavigationComponent {\n\n}\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Project} from './model';\nimport {ProjectService} from './project/project.service';\n\n@Component({\n  selector: 'mac-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  projects: Observable<Project[]>;\n  selectedProject: Observable<Project>;\n\n  constructor(private projectService: ProjectService) {\n    this.projects = projectService.getProjects();\n    this.selectedProject = this.projectService.getSelectedProject();\n  }\n\n  selectProject(id: number) {\n    this.projectService.selectProject(id);\n  }\n}\n```", "```js\n<aside class=\"side-nav\">\n <mac-navigation>\n <mac-navigation-section title=\"Projects\">\n <mac-navigation-item *ngFor=\"let project of projects | async\"\n [navId]=\"project.id\"\n [title]=\"project.title\"\n [class.active]=\"project.id === (selectedProject | async).id\"\n (outActivateNavigationItem)=\"selectProject($event)\">\n </mac-navigation-item>\n </mac-navigation-section>\n </mac-navigation>\n</aside>\n<main class=\"main\">\n  <mac-project-container></mac-project-container>\n</main>\n```", "```js\n<h1 contenteditable>I'm an editable title</h1> \n<p>I can't be edited</p> \n```", "```js\nconst h1 = document.querySelector('h1'); \nh1.addEventListener('input', event => console.log(h1.textContent); \n```", "```js\nng generate component --spec false -ve none -cd onpush ui/editor/editor\n```", "```js\nimport {\n  AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, HostListener, \n  Input, OnChanges, Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n  selector: 'mac-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EditorComponent implements OnChanges, AfterViewInit {\n  @ViewChild('editableContentElement') editableContentElement: ElementRef;\n  @HostBinding('class.edit-mode') editMode = false;\n  @Input() content: string;\n  @Input() showControls: boolean;\n  @Output() outSaveEdit = new EventEmitter<string>();\n  @Output() outCancelEdit = new EventEmitter<never>();\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.content && this.editableContentElement) {\n      this.setEditableContent(this.content);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.setEditableContent(this.content);\n  }\n\n  @HostListener('click')\n  focusEditableContent() {\n    if (this.editMode) {\n      this.editableContentElement.nativeElement.focus();\n    }\n  }\n\n  saveEdit() {\n    this.editMode = false;\n    this.outSaveEdit.emit(this.getEditableContent());\n  }\n\n  cancelEdit() {\n    this.editMode = false;\n    this.setEditableContent(this.content);\n    this.outCancelEdit.emit();\n  }\n\n  beginEdit() {\n    this.editMode = true;\n  }\n\n  private getEditableContent() {\n    return this.editableContentElement.nativeElement.textContent;\n  }\n\n  private setEditableContent(content: string) {\n    this.editableContentElement.nativeElement.textContent = content;\n  }\n}\n\n```", "```js\n@ViewChild('editableContentElement') editableContentElement: ElementRef; \n```", "```js\n@HostBinding('class.edit-mode') editMode = false;\n```", "```js\n@Input() content: string;\n@Input() showControls: boolean;\n```", "```js\n@Output() outSaveEdit = new EventEmitter<string>();\n@Output() outCancelEdit = new EventEmitter<never>();\n```", "```js\nprivate getEditableContent() {\n  return this.editableContentElement.nativeElement.textContent;\n}\n\nprivate setEditableContent(content: string) {\n  this.editableContentElement.nativeElement.textContent = content;\n}\n```", "```js\nngOnChanges(changes: SimpleChanges) {\n  if (changes.content && this.editableContentElement) {\n    this.setEditableContent(this.content);\n  }\n}\n\nngAfterViewInit() {\n  this.setEditableContent(this.content);\n}\n```", "```js\nsaveEdit() {\n  this.editMode = false;\n  this.outSaveEdit.emit(this.getEditableContent());\n}\n\ncancelEdit() {\n  this.editMode = false;\n  this.setEditableContent(this.content);\n  this.outCancelEdit.emit();\n}\n\nbeginEdit() {\n  this.editMode = true;\n}\n```", "```js\n@HostListener('click')\nfocusEditableContent() {\n  if (this.editMode) {\n    this.editableContentElement.nativeElement.focus();\n  }\n}\n```", "```js\n<div #editableContentElement\n     class=\"editable-content\"\n     contenteditable=\"true\"></div>\n<div class=\"output\">{{content || '-'}}</div>\n<div *ngIf=\"showControls && !editMode\"\n     class=\"controls\">\n  <button (click)=\"beginEdit()\" class=\"icon-edit\"></button>\n</div>\n<div *ngIf=\"showControls && editMode\"\n     class=\"controls\">\n  <button (click)=\"saveEdit()\" class=\"icon-save\"></button>\n  <button (click)=\"cancelEdit()\" class=\"icon-cancel\"></button>\n</div>\n```", "```js\n<mac-checkbox [checked]=\"task.done\"\n              (outCheck)=\"updateTask($event)\"></mac-checkbox>\n<div class=\"title\">\n <mac-editor [content]=\"task.title\"\n [showControls]=\"true\"\n (outSaveEdit)=\"updateTitle($event)\"></mac-editor>\n</div>\n```", "```js\n…\nexport class TaskComponent {\n  …\n  updateTitle(title: string) {\n this.outUpdateTask.emit({\n ...this.task,\n title\n });\n }\n}\n```", "```js\n<header class=\"header\">\n  <h2 class=\"title\">\n    <mac-editor [content]=\"project.title\"\n [showControls]=\"true\"\n (outSaveEdit)=\"updateTitle($event)\"></mac-editor>\n  </h2>\n <mac-editor [content]=\"project.description\"\n [showControls]=\"true\"\n (outSaveEdit)=\"updateDescription($event)\"></mac-editor>\n</header>\n…\n```", "```js\n…\nexport class ProjectComponent {\n  …\n  @Output() outUpdateProject = new EventEmitter<Project>();\n\n  activateTab(tab: Tab) {\n    this.outActivateTab.emit(tab);\n  }\n\n  updateTitle(title: string) {\n this.outUpdateProject.emit({\n ...this.project,\n title\n });\n }\n\n updateDescription(description: string) {\n this.outUpdateProject.emit({\n ...this.project,\n description\n });\n }\n}\n```", "```js\n<mac-project [project]=\"selectedProject | async\"\n             [tabs]=\"tabs\"\n             [activeTab]=\"activeTab\"\n             (outActivateTab)=\"activateTab($event)\"\n             (outUpdateProject)=\"updateProject($event)\">\n</mac-project>\n```", "```js\n…\nexport class ProjectContainerComponent {\n  …\n  updateProject(project: Project) {\n this.projectService.updateProject(project);\n }\n}\n```", "```js\n…\nexport class ProjectService {\n  …\n  updateProject(project: Project) {\n this.http.post(`/api/projects/${project.id}`, project)\n .subscribe(() => this.loadProjects());\n }\n}\n```", "```js\nexport interface User {\n  readonly id?: number;\n  readonly name: string;\n  readonly pictureUrl: string;\n}\n```", "```js\nimport {InMemoryDbService} from 'angular-in-memory-web-api';\nimport {Project, Task, User} from './model';\n\nexport class Database implements InMemoryDbService {\n  createDb() {\n    const users: User[] = [\n {id: 1, name: 'You', pictureUrl: '/assets/user.svg'}\n ];\n\n    …\n\n    return {users, projects, tasks};\n  }\n}\n```", "```js\nng generate service --spec false user/user\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {User} from '../model';\n\n@Injectable()\nexport class UserService {\n  constructor(private http: HttpClient) {\n\n  }\n\n  getCurrentUser() {\n    return this.http.get<User>('/api/users/1');\n  }\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush user/profile-picture/profile-picture\n```", "```js\nimport {\n  Component, ViewEncapsulation, ChangeDetectionStrategy, Input, SimpleChanges,\n  OnChanges\n} from '@angular/core';\nimport {User} from '../../model';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\n\n@Component({\n  selector: 'mac-profile-picture',\n  templateUrl: './profile-picture.component.html',\n  styleUrls: ['./profile-picture.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProfilePictureComponent implements OnChanges {\n  @Input() user: User;\n  pictureSafeUrl: SafeResourceUrl;\n\n  constructor(private sanitizer: DomSanitizer) {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.user) {\n      this.pictureSafeUrl = this.sanitizer\n        .bypassSecurityTrustResourceUrl(this.user.pictureUrl);\n    }\n  }\n```", "```js\nsafeHtml: SafeHtml = \n  bypassSecurityTrustHtml(\n    '<strong>Important</strong>'\n  );\n```", "```js\n<div [innerHtml]=\"safeHtml\">\n</div>\n```", "```js\nsafeStyle: SafeStyle = \n  bypassSecurityTrustStyle(\n    'url(/assets/image.jpg)'\n  );\n```", "```js\n<div [style.background]=\"safeStyle\">\n</div>\n```", "```js\nsafeUrl: SafeUrl = \n  bypassSecurityTrustUrl(\n    'https://google.com'\n  );\n```", "```js\n<a [href]=\"safeUrl\">Google</a>\n```", "```js\nsafeUrl: SafeResourceUrl = \n  bypassSecurityTrustResourceUrl(\n    '/assets/image.jpg'\n  );\n```", "```js\n<img [attr.src]=\"safeUrl\" src=\"\">\n```", "```js\n<img [attr.src]=\"pictureSafeUrl\" src=\"\">\n```", "```js\nng generate component --spec false -ve none -cd onpush user/user-area/user-area\n```", "```js\nimport {Component, ViewEncapsulation, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {User} from '../../model';\n\n@Component({\n  selector: 'mac-user-area',\n  templateUrl: './user-area.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UserAreaComponent {\n  @Input() user: User;\n  @Input() openTasksCount: number;\n}\n```", "```js\n<div class=\"profile\">\n  <mac-profile-picture [user]=\"user\"></mac-profile-picture>\n</div>\n<div class=\"information\">\n  <p class=\"welcome-text\">Hi {{user.name}}!</p>\n  <p *ngIf=\"openTasksCount !== 0\">You got <strong>{{openTasksCount}}</strong> open tasks.</p>\n  <p *ngIf=\"openTasksCount === 0\">No open tasks. Hooray!</p>\n</div>\n```", "```js\n…\nimport {map} from 'rxjs/operators';\nimport {UserService} from './user/user.service';\nimport {Project, Task, User} from './model';\n…\nexport class AppComponent {\n openTasksCount: Observable<number>;\n user: Observable<User>;\n  projects: Observable<Project[]>;\n  selectedProject: Observable<Project>;\n\n  constructor(taskListService: TaskService,\n userService: UserService,\n              private projectService: ProjectService) {\n this.openTasksCount = taskListService.getTasks()\n .pipe(\n map((tasks: Task[]) => {\n return tasks\n .filter((task) => !task.done)\n .length;\n })\n );\n    this.projects = projectService.getProjects();\n    this.selectedProject = this.projectService.getSelectedProject();\n this.user = userService.getCurrentUser();\n  }\n\n  selectProject(id: number) {\n    this.projectService.selectProject(id);\n  }\n}\n```", "```js\n<aside class=\"side-nav\">\n  <mac-user-area [user]=\"user | async\"\n [openTasksCount]=\"openTasksCount | async\">\n </mac-user-area>\n  …\n</aside>\n…\n```", "```js\n…\n\nexport interface Project {\n  readonly id?: number;\n  readonly title: string;\n  readonly description: string;\n  readonly comments: Comment[];\n}\n\n…\n\nexport interface Comment {\n readonly time: number;\n readonly user: User;\n readonly content: string;\n}\n\nexport interface CommentUpdate {\n readonly index: number;\n readonly comment: Comment;\n} \n```", "```js\nimport {InMemoryDbService} from 'angular-in-memory-web-api';\nimport {Project, Task, User} from './model';\n\nexport class Database implements InMemoryDbService {\n  createDb() {\n    …\n\n    const projects: Project[] = [\n      {id: 1, title: 'My first project', description: 'This is your first project.', comments: []},\n      {id: 2, title: 'My second project', description: 'This is your second project.', comments: []}\n    ];\n\n    …\n  }\n}\n```", "```js\nnpm install --save moment@2.19.3\n```", "```js\nng generate pipe --spec false pipes/from-now\n```", "```js\nimport {Pipe, PipeTransform} from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'fromNow'\n})\nexport class FromNowPipe implements PipeTransform {\n  transform(value: any) {\n    return moment(value).fromNow();\n  }\n}\n```", "```js\n<div>{{name | toUpperCase}}</div>\n```", "```js\n<div>{{name | reverse | toUpperCase}}</div>\n```", "```js\nng generate component --spec false -ve none -cd onpush comments/comment/comment\n```", "```js\n<div class=\"meta\">\n  <div class=\"user-picture\">\n    <mac-profile-picture [user]=\"comment.user\"></mac-profile-picture>\n  </div>\n  <div class=\"user-name\">{{comment.user.name}}</div>\n  <div class=\"time\">\n    {{comment.time | fromNow}}\n  </div>\n</div>\n<div class=\"main\">\n  <div class=\"content\">\n    <mac-editor [content]=\"comment.content\"\n                [showControls]=\"comment.user.id === user.id\"\n                (outSaveEdit)=\"updateComment($event)\">\n    </mac-editor>\n  </div>\n</div>\n```", "```js\nimport {\n  Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter\n} from '@angular/core';\nimport {Comment, User} from '../../model';\n\n@Component({\n  selector: 'mac-comment',\n  templateUrl: './comment.component.html',\n  styleUrls: ['./comment.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CommentComponent {\n  @Input() comment: Comment;\n  @Input() user: User;\n  @Output() outUpdateComment = new EventEmitter<Comment>();\n\n  updateComment(content: string) {\n    this.outUpdateComment.emit({\n      ...this.comment,\n      content\n    });\n  }\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush comments/comments/comments\n```", "```js\n<div class=\"title\">Add new comment</div>\n<div class=\"add-comment-section\">\n  <div #commentContentEditable\n       class=\"add-comment-box\"\n       contenteditable=\"true\">\n  </div>\n  <button (click)=\"createComment()\"\n          class=\"button\" >Add comment</button>\n</div>\n\n<ng-container *ngIf=\"comments.length > 0\">\n  <div class=\"title\">All comments</div>\n  <mac-comment *ngFor=\"let comment of comments; let index = index\"\n               [comment]=\"comment\"\n               [user]=\"user\"\n               (outUpdateComment)=\"updateComment(index, $event)\">\n  </mac-comment>\n</ng-container>\n```", "```js\nimport {\n  Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output,\n  EventEmitter, ViewChild, ElementRef\n} from '@angular/core';\nimport {Comment, CommentUpdate, User} from '../../model';\n\n@Component({\n  selector: 'mac-comments',\n  templateUrl: './comments.component.html',\n  styleUrls: ['./comments.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CommentsComponent {\n  @Input() user: User;\n  @Input() comments: Comment[];\n  @Output() outUpdateComment = new EventEmitter<CommentUpdate>();\n  @Output() outCreateComment = new EventEmitter<Comment>();\n  @ViewChild('commentContentEditable') commentContentEditable: ElementRef;\n\n  createComment() {\n    this.outCreateComment.emit({\n      user: this.user,\n      time: +new Date(),\n      content: this.commentContentEditable.nativeElement.textContent\n    });\n    this.commentContentEditable.nativeElement.textContent = '';\n  }\n\n  updateComment(index: number, comment: Comment) {\n    this.outUpdateComment.next({\n      index,\n      comment\n    });\n  }\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush container/project-comments-container\n```", "```js\nimport {Component, ViewEncapsulation, ChangeDetectionStrategy} from '@angular/core';\nimport {ProjectService} from '../../project/project.service';\nimport {UserService} from '../../user/user.service';\nimport {Observable} from 'rxjs';\nimport {Comment, CommentUpdate, Project, User} from '../../model';\nimport {map, take} from 'rxjs/operators';\n\n@Component({\n  selector: 'mac-project-comments-container',\n  templateUrl: './project-comments-container.component.html',\n  styleUrls: ['./project-comments-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectCommentsContainerComponent {\n  user: Observable<User>;\n  selectedProject: Observable<Project>;\n  projectComments: Observable<Comment[]>;\n\n  constructor(private projectService: ProjectService, private userService: UserService) {\n    this.user = userService.getCurrentUser();\n    this.selectedProject = projectService.getSelectedProject();\n    this.projectComments = this.selectedProject\n      .pipe(\n        map((project) => project.comments)\n      );\n  }\n\n  createComment(comment: Comment) {\n    this.selectedProject\n      .pipe(\n        take(1)\n      )\n      .subscribe((project) => this.projectService.updateProject({\n        ...project,\n        comments: [...project.comments, comment]\n      }));\n  }\n\n  updateComment(update: CommentUpdate) {\n    this.selectedProject\n      .pipe(\n        take(1)\n      )\n      .subscribe((project) => {\n        const updatedComments = project.comments.slice();\n        updatedComments[update.index] = update.comment;\n        this.projectService.updateProject({\n          ...project,\n          comments: updatedComments\n        });\n      });\n  }\n}\n```", "```js\n<mac-comments [user]=\"user | async\"\n              [comments]=\"projectComments | async\"\n              (outCreateComment)=\"createComment($event)\"\n              (outUpdateComment)=\"updateComment($event)\">\n</mac-comments>\n```", "```js\n<header class=\"header\">\n  <h2 class=\"title\">\n    <mac-editor [content]=\"project.title\"\n                [showControls]=\"true\"\n                (outSaveEdit)=\"updateTitle($event)\"></mac-editor>\n  </h2>\n  <mac-editor [content]=\"project.description\"\n              [showControls]=\"true\"\n              (outSaveEdit)=\"updateDescription($event)\"></mac-editor>\n</header>\n<mac-tabs [tabs]=\"tabs\"\n          [activeTab]=\"activeTab\"\n          (outActivateTab)=\"activateTab($event)\">\n</mac-tabs>\n<mac-task-list-container *ngIf=\"activeTab.id === 'tasks'\">\n</mac-task-list-container>\n<mac-project-comments-container *ngIf=\"activeTab.id === 'comments'\">\n</mac-project-comments-container>\n```"]