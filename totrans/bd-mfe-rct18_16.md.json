["```js\n//index file\n---\n// Example: Use a dynamic React component on the page.\nimport MyReactComponent from '../components/MyReactComponent.jsx';\n---\n<!-- This component is now interactive on the page!\n     The rest of your website remains static and zero JS. -->\n<MyReactComponent client:load />\n```", "```js\npnpm create vite microfrontend-app --template react\n```", "```js\n// Catalog App\nfunction CatalogApp() { \n  return <h1>Hello World</h1>;\n}\nexport default CatalogApp;\n```", "```js\n// Host App\nimport React, { lazy, Suspense } from 'react';\nconst CatalogApp = lazy(() => import('./catalog'));\nfunction App() {\n  return (\n    <>\n      <Suspense fallback={<div>Loading...</div>}>\n        <CatalogApp />\n      </Suspense>\n    </>\n  );\n}\n```", "```js\nconst NextFederationPlugin = require(\"@module-federation/nextjs-mf\");\nconst WasmPackPlugin = require('@wasm-tool/wasm-pack-plugin');\nconst path= require(\"path\")\nconst remotes = (isServer) => {\n  const location = isServer ? \"ssr\" : \"chunks\";\n  return {\n    catalog: `catalog@http://localhost:3001/_next/static/${location}/remoteEntry.js`,\n  };\n};\nmodule.exports = {\n  webpack(config, options) {\n    config.plugins.push(\n      new WasmPackPlugin({\n        crateDirectory: ('./rust'),\n    }),\n      new NextFederationPlugin({\n        name: \"catalog\",\n        filename: \"static/chunks/remoteEntry.js\",\n        exposes: {\n          \"./Module\": \"./pages/index.tsx\",\n        },\n        remotes: remotes(options.isServer),\n        shared: {},\n        extraOptions: {\n          automaticAsyncBoundary: true,\n        },\n\n      })\n    );\n    config.experiments = {\n      syncWebAssembly: true,\n    };\n    config.module.rules.push({\n      test: /\\.wasm$/,\n      type: 'webassembly/sync',\n    });\n    return config;\n  },\n};\n```", "```js\n    npm install --save-dev @cloudflare/next-on-pages\n    ```"]