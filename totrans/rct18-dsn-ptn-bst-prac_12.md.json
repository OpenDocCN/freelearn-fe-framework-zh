["```js\nnpm init \n```", "```js\nnpm install webpack \n```", "```js\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react ts-loader typescript \n```", "```js\nnpm install --save-dev webpack-node-externals \n```", "```js\n\"scripts\": {\n  \"build\": \"webpack\"\n} \n```", "```js\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n} \n```", "```js\nconst nodeExternals = require('webpack-node-externals')\nconst path = require('path')\nconst rules = [{\n  test: /\\.(tsx|ts)$/,\n  use: 'ts-loader',\n  exclude: /node_modules/\n}] \n```", "```js\nconst client = {\n  entry: './src/client.tsx',\n  output: {\n   path: path.resolve(__dirname, './dist/public'),\n   filename: 'bundle.js',\n   publicPath: '/'\n  },\n  module: {\n   rules\n  }\n} \n```", "```js\nconst server = {\n  entry: './src/server.ts',\n  output: {\n   path: path.resolve(__dirname, './dist'),\n   filename: 'server.js',\n   publicPath: '/'\n  },\n  module: {\n   rules\n  },\n  target: 'node',\n  externals: [nodeExternals()],\n  resolve: {\n   extensions: [\".ts\", \".tsx\", \".js\", \".json\"]\n  }\n} \n```", "```js\nmodule.exports = [client, server] \n```", "```js\nconst App = () => <div>Hello React</div>\nexport default App \n```", "```js\nimport { render } from 'react-dom'\nimport App from './app'\nrender(<App />, document.getElementById('root')) \n```", "```js\nexport default body => `\n  <!DOCTYPE html>\n  <html>\n   <head>\n    <meta charset=\"UTF-8\" />\n   </head>\n   <body>\n    <div id=\"root\">${body}</div>\n    <script src=\"img/bundle.js\"></script>\n   </body>\n</html> \n```", "```js\nnpm install express react react-dom @types/express @types/react @types/react-dom \n```", "```js\nimport React from 'react'\nimport express, { Request, Response } from 'express'\nimport { renderToString } from 'react-dom/server'\nimport path from 'path'\nimport App from './App'\nimport template from './template' \n```", "```js\nconst app = express() \n```", "```js\napp.use(express.static(path.resolve(__dirname, './dist/public'))) \n```", "```js\napp.get('/', (req: Request, res: Response) => {\n  const body = renderToString(<App />)\n  const html = template(body)\n  res.send(html)\n}) \n```", "```js\n<div data-reactroot=\"\" data-reactid=\"1\" data-react-checksum=\"982061917\">Hello React</div> \n```", "```js\napp.listen(3000, () => {\n  console.log('Listening on port 3000')\n}) \n```", "```js\n\"scripts\": {\n  \"build\": \"webpack\",\n  \"start\": \"node ./dist/server\"\n} \n```", "```js\nnpm run build \n```", "```js\nnpm start \n```", "```js\nimport { FC } from 'react'\ntype Gist = {\n  id: string\n  description: string\n }\n type Props = {\n  gists: Gist[]\n}\nconst App: FC<Props> = ({ gists }) => ( \n  <ul>\n   {gists.map(gist => (\n    <li key={gist.id}>{gist.description}</li>\n   ))}\n  </ul>\n)\nexport default App \n```", "```js\nnpm install isomorphic-fetch @types/isomorphic-fetch \n```", "```js\nimport fetch from 'isomorphic-fetch' \n```", "```js\nfetch('https://api.github.com/users/gaearon/gists') \n  .then(response => response.json()) \n  .then(gists => {}) \n```", "```js\napp.get('/', (req, res) => { \n  fetch('https://api.github.com/users/gaearon/gists')\n   .then(response => response.json()) \n   .then(gists => {\n    const body = renderToString(<App gists={gists} />)\n    const html = template(body)\n    res.send(html)\n    })\n}) \n```", "```js\nnpm run build && npm start \n```", "```js\nexport default (body, gists) => `\n  <!DOCTYPE html>\n  <html>\n   <head>\n    <meta charset=\"UTF-8\" /> \n   </head>\n   <body>\n    <div id=\"root\">${body}</div>\n    <script>window.gists = ${JSON.stringify(gists)}</script>\n    <script src=\"img/bundle.js\"></script>\n   </body>\n  </html>\n` \n```", "```js\nconst html = template(body, gists) \n```", "```js\nReactDOM.hydrate(\n  <App gists={window.gists} />,\n  document.getElementById('app') \n) \n```", "```js\nnpm run build && npm start \n```", "```js\nnpm init \n```", "```js\nnpm install next react react-dom typescript @types/react @types/node \n```", "```js\n\"scripts\": {\n  \"dev\": \"next\" \n} \n```", "```js\nimport fetch from 'isomorphic-fetch' \n```", "```js\nconst App = () => {}\nexport default App \n```", "```js\nApp.getInitialProps = async () => {\n  const url = 'https://api.github.com/users/gaearon/gists'\n  const response = await fetch(url)\n  const gists = await response.json() \n  return {\n   gists\n  }\n} \n```", "```js\nreturn (\n  <ul>\n   {props.gists.map(gist => (\n    <li key={gist.id}>{gist.description}</li> \n   ))}\n  </ul> \n) \n```", "```js\n{\n  \"compilerOptions\": {\n   \"baseUrl\": \"src\",\n   \"esModuleInterop\": true,\n   \"module\": \"esnext\",\n   \"noImplicitAny\": true,\n   \"outDir\": \"dist\",\n   \"resolveJsonModule\": true,\n   \"sourceMap\": false,\n   \"target\": \"esnext\",\n   \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n   \"allowJs\": true,\n   \"skipLibCheck\": true,\n   \"strict\": true,\n   \"forceConsistentCasingInFileNames\": true,\n   \"noEmit\": true,\n   \"moduleResolution\": \"node\",\n   \"isolatedModules\": true,\n   \"jsx\": \"react-jsx\"\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n} \n```", "```js\nnpm run dev \n```", "```js\n> Ready on http://localhost:3000 \n```"]