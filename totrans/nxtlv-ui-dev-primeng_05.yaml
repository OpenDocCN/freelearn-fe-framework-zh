- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Introducing Input Components and Form Controls
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍输入组件和表单控件
- en: Diving deeper into the world of Angular and PrimeNG, we’re about to embark on
    a journey through the realm of input components and form controls.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 深入 Angular 和 PrimeNG 的世界，我们即将开始一段关于输入组件和表单控件的旅程。
- en: This chapter is dedicated to providing a comprehensive understanding of how
    to effectively utilize various input components and form controls in your Angular
    applications. We’ll be exploring the use of text inputs, checkboxes, radio buttons,
    dropdowns, and more. Additionally, we’ll delve into the intricacies of form validation
    and handling user input.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于提供对如何在 Angular 应用程序中有效利用各种输入组件和表单控件的综合理解。我们将探讨文本输入、复选框、单选按钮、下拉菜单等的使用。此外，我们还将深入了解表单验证和处理用户输入的复杂性。
- en: By harnessing the power of these input components and mastering form controls,
    we will be able to create intuitive and user-centric applications, which is paramount
    in today’s digital landscape.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些输入组件和掌握表单控件，我们将能够创建直观且以用户为中心的应用程序，这在当今的数字景观中至关重要。
- en: 'The chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing input components and form controls
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍输入组件和表单控件
- en: Working with text inputs, checkboxes, and radio buttons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理文本输入、复选框和单选按钮
- en: Using dropdowns, multi-selects, and date pickers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用下拉菜单、多选和日期选择器
- en: Implementing form validation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现表单验证
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various working code samples on input components and
    Angular forms. You can find the related source code in the `chapter-05` folder
    of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-05](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-05).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种关于输入组件和 Angular 表单的工作代码示例。您可以在以下 GitHub 仓库的 `chapter-05` 文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-05](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-05)。
- en: Introducing input components and form controls
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍输入组件和表单控件
- en: 'Before getting into the main content of this chapter, let’s set the stage with
    an overview of input components and form controls. Angular provides two ways to
    handle user inputs through forms: template-driven and reactive forms. Both methods
    have their unique strengths, and choosing between them depends on the specific
    needs of your application.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入本章的主要内容之前，让我们先通过输入组件和表单控件的概述来设定场景。Angular 提供两种方式来通过表单处理用户输入：模板驱动和响应式表单。这两种方法都有其独特的优势，选择哪一种取决于您应用程序的具体需求。
- en: 'Let’s have a look at a simple Angular form:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个简单的 Angular 表单：
- en: '![Figure 5.1 – Angular sample form](img/B18805_05_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – Angular 示例表单](img/B18805_05_01.jpg)'
- en: Figure 5.1 – Angular sample form
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – Angular 示例表单
- en: We will use both approaches to recreate this form.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这两种方法来重新创建此表单。
- en: Template-driven forms
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板驱动表单
- en: '**Template-driven forms** define controls directly within the DOM and then
    link them back to the underlying model. They shine in their simplicity, making
    them a go-to choice for straightforward use cases. For instance, when dealing
    with a form that has a small number of fields and uncomplicated validation rules,
    template-driven forms offer a rapid and effortless approach to implementing form
    functionality.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板驱动表单**直接在 DOM 中定义控件，然后将它们链接回底层模型。它们的简单性使其成为简单用例的首选。例如，当处理具有少量字段和简单验证规则的表单时，模板驱动表单提供了一种快速且轻松实现表单功能的方法。'
- en: 'Using template-driven forms, here is how we would recreate *Figure 5**.1*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模板驱动表单，以下是重新创建 *图 5**.1* 的方法：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here’s a breakdown of important parts of the code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码中重要部分的分解：
- en: '`FormsModule`: This module is imported when you want to use template-driven
    forms in your Angular application. It provides directives such as `NgForm` and
    `NgModel`:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormsModule`：当您想在 Angular 应用程序中使用模板驱动表单时，会导入此模块。它提供了如 `NgForm` 和 `NgModel`
    等指令：'
- en: '`NgForm`: This is a directive that automatically attaches to any `<form>` tag.
    It keeps track of the form’s value and its validity. On form submission, it aggregates
    all form control values, accessible via its `value` property.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NgForm`：这是一个自动附加到任何 `<form>` 标签的指令。它跟踪表单的值及其有效性。在表单提交时，它通过其 `value` 属性聚合所有表单控件值。'
- en: '`NgModel`: This directive creates a `FormControl` instance from a domain model
    and binds it to a form control element. It ensures real-time synchronization between
    the UI and the component’s model.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NgModel`: 这个指令从一个域模型创建一个`FormControl`实例并将其绑定到表单控件元素。它确保UI和组件模型之间的实时同步。'
- en: '`#form="ngForm"`: This creates a local template variable named `form`, which
    you can use to access the `NgForm` directive instance. This allows you to use
    its properties and methods elsewhere in the template.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#form="ngForm"`: 这将创建一个名为`form`的局部模板变量，你可以使用它来访问`NgForm`指令实例。这允许你在模板的其他地方使用其属性和方法。'
- en: '`onSubmit(form: NgForm)`: This is a method that gets called when the form is
    submitted. It logs the value of the form to the console.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSubmit(form: NgForm)`: 这是一个在表单提交时被调用的方法。它将表单的值记录到控制台。'
- en: Reactive forms
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式表单
- en: 'In **reactive forms**, you create and manage form control objects within the
    component class. They are known for their robustness, scalability, reusability,
    and testability, making them a preferred choice for complex scenarios and large
    forms. Here is how we would recreate *Figure 5**.1* using the reactive forms method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在**响应式表单**中，你可以在组件类中创建和管理表单控件对象。它们以其健壮性、可扩展性、可重用性和可测试性而闻名，使得它们成为复杂场景和大表单的首选选择。以下是使用响应式表单方法重新创建*图5.1*的示例：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s a breakdown of important parts of the code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对代码中重要部分的分解：
- en: '`ReactiveFormsModule`, `FormControl`, and `FormGroup`: These are used when
    you want to use reactive forms in your Angular application.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReactiveFormsModule`, `FormControl`, 和 `FormGroup`: 当你想要在Angular应用程序中使用响应式表单时，这些被使用。'
- en: '`[formGroup]="profileForm"`: This is used to bind the `FormGroup` instance
    defined in the component class to a form element in the DOM.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[formGroup]="profileForm"`: 这用于将组件类中定义的`FormGroup`实例绑定到DOM中的表单元素。'
- en: '`formControlName`: This directive is used to link the input element to the
    `first` form control.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formControlName`: 这个指令用于将输入元素链接到`第一个`表单控件。'
- en: '`onSubmit()`: This is a method that gets called when the form is submitted.
    In the example, the submit function gets the value of `profileForm` and prints
    the form value to the browser console.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSubmit()`: 这是一个在表单提交时被调用的方法。在示例中，提交函数获取`profileForm`的值并将表单值打印到浏览器控制台。'
- en: Enhancing Angular forms with PrimeNG input components
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PrimeNG输入组件增强Angular表单
- en: Input components and form controls are the backbone of any interactive application.
    They allow users to interact with the application, input data, and make choices.
    Without these elements, an application would be a static entity, incapable of
    interacting with its users in an aesthetic way.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 输入组件和表单控件是任何交互式应用程序的骨架。它们允许用户与应用程序交互，输入数据，并做出选择。没有这些元素，应用程序将是一个静态实体，无法以美观的方式与用户互动。
- en: PrimeNG steps in to enhance the standard input elements. It offers a rich set
    of components with a unified approach to handling user input. PrimeNG’s components
    are designed to be easy to use and integrate into your Angular applications, while
    also providing a high degree of customization.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG介入以增强标准输入元素。它提供了一套丰富的组件，采用统一的方法来处理用户输入。PrimeNG的组件旨在易于使用和集成到你的Angular应用程序中，同时提供高度的可定制性。
- en: 'For instance, let’s take a look at how PrimeNG enhances the previous reactive
    forms field:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看看PrimeNG如何增强之前的响应式表单字段：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this code, `pInputText` and `pButton` are PrimeNG directives that improve
    the standard input field and button and enhance them with additional features
    such as theming, styles, and more. Compared to *Figure 5**.1*, you can see the
    new form in *Figure 5**.2*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，`pInputText`和`pButton`是PrimeNG指令，它们改进了标准输入字段和按钮，并添加了如主题、样式等附加功能。与*图5.1*相比，你可以在*图5.2*中看到新的表单：
- en: '![Figure 5.2 – Angular form with PrimeNG styles](img/B18805_05_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图5.2 – 带有PrimeNG样式的Angular表单](img/B18805_05_02.jpg)'
- en: Figure 5.2 – Angular form with PrimeNG styles
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 带有PrimeNG样式的Angular表单
- en: In conclusion, understanding input components and form controls is crucial for
    building interactive and user-friendly applications. Angular provides powerful
    tools for handling user input, and PrimeNG enhances these tools with a rich set
    of customizable components. In the following sections, we’ll delve deeper into
    how to use these components and controls in your Angular applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，理解输入组件和表单控件对于构建交互性和用户友好的应用程序至关重要。Angular提供了处理用户输入的强大工具，而PrimeNG通过一组丰富的可自定义组件增强了这些工具。在接下来的章节中，我们将深入了解如何在Angular应用程序中使用这些组件和控制。
- en: Working with text inputs, checkboxes, and radio buttons
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文本输入、复选框和单选按钮
- en: As we delve deeper into the practical aspects of Angular and PrimeNG, we’ll
    focus on the implementation of text inputs, checkboxes, and radio buttons. These
    form controls are fundamental to any application, enabling users to interact with
    the application and provide necessary data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们深入 Angular 和 PrimeNG 的实际应用方面，我们将关注文本输入、复选框和单选按钮的实现。这些表单控件是任何应用程序的基础，使用户能够与应用程序交互并提供必要的数据。
- en: 'Let’s take a look at this contact form component:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个联系表单组件：
- en: '![Figure 5.3 – Sample contact form](img/B18805_05_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 示例联系表单](img/B18805_05_03.jpg)'
- en: Figure 5.3 – Sample contact form
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 示例联系表单
- en: The contact form utilizes various PrimeNG components such as InputText, InputMask,
    Checkbox, and RadioButton. Let’s take a look at each part.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 联系表单使用了各种 PrimeNG 组件，如 InputText、InputMask、Checkbox 和 RadioButton。让我们看看每个部分。
- en: InputText
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputText
- en: 'The `pInputText` directive in your Angular project, you first need to import
    the `InputTextModule` module from PrimeNG. You can do this by adding the following
    `import` statement to your component file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Angular 项目中，`pInputText` 指令，您首先需要从 PrimeNG 中导入 `InputTextModule` 模块。您可以通过在组件文件中添加以下
    `import` 语句来实现：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, you can use the `pInputText` directive in your template file to create
    a text input field. Here’s the example that we used in the contact form from *Figure
    5**.3*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以在模板文件中使用 `pInputText` 指令创建一个文本输入字段。这里是我们从 *图 5**.3* 中使用的联系表单示例。
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s break down the code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码：
- en: '`<label for="name">Name</label>`: This is a standard HTML label element. The
    `for` attribute associates the label with the input field that has an ID of `name`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<label for="name">Name</label>`: 这是一个标准的HTML标签元素。`for` 属性将标签与具有 `name` ID
    的输入字段关联。'
- en: '`pInputText`: This directive tells Angular to apply the PrimeNG text input
    functionality and styling to this input field.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pInputText`: 此指令告诉 Angular 将 PrimeNG 文本输入功能和应用样式应用于此输入字段。'
- en: '`id="name"`: This attribute sets the ID of the input field, which is used to
    associate it with the label.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id="name"`: 此属性设置输入字段的 ID，用于将其与标签关联。'
- en: '`type="text"`: This attribute sets the type of the input field. In this case,
    it’s a text field.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type="text"`: 此属性设置输入字段的类型。在这种情况下，它是一个文本字段。'
- en: '`formControlName="name"`: This attribute is part of Angular’s reactive forms
    module. It binds the input field to a `FormControl` named `name` in the component
    class.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formControlName="name"`: 此属性是 Angular 的响应式表单模块的一部分。它将输入字段绑定到组件类中的名为 `name`
    的 `FormControl`。'
- en: InputMask
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputMask
- en: 'As we delve deeper into PrimeNG’s form controls, let’s turn our attention to
    a component that offers a more controlled input experience: **p-inputMask**. This
    component is designed to handle inputs that follow a specific format, such as
    phone numbers, dates, or social security numbers.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们深入 PrimeNG 的表单控件，让我们将注意力转向一个提供更受控输入体验的组件：**p-inputMask**。该组件旨在处理遵循特定格式的输入，例如电话号码、日期或社会保障号码。
- en: 'To use the `p-inputMask` component in your Angular project, you first need
    to import the `InputMaskModule` module from PrimeNG. You can do this by adding
    the following `import` statement to your component file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Angular 项目中使用 `p-inputMask` 组件，您首先需要从 PrimeNG 中导入 `InputMaskModule` 模块。您可以通过在组件文件中添加以下
    `import` 语句来实现：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s the example that we used in the contact form in *Figure 5**.3*:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们在 *图 5**.3* 中使用的联系表单示例。
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this example, we’re creating an input field for a phone number. The `p-inputMask`
    component is used as an input field, enforcing the phone number format. Let’s
    break down the code further:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个用于电话号码的输入字段。`p-inputMask` 组件用作输入字段，强制执行电话号码格式。让我们进一步分解代码：
- en: '`<label for="phone">Phone</label>`: This is a standard HTML label element.
    The `for` attribute associates the label with the input field that has an ID of
    `phone`.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<label for="phone">Phone</label>`: 这是一个标准的HTML标签元素。`for` 属性将标签与具有 `phone`
    ID 的输入字段关联。'
- en: '`p-inputMask`: This PrimeNG component is used to apply the PrimeNG styles to
    the input field and to define the input format for the phone number.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p-inputMask`: 此 PrimeNG 组件用于将 PrimeNG 样式应用于输入字段，并定义电话号码的输入格式。'
- en: '`mask="(999)-999-9999"`: This attribute sets the input pattern for a specific
    field. In this case, the mask consists of placeholders represented by the character
    9, which indicates that only numeric characters can be entered in those positions.
    By applying this mask, users are restricted to inputting numbers in the designated
    places, ensuring data consistency and accuracy.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask="(999)-999-9999"`：此属性设置特定字段的输入模式。在这种情况下，掩码由字符9表示的占位符组成，表示只能在这些位置输入数字字符。通过应用此掩码，用户被限制在指定位置输入数字，确保数据的一致性和准确性。'
- en: '`formControlName="phone"`: This attribute is part of Angular’s reactive forms
    module. It binds the input field to a `FormControl` named `phone` in the component
    class.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formControlName="phone"`：此属性是Angular的响应式表单模块的一部分。它将输入字段绑定到组件类中名为`phone`的`FormControl`。'
- en: Checkbox
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复选框
- en: 'As we continue to explore PrimeNG’s form controls, let’s focus on a component
    that allows users to make binary choices: **p-checkbox**. This component is used
    to create checkboxes, which let users select one or more options from a set.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续探索PrimeNG的表单控件，让我们关注一个允许用户进行二元选择的组件：**p-checkbox**。此组件用于创建复选框，允许用户从一组选项中选择一个或多个选项。
- en: 'To use the `p-checkbox` component in your Angular project, you first need to
    import the `CheckboxModule` module from PrimeNG. You can do this by adding the
    following `import` statement to your component file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的Angular项目中使用`p-checkbox`组件，您首先需要从PrimeNG导入`CheckboxModule`模块。您可以通过将以下`import`语句添加到组件文件中来实现：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s the example that we used in the previous contact form in *Figure 5**.3*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们在上一份联系表单中使用的示例，如图**5**.3所示：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s break down the code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '`p-checkbox`: This PrimeNG component is used to apply the PrimeNG styles to
    the checkbox field.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p-checkbox`：此PrimeNG组件用于将PrimeNG样式应用于复选框字段。'
- en: '`formControlName="subscribe"`: This attribute is part of Angular’s reactive
    forms module. It binds the checkbox to a `FormControl` named `subscribe` in the
    component class.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formControlName="subscribe"`：此属性是Angular的响应式表单模块的一部分。它将复选框绑定到组件类中名为`subscribe`的`FormControl`。'
- en: '`[binary]="true"`: This attribute sets the checkbox’s value to either `true`
    or `false`. If the checkbox is checked, the value is `true`; otherwise, it’s `false`.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[binary]="true"`：此属性将复选框的值设置为`true`或`false`。如果复选框被选中，则值为`true`；否则为`false`。'
- en: '`label="Subscribe to newsletter"`: This attribute sets the label displayed
    next to the checkbox.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label="Subscribe to newsletter"`：此属性设置显示在复选框旁边的标签。'
- en: RadioButton
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单选按钮
- en: PrimeNG’s `p-radioButton` is a UI component that can be used to create radio
    button inputs in Angular forms. It is a useful component that allows users to
    make a single choice from a set of mutually exclusive options, such as in surveys,
    preference selection, form validation, filtering, sorting, and step-by-step processes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG的`p-radioButton`是一个UI组件，可用于在Angular表单中创建单选按钮输入。它是一个有用的组件，允许用户从一组互斥选项中选择一个，例如在调查、偏好选择、表单验证、过滤、排序和逐步过程中。
- en: 'To use the `p-radioButton` component in your Angular project, you first need
    to import the `RadioButtonModule` module from PrimeNG. You can do this by adding
    the following `import` statement to your component file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的Angular项目中使用`p-radioButton`组件，您首先需要从PrimeNG导入`RadioButtonModule`模块。您可以通过将以下`import`语句添加到组件文件中来实现：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s the example that we used in the previous contact form in *Figure 5**.3*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们在上一份联系表单中使用的示例，如图**5**.3所示：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s break down the code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '`p-radioButton`: This is where we define our PrimeNG radio buttons.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p-radioButton`：这是我们定义PrimeNG单选按钮的地方。'
- en: '`*ngFor="let gender of genders`”: This is Angular’s built-in directive for
    rendering a list. It creates a new radio button for each gender in the `genders`
    array.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ngFor="let gender of genders"`：这是Angular内置的用于渲染列表的指令。它为`genders`数组中的每个性别创建一个新的单选按钮。'
- en: '`name="gender"`: This attribute sets the name of the radio button group. All
    radio buttons with the same name belong to the same group, and only one can be
    selected at a time.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name="gender"`：此属性设置单选按钮组的名称。所有具有相同名称的单选按钮属于同一组，并且一次只能选择一个。'
- en: '`value="{{ gender.value }}"`: This attribute sets the value of the radio button.
    It’s bound to the `value` property of the current `gender` object.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value="{{ gender.value }}"`：此属性设置单选按钮的值。它与当前`gender`对象的`value`属性绑定。'
- en: '`label="{{ gender.name }}"`: This attribute sets the label displayed next to
    the radio button. It’s bound to the `name` property of the current `gender` object.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label="{{ gender.name }}"`：此属性设置显示在单选按钮旁边的标签。它与当前 `gender` 对象的 `name` 属性绑定。'
- en: '`formControlName="gender"`: This attribute is part of Angular’s reactive forms
    module. It binds the group of radio buttons to a `FormControl` named `gender`
    in the component class.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`formControlName="gender"`：此属性是 Angular 的响应式表单模块的一部分。它将一组单选按钮绑定到组件类中的名为 `gender`
    的 `FormControl`。'
- en: We have learned about some fundamental form controls that allow users to interact
    with your application. In the next section, we will go over more complex components
    such as dropdowns, multi-selects, and date pickers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了一些基本的表单控件，这些控件允许用户与您的应用程序进行交互。在下一节中，我们将介绍更多复杂的组件，如下拉菜单、多选和日期选择器。
- en: Using dropdowns, multi-selects, and date pickers
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用下拉菜单、多选和日期选择器
- en: 'As we continue our exploration of PrimeNG’s form controls, we’re about to venture
    into the realm of more complex components: dropdowns, multi-selects, and date
    pickers. These components offer a higher level of interactivity and are essential
    for many types of applications.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续探索 PrimeNG 的表单控件，我们将进入更复杂的组件领域：下拉菜单、多选和日期选择器。这些组件提供了更高层次的交互性，对于许多类型的应用程序来说是必不可少的。
- en: Dropdown
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下拉菜单
- en: The **Dropdown** component (also known as Select) is one of the most commonly
    used form elements in web applications, allowing users to choose a single option
    from a list of options.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**下拉菜单**组件（也称为选择框）是网络应用程序中最常用的表单元素之一，允许用户从选项列表中选择单个选项。'
- en: PrimeNG Dropdown offers an intuitive and interactive way to select an option
    from a dropdown list. It enhances the user experience by providing a wide range
    of options, including single and multiple selection, filtering, custom templates,
    lazy loading, and support for keyboard navigation. With its customizable styling
    and seamless integration with Angular, PrimeNG Dropdown is a powerful tool for
    creating enhanced dropdown functionality in Angular applications.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 下拉菜单提供了一种直观且交互式的方式来从下拉列表中选择一个选项。它通过提供包括单选、多选、筛选、自定义模板、懒加载以及键盘导航在内的广泛选项，增强了用户体验。凭借其可定制的样式和与
    Angular 的无缝集成，PrimeNG 下拉菜单是创建增强型下拉功能在 Angular 应用程序中的强大工具。
- en: 'To get started with the PrimeNG Dropdown, first import the `DropdownModule`
    in your component:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 PrimeNG 下拉菜单，首先在您的组件中导入 `DropdownModule`：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here’s a basic example of how to use the `Dropdown` component using the template-driven
    approach:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用模板驱动方法使用 `Dropdown` 组件的基本示例：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this example, `cities` is an array of options, and `ngModel` is a two-way
    binding property that holds the selected option. The `optionLabel` attribute configures
    the Dropdown to display the name property of each option as the label. Here is
    the result in the browser:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`cities` 是一个选项数组，`ngModel` 是一个双向绑定属性，它持有选定的选项。`optionLabel` 属性配置下拉菜单显示每个选项的名称属性作为标签。以下是浏览器中的结果：
- en: '![Figure 5.4 – Sample dropdown component](img/B18805_05_04.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 示例下拉组件](img/B18805_05_04.jpg)'
- en: Figure 5.4 – Sample dropdown component
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 示例下拉组件
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When options are simple primitive values such as a string array, you don’t have
    to specify `optionLabel` and `optionValue` in the component.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当选项是简单的原始值，如字符串数组时，您不需要在组件中指定 `optionLabel` 和 `optionValue`。
- en: The Dropdown component is packed with features that make it flexible and adaptable
    to various use cases. Let’s have a look at those options.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉菜单组件包含了许多功能，使其灵活且适用于各种用例。让我们来看看这些选项。
- en: Filtering
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 筛选
- en: 'One of the standout features of the Dropdown component is its built-in filtering
    capability. This feature allows users to narrow down the options by typing into
    the dropdown, making it easier to find the desired option in a long list. To enable
    filtering, we simply set the `filter` attribute to `true`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉菜单组件的一个突出特点是它内置的筛选功能。此功能允许用户通过在下拉菜单中键入来缩小选项范围，使得在长列表中找到所需的选项变得更容易。要启用筛选，我们只需将
    `filter` 属性设置为 `true`：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After adding the `filter` attribute to the Dropdown component, you will have
    the option to search in the dropdown. Here, I searched for `van`, which shows
    the result **Vancouver**:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 `filter` 属性添加到下拉菜单组件后，您将拥有在下拉菜单中进行搜索的选项。在这里，我搜索了 `van`，显示了结果 **温哥华**：
- en: '![Figure 5.5 – Dropdown With Filter](img/B18805_05_05.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 带筛选功能的下拉菜单](img/B18805_05_05.jpg)'
- en: Figure 5.5 – Dropdown With Filter
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 带筛选功能的下拉菜单
- en: Grouping
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组
- en: 'For better organization of options, the Dropdown component supports grouping.
    We can group options under certain categories by using the [group] attribute:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地组织选项，Dropdown组件支持分组。我们可以通过使用[group]属性将选项分组到某些类别下：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this example, the cities are grouped according to a property specified in
    the `groupedCities` array. The `ng-template let-group pTemplate="group"` code
    defines a template for the group header with a map maker icon on the left. Let’s
    have a look at the result:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，城市根据`groupedCities`数组中指定的属性进行分组。`ng-template let-group pTemplate="group"`代码定义了一个带有左侧地图制作图标的分组标题模板。让我们看看结果：
- en: '![Figure 5.6 – Sample dropdown with Grouping](img/B18805_05_06.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – 带有分组的示例下拉菜单](img/B18805_05_06.jpg)'
- en: Figure 5.6 – Sample dropdown with Grouping
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 带有分组的示例下拉菜单
- en: Templating
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板化
- en: 'The Dropdown component also supports templating, which means we can customize
    how the options are displayed. Let’s take a look at the following example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Dropdown组件也支持模板化，这意味着我们可以自定义选项的显示方式。让我们看看以下示例：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this example, we can see that there are two `ng-template` elements for supporting
    how we style the option, and the selected value:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们可以看到有两个`ng-template`元素用于支持我们如何样式化选项和所选值：
- en: '`<ng-template pTemplate="selectedItem">`: This defines a template that is used
    to customize the rendering of the selected item in a dropdown component. It shows
    the `name` property of the selected city in the model.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="selectedItem">`：这定义了一个用于自定义下拉组件中选中项渲染的模板。它显示了模型中选中城市的`name`属性。'
- en: '`<ng-template let-city pTemplate="item">`: This is a template for each item
    in the option list.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template let-city pTemplate="item">`：这是选项列表中每个项目的模板。'
- en: 'Let’s have a look at the result:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果：
- en: '![Figure 5.7 – Sample dropdown with Templating](img/B18805_05_07.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7 – 带有模板化的示例下拉菜单](img/B18805_05_07.jpg)'
- en: Figure 5.7 – Sample dropdown with Templating
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 – 带有模板化的示例下拉菜单
- en: We can see the styling for the selected city with a map maker icon on the left.
    The dropdown also has the ability to clear the selected item with a `[showClear]="true"`
    option in the component.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过左侧带有地图制作图标的方式来查看所选城市的样式。下拉菜单还具备使用组件中的`[showClear]="true"`选项清除所选项的能力。
- en: Working with events
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理事件
- en: 'PrimeNG’s Dropdown component provides several events that developers can utilize
    to enhance the functionality and interactivity of their applications:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG的Dropdown组件提供了几个事件，开发者可以利用这些事件来增强其应用程序的功能性和交互性：
- en: '`onChange`: This is emitted when the value of the dropdown changes'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onChange`：当下拉值发生变化时发出'
- en: '`onFilter`: This is triggered when data is filtered in the dropdown'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFilter`：当下拉中的数据进行过滤时触发'
- en: '`onFocus`: This is fired when the dropdown gains focus'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFocus`：当下拉获得焦点时触发'
- en: '`onBlur`: This is invoked when the dropdown loses focus'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onBlur`：当下拉失去焦点时调用'
- en: '`onClick`: This is called when the component is clicked'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onClick`：当组件被点击时调用'
- en: '`onShow`: This is triggered when the dropdown overlay becomes visible'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onShow`：当下拉菜单覆盖层变为可见时触发'
- en: '`onHide`: This is fired when the dropdown overlay becomes hidden'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onHide`：当下拉覆盖层变为隐藏时触发'
- en: '`onClear`: This is invoked when the dropdown value is cleared'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onClear`：当下拉值被清除时调用'
- en: '`onLazyLoad`: This is called in lazy mode to load new data'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onLazyLoad`：在懒加载模式下调用以加载数据'
- en: 'Here’s an example of how you can use the `onChange` event of the PrimeNG Dropdown
    when a user selects an option:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例，说明您如何使用PrimeNG Dropdown的`onChange`事件，当用户选择一个选项时：
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, the `onCityChange` method is called whenever the selected city
    changes and shows an alert in the browser.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，每当所选城市发生变化时，都会调用`onCityChange`方法，并在浏览器中显示一个警告。
- en: To wrap up, the Dropdown component in PrimeNG is a powerful tool that offers
    a wide range of features, from basic selection to advanced features such as filtering,
    grouping, and templating. In the next section, we will delve into the MultiSelect
    component.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，PrimeNG中的Dropdown组件是一个功能强大的工具，提供了从基本选择到高级功能如过滤、分组和模板化等一系列功能。在下一节中，我们将深入探讨MultiSelect组件。
- en: Note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are more features and configurations that you can do with the Dropdown
    component. Please visit [https://primeng.org/dropdown](https://primeng.org/dropdown)
    for updated documentation.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Dropdown组件进行更多功能和配置。请访问[https://primeng.org/dropdown](https://primeng.org/dropdown)获取最新文档。
- en: MultiSelect
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MultiSelect
- en: The **MultiSelect** component is a form of select input that allows the user
    to choose multiple options from a dropdown list, which comes in handy when you
    need to provide a list of options and allow users to select more than one. For
    instance, in a survey form, you might ask users to select all the programming
    languages they are proficient in. The MultiSelect component would be an ideal
    choice for this scenario.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultiSelect` 组件是一种选择输入形式，允许用户从下拉列表中选择多个选项，这在需要提供选项列表并允许用户选择多个选项时非常有用。例如，在一个调查表中，你可能会要求用户选择他们精通的所有编程语言。在这种情况下，`MultiSelect`
    组件是一个理想的选择。'
- en: 'To get started with the PrimeNG `MultiSelect` component, first import the `MultiSelectModule`
    in your component:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 PrimeNG 的 `MultiSelect` 组件，首先在你的组件中导入 `MultiSelectModule`：
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here’s a basic example of how to use the `MultiSelect` component using the
    template-driven approach:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用模板驱动方法使用 `MultiSelect` 组件的基本示例：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the code snippet, `cities` is an array of options that you want to display
    in the `MultiSelect` list, while `optionLabel` indicates the dropdown to display
    the `name` property of each option as the label. Let’s look at the result:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码片段中，`cities` 是一个选项数组，您希望将其显示在 `MultiSelect` 列表中，而 `optionLabel` 指示下拉列表显示每个选项的
    `name` 属性作为标签。让我们看看结果：
- en: '![Figure 5.8 – Sample of MultiSelect](img/B18805_05_08.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – MultiSelect 示例](img/B18805_05_08.jpg)'
- en: Figure 5.8 – Sample of MultiSelect
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – MultiSelect 示例
- en: In the preceding screenshot, we have a basic `MultiSelect` component, in which
    **Toronto** and **Montreal** are selected.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们有一个基本的 `MultiSelect` 组件，其中已选择 **多伦多** 和 **蒙特利尔**。
- en: The `MultiSelect` component comes with several features that make it a powerful
    tool for creating interactive forms. Let’s take a look at some of them.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultiSelect` 组件具有一些功能，使其成为创建交互式表单的强大工具。让我们看看其中的一些。'
- en: Filtering
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤
- en: 'One of the standout features of the `MultiSelect` component is its built-in
    filtering capability, which allows users to narrow down the options in the dropdown
    list by typing into a search box. This is particularly useful when dealing with
    a large number of options, for example:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultiSelect` 组件的一个突出特点是它内置的过滤功能，允许用户通过在搜索框中输入来缩小下拉列表中的选项。这在处理大量选项时特别有用，例如：'
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: groupedCities = [
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: groupedCities = [
- en: '{'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'label: ''Canada'','
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '标签: ''加拿大'','
- en: 'value: ''ca'','
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '值: ''ca'','
- en: 'items: ['
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '项目: ['
- en: '{ label: ''Vancouver'', value: ''Vancouver'' },'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 标签: ''温哥华'', 值: ''温哥华'' },'
- en: '{ label: ''Toronto'', value: ''Toronto'' },'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 标签: ''多伦多'', 值: ''多伦多'' },'
- en: '{ label: ''Montreal'', value: ''Montreal'' },'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 标签: ''蒙特利尔'', 值: ''蒙特利尔'' },'
- en: '{ label: ''Ottawa'', value: ''Ottawa'' },'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 标签: ''渥太华'', 值: ''渥太华'' },'
- en: '],'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '},'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '...'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: ']'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '...'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <p-multiSelect
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <p-multiSelect
- en: '[options]="groupedCities"'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[选项]="groupedCities"'
- en: '[group]="true"'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[分组]="true"'
- en: ngModel
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: ngModel
- en: name="cityWithGroup"
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 名称="cityWithGroup"
- en: defaultLabel="Select a City"
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 默认标签="选择一个城市"
- en: '>'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <ng-template let-group pTemplate="group">
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <ng-template let-group pTemplate="group">
- en: <div>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <span class="pi pi-map-marker"></span>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <span class="pi pi-map-marker"></span>
- en: <span>{{ group.label }}</span>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: <span>{{ group.label }}</span>
- en: </div>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </ng-template>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: </ng-template>
- en: </p-multiSelect>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: </p-multiSelect>
- en: '[PRE20]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <p-multiSelect
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <p-multiSelect
- en: '[options]="cities"'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[选项]="cities"'
- en: ngModel
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: ngModel
- en: defaultLabel="Select a Country"
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 默认标签="选择一个国家"
- en: name="cityWithTemplating"
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 名称="cityWithTemplating"
- en: optionLabel="name"
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 选项标签="name"
- en: '>'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <ng-template let-cities pTemplate="selectedItems">
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <ng-template let-cities pTemplate="selectedItems">
- en: <div *ngFor="let city of cities">
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <div *ngFor="let city of cities">
- en: <span class="pi pi-map-marker"></span>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <span class="pi pi-map-marker"></span>
- en: <span>{{ city.name }}</span>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <span>{{ city.name }}</span>
- en: </div>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: <div *ngIf="cities?.length === 0">Select Cities</div>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <div *ngIf="cities?.length === 0">选择城市</div>
- en: </ng-template>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: </ng-template>
- en: <ng-template let-city pTemplate="item">
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <ng-template let-city pTemplate="item">
- en: <div>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <div>
- en: <span class="pi pi-map-marker"></span>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <span class="pi pi-map-marker"></span>
- en: <span>{{ city.name }}</span>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: <span>{{ city.name }}</span>
- en: </div>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </ng-template>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: </ng-template>
- en: </p-multiSelect>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: </p-multiSelect>
- en: '[PRE21]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: import { CalendarModule } from 'primeng/calendar'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 { CalendarModule } 从 'primeng/calendar'
- en: '[PRE22]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: <p-calendar ngModel name="calendar" />
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <p-calendar ngModel 名称="calendar" />
- en: '[PRE23]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: <p-calendar
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: <p-calendar
- en: ngModel
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: ngModel
- en: name="calendarWithFormat"
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 名称="calendarWithFormat"
- en: dateFormat="dd-mm-yy"
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 日期格式="dd-mm-yy"
- en: />
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '[PRE24]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: <p-calendar
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: <p-calendar
- en: ngModel
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ngModel
- en: name="calendarDateRange"
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 名称="calendarDateRange"
- en: selectionMode="range"
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 选择模式="range"
- en: />
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '[PRE25]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: <input
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: <input
- en: name="first"
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 名称="first"
- en: ngModel
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: ngModel
- en: required
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 必需
- en: minlength="4"
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最小长度="4"
- en: '#name="ngModel"'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '#name="ngModel"'
- en: />
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <ng-container *ngIf="name.invalid && (name.dirty || name.touched)">
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <ng-container *ngIf="name.invalid && (name.dirty || name.touched)">
- en: <div *ngIf="name.errors?.['required']">
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <div *ngIf="name.errors?.['required']">
- en: This field is required
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此字段是必需的
- en: </div>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: <div *ngIf="name.errors?.['minlength']">
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <div *ngIf="name.errors?.['minlength']">
- en: Name must be at least 4 characters long.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 名称长度必须至少为4个字符。
- en: </div>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </ng-container>
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: </ng-container>
- en: '[PRE26]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: contactForm = this.formBuilder.group({
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: contactForm = this.formBuilder.group({
- en: 'name: ['''', [Validators.required, Validators.minLength(4)]],'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ['''', [Validators.required, Validators.minLength(4)]],'
- en: '})'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '...'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <input pInputText id="name" type="text" formControlName="name" />
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: <input pInputText id="name" type="text" formControlName="name" />
- en: <ng-container *ngIf="contactForm.controls.name as name">
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <ng-container *ngIf="contactForm.controls.name as name">
- en: <div *ngIf="name.dirty && name.hasError('required')">
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: <div *ngIf="name.dirty && name.hasError('required')">
- en: This field is required
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: This field is required
- en: </div>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: <div *ngIf="name.dirty && name.hasError('minlength')">
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <div *ngIf="name.dirty && name.hasError('minlength')">
- en: Name must be at least 4 characters long.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 名称长度必须至少为4个字符。
- en: </div>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: </ng-container>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: </ng-container>
- en: '[PRE27]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms'
- en: 'export const invalidNameValidator = (nameRe: RegExp): ValidatorFn => {'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 'export const invalidNameValidator = (nameRe: RegExp): ValidatorFn => {'
- en: 'return (control: AbstractControl): ValidationErrors | null => {'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 'return (control: AbstractControl): ValidationErrors | null => {'
- en: const invalid = nameRe.test(control.value)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: const invalid = nameRe.test(control.value)
- en: 'return invalid ? { invalidName: { value: control.value } } : null'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 'return invalid ? { invalidName: { value: control.value } } : null'
- en: '}'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: contactForm = this.formBuilder.group({
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: contactForm = this.formBuilder.group({
- en: 'name: ['
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ['
- en: ''''','
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: ''''','
- en: '['
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '['
- en: Validators.required,
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Validators.required,
- en: Validators.minLength(4),
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Validators.minLength(4),
- en: // custom validator
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: // 自定义验证器
- en: invalidNameValidator(/test/i),
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: invalidNameValidator(/test/i),
- en: '],'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '],'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '...'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '})'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '----'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '----'
- en: <div *ngIf="name.dirty && name.hasError('invalidName')">
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: <div *ngIf="name.dirty && name.hasError('invalidName')">
- en: Name cannot be "{{ name.errors?.['invalidName'].value }}".
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 名称不能为 "{{ name.errors?.['invalidName'].value }}".
- en: </div>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: </div>
- en: '[PRE29]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <label for="name">Name</label>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <label for="name">名称</label>
- en: <input pInputText id="name" type="text" formControlName="name" />
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: <input pInputText id="name" type="text" formControlName="name" />
- en: <ng-container *ngIf="contactForm.controls.name as name">
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <ng-container *ngIf="contactForm.controls.name as name">
- en: <small
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <small
- en: class="p-error"
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: class="p-error"
- en: ngIf="name.dirty && name.hasError('required')"
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: ngIf="name.dirty && name.hasError('required')"
- en: '>'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: This field is required
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此字段为必填项
- en: </small>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: </small>
- en: <small
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <small
- en: class="p-error"
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: class="p-error"
- en: ngIf="name.dirty && name.hasError('minlength')"
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ngIf="name.dirty && name.hasError('minlength')"
- en: '>'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: The name is too short
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 名称太短
- en: </small>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: </small>
- en: </ng-container>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: </ng-container>
- en: '[PRE30]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
