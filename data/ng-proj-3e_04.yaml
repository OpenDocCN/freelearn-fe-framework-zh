- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Building a PWA Weather Application Using Angular Service Worker
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Angular 服务工作者构建 PWA 天气应用程序
- en: We can access a web application using different types of devices, such as a
    desktop, mobile, or tablet, and over various types of network, such as broadband,
    Wi-Fi, and cellular. A web application should work seamlessly and provide the
    same user experience independently of the device and the network of the user.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用不同类型的设备访问网络应用程序，例如桌面、移动或平板电脑，以及各种类型的网络，如宽带、Wi-Fi 和蜂窝网络。网络应用程序应该无缝工作，并独立于用户的设备和网络提供相同的用户体验。
- en: '**Progressive Web Apps (PWAs)** are applications built with a collection of
    techniques with the previous considerations in mind. One popular technique is
    the **service worker**, which improves the loading time of a web application.
    In this chapter, we will use the service worker implementation of the Angular
    framework to build a PWA that displays the weather of a city using the **OpenWeather
    API**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**渐进式网络应用（PWA）** 是考虑到上述因素构建的应用程序。一种流行的技术是 **服务工作者**，它可以提高 Web 应用程序的加载时间。在本章中，我们将使用
    Angular 框架的服务工作者实现来构建一个 PWA，使用 **OpenWeather API** 显示城市的天气。'
- en: 'We will cover the following topics in detail:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍以下主题：
- en: Setting up the OpenWeather API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 OpenWeather API
- en: Displaying weather data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示天气数据
- en: Enabling offline mode with the service worker
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务工作者启用离线模式
- en: Staying up to date with in-app notifications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过应用内通知保持最新
- en: Deploying our app with **Firebase Hosting**
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Firebase Hosting** 部署我们的应用程序
- en: Essential background theory and context
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景理论和上下文
- en: 'Traditional web applications are usually hosted in a web server and are immediately
    available to any user at any given time. Native applications are installed on
    the device of the user, have access to its native resources, and can work seamlessly
    with any network. PWAs straddle the two worlds of web and native applications
    and share characteristics from both, summarized by the following pillars:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的网络应用程序通常托管在 Web 服务器上，并且任何给定时间对任何用户都是立即可用的。本地应用程序安装在用户的设备上，可以访问其本地资源，并且可以与任何网络无缝工作。PWA
    横跨 Web 和本地应用程序的两个世界，并具有两者的特征，总结如下：
- en: '**Capable**: It can access locally saved data and interact with peripheral
    hardware that is connected to the device of the user.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能力**：它可以访问本地保存的数据，并与连接到用户设备的外围硬件交互。'
- en: '**Reliable**: It can have the same performance and experience in any network
    connection, even in areas with low connectivity and coverage.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：它可以在任何网络连接中提供相同的性能和体验，即使在网络连接和覆盖范围较低的地区。'
- en: '**Installable**: It can be installed on the device of the user, can be launched
    directly from the home screen, and interact with other installed native applications.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可安装性**：它可以在用户的设备上安装，可以直接从主屏幕启动，并与其他已安装的本地应用程序交互。'
- en: Converting a web application into a PWA involves several steps and techniques.
    The most essential one is configuring a service worker. The service worker is
    a mechanism that runs on the web browser and acts as a proxy between the application
    and an external HTTP endpoint or other in-app resources such as JavaScript and
    CSS files. The main job of the service worker is to intercept requests to those
    resources and act on them by providing a cached or live response.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将网络应用程序转换为 PWA 涉及多个步骤和技术。其中最重要的一项是配置服务工作者。服务工作者是一种在 Web 浏览器上运行的机制，充当应用程序与外部
    HTTP 端点或其他应用程序内资源（如 JavaScript 和 CSS 文件）之间的代理。服务工作者的主要任务是拦截对这些资源的请求，并通过提供缓存的或实时响应来对其采取行动。
- en: The service worker is persisted after the tab of the browser is closed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者在浏览器标签页关闭后仍然保持持久。
- en: The Angular framework provides an implementation for the service worker that
    we can use to convert our Angular applications into PWAs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 框架提供了一个服务工作者的实现，我们可以使用它将我们的 Angular 应用程序转换为 PWA。
- en: It also contains a built-in HTTP client that we can use to communicate with
    a server over HTTP. The Angular HTTP client exposes an observable-based API with
    all standard HTTP methods, such as POST and GET. Observables are based on the
    **observer pattern**, the core of reactive programming. In the observer pattern,
    multiple objects called **observers** can subscribe to an observable and get notified
    about any changes to its state. Observables dispatch changes to observers by emitting
    event streams asynchronously. The Angular framework uses a library called **RxJS**
    that contains various artifacts for working with observables. One of these artifacts
    is a set of functions called **operators** that can apply various actions on observables,
    such as transformations and filtering. Next, let’s get an overview of our project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包含一个内置的HTTP客户端，我们可以使用它通过HTTP与服务器通信。Angular HTTP客户端公开了一个基于观察器的API，具有所有标准HTTP方法，如POST和GET。观察器基于**观察者模式**，这是响应式编程的核心。在观察者模式中，多个称为**观察者**的对象可以订阅观察器并接收有关其状态变化的任何通知。观察器通过异步发射事件流来向观察者发送更改。Angular框架使用一个名为**RxJS**的库，其中包含用于处理观察器的各种工具。其中之一是一组称为**操作符**的函数，可以对观察器应用各种操作，如转换和过滤。接下来，让我们对我们的项目进行概述。
- en: Project overview
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'In this project, we will build a PWA to display the weather conditions of a
    city. Initially, we will learn how to configure the OpenWeather API, which we
    will use to get weather data. We will then learn how to use the API to display
    weather information in an Angular component. We will see how to convert our Angular
    application into a PWA using a service worker. We will also implement a notification
    mechanism for our application updates. Finally, we will deploy our PWA into the
    Firebase Hosting provider. The following diagram presents an architectural overview
    of the project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将构建一个PWA来显示城市的天气状况。最初，我们将学习如何配置OpenWeather API，我们将使用它来获取天气数据。然后，我们将学习如何使用API在Angular组件中显示天气信息。我们将了解如何使用服务工作者将我们的Angular应用程序转换为PWA。我们还将为我们的应用程序实现更新通知机制。最后，我们将把我们的PWA部署到Firebase
    Hosting提供者。以下图表展示了项目的架构概述：
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_04_01.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![包含图表的图片 自动生成的描述](img/B18465_04_01.png)'
- en: Figure 4.1 – Project architecture
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 项目架构
- en: 'Build time: 90 minutes'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：90分钟
- en: Getting started
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The following software tools are required to complete this project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目所需的以下软件工具：
- en: '**Angular CLI**: A command-line interface for Angular that you can find at
    [https://angular.io/cli](https://angular.io/cli).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular CLI**：Angular的命令行界面，您可以在[https://angular.io/cli](https://angular.io/cli)找到。'
- en: '**GitHub material**: The related code for this chapter can be found in the
    `Chapter04` folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub材料**：本章的相关代码可以在[https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)的`Chapter04`文件夹中找到。'
- en: Setting up the OpenWeather API
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置OpenWeather API
- en: The OpenWeather team created the OpenWeather API, which contains current and
    historical weather information from over 200,000 cities worldwide. It also supports
    forecast weather data for more detailed information.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWeather团队创建了OpenWeather API，该API包含来自全球200,000多个城市的当前和历史天气信息。它还支持更详细信息的天气预报数据。
- en: 'We need to get an API key first to start using the OpenWeather API:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先获取一个API密钥，才能开始使用OpenWeather API：
- en: Navigate to the OpenWeather API website at [https://openweathermap.org/api](https://openweathermap.org/api).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到OpenWeather API网站[https://openweathermap.org/api](https://openweathermap.org/api)。
- en: You will see a list of all available APIs from the OpenWeather team.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到OpenWeather团队提供的所有可用API的列表。
- en: Find the **Current Weather Data** section and click the **Subscribe** button.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到**当前天气数据**部分，并点击**订阅**按钮。
- en: You will be redirected to the page with the available pricing schemes of the
    service. Each scheme supports a different combination of API calls per minute
    and month. For this project, we are going to use the **Free** tier.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将被重定向到包含服务可用定价方案的页面。每个方案支持每分钟和每月不同的API调用组合。对于这个项目，我们将使用**免费**级别。
- en: Click on the **Get API key** button.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**获取API密钥**按钮。
- en: You will be redirected to the sign-up page of the service.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将被重定向到服务的注册页面。
- en: Complete all the required details and click the **Create Account** button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有必填信息，并点击**创建账户**按钮。
- en: A confirmation message will be sent to the email address you used to create
    your account.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将确认消息发送到您用于创建账户的电子邮件地址。
- en: Find the confirmation email and click the **Verify your email** button to complete
    your registration.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到确认电子邮件并点击 **验证您的电子邮件** 按钮以完成注册。
- en: You will shortly receive another email from OpenWeather with details about your
    current subscription, including your API key and the HTTP endpoint you will use
    to communicate with the API.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将很快收到来自 OpenWeather 的另一封电子邮件，其中包含有关您当前订阅的详细信息，包括您的 API 密钥以及您将与 API 通信的 HTTP
    端点。
- en: The API key may take some time to be activated, usually a couple of hours before
    you can use it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: API 密钥可能需要一些时间才能激活，通常在您可以使用它之前需要几个小时。
- en: Once the API key has been activated, we can use it within an Angular application.
    We will learn how to do this in the following section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 API 密钥被激活，我们就可以在 Angular 应用程序中使用它。我们将在下一节中学习如何做到这一点。
- en: Displaying weather data
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示天气数据
- en: 'In this section, we will create an Angular application to display weather information
    for a given city. The user will enter the name of the city in an input field,
    and the application will use the OpenWeather API to get weather data for the specified
    city. We will cover the following topics in more detail:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个 Angular 应用程序来显示给定城市的天气信息。用户将在输入字段中输入城市的名称，应用程序将使用 OpenWeather API
    获取指定城市的天气数据。我们将更详细地介绍以下主题：
- en: Setting up the Angular application
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Angular 应用程序
- en: Communicating with the OpenWeather API
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 OpenWeather API 通信
- en: Displaying weather information for a city
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示城市的天气信息
- en: Let’s start by creating the Angular application first in the following section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建 Angular 应用程序开始，接下来的部分将介绍如何进行。
- en: Setting up the Angular application
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Angular 应用程序
- en: 'We will use the `ng new` command of the Angular CLI to create a new Angular
    application from scratch:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Angular CLI 的 `ng new` 命令从头创建一个新的 Angular 应用程序：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will create a new Angular CLI application with the following
    properties:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个新的 Angular CLI 应用程序，具有以下属性：
- en: '`weather-app`: The name of the Angular application'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weather-app`：Angular 应用程序的名称'
- en: '`--style=scss`: Indicates that our Angular application will use the SCSS stylesheet
    format'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--style=scss`：表示我们的 Angular 应用程序将使用 SCSS 样式表格式'
- en: '`--routing=false`: Disables Angular routing in the application'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--routing=false`：禁用应用程序中的 Angular 路由'
- en: The user should be able to enter the name of the city in an input field, and
    the weather information of the city should be visualized in a card layout. The
    **Angular Material** library provides a set of UI components for our needs, including
    an input and a card.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应在输入字段中输入城市的名称，并且该城市的天气信息应以卡片布局进行可视化。**Angular Material** 库提供了一套 UI 组件来满足我们的需求，包括输入和卡片。
- en: 'Angular Material components adhere to the **Material Design** principles and
    are maintained by the **Components** team of Angular. We can install the Angular
    Material library using the following command of the Angular CLI:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 组件遵循 **Material Design** 原则，并由 Angular 的 **Components** 团队维护。我们可以使用以下
    Angular CLI 命令安装 Angular Material 库：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code uses the `ng add` command of the Angular CLI, passing additional
    configuration options:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用了 Angular CLI 的 `ng add` 命令，并传递了额外的配置选项：
- en: '`@angular/material`: The npm package name of the Angular Material library.
    It will also install the **Angular CDK** package, a set of behaviors and interactions
    used to build Angular Material. Both packages will be added to the `dependencies`
    section of the `package.json` file of the application.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/material`：Angular Material 库的 npm 包名。它还将安装 **Angular CDK** 包，这是一个用于构建
    Angular Material 的行为和交互的集合。这两个包都将添加到应用程序的 `package.json` 文件的 `dependencies` 部分中。'
- en: '`--theme=indigo-pink`: The name of the Angular Material theme we want to use.
    Adding a theme involves modifying several files of the Angular CLI workspace.
    It adds entries of the CSS theme file to the `angular.json` configuration file:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--theme=indigo-pink`：我们想要使用的 Angular Material 主题的名称。添加主题涉及修改 Angular CLI 工作区的几个文件。它将
    CSS 主题文件的条目添加到 `angular.json` 配置文件中：'
- en: '[PRE2]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It also includes the Material Design icons in the `index.html` file:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它还包括 `index.html` 文件中的 Material Design 图标：
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Angular Material comes with a set of predefined themes that we can use. Alternatively,
    we can build a custom one that fits our specific needs.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Angular Material 随带一套预定义的主题，我们可以使用。或者，我们可以构建一个符合我们特定需求的自定义主题。
- en: '`--animations=enabled`: Enables browser animations in our application by importing
    `BrowserAnimationsModule` into the main application module, `app.module.ts`:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--animations=enabled`：通过将 `BrowserAnimationsModule` 导入主应用程序模块 `app.module.ts`
    来在应用程序中启用浏览器动画：'
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`--typography`: Enables Angular Material typography globally in our application.
    Typography defines how text content is displayed and uses the **Roboto** font
    by default, which is included in the `index.html` file:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--typography`：在应用程序中全局启用 Angular Material 字体排印。字体排印定义了文本内容的显示方式，并默认使用 **Roboto**
    字体，该字体包含在 `index.html` 文件中：'
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It adds the following class to the `<body>` tag of the HTML file:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它向 HTML 文件的 `<body>` 标签中添加以下类：
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It also adds some CSS styles to the global `styles.scss` file of our application:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它还向应用程序的全局 `styles.scss` 文件中添加了一些 CSS 样式：
- en: '[PRE7]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We now have all the moving parts to build our Angular application. In the following
    section, we will create a mechanism for interacting with the OpenWeather API.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在拥有了构建 Angular 应用程序的所有组件。在下一节中，我们将创建一个与 OpenWeather API 交互的机制。
- en: Communicating with the OpenWeather API
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 OpenWeather API 通信
- en: 'The application should interact with the OpenWeather API over HTTP to get weather
    data. Let’s see how we can set up this type of communication in our application:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应通过 HTTP 与 OpenWeather API 交互以获取天气数据。让我们看看我们如何在应用程序中设置这种类型的通信：
- en: 'First, we must create an interface describing the data type we will get from
    the API. Use the following command of the Angular CLI to create one:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个接口来描述我们将从 API 获取的数据类型。使用以下 Angular CLI 命令创建一个：
- en: '[PRE8]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command will create the `weather.ts` file in the `src\app` folder
    of our Angular CLI project.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将在 Angular CLI 项目的 `src\app` 文件夹中创建 `weather.ts` 文件。
- en: 'Open the `weather.ts` file and modify it as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `weather.ts` 文件并按以下方式修改它：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each property corresponds to a weather field in the OpenWeather API response.
    You can find a description for each one at [https://openweathermap.org/current#parameter](https://openweathermap.org/current#parameter).
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个属性都对应于 OpenWeather API 响应中的天气字段。您可以在 [https://openweathermap.org/current#parameter](https://openweathermap.org/current#parameter)
    上找到每个字段的描述。
- en: Then, we must set up the built-in HTTP client provided by the Angular framework.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，我们必须设置 Angular 框架提供的内置 HTTP 客户端。
- en: 'Open the `app.module.ts` file and add `HttpClientModule` to the `imports` array
    of the `@NgModule` decorator:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.module.ts` 文件并将 `HttpClientModule` 添加到 `@NgModule` 装饰器的 `imports` 数组中：
- en: '[PRE10]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use the following command of the Angular CLI to create a new Angular service:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 Angular CLI 命令创建一个新的 Angular 服务：
- en: '[PRE11]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding command will create the `weather.service.ts` file in the `src\app`
    folder of our Angular CLI project.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将在 Angular CLI 项目的 `src\app` 文件夹中创建 `weather.service.ts` 文件。
- en: 'Open the `weather.service.ts` file and inject the `HttpClient` service into
    its `constructor`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `weather.service.ts` 文件并将 `HttpClient` 服务注入到其 `constructor` 中：
- en: '[PRE12]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following properties to define the endpoint URL of the OpenWeather
    API and our API key:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下属性添加以定义 OpenWeather API 的端点 URL 和我们的 API 密钥：
- en: '[PRE13]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Replace the value of the `apiKey` property with the API key that you have.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `apiKey` 属性的值替换为您拥有的 API 密钥。
- en: 'Add a method in the service that accepts the name of the city as a single parameter
    and queries the OpenWeather API for that city:'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务中添加一个方法，该方法接受城市名称作为单个参数并查询 OpenWeather API 以获取该城市的天气：
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `getWeather` method uses the `get` method of the `HttpClient` service that
    accepts two parameters. The first one is the URL endpoint of the OpenWeather API.
    The second parameter is an `options` object used to pass additional configuration
    to the request, such as URL query parameters with the `params` property.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`getWeather` 方法使用 `HttpClient` 服务的 `get` 方法，它接受两个参数。第一个参数是 OpenWeather API
    的 URL 端点。第二个参数是一个 `options` 对象，用于将额外的配置传递给请求，例如带有 `params` 属性的 URL 查询参数。'
- en: We use the constructor of the `HttpParams` object and call its `set` method
    for each query parameter we want to add to the URL. In our case, we pass the `q`
    parameter for the city name, the `appId` for the API key, and the type of `units`
    we want to use. You can learn more about supported units at [https://openweathermap.org/current#data](https://openweathermap.org/current#data).
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `HttpParams` 对象的构造函数并调用其 `set` 方法为要添加到 URL 的每个查询参数。在我们的例子中，我们传递 `q` 参数用于城市名称，`appId`
    用于 API 密钥，以及我们想要使用的 `units` 类型。您可以在 [https://openweathermap.org/current#data](https://openweathermap.org/current#data)
    上了解更多关于支持的单位信息。
- en: We used the `set` method to create query parameters because the `HttpParams`
    object is immutable. Calling the constructor for each parameter you want to pass
    will throw an error.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用`set`方法创建查询参数，因为`HttpParams`对象是不可变的。为每个要传递的参数调用构造函数将引发错误。
- en: We also set the response data type as `Weather` in the `get` method. Notice
    that the `getWeather` method does not return `Weather` data but instead an `Observable`
    of this type.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还在`get`方法中将响应数据类型设置为`Weather`。请注意，`getWeather`方法不返回`Weather`数据，而是一个此类型的`Observable`。
- en: 'Add the following `import` statements at the top of the file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下`import`语句：
- en: '[PRE15]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The Angular service that we created contains all the necessary artifacts for
    interacting with the OpenWeather API. In the following section, we will create
    an Angular component for initiating requests and displaying data from it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的Angular服务包含与OpenWeather API交互所需的所有必要组件。在下一节中，我们将创建一个Angular组件来发起请求并显示数据。
- en: Displaying weather information for a city
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示城市的天气信息
- en: 'The user should be able to use the UI of our application and enter the name
    of a city for which they want to view weather details. The application will use
    that information to query the OpenWeather API, and the request result will be
    displayed on the UI using a card layout. Let’s start building an Angular component
    for creating all these types of interactions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应该能够使用我们应用程序的UI并输入他们想要查看天气详情的城市名称。应用程序将使用该信息查询OpenWeather API，并将请求结果以卡片布局的形式显示在UI上。让我们开始构建一个Angular组件来创建所有这些类型的交互：
- en: 'Use the following command of the Angular CLI to create an Angular component:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下Angular CLI命令创建Angular组件：
- en: '[PRE16]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the template of the main component, `app.component.html`, and replace
    its content with the selector of the new component, `<app-weather>`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开主组件的模板，`app.component.html`，并用新组件的选择器`<app-weather>`替换其内容：
- en: '[PRE17]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the `app.module.ts` file and add the following modules from the Angular
    Material library to the `imports` array of the `@NgModule` decorator:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.module.ts`文件，并将Angular Material库中的以下模块添加到`@NgModule`装饰器的`imports`数组中：
- en: '[PRE18]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Also, add the necessary `import` statements at the top of the file:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还需要在文件顶部添加必要的`import`语句：
- en: '[PRE19]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the `weather.component.ts` file, create a `weather` property of the `Weather`
    type, and inject `WeatherService` into the `constructor` of the `WeatherComponent`
    class:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`weather.component.ts`文件，为`Weather`类型创建一个`weather`属性，并将`WeatherService`注入到`WeatherComponent`类的`constructor`中：
- en: '[PRE20]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a component method that subscribes to the `getWeather` method of `WeatherService`
    and assigns the result to the `weather` component property:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个组件方法，它订阅`WeatherService`的`getWeather`方法，并将结果分配给`weather`组件属性：
- en: '[PRE21]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We have already finished working with the TypeScript class file of our component.
    Let’s wire it up to its template. Open the `weather.component.html` file and replace
    its content with the following HTML code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了与组件的TypeScript类文件的协作。现在让我们将其连接到其模板。打开`weather.component.html`文件，并用以下HTML代码替换其内容：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding template consists of several components from the Angular Material
    library, including a `<mat-form-field>` component that contains the following
    child elements:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模板由Angular Material库中的几个组件组成，包括一个包含以下子元素的`<mat-form-field>`组件：
- en: An `<input>` HTML element for entering the name of the city. When the user has
    finished editing and presses the *Enter* key, it calls the `search` component
    method passing the value property of the `cityCtrl` variable as a parameter. The
    `cityCtrl` variable is a **template reference variable** and indicates the actual
    object of the native HTML `<input>` element.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于输入城市名称的`<input>`HTML元素。当用户完成编辑并按下*Enter*键时，它会调用`search`组件方法，并将`cityCtrl`变量的值属性作为参数传递。`cityCtrl`变量是一个**模板引用变量**，表示原生HTML`<input>`元素的实体对象。
- en: A `<mat-icon>` component displays a magnifier icon at the end of the input element,
    as indicated by the `matSuffix` directive. It also calls the `search` component
    method when clicked.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<mat-icon>`组件在输入元素的末尾显示一个放大镜图标，如`matSuffix`指令所示。点击时，它还会调用`search`组件的方法。'
- en: The `cityCtrl` template reference variable is indicated by a `#` and is accessible
    everywhere inside the component template.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`cityCtrl`模板引用变量由`#`表示，并在组件模板内部任何地方都可以访问。'
- en: 'A `<mat-card>` component presents information in a card layout and is displayed
    only when the `weather` component property has a value. It consists of the following
    child elements:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`<mat-card>` 组件以卡片布局展示信息，并且仅在 `weather` 组件属性有值时显示。它由以下子元素组成：'
- en: '`<mat-card-header>`: The header of the card. It consists of a `<mat-card-title>`
    component that displays the name of the city and the country code and a `<mat-card-subtitle>`
    component that displays the current weather conditions.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<mat-card-header>`：卡片的头部。它由一个 `<mat-card-title>` 组件组成，显示城市名称和国家代码，以及一个 `<mat-card-subtitle>`
    组件，显示当前的天气状况。'
- en: '`mat-card-image`: The image of the card that displays the icon of the weather
    conditions, along with a description as an alternate text.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mat-card-image`：显示天气状况图标的卡片图片，以及作为替代文本的描述。'
- en: '`<mat-card-content>`: The main content of the card. It displays the temperature,
    pressure, humidity, and wind speed of the current weather. The temperature is
    displayed without any decimal points, as indicated by the `number` pipe.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<mat-card-content>`：卡片的主要内容。它显示当前天气的温度、压力、湿度和风速。温度以没有小数点的形式显示，如 `number` 管道所示。'
- en: 'Let’s now spice things up a bit by adding some styles to our component:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来增加一些样式，让我们的组件更有趣：
- en: '`weather.component.scss`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`weather.component.scss`'
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `:host` selector is an Angular unique CSS selector that targets the HTML
    element hosting our component, which in our case, is the `<app-weather>` HTML
    element.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`:host` 选择器是 Angular 独特的 CSS 选择器，它针对托管我们的组件的 HTML 元素，在我们的例子中，是 `<app-weather>`
    HTML 元素。'
- en: 'If we run our application using `ng serve`, navigate to `http://localhost:4200`,
    and search for weather information in `Athens`, we should get the following output
    on the screen:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 `ng serve` 运行我们的应用程序，导航到 `http://localhost:4200`，并在 `Athens` 中搜索天气信息，我们应该在屏幕上得到以下输出：
- en: '![](img/B18465_04_02.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_04_02.png)'
- en: Figure 4.2 – Application output
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 应用程序输出
- en: Congratulations! Now, you have a fully working Angular application that displays
    weather information for a specific city. The application consists of a single
    Angular component that communicates with the OpenWeather API using an Angular
    service through HTTP. We learned how to style our component using Angular Material
    and give our users a pleasant experience with our app. But what happens when we
    are offline? Does the application work as expected? Does the user’s experience
    remain the same? Let’s find out in the following section.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在，你拥有了一个完全工作的 Angular 应用程序，它可以显示特定城市的天气信息。该应用程序由一个单一的 Angular 组件组成，通过 Angular
    服务使用 HTTP 与 OpenWeather API 进行通信。我们学习了如何使用 Angular Material 来美化我们的组件，并让我们的用户在使用我们的应用程序时获得愉悦的体验。但当我们离线时会发生什么？应用程序是否按预期工作？用户的体验是否保持不变？让我们在下一节中找出答案。
- en: Enabling offline mode with the service worker
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过服务工作者启用离线模式
- en: 'Users from anywhere can now access our Angular application to get weather information
    for any city they are interested in. When we say *anywhere*, we mean any network
    type, such as broadband, cellular (3G/4G/5G), and Wi-Fi. Consider the case where
    a user is in a place with low coverage or frequent network outages. How is our
    application going to behave? Let’s find out by experimenting:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 来自任何地方的用户现在都可以访问我们的 Angular 应用程序，以获取他们感兴趣的任何城市的天气信息。当我们说“任何地方”时，我们指的是任何网络类型，例如宽带、蜂窝（3G/4G/5G）和
    Wi-Fi。考虑一个用户处于覆盖范围低或频繁断网的地方的情况。我们的应用程序会如何表现？让我们通过实验来找出答案：
- en: Run the Angular application using the `ng serve` command of the Angular CLI.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 的 `ng serve` 命令运行 Angular 应用程序。
- en: 'Open your favorite browser and navigate to `http://localhost:4200`, the default
    address and port number for an Angular CLI project. You should see the input field
    for entering the name of the city:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你喜欢的浏览器，导航到 `http://localhost:4200`，这是 Angular CLI 项目的默认地址和端口号。你应该能看到输入字段，用于输入城市的名称：
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_04_03.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像 – 自动生成的描述](img/B18465_04_03.png)'
- en: Figure 4.3 – Entering the name of a city
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 输入城市名称
- en: 'Open the developer tools of your browser and navigate to the **Network** tab.
    Set the value of the **Throttling** dropdown to **Offline**:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你浏览器的开发者工具，并导航到 **网络** 选项卡。将 **Throttling** 下拉菜单的值设置为 **Offline**：
- en: '![Figure 4.3 – Offline network mode](img/B18465_04_04.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 离线网络模式](img/B18465_04_04.png)'
- en: Figure 4.4 – Offline network mode
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 离线网络模式
- en: 'Try to refresh your browser. You will see an indication that you are disconnected
    from the internet, as shown in the following screenshot:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试刷新您的浏览器。您将看到您已从互联网断开连接的指示，如下面的截图所示：
- en: '![Figure 4.4 – No internet connection (Google Chrome)](img/B18465_04_05.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 无互联网连接（Google Chrome）](img/B18465_04_05.png)'
- en: Figure 4.5 – No internet connection (Google Chrome)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 无互联网连接（Google Chrome）
- en: The previous case is standard in areas with low-quality internet connections.
    So, what can we do for our users in such places? Luckily, the Angular framework
    contains an implementation of a service worker that can significantly enhance
    the UX of our application when running in offline mode. It can cache certain application
    parts and deliver them accordingly instead of making real requests.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在低质量互联网连接的地区，这种情况是标准的。那么，我们能为这样的用户做些什么呢？幸运的是，Angular 框架包含了一个服务工作者的实现，当在离线模式下运行时，它可以显著提高我们应用程序的用户体验。它可以缓存某些应用程序部分并相应地提供它们，而不是进行实际请求。
- en: The Angular service worker can also be used in environments with large network
    latency connections. Consider using a service worker in this type of network also
    to improve the experience of your users.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 服务工作者也可以用于具有大网络延迟连接的环境。考虑在这种类型的网络中也使用服务工作者来改善用户的体验。
- en: 'Run the following command of the Angular CLI to enable the service worker in
    our Angular application:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下 Angular CLI 命令以在我们的 Angular 应用程序中启用服务工作者：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding command will transform the Angular CLI workspace accordingly
    for PWA support:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将根据 PWA 支持相应地转换 Angular CLI 工作区：
- en: It adds the `@angular/service-worker` npm package to the `dependencies` section
    of the `package.json` file of the application.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将 `@angular/service-worker` npm 包添加到应用程序的 `package.json` 文件的 `dependencies`
    部分。
- en: It creates the `manifest.webmanifest` file in the `src` folder of the application.
    The manifest file contains information about the application needed to install
    and run it natively. It also adds it to the `assets` array of the `build` options
    in the `angular.json` file.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在应用程序的 `src` 文件夹中创建 `manifest.webmanifest` 文件。该清单文件包含有关应用程序的信息，这些信息是安装和运行原生应用程序所需的。它还将其添加到
    `angular.json` 文件的 `build` 选项的 `assets` 数组中。
- en: 'It creates the `ngsw-config.json` file at the root of the project, which is
    the service worker configuration file. We use it to define configuration-specific
    artifacts, such as which resources are cached and how they are cached. You can
    find more details about the configuration of the service worker at the following
    link: [https://angular.io/guide/service-worker-config#service-worker-configuration](https://angular.io/guide/service-worker-config#service-worker-configuration).'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在项目根目录中创建 `ngsw-config.json` 文件，这是服务工作者配置文件。我们使用它来定义特定配置的工件，例如哪些资源被缓存以及如何缓存。您可以在以下链接中找到有关服务工作者配置的更多详细信息：[https://angular.io/guide/service-worker-config#service-worker-configuration](https://angular.io/guide/service-worker-config#service-worker-configuration)。
- en: The configuration file is also set in the `ngswConfigPath` property of the `build`
    configuration in the `angular.json` file.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件也在 `angular.json` 文件的 `build` 配置中的 `ngswConfigPath` 属性中设置。
- en: It sets the `serviceWorker` property to `true` in the `build` configuration
    of the `angular.json` file.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在 `angular.json` 文件的 `build` 配置中将 `serviceWorker` 属性设置为 `true`。
- en: 'It registers the service worker in the `app.module.ts` file:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在 `app.module.ts` 文件中注册服务工作者：
- en: '[PRE25]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `ngsw-worker.js` file is the JavaScript file that contains the actual implementation
    of the service worker. It is created automatically for us when we build our application.
    Angular uses the `register` method of the `ServiceWorkerModule` class to register
    it within our application.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngsw-worker.js` 文件是包含服务工作者实际实现的 JavaScript 文件。当构建我们的应用程序时，它会为我们自动创建。Angular
    使用 `ServiceWorkerModule` 类的 `register` 方法在我们的应用程序中注册它。'
- en: It creates several icons to be used when the application is installed as a native
    one on the device of the user.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为当应用程序作为原生应用安装到用户设备上时使用创建几个图标。
- en: 'It includes the manifest file and a `<meta>` tag for `theme-color` in the `<head>`
    element of the `index.html` file:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在 `index.html` 文件的 `<head>` 元素中包含清单文件和一个 `theme-color` 的 `<meta>` 标签：
- en: '[PRE26]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that we have completed the service worker installation, it is time to test
    it! Before moving on, we should install an external web server because the built-in
    function of the Angular CLI does not work with service workers. A good alternative
    is **http-server**:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了服务工作者的安装，是时候测试它了！在继续之前，我们应该安装一个外部网络服务器，因为 Angular CLI 的内置功能不支持服务工作者。一个不错的选择是
    **http-server**：
- en: 'Run the `install` command of the npm client to install `http-server`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行 npm 客户端的 `install` 命令来安装 `http-server`:'
- en: '[PRE27]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding command will install `http-server` as a development dependency
    of our Angular CLI project.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将 `http-server` 作为我们的 Angular CLI 项目的开发依赖项安装。
- en: Build the Angular application using the `ng build` command of the Angular CLI.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 的 `ng build` 命令构建 Angular 应用程序。
- en: 'Open the `package.json` file of the Angular CLI workspace and add the following
    entry to the `scripts` property:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Angular CLI 工作区的 `package.json` 文件，并将以下条目添加到 `scripts` 属性中：
- en: '[PRE28]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Start the HTTP web server using the following command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动 HTTP 网络服务器：
- en: '[PRE29]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The preceding command will start http-server at port 8080 and have caching disabled.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将在端口 8080 上启动 http-server 并禁用缓存。
- en: Open your browser and navigate to `http://localhost:8080`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器并导航到 `http://localhost:8080`。
- en: Prefer opening the page in private or incognito mode to avoid unexpected behavior
    from the service worker.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议在私密或隐身模式下打开页面，以避免服务工作者出现意外行为。
- en: Repeat the process we followed at the beginning of the section for switching
    to offline mode.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复本节开头为切换到离线模式所遵循的过程。
- en: If you refresh the page now, you will notice that the application is working
    as expected.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在刷新页面，您会注意到应用程序按预期工作。
- en: 'The service worker did all the work for us, and the process was so seamless
    that we could not tell whether we were online or offline. You can verify that
    by inspecting the **Network** tab:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 服务工作者为我们做了所有工作，整个过程如此无缝，以至于我们无法判断我们是处于在线还是离线状态。您可以通过检查 **网络** 选项卡来验证这一点：
- en: '![Figure 4.5 – Service worker (offline mode)](img/B18465_04_06.png)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 4.5 – 服务工作者（离线模式）](img/B18465_04_06.png)'
- en: Figure 4.6 – Service worker (offline mode)
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.6 – 服务工作者（离线模式）
- en: The **(ServiceWorker)** value in the **Size** column indicates that the service
    worker served a cached version of our application.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小** 列中的 **(ServiceWorker)** 值表示服务工作者为我们提供了应用程序的缓存版本。'
- en: We have successfully installed the service worker and moved closer to converting
    our application into a PWA. In the following section, we will learn how to notify
    users of the application about potential updates.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功安装服务工作者，并更接近将我们的应用程序转换为 PWA。在下一节中，我们将学习如何通知用户应用程序的潜在更新。
- en: Staying up to date with in-app notifications
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持应用程序内通知的更新
- en: When we want to apply a change in a web application, we make the change and
    build a new version of our application. The application is then deployed to a
    web server, and every user can access the latest version immediately. But PWAs
    are different.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想在网络应用程序中应用更改时，我们进行更改并构建应用程序的新版本。然后，应用程序被部署到网络服务器，每个用户都可以立即访问最新版本。但 PWA 是不同的。
- en: 'When we deploy a new version of our PWA, the service worker must act accordingly
    and apply a specific update strategy. It should notify the user of the new version
    or install it immediately. Which update strategy we follow depends on our requirements.
    In this project, we want to show a prompt to the user and let them decide whether
    they want to update the app. Let’s see how to implement this feature in our application:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们部署 PWA 的新版本时，服务工作者必须相应地采取行动并应用特定的更新策略。它应该通知用户新版本或立即安装它。我们遵循哪种更新策略取决于我们的需求。在这个项目中，我们想向用户显示提示，并让他们决定是否想要更新应用程序。让我们看看如何在我们的应用程序中实现这个功能：
- en: 'Open the `app.module.ts` file and add `MatSnackBarModule` to the `imports`
    array of the `@NgModule` decorator:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.module.ts` 文件，并将 `MatSnackBarModule` 添加到 `@NgModule` 装饰器的 `imports`
    数组中：
- en: '[PRE30]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`MatSnackBarModule` is an Angular Material module that allows us to interact
    with **snack** **bars**. A snack bar is a pop-up window that usually appears on
    the bottom of the page and is used for notification purposes.'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MatSnackBarModule` 是一个 Angular Material 模块，它允许我们与 **snack** **bars** 进行交互。snack
    bar 是一个通常出现在页面底部的弹出窗口，用于通知目的。'
- en: 'Open the `app.component.ts` file and add the `OnInit` interface to the implemented
    interfaces of the `AppComponent` class:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.ts` 文件，并将 `OnInit` 接口添加到 `AppComponent` 类实现的接口中：
- en: '[PRE31]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Inject the `MatSnackBar` and `SwUpdate` services in the `constructor` of the
    `AppComponent` class:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AppComponent` 类的 `constructor` 中注入 `MatSnackBar` 和 `SwUpdate` 服务：
- en: '[PRE32]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `MatSnackBar` service is an Angular service exposed from `MatSnackBarModule`.
    The `SwUpdate` service is part of the service worker and contains observables
    that we can use to notify the user on the update process of our application.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MatSnackBar` 服务是从 `MatSnackBarModule` 中公开的 Angular 服务。`SwUpdate` 服务是服务工作者的一部分，包含我们可以用来通知用户应用程序更新过程的可观察对象。'
- en: 'Create the following `ngOnInit` method:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下 `ngOnInit` 方法：
- en: '[PRE33]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `ngOnInit` method is an implementation method of the `OnInit` interface
    and is called upon component initialization. The `SwUpdate` service contains a
    `versionUpdates` observable property that we can use to get notified when a new
    version of our application is available. Typically, we tend to subscribe to observables,
    but in this case, we don’t. Instead, we subscribe to the `pipe` method, an RxJS
    operator for composing multiple operators.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ngOnInit` 方法是 `OnInit` 接口的一个实现方法，在组件初始化时被调用。`SwUpdate` 服务包含一个 `versionUpdates`
    可观察属性，我们可以使用它来获取通知，当我们的应用程序有新版本可用时。通常，我们倾向于订阅可观察对象，但在这个情况下，我们没有这样做。相反，我们订阅了 `pipe`
    方法，这是一个用于组合多个操作符的 RxJS 操作符。'
- en: 'Add the following `import` statements at the top of the `app.component.ts`
    file:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app.component.ts` 文件的顶部添加以下 `import` 语句：
- en: '[PRE34]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'A lot is going on inside the `ngOnInit` method that we defined previously,
    so let’s break it down into pieces to understand it further. The `pipe` operator
    combines four RxJS operators:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前定义的 `ngOnInit` 方法内部有很多事情在进行，所以让我们将其分解成几个部分以进一步理解它。`pipe` 操作符组合了四个 RxJS
    操作符：
- en: '`filter:` We use it to filter out any emitted values from the `versionUpdates`
    observable other than the one that indicates when the version is ready to be installed`.`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter:` 我们使用它来过滤掉从 `versionUpdates` 可观察对象发出的除表示版本准备安装之外的所有值。`'
- en: '`switchMap`: This is called when a new version of our application is available.
    It uses the `open` method of the `snackbar` property to show a snack bar with
    an action button and subscribes to its `afterDismissed` observable. The `afterDismissed`
    observable emits when the snack bar is closed either by clicking the action button
    or programmatically using its API methods.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switchMap`: 当我们的应用程序有新版本可用时，会调用此方法。它使用 `snackbar` 属性的 `open` 方法来显示带有操作按钮的
    snack bar，并订阅其 `afterDismissed` 可观察对象。`afterDismissed` 可观察对象在 snack bar 通过点击操作按钮或使用其
    API 方法程序化关闭时发出。'
- en: '`filter`: This is called when the snack bar is dismissed using the action button.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter`: 当使用操作按钮关闭 snack bar 时，会调用此方法。'
- en: '`map`: This calls the `activateUpdate` method of the `updates` property to
    apply the new version of the application. Once the application has been updated,
    it reloads the browser window for the changes to take effect.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map`: 这调用 `updates` 属性的 `activateUpdate` 方法来应用应用程序的新版本。一旦应用程序已更新，它将重新加载浏览器窗口以使更改生效。'
- en: 'Let’s see the whole process of updating to a new version in action:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看更新到新版本的整个过程：
- en: 'Run the following command of the Angular CLI to build the Angular application:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Angular CLI 命令来构建 Angular 应用程序：
- en: '[PRE35]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Start the HTTP server to serve the application:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 HTTP 服务器以提供应用程序：
- en: '[PRE36]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Open a private or incognito browser window and navigate to `http://localhost:8080`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个私密或隐身浏览器窗口，并导航到 `http://localhost:8080`。
- en: 'Without closing the browser window, let’s introduce a change in our application
    and add a UI header. Run the `generate` command of the Angular CLI to create a
    component:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不关闭浏览器窗口的情况下，让我们在我们的应用程序中引入一个更改并添加一个 UI 标题。运行 Angular CLI 的 `generate` 命令来创建一个组件：
- en: '[PRE37]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the `app.module.ts` file and import the following Angular Material modules:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.module.ts` 文件并导入以下 Angular Material 模块：
- en: '[PRE38]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Open the `header.component.html` file and create a `<mat-toolbar>` component
    with two HTML `<button>` elements, each one containing a `<mat-icon>` component:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `header.component.html` 文件，并创建一个包含两个 HTML `<button>` 元素的 `<mat-toolbar>`
    组件，每个按钮都包含一个 `<mat-icon>` 组件：
- en: '[PRE39]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the following CSS style to the `header.component.scss` file to position
    buttons at the far-right end of the header:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 样式添加到 `header.component.scss` 文件中，以便将按钮定位在标题的右端：
- en: '[PRE40]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Open the `app.component.html` file and add the `<app-header>` component at
    the top:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.html` 文件，并在顶部添加 `<app-header>` 组件：
- en: '[PRE41]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Repeat steps 1 and 2 and refresh the browser window that points to `http://localhost:8080`.
    You should see the following notification at the bottom of the page after a few
    seconds:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 1 和 2，并刷新指向 `http://localhost:8080` 的浏览器窗口。几秒钟后，你应在页面底部看到以下通知：
- en: '![Figure 4.6 – New version notification](img/B18465_04_07.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 新版本通知](img/B18465_04_07.png)'
- en: Figure 4.7 – New version notification
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 新版本通知
- en: 'Click on the **Update now** button, wait for the browser window to reload,
    and you should see your change:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **立即更新** 按钮，等待浏览器窗口重新加载，你应该能看到你的更改：
- en: '![](img/B18465_04_08.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_04_08.png)'
- en: Figure 4.8 – Application output
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 应用程序输出
- en: Our Angular application has begun to transform into a PWA one. Along with the
    caching mechanism that the Angular service worker provides, we have added a mechanism
    for installing new versions of our application. In the following section, we will
    learn how to deploy and install our application natively on our device.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Angular 应用程序已经开始转变为 PWA 应用程序。随着 Angular 服务工作者提供的缓存机制，我们添加了安装我们应用程序新版本的机制。在下一节中，我们将学习如何在我们的设备上本地部署和安装我们的应用程序。
- en: Deploying our app with Firebase Hosting
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Firebase Hosting 部署我们的应用程序
- en: 'Firebase is a hosting solution provided by Google that we can use to deploy
    our Angular applications. The Firebase team has put much effort into creating
    an Angular CLI schematic for deploying an Angular application using one single
    command. Before diving deeper, let’s learn how to set up Firebase Hosting:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 是由 Google 提供的托管解决方案，我们可以使用它来部署我们的 Angular 应用程序。Firebase 团队投入了大量精力创建了一个
    Angular CLI 脚本，用于通过单个命令部署 Angular 应用程序。在深入了解之前，让我们学习如何设置 Firebase Hosting：
- en: Use a Google account to log in to Firebase at [https://console.firebase.google.com](https://console.firebase.google.com).
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Google 账户登录 Firebase，网址为 [https://console.firebase.google.com](https://console.firebase.google.com)。
- en: Click the **Add project** button to create a new Firebase project.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加项目** 按钮以创建新的 Firebase 项目。
- en: Enter the name of the project, `weather-app`, and click the **Continue** button.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目名称，`weather-app`，然后点击 **继续** 按钮。
- en: Firebase generates a unique identifier for your project, such as *weather-app-b11a2*,
    underneath the name of the project. The identifier will be used in the hosting
    URL of your project later on.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebase 在项目名称下方生成一个独特的标识符，例如 *weather-app-b11a2*，该标识符将在项目的主机 URL 中使用。
- en: Disable the use of **Google Analytics** for your project and click the **Create
    project** button.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用项目中 **Google Analytics** 的使用，然后点击 **创建项目** 按钮。
- en: 'Once the project has been created, the following will appear on the screen:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，屏幕上将会显示以下内容：
- en: '![Figure 4.8 – Firebase project creation](img/B18465_04_09.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – Firebase 项目创建](img/B18465_04_09.png)'
- en: Figure 4.9 – Firebase project creation
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – Firebase 项目创建
- en: Click on the **Continue** button, and you will be redirected to the dashboard
    of your new Firebase project.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **继续** 按钮，你将被重定向到你的新 Firebase 项目仪表板。
- en: 'We have now completed the configuration of Firebase Hosting. It is now time
    to integrate it with our Angular application:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了 Firebase Hosting 的配置。现在是时候将其与我们的 Angular 应用程序集成：
- en: 'Run the following command in a terminal window to install **Firebase tools**:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中运行以下命令来安装 **Firebase 工具**：
- en: '[PRE42]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Run the following command in the same terminal window to authenticate with
    the Firebase CLI:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的终端窗口中运行以下命令以使用 Firebase CLI 进行身份验证：
- en: '[PRE43]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Finally, run the following command of the Angular CLI to install the `@angular/fire`
    npm package in your Angular CLI project:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行以下 Angular CLI 命令来在 Angular CLI 项目中安装 `@angular/fire` npm 包：
- en: '[PRE44]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The preceding command will find the latest version of the library and prompt
    us to install it.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将找到库的最新版本，并提示我们安装它。
- en: 'First, it will ask what features of Firebase we want to enable:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它将询问我们想要启用 Firebase 的哪些功能：
- en: '[PRE45]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Ensure the `ng deploy -- hosting` option is selected, and press *Enter*.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保选择了 `ng deploy -- hosting` 选项，然后按 *Enter*。
- en: 'Then, it will ask us to select which Firebase account we want to use:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它将询问我们想要使用哪个 Firebase 账户：
- en: '[PRE46]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Ensure the account you used earlier is selected, and press *Enter*.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保选择了之前使用的账户，然后按 *Enter*。
- en: 'In the next question, we will choose the project with which we are going to
    deploy our application:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个问题中，我们将选择我们将要部署应用程序的项目：
- en: '[PRE47]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Select the `weather-app` project that we created earlier and press *Enter*.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择我们之前创建的 `weather-app` 项目，然后按 *Enter*。
- en: 'Finally, we must choose the site that will host our application:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须选择将托管我们应用程序的网站：
- en: '[PRE48]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Select the hosting website that we created earlier and press *Enter*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 选择我们之前创建的托管网站，然后按 *Enter*。
- en: 'The previous process will modify the Angular CLI workspace accordingly to accommodate
    its deployment to Firebase:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的流程将根据需要修改 Angular CLI 工作区，以适应其部署到 Firebase：
- en: It will create a `.firebaserc` file in the root folder that contains details
    of the selected Firebase project.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在根目录下创建一个 `.firebaserc` 文件，其中包含所选 Firebase 项目的详细信息。
- en: It will create a `firebase.json` file in the root folder, which is the Firebase
    configuration file. The configuration file specifies settings such as the folder
    that will be deployed to Firebase and any rewrite rules.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在根目录下创建一个 `firebase.json` 文件，这是 Firebase 配置文件。配置文件指定了将部署到 Firebase 的文件夹以及任何重写规则。
- en: The folder deployed by default is the `dist` output folder created by the Angular
    CLI when we run the `ng build` command.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认部署的文件夹是当运行 `ng build` 命令时由 Angular CLI 创建的 `dist` 输出文件夹。
- en: It will add a `deploy` target in the `angular.json` configuration file.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在 `angular.json` 配置文件中添加一个 `deploy` 目标。
- en: 'To deploy the application, we only need to run a single Angular CLI command,
    and the Angular CLI will take care of the rest:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署应用程序，我们只需要运行一个 Angular CLI 命令，Angular CLI 将处理其余部分：
- en: '[PRE49]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The preceding command will build and deploy the application to the selected
    Firebase project. Once deployment is complete, the Angular CLI will report back
    the following information:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将构建并将应用程序部署到所选的 Firebase 项目。一旦部署完成，Angular CLI 将报告以下信息：
- en: '**Project Console**: The dashboard of the Firebase project.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目控制台**：Firebase 项目的仪表板。'
- en: '**Hosting URL**: The URL of the deployed version of the application. It consists
    of the unique identifier of the Firebase project and the `.web.app` suffix that
    is added automatically from Firebase.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管 URL**：已部署应用程序版本的 URL。它由 Firebase 项目的唯一标识符和 Firebase 自动添加的 `.web.app` 后缀组成。'
- en: The service worker requires an application to be served with HTTPS to work properly
    as a PWA, except in the localhost that is used for development. Firebase hosts
    web applications with HTTPS by default.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者需要以 HTTPS 协议提供服务才能作为 PWA 正确工作，除了用于开发的 localhost 之外。Firebase 默认使用 HTTPS
    托管 Web 应用程序。
- en: 'Now that we have deployed our application, let’s see how we can install it
    as a PWA on our device:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经部署了我们的应用程序，让我们看看我们如何将其作为 PWA 安装到我们的设备上：
- en: Navigate to the hosting URL and click on the **Install weather-app** button
    next to the address bar of the browser:![Εικόνα που περιέχει κείμενο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_04_10.png)
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到托管 URL，然后在浏览器地址栏旁边点击 **安装 weather-app** 按钮：![包含文本的图片 自动生成的描述](img/B18465_04_10.png)
- en: Figure 4.10 – Installing the application (Google Chrome)
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.10 – 安装应用程序（Google Chrome）
- en: The installation button may be found in different locations in other browsers.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装按钮可能在其他浏览器的不同位置。
- en: The browser will prompt us to install the application.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浏览器将提示我们安装应用程序。
- en: 'Click the **Install** button, and the application will open as a native window
    on our device:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装** 按钮，应用程序将在我们的设备上以原生窗口的形式打开：
- en: '![](img/B18465_04_11.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B18465_04_11.png]'
- en: Figure 4.11 – PWA
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – PWA
- en: It will also install a shortcut for launching the application directly from
    our device. Congratulations! We now have a full PWA that displays weather information
    for a city.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会在我们的设备上创建一个启动应用程序的快捷方式。恭喜！我们现在有一个完整的 PWA，可以显示城市的天气信息。
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a PWA that displays weather information for a given
    city.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个显示特定城市天气信息的 PWA。
- en: Initially, we set up the OpenWeather API to get weather data and created an
    Angular application from scratch to integrate it. We learned how to use the built-in
    HTTP client of the Angular framework to communicate with the OpenWeather API.
    We also installed the Angular Material library and used some ready-made UI components
    for our application.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，我们设置了 OpenWeather API 以获取天气数据，并从头创建了一个 Angular 应用程序来集成它。我们学习了如何使用 Angular
    框架内置的 HTTP 客户端与 OpenWeather API 进行通信。我们还安装了 Angular Material 库，并使用了一些现成的 UI 组件来构建我们的应用程序。
- en: After creating the Angular application, we introduced the Angular service worker
    and enabled it to work offline. We learned how to interact with the service worker
    and provide notifications for updates in our application. Finally, we deployed
    a production version of our application into Firebase Hosting and installed it
    locally on our device.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Angular 应用程序后，我们介绍了 Angular 服务工作者并使其能够离线工作。我们学习了如何与服务工作者交互并为我们的应用程序提供更新通知。最后，我们将应用程序的生产版本部署到
    Firebase Hosting 并将其安装到我们的设备上。
- en: In the next chapter, we will learn how to create an Angular desktop application
    with Electron, the big rival of PWAs.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 Electron（PWAs 的主要竞争对手）创建 Angular 桌面应用程序。
- en: Exercise
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Use the OpenWeather API to display a weekly forecast for the selected city.
    The OpenWeather API provides the **5 Day / 3 Hour Forecast** collection that can
    be used. The collection returns a forecast every 3 hours for each day, so, for
    a weekly forecast, you should just focus on the weather at 12:00pm each day. The
    forecast should be displayed as a grid list of card components and should be positioned
    below the current weather of the city.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpenWeather API 显示所选城市的每周天气预报。OpenWeather API 提供了**5天/3小时预报**集合，可以用于此。该集合为每天每3小时返回一次预报，因此，对于每周预报，你只需关注每天中午12:00的天气即可。预报应以网格列表的形式显示为卡片组件，并应位于城市当前天气下方。
- en: You can find the solution to the exercise in the `Chapter04` folder of the `exercise`
    branch at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise](https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise](https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise)的`exercise`分支的`Chapter04`文件夹中找到练习的解决方案。
- en: Further reading
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'PWAs: [https://web.dev/progressive-web-apps](https://web.dev/progressive-web-apps)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PWAs：[https://web.dev/progressive-web-apps](https://web.dev/progressive-web-apps)
- en: 'OpenWeather API: [https://openweathermap.org/api](https://openweathermap.org/api)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenWeather API：[https://openweathermap.org/api](https://openweathermap.org/api)
- en: 'Angular Material: [https://material.angular.io](https://material.angular.io)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Material：[https://material.angular.io](https://material.angular.io)
- en: 'Angular HTTP client: [https://angular.io/guide/http](https://angular.io/guide/http)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular HTTP 客户端：[https://angular.io/guide/http](https://angular.io/guide/http)
- en: 'Angular service worker: [https://angular.io/guide/service-worker-getting-started](https://angular.io/guide/service-worker-getting-started
    )'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 服务工作者：[https://angular.io/guide/service-worker-getting-started](https://angular.io/guide/service-worker-getting-started)
- en: 'Communicating with the Angular service worker: [https://angular.io/guide/service-worker-communications](https://angular.io/guide/service-worker-communications)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Angular 服务工作者通信：[https://angular.io/guide/service-worker-communications](https://angular.io/guide/service-worker-communications)
- en: 'HTTP server: [https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 服务器：[https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server)
- en: 'Firebase Hosting: [https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase Hosting：[https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting)
- en: 'Deployment in Angular: [https://angular.io/guide/deployment#automatic-deployment-with-the-cli](https://angular.io/guide/deployment#automatic-deployment-with-the-cli)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 部署：[https://angular.io/guide/deployment#automatic-deployment-with-the-cli](https://angular.io/guide/deployment#automatic-deployment-with-the-cli)
