["```js\n// This class implements data and logic to represent a colour\n// which establishes clean encapsulation.\nclass Colour {\n  constructor(red, green, blue) {\n    Object.assign(this, {red, green, blue});\n  }\n\n  // Using this function we can convert the internal colour values\n  // to a hex colour string like #ff0000 (red).\n  getHex() {\n    return '#' + Colour.getHexValue(this.red) + Colour.getHexValue(this.green) +\n      Colour.getHexValue(this.blue);\n  }\n\n  // Static function on Colour class to convert a number from\n  // 0 to 255 to a hexadecimal representation 00 to ff\n  static getHexValue(number) {\n    const hex = number.toString(16);\n    return hex.length === 2 ? hex : '0' + hex;\n  }\n}\n\n// Our TShirt class expects two colours to be passed during\n// construction that will be used to render some HTML\nclass TShirt {\n  constructor(backgroundColour, foregroundColour) {\n    Object.assign(this, {backgroundColour, foregroundColour});\n  }\n\n  // Function that returns some markup which represents our \n  // T-Shirts\n  getHtml() {\n    return `\n      <t-shirt style=\"background-color: ${this.backgroundColour.getHex()}\">\n        <t-shirt-text style=\"color: ${this.foregroundColour.getHex()}\">\n          Awesome Shirt!\n        </t-shirt-text>\n      </t-shirt>\n    `;\n  }\n}\n\n// Instantiate a blue colour\nconst blue = new Colour(0, 0, 255);\n// Instantiate a red colour\nconst red = new Colour(255, 0, 0);\n// Create a new shirt using the above colours\nconst awesomeShirt = new TShirt(blue, red);\n// Adding the generated markup of our shirt to our document\ndocument.body.innerHTML = awesomeShirt.getHtml();\n```", "```js\nclass Developer {\n  code() {\n    console.log(`${this.name} writes some code!`);\n  }\n}\n\nclass Fisher {\n  fish() {\n    console.log(`${this.name} catches a big fish!`);\n  }\n}\n\nclass FishingDeveloper {\n  constructor(name) {\n    this.name = name;\n    this.developerStuff = new Developer();\n    this.fisherStuff = new Fisher();\n  }\n\n  code() {\n    this.developerStuff.code.bind(this)();\n  }\n\n  fish() {\n    this.fisherStuff.fish.bind(this)();\n  }\n}\n\nvar bob = new FishingDeveloper('Bob');\nbob.code();\nbob.fish();\n```", "```js\n<body>\n<template id=\"template\">\n <h1>This is a template!</h1>\n</template>\n</body>\n```", "```js\nvar template = document.querySelector('#template');\nvar instance = document.importNode(template.content, true);\ndocument.body.appendChild(instance);\n```", "```js\n// Decorators allow us to separate declarative logic from our\n// component implementation logic.\n@Component({\n  selector: 'hello-world',\n  template: '<div>Hello {{name}}</div>'\n})\nclass HelloWorld {\n  constructor() {\n    this.name = 'World';\n  }\n}\n```", "```js\n// Using decorators we can declaratively define our component used\n// to write bold text\n@Component({\n  selector: 'shout-out',\n  template: '<strong>{{words}}</strong>'\n})\nclass ShoutOut {\n  @Input() words;\n}\n\n// This component will be our main application component that\n// makes use of the above shout-out component (composition)\n@Component({\n  selector: 'hello-world'\n  template: '<shout-out words=\"Hello, {{name}}!\"></shout-out>',\n  directives: [ShoutOut]\n})\nclass HelloWorld {\n  constructor() {\n    this.name = 'World';\n  }\n}\n```", "```js\nclass Fruit {\n  constructor(name) { this.name = name; }\n}\nconst apple = new Fruit('Apple');\n```", "```js\nfunction Fruit(name) { this.name = name; }\nvar apple = new Fruit('Apple');\n```", "```js\nimport SomeModule from './some-module.js';\nvar something = SomeModule.doSomething();\nexport default something;\n```", "```js\nconst header = '<header>\\n' +\n  '  <h1>' + title + '</h1>\\n' +\n  '</header>';\n```", "```js\nconst header = '\n  <header>\n    <h1>${title}</h1>\n  </header>\n`;\n```", "```js\nfunction logAccess(obj, prop, descriptor) {\n  const delegate = descriptor.value;\n  descriptor.value = function() {\n    console.log(`${prop} was called!`);\n    return delegate.apply(this, arguments);\n  };\n}\n\nclass MoneySafe {\n  @logAccess\n  openSafe() {\n    this.open = true;\n  }\n}\n\nconst safe = new MoneySafe();\nsafe.openSafe(); // openSafe was called!\n```", "```js\nfunction delay(time) {\n  return function(obj, prop, descriptor) {\n    const delegate = descriptor.value;\n    descriptor.value = function() {\n      const context = this;\n      const args = arguments;\n      return new Promise(function(success) {\n        setTimeout(function() {\n          success(delegate.apply(context, arguments));\n        }, time);\n      });\n    };\n  };\n}\n\nclass Doer {\n  @delay(1000)\n  doItLater() {\n    console.log('I did it!');\n  }\n}\n\nconst doer = new Doer();\ndoer.doItLater(); // I did it! (after 1 second)\n```", "```js\nclass TypeScriptClass {\n  constructor(@ParameterDecorator() param) {}\n}\n```", "```js\nnode -e \"console.log('Hello World');\" \n\n```", "```js\n    npm install -g jspm live-server\n\n    ```", "```js\n    npm install jspm --save-dev\n    jspm init \n\n    ```", "```js\n    <!doctype html>\n    <script src=\"img/system.js\"></script>\n    <script src=\"img/config.js\"></script>\n    <script>\n      System.import('main.js');\n    </script>\n    ```", "```js\n    jspm install jquery\n\n    ```", "```js\n    import $ from 'jquery';\n\n    class HelloWorld {\n      constructor() {\n        $(document.body).append('<h1>Hello World!</h1>');\n      }\n    }\n    const helloWorld = new HelloWorld();\n    ```", "```js\n    live-server\n\n    ```"]