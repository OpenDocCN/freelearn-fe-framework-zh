- en: Chapter 7. Making a Multiplayer Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。制作多人游戏
- en: Single player games are fun, and as we've already seen, there is a large variety
    of them you can make with JavaScript. However, having your game run in a web browser,
    there is a huge temptation to make it multiplayer. This is exactly what we will
    do in this chapter and what better example of a multiplayer game than an MMORPG!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 单人游戏是有趣的，正如我们已经看到的，你可以使用JavaScript制作各种不同类型的单人游戏。然而，让游戏在网络浏览器中运行，就会有一种很大的诱惑，让它成为多人游戏。这正是我们在本章中要做的，而且什么比一个MMORPG更好的多人游戏示例呢！
- en: 'We will take our small single-player RPG from [Chapter 5](ch05.html "Chapter 5. Putting
    Things into Perspective"), *Putting Things into Perspective*, and transform it
    into a brand new MMORPG: *World of Ar''PiGi*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们在[第5章](ch05.html "第5章。将事物置于透视之下")中的小型单人RPG，*将事物置于透视之下*，变成一个全新的MMORPG：*阿尔皮吉的世界*。
- en: However, first a word of warning—the technology we will use to implement the
    server-side of our game is PHP + MySQL. The reason for this is it's by far the
    most common technology around. If you have some sort of hosting, chances are it's
    supported out of the box.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，首先需要警告一下——我们将用来实现游戏服务器端的技术是PHP + MySQL。这么做的原因是它迄今为止是最常见的技术。如果你有某种类型的托管服务，很可能会直接支持它。
- en: 'There are many reasons why this is not necessarily the best solution. When
    writing a game where the server-side usage is not reduced to simply serving a
    static page, you have to think very carefully about scaling:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多原因说明这不一定是最佳解决方案。当编写一个游戏，其中服务器端的使用不仅仅是为了提供静态页面时，你必须仔细考虑扩展问题：
- en: How many users will be able to play simultaneously on your system?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少用户能够同时在你的系统上玩？
- en: What will you do when the number of players grows past this limit?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当玩家数量超过这个限制时，你将怎么办？
- en: How much are you ready to pay to make your server run?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你准备付多少费用来使你的服务器运行？
- en: What is the quality of service you want to provide to the player?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想向玩家提供什么样的服务质量？
- en: The answer to these questions should dictate what technology and infrastructure
    you will choose. It is not the purpose of this book to elaborate on this; the
    solution we will implement should scale up to a few tens of players without any
    problems, but the techniques you will learn here can be applied no matter what
    software solution or hosting you choose!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回答这些问题应该决定你将选择什么技术和基础架构。本书的目的不在于详细讨论这一点；我们将实现的解决方案应该可以扩展到几十名玩家而没有任何问题，但你所学到的技术可以应用于任何你选择的软件解决方案或托管服务！
- en: 'In this chapter, we will cover the following subjects:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Multiplayer game specification
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多人游戏规范
- en: Managing a player's account
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理玩家账户
- en: Synchronizing a player's state
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步玩家状态
- en: Managing the enemies' server-side
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理敌人的服务器端
- en: World of Ar'PiGi
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阿尔皮吉的世界
- en: 'The game we will create based on our previous RPG will have the following features:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将基于我们之前的RPG创造的游戏将具有以下特点：
- en: A player can create an account and log into the game with it
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个玩家可以创建一个账户，并用它登录游戏
- en: When they come back to the game, their avatar will reappear where it was when
    they left
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当他们回到游戏时，他们的化身将会重新出现在他们离开时的位置
- en: Each player can see all the other players that are playing at the same time
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个玩家都可以看到同时在线的所有其他玩家
- en: The name of the other players will appear above their avatar
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他玩家的名字将显示在他们的头像上方
- en: 'The state of the enemies is managed server side: if someone kills a monster,
    it will be dead for all the other players as well'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人的状态由服务器端管理：如果有人杀死一个怪物，那么对于所有其他玩家来说，它将会死亡
- en: This game will have some of the same limitations of the game it's based on.
    The monster won't fight back and won't move around.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏将具有与其基础游戏相同的一些限制。怪物不会反击，也不会四处移动。
- en: Managing the player's account
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理玩家账户
- en: 'Let''s start with the basics: let the player create an account and log into
    the game. To store information server side, we will use a database (MySQL). The
    table structure we will use is very simple as there is not much to store. The
    player''s account will be stored in a table we will creatively call `players`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基础知识开始：让玩家创建账户并登录游戏。为了在服务器端存储信息，我们将使用一个数据库（MySQL）。我们将使用的表结构非常简单，因为没有太多需要存储的东西。玩家的账户将存储在一个我们会有创意地称为`players`的表中。
- en: 'This table will have the following rows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表将具有以下行：
- en: 'NAME: This is a string holding the name of the player. It will be unique so
    that no two players can have the same name.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NAME: 这是一个包含玩家姓名的字符串。它将是唯一的，因此没有两个玩家可以拥有相同的名字。'
- en: 'PW: This is a string holding the player''s password. It is hashed (more on
    this in the next section, *Searching elements in the database*).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PW：这是一个字符串，保存着玩家的密码。它被哈希化了（关于这点，*在数据库中搜索元素* 中有更多内容）。
- en: 'X: This is a double that will hold the player''s x coordinate.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: X：这是一个双精度浮点数，将保存玩家的 x 坐标。
- en: 'Y: This is a double that will hold the player''s y coordinate.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y：这是一个双精度浮点数，将保存玩家的 y 坐标。
- en: 'DIR: This is an integer that we will use to store the direction the player
    is facing.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DIR：这是一个整数，我们将用来存储玩家面向的方向。
- en: 'STATE: This is an integer that holds the state of the player: standing, walking,
    or fighting.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STATE：这是一个整数，表示玩家的状态：站立、行走或战斗。
- en: 'LASTUPDATE: This is a time stamp that will hold the last time the server heard
    from the player.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LASTUPDATE：这是一个时间戳，记录了服务器最后一次收到玩家消息的时间。
- en: A SQL script is provided that creates all the tables you need for the game in
    the file `create_tables.sql`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个 SQL 脚本，该脚本在文件 `create_tables.sql` 中创建了游戏所需的所有表格。
- en: 'To create the user interface that allows creating an account or logging into
    the game, we will use a series of divs that will overlap the game screen. Only
    one of them will be visible at any time. The following figure shows the possible
    user interactions and the corresponding screens:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建允许创建账户或登录游戏的用户界面，我们将使用一系列会重叠游戏屏幕的`div`。任何时候只有一个会是可见的。以下图展示了可能的用户交互和相应的屏幕：
- en: '![Managing the player''s account](img/5060OT_07_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![管理玩家账户](img/5060OT_07_01.jpg)'
- en: 'Each of those screens will be a `div` holding a few input fields and/or buttons.
    For example, the screen that lets the player create an account would be:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些屏幕中的每一个都将是一个包含几个输入字段和/或按钮的`div`。例如，允许玩家创建账户的屏幕将是：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It will be styled with CSS and the interactive part will be written in jQuery.
    For this screen, the code is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它将用 CSS 进行样式化，交互部分将用 jQuery 编写。对于这个屏幕，代码如下：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The ID of the link used to connect the JavaScript code to the HTML code has
    been highlighted. Nothing too fancy, but it does the trick.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将 JavaScript 代码连接到 HTML 代码的链接的 ID 已经突出显示。没什么太复杂的，但是起到了作用。
- en: The interesting part has been intentionally left out of the preceding code,
    that is, the actual interaction with the server. All the interactions between
    our client (the game running into a browser) and the server will be done using
    JSON and the `$.getJSON` function that we talked about in the last chapter (this
    is a shorthand for `$.ajax`).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中故意略去了有趣的部分，即与服务器的实际交互。我们客户端（在浏览器中运行的游戏）与服务器之间的所有交互都将使用 JSON 和我们在上一章中提到的`$.getJSON`函数进行（这是`$.ajax`的简写）。
- en: To transmit information to the server, we will use the second argument of the
    `$.getJSON` function. To transmit information to the client, the server will generate
    a JSON file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将信息传输到服务器，我们将使用`$.getJSON`函数的第二个参数。为了向客户端传输信息，服务器将生成一个 JSON 文件。
- en: 'We will use the server-side file to create an account called `createUser.php`,
    so the `$.getJSON` call will look as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用服务器端文件来创建一个名为 `createUser.php` 的账户，因此`$.getJSON`调用将如下所示：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we've already mentioned, we submit the name and password the user chose by
    wrapping them in an object literal and pass it as the second argument to the function
    call. As already said, the third argument is a function that will handle the JSON
    file once the server returns it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，我们通过将用户选择的名称和密码包装在一个对象文字中，并将其作为第二个参数传递给函数调用来提交它们。正如已经提到的，第三个参数是一个函数，一旦服务器返回它，就会处理
    JSON 文件。
- en: Searching elements in the database
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在数据库中搜索元素
- en: For the first time, we will have to generate a JSON file. This one is pretty
    trivial; it should tell the client if the account creation was successful or not
    and if it is, the information about the player.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次，我们将不得不生成一个 JSON 文件。这个文件非常简单；它应该告诉客户端账户创建是否成功，如果成功，还有关于玩家的信息。
- en: We've chosen to write it as the following code snippet, but it's really up to
    you to create the JSON files in a way that makes the most sense to you. If you
    are not familiar with the exact syntax a JSON file should follow, have a quick
    read at [http://www.json.org/](http://www.json.org/).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择将其写成以下代码片段，但是如何创建 JSON 文件是完全由您决定的。如果您对 JSON 文件应该遵循的确切语法不熟悉，请快速阅读 [http://www.json.org/](http://www.json.org/)。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It''s quite easy to implement the function that will read this JSON file and
    react accordingly. We will launch the game if the operation is a success and display
    an error message if something went wrong. The following code does just that:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 实现函数以读取该 JSON 文件并相应地做出反应非常容易。如果操作成功，我们将启动游戏，并在出现问题时显示错误消息。以下代码就是这样做的：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is pretty simple as most of the complicated stuff is running on the server.
    Let''s see what has to be done there. First, we have to retrieve the parameters
    sent by the client. As we use `$.getJSON`, the request to the JSON file is a `GET`
    request. This means that we will use PHP''s `$_GET` super-global variable to access
    them. When passing sensible information to the server, you may want to use a `POST`
    request instead (though that alone won''t prevent someone motivated enough to
    still access the parameters). `$_GET` is a variable that holds all the parameters
    sent by the client, so in our case, we can write:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单，因为大部分复杂的工作都在服务器上运行。让我们看看在那里需要做什么。首先，我们必须检索客户端发送的参数。由于我们使用了`$.getJSON`，对
    JSON 文件的请求是一个`GET`请求。这意味着我们将使用 PHP 的`$_GET`超全局变量来访问它们。当向服务器传递敏感信息时，你可能希望使用`POST`请求代替（尽管仅靠这一点并不能阻止有动机的人仍然访问参数）。`$_GET`是一个保存客户端发送的所有参数的变量，因此在我们的情况下，我们可以写成：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will have stored the name and password the user chose into variables. Now
    we have to probe the database to check if a user with this name isn''t already
    defined. To run a SQL query in PHP, we will use mysqli ([http://php.net/manual/en/book.mysqli.php](http://php.net/manual/en/book.mysqli.php)):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把用户选择的名称和密码存储到变量中。现在我们必须查询数据库，检查是否已经定义了一个具有此名称的用户。要在 PHP 中运行 SQL 查询，我们将使用
    mysqli ([http://php.net/manual/en/book.mysqli.php](http://php.net/manual/en/book.mysqli.php))：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the preceding code is not to be used for production as we directly
    insert the parameters provided by the user into the database query and that creates
    a huge risk of SQL injection! The best practice would be to always escape all
    the strings before injecting them into SQL queries. A simple way would be to use
    `mysqli_escape` ([http://www.php.net/manual/en/mysqli.real-escape-string.php](http://www.php.net/manual/en/mysqli.real-escape-string.php)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述代码不应用于生产，因为我们直接将用户提供的参数插入到数据库查询中，这会带来巨大的 SQL 注入风险！最佳做法是在将它们注入到 SQL 查询之前始终转义所有字符串。一个简单的方法是使用`mysqli_escape`
    ([http://www.php.net/manual/en/mysqli.real-escape-string.php](http://www.php.net/manual/en/mysqli.real-escape-string.php))。
- en: We won't go into the detail of writing the SQL query. They are pretty easy to
    read and, for a basic query like this one, to write. If you want to learn more
    about SQL, you can search the Web or read one of the many books available on the
    subject.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细介绍编写 SQL 查询的细节。它们很容易阅读，并且对于像这样的基本查询来说，编写也很容易。如果你想了解更多关于 SQL 的知识，你可以搜索网络或阅读关于该主题的众多书籍之一。
- en: 'Once we have the result of the query, we need to check if the query returned
    an element to see if the name was already present in the DB. This is simply done
    with:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到了查询结果，我们需要检查查询是否返回了一个元素，以查看该名称是否已经存在于数据库中。这只需简单地执行：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, if `$obj` is zero, we can create the new account.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果`$obj`为零，我们可以创建新账户。
- en: Creating a new player in the database
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在数据库中创建一个新玩家
- en: Before looking at the query that will create the player in the database let's
    talk about passwords. You should never store raw passwords in the database because
    history has shown that databases get hacked quite often. The recommended solution
    is to hash the password before storing it. Then you can simply compare the hashed
    version of the submitted password with the one stored in the database.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看将在数据库中创建玩家的查询之前，让我们谈谈密码。你永远不应该在数据库中存储原始密码，因为历史表明数据库经常遭到黑客攻击。推荐的解决方案是在存储密码之前对其进行哈希处理。然后，你可以简单地将提交的密码的哈希版本与数据库中存储的密码进行比较。
- en: '![Creating a new player in the database](img/5060OT_07_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![在数据库中创建一个新玩家](img/5060OT_07_02.jpg)'
- en: That's what we will do here with PHP's `hash` function. Then we will simply
    insert the username and the hash into the database along with the starting position
    of the player.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将用 PHP 的`hash`函数来做的事情。然后我们将简单地将用户名和哈希值与玩家的起始位置一起插入到数据库中。
- en: 'As this is also a query, we use the exact same function we used to find out
    if an account already existed with this name:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这也是一个查询，我们使用了与之前用来查找账户是否已经存在这个名称相同的函数：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first argument that we passed to the `hash` function is highlighted in the
    preceding code. It's the hash method, and the `'md5'` that we used here is not
    recommended for production because it's considered too easy to break nowadays.
    If you want to find out more about what methods are available, have a look at
    the function documentation at [http://www.php.net/manual/en/function.hash.php](http://www.php.net/manual/en/function.hash.php).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给`hash`函数的第一个参数在前面的代码中被突出显示了。它是哈希方法，我们在这里使用的`'md5'`现在不推荐用于生产，因为它被认为现在太容易被破解。如果你想了解更多可用的方法，请查看[http://www.php.net/manual/en/function.hash.php](http://www.php.net/manual/en/function.hash.php)中的函数文档。
- en: Now we can generate the JSON that the client will receive. This is done by using
    PHP's `json_encode` function ([http://php.net/manual/en/function.json-encode.php](http://php.net/manual/en/function.json-encode.php)).
    This function takes an object and transforms it into a JSON-formatted string.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以生成客户端将接收的JSON了。这是通过使用PHP的`json_encode`函数完成的（[http://php.net/manual/en/function.json-encode.php](http://php.net/manual/en/function.json-encode.php)）。这个函数接受一个对象并将其转换为JSON格式的字符串。
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, just to give you a global picture of what the client file looks like.
    The complete code is reproduced as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了让你对客户端文件的整体情况有个全局了解，完整的代码如下所示：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, you can see that we are including a file called `dbconnect.php`, which
    allows us to write the database configuration only once in this file and use it
    from every file that needs to connect to it. This is the same basic function we
    will use for every other functionality we will implement server side.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到我们包含了一个名为`dbconnect.php`的文件，它允许我们在此文件中只写一次数据库配置，并从需要连接到它的每个文件中使用它。这是我们将用于实现服务器端的每个其他功能的同一个基本功能。
- en: Keeping the player connected
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持玩家连接
- en: There is, however, one thing in this implementation that we haven't explained
    yet. If you look at the highlighted code, you will see that the name of the user
    is stored into the session.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这个实现中有一件事情我们还没有解释。如果你看一下突出显示的代码，你会看到用户名被存储到了会话中。
- en: This will allow the server to continue knowing the name of the player without
    having to submit it with every following request. It will also allow us to permit
    the user to continue playing the game without having to give his/her username
    and password again if he/she comes back while the session is still valid.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许服务器继续知道玩家的姓名，而不必在每次后续请求中都提交它。它还将允许我们允许用户在会话仍然有效的情况下继续玩游戏，而无需再次提供他/她的用户名和密码。
- en: 'If you look at the user-interaction flow graph at the beginning of this chapter,
    you will see there is a screen that proposes to the user to continue playing.
    We will display it only if the server still has a valid session it can use for
    him/her. To check this, we will create another PHP file named `session.php` that
    looks as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下本章开头的用户交互流程图，你会看到有一个屏幕建议用户继续玩游戏。只有在服务器仍然有一个可用于他/她的有效会话时，我们才会显示它。为了检查这一点，我们将创建另一个名为`session.php`的PHP文件，它如下所示：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then we simply check if the `name` is present in the session. However, if it
    is, there is one more thing we need to do; that is, retrieve the player from the
    database. This will give us its last coordinate and check once more that the username
    and password really match.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们简单地检查`name`是否存在于会话中。但是，如果存在，我们还需要做一件事情；那就是从数据库中检索玩家。这将为我们提供其最后一个坐标，并再次检查用户名和密码是否确实匹配。
- en: We don't save the coordinate in the session itself because we want the player
    to be able to connect to the same account using many different machines or browsers
    (although not simultaneously).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不将坐标保存在会话本身中，因为我们希望玩家能够使用许多不同的机器或浏览器连接到同一个帐户（尽管不能同时进行）。
- en: 'Once a request has been executed by the database, we can use `mysql_result`
    to read the result. This function takes three arguments:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据库执行了一个请求，我们就可以使用`mysql_result`来读取结果。这个函数需要三个参数：
- en: The result of the query, generated by `mysql_query`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询的结果，由`mysql_query`生成。
- en: The index of the result we want to read. This is needed because a query can
    return more than one result (for example, if we search for all the accounts in
    the `players` table).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要读取的结果的索引。这是必要的，因为查询可能会返回多个结果（例如，如果我们在`players`表中搜索所有帐户）。
- en: The name of the field we want to read.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要读取的字段的名称。
- en: Once we have this information, we can send it to the client by formatting it
    into a JSON file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了这些信息，我们就可以通过将其格式化为JSON文件来将其发送给客户端。
- en: On the client side, we will call this function at the very beginning of the
    game to choose which screen to display (the continue screen or the login one).
    This is done as usual with a `$.getJSON` call.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们将在游戏开始时调用此函数以选择要显示的屏幕（继续屏幕或登录屏幕）。这与使用`$.getJSON`调用一样通常。
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is very similar to what we have done before.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们之前所做的非常相似。
- en: Logging the user into the game
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将用户登录游戏
- en: This is done in almost the exact same way we checked for an existing session.
    On the server side, we need to make a request to prove if the username and password
    match and get the player position.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与我们检查现有会话的方式相同。在服务器端，我们需要发出请求来证明用户名和密码是否匹配，并获取玩家位置。
- en: On the client side, we need to display a warning if the password was wrong and
    start the game if everything went well.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，如果密码错误，我们需要显示警告并开始游戏。
- en: 'The JSON we use for this is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用于此目的的JSON如下所示：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the username and password don't match, success will be false. Otherwise,
    the JSON will look as shown earlier. We won't show you the server and client-side
    code as they are very similar to what we have already seen.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户名和密码不匹配，则成功将为false。否则，JSON将如之前所示。我们不会向您显示服务器和客户端代码，因为它们与我们已经看到的非常相似。
- en: Keeping the players in sync
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持玩家同步
- en: 'With what we''ve seen until now, we can log into the game, but that''s about
    it; what we need now is a way to keep the server informed of the player''s movement
    and to give the client the position of all the other players. The following figure
    shows you how the client and the server will interact:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们到目前为止所看到的内容，我们可以登录游戏，但仅此而已；现在我们需要的是一种方法来让服务器了解玩家的移动并给客户端提供所有其他玩家的位置。以下图显示了客户端和服务器将如何交互：
- en: '![Keeping the players in sync](img/5060OT_07_03.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![保持玩家同步](img/5060OT_07_03.jpg)'
- en: We will do both these things in one JSON call. We will use it to pass to the
    server the player's current position as we did before for the username and password.
    In return, the server will generate a JSON file with the list of all the other
    players.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一个JSON调用中执行这两个操作。我们将使用它将玩家的当前位置传递给服务器，就像之前为用户名和密码做的那样。作为回报，服务器将生成一个JSON文件，其中包含所有其他玩家的列表。
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s first have a look at the server side. There we need to write two queries:
    the first one to retrieve the list of all players and the second one to update
    the state of the current player.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下服务器端。在那里，我们需要编写两个查询：第一个查询用于检索所有玩家的列表，第二个查询用于更新当前玩家的状态。
- en: Retrieving all the other players
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检索所有其他玩家
- en: 'This simply means finding all the entries in the `players` table except the
    one for the current player. There is, however, one thing we have to be careful
    about: we only want to display the players that are currently playing the game.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅意味着找到`players`表中除了当前玩家之外的所有条目。但是，有一件事情我们必须小心：我们只想显示当前正在玩游戏的玩家。
- en: As a lot of things can happen online, we cannot be sure that the player will
    be able to log out before being disconnected, so instead, we choose to use a time
    stamp. Each time that the player updates its position, we will set the time stamp
    to the current time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在线上可能发生很多事情，我们不能确定玩家是否能够在断开连接之前注销，因此，我们选择使用时间戳。每次玩家更新其位置时，我们将时间戳设置为当前时间。
- en: 'This way we can know which players are not online anymore by comparing this
    time stamp to the current time. We''ve arbitrarily decided that player will be
    considered offline if we haven''t heard from him/her in more than 10 minutes.
    The corresponding MySQL query would be:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较时间戳和当前时间，我们可以知道哪些玩家不再在线了。我们随意决定，如果我们已经超过10分钟没有收到他/她的消息，那么玩家将被视为离线。相应的MySQL查询如下：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we test if the name is not the same as the current player (`<>` means
    "not equal to" in SQL).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们测试名称是否与当前玩家不同（`<>`在SQL中表示"不等于"）。
- en: 'The code that reads the result and prints it to the server''s response is as
    follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 读取结果并将其打印到服务器响应的代码如下：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is very similar to when we retrieve just the current user from the database,
    so you should already be familiar with this code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这与仅从数据库中检索当前用户时非常相似，所以您应该已经熟悉了这段代码。
- en: Updating the current player position
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新当前玩家位置
- en: 'To update the entry in the database that holds the information about the player,
    we can use the following query:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新数据库中保存有关玩家信息的条目，我们可以使用以下查询：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As we don't expect any result from this query, we don't need to store it anywhere.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不期望从此查询中获得任何结果，所以不需要将其存储在任何地方。
- en: Client-side code
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端代码
- en: Now we need to write the code that will send the current player position to
    the server. This is not too complicated as it's just passing the parameters to
    the `$.getJSON` call. We will, however, need to encode the player direction and
    status to integers (as we decided to store them that way in the database).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写的代码将当前玩家位置发送到服务器。这并不太复杂，因为只需将参数传递给`$.getJSON`调用。但是，我们需要将玩家的方向和状态编码为整数（因为我们决定在数据库中以这种方式存储它们）。
- en: 'To do this, we will extend the player''s object with two new methods:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将扩展玩家对象，添加两个新方法：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we will simply call them when we call `getJSON`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在调用`getJSON`时简单地调用它们：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The callback function is probably the most complicated part of this whole chapter.
    Go through the returned list of all players. If a new player was created, we need
    to add him/her to the map. If a player moved, we need to update his/her position,
    and if a player quit the game, we need to remove him/her.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数可能是这整章中最复杂的部分。遍历返回的所有玩家列表。如果创建了新玩家，我们需要将他/她添加到地图中。如果玩家移动了，我们需要更新他/她的位置，如果玩家退出了游戏，我们需要将他/她移除。
- en: 'This is exactly what the following code does:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码确切地做到了这一点：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The first part is to either update the position or create the other players.
    The second part is to set the correct animation based on the player orientation
    and status.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分是要么更新位置，要么创建其他玩家。第二部分是根据玩家的方向和状态设置正确的动画。
- en: Then we go through the list of all players and if some of them weren't on the
    list of updated players, we remove them from the game.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们遍历所有玩家的列表，如果其中一些不在更新玩家列表中，我们就将它们从游戏中移除。
- en: Finally, we set a timeout for the function calling `$.getJSON` to be called
    again in 100 milliseconds. The frequency you choose will be a trade-off between
    server usage and game fluidity, so you probably will have to fine-tune this value
    to your game needs.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置一个函数调用`$.getJSON`的超时时间，以便在 100 毫秒后再次调用。你选择的频率将是服务器使用和游戏流畅性之间的折衷，所以你可能需要根据游戏需求微调这个值。
- en: Taking care of monsters
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 照顾怪物
- en: Now the game starts to get interesting. There is, however, one small thing missing.
    If one player kills a monster, it will only be dead for him and not for all the
    other players. This can be fine in some very special cases, but most of the time
    this is not what we want.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在游戏开始变得有趣了。然而，还有一件小事情缺失。如果一个玩家杀死了一个怪物，那么只有对他而言怪物才会死亡，而对其他所有玩家来说并非如此。在一些非常特殊的情况下，这可能没问题，但大多数情况下，这不是我们想要的。
- en: 'The solution is to implement the logic that takes care of the enemies and the
    fights server side. This means that we need another database table that will hold
    all of our enemies. This table will need to hold the following information:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是在服务器端实现处理敌人和战斗逻辑。这意味着我们需要另一个数据库表来存储所有的敌人。该表需要存储以下信息：
- en: The ID of the enemy, to identify it uniquely
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人的 ID，用于唯一标识它
- en: The type of the enemy—a skeleton, an ogre, and so on—to define how it will look
    to the player
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人的类型——骷髅、食人魔等——用于定义它在玩家眼中的外观
- en: The x and y coordinate of the enemy
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人的 x 和 y 坐标
- en: Its life to allow the player to kill it
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许玩家杀死它的生命值
- en: Its defense for the combat system
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的防御用于战斗系统
- en: Its spawn rate to determine when the monster should be spawned again once it
    has been killed
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的生成速率，用于确定怪物被击败后再次生成的时间
- en: Then, periodically, we will transmit to the clients the position and properties
    of those enemies. As we already have a page that is being pooled regularly to
    get the position of the other players, we can simply enhance it to return the
    state of the enemies too.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将周期性地向客户端传输这些敌人的位置和属性。由于我们已经有一个定期轮询以获取其他玩家位置的页面，我们可以简单地将其扩展为返回敌人的状态。
- en: 'This simply means that the JSON file will now look like this (with the new
    part highlighted):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 JSON 文件现在会像这样（其中突出显示了新部分）：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will need another query to find all the enemies still alive in the database:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要另一个查询来找出数据库中仍然存活的所有敌人：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The code that writes the JSON and parses it to create or update the enemies
    is exactly the same as the one for the other players, so we won't reproduce it
    here, but you can have a look at the full source if you want to.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 编写 JSON 并解析以创建或更新敌人的代码与处理其他玩家的代码完全相同，因此我们不会在此重复，但如果您想要查看完整的源代码，可以看一下。
- en: Implementing server-side combat
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施服务器端战斗
- en: To implement combat with those server-side enemies, we could still use the code
    we have client side and send the result to the server. This has some serious disadvantages,
    as it is very easy to cheat the system and modify the client to simply send the
    information that the enemy has been defeated without really doing the combat.
    Secondly, it makes dealing with combat between one enemy and many players very
    difficult.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用那些服务器端的敌人实现战斗，我们仍然可以使用我们在客户端拥有的代码，并将结果发送到服务器。这有一些严重的缺点，因为很容易欺骗系统并修改客户端，简单地发送敌人已被击败的信息而没有真正进行战斗。其次，它使得处理一个敌人和许多玩家之间的战斗变得非常困难。
- en: 'We will instead implement it server side, as it is shown in the following diagram:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改为在服务器端实现它，如下图所示：
- en: '![Implementing server-side combat](img/5060OT_07_04.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![实施服务器端战斗](img/5060OT_07_04.jpg)'
- en: 'The code that used to get executed client side was as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以前在客户端执行的代码如下所示：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will now simply have a JSON call:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需进行一个JSON调用：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, you can see that the JSON contains two flags to give information about
    the combat. The first is `hit`; it is true if the combat really happened. This
    is necessary because there is a chance that the enemy is already dead without
    the client knowing it. Then, `success` conveys the success of the attack and is
    `false` if the enemy successfully defended itself and `true` otherwise.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到JSON包含两个标志，用于提供有关战斗的信息。第一个是`hit`；如果战斗确实发生了，它就是真的。这是必要的，因为有可能敌人已经死了，而客户端并不知道。然后，`success`传达了攻击的成功，如果敌人成功防御了自己，则为`false`，否则为`true`。
- en: 'The complete logic of the combat will be implemented server side in the `fight.php`
    file, but is the exact replica of what used to happen client side:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 战斗的完整逻辑将在`fight.php`文件中在服务器端实现，但与以前在客户端发生的情况完全相同：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The highlighted part represents the code that was taken out of the client and
    put into the server. And that's all you really need for the combat to work.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的部分代表了从客户端拿出并放入服务器的代码。这就是战斗真正需要的一切。
- en: Once an enemy is dead, you may want to periodically respawn it. The most obvious
    way is to use a server-side script that gets executed at regular intervals through
    the use of a `cron` command. Alternatively, you could cheat and use any of the
    other files we created to respawn the enemies; for example, each time a player
    logs in.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦敌人死亡，您可能希望定期重新生成它。最明显的方法是使用服务器端脚本，通过`cron`命令定期执行。另外，您也可以使用我们创建的任何其他文件来重新生成敌人；例如，每次玩家登录时。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The game we've created here is by far the most complex we've written in this
    book so far. It could of course be enhanced a lot by adding PvP combat, a chat
    system, and so on, but this chapter has covered all the basics to allow you to
    implement those!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里创建的游戏迄今为止是本书中写过的最复杂的游戏。当然，通过添加PvP战斗，聊天系统等等，它当然可以得到很大的增强，但本章已经涵盖了所有基础知识，使您能够实现这些！
- en: However, calling a bunch of files asynchronously is not a very elegant solution,
    and if you target very recent browsers, you may want to take a look at the WebSocket
    API that allows you to establish and maintain a bi-directional communication channel
    between the browser and the server.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，异步调用一堆文件并不是一个非常优雅的解决方案，如果您针对最近的浏览器，您可能希望看一下WebSocket API，该API允许您在浏览器和服务器之间建立和维护双向通信通道。
- en: Another way to maintain a permanent connection to the server is by using long
    polling methods.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 保持与服务器的永久连接的另一种方法是使用长轮询方法。
- en: In the next chapter, we will modify our platformer to integrate with Facebook
    and Twitter as well as keep a list of high scores!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将修改我们的平台游戏，使其与Facebook和Twitter集成，并保持高分列表！
