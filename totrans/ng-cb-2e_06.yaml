- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Reactive State Management with NgRx
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NgRx 进行响应式状态管理
- en: Angular and **reactive programming** are best buddies, and handling an app’s
    state reactively is one of the best things you can do with your app. **NgRx**
    (short for **Angular Reactive Extensions**) is a framework that provides a set
    of libraries as reactive extensions for Angular. In this chapter, you’ll learn
    how to use the NgRx ecosystem to manage your app’s state reactively, and you’ll
    also learn about a couple of cool things the NgRx ecosystem will help you with.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 和 **reactive programming** 是最佳拍档，以响应式的方式处理应用程序的状态是你可以为你的应用程序做的最好的事情之一。**NgRx**（代表
    **Angular Reactive Extensions**）是一个提供一组库作为 Angular 的响应式扩展的框架。在本章中，你将学习如何使用 NgRx
    生态系统以响应式的方式管理你的应用程序状态，你还将了解 NgRx 生态系统将帮助你的一些酷功能。
- en: 'Here are the recipes we’re going to cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将在本章中涵盖的食谱：
- en: Creating your first NgRx store with actions and reducers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动作和还原器创建你的第一个 NgRx 存储
- en: Using NgRx Store Devtools to debug state changes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NgRx Store Devtools 调试状态变化
- en: Using NgRx selectors to select and render state in components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NgRx 选择器在组件中选择和渲染状态
- en: Using NgRx effects to fetch data from API calls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NgRx 效果从 API 调用中获取数据
- en: Using NgRx Component Store to manage the state of a component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NgRx 组件存储来管理组件的状态
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter06](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter06).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的食谱，请确保你的设置已按照 'Angular-Cookbook-2E' GitHub 仓库中的 'Technical Requirements'
    完成设置。有关设置详细信息，请访问：[https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md)。本章的入门代码位于
    [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter06](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter06)。
- en: Creating your first NgRx store with actions and reducers
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动作和还原器创建你的第一个 NgRx 存储
- en: In this recipe, you’ll work your way through understanding NgRx’s basics by
    setting up your first NgRx store. You’ll also create some actions, along with
    a reducer, and to see the changes in the reducer, we’ll be putting in appropriate
    console logs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你将通过设置你的第一个 NgRx 存储，逐步了解 NgRx 的基础知识。你还将创建一些动作，以及一个还原器，为了看到还原器中的变化，我们将添加适当的控制台日志。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-actions-reducer`
    inside the cloned repository:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的 `start/apps/chapter06/ngrx-actions-reducer` 目录内：
- en: Open the code repository in your code editor.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should open the app in a new browser tab. If you add a couple of items,
    you should see the following:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用程序。如果你添加了一些项目，你应该会看到以下内容：
- en: '![](img/B18469_06_01.png)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_06_01.png)'
- en: 'Figure 6.1: ngrx-actions-reducers app running on http://localhost:4200'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.1：在 http://localhost:4200 上运行的 ngrx-actions-reducers 应用程序
- en: Now that we have the app running, we’ll move on to the steps for the recipe.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了应用程序，我们将继续进行食谱的步骤。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We have an Angular application with a single page containing a bucket. You
    can add fruits to your bucket and remove items from the bucket. We already have
    the `@ngrx/store` package installed in the workspace, so you don’t have to install
    it. However, when you work on a standalone app (or on some of your own projects),
    you would start by adding NgRx and running the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含一个桶的单页 Angular 应用程序。你可以向你的桶中添加水果，并从桶中移除项目。我们已经在工作区中安装了 `@ngrx/store`
    包，所以你不需要安装它。然而，当你独立工作（或在你的一些自己的项目中）时，你将首先添加 NgRx 并运行以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `app.config.ts` file to provide the NgRx store as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `app.config.ts` 文件以提供 NgRx 存储，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that we’ve passed an empty object `{}` to the `provideStore()` method;
    we’ll change that going forward.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已经将一个空对象 `{}` 传递给 `provideStore()` 方法；我们将从现在开始更改它。
- en: 'Now, we’ll create some actions. Create a folder named `store` inside the `app`
    folder. Then, create a file named `bucket.actions.ts` inside the `store` folder,
    and finally, add the following code to the newly created file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一些动作。在`app`文件夹内创建一个名为`store`的文件夹。然后，在`store`文件夹内创建一个名为`bucket.actions.ts`的文件，最后，将以下代码添加到新创建的文件中：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since we have the actions in place now, we must create a reducer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在有了动作，我们必须创建一个reducer。
- en: 'Create a new file inside the `store` folder, name it `bucket.reducer.ts`, and
    add the following code to it to define the necessary imports and the initial state:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`store`文件夹内创建一个新文件，命名为`bucket.reducer.ts`，并将以下代码添加到其中以定义必要的导入和初始状态：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we’ll define the reducer. Add the following code to the `bucket.reducer.ts`
    file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义reducer。将以下代码添加到`bucket.reducer.ts`文件中：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we’ll update the `app.config.ts` file to use the reducer we just created.
    Update the file as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新`app.config.ts`文件以使用我们刚刚创建的reducer。按照以下方式更新文件：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we will use the actions we created to see the console logs from the reducer
    functions. Update the `bucket.component.ts` file to first use the NgRx store as
    follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用我们创建的动作来查看reducer函数的控制台日志。按照以下方式更新`bucket.component.ts`文件，首先使用NgRx存储库如下：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s dispatch actions to the store for when we’re adding fruits to and removing
    fruits from the bucket. We’ll also modify the code a bit to avoid repetition.
    Update the `bucket.component.ts` file as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们派发动作到存储库，以便我们在桶中添加水果和移除水果。我们还将稍微修改一下代码以避免重复。按照以下方式更新`bucket.component.ts`文件：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now if you add or remove items from the bucket, you’re going to see the logs
    on the console, as follows in *Figure 6.2*, which means our actions and reducer
    are working:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果您向桶中添加或移除项目，您将在控制台看到日志，如下所示在*图6.2*中，这意味着我们的操作和reducer正在工作：
- en: '![](img/B18469_06_02.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18469_06_02.png)'
- en: 'Figure 6.2: Logs showing the actions for adding and removing items from a bucket'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：显示从桶中添加和移除项目动作的日志
- en: And that covers it all for this recipe! You are now able to integrate an NgRx
    store into an Angular app, create NgRx actions, and dispatch those actions. You’re
    also able to create a reducer, define its state, and listen to actions to act
    on them.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了这个食谱的所有内容！您现在能够将NgRx存储库集成到Angular应用程序中，创建NgRx动作，并派发这些动作。您还能够创建一个reducer，定义其状态，并监听动作以对其做出反应。
- en: See also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: NgRx store walkthrough tutorial ([https://ngrx.io/guide/store/walkthrough](https://ngrx.io/guide/store/walkthrough))
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx存储库浏览教程([https://ngrx.io/guide/store/walkthrough](https://ngrx.io/guide/store/walkthrough))
- en: NgRx reducers documentation ([https://ngrx.io/guide/store/reducers](https://ngrx.io/guide/store/reducers))
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx reducers 文档([https://ngrx.io/guide/store/reducers](https://ngrx.io/guide/store/reducers))
- en: NgRx actions documentation ([https://ngrx.io/guide/store/actions](https://ngrx.io/guide/store/actions))
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx actions 文档([https://ngrx.io/guide/store/actions](https://ngrx.io/guide/store/actions))
- en: Using NgRx Store Devtools to debug state changes
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NgRx Store Devtools调试状态变化
- en: In this recipe, you’ll learn how to use `@ngrx/store-devtools` to debug your
    app’s state, the dispatched actions, and the difference in the state when the
    actions are dispatched. We’ll be using an existing app we’re familiar with to
    learn about the process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，您将学习如何使用`@ngrx/store-devtools`来调试应用程序的状态、派发的动作以及动作派发时状态的变化。我们将使用我们熟悉的现有应用程序来了解这个过程。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-devtools`
    inside the cloned repository:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用程序位于克隆的仓库中的`start/apps/chapter06/ngrx-devtools`：
- en: Open the code repository in your code editor.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以启动项目：
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should open the app in a new browser tab. If you add a couple of items,
    you should see the following:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用程序。如果您添加了一些项目，您应该会看到以下内容：
- en: '![](img/B18469_06_03.png)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_06_03.png)'
- en: 'Figure 6.3: Using the ngrx-devtools app running on http://localhost:4200'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.3：使用运行在http://localhost:4200的ngrx-devtools应用
- en: Now that we have the app set up, let’s see the steps of the recipe in the next
    section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了应用程序，让我们在下一节中查看食谱的步骤。
- en: How to do it…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We have an Angular app that already has the `@ngrx/store` package integrated.
    We also have a reducer set up and some actions in place that are logged on the
    console as soon as you add or remove an item. We already have the `@ngrx/store-devtools`
    package installed in the workspace, so you don’t have to install it. However,
    when you work on a standalone app (or on some of your own projects), you would
    start by adding NgRx store `devtools` and running the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个已经集成了`@ngrx/store`包的Angular应用程序。我们还有一个设置好的reducer和一些动作，这些动作会在你添加或移除项目时立即在控制台记录。我们已经在工作区中安装了`@ngrx/store-devtools`包，所以你不需要安装它。然而，当你独立工作（或在你的一些自己的项目中）时，你会从添加NgRx存储`devtools`并运行以下命令开始：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'First, update your `app.config.ts` file to include a `StoreDevtoolsModule.instrument`
    entry, as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，更新您的`app.config.ts`文件以包含`StoreDevtoolsModule.instrument`条目，如下所示：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: And now download the **Redux DevTools** extension from [https://github.com/zalmoxisus/redux-devtools-extension/](https://github.com/zalmoxisus/redux-devtools-extension/)
    for your browser and install it. I’ll be consistently using the Chrome browser
    in this book.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从[https://github.com/zalmoxisus/redux-devtools-extension/](https://github.com/zalmoxisus/redux-devtools-extension/)下载**Redux
    DevTools**扩展程序到您的浏览器中并安装它。在这本书中，我会持续使用Chrome浏览器。
- en: Open **Chrome DevTools**. There should be a new tab named **Redux**. Tap it
    and refresh the page. You’ll see something like this:![](img/B18469_06_04.png)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Chrome DevTools**。应该有一个名为**Redux**的新标签页。点击它并刷新页面。你会看到如下内容：![](img/B18469_06_04.png)
- en: 'Figure 6.4: Redux DevTools showing the initial Redux action dispatched'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.4：Redux DevTools显示最初派发的Redux动作
- en: Remove all the fruits, add two cherries and a banana to the bucket, and then
    remove the banana from the bucket. You should see all the relevant actions being
    dispatched along with the state as follows:![](img/B18469_06_05.png)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除所有水果，往桶里加两个樱桃和一个香蕉，然后从桶里移除香蕉。你应该会看到所有相关的动作和状态如下所示：![](img/B18469_06_05.png)
- en: 'Figure 6.5: Redux DevTools showing bucket actions and state'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.5：Redux DevTools显示桶动作和状态
- en: Great! You’ve just learned how to use the Redux DevTools extension to see your
    NgRx state and the actions being dispatched.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你刚刚学会了如何使用Redux DevTools扩展来查看你的NgRx状态和正在派发的动作。
- en: How it works…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: It is important to understand that NgRx is a combination of Angular and RxJS,
    resulting in different patterns being implemented including Redux. By using the
    Store Devtools package and the Redux DevTools extension, we’re able to debug the
    app easily, which helps us find potential bugs, predict state changes, and be
    more transparent about what’s happening behind the scenes in the `@ngrx/store`
    package.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解NgRx是Angular和RxJS的结合，从而实现了包括Redux在内的不同模式的实现。通过使用Store Devtools包和Redux
    DevTools扩展，我们能够轻松地调试应用程序，这有助于我们找到潜在的bug，预测状态变化，并在`@ngrx/store`包的幕后发生的事情上更加透明。
- en: There’s more…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also see the difference that an action caused within an app’s state,
    i.e., when we add an item to the bucket and we remove an item from the bucket.
    See *Figure 6.6* and *Figure 6.7* for each case respectively:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到动作在应用程序状态中引起的差异，即当我们向桶中添加一个项目并从桶中移除一个项目时。分别参见*图6.6*和*图6.7*：
- en: '![](img/B18469_06_06.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18469_06_06.png)'
- en: 'Figure 6.6: Add Fruit action in Redux Devtools'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：Redux Devtools中的添加水果动作
- en: 'Notice the green background around the bucket item in *Figure 6.6*. This represents
    an addition to the state. You can see the `ReemoveFruit` action in the following
    image:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意*图6.6*中桶项目周围的绿色背景。这表示状态中的添加。你可以在以下图片中看到`ReemoveFruit`动作：
- en: '![](img/B18469_06_07.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18469_06_07.png)'
- en: 'Figure 6.7: Remove Fruit action in Redux Devtools'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：Redux Devtools中的移除水果动作
- en: Now notice the red background and a strikethrough of the `Diff`. This represents
    removal from the state.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在注意红色背景和`Diff`的删除线。这表示从状态中移除。
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: NgRx Store Devtools documentation ([https://ngrx.io/guide/store-devtools](https://ngrx.io/guide/store-devtools))
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx Store Devtools文档([https://ngrx.io/guide/store-devtools](https://ngrx.io/guide/store-devtools))
- en: Using NgRx selectors to select and render state in components
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NgRx选择器在组件中选择和渲染状态
- en: In the previous recipes, we created some actions, a single reducer, and we integrated
    devtools to observe the state changes. However, our bucket application still renders
    the data using some variables in `BucketService`. In this recipe, we’re going
    all in with NgRx. We’re going to render the bucket items from the state as we
    already are saving them in the NgRx store.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们创建了一些动作，一个单独的reducer，并且我们集成了devtools来观察状态变化。然而，我们的bucket应用仍然使用`BucketService`中的某些变量来渲染数据。在这个菜谱中，我们将全力以赴使用NgRx。我们将从状态中渲染bucket项目，因为我们已经将它们保存在NgRx存储中。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-selectors`
    inside the cloned repository:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用位于克隆的仓库中的`start/apps/chapter06/ngrx-selectors`：
- en: Open the code repository in your code editor.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以运行项目：
- en: '[PRE12]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会在新浏览器标签页中打开应用，你应该会看到以下内容：
- en: '![](img/B18469_06_08.png)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_06_08.png)'
- en: 'Figure 6.8: Using the ngrx-selectors app running on http://localhost:4200'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.8：使用运行在http://localhost:4200的ngrx-selectors应用
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地运行了应用，让我们在下一节中查看菜谱的步骤。
- en: How to do it…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: All we must do in this recipe is to work with NgRx selectors. The store, actions,
    and the reducer have already been set up. *Easy peasy*! Let’s get started!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们只需要处理NgRx选择器。存储、动作和reducer已经设置好了。*简单易懂*！让我们开始吧！
- en: 'We’ll first show the fruits in our bucket on the **Home** page and, to do that,
    we must create our first NgRx selector:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将在**主页**上显示我们的bucket中的水果，为此，我们必须创建我们的第一个NgRx选择器：
- en: 'Create a new file inside the `store` folder. Name it `bucket.selectors.ts`
    and add the following code to it:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`store`文件夹内创建一个新文件。命名为`bucket.selectors.ts`并将以下代码添加到其中：
- en: '[PRE13]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that we have the selector in place, let’s use it in the `BucketComponent`
    class.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经有了选择器，让我们在`BucketComponent`类中使用它。
- en: 'Modify the `bucket.component.ts` file as follows to reassign the `$bucket`
    observable:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改`bucket.component.ts`文件以重新分配`$bucket`可观察对象：
- en: '[PRE14]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Refresh the app and try adding and removing items from the bucket. You can see
    that we still get the bucket items rendered. This time, it is from the NgRx store.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 刷新应用并尝试向bucket中添加和移除项目。你可以看到我们仍然得到了渲染的bucket项目。这次，它来自NgRx存储。
- en: 'Now we can remove the extra code that was managing the state from `BucketServic`e.
    Update the `BucketComponent` class in the `bucket.component.ts` file as follows:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以移除从`BucketService`管理状态的额外代码。按照以下方式更新`bucket.component.ts`文件中的`BucketComponent`类：
- en: '[PRE15]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once you’ve removed the code, make sure to remove unused dependencies (imports)
    from the file as well. Try the app and you’ll see it still works. *Yay!*
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦你移除了代码，确保也从文件中移除未使用的依赖（导入）。尝试运行应用，你会发现它仍然可以工作。*太好了！*
- en: 'Now we can update the `bucket.service.ts` file to not keep the bucket items
    in `BehaviorSubject`. Update the file as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以更新`bucket.service.ts`文件，使其不再将bucket项目保存在`BehaviorSubject`中。按照以下方式更新文件：
- en: '[PRE16]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that we’ve removed the `addItem` and `removeItem` functions and added
    the `saveItems` method.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们已经移除了`addItem`和`removeItem`函数，并添加了`saveItems`方法。
- en: 'You will see that TypeScript is angry. That’s because `BucketService` doesn’t
    implement the `IBucketService` interface anymore. Update the `bucket-service.ts`
    file to update the interface as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到TypeScript很生气。这是因为`BucketService`不再实现`IBucketService`接口了。更新`bucket-service.ts`文件以更新接口如下：
- en: '[PRE17]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And that’s it! You’ve finished the recipe. You will notice that as soon as we
    refresh the app, we lose the bucket items. But fear not – we’ll bring them back
    in the next recipe.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你已经完成了菜谱。你会注意到，一旦我们刷新应用，我们就失去了bucket项目。但别担心——我们将在下一个菜谱中把它们带回来。
- en: How it works…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we already had actions and selectors set up. However, we were
    only dispatching actions to the store to add/remove items. The components were
    still using the `BucketService` and the Observable from it to manage the state
    and to render the items. Since we only wanted to work with NgRx for the entire
    process, we introduced a selector in our application to select the bucket items.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们已经设置了动作和选择器。然而，我们只是将动作分发给存储以添加/移除项目。组件仍然使用 `BucketService` 和从它生成的 Observable
    来管理状态并渲染项目。由于我们只想在整个过程中使用 NgRx，我们在应用中引入了一个选择器来选择桶中的项目。
- en: Notice that we use the `createFeatureSelector` method from `@ngrx/store` package.
    This allows us to select a feature from the application. For example, your application
    can have features like profile, users, events, and settings. And ideally, we create
    feature selectors to extract only the target feature’s data instead of the whole
    NgRx state object.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们使用了来自 `@ngrx/store` 包的 `createFeatureSelector` 方法。这允许我们从应用中选择一个功能。例如，你的应用可以有配置文件、用户、事件和设置等功能。理想情况下，我们创建功能选择器来提取目标功能的唯一数据，而不是整个
    NgRx 状态对象。
- en: Then we replace the `$bucket` property in our `BucketComponent` class using
    the selector `selectBucket()` we just created. Notice that the selector returns
    a `Readonly` array. This ensures we are not mutating the actual data and that
    is is read-only. Finally, we remove the unnecessary functions from the `BucketService`
    class and remove the usage of those functions from the `BucketComponent` class
    as well.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用我们刚刚创建的选择器 `selectBucket()` 替换 `BucketComponent` 类中的 `$bucket` 属性。注意，选择器返回一个
    `Readonly` 数组。这确保了我们不会修改实际数据，并且它是只读的。最后，我们从 `BucketService` 类中移除不必要的函数，并从 `BucketComponent`
    类中移除对这些函数的使用。
- en: If you look at the app holistically now, we can add and remove items to the
    bucket using NgRx and can use selectors to render the items in the UI. However,
    as soon as you refresh the app, it all goes away since the data is not persistent;
    even though we have the functions to get and save items using `LocalStorage`.
    The ideal way of handling this would be to use NgRx effects. However, you are
    going to learn them in the next recipe. You can challenge yourself to come back
    to this recipe again to implement an effect that saves the updated bucket list
    to storage.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在从整体上审视这个应用，我们可以使用 NgRx 来向桶中添加和移除项目，并且可以使用选择器在 UI 中渲染这些项目。然而，一旦你刷新应用，所有内容都会消失，因为数据不是持久的；尽管我们有使用
    `LocalStorage` 获取和保存项目的函数。处理这种情况的理想方式是使用 NgRx 效果。然而，你将在下一个菜谱中学习它们。你可以挑战自己再次回到这个菜谱，实现一个将更新后的桶列表保存到存储中的效果。
- en: See also
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: NgRx selectors documentation ([https://ngrx.io/guide/store/selectors](https://ngrx.io/guide/store/selectors))
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx 选择器文档 ([https://ngrx.io/guide/store/selectors](https://ngrx.io/guide/store/selectors))
- en: Using NgRx effects to fetch data from API calls
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NgRx 效果从 API 调用中获取数据
- en: In this recipe, you’ll learn how to use NgRx effects using the `@ngrx/effects`
    package. We have an app that already has `@ngrx/store` and `@ngrx/store-devtools`
    installed. And we are able to add and remove items from the bucket. However, in
    this recipe, we’ll use a server to receive, store, add, and remove items from
    a bucket, i.e., the data will live in the NgRx store as well as on the backend.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何使用 `@ngrx/effects` 包中的 NgRx 效果。我们有一个已经安装了 `@ngrx/store` 和 `@ngrx/store-devtools`
    的应用。我们能够向桶中添加和移除项目。然而，在这个菜谱中，我们将使用服务器来接收、存储、添加和移除桶中的项目，即数据将同时存在于 NgRx 存储和后端。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-effects`
    inside the cloned repository:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用位于克隆的仓库中的 `start/apps/chapter06/ngrx-effects` 目录内：
- en: Open the code repository in your code editor.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project with the backend app:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以使用后端应用提供项目服务：
- en: '[PRE18]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该在新的浏览器标签页中打开应用，你应该看到以下内容：
- en: '![](img/B18469_06_09.png)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_06_09.png)'
- en: 'Figure 6.9: ngrx-effects app running on http://localhost:4200'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.9：在 http://localhost:4200 上运行的 ngrx-effects 应用
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地上运行了应用，让我们在下一节中查看菜谱的步骤。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We have an Angular application having a single page containing a bucket. You
    can add fruits to your buckets and remove items from the bucket. We already have
    the `@ngrx/store`, `@ngrx/store-devtools`, and `@ngrx/effects` packages installed
    in the workspace, so you don’t have to install them. However, when you work on
    a standalone app (or on some of your own projects), you could add NgRx effects
    by running the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含bucket的单页Angular应用。你可以向bucket中添加水果，并从bucket中移除项目。我们已经在工作区中安装了 `@ngrx/store`、`@ngrx/store-devtools`
    和 `@ngrx/effects` 包，所以你不需要安装它们。然而，当你在一个独立的应用（或你的一些自己的项目中）工作时，你可以通过运行以下命令来添加NgRx
    effects：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now let’s follow these steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下步骤进行：
- en: 'We’ll update the `bucket.actions.ts` file to add some actions including the
    API call. Update the file as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将更新 `bucket.actions.ts` 文件，添加一些包括API调用的动作。按照以下方式更新文件：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a file in the `store` folder named `bucket.effects.ts` and add the following
    code to it:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `store` 文件夹中创建一个名为 `bucket.effects.ts` 的文件，并将以下代码添加到其中：
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we can provide the effects with the `BucketEffects` class in the `app.config.ts`
    file as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在 `app.config.ts` 文件中通过 `BucketEffects` 类提供效果，如下所示：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We’ll now update the `bucket.reducer.ts` file to add or remove items from the
    state on the success events of the HTTP calls. Also, to set the bucket items retrieved
    from the server on app start. Update the file as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将更新 `bucket.reducer.ts` 文件，在HTTP调用成功事件中添加或移除项目，并在应用启动时设置从服务器检索的bucket项目。按照以下方式更新文件：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We’ll now dispatch the `getBucket` action from `bucket.componen.ts` when the
    component is mounted. Update `bucket.component.ts` as follows:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当组件挂载时，我们将从 `bucket.componen.ts` 中分发 `getBucket` 动作。按照以下方式更新 `bucket.component.ts`：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that we have linked everything, refresh the app and you’ll see the bucket
    items from the server in the app. You can see the actions in Redux Devtools as
    follows:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经链接了一切，刷新应用，你将看到来自服务器的bucket项目。你可以在Redux Devtools中看到以下动作：
- en: '![](img/B18469_06_10.png)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_06_10.png)'
- en: 'Figure 6.10: Getting the bucket from the server using NgRx effects'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.10：使用NgRx effects从服务器获取bucket
- en: You should also be able to see the network call (see *Figure 6.10*) that occurred
    due to the `[Bucket] Get Bucket` action in *Figure 6.9*.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也应该能够看到由于图6.9中的 `[Bucket] Get Bucket` 动作而发生的网络调用（见图6.10）。
- en: '![](img/B18469_06_11.png)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_06_11.png)'
- en: 'Figure 6.11: @ngrx/effects initiating network calls'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.11：@ngrx/effects初始化网络调用
- en: If you try to add or remove items, you’ll see that they don’t work. That’s because
    we changed our reducer to act when there’s an `addFruitSuccess` or `removeFruitSuccess`
    event in *step 4*.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你尝试添加或移除项目，你会看到它们不起作用。这是因为我们在第4步中更改了我们的reducer，使其在出现 `addFruitSuccess` 或 `removeFruitSuccess`
    事件时采取行动。
- en: 'Now we will add the effect for `addFruit` in `bucket.effects.ts`. Update the
    file as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在 `bucket.effects.ts` 中添加 `addFruit` 的效果。按照以下方式更新文件：
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let’s add the effect for `removeFruit` as well, in `bucket.effects.ts`. Update
    the file as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 `bucket.effects.ts` 中也添加 `removeFruit` 的效果。按照以下方式更新文件：
- en: '[PRE26]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you refresh the app now, add an apple, and remove it, you should see the
    state in Redux Devtools, as shown in the following figure:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你现在刷新应用，添加一个苹果，然后移除它，你应该能在 Redux Devtools 中看到状态，如图所示：
- en: '![](img/B18469_06_12.png)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_06_12.png)'
- en: 'Figure 6.12: NgRx effects getting a bucket and adding and removing items'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.12：NgRx effects获取bucket并添加和移除项目
- en: Notice in *Figure 6.11* that the state shows 4 items, shown in the UI. Also,
    notice the sequence of the actions dispatched. Every API/HTTP action results in
    the following `Success` action in this case.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意图6.11中的状态显示了4个项目，这在UI中显示。同时，注意动作分发的顺序。在这种情况下，每个API/HTTP动作都会导致以下 `Success`
    动作。
- en: Great! You now know how to use NgRx effects in your Angular apps. See the next
    section to understand how NgRx effects work.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你现在知道如何在Angular应用中使用NgRx effects了。查看下一节以了解NgRx effects是如何工作的。
- en: How it works…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In order for the NgRx effects to work, we needed to install the `@ngrx/effects`
    package, create an effect, and register it in an array of effects (root effects)
    in the `main.ts` file. An NgRx effect is essentially something that listens to
    an action, does something (we call this something a side-effect), and then returns
    an action as a result. When an action is dispatched to the store from any component
    or even from another effect, the registered effect does the job you want it to
    do and is supposed to dispatch another action in return. For HTTP calls, we usually
    have three actions—that is, the main action, and the following success and failure
    actions. Ideally, on the success action (and perhaps on the failure action too),
    you would want to update some of your state variables. In *step 4*, inside the
    `BucketEffects` class, you’ll notice that we inject the `Action` service from
    NgRx and `BucketService`. Then we use the `createEffect` function to create the
    effect. The effect itself listens to the `Action` stream for a particular event
    using the `ofType` operator. We then use the `exhaustMap` operator to perform
    the HTTP call, which returns an observable. Finally, we use the `map` operator
    to return the success action and the `catchError` operator to return the failure
    action.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 NgRx 效果正常工作，我们需要安装 `@ngrx/effects` 包，创建一个效果，并在 `main.ts` 文件中的效果数组（根效果）中注册它。NgRx
    效果本质上是一种监听动作、执行某些操作（我们称这种操作为副作用），然后返回一个动作的东西。当从任何组件或甚至从另一个效果向存储发送动作时，注册的效果会执行你想要它执行的任务，并应该返回另一个动作。对于
    HTTP 调用，我们通常有三个动作——即主要动作，以及随后的成功和失败动作。理想情况下，在成功动作（也许在失败动作上也是如此），你可能会想要更新一些你的状态变量。在
    *步骤 4* 中，在 `BucketEffects` 类内部，你会注意到我们注入了 NgRx 的 `Action` 服务和 `BucketService`。然后我们使用
    `createEffect` 函数创建效果。效果本身使用 `ofType` 操作符监听特定事件的 `Action` 流。然后我们使用 `exhaustMap`
    操作符执行 HTTP 调用，它返回一个可观察对象。最后，我们使用 `map` 操作符返回成功动作，并使用 `catchError` 操作符返回失败动作。
- en: See also
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: NgRx effects documentation ([https://ngrx.io/guide/effects](https://ngrx.io/guide/effects))
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx 效果文档 ([https://ngrx.io/guide/effects](https://ngrx.io/guide/effects))
- en: Using NgRx Component Store to manage the state of a component
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NgRx Component Store 管理组件的状态
- en: In this recipe, you’ll learn how to use the **NgRx Component Store** and how
    to use it instead of the push-based `Subject/BehaviorSubject` pattern with services
    for maintaining a component’s state. We’ll also see how this can facilitate cross-component
    communication using the **Component Store**.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你将学习如何使用 **NgRx Component Store** 以及如何用它来代替基于推送的 `Subject/BehaviorSubject`
    模式和用于维护组件状态的服务。我们还将看到如何使用 **Component Store** 促进跨组件通信。
- en: Remember that `@ngrx/component-store` is a standalone library and doesn’t correlate
    with Redux or `@ngrx/store`, and so on.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 `@ngrx/component-store` 是一个独立的库，并且与 Redux 或 `@ngrx/store` 等不相关。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-component-store`
    inside the cloned repository:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的应用位于克隆的仓库中的 `start/apps/chapter06/ngrx-component-store`：
- en: Open the code repository in your code editor.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开代码仓库。
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project with the backend app:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，导航到代码仓库目录，并运行以下命令以使用后端应用提供项目：
- en: '[PRE27]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This should open the app in a new browser tab, and you should see the following:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该会在新浏览器标签页中打开应用，你应该会看到以下内容：
- en: '![](img/B18469_06_13.png)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18469_06_13.png)'
- en: 'Figure 6.13: ngrx-component-store app running on http://localhost:4200'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.13：在 http://localhost:4200 上运行的 ngrx-component-store 应用
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在本地上运行了应用，让我们在下一节中查看食谱的步骤。
- en: How to do it…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We have our favorite bucket app that we’ve used in a lot of recipes so far.
    The state of the bucket right now is stored in the component itself. This limits
    the state to being just in the component and we can’t use the bucket’s length
    in the top header. One way could be using `BehaviorSubject` for this. But we’d
    rather use NgRx Component Store. We already have `@ngrx/component-store` package
    installed in the monorepository. But if you’re working on a new project, you would
    install the package as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有我们最喜欢的桶应用，我们已经在很多食谱中使用过。桶的当前状态存储在组件本身中。这限制了状态仅限于组件内部，我们无法在顶部标题中使用桶的长度。一种方法可能是使用
    `BehaviorSubject`。但我们会更愿意使用 NgRx Component Store。我们已经在单仓库中安装了 `@ngrx/component-store`
    包。但如果你正在开发一个新项目，你将按照以下方式安装包：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We’re going to build our component store in `BucketService`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `BucketService` 中构建我们的组件存储。
- en: 'Let’s make it compatible with `ComponentStore`. In order to do that, we’ll
    create an interface for the bucket state, extend `BucketService` from `ComponentStore`,
    and initialize the service by calling the `super` method. Update the `bucket.service.ts`
    file as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使其与 `ComponentStore` 兼容。为了做到这一点，我们将为桶状态创建一个接口，从 `ComponentStore` 扩展 `BucketService`，并通过调用
    `super` 方法初始化服务。按照以下方式更新 `bucket.service.ts` 文件：
- en: '[PRE29]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: None of this will make sense until we actually show the data from `ComponentStore`.
    Let’s work on that now.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直到我们实际上显示 `ComponentStore` 中的数据，这一切都没有意义。让我们现在着手解决这个问题。
- en: 'Let’s create a `bucket$` observable in `BucketService` as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 `BucketService` 中创建一个 `bucket$` 可观察对象，如下所示：
- en: '[PRE30]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'First, let’s make sure that we can initialize the component store using the
    values from `localStorage`. We’ll update the `constructor` method in the `bucket.service.ts`
    file as follows to use the `loadItems` method:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们确保我们可以使用 `localStorage` 中的值初始化组件存储。我们将按照以下方式更新 `bucket.service.ts` 文件中的
    `constructor` 方法，以使用 `loadItems` 方法：
- en: '[PRE31]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now we’ll add the methods for adding and removing fruit items to and from the
    bucket:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加将水果项目添加到和从桶中移除的方法：
- en: '[PRE32]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now that we have the Component Store set up, let’s use it in the `bucket.component.ts`
    file as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了组件存储，让我们在 `bucket.component.ts` 文件中使用它，如下所示：
- en: '[PRE33]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We can now use the `bucket$` observable in the template. Update `bucket.component.html`
    as follows:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以在模板中使用 `bucket$` 可观察对象。按照以下方式更新 `bucket.component.html` 文件：
- en: '[PRE34]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With this change, you should see the app working. If you now try to add or remove
    items, you should be able to see them being reflected in the app. And this is
    all being done using Component Store now.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 经过这次更改，你应该能看到应用正在工作。如果你现在尝试添加或删除项目，你应该能够看到它们在应用中有所反映。现在所有这些操作都是通过组件存储来完成的。
- en: 'The next thing we need to do is to use the bucket’s length in the application’s
    header. Let’s create a new state selector in the `bucket.service.ts` file as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来需要做的是在应用页眉中使用桶的长度。让我们在 `bucket.service.ts` 文件中创建一个新的状态选择器，如下所示：
- en: '[PRE35]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And we can now use the component store in the app’s header. First, let’s import
    the store in `app.component.ts` as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用组件存储在应用页眉中。首先，让我们按照以下方式在 `app.component.ts` 中导入存储：
- en: '[PRE36]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can now use the `bucketLength$` observable in `app.component.html` as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以在 `app.component.html` 中使用 `bucketLength$` 可观察对象，如下所示：
- en: '[PRE37]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'And voila! If you add and remove items from the bucket, you should be able
    to see the bucket’s length in the header as well:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哇！如果你从桶中添加和删除项目，你应该能够在页眉中看到桶的长度：
- en: '![](img/B18469_06_14.png)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B18469_06_14.png)'
- en: 'Figure 6.14: Bucket length in header via Component Store'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.14：通过组件存储在页眉中显示桶的长度
- en: Congratulations! You finished the recipe. See the next section to understand
    how it works.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了食谱。查看下一节以了解它是如何工作的。
- en: How it works…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As mentioned earlier, `@ngrx/component-store` is a standalone package that can
    easily be installed in your Angular apps without having to use `@ngrx/store`,
    `@ngrx/effects` and so on. It is supposed to replace the usage of `BehaviorSubject`
    in Angular services, and that’s what we did in this recipe. We covered how to
    initialize `ComponentStore` and how to set the initial state using the `setState`
    method when we already had the values without accessing the state, and we learned
    how to create updater methods that can be used to update the state, as they can
    access the state and allow us to even pass arguments for our own use cases.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`@ngrx/component-store` 是一个独立的包，可以轻松地安装到你的 Angular 应用中，而无需使用 `@ngrx/store`、`@ngrx/effects`
    等等。它旨在取代 Angular 服务中 `BehaviorSubject` 的使用，这正是我们在本食谱中做的。我们介绍了如何初始化 `ComponentStore`，以及如何使用
    `setState` 方法设置初始状态，因为我们已经有了值而没有访问状态，我们还学习了如何创建更新器方法，这些方法可以用来更新状态，因为它们可以访问状态，并允许我们为我们的用例传递参数。
- en: See also
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '`@ngrx/component-store` documentation ([https://ngrx.io/guide/component-store](https://ngrx.io/guide/component-store))'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ngrx/component-store` 文档 ([https://ngrx.io/guide/component-store](https://ngrx.io/guide/component-store))'
- en: Effects in `@ngrx/component-store` documentation ([https://ngrx.io/guide/component-store/effect](https://ngrx.io/guide/component-store/effect))
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ngrx/component-store` 文档中的效果 ([https://ngrx.io/guide/component-store/effect](https://ngrx.io/guide/component-store/effect))'
- en: Learn more on Discord
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里你可以分享反馈，向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/AngularCookbook2e](Chapter_6.xhtml)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/AngularCookbook2e](Chapter_6.xhtml)'
- en: '![](img/QR_Code1388317275422265.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code1388317275422265.png)'
