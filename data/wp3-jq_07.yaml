- en: Chapter 7. AJAX with jQuery and WordPress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章. 使用 jQuery 和 WordPress 进行 AJAX
- en: AJAX is an acronym that *Jesse James Garrett*, a user-experience expert who
    founded [www.AdaptivePath.com](http://www.AdaptivePath.com), coined back in 2005\.
    It quickly morphed into a buzzword who's descriptiveness (and verby-ness) as we'll
    see, goes way beyond its actual acronym definition. We'll take a quick look at
    what AJAX really is and how easy it is to implement, not to mention cook up a
    few more cool solutions for our "hypothetical" clients.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX 是 *杰西·詹姆斯·加勒特* 在 2005 年创立的用户体验专家，他是[www.AdaptivePath.com](http://www.AdaptivePath.com)的创始人，AJAX
    是一个缩写词。 它很快就变成了一个流行词，其描述性（以及动词性）远远超出了其实际缩写定义。 我们将快速了解 AJAX 究竟是什么，以及它有多容易实现，更不用说为我们的“假想”客户想出更多酷炫的解决方案。
- en: 'In this chapter, we''re going to take a look at:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点讨论以下内容：
- en: The basics of using jQuery's AJAX `.load()` function and the more robust `.ajax()`
    function
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery 的 AJAX `.load()` 函数和更健壮的 `.ajax()` 函数的基础知识
- en: Working with JSON and hooking into other site's APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSON 和连接到其他站点的 API
- en: Creating a custom AJAX enhanced home page and comment form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义 AJAX 增强首页和评论表单
- en: Refining that functionality using animation and events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画和事件来优化该功能
- en: Let's get started by taking a look at what jQuery does for AJAX.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始看看 jQuery 为 AJAX 做了什么。
- en: 'What AJAX is and isn''t: A quick primer'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX 是什么，不是什么：一个快速入门
- en: To start, if you're new to AJAX, I'll just point out that **AJAX** is actually
    not a technology or language! The acronym stands for **Asynchronous JavaScript
    and XML**. It's the technique of using JavaScript and XML to send and receive
    data between a web browser and a web server. The most obvious (and cool) use of
    this technique means you can dynamically update a piece of content on your web
    page with a call to the server, without forcing the entire page to reload.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您对 AJAX 不熟悉，我只想指出 **AJAX** 其实并不是一种技术或语言！ 这个缩写代表 **Asynchronous JavaScript
    and XML**。 它是使用 JavaScript 和 XML 在 Web 浏览器和 Web 服务器之间发送和接收数据的技术。 这种技术最明显（也是最酷的）的用途是，您可以通过调用服务器动态更新网页上的一部分内容，而无需重新加载整个页面。
- en: The implementation of this technique has made it obvious to many web developers
    that they can start creating advanced web applications (sometimes called **Rich
    Interface Applications(RIAs)**) that work and feel more like desktop software
    applications, instead of like web pages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此技术的实施使许多 Web 开发人员明白他们可以开始创建高级 Web 应用程序（有时称为 **Rich Interface Applications(RIAs)**），这些应用程序的工作方式和感觉更像是桌面软件应用程序，而不是网页。
- en: 'As eluded to above, the word AJAX is starting to have its own meaning (as you''ll
    also note its occasional use in this book and others, as well as all over the
    web as a proper noun: "Ajax", rather than an all-cap acronym). For example, a
    web developer using predominately Microsoft technology may develop their site
    using a browser scripting language called VBScript instead of JavaScript, to sort
    and display content transformed into a lightweight data format called JSON instead
    of XML. You guessed it, that developer''s site would still be considered an AJAX
    site, rather than an "AVAJ" site (let''s face it, AJAX simply sounds cooler).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，AJAX 这个词开始拥有自己的含义（正如您在本书和其他书籍中偶尔看到的一样，以及网络上到处都是的正式名词：“Ajax”，而不是全大写的缩写）。
    例如，一个主要使用 Microsoft 技术的 Web 开发人员可能会使用名为 VBScript 的浏览器脚本语言，而不是 JavaScript，来对内容进行排序和显示，这些内容转换成了称为
    JSON 的轻量级数据格式，而不是 XML。 你猜对了，该开发人员的站点仍然会被视为 AJAX 站点，而不是 “AVAJ” 站点（承认吧，AJAX 听起来更酷）。
- en: In fact, as we noted in [Chapter 5](ch05.html "Chapter 5. jQuery Animation within
    WordPress"), *jQuery Animation within WordPress*, it's getting to the point where
    just about anything on a website (that isn't in Flash) that slides, moves, fades,
    or pops up without rendering a new browser window is considered an "Ajaxy" site.
    In truth, most of these sites don't truly qualify as using AJAX and if you use
    just a few of the jQuery examples from this book in your WordPress site, it will
    probably be considered Ajaxy, despite not calling asynchronously to the server.
    But after this chapter, it will.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，正如我们在 [第五章](ch05.html "Chapter 5. jQuery Animation within WordPress") 中所指出的
    *jQuery Animation within WordPress*，现在几乎网站上的任何东西（不是 Flash 中的）都会被视为“具有 AJAX 特性”的网站，包括滑动、移动、淡入、弹出而不会渲染新的浏览器窗口。
    实际上，大多数这样的网站并不真正符合使用 AJAX 的标准，如果你在 WordPress 站点中仅使用本书中的几个 jQuery 示例，它可能会被认为是具有
    AJAX 特性的，尽管没有异步调用服务器。 但在本章之后，它将是。
- en: 'AJAX: It''s better with jQuery'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX：使用 jQuery 更好
- en: 'In the past, when writing up introductions to AJAX or going over the pros and
    cons of using AJAX with my clients for their projects, I used to give long, in-depth
    disclaimers and warnings for using AJAX techniques: regaling tales of worst-case
    scenarios and horror stories of lost browser functionality, not-to-mention ruined
    accessibility for special needs users. While some of those concerns are still
    valid, much of the "implementation dread" has pretty much ended with jQuery.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，当我为 AJAX 撰写介绍或者与我的客户讨论在他们的项目中使用 AJAX 的利弊时，我过去常常为使用 AJAX 技术提供长篇的、深入的免责声明和警告：讲述最坏情况的故事和对于特殊需求用户而言丧失的浏览器功能，更不用说破坏了可访问性。虽然其中一些担忧仍然存在，但使用
    jQuery 的“实施恐惧”基本上已经消失了。
- en: As with all things jQuery that we've learned so far, the point is to create
    great *enhancements* that degrade gracefully down to basic, working HTML functionality.
    You'll find the same holds true for AJAX techniques so long as they're thoughtfully
    implemented with jQuery. If the core content or functionality of your site can
    be accessed and retrieved without JavaScript enabled in the browser, you'll find
    that all your users, no matter what their browser or accessibility requirements
    are, should be able to enjoy your content and effectively use your site. The majority
    of your users will get to use your site with slick, visually appealing enhancements
    that make the site easier to use and can even aid in understanding the content.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们到目前为止学到的所有 jQuery 东西一样，重点是创建出色的*增强功能*，逐渐降级到基本的、可工作的 HTML 功能。只要以 jQuery 深思熟虑地实现了
    AJAX 技术，你会发现同样适用。如果你的网站的核心内容或功能可以在浏览器中启用 JavaScript 的情况下访问和检索，你会发现所有用户，无论他们的浏览器或可访问性要求是什么，都应该能够享受你的内容并有效地使用你的网站。你的大部分用户将能够使用你的网站，并且能够使用使网站更易于使用并且甚至可以帮助理解内容的时髦、视觉上令人愉悦的增强功能。
- en: Assessing if AJAX is right for your site—a shorter disclaimer
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估 AJAX 是否适合你的网站——一个较短的免责声明
- en: Sure, accessibility and compliance aside, there are still some considerations
    to make for your site's users. Most notably, as you start to realize the power
    that AJAX techniques can bring to your site, you'll want to make an effort to
    stay within the *conventions of standard web practices*. Essentially, most web
    users expect web pages, even really cool web pages, to simply act like web pages!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，除了可访问性和合规性之外，还有一些考虑因素要考虑你网站的用户。尤其是，当你开始意识到 AJAX 技术可以为你的网站带来的强大功能时，你将希望努力遵守*标准网络实践的惯例*。基本上，大多数网络用户希望网页，即使是非常酷的网页，都简单地像网页一样运行！
- en: That doesn't mean you can't break standard conventions, especially if your site
    is more of an RIA than a pure content site. Just make sure that you inform your
    users of what to expect. For example, if the navigation panel is not at the top
    of the site or sidebar, you'll need to find some way to tell people up-front where
    it is and why you think it's more conveniently located where you put it. If you
    use a different indicator other than underlines and button boxes for click-able
    objects, tell people what to look for so they know what's click-able and what's
    not.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着你不能打破标准惯例，尤其是如果你的网站更像是一个 RIA 而不是一个纯内容网站。只要确保你告诉用户可以期待什么。例如，如果导航面板不在网站的顶部或侧边栏，你需要找到一些方法提前告诉人们它在哪里以及为什么你认为将其放置在那里更加方便。如果你使用的不是下划线和按钮框之类的不同指示符来指示可点击对象，告诉人们要寻找什么，这样他们就知道什么是可点击的，什么是不可点击的。
- en: With that said, let's take a look at what our latest crop of hypothetical clients
    have to ask of us and get to work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们来看看我们最新一批假设客户向我们提出了什么问题，并开始工作。
- en: Getting started with jQuery's AJAX functionality
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 jQuery 的 AJAX 功能
- en: At the heart of jQuery's AJAX functionality is the `.ajax()` function. This
    little guy allows you to do some heavy lifting and has everything you need for
    all your **XML HTTP Requests** (**XHR**) needs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的 AJAX 功能的核心是`.ajax()`函数。这个小家伙让你能够完成一些繁重的工作，并且为你所有的**XML HTTP 请求** (**XHR**)
    需求提供了一切。
- en: For those of you with a little AJAX experience under your belts, you'll be pleased
    to find that in true jQuery form, this function eliminates the need for setting
    up the traditional `if/else` statement to test for support for the `XMLHTTPRequest`
    object and if not then, the `ActiveXObject` (for IE browsers).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些有一点 AJAX 经验的人来说，你会高兴地发现，这个函数符合 jQuery 的真正形式，它消除了设置传统的`if/else`语句来测试对`XMLHTTPRequest`对象的支持以及如果没有的话，则是对`ActiveXObject`（对于
    IE 浏览器）的需要。
- en: Using the .ajax() function
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`.ajax()`函数
- en: 'Let''s take a quick look at some of the functionality available in the `.ajax`
    call:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下`.ajax`调用中可用的一些功能：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, implemented within WordPress, an `.ajax()` call might look something
    like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在WordPress中实现，一个`.ajax()`调用可能是这样的：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the given code, when the user clicks on the `.ajaxIt` object jQuery selector,
    as seen in the next screenshot, the `.ajax` function loads the *whole* **About**
    page into the first post''s `.post` div:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的代码中，当用户在下一张截图中看到的那样点击`.ajaxIt`对象的jQuery选择器时，`.ajax`函数将整个**关于**页面加载到第一篇文章的`.post`
    div中：
- en: '![Using the .ajax() function](img/1742_07_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![使用`.ajax()`函数](img/1742_07_01.jpg)'
- en: 'By changing the CSS properties on the div to hide the overflow and set the
    height, we can keep it from looking too messy:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过改变div上的CSS属性来隐藏溢出并设置高度，我们可以避免它看起来太凌乱：
- en: '![Using the .ajax() function](img/1742_07_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用`.ajax()`函数](img/1742_07_02.jpg)'
- en: 'There you have it! Your first use of AJAX within WordPress! However, you''re
    probably thinking: "That''s a fair bit of work for something that I''d never really
    want to do in real life. (Reloading in the whole site into a div *including* the
    header? Yuk!)"'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！这是你在WordPress中使用AJAX的第一次！不过，你可能会想：“为了某事我在现实生活中可能并不想做的事情，这也太费事了。（将整个网站重新加载到一个包括头部在内的div中？呃！）”
- en: You're right. Let's take a look at shortcutting-in some more accessible and
    useful functionality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你说得对。让我们来看看如何在一些更易访问和更有用的功能上快捷操作。
- en: Taking shortcuts
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩短路径
- en: 'You can see the `.ajax()` function is quite robust and flexible. As cool as
    that is, you''re probably already hoping for a shortcut. Never fear, similar to
    the `.animate()` function we''ve already worked with, jQuery has nicely broken
    down a few of the more "routine" tasks into bite size functions that are much
    easier to use and leverage. Here are the most important for WordPress users:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`.ajax()`函数相当强大和灵活。尽管它很酷，但你可能已经希望有一个快捷方式。不用担心，与我们已经使用过的`.animate()`函数类似，jQuery已经很好地将一些更“常规”的任务分解成了更易于使用和利用的小函数。以下是对WordPress用户最重要的几个：
- en: '`.load`—you can call through POST and GET with this function and pull specific,
    jQuery-selected content and tuck it a lot more easily into other jQuery selected
    areas.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.load`—你可以通过这个函数进行POST和GET调用，然后从中提取特定的、经过jQuery选择的内容，并将其轻松地塞进其他jQuery选择的区域。'
- en: '`.get`—like `.load`, but only does get requests.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.get`—和`.load`类似，但只执行get请求。'
- en: '`.post`—like `.load`, but focuses on post requests.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.post`—和`.load`一样，但专注于POST请求。'
- en: '`.getJSON`—allows you to pull JSON data (this is a good way to go if you''re
    cross site scripting—that is, pulling data in from another URL, such as `twitter.com`
    for example).'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.getJSON`—允许你拉取JSON数据（如果你进行跨站点脚本编写，即从其他URL中拉取数据，比如`twitter.com`，那么这是一个好方法）。'
- en: '`.getScript`—allows you to kick off the actions tucked in a script that''s
    not attached to your WordPress theme. (Very useful if you want to add functionality
    that you don''t want other people to be able to easily find and comb through,
    and you can also pull in JavaScripts from other domains to work with.)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.getScript`—允许你启动一个不附加到你的WordPress主题的脚本中隐藏的操作。（如果您想添加不希望其他人轻易找到和搜索的功能，这将非常有用，您还可以从其他域中引入JavaScript以进行操作。）'
- en: In most WordPress projects, you'll find that you won't need to use the `.ajax()`
    function at all. You'll use `.load, .post` or `.get`, sometimes `.getJSON` or
    `.getScript`. But, like the `.animate()` function, you'll occasionally come up
    with scenarios where the flexibility and granular control of the `.ajax` function
    is handy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数WordPress项目中，你会发现你根本不需要使用`.ajax()`函数。你会使用`.load, .post`或`.get`，有时是`.getJSON`或`.getScript`。但是，就像`.animate()`函数一样，偶尔会出现需要`.ajax`函数的灵活性和细粒度控制的情况。
- en: The most useful of all of these shortcut functions and the one we'll focus on
    the most is the `.load` function.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些快捷功能中最有用的，也是我们将重点关注的功能是`.load`函数。
- en: Specifying where to .load() it
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定`.load()`位置
- en: 'We can achieve the exact same effect we got from our full `.ajax()` function
    with the parred-down code here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这里简化的代码获得我们在完整的`.ajax()`函数中得到的完全相同的效果：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, kinda cool, in that the code snippet is a lot simpler. It's AJAX; the
    page itself isn't reloading, but why would you *want* to do that? (Again, to keep
    the example from being too messy, I used the `.css` function to change the CSS
    properties and hide the overflow and lock the height of the `.post` div.)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，有点酷，代码片段变得简单多了。这就是AJAX；页面本身不重新加载，但为什么你*想*要这样做呢？（为了避免示例太凌乱，我使用了 `.css` 函数来改变CSS属性，隐藏溢出和锁定
    `.post` div 的高度。）
- en: 'It does seem rare that this would be useful for a project (and if it was useful,
    an `iframe` would achieve the same effect). What we really want to do is be able
    to load in key pieces of content from another page into our current page. The
    good news is, we can achieve that easily:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎很少有项目会对这有用（如果有用的话，一个`iframe`会实现相同的效果）。我们真正想做的是能够将另一页中的关键内容加载到我们当前页面中。好消息是，我们可以很容易实现：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'By extending the `url` parameter of the `.load` function, the given snippet
    of code will replace our first `.post` div with content from the `#post-104` div
    on the **About** page. The result is this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展 `.load` 函数的 `url` 参数，给定的代码片段将用关于页面**关于**的 `#post-104` div 的内容替换我们的第一个 `.post`
    div。结果是这样的：
- en: '![Specifying where to .load() it](img/1742_07_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![指定.load()它的位置](img/1742_07_03.jpg)'
- en: You'll also note that I was able to remove the `.css` function because only
    useful content is loaded in, nice and clean.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到我能够删除 `.css` 函数，因为只有有用的内容被加载进来，清爽而干净。
- en: Transforming loaded content
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换加载的内容
- en: 'Let''s say we need to transform some of the content that we load in. Not a
    problem. There''s a basic "success" callback function available. We can take advantage
    of it like so:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要转换一些我们加载进来的内容。没问题。有一个基本的“成功”回调函数可用。我们可以这样利用它：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Transforming loaded content.ajax() function, using.load function, using](img/1742_07_04.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![转换加载内容.ajax()函数，使用.load函数，使用](img/1742_07_04.jpg)'
- en: As you can see, the content is now "part" of our page, and a set of DOM objects
    as our h3s in the ajaxed content changed along with other selected matches on
    the page. Now this seems a lot more useful. I bet you can think of a lot of uses
    for functionality like this! Guess what—so can our "clients".
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，内容现在“成为”了我们页面的一部分，并且在ajaxed内容中被更改的DOM对象集，以及页面上的其他选定匹配项（例如h3），也随之改变。现在这似乎更有用。我打赌你可以想出很多像这样的功能用途！猜猜——我们的“客户”也可以。
- en: 'Project: Ajaxifying posts'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目：使帖子AJAX化
- en: Lets assume you've got a client (relax, this is the *last* hypothetical client!)
    who's an "open source media designer" and would like a very clean and sparse home
    page. So sparse, they'd like only a list of the titles of the top, most current
    posts from two specific categories to appear. (In an ideal world, a decision like
    this would ensure their site's awesome design could sink in on the user before
    bombarding them with content.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个客户（放松，这是*最后*一个假设的客户！），他是一位“开源媒体设计师”，想要一个非常简洁和稀少的首页。如此稀少，他只想让两个特定类别中最新帖子的标题列表出现。（在理想的世界中，像这样的决定将确保他们网站出色的设计能在用户面前沉淀下来，然后再向他们提供内容。）
- en: They'd of course like it to be slick. When you click on the title for a post,
    it loads in through AJAX, nice n' smooth. There's no reloading over to a single
    content page.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 他们当然想要它看起来漂亮。当你点击一篇文章的标题时，它会通过AJAX加载，非常流畅。没有重新加载到单独的内容页面。
- en: To get started on this request, we'll have to reference what we understand of
    the Template Hierarchy and custom loops. We'll create a `home.php` template page
    that will become the default home page which only displays the five most recent
    posts for the "WordPress Design" and "Inkscape Illustration" categories. Sounds
    straightforward enough, so let's get started.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始处理这个请求，我们必须参考我们对模板层次结构和自定义循环的理解。我们将创建一个 `home.php` 模板页面，它将成为默认的主页，仅显示 "WordPress设计"
    和 "Inkscape插图" 类别中最近的五篇帖子。听起来很简单，让我们开始吧。
- en: First create a new custom template page called `home.php` and insert your `#content`
    div markup as well as the theme's header and footer (and anything else you want).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个名为 `home.php` 的新自定义模板页面，并插入你的 `#content` div 标记以及主题的页眉和页脚（以及其他任何你想要的内容）。
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, inside our `#content` div, we''ll place in our custom loops which load
    up the "WordPress Themes" and "Inkscape Illustration" categories. We know that
    the categories IDs are `5` and `6` so our custom "mini loops" look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的 `#content` div 内部，我们将放置加载"WordPress主题"和"Inkscape插图"类别的自定义循环。我们知道类别ID分别为
    `5` 和 `6` ，因此我们的自定义"迷你循环"看起来是这样的：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The custom loops will result in a page that appears like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义循环将导致一个看起来像这样的页面：
- en: '![Project: Ajaxifying posts](img/1742_07_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![项目：Ajax 化帖子](img/1742_07_05.jpg)'
- en: 'Because we set up our loops to display the title *inside* an `href` link to
    the single page layout, if we check what we''ve got so far in WordPress, we''ll
    see the post titles, and if we click on them, we''ll be taken to the full post
    page, as seen in the next screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们设置了我们的循环以在单页布局的 `href` 链接内显示标题，如果我们在 WordPress 中检查到目前为止的内容，我们将看到帖子标题，如果点击它们，我们将被带到完整的帖子页面，如下一个截图所示：
- en: '![Project: Ajaxifying posts](img/1742_07_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![项目：Ajax 化帖子](img/1742_07_06.jpg)'
- en: 'That''s what we want. If the user doesn''t have JavaScript enabled for whatever
    reason, the site will still work and give them the info they want. This is always
    the point we want to start from when working with jQuery: basic, working HTML
    and CSS. The goal is always to *enhance*, and not exclude, people who don''t use
    one of the latest browsers for various reasons, or have one of the cool JavaScript
    enabled, smartphones.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们想要的。如果用户由于任何原因未启用 JavaScript，则站点仍将正常工作并向他们提供所需的信息。这总是我们使用 jQuery 时要从基础、可工作的
    HTML 和 CSS 开始的地方。目标始终是 *增强* 而不是排除那些由于各种原因不使用最新浏览器或没有启用 JavaScript 的酷手机的人。
- en: At this point we're going to leverage a technique that we got a little taste
    of in [Chapter 6](ch06.html "Chapter 6. WordPress and jQuery's UI") with the PDF
    download enhancement. We're going to "hijack" the link to the post (this technique
    is often called "hijax") and use the URL to our advantage in the jQuery `.load`
    command.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将利用我们在[第 6 章](ch06.html "第 6 章。WordPress 和 jQuery 的 UI")中略微尝试过的技术。我们将“劫持”帖子的链接（这种技术通常称为“劫持”），并在
    jQuery 的 `.load` 命令中利用 URL 以获取优势。
- en: First up, we'll need something to load the content into, so in our `custom-jquery.js`
    file, we'll `.append` a new `div` to the bottom of the `#content` div.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将内容加载到某个地方，因此在我们的 `custom-jquery.js` 文件中，我们将一个新的 `div` 追加到 `#content`
    div 的底部。
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, as we saw in our previous examples, we certainly don''t want *everything*
    from the opening body tag to the closing to load in! We really only want the `.post
    div`. So let''s set up our `.load` function and narrow down what loads in as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如我们在先前的示例中看到的那样，我们当然不希望加载从开头的 body 标记到结尾的 *所有* 内容！我们真正想要的只是 `.post div`。因此，让我们设置我们的
    `.load` 函数并缩小加载内容的范围如下：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Can you believe how simple that is? Any link that's clicked on will *fade* out
    the content that's loaded and *slide* in the new content! We now have a super
    slick effect that uses AJAX super simply, on our home page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你能相信这是多么简单吗？点击的任何链接都会 *淡出* 加载的内容，并 *滑入* 新内容！我们现在在我们的首页上有了一个非常简单地使用 AJAX 的超级流畅效果。
- en: '![Project: Ajaxifying posts](img/1742_07_07.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![项目：Ajax 化帖子](img/1742_07_07.jpg)'
- en: '.getJSON: The littlest birds get the most re-tweets'
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .getJSON：小鸟获得最多转发
- en: 'Twitter is ridiculously popular these days, as a result, there are tons of
    great jQuery plugins for connecting to it already. My personal favorite is: *Damien
    du Toit ''s* **jQuery Plugin for Twitter:** [http://coda.co.za/blog/2008/10/26/jquery-plugin-for-twitter](http://coda.co.za/blog/2008/10/26/jquery-plugin-for-twitter).
    If you really want nice control over your twitter displays, you can''t go wrong
    with this plugin.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Twitter 极其受欢迎，因此已经有大量出色的 jQuery 插件可以连接到它。我个人最喜欢的是：*Damien du Toit* 的 **jQuery
    Plugin for Twitter：** [http://coda.co.za/blog/2008/10/26/jquery-plugin-for-twitter](http://coda.co.za/blog/2008/10/26/jquery-plugin-for-twitter)。如果你真的想要对你的
    Twitter 显示有很好的控制权，那么这个插件绝对不会让你失望。
- en: However, the Twitter Search and User Timeline API methods for JSON are pretty
    straightforward; thus, it makes for a great "quick tutorial" on how to use jQuery's
    `.getJSON` function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Twitter 搜索和用户时间线 API 方法对于 JSON 来说相当简单；因此，这对于如何使用 jQuery 的 `.getJSON` 函数进行“快速教程”非常适合。
- en: Plus, you guessed it, our hypothetical client thinks the initial home page layout
    might be "too sparse", asking if we can just add in the three latest tweets from
    their username.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你猜对了，我们假想的客户认为初始首页布局可能“太稀疏”，询问我们是否可以只添加他们用户名下的三条最新推文。
- en: JSON and jQuery basics
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON 和 jQuery 基础知识
- en: Before we dive into Twitter and other services, let's go over the basics of
    JSON and how to use it with jQuery.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解 Twitter 和其他服务之前，让我们先了解 JSON 的基础知识以及如何与 jQuery 结合使用。
- en: JSON (pronounced often like the name Jason) is an acronym for **JavaScript Object
    Notation**. Essentially, it's a simple machine-readable data-interchange format,
    which makes constructing and working with API applications in JavaScript a snap
    (and it can be used with other programming languages). If you're into learning
    the history of it, you can take a look at [http://json.org](http://json.org) to
    find out more.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: JSON（经常发音为 Jason）是**JavaScript 对象表示法**的首字母缩写。本质上，它是一种简单的机器可读数据交换格式，使在 JavaScript
    中构建和处理 API 应用程序变得轻而易举（它也可以与其他编程语言一起使用）。如果您想了解其历史，可以访问[http://json.org](http://json.org)了解更多信息。
- en: What JSON looks like
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON 是什么样的
- en: You'll be pleasantly surprised to find that JSON markup syntax looks the same
    as most parameter/values syntax you've already been using so far in jQuery, or
    with CSS. It is based on most C language object notations such as Java and JavaScript,
    so it makes things quite nice and handy when dealing with in JavaScript and jQuery.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您会惊喜地发现，JSON 标记语法看起来与您到目前为止在 jQuery 中或与 CSS 一起使用的大多数参数/值语法相同。它基于大多数 C 语言对象表示法，如
    Java 和 JavaScript，因此在处理 JavaScript 和 jQuery 时非常方便。
- en: 'For example, jQuery''s `.css()` function can have multiple values values passed
    within `{}` brace brackets, like so:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，jQuery 的`.css()`函数可以在`{}`大括号内传递多个值，如下所示：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the same manner, JSON data can be set up as such:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样的方式，JSON 数据可以设置如下：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Pretty similar all right! Let's take a look at using it within jQuery.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 非常相似对吧！让我们看看如何在 jQuery 中使用它。
- en: Using JSON in jQuery
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 jQuery 中使用 JSON
- en: Let's take a closer look at the `.getJSON` function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看`.getJSON`函数。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first parameter of this function is just like the `.load` function; you'll
    place in the the URL that you are planning to read. The `data` parameter is used
    if you need to POST data to the URL (you can do this in a query string or array
    object). The call back function is not required, unless you're calling a URL from
    a server other than your own.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的第一个参数与`.load`函数非常相似；您将放置您计划阅读的 URL。如果您需要将数据 POST 到 URL（您可以在查询字符串或数组对象中执行此操作），则使用`data`参数。回调函数不是必需的，除非您从自己的服务器以外的服务器调用
    URL。
- en: Let's now take a look at putting `.getJSON` to use in our WordPress site.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在我们的 WordPress 网站中使用`.getJSON`。
- en: Using .getJSON with Twitter
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 .getJSON 与 Twitter
- en: 'First up, when dealing with other service APIs, there''s no excuse for not
    reading and using their documentation. Services often update their APIs to make
    them better and faster, but then the methods used to connect to and work with
    them change from time to time. It can sometimes take quite a bit of diligence
    to keep your code up-to-date with an API. Twitter''s API documentation can be
    found here: [http://apiwiki.twitter.com/Twitter-API-Documentation](http://apiwiki.twitter.com/Twitter-API-Documentation).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在处理其他服务的 API 时，没有理由不阅读并使用它们的文档。服务经常更新其 API 以使其更好、更快，但连接到它们并使用它们的方法有时会发生变化。要使代码与
    API 保持最新有时需要相当多的努力。Twitter 的 API 文档可以在这里找到：[http://apiwiki.twitter.com/Twitter-API-Documentation](http://apiwiki.twitter.com/Twitter-API-Documentation)。
- en: Also, many API services require that you sign up as a developer and use OAuth
    to use some or all of their services (or their own authenticating system to protect
    your user login and data).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，许多 API 服务要求您注册为开发者，并使用 OAuth 使用其中一些或全部服务（或他们自己的身份验证系统来保护您的用户登录和数据）。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**What''s OAuth?**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth 是什么？**'
- en: 'OAuth is an open standard that allows users to hand out tokens instead of usernames
    and passwords to their hosted data by a given service provider. Many API service
    providers use it and you can find out more from their site: [http://oauth.net/about/](http://oauth.net/about/).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 是一种开放标准，允许用户向托管数据的服务提供商提供令牌而不是用户名和密码。许多 API 服务提供商使用它，您可以从他们的网站了解更多信息：[http://oauth.net/about/](http://oauth.net/about/)。
- en: In this section, I'll cover the basics of connecting to the user timeline method
    in the twitter API. This method doesn't require OAuth so long as the user has
    a publicly viewable twitter stream, so you don't need to register for an OAuth
    application (but it certainly doesn't hurt to sign up).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将介绍在 Twitter API 中连接到用户时间线方法的基础知识。只要用户有一个公开可见的 Twitter 流，此方法就不需要 OAuth，因此您不需要注册
    OAuth 应用程序（但是注册也不会有害）。
- en: Using Twitter's user timeline method
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Twitter 的用户时间线方法
- en: 'The URL parameter in our `.getJSON` function will contain the following API,
    formatted URL:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`.getJSON`函数中的 URL 参数将包含以下 API，格式化的 URL：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can choose from the following formats (but guess which one we''ll be using!):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择以下格式（但猜猜我们将使用哪一个！）：
- en: atom
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: atom
- en: '**json**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**json**'
- en: rss
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: rss
- en: xml
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: xml
- en: First up, we'll need to place our tweets on the home page.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将我们的推文放在主页上。
- en: We have two options here, we can go into the `home.php` template file and create
    an "actual" `div` and `ul` list, or we can create it entirely with jQuery.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有两个选项，我们可以进入`home.php`模板文件并创建一个“实际的”`div`和`ul`列表，或者我们可以完全使用 jQuery 创建它。
- en: Honestly, a call like this is just up to you. At this point in the book, you
    should be plenty comfortable editing and tweaking your theme files or generating
    useful DOM objects with jQuery.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，这样的调用完全取决于你。在本书的这一部分，你应该已经非常熟悉编辑和调整你的主题文件，或者使用 jQuery 生成有用的 DOM 对象了。
- en: Because the tweets are completely dependent on JavaScript being enabled, and
    we aren't trying to custom display any WordPress content with template tags, I'm
    happy to do all the work in jQuery.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因为推文完全依赖于 JavaScript 的启用，并且我们不试图使用模板标签定制显示任何 WordPress 内容，所以我很乐意在 jQuery 中完成所有工作。
- en: 'We''ll start off in our `custom-jquery.js` file, inside the document ready
    statement, create the space for the tweets like so:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们的`custom-jquery.js`文件开始，在文档准备就绪的语句内，像这样创建推文的空间：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next we''ll set up the Twitter API URL as a variable with our "clients" twitter
    user name (we''ll use one of mine: ozoopa).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用我们“客户”的 Twitter API URL 作为一个变量（我们将使用我的其中一个：ozoopa）。
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can now make our `.getJSON` call. Follow along in the bold comments:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以设置我们的`getJSON`调用：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see in the next screenshot, our tweets are showing up just great!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在下一张屏幕截图中所看到的，我们的推文显示得非常好！
- en: '![Using Twitter''s user timeline method](img/1742_07_08.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Twitter 的用户时间线方法](img/1742_07_08.jpg)'
- en: What's Twitter sending back?
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 推特在发送什么？
- en: 'You''ll note that we focused in on just getting the "tweet" text itself back.
    Here''s a taste of what twitter is actually sending back through JSON in that
    URL (the bold part is what we actually used):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，我们只专注于获取“推文”文本本身。以下是推特实际通过 JSON 在 URL 中发送的内容（粗体部分是我们实际使用的）：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, you're given back a lot of data to work with! Again, it pays
    to dig through the API and see what's available to leverage; you can also have
    hours of fun just experimenting with displaying all of the various items available
    in the JSON feed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，你得到了很多数据可以使用！再次强调，深入研究 API 并查看可利用的内容是值得的；你也可以花几个小时尝试显示 JSON 源中可用的各种项目，这也很有趣。
- en: Using getJSON with Flickr
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Flickr 的 getJSON
- en: The client likes it! And of course, they now think the home page is now "too
    text heavy". What about adding in the six latest images from Flickr images tagged
    `"wordpress theme"` in the sidebar? That should balance it out.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 客户喜欢它！当然，他们现在认为主页“文字太多”。那么在边栏中添加来自 Flickr 图像标记为“wordpress theme”的最新的六张图片如何？这应该平衡一下。
- en: Fortunately, this is not a problem either.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这也不是一个问题。
- en: 'Again, your first stop should be the Flickr API documentation: [http://www.flickr.com/services/api/](http://www.flickr.com/services/api/).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，你的首选应该是 Flickr API 文档：[http://www.flickr.com/services/api/](http://www.flickr.com/services/api/)。
- en: 'But we''ll go ahead and get started, again, creating a little space in the
    home page''s sidebar for the images:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们将继续开始，在主页边栏中为图像创建一些空间：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here with their public photo stream method URL:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有他们的公共照片流方法 URL：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And now we can set up our `getJSON` call:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以设置我们的`getJSON`调用：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The Flickr JSON string returns an array called `items` that offers all sorts
    of data. You'll notice that it's a little different when targeting the information
    we want compared to the twitter API. By pulling the `media.m` url to a thumbnail
    we're able to create a quick list of images.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Flickr 的 JSON 字符串返回一个名为`items`的数组，其中提供了各种各样的数据。你会注意到，当定位我们想要的信息时，与 Twitter API
    相比，情况有所不同。通过将`media.m`的 URL 拉取到缩略图，我们能够创建一个快速的图像列表。
- en: It looks like this under **Our Tweets:**
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像是这样的，在**我们的推文**下面：
- en: '![Using getJSON with Flickr](img/1742_07_09.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Flickr 的 getJSON](img/1742_07_09.jpg)'
- en: Other popular services that offer APIs with JSON format
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供 JSON 格式的其他受欢迎的服务
- en: The fun doesn't have to stop there! Now that you're familiar with using `.getJSON`,
    your world is open to implement all sorts of custom cross-site mashups and solutions
    in your WordPress sites. Understanding JSON and the `.getJSON` function also makes
    you more adept at being able to "massage" a good WordPress or jQuery Plugin into
    handling your custom needs better.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 乐趣不必止步于此！现在您熟悉了如何使用`.getJSON`，您的世界就可以在您的 WordPress 站点中实现各种自定义跨站混搭和解决方案。理解 JSON
    和`.getJSON`函数还使您更能熟练地将良好的 WordPress 或 jQuery 插件"调整"以更好地处理您的定制需求。
- en: 'The following popular services offer APIs with JSON support:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流行的服务提供带有 JSON 支持的 API：
- en: 'YouTube: [http://code.google.com/apis/youtube/2.0/developers_guide_json.html](http://code.google.com/apis/youtube/2.0/developers_guide_json.html)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YouTube：[http://code.google.com/apis/youtube/2.0/developers_guide_json.html](http://code.google.com/apis/youtube/2.0/developers_guide_json.html)
- en: 'Netflix: [http://developer.netflix.com/](http://developer.netflix.com/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix：[http://developer.netflix.com/](http://developer.netflix.com/)
- en: 'delicious: [http://delicious.com/help/api](http://delicious.com/help/api)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: delicious：[http://delicious.com/help/api](http://delicious.com/help/api)
- en: 'bitly: [http://code.google.com/p/bitly-api/wiki/ApiDocumentation](http://code.google.com/p/bitly-api/wiki/ApiDocumentation)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bitly：[http://code.google.com/p/bitly-api/wiki/ApiDocumentation](http://code.google.com/p/bitly-api/wiki/ApiDocumentation)
- en: 'goodreads: [http://www.goodreads.com/api](http://www.goodreads.com/api)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: goodreads：[http://www.goodreads.com/api](http://www.goodreads.com/api)
- en: 'LibraryThing: [http://www.librarything.com/api](http://www.librarything.com/api)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LibraryThing：[http://www.librarything.com/api](http://www.librarything.com/api)
- en: Look around! If you use a great service that offers any kind of "social" capability,
    they might offer an API that serves up data in the JSON format. You may need to
    register as a developer with that service in order to authenticate your requests
    (usually using OAuth) but if the end result you get back is a JSON string, you're
    good to go with jQuery and your WordPress project!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 环顾四周！如果您使用的优秀服务提供任何类型的"社交"功能，它们可能会提供以 JSON 格式提供数据的 API。您可能需要向该服务注册为开发者，以便验证您的请求（通常使用
    OAuth），但如果您得到的最终结果是一个 JSON 字符串，您就可以使用 jQuery 和您的 WordPress 项目了！
- en: 'Project: Ajax-izing the built-in comment form'
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目：Ajax-化内置评论表单
- en: From the working samples we've done so far with `.load` and `.getJSON`, you
    can probably think of many extremely cool ways to implement AJAX in your WordPress
    site. The most useful application of this is the comment form.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们到目前为止完成的`.load`和`.getJSON`的工作样本中，您可能会想到许多极其酷的方式来在您的 WordPress 站点中实现 AJAX。其中最有用的应用是评论表单。
- en: First up, we don't even need to amend any template page HTML or WordPress Template
    Tag, PHP code. This is great as again, as often as possible (all the time really)
    we always want our site to work without the jQuery enhancement.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们甚至不需要修改任何模板页面 HTML 或 WordPress 模板标签、PHP 代码。这很棒，因为我们总是希望我们的站点尽可能（实际上是一直）在没有
    jQuery 增强的情况下工作。
- en: 'Ajaxing the WordPress comment form is deceptively simple. And for you "premium"
    theme developers, it''s a great way to entice people to download your theme: "Built
    in AJAX comments!". It is something that we''d like full control over, so we''ll
    be using the `.ajax()` function instead of `.load` (see, I told you `.ajax` would
    come in handy every now and then).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax化 WordPress 评论表单其实很简单。对于您这些"高级"主题开发者来说，这是一种吸引人们下载您主题的好方法："内置 AJAX 评论！"。这是我们希望完全控制的东西，因此我们将使用`.ajax()`函数而不是`.load`（看，我告诉过您`.ajax`偶尔会派上用场）。
- en: First off, in experimenting with the comment form, we'll be wanting to change
    its CSS properties to alert users to errors. I've found it's just better to set
    the form's CSS to something consistent that we can then change easily in jQuery
    for other uses. Add the following code to your `custom-jquery.js` file to change
    the CSS properties of the default theme's comment form styles.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在尝试评论表单的实验中，我们希望将其 CSS 属性更改为警示用户错误。我发现最好将表单的 CSS 设置为一致的内容，然后可以轻松在 jQuery
    中进行其他用途的更改。将以下代码添加到您的`custom-jquery.js`文件中，以更改默认主题评论表单样式的 CSS 属性。
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''re now ready to "take control" of the form. Upon submit, we want our jQuery
    to do the talking, not the form''s "action" attribute. So we''ll use a handy function
    called `.submit()` like so:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备"控制"表单。提交后，我们希望我们的 jQuery 发挥作用，而不是表单的"action"属性。因此，我们将使用一个方便的函数叫做`.submit()`，如下所示：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note our use of another handy, little known jQuery function called `.serialize()`.
    This takes all the data in our `#commentform` form and upon submit, turns it into
    a handy object that we can now pass on in our `.ajax` function.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们使用了另一个方便但不太知名的 jQuery 函数叫 `.serialize()`。这个函数将我们的 `#commentform` 表单中的所有数据在提交时转换为一个方便的对象，现在我们可以将其传递给我们的
    `.ajax` 函数。
- en: 'Inside the `.submit` function, *under* the comment variable, let''s add in
    our `.ajax` call. We''ll be using this function because we need a little extra
    control and will be taking advantage of its `success:` and `error:` callback functions.
    Read through the code''s bold comments to follow along:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `.submit` 函数内，*在* comment 变量之下，让我们添加我们的 `.ajax` 调用。我们将使用这个函数，因为我们需要一点额外的控制，并且将利用其`success:`
    和 `error:` 回调函数。阅读代码中粗体注释以跟随：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That's the gist. We're now ready to get down to work by setting up the `success:`
    and `error:` functions. Let's start with the `success:` function.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是要点。我们现在准备通过设置 `success:` 和 `error:` 函数来开始工作。让我们从 `success:` 函数开始。
- en: We'll first want to create a `div` that will contain a message. We'll then add
    our message to that div along with the `comment` variable that we set up earlier
    (under our `formData` serialized object) to pull the comment entered in the form
    into our code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要创建一个包含消息的 `div`。然后，我们将我们的消息添加到该 div 中，以及我们稍早设置的 `comment` 变量（在我们的 `formData`
    序列化对象之下）来将表单中输入的评论拉入我们的代码中。
- en: 'We''ll also be sure to add in a little jQuery "shine" and leverage some of
    those animation skills from [Chapter 5](ch05.html "Chapter 5. jQuery Animation
    within WordPress"), *jQuery Animation within WordPress* to make sure the `success`
    response loads in nice and smooth. *Inside* the `success: function()` brace brackets,
    insert the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还会确保添加一点 jQuery 的“闪光”，并利用 [第 5 章](ch05.html "第 5 章. 在 WordPress 中使用 jQuery
    动画") 中的一些动画技巧，*在 WordPress 中使用 jQuery 动画*，以确保`success`响应加载得顺畅而漂亮。*在* `success:
    function()` 大括号内，插入以下代码：'
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When the Form is properly filled out, the end result is this message that fades
    in:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单填写正确时，最终结果是这样一个淡入的消息：
- en: '![Project: Ajax-izing the built-in comment form](img/1742_07_10.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![项目：将内置评论表单转为 Ajax](img/1742_07_10.jpg)'
- en: We're now ready to tackle the people who don't fill the form out properly. The
    `wp-comments-post.php` file does throw an error back if the required fields are
    not filled out. We can use this to our advantage by just checking for an error
    using the `error:` function.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备处理那些没有正确填写表单的人。如果必填字段没有填写，`wp-comments-post.php` 文件会抛出一个错误。我们可以利用这一点，只需使用
    `error:` 函数检查错误即可。
- en: '![Project: Ajax-izing the built-in comment form](img/1742_07_11.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![项目：将内置评论表单转为 Ajax](img/1742_07_11.jpg)'
- en: Nice, we just created some slick commenting functionality for our WordPress
    site using AJAX!
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Nice，我们刚刚使用 AJAX 为我们的 WordPress 站点创建了一些流畅的评论功能！
- en: Tip
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Shouldn''t some of these examples be WordPress plugins?**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**难道这些例子中应该有一些是 WordPress 插件吗？**'
- en: 'As mentioned in [Chapter 3](ch03.html "Chapter 3. Digging Deeper: Understanding
    jQuery and WordPress Together"), *Digging Deeper: Understanding jQuery and WordPress
    Together*, if you create a jQuery enhancement that doesn''t require any tweaks
    or edits to the WordPress theme, and will work with most themes released for public
    use, you may want to consider wrapping up your scripts into a separate WordPress
    plugin.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [第 3 章](ch03.html "第 3 章. 深入挖掘：理解 jQuery 和 WordPress") 所述，*深入挖掘：理解 jQuery
    和 WordPress*，如果你创建了一个不需要对 WordPress 主题进行任何调整或编辑，并且适用于大多数公开发布的主题的 jQuery 增强功能，你可能需要考虑将你的脚本打包成一个单独的
    WordPress 插件。
- en: 'This is a handy practice if you''re busy and don''t want to amend a new theme
    with all your custom jQuery scripts every time you swap themes, or if you''re
    part of a larger project with lots of people or if you just simply want to share
    your jQuery work with less technical WordPress users. Follow the steps in [Chapter
    3](ch03.html "Chapter 3. Digging Deeper: Understanding jQuery and WordPress Together"),
    to wrap your jQuery scripts and plugins into simple WordPress plugins so that
    any less-technical administrators can easily add and remove them from their projects.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你很忙，不想每次更换主题时都要修改新主题的所有自定义 jQuery 脚本，或者如果你是一个较大项目的一部分，有很多人，或者你只是想与不太懂技术的 WordPress
    用户分享你的 jQuery 工作，那么这是一个方便的做法。按照 [第 3 章](ch03.html "第 3 章. 深入挖掘：理解 jQuery 和 WordPress")
    中的步骤，将你的 jQuery 脚本和插件打包成简单的 WordPress 插件，以便任何不太懂技术的管理员可以轻松地将它们添加到他们的项目中或将其移除。
- en: 'Also remember,[Chapter 3](ch03.html "Chapter 3. Digging Deeper: Understanding
    jQuery and WordPress Together"), walks you through creating a jQuery plugin as
    well. You''ll probably be able to condense and clean up your code by placing it
    into a jQuery plugin that you then wrap into a WordPress plugin. This should also
    make creating updates and enhancements of your scripts easier to manage. You''ll
    then have better organized code that you can document and share with both worlds:
    jQuery developers and WordPress enthusiasts.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，[第三章](ch03.html "第三章。深入挖掘：理解 jQuery 和 WordPress")也向您展示了如何创建 jQuery 插件。你可能可以通过将代码放入一个
    jQuery 插件中，然后将其包装成一个 WordPress 插件来压缩和清理你的代码。这样也可以更轻松地管理脚本的更新和增强功能。然后，你将拥有更好组织的代码，可以与两个世界分享和共享：jQuery
    开发人员和 WordPress 爱好者。
- en: 'Think about it though: if a jQuery enhancement *is dependent* on any custom,
    special markup that you''ve edited a theme to generate (such as our post list
    example at the beginning of this chapter), it''s better to leave that jQuery script
    as part of the theme, as it won''t work outside of it. This is a good thing for
    super-custom or premium themes. By making your enhancements part of your theme,
    you can entice people to download it because it offer features they don''t need
    to then go out and find separate WordPress Plugins for.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 不过想想看：如果一个 jQuery 增强功能*依赖于*你编辑主题生成的任何自定义特殊标记（例如我们在本章开头的文章列表示例），最好将该 jQuery 脚本作为主题的一部分留下，因为它在外部无法正常工作。这对于超级自定义或高级主题来说是一件好事。通过将您的增强功能作为主题的一部分，您可以吸引人们下载它，因为它提供了他们无需再去寻找单独的
    WordPress 插件的功能。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: 'Who knew AJAX was so darn easy these days? As you can see, leveraging the strengths
    of WordPress themes and jQuery''s AJAX events and requests, it''s very easy to
    make some mighty dynamic sites. In this chapter we took a look at:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 谁知道 AJAX 如此容易呢？正如你所看到的，利用 WordPress 主题的优势和 jQuery 的 AJAX 事件和请求，可以非常容易地创建一些功能强大的动态站点。在本章中，我们了解了以下内容：
- en: Creating custom loading content and hijacking (hijaxing) links to do with as
    we please
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义加载内容并劫持（hijack）链接以按照我们的意愿操作
- en: Working with `.getJSON` and other site's APIs
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.getJSON`和其他站点的 API
- en: Creating our own custom AJAX loading comment form (probably one of the most
    popular enhanced theme features and plugins sought after by WordPress site owners)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们自己的自定义 AJAX 加载评论表单（可能是 WordPress 站点所有者最受欢迎的增强主题功能和插件之一）
- en: Further enhancing our AJAX work with simple jQuery animation features
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步增强我们的 AJAX 工作，使用简单的 jQuery 动画功能
- en: You now understand a lot about applying jQuery to specific enhancements and
    features to WordPress sites. We've started off with the basics and really learning
    how to leverage selectors so that your WordPress editor's workflow doesn't have
    to be interrupted and applied that to some very exciting enhancements that include
    slick animation, the UI plugin and AJAX. We also covered getting those solutions
    into your WordPress site's theme, a WordPress Plugin as well as jQuery Plugins.
    For the majority of your WordPress and jQuery development needs, you are all set!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何将 jQuery 应用于 WordPress 站点的特定增强功能和特性。我们从基础知识开始，真正学习了如何利用选择器，以便您的 WordPress
    编辑工作流程不必中断，并将其应用于一些非常令人兴奋的增强功能，包括流畅的动画、UI 插件和 AJAX。我们还介绍了如何将这些解决方案集成到 WordPress
    站点的主题、WordPress 插件以及 jQuery 插件中。对于你大多数的 WordPress 和 jQuery 开发需求，你已经准备好了！
- en: In the next and final chapter, we'll take a look at some tips and tricks for
    working with jQuery and WordPress plus; the final appendix of this book is a condensed
    "cheat sheet" of reference information for key jQuery functions as well as important
    WordPress function and template tags and classes, all to aid you in your jQuery
    and WordPress development.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一些与 jQuery 和 WordPress 一起工作的技巧和诀窍；本书的最后附录是一个精简的“速查表”，包含关键的 jQuery
    函数以及重要的 WordPress 函数和模板标记和类，都是为了帮助您进行 jQuery 和 WordPress 的开发。
