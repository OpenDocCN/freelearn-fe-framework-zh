["```js\nconst ExampleOne = () => {\n  const { data: queryOneData  } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", username:\n      \"userOne\" }],\n    queryFn: fetchData,\n  });\n  const { data: queryTwoData } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", username:\n      \"userTwo\" }],\n    queryFn: fetchData,\n  });\n  const { data: queryThreeData } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", username:\n      \"userThree\" }],\n    queryFn: fetchData,\n  });\n  return (\n    <div>\n      <p>{queryOneData?.hello}</p>\n      <p>{queryTwoData?.hello}</p>\n      <p>{queryThreeData?.hello}</p>\n    </div>\n  );\n};\n```", "```js\nconst queryResults = useQueries({\n  queries: [\n    { queryKey: [\"api\", \"queryOne\"], queryFn: fetchData },\n    { queryKey: [\"api\", \"queryTwo\"], queryFn: fetchData }\n  ]\n})\n```", "```js\nconst usernameList = [\"userOne\", \"userTwo\", \"userThree\"];\nconst ExampleTwo = () => {\n  const multipleQueries = useQueries({\n    queries: usernameList.map((username) => {\n      return {\n        queryKey: [{ queryIdentifier: \"api\", username }],\n        queryFn: fetchData,\n      };\n    }),\n  });\n  return (\n    <div>\n      {multipleQueries.map(({ data, isFetching }) => (\n        <p>{isFetching ? \"Fetching data...\" : data.hello}\n          </p>\n      ))}\n    </div>\n  );\n};\n```", "```js\nqueryClient.refetchQueries({ queryKey: [\"api\"] })\n```", "```js\nqueryClient.refetchQueries({ type: \"active\" })\n```", "```js\nqueryClient.refetchQueries({ stale: true })\n```", "```js\nqueryClient.refetchQueries({ fetchStatus: \"idle\"})\n```", "```js\nqueryClient.refetchQueries({\n            predicate: (query) => query.state.status ===\n              \"error\",\n})\n```", "```js\nqueryClient.refetchQueries({ queryKey: [\"api\"], stale: true\n  })\n```", "```js\nqueryClient.refetchQueries()\n```", "```js\nqueryClient.invalidateQueries({ queryKey: [\"api\"] })\n```", "```js\nconst QueryInvalidation = () => {\n  const { data } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", username:\n      \"userOne\" }],\n    queryFn: fetchData,\n  });\n  const queryClient = useQueryClient();\n  return (\n    <div>\n      <p>{data?.hello}</p>\n      <button\n        onClick={() =>\n          queryClient.invalidateQueries({\n            queryKey: [{ queryIdentifier: \"api\" }],\n          })\n        }\n      >\n        Invalidate Query\n      </button>\n    </div>\n  );\n};\n```", "```js\nqueryClient.prefetchQuery({\n      queryKey: [\"api\"],\n      queryFn: fetchData\n  });\n```", "```js\nconst ExamplePrefetching = () => {\n  const [renderComponent, setRenderComponent] =\n    useState(false);\n  const queryClient = useQueryClient();\n  const prefetchData = async () => {\n    await queryClient.prefetchQuery({\n      queryKey: [{ queryIdentifier: \"api\", username:\n        \"userOne\" }],\n      queryFn: fetchData,\n      staleTime: 60000\n    });\n  };\n  return (\n    <div>\n      <button onMouseEnter={prefetchData} onClick={() =>\n      setRenderComponent(true)}> Render Component </button>\n      {renderComponent ? <PrefetchedDataComponent /> : null\n        }\n    </div>\n  );\n};\n```", "```js\nconst PrefetchedDataComponent = () => {\n  const { data } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", username:\n      \"userOne\" }],\n    queryFn: fetchData,\n  });\n  return <div>{data?.hello}</div>;\n};\n```", "```js\nconst fetchData = async ({ queryKey, signal }) => {\n  const { username } = queryKey[0];\n  const { data } = await axios.get(\n    `https://danieljcafonso.builtwithdark.com/\n      react-query-api/${username}`,\n    { signal }\n  );\n  return data;\n};\n```", "```js\nconst fetchDataWithFetch = async ({ queryKey, signal }) => {\n  const { username } = queryKey[0];\n  const response = await fetch(\n    `https://danieljcafonso.builtwithdark.com/\n      react-query-api/${username}`,\n    { signal }\n  );\n  if (!response.ok) throw new Error(\"Something failed in\n    your request\");\n  return response.json();\n};\n```", "```js\nconst fetchGQL = async ({signal}) => {\n  const endpoint = <Add_Endpoint_here>;\n  const client = new GraphQLClient(endpoint)\n  const {\n    posts: { data },\n  } = await client.request({document: customQuery,\n    signal});\n  return data;\n};\n```", "```js\nqueryClient.cancelQueries({ queryKey: [\"api\"] })\n```", "```js\nconst fetchData = async ({ queryKey, signal }) => {\n  const { username } = queryKey[0];\n  const { data } = await axios.get(\n    `https://danieljcafonso.builtwithdark.com/\n      react-query-api/${username}`,\n    { signal }\n  );\n  return data;\n};\n```", "```js\nconst ExampleQueryCancelation = () => {\n  const [renderComponent, setRenderComponent] =\n    useState(false);\n  return (\n    <div>\n      <button onClick={() => setRenderComponent\n        (!renderComponent)}>\n        Render Component\n      </button>\n      {renderComponent ? <QueryCancelation /> : null}\n    </div>\n  );\n};\n```", "```js\nconst QueryCancelation = () => {\n  const { data } = useQuery({\n    queryKey: [{ queryIdentifier: \"api\", username:\n      \"userOne\" }],\n    queryFn: fetchData,\n  });\n  const queryClient = useQueryClient();\n  return (\n    <div>\n      <p>{data?.hello}</p>\n      <button\n        onClick={() =>\n          queryClient.cancelQueries({\n            queryKey: [{ queryIdentifier: \"api\" }],\n          })\n        }\n      >\n        Cancel Query\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst fetchData = async ({ queryKey }) => {\n  const { page } = queryKey[0];\n  const { data } = await axios.get(\n    `https://danieljcafonso.builtwithdark.com/\n      react-query-paginated?page=${page}&results=10`\n  );\n  return data;\n};\n```", "```js\nconst PaginatedQuery = () => {\n  const [page, setPage] = useState(0);\n  const { isLoading, isError, error, data, isFetching,\n    isPreviousData } =\n    useQuery({\n      queryKey: [{ queryIdentifier: \"api\", page }],\n      queryFn: fetchData,\n      keepPreviousData: true,\n    });\n  if (isLoading) {\n    return <h2>Loading initial data...</h2>;\n  }\n  if (isError) {\n    return <h2>{error.message}</h2>;\n  }\n  return (\n    <>\n      <div>\n        {data.results.map((user) => (\n          <div key={user.email}>\n            {user.name.first}\n            {user.name.last}\n          </div>\n        ))}\n      </div>\n      <div>\n      <button\n        onClick={() => setPage((oldValue) => oldValue === 0\n          ? 0 : oldValue - 1)}\n        disabled={page === 0}\n      >\n        Previous Page\n      </button>\n      <button\n        disabled={isPreviousData}\n        onClick={() => {\n          if (!isPreviousData) setPage((old) => old + 1);\n        }}\n      >\n        Next Page\n      </button>\n      </div>\n      {isFetching ? <span> Loading...</span> : null}\n    </>\n  );\n};\n```", "```js\nimport { useInfiniteQuery } from \"@tanstack/react-query\"\n```", "```js\nconst fetchData = async ({ pageParam = 1 }) => {\n    const { data } = await axios.get(\n        `https://danieljcafonso.builtwithdark.com/\n         react-query-infinite?page=${pageParam}&results=10`\n    );\n    return data;\n  };\n```", "```js\nconst InfiniteScroll = () => {\n  const {\n    isLoading,\n    isError,\n    error,\n    data,\n    fetchNextPage,\n    isFetchingNextPage,\n    hasNextPage,\n  } = useInfiniteQuery({\n    queryKey: [\"api\"],\n    queryFn: fetchData,\n    getNextPageParam: (lastPage, pages) => {\n      return lastPage.info.nextPage;\n    },\n  });\n  if (isLoading) {\n    return <h2>Loading initial data...</h2>;\n  }\n  if (isError) {\n    return <h2>{error.message}</h2>;\n  }\n  return (\n    <>\n      <div>\n        {data.pages.map((page) =>\n          page.results.map((user) => (\n            <div key={user.email}>\n              {user.name.first}\n              {user.name.last}\n            </div>\n          ))\n        )}\n      </div>\n      <button\n        disabled={!hasNextPage || isFetchingNextPage}\n        onClick={fetchNextPage}\n      >\n        {isFetchingNextPage\n          ? «Loading...»\n          : hasNextPage\n          ? «Load More»\n          : «You have no more data»}\n      </button>\n    </>\n  );\n};\n```", "```js\nconst usernameList = [\"userOne\", \"userTwo\", \"userThree\"];\nconst ExampleTwo = () => {\n  const multipleQueries = useQueries({\n    queries: usernameList.map((username) => {\n      return {\n        queryKey: [{ queryIdentifier: \"api\", username }],\n        queryFn: fetchData,\n      };\n    }),\n  });\n  return (\n    <div>\n      {multipleQueries.map(({ data, isFetching }) => (\n        <p>{isFetching ? \"Fetching data...\" : data.hello}\n          </p>\n      ))}\n    </div>\n  );\n};\n```"]