- en: Chapter 2. Pages and Dialogs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。页面和对话框
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论：
- en: Writing a single-page template application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单页模板应用程序
- en: Writing a multi-page template application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写多页模板应用程序
- en: Prefetching pages for faster navigation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预取页面以实现更快的导航
- en: Using the DOM cache to improve performance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DOM缓存以提高性能
- en: Custom styling a dialog
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义样式对话框
- en: Using CSS to create a bouncing page transition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS创建跳转页面过渡效果
- en: Using JS to create a slide and fade page transition
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JS创建幻灯片和淡入淡出的页面过渡效果
- en: Using `data-url` to handle a login page navigation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`data-url`处理登录页面导航
- en: Using the History API to create a custom error pop up
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用History API创建自定义错误弹出框
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: A **Page** is the basic jQuery Mobile object written within a `<div data-role="page">`
    container that gets displayed on the screen. It can contain the header, the page
    content, and the footer. You can embed various HTML5 controls and widgets within
    a page. The jQuery Mobile framework automatically enhances and displays all these
    controls, making them tap-friendly (finger-friendly). Your application can have
    a series of individual HTML files each representing a single page, or it can have
    one single HTML file containing multiple page `div` containers within it. You
    can provide links to open other pages within a page, and when the user clicks
    on a link, the new page opens using Ajax with CSS3 animation. The current page
    is then hidden from view.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**页面**是写在`<div data-role="page">`容器内的基本jQuery Mobile对象，它显示在屏幕上。它可以包含页眉、页面内容和页脚。您可以在页面内嵌入各种HTML5控件和微件。jQuery
    Mobile框架会自动增强和显示所有这些控件，使它们适合轻触（手指触摸）。您的应用程序可以有一系列单独的HTML文件，每个文件代表一个单独的页面，或者可以有一个包含多个页面`div`容器的单个HTML文件。您可以提供链接以在一个页面内打开其他页面，用户点击链接时，新页面将使用Ajax和CSS3动画打开。当前页面然后不再显示。
- en: A **Dialog** is a page having the `data-role="dialog"` attribute. You can also
    load a page as a dialog by adding the `data-rel="dialog"` attribute to the page
    link. The dialog is styled differently from a page, and it appears in the middle
    of the screen above the page. The dialog also provides a close button in its header.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**对话框**是具有`data-role="dialog"`属性的页面。您还可以通过为页面链接添加`data-rel="dialog"`属性来将页面加载为对话框。对话框的样式与页面不同，并且出现在页面上方的屏幕中间。对话框的标题栏还提供了一个关闭按钮。
- en: Writing a single-page template application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单页模板应用程序
- en: In a **single-page template** application, each page of the application will
    have its own HTML file. A page is wrapped within a page container as `<div data-role="page">`.
    When you launch the app, the jQuery Mobile framework will load the first page
    of the app (or the main page) into the DOM, whose reference is held all through
    the app cycle. The main page just gets hidden when the user navigates to another
    page, which now is marked as an active page. Except for the main page, all other
    pages get removed from the DOM when the user navigates away from them. Navigation
    between the pages is specified using anchor links. The anchor links are decorated
    as buttons using the `data-role="button"` attribute. On clicking any link, navigation
    occurs with some cool CSS3 transitions, and the new page is pulled in via Ajax.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在**单页模板**应用程序中，应用程序的每个页面都有自己的HTML文件。页面包装在`<div data-role="page">`内。启动应用程序时，jQuery
    Mobile框架将第一页（或主要页面）加载到DOM中，并在整个应用程序周期中保留其引用。当用户导航到另一个页面时，主页面仅被隐藏，并且现在标记为活动页面的其他所有页面都会从DOM中被删除。页面之间的导航使用锚链接指定。锚链接使用`data-role="button"`属性装饰为按钮。单击任何链接时，将使用一些精彩的CSS3过渡进行导航，并通过Ajax拉入新页面。
- en: This recipe shows you how to create a single-page template application and navigate
    between the pages of the app.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例向您展示如何创建一个单页模板应用程序，并在应用程序的页面之间导航。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/single-page` sources folder.
    You can launch this code using the URL `http://localhost:8080/02/single-page/main.html`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/single-page`源文件夹中复制此示例的完整代码。您可以使用`http://localhost:8080/02/single-page/main.html`网址启动此代码。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Carry out the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html`, and add a page container with the header, footer, and page
    content to it. Add a link to open `page2.html`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`，并向其中添加一个包含页眉、页脚和页面内容的页面容器。添加打开`page2.html`的链接：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since this is a single-page template app, add each page to its own HTML file.
    Next, create `page2.html` and add the second page of the app to it. Add a link
    to go back to `main.html`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个单页模板应用程序，将每个页面添加到自己的HTML文件中。接下来，创建`page2.html`并将应用程序的第二个页面添加到其中。添加一个链接以返回到`main.html`。
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Create `main.html`, and add a page to it using the `<div>` page container with
    the `data-role="page"` attribute specified. Add the header, footer, and page content,
    as shown in the code. Now, add an anchor link to the page content to open the
    second page, `page2.html`. You can style this link as a button by using the `data-role="button"`
    attribute.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`main.html`，并使用指定了`data-role="page"`属性的`<div>`页面容器向其中添加页面。按照代码所示的方式，添加页眉、页脚和页面内容。现在，在页面内容中，添加一个锚链接以打开第二页`page2.html`。你可以使用`data-role="button"`属性来将此链接样式化为按钮。
- en: Next, create `page2.html` and add a page to it using the `<div>` page container
    with the `data-role="page"` attribute specified. Add the header, footer, and page
    content to it, as shown in the code listing. Here, in the page content, add an
    anchor link to go back to `main.html`. Also, set the `data-role="button"` attribute
    to style this link as a button.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建`page2.html`并使用指定了`data-role="page"`属性的`<div>`页面容器向其中添加页面。按照代码清单中所示的方式，添加页眉、页脚和页面内容。在页面内容中，添加一个锚链接以返回到`main.html`。同时，设置`data-role="button"`属性来将此链接样式化为按钮。
- en: 'Now, when you launch the app, the `main.html` page is first loaded into the
    DOM. This page stays in the DOM throughout the life cycle of the app. The following
    screenshot is displayed:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你启动应用程序时，`main.html`页面首先加载到DOM中。此页面在整个应用程序的生命周期内保持在DOM中。如下图所示：
- en: '![How it works...](img/7225_02_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_02_01.jpg)'
- en: 'When you click on the button to open `page2.html`, the main page is hidden
    from view, and `page2.html` is displayed and made active, as shown in the following
    screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮打开`page2.html`时，主页面被隐藏，`page2.html`被显示并激活，如下图所示：
- en: '![How it works...](img/7225_02_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_02_02.jpg)'
- en: Now, click on the link to go back to `main.html`. The browser opens the `main.html`
    page again and hides `page2.html`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击链接返回到`main.html`。浏览器再次打开`main.html`页面并隐藏`page2.html`。
- en: In `page2.html`, the anchor button has a `data-rel="back"` attribute. This indicates
    that the previous page in the browser history should be loaded. The `href` link
    is ignored and so you can set it to `#`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`page2.html`中，锚按钮具有`data-rel="back"`属性。这表示应该加载浏览器历史记录中的上一个页面。`href`链接将被忽略，因此可以将其设置为`#`。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Setting the title for a single-page template app**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**为单页模板应用程序设置标题**'
- en: Use the `<title>` tag to set the page title for each page in a single-page app.
    This ensures that relevant titles are displayed as you navigate through the various
    pages in your app.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<title>`标签为单页应用的每个页面设置页面标题。这样可以确保在浏览应用程序的各个页面时显示相关的标题。
- en: There's more...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It is recommended that most applications use single-page templates, for the
    following reasons:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐大多数应用程序使用单页模板，原因如下：
- en: Pages are lighter, cleaner, and more modular, and thus easier to maintain.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面更轻量、更干净、更模块化，因此更易于维护。
- en: The DOM size is relatively smaller.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM大小相对较小。
- en: Pages work well on multiple platforms and environments. They work even where
    JavaScript is not supported. You can target more devices this way.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面在多个平台和环境下工作良好。它们即使在不支持JavaScript的情况下也可以工作。这样可以使你的应用程序能够覆盖更多设备。
- en: 'On the flip side:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面：
- en: It consumes more bandwidth as each page visit generates a new request.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次访问页面时都会生成一个新的请求，这会消耗更多的带宽。
- en: Opening a previously loaded page again will generate a fresh request.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次打开先前加载的页面将生成一个全新的请求。
- en: First load is faster, but every subsequent page has to be fetched.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次加载更快，但随后每个页面都必须被获取。
- en: To conclude, single-page template apps are more suited for larger applications
    and in situations where you want to target as many platforms as possible.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，单页模板应用程序更适合于较大的应用程序以及希望覆盖尽可能多平台的情况。
- en: Turning off Ajax navigation
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭Ajax导航
- en: In this recipe, in `#page2`, the h`r`ef value is set to `#`. If you set the
    `href` value to the absolute or relative URL of the page, that is `href="main.html"`,
    then Ajax navigation will still work. To prevent pages being loaded via Ajax,
    add the `data-ajax="false"` attribute to the link. The framework will not use
    the custom CSS3 transitions when Ajax is turned off.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，在`#page2`中，`href`值设置为`#`。如果您将`href`值设置为页面的绝对或相对URL，即`href="main.html"`，那么Ajax导航仍将工作。要防止通过Ajax加载页面，请将`data-ajax="false"`属性添加到链接中。当关闭Ajax时，框架将不使用自定义CSS3过渡。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Using URL instead of data-rel="back"**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用URL而不是`data-rel="back"`**'
- en: It is always better to use URLs in `href` of the anchor link while navigating
    in single page apps. This way, Ajax navigation would work where Ajax is supported.
    In C grade browsers, where Ajax is not supported, the app would still continue
    to work, since it uses `href` for navigation. In such browsers, if your app relies
    only on the `data-rel="back"` attribute, and does not use `href`, then page navigation
    would break down.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在单页应用程序中导航时，最好始终在锚链接的`href`中使用URL。这样，Ajax导航将在支持Ajax的情况下工作。在不支持Ajax的C级浏览器中，应用程序仍将继续工作，因为它使用`href`进行导航。在这样的浏览器中，如果您的应用程序仅依赖于`data-rel="back"`属性，而不使用`href`，那么页面导航将中断。
- en: Using data-rel and data-direction
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`data-rel`和`data-direction`
- en: When you add both the `href` and `data-rel="back"` attributes to an anchor link,
    the `href` attribute is ignored by the framework. The page will only consider
    the `data-rel` attribute and navigate "back"; that is, it will navigate to the
    page present as the previous entry in the browser history stack. If you specify
    the `data-direction="reverse"` attribute, the framework will reverse the direction
    of the most recent page transition used. The `data-direction` attribute does not
    depend on the `data-rel` attribute, and can be used independently in any transition.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当您同时向锚链接添加`href`和`data-rel="back"`属性时，框架将忽略`href`属性。页面将仅考虑`data-rel`属性并导航“返回”;
    也就是说，它将导航到浏览器历史堆栈中作为前一个条目的页面。如果指定了`data-direction="reverse"`属性，则框架将反转最近使用的页面转换的方向。`data-direction`属性不依赖于`data-rel`属性，并且可以在任何转换中独立使用。
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Page container is optional
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面容器是可选的
- en: Specifying the `<div data-role="page">` page container is optional in a single-page
    template application. The page contents are automatically wrapped with a page
    container by the jQuery Mobile framework.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在单页模板应用程序中，指定`<div data-role="page">`页面容器是可选的。页面内容将由jQuery Mobile框架自动包装为页面容器。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always use a `div` page container to wrap your page. It is easier to read and
    maintain the code. It also allows you to add page-specific data attributes such
    as `data-theme` to your page.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 始终使用`div`页面容器来包装您的页面。这样做更易读，更易维护代码。它还允许您向页面添加特定于页面的数据属性，例如`data-theme`。
- en: See also
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a multi-page template application*, *Prefetching pages for faster
    navigation*, and *Using the DOM Cache to improve performance* recipes
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写多页模板应用*、*为了更快的导航而预取页面*和*使用DOM缓存来提高性能*的技巧'
- en: The *Writing your first jQuery Mobile application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Get Rolling"), *Introduction*
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写您的第一个jQuery Mobile应用程序*在[第1章](ch01.html "第1章。开始")，*介绍*'
- en: Writing a multi-page template application
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写多页模板应用
- en: In a multi-page template application, the HTML file will have multiple pages
    in it. Each page is wrapped within a page container as `<div data-role="page">`.
    The page ID is used to identify the pages for linking or invoking any actions
    on them. The page ID must be unique within your app. When you launch the app,
    the jQuery Mobile framework loads all the available pages into the DOM and displays
    the first page it finds in the HTML. Navigation between the pages is specified
    by using anchor links, and you can decorate these links as buttons by using the
    `data-role="button"` attribute. On clicking any link, navigation occurs with some
    cool CSS3 transitions, and the new page is pulled in via Ajax. This recipe shows
    you how to create a multi-page template application and navigate between the multiple
    pages it contains.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在多页面模板应用程序中，HTML 文件将包含多个页面。每个页面都包装在 `<div data-role="page">` 中。页面 ID 用于标识页面以便在它们上面进行链接或调用任何操作。页面
    ID 在你的应用程序中必须是唯一的。当你启动应用程序时，jQuery Mobile 框架会将所有可用页面加载到 DOM 中，并显示在 HTML 中找到的第一个页面。页面之间的导航通过使用锚链接指定，并且你可以通过使用
    `data-role="button"` 属性将这些链接装饰为按钮。单击任何链接时，导航通过一些很酷的 CSS3 过渡发生，并且通过 Ajax 拉入新页面。本配方向你展示如何创建一个多页面模板应用程序，并在其中多个页面之间导航。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/multi-page` sources folder.
    You can launch this code using the URL `http://localhost:8080/02/multi-page/main.html`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/multi-page`源文件夹中复制此配方的完整代码。你可以使用 URL `http://localhost:8080/02/multi-page/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Carry out the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create `main.html`, and add the `#main` page to it. Define the header, page
    content, and footer, as shown in the following code snippet. Add a link to open
    the `#page2` page in the page content:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main.html`，并向其添加 `#main` 页面。按照以下代码片段中所示的方式定义页眉、页面内容和页脚。在页面内容中添加一个链接来打开 `#page2`
    页面：
- en: '[PRE4]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, in `main.html`, add the second `#page2` page in its own page `div` container,
    as shown in the following code snippet. Add the header, page content, and footer
    to this page. Finally, add a link to go back to the `#main` page in its page content:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `main.html` 中，如下所示地在其自己的页面 `div` 容器中添加第二个 `#page2` 页面。向此页面添加页眉、页面内容和页脚。最后，在页面内容中添加一个链接以返回
    `#main` 页面：
- en: '[PRE5]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从你在[http://www.PacktPub.com](http://www.PacktPub.com)账户购买的所有 Packt 书籍中下载示例代码文件。如果你在其他地方购买了这本书，你可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册，直接将文件通过电子邮件发送给你。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create `main.html`, and add two pages, `#main` and `#page2`, to it. First, add
    the `#main` page using the `<div>` page container with the `data-role="page"`
    attribute specified. Add the header, footer, and page content, as shown in the
    code. Now, add an anchor link to the page content to open the second page, `#page2`.
    You can style this link as a button by using the `data-role="button"` attribute.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`main.html`，并向其添加两个页面，`#main` 和 `#page2`。首先，使用指定了 `data-role="page"` 属性的 `<div>`
    页面容器添加 `#main` 页面。按照代码中所示的方式添加页眉、页脚和页面内容。现在，添加一个锚链接到页面内容，以打开第二个页面 `#page2`。你可以通过使用
    `data-role="button"` 属性将此链接样式化为按钮。
- en: Next, add the `#page2` page using the `<div>` page container, with the `data-role="page"`
    attribute specified. Add the header, footer, and page content to it as shown in
    the code listing. Here, in the page content, add the anchor link to go back to
    the `#main` page. Set the `data-role="button"` attribute to style it as a button.
    Also, add the `data-rel="back"` attribute to it. This indicates to the jQuery
    Mobile framework that this link should open the previous page available in the
    browser history.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用指定了 `data-role="page"` 属性的 `<div>` 页面容器添加 `#page2` 页面。按照代码列表中所示的方式向其添加页眉、页脚和页面内容。在这里，页面内容中添加了回到
    `#main` 页面的锚链接。设置 `data-role="button"` 属性将其样式化为按钮。还将 `data-rel="back"` 属性添加到其中。这指示
    jQuery Mobile 框架，此链接应打开浏览器历史记录中可用的上一页。
- en: 'Now, when you launch the app, all the pages are loaded into the DOM and they
    stay in the DOM throughout the life cycle of the app. The framework opens the
    first page it finds. So, `#main` is displayed with a button to open `#page2`,
    as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你启动应用时，所有页面都加载到DOM中，并在整个应用的生命周期内保留在DOM中。框架将打开它找到的第一个页面。所以，`#main`显示有一个按钮可以打开`#page2`，如下所示：
- en: '![How it works...](img/7225_02_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_02_03.jpg)'
- en: 'When you click on the button to open the second page, the `#main` page is hidden
    from view, and the `#page2` page is displayed and made active, as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击按钮打开第二个页面时，`#main`页面会从视图中隐藏，而`#page2`页面会显示并激活，如下所示：
- en: '![How it works...](img/7225_02_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_02_04.jpg)'
- en: Finally, click on the link to go back to the `#main` page. Since `data-rel="back"`
    was used, the browser opens the `#main` page again and hides `#page2`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击链接返回`#main`页面。由于使用了`data-rel="back"`，浏览器会再次打开`#main`页面并隐藏`#page2`。
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Setting the title for a multi-page template app**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**为多页面模板应用设置标题**'
- en: Use the `<title>` tag to set the page title for the first or the main page of
    the multi-page template app. Use the `data-title` attribute to set the title of
    all the other pages. This will ensure that the correct titles are shown for each
    page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<title>`标签为多页面模板应用的第一个或主要页面设置页面标题。使用`data-title`属性为所有其他页面设置标题。这将确保每个页面显示正确的标题。
- en: There's more...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有...
- en: 'It is recommended that the following factors be considered before using a multi-page
    template to build your app:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用多页面模板构建应用之前，建议考虑以下因素：
- en: A multi-page template application is heavier due to the large DOM size.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多页面模板应用由于DOM尺寸较大而更加沉重。
- en: The DOM size is relatively larger and heavier because all the pages are loaded
    into it upfront.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于所有页面都预加载到DOM中，因此DOM尺寸较大且更沉重。
- en: The application needs JavaScript support. This limits your choice of target
    platforms, and you might have to ignore many popular legacy platforms. But this
    exclusion list is getting thinner by the day as the older phones/platforms get
    phased out.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用需要JavaScript支持。这会限制你的目标平台选择，并且你可能需要忽略许多流行的旧平台。但随着老旧电话/平台逐渐淘汰，这个排除列表正在变得越来越短。
- en: 'On the plus side:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此外：
- en: Only the first page load is slower, but subsequent page navigations are fast.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有第一次页面加载较慢，但后续的页面导航都很快。
- en: All the pages are pre-loaded in the DOM, so no new requests (to the server)
    are required for subsequent page navigations. This means lesser bandwidth.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有页面都预加载到DOM中，因此后续页面导航不需要新请求（到服务器）。这意味着更少的带宽。
- en: To conclude, multi-page template apps are more suited for relatively smaller
    applications and situations where you know the capabilities of your target platforms,
    including JavaScript support.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，多页面模板应用更适合相对较小的应用和你知道目标平台能力（包括JavaScript支持）的情况。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The updated list of browsers and platforms supported by jQuery Mobile is available
    at [http://www.jquerymobile.com/gbs](http://www.jquerymobile.com/gbs). It also
    details the grade of support provided on these platforms.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile支持的浏览器和平台的更新列表可在[http://www.jquerymobile.com/gbs](http://www.jquerymobile.com/gbs)找到。它还详细说明了这些平台上提供的支持等级。
- en: Using transitions
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用过渡效果
- en: 'The `data-transition` attribute can be used to specify various transitions
    that are available by default with jQuery Mobile. The following code opens `#page2`
    using a flip transition:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`data-transition`属性可用于指定jQuery Mobile默认可用的各种过渡效果。下面的代码使用了翻转过渡效果来打开`#page2`：'
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Turning off Ajax navigation
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭Ajax导航
- en: If you pass the `data-ajax="false"` attribute while loading a page in a multi-template
    app, it does not completely stop Ajax navigation. The default fade transition
    will then be used to load the pages regardless of the transition specified in
    the `data-transition` attribute.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在加载多模板应用中的页面时传递了`data-ajax="false"`属性，则这并不完全停止了Ajax导航。无论`data-transition`属性中指定的过渡效果如何，都将使用默认的淡入淡出过渡效果来加载页面。
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Page container is mandatory
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面容器是必须的
- en: Specifying the `<div data-role="page">` page container is mandatory for all
    the pages within a multi-page template application. Use the page container for
    all your apps and all your pages regardless of whether they use the single-page
    or multi-page templates.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多页面模板应用内的所有页面，指定`<div data-role="page">`页面容器是必需的。无论是单页面模板还是多页面模板，都使用页面容器来制作你的应用和所有页面。
- en: See also
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Writing a single-page template application*, *Prefetching pages for faster
    navigation*, and *Using the DOM Cache to improve performance* recipes
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写单页模板应用程序*、*为了更快地导航而预取页面*和*使用DOM缓存来提高性能*的配方'
- en: The *Writing your first jQuery Mobile application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Get Rolling"), *Introduction*
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写您的第一个jQuery Mobile应用程序*在[第1章](ch01.html "第1章。入门")中的*介绍*中的配方'
- en: Prefetching pages for faster navigation
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了更快地导航而预取页面
- en: Using a single-page template for your mobile app makes your mobile app faster
    and lighter. But you have to fetch each page during navigation. You can see the
    `ui-loader` spinning icon every time a page loads. This problem does not happen
    with a multi-page template application, as all the pages are already preloaded
    into the DOM. By using the **prefetch** feature, a single-page template application
    can be made to mimic the multi-page template application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单页模板制作移动应用程序使您的移动应用程序更快、更轻便。但是在导航期间必须获取每个页面。每次加载页面时，您都可以看到`ui-loader`旋转图标。这个问题在多页模板应用程序中不会发生，因为所有页面都已经预加载到DOM中。通过使用**预取**功能，可以使单页模板应用程序模仿多页模板应用程序。
- en: A page marked for prefetch is loaded in the background and is immediately available
    when the user tries to open it. You can prefetch pages in two ways. The first
    is by just adding the `data-prefetch` attribute to the anchor link. The second
    way is by using JavaScript to call the `loadPage()` method. This recipe shows
    you how to improve page loading speed by prefetching pages in your jQuery Mobile
    app.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 预取的页面在后台加载，并在用户尝试打开它时立即可用。可以通过两种方式预取页面。第一种是只需将`data-prefetch`属性添加到锚链接。第二种方式是使用JavaScript调用`loadPage()`方法。本配方向您展示如何通过在您的jQuery
    Mobile应用程序中预取页面来提高页面加载速度。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/prefetch` sources folder.
    You can launch this code using the URL `http://localhost:8080/02/prefetch/main.html`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/prefetch`源文件夹中复制此配方的完整代码。您可以使用URL `http://localhost:8080/02/prefetch/main.html`来启动此代码。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps to be followed are:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 应该遵循的步骤是：
- en: 'Create `main.html` and add two links to it. The first link points to `prefetch.html`
    and the second link to `prefetch-JS.html`. After the `main.html` file is loaded,
    the linked pages in it can be prefetched in the background using the `data-prefetch`
    attribute on the first link, as shown in the following code snippet:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`并向其添加两个链接。第一个链接指向`prefetch.html`，第二个链接指向`prefetch-JS.html`。在加载`main.html`文件后，其中的链接页面可以使用第一个链接上的`data-prefetch`属性在后台预取，如以下代码片段所示：
- en: '[PRE8]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, add the JavaScript given in the following code snippet to the `<head>`
    section of `main.html`. Here, use the `loadPage()` method to load the `prefetch-JS.html`
    file in the background, into the DOM:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下代码片段中给出的JavaScript添加到`main.html`的`<head>`部分。在这里，使用`loadPage()`方法将`prefetch-JS.html`文件后台加载到DOM中：
- en: '[PRE9]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, create the `prefetch.html` file as shown in the following code snippet.
    This is a regular page which is prefetched in the `main.html` page (in step 1),
    using the `data-prefetch` attribute. Also add a link to navigate back to `main.html`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下代码片段所示创建`prefetch.html`文件。这是一个常规页面，通过`data-prefetch`属性在`main.html`页面（在步骤1中）中预取。还要添加一个链接以返回到`main.html`：
- en: '[PRE10]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will see that in step 2, the `prefetchJS.html` was prefetched using JavaScript.
    Now, create `prefetchJS.html`, as shown in the following code snippet, and add
    a link to navigate back to `main.html`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到在第2步中，使用JavaScript预取了`prefetchJS.html`。现在，按照以下代码片段所示创建`prefetchJS.html`，并添加一个链接以返回到`main.html`：
- en: '[PRE11]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create `main.html`, and add two links to it. Point the first link to `prefetch.html`
    and set the `data-prefetch` attribute to this link. This page is now automatically
    fetched in the background and is immediately available for opening when `main.html`
    is loaded.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`main.html`，并向其添加两个链接。将第一个链接指向`prefetch.html`，并将`data-prefetch`属性设置为此链接。此页面现在在`main.html`加载时会自动在后台获取，并在打开`main.html`时立即可用。
- en: Point the second link to the `prefetch-JS.html` file. To prefetch this page
    using JavaScript, add an event handler for the `pageshow` event of `#main`. In
    this callback function, invoke the `loadPage()` method to fetch the `prefetch-JS.html`
    file. Also set the `showLoadMsg` option as `false`, to prevent the spinning `page
    ui-loader` message from being shown. Next, create the two HTML files as shown
    in the code. Add the link to navigate back to `main.html` in both the pages.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将第二个链接指向`prefetch-JS.html`文件。要使用 JavaScript 预取此页面，请为`#main`的`pageshow`事件添加事件处理程序。在此回调函数中，调用`loadPage()`方法以获取`prefetch-JS.html`文件。还设置`showLoadMsg`选项为`false`，以防止显示旋转的`页面
    ui-loader`消息。接下来，按照代码中所示创建两个 HTML 文件。在这两个页面中都添加返回到`main.html`的链接。
- en: 'Now, when you launch the app, both the HTML files are prefetched. You can observe
    this prefetch behavior using your browser''s code inspector, as shown in the following
    screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您启动应用程序时，两个 HTML 文件都会被预取。您可以使用浏览器的代码检查器观察此预取行为，如下面的截图所示：
- en: '![How it works...](img/7225_02_05.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_02_05.jpg)'
- en: This screenshot shows the code inspector in the Google Chrome browser right
    after loading the `main.html` page. We can see that both the `#prefetch` and `#jsprefetch`
    pages are already prefetched and available in the DOM. Now, navigating to these
    prefetched pages is almost immediate, and the spinning `ui-loader` icon animation
    does not show up. This makes your app much faster and gives a better user experience
    to the user. If prefetch was not used, the page would have loaded only when you
    navigated to it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了在加载`main.html`页面后的 Google Chrome 浏览器中的代码检查器。我们可以看到`#prefetch`和`#jsprefetch`页面已经被预取并在
    DOM 中可用。现在，导航到这些预取页面几乎是即时的，旋转的`ui-loader`图标动画不会显示出来。这使得您的应用程序速度更快，并为用户提供了更好的用户体验。如果没有使用预取，只有在导航到它时才会加载页面。
- en: Using the `data-prefetch` attribute is the easier way to prefetch pages, as
    you don't have to write any further code with it. But prefetching a page with
    JavaScript using `loadPage()` allows you to provide more options to the `loadPage()`
    method and have a better control over the behavior of your page load. You can
    also build in conditional prefetch with this approach.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`data-prefetch`属性是预取页面的更简单方法，因为您不必再写任何代码。但是，使用`loadPage()`用 JavaScript 预取页面允许您向`loadPage()`方法提供更多选项，并更好地控制页面加载的行为。您还可以使用此方法构建有条件的预取。
- en: There's more...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Avoid using prefetch on too many pages, as all the pages have to be fetched
    and stored in the DOM. This means more memory utilization, and memory is a scarce
    resource on mobile devices. This will slow down your app. More pages prefetched
    also means more bandwidth utilized. So use it judiciously.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在太多页面上使用预取，因为所有页面都必须被获取并存储在 DOM 中。这意味着更多的内存利用率，而内存在移动设备上是一种稀缺资源。这会减慢您的应用程序。预取的页面越多，意味着利用的带宽越多。因此，请谨慎使用。
- en: When prefetch is not completed
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当预取未完成时
- en: If a page hasn't been fully prefetched and you try to navigate to that page,
    then the `ui-loader` spinner comes up and the page is shown only after the page
    is completely fetched. This could occur on slower connections.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面尚未完全预取，并且您尝试导航到该页面，则`ui-loader`旋转器将出现，并且只有在页面完全获取后才会显示该页面。这可能发生在较慢的连接上。
- en: Prefetched pages are not permanently cached
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预取的页面不会永久缓存
- en: When a page is prefetched, it is available in the DOM. If you navigate to this
    page and then navigate away, the page is automatically removed from the DOM. So
    if it is a frequently visited page, you have to add it to the DOM cache instead.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面被预取时，它会在 DOM 中可用。如果您导航到此页面，然后再次导航，该页面将自动从 DOM 中删除。因此，如果它是一个频繁访问的页面，您必须将其添加到
    DOM 缓存中。
- en: See also
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请参阅
- en: The *Using the DOM cache to improve performance* recipe
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 DOM 缓存来提高性能* 配方'
- en: The *Using loadPage() to load a page* recipe in [Chapter 9](ch09.html "Chapter 9. Methods
    and Utilities"), *Methods and Utilities*
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章。方法和实用程序")*方法和实用程序*中的*使用loadPage()加载页面* 配方
- en: Using the DOM cache to improve performance
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DOM 缓存来提高性能
- en: During page navigation in a single-page template application, each new page
    is fetched and stored in the DOM. The page remains in the DOM and is removed once
    you navigate away from the page. Only the main or the first page of the app always
    remains in the DOM. As seen in the previous recipe, prefetching commonly-used
    pages could help in improving performance to some extent. But when you visit a
    prefetched page and navigate away from it, the page gets removed from the cache.
    So the problem of multiple fetching of frequently visited pages is not fully solved.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在单页模板应用程序中的页面导航期间，每个新页面都会被提取并存储在DOM中。该页面留在DOM中，并在您从该页面导航离开时被删除。只有应用程序的主页面或第一个页面始终留在DOM中。如前面的示例所示，预取常用页面可能在一定程度上有助于提高性能。但是当您访问一个预取的页面并从中导航离开时，该页面将从缓存中移除。因此，频繁访问页面的多次提取问题并未完全解决。
- en: With DOM caching, specific pages are marked to be cached in the DOM. These pages,
    once loaded, remain in the DOM all through the life cycle of the app. You can
    use the DOM cache in two ways. The first is by adding the `data-dom-cache` attribute
    to the page container of the page that is to be cached. The second way is by using
    JavaScript. This recipe shows you how to improve the performance of your app by
    using the DOM cache.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DOM缓存，特定页面会在DOM中标记为缓存。这些页面一旦加载，就会在应用程序的整个生命周期内保留在DOM中。你可以以两种方式使用DOM缓存。第一种是通过向要缓存的页面的页面容器添加`data-dom-cache`属性。第二种方式是使用JavaScript。本教程向你展示如何通过使用DOM缓存来提高应用程序的性能。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/dom-cache` sources folder.
    You can launch this code using the URL `http://localhost:8080/02/dom-cache/main.html`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/dom-cache`源文件夹复制此教程的完整代码。您可以使用URL `http://localhost:8080/02/dom-cache/main.html`启动此代码。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The steps to be followed are:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 需要遵循的步骤包括：
- en: 'Create the `main.html` file with links to navigate to the the two pages, `cached.html`
    and `cachedJS.html`. Both these pages, in turn, specify that they should be cached
    in the DOM:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`文件，并添加链接以导航到两个页面，`cached.html`和`cached-JS.html`。而这两个页面又指定它们在DOM中应该被缓存：
- en: '[PRE12]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the `cached.html` page and set the `data-dom-cache` attribute of its
    page container. Also add a button to go back to the `main.html` page:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`cached.html`页面，并将其页面容器的`data-dom-cache`属性设置为true。还添加一个按钮以返回到`main.html`页面：
- en: '[PRE13]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, create the `cached-JS.html` file, and cache it by using JavaScript
    added to the page `div` container, as shown in the following code snippet. Add
    a button to navigate back to `main.html`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建`cached-JS.html`文件，并通过添加到页面的`div`容器的JavaScript来将其缓存，如下面的代码段所示。添加一个按钮以导航回到`main.html`：
- en: '[PRE14]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create `main.html` and add two links to open the `cached.html` and `cached-JS.html`
    files. Next, create the `cached.html` file with a link to go back to `main.html`.
    Here, set the `data-dom-cache="true"` attribute to the page container. This indicates
    that the page must be cached in the DOM once it is loaded.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`main.html`并添加两个链接，以打开`cached.html`和`cached-JS.html`文件。接下来，创建`cached.html`文件，并添加一个返回`main.html`的链接。在这里，将`data-dom-cache="true"`属性设置为页面容器。这表示页面在加载后必须在DOM中缓存。
- en: Now create the `cached-JS.html` file with a link to return to `main.html`. Here,
    add the given script to the page `div` container. In the script, set the `domCache`
    option on the page to `true`. Now, when this page is loaded, it gets cached in
    the DOM.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建`cached-JS.html`文件，并添加返回到`main.html`的链接。在这里，将给定的脚本添加到页面的`div`容器中。在脚本中，将页面的`domCache`选项设置为`true`。现在，当加载此页面时，它将被缓存在DOM中。
- en: Launch the app and navigate between the pages. During page navigation, each
    new page is fetched and stored in the DOM. You can observe the DOM cache behavior
    using your browser's code inspector. The following image shows the Chrome code
    inspector snapshot after both the pages were visited and cached in the DOM. The
    current active page is shown as `#main`; this is indicated by the `ui-page-active`
    class added to its page's `div` container. The other two pages are cached and
    are also seen available in the DOM.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序并在页面之间导航。在页面导航期间，每个新页面都会被提取并存储在DOM中。您可以使用浏览器的代码检查器观察DOM缓存的行为。以下图片显示了Chrome代码检查器快照，显示了两个页面都被访问并在DOM中被缓存后的情况。当前活动的页面显示为`#main`；这通过将`ui-page-active`类添加到页面的`div`容器来指示。其他两个页面也被缓存，并且在DOM中也是可用的。
- en: '![How it works...](img/7225_02_06.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_02_06.jpg)'
- en: Tip
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Adding scripts to the page div and not the <head> element**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**将脚本添加到页面的div而不是<head>元素**'
- en: When using Ajax navigation, the `<head>` section is processed only on the first
    page or the main page of your app. The `<head>` element of each of the remaining
    pages is ignored and only their page's `div` containers are processed. Thus, to
    ensure that your script is executed in these pages, you have to include the `<script>`
    tag within the page's `div` container.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Ajax 导航时，`<head>`部分仅在第一个页面或应用程序的主页面上处理。忽略了其余页面的`<head>`元素，仅处理它们页面的`div`容器。因此，为了确保您的脚本在这些页面中执行，您必须在页面的`div`容器内包含`<script>`标签。
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to cache all pages ever visited in your app, it becomes cumbersome
    to add the caching option in each of these pages. There is a way to do this globally
    using JavaScript. Add the following script to the `<head>` section of your main
    page. Now, every page visited automatically gets cached in the DOM.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想缓存应用程序中曾经访问过的所有页面，那么在每个页面中添加缓存选项将变得很麻烦。有一种方法可以使用 JavaScript 在全局范围内执行此操作。将以下脚本添加到主页的`<head>`部分。现在，每次访问的页面都会自动在
    DOM 中缓存起来。
- en: '[PRE15]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: DOM caching can slow down your app
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DOM 缓存可能会减慢应用程序的运行速度
- en: Having a large number of pages cached in the DOM could make your app very heavy
    and slow it down. In such situations, you will have to write extra code to manage
    the cached pages in the DOM, and perform any clean ups that are required. So,
    use DOM caching on selected frequently accessed pages only.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DOM 中缓存大量页面可能会使您的应用程序变得非常笨重，并减慢其运行速度。在这种情况下，您将不得不编写额外的代码来管理 DOM 中缓存的页面，并执行任何所需的清理操作。因此，只在选定的频繁访问页面上使用
    DOM 缓存。
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Prefetching pages for faster navigation* recipe
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*预取页面以加快导航速度* 示例'
- en: Custom styling a dialog
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义对话框样式
- en: You can style a page as a dialog by using the `data-role="dialog"` attribute
    on the page container. You can also specify the `data-rel="dialog"` attribute
    in the anchor link used to open the page. The page now gets styled as a dialog,
    and opens with a pop transition. When you add a header to the dialog, a close
    icon is created on the header, by default, in the left side of the header. In
    some applications/platforms, you might want to position this close button on the
    right side of the header. There is no ready option available to change this icon's
    position. This recipe shows you how to build a dialog with a custom styled header
    to position the close button at the right side of the header.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在页面容器上使用`data-role="dialog"`属性来将页面样式化为对话框。您还可以在用于打开页面的锚链接中指定`data-rel="dialog"`属性。页面现在会被样式化为对话框，并以弹出过渡方式打开。当您向对话框添加标题时，默认情况下，关闭图标会在标题的左侧创建。在某些应用程序/平台中，您可能希望将此关闭按钮定位在标题的右侧。没有现成的选项可用来更改此图标的位置。本示例向您展示了如何构建一个具有自定义样式标题的对话框，以将关闭按钮定位在标题的右侧。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/custom-dialog` sources folder.
    You can launch this code using the URL `http://localhost:8080/02/custom-dialog/main.html`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/custom-dialog`源文件夹中复制此示例的完整代码。你可以使用网址`http://localhost:8080/02/custom-dialog/main.html`来运行此代码。
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps to be followed are:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 需要执行的步骤是：
- en: 'Create `main.html` with the `#main` page. Add a link here to open the `#customdialog`
    page as a dialog using the `data-rel="dialog"` attribute:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`#main`页面创建`main.html`。在这里添加一个链接，以使用`data-rel="dialog"`属性将`#customdialog`页面作为对话框打开：
- en: '[PRE16]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the `#customdialog` page in `main.html`, and add the custom header to
    the dialog that positions the close button on the right side of the header. The
    default header enhancement is prevented in this code:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.html`中创建`#customdialog`页面，并将自定义标题添加到对话框中，将关闭按钮定位在标题的右侧。在此代码中阻止了默认标题的增强功能：
- en: '[PRE17]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, add the page content with a link to go back to the `#main` page:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加页面内容并添加一个链接，以返回到`#main`页面：
- en: '[PRE18]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Create `main.html` with two pages, `#main` and `#customdialog`, in it. Add
    a link in the `#main` page to open the `#customdialog` page as a dialog, by setting
    the `data-rel="dialog"` attribute. Next, create the `#customdialog` page and add
    a button to go back to the `#main` page. Now, in the header of `#customdialog`,
    do not use the `data-role="header"` attribute. This will prevent the dialog header
    from being enhanced with the default style. The close icon will not be placed
    at the left side of the header now. You can now add your custom header and set
    custom styles to it, as given in the code listing earlier. Launch the app and
    open the dialog, you will see the dialog pop up. This dialog now has a custom
    styled header with the close icon on the right side of the header, as shown in
    the following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 创建包含两个页面`#main`和`#customdialog`的`main.html`。在`#main`页面中添加一个链接，以设置`data-rel="dialog"`属性打开`#customdialog`页面作为对话框。接下来，创建`#customdialog`页面，并添加一个按钮返回`#main`页面。现在，在`#customdialog`的标题中，不要使用`data-role="header"`属性。这将防止对话框标题使用默认样式进行增强。关闭图标现在不会放置在标题的左侧。现在，可以添加自定义标题并对其进行自定义样式设置，就像之前的代码清单中所示。启动应用程序并打开对话框，您将看到对话框弹出。此对话框现在具有自定义样式的标题，并且关闭图标位于标题的右侧，如以下屏幕截图所示：
- en: '![How it works...](img/7225_02_07.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_02_07.jpg)'
- en: To understand how the custom style was arrived at, first create a page that
    opens a regular dialog. Using the code inspector of your browser and observe the
    code enhancements done by the jQuery Mobile framework to the header of the dialog.
    Copy this generated code "as is" into your custom dialog code. Then you have to
    make the changes mentioned in the following sections.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何得到自定义样式，首先创建一个打开常规对话框的页面。使用浏览器的代码检查器，并观察jQuery Mobile框架对对话框标题所做的代码增强。将生成的代码“原样”复制到自定义对话框代码中。然后，必须进行以下各节中提到的更改。
- en: The first change is to fix the close icon's position. You will see that the
    close action is performed with the help of an anchor link that has been added
    into the header code. Here, replace the `ui-btn-left` class with the `ui-btn-right`
    class. This will position the icon to the right in the header. The `jquery.mobile.css`
    file already has these class definitions in it.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个更改是修复关闭图标的位置。您会看到使用添加到标题代码中的锚链接执行关闭操作。在这里，将`ui-btn-left`类替换为`ui-btn-right`类。这将使图标在标题中右侧位置。`jquery.mobile.css`文件中已经包含了这些类定义。
- en: With this change, the close icon now appears at both the left and the right
    positions in the header. This is because the header still has the `data-role="header"`
    attribute. This makes the framework enhance the entire header and automatically
    add the close icon on the left side. But, since you have already added all these
    generated classes manually, you can now safely remove the `data-role="header"`
    attribute from your code. Retain all the other code and classes that you have
    added. Now, when you launch the code, you will only see a single close icon positioned
    at the right side of your header.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此更改，现在关闭图标同时出现在标题的左侧和右侧位置。这是因为标题仍然具有`data-role="header"`属性。这使得框架增强整个标题并自动在左侧添加关闭图标。但是，由于您已经手动添加了所有这些生成的类，现在可以安全地从代码中删除`data-role="header"`属性。保留您添加的所有其他代码和类。现在，当您启动代码时，您只会看到标题右侧位置上的单个关闭图标。
- en: There's more...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'This technique is a very important one. It can be used to customize how your
    jQuery Mobile apps should look and feel. The framework provides many basic options,
    elements, and attributes that you can add to your apps. The framework then enhances
    these by adding more markup code and styles internally, making it look good in
    your browser. This enhanced code is not visible in the **View Source** option
    of your browser. But, with a code inspector or debugging tool, you can view the
    enhanced code, copy it to your HTML files, tweak it, and get the result you want.
    The following screenshot shows the code inspector view for the custom dialog header
    created using this recipe:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 此技术非常重要。它可用于自定义 jQuery Mobile 应用程序的外观和感觉。该框架提供了许多基本选项、元素和属性，可以添加到您的应用程序中。然后，框架通过在内部添加更多的标记代码和样式来增强这些内容，使其在您的浏览器中看起来很好。增强的代码在浏览器的**查看源代码**选项中是不可见的。但是，通过代码检查器或调试工具，您可以查看增强的代码，将其复制到您的
    HTML 文件中，进行调整，获得您想要的结果。以下屏幕截图显示了使用此方法创建的自定义对话框标题的代码检查器视图：
- en: '![There''s more...](img/7225_02_08.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/7225_02_08.jpg)'
- en: Customizing CSS
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义 CSS
- en: 'The dialog page can further be enhanced by introducing your own styles in a
    custom CSS file. Check for all classes that have `ui-dialog` in the `jquery.mobile.css`
    file. Copy the styles that you want to tweak into your custom CSS and set appropriate
    new values. The following line of code shows a sample change where the top margin
    of the dialog is set to `-12px` instead of the default `-15px`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框页面可以通过在自定义 CSS 文件中引入自己的样式来进一步增强。检查`jquery.mobile.css`文件中所有包含`ui-dialog`的类。将要调整的样式复制到您的自定义
    CSS 中，并设置适当的新值。下面的代码行显示了一个示例更改，其中将对话框的顶部边距设置为 `-12px`，而不是默认值 `-15px`：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Adding a customized round button to the header* recipe in [Chapter 3](ch03.html
    "Chapter 3. Toolbars"), *Toolbars*
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 3 章](ch03.html "第 3 章。 工具栏")中的*向标题添加自定义圆形按钮*配方中，*工具栏*
- en: Using CSS to create a bouncing page transition
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CSS 创建弹跳页面过渡
- en: As you navigate between the pages of your app, the jQuery Mobile framework uses
    CSS3 animations to show some cool transition effects. The **fade** transition
    is used by default for pages, and the **pop** transition is used for dialogs.
    You can navigate into a page with a particular transition, and when you navigate
    out of the page, you can reverse the direction of the transition. jQuery Mobile
    comes with a default set of 10 transitions as of v1.1.1\. The jQuery Mobile online
    docs has a nice online demo showing all the available transitions. But that's
    not all; you can use CSS to create your own custom transitions and use them in
    your app. This recipe shows you how to use CSS and create a bouncing page effect
    during page transitions.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在应用程序的各个页面之间导航时，jQuery Mobile 框架使用 CSS3 动画来显示一些很酷的过渡效果。 **淡入淡出** 过渡默认用于页面，**弹出**
    过渡用于对话框。您可以使用特定过渡导航到页面，并且在导航出页面时，您可以反转过渡的方向。截至 v1.1.1 版，jQuery Mobile 自带一套默认的
    10 个过渡效果。jQuery Mobile 在线文档中有一个漂亮的在线演示，显示了所有可用的过渡效果。但这还不是全部；您可以使用 CSS 创建自己的自定义过渡效果，并在应用程序中使用它们。此配方向您展示如何使用
    CSS 并在页面过渡期间创建弹跳页面效果。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/custom-css-transition` sources
    folder. You can launch this code using the URL `http://localhost:8080/02/custom-css-transition/main.html`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/custom-css-transition`源文件夹中复制此配方的完整代码。您可以使用URL`http://localhost:8080/02/custom-css-transition/main.html`启动此代码。
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The steps to be followed are:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 应遵循的步骤是：
- en: 'Create the `customtransition.css` file, and define the `bounceup` custom transition
    as shown in the following code snippet. Animate the `Y` position property of the
    page in the CSS:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`customtransition.css`文件，并按以下代码片段所示定义`bounceup`自定义转换。在 CSS 中对页面的 `Y` 位置属性进行动画处理：
- en: '[PRE20]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Define the reverse animation next:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义下一个反向动画：
- en: '[PRE21]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create `main.html` and include the reference to the `customtransition.css`
    stylesheet in its `<head>` section, as follows:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`并在其`<head>`部分中包含对`customtransition.css`样式表的引用，如下所示：
- en: '[PRE22]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the `#main` page with a link to open `#page2`. Set the `bounceup` custom
    transition defined earlier to the `data-transition` attribute:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有打开`#page2`链接的`#main`页面。将之前定义的`bounceup`自定义转换设置为`data-transition`属性：
- en: '[PRE23]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, create the `#page2` page with a link to go back to the `#main` page:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个带有链接返回`#main`页面的`#page2`页面：
- en: '[PRE24]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Create the `customtransition.css` file and define the custom `bounceup` transition.
    First, define the `.bounceup.in` and `.bounceup.in.reverse` classes, with both
    having the same values. This will make both the transitioning into a new page
    and out of it (reverse) look similar. In the class, set the `Y` co-ordinate or
    the vertical position of the new page on the screen using the `translateY` property.
    Animate this property over the given duration of 1 second, using a Cubic Bezier
    animation curve. Next, define the keyframes for the animation of the `Y` co-ordinate
    (this is specified using the `bounceupin` animation name). The keyframes define
    the values of `Y` at various times within the animation.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`customtransition.css`文件并定义自定义`bounceup`转换。首先，定义`.bounceup.in`和`.bounceup.in.reverse`类，两者具有相同的值。这将使进入新页面和离开新页面（反向）的转换看起来类似。在类中，使用`translateY`属性设置屏幕上新页面的
    `Y` 坐标或垂直位置。在给定的持续时间内，使用立方贝塞尔动画曲线对该属性进行动画处理 1 秒。接下来，定义动画`Y`坐标的关键帧（这是使用`bounceupin`动画名称指定的）。关键帧定义了动画中各个时刻的
    `Y` 值。
- en: You can use a simple trick to get the bounce effect that is used in this animation.
    Set the value of `Y` to beyond the screen at 90 percent duration, and then set
    it to the edge of the screen at 100 percent duration, or at the completion of
    the animation. This gives it a neat bouncing effect as the new page animates into
    the screen, extends out of the screen for a short duration, and comes back to
    the correct position. Similarly, define the `.bounceup.out` and `.bounceup.out.reverse`
    animations for the current page while it navigates out of the screen, as shown
    in the code.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用一个简单的技巧来获得此动画中使用的弹跳效果。将`Y`的值设置为超出屏幕的90％持续时间，然后将其设置为100％持续时间或动画完成时的屏幕边缘。这使得它在新页面动画到屏幕时具有整洁的弹跳效果，短暂地延伸出屏幕，然后回到正确的位置。类似地，当页面导航到屏幕外时，为当前页面定义`.bounceup.out`和`.bounceup.out.reverse`动画，如代码所示。
- en: Now, create `main.html` and include the CSS file in its `<head>` section after
    including the `jquery.mobile.css` file. Create the `#main` page, and add a link
    to open the `#page2` page with the custom transition using the `data-transition="bounceup"`
    attribute. Finally, create the `#page2` page with a link to go back to the `#main`
    page. Now when you launch the app and click on the buttons, the page navigation
    will occur, using a nice custom bouncing animation.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建`main.html`，并在`jquery.mobile.css`文件包含之后，在其`<head>`部分包含CSS文件。创建`#main`页面，并使用`data-transition="bounceup"`属性添加一个链接以打开`#page2`页面，并使用自定义转换。最后，创建`#page2`页面，并添加一个链接以返回`#main`页面。现在，当你启动应用程序并单击按钮时，页面导航将发生，使用一个漂亮的自定义弹跳动画。
- en: During a page transition, there is a **from** and a **to** page. jQuery Mobile
    applies the `out` class style on the from page (current page) and the `in` class
    style on the **to** page (new page). If the reverse transition is to be supported,
    the word `reverse` is suffixed to the `in` and `out` classes, as shown in the
    CSS file. Using these styles, jQuery Mobile will apply the right transition effects
    on the pages. You can further tweak the code in this recipe, and explore further
    with CSS animations to create more page animations. You can get as creative as
    you want!
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面转换期间，有一个**from**页面和一个**to**页面。jQuery Mobile在from页面（当前页面）上应用`out`类样式，并在**to**页面（新页面）上应用`in`类样式。如果要支持反向转换，则在`in`和`out`类后缀中添加单词`reverse`，如CSS文件中所示。使用这些样式，jQuery
    Mobile将在页面上应用正确的转换效果。您可以进一步调整此配方中的代码，并通过CSS动画进行更多页面动画的探索。您可以尽情发挥创意！
- en: There's more...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The CSS styles are listed in this recipe to support only the web kit browsers
    (Chrome and Safari). You can explore this further and try to make it work on other
    browsers, such as IE, Firefox, or Opera. You will have to add vendor-specific
    prefixes to the CSS properties. Also, the browser should be capable of supporting
    the CSS property used. The vendor prefixes required for the popular browsers are
    as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中列出的CSS样式仅支持web kit浏览器（Chrome和Safari）。您可以进一步探索并尝试在其他浏览器上运行，如IE、Firefox或Opera。您将需要为CSS属性添加供应商特定前缀。此外，浏览器应能够支持使用的CSS属性。流行浏览器所需的供应商前缀如下所示：
- en: '**Chrome and Safari**: `–webkit`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chrome和Safari**：`–webkit`'
- en: '**Opera**: `–o`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Opera**：`–o`'
- en: '**Firefox**: `–moz`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Firefox**: `–moz`'
- en: '**IE**: `–ms`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IE**：`–ms`'
- en: Adding vendor prefixes to the customtransition.css file
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向`customtransition.css`文件添加供应商前缀
- en: 'To incorporate support for other browsers, you will have to extend the `customtransition.css`
    file provided in this recipe. You can do this by adding vendor prefixes for the
    properties, as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要为其他浏览器增加支持，您将需要扩展此配方中提供的`customtransition.css`文件。您可以通过添加属性的供应商前缀来执行此操作，如下所示：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This has to be done for all the specified CSS properties that have the `–webkit`
    prefix in the code listed in this recipe.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于代码中列出的具有`–webkit`前缀的所有指定CSS属性，都必须执行此操作。
- en: Tip
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**CSS3 animation support in various browsers**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 各种浏览器中的**CSS3动画支持**
- en: The minimum browser versions required to support CSS3 animations are Chrome,
    Firefox 5.0, IE 10, Safari 4.0 on the desktop and Android browser 4, Firefox Mobile
    5.0, and Safari Mobile (iOS 2) on the mobile.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 支持CSS3动画所需的最低浏览器版本是桌面上的Chrome、Firefox 5.0、IE 10、Safari 4.0和Android浏览器4、Firefox移动版5.0以及移动端的Safari移动版（iOS
    2）。
- en: When the CSS3 property becomes a standard
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当CSS3属性成为标准时
- en: The last line for each property shown in the preceding CSS is the name of the
    property after it becomes the standard. At this point, the browsers will drop
    support for that specific property's vendor prefixes. But you will not have to
    modify a single line of code in your CSS, as the standard property is already
    available in your file. The browser will skip all the properties it does not understand
    and pick up the standard property. So things will work just fine.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述 CSS 中，每个属性的最后一行是它变成标准后的属性名。在这一点上，浏览器将不再支持特定属性的供应商前缀。但是您不必修改 CSS 中的任何一行代码，因为标准属性已经在您的文件中可用。浏览器将跳过它不理解的所有属性，并拾取标准属性。所以一切都会正常工作。
- en: Progressive enhancement
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渐进增强
- en: You will notice that the transition animation in this recipe will not work properly
    on all the browsers. But the basic functionality of page navigation works fine
    everywhere. The best support for CSS3 animation, as of writing this recipe, is
    offered by the web kit browsers. But the beauty of CSS3 is that as browsers continue
    to improve and as users upgrade their devices, the user will automatically get
    a better experience with your app. You will not have to modify any code or make
    any upgrade releases. This is called **Progressive Enhancement**. Using jQuery
    Mobile means that your code is already using progressive enhancement. This would
    not be so easy if your app was natively written.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，此处的过渡动画在某些浏览器上不会正常工作。但是页面导航的基本功能在任何地方都能正常工作。截至撰写本文时，对 CSS3 动画的最佳支持是由 Webkit
    浏览器提供的。但是 CSS3 的美妙之处在于，随着浏览器的不断改进和用户设备的升级，用户将自动获得更好的应用体验。您不必修改任何代码或发布任何升级版本。这就是所谓的**渐进增强**。使用
    jQuery Mobile 意味着您的代码已经使用了渐进增强。如果您的应用是原生编写的，这将不会那么容易。
- en: See also
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using JS to create a slide and fade page transition* recipe
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 JS 创建幻灯片和淡入淡出页面过渡*配方'
- en: The *Configuring your default transitions* recipe in [Chapter 7](ch07.html "Chapter 7. Configurations"),
    *Configurations*
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 7 章](ch07.html "Chapter 7. Configurations") *配置*中的 *配置默认过渡效果* 配方
- en: Using JS to create a slide and fade page transition
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JS 创建幻灯片和淡入淡出页面过渡
- en: In the previous recipe, you learned to add a custom transition to your jQuery
    Mobile app using CSS. You can also create custom transitions using JavaScript.
    This recipe shows you how to create a "slidefade" (slide and fade) effect during
    page transition in your app by using JavaScript.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，您学会了如何使用 CSS 为您的 jQuery Mobile 应用添加自定义过渡。您也可以使用 JavaScript 创建自定义过渡。本配方向您展示如何使用
    JavaScript 在应用程序中的页面过渡期间创建“slidefade”（滑动和淡入淡出）效果。
- en: Getting ready
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/custom-js-transition` sources
    folder. You can launch this code using the URL `http://localhost:8080/02/custom-js-transition/main.html`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/custom-js-transition`源文件夹复制此处配方的完整代码。您可以使用 URL `http://localhost:8080/02/custom-js-transition/main.html`
    启动此代码。
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Carry out the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Create the `customtransition.js` JavaScript file and define your custom transition
    by adding a `mycustomTransition()` method, as shown in the following code snippet.
    Here, define how the `from` and `to` pages should animate during the transition:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`customtransition.js` JavaScript 文件，并通过添加一个`mycustomTransition()`方法来定义您的自定义过渡，如下面的代码片段所示。在此处，定义`from`和`to`页面在过渡期间应如何动画显示：
- en: '[PRE26]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, use the standard template copied directly from `the jquery.mobile.js`
    file to complete the transition function definition:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用直接从`jquery.mobile.js`文件复制的标准模板来完成过渡函数定义：
- en: '[PRE27]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, register the custom transition with the name `slidefade` with the
    jQuery Mobile framework:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 jQuery Mobile 框架注册名为`slidefade`的自定义过渡：
- en: '[PRE28]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, create the `main.html` file, and include the `customtransition.js` file
    in the `<head>` section:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`main.html`文件，并在`<head>`部分包含`customtransition.js`文件：
- en: '[PRE29]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Define the `#main page`, and include a link to open `#page2`. Use the custom
    `slidefade` transition with the `data-transition` attribute:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`#main`页面，并包含一个链接以打开`#page2`。使用带有`data-transition`属性的自定义`slidefade`过渡：
- en: '[PRE30]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, define the `#page2` page with a link to go back to the `#main` page:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用一个链接定义`#page2`页面，以返回`#main`页面：
- en: '[PRE31]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Create the `customtransition.js` file and define the `mycustomTransition` function.
    Here, first create a jQuery `$.Deferred` object. Then, write your custom transition
    code. Set the initial width and height of the `to` page (or the target page) to
    zero. Make it visible by calling the `show()` function. Next, define the animation
    for the `to` and `from` pages (the from page is the current page).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`customtransition.js`文件并定义`mycustomTransition`函数。在这里，首先创建一个jQuery`$.Deferred`对象。然后，编写自定义转换代码。将目标页面的初始宽度和高度设置为零。通过调用`show()`函数使其可见。接下来，定义`to`和`from`页面（from页面是当前页面）的动画。
- en: Note
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The jQuery `$.Deferred` object can be used to register and invoke multiple synchronous
    or asynchronous callbacks, and then return their results. You can read more about
    this feature and the methods it provides at [http://api.jquery.com/category/deferred-object/](http://api.jquery.com/category/deferred-object/).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的`$.Deferred`对象可用于注册和调用多个同步或异步回调，然后返回它们的结果。您可以在[http://api.jquery.com/category/deferred-object/](http://api.jquery.com/category/deferred-object/)了解更多关于此功能及其提供的方法。
- en: Call the `animate()` function and set options such as the width, height, opacity,
    duration of the animation, and animation curve, as shown in the code listing.
    Set the values, so that the from page is animated in such a way that its width
    and opacity become zero over the duration specified. This will slowly hide the
    page while sliding it to the left. Similarly, animate the to page such that in
    the given duration, width, height, and opacity reach 100 percent from 0\. The
    to page fades in from the left to occupy the full screen. Now, both these animations
    happen together, giving a nice end result to the transition.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`animate()`函数并设置选项，如动画的宽度、高度、不透明度、持续时间以及动画曲线，如代码清单所示。设置数值，使得起始页面在指定持续时间内以宽度和不透明度为零进行动画。这将慢慢隐藏页面并将其向左滑动。同样，动画目标页面，使得在给定的持续时间内，宽度、高度和不透明度从零达到100%。目标页面从左边淡入，占据整个屏幕。现在，这两个动画同时发生，给过渡带来了良好的最终结果。
- en: Once the transition is complete, the code must ensure that the right page is
    set as the active page. You can copy this code snippet and the other default actions
    that are required by the framework directly from the standard template, which
    is already defined in the `jquery.mobile.js` file. Now, once the transition is
    completed, invoke the `deferred.resolve()` function. Also return the promise of
    the deferred object from the transition handler.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 转换完成后，代码必须确保正确页面设置为活动页面。您可以直接从`jquery.mobile.js`文件中的标准模板中复制此代码片段和框架所需的其他默认操作。现在，一旦转换完成，调用`deferred.resolve()`函数。还要从转换处理程序返回延迟对象的承诺。
- en: Finally, you should register the custom transition handler with the framework
    using the `slidefade` name. This will ensure that when you specify the `slidefade`
    transition name in the `data-transition` attribute, the correct transition is
    picked and used from the `$.mobile.transitionHandlers` directory.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您应该使用`slidefade`名称将自定义转换处理程序注册到框架中。这将确保当您在`data-transition`属性中指定`slidefade`转换名称时，将从`$.mobile.transitionHandlers`目录中选择并使用正确的转换。
- en: Create `main.html` and include the `customtransition.js` file in the `<head>`
    section. Define the `#main` page with a link to open `#page2` using the `data-transition="slidefade"`
    attribute, as shown in the code. Also define `#page2` with a link to go back to
    the `#main` page. You don't have to set the transition in `#page2` as JavaScript
    already takes care of the reverse animation. Launch your app and when you navigate
    between the pages, you will see the new page slide in while the current page fades
    out, giving you the custom slide and fade transition. On second thoughts, probably
    "slide and shrink" would be a better name for this transition.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`main.html`并在`<head>`部分包含`customtransition.js`文件。定义`#main`页面，其中包含使用`data-transition="slidefade"`属性打开`#page2`的链接，如代码所示。还要定义`#page2`，其中包含返回`#main`页面的链接。您不必在`#page2`中设置转换，因为JavaScript已经处理了反向动画。启动您的应用程序，并在页面之间导航时，您将看到新页面滑入，同时当前页面淡出，为您提供自定义滑动和淡出过渡效果。再考虑一下，也许"滑动和收缩"会是这个转换的更好名称。
- en: There's more...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you have defined a custom transition in your app and used it for most of
    your page navigations, then you can directly set this custom transition as the
    default transition to be used for all your pages. This way, the `data-transition`
    attribute need not be specified with every link. This is specified in the `customtransition.js`
    file. Add the line after registering your custom transition handler (at the end
    of the file), as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在应用程序中定义了自定义过渡并在大多数页面导航中使用它，那么可以直接将此自定义过渡设置为所有页面使用的默认过渡。这样，就不需要在每个链接中指定 `data-transition`
    属性。这在 `customtransition.js` 文件中指定。在注册自定义过渡处理程序之后（文件末尾），添加如下行：
- en: '[PRE32]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding code snippet, `myCustomTransition` is the newly-defined transition
    handler. Now, all the pages would use the `slidefade` transition. But this does
    not affect the `Dialog` transitions, which use the pop transition by default.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，`myCustomTransition` 是新定义的过渡处理程序。现在，所有页面都将使用 `slidefade` 过渡。但这不会影响默认使用弹出过渡的
    `Dialog` 过渡。
- en: JavaScript transitions compared to CSS3 transitions
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript过渡与CSS3过渡的比较
- en: Use CSS3 transitions over JS transitions in spite of the fact that you might
    run into vendor prefixes and incompatible browsers. With CSS3 transitions, the
    code required is lesser and it is much easier to develop and maintain it. Also
    you will not have to program the entire logic of the animation from scratch. With
    future versions of jQuery Mobile, the page transition framework or the logic might
    change, and this will break your custom JS transition.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可能会遇到供应商前缀和不兼容的浏览器，但在CSS3过渡中使用CSS3过渡而不是JS过渡。使用CSS3过渡，所需的代码较少，开发和维护起来更容易。而且，您不必从头开始编写动画的整个逻辑。随着jQuery
    Mobile的未来版本，页面过渡框架或逻辑可能会发生变化，这将破坏您的自定义JS过渡。
- en: Whereas, with CSS3, the beauty lies in the fact that your apps are progressively
    enhanced and fall back to basic functionality on lack of CSS3 support. As browsers
    improve and get upgraded, the vendor prefixes will ensure that your code works
    better without you modifying a single line of code. When the vendor prefixes go
    away, the standard attribute will get picked and everything will continue to work
    just fine. So use JS transitions only when you want to do more complex stuff and
    when CSS3 transitions would not fully support your requirement.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 而在CSS3中，美妙之处在于您的应用程序在CSS3支持不足时会逐步增强并退回到基本功能。随着浏览器的改进和升级，供应商前缀将确保您的代码无需修改即可更好地工作。当供应商前缀消失时，标准属性将得到选择，然后所有内容将继续正常工作。因此，只有当您想要做更复杂的事情并且CSS3过渡不能完全支持您的需求时，才使用JS过渡。
- en: See also
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using CSS to create a bouncing page transition* recipe
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用CSS创建弹跳页面过渡* 配方'
- en: The *Configuring your default transitions* recipe in [Chapter 7](ch07.html "Chapter 7. Configurations"),
    *Configurations*
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章.配置") *配置你的默认过渡* 配方'
- en: Using data-url to handle the login page navigation
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用data-url处理登录页面导航
- en: When you write a login page in your app, once the user enters valid credentials,
    you will want to redirect the user to a different page or to a different folder
    on success. This recipe shows you how to redirect the user to a different page
    during a login page navigation scenario, by using the `data-url` attribute.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在应用程序中编写登录页面时，一旦用户输入有效凭据，您将希望在成功时将用户重定向到不同的页面或不同的文件夹。本配方向您展示了如何使用`data-url`属性在登录页面导航情景中将用户重定向到不同页面。
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/02/data-url` sources folder.
    You can launch this code using the URL `http://localhost:8080/02/data-url/login/main.html`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/data-url`源文件夹中复制此配方的全部代码。您可以使用URL `http://localhost:8080/02/data-url/login/main.html`来启动此代码。
- en: How to do it...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The steps to be followed are:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 应该遵循以下步骤：
- en: Create two folders called `login` and `records`. The `login` folder will contain
    `main.html`, and the `records` folder will contain the `index.html` and `data.html`
    files.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为 `login` 和 `records` 的两个文件夹。`login` 文件夹将包含 `main.html` 文件，`records` 文件夹将包含
    `index.html` 和 `data.html` 文件。
- en: In the `login` folder, create `main.html` as a multi-page document. Here, first
    add the `#main` page as shown in the following code snippet. Also add a link to
    open the `#login` page.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`login`文件夹中，将`main.html`创建为多页文档。在这里，首先添加如下代码片段中显示的`#main`页面。还要添加一个链接以打开`#login`页面。
- en: '[PRE33]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, create the `#login` page in `main.html` with a link to open the `index.html`
    file. Specify the `data-url` attribute pointing to the `records` folder (for page
    redirection), as shown in the following code snippet:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`main.html`中创建`#login`页面，并添加一个打开`index.html`文件的链接。指定`data-url`属性指向`records`文件夹（用于页面重定向），如下面的代码片段所示：
- en: '[PRE34]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, create the `index.html` file in the `records` folder, as shown in the
    following code snippet. Add a link to open the `data.html` file here. Also set
    `data-url` for the page, as given in following the code:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`records`文件夹中创建`index.html`文件，如下面的代码片段所示。在这里添加一个链接以打开`data.html`文件。还为页面设置`data-url`，如以下代码所示：
- en: '[PRE35]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, create the `data.html` file in the `records` folder. Add a link to
    the `index.html` file here. The `data-url` attribute is not set here, and the
    navigation will still work since the page redirect done earlier was successful:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`records`文件夹中创建`data.html`文件。在这里添加一个链接到`index.html`文件。此处未设置`data-url`属性，但导航仍将正常工作，因为之前的页面重定向成功完成：
- en: '[PRE36]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Each of the pages in the previous code listed also displays the page URL of
    the current page just below the page header. Keep an eye on this text, and compare
    it with the address shown in the browser address bar as you navigate through the
    pages in this recipe.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码列出的每个页面中，还在页面标题下方显示当前页面的页面URL。请注意此文本，并将其与浏览器地址栏中显示的地址进行比较，以便在此示例中导航到各个页面时进行观察。
- en: 'First, create the `login` and `records` folders. In the `login` folder, create
    the `main.html` file, which is a multi-page document. Add the `#main` and `#login`
    pages to it. In the `#main` page, add a **Login to Records folder** button to
    open the `#login` page. Next, create the `#login` page, and specify its `data-url`
    attribute as `http://localhost:8080/02/data-url/records`. Add an **Open the Index
    Page** button to this page, to open the `index.html` file located in the `records`
    folder. Now, when you launch the app and click on the `login` button, the `#login`
    page is shown. But the browser address bar will show the URL as `http://localhost:8080/02/data-url/records/`,
    as shown in the following screenshot. Whereas the text above the **Go to Index
    Page** button still says that the current page location is `login/main.html #login`.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，创建`login`和`records`文件夹。在`login`文件夹中，创建`main.html`文件，这是一个多页文档。将`#main`和`#login`页面添加到其中。在`#main`页面中，添加一个**登录到记录文件夹**按钮以打开`#login`页面。接下来，创建`#login`页面，并将其`data-url`属性指定为`http://localhost:8080/02/data-url/records`。在此页面添加一个**打开索引页**按钮，以打开位于`records`文件夹中的`index.html`文件。现在，当您启动应用程序并单击`login`按钮时，将显示`#login`页面。但浏览器地址栏将显示URL为`http://localhost:8080/02/data-url/records/`，如下图所示。而**转到索引页**按钮上方的文本仍然显示当前页面位置为`login/main.html
    #login`。'
- en: '![How it works...](img/7225_02_09.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_02_09.jpg)'
- en: This redirect occurred because the `data-url` attribute was used in the `#login`
    page `div` container. The jQuery Mobile framework updates the address bar with
    the value of this attribute instead of the actual URL used to fetch the page.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这个重定向发生了，因为在`#login`页面的`div`容器中使用了`data-url`属性。jQuery Mobile框架会更新地址栏，显示此属性的值，而不是用于获取页面的实际URL。
- en: This is a very handy feature that allows you to perform redirects in your app.
    This recipe does not show the username or password being validated by the server.
    But in real life, the user would enter the username/password credentials in the
    `#main` page and on a successful response from the server, you can redirect the
    user to restricted folders and webpages. Do not redirect any unauthenticated users,
    and they will not be able to access any pages in the `records` folder.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常方便的功能，允许您在应用程序中执行重定向。这个示例没有显示服务器验证的用户名或密码。但在实际生活中，用户会在`#main`页面输入用户名/密码凭据，然后在服务器成功响应后，您可以将用户重定向到受限文件夹和网页。不要将任何未经身份验证的用户重定向，并且他们将无法访问`records`文件夹中的任何页面。
- en: Next, add the `index.html` and `records.html` files as given in the code. Add
    links to these pages to enable navigation between them. Now, in the `#login` page,
    when you click on the **Open the Index Page** button, the `href` attribute only
    specifies `index.html` in the code. But since the redirect has already occurred
    at this point, the `index.html` file from the `records` folder is opened. The
    `index.html` file is now the landing page here and allows you to access other
    pages, such as `data.html`, which are all located in the `records` folder. An
    alternate approach to using `data-url` is that you could also use the `changePage()`
    method to redirect the user to the `index.html` page on a successful login.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照代码中给出的内容添加`index.html`和`records.html`文件。添加这些页面的链接以实现它们之间的导航。现在，在`#login`页面中，当您点击**打开索引页**按钮时，代码中`href`属性只指定了`index.html`。但是此时重定向已经发生，`records`文件夹中的`index.html`文件被打开。`index.html`现在是这里的着陆页面，使您能够访问其他页面，比如位于`records`文件夹中的`data.html`等。使用`data-url`的另一种方法是，您还可以在成功登录时使用`changePage()`方法将用户重定向到`index.html`页面。
- en: In `index.html`, set the `data-url="http://localhost:8080/02/data-url/records"`
    attribute to support proper navigation when the user clicks on the back or forward
    buttons of the browser, If this is not done, navigation will break if you click
    on the back button in `index.html`. `data-url` helps you set the correct value
    on the history stack.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`中，将`data-url="http://localhost:8080/02/data-url/records"`属性设置为支持当用户点击浏览器的后退或前进按钮时的正确导航，如果不这样做，当您在`index.html`中单击后退按钮时，导航将中断。`data-url`可帮助您在历史堆栈中设置正确的值。
- en: You can play with the back and forward buttons of your browser to see how the
    address bar is updated when compared to the text shown below the header as you
    navigate through the app.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过浏览器的后退和前进按钮来玩转，看看在应用程序中导航时，地址栏是如何更新的，与标题下方显示的文本相比如何更新。
- en: Tip
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Using proper values for data-url**'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用正确的值来设置data-url**'
- en: You can specify any value for the `data-url` attribute, and the same will be
    shown in the address bar. But you should take care to see that it is a valid reference
    and the browser should be able to render the page. Specifying incorrect or non-existent
    URLs will break the navigation when you refresh the browser or when you click
    on the back/forward buttons.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为`data-url`属性指定任何值，在地址栏中都将显示相同值。但您应该注意确保它是有效的引用，并且浏览器应该能够呈现页面。指定不正确或不存在的URL将在刷新浏览器或单击后/前按钮时中断导航。
- en: There's more...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: jQuery Mobile sets and maintains the `data-url` attribute for all the pages
    in your app. Only the first page of your app does not require `data-url`, as it
    is always available in the DOM and can be referenced by its ID or URL. For all
    other pages, if the `data-url` attribute is not specified, it gets added with
    the value of the page ID by default. For external pages in the same domain, the
    relative path of the page is used as the value for `data-url`. For pages from
    different domains, the absolute path is used.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile为您的应用程序中的所有页面设置并维护`data-url`属性。应用程序的第一页不需要`data-url`，因为它始终在DOM中，并且可以通过其ID或URL引用。对于所有其他页面，如果未指定`data-url`属性，则默认情况下会添加带有页面ID的值。对于相同域中的外部页面，将页面的相对路径用作`data-url`的值。对于来自不同域的页面，将使用绝对路径。
- en: Using data-url as the href link
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`data-url`作为href链接
- en: If a page `div` tag contains both the page ID and `data-url`, you can either
    use `data-url` or the page ID in the value of the `href` attribute value and navigate
    to that page.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个页面的`div`标签同时包含页面ID和`data-url`，则在`href`属性值中可以使用`data-url`或页面ID，以导航到该页面。
- en: Working with sub-hash urls
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用子散列URL
- en: 'Some plugins dynamically break a page into separate pages. These pages have
    to be reached via deep links. These pages should have their `data-url` attribute
    specified in the following manner:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插件动态将页面分成单独的页面。这些页面必须通过深链接到达。这些页面的`data-url`属性应以以下方式指定：
- en: '[PRE37]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: See also
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Submitting a form using POST* recipe in [Chapter 6](ch06.html "Chapter 6. List
    Views"), *Forms*
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。列表视图")的*提交使用POST的表单*中，*表单*
- en: Using History API to create a custom error pop up
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用History API创建自定义错误弹窗
- en: The jQuery Mobile framework does not track dialogs in history. A dialog will
    thus not reappear when you click on the back button of your browser. Using a dialog
    for some features, for example to show an error pop up or an alert, has a minor
    issue that is very visible. When the dialog is opened from a page, the address
    bar will show the page URL suffixed with the `#&ui-state=dialog` text. This might
    not be desirable to all. This recipe shows you how to use the **History API**
    and customize a regular dialog to appear, such as a pop up without any changes
    to the URL, making use of the History API.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile框架不会跟踪对话框的历史记录。因此，当您单击浏览器的返回按钮时，对话框不会重新出现。对于一些功能，例如显示错误弹出或警报，使用对话框存在一个很明显的小问题。当对话框从一个页面打开时，地址栏将显示带有`#&ui-state=dialog`文本后缀的页面URL。这可能不是所有人都希望看到的。这个示例向您展示了如何使用**历史API**并自定义常规对话框以出现，例如弹出而不对URL进行任何更改，利用历史API。
- en: Getting ready
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Copy the full code of this recipe from the `code/02/history` sources folder.
    You can launch this code using the URL `http://localhost:8080/02/history/main.html`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/02/history`源文件夹中复制此示例的完整代码。您可以使用URL`http://localhost:8080/02/history/main.html`启动此代码。
- en: How to do it...
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps to be followed are:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 需要遵循的步骤是：
- en: 'Create `main.html`, and add a link to open the `errordialog.html` file as a
    dialog. Also add an `input` button, as shown in the following code snippet:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`，并添加一个链接以打开`errordialog.html`文件作为对话框。还添加一个`input`按钮，如下面的代码片段所示：
- en: '[PRE38]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following script to the `<head>` section of `main.html` to open `errorpopup.html`
    as a dialog on the `click` event of the `input` button:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到`main.html`的`<head>`部分，以在`input`按钮的`click`事件上打开`errorpopup.html`作为对话框：
- en: '[PRE39]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create the `errordialog.html` file to show a custom error message. Also add
    a button to go back to `main.html`, as shown in the following code snippet:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`errordialog.html`文件以显示自定义错误消息。还添加一个按钮返回到`main.html`，如下面的代码片段所示：
- en: '[PRE40]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create `errorpopup.html`, and add the following script inside the page container.
    This is a regular dialog but it has a custom styled header. Remove its entry from
    the history stack when you click on the anchor link:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`errorpopup.html`，并在页面容器内添加以下脚本。这是一个常规对话框，但它具有自定义样式的标题。单击锚链接时，从历史堆栈中删除它的条目：
- en: '[PRE41]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, add a custom header to the page and also add the link to go back to `main.html`:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为页面添加自定义标题，并添加返回到`main.html`的链接：
- en: '[PRE42]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Create `main.html` with the `#main` page having a link to open the `errordialog.html`
    page. Add an input submit button (`id="linkButton"`) as shown. Next, create the
    `errordialog.html` page with a button to go back to `main.html` as given in the
    code. When you launch the app and click on the first button (**Dialog**), the
    `errordialog.html` page is opened as a regular dialog with the pop transition.
    You will see the address bar change and show the `#&ui-state=dialog` text at the
    end of the URL, as shown in the following screenshot. Close and open this dialog
    a couple of times, and then if you press and hold the back button, the browser''s
    history is displayed and you will see entries for the **Error Dialog** made in
    the history stack list:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`main.html`，其中`#main`页面有一个链接可以打开`errordialog.html`页面。添加一个输入提交按钮（`id="linkButton"`），如下所示。接下来，按照以下代码创建`errordialog.html`页面，其中有一个按钮可以返回到`main.html`。当你启动应用程序并点击第一个按钮（**对话框**）时，`errordialog.html`页面会作为常规对话框打开，并具有弹出过渡效果。你会看到地址栏发生变化，并在URL末尾显示`#&ui-state=dialog`文本，如下面的屏幕截图所示。关闭并打开这个对话框几次，然后如果你按住返回按钮，浏览器的历史记录将被显示，并且你会看到**错误对话框**在历史堆栈列表中的条目：
- en: '![How it works...](img/7225_02_10.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_02_10.jpg)'
- en: Now, in `main.html`, add the given script to the `pageinit` event handler that
    gets invoked when the app starts. Here, handle the `click` event of the `#linkButton`
    input button, and invoke the `changePage()` method in the callback with the options
    described in the following section, to open the `errorpopup.html` page. Set the
    `role` option as `dialog` to open the page as a dialog. Also, set the `changeHash`
    option to `false`, to indicate that the URL hash must not be changed in the address
    bar when the page is opened.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`main.html`中，添加给定的脚本到`pageinit`事件处理程序中，当应用程序启动时调用。在这里，处理`#linkButton`输入按钮的`click`事件，并在回调中使用以下部分描述的选项调用`changePage()`方法，以打开`errorpopup.html`页面。将`role`选项设置为`dialog`以打开页面作为对话框。此外，将`changeHash`选项设置为`false`，以指示打开页面时不更改地址栏中的URL哈希。
- en: Next, create `errorpopup.html` and add the given script inside the page container.
    In this script, bind the `pageinit` event that gets invoked when the page is initialized.
    Here, add an event handler for the `click` event of the anchor button. In this
    callback, invoke the `history.back()` method to remove the history entry made
    on the history stack. You should add this script in the page container, so that
    it gets invoked every time the page gets loaded and initialized in the DOM.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建 `errorpopup.html` 并将给定的脚本添加到页面容器中。在这个脚本中，绑定 `pageinit` 事件，该事件在页面初始化时触发。在这里，为锚点按钮的
    `click` 事件添加一个事件处理程序。在这个回调中，调用 `history.back()` 方法来删除历史记录堆栈中的历史记录条目。您应该将此脚本添加到页面容器中，以便每次页面在
    DOM 中加载和初始化时都会被调用。
- en: Next, add a custom header to the error pop-up page container. This custom header
    is the same as the one used in the *Custom styling a dialog* recipe, earlier in
    this chapter. This dialog header is customized to make it look more like a pop
    up and to avoid the close button, which is present by default in the dialog header.
    Finally, in the page content, add a button to go back to `main.html`.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，向错误弹出页容器添加一个自定义标题。这个自定义标题与本章前面 *自定义样式对话框* 部分使用的相同。这个对话框标题被定制，使其看起来更像一个弹出窗口，并避免了默认情况下在对话框标题中出现的关闭按钮。最后，在页面内容中，添加一个按钮返回到
    `main.html`。
- en: 'Now, launch the app again and click on the second button (**Popup**). The custom
    dialog created is shown as a pop up, as shown in the following screenshot:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新启动应用程序，单击第二个按钮（**Popup**）。创建的自定义对话框将显示为弹出窗口，如下图所示：
- en: '![How it works...](img/7225_02_11.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_02_11.jpg)'
- en: 'This pop up behaves differently from the default dialog. The **Close** icon
    is not present. You will note that the browser''s address bar is not changed.
    You will also see that the **Error Popup** page title is not shown in the history
    list when you click and hold the browser''s back button. Close the pop up and
    go back to `main.html`. You can click and hold the browser''s back or front button
    to see that the pop up is never shown in the history list, whereas the dialog
    is listed, as shown in the following screenshot:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 此弹出窗口的行为与默认对话框不同。**关闭** 图标不存在。您会注意到浏览器的地址栏未更改。您还会看到单击并按住浏览器的后退按钮时，**Error Popup**
    页面标题不会显示在历史记录列表中。关闭弹出窗口并返回到 `main.html`。您可以单击并按住浏览器的后退或前进按钮，以查看弹出窗口从未显示在历史记录列表中，而对话框则列在其中，如下图所示：
- en: '![How it works...](img/7225_02_12.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_02_12.jpg)'
- en: There's more...
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The History API is very easy to use, and provides additional methods with which
    you can handle and manipulate the history stack in the browser. You can use the
    `pushState()` method to add a new entry into the history. With `replaceState()`
    , you can replace the history entry and the URL of an existing entry in the stack.
    This is a very handy method and lets you manipulate the history to suit your app's
    needs. As shown in the code listed in this recipe, `history.back()` takes you
    back one step in the history, whereas `history.forward()` takes you one step forward.
    To go to a specific entry in the history stack, you can also use the `history.go()`
    method, passing it a numerical value on how many entries you want to jump. So,
    `history.go(-3)` will take you three entries back, and a plus value will take
    you three entries forward.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 历史 API 使用起来非常简单，并提供了额外的方法，您可以使用这些方法来处理和操作浏览器中的历史记录堆栈。您可以使用 `pushState()` 方法向历史记录中添加一个新条目。使用
    `replaceState()` 方法，您可以替换历史记录中的条目和现有条目的 URL。这是一个非常方便的方法，可以让您根据应用程序的需要来操作历史记录。如本示例代码所示，`history.back()`
    将您带回历史记录中的上一步，而 `history.forward()` 则让您向前迈进一步。要转到历史记录堆栈中的特定条目，还可以使用 `history.go()`
    方法，将一个数字值传递给它，表示您要跳过多少条目。因此，`history.go(-3)` 将使您回退三个条目，而正值将使您向前跳三个条目。
- en: The popstate event on a dialog
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对话框上的 popstate 事件
- en: Whenever you click on the back or forward buttons, a `popstate` event is thrown.
    This event is handled by the framework using the `onpopstate` handler, and the
    framework navigates to the next or previous page as desired. If `popstate` results
    in the target page being a dialog, the framework handles the event and does not
    navigate back to the dialog. Thus the dialog is not shown again when you click
    on the forward or back buttons in your browser.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 每当单击后退或前进按钮时，都会触发 `popstate` 事件。该事件由框架使用 `onpopstate` 处理程序处理，并根据需要导航到下一个或上一个页面。如果
    `popstate` 导致目标页面是对话框，则框架会处理该事件，不会导航回对话框。因此，当您单击浏览器的后退或前进按钮时，对话框不会再次显示。
- en: The Popup widget
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弹出窗口小部件
- en: 'At the time of writing this recipe, jQuery Mobile v1.1.1 was used. So the error
    pop-up dialog created in this recipe is not a true pop up, as it still displayed
    in a separate page and does not hover over the original page. The **Popup** widget
    will be available with jQuery Mobile v1.2.0\. Then you can add a simple, true
    pop up using the `data-rel="popup"` attribute, as shown in the following code
    snippet:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本配方时，使用的是 jQuery Mobile v1.1.1。因此，在此配方中创建的错误弹出对话框不是真正的弹出式窗口，因为它仍然显示在单独的页面上，并且不悬停在原始页面上。**弹出**小部件将在
    jQuery Mobile v1.2.0 中提供。然后，您可以使用`data-rel="popup"`属性添加一个简单的、真正的弹出窗口，如下面的代码片段所示：
- en: '[PRE43]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You can optionally set the pop up not to be tracked in history using the `data-history="false"`
    attribute. You can read more about using pop ups at [http://jquerymobile.com/demos/1.2.0/docs/pages/popup/index.html](http://jquerymobile.com/demos/1.2.0/docs/pages/popup/index.html).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择使用`data-history="false"`属性将弹出窗口设置为不在历史记录中跟踪。您可以在[http://jquerymobile.com/demos/1.2.0/docs/pages/popup/index.html](http://jquerymobile.com/demos/1.2.0/docs/pages/popup/index.html)了解更多关于使用弹出窗口的信息。
- en: See also
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Custom styling a dialog* recipe
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义对话框样式*配方'
- en: The *Using page initialization events* recipe in [Chapter 8](ch08.html "Chapter 8. Events"),
    *Events*
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 8 章](ch08.html "第 8 章。事件")的*使用页面初始化事件*配方，*事件*'
- en: The *Using changePage() to change a page* recipe [Chapter 9](ch09.html "Chapter 9. Methods
    and Utilities"), *Methods and Utilities*
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`changePage()`方法更改页面的*使用 changePage() 方法更改页面*配方 [第 9 章](ch09.html "第 9 章。方法与实用工具")，*方法与实用工具*
