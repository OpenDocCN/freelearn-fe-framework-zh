- en: Switching to the One Angular
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向 One Angular
- en: Although the content of this book can be properly digested without any prior
    AngularJS or Angular experience, you will get most of the book if you are familiar
    with the basics of AngularJS and you are willing to *switch to Angular*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这本书的内容可以在没有任何先前的 AngularJS 或 Angular 经验的情况下被正确消化，但如果你熟悉 AngularJS 的基础知识并且愿意
    *转向 Angular*，你将获得这本书的大部分内容。
- en: 'On the internet, often **AngularJS** and **Angular 1** are used interchangeably
    to refer to the **AngularJS** framework. This misconception leaves AngularJS experts
    confused about the Angular versioning. Very often, in many community events, I
    get questions similar to this one:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上，经常将 **AngularJS** 和 **Angular 1** 互换使用来指代 **AngularJS** 框架。这种误解让 AngularJS
    专家对 Angular 版本感到困惑。在许多社区活动中，我经常收到类似的问题：
- en: I just learnt Angular X, but I heard that Angular X+1 is coming in 6 months.
    Does this mean I should learn a new framework?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚学习了 Angular X，但听说 Angular X+1 将在 6 个月后推出。这意味着我需要学习一个新的框架吗？
- en: Here, you can replace *X* with any number bigger than 2.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以将 *X* 替换为大于 2 的任何数字。
- en: 'The short answer to this question is: **no, you don''t have to learn a new
    framework when a new major version is released.** In fact, **the API deprecations
    between Angular 2 and Angular 5 can be listed on a few lines**.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个问题的简短回答是：**当发布新主要版本时，你不需要学习一个新的框架。** 事实上，**Angular 2 和 Angular 5 之间的 API
    废弃可以列在几行之内**。
- en: This confusion was brought mostly by incorrectly referring to AngularJS as Angular
    1, which makes developers believe that every new version of Angular will be as
    different from the old one as Angular is from AngularJS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这种混淆主要是由错误地将 AngularJS 称为 Angular 1 所引起，这使得开发者认为每个新的 Angular 版本都将与旧版本有如 Angular
    与 AngularJS 之间的不同。
- en: Along the remaining sections of this chapter and in [Chapter 2](ced71b5c-e25d-4781-8aab-81ef0a053b14.xhtml)*,
    Get Going with Angular*, we will explain how Angular differs from AngularJS and
    why the development of a new framework was required.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章剩余部分和 [第 2 章](ced71b5c-e25d-4781-8aab-81ef0a053b14.xhtml)*，开始使用 Angular*
    中，我们将解释 Angular 与 AngularJS 的不同之处以及为什么需要开发一个新的框架。
- en: Introducing the One Angular
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 One Angular
- en: Angular is a framework for application development. Its main focus is to provide
    a solid foundation for the development of the user interface of our applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 是一个用于应用开发的框架。它的主要关注点是为我们应用的用户界面开发提供一个坚实的基础。
- en: One of the core primitives that the framework provides is its powerful dependency
    injection mechanism which allows us to easily control the relations between the
    individual building blocks of our code. Angular's *obviously fast* change detection
    provides a way to synchronize the views of our application with the current state
    of the data model. Being completely transparent to developers, the change detection
    knows exactly when the model has changed and performs the minimum set of operations
    in order to reflect the update in the view.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 框架提供的核心原语之一是其强大的依赖注入机制，这使得我们能够轻松控制代码各个构建块之间的关系。Angular 的 *显然快速* 的变更检测提供了一种将应用视图与数据模型的当前状态同步的方法。对开发者完全透明，变更检测能够精确地知道模型何时发生变化，并执行最小化操作以在视图中反映更新。
- en: Being able to extend the valid HTML, Angular's templates with custom elements
    allow us to use a declarative **Domain Specific Language** (**DSL**) to express
    the structure of the user interface of our application and its bindings to the
    model.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 能够扩展有效的 HTML，Angular 的模板通过自定义元素允许我们使用声明式的 **领域特定语言**（**DSL**）来表示我们应用用户界面的结构及其与模型的绑定。
- en: Angular was inspired for all these ideas and many others by its predecessor,
    AngularJS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 吸收了所有这些想法以及许多其他想法，灵感来源于其前身 AngularJS。
- en: From AngularJS to Angular
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 AngularJS 到 Angular
- en: The initial release of AngularJS was on October 20, 2010\. The framework nowadays
    is used in millions of applications around the world. AngularJS got so popular
    that numerous technologies were inspired by it and even started using it as a
    foundation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS 的最初发布是在 2010 年 10 月 20 日。如今，这个框架被全球数百万个应用所使用。AngularJS 的流行程度非常高，以至于许多技术都受到了它的启发，甚至开始将其作为基础。
- en: 'One such platform for development of mobile applications is Ionic. Over time,
    the framework was constantly evolving, trying to provide an API as ergonomic and
    simplistic API as possible while still being powerful and expressive enough to
    help us develop complex web applications with ease. The API changes between versions
    were small and usually introduced through a deprecation process. This way, we:
    as developers: have enough time to go through the transition process and align
    to the latest changes.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一个用于开发移动应用的平台是Ionic。随着时间的推移，该框架不断进化，试图提供一个尽可能人体工程学化和简化的API，同时仍然足够强大和表达力丰富，以便我们能够轻松地开发复杂的Web应用。API在不同版本之间的变化很小，通常通过弃用过程引入。这样，我们：作为开发者：有足够的时间通过过渡过程并适应最新的变化。
- en: In the meantime, however, the web evolved, and tens of new technologies got
    created, some of which directly impacted AngularJS itself or gave the framework
    opportunities for big jumps in terms of performance or ergonomics. Such new APIs
    were introduced, for example, by the web worker standard, or even new languages
    such as TypeScript.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与此同时，Web也在进化，出现了数十种新技术，其中一些直接影响了AngularJS本身，或者为框架提供了在性能或人体工程学方面实现大跳跃的机会。例如，通过Web
    Worker标准或甚至新的语言如TypeScript引入了这些新的API。
- en: This way, although AngularJS was the optimal technology for application development
    in 2010, it struggled to stay competitive and flawless, given the constantly moving
    web. This was the birth of the idea for a **new framework, inspired by AngularJS,
    but with more powerful APIs and better performance**! **Because of the conceptual
    similarities with AngularJS, Google called this new framework Angular.**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，尽管AngularJS在2010年是应用开发的最佳技术，但由于Web的不断变化，它难以保持竞争力和完美无缺。这就是一个新框架想法的诞生，这个框架受AngularJS的启发，但具有更强大的API和更好的性能！**由于与AngularJS的概念相似性，谷歌将其称为Angular。**
- en: The new beginning
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的开始
- en: The team at Google, willing to take advantage of the most advanced technologies
    in Angular, decided to start with a solid, statically typed foundation in the
    face of TypeScript. On top of that, they considered variety of different ways
    for the improvement of Angular's performance in order to help developers deliver
    lightning fast experience to the users of our applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌团队，愿意利用Angular中最先进的技术，决定从TypeScript的坚实、静态类型基础开始。在此基础上，他们考虑了多种不同的方法来提高Angular的性能，以帮助开发者向我们的应用程序用户提供闪电般的体验。
- en: 'Given the learned lesson from AngularJS about the constantly evolving browser
    APIs, the Angular team developed the framework with a small core and a lot of
    different libraries surrounding it, providing extra features. This way, the framework''s
    foundational APIs will be able to stay as immutable as possible and the entire
    infrastructure surrounding Angular''s core will evolve following the well-defined
    release process of semantic versioning. You can see some of the modules developed
    around Angular core in the following figure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于从AngularJS中学到的关于浏览器API不断进化的经验教训，Angular团队开发了一个以小型核心和大量围绕它的不同库为特点的框架，提供了额外的功能。这样，框架的基础API将能够尽可能保持不变，Angular核心周围的整个基础设施将遵循语义版本控制的明确发布流程进行进化。您可以在以下图中看到围绕Angular核心开发的某些模块：
- en: '![](img/fa7606e3-2cc1-4083-8638-50828b70593e.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa7606e3-2cc1-4083-8638-50828b70593e.png)'
- en: Figure 1
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图1
- en: We'll describe some of these modules in the upcoming chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中描述一些这些模块。
- en: Before going any further, let's have an overview of what semantic versioning
    actually means.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续前进之前，让我们先概述一下语义版本控制实际上意味着什么。
- en: Angular and SemVer
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular和SemVer
- en: AngularJS was rewritten from scratch and replaced with its successor, Angular
    2\. A lot of us were bothered by this big step, which didn't allow us to have
    a smooth transition between these two versions of the framework. Right after Angular
    2 was stable, Google announced that they wanted to follow the so called **Semantic
    Versioning Specification** (also known as **SemVer**).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS是从头开始重写的，并替换为其继任者Angular 2。我们中的许多人对此大步前进感到困扰，因为它不允许我们在这两个框架版本之间实现平滑过渡。Angular
    2稳定后不久，谷歌宣布他们希望遵循所谓的**语义版本控制规范**（也称为**SemVer**）。
- en: SemVer defines the version of a given software project as the triple **X.Y.Z**,
    where *Z* is called **patch version**, *Y* is called **minor version**, and *X*
    is called **major version**. A change in the patch version means that there are
    no intended breaking changes impacting the public API surface between two versions
    of the same project, but only bug fixes. The minor version of a project will be
    incremented when new functionality is introduced, and there are no breaking changes.
    Finally, the major version will be increased when incompatible changes are introduced
    in the API.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SemVer定义了一个给定软件项目的版本为**X.Y.Z**的三元组，其中*Z*称为**补丁版本**，*Y*称为**次要版本**，*X*称为**主版本**。补丁版本的变化意味着在同一个项目的两个版本之间，没有影响公共API表面的有意破坏性变更，只有错误修复。当引入新功能且没有破坏性变更时，项目的次要版本将增加。最后，当API中引入不兼容的变更时，主版本将增加。
- en: This means that between versions 2.3.1 and 2.10.4, there are no introduced breaking
    changes, but only a few added features and bug fixes. However, if we have version
    2.10.4 and we want to change any of the already existing public APIs in a backward-incompatible
    manner (for instance, changing the order of the parameters that a method accepts),
    we need to increment the major version and reset the patch and minor versions;
    so we will get version 3.0.0.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在2.3.1和2.10.4版本之间，没有引入破坏性变更，只有一些新增功能和错误修复。然而，如果我们有2.10.4版本，并且想要以向后不兼容的方式更改任何现有的公共API（例如，更改方法接受的参数顺序），我们需要增加主版本号，并将补丁和次要版本号重置；因此我们将得到3.0.0版本。
- en: The Angular team also follows a strict, predictable schedule. According to it,
    *a new patch version needs to be introduced every week; there should be three
    monthly minor releases after each major release*, and finally, *one major release
    every 6 months*. This means that by the end of 2018, there will be Angular 7\.
    However, this doesn't mean that every 6 months we'll have to go through the same
    migration path like we did between AngularJS and Angular 2\. *Not every major
    release will introduce breaking changes that are going to impact our projects***.**
    For instance, support for a newer version of TypeScript or change of the last
    optional argument of a method will be considered as a breaking change. We can
    think of these breaking changes in a way similar to what happened between AngularJS
    1.2 and AngularJS 1.3.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Angular团队还遵循一个严格、可预测的时间表。根据它，*每周需要引入一个新的补丁版本；每个主要版本发布后，应有三个月度次要版本发布*，最后，*每6个月发布一个主要版本*。这意味着到2018年底，将会有Angular
    7。然而，这并不意味着每6个月我们都要经历像AngularJS和Angular 2之间的相同迁移路径。*并非每个主要版本都会引入影响我们项目的破坏性变更*。例如，对TypeScript新版本的支持或方法最后一个可选参数的改变将被视为破坏性变更。我们可以将这些破坏性变更视为类似于AngularJS
    1.2和AngularJS 1.3之间发生的情况。
- en: Since the content that you'll read in this book will be mostly relevant across
    different Angular versions, *we'll refer to the framework as only Angular*. If
    somewhere we explicitly mention a version, this doesn't mean that the given paragraph
    will not be valid for Angular 4 or Angular 5; it most likely will. If a given
    API is available in only a specific Angular version, this will be clearly noted.
    In case you're interested to know what the changes are between different versions
    of the framework, you can take a look at the change log at [https://github.com/angular/angular/blob/master/CHANGELOG.md](https://github.com/angular/angular/blob/master/CHANGELOG.md).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书中您将阅读的内容将主要适用于不同的Angular版本，*我们将仅将框架称为Angular*。如果我们在某处明确提到一个版本，这并不意味着给定的段落对Angular
    4或Angular 5无效；很可能有效。如果某个API仅适用于特定的Angular版本，这将明确指出。如果您想了解框架不同版本之间的变化，您可以查看变更日志[https://github.com/angular/angular/blob/master/CHANGELOG.md](https://github.com/angular/angular/blob/master/CHANGELOG.md)。
- en: Now that we've introduced Angular's semantic versioning and conventions for
    referring to the different versions of the framework, we can officially start
    our journey!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了Angular的语义版本和引用框架不同版本的约定，我们可以正式开始我们的旅程了！
- en: Summary
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we made an introduction of what Angular is. We explained that
    Angular and AngularJS are entirely different frameworks.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Angular是什么。我们解释了Angular和AngularJS是完全不同的框架。
- en: 'After that, we went through the basics of the structure of the framework: having
    a core with a minimalistic, immutable API and building on top of it with different
    modules in order to provide the best development experience possible.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们探讨了框架结构的基础：拥有一个核心，该核心具有最小化和不可变的API，并在其之上构建不同的模块，以提供尽可能最佳的开发体验。
- en: Finally, we explained how Angular follows semantic versioning, which helps us
    understand why and when we should expect incompatible API changes in Angular.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们解释了Angular如何遵循语义化版本控制，这有助于我们理解为什么以及何时我们应该期待在Angular中发生不兼容的API变更。
- en: In the next chapter, we'll focus on why AngularJS couldn't keep up with the
    constant evolution of the web, how Angular took advantage of the new, powerful
    browser API, and how it makes the development of large scale applications easier.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注AngularJS为何无法跟上网络的持续发展，Angular如何利用新的、强大的浏览器API，以及它是如何使大规模应用程序的开发变得更加容易的。
