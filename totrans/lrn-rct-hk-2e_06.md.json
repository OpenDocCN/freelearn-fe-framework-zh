["```js\nconst [config, setConfig] = useState({\n  filter: 'all',\n  expandPosts: true,\n}) \n```", "```js\nsetConfig({\n  filter: {\n    author: 'Daniel Bugl',\n    fromDate: '2024-10-02',\n  },\n}) \n```", "```js\nsetConfig(**config** **=>** **(**{\n **...config,**\nfilter: {\n    author: 'Daniel Bugl',\n    fromDate: '2024-10-02',\n  }\n}**)**) \n```", "```js\nsetConfig(config => ({\n  ...config,\n  filter: {\n **...config.**filter,\n    fromDate: '2024-10-03',\n  }\n})) \n```", "```js\n{\n  filter: {\n    '0': 'a',\n    '1': 'l',\n    '2': 'l',\n    fromDate: '2024-10-03',\n  },\n  expandPosts: true\n} \n```", "```js\nconst newState = reducer(currentState, action) \n```", "```js\n{\n  filter: 'all',\n  expandPosts: true,\n} \n```", "```js\n{ type: 'TOGGLE_EXPAND' } \n```", "```js\n{ type: 'CHANGE_FILTER', all: true }\n{ type: 'CHANGE_FILTER', fromDate: '2024-10-02' }\n{ type: 'CHANGE_FILTER', author: 'Daniel' }\n{ type: 'CHANGE_FILTER', fromDate: '2024-10-03' } \n```", "```js\n{ filter: 'all' }\n{ filter: { fromDate: '2024-10-02' } }\n{ filter: { fromDate: '2024-10-02', author: 'Daniel' } }\n{ filter: { fromDate: '2024-10-03', author: 'Daniel' } } \n```", "```js\n{ type: 'CHANGE_FILTER' all: true } \n```", "```js\nfunction reducer(state, action) {\n  switch (action.type) { \n```", "```js\n case 'TOGGLE_EXPAND':\n      return { ...state, expandPosts: !state.expandPosts } \n```", "```js\n if (action.all) {\n        return { ...state, filter: 'all' }\n      } \n```", "```js\n let filter = typeof state.filter === 'string' ? {} : state.filter \n```", "```js\n if (action.fromDate) {\n        filter.fromDate = action.fromDate\n      }\n      if (action.author) {\n        filter.author = action.author\n      } \n```", "```js\n return { ...state, filter }\n    } \n```", "```js\n default:\n      throw new Error('unknown action')\n  }\n} \n```", "```js\nconst initialState = { filter: 'all' } \n```", "```js\nconst [state, dispatch] = useReducer(reducer, initialState) \n```", "```js\ndispatch({ type: 'TOGGLE_EXPAND' }) \n```", "```js\ndispatch({ type: 'CHANGE_FILTER', fromDate: '2024-10-03' }) \n```", "```js\n{\n  type: 'CREATE_POST',\n  post: {\n    title: 'React Hooks',\n    content: 'The greatest thing since sliced bread!',\n    author: 'Daniel Bugl',\n  },\n} \n```", "```js\n    $ cp -R Chapter03_2 Chapter04_1 \n    ```", "```js\n    export function postsReducer(state, action) { \n    ```", "```js\n     switch (action.type) { \n    ```", "```js\n     case 'CREATE_POST':\n          return [action.post, ...state] \n    ```", "```js\n     default:\n          throw new Error('Unknown action type')\n      }\n    } \n    ```", "```js\n    import { useState**, useReducer** } from 'react'\n    **import** **{ postsReducer }** **from****'./reducers.js'** \n    ```", "```js\n    export function App() {\n    **const** **[posts, setPosts] =** **useState****(defaultPosts)** \n    ```", "```js\nexport function App() {\n**const** **[posts, dispatch] =** **useReducer****(postsReducer, defaultPosts)** \n```", "```js\n     {username && <CreatePost username={username} **dispatch****=****{dispatch}** />} \n    ```", "```js\n    export function CreatePost({ username, **dispatch** }) { \n    ```", "```js\n     function handleSubmit(e) {\n        e.preventDefault()\n        const form = e.target\n    const title = form.elements.title.value\n    const content = form.elements.content.value\n    const newPost = { title, content, author: username }\n    **dispatch****({** **type****:** **'CREATE_POST'****,** **post****: newPost })**\n        form.reset()\n      } \n    ```", "```js\nimport React from 'react'\nclass App extends React.Component {\n**componentDidMount****() {**\n**const** **{ title } =** **this****.****props**\n**document****.****title** **= title**\n **}**\nrender() {\n    return <div>Example App</div>\n  }\n} \n```", "```js\nimport React from 'react'\nclass App extends React.Component {\n  componentDidMount() {\n    const { title } = this.props\ndocument.title = title\n  }\n**componentDidUpdate****(****prevProps****) {**\n**const** **{ title } =** **this****.**props\n**if** **(title !== prevProps.****title****) {**\n**document****.****title** **= title**\n **}**\n **}**\nrender() {\n    return <div>Example App</div>\n  }\n} \n```", "```js\nimport React from 'react'\nclass App extends React.Component {\n**updateTitle****() {**\n**const** **{ title } =** **this****.****props**\n**document****.****title** **= title**\n **}**\ncomponentDidMount() {\n**this****.****updateTitle****()**\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.title !== prevProps.title) {\n**this****.****updateTitle****()**\n    }\n  }\n  render() {\n    return <div>Example App</div>\n  }\n} \n```", "```js\nimport { useEffect } from 'react'\nfunction App({ title }) {\n**useEffect****(****() =>** **{**\n**document****.****title** **= title**\n **})**\nreturn <div>Example App</div>\n} \n```", "```js\nuseEffect(() => {\n  document.title = title\n}**, [title]**) \n```", "```js\nconst [title, setTitle] = useState('')\nuseEffect(() => {\n  document.title = title\n}, [title]) \n```", "```js\nuseEffect(() => {\n  document.title = title\n}, **[]**) \n```", "```js\nuseEffect(() => {\n  const updateInterval = setInterval(\n    () => console.log('fetching update'),\n    updateTime,\n  )\n**return****() =>****clearInterval****(updateInterval)**\n}, [updateTime]) \n```", "```js\n    $ cp -R Chapter04_1 Chapter04_2 \n    ```", "```js\n    import { useState, useEffect } from 'react' \n    ```", "```js\n    function getRole(username) { \n    ```", "```js\n     if (username === 'admin') return 'admin'\n    return 'user'\n    } \n    ```", "```js\n    export function Logout({ username, setUsername }) {\n    **const** **[role, setRole] =** **useState****(****'user'****)** \n    ```", "```js\n     useEffect(() => {\n        setRole(getRole(username))\n      }, [username]) \n    ```", "```js\n     return (\n        <form onSubmit={handleSubmit}>\n          Logged in as: <b>{username}</b>\n    **{role !==** **'user'** **?** **` (role:****${role}****)`** **:** **''****}** \n    ```", "```js\n    $ npm run dev \n    ```"]