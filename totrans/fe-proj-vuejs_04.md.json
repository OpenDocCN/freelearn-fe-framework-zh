["```js\n<template>\n  <div>\n    <h1>Hello {{ who }}</h1>\n  </div>\n</template>\n<script>\nexport default {\n  props: ['who']\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <Hello who=\"Vue.js\"/>\n  </div>\n</template>\n<script>\nimport Hello from './components/Hello.vue'\nexport default {\n  components: {\n    Hello\n  }\n}\n</script>\n```", "```js\nHello Vue.js\n```", "```js\n<template>\n  <div id=\"app\">\n    <hello who=\"Vue.js\"/>\n  </div>\n</template>\n```", "```js\nHello Vue.js\n```", "```js\nimport Hello from './components/Hello.vue'\nexport default {\n  components: {\n    Hello\n  }\n}\n```", "```js\n<template>\n  <div id=\"app\">\n    <Hey who=\"Vue.js\"/>\n  </div>\n</template>\n<script>\nimport Hello from './components/Hello.vue'\nexport default {\n  components: {\n  Hey: Hello\n  }\n}\n</script>\n```", "```js\nHello Vue.js\n```", "```js\n    <template>\n      <div>Empty</div>\n    </template>\n    <script>\n    export default {}\n    </script>\n    ```", "```js\n    export default {\n      props: ['greeting', 'who']\n    }\n    ```", "```js\n    <template>\n      <div>{{ greeting }} {{ who }}</div>\n    </template>\n    ```", "```js\n    <script>\n    import Greeting from './components/Greeting.vue'\n    </script>\n    ```", "```js\n    <script>\n    export default {\n      components: {\n        Greeting\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <Greeting greeting=\"Hey\" who=\"JavaScript\"/>\n      </div>\n    </template>\n    ```", "```js\n    Hey JavaScript\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <Greeting greeting=\"Hi\" who=\"Everyone\"/>\n      </div>\n    </template>\n    ```", "```js\n    Hi Everyone\n    ```", "```js\n<template>\n  <div id=\"app\">\n    <Hello v-bind:who=\"appWho\"/>\n  </div>\n</template>\n<script>\nimport Hello from './components/Hello.vue'\nexport default {\n  components: {\n    Hello\n  },\n  data() {\n    return {\n      appWho: 'Vue.js'\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <Hello :who=\"appWho\"/>\n  </div>\n</template>\n```", "```js\nHello Vue.js\n```", "```js\n<template> \n  <div id=\"app\">\n    <Hello :who=\"appWho\"/>\n    <button @click=\"setWho('JavaScript')\">JavaScript</button>\n    <button @click=\"setWho('Everyone')\">Everyone</button>\n  </div>\n</template>\n<script>\nimport Hello from './components/Hello.vue'\nexport default {\n  components: {\n    Hello\n  },\n  data() {\n    return {\n      appWho: 'Vue.js'\n    }\n  },\n  methods: {\n    setWho(newWho) {\n      this.appWho = newWho\n    }\n  }\n}\n</script>\n```", "```js\n    <template>\n      <div>{{ greeting }} {{ who }}</div>\n    </template>\n    <script>\n    export default {\n      props: ['greeting', 'who']\n    }\n    </script>\n    ```", "```js\n    <script>\n    import Greeting from './components/Greeting.vue'\n    export default {\n      components: {\n        Greeting\n      }\n    }\n    </script>\n    ```", "```js\n    export default {\n      data() {\n        return {\n          greeting: 'Hello',\n          who: 'Vue.js'\n        }\n      }\n    }\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <Greeting :greeting=\"greeting\" :who=\"who\"/>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    // imports\n    const possibleGreetings = [\n        { greeting: 'Hello', who: 'Vue.js' },\n        { greeting: 'Hey', who: 'Everyone' },\n        { greeting: 'Hi', who: 'JavaScript' }\n    ]\n    // components export\n    </script>\n    ```", "```js\n    <script>\n    // imports and greetings\n    export default {\n      // components definition\n      data() {\n        return {\n          currentIndex: 0\n        }\n      },\n      computed: {\n        currentGreeting() {\n          return possibleGreetings[this.currentIndex]\n        },\n        greeting() {\n          return this.currentGreeting.greeting\n        },\n        who() {\n          return this.currentGreeting.who\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    Hello Vue.js\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <Greeting :greeting=\"greeting\" :who=\"who\"/>\n        <button @click=\"newGreeting()\">New Greeting</button>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n      // imports and greetings\n    export default {\n        // other component properties\n      methods: {\n        newGreeting() {\n          this.currentIndex = this.currentIndex ===         possibleGreetings.length – 1\n            ? 0\n            : this.currentIndex + 1\n        }\n      }\n    }\n    </script>\n    ```", "```js\n<template>\n  <div>\n    <span v-for=\"r in repetitions\" :key=\"r\">\n      {{ content }}\n    </span>\n  </div>\n</template>\n<script>\nexport default {\n  props: ['times', 'content'],\n  computed: {\n    repetitions() {\n      return Array.from({ length: this.times });\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <Repeat :times=\"count\" content=\"Repeat.\" />\n    <button @click=\"increment()\">Repeat</button>\n  </div>\n</template>\n<script>\nimport Repeat from './components/Repeat.vue'\nexport default {\n  components: {\n    Repeat\n  },\n  data() {\n    return { count: 1 }\n  },\n  methods: {\n    increment() {\n      this.count += 1\n    }\n  }\n}\n</script>\n```", "```js\n<script>\nexport default {\n  props: {\n    times: {\n      type: Number\n    },\n    content: {\n      type: String\n    }\n  },\n  // rest of component definition\n}\n</script>\n```", "```js\n<script>\nimport Repeat from './components/RepeatTyped.vue'\n// no other changes\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <Repeat :times=\"count\" :content=\"55\" />\n  </div>\n</template>\n<script>\n// no changes to imports\nexport default {\n  data() {\n    return { count: 'no-number-here' }\n  },\n  // other properties\n}\n</script>\n```", "```js\nInvalid prop: type check failed for prop \"times\". Expected Number with value NaN, got String with value \"no-number-here\"\n```", "```js\nInvalid prop: type check failed for prop \"content\". Expected String with value \"55\", got Number with value 55\n```", "```js\n<script>\nexport default {\n  props: {\n    // other prop definitions\n    content: {\n      type: [String, Number]\n    }\n  }\n  // rest of component definition\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <Repeat :times=\"3\" :content=\"55\" />\n  </div>\n</template>\n```", "```js\n55 55 55\n```", "```js\n<script>\nimport User from './user.js'\nexport default {\n  props: {\n    todoListPromise: {\n      type: Promise\n    },\n    currentUser: {\n      type: User\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <template v-if=\"todosPromise && !error\">\n      <TodoList\n        :todoListPromise=\"todosPromise\"\n        :currentUser=\"currentUser\"\n      />\n    </template>\n    {{ error }}\n  </div>\n</template>\n<script>\nimport TodoList from './components/TodoList.vue'\nimport User from './components/user.js'\nconst currentUser = new User()\nexport default {\n  components: {\n    TodoList\n  },\n  mounted() {\n    this.todosPromise = fetch('/api/todos').then(res => {\n      if (res.ok) {\n        return res.json()\n      }\n      throw new Error('Could not fetch todos')\n    }).catch(error => {\n      this.error = error\n    })\n  },\n  data() {\n    return { currentUser, error: null }\n  }\n}\n</script>\n```", "```js\n<template>\n  <select>\n    <option\n      :selected=\"selected === o.value\"\n      v-for=\"o in options\"\n      :key=\"o.value\"\n    >\n      {{ o.label }}\n    </option>\n  </select>\n</template>\n<script>\nexport default {\n  props: {\n    selected: {\n      type: String\n    },\n    options: {\n      type: Array\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <CustomSelect :selected=\"selected\" :options=\"options\" />\n  </div>\n</template>\n<script>\nimport CustomSelect from './components/CustomSelect.vue'\nexport default {\n  components: {\n    CustomSelect\n  },\n  data() {\n    return {\n      selected: 'salt-vinegar',\n      options: [\n        {\n          value: 'ready-salted',\n          label: 'Ready Salted'\n        },\n        {\n          value: 'cheese-onion',\n          label: 'Cheese & Onion'\n        },\n        {\n          value: 'salt-vinegar',\n          label: 'Salt & Vinegar'\n        },\n      ]\n    }\n  }\n}\n</script>\n```", "```js\n<script>\nexport default {\n  // other component properties\n  props: {\n    // other prop definitions\n    options: {\n      type: Array,\n      validator(options) {\n        return options.every(o => Boolean(o.value && o.label))\n      }\n    }\n  }\n}\n</script>\n```", "```js\n<script>\nexport default {\n  // other component properties\n  props: {\n    selected: {\n      type: String,\n      required: true\n    }\n    // other prop definitions\n  }\n}\n</script>\n```", "```js\n<template>\n  <ul>\n    <li\n      v-for=\"el in currentWindow\"\n      :key=\"el.id\"\n    >\n      {{ el.content }}\n    </li>        \n  </ul>\n</template>\n<script>\nexport default {\n  props: {\n    items: {\n      type: Array\n    },\n    limit: {\n      type: Number\n    },\n    offset: {\n      type: Number\n    }\n  },\n  computed: {\n    currentWindow() {\n      return this.items.slice(this.offset, this.limit)\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\">\n    <PaginatedList :items=\"snacks\" :offset=\"offset\" :      limit=\"limit\"/>\n    <button @click=\"offset++\">\n      Increment Offset (current: {{ offset }})\n    </button>\n    <button @click=\"limit++\">\n      Increment Limit (current: {{ limit }})\n    </button>\n  </div>\n</template>\n<script>\nimport PaginatedList from './components/PaginatedList.vue'\nexport default {\n  components: {\n    PaginatedList\n  },\n  data() {\n    return {\n      offset: 0,\n      limit: 0,\n      snacks: [\n        {\n          id: 'ready-salted',\n          content: 'Ready Salted'\n        },\n        {\n          id: 'cheese-onion',\n          content: 'Cheese & Onion'\n        },\n        {\n          id: 'salt-vinegar',\n          content: 'Salt & Vinegar'\n        },\n      ]\n    }\n  }\n}\n</script>\n```", "```js\nHello Vue.js\n```", "```js\n<script>\nexport default {\n  props: {\n    // other props\n    limit: {\n      type: Number,\n      default: 25,\n    },\n    offset: {\n      type: Number,\n      default: 0,\n    }\n  },\n  // other component properties\n}\n</script>\n```", "```js\n<script>\nexport default {\n  props: {\n    items: {\n      type: Array,\n      default() {\n        return []\n      }\n    }\n    // other props\n  },\n  // other component properties\n}\n</script>\n```", "```js\n    <script>\n    export default {\n      props: {\n        config: {\n          type: Object\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <script>\n    export default {\n      // other component properties\n      computed: {\n        repetitions() {\n          return Array.from({ length: this.config.times })\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div>\n        <span v-for=\"r in repetitions\" :key=\"r\">\n          {{ config.content }}\n        </span>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    export default {\n      props: {\n        config: {\n          type: Object,\n          validator(value) {\n            return typeof value.times === 'number' &&\n              typeof value.content === 'string'\n          }\n        }\n      },\n      // other component properties\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <Repeat :config=\"{}\" />\n      </div>\n    </template>\n    <script>\n    import Repeat from './components/Repeat.vue'\n    export default {\n      components: {\n        Repeat\n      }\n    }\n    </script>\n    ```", "```js\n    <Repeat :config=\"{ times: 3, content: 'Repeat me.' }\" />\n    ```", "```js\n    Repeat me. Repeat me. Repeat me.\n    ```", "```js\n<template>\n  <div>\n    <slot />\n  </div>\n</template>\n```", "```js\n<template>\n  <div>\n    <Box>\n      <h3>This whole h3 is rendered in the slot</h3>\n    </Box>\n  </div>\n</template>\n<script>\nimport Box from './components/Box.vue'\nexport default {\n  components: {\n    Box\n  }\n}\n</script>\n```", "```js\nThis whole h3 is rendered in the slot\n```", "```js\n<template>\n  <div>\n    <Box>\n      <h3>This whole h3 is rendered in the slot with parent count {{         count }}</h3>\n    </Box>\n    <button @click=\"count++\">Increment</button>\n  </div>\n</template>\n<script>\nimport Box from './components/Box.vue'\nexport default {\n  components: {\n    Box\n  },\n  data() {\n    return { count: 0 }\n  }\n}\n</script>\n```", "```js\n<template>\n  <article>\n    <div>Title: <slot name=\"title\" /></div>\n    <div>Excerpt: <slot name=\"excerpt\" /></div>\n  </article>\n</template>\n```", "```js\n<template>\n  <div>\n    <Article>\n      <template v-slot:title>\n        <h3>My Article Title</h3>\n      </template>\n      <template v-slot:excerpt>\n        <p>First paragraph of content</p>\n        <p>Second paragraph of content</p>\n      </template>\n    </Article>\n  </div>\n</template>\n<script>\nimport Article from './components/Article.vue'\nexport default {\n  components: {\n    Article\n  }\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <Article>\n      <template #title>\n        <h3>My Article Title</h3>\n      </template>\n      <template #excerpt>\n        <p>First paragraph of content</p>\n        <p>Second paragraph of content</p>\n      </template>\n    </Article>\n  </div>\n</template>\n```", "```js\n<template>\n  <div>\n    <Article>\n      <h3 v-slot:title>My Article Title</h3>\n    </Article>\n  </div>\n</template>\n```", "```js\n<template>\n  <MyComponent>\n    <template>Default template</template>\n  </MyComponent>\n</template>\n```", "```js\n<template>\n  <MyComponent>\n    <template #default>Default template</template>\n  </MyComponent>\n</template>\nThe default slot can be denoted with longhand slot notation.\n<template>\n  <MyComponent>\n    <template v-slot:default>Default template</template>\n  </MyComponent>\n</template>\n```", "```js\n<template>\n  <ul>\n    <li\n      v-for=\"el in currentWindow\"\n      :key=\"el.id\"\n    >\n      <slot :item=\"el\" />\n    </li>\n  </ul>\n</template>\n<script>\nexport default {\n  props: ['items', 'limit', 'offset'],\n  computed: {\n    currentWindow() {\n      return this.items.slice(this.offset, this.limit)\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <PaginatedList :items=\"snacks\">\n      <template #default=\"{ item }\">\n        {{ item.content }}\n      </template>\n    </PaginatedList>\n  </div>\n</template>\n```", "```js\n<template v-slot=\"slotProps\">\n  {{ slotProps.item.content }}\n</template>\n```", "```js\n<script>\nimport PaginatedList from './components/PaginatedList.vue'\nexport default {\n  components: {\n    PaginatedList\n  },\n  data() {\n    return {\n      snacks: [\n        {\n          id: 'ready-salted',\n          content: 'Ready Salted'\n        },\n        {\n          id: 'cheese-onion',\n          content: 'Cheese & Onion'\n        },\n        {\n          id: 'salt-vinegar',\n          content: 'Salt & Vinegar'\n        },\n      ]\n    }\n  }\n}\n</script>\n```", "```js\n    <template>\n      <div>\n        <slot name=\"image\" />\n        <slot name=\"title\" />\n        <slot name=\"description\" />\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    import Card from './components/Card.vue'\n    export default {\n      components: {\n        Card\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <Card>\n          <template #image>\n            <img src=\"img/300\" />\n          </template>\n          <template #title>\n            <h2>My Holiday picture</h2>\n          </template>\n          <template #description>\n            <p>Here I can describe the contents of the picture.</p>\n            <p>For example what we can see in the photo is a nice           landscape.</p>\n          </template>\n        </Card>\n      </div>\n    </template>\n    ```", "```js\n<template>\n  <div id=\"app\">\n    {{ message | truncate }}\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing         elit, sed do eiusmod tempor incididunt ut labore et dolore         magna aliqua. Ut enim ad minim veniam, quis nostrud         exercitation llamco laboris nisi ut aliquip ex ea commodo         consequat. Duis aute irure dolor in reprehenderit in         voluptate velit esse cillum dolore eu fugiat nulla         pariatur. Excepteur sint occaecat cupidatat non proident,         sunt in culpa qui officia deserunt mollit anim id         est laborum.'\n    }\n  }\n}\n</script>\n```", "```js\n<script>\nexport default {\n  filters: {\n    truncate(value) {\n      return value.slice(0, 120)\n    }\n  },\n  // other component properties\n}\n</script>\n```", "```js\n<script>\nexport default {\n  filters: {\n    truncate(value) {\n      if (!value) return\n      const val = value.toString()\n      return val.slice(0, 120)\n    }\n  },\n  // other component properties\n}\n</script>\n```", "```js\n    <template>\n      <div id=\"app\">\n        <p>{{ '7 char' | ellipsis }}</p>\n        <p>{{ '14 characters' | ellipsis }}</p>\n        <p>{{ 'More than 14 characters' | ellipsis }}</p>\n        <p>{{ null | ellipsis }}</p>\n        <p>{{ 55 | ellipsis }}</p>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    export default {\n      filters: {\n        ellipsis(value) {\n          return value.length > 14 ? `${value.slice(0, 11)}...` :         value\n        }\n      }\n    }\n    </script>\n    ```", "```js\n        ellipsis(value) {\n          if (!value) return\n          // rest of the function\n    }\n    ```", "```js\n<template>\n  <div id=\"app\">\n    <input ref=\"theInput\" />\n  </div>\n</template>\n```", "```js\n<template>\n  <div id=\"app\">\n    <input ref=\"theInput\" />\n    <button @click=\"focus()\">Focus Input</button>\n  </div>\n</template>\n<script>\nexport default {\n  methods: {\n    focus() {\n      this.$refs.theInput.focus()\n    }\n  }\n}\n</script>\n```", "```js\n    <template>\n      <div>\n        <textarea\n          ref=\"textArea\"\n          cols=\"50\"\n          rows=\"7\"\n        >\n        </textarea>\n      </div>\n    </template>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <TextEditorWithCount />\n      </div>\n    </template>\n    <script>\n    import TextEditorWithCount from './components/  TextEditorWithCount.vue'\n    export default {\n      components: {\n        TextEditorWithCount\n      }\n    }\n    </script>\n    ```", "```js\n    <script>\n    import * as Countable from 'countable'\n    export default {\n      mounted() {\n        Countable.on(this.$refs.textArea, (count) => {\n          this.count = count\n        })\n      },\n      data() {\n        return {\n          count: null\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\">\n        <!-- textarea -->\n        <ul v-if=\"count\">\n          <li>Paragraphs: {{ count.paragraphs }}</li>\n          <li>Sentences: {{ count.sentences }}</li>\n          <li>Words: {{ count.words }}</li>\n        </ul>\n      </div>\n    </template>\n    ```", "```js\n    <script>\n    // imports\n    export default {\n      mounted() {\n        Countable.on(this.$refs.textArea, (count) => {\n          this.count = count\n        })\n        this.$once('hook:beforeDestroy', function () {\n          Countable.off(this.$refs.textArea)\n        })\n      },\n      // other component properties\n    }\n    </script>\n    ```", "```js\n<script> \nexport default {\n  data () {\n        return {\n            message: null\n        }\n    },\n  methods: {\n    send() {\n      this.$emit('send', this.message);\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div>\n    <input v-model=\"message\" />\n    <button @click=\"$emit('send', message)\">Emit inline</button>\n  </div>\n</template>\n```", "```js\n<template>\n  <div id=\"app\">\n    <p>Message: {{ message }}</p>\n    <MessageEditor @send=\"message = $event\" />\n    <button @click=\"message = null\">Reset</button>\n  </div>\n</template>\n<script>\nimport MessageEditor from './components/MessageEditor.vue'\nexport default {\n  components: {\n    MessageEditor\n  },\n  data() {\n    return {\n      message: null\n    }\n  }\n}\n</script>\n```"]