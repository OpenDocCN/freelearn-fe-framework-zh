- en: Reactive Forms and Component Interaction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式表单和组件交互
- en: So far, you've been working with putting together the basic elements that make
    up an Angular application, such as modules, components, pipes, services, RxJS,
    unit testing, environment variables, and even going a step ahead by learning how
    to deliver your web application using Docker and make it look polished with Angular
    Material.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您一直在努力组合构成Angular应用程序的基本元素，比如模块、组件、管道、服务、RxJS、单元测试、环境变量，甚至更进一步地学习如何使用Docker交付您的Web应用程序，并使用Angular
    Material使其看起来更加精致。
- en: In order to build truly dynamic applications, we need to build features that
    enable rich user interactions and leverage modern web functionality such as `LocalStorage`
    and `GeoLocation`. You also need to become proficient with new Angular syntax
    to effectively leverage binding, conditional layouts, and repeating elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建真正动态的应用程序，我们需要构建能够实现丰富用户交互并利用现代网络功能的功能，比如`LocalStorage`和`GeoLocation`。您还需要熟练掌握新的Angular语法，以有效地利用绑定、条件布局和重复元素。
- en: You need to be able to work with Angular Forms to create input fields with validation
    messages, create engaging search experiences with search-as-you-type functionality,
    provide users a way to customize their preferences, and be able to persist this
    information both locally and on a server. Your applications will likely have multiple
    components sharing data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要能够使用Angular表单来创建带有验证消息的输入字段，使用搜索即时输入功能创建引人入胜的搜索体验，为用户提供自定义其偏好的方式，并能够在本地和服务器上持久保存这些信息。您的应用程序可能会有多个共享数据的组件。
- en: As your app matures and you involve more people to work on it with you or communicate
    your ideas to your colleagues, it becomes increasingly difficult to do so with
    just a hand-drawn sketch. This means we need a more professional mock-up, preferably
    an interactive one, to best demonstrate the planned UX for the app.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的应用程序不断发展，并且有更多的人参与其中或者与同事交流您的想法，仅仅用手绘草图就变得越来越困难。这意味着我们需要一个更专业的模拟，最好是一个交互式的模拟，以最好地展示应用程序的计划用户体验。
- en: 'In this chapter, you will do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将做以下事情：
- en: 'Become aware of these:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 了解这些：
- en: Two-way binding
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向绑定
- en: Template driven forms
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板驱动表单
- en: Become proficient in interactions between components
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 熟练掌握组件之间的交互
- en: 'Be able to create these:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 能够创建这些：
- en: Interactive prototype
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互式原型
- en: Input field and validation using Angular Reactive Forms
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular响应式表单进行输入字段和验证
- en: Interactive prototype
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式原型
- en: Appearances do matter. Whether you're working on a development team or as a
    freelancer, your colleagues, bosses, or clients will always take a well put together
    presentation more seriously. In [Chapter 2](312e0dbe-54ac-45c6-97c7-f41c98723919.xhtml), *Create
    a Local Weather Web Application*, I mentioned the time and information management
    challenges of being a full-stack developer. We must pick a tool that can achieve
    the best results with the least amount of work. This usually means going down
    the paid-tool route, but UI/UX design tools are rarely free or cheap.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 外观确实很重要。无论您是在开发团队工作还是作为自由职业者，您的同事、老板或客户总是会更认真地对待一个精心准备的演示。在[第2章](312e0dbe-54ac-45c6-97c7-f41c98723919.xhtml)中，*创建本地天气Web应用程序*，我提到了成为全栈开发人员的时间和信息管理挑战。我们必须选择一个可以在最少的工作量下取得最佳结果的工具。这通常意味着选择付费工具，但UI/UX设计工具很少是免费或便宜的。
- en: A prototyping tool will help you create a better, more professional looking,
    mock up of the app. Whatever tool you choose should also support the UI framework
    you choose to use, in this case, Material.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 原型工具将帮助您创建一个更好、更专业的应用程序模拟。无论您选择哪种工具，都应该支持您选择使用的UI框架，在这种情况下是Material。
- en: If a picture is worth a 1,000 words, an interactive prototype of your app is
    worth a 1,000 lines of code. An interactive mock-up of the app will help you vet
    ideas before you write a single line of code and save you a lot of code writing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一张图片价值千言万语，那么你的应用的交互式原型价值千行代码。应用的交互式模型将帮助你在编写一行代码之前审查想法，并节省大量的代码编写。
- en: MockFlow WireFramePro
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MockFlow WireFramePro
- en: I've picked MockFlow WireFramePro, [https://mockflow.com](https://mockflow.com),
    as an easy-to-use, capable, and online tool that supports Material design UI elements
    and allows you to create multiple pages, which can then be linked together to
    create the illusion of a working application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了MockFlow WireFramePro，[https://mockflow.com](https://mockflow.com)，作为一个易于使用、功能强大且在线支持Material
    design UI元素的工具，它允许你创建多个页面，然后将它们链接在一起，以创建一个工作应用程序的幻觉。
- en: Most importantly, at the time of publishing, MockFlow allows one free project
    forever with the full feature set and capabilities available. This will give you
    a chance to truly vet the usefulness of the tool without artificial limits or
    a trial period that always seems to go by much quicker than you expect.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，在发布时，MockFlow允许永远免费使用一个完整功能集和功能。这将给你一个机会真正审查工具的有用性，而不受人为限制或者试用期的影响，试用期总是比你预期的要快得多。
- en: Balsamiq is the better-known wireframing tool. However, [https://balsamiq.com](https://balsamiq.com)
    doesn't offer any free usage, but if you are looking for a tool without a monthly
    cost, I would highly recommend Balsamiq's desktop application Mockups, which has
    a one-time purchase cost.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Balsamiq是更知名的线框工具。然而，[https://balsamiq.com](https://balsamiq.com)没有提供免费使用，但如果你正在寻找一个没有月费的工具，我强烈推荐Balsamiq的桌面应用Mockups，它只需要一次购买费用。
- en: Building the mock-up
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建模型
- en: 'We start by adding a new task to create an interactive prototype and at the
    end of the task, I''ll attach all artifacts to this task so that they''re stored
    on GitHub where it is accessible to all team members and also can be linked from
    the Wiki page for persistent documentation. Let''s pull this new task to the In
    Progress column and take a look at the status of our Kanban board from Waffle.io:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先添加一个新任务来创建一个交互式原型，在任务结束时，我会将所有工件附加到这个任务上，这样它们就存储在GitHub上，所有团队成员都可以访问，也可以从Wiki页面链接进行持久性文档化。让我们将这个新任务拉到进行中的列，并查看来自Waffle.io的看板板的状态：
- en: '![](Images/049df723-d8b0-41be-b5d0-4118eba0e49a.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/049df723-d8b0-41be-b5d0-4118eba0e49a.png)'
- en: 'WireframePro is pretty intuitive as a drag and drop design interface, so I
    won''t go into the details of how the tool works, but I will highlight some tips:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: WireframePro作为一个拖放设计界面非常直观，所以我不会详细介绍工具的工作原理，但我会强调一些技巧：
- en: Create your project
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你的项目
- en: Select a component pack, either Hand Drawn UI or Material design
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个组件包，可以是手绘UI或者Material design
- en: 'Add each screen as a new page, as shown:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个屏幕作为一个新页面添加，如下所示：
- en: '![](Images/80ba1e1d-9144-4b72-9d9a-8b6794bd804a.png)MockFlow.com WireFrame
    Pro'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/80ba1e1d-9144-4b72-9d9a-8b6794bd804a.png)MockFlow.com WireFrame
    Pro'
- en: I would recommend sticking to the hand-drawn UI look and feel, because it sets
    the right expectation with your audience. If you present a very high quality of
    a mock-up on your first meeting with a client, your first demo will be an understatement.
    You will, at best, merely meet expectations and, at worst, underwhelm your audience.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议坚持手绘UI的外观和感觉，因为它能够为你的观众设定正确的期望。如果你在与客户的第一次会议上展示了一个非常高质量的模型，你的第一个演示将是一个低调的陈述。你最多只能满足期望，最坏的情况下，会让你的观众感到失望。
- en: Home screen
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主屏幕
- en: 'Here''s the new mock-up of the home screen:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是主屏幕的新模型：
- en: '![](Images/fbab9fda-4d66-43a7-81c9-0d0d0735e807.png)LocalCast Weather Wireframe'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/fbab9fda-4d66-43a7-81c9-0d0d0735e807.png)LocalCast Weather Wireframe'
- en: You'll note some differences, such as the app toolbar being conflated with the
    browser bar and the intentional vagueness of the repeating elements. I have made
    these choices to reduce the amount of design time I would need to spend on each
    screen. I simply used horizontal and vertical line objects to create the grid.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到一些不同之处，比如应用工具栏与浏览器栏的混合以及重复元素的故意模糊。我做出这些选择是为了减少我需要在每个屏幕上花费的设计时间。我只是使用水平和垂直线对象来创建网格。
- en: Search results
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索结果
- en: The search screen similarly remains intentionally vague to avoid having to maintain
    any kind of detailed information. Surprisingly, your audience is far more likely
    to focus on what your test data is rather than focusing on the design elements.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索屏幕同样故意保持模糊，以避免必须维护任何详细信息。令人惊讶的是，您的观众更有可能关注您的测试数据，而不是关注设计元素。
- en: 'By being vague, we intentionally keep the audiences attention on what matters.
    Here''s the search screen mock-up:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过含糊不清，我们故意让观众的注意力集中在重要的事情上。以下是搜索屏幕的模拟：
- en: '![](Images/e40d3db6-04ae-45dc-b22c-da7ecc88ed57.png)LocalCast Weather Search
    Wireframe'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/e40d3db6-04ae-45dc-b22c-da7ecc88ed57.png)LocalCast天气搜索线框图'
- en: Settings pane
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置窗格
- en: The settings pane is a separate screen with the elements from the home screen
    copied over and applied 85% opacity to create a model-like experience. The settings
    pane itself is just a rectangle with a black border and a solid white background.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 设置窗格是一个单独的屏幕，其中包含从主屏幕复制并应用了85%不透明度的元素，以创建类似模型的体验。设置窗格本身只是一个带有黑色边框和纯白背景的矩形。
- en: 'Take a look at the following mock-up:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的模拟：
- en: '![](Images/2cfeee5a-082d-4288-89d9-29c04de3bdf2.png)LocalCast Weather Settings
    Wireframe'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/2cfeee5a-082d-4288-89d9-29c04de3bdf2.png)LocalCast天气设置线框图'
- en: Adding interactivity
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加交互性
- en: Being able to click around a mock-up and get a feel for the navigational workflow
    is an indispensable tool to get early user feedback. This will save you and your
    clients a lot of frustration, time, and money.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 能够点击模拟并了解导航工作流程的感觉是一个无法或缺的工具，可以获得早期用户反馈。这将为您和您的客户节省大量的沮丧、时间和金钱。
- en: 'To link elements together, do as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要将元素链接在一起，请按照以下步骤操作：
- en: Select a clickable element such as the *gear* icon on the Home Screen
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择主屏幕上的可点击元素，如*齿轮*图标
- en: Under the Link subheading, click on Select Page
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在链接子标题下，点击选择页面
- en: On the pop-over window, select Settings
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中，选择设置
- en: 'Click on Create Link, as shown in this screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建链接，如此截图所示：
- en: '![](Images/e8d1d737-cf40-4edc-a9ef-e782fd021d1b.png)WireFrame Pro - Adding
    a Link'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/e8d1d737-cf40-4edc-a9ef-e782fd021d1b.png)WireFrame Pro - 添加链接'
- en: Now, when you click on the *gear* icon, the tool will display the settings page,
    which will create the effect of the sidebar actually displayed on the same page.
    To go back to the home screen, you can link the gear icon and the section outside
    of the sidebar back to that page so that the user can navigate back and forth.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您点击*齿轮*图标时，工具将显示设置页面，这将在同一页面上创建侧边栏实际显示的效果。要返回主屏幕，您可以将齿轮图标和侧边栏外部的部分链接回该页面，以便用户可以来回导航。
- en: Exporting the functional prototype
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出功能原型
- en: 'Once your prototype is completed, you can export it as various formats:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的原型完成，您可以将其导出为各种格式：
- en: 'Select the Export wireframe button, as shown:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择导出线框图按钮，如下所示：
- en: '![](Images/bdb1f463-01af-4ea6-b162-1fb6d0bbe731.png)WireFrame Pro - Export
    wireframe'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/bdb1f463-01af-4ea6-b162-1fb6d0bbe731.png)WireFrame Pro - 导出线框图'
- en: 'Now select your file format, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择您的文件格式，如下所示：
- en: '![](Images/3303b71e-2d1a-4c69-99b1-9708eb0d0356.png)WireFrame Pro - File formats'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/3303b71e-2d1a-4c69-99b1-9708eb0d0356.png)WireFrame Pro - 文件格式'
- en: I prefer the HTML format, for flexibility; however, your workflow and needs
    will differ.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢HTML格式，因为它更灵活；然而，您的工作流程和需求会有所不同。
- en: If you selected HTML, you will get to download a ZIP bundle of all the assets.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您选择了HTML，您将获得一个ZIP捆绑包的所有资产。
- en: 'Unzip the bundle and navigate to it using your browser; you should get an interactive
    version of your wireframe, as illustrated:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压捆绑包并使用浏览器导航到它；您应该会得到您线框的交互版本，如图所示：
- en: '![](Images/55daea75-657d-411f-b4bc-a14cad741628.png)WireFrame Pro - Interactive
    WireframeThe interactive elements are highlighted in yellow in the following screenshot.
    You can enable or disable this behavior with the `Reveal Links` option on the
    bottom-left corner of the screen.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/55daea75-657d-411f-b4bc-a14cad741628.png)WireFrame Pro - 交互式线框交互元素在以下截图中以黄色突出显示。您可以使用屏幕左下角的“显示链接”选项启用或禁用此行为。'
- en: You can even containerize the prototype HTML project using `minimal-nginx-server`
    or `minimal-node-server` and host it on Zeit Now, using the exact same techniques
    discussed in [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml), *Prepare
    Angular App for Production Release*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以使用“minimal-nginx-server”或“minimal-node-server”对原型HTML项目进行容器化，并使用相同的技术在Zeit
    Now上进行托管，这与[第3章](4e68114e-68b7-4fe6-a853-81347e981667.xhtml)中讨论的准备Angular应用程序进行生产发布的技术完全相同。
- en: 'Now add all assets to a comment on the GitHub issue, including the ZIP bundle,
    and we are ready to move on to the next task. Let''s move Add city search card
    ... to In Progress, as shown in our Kanban board:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将所有资产添加到GitHub问题的评论中，包括ZIP捆绑包，我们准备继续下一个任务。让我们将“添加城市搜索卡…”移动到“进行中”，如我们看板中所示：
- en: '![](Images/b3214869-cf27-471d-bee2-3f0b18d82e85.png)Waffle.io Kanban Board'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/b3214869-cf27-471d-bee2-3f0b18d82e85.png)Waffle.io看板'
- en: Searching with user input
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用户输入进行搜索
- en: Now, we'll implement the search bar on the home screen of the application. The
    user story states display forecast information for current location, which may
    be taken to imply an inherit GeoLocation functionality. However, as you may note,
    GeoLocation is listed as a separate task. The challenge is that with native platform
    features such as GeoLocation, you are never guaranteed to receive the actual location
    information. This may be due to signal loss issues on mobile devices or the user
    may simply refuse to give permission to share their location information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在应用程序的主屏幕上实现搜索栏。用户故事中指出显示当前位置的天气预报信息，这可能意味着具有地理位置功能。然而，正如您可能注意到的，地理位置被列为一个单独的任务。挑战在于，使用原生平台功能如地理位置，您永远无法保证获得实际的位置信息。这可能是由于移动设备的信号丢失问题，或者用户可能拒绝分享他们的位置信息。
- en: First and foremost, we must deliver a good baseline UX and implement value-add
    functionality such as GeoLocation only afterwards. We will be implementing a search-as-you-type
    functionality, while providing feedback to the user, if the service is unable
    to retrieve the expected data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须提供良好的基线用户体验，并实现增值功能，如地理位置功能。我们将实现搜索即时输入功能，同时向用户提供反馈，如果服务无法检索到预期的数据。
- en: Initially, it may be intuitive to implement a type-ahead search mechanism; however,
    `OpenWeatherMap` APIs don't provide such an endpoint. Instead, they provide bulk
    data downloads, which are costly and are in the multiples of megabytes range.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，实现类型搜索机制可能是直观的；然而，“OpenWeatherMap”API并没有提供这样的端点。相反，它们提供昂贵且在兆字节范围内的大量数据下载。
- en: We will need to implement our own application server to expose such an endpoint
    so that our app can effectively query, while using minimal amounts of data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现自己的应用服务器来公开这样一个端点，以便我们的应用可以有效地查询，同时使用最少量的数据。
- en: The free endpoints for OpenWeatherMap does pose an interesting challenge, where
    a two-digit country code may accompany either a city name or zip code for the
    most accurate results. This is a good opportunity to implement a feedback mechanism
    to the user if more than one result is returned for a given query.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWeatherMap的免费端点确实带来了一个有趣的挑战，其中两位数的国家代码可能会伴随城市名称或邮政编码以获得最准确的结果。这是一个很好的机会，可以为用户实现反馈机制，如果对于给定的查询返回了多个结果。
- en: We want every iteration of the app to be a potentially releasable increment
    and avoid doing too much at any given one time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望应用程序的每次迭代都是一个潜在的可发布的增量，并且避免在任何给定时间做太多事情。
- en: 'We will do the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下操作：
- en: Add Angular Form Control
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加Angular表单控件
- en: Use Angular Material Input as documented at [https://material.angular.io/components/input](https://material.angular.io/components/input)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Angular Material Input，如在[https://material.angular.io/components/input](https://material.angular.io/components/input)中记录的那样。
- en: Create the search bar as its own component
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将搜索栏创建为其自己的组件
- en: Extend the existing endpoint to accept zip code and make country code optional
    in `weather.service`
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展现有的端点以接受邮政编码，并使国家代码在`weather.service`中变为可选项
- en: Throttle requests
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节流请求
- en: Adding Angular Reactive Forms
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Angular响应式表单
- en: You may wonder why we're adding Angular Forms, since we are adding just a single
    input field and not a form with multiple inputs. As a general rule of thumb, any
    time you add any input field, it should be wrapped in a `<form>` tag . The `Forms`
    module contains the `FormControl` that enables you to write the backing code behind
    the input field to respond to user inputs, and provide the appropriate data or
    the validation or message in response.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想为什么我们要添加Angular表单，因为我们只添加了一个单个输入字段，而不是具有多个输入的表单。作为一个一般的经验法则，任何时候您添加任何输入字段，它都应该包装在`<form>`标签中。`Forms`模块包含`FormControl`，它使您能够编写支持输入字段背后的后备代码，以响应用户输入，并根据需要提供适当的数据、验证或响应消息。
- en: 'There are two types of Forms in Angular:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Angular中有两种类型的表单：
- en: '**Template Driven:** These forms are similar to what you may be familiar from
    AngularJS, where the form logic is mostly inside the HTML template. I''m personally
    not a fan of this approach, because it is harder to test these behaviors, and
    fat HTML templates become difficult to maintain quickly.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板驱动：** 这些表单类似于您可能熟悉的AngularJS中的表单，其中表单逻辑主要在HTML模板中。我个人不喜欢这种方法，因为很难测试这些行为，而且庞大的HTML模板很快就难以维护。'
- en: '**Reactive:** The behavior of Reactive forms is driven by TypeScript code written
    in the controller. This means that your validation logic can be unit tested and,
    better yet, reused across your application. Read more about Reactive forms at [https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式：** 响应式表单的行为由控制器中编写的TypeScript代码驱动。这意味着您的验证逻辑可以进行单元测试，并且更好的是可以在整个应用程序中重复使用。在[https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms)中了解更多关于响应式表单的信息。'
- en: 'Let''s start by importing the `ReactiveFormsModule` into our app:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将`ReactiveFormsModule`导入到我们的应用程序中：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Reactive forms is the core technology that will enable the Angular Material
    team to write richer tools, like one that can autogenerate an input form based
    off of a TypeScript interface in the future.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式表单是使Angular Material团队能够编写更丰富的工具的核心技术，例如可以根据将来的TypeScript接口自动生成输入表单的工具。
- en: Adding and verifying components
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和验证组件
- en: 'We will be creating a `citySearch` component using Material form and input
    modules:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Material表单和输入模块创建一个`citySearch`组件：
- en: 'Add `MatFormFieldModule` and `MatInputModule` to `material.module` so that
    it becomes available for use in the app:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MatFormFieldModule`和`MatInputModule`添加到`material.module`中，以便在应用程序中可用：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We're adding `MatFormFieldModule`, because each input field should be wrapped
    in a `<mat-form-field>` tag to get the most out of Angular Material functionality.
    At a high-level, `<form>` encapsulates numerous default behaviors for keyboard,
    screen-reader, and browser extension users; `<mat-form-field>` enables easy two-way
    data binding, a technique that should be used in moderation and also allows for
    graceful label, validation, and error message display.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在添加`MatFormFieldModule`，因为每个输入字段都应该包装在`<mat-form-field>`标签中，以充分利用Angular
    Material的功能。在高层次上，`<form>`封装了键盘、屏幕阅读器和浏览器扩展用户的许多默认行为；`<mat-form-field>`实现了简单的双向数据绑定，这种技术应该适度使用，并且还允许优雅的标签、验证和错误消息显示。
- en: 'Create the new `citySearch` component:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的`citySearch`组件：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since we added the `material.module.ts` file, `ng` can't guess what feature
    module citySearch should be added to, resulting in an error such as More than
    one module matches. Therefore, we need to provide the module that we want `citySearch`
    to be added to, with the `--module` option. Use the `--skip-import` option to
    skip importing the component into any module.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们添加了`material.module.ts`文件，`ng`无法猜测应将城市搜索功能模块添加到哪里，导致出现错误，例如*More than one
    module matches*。因此，我们需要使用`--module`选项提供要将`citySearch`添加到的模块。使用`--skip-import`选项跳过将组件导入到任何模块中。
- en: 'Create a basic template:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个基本模板：
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Import and instantiate an instance of `FormControl`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入并实例化`FormControl`的实例：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Reactive forms have three levels of controls:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式表单有三个级别的控件：
- en: '`FormControl` is the most basic element that has a one-to-one relationship
    with an input field'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormControl`是与输入字段具有一对一关系的最基本元素'
- en: '`FormArray` represents repetitive input fields that represent a collection
    of objects'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormArray`表示重复的输入字段，表示对象的集合'
- en: '`FormGroup` is used to register individual `FormControl` or `FormArray` objects
    as you add more input fields to a form'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormGroup`用于将单独的`FormControl`或`FormArray`对象注册为您向表单添加更多输入字段时'
- en: Finally, the `FormBuilder` object is used to more easily orchestrate and maintain
    the actions of a `FormGroup`, which will be covered in [Chapter 10](99f040e3-89f0-4ac8-a849-4cef38e7a992.xhtml),
    *Angular App Design and Recipes*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`FormBuilder`对象用于更轻松地编排和维护`FormGroup`的操作，这将在[第10章](99f040e3-89f0-4ac8-a849-4cef38e7a992.xhtml)中进行介绍，*Angular应用设计和示例*。
- en: 'Add `app-city-search` to `app.component` in between the caption on the out
    row that contains `app-current-weather`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含`app-current-weather`的外部行的标题之间，在`app.component`中添加`app-city-search`：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Test the integration of components by checking out the app in the browser,
    as shown:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在浏览器中查看应用程序来测试组件的集成，如下所示：
- en: '![](Images/f608032f-7d6a-4379-9c1a-0ae47d4c7a54.png)LocalWeather App with Search
    Field'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/f608032f-7d6a-4379-9c1a-0ae47d4c7a54.png)带有搜索字段的LocalWeather应用'
- en: If you've no errors, now we can start adding the `FormControl` elements and
    wire them to a search endpoint.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，现在我们可以开始添加`FormControl`元素并将它们连接到搜索端点。
- en: Adding search to weather service
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向天气服务添加搜索
- en: So far, we have been passing parameters to get the weather for a city using
    its name and country code. By allowing users to enter zip codes, we must make
    our service more flexible to accept both types of inputs.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在通过名称和国家代码传递参数来获取城市的天气。通过允许用户输入邮政编码，我们必须使我们的服务更灵活，以接受两种类型的输入。
- en: 'OpenWeatherMap''s API accepts URI parameters, so we can refactor the existing `getCurrentWeather`
    function using a TypeScript union type and using a type guard, we can supply different
    parameters, while preserving type checking:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWeatherMap的API接受URI参数，因此我们可以使用TypeScript联合类型重构现有的`getCurrentWeather`函数，并使用类型守卫，我们可以提供不同的参数，同时保持类型检查：
- en: 'Refactor the `getCurrentWeather` function in `weather.service` to handle both
    zip and city inputs:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构`weather.service`中的`getCurrentWeather`函数以处理邮政编码和城市输入：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We renamed the city parameter to `search`, since it can either be a city name
    or a zip code. We then allowed its type to be either a `string` or a `number`,
    and depending on what the type is at runtime, we will either use `q` or `zip`.
    We also made `country` optional and only append it to the query if it exists.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将城市参数重命名为`search`，因为它可以是城市名称或邮政编码。然后，我们允许其类型为`string`或`number`，并根据运行时的类型，我们将使用`q`或`zip`。如果存在，我们还将`country`设置为可选，并仅在查询中追加它。
- en: '`getCurrentWeather` now has business logic embedded into it and thus is a good
    target for unit testing. Following the Single Responsibility Principle, from SOLID
    principles, we will refactor the HTTP call to its own function, called `getCurrentWeatherHelper`.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCurrentWeather`现在嵌入了业务逻辑，因此是单元测试的良好目标。遵循单一职责原则，从SOLID原则中，我们将HTTP调用重构为自己的函数，称为`getCurrentWeatherHelper`。'
- en: Refactor the HTTP call into `getCurrentWeatherHelper`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将HTTP调用重构为`getCurrentWeatherHelper`。
- en: In the next sample, note the use of a back-tick character [PRE7]
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，请注意使用反引号字符[PRE7]
- en: src/app/weather/weather.service.ts
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/weather/weather.service.ts
- en: 'private getCurrentWeatherHelper(uriParams: string): Observable<ICurrentWeather>
    {'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'private getCurrentWeatherHelper(uriParams: string): Observable<ICurrentWeather>
    {'
- en: return this.httpClient
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: return this.httpClient
- en: .get<ICurrentWeatherData>(
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: .get<ICurrentWeatherData>(
- en: '`${environment.baseUrl}api.openweathermap.org/data/2.5/weather?` +'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`${environment.baseUrl}api.openweathermap.org/data/2.5/weather?` +'
- en: '`${uriParams}&appid=${environment.appId}`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`${uriParams}&appid=${environment.appId}`'
- en: )
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .pipe(map(data => this.transformToICurrentWeather(data)))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: .pipe(map(data => this.transformToICurrentWeather(data)))
- en: '}'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: src/app/weather/weather.service.ts
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/weather/weather.service.ts
- en: 'getCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather>
    {'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'getCurrentWeatherByCoords(coords: Coordinates): Observable<ICurrentWeather>
    {'
- en: const uriParams = `lat=${coords.latitude}&lon=${coords.longitude}`
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: const uriParams = `lat=${coords.latitude}&lon=${coords.longitude}`
- en: return this.getCurrentWeatherHelper(uriParams)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: return this.getCurrentWeatherHelper(uriParams)
- en: '}'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: src/app/city-search/city-search.component.ts
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/city-search/city-search.component.ts
- en: '...'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: export class CitySearchComponent implements OnInit {
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: export class CitySearchComponent implements OnInit {
- en: search = new FormControl()
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: search = new FormControl()
- en: 'constructor(private weatherService: WeatherService) {}'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private weatherService: WeatherService) {}'
- en: '...'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: ngOnInit() {
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ngOnInit() {
- en: this.search.valueChanges
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: this.search.valueChanges
- en: .subscribe(...)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: .subscribe(...)
- en: '}'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: src/app/city-search/city-search.component.ts
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/city-search/city-search.component.ts
- en: this.search.valueChanges
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: this.search.valueChanges
- en: '.subscribe((searchValue: string) => {'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '.subscribe((searchValue: string) => {'
- en: if (searchValue) {
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: if (searchValue) {
- en: const userInput = searchValue.split(',').map(s => s.trim())
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: const userInput = searchValue.split(',').map(s => s.trim())
- en: this.weatherService.getCurrentWeather(
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: this.weatherService.getCurrentWeather(
- en: userInput[0],
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: userInput[0],
- en: 'userInput.length > 1 ? userInput[1] : undefined'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'userInput.length > 1 ? userInput[1] : undefined'
- en: ).subscribe(data => (console.log(data)))
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ).subscribe(data => (console.log(data)))
- en: '}'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '})'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: src/app/city-search/city-search.component.html
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/city-search/city-search.component.html
- en: '...'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <mat-form-field>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <mat-form-field>
- en: '...'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <mat-hint>Specify country code like 'Paris, US'</mat-hint>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <mat-hint>指定国家代码，如'巴黎，美国'</mat-hint>
- en: </mat-form-field>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: </mat-form-field>
- en: '...'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: src/app/city-search/city-search.component.ts
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/city-search/city-search.component.ts
- en: import { debounceTime } from 'rxjs/operators'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: import { debounceTime } from 'rxjs/operators'
- en: this.search.valueChanges
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: this.search.valueChanges
- en: .pipe(debounceTime(1000))
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: .pipe(debounceTime(1000))
- en: .subscribe(...)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: .subscribe(...)
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: example
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: example
- en: 'new FormControl(''Bethesda'', { updateOn: ''submit'' })'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'new FormControl(''Bethesda'', { updateOn: ''submit'' })'
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: src/app/city-search/city-search.component.ts
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/city-search/city-search.component.ts
- en: import { FormControl, Validators } from '@angular/forms'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: import { FormControl, Validators } from '@angular/forms'
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: src/app/city-search/city-search.component.ts
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/city-search/city-search.component.ts
- en: search = new FormControl('', [Validators.minLength(2)])
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: search = new FormControl('', [Validators.minLength(2)])
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: src/app/city-search/city-search.component.html
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/city-search/city-search.component.html
- en: '...'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '<form style="margin-bottom: 32px">'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '<form style="margin-bottom: 32px">'
- en: <mat-form-field>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <mat-form-field>
- en: '...'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <mat-error *ngIf="search.invalid">
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <mat-error * ngIf =“search.invalid”>
- en: Type more than one character to search
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 键入多个字符以进行搜索
- en: </mat-error>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: </ mat-error>
- en: </mat-form-field>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: </ mat-form-field>
- en: </form>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: </ form>
- en: '...'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE17]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: example
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 例
- en: <mat-error *ngIf="search.invalid">{{getErrorMessage()}}</mat-error>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <mat-error * ngIf =“search.invalid”>{{getErrorMessage（）}} </ mat-error>
- en: getErrorMessage() {
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: getErrorMessage（）{
- en: 'return this.search.hasError(''minLength'') ? ''Type more than one character
    to search'' : '''';'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 返回this.search.hasError（'minLength'）？'键入多个字符以进行搜索'：'';
- en: '}'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: src/app/city-search/city-search.component.ts
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: src / app / city-search / city-search.component.ts
- en: 'this.search.valueChanges.pipe(debounceTime(1000)).subscribe((searchValue: string)
    => {'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: this.search.valueChanges.pipe（debounceTime（1000））。subscribe（（searchValue：string）=>
    {
- en: if (!this.search.invalid) {
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: if（！this.search.invalid）{
- en: '...'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: src/app/city-search-tpldriven/city-search-tpldriven.component.html
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: src / app / city-search-tpldriven / city-search-tpldriven.component.html
- en: '...'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <input matInput placeholder="Enter city or zip" aria-label="City or Zip"
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <input matInput placeholder =“输入城市或邮政编码”aria-label =“城市或邮政编码”
- en: '[(ngModel)]="model.search" (ngModelChange)="doSearch($event)"'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[(ngModel)] =“model.search”(ngModelChange) =“doSearch($event)”'
- en: 'minlength="2" name="search" #search="ngModel">'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: minlength =“2” name =“search”＃search =“ngModel”>
- en: '...'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <mat-error *ngIf="search.invalid">
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <mat-error * ngIf =“search.invalid”>
- en: Type more than one character to search
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 键入多个字符以进行搜索
- en: </mat-error>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: </ mat-error>
- en: '...'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE20]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: src/app/city-search-tpldriven/city-search-tpldriven.component.ts
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: src / app / city-search-tpldriven / city-search-tpldriven.component.ts
- en: import { NgModel, Validators} from '@angular/forms'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 导入{NgModel，Validators} from'@angular/forms'
- en: '...'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: export class CitySearchTpldrivenComponent implements OnInit {
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: export class CitySearchTpldrivenComponent implements OnInit {
- en: model = {
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 模型 = {
- en: 'search: '''','
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索：'',
- en: '}'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '...'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: doSearch(searchValue) {
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: doSearch（searchValue）{
- en: const userInput = searchValue.split(',').map(s => s.trim())
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: const userInput = searchValue.split(',')。map（s => s.trim（））
- en: this.weatherService
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: this.weatherService
- en: '.getCurrentWeather(userInput[0], userInput.length > 1 ? userInput[1] : undefined)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: .getCurrentWeather（userInput [0]，userInput.length> 1？userInput [1]：未定义）
- en: .subscribe(data => console.log(data))
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: .subscribe（数据=> console.log（数据））
- en: '}'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: src/app/city-search/city-search.component.ts
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: src / app / city-search / city-search.component.ts
- en: import { Component, Output, EventEmitter } from '@angular/core'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 导入{Component，Output，EventEmitter} from'@angular/core'
- en: export class CitySearchComponent implements OnInit {
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: export class CitySearchComponent implements OnInit {
- en: '...'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '@Output() searchEvent = new EventEmitter<string>()'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '@Output（）searchEvent = new EventEmitter <string>（）'
- en: '...'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'this.search.valueChanges.debounceTime(1000).subscribe((searchValue: string)
    => {'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: this.search.valueChanges.debounceTime（1000）。subscribe（（searchValue：string）=>
    {
- en: if (!this.search.invalid) {
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: if（！this.search.invalid）{
- en: this.searchEvent.emit(this.searchValue)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: this.searchEvent.emit(this.searchValue)
- en: '}'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '})'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '}）'
- en: '...'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '}'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE22]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: src/app/app.component.ts
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: src / app / app.component.ts
- en: 'template: `'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 模板：`
- en: '...'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <app-city-search (searchEvent)="doSearch($event)"></app-city-search>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <app-city-search（searchEvent）=“doSearch($event)”> </ app-city-search>
- en: '...'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`'
- en: export class AppComponent {
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: export class AppComponent {
- en: 'currentWeather: ICurrenWeather'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: currentWeather：ICurrenWeather
- en: constructor() { }
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: constructor（）{}
- en: doSearch(searchValue) {
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: doSearch（searchValue）{
- en: const userInput = searchValue.split(',').map(s => s.trim())
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: const userInput = searchValue.split(',')。map（s => s.trim（））
- en: this.weatherService
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: this.weatherService
- en: '.getCurrentWeather(userInput[0], userInput.length > 1 ? userInput[1] : undefined)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: .getCurrentWeather（userInput [0]，userInput.length> 1？userInput [1]：未定义）
- en: .subscribe(data => this.currentWeather = data)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: .subscribe（数据=> this.currentWeather =数据）
- en: '}'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE23]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: src/app/current-weather/current-weather.component.ts
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: src / app / current-weather / current-weather.component.ts
- en: import { Component, Input } from '@angular/core'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 导入{Component，Input} from'@angular/core'
- en: '...'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: export class CurrentWeatherComponent implements OnInit {
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: export class CurrentWeatherComponent implements OnInit {
- en: '@Input() current: ICurrentWeather'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '@Input() current：ICurrentWeather'
- en: '...'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '}'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE24]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: src/app/app.component.ts
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: src / app / app.component.ts
- en: 'template: `'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 模板：`
- en: '...'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <app-current-weather [current]="currentWeather"></app-current-weather>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <app-current-weather [current] =“currentWeather”> </ app-current-weather>
- en: '...'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`'
- en: '[PRE25]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: example
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 例
- en: <app-mini-forecast *ngFor="let dailyForecast of forecastArray
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <app-mini-forecast * ngFor =“let dailyForecast of forecastArray
- en: '[forecast]="dailyForecast">'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[forecast]="dailyForecast">'
- en: </app-mini-forecast>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: </app-mini-forecast>
- en: '[PRE26]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: src/app/weather/weather.service.ts
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: src/app/weather/weather.service.ts
- en: import { Subject } from 'rxjs'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: import { Subject } from 'rxjs'
- en: '...'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: export class WeatherService implements IWeatherService {
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: export class WeatherService implements IWeatherService {
- en: 'currentWeather: Subject<ICurrentWeather>'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 'currentWeather: Subject<ICurrentWeather>'
- en: '...'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '}'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE27]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: example
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: currentWeather.subscribe(data => (this.current = data))
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: currentWeather.subscribe(data => (this.current = data))
- en: currentWeather.next(newData)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: currentWeather.next(newData)
- en: '[PRE28]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: app/src/weather/weather.service.ts
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: app/src/weather/weather.service.ts
- en: import { BehaviorSubject } from 'rxjs'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: import { BehaviorSubject } from 'rxjs'
- en: '...'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: export class WeatherService implements IWeatherService {
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: export class WeatherService implements IWeatherService {
- en: currentWeather = new BehaviorSubject<ICurrentWeather>({
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: currentWeather = new BehaviorSubject<ICurrentWeather>({
- en: 'city: ''--'','
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 城市：'--'，
- en: 'country: ''--'','
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 国家：'--'，
- en: 'date: Date.now(),'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：Date.now()，
- en: 'image: '''','
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图像：'',
- en: 'temperature: 0,'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 温度：0，
- en: 'description: '''','
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 描述：'',
- en: '})'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '...'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '}'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE29]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: app/src/current-weather/current-weather.component.ts
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: app/src/current-weather/current-weather.component.ts
- en: '...'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: ngOnInit() {
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: ngOnInit() {
- en: this.weatherService.currentWeather.subscribe(data => (this.current = data))
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: this.weatherService.currentWeather.subscribe(data => (this.current = data))
- en: '}'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '...'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '[PRE30]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: app/src/city-search/city-search.component.ts
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: app/src/city-search/city-search.component.ts
- en: '...'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: this.weatherService
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: this.weatherService
- en: .getCurrentWeather(
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: .getCurrentWeather(
- en: userInput[0],
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: userInput[0]，
- en: 'userInput.length > 1 ? userInput[1] : undefined'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入长度大于1？userInput[1]：未定义
- en: )
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .subscribe(data => this.weatherService.currentWeather.next(data))
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: .subscribe(data => this.weatherService.currentWeather.next(data))
- en: '...'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Test your app in the browser; it should look as follows:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中测试您的应用程序；它应该如下所示：
- en: '![](Images/0f9bdb7b-4799-4a07-b01d-0a8d466e63b7.png)Weather Information for
    Bursa, Turkey'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/0f9bdb7b-4799-4a07-b01d-0a8d466e63b7.png)土耳其布尔萨的天气信息'
- en: When you type in a new city, the component should update for the current weather
    information for that city.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入一个新的城市时，组件应该更新为该城市的当前天气信息。
- en: There's still room for improvement; the default experience looks broken when
    the app first loads. There are at least two different ways to handle this. The
    first is at the `app` component level to hide the entire component if there's
    no data to display. For this to work, we will have to inject `weatherService`
    to the `app` component, ultimately leading to a less flexible solution. Another
    way is to be able to better handle missing data within the `current-weather` component.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序首次加载时，默认体验看起来有些问题。至少有两种不同的处理方式。首先是在`app`组件级别隐藏整个组件，如果没有数据显示。为了使其工作，我们将不得不将`weatherService`注入到`app`组件中，最终导致不太灵活的解决方案。另一种方法是能够更好地处理`current-weather`组件中缺少的数据。
- en: To make the app better, you can implement geolocation to get weather for the
    user's current location at launch of the app. You can also leverage `window.localStorage`
    to store the city that was last displayed or the last location that was retrieved
    from `window.geolocation` on initial launch.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序更好，您可以在应用程序启动时实现地理位置功能，以获取用户当前位置的天气。您还可以利用`window.localStorage`来存储上次显示的城市或从`window.geolocation`在初始启动时检索的上次位置。
- en: Don't forget to execute `npm test` and `npm run e2e` before moving on. It is
    left as an exercise for the reader to fix the unit and end-to-end tests.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，不要忘记执行`npm test`和`npm run e2e`。读者可以自行修复单元测试和端到端测试。
- en: Summary
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter completes our work on the Local Weather App. We can move the City
    Search capability task to the `done` column, as shown in our Kanban board:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章完成了我们对本地天气应用程序的工作。我们可以将`城市搜索`功能任务移动到`完成`列，如我们看板中所示：
- en: '![](Images/a35b3b83-60f3-429f-a5e0-d2b5401aa8ba.png)Waffle.io Kanban Board
    Status'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/a35b3b83-60f3-429f-a5e0-d2b5401aa8ba.png)Waffle.io看板状态'
- en: In this chapter, you learned how to create an interactive prototype without
    writing a single line of code. You then created a search-as-you-type functionality
    using `MatInput`, validators, reactive forms, and data stream driven handlers.
    You also learned about different strategies to enable inter-component interactions
    and data sharing. Finally, you became aware of two-way binding and template-driven
    forms.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何创建一个交互式原型，而不需要编写一行代码。然后，您使用`MatInput`、验证器、响应式表单和数据流驱动处理程序创建了一个搜索即时响应的功能。您还了解了不同的策略来实现组件间的交互和数据共享。最后，您了解了双向绑定和基于模板的表单。
- en: LocalCast Weather is a straightforward application that we used to cover the
    basic concepts of Angular. As you saw, Angular is great for building such small
    and dynamic applications, while delivering a minimal amount of framework code
    to the end user. You should consider leveraging Angular for even quick and dirty
    projects, which is also a great practice when building larger applications. In
    the next chapter, you will be creating a far more complicated **line-of-business**
    (**LOB**) application, using a router-first approach to designing and architecting
    scalable Angular applications with first-class authentication and authorization,
    user experience, and numerous recipes that cover a vast majority of requirements
    that you may find in LOB applications.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: LocalCast Weather是一个简单的应用程序，我们用它来介绍Angular的基本概念。正如您所见，Angular非常适合构建这样的小型和动态应用程序，同时向最终用户提供最少量的框架代码。您应该考虑利用Angular甚至用于快速而简单的项目，这在构建更大型的应用程序时也是一个很好的实践。在下一章中，您将使用路由器优先的方法来创建一个更复杂的**业务线**（**LOB**）应用程序，设计和构建可扩展的Angular应用程序，其中包括一流的身份验证和授权、用户体验以及涵盖大多数LOB应用程序需求的众多技巧。
