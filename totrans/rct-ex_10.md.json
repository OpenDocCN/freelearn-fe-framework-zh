["```js\nconst PictureModel = Backbone.Model.extend({\n  defaults: {\n    src: 'http://lorempixel.com/601/600/cats/',\n    name: 'Pusheen',\n    details: 'Pusheen is a Cat',\n    faved: false\n  }\n});\n```", "```js\nimport Backbone from 'backbone';\nimport Faker from 'faker';\nimport _ from 'underscore';\n…\n\nclass CatGenerator {\n  constructor() {\n    this.Cats = new Backbone.Collection;\n    [600, 601, 602, 603, 604, 605].map( (height)=>{\n      this.createCat(height, 600);\n    })\n  }\n\n  createCat(height = _.random(600, 650), width = 600) {\n    console.log('Adding new cat');\n    this.Cats.add(new PictureModel({\n      src: `http://lorempixel.com/${height}/${width}/cats/`,\n      name: Faker.Name.findName(),\n      details: Faker.Lorem.paragraph()\n    }));\n  }\n}\n```", "```js\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.timer = null;\n    this.state = {catGenerator: new CatGenerator()};\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(::this.generateCats, 1000);\n  }\n\n  generateCats() {\n    let catGenerator = this.state.catGenerator;\n    catGenerator.createCat();\n    clearInterval(this.timer);\n    this.timer = setInterval(::this.generateCats, catGenerator.randRange());\n\n    this.setState({catGenerator: catGenerator});\n  }\n…\n```", "```js\nrandRange() {\n    return _.random(5000, 10000);\n  }\n```", "```js\nrender() {\n    let Cats = this.state.catGenerator.Cats;\n\n    return (\n        <div>\n          <div>\n\n              {Cats.map(cat => (\n                  <div key={cat.cid} style={{float: 'left'}}>\n                    <Link to={`/pictures/${cat.cid}`}\n                          state={{ modal: true, returnTo: this.props.location.pathname, cat: cat }}>\n                      <img style={{ margin: 10 }} src={cat.get('src')} height=\"100\"/>\n                    </Link>\n                    <span key={`${cat.cid}`} className=\"fa fa-star\"></span>\n                  </div>\n              ))}\n\n          </div>\n        </div>\n    )\n  }\n```", "```js\n                    <span key={`${cat.cid}`} className=\"fa fa-star\"></span>\n```", "```js\n                    <Link to={`/pictures/${cat.cid}`}\n                          state={{ modal: true, \n                                       returnTo: this.props.location.pathname,  \n                                       cat: cat }}>\n```", "```js\nconst Modal = React.createClass({\n  styles: {\n…   \n  },\n\n  render() {\n     return (\n      <div style={this.styles}>\n        <p><Link to={this.props.returnTo}>Back</Link></p>\n        {this.props.children}\n      </div>\n    )\n  }\n})\n…\nexport {Modal as default}\n```", "```js\nimport React from 'react'\nimport { PictureModel } from './models';\n\nconst Picture = React.createClass({\n  render() {\n    let { location } = this.props;\n    let cat = location.state.cat;\n    console.log(this.props);\n    return (\n        <div>\n          <div style={{ float: 'left', width: '40%' }}>\n            <img src={cat.get('src')} style={{ height: '80%' }}/>\n          </div>\n          <div style={{ float: 'left', width: '60%' }}>\n            <h3>Name: {cat.get('name')}.</h3>\n            <p>Details: {cat.get('details')} </p>\n          </div>\n        </div>\n    )\n  }\n});\n\nexport {Picture as default}\n```", "```js\nrender() {\n    let Cats = this.state.catGenerator.Cats;\n\n    return (\n        <div>\n          <div>\n            <ReactCSSTransitionGroup transitionName=\"cats\" \n                                     transitionEnterTimeout={500} \n                                     transitionLeaveTimeout={300}\n                                     transitionAppear={true} \n                                     transitionAppearTimeout={500}>\n              {Cats.map(cat => (\n                  <div key={cat.cid} style={{float: 'left'}}>\n                    <Link to={`/pictures/${cat.cid}`}\n                          state={{ modal: true, returnTo: this.props.location.pathname, cat: cat }}>\n                      <img style={{ margin: 10 }} src={cat.get('src')} height=\"100\"/>\n                    </Link>\n                    <span key={`${cat.cid}`} className=\"fa fa-star\"></span>\n                  </div>\n              ))}\n\n</ReactCSSTransitionGroup>\n          </div>\n        </div>\n    )\n  }\n```", "```js\n            <ReactCSSTransitionGroup transitionName=\"cats\" \n                                     transitionEnterTimeout={500}\n                                     transitionLeaveTimeout={300}\n                                     transitionAppear={true} \n                                     transitionAppearTimeout={500}>\n```", "```js\n.cats-enter {\n    opacity: 0.01;\n}\n\n.cats-enter.cats-enter-active {\n    opacity: 1;\n    transition: opacity 1500ms ease-in;\n}\n.cats-leave {\n    opacity: 1;\n}\n\n.cats-leave.cats-leave-active {\n    opacity: 0.01;\n    transition: opacity 300ms ease-in;\n}\n\n.cats-appear {\n    opacity: 0.01;\n}\n\n.cats-appear.cats-appear-active {\n    opacity: 1;\n    transition: opacity 1.5s ease-in;\n}\n```", "```js\n.fa {\n  transition: all .1s ease-in-out;\n  color: #666;\n}\n.star{\n    display: inline-block;\n    width: 20px;\n    position: relative;\n}\n\n.star span{\n    position: absolute;\n    left: 0;\n    top: 0;\n}\n\n.fa-star{\n  color: #fa0017;\n}\n\n.fa-star-o{\n    color: #fa0017;\n}\n\n.fa-star-o:active:before {\n  content: \"\\f005\"!important;\n}\n```", "```js\nfaveUnfave(event){\n    let catCid = event.target.dataset;\n    let catGenerator = this.state.catGenerator;\n    let Cats = catGenerator.Cats;\n    let cat = Cats.get(catCid);\n    cat.set('faved', !cat.get('faved'));\n    catGenerator.Cats = Cats;\n    this.setState({catGenerator: catGenerator});\n  }\n```", "```js\n<span key={`${cat.cid}`}  className=\"fa fa-star\" onClick={::this.faveUnfave} data-cid={cat.cid}></span>  \n```", "```js\n<ReactCSSTransitionGroup transitionName=\"faved\"\n                                             transitionEnterTimeout={500}\n                                             transitionLeaveTimeout={300}\n                                             transitionAppear={true}\n                                             transitionAppearTimeout={500}\n                                             className=\"star\">\n                    {()=>{\n                      if(cat.get('faved') === true){\n                        return <span key={`${cat.cid}`}  className=\"fa fa-star\" onClick={::this.faveUnfave} data-cid={cat.cid}></span>;\n                      } else {\n                        return <span key={`${cat.cid}`}  className=\"fa fa-star-o\" onClick={::this.faveUnfave} data-cid={cat.cid}></span>;\n                      }\n                    }()}\n                    </ReactCSSTransitionGroup>\n```", "```js\n.faved-enter {\n    transform: scale(1.5);\n}\n\n.faved-enter.faved-enter-active {\n    transform: scale(3);\n    transition: all .5s ease-in-out;\n}\n\n.faved-leave {\n    transform: translateX(-100%);\n    transform: scale(0);\n}\n\n.faved-leave.faved-leave-active {\n    transform: scale(0);\n    transition: all .1s ease-in-out;\n}\n```", "```js\n                       {()=>{\n                      if(cat.get('faved') === true){\n                        return <span key={`${cat.cid}`}  className=\"fa fa-star\" onClick={::this.faveUnfave} data-cid={cat.cid}></span>;\n                      } else {\n                        return <span key={`${cat.cid}`}  className=\"fa fa-star-o\" onClick={::this.faveUnfave} data-cid={cat.cid}></span>;\n                      }\n                    }()}\n```", "```js\n{()=>{\n                      if(cat.get('faved') === true){\n                        return <span key={`${cat.cid}_${cat.get('faved')}`} className=\"fa fa-star\" onClick={::this.faveUnfave} data-cid={cat.cid}></span>;\n                      } else {\n                        return <span key={`${cat.cid}_${cat.get('faved')}`} className=\"fa fa-star-o\" onClick={::this.faveUnfave} data-cid={cat.cid}></span>;\n                      }\n}()}\n```"]