- en: Selecting Elements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择元素
- en: The jQuery library harnesses the power of **Cascading Style Sheets** (**CSS**)
    selectors to let us quickly and easily access elements or groups of elements in
    the **Document Object Model** (**DOM**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 库利用 **层叠样式表** (**CSS**) 选择器的力量，让我们能够快速轻松地访问 **文档对象模型** (**DOM**) 中的元素或元素组。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: The structure of the elements on a web page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页上元素的结构
- en: How to use CSS selectors to find elements on the page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 CSS 选择器在页面上查找元素
- en: What happens when the specificity of a CSS selector changes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 CSS 选择器的特异性发生变化时会发生什么
- en: Custom jQuery extensions to the standard set of CSS selectors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 jQuery 扩展到标准的 CSS 选择器集
- en: The DOM traversal methods, which provide greater flexibility for accessing elements
    on the page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM 遍历方法，提供了更大的灵活性，用于访问页面上的元素
- en: Using modern JavaScript language features to iterate over jQuery objects efficiently
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现代 JavaScript 语言功能有效地迭代 jQuery 对象
- en: Understanding the DOM
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 DOM
- en: One of the most powerful aspects of jQuery is its ability to make selecting
    elements in the DOM easy. The DOM serves as the interface between JavaScript and
    a web page; it provides a representation of the source HTML as a network of objects
    rather than as plain text.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 最强大的方面之一是其使得在 DOM 中选择元素变得容易。DOM 作为 JavaScript 和网页之间的接口；它提供了 HTML 源代码的表示，作为对象网络，而不是作为纯文本。
- en: 'This network takes the form of a family tree of elements on the page. When
    we refer to the relationships that elements have with one another, we use the
    same terminology that we use when referring to family relationships: parents,
    children, siblings, and so on. A simple example can help us understand how the
    family tree metaphor applies to a document:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网络采用了页面上元素的家族树形式。当我们提到元素彼此之间的关系时，我们使用与指家庭关系时相同的术语：父母、子女、兄弟姐妹等。一个简单的例子可以帮助我们理解家族树隐喻如何适用于文档：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `<html>` is the ancestor of all the other elements; in other words, all
    the other elements are descendants of `<html>`. The `<head>` and `<body>` elements
    are not only descendants, but children of `<html>` as well. Likewise, in addition
    to being the ancestor of `<head>` and `<body>`, `<html>` is also their parent.
    The `<p>` elements are children (and descendants) of `<div>`, descendants of `<body>`
    and `<html>`, and siblings of each other.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<html>` 是所有其他元素的祖先；换句话说，所有其他元素都是 `<html>` 的后代。`<head>` 和 `<body>` 元素不仅是
    `<html>` 的后代，而且是其子元素。同样，除了是 `<head>` 和 `<body>` 的祖先之外，`<html>` 还是它们的父元素。`<p>`
    元素是 `<div>` 的子元素（和后代），是 `<body>` 和 `<html>` 的后代，以及彼此的兄弟元素。
- en: '![](img/3145OS_02_01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3145OS_02_01.png)'
- en: To help visualize the family tree structure of the DOM, we can use the browser's
    developer tools to inspect the DOM structure of any page. This is especially helpful
    when you're curious about how some other application works, and you want to implement
    something similar.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助可视化 DOM 的家族树结构，我们可以使用浏览器的开发者工具检查任何页面的 DOM 结构。当您好奇某个其他应用程序的工作方式，并且想要实现类似功能时，这特别有帮助。
- en: With this tree of elements at our disposal, we'll be able to use jQuery to efficiently
    locate any set of elements on the page. Our tools to achieve this are jQuery **selectors**
    and **traversal methods**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些元素的树结构，我们将能够使用 jQuery 高效地定位页面上的任何一组元素。我们实现这一目标的工具是 jQuery **选择器** 和 **遍历方法**。
- en: Using the $() function
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 $() 函数
- en: The resulting set of elements from jQuery's selectors and methods is always
    represented by a jQuery object. These objects are very easy to work with when
    we want to actually do something with the things that we find on a page. We can
    easily bind events to these objects and add visual effects to them, as well as
    chain multiple modifications or effects together.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由 jQuery 的选择器和方法生成的元素集合始终由 jQuery 对象表示。当我们想要实际对页面上找到的东西进行操作时，这些对象非常容易使用。我们可以轻松地将事件绑定到这些对象上，并向它们添加视觉效果，以及将多个修改或效果链接在一起。
- en: Note that jQuery objects are different from regular DOM elements or node lists,
    and as such do not necessarily provide the same methods and properties for some
    tasks. In the final part of this chapter, we will look at ways to directly access
    the DOM elements that are collected within a jQuery object.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，jQuery 对象与普通 DOM 元素或节点列表不同，因此在某些任务上不一定提供相同的方法和属性。在本章的最后部分，我们将探讨直接访问 jQuery
    对象中收集的 DOM 元素的方法。
- en: In order to create a new jQuery object, we use the `$()` function. This function
    typically accepts a CSS selector as its sole parameter and serves as a factory,
    returning a new jQuery object pointing to the corresponding elements on the page.
    Just about anything that can be used in a stylesheet can also be passed as a string
    to this function, allowing us to apply jQuery methods to the matched set of elements.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的 jQuery 对象，我们使用 `$()` 函数。这个函数通常接受一个 CSS 选择器作为其唯一参数，并充当工厂，返回一个指向页面上相应元素的新
    jQuery 对象。几乎任何可以在样式表中使用的东西也可以作为字符串传递给此函数，使我们能够将 jQuery 方法应用于匹配的元素集。
- en: Making jQuery play well with other JavaScript libraries
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使 jQuery 与其他 JavaScript 库协同工作
- en: In jQuery, the dollar sign `($)` is simply an alias for `jQuery`. Because a
    `$()` function is very common in JavaScript libraries, conflicts could arise if
    more than one of these libraries were being used in a given page. We can avoid
    such conflicts by replacing every instance of `$` with `jQuery` in our custom
    jQuery code. Additional solutions to this problem are addressed in [Chapter 10](d150ca06-e7dc-4100-8c91-060f0272ff67.xhtml),
    *Advanced Events*. On the other hand, jQuery is so prominent in frontend development,
    that libraries tend to leave the `$` symbol alone.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 中，美元符号 `($)` 只是 `jQuery` 的别名。因为 `$()` 函数在 JavaScript 库中非常常见，所以如果在同一页中使用了多个这些库，可能会出现冲突。我们可以通过在自定义
    jQuery 代码中将每个 `$` 实例替换为 `jQuery` 来避免这种冲突。有关此问题的其他解决方案将在[第 10 章](d150ca06-e7dc-4100-8c91-060f0272ff67.xhtml)
    *高级事件*中讨论。另一方面，jQuery 在前端开发中非常突出，因此库通常不会动 `$` 符号。
- en: 'The three primary building blocks of selectors are **tag name**, **ID**, and
    **class**. They can be used either on their own or in combination with others.
    The following simple examples illustrate how these three selectors appear in code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器的三个主要构建块是**标签名**、**ID**和**类**。它们可以单独使用，也可以与其他选择器组合使用。以下简单示例说明了这三个选择器在代码中的应用方式：
- en: '| **Selector type** | **CSS** | **jQuery** | **What it does** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **选择器类型** | **CSS** | **jQuery** | **功能** |'
- en: '| **Tag name** | `p { }` | `$(''p'')` | This selects all paragraphs in the
    document. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **标签名** | `p { }` | `$(''p'')` | 这选择了文档中的所有段落。 |'
- en: '| **ID** | `#some-id { }`                             | `$(''#some-id'')`  
                            | This selects the single element in the document that
    has an ID of `some-id`. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **ID** | `#some-id { }`                             | `$(''#some-id'')`  
                            | 这选择了文档中具有 ID 为 `some-id` 的单个元素。 |'
- en: '| **Class** | `.some-class { }`                                           
        | `$(''.some-class'')`                                         | This selects
    all elements in the document that have a class of `some-class`. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **类** | `.some-class { }`                                               
    | `$(''.some-class'')`                                         | 这选择了文档中具有类 `some-class`
    的所有元素。 |'
- en: As mentioned in [Chapter 1](33c0dcc2-d368-4c19-b3aa-15fd462917f8.xhtml), *Getting
    Started*, when we call methods of a jQuery object, the elements referred by the
    selector we passed to `$()` are looped through automatically and implicitly. Therefore,
    we can usually avoid explicit iteration, such as a `for` loop, that is so often
    required in DOM scripting.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第 1 章](33c0dcc2-d368-4c19-b3aa-15fd462917f8.xhtml) *入门*中所述，当我们调用 jQuery 对象的方法时，自动隐式地循环遍历了我们传递给
    `$()` 的选择器所引用的元素。因此，我们通常可以避免显式迭代，比如 `for` 循环，在 DOM 脚本中经常需要。
- en: Now that we covered the basics, we're ready to start exploring some more powerful
    uses of selectors.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了基础知识，我们准备开始探索一些更强大的选择器使用方法。
- en: CSS selectors
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 选择器
- en: 'The jQuery library supports nearly all the selectors included in CSS specifications
    1 through 3, as outlined on the World Wide Web Consortium''s site: [http://www.w3.org/Style/CSS/specs](http://www.w3.org/Style/CSS/specs).
    This support allows developers to enhance their websites without worrying about
    which browsers might not understand more advanced selectors, as long as the browsers
    have JavaScript enabled.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 库支持 CSS 规范 1 到 3 中包含的几乎所有选择器，详细信息请参见万维网联盟的网站：[http://www.w3.org/Style/CSS/specs](http://www.w3.org/Style/CSS/specs)。这种支持允许开发人员增强其网站，而无需担心哪些浏览器可能不理解更高级的选择器，只要浏览器启用了
    JavaScript。
- en: Progressive Enhancement
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进增强
- en: Responsible jQuery developers should always apply the concepts of progressive
    enhancement and graceful degradation to their code, ensuring that a page will
    render as accurately, even if not as beautifully, with JavaScript disabled as
    it does with JavaScript turned on. We will continue to explore these concepts
    throughout the book. More information on progressive enhancement can be found
    at [http://en.wikipedia.org/wiki/Progressive_enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement).
    Having said this, it's not very often that you'll encounter users with JavaScript
    disabled these days--even on mobile browsers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 负责任的 jQuery 开发者应始终将渐进增强和优雅降级的概念应用于其代码，确保页面在禁用 JavaScript 时渲染的准确性与启用 JavaScript
    时一样，即使不那么美观。我们将在本书中继续探讨这些概念。有关渐进增强的更多信息，请访问[http://en.wikipedia.org/wiki/Progressive_enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement)。话虽如此，这些天即使在移动浏览器上也很少遇到禁用
    JavaScript 的用户。
- en: 'To begin learning how jQuery works with CSS selectors, we''ll use a structure
    that appears on many websites, often for navigation--the nested unordered list:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始学习 jQuery 如何与 CSS 选择器配合工作，我们将使用许多网站上经常出现的结构，通常用于导航——嵌套的无序列表：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Downloadable code examples
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可下载的代码示例
- en: You can access the example code from the following Github repository: [https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下 Github 仓库访问示例代码：[https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3)。
- en: 'Note that the first `<ul>` has an ID of `selecting-plays`, but none of the
    `<li>` tags have a class associated with them. Without any styles applied, the
    list looks like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，第一个`<ul>`具有`selecting-plays`的 ID，但没有任何`<li>`标签与之关联的类。没有应用任何样式，列表看起来像这样：
- en: '![](img/5297_02_02.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_02.png)'
- en: The nested list appears as we would expect it to--a set of bulleted items arranged
    vertically and indented according to their level.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套列表呈现我们所期望的样子——一组垂直排列的项目，根据它们的级别缩进。
- en: Styling list-item levels
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计列表项级别
- en: 'Let''s suppose that we want the top-level items, and only the top-level items--Comedies,
    Tragedies, and Histories--to be arranged horizontally. We can start by defining
    a `horizontal` class in the stylesheet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想要顶级项——喜剧、悲剧和历史——以及仅仅是顶级项水平排列。我们可以首先在样式表中定义一个`horizontal`类：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `horizontal` class floats the element to the left-hand side of the one following
    it, removes the bullet from it if it's a list item, and adds a 10-pixel margin
    on all sides of it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontal`类使元素浮动到其后面的左侧，如果是列表项，则删除其标志，并在其四周添加 10 像素的边距。'
- en: 'Rather than attaching the `horizontal` class directly in our HTML, we''ll add
    it dynamically to the top-level list items only, to demonstrate jQuery''s use
    of selectors:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不直接在我们的 HTML 中添加`horizontal`类，而是仅将其动态添加到顶级列表项，以演示 jQuery 对选择器的使用：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Listing 2.1
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.1
- en: As discussed in [Chapter 1](091dd3f4-9663-47df-af02-817487c3038f.xhtml), *Getting
    Started*, we begin jQuery code by calling `$(() => {})`, which runs the function
    passed to it once the DOM has been loaded, but not before.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第 1 章](091dd3f4-9663-47df-af02-817487c3038f.xhtml)所述，*入门*，我们通过调用`$(() => {})`开始
    jQuery 代码，该代码在 DOM 加载后运行传递给它的函数，但在此之前不会运行。
- en: The second line uses the child combinator (`>`) to add the `horizontal` class
    to all the top-level items only. In effect, the selector inside the `$()` function
    is saying, "Find each list item (`li`) that is a child (`>`) of the element with
    an ID of `selected-plays` (`#selected-plays`)".
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行使用子级组合符（`>`）仅向所有顶级项添加`horizontal`类。实际上，`$()`函数内的选择器表示“找到每个列表项（`li`），它是具有
    ID 为`selected-plays`（`#selected-plays`）的元素的子级（`>`）”。
- en: 'With the class now applied, the rules defined for that class in the stylesheet
    take effect, which in this case means that the list items are arranged horizontally
    rather than vertically. Now, our nested list looks like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用了该类，样式表中为该类定义的规则生效，这意味着列表项水平排列而不是垂直排列。现在，我们的嵌套列表看起来是这样的：
- en: '![](img/5297_02_03.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_03.png)'
- en: 'Styling all the other items--those that are not in the top level--can be done
    in a number of ways. Since we have already applied the `horizontal` class to the
    top-level items, one way to select all sub-level items is to use a negation pseudo-class
    to identify all list items that do not have a class of `horizontal`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有其他项进行样式设置--即不在顶级的项--有很多种方法。由于我们已经将`horizontal`类应用于顶级项目，选择所有子级项目的一种方法是使用否定伪类来标识所有没有`horizontal`类的列表项：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Listing 2.2
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.2
- en: 'This time we are selecting every list item (`<li>`) that:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次我们选择了每个列表项（`<li>`），它：
- en: Is a descendant of the element with an ID of `selected-plays` (`#selected-plays`)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是具有ID为`selected-plays`的元素的后代（`#selected-plays`）
- en: Does not have a class of `horizontal`  (`:not(.horizontal)`)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有`horizontal`类（`:not(.horizontal)`）
- en: 'When we add the `sub-level` class to these items, they receive the shaded background
    defined in the stylesheet:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向这些项目添加`sub-level`类时，它们将接收到样式表中定义的阴影背景：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now the nested list looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在嵌套列表看起来是这样的：
- en: '![](img/5297_02_04.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_04.png)'
- en: Selector specificity
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择器的具体性
- en: Selectors in jQuery have a spectrum of specificity, from very general selectors,
    to very targeted selectors. The goal is to select the correct elements, otherwise
    your selector is broken. The tendency for jQuery beginners is to implement very
    specific selectors for everything. Perhaps through trial and error, they've fixed
    selector bugs by adding more specificity to a given selector. However, this isn't
    always the best solution.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery中，选择器的具体性有一个范围，从非常通用的选择器到非常具体的选择器。目标是选择正确的元素，否则你的选择器就会失效。jQuery初学者的倾向是为所有东西实现非常具体的选择器。也许通过反复试验，他们已经通过为给定的选择器添加更多的具体性来修复选择器错误。然而，这并不总是最好的解决方案。
- en: 'Let''s look at an example that increases the size of the first letter for top-level
    `<li>` text. Here''s the style we want to apply:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，增加顶级`<li>`文本的首字母大小。这是我们要应用的样式：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And here''s what the list item text looks like:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是列表项文本的样式：
- en: '![](img/Screenshot-from-2016-11-27-11-02-54-3.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Screenshot-from-2016-11-27-11-02-54-3.png)'
- en: 'As you see, Comedies, Tragedies, and Histories have the `big-letter` style
    applied to them as expected. In order to do this, we need a selector that''s more
    specific than just `$(''#selected-plays li'')`, which would apply the style to
    every `<li>`, even the sub-elements. We can use change the specificity of the
    jQuery selector to make sure we''re only getting what we expect:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，喜剧，悲剧和历史如预期地应用了`big-letter`样式。为了做到这一点，我们需要一个比仅仅选择`$('#selected-plays li')`更具体的选择器，后者会将样式应用于每一个`<li>`，甚至子元素。我们可以改变jQuery选择器的具体性以确保我们只获得我们所期望的：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Listing 2.3
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.3
- en: 'All three of these selectors do the same thing--apply the `big-letter` style
    to the top-level `<li>` elements in `#selected-plays`. The specificity is different
    in each of these selectors. Let''s review how each of these work, and what their
    strengths are:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这三个选择器都做了同样的事情--将`big-letter`样式应用于`#selected-plays`中的顶级`<li>`元素。每个选择器的具体性都不同。让我们回顾一下每个选择器的工作原理以及它们的优势：
- en: '`#selected-plays > li`: This finds `<li>` elements that are direct children
    of `#selected-plays`. This is easy to read, and semantically relevant to the DOM
    structure.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#selected-plays > li`：这找到了直接是`#selected-plays`的子元素的`<li>`元素。这易于阅读，并且在DOM结构上语义相关。'
- en: '`#selected-plays li.horizontal`: This finds `<li>` elements or sub-elements
    of `#selected-plays` with the `horizontal` class. This is also easy to read and
    enforces a particular DOM schema (applying the `horizontal` class).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#selected-plays li.horizontal`：这找到了`#selected-plays`的`<li>`元素或子元素，并具有`horizontal`类。这也很容易阅读，并强制执行特定的DOM模式（应用`horizontal`类）。'
- en: '`#selected-plays li:not(.sub-level)`: This is difficult to read, inefficient,
    and doesn''t reflect the actual DOM structure.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#selected-plays li:not(.sub-level)`：这很难阅读，效率低下，并且不反映实际的DOM结构。'
- en: There are endless examples where selector-selector specificity comes up. Every
    application is unique, and as we just saw, there's no one correct way to implement
    selector specificity. What's important is that we exercise good judgement by considering
    the ramifications of selectors on the DOM structure, and consequently, the maintainability
    of our application or website.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，选择器的具体性经常会成为一个无穷的例子。每个应用都是独特的，正如我们刚才所看到的，实现选择器的具体性并没有一个正确的方法。重要的是，我们要通过考虑选择器对DOM结构的影响以及因此对应用或网站的可维护性的影响来行使良好的判断力。
- en: Attribute selectors
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性选择器
- en: 'Attribute selectors are a particularly helpful subset of CSS selectors. They
    allow us to specify an element by one of its HTML attributes, such as a link''s
    `title` attribute or an image''s `alt` attribute. For example, to select all images
    that have an `alt` attribute, we write the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 属性选择器是 CSS 选择器的一个特别有用的子集。它们允许我们通过其 HTML 属性之一来指定一个元素，例如链接的`title`属性或图像的`alt`属性。例如，要选择所有具有`alt`属性的图像，我们写成这样：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Styling links
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置链接的样式
- en: Attribute selectors accept a wildcard syntax inspired by regular expressions
    for identifying the value at the beginning (`^`) or end (`$`) of a string. They
    can also take an asterisk (`*`) to indicate the value at an arbitrary position
    within a string or an exclamation mark (`!`) to indicate a negated value.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 属性选择器接受受到正则表达式启发的通配符语法，用于标识字符串开头（`^`）或结尾（`$`）的值。它们还可以采用星号（`*`）来表示字符串中任意位置的值，感叹号（`!`）表示否定值。
- en: 'Let''s say we want to have different styles for different types of links. We
    first define the styles in our stylesheet:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望为不同类型的链接使用不同的样式。我们首先在样式表中定义样式：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then, we add the three classes--`mailto`, `pdflink`, and `henrylink`--to the
    appropriate links using jQuery.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 jQuery 将三个类--`mailto`、`pdflink` 和 `henrylink`--添加到相应的链接中。
- en: 'To add a class for all e-mail links, we construct a selector that looks for
    all anchor elements (`a`) with an `href` attribute (`[href]`) that begins with
    `mailto:` (`^="mailto:"`), as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要为所有电子邮件链接添加一个类，我们构造一个选择器，查找所有具有`href`属性的锚元素（`a`），该属性以`mailto:`开头（`^="mailto:"`），如下所示：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Listing 2.4
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.4
- en: 'Because of the rules defined in the page''s stylesheet, an envelope image appears
    after the mailto: link on the page.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于页面样式表中定义的规则，邮件链接后会出现一个信封图像。
- en: '![](img/5297_02_05-1.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_05-1.png)'
- en: 'To add a class for all the links to PDF files, we use the dollar sign rather
    than the caret symbol. This is because we''re selecting links with an `href` attribute
    that ends with `.pdf`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要为所有 PDF 文件的链接添加一个类，我们使用美元符号而不是插入符号。这是因为我们选择的是链接，其`href`属性以`.pdf`结尾：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 2.5*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2.5*'
- en: 'The stylesheet rule for the newly added `pdflink` class causes an Adobe Acrobat
    icon to appear after each link to a PDF document, as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 新添加的`pdflink`类的样式表规则会导致每个指向 PDF 文档的链接后面都出现 Adobe Acrobat 图标，如下面的截图所示：
- en: '![](img/5297_02_06-1.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_06-1.png)'
- en: 'Attribute selectors can be combined as well. We can, for example, add the class
    `henrylink` to all links with an `href` value that both starts with `http` and
    contains `henry` anywhere:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 属性选择器也可以组合使用。例如，我们可以将类`henrylink`添加到所有链接的`href`值既以`http`开头又在任何地方包含`henry`的链接中：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Listing 2.6
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.6
- en: 'With the three classes applied to the three types of links, we should see the
    following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有了应用于三种类型链接的三个类，我们应该看到以下效果：
- en: '![](img/5297_02_07-1.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_07-1.png)'
- en: Note the PDF icon to the right-hand side of the Hamlet link, the envelope icon
    next to the email link, and the white background and black border around the Henry
    V link.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Hamlet 链接右侧的 PDF 图标，电子邮件链接旁边的信封图标，以及 Henry V 链接周围的白色背景和黑色边框。
- en: Custom selectors
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义选择器
- en: To the wide variety of CSS selectors, jQuery adds its own custom selectors.
    These custom selectors enhance the capabilities of CSS selectors to locate page
    elements in new ways.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 在广泛的 CSS 选择器基础上添加了自己的自定义选择器。这些自定义选择器增强了 CSS 选择器定位页面元素的能力。
- en: Performance note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 性能说明
- en: When possible, jQuery uses the native DOM selector engine of the browser to
    find elements. This extremely fast approach is not possible when custom jQuery
    selectors are used. For this reason, it is recommended to avoid frequent use of
    custom selectors when a native option is available.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，jQuery 使用浏览器的原生 DOM 选择器引擎来查找元素。当使用自定义 jQuery 选择器时，这种极快的方法是不可能的。因此，建议在原生选项可用时避免频繁使用自定义选择器。
- en: 'Most of the custom selectors allow us to choose one or more elements from a
    collection of elements that we have already found. The custom selector syntax
    is the same as the CSS pseudo-class syntax, where the selector starts with a colon
    (`:`). For example, to select the second item from a set of `<div>` elements with
    a class of `horizontal`, we write this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数自定义选择器都允许我们从已经找到的一组元素中选择一个或多个元素。自定义选择器的语法与 CSS 伪类的语法相同，选择器以冒号（`:`）开头。例如，要从具有`horizontal`类的一组
    `<div>` 元素中选择第二个项目，我们写成这样：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that `:eq(1)` selects the second item in the set because JavaScript array
    numbering is zero-based, meaning that it starts with zero. In contrast, CSS is
    one-based, so a CSS selector such as `$('div:nth-child(1)')` would select all
    `div` selectors that are the first child of their parent. Because it can be difficult
    to remember which selectors are zero based and which are one based, we should
    consult the jQuery API documentation at [http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/)
    when in doubt.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`:eq(1)`选择集合中的第二个项目，因为JavaScript数组编号是以零为基础的，这意味着它从零开始。相比之下，CSS是以1为基础的，因此像`$('div:nth-child(1)')`这样的CSS选择器将选择所有作为其父元素的第一个子元素的`div`选择器。由于很难记住哪些选择器是基于零的，哪些是基于一的，当存在疑惑时，我们应该在jQuery
    API文档[http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/)中查阅jQuery
    API文档。
- en: Styling alternate rows
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风格化交替行
- en: 'Two very useful custom selectors in the jQuery library are `:odd` and `:even`.
    Let''s take a look at how we can use one of them for basic table striping given
    the following tables:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery库中有两个非常有用的自定义选择器是`:odd`和`:even`。让我们看看我们如何使用其中一个来对基本表格进行条纹处理，如下表格所示：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With minimal styles applied from our stylesheet, these headings and tables
    appear quite plain. The table has a solid white background, with no styling separating
    one row from the next, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的样式表中应用最小的样式后，这些标题和表格看起来相当普通。表格具有纯白色背景，没有样式区分一行和下一行，如下截图所示：
- en: '![](img/5297_02_08-1.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_08-1.png)'
- en: 'Now, we can add a style to the stylesheet for all the table rows and use an
    `alt` class for the odd rows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以向样式表中的所有表格行添加样式，并对奇数行使用`alt`类：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we write our jQuery code, attaching the class to the odd-numbered
    table rows (`<tr>` tags):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们编写我们的jQuery代码，将类附加到奇数行的表格行（`<tr>`标签）：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Listing 2.7
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.7
- en: 'But wait! Why use the `:even` selector for odd-numbered rows? Well, just as
    with the `:eq()` selector, the `:even` and `:odd` selectors use JavaScript''s
    native zero-based numbering. Therefore, the first row counts as zero (even) and
    the second row counts as one (odd), and so on. With this in mind, we can expect
    our simple bit of code to produce tables that look like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等！为什么使用`:even`选择器来选择奇数行？好吧，就像使用`:eq()`选择器一样，`:even`和`:odd`选择器使用JavaScript的本地从零开始的编号。因此，第一行计为零（偶数）和第二行计为一（奇数），依此类推。有了这一点，我们可以期望我们简单的代码生成如下所示的表格：
- en: '![](img/5297_02_09.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_09.png)'
- en: 'Note that for the second table, this result may not be what we intend. Since
    the last row in the Plays table has the alternate gray background, the first row
    in the Sonnets table has the plain white background. One way to avoid this type
    of problem is to use the `:nth-child()` selector instead, which counts an element''s
    position relative to its parent element rather than relative to all the elements
    selected so far. This selector can take a number, `odd` or `even` as its argument:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于第二个表格，这个结果可能不是我们想要的。由于剧目表中最后一行具有交替的灰色背景，而十四行诗表中的第一行具有普通的白色背景。避免这种问题的一种方法是使用`:nth-child()`选择器，该选择器计算元素相对于其父元素的位置，而不是相对于到目前为止选择的所有元素的位置。此选择器可以使用数字、`奇数`或`偶数`作为参数：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Listing 2.8
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.8
- en: 'As before, note that `:nth-child()` is the only jQuery selector that is one
    based. To achieve the same row striping as we did earlier--except with consistent
    behavior for the second table--we need to use `odd` rather than `even` as the
    argument. With this selector in place, both tables are now striped nicely, as
    shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，请注意`:nth-child()`是唯一一个以1为基础的jQuery选择器。为了实现与之前相同的行条纹效果--但对于第二个表格具有一致的行为，我们需要使用`奇数`而不是`偶数`作为参数。使用此选择器后，两个表格现在都有很好的条纹，如下截图所示：
- en: '![](img/5297_02_10.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_10.png)'
- en: The `:nth-child()` selector is a native CSS selector in modern browsers.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`:nth-child()`选择器是现代浏览器中本机的CSS选择器。'
- en: Finding elements based on textual content
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于文本内容查找元素
- en: 'For one final custom selector, let''s suppose for some reason we want to highlight
    any table cell that referred to one of the Henry plays. All we have to do--after
    adding a class to the stylesheet to make the text bold and italicized ( `.highlight
    {font-weight:bold; font-style: italic;}` )--is add a line to our jQuery code using
    the `:contains()` selector:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '对于最后一个自定义选择器，假设出于某种原因，我们希望突出显示任何一个表格单元格，该单元格提到了亨利的剧目。我们只需--在样式表中添加一个使文本加粗和斜体的类（`.highlight
    {font-weight:bold; font-style: italic;}`）--在我们的jQuery代码中使用`:contains()`选择器添加一行：'
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Listing 2.9
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.9
- en: 'So, now we can see our lovely striped table with the Henry plays prominently
    featured:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们可以看到我们可爱的带有亨利剧集的条纹表格突出显示：
- en: '![](img/5297_02_11.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_11.png)'
- en: It's important to note that the `:contains()` selector is case sensitive. Using
    `$('td:contains(henry)')` instead, without the uppercase "H", would select no
    cells. It's also important to note that `:contains()` can cause catastrophically
    bad performance, since the text of every element that matches the first part of
    the selector needs to be loaded and compared to our supplied argument. When `:contains()`
    has the potential to search hundreds of nodes for content, it's time to rethink
    our approach.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`:contains()` 选择器区分大小写。使用不带大写 "H" 的 `$('td:contains(henry)')` 将不选择任何单元格。还需要注意的是，`:contains()`
    可能会导致灾难性的性能下降，因为需要加载匹配第一部分选择器的每个元素的文本，并将其与我们提供的参数进行比较。当 `:contains()` 有可能搜索数百个节点以查找内容时，是时候重新考虑我们的方法了。
- en: Admittedly, there are ways to achieve the row striping and text highlighting
    without jQuery--or any client-side programming, for that matter. Nevertheless,
    jQuery, along with CSS, is a great alternative for this type of styling in cases
    where the content is generated dynamically and we don't have access to either
    the HTML or server-side code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，有多种方法可以实现行条纹和文本突出显示，而不需要 jQuery，或者说，根本不需要客户端编程。尽管如此，在动态生成内容且我们无法访问 HTML 或服务器端代码的情况下，jQuery
    与 CSS 是这种类型样式的绝佳选择。
- en: Form selectors
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单选择器
- en: 'The capabilities of custom selectors are not limited to locating elements based
    on their position. For example, when working with forms, jQuery''s custom selectors
    and complementary CSS3 selectors can make short work of selecting just the elements
    we need. The following table describes a handful of these form selectors:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义选择器的功能不仅限于根据位置定位元素。例如，在处理表单时，jQuery 的自定义选择器和补充的 CSS3 选择器可以轻松选择我们需要的元素。以下表格描述了其中一些表单选择器：
- en: '| **Selector** | **Match** |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **匹配** |'
- en: '| --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `:input` | Input, text area, select, and button elements |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `:input` | 输入、文本区域、选择器和按钮元素 |'
- en: '| `:button` | Button elements and input elements with a `type` attribute equal
    to `button` |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `:button` | 按钮元素和带有 `type` 属性等于 `button` 的输入元素 |'
- en: '| `:enabled` | Form elements that are enabled |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `:enabled` | 已启用的表单元素 |'
- en: '| `:disabled` | Form elements that are disabled |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `:disabled` | 已禁用的表单元素 |'
- en: '| `:checked` | Radio buttons or checkboxes that are checked |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `:checked` | 已选中的单选按钮或复选框 |'
- en: '| `:selected` | Option elements that are selected |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `:selected` | 已选择的选项元素 |'
- en: As with the other selectors, form selectors can be combined for greater specificity.
    We can, for example, select all checked radio buttons (but not checkboxes) with
    `$('input[type="radio"]:checked')` or select all password inputs and disabled
    text inputs with `$('input[type="password"], input[type="text"]:disabled')`. Even
    with custom selectors, we can use the same basic principles of CSS to build the
    list of matched elements.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他选择器一样，表单选择器可以组合使用以提高特异性。例如，我们可以选择所有已选中的单选按钮（但不包括复选框）：`$('input[type="radio"]:checked')`，或选择所有密码输入和禁用的文本输入：`$('input[type="password"],
    input[type="text"]:disabled')`。即使使用自定义选择器，我们也可以使用相同的基本 CSS 原理来构建匹配元素列表。
- en: We have only scratched the surface of available selector expressions here. We
    will dive further into the topic in [Chapter 9](27c55a6c-368a-4007-9e8c-1f9d9be254f8.xhtml),
    *Advanced Selectors and Traversing*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里仅仅触及了可用选择器表达式的皮毛。我们将在[第9章](27c55a6c-368a-4007-9e8c-1f9d9be254f8.xhtml)，*高级选择器和遍历*中深入探讨这个主题。
- en: DOM traversal methods
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM 遍历方法
- en: The jQuery selectors that we have explored so far allow us to select a set of
    elements as we navigate across and down the DOM tree and filter the results. If
    this were the only way to select elements, our options would be somewhat limited.
    There are many occasions when selecting a parent or ancestor element is essential;
    that is where jQuery's DOM traversal methods come into play. With these methods,
    we can go up, down, and all around the DOM tree with ease.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们探索的 jQuery 选择器允许我们在 DOM 树中向下导航并过滤结果，如果这是选择元素的唯一方式，我们的选择会受到一定限制。在许多情况下，选择父元素或祖先元素至关重要；这就是
    jQuery 的 DOM 遍历方法发挥作用的地方。使用这些方法，我们可以轻松地在 DOM 树中向上、向下和周围移动。
- en: 'Some of the methods have a nearly identical counterpart among the selector
    expressions. For example, the line we first used to add the `alt` class, `$(''tr:even'').addClass(''alt'')`,
    could be rewritten with the `.filter()` method as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一些方法在选择器表达式中具有几乎相同的对应项。例如，我们首先用来添加`alt`类的行，`$('tr:even').addClass('alt')`，可以使用`.filter()`方法重写如下：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For the most part, however, the two ways of selecting elements complement each
    other. Also, the `.filter()` method in particular has enormous power because it
    can take a function as its argument. The function allows us to create complex
    tests for whether elements should be included in the matched set. Let''s suppose,
    for example, that we want to add a class to all external links:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在很大程度上，这两种选择元素的方式互补。此外，特别是`.filter()`方法具有巨大的威力，因为它可以将函数作为其参数。该函数允许我们为是否应将元素包含在匹配的集合中创建复杂的测试。例如，假设我们想要为所有外部链接添加一个类：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'jQuery has no selector for this sort of thing. Without a filter function, we''d
    be forced to explicitly loop through each element, testing each one separately.
    With the following filter function, however, we can still rely on jQuery''s implicit
    iteration and keep our code compact:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery没有这种选择器。如果没有过滤函数，我们将被迫显式地遍历每个元素，分别测试每个元素。但是，有了下面的过滤函数，我们仍然可以依赖于jQuery的隐式迭代，并保持我们的代码简洁：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Listing 2.10
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.10
- en: 'The supplied function filters the set of `<a>` elements by two criteria:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的函数通过两个标准筛选`<a>`元素集：
- en: They must have an `href` attribute with a domain name (`a.hostname`). We use
    this test to exclude mailto links, for instance.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接必须具有域名(`a.hostname`)的`href`属性。我们使用此测试来排除邮件链接，例如。
- en: The domain name that they link to (again, `a.hostname`) must not match (`!==`)
    the domain name of the current page (`location.hostname`).
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们链接到的域名（再次，`a.hostname`）不得与当前页面的域名（`location.hostname`）匹配。
- en: More precisely, the `.filter()` method iterates through the matched set of elements,
    calling the function once for each and testing the return value. If the function
    returns `false`, the element is removed from the matched set. If it returns `true`,
    the element is kept.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 更精确地说，`.filter()`方法遍历匹配的元素集，每次调用函数并测试返回值。如果函数返回`false`，则从匹配的集合中删除该元素。如果返回`true`，则保留该元素。
- en: 'With the `.filter()` method in place, the Henry V link is styled to indicate
    it is external:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.filter()`方法后，Henry V链接被设置为外部链接的样式：
- en: '![](img/5297_02_12.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_12.png)'
- en: In the next section, we'll take another look at our striped table example to
    see what else is possible with traversal methods.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将再次查看我们条纹表格示例，看看遍历方法还有什么其他可能性。
- en: Styling specific cells
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化特定单元格
- en: 'Earlier, we added a `highlight` class to all cells containing the text Henry.
    To instead style the cell next to each cell containing Henry, we can begin with
    the selector that we have already written and simply call the `.next()` method
    on the result:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们向所有包含文本Henry的单元格添加了`highlight`类。要改为样式化每个包含Henry的单元格旁边的单元格，我们可以从已经编写的选择器开始，并简单地在结果上调用`.next()`方法：
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Listing 2.11
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.11
- en: 'The tables should now look like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在表格应该是这样的：
- en: '![](img/5297_02_13.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_13.png)'
- en: 'The `.next()` method selects only the very next sibling element. To highlight
    all of the cells following the one containing Henry, we could use the `.nextAll()`
    method instead:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`.next()`方法仅选择紧接的下一个同级元素。要突出显示包含Henry的单元格后面的所有单元格，我们可以改用`.nextAll()`方法：'
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Listing 2.12
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.12
- en: 'Since the cells containing Henry are in the first column of the table, this
    code causes the rest of the cells in these rows to be highlighted:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 由于包含Henry的单元格位于表格的第一列中，此代码会导致这些行中的其余单元格被突出显示：
- en: '![](img/5297_02_14.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_14.png)'
- en: 'As we might expect, the `.next()` and `.nextAll()` methods have counterparts:
    `.prev()` and `.prevAll()`. Additionally, `.siblings()` selects all other elements
    at the same DOM level, regardless of whether they come before or after the previously
    selected element.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可能预期的那样，`.next()`和`.nextAll()`方法有对应的方法：`.prev()`和`.prevAll()`。此外，`.siblings()`选择同一DOM级别的所有其他元素，无论它们是在之前还是之后选择的元素之后。
- en: 'To include the original cell (the one that contains Henry) along with the cells
    that follow, we can add the `.addBack()` method:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含原始单元格（包含Henry的单元格）以及随后的单元格，我们可以添加`.addBack()`方法：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Listing 2.13
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.13
- en: 'With this modification in place, all of the cells in the row get their styles
    from the `highlight` class:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个修改后，该行中的所有单元格都从`highlight`类中获取其样式：
- en: '![](img/5297_02_15.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5297_02_15.png)'
- en: 'There are a multitude of selector and traversal-method combinations by which
    we can select the same set of elements. Here, for example, is another way to select
    every cell in each row where at least one of the cells contains Henry:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过多种选择器和遍历方法的组合来选择相同的元素集。例如，这里是另一种选择每行中至少一个单元格包含 Henry 的方法：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Listing 2.14
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.14
- en: Rather than traversing across to sibling elements, we travel up one level in
    the DOM to the `<tr>` tag with `.parent()` and then select all of the row's cells
    with `.children()`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是沿着兄弟元素遍历，而是在 DOM 中向上移动到带有 `.parent()` 的 `<tr>` 标记，然后用 `.children()` 选择所有行的单元格。
- en: Chaining
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链式调用
- en: The traversal method combinations that we have just explored illustrate jQuery's
    chaining capability. With jQuery, it is possible to select multiple sets of elements
    and do multiple things with them, all within a single line of code. This chaining
    not only helps keep jQuery code concise, but it can also improve a script's performance
    when the alternative is to respecify a selector.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探索过的遍历方法组合展示了 jQuery 的链式调用能力。使用 jQuery，可以在一行代码中选择多个元素集并对其执行多个操作。这种链式调用不仅有助于保持
    jQuery 代码简洁，而且在替代重新指定选择器的情况下，还可以改善脚本的性能。
- en: How chaining works
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 链式调用的工作原理
- en: Almost all jQuery methods return a jQuery object and so can have more jQuery
    methods applied to the result. We will explore the inner workings of chaining
    in [Chapter 8](091dd3f4-9663-47df-af02-817487c3038f.xhtml), *Developing Plugins*.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的 jQuery 方法都会返回一个 jQuery 对象，因此可以对结果应用更多的 jQuery 方法。我们将在[第 8 章](091dd3f4-9663-47df-af02-817487c3038f.xhtml)中探讨链式调用的内部工作原理，*开发插件*。
- en: 'It is also possible to break a single line of code into multiple lines for
    greater readability, as we''ve been doing throughout this chapter so far. For
    example, a single chained sequence of methods could be written in one line:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高可读性，也可以将一行代码分成多行。例如，在本章中我们一直在做的就是这样。例如，一个单独的链式方法序列可以写在一行中：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Listing 2.15
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.15
- en: 'This same sequence of methods could also be written in seven lines:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的顺序也可以用七行来写：
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Listing 2.16
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.16
- en: The DOM traversal in this example is contrived and not recommended. There are
    clearly simpler, more direct methods at our disposal. The point of the example
    is simply to demonstrate the tremendous flexibility that chaining affords us,
    especially when many calls need to be made.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中的 DOM 遍历是刻意的，不建议使用。我们可以清楚地看到，我们可以使用更简单、更直接的方法。这个例子的重点只是展示了链式调用给我们带来的巨大灵活性，特别是当需要进行多次调用时。
- en: Chaining can be like speaking a whole paragraph's worth of words in a single
    breath--it gets the job done quickly, but it can be hard for someone else to understand.
    Breaking it up into multiple lines and adding judicious comments can save more
    time in the long run.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 链式调用就像在一个呼吸里说完整个段落的话语一样——可以快速完成工作，但对于其他人来说可能很难理解。将其分成多行并添加适当的注释可以在长远来看节省更多时间。
- en: Iterating over jQuery objects
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代 jQuery 对象
- en: 'New in jQuery 3 is the ability to iterate over jQuery objects using a `for...of`
    loop. This by itself isn''t a big deal. For one thing, it''s rare that we need
    to explicitly iterate over jQuery objects, especially when the same result is
    possible by using implicit iteration in jQuery functions. But sometimes, explicit
    iteration can''t be avoided. For example, imaging you need to reduce an array
    of elements (a jQuery object) to an array of string values. The `each()` function
    is a tool of choice here:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 3 中的新功能是使用 `for...of` 循环迭代 jQuery 对象。这本身并不是什么大不了的事情。首先，我们很少需要明确地迭代 jQuery
    对象，特别是当使用 jQuery 函数中的隐式迭代也能得到相同的结果时。但有时，无法避免明确迭代。例如，想象一下你需要将一个元素数组（一个 jQuery 对象）减少为一个字符串值数组。`each()`
    函数在这里是一种选择：
- en: '[PRE28]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Listing 2.17
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.17
- en: 'We start off with an array of `<td>` elements, the result of our `$(''td'')`
    selector. We then reduce it to an array of strings by passing the `each()` function
    a callback that pushes each string that starts with "H" onto the `eachText` array.
    There''s nothing wrong with this approach, but having callback functions for such
    a straightforward task seems like a bit much. Here''s the same functionality using
    `for...of` syntax:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先用 `$('td')` 选择器得到了一个 `<td>` 元素数组。然后，通过将 `each()` 函数传递一个回调来将每个以 "H" 开头的字符串推到
    `eachText` 数组中，我们将其减少为一个字符串数组。这种方法没有问题，但是为这样一个简单的任务编写回调函数似乎有点过分了。下面是使用 `for...of`
    语法实现相同功能的代码：
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Listing 2.18
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.18
- en: We can now reduce jQuery objects using simple for loops and if statements. We'll
    revisit this `for...of` approach later on in the book for more advanced usage
    scenarios involving generators.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单的`for`循环和`if`语句，我们现在可以缩减 jQuery 对象。我们将在本书后面重新讨论这种`for...of`方法，以适用更高级的使用场景，包括生成器。
- en: Accessing DOM elements
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问DOM元素
- en: Every selector expression and most jQuery methods return a jQuery object. This
    is almost always what we want because of the implicit iteration and chaining capabilities
    that it affords.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选择器表达式和大多数jQuery方法都返回一个jQuery对象。这几乎总是我们想要的，因为它提供了隐式迭代和链接的功能。
- en: 'Still, there may be points in our code when we need to access a DOM element
    directly. For example, we may need to make a resulting set of elements available
    to another JavaScript library, or we might need to access an element''s tag name,
    which is available as a property of the DOM element. For these admittedly rare
    situations, jQuery provides the `.get()` method. To access the first DOM element
    referred to by a jQuery object, for example, we would use `.get(0)`. So, if we
    want to know the tag name of an element with an ID of `my-element`, we would write:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的代码中可能会有一些情况需要直接访问DOM元素。例如，我们可能需要使生成的元素集合可供其他JavaScript库使用，或者可能需要访问元素的标签名称，这作为DOM元素的一个属性可用。对于这些明显罕见的情况，jQuery提供了`.get()`方法。例如，要访问jQuery对象引用的第一个DOM元素，我们会使用`.get(0)`。因此，如果我们想要知道ID为`my-element`的元素的标签名称，我们会这样写：
- en: '[PRE30]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For even greater convenience, jQuery provides a shorthand for `.get()`. Instead
    of writing the previous line, we can use square brackets immediately following
    the selector:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更加便利，jQuery提供了`.get()`的简写。我们可以直接在选择器后面使用方括号来代替前面的行：
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: It's no accident that this syntax appears to treat the jQuery object as an array
    of DOM elements; using the square brackets is like peeling away the jQuery layer
    to get at the node list, and including the index (in this case, `0`) is like plucking
    out the DOM element itself.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法看起来像是将jQuery对象视为DOM元素的数组并不是偶然的；使用方括号就像是把jQuery层剥离出去，得到节点列表，并包括索引（在这种情况下，`0`），就像是取出DOM元素本身。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With the techniques that we covered in this chapter, we should now be able to
    locate sets of elements on the page in a variety of ways. In particular, we learned
    how to style top-level and sub-level items in a nested list using basic CSS selectors,
    how to apply different styles to different types of links using attribute selectors,
    add rudimentary striping to a table using either the custom jQuery selectors `:odd`
    and `:even` or the advanced CSS selector `:nth-child()`, and highlight text within
    certain table cells by chaining jQuery methods.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章介绍的技巧，现在我们应该能够以各种方式在页面上定位元素集合。特别是，我们学习了如何使用基本的CSS选择器来为嵌套列表的顶层和子层项目设置样式，如何使用属性选择器为不同类型的链接应用不同的样式，如何使用自定义的jQuery选择器`:odd`和`:even`或高级CSS选择器`:nth-child()`为表格添加基本的条纹，并通过链接jQuery方法来突出显示特定表格单元格中的文本。
- en: So far, we have been using the `$(() => {})` document ready handler to add a
    class to a matched set of elements. In the next chapter, we'll explore ways in
    which to add a class in response to a variety of user-initiated events.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用`$(() => {})`文档准备处理程序来给匹配的元素集合添加类。在下一章中，我们将探讨在响应各种用户触发事件中添加类的方法。
- en: Further reading
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The topic of selectors and traversal methods will be explored in more detail
    in [Chapter 9](27c55a6c-368a-4007-9e8c-1f9d9be254f8.xhtml), *Advanced Selectors
    and Traversing*. A complete list of jQuery's selectors and traversal methods is
    available in Appendix B of this book and in the official jQuery documentation
    at [http://api.jquery.com/](http://api.jquery.com/).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器和遍历方法的主题将在[第9章](27c55a6c-368a-4007-9e8c-1f9d9be254f8.xhtml)《高级选择器和遍历》中更详细地探讨。jQuery的选择器和遍历方法的完整列表可在本书的附录B中找到，也可在官方的jQuery文档[http://api.jquery.com/](http://api.jquery.com/)中找到。
- en: Exercises
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Challenge exercises may require the use of the official jQuery documentation
    at [http://api.jquery.com/](http://api.jquery.com/):'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战练习可能需要使用官方的jQuery文档 [http://api.jquery.com/](http://api.jquery.com/)：
- en: Add a class of `special` to all of the `<li>` elements at the second level of
    the nested list.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为嵌套列表的第二级所有`<li>`元素添加一个`special`类。
- en: Add a class of `year` to all the table cells in the third column of a table.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为表格的第三列中的所有单元格添加一个`year`类。
- en: Add the class `special` to the first table row that has the word Tragedy in
    it.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在含有单词`Tragedy`的第一行表格行中添加`special`类。
- en: Here's a challenge for you. Select all the list items (`<li>s`) containing a
    link (`<a>`). Add the class `afterlink` to the sibling list items that follow
    the ones selected.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里有一个挑战给你。选择所有包含链接（`<a>`）的列表项（`<li>`）。给所选项后面的兄弟列表项添加类`afterlink`。
- en: Here's another challenge for you. Add the class `tragedy` to the closest ancestor
    `<ul>` of any `.pdf` link.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里有另一个挑战给你。给任何`.pdf`链接最近的祖先`<ul>`添加类`tragedy`。
