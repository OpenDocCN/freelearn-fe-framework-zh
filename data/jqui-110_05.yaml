- en: Chapter 5. The Dialog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。对话框
- en: Traditionally, the way to display a brief message or ask a visitor a question
    would've been to use one of JavaScript's native dialog boxes (such as `alert`
    or `confirm`), or to open a new web page with a predefined size, styled to look
    like a dialog box.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，显示简短消息或询问访问者问题的方法是使用JavaScript的本机对话框之一（如`alert`或`confirm`），或者打开一个具有预定义大小且样式设计成对话框样式的新网页。
- en: Unfortunately, as I'm sure you're aware, neither of these methods is particularly
    flexible to us as developers or particularly engaging for our visitors. For every
    problem they solve, several new problems are usually introduced.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我相信你也清楚，这些方法对于我们作为开发人员并不特别灵活，对我们的访问者也不特别引人入胜。它们解决了一些问题，但通常也会引入几个新问题。
- en: The dialog widget lets us display a message, supplemental content (such as images
    or text) or even interactive content (such as forms). It's also easy to add buttons,
    such as a simple **Ok** and **Cancel** to the dialog, and define the callback
    functions for them in order to react to their being clicked; the dialog can also
    be modal or nonmodal.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框小部件可以让我们显示消息、补充内容（如图像或文本）甚至交互式内容（如表单）。也很容易添加按钮，例如简单的**确定**和**取消**按钮，并为它们定义回调函数以便对它们的点击作出反应；对话框也可以是模态的或非模态的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a basic dialog
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本对话框
- en: Working with the dialog options
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对话框选项
- en: Modality
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模态性
- en: Enabling the built-in animations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用内置动画
- en: Adding buttons to the dialog
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向对话框添加按钮
- en: Working with the dialog callbacks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对话框回调
- en: Controlling a dialog programmatically
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制对话框的程序化方法
- en: 'The following screenshot shows a dialog widget and the different elements it
    is made of:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了对话框小部件及其所包含的不同元素：
- en: '![The Dialog](img/2209OS_05_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![对话框](img/2209OS_05_01.jpg)'
- en: Creating a basic dialog
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本对话框
- en: A dialog has a lot of built-in default behavior, but few methods are needed
    to control it programmatically, making this an easy-to-use widget, which is also
    highly configurable and powerful.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框具有许多内置的默认行为，但只需要少量方法来程序化地控制它，使其成为一个易于使用的小部件，同时也具有高度可配置性和强大性。
- en: 'Generating the widget is simple and requires a minimal underlying markup structure.
    The following page contains the minimum markup that''s required to implement the
    dialog widget:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 生成小部件很简单，只需要最小的底层标记结构。以下页面包含实现对话框小部件所需的最小标记：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save this file as `dialog1.html` in the `jqueryui` project folder. To use the
    dialog, the following dependencies are required:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`dialog1.html`，放在`jqueryui`项目文件夹中。要使用对话框，需要以下依赖项：
- en: '`jquery.ui.all.css`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.all.css`'
- en: '`jquery.ui.core.js`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.core.js`'
- en: '`jquery.ui.widget.js`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.widget.js`'
- en: '`jquery.ui.position.js`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.position.js`'
- en: '`jquery.ui.dialog.js`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.dialog.js`'
- en: '`jquery.ui.button.js`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.button.js`'
- en: 'Optionally, we can also include the following files to make the dialog draggable
    and resizable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们还可以包含以下文件来使对话框可拖动和可调整大小：
- en: '`jquery.ui.mouse.js`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.mouse.js`'
- en: '`jquery.ui.draggable.js`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.draggable.js`'
- en: '`jquery.ui.resizable.js`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery.ui.resizable.js`'
- en: The dialog widget is initialized in the same way as the other widgets, which
    we have already looked at by calling the widget's plugin method.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框小部件的初始化方式与我们已经了解的其他小部件相同，通过调用小部件的插件方法。
- en: 'When you run this page in your browser, you should see the default dialog widget,
    as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在浏览器中运行此页面时，您应该看到默认的对话框小部件，如下截图所示：
- en: '![Creating a basic dialog](img/2209OS_05_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本对话框](img/2209OS_05_02.jpg)'
- en: As with the previous widgets that we've covered, a variety of classnames from
    the CSS framework are added to different elements within the widget to give them
    the appropriate styling for their respective elements, and any additional elements
    that are required are created on the fly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前介绍的小部件一样，CSS框架中的各种类名被添加到小部件中的不同元素中，以使它们具有各自元素的适当样式，并且所需的任何附加元素都是即时创建的。
- en: The dialog in the first example is fixed both in size and position and will
    be positioned in the center of the viewport. We can easily make the widget draggable,
    resizable, or both. All we need to do is include the draggable and resizable component's
    source files, as well as the mouse utility, with the other `<script>` resources
    at the end of `<head>`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例中的对话框在大小和位置上都是固定的，并且将被定位在视口的中心。我们可以很容易地使小部件可拖动、可调整大小或两者兼具。我们只需要在`<head>`的末尾与其他`<script>`资源一起包含可拖动和可调整大小组件的源文件，以及鼠标工具。
- en: It's not important that the draggable and resizable files are included in the
    page before the dialog's source file. They can come before or after, and the widget
    will still inherit these behaviors. Any styling that is required, such as the
    resize indicator that appears in the bottom-left of the dialog, will be picked
    up automatically from the master CSS file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不重要的是，在对话框的源文件之前将可拖动和可调整大小的文件包含在页面中。它们可以出现在对话框的源文件之前或之后，小部件仍将继承这些行为。任何所需的样式，例如出现在对话框左下角的调整大小指示器，将自动从主CSS文件中捡取。
- en: 'Add the following three `<script>` elements directly before the closing `</head>`
    tag in `dialog1.html`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dialog1.html`的关闭`</head>`标签之前直接添加以下三个`<script>`元素：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save this as `dialog2.html` and view it in a browser. The dialog should now
    be draggable and can be moved to any part of the viewport, but will not cause
    it to scroll if the widget is moved to an edge.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`dialog2.html`并在浏览器中查看。现在对话框应该是可拖动的，并且可以移动到视口的任何部分，但是如果小部件移动到边缘，它不会导致滚动。
- en: The dialog should also be resizable—by clicking and holding any corner and dragging,
    the widget can be made bigger or smaller. If the dialog is made bigger than the
    viewport, it will cause the window to scroll.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框还应该是可调整大小的——通过单击并按住任何角落并拖动，可以使小部件变大或变小。如果对话框比视口大，它将导致窗口滚动。
- en: Listing the dialog options
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出对话框选项
- en: 'An option object can be used in a dialog''s widget method to configure various
    dialog options. Let''s look at the available options:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 选项对象可用于对话框的小部件方法中配置各种对话框选项。让我们来看看可用的选项：
- en: '| Option | Default value | Description |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `appendTo` | `"body"` | Determines which element the dialog (and overlay,
    if modal) should be appended to. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `appendTo` | `"body"` | 确定对话框（和遮罩，如果是模态的）应追加到哪个元素。'
- en: '| `autoOpen` | `true` | Shows the dialog as soon as the `dialog()` method is
    called, when set to `true`. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `autoOpen` | `true` | 当设置为`true`时，调用`dialog()`方法时立即显示对话框。'
- en: '| `buttons` | `{}` | Supplies an object containing buttons to be used with
    the dialog. Each key becomes the text on the `<button>` element, and each value
    is a callback function, which is executed when the button is clicked. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `buttons` | `{}` | 提供一个包含要与对话框一起使用的按钮的对象。每个键都成为`<button>`元素上的文本，每个值都是一个回调函数，在单击按钮时执行。'
- en: '| `closeOnEscape` | `true` | If set to `true`, the dialog will close when the
    *Esc* key is pressed. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `closeOnEscape` | `true` | 如果设置为`true`，则按下*Esc*键时对话框将关闭。'
- en: '| `dialogClass` | `""` | Sets additional classnames on the dialog for theming
    purposes. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `dialogClass` | `""` | 为对话框设置额外的类名以进行主题设置。'
- en: '| `draggable` | `true` | Makes the dialog draggable (requires use of `jquery.ui.draggable.js`).
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `draggable` | `true` | 使对话框可拖动（需要使用`jquery.ui.draggable.js`）。'
- en: '| `height` | `auto` | Sets the starting height of the dialog. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `height` | `auto` | 设置对话框的起始高度。'
- en: '| `hide` | `null` | Sets an effect to be used when the dialog is closed. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `hide` | `null` | 设置对话框关闭时要使用的效果。'
- en: '| `maxHeight` | `false` | Sets a maximum height for the dialog. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `maxHeight` | `false` | 设置对话框的最大高度。'
- en: '| `maxWidth` | `false` | Sets a maximum width for the dialog. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `maxWidth` | `false` | 设置对话框的最大宽度。'
- en: '| `minHeight` | `150` | Sets a minimum height for the dialog. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `minHeight` | `150` | 设置对话框的最小高度。'
- en: '| `minWidth` | `150` | Sets a minimum width for the dialog. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `minWidth` | `150` | 设置对话框的最小宽度。'
- en: '| `modal` | `false` | Enables modality while the dialog is open. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `modal` | `false` | 在对话框打开时启用模态。'
- en: '| `position` | `center` | Sets the starting position of the dialog in the viewport.
    It can accept a string, an array of strings, or an array containing the exact
    coordinates of the dialog offset from the top and left of the viewport use (requires
    use of `jquery.ui.position.js`). |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `position` | `center` | 设置对话框在视口中的起始位置。它可以接受一个字符串、一个字符串数组或包含对话框偏离视口顶部和左侧的确切坐标的数组（需要使用`jquery.ui.position.js`）。'
- en: '| `resizable` | `true` | Makes the dialog resizable (also requires `jquery.ui.resizable.js`).
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `resizable` | `true` | 使对话框可调整大小（还需要`jquery.ui.resizable.js`）。'
- en: '| `show` | `null` | Sets an effect to be used when the dialog is opened. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `show` | `null` | 设置对话框打开时要使用的效果。'
- en: '| `title` | `""` | Alternative to specifying the title attribute on the widget''s
    underlying container element. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `title` | `""` | 替代在小部件的基础容器元素上指定标题属性。'
- en: '| `width` | `300` | Sets the starting width of the dialog. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `width` | `300` | 设置对话框的起始宽度。'
- en: As you can see, we have a wide range of configurable options to work with while
    implementing the dialog. Many of these options are Boolean, numerical, or string-based,
    making them easy to get and set within your code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有各种可配置的选项可供在实现对话框时使用。其中许多选项是布尔值、数值或基于字符串的，使它们易于在您的代码中获取和设置。
- en: Showing the dialog
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示对话框
- en: In our examples so far, the dialog has been displayed as soon as the page is
    loaded. The `autoOpen` option is set to `true` by default, so the dialog will
    be displayed as soon as it is initialized.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的示例中，对话框在页面加载后立即显示。 `autoOpen` 选项默认设置为 `true`，因此对话框将在初始化时立即显示。
- en: 'We can change this so that the dialog is opened when something else occurs,
    like a button being clicked by setting the `autoOpen` option to `false`. Change
    the final `<script>` element at the bottom of `dialog2.html` to the following
    one:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更改这样，以便在发生其他事情时打开对话框，比如通过将 `autoOpen` 选项设置为 `false` 来点击按钮。将 `dialog2.html`
    底部的最终 `<script>` 元素更改为以下内容：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save this as `dialog3.html`. The widget is still created; the underlying markup
    is removed from the page, transformed into the widget, and then reappended to
    the end of `<body>`. It will remain hidden until the `open` method is called on
    it. We'll come back to this option when we look at the `open` method a little
    later in this chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `dialog3.html`。小部件仍然被创建；底层标记被从页面中移除，转换为小部件，然后重新附加到 `<body>` 的末尾。它将保持隐藏，直到调用
    `open` 方法为止。我们稍后在本章中查看 `open` 方法时会回到这个选项。
- en: Setting a dialog title
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置对话框标题
- en: The options table shows a `title` option, which we can use to control how the
    title is displayed on the widget; this can be made selectable if the `draggable`
    attribute is set to `false`. Although it is possible to set it directly in code,
    it is far easier to set it within the configuration options, as this gives us
    a greater control over how the title is displayed in the widget.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 选项表显示一个 `title` 选项，我们可以使用它来控制标题在小部件上的显示方式；如果将 `draggable` 属性设置为 `false`，则可以将其设置为可选择。虽然可以直接在代码中设置它，但在配置选项中设置它要容易得多，因为这样可以更好地控制标题在小部件中的显示方式。
- en: By default, the title text of the dialog widget will be shown in plain text;
    we can override this by adding a custom style to the `.ui-dialog-title` class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对话框小部件的标题文本将显示为纯文本；我们可以通过向 `.ui-dialog-title` 类添加自定义样式来覆盖此设置。
- en: 'In your browser, alter the `<script>` block for dialog in `dialog3.html` as
    follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，将 `dialog3.html` 中对话框的 `<script>` 块修改如下：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Save the file as `dialog4.html`. We can now add some styling to our dialog''s
    title bar – in a separate file add the following code, saving it as `dialogOverrides.css`
    after the link to the jQuery UI stylesheet:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `dialog4.html`。我们现在可以为对话框的标题栏添加一些样式 - 在一个单独的文件中添加以下代码，并将其保存为 `dialogOverrides.css`，在链接到
    jQuery UI 样式表后：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we preview the results in our browser, you can clearly see the title now
    shows in a different color:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果，您可以清楚地看到标题现在以不同的颜色显示：
- en: '![Setting a dialog title](img/2209OS_05_10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![设置对话框标题](img/2209OS_05_10.jpg)'
- en: 'To see the effect on the code, we can see how the script has overridden the
    base code, using a DOM inspector such as Firebug:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看代码的效果，我们可以查看脚本如何覆盖基本代码，使用 DOM 检查器如 Firebug：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We could manually style the dialog elements within our stylesheet, but it would
    be through trial and error; it is much easier to simply add a new class using
    jQuery, which we can then style to our heart's content!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在样式表中手动为对话框元素设置样式，但这将是通过反复试验；简单地使用 jQuery 添加一个新类，然后我们可以根据自己的喜好进行样式设置，这会更容易得多！
- en: Tip
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If a value is not provided to the `title` attribute, the attribute on the dialog
    source element will be used.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未提供值给 `title` 属性，则将使用对话框源元素上的属性。
- en: Configuring the modality option
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置模态选项
- en: One of the dialog's greatest assets is modality. This feature creates an overlay
    that covers the underlying page beneath the dialog while it is open. The overlay
    is removed as soon as the dialog is closed. None of the underlying page content
    can be manipulated within anyway while the dialog is open.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框的最大优势之一是模态性。此功能在对话框打开时创建一个覆盖在对话框下方的底层页面的覆盖层。一旦对话框关闭，覆盖层就会被移除。在对话框打开时，无法以任何方式操纵底层页面内容。
- en: The benefit of this feature is that it ensures the dialog is closed before the
    underlying page becomes interactive again, and gives a clear visual indicator
    to the visitor that the dialog must be interacted with before they can proceed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能的好处是它确保对话框在基础页面再次变得交互之前关闭，并为访问者提供清晰的视觉指示，表明必须与对话框交互，然后才能继续。
- en: 'Change the configuration object in `dialog4.html` to the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`dialog4.html`中的配置对象如下所示：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This file can be saved as `dialog5.html`. The following screenshot shows the
    modal effect (you may like to add some fake content to the page to fully appreciate
    the effect of the modal):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件可以保存为`dialog5.html`。以下截图显示了模态效果（您可能需要向页面添加一些虚假内容，以充分体验模态效果）：
- en: '![Configuring the modality option](img/2209OS_05_03.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![配置模态选项](img/2209OS_05_03.jpg)'
- en: Only a single property is required while adding modality and that is the `modal`
    option. When you view the page in a browser, you'll see the modal effect immediately.
    The repeated background image that is used to create the overlay is styled completely
    by the CSS framework and is therefore fully themeable through the **ThemeRoller**
    tool. We can also use our own image if we need to. The class name `ui-widget-overlay`
    is added to the overlay, so this is the selector to override if customization
    is required.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 添加模态的唯一属性是`modal`选项。当您在浏览器中查看页面时，您将立即看到模态效果。用于创建覆盖图像的重复背景图像完全由CSS框架样式化，因此可以通过**ThemeRoller**工具进行完全主题化。如果需要，我们还可以使用自己的图像。`ui-widget-overlay`类名称会被添加到覆盖层中，因此这是需要覆盖的选择器，如果需要自定义的话。
- en: Adding buttons
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加按钮
- en: 'The `button` option accepts an object literal that is used to specify the different
    `<button>` elements that should be present on the dialog. Each `property: value`
    pair represents a single button. Let''s add a couple of `<button>` elements to
    our dialog.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`button`选项接受一个对象文字，用于指定对话框上应存在的不同`<button>`元素。每个`property: value`对表示一个单个按钮。让我们向我们的对话框添加一些`<button>`元素。'
- en: 'Modify the final `<script>` element in `dialog5.html` so that it appears as
    follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`dialog5.html`中的最终`<script>`元素，使其如下所示：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file as `dialog6.html`. The key for each property in the `buttons`
    object is the text that will form the `<button>` label, and the value is the name
    of the callback function to execute when the button is clicked. The `buttons`
    option can take either an object, as in this example, or an array of objects.
    In this example the `execute()` and `cancel()` functions don't do anything; we'll
    come back to this example shortly and populate them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`dialog6.html`。`buttons`对象中每个属性的关键是将形成`<button>`标签的文本，值是单击按钮时要执行的回调函数的名称。`buttons`选项可以采用对象，如此示例中的示例，也可以采用对象数组。在这个例子中，`execute()`和`cancel()`函数什么都不做；我们很快就会回到这个例子并填充它们。
- en: 'The following screenshot shows how our new `<button>` elements would appear:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的新`<button>`元素将如何显示：
- en: '![Adding buttons](img/2209OS_05_04.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![添加按钮](img/2209OS_05_04.jpg)'
- en: The widget will add our new buttons to their own container at the foot of the
    dialog, and if the dialog is resized, this container will retain its original
    dimensions. The `<button>` elements are fully themable and will be styled according
    to the theme in use.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件将在对话框底部的自己容器中添加我们的新按钮，并且如果对话框被调整大小，此容器将保持其原始尺寸。`<button>`元素是完全可主题化的，并且将根据使用的主题进行样式设置。
- en: Adding icons to the dialog buttons
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向对话框按钮添加图标
- en: Until now, closing a dialog usually meant having to click on the cross icon
    in the title bar – it works well for this purpose, but doesn't offer us any opportunity
    to get a response from the person browsing our website or online application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，关闭对话框通常意味着必须点击标题栏中的关闭图标-它对此目的非常有效，但并不为我们提供任何机会从浏览我们网站或在线应用程序的人那里获得响应。
- en: The addition of buttons in the previous example helps remove this constraint,
    and allows us to accept a varied response from the end user – we can take this
    a step further by adding icons to provide visual support to the buttons.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中添加按钮有助于消除这一限制，并允许我们从最终用户处接受各种响应-我们可以通过添加图标进一步提供按钮的视觉支持。
- en: 'In your text editor, alter the `<script>` block in `dialog6.html` as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的文本编辑器中，修改`dialog6.html`中的`<script>`块如下：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save this as `dialog7.html`. Here, we've used the buttons option to specify
    the text, icons, and the action that should be taken when the button is clicked.
    You will notice that we've also used a different way to specify each option, compared
    to the previous example. Both work equally well; we need to use this method while
    adding icons, otherwise you may find you have buttons with no text appearing!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`dialog7.html`。在这里，我们使用了按钮选项来指定文本、图标以及当单击按钮时应该执行的操作。您会注意到，与前一个示例相比，我们还使用了一种不同的方式来指定每个选项。两种方法都同样有效；我们需要在添加图标时使用这种方法，否则您可能会发现出现没有文本的按钮！
- en: 'If we preview the results in a browser, we can now see the buttons with added
    icons appearing, at the foot of our dialog:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果，我们现在可以看到在对话框底部出现的带有额外图标的按钮：
- en: '![Adding icons to the dialog buttons](img/2209OS_05_11.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![在对话框按钮中添加图标](img/2209OS_05_11.jpg)'
- en: The icons will be styled according to the theme in use. In our example we've
    specified both primary and secondary icons; the former sits to the left of the
    button text, whilst the latter sits to the right. It is likely though you would
    only need to specify one or the other in your application or website, according
    to your requirements.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图标的样式将根据使用的主题进行设置。在我们的示例中，我们指定了主要和次要图标；前者位于按钮文本的左侧，而后者位于右侧。然而，在您的应用程序或网站中，您可能只需要根据您的需求指定一个图标。
- en: Enabling dialog animations
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用对话框动画
- en: 'The dialog provides us with a built-in effect that can be applied to the opening
    or closing (or both) phases of the widget. There is only a single effect that
    we can use, which is an implementation of the scale effect (we''ll look at this
    in more detail in [Chapter 13](ch13.html "Chapter 13. Selecting and Sorting with
    jQuery UI"), *Selecting and Sorting with jQuery UI*). Change the final `<script>`
    element in `dialog7.html` to the following one:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框为我们提供了一个内置效果，可以应用于小部件的打开或关闭（或两者）。我们只能使用一个效果，即缩放效果的实现（我们将在[第13章](ch13.html
    "第13章。使用jQuery UI进行选择和排序")中更详细地介绍这一点，“使用jQuery UI进行选择和排序”）。将`dialog7.html`中的最终`<script>`元素更改为以下内容：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save this as `dialog8.html`. We set both the `hide` and `show` options to the
    Boolean value `true`. This enables the built-in effect, which gradually reduces
    the dialog''s size and opacity until it gracefully disappears. The following screenshot
    shows an effect in motion:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`dialog8.html`。我们将`hide`和`show`选项都设置为布尔值`true`。这将启用内置效果，逐渐减小对话框的大小和不透明度，直到它优雅地消失。以下截图显示了效果正在进行中：
- en: '![Enabling dialog animations](img/2209OS_05_05.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![启用对话框动画](img/2209OS_05_05.jpg)'
- en: 'We can enable or disable either the show or hide animations individually using
    Booleans, as we have in this example. We could also specify the type of animation
    to be used by supplying a string specifying the name of the effect to use:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用布尔值分别启用或禁用显示或隐藏动画，就像我们在此示例中所做的那样。我们还可以通过提供指定要使用的效果名称的字符串来指定要使用的动画类型：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can even take this a step further, using some of the effects such as bounce
    or explode, although these should only be added if appropriate! We will cover
    the use of effects in jQuery UI later, in [Chapter 14](ch14.html "Chapter 14. UI
    Effects"), *UI Effects*. You can also see more details at [http://api.jqueryui.com/category/effects/](http://api.jqueryui.com/category/effects/).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以更进一步，使用一些效果，比如弹跳或爆炸，尽管这些效果只有在适当时才应添加！我们稍后将在jQuery UI中介绍效果，[第14章](ch14.html
    "第14章。UI效果")中可以找到更多详细信息，“UI效果”。您还可以在[http://api.jqueryui.com/category/effects/](http://api.jqueryui.com/category/effects/)上查看更多细节。
- en: Configuring the dialog's dimensions
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置对话框的尺寸
- en: 'There are several options related to the dialog''s size, and the minimum and
    maximum size that it can be resized to. We can add all of these options to the
    next example as they''re all related, to save looking at them individually. Change
    the configuration object in `dialog8.html` to the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与对话框大小以及其可以调整到的最小和最大尺寸相关的选项有几个。我们可以将所有这些选项添加到下一个示例中，因为它们都是相关的，以节省逐个查看它们的时间。将`dialog8.html`中的配置对象更改为以下内容：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save this file as `dialog9.html`. The effect these options have on the widget
    is simple; the `width` and `height` options define how big the dialog is when
    it is first opened, while the `min-` and `max-` options define how small or large
    the dialog can be resized to respectively.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`dialog9.html`。这些选项对小部件的影响很简单；`width`和`height`选项定义了对话框在首次打开时的大小，而`min-`和`max-`选项分别定义了对话框可以调整到的最小或最大尺寸。
- en: Tip
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As an additional note, assistive technologies and keyboard users may find the
    content difficult to navigate if the dialog is made too small. There is a usability
    tenet that insists dialog boxes should always be non-resizable, whereas the windows
    should always be resizable.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另外一点需要注意的是，如果对话框过小，辅助技术和键盘用户可能会发现内容难以导航。有一个可用性原则坚持认为对话框应该始终是不可调整大小的，而窗口应该始终是可调整大小的。
- en: While I don't think this is a black and white, set in granite rule, it may be
    wise to keep small, informational, text-based dialogs at a fixed size, while allowing
    dialogs richer in content, composed of both images and text to be resizable. We
    will cover how you can add resize handles to any suitable element (such as dialogs),
    later in [Chapter 12](ch12.html "Chapter 12. The Resizable Component"), *The Resizable
    Component*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我认为这不是一条黑白分明、铁板一块的规则，但是将小型、信息性、基于文本的对话框保持固定大小可能是明智的，而允许包含图像和文本的内容丰富的对话框可以调整大小。我们将在[第12章](ch12.html
    "Chapter 12. The Resizable Component")中介绍如何将调整大小手柄添加到任何合适的元素（如对话框），*调整大小组件*中。
- en: Setting the z-index order of dialogs
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置对话框的z-index顺序
- en: The dialog is made so that it appears above any of the existing page content.
    We can alter its z-index setting using CSS, or by ensuring it is correctly appended
    to its parent element using the `appendTo` option, in case we need to raise it
    slightly to cover our existing content. But what if we have two dialogs on the
    page? Do we need to separately define `zIndex` for each dialog? How is focus taken
    into consideration?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框被设置为出现在任何现有页面内容的上方。我们可以使用CSS更改其z-index设置，或者通过确保正确将其附加到其父元素来提高它，以覆盖我们的现有内容。但是如果页面上有两个对话框怎么办？我们是否需要分别为每个对话框定义`zIndex`？焦点如何考虑？
- en: 'Let''s see if we can answer these questions by looking at another example;
    change the `<body>` tag of `dialog7.html` so that it has two dialog boxes on it:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否可以通过查看另一个示例来回答这些问题；将`dialog7.html`的`<body>`标记更改为具有两个对话框：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now change the final `<script>` element so that it appears as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将最终的`<script>`元素更改为如下所示：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save this file as `dialog10.html`. We've added another dialog to the page, which
    is basically just a clone of the original with different `id` and `title` attributes.
    In the `<script>`, we simply call the `widget` method on both of our underlying
    dialog containers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`dialog10.html`。我们在页面上添加了另一个对话框，它基本上只是原始对话框的一个克隆，具有不同的`id`和`title`属性。在`<script>`中，我们只需在两个底层对话框容器上调用`widget`方法。
- en: As the `widget` method is called last on the second dialog and therefore it
    receives the focus, the second dialog will automatically have a higher z-index
    value. This means we don't need to worry about configuring it separately. The
    order in which the dialogs appear in the underlying markup doesn't matter; it's
    the order of the widget methods that dictates each dialog's z-index value.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`widget`方法在第二个对话框上被最后调用，因此它接收焦点，第二个对话框将自动具有较高的z-index值。这意味着我们不需要担心单独配置它。对话框在底层标记中出现的顺序无关紧要；决定每个对话框z-index值的是widget方法的顺序。
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Overriding the z-index value**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**覆盖z-index值**'
- en: If you need to override the z-index value, you can (and should) do this using
    CSS – you will need to use the `!important` attribute to override the existing
    value.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要覆盖z-index值，可以（并且应该）使用CSS来执行此操作-您需要使用`!important`属性来覆盖现有值。
- en: Because neither dialog has its position explicitly set, only the second dialog
    will be visible when our example page loads. However, both are draggable and we
    can align them so that they overlap slightly by dragging the second dialog away.
    If we click on the first dialog box, it will receive focus and so it will be shown
    above the second box.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于两个对话框都没有显式设置其位置，所以当我们的示例页面加载时，只有第二个对话框会可见。然而，两者都是可拖动的，我们可以通过将第二个对话框拖离来将它们对齐，使它们略微重叠。如果我们点击第一个对话框框，它将接收焦点，因此它将显示在第二个框上方。
- en: Controlling the focus
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制焦点
- en: 'While opening a dialog, the element that receives focus is determined by whichever
    item matches the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开对话框时，接收焦点的元素由匹配以下条件的项目确定：
- en: The first element within the dialog with the autofocus attribute
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话框中具有autofocus属性的第一个元素
- en: The first `:tabbable` element within the dialog's content
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话框内容中的第一个`:tabbable`元素
- en: The first `:tabbable` element within the dialog's buttonpane
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话框按钮面板中的第一个`:tabbable`元素
- en: The dialog's close button
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话框的关闭按钮
- en: The dialog itself
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话框本身
- en: 'This can best be illustrated by the following code excerpt, where we''ve added
    the `autofocus` attribute to the `yes` radio button:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码摘录最能说明这一点，我们已经将`autofocus`属性添加到“是”单选按钮中：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `yes` radio button will receive the focus first; we can then tab away from
    that element to others within the widget. As soon as the dialog is closed, the
    focus will automatically return to the element that had it prior to the dialog
    being opened.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: “是”单选按钮首先接收焦点；然后我们可以通过标签切换到小部件内的其他元素。一旦对话框关闭，焦点将自动返回到对话框打开之前具有焦点的元素。
- en: Handling the dialog's event callbacks
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理对话框的事件回调
- en: 'The dialog widget gives us a wide range of callback options that we can use
    to execute arbitrary code at different points, in any dialog interaction. The
    following table lists the options available to us:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框小部件为我们提供了广泛的回调选项，我们可以使用这些选项在任何对话框交互中的不同点执行任意代码。以下表格列出了我们可以使用的选项：
- en: '| Event | Description |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `beforeClose` | This is fired when the dialog is about to be closed |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `beforeClose` | 当对话框即将关闭时触发此事件 |'
- en: '| `close` | This is fired when the dialog is closed |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `close` | 当对话框关闭时触发此事件 |'
- en: '| `create` | This is fired when the dialog is initialized |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `create` | 当对话框初始化时触发此事件 |'
- en: '| `drag` | This is fired when the dialog is being dragged |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `drag` | 当对话框被拖动时触发此事件 |'
- en: '| `dragStart` | This is fired when the dialog starts being dragged |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `dragStart` | 当对话框开始拖动时触发此事件 |'
- en: '| `dragStop` | This is fired when the dialog stops being dragged |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `dragStop` | 当对话框停止拖动时触发此事件 |'
- en: '| `focus` | This is fired when the dialog receives focus |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `focus` | 当对话框获得焦点时触发此事件 |'
- en: '| `open` | This is fired when the dialog is opened |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `open` | 当对话框打开时触发此事件 |'
- en: '| `resize` | This is fired when the dialog is being resized |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `resize` | 当对话框被调整大小时触发此事件 |'
- en: '| `resizeStart` | This is fired when the dialog starts to be resized |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `resizeStart` | 当对话框开始调整大小时触发此事件 |'
- en: '| `resizeStop` | This is fired when the dialog stops being resized |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `resizeStop` | 当对话框停止调整大小时触发此事件 |'
- en: Some of these callbacks are only available in certain situations, such as the
    `drag` and `resize` callbacks, which will only be available when the draggable
    and resizable jQuery UI components are included. We won't be looking at these
    callback options in this chapter, as they'll be covered in detail in [Chapters
    11](ch11.html "Chapter 11. Drag and Drop"), *Drag and Drop* and [Chapter 12](ch12.html
    "Chapter 12. The Resizable Component"), *The Resizable Component*, respectively.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这些回调中的一些仅在特定情况下可用，例如当包含可拖动和可调整大小的 jQuery UI 组件时，才会有`drag`和`resize`回调。在本章中，我们不会讨论这些回调选项，因为它们将分别在
    [第 11 章](ch11.html "第 11 章。拖放")、“拖放” 和 [第 12 章](ch12.html "第 12 章。可调整大小组件")、“可调整大小组件”
    中详细介绍。
- en: Other callbacks, such as the `beforeClose`, `create`, `open`, `close`, and `focus`
    will be available in any implementation. Let's look at an example in which we
    make use of some of these callback options.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 其他回调，例如`beforeClose`、`create`、`open`、`close`和`focus`将在任何实现中可用。让我们看一个使用这些回调选项的例子。
- en: 'Remove the second dialog from the page in `dialog10.html` and add the following
    new markup directly after the first dialog:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `dialog10.html` 页面中删除第二个对话框，然后在第一个对话框后面直接添加以下新的标记：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now change the final `<script>` element so that it appears as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将最终的 `<script>` 元素更改为以下内容：
- en: '[PRE16]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save this as `dialog11.html`. The page contains a new status box, which will
    be used to report whether the dialog is open or closed. We've given the elements
    that make up the status box of several CSS framework classes, to make them fit
    with the theme in use.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `dialog11.html`。该页面包含一个新的状态框，用于报告对话框是打开还是关闭。我们已经给状态框的各个元素添加了几个 CSS 框架类，以使它们与正在使用的主题相适应。
- en: Our configuration object uses the `open`, `close`, and `beforeClose` options
    to specify simple callback functions. The `open` and `close` callbacks simply
    set the text of the status box accordingly. The `beforeClose` callback that is
    fired after the **Close** button on the dialog has been clicked (but before it
    is actually closed) is used to determine whether or not to close the dialog.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配置对象使用了 `open`、`close` 和 `beforeClose` 选项来指定简单的回调函数。`open` 和 `close` 回调简单地相应地设置状态框的文本。在
    **Close** 按钮在对话框上被点击之后（但在实际关闭之前）触发的 `beforeClose` 回调用于确定是否关闭对话框。
- en: We use a simple `if` statement to check the width of the dialog; if the dialog
    is greater than 300 pixels wide, we return `false` from the callback and the dialog
    remains open. This kind of behavior is of course usually a big no in terms of
    usability, but it does serve to highlight how we can use the `beforeClose` callback
    to prevent the dialog being closed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用简单的`if`语句来检查对话框的宽度；如果对话框宽度大于300像素，则从回调中返回`false`，对话框保持打开状态。当然，这种行为通常在可用性方面通常是不可接受的，但它确实突出了我们如何使用`beforeClose`回调来阻止对话框被关闭。
- en: 'When the page loads and the dialog is shown, the `open` callback will be executed
    and the status box should display a message. When the dialog is closed, as shown
    in the following screenshot, a different message is displayed:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时，对话框显示，并执行`open`回调，状态框应显示一条消息。当对话框关闭时，如下图所示，会显示不同的消息：
- en: '![Handling the dialog''s event callbacks](img/2209OS_05_06.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![处理对话框的事件回调](img/2209OS_05_06.jpg)'
- en: One thing I should make clear is that the dialog widget only passes a single
    object (the original event object) to the callback functions. It does pass a second
    `ui` object into the handler function, although in this release of the library,
    this object contains no properties.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该澄清的一件事是，对话框小部件只将一个对象（原始事件对象）传递给回调函数。虽然它确实将第二个`ui`对象传递到处理程序函数中，但在该库的此版本中，此对象不包含任何属性。
- en: Controlling a dialog programmatically
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以编程方式控制对话框
- en: 'The dialog is intuitive and easy-to-use, and like the other components in the
    library, it comes with a range of methods that are used to programmatically control
    the widget after it has been initialized. The full list of the methods we can
    call on a dialog is as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框直观且易于使用，与库中的其他组件一样，它提供了一系列方法，用于在初始化后以编程方式控制小部件。我们可以在对话框上调用的所有方法的完整列表如下：
- en: '| Method | Description |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `close` | This is used to close or hide the dialog. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `close` | 这用于关闭或隐藏对话框。 |'
- en: '| `destroy` | This is used to permanently disable the dialog. The `destroy`
    method for a dialog works in a slightly different way than it does for the other
    widgets we''ve seen so far. Instead of just returning the underlying HTML to its
    original state, the dialog''s `destroy` method also hides it. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `destroy` | 这用于永久禁用对话框。至于对话框的`destroy`方法，它与我们之前见过的其他小部件的工作方式略有不同。它不仅仅是将底层
    HTML 返回到其原始状态，还会隐藏对话框。 |'
- en: '| `isOpen` | This is used to determine whether a dialog is open or not. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `isOpen` | 这用于确定对话框是否打开。 |'
- en: '| `moveToTop` | This is used to move the specified dialog to the top of the
    stack. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `moveToTop` | 这用于将指定的对话框移动到堆栈顶部。 |'
- en: '| `open` | This is used to open the dialog. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `open` | 这用于打开对话框。 |'
- en: '| `option` | This is used to get or set any configurable option after the dialog
    has been initialized. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `option` | 这用于在对话框初始化后获取或设置任何可配置选项。 |'
- en: '| `widget` | This is used to return the outer element that the `dialog()` widget
    method is called on. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `widget` | 这用于返回调用了`dialog()`小部件方法的外部元素。 |'
- en: Toggling the dialog
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换对话框
- en: 'We first take a look at opening the widget, which can be achieved with the
    simple use of the `open` method. Let''s revisit `dialog3.html` in which the `autoOpen`
    option was set to `false`, so that the dialog didn''t open when the page was loaded.
    Add the following `<button>` to the page:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们来看看如何以编程方式控制小部件的打开，可以简单地使用`open`方法实现。让我们重新访问`dialog3.html`，其中`autoOpen`选项设置为`false`，因此当页面加载时对话框不会打开。在页面上添加以下`<button>`：
- en: '[PRE17]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then add the following click handler to the `<script>` block at the top of
    the code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将以下点击处理程序添加到代码顶部的`<script>`块中：
- en: '[PRE18]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save this file as `dialog12.html`. To the page, we've added a simple `<button>`
    that can be used to either open or close the dialog depending on its current state.
    In the `<script>` element, we've added a click handler for the `<button>` element
    that checks the return value of the `isOpen` method; the use of the exclamation
    mark means we are looking to see if the dialog box isn't open. If the statement
    returns `true`, the dialog is not open so we call its `open` method, otherwise
    we call the `close` method.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`dialog12.html`。在页面上，我们添加了一个简单的`<button>`，可以用来打开或关闭对话框，具体取决于其当前状态。在`<script>`元素中，我们为`<button>`元素添加了一个点击处理程序，检查`isOpen`方法的返回值；感叹号的使用意味着我们要查看对话框是否没有打开。如果语句返回`true`，则对话框未打开，因此我们调用其`open`方法，否则我们调用`close`方法。
- en: The `open` and `close` methods both trigger any applicable events; for example,
    the `#toggle` click handler method first fires the `beforeClose` and then the
    `close` events. Calling the `close` method is analogous to clicking the close
    button on the dialog.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`open` 和 `close` 方法都会触发任何适用的事件；例如，`#toggle` 单击处理程序方法首先触发 `beforeClose` 然后是
    `close` 事件。调用 `close` 方法类似于点击对话框上的关闭按钮。'
- en: Getting data from the dialog
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从对话框获取数据
- en: Because the widget is a part of the underlying page, passing data to and from
    it is simple. The dialog can be treated as any other standard element on the page.
    Let's look at a basic example.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 因为小部件是底层页面的一部分，所以传递数据到它和从它获取数据都很简单。对话框可以像页面上的任何其他标准元素一样对待。让我们看一个基本的例子。
- en: 'We looked at an example earlier in the chapter, which added some `<button>`
    elements to the dialog. The callback functions in that example didn''t do anything,
    but the following example gives us the opportunity to use them. Replace the existing
    dialog markup in `dialog8.html` with the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早些时候，我们看过一个例子，其中向对话框添加了一些 `<button>` 元素。那个例子中的回调函数没有做任何事情，但是下面的例子给了我们使用它们的机会。将
    `dialog8.html` 中的现有对话框标记替换为以下内容：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now change the final `<script>` element as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将最终的 `<script>` 元素更改如下：
- en: '[PRE20]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Save this as `dialog13.html`. Our dialog widget now contains a set of radio
    buttons, some `<label>` elements, and some text. In this example, we’re going
    to get the result of the selected radio button, and then do something with it,
    when the dialog closes.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `dialog13.html`。我们的对话框小部件现在包含一组单选按钮，一些 `<label>` 元素和一些文本。在这个例子中，当对话框关闭时，我们将获取所选单选按钮的结果，然后执行一些操作。
- en: We start the `<script>` element by filling out the `execute` function that will
    be attached as the value of the `Ok` property in the buttons object, later in
    the script. It will therefore be executed each time the **Ok** button is clicked.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过填写 `execute` 函数来开始 `<script>` 元素，该函数将作为按钮对象中 `Ok` 属性的值附加，稍后在脚本中。因此，每次点击
    **Ok** 按钮时都会执行它。
- en: In this function, we use the `:checked` filter to determine which of the radio
    buttons is selected. We set the value of the `answer` variable to the radio button's
    value, and then create a short message along with appending it to the `<body>`
    element of the page. The callback mapped to the **Cancel** button is simple; all
    we do is close the dialog using the `close` method.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们使用 `:checked` 过滤器来确定哪个单选按钮被选中。我们将 `answer` 变量的值设置为单选按钮的值，然后创建一个简短的消息，并将其附加到页面的
    `<body>` 元素中。映射到 **Cancel** 按钮的回调函数很简单；我们所做的就是使用 `close` 方法关闭对话框。
- en: 'The point of this example was to see that getting data from the dialog is as
    simple as getting data from any other element on the page. If you preview it in
    your browser, you will first see the dialog on the left; clicking on a button
    gives the appropriate response, as shown in the following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的重点在于看到从对话框获取数据就像从页面上的任何其他元素获取数据一样简单。如果你在浏览器中预览它，你会首先看到左边的对话框；点击按钮会给出相应的响应，如下面的截图所示：
- en: '![Getting data from the dialog](img/2209OS_05_12.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![从对话框获取数据](img/2209OS_05_12.jpg)'
- en: Exploring dialog interoperability
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索对话框的互操作性
- en: 'In the previous chapters, we''ve combined multiple widgets so that we can see
    how well they work together, and this chapter will be no exception. We can easily
    place other UI widgets into the dialog such as the accordion widget that we looked
    at in the previous chapter. In a new file in your text editor, create the following
    page:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的章节中，我们已经组合了多个小部件，以便我们可以看到它们如何很好地一起工作，本章也不例外。我们可以轻松地将其他 UI 小部件放入对话框中，例如我们在上一章中看到的折叠小部件。在文本编辑器中的新文件中，创建以下页面：
- en: '[PRE21]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Save this file as `dialog14.html`. The underlying markup for the accordion widget
    is placed into the dialog's container element, and we just call each component's
    widget method in the `<script>` element.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为 `dialog14.html`。折叠小部件的基本标记被放置到对话框的容器元素中，我们只需在 `<script>` 元素中调用每个组件的小部件方法。
- en: Tip
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In this example, we use quite a few separate `<script>` resources. It is worth
    remembering that for production, we should use the combined and minified script
    file, which contains all of the components we selected in the download builder.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了相当多独立的 `<script>` 资源。值得记住的是，对于生产，我们应该使用组合和缩小的脚本文件，其中包含我们在下载构建器中选择的所有组件。
- en: 'The combined widget should appear like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 组合小部件应该像这样显示：
- en: '![Exploring dialog interoperability](img/2209OS_05_07.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![探索对话框的互操作性](img/2209OS_05_07.jpg)'
- en: Creating a dynamic image-based dialog
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个动态基于图像的对话框
- en: The class behind the dialog widget is compact and caters to a small range of
    specialized behavior, much of which we have already looked at. We can still have
    some fun with a dynamic dialog box, which loads different content depending on
    which element triggers it.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框部件背后的类是紧凑的，适用于一小部分专业行为，其中大部分我们已经了解过了。我们仍然可以通过一个动态对话框来玩一些有趣的东西，这个对话框根据触发它的元素加载不同的内容。
- en: 'In a new page in your text editor, add the following code:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中的新页面中，添加以下代码：
- en: '[PRE22]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Save this file as `dialog15.html`. The following screenshot shows the result
    when previewed in a browser:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`dialog15.html`。以下截图显示了在浏览器中预览时的结果：
- en: '![Creating a dynamic image-based dialog](img/2209OS_05_08.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![创建动态基于图像的对话框](img/2209OS_05_08.jpg)'
- en: The page is relatively straightforward—we've got an outer container, which encloses
    everything and an element, which we've given the class name `ui-widget-header`.
    We've used the latter in order to pick up some of the default styling from the
    theme in use.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 页面相对简单——我们有一个外部容器，它包围着所有内容，以及一个我们给予了类名`ui-widget-header`的元素。我们使用后者是为了从正在使用的主题中获取一些默认样式。
- en: Following this, we have some explanatory text followed by a series of containers.
    Several classnames are given to these containers, some of which are so that we
    can style them, and others (such as `ui-helper-clearfix`), in order to pick up
    the framework or theme styles.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们有一些解释性文本，然后是一系列容器。这些容器被赋予了几个类名，其中一些是为了我们能够对其进行样式设置，而另一些（如`ui-helper-clearfix`）则是为了获取框架或主题样式。
- en: Within each of these containers is an image, wrapped in an anchor, a subheading,
    and some descriptive text. After the outer container, comes the empty `<div>`
    element, which is used to create the dialog. In this example, we don't use the
    resizable feature. Each of the thumbnail images is wrapped in an anchor, in order
    for the page to function even with JavaScript disabled. The dialog widget won't
    display in this situation, but the visitor will still be able to see a full-sized
    version of each image. This form of progressive enhancement is essential in this
    kind of application, where we can always view the content. Adding in the call
    to the dialog widget is enhancing the overall view to the visitor, whilst ensuring
    content will always display something, even with JavaScript disabled!
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个容器中都有一个图像，包裹在一个锚点内，一个副标题和一些描述性文本。在外部容器之后，是一个空的`<div>`元素，用于创建对话框。在这个例子中，我们不使用可调整大小的功能。每个缩略图都包裹在一个锚点内，以便即使禁用了
    JavaScript，页面也能正常工作。在这种情况下，对话框部件不会显示，但访问者仍然可以看到每个图像的全尺寸版本。这种渐进增强形式在这种类型的应用程序中至关重要，我们始终可以查看内容。添加对话框部件的调用是为了增强对访问者的整体视图，同时确保即使禁用了
    JavaScript，内容仍将显示出来！
- en: 'Now add the following `<script>` block directly before the closing `</head>`
    tag:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在闭合的`</head>`标记之前直接添加以下`<script>`块：
- en: '[PRE23]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first thing we do is define three variables; the first variable is used
    to add the path to the full-sized image of whichever thumbnail was clicked, the
    second is to store the image title to use as the text for the widget's title,
    and the third is the configuration object for the dialog. We've seen the entire
    configuration options in action already, so I won't go over most of them in much
    detail.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义了三个变量；第一个变量用于添加被点击的缩略图的全尺寸图像的路径，第二个用于存储用作部件标题文本的图像标题，第三个是对话框的配置对象。我们已经看到了所有的配置选项都已经在实际操作中使用过了，所以我就不会详细介绍大部分选项了。
- en: The `open` callback, called directly before the dialog is opened, is where we
    add the full-sized image to the dialog. We first empty the dialog, then create
    a new `<img>` element, and set its `src` to the value of the `filename` variable.
    The new `<img>` is then appended to the inner content area of the dialog.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`open`回调，在对话框打开之前直接调用，是我们向对话框添加全尺寸图像的地方。我们首先清空对话框，然后创建一个新的`<img>`元素，并将其`src`设置为`filename`变量的值。然后将新的`<img>`附加到对话框的内部内容区域。'
- en: We then use the `option` method to set the title option to the value of the
    `titleText` variable. Once the `open` callback has been defined, we call the dialog's
    widget method as normal.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`option`方法将标题选项设置为`titleText`变量的值。一旦定义了`open`回调，我们就像平常一样调用对话框的部件方法。
- en: We can use the wrapper `<a>` elements as the triggers to open the dialog. Within
    our click handler, we first call `e.preventDefault()` to stop the default action
    of the click, before setting the contents of our `filename` and `titleText` variables
    using the `href` and `title` attributes of the link that was clicked. We then
    call the dialog's `open` method to display the dialog, which in turn triggers
    the callback function specified in the `open` option.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用包装器`<a>`元素作为打开对话框的触发器。在我们的点击处理程序中，我们首先调用`e.preventDefault()`来阻止点击的默认操作，然后使用被点击的链接的`href`和`title`属性设置我们的`filename`和`titleText`变量的内容。然后，我们调用对话框的`open`方法来显示对话框，这将触发`open`选项中指定的回调函数。
- en: Tip
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If we omit `e.preventDefault()`, this will override the dialog and the browser
    will render each image as if it were a link that had been clicked.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们省略`e.preventDefault()`，这将覆盖对话框，浏览器将呈现每个图像，就像点击了链接一样。
- en: 'We''ll also need a new stylesheet for this example. In a new page in your text
    editor, add the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，我们还需要一个新的样式表。在文本编辑器的新页面中，添加以下代码：
- en: '[PRE24]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Many of these styles have been used in the previous examples, but adding some
    new rules for the other page elements lets us see the dialog in a real-world context.
    Save this as `dialogTheme.css` in the `css` folder. We also use some images in
    this example, which can be found in the `img` folder of the accompanying code
    download for this book.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中已经使用了许多这些样式，但是为其他页面元素添加一些新规则使我们可以在实际环境中看到对话框。将此保存为`dialogTheme.css`，并放入`css`文件夹中。我们在此示例中还使用了一些图像，这些图像可以在本书的附带代码下载的`img`文件夹中找到。
- en: 'This should now give us the page that we saw in the previous screenshot and
    when a thumbnail is clicked, the full size version of the same image will be displayed:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这样现在应该给我们提供了前面截图中看到的页面，当点击缩略图时，将显示相同图像的完整尺寸版本：
- en: '![Creating a dynamic image-based dialog](img/2209OS_05_09.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![创建基于图像的动态对话框](img/2209OS_05_09.jpg)'
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: The dialog widget is specialized and caters to the display of a message or question
    in a floating panel that sits above the page content. Advanced functionality such
    as dragging and resizing is directly built-in and require just the inclusion of
    an additional script file for each feature. Other features such as the excellent
    modality and overlay are easy to configure.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框小部件是专门设计的，用于在悬浮面板中显示消息或问题，该面板位于页面内容之上。高级功能，如拖动和调整大小，已直接内置，并且仅需要为每个功能包含额外的脚本文件。其他功能，如出色的模态和覆盖层，易于配置。
- en: We started out by looking at the default implementation, which is as equally
    simple to configure as the other widgets we have looked at so far. We then examined
    the range of configurable options exposed by the dialog's API. We can make use
    of them to enable or disable built-in behavior such as modality, or set the dimensions
    of the widget. It also gives us a wide range of callbacks that allow us to hook
    into custom events fired by the widget during an interaction.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先看了默认实现，它与迄今为止我们看过的其他小部件一样简单。然后，我们检查了对话框API公开的一系列可配置选项。我们可以利用它们来启用或禁用内置行为，例如模态，或设置小部件的尺寸。它还为我们提供了广泛的回调，允许我们在交互期间通过小部件触发的自定义事件中挂钩。
- en: We then took a brief look at the built-in opening and closing effects that can
    be used with the dialog, before moving on to see the basic methods we can invoke,
    in order to make the dialog do things, such as open or close.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们简要介绍了与对话框一起使用的内置打开和关闭效果，然后继续查看我们可以调用的基本方法，以执行对话框执行操作的任务，例如打开或关闭。
- en: In the next chapter, we'll move on to look at the slider and progress bar widgets,
    which allow us to create interactive form widgets used to select from a predefined
    range of values and display the results on screen.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续查看滑块和进度条小部件，它们允许我们创建交互式表单小部件，用于从预定义范围中选择值并在屏幕上显示结果。
