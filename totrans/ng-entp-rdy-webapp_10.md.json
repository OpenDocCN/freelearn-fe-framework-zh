["```js\n    projects/ch10 \n    ```", "```js\n    npx ng serve ch10 \n    ```", "```js\n    npx ng test ch10 --watch=false \n    ```", "```js\n    npx ng e2e ch10 \n    ```", "```js\n    npx ng build ch10 --prod \n    ```", "```js\nlemon-mart-server\n├───bin\n├───web-app (default Angular setup)\n├───server\n│   ├───src\n│   │   ├───models\n│   │   ├───public\n│   │   ├───services\n│   │   ├───v1\n│   │   │   └───routes\n│   │   └───v2\n│   │       └───routes\n│   └───tests\n|   package.json\n|   README.md \n```", "```js\n    **package.json**\n      \"config\": {\n      ...\n        \"webAppGitUrl\": \"https://github.com/duluca/lemon-mart.git\"\n      },\n      \"scripts\": {\n        \"webapp:clean\": \"cross-conf-env rimraf web-app && git rm -r --cached web-app\",\n        \"webapp:init\": \"cross-conf-env git submodule add $npm_package_config_webAppGitUrl web-app\",\n        \"postwebapp:init\": \"git submodule status web-app\",\n        \"modules:init\": \"git submodule update --init --recursive\",\n        \"modules:update\": \"git submodule update --recursive --remote\"\n      }, \n    ```", "```js\n    $ npm run webapp:init \n    ```", "```js\n    $ mkdir server \n    ```", "```js\n    $ cd server \n    ```", "```js\n    $ npm init -y \n    ```", "```js\n    $ npm i -g mrm-task-typescript-vscode\n    $ npx mrm typescript-vscode \n    ```", "```js\nserver\n│   .gitignore\n│   .nycrc\n│   .prettierignore\n│   .prettierrc\n│   example.env\n│   jasmine.json\n│   package-lock.json\n│   package.json\n│   pull_request_template.md\n│   tsconfig.json\n│   tsconfig.src.json\n│   tslint.json\n│\n├───.vscode\n│       extensions.json\n│       launch.json\n│       settings.json\n│\n├───src\n│       index.ts\n│\n└───tests\n│       index.spec.ts\n│       tsconfig.spec.json \n```", "```js\n$ npm test \n```", "```js\nserver\n│\n├───dist\n│       index.js\n│       index.js.map \n```", "```js\n**.circleci/config.yml**\n...\nworkflows:\n  version: 2\n  build-and-test-compose:\n    jobs:\n      - build_server\n      - build_webapp \n```", "```js\n**.circleci/config.yml**\nversion: 2.1\norbs:\n  coveralls: coveralls/coveralls@1.0.4\njobs:\n  build_server:\n    docker:\n      - image: circleci/node:lts\n    working_directory: ~/repo/server\n    steps:\n      - checkout:\n          path: ~/repo\n      - restore_cache:\n          keys:\n            - web-modules-{{ checksum \"package-lock.json\" }}\n      # check npm dependencies for security risks - 'npm audit' to fix\n      - run: npx audit-ci --high --report-type full\n      - run: npm ci\n      - save_cache:\n          key: web-modules-{{ checksum \"package-lock.json\" }}\n          paths:\n            - ~/.npm\n      - run: npm run style\n      - run: npm run lint\n      # run tests and store test results\n      - run: npm run pretest\n      - run: npm run test:ci\n      - store_test_results:\n          path: ./test_results\n      # run code coverage and store coverage report\n      - run: npm run test:nyc\n      - store_artifacts:\n          path: ./coverage\n      - coveralls/upload\n      - run:\n          name: Move compiled app to workspace\n          command: |\n            set -exu\n            mkdir -p /tmp/workspace/server\n            mv dist /tmp/workspace/server\n      - persist_to_workspace:\n          root: /tmp/workspace\n          paths:\n            - server \n```", "```js\n**web-app/nginx.Dockerfile**\nFROM duluca/minimal-nginx-web-server:1-alpine\nCOPY dist/lemon-mart /var/www\nCMD 'nginx' \n```", "```js\n    **server/Dockerfile**\n    FROM node:lts-alpine\n    RUN apk add --update --no-progress make python bash\n    ENV NPM_CONFIG_LOGLEVEL error\n    ADD https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64 /usr/local/bin/dumb-init\n    RUN chmod +x /usr/local/bin/dumb-init\n    RUN mkdir -p /usr/src/app\n    RUN chown node: /usr/src/app\n    USER node\n    WORKDIR /usr/src/app\n    COPY package*.json ./\n    RUN NODE_ENV=production\n    RUN npm install --only=production\n    ENV HOST \"0.0.0.0\"\n    ENV PORT 3000\n    EXPOSE 3000\n    ADD dist dist\n    ENTRYPOINT [\"dumb-init\", \"--\"]\n    CMD [\"node\", \"dist/src/index\"] \n    ```", "```js\n    $ npm i -g mrm-task-npm-docker \n    ```", "```js\n    $ npx mrm npm-docker \n    ```", "```js\n    **server/package.json**\n      \"config\": {\n        \"imageRepo\": \"duluca/lemon-mart-server\",\n        \"imageName\": \"lemon-mart-server\",\n        \"imagePort\": \"3000\",\n        \"internalContainerPort\": \"3000\"\n      } \n    ```", "```js\n    **example.env**\n    # Root database admin credentials\n    MONGO_INITDB_ROOT_USERNAME=admin\n    MONGO_INITDB_ROOT_PASSWORD=anAdminPasswordThatIsNotThis\n    # Your application's database connection information. \n    # Corresponds to MONGO_URI on server-example.env\n    MONGODB_APPLICATION_DATABASE=lemon-mart\n    MONGODB_APPLICATION_USER=john.smith\n    MONGODB_APPLICATION_PASS=g00fy\n    # Needed for AWS deployments\n    AWS_ACCESS_KEY_ID=xxxxxx\n    AWS_SECRET_ACCESS_KEY=xxxxxx\n    # See server-example.env for server environment variables \n    ```", "```js\n    $ npm i -D init-dev-env \n    ```", "```js\n    $ npx init-dev-env generate-dot-env example.env -f && \n    init-dev-env generate-dot-env server-example.env --source=. --target=server -f \n    ```", "```js\n    **server/.env**\n    # MongoDB connection string as defined in example.env\n    MONGO_URI=mongodb://john.smith:g00fy@localhost:27017/lemon-mart\n    # Secret used to generate a secure JWT\n    JWT_SECRET=aSecureStringThatIsNotThis\n    # DEMO User Login Credentials\n    DEMO_EMAIL=duluca@gmail.com\n    DEMO_PASSWORD=l0l1pop!!\n    DEMO_USERID=5da01751da27cc462d265913 \n    ```", "```js\n**docker-compose.yml**\nversion: '3.7'\nservices:\n  web-app:\n    container_name: web\n    build:\n      context: ./web-app\n      dockerfile: nginx.Dockerfile\n    ports:\n      - '8080:80'\n    links:\n      - server\n    depends_on:\n      - server\n  server:\n    container_name: lemon-mart-server\n    build: server\n    env_file: ./server/.env\n    environment:\n      - MONGO_URI=mongodb://john.smith:g00fy@lemondb:27017/lemon-mart\n    ports:\n      - '3000:3000'\n    links:\n      - database\n    depends_on:\n      - database\n  database:\n    container_name: lemondb\n    image: duluca/minimal-mongo:4.2.2\n    restart: always\n    env_file: .env\n    ports:\n      - '27017:27017'\n    volumes:\n      - 'dbdata:/data/db'\nvolumes:\n  dbdata: \n```", "```js\n $ docker image prune\n  $ docker container prune\n  $ docker volume prune \n```", "```js\n $ docker system prune --volumes **(this will delete everything)** \n```", "```js\n**package.json**\nscripts: {\n  \"build\": \"npm run build --prefix ./server && npm run build --prefix ./web-app -- --configuration=lemon-mart-server\",\n  \"test\": \"npm test --prefix ./server && npm test --prefix ./web-app -- --watch=false\",\n  \"prestart\": \"npm run build && docker-compose build\",\n  \"start\": \"docker-compose up\",\n  \"stop\": \"docker-compose down\",\n  \"clean\": \"docker-compose rm\",\n  \"clean:all\": \"docker system prune --volumes\",\n  \"start:backend\": \"docker-compose -f docker-compose.backend.yml up --build\",\n  \"start:database\": \"docker-compose -f docker-compose.database.yml up --build\", \n```", "```js\n**.circleci/config.yml**\nworkflows:\n  version: 2\n  build-and-test-compose:\n    jobs:\n      - build_server\n      - build_webapp\n      - test_compose:\n          requires:\n            - build_server\n            - build_webapp \n```", "```js\n**.circleci/config.yml**\n  test_compose:\n    docker:\n      - image: circleci/node:lts-browsers\n    working_directory: ~/repo\n    steps:\n      - setup_remote_docker\n      - attach_workspace:\n          at: /tmp/workspace\n      - checkout:\n          path: ~/repo\n      - run: npm run modules:init\n      - run:\n          name: Copy built server to server/dist folder\n          command: cp -avR /tmp/workspace/server/dist/ ./server\n      - run:\n          name: Copy built web-app to web-app/dist folder\n          command: cp -avR /tmp/workspace/dist/ ./web-app\n      - run:\n          name: Restore .env files\n          command: |\n            set +H\n            echo -e $PROJECT_DOT_ENV > .env\n            echo -e $SERVER_DOT_ENV > server/.env\n      - run:\n          name: Compose up\n          command: |\n            set -x\n            docker-compose up -d\n      - run:\n          name: Verify web app\n          command: |\n            set -x\n            docker run --network container:web jwilder/dockerize -wait http://localhost:80\n            docker run --network container:web appropriate/curl http://localhost:80\n      - run:\n          name: Verify db login with api\n          command: |\n            set -x\n            docker run --network container:lemon-mart-server jwilder/dockerize -wait http://localhost:3000\n            docker run --network container:lemon-mart-server appropriate/curl \\\n              -H \"accept: application/json\" -H \"Content-Type: application/json\" \\\n              -d \"$LOGIN_JSON\" http://localhost:3000/v1/auth/login \n```", "```js\n    **swagger.yaml**\n    openapi: 3.0.1\n    **info**:\n      title: LemonMart\n      description: LemonMart API\n      version: \"2.0.0\"\n    **servers**:\n      - url: http://localhost:3000\n        description: Local environment\n      - url: https://mystagingserver.com\n        description: Staging environment\n      - url: https://myprodserver.com\n        description: Production environment \n    ```", "```js\n    **swagger.yaml**\n    ...\n    **components:**\n     **securitySchemes:**\n        bearerAuth:\n          type: http\n          scheme: bearer\n          bearerFormat: JWT\n      **responses:**\n        UnauthorizedError:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerMessage\"\n              type: string \n    ```", "```js\n    **swagger.yaml**\n    ...\n     **schemas:**\n        ServerMessage:\n          type: object\n          properties:\n            message:\n              type: string\n        Role:\n          type: string\n          enum: [none, clerk, cashier, manager]\n        ... \n    ```", "```js\n    **swagger.yaml**\n    ...\n      **parameters:**\n        filterParam:\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n          description: Search text to filter the result set by\n    ... \n    ```", "```js\n    **swagger.yaml**\n    ...\n    **paths:**\n      /v1/login:\n        post:\n          description: |\n            Generates a JWT, given correct credentials.\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    email:\n                      type: string\n                    password:\n                      type: string\n                  required:\n                    - email\n                    - password\n          responses:\n            '200': # Response\n              description: OK\n              content:\n                application/json:\n                  schema:\n                    type: object\n                    properties:\n                      accessToken:\n                        type: string\n                    description: JWT token that contains userId as subject, email and role as data payload.\n            '401':\n              $ref: '#/components/responses/UnauthorizedError' \n    ```", "```js\n    **swagger.yaml**\n    ...\n    **paths:**\n      /v1/auth/me:\n      get: ...\n     /v2/users:\n        get: ...\n        post: ...\n     /v2/users/{id}:\n        get: ...\n        put: ... \n    ```", "```js\n**server/src**\n│   api.ts\n│   app.ts\n│   config.ts\n│   docs-config.ts\n│   index.ts\n│   \n├───models\n│       enums.ts\n│       phone.ts\n│       user.ts\n│       \n├───public\n│       favicon.ico\n│       index.html\n│       \n├───services\n│       authService.ts\n│       userService.ts\n│       \n├───v1\n│   │   index.ts\n│   │   \n│   └───routes\n│           authRouter.ts\n│           \n└───v2\n    │   index.ts\n    │   \n    └───routes\n            userRouter.ts \n```", "```js\n**server/src/index.ts**\nimport * as http from 'http'\nimport app from './app'\nimport * as config from './config'\nexport let Instance: http.Server\nasync function start() {\n  console.log('Starting server: ')\n  console.log(`isProd: ${config.IsProd}`)\n  console.log(`port: ${config.Port}`)\n  Instance = http.createServer(app)\n  Instance.listen(config.Port, async () => {\n    console.log(`Server listening on port ${config.Port}...`)\n  })\n}\nstart() \n```", "```js\n**server/src/app.ts**\nimport * as path from 'path'\nimport * as cors from 'cors'\nimport * as express from 'express'\nimport * as logger from 'morgan'\nimport api from './api'\nconst app = express()\napp.use(cors())\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\napp.use(logger('dev'))\napp.use('/', express.static(path.join(__dirname, '../public'), { redirect: false }))\napp.use(api)\nexport default app \n```", "```js\n**server/src/api.ts**\nimport { Router } from 'express'\nimport api_v1 from './v1'\nimport api_v2 from './v2'\nconst api = Router()\n// Configure all routes here\napi.use('/v1', api_v1)\napi.use('/v2', api_v2)\nexport default api \n```", "```js\n**server/src/v2/index.ts**\nimport { Router } from 'express'\nimport userRouter from './routes/userRouter'\nconst router = Router()\n// Configure all v2 routers here\nrouter.use('/users?', userRouter)\nexport default router \n```", "```js\n**server/src/v2/routes/userRouter.ts**\nconst router = Router()\nrouter.get('/', async (req: Request, res: Response) => {\n})\nrouter.post('/', async (req: Request, res: Response) => {\n})\nrouter.get('/:userId', async (req: Request, res: Response) => {\n})\nrouter.put('/:userId', async (req: Request, res: Response) => {\n})\nexport default router \n```", "```js\n**server/src/services/userService.ts**\nimport { IUser, User } from '../models/user'\nexport async function createNewUser(userData: IUser): Promise<User | boolean> {\n  // create user\n} \n```", "```js\n**server/src/v2/routes/userRouter.ts**\nimport { createNewUser } from '../../services/userService'\nrouter.post('/', async (req: Request, res: Response) => {\n  const userData = req.body as IUser\n  const success = await createNewUser(userData)\n  if (success instanceof User) {\n    res.send(success)\n  } else {\n    res.status(400).send({ message: 'Failed to create user.' })\n  }\n}) \n```", "```js\n    $ npm i swagger-jsdoc swagger-ui-express\n    $ npm i -D @types/swagger-jsdoc @types/swagger-ui-express \n    ```", "```js\n    **server/src/docs-config.ts**\n    import * as swaggerJsdoc from 'swagger-jsdoc'\n    import { Options } from 'swagger-jsdoc'\n    import * as packageJson from '../package.json'\n    const options: Options = {\n      swaggerDefinition: {\n        openapi: '3.0.1',\n        components: {},\n        info: {\n          title: packageJson.name,\n          version: packageJson.version,\n          description: packageJson.description,\n        },\n        servers: [\n          {\n            url: 'http://localhost:3000',\n            description: 'Local environment',\n          },\n          {\n            url: 'https://mystagingserver.com',\n            description: 'Staging environment',\n          },\n          {\n            url: 'https://myprodserver.com',\n            description: 'Production environment',\n          },\n        ],\n      },\n      apis: [\n        '**/models/*.js', \n        '**/v1/routes/*.js', \n        '**/v2/routes/*. js'\n      ],\n    }\n    export const specs = swaggerJsdoc(options) \n    ```", "```js\n    **server/src/app.ts**\n    import * as swaggerUi from 'swagger-ui-express'\n    import { specs } from './docs-config'\n    const app = express()\n    app.use(cors())\n    ...\n    **app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs))**\n    ...\n    export default app \n    ```", "```js\n    get collection(): ICollectionProvider<TDocument> \n    ```", "```js\n    aggregate(pipeline: object[]): AggregationCursor<TDocument> \n    ```", "```js\n    async findOne(\n      filter: FilterQuery<TDocument>, \n      options?: FindOneOptions\n    ): Promise<TDocument | null> \n    async findOneAndUpdate(\n      filter: FilterQuery<TDocument>,\n      update: TDocument | UpdateQuery<TDocument>,\n      options?: FindOneAndReplaceOption\n     ): Promise<TDocument | null> \n    ```", "```js\n    async findWithPagination<TReturnType extends IDbRecord>(\n      queryParams: Partial<IQueryParameters> & object,\n      aggregationCursorFunc?: Func<AggregationCursor<TReturnType>>,\n      query?: string | object,\n      searchableProperties?: string[],\n      hydrate = true,\n      debugQuery = false\n    ): Promise<IPaginationResult<TReturnType>> \n    ```", "```js\n$ npm i mongodb document-ts\n$ npm i -D @types/mongodb \n```", "```js\n    **server/.env**\n    MONGO_URI=mongodb://john.smith:g00fy@localhost:27017/lemon-mart \n    ```", "```js\n    **.env**\n    MONGODB_APPLICATION_DATABASE=lemon-mart\n    MONGODB_APPLICATION_USER=john.smith\n    MONGODB_APPLICATION_PASS=g00fy \n    ```", "```js\n    **server/src/index.ts**\n    ...\n    import * as document from 'document-ts'\n    import { UserCollection } from './models/user'\n    ...\n    async function start() {\n      ...\n      console.log(`mongoUri: ${config.MongoUri}`)\n      try {\n        **await document.connect(config.MongoUri, config.IsProd)**\n        console.log('Connected to database!')\n      } catch (ex) {\n        console.log(`Couldn't connect to a database: ${ex}`)\n      }\n    ...\n      Instance.listen(config.Port, async () => {\n        console.log(`Server listening on port ${config.Port}...`)\n        **await createIndexes()**\n        console.log('Done.')\n      })\n    }\n    async function createIndexes() {\n      console.log('Create indexes...')\n      **await UserCollection.createIndexes()**\n    }\n    start() \n    ```", "```js\n    **server/src/models/user.ts**\n    export interface IUser extends IDocument {\n      email: string\n      name: IName\n      picture: string\n      role: Role\n      userStatus: boolean\n      dateOfBirth: Date\n      level: number\n      address: {\n        line1: string\n        line2?: string\n        city: string\n        state: string\n        zip: string\n      }\n      phones?: IPhone[]\n    } \n    ```", "```js\n    **server/src/models/user.ts**\n    import { v4 as uuid } from 'uuid'\n    /**\n     * @swagger\n     * components:\n     *   schemas:\n     *     Name:\n     *       type: object\n     *       …\n     *     User:\n     *       type: object \n     *       …\n     */\n    export class User extends Document<IUser> implements IUser {\n      static collectionName = 'users'\n      private password: string\n      public email: string\n      public name: IName\n      public picture: string\n      public role: Role\n      public dateOfBirth: Date\n      public userStatus: boolean\n      public level: number\n      public address: {\n        line1: string\n        city: string\n        state: string\n        zip: string\n      }\n      public phones?: IPhone[]\n      constructor(user?: Partial<IUser>) {\n        super(User.collectionName, user)\n      }\n      fillData(data?: Partial<IUser>) {\n        if (data) {\n          Object.assign(this, data)\n        }\n        if (this.phones) {\n          this.phones = this.hydrateInterfaceArray(\n            Phone, Phone.Build, this.phones\n          )\n        }\n      }\n      getCalculatedPropertiesToInclude(): string[] {\n        return ['fullName']\n      }\n      getPropertiesToExclude(): string[] {\n        return ['password']\n      }\n      public get fullName(): string {\n        if (this.name.middle) {\n          return `${this.name.first} ${this.name.middle} ${this.name.last}`\n        }\n        return `${this.name.first} ${this.name.last}`\n      }\n      async create(id?: string, password?: string, upsert = false) {\n        if (id) {\n          this._id = new ObjectID(id)\n        }\n        if (!password) {\n          password = uuid()\n        }\n        this.password = await this.setPassword(password)\n        await this.save({ upsert })\n      }\n      hasSameId(id: ObjectID): boolean {\n        return this._id.toHexString() === id.toHexString()\n      }\n    } \n    ```", "```js\n    **server/src/models/user.ts**\n    class UserCollectionFactory extends CollectionFactory<User> {\n      constructor(docType: typeof User) {\n        super(User.collectionName, docType, ['name.first', 'name.last', 'email'])\n      }\n      async createIndexes() {\n        await this.collection().createIndexes([\n          {\n            key: {\n              email: 1,\n            },\n            unique: true,\n          },\n          {\n            key: {\n              'name.first': 'text',\n              'name.last': 'text',\n              email: 'text',\n            },\n            weights: {\n              'name.last': 4,\n              'name.first': 2,\n              email: 1,\n            },\n            name: 'TextIndex',\n          },\n        ])\n      }\n    userSearchQuery(\n        searchText: string\n      ): AggregationCursor<{ _id: ObjectID; email: string }> {\n        const aggregateQuery = [\n          {\n            $match: {\n              $text: { $search: searchText },\n            },\n          },\n          {\n            $project: {\n              email: 1,\n            },\n          },\n        ]\n        if (searchText === undefined || searchText === '') {\n          delete (aggregateQuery[0] as any).$match.$text\n        }\n        return this.collection().aggregate(aggregateQuery)\n      }\n    }\n    export let UserCollection = new UserCollectionFactory(User) \n    ```", "```js\n**server/src/models/user.ts**\n**export** let UserCollection = new UserCollectionFactory(User) \n```", "```js\n    $ npm i bcryptjs jsonwebtoken uuid\n    $ npm i -D @types/bcryptjs @types/jsonwebtoken @types/uuid \n    ```", "```js\n    **server/src/models/user.ts**\n    import * as bcrypt from 'bcryptjs'\n      async create(id?: string, password?: string, upsert = false) {\n          ...\n          this.password = await this.setPassword(password)\n          await this.save({ upsert })\n        }\n      async resetPassword(newPassword: string) {\n        this.password = await this.setPassword(newPassword)\n        await this.save()\n      }\n      private setPassword(newPassword: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n          bcrypt.genSalt(10, (err, salt) => {\n            if (err) {\n              return reject(err)\n            }\n            bcrypt.hash(newPassword, salt, (hashError, hash) => {\n              if (hashError) {\n                return reject(hashError)\n              }\n              resolve(hash)\n            })\n          })\n        })\n      }\n      comparePassword(password: string): Promise<boolean> {\n        const user = this\n        return new Promise((resolve, reject) => {\n          bcrypt.compare(password, user.password, (err, isMatch) => {\n            if (err) {\n              return reject(err)\n            }\n            resolve(isMatch)\n          })\n        })\n      } \n    ```", "```js\n**server/src/services/authService.ts**\nimport * as jwt from 'jsonwebtoken'\nimport { JwtSecret } from '../config'\nexport const IncorrectEmailPasswordMessage = 'Incorrect email and/or password'\nexport const AuthenticationRequiredMessage = 'Request has not been authenticated'\nexport function createJwt(user: IUser): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const payload = {\n      email: user.email,\n      role: user.role,\n      picture: user.picture,\n    }\n    jwt.sign(\n      payload,\n      JwtSecret(),\n      {\n        subject: user._id.toHexString(),\n        expiresIn: '1d',\n      },\n      (err: Error, encoded: string) => {\n        if (err) {\n          reject(err.message)\n        }\n        resolve(encoded)\n      }\n    )\n  })\n} \n```", "```js\n**server/src/v1/routes/authRouter.ts**\nimport { Request, Response, Router } from 'express'\nimport { UserCollection } from '../../models/user'\nimport {\n  AuthenticationRequiredMessage,\n  IncorrectEmailPasswordMessage,\n  authenticate,\n  createJwt,\n} from '../../services/authService'\nconst router = Router()\n/**\n * @swagger\n * /v1/auth/login:\n *   post:\n * …\n */\nrouter.post('/login', async (req: Request, res: Response) => {\n  const userEmail = req.body.email?.toLowerCase()\n  const user = await UserCollection.findOne({ email: userEmail })\n  if (user && (await user.comparePassword(req.body.password))) {\n    return res.send({ accessToken: await createJwt(user) })\n  }\n  return res.status(401).send({\n    message: IncorrectEmailPasswordMessage\n  })\n}) \n```", "```js\nauthenticate(**{ requiredRole: Role.Manager }**) \n```", "```js\nauthenticate({\n    requiredRole: Role.Manager,\n    **permitIfSelf: {**\n **idGetter: (req: Request) => req.body._id,**\n **requiredRoleCanOverride: true,**\n **},**\n  }), \n```", "```js\n**server/src/services/authService.ts**\nimport { NextFunction, Request, Response } from 'express'\nimport { ObjectID } from 'mongodb'\nimport { IUser, UserCollection } from '../models/user'\ninterface IJwtPayload {\n  email: string\n  role: string\n  picture: string\n  iat: number\n  exp: number\n  sub: string\n}\nexport function authenticate(options?: {\n  requiredRole?: Role\n  permitIfSelf?: {\n    idGetter: (req: Request) => string\n    requiredRoleCanOverride: boolean\n  }\n}) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      res.locals.currentUser =\n        await authenticateHelper(\n          req.headers.authorization, {\n            requiredRole: options?.requiredRole,\n            permitIfSelf: options?.permitIfSelf\n              ? {\n                  id: options?.permitIfSelf.idGetter(req),\n                  requiredRoleCanOverride: \n                    options?.permitIfSelf.requiredRoleCanOverride,\n                }\n             : undefined,\n          }\n        )\n      return next()\n    } catch (ex) {\n      return res.status(401).send({ message: ex.message })\n    }\n  }\n}\nexport async function authenticateHelper(\n  authorizationHeader?: string,\n  options?: {\n    requiredRole?: Role\n    permitIfSelf?: {\n      id: string\n      requiredRoleCanOverride: boolean\n    }\n  }\n): Promise<User> {\n  if (!authorizationHeader) {\n    throw new Error('Request is missing authorization header')\n  }\n  const payload = jwt.verify(\n    sanitizeToken(authorizationHeader),\n    JwtSecret()\n  ) as IJwtPayload\n  const currentUser = await UserCollection.findOne({\n    _id: new ObjectID(payload?.sub),\n  })\n  if (!currentUser) {\n    throw new Error(\"User doesn't exist\")\n  }\n  if (\n    options?.permitIfSelf &&\n    !currentUser._id.equals(options.permitIfSelf.id) &&\n    !options.permitIfSelf.requiredRoleCanOverride\n  ) {\n    throw new Error(`You can only edit your own records`)\n  }\n  if (\n    options?.requiredRole && \n    currentUser.role !== options.requiredRole\n  ) {\n    throw new Error(`You must have role: ${options.requiredRole}`)\n  }\n  return currentUser\n} \nfunction sanitizeToken(authorization: string | undefined) {\n  const authString = authorization || ''\n  const authParts = authString.split(' ')\n  return authParts.length === 2 ? authParts[1] : authParts[0]\n} \n```", "```js\n**server/src/v1/routes/authRouter.ts**\n/**\n * @swagger\n * /v1/auth/me:\n *   get:\n *     ...\n */\n// tslint:disable-next-line: variable-name\nrouter.get('/me', **authenticate()**,\n  async (_req: Request, res: Response) => {\n    if (res.locals.currentUser) {\n      return res.send(res.locals.currentUser)\n    }\n    return res.status(401)\n      .send({ message: AuthenticationRequiredMessage })\n  }\n) \n```", "```js\n    **web-app/src/environments/environment.ts**\n    **web-app/src/environments/environment.prod.ts**\n    export const environment = {\n      ...\n      baseUrl: 'http://localhost:3000',\n      authMode: AuthMode.CustomServer, \n    ```", "```js\n    $ npm i ts-enum-util \n    ```", "```js\n    **web-app/src/app/auth/auth.custom.service.ts**\n    import { $enum } from 'ts-enum-util'\n    interface IJwtToken {\n      email: string\n      role: string\n      picture: string\n      iat: number\n      exp: number\n      sub: string\n    }\n    @Injectable()\n    export class CustomAuthService extends AuthService {\n      constructor(private httpClient: HttpClient) {\n        super()\n      }\n      protected authProvider(\n        email: string,\n        password: string\n      ): Observable<IServerAuthResponse> {\n        return this.httpClient.post<IServerAuthResponse>(\n          `${environment.baseUrl}/v1/auth/login`,\n          {\n            email,\n            password,\n          }\n        )\n      }\n      protected transformJwtToken(token: IJwtToken): IAuthStatus {\n        return {\n          isAuthenticated: token.email ? true : false,\n          userId: token.sub,\n          userRole: $enum(Role)\n            .asValueOrDefault(token.role, Role.None),\n          userEmail: token.email,\n          userPicture: token.picture,\n        } as IAuthStatus\n      }\n      protected getCurrentUser(): Observable<User> {\n        return this.httpClient\n          .get<IUser>(`${environment.baseUrl}/v1/auth/me`)\n          .pipe(map(User.Build, catchError(transformError)))\n      }\n    } \n    ```", "```js\n    **web-app/src/app/auth/auth.factory.ts**\n    export function authFactory(\n      afAuth: **AngularFireAuth,**\n      **httpClient**: HttpClient\n    ) {\n      ...\n      case AuthMode.CustomServer:\n        return new CustomAuthService(**httpClient**)\n    } \n    ```", "```js\n    **web-app/src/app/app.module.ts**\n    ...\n      {\n        provide: AuthService,\n        useFactory: authFactory,\n        deps: [AngularFireAuth, **HttpClient**],\n      },\n    ... \n    ```", "```js\n**server/src/v2/routes/userRouter.ts**\nimport { ObjectID } from 'mongodb'\nimport { authenticate } from '../../services/authService'\nimport { IUser, User, UserCollection } from '../../models/user'\n/**\n * @swagger\n * /v2/users/{id}:\n *   get: …\n */\nrouter.get(\n  '/:userId',\n  authenticate({\n    requiredRole: Role.Manager,\n    permitIfSelf: {\n      idGetter: (req: Request) => req.body._id,\n      requiredRoleCanOverride: true,\n    },\n  }),\n  async (req: Request, res: Response) => {\n    const user = await UserCollection\n      .findOne({ _id: new ObjectID(req.params.userId) })\n    if (!user) {\n      res.status(404).send({ message: 'User not found.' })\n    } else {\n      res.send(user)\n    }\n  }\n) \n```", "```js\n    http://localhost:3000/v1/auth/login - Body\n    {\n        \"email\": \"duluca@gmail.com\",\n        \"password\": \"l0l1pop!!\"\n    } \n    ```", "```js\n    {\n      \"email\": \"{{email}}\",\n      \"name\": {\n        \"first\": \"{{first}}\",\n        \"last\": \"{{last}}\"\n      },\n      \"picture\": \"https://en.wikipedia.org/wiki/Bugs_Bunny#/media/File:Bugs_Bunny.svg\",\n      \"role\": \"clerk\",\n      \"userStatus\": true,\n      \"dateOfBirth\": \"1940-07-27\",\n      \"address\": {\n        \"line1\": \"123 Acme St\",\n        \"city\": \"LooneyVille\",\n        \"state\": \"Virginia\",\n        \"zip\": \"22201\"\n      },\n      \"phones\": [\n        {\n          \"type\": \"mobile\",\n          \"digits\": \"5551234567\"\n        }\n      ]\n    } \n    ```", "```js\n    var people = pm.environment.get('people')\n    if (!people) {\n      people = [\n        {email: 'efg@gmail.com', first: 'Ali', last: 'Smith'},\n        {email: 'veli@gmail.com', first: 'Veli', last: 'Tepeli'},\n        {email: 'thunderdome@hotmail.com', first: 'Justin', last: 'Thunderclaps'},\n        {email: 'jt23@hotmail.com', first: 'Tim', last: 'John'},\n        {email: 'apple@smith.com', first: 'Obladi', last: 'Oblada'},\n        {email: 'jones.smith@icloud.com', first: 'Smith', last: 'Jones'},\n        {email: 'bugs@bunnylove.com', first: 'Bugs', last: 'Bunny'},\n      ]\n    }\n    var person = people.shift()\n    pm.environment.set('email', person.email)\n    pm.environment.set('first', person.first)\n    pm.environment.set('last', person.last)\n    pm.environment.set('people', people) \n    ```", "```js\n    var people = pm.environment.get('people')\n    if (people && people.length > 0) {\n      postman.setNextRequest('Create Users')\n    } else {\n      postman.setNextRequest(null)\n    } \n    ```", "```js\n**server/src/v2/routes/userRouter.ts**\n/**\n * @swagger\n * /v2/users/{id}:\n *   put:\n */\nrouter.put(\n  '/:userId',\n  authenticate({\n    requiredRole: Role.Manager,\n    permitIfSelf: {\n      idGetter: (req: Request) => req.body._id,\n      requiredRoleCanOverride: true,\n    },\n  }),\n  async (req: Request, res: Response) => {\n    const userData = req.body as User\n    delete userData._id\n    await UserCollection.findOneAndUpdate(\n      { _id: new ObjectID(req.params.userId) },\n      {\n        $set: userData,\n      }\n    )\n    const user = await UserCollection\n      .findOne({ _id: new ObjectID(req.params.userId) })\n    if (!user) {\n      res.status(404).send({ message: 'User not found.' })\n    } else {\n      res.send(user)\n    }\n  }\n) \n```", "```js\n**server/src/v2/routes/userRouter.ts**\n/**\n * @swagger\n * components:\n *   parameters:\n *     filterParam: …\n *     skipParam: …\n *     limitParam: …\n *     sortKeyParam: …\n */\n/**\n * @swagger\n * /v2/users:\n *   get:\n */\nrouter.get(\n  '/',\n  authenticate({ requiredRole: Role.Manager }),\n  async (req: Request, res: Response) => {\n    const query: Partial<IQueryParameters> = {\n      filter: req.query.filter,\n      limit: req.query.limit,\n      skip: req.query.skip,\n      sortKeyOrList: req.query.sortKey,\n      projectionKeyOrList: ['email', 'role', '_id', 'name'],\n    }\n    const users = await UserCollection.findWithPagination<User>(query)\n    res.send(users)\n  }\n) \n```"]