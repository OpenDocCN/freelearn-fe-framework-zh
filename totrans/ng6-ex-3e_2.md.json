["```js\nnpm i -g @angular/cli\n```", "```js\nng new PROJECT-NAME\n```", "```js\nng serve --open\n```", "```js\ngit checkout base\n```", "```js\n    ng serve --open\n```", "```js\nexport class Exercise { \n  constructor( \n    public name: string,\n    public title: string,\n    public description: string, \n    public image: string,\n    public nameSound?: string,\n    public procedure?: string,\n    public videos?: Array<string>) { }\n} \n```", "```js\nexport class WorkoutPlan { \n  constructor( \n    public name: string, \n    public title: string, \n    public restBetweenExercise: number, \n public exercises: ExercisePlan[], \n    public description?: string) { } \n\n  totalWorkoutDuration(): number { ... } \n} \n```", "```js\nexport class ExercisePlan { \n  constructor( \n    public exercise: Exercise, \n    public duration: number) { } \n} \n```", "```js\nng generate module workout-runner --module app.module.ts\n```", "```js\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.log(err));\n```", "```js\nng generate component workout-runner -is\n```", "```js\nimport {WorkoutPlan, ExercisePlan, Exercise} from '../model';\n```", "```js\nworkoutPlan: WorkoutPlan; \nrestExercise: ExercisePlan; \nngOnInit() { \n   this.workoutPlan = this.buildWorkout(); \n   this.restExercise = new ExercisePlan( \n     new Exercise('rest', 'Relax!', 'Relax a bit', 'rest.png'),  \n     this.workoutPlan.restBetweenExercise);   \n} \n```", "```js\nbuildWorkout(): WorkoutPlan { \nlet workout = new WorkoutPlan('7MinWorkout',  \n\"7 Minute Workout\", 10, []); \n   workout.exercises.push( \n      new ExercisePlan( \n        new Exercise( \n          'jumpingJacks', \n          'Jumping Jacks', \n          'A jumping jack or star jump, also called side-straddle hop\n           is a physical jumping exercise.', \n          'JumpingJacks.png', \n          'jumpingjacks.wav', \n          `Assume an erect position, with feet together and \n           arms at your side. ...`, \n          ['dmYwZH_BNd0', 'BABOdJ-2Z6o', 'c4DAnQ6DtF8']), \n        30)); \n   // (TRUNCATED) Other 11 workout exercise data. \n   return workout; \n} \n```", "```js\nstart() { \n   this.workoutTimeRemaining =  \n   this.workoutPlan.totalWorkoutDuration(); \n   this.currentExerciseIndex = 0;  \n   this.startExercise(this.workoutPlan.exercises[this.currentExerciseIndex]); \n} \n```", "```js\nworkoutTimeRemaining: number; \ncurrentExerciseIndex: number; \n```", "```js\nstartExercise(exercisePlan: ExercisePlan) { \n    this.currentExercise = exercisePlan; \n    this.exerciseRunningDuration = 0; \n    const intervalId = setInterval(() => { \n      if (this.exerciseRunningDuration >=  this.currentExercise.duration) { \n          clearInterval(intervalId);  \n      } \n      else { this.exerciseRunningDuration++; } \n    }, 1000); \n} \n```", "```js\ncurrentExercise: ExercisePlan; \nexerciseRunningDuration: number; \n```", "```js\ntemplate: `<pre>Current Exercise: {{currentExercise | json}}</pre>\n<pre>Time Left: {{currentExercise.duration - exerciseRunningDuration}}</pre>`,\n```", "```js\n<div class=\"container body-content app-container\">\n      <abe-workout-runner></abe-workout-runner>\n</div>\n```", "```js\nngOnInit() { \n    ...\n    this.start(); \n} \n```", "```js\nimport {Component,OnInit} from '@angular/core'; \n... \nexport class WorkoutRunnerComponent implements OnInit {\n```", "```js\nng serve --open\n```", "```js\ndeclarations: [WorkoutRunnerComponent],\nexports:[WorkoutRunnerComponent]\n```", "```js\nif (this.exerciseRunningDuration >=  this.currentExercise.duration) { \n   clearInterval(intervalId); \n const next: ExercisePlan = this.getNextExercise(); if (next) { if (next !== this.restExercise) { this.currentExerciseIndex++; } this.startExercise(next);}\n else { console.log('Workout complete!'); } \n} \n```", "```js\ngetNextExercise(): ExercisePlan { \n    let nextExercise: ExercisePlan = null; \n    if (this.currentExercise === this.restExercise) { \n      nextExercise = this.workoutPlan.exercises[this.currentExerciseIndex + 1]; \n    } \n    else if (this.currentExerciseIndex < this.workoutPlan.exercises.length - 1) { \n      nextExercise = this.restExercise; \n    } \n    return nextExercise; \n} \n```", "```js\n<div class=\"row\">\n  <div id=\"exercise-pane\" class=\"col-sm\">\n    <h1 class=\"text-center\">{{currentExercise.exercise.title}}</h1>\n    <div class=\"image-container row\">\n      <img class=\"img-fluid col-sm\" [src]=\"'/assets/images/' +  \n                                      currentExercise.exercise.image\" />\n    </div>\n    <div class=\"progress time-progress row\">\n      <div class=\"progress-bar col-sm\" \n            role=\"progressbar\" \n            [attr.aria-valuenow]=\"exerciseRunningDuration\" \n            aria-valuemin=\"0\" \n            [attr.aria-valuemax]=\"currentExercise.duration\"\n            [ngStyle]=\"{'width':(exerciseRunningDuration/currentExercise.duration) * \n                                                                100 + '%'}\">\n      </div>\n    </div>\n    <h1>Time Remaining: {{currentExercise.duration-exerciseRunningDuration}}</h1>\n  </div>\n</div>\n```", "```js\n<h1>{{currentExercise.exercise.title}}</h1>\n... \n<h1>Time Remaining: {{currentExercise.duration?-exerciseRunningDuration}}</h1> \n```", "```js\n<img class=\"img-responsive\" [src]=\"'/static/images/' + currentExercise.exercise.image\" /> \n```", "```js\n<input type=\"text\" value=\"Awesome Angular\"> \n```", "```js\ninput.value // value property \n```", "```js\ninput.getAttribute('value')  // value attribute \n```", "```js\n<img class=\"img-responsive\" [src]=\"'/static/images/' + currentExercise.exercise.image\" /> \n```", "```js\n[target]=\"sourceExpression\"; \n```", "```js\n<workout-runner [exerciseRestDuration]=\"restDuration\"></workout-runner> \nexerciseRestDuration property on the WorkoutRunnerComponent class to the restDuration property defined on the container component (parent), allowing us to pass the rest duration as a parameter to the WorkoutRunnerComponent. As we enhance our app and develop new components, you will learn how to define custom properties and events on a component.\n```", "```js\n<h3>Main heading - {{heading}}</h3> \n<h3 [text-content]=\"' Main heading - '+ heading\"></h3>\n```", "```js\n<img [src]=\"'/assets/images/' + currentExercise.exercise.image\" />\n<img src=\"img/{{currentExercise.exercise.image}}\" />      // interpolation on attribute\n\n<span [text-content]=\"helpText\"></span>\n<span>{{helpText}}</span>\n```", "```js\n<div>{{doLotsOfWork()}}</div> \n```", "```js\n<div [innerHTML]=\"getContent()\"></div> \n```", "```js\ngetContent() { \n  var content=buildContent(); \n  this.timesContentRequested +=1; \n  return content; \n} \n```", "```js\n<div>{{timesContentRequested}}</div> \n```", "```js\nExpression '{{getContent()}}' in AppComponent@0:4' has changed after it was checked. Previous value: '1'. Current value: '2'\n```", "```js\n<div class=\"progress-bar\" role=\"progressbar\"  \n [ngStyle] = \"{'width':(exerciseRunningDuration/currentExercise.duration) * 100 + '%'}\"></div>  \n```", "```js\n<div [ngStyle]='expression'></div> \n```", "```js\n<div class=\"progress-bar\" role=\"progressbar\"  \n    aria-valuenow = \"{{exerciseRunningDuration}}\"  \n    aria-valuemin=\"0\"  \n    aria-valuemax= \"{{currentExercise.duration}}\"  ...> </div> \n```", "```js\nCan't bind to 'ariaValuenow' since it isn't a known native property in WorkoutRunnerComponent ... \n```", "```js\n[attr.attribute-name]=\"expression\" \n```", "```js\n<div ... [attr.aria-valuenow]=\"exerciseRunningDuration\" \n    [attr.aria-valuemax]=\"currentExercise.duration\" ...> \n```", "```js\n[class.class-name]=\"expression\" \n```", "```js\n<div [class.highlight]=\"isPreferred\">Jim</div> // Toggles the highlight class \n```", "```js\n[style.style-name]=\"expression\";\n```", "```js\n[style.width.%]=\"(exerciseRunningDuration/currentExercise.duration) * 100\" \n```", "```js\n<div class=\"progress-bar\" role=\"progressbar\" ... \n    [ngStyle]=\"{'width':(exerciseRunningDuration/currentExercise.duration) * 100 + '%'}\"> </div> \n```", "```js\n<div [ngStyle]= \"{ \n'width':componentWidth,  \n'height':componentHeight,  \n'font-size': 'larger',  \n'font-weight': ifRequired ? 'bold': 'normal' }\"></div> \n```", "```js\n<div [ngStyle]= \"getStyles()\"></div> \n```", "```js\ngetStyles () { \n    return { \n      'width':componentWidth, \n      ... \n    } \n} \n```", "```js\n<div [ngClass]= \"{'required':inputRequired, 'email':whenEmail}\"></div> \n```", "```js\n<abe-root>\n    ...\n    <abe-workout-runner>...</abe-workout-runner>\n</abe-root>\n```", "```js\nng generate component exercise-description -is\n```", "```js\nimport { Component, OnInit, Input } from '@angular/core';\n...\nexport class ExerciseDescriptionComponent { \n @Input() description: string; \n  @Input() steps: string; } \n```", "```js\n<div class=\"card-body\">\n    <div class=\"card-text\">{{description}}</div>\n</div> \n...  \n<div class=\"card-text\">\n    {{steps}}\n</div> \n```", "```js\n<div class=\"row\">\n    <div id=\"description-panel\" class=\"col-sm-3\">\n <abe-exercise-description \n            [description]=\"currentExercise.exercise.description\"\n [steps]=\"currentExercise.exercise.procedure\"></abe-exercise-description>\n </div>\n   <div id=\"exercise-pane\" class=\"col-sm-6\">  \n   ... \n```", "```js\nng generate component video-player -is\n```", "```js\nexport class VideoPlayerComponent implements OnInit, OnChanges { \n  private youtubeUrlPrefix = '//www.youtube.com/embed/'; \n\n  @Input() videos: Array<string>; \n  safeVideoUrls: Array<SafeResourceUrl>; \n\n  constructor(private sanitizer: DomSanitizationService) { } \n\n  ngOnChanges() { \n    this.safeVideoUrls = this.videos ? \n        this.videos \n            .map(v => this.sanitizer.bypassSecurityTrustResourceUrl(this.youtubeUrlPrefix + v)) \n    : this.videos; \n  } \n} \n```", "```js\n<div *ngFor=\"let video of safeVideoUrls\"> \n   <iframe width=\"198\" height=\"132\" [src]=\"video\" frameborder=\"0\" allowfullscreen></iframe> \n</div> \n```", "```js\n<div id=\"video-panel\" class=\"col-sm-3\">\n    <abe-video-player [videos]=\"currentExercise.exercise.videos\"></abe-video-player>\n</div> \n```", "```js\n<div *ngFor=\"let video of safeVideoUrls\"> \n   <iframe width=\"198\" height=\"132\" [src]=\"video\" frameborder=\"0\" allowfullscreen></iframe> \n</div>\n```", "```js\n<div *ngFor=\"let video of videos; let i=index\"> \n     <div>This is video - {{i}}</div> \n</div> \n```", "```js\n<div *ngFor=\"let video of videos; let i=index; let f=first\"> \n     <div [class.special]=\"f\">This is video - {{i}}</div> \n</div> \n```", "```js\n<user-profile *ngFor=\"let userDetail of users\" [user]= \"userDetail\"></user-profile>\n```", "```js\n<div *ngFor=\"let video of safeVideoUrls\"> \n   <iframe width=\"198\" height=\"132\" [src]=\"video\" frameborder=\"0\" allowfullscreen></iframe> \n</div>\n```", "```js\n<ng-template ngFor let-video [ngForOf]=\"safeVideoUrls\">  \n    <div>\n        <iframe width=\"198\" height=\"132\"  [src]=\"video\" ...></iframe>  \n    </div> \n</ng-template>  \n```", "```js\ntrackByUserId(index: number, hero: User) { return user.id; } \n```", "```js\n<div *ngFor=\"let user of users; trackBy: trackByUserId\">{{user.name}}</div> \n```", "```js\n<div *ngFor=\"let video of videos\"> \n    <iframe width=\"198\" height=\"132\"  \n        [src]=\"'//www.youtube.com/embed/' + video\"  frameborder=\"0\" allowfullscreen></iframe> \n</div>\n```", "```js\nthis.htmlContent = '<span>HTML content.</span>'    // Component\n\n<div [innerHTML]=\"htmlContent\"> <!-- View -->\n```", "```js\nthis.videos.map(v => this.sanitizer.bypassSecurityTrustResourceUrl(this.youtubeUrlPrefix + v)) \n```", "```js\n`Assume an erect position, with feet together and arms at your side. <br> \n Slightly bend your knees, and propel yourself a few inches into the air. <br> \n While in air, bring your legs out to the side about shoulder width or slightly wider. <br> \n ... \n```", "```js\n<div class=\"card-text\" [innerHTML]=\"steps\"> \n```", "```js\n{{expression | pipeName:inputParam1}} \n```", "```js\n{{fullName | slice:0:20}} //renders first 20 characters  \n```", "```js\n{{fullName | slice:0:truncateAt}} //renders based on value truncateAt \n```", "```js\n{{ dateObj | date }}               // output is 'Jun 15, 2015        ' \n{{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM' \n{{ dateObj | date:'shortTime' }}   // output is '9:43 PM            ' \n{{ dateObj | date:'mmss' }}        // output is '43:11'     \n```", "```js\n {{14.22|currency:\"USD\" }} <!-Renders USD 14.22 --> \n    {{14.22|currency:\"USD\":'symbol'}}  <!-Renders $14.22 -->\n```", "```js\n{{fullName | slice:0:20 | uppercase}} \n```", "```js\nng generate pipe seconds-to-time\n```", "```js\nexport class SecondsToTimePipe implements PipeTransform { \n  transform(value: number): any { \n    if (!isNaN(value)) { \n      const hours = Math.floor(value / 3600);\n      const minutes = Math.floor((value - (hours * 3600)) / 60);\n      const seconds = value - (hours * 3600) - (minutes * 60);\n\n      return ('0' + hours).substr(-2) + ':'\n        + ('0' + minutes).substr(-2) + ':'\n        + ('0' + seconds).substr(-2);\n    } \n    return; \n  } \n} \n```", "```js\n@Pipe({ \n  name: 'secondsToTime' \n}) \n```", "```js\n<div class=\"exercise-pane\" class=\"col-sm-6\"> \n    <h4 class=\"text-center\">Workout Remaining - {{workoutTimeRemaining | secondsToTime}}</h4>\n    <h1 class=\"text-center\">{{currentExercise.exercise.title}}</h1> \n```", "```js\nstart() { \n    this.workoutTimeRemaining = this.workoutPlan.totalWorkoutDuration(); \n    ... \n} \n```", "```js\nstartExerciseTimeTracking() {\n    this.exerciseTrackingInterval = window.setInterval(() => {\n      if (this.exerciseRunningDuration >= this.currentExercise.duration) {\n        clearInterval(this.exerciseTrackingInterval);\n        const next: ExercisePlan = this.getNextExercise();\n        if (next) {\n          if (next !== this.restExercise) {\n            this.currentExerciseIndex++;\n          }\n          this.startExercise(next);\n        }\n        else {\n          console.log('Workout complete!');\n        }\n        return;\n      }\n      ++this.exerciseRunningDuration;\n      --this.workoutTimeRemaining;\n    }, 1000);\n  }  \n```", "```js\n<div class=\"exercise-pane\"> \n<!-- Exiting html --> \n   <div class=\"progress time-progress\"> \n       <!-- Exiting html --> \n   </div> \n <div class=\"row\">\n <h4 class=\"col-sm-6 text-left\">Time Remaining:\n <strong>{{currentExercise.duration-exerciseRunningDuration}}</strong>\n </h4>\n <h4 class=\"col-sm-6 text-right\" *ngIf=\"currentExercise.exercise.name=='rest'\">Next up:\n <strong>{{workoutPlan.exercises[currentExerciseIndex + 1].exercise.title}}</strong>\n </h4>\n </div>\n</div> \n```", "```js\nngIf=\"currentExercise.details.name=='rest'\" \n```", "```js\n<div [style.display]=\"isAdmin\" ? 'block' : 'none'\">Welcome Admin</div> \n```", "```js\n<div *ngIf=\"isAdmin\" ? 'block' : 'none'\">Welcome Admin</div> \n```", "```js\n<div *ngIf=\"show; else elseBlock\">Text to show</div>\n<ng-template #elseBlock>Alternate text while primary text is hidden</ng-template>\n```", "```js\n<div id=\"parent\" [ngSwitch] =\"userType\"> \n<div *ngSwitchCase=\"'admin'\">I am the Admin!</div> \n<div *ngSwitchCase=\"'powerUser'\">I am the Power User!</div> \n<div *ngSwitchDefault>I am a normal user!</div> \n</div> \n```", "```js\nworkoutPaused: boolean; \n...\npause() { \n    clearInterval(this.exerciseTrackingInterval); \n    this.workoutPaused = true; \n} \n\nresume() { \n    this.startExerciseTimeTracking(); \n    this.workoutPaused = false; \n} \n\npauseResumeToggle() { \n    if (this.workoutPaused) { this.resume();    } \n    else {      this.pause();    } \n} \n```", "```js\n<div id=\"exercise-pane\" class=\"col-sm-6\"> \n <div id=\"pause-overlay\" (click)=\"pauseResumeToggle()\"><span class=\"pause absolute-center\" \n            [ngClass]=\"{'ion-md-pause' : !workoutPaused, 'ion-md-play' : workoutPaused}\">\n        </span> </div> \n    <div class=\"row workout-content\"> \n```", "```js\n <div id=\"pause-overlay\" (keyup)= \"onKeyPressed($event)\"> \n```", "```js\n<div id=\"pause-overlay\" (window:keyup)= \"onKeyPressed($event)\">\n```", "```js\nonKeyPressed(event: KeyboardEvent) {\n    if (event.which === 80 || event.which === 112) {\n      this.pauseResumeToggle();\n    }\n  }\n```", "```js\n<div id=\"pause-overlay\" (click)=\"pauseResumeToggle()\"> \n```", "```js\n<workout-runner (paused)= \"stopAudio()\"></workout-runner> \n```", "```js\n<div id=\"parent \" (click)=\"doWork($event)\"> Try \n  <div id=\"child \">me!</div> \n</div> \n```", "```js\n<div id=\"parent\" (click)=\"doWork($event) || true\"> \n```", "```js\n<input [(ngModel)]=\"workout.name\"> \n```", "```js\n<input [value]=\"workout.name\"  \n    (input)=\"workout.name=$event.target.value\" > \n```"]