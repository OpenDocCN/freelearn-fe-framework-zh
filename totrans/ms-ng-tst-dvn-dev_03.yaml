- en: <st c="0">3</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Writing Effective Unit Tests for Angular Components, Services, and
    Directives</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="79">In this chapter, we’re going to dive into the art of writing effective
    unit tests for Angular components, services, and directives.</st> <st c="212">We’ll
    dive into writing unit tests for Angular components, continuing what we started
    in the previous chapter.</st> <st c="323">Components are the building blocks of
    Angular applications, and it’s crucial to test them thoroughly.</st> <st c="425">In
    this chapter, we’ll learn how to set up test environments, create component instances,
    and test component properties, methods, and event handling.</st> <st c="575">We’ll
    also explore techniques for testing component models, including DOM manipulation
    and</st> <st c="666">event simulation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="683">We’ll also be focusing on unit testing Angular services.</st> <st
    c="741">Services play an essential role in Angular applications, providing reusable
    logic and data manipulation.</st> <st c="846">We’ll learn how to create service
    instances, simulate test service methods, and carry out</st> <st c="936">data
    manipulation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="954">Finally, we’ll look at unit testing Angular directives.</st> <st
    c="1011">Directives are powerful tools for manipulating the DOM and improving
    the behavior of our applications.</st> <st c="1114">We’ll learn how to set up
    test environments for directives, create directive instances, and test their behavior
    and interaction with</st> <st c="1247">the DOM.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1255">Throughout this chapter, I’ll provide practical examples and real-world
    scenarios to illustrate effective unit-testing concepts and techniques.</st> <st
    c="1400">We’ll also discuss common unit-testing pitfalls and challenges and provide
    strategies for</st> <st c="1490">overcoming them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1506">In summary, here are the main topics that will</st> <st c="1554">be
    covered:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="1565">Advanced techniques for Angular unit testing: lifecycle hooks</st>
    <st c="1628">and dependencies</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1644">Advanced techniques for Angular unit testing:</st> <st c="1691">Angular
    services</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1707">Using rigorous directive testing to ensure proper rendering</st>
    <st c="1768">and functionality</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1785">By the end of this chapter, you’ll have a solid understanding of
    how to write effective unit tests for Angular components, services, and directives.</st>
    <st c="1935">You’ll be equipped with the knowledge and tools you need to ensure
    the quality and reliability of your Angular code.</st> <st c="2052">So, let’s
    dive in and master the art of writing effective unit tests for</st> <st c="2125">Angular
    applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2146">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2169">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as</st> <st c="2317">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2331">Node.js and npm installed on</st> <st c="2361">your computer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2374">Angular CLI</st> <st c="2387">installed globally</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2405">A code editor, such as Visual Studio Code, installed on</st> <st
    c="2462">your computer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2475">The code files of this chapter can be found</st> <st c="2520">at</st>
    [<st c="2523">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%203</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%203)<st
    c="2621">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2622">Advanced techniques for Angular unit testing – lifecycle hooks</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2685">In this section, we will understand how to leverage lifecycle hooks
    and manage dependencies in our unit tests for Angular components.</st> <st c="2820">You’ll
    be empowered with the knowledge and skills you need to write robust and efficient
    unit tests, ensuring the quality and stability of your Angular applications.</st>
    <st c="2986">Let’s dive in and explore advanced unit-testing techniques for</st>
    <st c="3049">Angular components.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3068">Discovering lifecycle hooks</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3096">Angular provides several</st> <st c="3121">lifecycle hooks that
    allow us to perform actions at specific stages of a component’s lifecycle.</st>
    <st c="3218">Testing these hooks ensures that our components behave as expected.</st>
    <st c="3286">But before we look deeper into the subject of the testing lifecycle,
    let’s</st> <st c="3360">take a look at some of Angular’s</st> <st c="3394">lifecycle
    methods:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="3412">ngOnInit()</st>`<st c="3423">: The</st> `<st c="3430">ngOnInit()</st>`
    <st c="3440">hook is called</st> <st c="3456">after the component has been initialized.</st>
    <st c="3498">In our</st> `<st c="3505">Calculator</st>` <st c="3515">component,
    we can use this hook to set the initial values and perform any necessary setup.</st>
    <st c="3607">To test</st> `<st c="3615">ngOnInit()</st>`<st c="3625">, we can
    verify whether the initial values are correctly set and whether any necessary
    setup</st> <st c="3718">is performed.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3731">ngOnChanges()</st>`<st c="3745">: The</st> `<st c="3752">ngOnChanges()</st>`
    <st c="3765">hook is called whenever there are changes to the component’s input</st>
    <st c="3833">properties.</st> <st c="3845">In our</st> `<st c="3852">Calculator</st>`
    <st c="3862">component, we can use this hook to update the component state based
    on the changes.</st> <st c="3947">To test</st> `<st c="3955">ngOnChanges()</st>`<st
    c="3968">, we can simulate changes to the input properties and verify whether
    the component state is</st> <st c="4060">updated accordingly.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4080">ngOnDestroy()</st>`<st c="4094">: The</st> `<st c="4101">ngOnDestroy()</st>`
    <st c="4114">hook is called</st> <st c="4130">just before the component is destroyed.</st>
    <st c="4170">In our</st> `<st c="4177">Calculator</st>` <st c="4187">component,
    we can use this hook to clean up any resources or subscriptions.</st> <st c="4264">To
    test</st> `<st c="4272">ngOnDestroy()</st>`<st c="4285">, we can simulate the
    component destruction and verify whether the necessary cleanup actions</st> <st
    c="4378">are performed.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4392">In the next section, we will learn how to test the dependencies
    present in an</st> <st c="4471">Angular component.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4489">Practical application</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4511">We will continue our project from the</st> <st c="4549">previous
    chapter, namely the Calculator application.</st> <st c="4603">We’ll start testing
    the expected behavior when we initialize our calculator.</st> <st c="4680">When
    our calculator is launched, the result displayed should be</st> `<st c="4744">0</st>`<st
    c="4745">, since no operation has been performed.</st> <st c="4786">To do this,
    we’ll test the</st> `<st c="4813">ngOnInit()</st>` <st c="4823">method of the
    Angular lifecycle, which allows us to initialize</st> <st c="4887">our component.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4901">In</st> `<st c="4905">calculator.component.spec.ts</st>`<st c="4933">,
    we will add the following</st> <st c="4961">unit t</st><st c="4967">est:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="5081">After writing this code snippet, you’ll notice that there are errors
    in the code because</st> `<st c="5171">result</st>` <st c="5177">is not an attribute
    of the</st> `<st c="5205">Calculator</st>` <st c="5215">class:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – ngOnInit method test case with error](img/B21146_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5331">Figure 3.1 – ngOnInit method test case with error</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5380">Don’t forget the principles of TDD.</st> <st c="5417">It’s normal
    for the test to fail in the first instance and then for you to write the minimum
    amount of code necessary for the test to succeed.</st> <st c="5560">In the meantime,
    we need to rectify the problem with our</st> `<st c="5617">result</st>` <st c="5623">class
    attribute by declaring it in</st> <st c="5659">our component.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5673">Our component</st> <st c="5687">should now look</st> <st c="5704">like
    this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Adding the add method in calculator.component.ts](img/B21146_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6054">Figure 3.2 – Adding the add method in calculator.component.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6115">Now that the declaration issue has been resolved, let’s focus on
    our red test.</st> <st c="6195">We have an error telling us that the result should
    be initialized</st> <st c="6261">to</st> `<st c="6264">0</st>`<st c="6265">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – calculator.component.ts test failed](img/B21146_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6953">Figure 3.3 – calculator.component.ts test failed</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7001">To fix this, we</st> <st c="7018">just need to initialize the</st>
    `<st c="7046">result</st>` <st c="7052">value to</st> `<st c="7062">0</st>` <st
    c="7063">in our</st> `<st c="7071">ngOnInit()</st>` <st c="7081">method:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7127">As a result, our test turns green.</st> <st c="7163">Well done!</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – calculator.component.ts test succeeded](img/B21146_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7453">Figure 3.4 – calculator.component.ts test succeeded</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7504">We’ve now tested the</st> `<st c="7526">ngOnDestroy()</st>` <st
    c="7539">method of our component’s lifecycle, ensuring that our component is initialized
    with the expected values, while respecting the principles</st> <st c="7678">of
    TDD.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7685">This is the same philosophy to be adopted for other lifecycle methods.</st>
    <st c="7757">To be able to test our</st> `<st c="7780">ngOnDestroy()</st>` <st
    c="7793">method, we add a small layer to our</st> <st c="7830">business logic.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7845">Let’s assume the</st> <st c="7863">following scenario.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7882">We have a service that handles the various arithmetic operations
    of our calculator and returns the result to us.</st> <st c="7996">This service
    is injected into our</st> `<st c="8030">CalculatorComponent</st>` <st c="8049">to
    call the various methods that would return the result following the</st> <st c="8121">arithmetic
    operation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8142">As we are used to</st> <st c="8161">by now, we will first initialize
    our</st> `<st c="8198">CalculatorService</st>` <st c="8215">in the test file of</st>
    <st c="8236">our</st> `<st c="8240">CalculatorComponent</st>`<st c="8259">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Declaration of an instance of CalculatorService](img/B21146_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8464">Figure 3.5 – Declaration of an instance of CalculatorService</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8524">Then, since it’s a service, we need to declare it in t</st><st
    c="8579">he</st> `<st c="8583">providers</st>` <st c="8592">array:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Adding CalculatorService in the providers array](img/B21146_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8759">Figure 3.6 – Adding CalculatorService in the providers array</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8819">Finally, we’ll inject it so that it can be used in our descriptive</st>
    <st c="8887">test suites:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Injection of CalculatorService in our test context](img/B21146_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9216">Figure 3.7 – Injection of CalculatorService in our test context</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9279">We can now create our service so that it is recognized by our test
    file.</st> <st c="9353">In our project’s</st> `<st c="9370">src</st>` <st c="9373">folder,
    create a</st> `<st c="9391">core</st>` <st c="9395">folder containing a</st> `<st
    c="9416">services</st>` <st c="9424">folder.</st> <st c="9433">Basically, you’ll</st>
    <st c="9451">have</st> `<st c="9456">src/core/services</st>`<st c="9473">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9474">Open the</st> `<st c="9484">services</st>` <st c="9492">folder
    in the terminal and run the</st> <st c="9528">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9564">Once the service has been created, import it into the test file
    and the errors will disappear from your</st> <st c="9669">code editor:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9755">According to our</st> <st c="9773">scenario, the service is now
    in charge of performing arithmetic operations.</st> <st c="9849">So, we’ll move
    the logic o</st><st c="9875">f ou</st><st c="9880">r</st> `<st c="9883">add()</st>`
    <st c="9888">method from the component to</st> <st c="9918">the service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9930">Here’s how it would look on the</st> <st c="9963">test side:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Add method test case](img/B21146_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10190">Figure 3.8 – Add method test case</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10223">We’ve refactored our</st> `<st c="10245">should add two numbers
    correctly</st>` <st c="10277">test suite.</st> <st c="10290">Previously, the calculation
    was performed directly in the component.</st> <st c="10359">Now, it’s transferred
    to a service that takes care of it.</st> <st c="10417">After calculation, the
    service returns the result to</st> <st c="10470">the component.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10484">The</st> <st c="10488">service’s</st> `<st c="10498">add()</st>`
    <st c="10504">method must perform the sum and return</st> <st c="10544">the result.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10555">The</st> <st c="10559">component’s</st> `<st c="10571">add()</st>`
    <st c="10577">method calls on the</st> <st c="10597">service’s</st> `<st c="10607">add()</st>`
    <st c="10613">method to retrieve</st> <st c="10633">the result.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10644">Now we just need to</st> <st c="10664">declare th</st><st c="10675">e</st>
    `<st c="10678">add()</st>` <st c="10683">method in our service, so that our editor
    code no longer</st> <st c="10741">contains errors:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Adding an add method declaration in calculator.service.ts](img/B21146_03_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10921">Figure 3.9 – Adding an add method declaration in calculator.service.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10991">Our test now compiles and displays</st> <st c="11027">an error:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – add method test case failed](img/B21146_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12297">Figure 3.10 – add method test case failed</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12338">We can now use the</st> <st c="12357">minimum amount of code necessary
    to turn our service green.</st> <st c="12418">To do this, our</st> <st c="12433">service’s</st>
    `<st c="12443">add()</st>` <st c="12449">method must return a number (we’ll limit
    ourselves to an integer).</st> <st c="12517">It then takes two arguments, namely
    the numbers</st> `<st c="12565">a</st>` <st c="12566">and</st> `<st c="12570">b</st>`<st
    c="12571">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12609">Finally, it must return the sum of</st> `<st c="12645">a</st>`
    <st c="12646">and</st> `<st c="12650">b</st>`<st c="12651">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12704">Now that the work is done on the service side, we need to update
    our component code.</st> <st c="12790">First, we’ll inject the service into our</st>
    <st c="12831">component’s constructor:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12916">Then, our</st> <st c="12926">component’s</st> `<st c="12938">add()</st>`
    <st c="12944">method</st> <st c="12952">becomes this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13049">If you notice, we’ve gone from a function that returned a</st>
    `<st c="13108">number</st>` <st c="13114">value to a</st> `<st c="13126">void</st>`<st
    c="13130">. The</st> `<st c="13136">result</st>` <st c="13142">value is returned
    directly by our service.</st> <st c="13186">If all goes well, the</st> `<st c="13208">ng
    test</st>` <st c="13215">command returns the</st> <st c="13235">following on</st>
    <st c="13249">the screen:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – calculator.component.ts test cases succeeded](img/B21146_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13585">Figure 3.11 – calculator.component.ts test cases succeeded</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13643">We’ve just carried out a small dependency test using our service.</st>
    <st c="13710">In the next section, we’ll go a little further in relation to the
    tests related to</st> <st c="13793">our service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13805">Advanced techniques for Angular unit testing – Angular services</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="13869">In this section, we will</st> <st c="13895">explore advanced techniques
    for unit testing Angular services.</st> <st c="13958">We will dive into the various
    aspects of testing services, including testing methods, HTTP requests, observables,
    and error handling.</st> <st c="14092">By mastering these techniques, you will
    be able to write comprehensive and robust unit tests for your Angular services,
    ensuring that they perform as expected and handle various</st> <st c="14270">scenarios
    gracefully.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14291">Testing service methods</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14315">Services typically contain</st> <st c="14343">methods that perform
    specific operations or logic.</st> <st c="14394">These methods can be tested individually
    to ensure they produce the expected results.</st> <st c="14480">By mocking any
    dependencies and providing appropriate inputs, you can test the behavior of service
    methods and validate</st> <st c="14600">their output.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14613">We’ve already started by testing o</st><st c="14648">ur service</st><st
    c="14659">’s</st> `<st c="14663">add()</st>` <st c="14668">method in the previous
    section.</st> <st c="14701">As repetition is educational, we’ll be implementing
    other methods, namely subtraction, multiplication,</st> <st c="14804">and division.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14817">Let’s open our</st> `<st c="14833">calculator.component.spec.ts</st>`
    <st c="14861">file and continue writing our tests linked to our business logic,
    following</st> <st c="14938">TDD principles.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14953">We’re about to write our red test for subtracting two numbers.</st>
    <st c="15017">As we already have experience with the</st> <st c="15056">addition
    functionality, we can draw inspiration</st> <st c="15104">from it:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – subtract method test code without some errors](img/B21146_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15355">Figure 3.12 – subtract method test code without some errors</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15414">Obviously, we ha</st><st c="15431">ve red because the</st> `<st
    c="15451">subtract</st>` <st c="15459">method doesn’t yet exist.</st> <st c="15486">Our
    test won’t even run.</st> <st c="15511">Let</st><st c="15514">’s take a look at
    our</st> `<st c="15537">calculator.service.ts</st>` <st c="15558">service and
    add it.</st> <st c="15579">Keep in mind that we need to write as little code</st>
    <st c="15629">as possible:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – subtract method declaration in calculator.service.ts](img/B21146_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15700">Figure 3.13 – subtract method declaration in calculator.service.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15766">One the other hand, in our</st> `<st c="15794">calculator.component.spec.ts</st>`<st
    c="15822">, note that there’s less red, but there’s still some, as shown in the</st>
    <st c="15892">following figure:</st>
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.14 – subtract method test before\uFEFF implementing it in calculator.component.ts](img/B21146_03_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: <st c="16152">Figure 3.14 – subtract method test before</st> <st c="16193">implementing
    it in calculator.component.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16236">Our</st> `<st c="16241">calculator.component.ts</st>` <st c="16264">component
    is missing the</st> `<st c="16290">substract()</st>` <st c="16301">method.</st>
    <st c="16310">Just as we did with</st> `<st c="16329">add()</st>`<st c="16335">,
    we’re going to take inspiration</st> <st c="16369">from it:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Adding the substract method in calculator.component.ts](img/B21146_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16474">Figure 3.15 – Adding the substract method in calculator.component.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16542">The result in</st> <st c="16556">our</st> `<st c="16561">calculator.component.spec.ts</st>`
    <st c="16589">test file is</st> <st c="16603">as expected:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – subtract method test case without error](img/B21146_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16856">Figure 3.16 – subtract method test case without error</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16909">When we take a tour of the terminal, we get</st> <st c="16954">this
    preview:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Test coverage of our app](img/B21146_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17211">Figure 3.17 – Test coverage of our app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17249">We’ll do the same exercise for multiplication and division.</st>
    <st c="17310">In our</st> `<st c="17317">calculator.component.spec.ts</st>`<st
    c="17345">, we’ll</st> <st c="17353">get this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Adding multiply and divide methods test cases](img/B21146_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17826">Figure 3.18 – Adding multiply and divide methods test cases</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17885">Then in</st> <st c="17894">our</st> `<st c="17898">calculator.service.ts</st>`
    <st c="17919">service, we have</st> <st c="17937">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Adding multiply and divide methods in calculator.service.ts](img/B21146_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18094">Figure 3.19 – Adding multiply and divide methods in calculator.service.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18167">And finally, in our</st> `<st c="18188">calculator.component.ts</st>`<st
    c="18211">, we have</st> <st c="18221">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Adding multiply and divide methods in calculator.component.ts](img/B21146_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18421">Figure 3.20 – Adding multiply and divide methods in calculator.component.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18496">In our</st> <st c="18503">terminal, we can see</st> <st c="18525">the
    following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Test coverage of our app](img/B21146_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19411">Figure 3.21 – Test coverage of our app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19449">And in our browser, we can see</st> <st c="19481">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – calculator.component.ts test cases succeeded](img/B21146_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19952">Figure 3.22 – calculator.component.ts test cases succeeded</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20010">In the next section, we’ll make things a little more interesting.</st>
    <st c="20077">We’re going to turn our</st> `<st c="20101">result</st>` <st c="20107">variable
    into an observable.</st> <st c="20137">This way, we won’t have to call it up every
    time in our component’s calculation methods.</st> <st c="20226">This will also
    enable us to see how to test</st> <st c="20270">an observable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20284">Using rigorous directive testing to ensure proper rendering and
    functionality</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="20362">Angular directives play a vital role in structuring and enhancing
    the functionality of web applications.</st> <st c="20468">They allow developers
    to manipulate the DOM, create reusable components, and provide dynamic behavior.</st>
    <st c="20571">Directive testing is the process of verifying that directives render
    correctly and function as expected.</st> <st c="20676">By thoroughly testing directives,
    developers can identify and fix issues before they impact the application’s overall
    performance and</st> <st c="20810">user experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20826">In our current calculator application development project, we’re
    going to use a directive to apply a color to the calculation result displayed
    on</st> <st c="20973">the screen.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20984">Implementing color change directives</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="21021">To handle color</st> <st c="21038">changes in our Angular calculator
    application, we’re going to create a custom directive.</st> <st c="21127">Directives
    allow us to extend the functionality of HTML elements and encapsulate</st> <st
    c="21208">specific behaviors.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21227">In this case, we’ll create a directive called</st> `<st c="21274">colorChange</st>`
    <st c="21285">that will be responsible for handling color transitions.</st> <st
    c="21343">The directive will accept an input parameter specifying the color to
    be changed.</st> <st c="21424">It will then apply the CSS styles required to achieve
    the</st> <st c="21482">desired effect.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21497">To create the</st> <st c="21512">directive, follow</st> <st c="21530">these
    steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21542">Create a</st> `<st c="21552">directives</st>` <st c="21562">folder
    in the</st> `<st c="21577">core</st>` <st c="21581">folder of our project.</st>
    <st c="21605">So, we’ll basically have</st> `<st c="21630">src/core/directives</st>`<st
    c="21649">, and we’ll execute the following command from our terminal while in
    the</st> `<st c="21722">directives</st>` <st c="21732">folder:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 3.23 – Adding ColorChangeDirective in the declarations array of CalculatorModule](img/B21146_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22200">Figure 3.23 – Adding ColorChangeDirective in the declarations
    array of CalculatorModule</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22287">Then, in our</st> `<st c="22301">color-change.directive.ts</st>`
    <st c="22326">file, in the</st> `<st c="22340">selector</st>` <st c="22348">attribute,
    we’ll replace</st> `<st c="22374">appColorChange</st>` <st c="22388">with a</st>
    <st c="22396">simple</st> `<st c="22403">colorChange</st>`<st c="22414">:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Changing the selector name of ColorChangeDirective](img/B21146_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22517">Figure 3.24 – Changing the selector name of ColorChangeDirective</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22581">Now that we</st> <st c="22594">have created the</st> `<st c="22611">colorChange</st>`
    <st c="22622">directive, let’s move on to the next section, whe</st><st c="22672">re
    will write tests for this newly</st> <st c="22708">created directive.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22726">Writing tests for the colorChange directive</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="22770">As we are</st> <st c="22781">following the TDD approach, our tests
    should check the use of</st> <st c="22843">our directive.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22857">When we apply a color to our HTML content through the directive,
    that color should change.</st> <st c="22949">Our test will naturally fail because
    we haven’t yet written the appropriate code for our</st> `<st c="23038">colorChange</st>`
    <st c="23049">directive.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23060">Subsequently, we’ll write the minimum amount of code necessary
    for our test to pa</st><st c="23142">ss, and refactor it</st> <st c="23163">if
    necessary.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23176">In our</st> `<st c="23184">color-chnage.directive.spec.ts</st>`
    <st c="23214">file, we have</st> <st c="23229">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="23477">We’re going to modify the previous code and complete the test
    suites in line with the</st> <st c="23564">expected logic.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23579">In the previous code, when our directive is created, we notice
    that the written test checks whether the instance exists by creating an object.</st>
    <st c="23723">In our scenario, we won’t do this.</st> <st c="23758">We’ll declare
    our directive directly in the</st> `<st c="23802">configureTestingModule</st>`
    <st c="23824">method, which guarantees its existence and the possibility of accessing
    it without passing through the</st> <st c="23927">constructor.</st> <st c="23941">This
    will give us the</st> <st c="23963">following result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <st c="24270">The preceding code will be our starting point.</st> <st c="24318">Now
    for a quick reminder.</st> <st c="24344">When we want to use a directive on an
    HTML tag that takes a property as a parameter, here’s what it</st> <st c="24444">looks
    like:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <st c="24486">According to the preceding code,</st> `<st c="24520">colorChange</st>`
    <st c="24531">is our directive.</st> <st c="24550">It takes</st> `<st c="24559">color</st>`
    <st c="24564">as a parameter.</st> <st c="24581">This implies that color is an
    attribute of our component.</st> <st c="24639">So, we’re going to call our</st>
    `<st c="24667">CalculatorComponent</st>` <st c="24686">for our test suite, linked
    to the directive, so that we can interact with it.</st> <st c="24765">Here’s what
    it</st> <st c="24780">looks like:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <st c="25409">We know that</st> <st c="25423">we need to select our paragraph,</st>
    `<st c="25456">p</st>`<st c="25457">, in the component</st> `<st c="25476">CalculatorComponent</st>`
    <st c="25495">to change the color of our paragraph,</st> `<st c="25534">p</st>`<st
    c="25535">, as we see fit.</st> <st c="25552">As we only have one paragraph in
    the component, here’s how we</st> <st c="25614">can proceed:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <st c="26547">In the preceding code, we’ve managed to select the paragraph using</st>
    `<st c="26615">By</st>`<st c="26617">. So, since the</st> `<st c="26633">color</st>`
    <st c="26638">attribute will be used to define the color of our paragraph, we
    will use it in our test suite.</st> <st c="26734">The code editor highlights</st>
    `<st c="26761">color</st>` <st c="26766">in red because we haven’t yet declared
    it in our component.</st> <st c="26827">We’ll</st> <st c="26833">make the necessary
    changes to our</st> <st c="26867">component next.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26882">In the</st> `<st c="26890">CalculatorComponent</st>` <st c="26909">class,
    we’ll declare the</st> `<st c="26935">color</st>` <st c="26940">attribute:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Adding the color attribute in calculator.component.ts](img/B21146_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="26984">Figure 3.25 – Adding the color attribute in calculator.component.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27051">In the HTML file, we have</st> <st c="27078">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27136">In the preceding code, notice that</st> `<st c="27172">[colorChange]</st><st
    c="27185">="color"</st>` <st c="27194">is considered an error in our</st> <st
    c="27225">HTML template:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Adding a colorChange directive with an error](img/B21146_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27548">Figure 3.26 – Adding a colorChange directive with an error</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27606">This is normal, as our directive is missing a declaration.</st>
    <st c="27666">Since the direction takes an attribute as a parameter, we need to</st>
    <st c="27732">declare it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27743">Here’s what we need to do in our</st> `<st c="27777">color-change.directive.ts</st>`
    <st c="27802">directive:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27992">In our HTML</st> <st c="28004">template for the</st> `<st c="28022">calculator</st>`
    <st c="28032">component, there are no</st> <st c="28057">more errors:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – Adding a colorChange directive without errors](img/B21146_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="28114">Figure 3.27 – Adding a colorChange directive without errors</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28173">Nevertheless, we’ll always have</st> `<st c="28206">calculator.component.spec.ts</st>`
    <st c="28234">test cases that have failed, and we’ll display this on the screen
    when we run</st> <st c="28313">our tests:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – calculator.component.ts test failed due to colorChange](img/B21146_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="32046">Figure 3.28 – calculator.component.ts test failed due to colorChange</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32114">To fix this, we</st> <st c="32130">need to declare our directive
    in the test file of our</st> `<st c="32185">CalculatorComponent</st>`<st c="32204">,</st>
    <st c="32206">namely</st> `<st c="32213">calculator.component.spec.ts</st>`<st
    c="32241">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – Updating the beforeEach method in calculator.component.spec.ts](img/B21146_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="32408">Figure 3.29 – Updating the beforeEach method in calculator.component.spec.ts</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32484">We’ll then have just</st> <st c="32506">one error:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – calculator.component.ts test failed due to colorChange](img/B21146_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33066">Figure 3.30 – calculator.component.ts test failed due to colorChange</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33134">Thi</st><st c="33138">s error is due to the fact that we haven’t
    yet written the logic for our directive.</st> <st c="33223">We need to write the
    minimum amount of code for the test</st> <st c="33280">to pass:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: <st c="33672">In the preceding</st> <st c="33690">code, we implemented the</st>
    `<st c="33715">ngOnInit()</st>` <st c="33725">lifecycle to ensure that the directive
    is loaded into the DOM.</st> <st c="33789">Then we injected dependencies into
    the constructor, namely</st> `<st c="33848">ElementRef</st>` <st c="33858">and</st>
    `<st c="33863">Renderer2</st>`<st c="33872">, to manipulate the HTML element and
    apply the style to it.</st> <st c="33932">The result can be seen in the</st> <st
    c="33962">following screenshot:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31 – ColorChangeDirective test succeeded](img/B21146_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34509">Figure 3.31 – ColorChangeDirective test succeeded</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34558">By implementing custom directives and writing rigorous tests following
    the TDD principles, we can ensure that our application behaves as expected, providing
    users with a visually appealing and</st> <st c="34752">interactive experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34775">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="34783">This chapter covered various aspects of component testing, including
    initializing components, rendering templates, handling events, and manipulating
    the DOM.</st> <st c="34942">It explained how to use Angular’s testing utilities,
    such as</st> `<st c="35003">TestBed</st>` <st c="35010">and</st> `<st c="35015">ComponentFixture</st>`<st
    c="35031">, for setting up and interacting with components during testing.</st>
    <st c="35096">It provided insights into testing Angular services, including testing
    service methods and handling dependencies.</st> <st c="35209">It explored the
    testing of Angular directives, focusing on testing directive behavior and interactions
    with the DOM.</st> <st c="35326">It explained how to test directive attributes,
    inputs, and</st> <st c="35385">outputs effectively.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35405">In the next chapter, we’ll look at how to mock and stub dependencies</st>
    <st c="35475">in Angular.</st>
  prefs: []
  type: TYPE_NORMAL
