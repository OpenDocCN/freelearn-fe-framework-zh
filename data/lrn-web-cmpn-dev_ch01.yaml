- en: Chapter 1. Introducing Web Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 介绍网页组件
- en: In this chapter, we will learn about the web component specification in detail.
    Web component is changing the web application development process. It comes with
    standard and technical features, such as templates, custom elements, Shadow DOM,
    and HTML Imports.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细了解网页组件规范。网页组件正在改变网络应用程序的开发过程。它带来了标准和技术特性，如模板、自定义元素、Shadow DOM和HTML导入。
- en: 'The main topics that we will cover in this chapter about web component specification
    are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的关于网页组件规范的主要主题如下：
- en: What are web components?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是网页组件？
- en: Benefits and challenges of web components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页组件的优缺点
- en: The web component architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页组件架构
- en: Template element
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板元素
- en: HTML Import
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML导入
- en: Shadow DOM
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shadow DOM
- en: Custom elements
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义元素
- en: Building a digital clock component
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建数字时钟组件
- en: The X-Tag library
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: X-Tag库
- en: web component libraries
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页组件库
- en: What are web components?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是网页组件？
- en: Web components are a W3C specification to build a standalone component for web
    applications. It helps developers leverage the development process to build reusable
    and reliable widgets. A web application can be developed in various ways, such
    as page focus development and navigation-based development, where the developer
    writes the code based on the requirement. All of these approaches fulfil the present
    needs of the application, but may fail in the reusability perspective. This problem
    leads to component-based development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 网页组件是W3C规范，用于构建用于网络应用程序的独立组件。它帮助开发者利用开发过程来构建可重用和可靠的控件。网络应用程序可以通过多种方式开发，例如页面焦点开发和基于导航的开发，其中开发者根据需求编写代码。所有这些方法都满足了当前应用程序的需求，但在可重用性方面可能会失败。这个问题导致了基于组件的开发。
- en: Benefits and challenges of web components
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页组件的优缺点
- en: 'There are many benefits of web components:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 网页组件有许多好处：
- en: A web component can be used in multiple applications. It provides interoperability
    between frameworks, developing the web component ecosystem. This makes it *reusable*.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页组件可以在多个应用程序中使用。它提供了框架之间的互操作性，发展了网页组件生态系统。这使得它*可重用*。
- en: A web component has a template that can be used to put the entire markup separately,
    making it more *maintainable*.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页组件有一个模板，可以用来将整个标记分开，使其更*易于维护*。
- en: As web components are developed using HTML, CSS, and JavaScript, it can run
    on different browsers. This makes it *platform independent*.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于网页组件是使用HTML、CSS和JavaScript开发的，因此它可以在不同的浏览器上运行。这使得它*平台无关*。
- en: Shadow DOM provides *encapsulation mechanism* to style, script, and HTML markup.
    This encapsulation mechanism provides **private scope** and prevents the content
    of the component being affected by the external document.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shadow DOM提供了*封装机制*来样式化、脚本化和HTML标记。这种封装机制提供了**私有作用域**，并防止组件内容受到外部文档的影响。
- en: 'Equally, some of the challenges for a web component include:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，网页组件的一些挑战包括：
- en: '**Implementation**: The W3C web component specification is very new to the
    browser technology and not completely implemented by the browsers.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现**：W3C网页组件规范对浏览器技术来说非常新，并且浏览器尚未完全实现。'
- en: '**Shared resource**: A web component has its own scoped resources. There may
    be cases where some of the resources between the components are common.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享资源**：网页组件有其自己的作用域资源。可能存在一些资源在组件之间是共有的。'
- en: '**Performance**: Increase in the number of web components takes more time to
    get used inside the DOM.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：增加的网页组件数量需要更多时间才能在DOM中使用。'
- en: '**Polyfill size**: The polyfill are a workaround for a feature that is not
    currently implemented by the browsers. These polyfill files have a large memory
    foot print.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Polyfill大小**：polyfill是针对浏览器尚未实现的功能的解决方案。这些polyfill文件有较大的内存占用。'
- en: '**SEO**: As the HTML markup present inside the template is inert, it creates
    problems in the search engine for the indexing of web pages.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SEO**：由于模板中存在的HTML标记是静态的，这给搜索引擎索引网页带来了问题。'
- en: The web component architecture
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页组件架构
- en: 'The W3C web component specification has four main building blocks for component
    development. Web component development is made possible by template, HTML Imports,
    Shadow DOM, and custom elements and decorators. However, decorators do not have
    a proper specification at present, which results in the four pillars of web component
    paradigm. The following diagram shows the building blocks of web component:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: W3C Web组件规范为组件开发提供了四个主要构建块。模板、HTML导入、Shadow DOM和自定义元素及装饰器使得Web组件开发成为可能。然而，装饰器目前还没有合适的规范，这导致了Web组件范式四个支柱的出现。以下图表显示了Web组件的构建块：
- en: '![The web component architecture](img/image00197.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Web组件架构](img/image00197.jpeg)'
- en: These four pieces of technology power a web component that can be reusable across
    the application. In the coming section, we will explore these features in detail
    and understand how they help us in web component development.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这四项技术为可以跨应用重用的Web组件提供了动力。在接下来的部分中，我们将详细探讨这些功能，并了解它们如何帮助我们进行Web组件开发。
- en: Template element
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板元素
- en: The HTML `<template>` element contains the HTML markup, style, and script, which
    can be used multiple times. The templating process is nothing new to a web developer.
    Handlebars, Mustache, and Dust are the templating libraries that are already present
    and heavily used for web application development. To streamline this process of
    template use, W3C web component specification has included the `<template>` element.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: HTML `<template>`元素包含HTML标记、样式和脚本，可以多次使用。对于Web开发者来说，模板过程并不陌生。Handlebars、Mustache和Dust是已经存在并且被广泛用于Web应用开发的模板库。为了简化模板使用的过程，W3C
    Web组件规范包括了`<template>`元素。
- en: This template element is very new to web development, so it lacks features compared
    to the templating libraries such as Handlebars.js that are present in the market.
    In the near future, it will be equipped with new features, but, for now, let's
    explore the present template specification.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板元素在Web开发中非常新，所以与市场上现有的模板库（如Handlebars.js）相比，它缺少一些功能。在不久的将来，它将配备新功能，但就目前而言，让我们来探索当前的模板规范。
- en: Template element detail
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板元素详情
- en: 'The HTML `<template>` element is an `HTMLTemplateElement` interface. The **interface
    definition language** (**IDL**) definition of the template element is listed in
    the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: HTML `<template>`元素是一个`HTMLTemplateElement`接口。模板元素的**接口定义语言**（**IDL**）定义如下代码所示：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code is written in IDL language. This IDL language is used by
    the W3C for writing specification. Browsers that support HTML Import must implement
    the aforementioned IDL. The details of the preceding code are listed here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是用IDL语言编写的。这种IDL语言被W3C用于编写规范。支持HTML导入的浏览器必须实现上述IDL。上述代码的详细信息如下：
- en: '`HTMLTemplateElement`: This is the template interface and extends the `HTMLElement`
    class.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTMLTemplateElement`：这是一个模板接口，它扩展了`HTMLElement`类。'
- en: '`content`: This is the only attribute of the HTML template element. It returns
    the content of the template and is read-only in nature.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`：这是HTML模板元素的唯一属性。它返回模板的内容，并且本质上是只读的。'
- en: '`DocumentFragment`: This is a return type of the `content` attribute. `DocumentFragment`
    is a lightweight version of the document and does not have a parent.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DocumentFragment`：这是`content`属性的返回类型。`DocumentFragment`是文档的一个轻量级版本，并且没有父元素。'
- en: Note
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about `DocumentFargment`, use the following link:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于`DocumentFragment`的信息，请使用以下链接：
- en: '[https://developer.mozilla.org/en/docs/Web/API/DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en/docs/Web/API/DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment)'
- en: Template feature detection
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板功能检测
- en: 'The HTML `<template>` element is very new to web application development and
    not completely implemented by all browsers. Before implementing the template element,
    we need to check the browser support. The JavaScript code for template support
    in a browser is listed in the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: HTML `<template>`元素在Web应用开发中非常新，并且并非所有浏览器都完全实现了它。在实现模板元素之前，我们需要检查浏览器支持。以下是在浏览器中支持模板的JavaScript代码：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code, the `isTemplateSupported` method checks the `content`
    property present inside the template element. If the `content` attribute is present
    inside the template element, this method returns either `true` or `false`. If
    the template element is supported by the browser, the `h1` element will show the
    support message. The browser that is used to run the preceding code is Chrome
    39 release. The output of the preceding code is shown in following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`isTemplateSupported` 方法检查模板元素内部是否存在 `content` 属性。如果模板元素内部存在 `content`
    属性，此方法将返回 `true` 或 `false`。如果浏览器支持模板元素，则 `h1` 元素将显示支持信息。运行前面代码所使用的浏览器是 Chrome
    39 版本。前面代码的输出在以下屏幕截图中显示：
- en: '![Template feature detection](img/image00198.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![模板功能检测](img/image00198.jpeg)'
- en: The preceding screenshot shows that the browser used for development is supporting
    the HTML template element.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示，用于开发的浏览器支持 HTML 模板元素。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'There is also a great online tool called **Can I Use** for checking support
    for the template element in the current browser. To check out the template support
    in the browser, use the following link:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个名为 **Can I Use** 的优秀在线工具，用于检查当前浏览器对模板元素的支持情况。要检查浏览器中的模板支持，请使用以下链接：
- en: '[http://caniuse.com/#feat=template](http://caniuse.com/#feat=template)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://caniuse.com/#feat=template](http://caniuse.com/#feat=template)'
- en: The following screenshot shows the current status of the support for the template
    element in the browsers using the **Can I Use** online tool.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了使用 **Can I Use** 在线工具的浏览器对模板元素支持的当前状态。
- en: '![Template feature detection](img/image00199.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![模板功能检测](img/image00199.jpeg)'
- en: Inert template
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 惰性模板
- en: 'The HTML content inside the template element is inert in nature until it is
    activated. The inertness of template content contributes to increasing the performance
    of the web application. The following code demonstrates the inertness of the template
    content:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 模板元素内的 HTML 内容在激活之前是惰性的。模板内容的惰性有助于提高 Web 应用程序的性能。以下代码演示了模板内容的惰性：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code, a template contains an image element with the `src`
    attribute, pointing to a Gravatar profile image, and an inline JavaScript `alert`
    method. On page load, the `document.getElementById` method is looking for an HTML
    element with the `#profileImage` ID. The output of the preceding code is shown
    in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，一个模板包含一个具有 `src` 属性的图像元素，指向 Gravatar 个人资料图像，以及一个内联 JavaScript `alert`
    方法。在页面加载时，`document.getElementById` 方法正在寻找具有 `#profileImage` ID 的 HTML 元素。前面代码的输出在以下屏幕截图中显示：
- en: '![Inert template](img/image00200.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![惰性模板](img/image00200.jpeg)'
- en: The preceding screenshot shows that the script is not able to find the HTML
    element with the `profileImage` ID and renders `null` in the browser. From the
    preceding screenshot it is evident that the content of the template is inert in
    nature.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示，脚本无法找到具有 `profileImage` ID 的 HTML 元素，并在浏览器中渲染 `null`。从前面屏幕截图可以看出，模板的内容本质上是惰性的。
- en: Activating a template
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活模板
- en: 'By default, the content of the `<template>` element is inert and are not part
    of the DOM. The two different ways that can be used to activate the nodes are
    as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`<template>` 元素的内容是惰性的，并且不属于 DOM 的一部分。可以用来激活节点的方法有两种如下：
- en: Cloning a node
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆节点
- en: Importing a node
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入节点
- en: Cloning a node
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆节点
- en: 'The `cloneNode` method can be used to duplicate a node. The syntax for the
    `cloneNode` method is listed as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`cloneNode` 方法可以用来复制一个节点。`cloneNode` 方法的语法如下所示：'
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The details of the preceding code syntax are listed here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码的语法细节如下所示：
- en: This method can be applied on a node that needs to be cloned.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此方法可以应用于需要克隆的节点。
- en: The return type of this method is `Node`.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此方法的返回类型是 `Node`。
- en: 'The input parameter for this method is of the `Boolean` type and represents
    a type of cloning. There are 2 different types of cloning, listed as follows:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此方法的输入参数是 `Boolean` 类型，表示克隆的类型。有两种不同的克隆类型，如下所示：
- en: '**Deep cloning**: In deep cloning, the children of the targeted node also get
    copied. To implement deep cloning, the `Boolean` input parameter to `cloneNode`
    method needs to be `true`.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度克隆**：在深度克隆中，目标节点的子节点也会被复制。要实现深度克隆，`cloneNode` 方法的 `Boolean` 输入参数需要设置为 `true`。'
- en: '**Shallow cloning**: In shallow cloning, only the targeted node is copied without
    the children. To implement shallow cloning the `Boolean` input parameter to `cloneNode`
    method needs to be `false`.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浅克隆**：在浅克隆中，仅复制目标节点而不包括其子节点。要实现浅克隆，`cloneNode` 方法的布尔输入参数需要设置为 `false`。'
- en: 'The following code shows the use of the `cloneNode` method to copy the content
    of a template, having the `h1` element with some text:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了使用 `cloneNode` 方法复制包含具有一些文本的 `h1` 元素的模板内容：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding code, the template element has the `aTemplate` ID and is referenced
    using the `querySelector` method. The HTML markup content inside the template
    is then retrieved using a `content` property and saved in a `templateContent`
    variable. The `cloneNode` method is then used for deep cloning to get the activated
    node that is later appended to a `div` element. The following screenshot shows
    the output of the preceding code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，模板元素具有 `aTemplate` ID，并使用 `querySelector` 方法进行引用。然后使用 `content` 属性检索模板内的
    HTML 标记内容，并将其保存到 `templateContent` 变量中。接着使用 `cloneNode` 方法进行深度克隆，以获取后来附加到 `div`
    元素上的激活节点。以下截图显示了上述代码的输出：
- en: '![Cloning a node](img/image00201.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![克隆一个节点](img/image00201.jpeg)'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the `cloneNode` method visit:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `cloneNode` 方法的细节，请访问：
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/Node.cloneNode](https://developer.mozilla.org/en-US/docs/Web/API/Node.cloneNode)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/API/Node.cloneNode](https://developer.mozilla.org/en-US/docs/Web/API/Node.cloneNode)'
- en: Importing a node
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入一个节点
- en: 'The `importNode` method is another way of activating the template content.
    The syntax for the aforementioned method is listed in the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`importNode` 方法是激活模板内容的另一种方式。上述方法的语法如下所示：'
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The details of the preceding code syntax are listed as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的语法细节如下所示：
- en: This method returns a copy of the node from an external document.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此方法返回从外部文档中获取的节点副本。
- en: This method takes two input parameters. The first parameter is the target node
    that needs to be copied. The second parameter is a `Boolean` flag and represents
    the way the target node is cloned. If the `Boolean` flag is `false`, the `importNode`
    method makes a shallow copy, and for a `true` value, it makes a deep copy.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此方法接受两个输入参数。第一个参数是需要复制的目标节点。第二个参数是一个布尔标志，表示目标节点的克隆方式。如果布尔标志为 `false`，则 `importNode`
    方法进行浅复制；如果为 `true`，则进行深度复制。
- en: 'The following code shows the use of the `importNode` method to copy the content
    of a template containing an `h1` element with some text:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了使用 `importNode` 方法复制包含具有一些文本的 `h1` 元素的模板内容：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, the template element has the `aTemplate` ID and is referenced
    using the `querySelector` method. The HTML markup content inside the template
    is then retrieved using the `content` property and saved in the `templateContent`
    variable. The `importNode` method is then used for deep cloning to get the activated
    node that is later appended to a `div` element. The following screenshot shows
    the output of the preceding code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，模板元素具有 `aTemplate` ID，并使用 `querySelector` 方法进行引用。然后使用 `content` 属性检索模板内的
    HTML 标记内容，并将其保存到 `templateContent` 变量中。接着使用 `importNode` 方法进行深度克隆，以获取后来附加到 `div`
    元素上的激活节点。以下截图显示了上述代码的输出：
- en: '![Importing a node](img/image00202.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![导入一个节点](img/image00202.jpeg)'
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the `importNode` method, visit:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `importNode` 方法的细节，请访问：
- en: '[http://mdn.io/importNode](http://mdn.io/importNode)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://mdn.io/importNode](http://mdn.io/importNode)'
- en: HTML Import
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 导入
- en: 'The HTML Import is another important piece of technology of the W3C web component
    specification. It provides a way to include another HTML document present in a
    file with the current document. HTML Imports provide an alternate solution to
    the `Iframe` element, and are also great for resource bundling. The syntax of
    the HTML Imports is listed as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 导入是 W3C 网络组件规范的重要技术之一。它提供了一种将当前文档中文件中存在的另一个 HTML 文档包含进来的方法。HTML 导入为 `Iframe`
    元素提供了一个替代方案，并且对于资源打包也非常有用。HTML 导入的语法如下所示：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The details of the preceding syntax are listed here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法的细节如下所示：
- en: The HTML file can be imported using the `<link>` tag and the `rel` attribute
    with import as the value.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用 `<link>` 标签和 `rel` 属性（值为 import）来导入 HTML 文件。
- en: The `href` string points to the external HTML file that needs to be included
    in the current document.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`href` 字符串指向需要包含在当前文档中的外部 HTML 文件。'
- en: 'The HTML `import` element is implemented by the `HTMLElementLink` class. The
    IDL definition of HTML Import is listed in the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: HTML `import`元素由`HTMLElementLink`类实现。HTML导入的IDL定义如下代码所示：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code shows IDL for the HTML Import where the parent interface
    is `LinkImport` which has the `readonly` attribute `import`. The `HTMLLinkElement`
    class implements the `LinkImport` parent interface. The browser that supports
    HTML Import must implement the preceding IDL.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了HTML导入的IDL，其中父接口是`LinkImport`，它具有只读属性`import`。`HTMLLinkElement`类实现了`LinkImport`父接口。支持HTML导入的浏览器必须实现上述IDL。
- en: HTML Import feature detection
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML导入功能检测
- en: 'The HTML Import is new to the browser and may not be supported by all browsers.
    To check the support of the HTML Import in the browser, we need to check for the
    `import` property that is present inside a `<link>` element. The code to check
    the HTML `import` support is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: HTML导入是浏览器的新功能，可能不是所有浏览器都支持。为了检查浏览器中HTML导入的支持情况，我们需要检查`<link>`元素内部是否存在`import`属性。检查HTML
    `import`支持的代码如下：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code has a `isImportSupported` function, which returns the `Boolean`
    value for HTML `import` support in the current browser. The function creates a
    `<link>` element and then checks the existence of an `import` attribute using
    the `in` operator. The following screenshot shows the output of the preceding
    code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码有一个`isImportSupported`函数，该函数返回当前浏览器对HTML `import`支持的`Boolean`值。该函数创建一个`<link>`元素，然后使用`in`运算符检查是否存在`import`属性。以下截图显示了上述代码的输出：
- en: '![HTML Import feature detection](img/image00203.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![HTML导入功能检测](img/image00203.jpeg)'
- en: The preceding screenshot shows that the import is supported by the current browser
    as the `isImportSupported` method returns true.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示，当前浏览器支持导入功能，因为`isImportSupported`方法返回`true`。
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The **Can I Use** tool can also be utilized for checking support for the HTML
    Import in the current browser. To check out the template support in the browser,
    use the following link:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Can I Use**工具也可以用来检查当前浏览器对HTML导入的支持情况。要检查浏览器中的模板支持情况，请使用以下链接：'
- en: '[http://caniuse.com/#feat=imports](http://caniuse.com/#feat=imports)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://caniuse.com/#feat=imports](http://caniuse.com/#feat=imports)'
- en: 'The following screenshot shows the current status of support for the HTML Import
    in browsers using the **Can I Use** online tool:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用**Can I Use**在线工具在浏览器中对HTML导入功能支持的当前状态：
- en: '![HTML Import feature detection](img/image00204.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![HTML导入功能检测](img/image00204.jpeg)'
- en: Accessing the HTML Import document
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问HTML导入文档
- en: 'The HTML Import includes the external document to the current page. We can
    access the external document content using the `import` property of the link element.
    In this section, we will learn how to use the `import` property to refer to the
    external document. The `message.html` file is an external HTML file document that
    needs to be imported. The content of the `message.html` file is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: HTML导入功能将外部文档包含到当前页面中。我们可以通过链接元素的`import`属性来访问外部文档的内容。在本节中，我们将学习如何使用`import`属性来引用外部文档。`message.html`文件是一个需要导入的外部HTML文件文档。`message.html`文件的内容如下：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following code shows the HTML document where the `message.html` file is
    loaded and referenced by the `import` property:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了加载并使用`import`属性引用`message.html`文件的HTML文档：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: In the header section, the `<link>` element is importing the HTML document present
    inside the `message.html` file.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标题部分，`<link>`元素正在导入`message.html`文件中存在的HTML文档。
- en: In the body section, an inline `<script>` element using the `document.querySelector`
    method is referencing the link elements having the `rel` attribute with the `import`
    value. Once the link element is located, the content of this external document
    is copied using the `import` property to the `externalDocument` variable.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主体部分，使用`document.querySelector`方法的内联`<script>`元素引用具有`rel`属性且值为`import`的链接元素。一旦找到链接元素，就使用`import`属性将外部文档的内容复制到`externalDocument`变量中。
- en: The header `h1` element inside the external document is then located using a
    `querySelector` method and saved to the `headerElement` variable.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`querySelector`方法在外部文档中定位`h1`元素，并将其保存到`headerElement`变量中。
- en: The header element is then deep copied using the `cloneNode` method and appended
    to the `body` element of the current document.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用`cloneNode`方法将标题元素深度复制，并将其附加到当前文档的`body`元素中。
- en: 'The following screenshot shows the output of the preceding code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出：
- en: '![Accessing the HTML Import document](img/image00205.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![访问 HTML 导入文档](img/image00205.jpeg)'
- en: HTML Import events
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 导入事件
- en: 'The HTML `<link>` element with the `import` attribute supports two event handlers.
    These two events are listed as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 具有具有 `import` 属性的 HTML `<link>` 元素支持两个事件处理器。这两个事件如下列出：
- en: '`load`: This event is fired when the external HTML file is imported successfully
    onto the current page. A JavaScript function can be attached to the `onload` attribute,
    which can be executed on a successful load of the external HTML file.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load`：当外部 HTML 文件成功导入到当前页面时，会触发此事件。可以将 JavaScript 函数附加到 `onload` 属性，以便在成功加载外部
    HTML 文件时执行。'
- en: '`error`: This event is fired when the external HTML file is not loaded or found(HTTP
    code 404 not found). A JavaScript function can be attached to the `onerror` attribute,
    which can be executed on error of importing the external HTML file.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`：当外部 HTML 文件未加载或找不到时（HTTP 状态码 404 未找到），会触发此事件。可以将 JavaScript 函数附加到 `onerror`
    属性，以便在导入外部 HTML 文件出错时执行。'
- en: 'The following code shows the use of these two event types while importing the
    `message.html` file to the current page:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了在将 `message.html` 文件导入当前页面时使用这两种事件类型：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细信息如下：
- en: '`handleSuccess`: This method is attached to the `onload` attribute which is
    executed on the successful load of `message.html` in the current document. The
    `handleSuccess` method imports the document present inside the `message.html`
    file, then it finds the `h1` element, and makes a deep copy of it . The cloned
    `h1` element then gets appended to the body element.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleSuccess`：此方法附加到 `onload` 属性，在当前文档中成功加载 `message.html` 时执行。`handleSuccess`
    方法导入 `message.html` 文件中的文档，然后找到 `h1` 元素，并对其进行深度复制。然后，复制的 `h1` 元素被附加到 body 元素中。'
- en: '`handleError`: This method is attached to the `onerror` attribute of the `<link>`
    element. This method will be executed if the `message.html` file is not found.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleError`：此方法附加到 `<link>` 元素的 `onerror` 属性。如果找不到 `message.html` 文件，则将执行此方法。'
- en: 'As the `message.html` file is imported successfully, the `handleSuccess` method
    gets executed and header element `h1` is rendered in the browser. The following
    screenshot shows the output of the preceding code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `message.html` 文件导入成功，`handleSuccess` 方法被调用，并在浏览器中渲染了标题元素 `h1`。以下截图显示了前面代码的输出：
- en: '![HTML Import events](img/image00206.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![HTML 导入事件](img/image00206.jpeg)'
- en: Shadow DOM
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shadow DOM
- en: 'Before the web component specification, there were many issues of building
    web applications using HTML, CSS, and JavaScript. Some of the issues are listed
    as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页组件规范之前，使用 HTML、CSS 和 JavaScript 构建网页应用存在许多问题。以下列出了一些问题：
- en: '**Style override**: The document stylesheet may change the style of the web
    component.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样式覆盖**：文档样式表可能会更改网页组件的样式。'
- en: '**Script alteration**: The document JavaScript may alter some part of the web
    component.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本修改**：文档中的 JavaScript 可能会修改网页组件的某些部分。'
- en: '**ID overlap**: There may be a duplicate ID present in the document, which
    can lead to many erroneous situations.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID 冲突**：文档中可能存在重复的 ID，这可能导致许多错误情况。'
- en: From the aforementioned issue list, there is clearly a problem with **scoping**.
    Shadow DOM is another important piece of web component specification that solves
    the scoping problem by the encapsulation mechanism. Shadow DOM provides a way
    of packaging the HTML, CSS, and JavaScript for a web component.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述问题列表中，很明显存在一个**作用域**问题。Shadow DOM 是网页组件规范中另一个重要的部分，通过封装机制解决了作用域问题。Shadow
    DOM 为网页组件提供了打包 HTML、CSS 和 JavaScript 的方法。
- en: 'Most of the HTML5 elements, such as the progress bar, are implemented as Shadow
    DOM by the Chrome browser. We can inspect this Shadow DOM through the Chrome developer
    console. By default, the Chrome developer console will not show Shadow DOM. We
    need to enable the **Show user agent shadow DOM** checkbox present inside the
    settings of the developer console. The following screenshot shows the Chrome developer
    console setting to enable Shadow DOM inspection:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 HTML5 元素，例如进度条，都由 Chrome 浏览器实现为 Shadow DOM。我们可以通过 Chrome 开发者控制台检查这个 Shadow
    DOM。默认情况下，Chrome 开发者控制台不会显示 Shadow DOM。我们需要在开发者控制台的设置中启用“**显示用户代理 Shadow DOM**”复选框。以下截图显示了启用
    Shadow DOM 检查的 Chrome 开发者控制台设置：
- en: '![Shadow DOM](img/image00207.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![Shadow DOM](img/image00207.jpeg)'
- en: 'After enabling the Shadow DOM inspection setting, we can inspect the `<progress>`
    HTML5 element. The following screenshot shows the Chrome developer inspection
    of the progress bar element containing Shadow DOM node:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Shadow DOM 检查设置后，我们可以检查 `<progress>` HTML5 元素。以下截图显示了包含 Shadow DOM 节点的进度条元素的
    Chrome 开发者检查：
- en: '![Shadow DOM](img/image00208.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![Shadow DOM](img/image00208.jpeg)'
- en: In the preceding screenshot, we can see a new element `#shadow-root`. This node
    is the Shadow DOM of the progress bar element. As the progress bar is built in
    the browser element; we can see the user-agent text in parenthesis.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们可以看到一个新元素 `#shadow-root`。这个节点是进度条元素的 Shadow DOM。由于进度条是在浏览器元素中构建的，我们可以看到括号中的用户代理文本。
- en: Shadow DOM feature detection
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shadow DOM feature detection
- en: 'The Shadow DOM support for a browser can be checked by enabling the `createShadowRoot`
    property inside an element. The following code demonstrates a way of detecting
    the support of the Shadow DOM in the current browser:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查浏览器的 Shadow DOM 支持，可以在元素内部启用 `createShadowRoot` 属性。以下代码演示了检测当前浏览器中 Shadow
    DOM 支持的方法：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding code, the `isShadowDOMSupported` method checks the support
    of the Shadow DOM in the current browser by checking the existence of the `createShadowRoot`
    property in the `document.body` element. The following screenshot shows the output
    of the preceding code in the current browser:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`isShadowDOMSupported` 方法通过检查 `document.body` 元素中是否存在 `createShadowRoot`
    属性来检查当前浏览器中 Shadow DOM 的支持情况。以下截图显示了上述代码在当前浏览器中的输出：
- en: '![Shadow DOM feature detection](img/image00209.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Shadow DOM feature detection](img/image00209.jpeg)'
- en: 'The preceding screenshot shows that the Shadow DOM is supported by the current
    browser, as the `isShadowDOMSupport` method returns `true`. We can also check
    the support of the Shadow DOM using the **Can I Use** online tool. The following
    screenshot shows the status of Shadow DOM support in a different browser:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示当前浏览器支持 Shadow DOM，因为 `isShadowDOMSupport` 方法返回 `true`。我们还可以使用 **Can I
    Use** 在线工具检查 Shadow DOM 的支持情况。以下截图显示了不同浏览器中 Shadow DOM 支持的状态：
- en: '![Shadow DOM feature detection](img/image00210.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![Shadow DOM feature detection](img/image00210.jpeg)'
- en: Shadow tree
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shadow tree
- en: 'Shadow DOM brings the ability to include a subtree of DOM elements inside a
    document on the rendering time. The nodes inside DOM are organized as a tree structure.
    A node inside the DOM tree can have its own Shadow DOM tree. This makes the DOM
    a tree of trees. We can classify the DOM tree into three different types:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Shadow DOM 带来了在渲染时在文档中包含 DOM 元素子树的能力。DOM 内部的节点组织成树状结构。DOM 树内的一个节点可以有自己的 Shadow
    DOM 树。这使得 DOM 成为了树的树。我们可以将 DOM 树分为三种不同类型：
- en: '**Document tree**: This represents the normal DOM tree whose root node is a
    document.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档树**：这代表了一个正常的 DOM 树，其根节点是一个文档。'
- en: '**Shadow tree**: This represents the internal DOM subtree formed using HTML
    elements present inside shadow host. The root node of this tree is called **shadow
    root**.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shadow tree**：这代表使用存在于 shadow host 内的 HTML 元素形成的内部 DOM 子树。这个树的根节点被称为 **shadow
    root**。'
- en: '**Composed tree**: This represents the more expanded version of document tree,
    which includes the Shadow DOM trees too and is used by the browser for rendering.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组合树**：这代表文档树的更扩展版本，包括 Shadow DOM 树，并由浏览器用于渲染。'
- en: 'The DOM element that has one or more than one Shadow DOM subtrees is called
    as **host element** or **shadow host**. The following diagram shows a sample DOM
    tree:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 具有一个或多个 Shadow DOM 子树的 DOM 元素被称为 **宿主元素** 或 **shadow host**。以下图显示了示例 DOM 树：
- en: '![Shadow tree](img/image00211.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![Shadow tree](img/image00211.jpeg)'
- en: 'In the preceding diagram, we find out that the node present inside the DOM
    element represents another subtree, which makes the DOM a tree of trees. A browser
    which supports Shadow DOM implementation should follow the IDL definition for
    declaring the shadow root element. The IDL of a shadow root element is listed
    in the following code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述图中，我们发现 DOM 元素内部的节点代表另一个子树，这使得 DOM 成为了树的树。支持 Shadow DOM 实现的浏览器应遵循 IDL 定义来声明
    shadow root 元素。以下代码列出了 shadow root 元素的 IDL：
- en: '[PRE14]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The details of the preceding IDL are listed here:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 IDL 的详细信息如下：
- en: '`getElementById`: This method finds the element present inside the Shadow DOM
    tree with the given ID'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementById`: 此方法查找具有给定 ID 的 Shadow DOM 树内存在的元素'
- en: '`getElementsByClassName`: This method finds the element present inside the
    Shadow DOM tree with the given class name'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementsByClassName`: 此方法查找具有给定类名的 Shadow DOM 树内存在的元素'
- en: '`getElementsByTagName`: This method finds the element present inside the Shadow
    DOM tree with the given tag name'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementsByTagName`: 这个方法查找阴影 DOM 树中具有给定标签名的元素'
- en: '`getElementsByTagNameNS`: This method finds the element present inside the
    Shadow DOM tree with the given namespace and tag name'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getElementsByTagNameNS`: 这个方法查找阴影 DOM 树中具有给定命名空间和标签名的元素'
- en: '`getSelection`: This method returns the selection object for currently selected
    element inside the Shadow DOM tree'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSelection`: 这个方法返回当前在阴影 DOM 树中选中的元素的选中对象'
- en: '`elementFromPoint`: This method returns the element with the given *x* and
    *y* coordinates'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elementFromPoint`: 这个方法返回给定 *x* 和 *y* 坐标的元素'
- en: '`activeElement`: This property returns currently focused element inside the
    Shadow DOM tree'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activeElement`: 这个属性返回当前在阴影 DOM 树中聚焦的元素'
- en: '`host`: This property returns the shadow host element'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`: 这个属性返回阴影宿主元素'
- en: '`olderShadowRoot`: If the element has multiple shadow trees then this property
    returns the shadow root which was created earlier'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`olderShadowRoot`: 如果元素有多个阴影树，则此属性返回创建较早的阴影根'
- en: '`innerHTML`: This property returns the HTML content of the shadow root as a
    string'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innerHTML`: 这个属性返回阴影根的 HTML 内容作为字符串'
- en: '`styleSheets`: This property returns the list of stylesheet objects if the
    shadow tree contains the `<style>` element'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleSheets`: 如果阴影树包含 `<style>` 元素，则此属性返回样式表对象的列表'
- en: 'Now, let''s check out an example which demonstrates the use of these properties
    and the methods of a shadow root. The example code is listed as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一个示例，该示例演示了这些属性和阴影根的方法的使用。示例代码如下所示：
- en: '[PRE15]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the preceding code, the two Shadow DOM subtrees `shadowRoot1` and `shadowRoot2`
    are present for the host element. The `shadowRoot1` subtree is created first and
    `shadowRoot2` is created later. Hence, the `shadowRoot1` subtree is an older shadow
    root. The `shadowRoot2` subtree contains the HTML markup from a template with
    the `selectorTemplate` ID. The `shadowRoot2` subtree has a `<form>` element containing
    a `<label>` and `<input>` element. It also contains some CSS styles inside the
    `<style>` element. The output of the preceding code is presented in the following
    screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，宿主元素存在两个阴影 DOM 子树 `shadowRoot1` 和 `shadowRoot2`。`shadowRoot1` 子树首先创建，然后
    `shadowRoot2` 创建。因此，`shadowRoot1` 子树是一个较旧的阴影根。`shadowRoot2` 子树包含具有 `selectorTemplate`
    ID 的模板的 HTML 标记。`shadowRoot2` 子树包含一个 `<form>` 元素，该元素包含一个 `<label>` 和 `<input>`
    元素。它还包含 `<style>` 元素内的某些 CSS 样式。前面代码的输出在以下截图中展示：
- en: '![Shadow tree](img/image00212.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![阴影树](img/image00212.jpeg)'
- en: 'The following screenshot shows the console log messages, which demonstrate
    the use of the preceding methods for the shadow tree:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了控制台日志消息，这些消息展示了如何使用前面的方法来演示阴影树的使用：
- en: '![Shadow tree](img/image00213.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![阴影树](img/image00213.jpeg)'
- en: 'The following screenshot shows the console log messages that demonstrate the
    use of the preceding properties for the shadow tree:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了控制台日志消息，这些消息展示了如何使用前面的属性来演示阴影树的使用：
- en: '![Shadow tree](img/image00214.jpeg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![阴影树](img/image00214.jpeg)'
- en: Custom element
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义元素
- en: Web component specifications come with the power to create a new element for
    DOM. A custom element can have its own properties and methods. The reasons for
    creating a custom element are less code from the developer's point of view, creating
    a more semantic tag library, reducing the number of `div` tags, and so on. Once
    a web component is developed, it can be used by any application.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Web 组件规范具有为 DOM 创建新元素的能力。自定义元素可以有自己的属性和方法。创建自定义元素的原因从开发者的角度来看，代码更少，创建更语义化的标签库，减少
    `div` 标签的数量等等。一旦开发了一个 Web 组件，它就可以被任何应用程序使用。
- en: Custom element feature detection
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义元素功能检测
- en: 'A new element can be registered to DOM using the `registerElement` method.
    We can detect the support of the custom element in the current browser by checking
    the presence of the `registerElement` function inside document. The following
    JavaScript code shows a method to detect the support for custom element:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `registerElement` 方法将新元素注册到 DOM 中。我们可以通过检查文档中是否存在 `registerElement` 函数来检测当前浏览器对自定义元素的支持。以下
    JavaScript 代码展示了一种检测自定义元素支持的方法：
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the preceding code, the `isCustomElementSupported` method has the code to
    check the custom element support. It uses the `in` operator to check whether the
    `registerElement` function is present inside the document object. If the custom
    element is supported, the method returns true and the success message gets rendered
    in the browser. The following screenshot shows the output of the preceding code
    in the browser:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`isCustomElementSupported` 方法包含检查自定义元素支持的代码。它使用 `in` 操作符检查 `registerElement`
    函数是否存在于文档对象内部。如果自定义元素受支持，该方法返回 true，并在浏览器中渲染成功消息。以下截图显示了浏览器中前面代码的输出：
- en: '![Custom element feature detection](img/image00215.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![自定义元素功能检测](img/image00215.jpeg)'
- en: 'We can also use the **Can I Use** online tool to check the support for custom
    elements. The following screenshot shows the current status of the browser for
    custom element support:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 **Can I Use** 在线工具来检查自定义元素的支持情况。以下截图显示了浏览器对自定义元素支持的现状：
- en: '![Custom element feature detection](img/image00216.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![自定义元素功能检测](img/image00216.jpeg)'
- en: Developing a custom element
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发自定义元素
- en: 'In this section, we will develop a custom element and understand each step
    in detail. The steps involved in developing a custom element are listed here:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发一个自定义元素，并详细了解每个步骤。开发自定义元素涉及的步骤如下所示：
- en: Creating a new object
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新对象
- en: Defining object properties
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义对象属性
- en: Defining lifecycle methods
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义生命周期方法
- en: Registering a new element
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册新元素
- en: Extending an element
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展元素
- en: Creating a new object
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新对象
- en: 'A new object can be created using the `Object.create` method. The syntax of
    this method is listed here:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `Object.create` 方法创建一个新对象。此方法的语法如下所示：
- en: '[PRE17]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `Object.create` method takes two parameters. The first parameter is the
    target prototype of the newly created object. The second parameter contains the
    properties of the newly created object. The second parameter is optional. The
    following code defines a new object:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.create` 方法接受两个参数。第一个参数是新建对象的目标原型。第二个参数包含新建对象的属性。第二个参数是可选的。以下代码定义了一个新对象：'
- en: '[PRE18]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code, a new object is created that has the `HTMLElement.prototype`
    parameter and is saved in the `objectPrototype` variable.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，创建了一个具有 `HTMLElement.prototype` 参数的新对象，并将其保存在 `objectPrototype` 变量中。
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the `Object.create` method, use the following link:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `Object.create` 方法的信息，请使用以下链接：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)'
- en: Defining object properties
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义对象属性
- en: 'We can define the property of an object using two different methods `defineProperty`
    and `defineProperties`. The `defineProperty` method is used to create a single
    property, and the `defineProperties` method for multiple properties. The syntax
    of these methods is listed here:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用两种不同的方法 `defineProperty` 和 `defineProperties` 来定义对象的属性。`defineProperty`
    方法用于创建单个属性，而 `defineProperties` 方法用于创建多个属性。这些方法的语法如下所示：
- en: '[PRE19]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The details of the preceding syntax are listed as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法的详细信息如下所示：
- en: '`targetObject`: This represents the target object for which the property needs
    to be defined.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`targetObject`: 这代表需要定义属性的的目标对象。'
- en: '`propertyName`: This represents the key of the property.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propertyName`: 这代表属性的键。'
- en: '`propertySettings`: This represents all the configuration options for a property.
    The possible settings options are listed here:'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propertySettings`: 这代表属性的配置选项。可能的设置选项如下所示：'
- en: '`configurable`: This takes a Boolean value. For a `true` value, the type of
    property can be changed or deleted. For a `false` value, the property type cannot
    be changed and deleted.'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configurable`: 这是一个布尔值。对于 `true` 值，属性的类型可以被更改或删除。对于 `false` 值，属性类型不能被更改和删除。'
- en: '`enumerable`: This takes a Boolean value. For a `true` value, the property
    will be enumerated as its own property.'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enumerable`: 这是一个布尔值。对于 `true` 值，属性将被枚举为其自己的属性。'
- en: '`value`: This takes any JavaScript value. It represents the value associated
    with the property.'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`: 这可以接受任何 JavaScript 值。它代表与属性关联的值。'
- en: '`writable`: This takes a Boolean value. For a `true` value, the associated
    value of the property can be updated using assignment operator.'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writable`：这接受一个布尔值。对于 `true` 值，可以使用赋值运算符更新属性的关联值。'
- en: '`get`: This takes a function. It returns the value of the property.'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get`：这接受一个函数。它返回属性的值。'
- en: '`set`: This takes a function. It sets the input value to the property.'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set`：这接受一个函数。它将输入值设置为属性。'
- en: 'The following code shows an example of defining a single property named `title`
    for `newObject` that is writable:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了为 `newObject` 定义一个名为 `title` 的可写属性：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the `Object.defineProperty` method, use the following
    link:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `Object.defineProperty` 方法的详情，请使用以下链接：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)'
- en: 'The following code shows an example of defining multiple properties like `title`
    and `country` for the `newObject` variable. The `title` property is writable,
    and the `country` property is not writable and has a fixed value `India`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了为 `newObject` 变量定义多个属性，如 `title` 和 `country`。`title` 属性是可写的，而 `country`
    属性不可写，其固定值为 `India`：
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the `Object.defineProperties` method, use the following
    link:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `Object.defineProperties` 方法的详情，请使用以下链接：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)'
- en: Defining lifecycle methods
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义生命周期方法
- en: 'An object in JavaScript goes through different states during its lifecycle.
    The different states of an object lifecycle are listed here:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 的生命周期中，对象会经历不同的状态。对象生命周期的不同状态如下所示：
- en: '`created`: An object is in the `created` state when it is initialized. The
    event handler for this state is the `createdCallback` method.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created`：当对象初始化时，它处于 `created` 状态。此状态的事件处理方法是 `createdCallback` 方法。'
- en: '`attached`: An object is in the `attached` state when it is inserted to the
    DOM. The event handler for this state is the `attachedCallback` method.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attached`：当对象被插入到 DOM 中时，它处于 `attached` 状态。此状态的事件处理方法是 `attachedCallback`
    方法。'
- en: '`detached`: An object is in the `detached` state when it is removed from the
    DOM. The event handler for this state is the `detachedCallback` method.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`detached`：当对象从 DOM 中移除时，它处于 `detached` 状态。此状态的事件处理方法是 `detachedCallback` 方法。'
- en: '`attributeChanged`: An object is in the `attaributeChanged` state when one
    of its property''s values is updated. The event handler for this state is the
    `attributeChangedCallback` method.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeChanged`：当对象的一个属性值被更新时，对象处于 `attaributeChanged` 状态。此状态的事件处理方法是 `attributeChangedCallback`
    方法。'
- en: 'The following code shows an example where an object is created using the `Object.create`
    method, and a callback method is attached for the created state:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了如何使用 `Object.create` 方法创建一个对象，并为创建的状态附加一个回调方法：
- en: '[PRE22]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Registering a new element
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册新元素
- en: 'A new element can be registered to the DOM using the `document.registerElement`
    method. The syntax of this method is listed here:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `document.registerElement` 方法将新元素注册到 DOM 中。此方法的语法如下：
- en: '[PRE23]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The details of the preceding syntax are listed as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了先前语法的详细信息：
- en: '`tag-name`: This represents the name of the custom element. The name must be
    separated with a hyphen.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tag-name`：这代表自定义元素的名字。名字必须用连字符分隔。'
- en: '`settings`: This takes the configuration option for the custom element.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings`：这用于指定自定义元素的配置选项。'
- en: '`constructor` : The `registerElement` method returns the constructor of new
    element.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constructor`：`registerElement` 方法返回新元素的构造函数。'
- en: 'The following code shows an example of registering a new element named `welcome-message`
    to the DOM. The prototype of the `welcome-message` element is `objectPrototype`,
    which is created using the `Object.create` method:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了如何将名为 `welcome-message` 的新元素注册到 DOM 中。`welcome-message` 元素的原型是 `objectPrototype`，它是通过
    `Object.create` 方法创建的：
- en: '[PRE24]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the `document.registerElement` method, use the following
    link:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `document.registerElement` 方法的详情，请使用以下链接：
- en: '[https://developer.mozilla.org/en-US/docs/Web/API/document.registerElement](https://developer.mozilla.org/en-US/docs/Web/API/document.registerElement)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/API/document.registerElement](https://developer.mozilla.org/en-US/docs/Web/API/document.registerElement)'
- en: Extending an element
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展元素
- en: 'An element can inherit a native or another custom element. The `extend` property
    is used to inherit another element. The following code shows an example of extending
    an `<i>` element:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 一个元素可以继承原生或另一个自定义元素。使用 `extend` 属性来继承另一个元素。以下代码显示了扩展 `<i>` 元素的示例：
- en: '[PRE25]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `is` operator is used to define the type of an HTML element. The following
    code shows if an element is of the italic type:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `is` 操作符来定义 HTML 元素的类型。以下代码显示了如果元素是斜体类型：
- en: '[PRE26]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Example of a custom element
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义元素的示例
- en: 'In this section, we will create a simple custom element named `<my-message>`.
    Code for the `<my-message>` element is as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个简单的自定义元素 `<my-message>`。`<my-message>` 元素的代码如下：
- en: '[PRE27]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Tip
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载示例代码文件，以获取您购买的所有
    Packt 出版物的代码。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: 'In the preceding code, a custom `my-name` element is defined using the `registerElement`
    method. It has the `title` attribute, which has been defined using the `Object.defineProperty`
    method. A `createdCallback` method is added, which takes the input string of the
    `title` property and inserts it using the `innerText` property. The following
    screenshot shows the output of the preceding code:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用 `registerElement` 方法定义了一个自定义的 `my-name` 元素。它有一个 `title` 属性，该属性已使用
    `Object.defineProperty` 方法定义。添加了一个 `createdCallback` 方法，该方法接受 `title` 属性的输入字符串并使用
    `innerText` 属性插入它。以下截图显示了前面代码的输出：
- en: '![Example of a custom element](img/image00217.jpeg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![自定义元素的示例](img/image00217.jpeg)'
- en: Node distribution
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点分布
- en: 'The composed tree takes part in rendering the DOM inside the browser. The Shadow
    DOM subtree of the nodes gets arranged for display. The arrangements of the nodes
    are done by a distribution mechanism with the help of specific insertion points.
    These insertion points are of two types:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 组合树参与在浏览器内部渲染 DOM。节点的阴影 DOM 子树被安排进行显示。节点的安排是通过一个具有特定插入点的分配机制完成的。这些插入点有两种类型：
- en: Content insertion point
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容插入点
- en: Shadow insertion point
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阴影插入点
- en: A content insertion point
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容插入点
- en: A content insertion point is a **placeholder** for child nodes of the shadow
    host distribution. It works like a marker, which reprojects the child nodes of
    the shadow host. A content insertion point can be defined using the `<content>`
    element. The `<content>` element has a `select` attribute through which we can
    filter out the **reprojection**.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 内容插入点是一个**占位符**，用于阴影宿主分布的子节点。它就像一个标记，重新投影阴影宿主的子节点。可以使用 `<content>` 元素定义内容插入点。`<content>`
    元素有一个 `select` 属性，通过它可以过滤掉**重新投影**。
- en: 'The following code gives an example of the use of the `<content>` element with
    the `select` attribute:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码给出了使用 `<content>` 元素和 `select` 属性的示例：
- en: '[PRE28]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A detailed explanation of the preceding code is listed here:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的详细解释：
- en: A custom element named `<selector-component>` is created, which has a list of
    fruits and flowers.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个名为 `<selector-component>` 的自定义元素，其中包含水果和花卉的列表。
- en: The HTML template of the custom element has two `<content>` elements. One content
    element filters out all the flowers using the `select` attribute with the `b.flower`
    value, and the other `<content>` element filters out all the fruits using the
    `select` attribute with the `b.fruit` value.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义元素的 HTML 模板有两个 `<content>` 元素。一个内容元素使用具有 `b.flower` 值的 `select` 属性过滤掉所有花卉，另一个
    `<content>` 元素使用具有 `b.fruit` 值的 `select` 属性过滤掉所有水果。
- en: 'The following screenshot shows the output of the preceding code of filtering
    fruit and flower in a separate group:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码过滤水果和花卉在单独组中的输出：
- en: '![A content insertion point](img/image00218.jpeg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![内容插入点](img/image00218.jpeg)'
- en: A shadow insertion point
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阴影插入点
- en: 'Shadow insertion points are placeholders for other shadow trees. This insertion
    point reprojects the elements of other shadow trees. A shadow insertion point
    can be created using the `<shadow>` element. The following code gives an example
    of the use of the shadow insertion point:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 影子插入点是其他影子树的占位符。此插入点重新投影其他影子树的元素。可以使用 `<shadow>` 元素创建影子插入点。以下代码给出了使用影子插入点的示例：
- en: '[PRE29]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了前面代码的详细信息：
- en: There are two shadow roots, `shadowRoot1(old)` and `shadowRoot2(new)`, created
    for the `<div>` element with the `aShadowHost` ID.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为具有 `aShadowHost` ID 的 `<div>` 元素创建了两个影子根，分别是 `shadowRoot1(old)` 和 `shadowRoot2(new)`。
- en: The `shadow1Template` is the HTML template for `shadowRoot1`, and `shadow2Template`
    is the HTML template for `shadow2Root`.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shadow1Template` 是 `shadowRoot1` 的 HTML 模板，而 `shadow2Template` 是 `shadow2Root`
    的 HTML 模板。'
- en: The `shadow1Template` contains a `<button>` element, and `shadow2Template` contains
    a `<fieldset>` and `<legend>` element. The `<fieldset>` element also has a `<shadow>`
    insertion point.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shadow1Template` 包含一个 `<button>` 元素，而 `shadow2Template` 包含一个 `<fieldset>`
    和 `<legend>` 元素。`<fieldset>` 元素还有一个 `<shadow>` 插入点。'
- en: During rendering of the page, the shadow insertion point will take the older
    shadow root content and insert it in the shadow insertion point.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在页面渲染过程中，影子插入点将取较老的影子根内容并将其插入到影子插入点中。
- en: The following screenshot shows the output of the preceding code, where the older
    shadow root elements are reprojected and rendered inside the `<fieldset>` element,
    which belongs to the younger shadow root, that is, `shadowRoot1`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，其中较老的影子根元素被重新投影并渲染在属于较年轻影子根的 `<fieldset>` 元素内部，即 `shadowRoot1`。
- en: '![A shadow insertion point](img/image00219.jpeg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![影子插入点](img/image00219.jpeg)'
- en: Styling web components
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化网页组件
- en: 'The way we styled the HTML DOM elements earlier needs to be changed with the
    emergence of the web component specification. In this section, we will explore
    some of the key areas that need more focus while authoring CSS. We need to know
    some new pseudo element selectors for styling the web component. These pseudo
    selectors are listed here:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网页组件规范的出台，我们之前用于样式化 HTML DOM 元素的方法需要改变。在本节中，我们将探讨在编写 CSS 时需要更多关注的几个关键领域。我们需要了解一些新的伪元素选择器来样式化网页组件。这些伪选择器在此列出：
- en: '**Unresolved pseudo selector**: When a custom element is loaded and registered
    with the DOM, the browser picks the matched element and upgrades it based on the
    defined lifecycle. During this upgradation process, the elements are exposed to
    the browser and appear as unstyled for a few moments. We can avoid the flash of
    unstyled content using the `:unresolved` pseudo class. An example of `unresolved`
    pseudo selector for the `<header-message>` custom element are listed here:'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未解析伪选择器**：当自定义元素被加载并注册到 DOM 中时，浏览器会选择匹配的元素并根据定义的生命周期进行升级。在此升级过程中，元素会暴露给浏览器，并在几秒钟内看起来没有样式。我们可以使用
    `:unresolved` 伪类来避免未样式化内容的闪烁。以下列出了一个 `<header-message>` 自定义元素的 `unresolved` 伪选择器的示例：'
- en: '[PRE30]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Host pseudo selector**: The custom element itself can be referred using the
    `:host` pseudo selector to apply the `style` attribute. An example of the `host`
    selector is listed in the following code:'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宿主伪选择器**：可以使用 `:host` 伪选择器来引用自定义元素本身，并应用 `style` 属性。以下代码列出了一个 `host` 选择器的示例：'
- en: '[PRE31]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**Shadow pseudo selector**: The Shadow DOM subtree of the custom element can
    be referred using the `::shadow` pseudo selector to apply the `style` attributes.
    An example of `shadow` selector is listed here:'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**影子伪选择器**：可以使用 `::shadow` 伪选择器来引用自定义元素的影子 DOM 子树，并应用 `style` 属性。以下列出了一个 `shadow`
    选择器的示例：'
- en: '[PRE32]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Content pseudo selector**: The content of the older insertion point element
    can be referred using the `::content` pseudo selector to apply the `style` attributes.
    An example of `content` selector is listed in the following code:'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容伪选择器**：可以使用 `::content` 伪选择器来引用较老插入点元素的内容，并应用 `style` 属性。以下代码列出了一个 `content`
    选择器的示例：'
- en: '[PRE33]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Let's check out a simple example to demonstrate the aforementioned pseudo selectors.
    The following code creates a custom element named `<header-element>`. To show
    the use of the `:unresolved` pseudo selector, we delayed registering the custom
    element for 3 seconds using the `window.setTimeOut` method.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的示例来演示上述伪选择器。以下代码创建了一个名为 `<header-element>` 的自定义元素。为了展示 `:unresolved`
    伪选择器的使用，我们使用 `window.setTimeOut` 方法延迟了 3 秒注册自定义元素。
- en: '[PRE34]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码的详细信息如下：
- en: The registration process of the custom element is delayed on purpose for 3 seconds.
    During this time, the element becomes `HTMLUnknownElement`. We used the `:unresolved`
    pseudo selector to show a **Registering Element…** message during this time in
    the color red.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义元素的注册过程故意延迟了3秒。在这段时间内，元素变为`HTMLUnknownElement`。我们使用了`:unresolved`伪选择器，在这段时间内以红色显示“**注册元素…**”消息。
- en: Once the element is registered, the custom element becomes resolved (`HTMLElement`).
    In the `createdCallback` lifecycle method, we created a shadow root appended as
    a child.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦元素注册，自定义元素就会解析为`HTMLElement`。在`createdCallback`生命周期方法中，我们创建了一个作为子元素的shadow
    root。
- en: The template of `<header-element>` is present inside the `<template>` element
    with the `headerTemplate` ID. The template is then activated using the `document.importNode`
    method, which are added as children of the preceding shadow root.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<header-element>`的模板位于具有`headerTemplate` ID的`<template>`元素内。然后使用`document.importNode`方法激活模板，将其作为前一个shadow
    root的子元素添加。'
- en: The host DOM tree is referred using the `:host` pseudo selector, which has a
    `style` attribute in order to transform the text into capital letters.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`:host`伪选择器引用宿主DOM树，该选择器有一个`style`属性，用于将文本转换为大写字母。
- en: The Shadow DOM tree is referred using the `::shadow` pseudo selector, which
    has a `style` attribute to change the text color to orange.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`::shadow`伪选择器引用Shadow DOM树，该选择器有一个`style`属性，用于将文本颜色更改为橙色。
- en: The template also has the `<content>` element, which selects the original children
    of `<header-element>` and puts it into this location. In our example, the children
    are wrapped around the `<b>` tag. We referred this `<b>` element using the content
    selector to apply the `style` attribute so as to make the text color `blue` and
    the text type `italic`.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板还有一个`<content>`元素，它选择`<header-element>`的原生子元素并将其放入此位置。在我们的示例中，子元素被包裹在`<b>`标签中。我们使用内容选择器引用此`<b>`元素，以便应用`style`属性，使文本颜色为蓝色，文本类型为斜体。
- en: The following screenshot shows the output of the preceding code with the `:unresolved`
    pseudo selector style in effect for the first 3 seconds. We can see the message
    in red.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在第一个3秒内，使用`:unresolved`伪选择器样式生效的上一段代码的输出。我们可以看到红色的消息。
- en: '![Styling web components](img/image00220.jpeg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![样式化Web组件](img/image00220.jpeg)'
- en: 'Once the element is registered to the DOM, the lifecycle method gets executed
    and `<header-element>` gets upgraded with its Shadow DOM. The following screenshot
    shows the final output of the preceding code:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦元素注册到DOM中，生命周期方法就会被执行，并且`<header-element>`会升级并使用其Shadow DOM。以下截图显示了上一段代码的最终输出：
- en: '![Styling web components](img/image00221.jpeg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![样式化Web组件](img/image00221.jpeg)'
- en: Building a digital clock component
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建数字时钟组件
- en: 'In this section, we will build a simple digital clock element. The motive behind
    building a custom component is to implement the template, HTML Imports, Shadow
    DOM, and custom element to a real-time example. The definition of the digital
    clock component is present in the `clock-element.html` file, and the use of the
    digital clock component is present in the `clock-demo.html` file. The `clock-element.html`
    file has two sections. These are listed as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个简单的数字时钟元素。构建自定义组件的目的是将模板、HTML导入、Shadow DOM和自定义元素应用到实时示例中。数字时钟组件的定义在`clock-element.html`文件中，而数字时钟组件的使用在`clock-demo.html`文件中。`clock-element.html`文件包含两个部分，具体如下：
- en: Clock template
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟模板
- en: Clock element registration script
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟元素注册脚本
- en: Clock template
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时钟模板
- en: 'The digital clock template contains the HTML markup and the CSS styles for
    rendering in the browser on activation. The HTML template code and the CSS styles
    for the clock component are listed in the following code:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 数字时钟模板包含在浏览器激活时渲染的HTML标记和CSS样式。时钟组件的HTML模板代码和CSS样式如下所示：
- en: '[PRE35]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'A detailed explanation of the preceding code is listed here:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码的详细解释如下：
- en: The content of the clock element is present inside the `<template>` element.
    The ID of the template element is `clockTemplate`.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟元素的内容位于`<template>`元素内。该模板元素的ID为`clockTemplate`。
- en: This template contains two section styles and HTML markup.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此模板包含两个部分样式和HTML标记。
- en: All the CSS style classes are wrapped around the `<style>` element. The host
    clock element is targeted using the `:host` pseudo selector, and its shadow tree
    children are targeted using the `::shadow` pseudo attribute and the styles are
    applied.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有CSS样式类都围绕在`<style>`元素周围。使用`:host`伪选择器针对宿主时钟元素，使用`::shadow`伪属性和样式针对宿主的阴影树子元素，并应用样式。
- en: The HTML markup for the clock element is wrapped around the `div` element .The
    parent `div` element has the `.clock` class. The parent `div` element has the
    three children `div` element representing hours, minutes, and seconds.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟元素的HTML标记围绕在`div`元素周围。父`div`元素具有`.clock`类。父`div`元素有三个子`div`元素，分别代表小时、分钟和秒。
- en: Clock element registration script
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时钟元素注册脚本
- en: 'The clock component registration script is present in the `clock-element.html`
    file and is wrapped around a self-invoking anonymous function. The JavaScript
    code to create and register a clock component is listed in the following code:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 时钟组件注册脚本位于`clock-element.html`文件中，并围绕一个自调用的匿名函数。创建和注册时钟组件的JavaScript代码如下：
- en: '[PRE36]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: The script for registering the clock element is embedded inside a self-calling
    function, which saves the reference to the current owner document to `selfDocument`
    variable using `document.currentScript.ownerDocument`.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册时钟元素的脚本嵌入在一个自调用的函数中，该函数使用`document.currentScript.ownerDocument`将当前所有者文档的引用保存到`selfDocument`变量中。
- en: A new object is created using the `Object.create` method. The prototype of this
    new object is `HTMLElement.prototype`. The reference of this new object is saved
    in the `objectPrototype` variable.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Object.create`方法创建一个新的对象。此新对象的原型是`HTMLElement.prototype`。将此新对象的引用保存到`objectPrototype`变量中。
- en: 'The `createdCallback` lifecycle method of the host element is overloaded with
    the following steps:'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宿主元素的`createdCallback`生命周期方法被以下步骤重载：
- en: A new `shadowRoot` object is created for the host element using the `createShadowRoot`
    method. Reference to this `shadowRoot` is then saved to the `shadow` variable.
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`createShadowRoot`方法为宿主元素创建一个新的`shadowRoot`对象。然后将对此`shadowRoot`的引用保存到`shadow`变量中。
- en: The template content of the clock element is then retrieved using the `selfDocument`
    reference variable.
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用`selfDocument`引用变量检索时钟元素的模板内容。
- en: The inert content of the clock template is then activated using the `document.importNode`
    method.
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用`document.importNode`方法激活时钟模板的惰性内容。
- en: The activated template contents are then added as children to the host's shadow
    root.
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后将激活的模板内容添加为主元素的子元素。
- en: Using `window.setInterval()`, a block of code is called every 1 second. The
    purpose of this code block is to get the hours, minutes, and seconds of the current
    time and update the DOM repeatedly every second.
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`window.setInterval()`，每秒调用一个代码块。此代码块的目的在于获取当前时间的时、分、秒，并每秒重复更新DOM。
- en: The clock element is then registered with the DOM using the `document.registerElement`
    method. After registering, the clock component is now ready for use.
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后使用`document.registerElement`方法将时钟元素注册到DOM中。注册后，时钟组件现在可以使用了。
- en: Using the clock component
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时钟组件
- en: 'In the previous section, we developed the clock component that is present inside
    the `clock-element.html` file. In this section, we will import the clock element
    and use it in the markup to render in the browser. The code to use clock component
    is present in the `clock-demo.html` file and is listed here:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们开发了存在于`clock-element.html`文件中的时钟组件。在本节中，我们将导入时钟元素并在标记中使用它以在浏览器中渲染。使用时钟组件的代码位于`clock-demo.html`文件中，并在此列出：
- en: '[PRE37]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the preceding code, the clock component is imported using the `link` element
    with the `rel` attribute, which has the `import` value. The digital clock component
    can be implemented using the `<digital-clock></digital-clock>` custom element.
    The output of the preceding code is shown in the following screenshot:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，时钟组件是通过具有`import`值的`rel`属性的`link`元素导入的。可以使用`<digital-clock></digital-clock>`自定义元素实现数字时钟组件。上述代码的输出如下所示（截图）：
- en: '![Using the clock component](img/image00222.jpeg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![使用时钟组件](img/image00222.jpeg)'
- en: 'The preceding screenshot shows the digital clock component. The numbers in
    the screenshot are showing *hours* (HH), *minutes* (MM), and *seconds* (SS). The
    following screenshot shows the developer console of the clock component:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了数字时钟组件。截图中的数字显示的是*小时*（HH）、*分钟*（MM）和*秒*（SS）。下面的截图显示了时钟组件的开发者控制台：
- en: '![Using the clock component](img/image00223.jpeg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![使用时钟组件](img/image00223.jpeg)'
- en: 'The details of the preceding screenshot are listed here:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 前面截图的详细信息如下：
- en: The clock element is imported to the current page and has its own `#document`
    root
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟元素被导入到当前页面，并拥有自己的`#document`根。
- en: The digital clock element has its Shadow DOM tree, which is rendered as a clock
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字时钟元素有其Shadow DOM树，它被渲染为一个时钟。
- en: X-Tag
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: X-Tag
- en: The X-Tag is a small JavaScript library for web component development by Mozilla.
    This library is built on the web component polyfill from Polymer team. The Mozilla
    Bricks framework is built on top of the X-Tag library. We can download the X-Tag
    library using [http://www.x-tags.org/download](http://www.x-tags.org/download).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: X-Tag是Mozilla为Web组件开发的一个小型JavaScript库。这个库建立在Polymer团队提供的Web组件polyfill之上。Mozilla
    Bricks框架建立在X-Tag库之上。我们可以通过[http://www.x-tags.org/download](http://www.x-tags.org/download)下载X-Tag库。
- en: X-Tag element lifecycle
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: X-Tag元素生命周期
- en: 'Every X-Tag element has a lifecycle. An element state is decided based on the
    event that is fired during state transition. An element during its lifecycle goes
    through the following states (event fired):'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 每个X-Tag元素都有一个生命周期。元素状态是根据状态转换期间触发的事件来决定的。元素在其生命周期中会经历以下状态（触发事件）：
- en: '`created`: This event is fired by the element when it is initially created.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created`: 当元素最初创建时，会触发此事件。'
- en: '`inserted`: This event is fired by the element when it is inserted into the
    DOM for first time.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inserted`: 当元素首次被插入DOM时，会触发此事件。'
- en: '`removed`: This event is fired by the element when it is removed from the DOM.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removed`: 当元素从DOM中移除时，会触发此事件。'
- en: '`attributeChanged`: This event is fired when any of the property values of
    the element is changed.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributeChanged`: 当元素的任何属性值发生变化时，会触发此事件。'
- en: 'The lifecycle of the element can be defined inside the `lifecycle` attribute.
    The following code shows the syntax of the `lifecycle` attribute:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的生命周期可以在`lifecycle`属性中定义。以下代码显示了`lifecycle`属性的语法：
- en: '[PRE38]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: X-Tag custom element development
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: X-Tag自定义元素开发
- en: A custom X-Tag element can be created using the `xtag.register` method. The
    X-Tag core library code is present inside the `x-tag-components.js` file.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`xtag.register`方法创建一个自定义X-Tag元素。X-Tag核心库代码位于`x-tag-components.js`文件中。
- en: Note
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The X-Tag core library source code can be downloaded by visiting:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过访问以下链接下载X-Tag核心库源代码：
- en: '[https://github.com/x-tag/core](https://github.com/x-tag/core)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/x-tag/core](https://github.com/x-tag/core)'
- en: 'The `xtag.register` method has the following syntax:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`xtag.register`方法有以下语法：'
- en: '[PRE39]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The details of the preceding syntax are listed here:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法的详细信息如下：
- en: '`lifecycle`: This property can have code for all states during the lifecycle
    of the element. Therefore, we can define its logic for the custom elements by
    implementing the `created`, `inserted`, `removed`, and `attributeChanged` state.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lifecycle`: 这个属性可以包含元素生命周期中所有状态的代码。因此，我们可以通过实现`created`、`inserted`、`removed`和`attributeChanged`状态来定义自定义元素的逻辑。'
- en: '`methods`: This property can have all the methods that need to be exposed as
    a public API that is to be consumed externally.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`methods`: 这个属性可以包含所有需要作为公共API公开的方法，以便外部使用。'
- en: '`events`: This property can have all the element''s event binding listeners
    that need to be fired based on the user action of the custom element.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events`: 这个属性可以包含所有基于用户操作触发自定义元素事件的元素事件绑定监听器。'
- en: '`accessors`: This property can have all the attributes that need the getter
    and setters methods.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accessors`: 这个属性可以包含所有需要getter和setter方法的属性。'
- en: 'Now, it is time to create a custom component using this X-Tag library. The
    code for creating an X-Tag base custom element is as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用这个X-Tag库创建一个自定义组件了。创建X-Tag基础自定义元素的代码如下：
- en: '[PRE40]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The details of the preceding code are listed here:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: A custom X-Tag-based element named `italic-string` is created by the `xtag.register`
    method.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`xtag.register`方法创建了一个名为`italic-string`的基于X-Tag的自定义元素。
- en: This custom element takes the `innerHTML` content and wraps it with a `<i>`
    element, which gives it an italic style font.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个自定义元素将`innerHTML`内容包裹在一个`<i>`元素中，使其具有斜体样式字体。
- en: This custom element has a `textColor` property name, where a color string can
    be given. The value of the `textColor` property is then applied to the `style`
    property of the `<i>` element.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个自定义元素有一个名为`textColor`的属性，可以提供一个颜色字符串。然后，`textColor`属性的值应用于`<i>`元素的`style`属性。
- en: The `textColor` property is created using the `accessors` property. This `accessors`
    property takes the attributes that need to be configured to the `italic-string`
    element.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`accessors`属性创建`textColor`属性。这个`accessors`属性接受需要配置到`italic-string`元素的属性。
- en: An event listener is created using the `events` property. In the preceding code
    a `click` event type listener is attached to the `<i>` element. When the `<i>`
    element is clicked on, it shows a message in the console.
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`events`属性创建事件监听器。在前面的代码中，一个`click`事件类型监听器被附加到`<i>`元素上。当点击`<i>`元素时，它将在控制台显示一条消息。
- en: A method can be defined using the `methods` property. There is a method callback
    `changedToRed()` that can be accessed as an API. This callback method has used
    `document.getElementById()` to locate the X-Tag custom element with the `iStringComponent`
    (the `italic-string` component). It then finds and changes the `color` style attribute
    of the `<i>` element to `Red`. A button's `onclick` method is attached with a
    `doColorRed` JavaScript function, which in turn calls the `changeToRed` method.
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`methods`属性定义一个方法。有一个名为`changedToRed()`的方法回调，可以作为API访问。这个回调方法使用了`document.getElementById()`来定位具有`iStringComponent`（即`italic-string`组件）的X-Tag自定义元素。然后，它找到并更改`<i>`元素的`color`样式属性为`Red`。一个按钮的`onclick`方法与`doColorRed`JavaScript函数相关联，该函数反过来调用`changeToRed`方法。
- en: 'The output of the preceding code looks like the following screenshot. It has
    the **Click Me** text and a **Make Red** button rendered in the browser:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出如下截图所示。它显示了在浏览器中渲染的**点击我**文本和**使红色**按钮：
- en: '![X-Tag custom element development](img/image00224.jpeg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![X-Tag自定义元素开发](img/image00224.jpeg)'
- en: 'When user clicks on the **Make Red** button, the **Click Me** text will change
    to red in color. The following screenshot shows the **Click Me** text changed
    to red:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**使红色**按钮时，**点击我**文本将变为红色。以下截图显示了**点击我**文本变为红色的情况：
- en: '![X-Tag custom element development](img/image00225.jpeg)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![X-Tag自定义元素开发](img/image00225.jpeg)'
- en: 'If the user clicks on the **Click Me** text, then the event handler attached
    with it gets executed and prints the message. The following screenshot shows the
    console log message when the user clicks on the X-Tag element:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击**点击我**文本，则与其相关联的事件处理程序将被执行并打印消息。以下截图显示了用户点击X-Tag元素时的控制台日志消息：
- en: '![X-Tag custom element development](img/image00226.jpeg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![X-Tag自定义元素开发](img/image00226.jpeg)'
- en: Note
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To know more about X-Tag library use the following link:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于X-Tag库的信息，请使用以下链接：
- en: '[http://www.x-tags.org/docs](http://www.x-tags.org/docs)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.x-tags.org/docs](http://www.x-tags.org/docs)'
- en: 'Web component specification is not completely implemented by the browsers.
    However, there are many libraries with polyfill support for web components that
    exist. In this section, we will list the libraries, and get a quick introduction
    to them. Some of the most popular libraries are listed here:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器并未完全实现Web组件规范。然而，存在许多支持Web组件polyfill的库。在本节中，我们将列出这些库，并对它们进行简要介绍。以下是一些最受欢迎的库：
- en: Polymer
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Polymer
- en: Polymer is the web component library from Google Inc. This library allows a
    web developer to compose CSS, HTML, and JavaScript to build rich, powerful, and
    reusable web component. In [Chapter 2](lrn-web-cmpn-dev_ch02.html#aid-PNV61 "Chapter 2. Introducing
    Polymer"), *Introducing Polymer* and [Chapter 3](lrn-web-cmpn-dev_ch03.html#aid-VF2I1
    "Chapter 3. Developing Web Components Using Polymer"), *Developing Web Components
    Using Polymer*, we will learn more about this library.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer是来自Google Inc.的Web组件库。这个库允许Web开发者组合CSS、HTML和JavaScript来构建丰富、强大且可重用的Web组件。在[第2章](lrn-web-cmpn-dev_ch02.html#aid-PNV61
    "第2章。介绍Polymer") *介绍Polymer* 和 [第3章](lrn-web-cmpn-dev_ch03.html#aid-VF2I1 "第3章。使用Polymer开发Web组件*)
    中，我们将了解更多关于这个库的信息。
- en: Note
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about Polymer library use the following link:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Polymer库的信息，请使用以下链接：
- en: '[https://www.polymer-project.org](https://www.polymer-project.org)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.polymer-project.org](https://www.polymer-project.org)'
- en: Mozilla Brick
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mozilla Brick
- en: Mozilla Brick is another web component library from Mozilla. It has a collection
    of reusable UI components to be used in web application. The current version of
    this library is 2.0\. In [Chapter 5](lrn-web-cmpn-dev_ch05.html#aid-1IHDQ1 "Chapter 5. Developing
    Web Components Using Mozilla Brick"), *Developing Web Components Using Mozilla
    Brick*, we will learn more about this library.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla Brick 是来自 Mozilla 的另一个网页组件库。它包含了一系列可重用的 UI 组件，可用于网页应用。这个库的当前版本是 2.0。在[第
    5 章](lrn-web-cmpn-dev_ch05.html#aid-1IHDQ1 "第 5 章。使用 Mozilla Brick 开发 Web 组件")，*使用
    Mozilla Brick 开发 Web 组件*中，我们将了解更多关于这个库的内容。
- en: Note
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about Mozilla Brick library use the following link:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Mozilla Brick 库的信息，请使用以下链接：
- en: '[http://brick.readme.io/v2.0](http://brick.readme.io/v2.0)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://brick.readme.io/v2.0](http://brick.readme.io/v2.0)'
- en: ReactJS
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReactJS
- en: The ReactJS is a library for web component development from Facebook. This library
    takes a different approach to build the web application. In [Chapter 6](lrn-web-cmpn-dev_ch06.html#aid-1R42S1
    "Chapter 6. Building Web Components with ReactJS"), *Building Web Components with
    ReactJS*, we will learn more about the ReactJS library.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 是由 Facebook 开发的一个用于网页组件开发的库。这个库在构建网页应用时采用了不同的方法。在[第 6 章](lrn-web-cmpn-dev_ch06.html#aid-1R42S1
    "第 6 章。使用 ReactJS 构建 Web 组件")，*使用 ReactJS 构建 Web 组件*中，我们将了解更多关于 ReactJS 库的内容。
- en: Note
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about ReactJS library, use the following link:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 ReactJS 库的信息，请使用以下链接：
- en: '[http://facebook.github.io/react](http://facebook.github.io/react)'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://facebook.github.io/react](http://facebook.github.io/react)'
- en: Bosonic
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bosonic
- en: Bosonic is another library for web component development. It uses some of the
    PolymerJS polyfill in the core. In [Chapter 4](lrn-web-cmpn-dev_ch04.html#aid-19UOO1
    "Chapter 4. Exploring Bosonic Tools for Web Component Development"), *Exploring
    Bosonic Tools for Web Component Development*, we will explore more details about
    Bosonic.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: Bosonic 是另一个用于网页组件开发的库。它在核心部分使用了部分 PolymerJS polyfill。在[第 4 章](lrn-web-cmpn-dev_ch04.html#aid-19UOO1
    "第 4 章。探索用于 Web 组件开发的 Bosonic 工具")，*探索用于 Web 组件开发的 Bosonic 工具*中，我们将更深入地了解 Bosonic。
- en: Note
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the Bosonic library, use the following link:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Bosonic 库的信息，请使用以下链接：
- en: '[http://bosonic.github.io/index.html](http://bosonic.github.io/index.html)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bosonic.github.io/index.html](http://bosonic.github.io/index.html)'
- en: Summary
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the web component specification. We also explored
    the building blocks of web components such as Shadow DOM, custom element, HTML
    Imports, and templates. In the next chapter, we will learn about the PolymerJS
    library in detail.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，我们学习了关于网页组件规范的内容。我们还探讨了网页组件的构建块，如 Shadow DOM、自定义元素、HTML Imports 和模板。在下一章中，我们将详细了解
    PolymerJS 库。 '
