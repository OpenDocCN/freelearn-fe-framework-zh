["```js\ncoverageThreshold: {\n  global: {\n      lines: 80,\n      functions: 80,\n      branches: 80\n  },\n},\ncollectCoverage : true,\ncoverageReporters: [\n  \"cobertura\",\n  \"lcov\",\n  \"text\",\n]\n```", "```js\nimport { TranslocoTestingModule, TranslocoTestingOptions } from '@ngneat/transloco';\nimport en from '../assets/i18n/en.json';\nimport nl from '../assets/i18n/nl.json';\nexport function getTranslocoModule(options: TranslocoTestingOptions = {}) {\n  return TranslocoTestingModule.forRoot({\n    langs: { en, nl },\n    translocoConfig: {\n      availableLangs: ['en', 'nl'],\n      defaultLang: 'en',\n    },\n    preloadLangs: true,\n    ...options\n  });\n}\n```", "```js\n\"resolveJsonModule\": true,\n\"esModuleInterop\": true,\n```", "```js\ntransformIgnorePatterns: ['node_modules/?!(.*\\\\.mjs$|@ngneat)'],\n```", "```js\ndescribe('AppComponent', () => {\n  beforeEach(async () => { …… });\n  it(‹should render title›, () => { …… });\n  it(`should have as title ‹finance-expenses-registration›`, () => { …… });\n});\n```", "```js\nlet component: AppComponent;\nlet fixture: ComponentFixture<AppComponent>;\nconst mockTranslationService = {\n  setActiveLanguage: jest.fn(),\n  getLanguages: jest.fn().mockReturnValue([]),\n};\n```", "```js\nbeforeEach(async () => {});\n```", "```js\nawait TestBed.configureTestingModule({\n  imports: [AppComponent, RouterTestingModule, getTranslocoModule()],\n  providers: [{\n      provide: TranslationService,\n      useValue: mockTranslationService,\n  }]\n}).compileComponents();\n```", "```js\nfixture = TestBed.createComponent(AppComponent);\n```", "```js\ncomponent = fixture.componentInstance;\n```", "```js\nfixture.detectChanges();\n```", "```js\nit('should create the component and set the component properties with the expected values', () => {\n  expect(component).toBeDefined();\n  expect(component.navItems).toEqual([{ label: 'expenses approval', route: '/expenses-approval' }]);\n  expect(component[‹translationService›]).toEqual(mockTranslationService);\n});\n```", "```js\nnpx nx run <project-name>:test\n```", "```js\nnpx nx run finance-expenses-registration:test --test-file=app.component.spec.ts\n```", "```js\n@Component({\n  selector: \"bt-libs-navbar\",\n  standalone: true,\n  template: ‹›,\n})\nexport class StubNavbarComponent {\n  @Input() navbarItems = [];\n  @Input() languages = [];\n  @Output() languageChange = new EventEmitter();\n}\n```", "```js\nTestBed.overrideComponent(AppComponent, {\n  add: {\n    imports: [StubNavbarComponent],\n  },\n  remove: {\n    imports: [NavbarComponent],\n  },\n});\n```", "```js\nit('should call the setActiveLanguage method when the languageChange event is emitted', () => {\n  const setActiveLanguage = jest.spyOn(component['translationService'], 'setActiveLanguage');\n  const navbarElement = fixture.debugElement.query(By.directive(StubNavbarComponent));\n  navbarElement.triggerEventHandler('languageChange', 'nl');\n  expect(setActiveLanguage).toHaveBeenCalledWith('nl');\n});\n```", "```js\nnpx nx run finance-expenses-registration:test --test-file=expenses-overview-page.component.spec.ts\n```", "```js\nimport ExpensesOverviewPageComponent from './expenses-overview-page.component';\n```", "```js\nconst mockTranslationService = {\n  translocoService: { translate: jest.fn() },\n  translationsLoaded: signal(false) as WritableSignal<boolean>,\n};\n```", "```js\nbeforeEach(async () => {\n  await TestBed.configureTestingModule({\n    imports: [ExpensesOverviewPageComponent, getTranslocoModule()],\n    providers: [\n      { provide: ExpensesFacade, useClass: StubExpensesFacade },\n      { provide: TranslationService, useValue: mockTranslationService, },\n      provideTranslocoLocale({\n        langToLocaleMapping: { en: 'en-US', nl: 'nl-NL' }\n      })\n    ]\n  }).compileComponents();\n  fixture = TestBed.createComponent(ExpensesOverviewPageComponent);\n  component = fixture.componentInstance;\n  fixture.detectChanges();\n});\n```", "```js\nit('should create the component and initialize the properties correctly', () => {\n  expect(component).toBeTruthy();\n  expect(component[‹expensesFacade›]).toBeInstanceOf(StubExpensesFacade);\n  expect(component[‹translationService›]).toEqual(mockTranslationService);\n  expect(component.translationEventsEffect).toBeDefined();\n  expect(component.expenses()).toEqual(component[‹expensesFacade›].expenses());\n  expect(component.showAddExpenseModal()).toBeFalsy();\n  expect(component.showSummary()).toBeFalsy();\n  expect(component.summaryBtnText()).toEqual('Show summary');\n});\n```", "```js\nit('should fetch expenses on init', () => {\n  const fetchExpenses = jest.spyOn(component['expensesFacade'], 'fetchExpenses');\n  component.ngOnInit();\n  expect(fetchExpenses).toHaveBeenCalled();\n});\n```", "```js\nit('should translate title if translations are loaded', fakeAsync(() => {\n  const translateSpy = jest.spyOn(component['translationService'].translocoService, 'translate');\n  expect(component[‹translationService›].translationsLoaded()).toBeFalsy();\n  expect(translateSpy).not.toHaveBeenCalled();\n  mockTranslationService.translationsLoaded.set(true);\n  tick();\n  expect(translateSpy).toHaveBeenCalledWith(‹expenses_overview_page.title›);\n}));\n```", "```js\nit('should change the summaryBtnText if onSummaryChange is called', () => {\n  expect(component.showSummary()).toBeFalsy();\n  expect(component.summaryBtnText()).toEqual('Show summary');\n  component.onSummaryChange();\n  expect(component.showSummary()).toBeTruthy();\n  expect(component.summaryBtnText()).toEqual('Hide summary');\n});\n```", "```js\nit('should call addExpense on the expenses facade with the correct values when onAddExpense is called', () => {\n  const addExpense = jest.spyOn(component['expensesFacade'], 'addExpense');\n  const expenseToAdd = { description: 'test', amount: { value: 50, vatPercentage: 20 }, date: '2019-01-04', tags: ['printer'], id: 999 };\n  component.onAddExpense(expenseToAdd);\n  expect(addExpense).toHaveBeenCalledWith(expenseToAdd);\n  expect(component.expenses().expenses).toContainEqual(expenseToAdd);\n});\n```", "```js\nnpx nx run finance-expenses-registration:test --test-file=expenses-overview-page.component.spec.ts\n```", "```js\nnpx nx run finance-expenses-registration:test\n```", "```js\nnx run-many -t test\n```", "```js\nnx run-many -t test -p proj1 proj2\n```", "```js\nnx run-many -t test --exclude excluded-app\n```", "```js\nnx affected -t test\n```", "```js\n\"src/**/*.cy.ts\"\n```", "```js\n\"apps/*/*/tsconfig.json\"\n```", "```js\ndescribe('finance-expenses-registration', () => {});\n```", "```js\nbeforeEach(() => {\n  cy.visit('');\n});\n```", "```js\nit('should redirect to the expenses-overview page when we load the root application route', () => {\n  cy.url().should(‹equal', 'http://localhost:4200/expenses-overview');\n});\n```", "```js\nnx e2e <project-name>\n```", "```js\nnx e2e <project-name> --watch\n```", "```js\nnx e2e finance-expenses-registration-e2e --watch\n```", "```js\nit('should toggle the summary and adjust the button text', () => {});\n```", "```js\ncy.get('business-tools-monorepo-expenses-overview-page > div > div > div > button:nth-child(2)');\n```", "```js\nit('should toggle the summary and adjust the button text', () => {\n  const button = () => cy.get('business-tools-monorepo-expenses-overview-page > div > div > div > button:nth-child(2)');\n  const summary = () => cy.get('table > tr.summary > td');\n  button().should(‹contain›, ‹Show summary›);\n  summary().should(‹not.exist');\n  button().click();\n  button().should(‹contain›, ‹Hide summary›);\n  summary().should(‹exist›);\n  button().click();\n  button().should(‹contain›, ‹Show summary›);\n  summary().should(‹not.exist');\n});\n```", "```js\n<button data-test-id attribute to the button and provided it with a value of show-summary-btn. Next, we will do the same for the element where we show the summary:\n\n```", "```js\ncy.get('[data-test-id=\"show-summary-btn\"]');\ncy.get('[data-test-id=\"summary\"]')\n```", "```js\nexport const showHideSummaryBtn = () => cy.get('[data-test-id=\"show-summary-btn\"]');\nexport const summaryValue = () => cy.get('[data-test-id=\"summary\"]');\n```", "```js\nexport function summaryIsShwon(isShown: boolean) {\n  showHideSummaryBtn().should('contain', isShown ? 'Hide summary' : 'Show summary');\n  summaryValue().should(isShown ? 'exist' : 'not.exist');\n}\n```", "```js\nit('should toggle the summary and adjust the button text', () => {\n  summaryIsShwon(false);\n  showHideSummaryBtn().click();\n  summaryIsShwon(true);\n  showHideSummaryBtn().click();\n  summaryIsShwon(false);\n});\n```", "```js\nnx e2e finance-expenses-registration-e2e --watch --configuration=production\n```", "```js\nbeforeEach(() => {\n  cy.intercept('GET', '**/api/expenses', { fixture: 'expenses.json' }).as('getExpenses');\n  cy.visit('');\n  cy.wait('@getExpenses');\n});\n```", "```js\nnx e2e finance-expenses-registration-e2e --watch --configuration=production\n```", "```js\n\n```"]