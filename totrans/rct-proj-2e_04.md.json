["```js\nnpx create-next-app chapter-4\n```", "```js\nnpm run dev\n```", "```js\nchapter-4\n  |- package.json\n  |- node_modules\n  |- public\n  |- pages\n     |- api\n        |- hello.js\n     |- _app.js\n     |- index.js\n  |- styles\n     |- globals.css\n     |- Home.module.css\n\n```", "```js\nnpm install styled-components\n```", "```js\n    import Document from 'next/document';\n    import { ServerStyleSheet } from 'styled-components';\n    export default class MyDocument extends Document {\n      static async getInitialProps(ctx) {\n        const sheet = new ServerStyleSheet();\n        const originalRenderPage = ctx.renderPage;\n        try {\n          ctx.renderPage = () =>\n            originalRenderPage({\n              enhanceApp: (App) => (props) =>\n                sheet.collectStyles(<App {...props} />),\n            });\n          const initialProps = \n            await Document.getInitialProps(ctx);\n          return {\n            ...initialProps,\n            styles: (\n              <>\n                {initialProps.styles}\n                {sheet.getStyleElement()}\n              </>\n            ),\n          };\n        } finally {\n          sheet.seal();\n        }\n      }\n    }\n    ```", "```js\n    const nextConfig = {\n        reactStrictMode: true,\n    +   compiler: {\n    +     styledComponents: true\n    +   }\n    }\n    module.exports = nextConfig\n    ```", "```js\n    - import '../styles/globals.css';\n    + import { createGlobalStyle } from 'styled-components';\n    + const GlobalStyle = createGlobalStyle' \n    +   body { \n    +     margin: 0; \n    +     padding: 0; \n    +     font-family: -apple-system, BlinkMacSystemFont,\n            \"Segoe UI\", \"Roboto\", \"Oxygen\",\"Ubuntu\",  \n            \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n            \"Helvetica Neue\", sans-serif;  \n    +     -webkit-font-smoothing: antialiased; \n    +     -moz-osx-font-smoothing: grayscale; \n    +   } \n    + ';\n      function MyApp({ Component, pageProps }) {\n    -   return <Component {...pageProps} />;\n    +   return (\n    +     <>\n    +       <GlobalStyle />\n    +       <Component {...pageProps} />\n    +     </>\n    +   );\n      }\n      export default MyApp;\n    ```", "```js\n    import styled from 'styled-components';\n    const HeaderWrapper = styled.div'\n      background-color: orange;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      font-size: calc(10px + 2vmin);\n      color: white;\n    ';\n    const Title = styled.h1'\n      height: 64px;\n      pointer-events: none;\n    ';\n    function Header() {\n      return (\n        <HeaderWrapper>\n          <Title>Community Feed</Title>\n        </HeaderWrapper>\n      );\n    }\n    export default Header;\n    ```", "```js\n      import { createGlobalStyle } from \n        'styled-components';\n    + import Header from '../components/Header';\n      // ...\n      function MyApp({ Component, pageProps }) {\n        return (\n          <>\n            <GlobalStyle />\n    +       <Header />\n            <Component {...pageProps} />\n          </>\n        );\n      }\n      export default MyApp;\n    ```", "```js\nimport styled from 'styled-components';\nconst QuestionsContainer = styled.div'\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  margin: 5%;\n';\nfunction Questions() {\n  return (\n    <QuestionsContainer>\n      <h2>Questions</h2>\n    </QuestionsContainer>\n  );\n}\nexport default Questions;\n```", "```js\nimport styled from 'styled-components';\nconst CardWrapper = styled.div'\n  text-align: left;\n  padding: 1%;\n  background: lightGray;\n  border-radius: 5px;\n  margin-bottom: 2%;\n';\nconst Title = styled.h2'\n  width: 100%;\n  padding-bottom: 10px;\n  text-align: center;\n  border-bottom: 1px solid darkGray;\n  color: black;\n';\nconst Count = styled.span'\n  color: darkGray;\n';\nfunction Card({ title, views, answers }) {\n  return (\n    <CardWrapper>\n      <Title>{title}</Title>\n      <Count>{\n        'Views: ${views} | Answers: ${answers}'}\n      </Count>\n    </CardWrapper>\n  );\n}\nexport default Card;\n```", "```js\nhttps://api.stackexchange.com/2.2/questions?order=desc&sort=hot&tagged=reactjs&site=stackoverflow\n```", "```js\n    + import { useState, useEffect } from 'react';\n      import styled from 'styled-components';\n    + import Card from '../ ../ components/Card';\n      function Questions() {\n    +   const [loading, setLoading] = useState(false);\n    +   const [questions, setQuestions] = useState([]);\n    +   useEffect(() => {\n    +     async function fetchData() {\n    +       const data = await fetch(\n             'https://api.stackexchange.com/2.2/questions?\n              order=desc&sort=hot&tagged=reactjs&\n              site=stackoverflow');\n    +       const result = await data.json();\n    +       if (result) {\n    +         setQuestions(result.items);\n    +         setLoading(false);\n    +       }\n    +     }\n    +     fetchData();\n    +   }, []);\n      return (\n        // ...\n    ```", "```js\n      // ...\n        return (\n          <QuestionsContainer>\n            <h2>Questions</h2>\n    +       {loading ? (\n    +         <span>Loading...</span>\n    +        ) : (\n    +         <div>\n    +             {questions.map((question) => (\n    +               <Card\n    +                 key={question.question_id}\n    +                 title={question.title}\n    +                 views={question.view_count}\n    +                 answers={question.answer_count}\n    +               />\n    +             ))}\n    +         </div>\n    +       )}\n        </QuestionsContainer>\n      );\n    }\n    export default Questions;\n    ```", "```js\n    import { useRouter } from 'next/router';\n    import styled from 'styled-components';\n    const QuestionDetailContainer = styled.div'\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n      margin: 5%;\n    ';\n    function QuestionDetail() {\n      const router = useRouter();\n      const { id } = router.query;\n      return (\n        <QuestionDetailContainer>\n          <h2>Question: {id}</h2>\n        </QuestionDetailContainer>\n      );\n    }\n    export default QuestionDetail;\n    ```", "```js\n    + import { useState, useEffect } from 'react';\n      import { useRouter } from 'next/router';\n      import styled from 'styled-components';\n    + import Card from '../../components/Card';\n      // ...\n      function QuestionDetail() {\n        const router = useRouter();\n        const { id } = router.query;\n    +   const [loading, setLoading] = useState(false);\n    +   const [question, setQuestion] = useState({});\n    +   useEffect(() => {\n    +     async function fetchData() {\n    +       const data = await fetch(\n             'https://api.stackexchange.com/2.2/questions\n             /${id}?site=stackoverflow');\n    +       const result = await data.json();\n    +       if (result) {\n    +         setQuestion(result.items[0]);\n    +         setLoading(false);\n    +       }\n    +     }\n    +     id && fetchData();\n    +   }, [id]);\n        // ...\n    ```", "```js\n        // ...\n        return (\n          <QuestionDetailContainer>\n    -       <h2>Question: {id}</h2>\n    +       {loading ? (\n    +         <span>Loading...</span>\n    +       ) : (\n    +         <Card\n    +           title={question.title}\n    +           views={question.view_count}\n    +           answers={question.answers_count}\n    +         />\n    +       )}\n        </QuestionDetailContainer>\n      );\n    }\n    export default QuestionDetail;\n    ```", "```js\n      import { useState, useEffect } from 'react';\n      import styled from 'styled-components';\n    + import Link from 'next/link';  \n      import Card from '../../components/Card';\n      // ...\n    + const CardLink = styled.a'\n    +   text-decoration: none;\n    + ';\n      function Questions() {\n      // ...\n        return (\n          <QuestionsContainer>\n            // ...\n            {questions.map((question) => (\n    +         <Link\n    +          key={question.question_id}\n    +          href={'/questions/${question.question_id}'}\n    +          passHref\n    +         >\n    +           <CardLink>\n                  <Card \n    -               key={question.question_id}\n                    title={question.title} \n                    views={question.view_count}\n                    answers={question.answer_count} \n                  />\n    +           </CardLink>\n    +         </Link>\n            ))}\n            // ...\n    ```", "```js\n    import Questions from './questions';\n    export default function Home() {\n      return <Questions />;\n    }\n    ```", "```js\n      import { useState, useEffect } from 'react';\n      import styled from 'styled-components';\n      import Link from 'next/link';\n    + import { useRouter } from 'next/router';\n      import Card from '../components/Card';\n      // ...\n      function Questions() {\n        const [loading, setLoading] = useState(false);\n        const [questions, setQuestions] = useState([]);\n    +   const router = useRouter();\n    +   const { page } = router.query;\n        useEffect(() => {\n          // ...\n    ```", "```js\n      // ...\n      useEffect(() => {\n        async function fetchData() {\n    page to the dependency array of the useEffect Hook to do the data fetching. When the application first renders, the value for page is not set as the query string should still be retrieved from the API. This is causing the API to be called twice, something that we won't optimize now but will do later once we add SSR to the application.\n    ```", "```js\n    import styled from 'styled-components';\n    import Link from 'next/link';\n    const PaginationContainer = styled.div'\n      display: flex;\n      justify-content: center;\n    ';\n    const PaginationLink = styled.a'\n      padding: 2%;\n      margin: 1%;\n      background: orange;\n      cursor: pointer;\n      color: white;\n      text-decoration: none;\n      border-radius: 5px;\n    ';\n    function Pagination({ currentPage, hasMore }) {\n      return (\n        <PaginationContainer>\n          <Link \n            href={'?page=${parseInt(currentPage) - 1}'}>\n            <PaginationLink>Previous</PaginationLink>\n          </Link>\n          <Link \n            href={'?page=${parseInt(currentPage) + 1}'}>\n            <PaginationLink>Next</PaginationLink>\n          </Link>\n        </PaginationContainer>\n      );\n    }\n    export default Pagination;\n    ```", "```js\n      import { useState, useEffect } from 'react';\n      import Link from 'next/link';\n      import { useRouter } from 'next/router';\n      import styled from 'styled-components';\n      import Card from '../../components/Card';\n    + import Pagination from\n        '../../components/Pagination';\n      // ...\n      function Questions() {\n        const [loading, setLoading] = useState(false);\n        const [questions, setQuestions] = useState([]);\n    +   const [hasMore, setHasMore] = useState(false);\n        const router = useRouter();\n        const { page } = router.query;\n        useEffect(() => {\n          async function fetchData() {\n            const data = await fetch(\n              'https://api.stackexchange.com/2.2/questions\n               ?${page ? 'page=${page}&' : ''}order=\n               desc&sort=hot&tagged=reactjs&site=\n               stackoverflow');\n          const result = await data.json();\n            if (result) {\n              setQuestions(result.items);\n    +         setHasMore(result.has_more);\n              setLoading(false);\n            }\n          }\n          fetchData();\n        }, [page]);\n        // ...\n    ```", "```js\n      // ...\n        return (\n          <QuestionsContainer>\n            <h2>Questions</h2>\n            {loading ? (\n              <span>Loading...</span>\n            ) : (\n    +         <>\n                <div>\n                  {questions.map((question) => (\n                    // ...\n                  ))}\n                </div>\n    +          <Pagination currentPage={parseInt(page) ||\n                 1} hasMore={hasMore} />\n    +        </>\n            )}\n          </QuestionsContainer>\n        );\n      }\n      export default Questions;\n    ```", "```js\n      // ...\n      const PaginationLink = styled.a'\n        padding: 2%;\n        margin: 1%;\n    +   background: ${(props) => \n          (!props.disabled ? 'orange' : 'lightGrey')};\n    +   pointer-events: ${(props) => \n          (!props.disabled ? 'all' : 'none')};\n    +   cursor: ${(props) => \n          (!props.disabled ? 'pointer' : 'not-allowed')};\n        color: white;\n        text-decoration: none;\n        border-radius: 5px;\n      ';  \n      function Pagination({ currentPage, hasMore }) {\n        return (\n          <PaginationContainer>\n          <Link href={'?page=${parseInt(currentPage) - 1}'}>\n    -       <PaginationLink>Previous</PaginationLink>\n    +       <PaginationLink disabled={currentPage <= 1}>\n              Previous\n             </PaginationLink>\n          </Link>\n          <Link href={'?page=${parseInt(currentPage) + 1}'}>\n    -       <PaginationLink>Next</PaginationLink>\n    +       <PaginationLink disabled={!hasMore}>\n              Next\n            </PaginationLink>\n          </Link>\n        </PaginationContainer>\n      );\n    }\n    export default Pagination;\n    ```", "```js\n    - import { useState, useEffect } from 'react';\n      import styled from 'styled-components';\n      import Link from 'next/link';\n    - import { useRouter } from 'next/router';\n      import Card from '../../components/Card';\n      import Pagination from '../../components/Pagination';\n      // ...\n      function Questions() {\n    -   const [loading, setLoading] = useState(false);\n    -   const [questions, setQuestions] = useState([]);\n    -   const [hasMore, setHasMore] = useState(false);\n    -   const router = useRouter();\n    -   const { page } = router.query;\n    -   useEffect(() => {\n    -     async function fetchData() {\n    -       const data = await fetch(\n              'https://api.stackexchange.com/2.2/questions\n               ?${page ? 'page=${page}&' : ''}order=\n               desc&sort=hot&tagged=reactjs&site\n               =stackoverflow');\n    -       const result = await data.json();\n    -       if (result) {\n    -         setQuestions(result.items);\n    -         setHasMore(result.has_more);\n    -         setLoading(false);\n    -       }\n    -     }\n    -     fetchData();\n    -   }, [page]);\n      return (\n        // ...\n    ```", "```js\n      // ...\n    + export async function getServerSideProps(context) {\n    +   const { page } = context.query;\n    +   const data = await fetch(\n    +     'https://api.stackexchange.com/2.2/questions?${\n    +       page ? 'page=${page}&' : ''\n    +       }order=desc&sort=hot&tagged=reactjs&site=\n            stackoverflow',\n    +   );\n    +   const result = await data.json();\n    +   return { \n    +     props: { \n    +       questions: result.items, \n    +       hasMore: result.has_more, \n    +       page: page || 1, \n    +     } \n    +   };\n    + }\n    export default Questions;\n    ```", "```js\n      // ...\n    - function Questions() {\n    + function Questions({ questions, hasMore, page }) {\n      return (\n        <QuestionsContainer>\n          <h2>Questions</h2>\n    -     {loading ? (\n    -       <span>Loading...</span>\n    -     ) : (\n    -     <> \n          <div>\n            {questions &&\n              questions.map((question) => (\n                // ...\n              ))}\n          </div>\n          <Pagination currentPage={parseInt(page) || 1} \n            hasMore={hasMore} />\n    -    </>\n    -    )}\n        </QuestionsContainer>\n      );\n    }\n    // ...\n    ```", "```js\n- import Questions from './questions';\n+ import Questions, {\n+  getServerSideProps as getServerSidePropsQuestions,\n+ } from './questions';\n+ export function getServerSideProps(context) {\n+  return getServerSidePropsQuestions(context);\n+ }\n- export default function Home() {\n-   return <Questions />;\n+ export default function Home(props) {\n+   return <Questions {...props} />;\n}\n```", "```js\n      import styled from 'styled-components';\n    + import Head from 'next/head';\n    // ...\n      const Header = () => (\n    +  <>\n    +    <Head>\n    +      <title>Community Feed</title>\n    +      <meta name='description' content='This is a\n             Community Feed project build with React' />\n    +    </Head>\n        <HeaderWrapper>\n          <Title>Community Feed</Title>\n        </HeaderWrapper>\n    +  </>\n      );\n    export default Header;\n    ```", "```js\n      import styled from 'styled-components';\n      import Link from 'next/link';\n    + import Head from 'next/head';\n      import Card from '../../components/Card';\n      import Pagination from\n        '../../components/Pagination';\n      // ...\n      function Questions({ questions, hasMore, page }) {\n        return (\n    +     <>\n    +       <Head>\n    +         <title>Questions</title>\n    +       </Head>\n            <QuestionsContainer> \n              // ... \n            </QuestionsContainer>\n    +     </>\n        );\n      }\n      // ...\n    ```", "```js\n      import { useState, useEffect } from 'react';\n      import { useRouter } from 'next/router';\n    + import Head from 'next/head';\n      import styled from 'styled-components';\n      import Card from '../../components/Card';\n      // ...\n      function QuestionDetail() {\n        // ...\n        return (\n          <QuestionDetailContainer>\n            {loading ? (\n              <span>Loading...</span>\n            ) : (\n    +         <>\n    +           <Head>\n    +             <title>{question.title}</title>\n    +           </Head>\n                <Card\n                  title={question.title}\n                  views={question.view_count}\n                  answers={question.answer_count}\n                />\n    +         </>\n            )}\n          </QuestionDetailContainer>\n        );\n      }\n      export default QuestionDetail;\n    ```"]