["```js\n    projects/stage7 \n    ```", "```js\n    projects/stage8 \n    ```", "```js\n    npx ng build stage8 \n    ```", "```js\n    **src/app/app-routing.modules.ts**\n    ...\n      { path: 'login', component: LoginComponent },\n      { path: 'login/:redirectUrl', component: LoginComponent },\n    ... \n    ```", "```js\n    **src/app/login/login.****component****.****ts**\n    â€¦\n    import { AuthService } from '../auth/auth.service'\n    import { Role } from '../auth/role.enum'\n    @Component({\n      selector: 'app-login',\n      templateUrl: 'login.component.html',\n      styles: `\n          .error { color: red; }\n          div[fxLayout] { margin-top: 32px; }\n        `, \n      standalone: true,\n      imports: [\n        FlexModule,\n        MatCardModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        MatFormFieldModule,\n        MatInputModule,\n        FieldErrorDirective,\n        MatButtonModule,\n        MatExpansionModule,\n        MatGridListModule,\n      ],\n    })\n    export class LoginComponent implements OnInit { \n      private readonly formBuilder = inject(FormBuilder)\n      private readonly authService = inject(AuthService)\n      private readonly router = inject(Router)\n      private readonly route = inject(ActivatedRoute)\n      loginForm: FormGroup\n      loginError = ''  \n      get redirectUrl() {\n        return this.route.snapshot\n                   .queryParamMap.get('redirectUrl') || ''\n      }\n\n      ngOnInit() {\n        this.authService.logout()\n        this.buildLoginForm()\n      }\n      buildLoginForm() {\n        this.loginForm = this.formBuilder.group({\n          email: ['', [Validators.required, Validators.email]],\n          password: ['', [\n            Validators.required,\n            Validators.minLength(8),\n            Validators.maxLength(50),\n          ]],\n        })\n      }\n      async login(submittedForm: FormGroup) {\n        this.authService\n          .login(\n            submittedForm.value.email,\n            submittedForm.value.password\n          )\n          .pipe(catchError(err => (this.loginError = err)))\n        combineLatest([\n          this.authService.authStatus$,\n          this.authService.currentUser$,\n        ])\n          .pipe(\n            filter(\n              ([authStatus, user]) =>\n                authStatus.isAuthenticated && user?._id !== ''\n            ),\n            first(),\n            tap(([authStatus, user]) => {\n              this.router.navigate([this.redirectUrl || '/manager'])\n            })\n          )\n          .subscribe()\n      } \n    } \n    ```", "```js\n    **src/app/login/login.component.html**\n    <div fxLayout=\"row\" fxLayoutAlign=\"center\">\n      <mat-card appearance=\"outlined\" fxFlex=\"400px\">\n        <mat-card-header>\n          <mat-card-title>\n            <div class=\"mat-headline-5\">Hello, Limoncu!</div>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"login(loginForm)\"\n                     fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                    fxLayoutGap=\"10px\">\n              <mat-icon>email</mat-icon>\n              <mat-form-field fxFlex>\n                <input\n                  matInput\n                  placeholder=\"E-mail\"\n                  aria-label=\"E-mail\"\n                  formControlName=\"email\"\n                  #email />\n                <mat-error [input]=\"email\" [group]=\"loginForm\"\n                                    appFieldError=\"invalid\">\n                </mat-error>\n              </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                    fxLayoutGap=\"10px\">\n              <mat-icon matPrefix>vpn_key</mat-icon>\n              <mat-form-field fxFlex>\n                <input\n                  matInput\n                  placeholder=\"Password\"\n                  aria-label=\"Password\"\n                  type=\"password\"\n                  formControlName=\"password\"\n                  #password />\n                <mat-hint>Minimum 8 characters</mat-hint>\n                <mat-error\n                  [input]=\"password\"\n                  [group]=\"loginForm\"\n                  [appFieldError]=\n                    \"['required', 'minlength', 'maxlength']\">\n                </mat-error>\n              </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" class=\"margin-top\">\n              @if (loginError) {\n                <div class=\"mat-caption error\">\n                  {{ loginError }}\n                </div>\n              }           \n              <div class=\"flex-spacer\"></div>\n              <button\n                mat-raised-button\n                type=\"submit\"\n                color=\"primary\"\n                [disabled]=\"loginForm.invalid\">\n                Login\n              </button>\n            </div>\n          </form>\n        </mat-card-content>\n      </mat-card>\n    </div> \n    ```", "```js\n    **src/app/home/home.****component****.****ts**\n      ...\n      template: `\n        @if (displayLogin) {\n          <app-login></app-login>\n        } @else {\n          <span class=\"mat-display-3\">\n            You get a lemon, you get a lemon, you get a lemon...\n          </span>\n        }\n      `,\n    }) \n    export class HomeComponent {\n      displayLogin = true\n      constructor() {\n      }\n    } \n    ```", "```js\n    **src/app/home/home.****component****.****simple****.****ts**\n    ...\n    import { AuthService } from '../auth/auth.service'\n    ...\n    export class HomeComponent { \n      constructor(public authService: AuthService) {}\n    } \n    ```", "```js\n    **src/app/home/home.****component****.****ts**\n    ...\n      template: `\n        **@if ((authService.authStatus$ | async)?.isAuthenticated) {**\n          <div>      \n            <div class=\"mat-display-4\">\n              This is LemonMart! The place where\n            </div>\n            <div class=\"mat-display-4\">\n              You get a lemon, you get a lemon, you get a lemon...\n            </div>\n            <div class=\"mat-display-4\">\n              Everybody gets a lemon.\n            </div>\n          </div>\n        **} @else {**\n          <app-login></app-login>\n        **}**\n      `,\n       standalone: true,\n       imports: [LoginComponent, AsyncPipe], \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    import { Component, OnInit } from '@angular/core'\n    import { AuthService } from './auth/auth.service'\n    ...\n    export class AppComponent implements OnInit { \n      constructor(..., **public****authService****:** **AuthService**) {\n      }\n      ngOnInit(): void {}\n      ...\n    } \n    ```", "```js\n    **@if** **({**\n      **status****: authService.****authStatus$** **|** **async****,**\n      **user****: authService.****currentUser$** **|** **async**\n    **};** **as** **auth;) {** \n       <mat-toolbar ... \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    @if (auth?.status?.isAuthenticated) {\n      <button ... > \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    **import** **{** **NgOptimizedImage** **}** **from****'****@angular/common'**\n    styles: `\n      .image-cropper {\n        border-radius: 50%;\n      }\n    `,\n    template: `\n      ...\n      @if (auth?.status?.isAuthenticated) {\n        <button mat-mini-fab routerLink=\"/user/profile\" \n         matTooltip=\"Profile\" aria-label=\"User Profile\">\n        @if (auth?.user?.picture) {\n          <img alt=\"Profile picture\" class=\"image-cropper\" \n               **[ngSrc]=\"auth?.user?.picture ?? ''\"** \n               width=\"40px\" height=\"40px\" fill />\n        }\n        @if (!auth?.user?.picture) {\n          <mat-icon>account_circle</mat-icon>\n        }\n      </button>\n    }\n    ...\n    `\n    standalone: true,\n      imports: [\n        FlexModule,\n        RouterLink,\n        NavigationMenuComponent,\n        RouterOutlet,\n        AsyncPipe,\n        MatIconModule,\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        NgOptimizedImage,\n      ], \n    ```", "```js\n    **src/app/common/validations.****ts**\n    import { Validators } from '@angular/forms'\n    export const EmailValidation = [\n      Validators.required, Validators.email\n    ]\n    export const PasswordValidation = [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(50),\n    ] \n    ```", "```js\n    **src/app/login/login.****component****.****ts**\n    import {\n      EmailValidation, PasswordValidation\n    } from '../common/validations'\n    ...\n    this.loginForm = this.formBuilder.group({\n      email: ['', EmailValidation],\n      password: ['', PasswordValidation],\n    }) \n    ```", "```js\n    **src/app/common/ui.****service****.****ts**\n    @Injectable({\n      providedIn: 'root',\n    })\n    export class UiService {\n      constructor(\n        private snackBar: MatSnackBar,\n        private dialog: MatDialog\n      ) {}\n      showToast(\n        message: string,\n        action = 'Close',\n        config?: MatSnackBarConfig\n    ) {\n        this.snackBar.open(\n          message,\n          action,\n          config || {\n            duration: 7000,\n          }\n        )\n      }\n    } \n    ```", "```js\n    **app/common/simple-dialog.****component****.****ts**\n    import { Component, Inject } from '@angular/core'\n    import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog'\n    @Component({\n      // prettier-ignore\n      template: `\n        <h2 mat-dialog-title>{{ data.title }}</h2>\n        <mat-dialog-content>\n          <p>{{ data.content }}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n          <span class=\"flex-spacer\"></span>\n          @if (data.cancelText) {\n            <button mat-button mat-dialog-close>\n              {{ data.cancelText }}\n            </button>\n          }\n          <button mat-button mat-button-raised color=\"primary\"\n            [mat-dialog-close]=\"true\" cdkFocusInitial>\n            {{ data.okText }}\n          </button>\n        </mat-dialog-actions>\n      `,\n      standalone: true,\n      imports: [MatDialogModule, MatButtonModule],\n    })\n    export class SimpleDialogComponent {\n      constructor(\n        public dialogRef: MatDialogRef<SimpleDialogComponent, boolean>,\n        @Inject(MAT_DIALOG_DATA)\n        public data: {\n          title: string;\n          content: string;\n          okText: string;\n          cancelText: string\n        }\n      ) {}\n    } \n    ```", "```js\n    **app/common/ui.****service****.****ts**\n    ...\n    showDialog(\n      title: string,\n      content: string,\n      okText = 'OK',\n      cancelText?: string,\n      customConfig?: MatDialogConfig\n    ): Observable<boolean> {\n      const dialogRef = this.dialog.open(\n        SimpleDialogComponent,\n        customConfig || {\n          width: '300px',\n          data: { title, content, okText, cancelText },\n        }\n      )\n      return dialogRef.afterClosed()\n    } \n    ```", "```js\n    **app/common/ui.****service****.****ts**\n    import { importProvidersFrom, makeEnvironmentProviders } from '@angular/core'\n    export function provideUiService() {\n      return makeEnvironmentProviders([\n        importProvidersFrom(MatDialogModule, MatSnackBarModule),\n      ])\n    } \n    ```", "```js\n    **src/app/app.****config****.****ts**\n    export const appConfig: ApplicationConfig = {\n      providers: [\n        ...\n        provideUiService()\n      ]\n    } \n    ```", "```js\n    **src/app/login/login.****component****.****ts**\n    import { UiService } from '../common/ui.service'\n    ...\n      **private****readonly** **uiService =** **inject****(****UiService****)** \n      ...\n      async login(submittedForm: FormGroup) {\n        ...\n        tap(([authStatus, user]) => {\n          **this****.****uiService****.****showToast****(**\n            **`Welcome** **${user.fullName}****! Role:** **${user.role}****`**\n          )\n          ...\n        })\n     ... \n    ```", "```js\n    **src/app/login/login.****component****.****ts**\n    this.uiService.showDialog(\n      `Welcome ${user.fullName}!`, `Role: ${user.role}`\n    ) \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    styles: `\n        .app-container {\n          display: flex;\n          flex-direction: column;\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          left: 0;\n          right: 0;\n        }\n        .app-is-mobile .app-toolbar {\n          position: fixed;\n          z-index: 2;\n        }\n        .app-sidenav-container {\n          flex: 1;\n        }\n        .app-is-mobile .app-sidenav-container {\n          flex: 1 0 auto;\n        }\n        mat-sidenav {\n          width: 200px;\n        }\n        .image-cropper {\n          border-radius: 50%;\n        }\n      `, \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    import { MediaObserver } from '@ngbracket/ngx-layout '\n    export class AppComponent implements OnInit {\n      **private** **destroyRef =** **inject****(****DestroyRef****)**\n      **opened****:** **boolean**\n      constructor(\n        ...\n        **public****media****:** **MediaObserver**\n      ) {\n      ...\n      }\n      ngOnInit(): void {\n        throw new Error('Method not implemented.')\n      }\n    } \n    ```", "```js\n    **src/app/app.****component****.****ts**\n      ngOnInit() {\n        combineLatest([\n          this.media.asObservable(),\n          this.authService.authStatus$,\n        ])\n          .pipe(\n            tap(([mediaValue, authStatus]) => {\n              if (!authStatus?.isAuthenticated) {\n                this.opened = false\n              } else {\n                if (mediaValue[0].mqAlias === 'xs') {\n                  this.opened = false\n                } else {\n                  this.opened = true\n                }\n              }\n            }),\n            takeUntilDestroyed(this.destroyRef)\n          )\n          .subscribe()\n      } \n    ```", "```js\n    **src/app/app.****component****.****ts**\n    ...\n    // prettier-ignore\n    template: `\n      **<div class=\"app-container\">**\n          @if (\n            {\n              status: authService.authStatus$ | async,\n              user: authService.currentUser$ | async\n            };\n            as auth;\n          ) {\n            <mat-toolbar color=\"primary\" fxLayoutGap=\"8px\" \n             **class=\"app-toolbar\"** \n             **[class.app-is-mobile]=\"media.isActive('xs')\"**\n              >\n              @if (auth?.status?.isAuthenticated) {\n                <button mat-icon-button \n                  **(click)=\"sidenav.toggle()\">**\n                  <mat-icon>menu</mat-icon>\n                </button>\n              }\n        ...\n      </mat-toolbar>\n      <mat-sidenav-container class=\"app-sidenav-container\">\n        <mat-sidenav #sidenav\n          [mode]=\"media.isActive('xs') ? 'over' : 'side'\"\n          [fixedInViewport]=\"media.isActive('xs')\"\n          fixedTopGap=\"56\" [(opened)]=\"opened\"\n        >\n          <app-navigation-menu></app-navigation-menu>\n        </mat-sidenav>\n        <mat-sidenav-content>\n          <router-outlet></router-outlet>\n        </mat-sidenav-content>\n      </mat-sidenav-container>\n      </div>\n    `, \n    ```", "```js\n    **src/app/navigation-menu/navigation-menu.****component****.****ts**\n    ...\n      styles: `\n          .active-link {\n            font-weight: bold;\n            border-left: 3px solid green;\n          }\n          .mat-mdc-subheader {        font-weight: bold;      }\n      `,\n      template: `\n        <mat-nav-list>\n          <h3 matSubheader>Manager</h3>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/manager/users\">\n              Users\n          </a>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/manager/receipts\">\n              Receipts\n          </a>\n          <h3 matSubheader>Inventory</h3>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/inventory/stockEntry\">\n              Stock Entry\n          </a>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/inventory/products\">\n              Products\n          </a>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/inventory/categories\">\n              Categories\n          </a>\n          <h3 matSubheader>Clerk</h3>\n          <a mat-list-item\n            routerLinkActive=\"active-link\"\n            routerLink=\"/pos\">\n              POS\n          </a>\n        </mat-nav-list>\n      `,\n      standalone: true,\n      imports: [MatListModule, RouterLinkActive, RouterLink],\n    ... \n    ```", "```js\n**app/src/login/login.****component****.****ts**\nasync login(submittedForm: FormGroup) {\n  ...\n    this.router.navigate([\n      this.redirectUrl ||\n      **this****.****homeRoutePerRole****(user.****role****as****Role****)**\n    **])**\n  **...**\n**}**\n**private****homeRoutePerRole****(****role****:** **Role****) {**\n  **switch** **(role) {**\n    **case****Role****.****Cashier****:**\n      **return****'/pos'**\n    **case****Role****.****Clerk****:**\n      **return****'/inventory'**\n    **case****Role****.****Manager****:**\n      **return****'/manager'**\n    **default****:**\n      **return****'/user/profile'**\n  **}**\n**}** \n```", "```js\n    **src/app/auth/auth.****guard****.****ts**\n    export const authGuard = (route?: ActivatedRouteSnapshot) => {\n      const authService = inject(AuthService)\n      const router = inject(Router)\n      const uiService = inject(UiService)\n      return checkLogin(authService, router, uiService, route)\n    } \n    ```", "```js\n    function checkLogin(\n      authService: AuthService,\n      router: Router,\n      uiService: UiService,\n      route?: ActivatedRouteSnapshot\n    ): Observable<boolean> {\n      return authService.authStatus$.pipe(\n        map((authStatus) => {\n          const roleMatch = checkRoleMatch(authStatus.userRole, route)\n          const allowLogin = authStatus.isAuthenticated && roleMatch\n          if (!allowLogin) {\n            showAlert(uiService, authStatus.isAuthenticated, roleMatch)\n            router.navigate(['login'], {\n              queryParams: {\n                redirectUrl: router?.getCurrentNavigation()?\n                             .initialUrl.toString(),\n              },\n            })\n          }\n          return allowLogin\n        }),\n        take(1) // the observable must complete for the guard to work\n      )\n    }\n    function checkRoleMatch(role: Role, route?: ActivatedRouteSnapshot) {\n      if (!route?.data?.['expectedRole']) {\n        return true\n      }\n      return role === route.data['expectedRole']\n    }\n    function showAlert(\n      uiService: UiService,\n      isAuth: boolean,\n      roleMatch: boolean\n    ) {\n      if (!isAuth) {\n        uiService.showToast('You must login to continue')\n      }\n      if (!roleMatch) {\n        uiService.showToast(\n          'You do not have the permissions to view this resource'\n        )\n      }\n    } \n    ```", "```js\n    **src/app/app.****routes****.****ts**\n    **import** **{ authGuard }** **from****'./auth/auth.guard'**\n    ...\n    {\n      path: 'manager',\n      loadChildren: () => import('./manager/manager.module')\n        .then((m) => m.ManagerModule), \n      **canLoad****: [authGuard],**\n      **data****: {** **expectedRole****:** **Role****.****Manager** **},**\n    },\n    ... \n    ```", "```js\n    **src/app/user/user-routing.****module****.****ts**\n    ...\n    { \n      path: 'profile', component: ProfileComponent, \n      **canActivate****: [authGuard]** \n    },\n    ... \n    ```", "```js\n    **src/app/mananger/manager-routing.****module****.****ts**\n    ...\n      {\n        path: 'home',\n        component: ManagerHomeComponent,\n        **canActivate****: [authGuard],**\n        **data****: {** **expectedRole****:** **Role****.****Manager** **},**\n      },\n      {\n        path: 'users',\n        component: UserManagementComponent,\n        **canActivate****: [authGuard],**\n        **data****: {** **expectedRole****:** **Role****.****Manager** **},**\n      },\n      {\n        path: 'receipts',\n        component: ReceiptLookupComponent,\n        **canActivate****: [authGuard],**\n        **data****: {** **expectedRole****:** **Role****.****Manager** **},**\n      },\n    ... \n    ```", "```js\n    **src/app/common/common.****testing****.****ts**\n    import { autoSpyObj } from 'angular-unit-test-helper'\n    export const commonTestingProviders: any[] = [\n      { provide: AuthService, useValue: autoSpyObj(AuthService) },\n      { provide: UiService, useValue: autoSpyObj(UiService) }, \n    ] \n    ```", "```js\n    **src/app/app.****component****.****spec****.****ts**\n    ...\n      TestBed.configureTestingModule({\n        **imports****: [...commonTestingModules],**\n        providers: [\n          **{** **provide****:** **MediaObserver****,** **useClass****:** **MediaObserverFake** **},**\n    ... \n    ```", "```js\n    **src/app/login/login.****component****.****spec****.****ts**\n    ...\n      TestBed.configureTestingModule({\n        **imports****: [... commonTestingModules],**\n        **providers****: [... commonTestingProviders],**\n        declarations: [LoginComponent],\n      }).compileComponents() \n    ```", "```js\n    **src/app/auth/auth.****service****.****spec****.****ts**\n    ...\n    TestBed.configureTestingModule({\n      **imports****: [****HttpClientTestingModule****],**\n      **providers****: [****AuthService****,** \n      **{** **provide****:** **UiService****,** **useValue****:** **autoSpyObj****(****UiService****) }],**\n    }) \n    ```", "```js\n    $ npm install -g firebase-tools \n    ```", "```js\n    $ firebase login \n    ```", "```js\n    $ firebase init \n    ```", "```js\n    $ npx ng build --prod \n    ```", "```js\n    $ npm run build:prod \n    ```", "```js\n    $ firebase deploy \n    ```", "```js\n$ npx ng add @angular/fire \n```", "```js\n    $ npx ng g s auth/firebaseAuth --lintFix \n    ```", "```js\n    **src/app/auth/auth.****firebase****.****service****.****ts**\n    import { inject, Injectable } from '@angular/core'\n    import {\n      Auth as FireAuth,\n      signInWithEmailAndPassword,\n      signOut,\n      User as FireUser,\n    } from '@angular/fire/auth'\n    import { Observable, of, Subject } from 'rxjs'\n    import { IUser, User } from '../user/user/user'\n    import { Role } from './auth.enum'\n    import {\n      AuthService,\n      defaultAuthStatus,\n      IAuthStatus,\n      IServerAuthResponse,\n    } from './auth.service'\n    interface IJwtToken {\n      email: string\n      iat: number\n      exp: number\n      sub: string\n    }\n    @Injectable()\n    export class FirebaseAuthService extends AuthService {\n      private afAuth: FireAuth = inject(FireAuth)\n      constructor() {\n        super()\n      }\n      protected authProvider(\n        email: string,\n        password: string\n      ): Observable<IServerAuthResponse> {\n        const serverResponse$ = new Subject<IServerAuthResponse>()\n        signInWithEmailAndPassword(this.afAuth, email, password).then(\n          (res) => {\n            const firebaseUser: FireUser | null = res.user\n            firebaseUser?.getIdToken().then(\n              (token) => serverResponse$.next({\n                accessToken: token\n              } as IServerAuthResponse),\n              (err) => serverResponse$.error(err)\n            )\n          },\n          (err) => serverResponse$.error(err)\n        )\n        return serverResponse$\n      }\n      protected transformJwtToken(token: IJwtToken): IAuthStatus {\n        if (!token) {\n          return defaultAuthStatus\n        }\n        return {\n          isAuthenticated: token.email ? true : false,\n          userId: token.sub,\n          userRole: Role.None,\n        }\n      }\n      protected getCurrentUser(): Observable<User> {\n        return of(this.transformFirebaseUser(this.afAuth.currentUser))\n      }\n      private transformFirebaseUser(firebaseUser: FireUser | null): User {\n        if (!firebaseUser) {\n          return new User()\n        }\n        return User.Build({\n          name: {\n            first: firebaseUser?.displayName?.split(' ')[0] ||\n                     'Firebase',\n            last: firebaseUser?.displayName?.split(' ')[1] || 'User',\n          },\n          picture: firebaseUser.photoURL,\n          email: firebaseUser.email,\n          _id: firebaseUser.uid,\n          role: Role.None,\n        } as IUser)\n      }\n      override async logout() {\n        if (this.afAuth) {\n          await signOut(this.afAuth)\n        }\n        this.clearToken()\n        this.authStatus$.next(defaultAuthStatus)\n      }\n    } \n    ```", "```js\n    **src/app/app.****config****.****ts**\n      {\n        provide: AuthService,\n        useClass: **FirebaseAuthService**,\n      }, \n    ```", "```js\n    src/app/auth/auth.firebase.service.spec.ts\n    import {\n      HttpClientTestingModule\n    } from '@angular/common/http/testing'\n    import { inject, TestBed } from '@angular/core/testing'\n    import { Auth as FireAuth } from '@angular/fire/auth'\n    import { UiService } from '../common/ui.service'\n    import { FirebaseAuthService } from './auth.firebase.service'\n    const angularFireStub = {\n      user: jasmine.createSpyObj('user', ['subscribe']),\n      auth: jasmine.createSpyObj('auth',\n                ['signInWithEmailAndPassword', 'signOut']),\n    }\n    describe('AuthService', () => {\n      beforeEach(() => {\n        TestBed.configureTestingModule({\n          imports: [HttpClientTestingModule],\n          providers: [\n            FirebaseAuthService,\n            UiService,\n            { provide: FireAuth, useValue: angularFireStub },\n          ],\n        })\n      })\n      it('should be created', inject(\n        [FirebaseAuthService],\n        (service: FirebaseAuthService) => {\n          expect(service).toBeTruthy()\n        }\n      ))\n    }) \n    ```", "```js\n    **src/app/auth/auth.****enum****.****ts**\n    export enum AuthMode {\n      InMemory = 'In Memory',\n      CustomServer = 'Custom Server',\n      CustomGraphQL = 'Custom GraphQL',\n      Firebase = 'Firebase',\n    } \n    ```", "```js\n    **src/environments/environment.****ts**\n    ...\n      authMode: AuthMode.**InMemory**,\n    ...\n    **src/environments/environment.****prod****.****ts**\n    ...\n      authMode: AuthMode.**Firebase**,\n    ... \n    ```", "```js\n    **src/app/auth/auth.****factory****.****ts**\n    import { environment } from '../../environments/environment'\n    import { AuthMode } from './auth.enum'\n    import { FirebaseAuthService } from './auth.firebase.service'\n    import { InMemoryAuthService } from './auth.in-memory.service'\n    export function authFactory() {\n      switch (environment.authMode) {\n        case AuthMode.InMemory:\n          return new InMemoryAuthService()\n        case AuthMode.Firebase:\n          return new FirebaseAuthService()\n        case AuthMode.CustomServer:\n          throw new Error('Not yet implemented')\n        case AuthMode.CustomGraphQL:\n          throw new Error('Not yet implemented')\n      }\n    } \n    ```", "```js\n    **src/app/app.****config****.****ts**\n      providers: [\n        {\n          provide: AuthService,\n          **useFactory****: authFactory**\n        }, \n    ```"]