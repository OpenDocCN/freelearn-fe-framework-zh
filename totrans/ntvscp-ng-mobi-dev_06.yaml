- en: Running the App on iOS and Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of ways to build, run, and start working with NativeScript
    applications.  We will cover command-line tools, as they are currently the most
    supported method, and the best way to do anything with any NativeScript project.
  prefs: []
  type: TYPE_NORMAL
- en: To simplify things for our understanding, we will work through the commands
    that we will use frequently first, then we will cover the rest of the commands
    that aren't as frequently used. So, let's begin and work through the commands
    that you will want to know.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to run an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to start the Debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build an application for deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to start the testing framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to run a NativeScript diagnostic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All about Android Keystores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking command…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first command we will cover is the one you will use every time you
  prefs: []
  type: TYPE_NORMAL
- en: start your app. To make things simpler, I will use `<platform>` to mean iOS,
    Android, or--when it is finally supported--Windows.
  prefs: []
  type: TYPE_NORMAL
- en: tns run <platform>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tns run <platform>` command will automatically build your app and sync
    it up to the devices and emulators. It will do all the heavy-lifting to try and
    make your app be in a running state on the device, and then it will launch the
    app. This command has changed over the years and has now become a fairly smart
    command that will automatically make certain choices to simplify your development
    life. One of the cool features of this command is that it will sync your application
    to all running and connected devices. If you have five different devices hooked
    up, all five of them will receive the changes. This only works per each platform,
    but you can run `tns run ios` in one and `tns run android` in another command
    window, and then any changes will automatically be synced to all devices connected
    to your machine. As you may imagine, this is very useful during the testing and
    cleaning up phase to make sure that everything continues to look good on different
    phones and tablets. If you have no physical devices hooked up to your computer,
    it will automatically launch an emulator for you.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, since the app already exists on the devices, it will just do a quick
    live sync of the changed files. This is a very fast process, as it just transfers
    all the changes in your files from your own `app` folder to all the connected
    devices, and then starts the app.  This process is, in the majority of situations,
    a really good thing. However, `tns run <platform>` will not always automatically
    detect any changes to your `node_modules` folder, for example, when you upgrade
    a plugin. If this is the case, you will need to cancel the current running `tns
    run` and then start a new `tns run`. Occasionally, the `tns run` will still believe
    that all it needs to do is sync, whereas the reality is that it should have to
    rebuild the app.  In this case, you will want to use the handy-dandy `--clean`
    option.  This is very important for times when the device does not seems to pick
    up any of your changes. The `tns run <platform> --clean` command will normally
    force the app to be rebuilt; however, if `--clean` fails to rebuild, then check
    out the `tns build` command described later in the chapter. There are a couple
    of other command parameters that aren't used much, but you might need them for
    a specific situation. The `--justlaunch` will start the app and do nothing else;
     `--no-watch` will disable live syncing, and finally `--device <device id>` will
    force the app to be installed only on a specific device. You can view which devices
    are available for the installation of the app by running `tns devices`.
  prefs: []
  type: TYPE_NORMAL
- en: tns debug <platform>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next command we will discuss is `tns debug <platform>`; this will allow
    you to use the debug tools to test your application. This works in a similar way
    to the `tns run` command; however, instead of it just running your app, it will
    debug it. The debugger will use the standard Chrome development tools, which enables
    you to step through the code: break points, call stacks, and console logs. This
    command will give you a URL, which you can use to open in Chrome. In iOS specifically,
    you should run `tns debug ios --chrome` to get the URL for chrome-devtools. The
    following is an example of debugging Android via the Chrome debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Some of the same `tns run` parameters are valid here, such as `--no-watch`,
    `--device`, and `--clean`. In addition to those commands, several other commands
    are available, for example, `--debug-brk`, which is used to make the app break
    at the start of the application so that you can easily set breakpoints before
    continuing the start up process. `--start` and `--stop` allow you to attach and
    detach from an already running application.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget that if you are currently using the debugger, JavaScript has the
    cool `debugger;` command, which will force an attached debugger to break just
    as though you had a breakpoint set.  This can be used to put a break anywhere
    in your code, and it is ignored if a debugger is not attached to your program.
  prefs: []
  type: TYPE_NORMAL
- en: tns build <platform>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next command you will need to be aware of is `tns build <platform>`; this
    command fully builds a new app from scratch.  Now, the primary use for this command
    is when you want to build a debug or release version of the app you are going
    to give to somebody else to test or to upload it to one of the stores. However,
    it can also be used to force a fully clean build of the application, if the `tns
    run` version of your app is in a weird state--this will do a full rebuild. If
    you don't include the `--release` flag, the build will be the default debug build.
  prefs: []
  type: TYPE_NORMAL
- en: On iOS, you will use `--for-device`, which will make the app compile for a real
    device rather than an emulator. Remember that you need to have signing keys from
    Apple to do a proper release build.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Android, when you use `--release`, you will need to include all of the following
    `--key-store-*` parameters; these are required to sign in to your Android application:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `--key-store-path` | Where your key store file is located. |'
  prefs: []
  type: TYPE_TB
- en: '| `--key-store-password` | Your password to read any of the data in your keystore.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--key-store-alias` | The alias for this app. So, inside your keystore, you
    may have `AA` as the alias, which in your mind equals AwesomeApp. I prefer to
    make the alias the same as the full name of the app, but this is your choice.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--key-store-alias-password` | This is the password required to read the
    actual signing key assigned to the alias you just set. |'
  prefs: []
  type: TYPE_TB
- en: Since keystores can be confusing to deal with, we will stray from the path slightly
    here and discuss how to actually create a keystore. This is normally only a one-time
    thing, that you will need to do for each Android application you want to release.
    This is also not something you need to worry about for iOS applications, as Apple
    provides you the signing keys, and they fully control them.
  prefs: []
  type: TYPE_NORMAL
- en: Android Keystores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On Android, you create your own application signing keys. As such, this key
    is used for the entire life of your application--by entire, I mean you use the
    same key to release every version of your application. This key is what links
    version 1.0 to v1.1 to v2.0\. Without using the same key, the application will
    be considered a totally different application.
  prefs: []
  type: TYPE_NORMAL
- en: The reason there are two passwords is that your keystore can actually contain
    an unlimited number of keys, and so, each key in the keystore has its own password.
    Anyone who has access to this key can pretend to be you. This is helpful for building
    servers, but not so helpful if you lose them. You cannot change the key at a later
    time, so making backups of your keystore is extremely important.
  prefs: []
  type: TYPE_NORMAL
- en: Without your keystore, you will never be able to release a new version of the
    exact same application name, meaning that anyone using the older version will
    not see that you have an updated version. So, again, it is critical that you back
    up your keystore file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new keystore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You provide a path to the file you want to save into the `keystore_name`, and
    for the `alias_name` you put the actual key name for which I normally use the
    application name; So, you type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You now have a keystore for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Android Google Play Fingerprints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you use Google Play services, you might have to give them your Android application
    key fingerprint. To get your key fingerprint, you can use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that in addition to ensuring that you keep a good back up of your keystores,
    if you ever sell your application to another vendor, having separate keystores
    per application makes the transfer a lot easier and safer for you. If you use
    the same keystore and/or alias, it makes it difficult for you to separate out
    who gets what. So, for the sake of simplicity, I personally recommend that you
    have a separate keystore and alias per application. I normally keep the keystore
    in with the app and under version control. Since both opening and accessing an
    alias are password protected, you are fine unless you choose your passwords poorly.
  prefs: []
  type: TYPE_NORMAL
- en: Back in command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've taken took a side trip to deal with Android keystores, we will
    dive deeper into more of the tns commands that you only use occasionally here
    and there. The first of these is the tns plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The tns plugin command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This one is actually quite important, but it is only used when you want to
    deal with plugins. The most common version of this command is just `tns plugin
    add <name>`. So, for example, if you want to install a plugin called *NativeScript-Dom*,
    you will perform `tns plugin add nativescript-dom`, and it will automatically
    install the code for this plugin to be used in your application.  To remove this
    plugin, you would type `tns plugin remove nativescript-dom`. We also have `tns
    plugin update nativescript-dom` to remove the plugin and download and install
    the newest version of the plugin. Finally, running `tns plugin` alone will give
    you a list of plugins and their versions that you have installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, to be honest, if I need this information I''m looking for outdated
    plugins, and so your better bet is to type `npm outdated` and let `npm` give you
    the list of outdated plugins and the current versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you have outdated plugins, then you can use the `tns plugin update` command
    to upgrade them.
  prefs: []
  type: TYPE_NORMAL
- en: The tns install <dev_plugin> command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This one isn't used very much, but it is useful when you need it, as it allows
    you to install development plugins, such as webpack, typescript, coffee script,
    or SASS support. So, if you decide that you want to use *webpack*, you can type
    `tns install webpack`, and it will install the webpack support so that you can
    webpack your application.
  prefs: []
  type: TYPE_NORMAL
- en: The tns create <project_name> command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This command is what we use to create a new project. This will create a new
    directory and install all the platform-independent code required to build a new
    app. The important parameters for this are `--ng`, which tells it to use the Angular
    template (which is what we are using in this book--without `--ng`, you get the
    plain JS template) and the `--appid`, which allows you to set your full app name.
    So, `tns create AwesomeApp --ng --appid com.mastertechapps.awesomeapp` will create
    a new Angular app in the `AwesomeApp` directory with the app ID, `com.mastertechapps.awesomeapp`.
  prefs: []
  type: TYPE_NORMAL
- en: The tns info command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another useful command for checking the state of the main NativeScript component
    is `tns info`; this command will actually check your main NativeScript parts and
    tell you whether anything is out of date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding example, there is a newer version of the NativeScript
    command-line and I don't have the `ios` runtime installed.
  prefs: []
  type: TYPE_NORMAL
- en: The tns platform [add|remove|clean|upgrade] <platform> command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the `tns platform` [`add`|`remove`|`clean`|`upgrade`] `<platform>`
    command to install, remove, or update the platform modules just like plugins.
    These are the `tns-android` and `tns-ios` modules you see listed in the prior
    `tns info` command. The application actually needs these platform-specific modules
    to be installed. By default, when you perform a `tns run`, it will automatically
    install them if they are missing. Occasionally, if the application refuses to
    build, you can use `tns platform clean <platform>`, and it will automatically
    uninstall and then re-install the platform which will reset the build process.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when you do a `tns platform clean/remove/update`, these will totally
    delete the `platforms/<platform>` folder.  If you have made any manual changes
    to the files in this folder (which is not recommended), those changes will be
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The tns test <platform> command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tns test <platform>` command allows you to install and/or start the testing
    framework. We will cover testing in more depth in later chapters, however, for
    the sake of completeness, we will cover the command in this section. `tns test
    init` will initialize the testing system; you will do this once per application.
    It will ask you to select a testing framework and then install your chosen testing
    framework. `tns test <platform>` will start the testing on that specific platform.
  prefs: []
  type: TYPE_NORMAL
- en: The tns device command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you specifically need to target a device, using the `tns device` command
    will give you a list of the devices that are installed and connected to your computer.
    This will allow you to use the `--device <deviceid>` parameter on the `tns run/debug`
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The tns doctor command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tns doctor` command checks your environment for common issues. It will
    attempt to detect whether everything is installed and configured correctly. It
    mostly works, but occasionally it will fail and state something is broken even
    when everything actually works. However, it provides a very good first indication
    of what might be wrong if your `tns run/build/debug` no longer works.
  prefs: []
  type: TYPE_NORMAL
- en: The tns help command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you totally forget what we have written here, you can execute `tns help` which
    will give you an overview of the different commands. Some of the parameters may
    not be listed but at this point, they do exist. In newer versions, newer parameters
    and commands may be added to `tns`, and this is the easiest way to find out about
    them.
  prefs: []
  type: TYPE_NORMAL
- en: If, for some reason, your app does not seem to be updating properly, the easiest
    way to fix this is to uninstall the app from the device. Then, try and do a `tns
    build <platform>`, then `tns run <platform>`.  If that fails to fix it, then uninstall
    the app again, do a `tns platform clean <platform>`, and then do your `tns run`.
    Occasionally, the platform may get in a weird state, and resetting it is the only
    way to fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: TNS command-line cheatsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Command-line** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `tns --version` | This returns the version of the NativeScript command. If
    you are running an older version, then you can use npm to upgrade your NativeScript
    command like this: `npm install -g nativescript`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns create <your project name>` | This creates a brand new project.The following
    are its parameters: `--ng` and `--appid`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns platform add <platform>` | This adds a target platform to your project.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `tns platform clean <platform>` | This command is normally not needed, but
    if you are messing with the platform directory and your platform, you can remove
    and then add it back. Note that this deletes the entire platform directory. So,
    if you have made any specific customizations to your Android manifest or iOS Xcode
    project file, you should back them up before running the clean command. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns platform update <platform>` | This is actually a pretty important command. 
    NativeScript is still a very active project that is under a lot of development.
    This command upgrades your platform code to the latest version, which typically
    eliminates bugs and adds lots of new features. Note that this should be done alongside
    an upgrade of the common JavaScript libraries, as most of the time they are in
    sync with each other. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns build <platform>` | This builds the application for that platform using
    theparameters: `--release`, `--for-device`, and `--key-store-*`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns deploy <platform>` | This builds and deploys the application to a physical
    or virtual device for that platform. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns run <platform>` | This builds, deploys, and starts the application on
    a physical device or an emulator. This is the command that you will use the majority
    of the time to run your application and check out the changes. Its parameters
    are `--clean`, `--no-watch`, and `--justlaunch`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns debug <platform>` | This builds, deploys and then starts the application
    on a physical device or an emulator in debug mode.  This is probably the second
    most used command. Its parameters are `--clean`, `--no-watch`, `--dbg-break`,
    and `--start`. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns plugin add <plugin>` | This allows you to add a third-party plugin or
    component. These plugins can be entirely JavaScript-based code, or they might
    also contain a compilation from the Java or Objective-C library. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns doctor` | This allows you to run diagnostic checks on your environment
    if NativeScript does not appear to be working. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns devices` | This shows a list of connected devices for use with the `--device`
    command. |'
  prefs: []
  type: TYPE_TB
- en: '| `tns install <dev plugin>` | This will install a development plugin (that
    is, webpack, typescript, and so on). |'
  prefs: []
  type: TYPE_TB
- en: '| `tns test [ init &#124; <platform> ]` | This allows you to create or run
    any tests for your application. Using init will initialize the test framework
    for the application.  Then, you can type the platform to run the tests on that
    platform. |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have an idea of the power of a command line, all you really need
    to remember is `tns debug ios` and `tns run android`; these will be your constant
    friends in our adventure. Throw in a couple of `tns plugin add` commands and then
    wrap up the application when finally finished with a `tns build`, and you are
    golden**.** However, don't forget about the rest of the commands; they all serve
    a purpose. Some of them are rarely used, but some of them are extremely helpful
    when you need them.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](part0092.html#2NNJO0-289fe2426d594f99a90e4363b2c9c34d), *Building
    the multi-track Player*, we will start exploring how to actually access the Native
    platform and integrate with plugins.
  prefs: []
  type: TYPE_NORMAL
