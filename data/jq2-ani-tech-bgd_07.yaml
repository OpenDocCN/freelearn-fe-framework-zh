- en: Chapter 7. Custom Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章. 自定义动画
- en: '*The predefined effects that we have looked at throughout the book so far are
    very good at what they do, but they are there to cater to very specific requirements
    and will sometimes not be enough when more complex animations are needed.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*迄今为止我们已经看过的预定义效果在执行它们的任务时非常出色，但它们只能满足非常具体的需求，有时在需要更复杂的动画时可能会不够用。*'
- en: '*In these situations, we can use jQuery''s `animate()` method, which allows
    us to easily define custom animations that can be as complex and as specialized
    as the task at hand requires. This is what we''ll be looking at over the course
    of this chapter.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这些情况下，我们可以使用jQuery的`animate()`方法，它允许我们轻松定义自定义动画，可以像任务所需的那样复杂和专业化。这是我们将在本章中探讨的内容。*'
- en: 'Subjects that we''ll cover throughout the course of this chapter include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题包括：
- en: Creating custom animations with the `animate()` method
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`animate()`方法创建自定义动画
- en: Passing arguments to the method
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向方法传递参数
- en: Animating an element's dimensions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画化元素的尺寸
- en: Animating an element's position
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画化元素的位置
- en: Creating a jQuery animation plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建jQuery动画插件
- en: Using the jQuery plugin we created
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们创建的jQuery插件
- en: The animate method
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画方法
- en: 'All custom animations with jQuery are driven by the `animate()` method. Despite
    the ability to animate almost any style property that has a numeric value, this
    method is simple to use and takes just a few arguments. This method may be used
    in the following way:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的所有自定义动画都由`animate()`方法驱动。尽管该方法可以动画化几乎任何具有数值的样式属性，但该方法使用简单，只需几个参数。该方法可以如下使用：
- en: '```js'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(elements).animate( properties [,duration] [,easing] [,complete] );
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: $(elements).animate( properties [,duration] [,easing] [,complete] );
- en: '```'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The first argument should take the form of an object, where each property of
    the object is a style that we'd like to animate, very similar to how we would
    use jQuery's `css()` method.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数应采用对象的形式，其中对象的每个属性都是我们想要动画的样式，与我们使用jQuery的`css()`方法非常相似。
- en: As I mentioned before, this can be any CSS style that takes a purely numerical
    argument (with the exception of colors, although with the jQuery UI library, we
    can animate colors as well. See [Chapter 6](ch06.html "Chapter 6. Extended Animations
    with jQuery UI"), *Extended Animations with jQuery UI*, for more information on
    jQuery UI). Background positions cannot be animated by jQuery natively, but it
    is quite easy to animate this property manually; see [Chapter 3](ch03.html "Chapter 3. Background
    Animation"), *Background Animation*, for more information on this technique.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，这可以是任何接受纯数值参数的CSS样式（颜色除外，尽管使用jQuery UI库，我们也可以动画化颜色。有关jQuery UI更多信息，请参见[第6章](ch06.html
    "第 6 章. 使用jQuery UI进行扩展动画")，*使用jQuery UI进行扩展动画*）。jQuery无法本机地动画化背景位置，但手动动画化此属性非常容易；有关此技术的更多信息，请参见[第3章](ch03.html
    "第 3 章. 背景动画")，*背景动画*。
- en: The duration, easing, and callback arguments take the same formats as those
    that we used with the fading methods earlier in the book ([Chapter 2](ch02.html
    "Chapter 2. Image Animation"), *Image Animation*) and are used in exactly the
    same way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间、缓动和回调参数的格式与本书中早期的淡入淡出方法使用的格式相同（[第2章](ch02.html "第 2 章. 图像动画")，*图像动画*），并且使用方式完全相同。
- en: Per-property easing
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐属性缓动
- en: As of jQuery Version 1.4, you can set per-property easing functions within a
    single `animate()` call. So, for example, if we are animating both the `width`
    and `height` parameters of an element, we can use the `linear` easing for the
    `width` animation, and the `swing` easing for the `height` animation. This applies
    to the standard easing functions built into jQuery, or any of the easing functions
    we talked about in the previous chapter ([Chapter 6](ch06.html "Chapter 6. Extended
    Animations with jQuery UI"), *Extended Animations with jQuery UI*).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自jQuery版本1.4起，您可以在单个`animate()`调用中设置逐属性缓动函数。因此，例如，如果我们正在动画元素的`宽度`和`高度`参数，我们可以对`宽度`动画使用`线性`缓动，对`高度`动画使用`摆动`缓动。这适用于jQuery内置的标准缓动函数，或我们在上一章中讨论的任何缓动函数（[第6章](ch06.html
    "第 6 章. 使用jQuery UI进行扩展动画")，*使用jQuery UI进行扩展动画*）。
- en: 'To supply easing types to the `animate()` method on a per-property basis, we
    need to provide an array as the value of the property we are animating. This can
    be done using the following syntax:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在每个属性的基础上为`animate()`方法提供缓动类型，我们需要提供一个数组作为我们正在动画化的属性的值。可以使用以下语法完成此操作：
- en: '```js'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(elements).animate({
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: $(elements).animate({
- en: 'property: [value, easingType]'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：[值，缓动类型]
- en: '});'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: An alternative syntax for animate()
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个 animate() 的替代语法
- en: 'Instead of using the duration, easing, and callback arguments individually,
    we may alternatively pass a configuration object to the `animate()` method containing
    the following configuration options:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与单独使用持续时间、缓动和回调参数不同，我们可以将以下配置选项的配置对象传递给 `animate()` 方法，而不是单独使用这些参数：
- en: '`duration`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration`'
- en: '`easing`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing`'
- en: '`complete`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`complete`'
- en: '`step`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step`'
- en: '`queue`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queue`'
- en: '`specialEasing`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`specialEasing`'
- en: The first three options (`duration`, `easing`, and `complete`) are the same
    as the arguments would be if we passed them into the method in the standard way.
    The last three options (`step`, `queue`, and `specialEasing`) are interesting,
    however, in that we do not have access to them in any other way.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个选项（`duration`、`easing` 和 `complete`）与以标准方式将它们传递到方法中时的参数相同。然而，最后三个选项（`step`、`queue`
    和 `specialEasing`）是有趣的，因为我们没有其他任何方式可以访问它们。
- en: The `step` option allows us to specify a callback function that will be executed
    on each step of the animation
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step` 选项允许我们指定一个在动画的每一步上执行的回调函数。'
- en: The `queue` option accepts a Boolean value that controls whether the animation
    is executed immediately or placed into the selected element's queue
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queue` 选项接受一个布尔值，控制动画是立即执行还是放入所选元素的队列中。'
- en: 'The `specialEasing` option allows us to specify an easing function for each
    individual style property that is being animated, giving us easing on a per-property
    basis using the alternative syntax:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`specialEasing` 选项允许我们为正在进行动画处理的每个单独样式属性指定一个缓动函数，使用以下替代语法使我们能够基于每个属性进行缓动。'
- en: '```js'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: The pattern for this second method of usage is as follows:$(elements).animate(properties
    [,configuration]);
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二种用法的模式如下：$(elements).animate(properties [,configuration]);
- en: '```'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Like most (but not all) jQuery methods, the `animate()` method returns a jQuery
    object so that additional methods can be chained to it. Like the other effect
    methods, multiple calls to `animate()` on the same element will result in an animation
    queue being created for the element. If we want to animate two different style
    properties at the same time, we can pass all of the required properties within
    the object passed to the `animate()` method as the first argument.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数（但不是全部）jQuery 方法一样，`animate()` 方法返回一个jQuery对象，以便可以将其他方法链接到它。像其他效果方法一样，对同一元素多次调用
    `animate()` 将导致为该元素创建一个动画队列。如果我们想同时动画两个不同的样式属性，我们可以将所有所需属性都传递给 `animate()` 方法的第一个参数所传递的对象中。
- en: Animating an element's position
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画一个元素的位置
- en: The `animate()` method is able to animate changes made to any CSS style property
    that has a numeric value, with the exception of colors and background positions.
    In this example, we'll create a content viewer that shows different panels of
    content by sliding them in and out of view using the `animate()` method.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`animate()` 方法能够动画处理对具有数值的任何CSS样式属性所做的更改，但颜色和背景位置除外。在此示例中，我们将使用 `animate()`
    方法创建一个内容查看器，通过滑动它们的方式将不同的内容面板显示在视图中。'
- en: This type of widget is commonly used on portfolio or showcase sites and is an
    attractive way to show a lot of content without cluttering a single page. In this
    example, we'll be animating the element's position.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的小部件通常用于作品集或展示网站，是一种吸引人的方式来显示大量内容，而不会使单个页面混乱不堪。在此示例中，我们将会动画显示元素的位置。
- en: Time for action – creating an animated content viewer
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建一个动画内容查看器
- en: 'We''ll start again by adding the underlying markup and styling:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重新开始添加底层标记和样式：
- en: 'The underlying markup for the content viewer should be added as follows using
    our template file:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该使用我们的模板文件将内容查看器的底层标记添加如下：
- en: '```js'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <div id="slider">
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="slider">
- en: <div id="viewer">
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="viewer">
- en: <img id="image1" src="img/amstrad.jpg" alt="Amstrad CPC 472">
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img id="image1" src="img/amstrad.jpg" alt="Amstrad CPC 472">
- en: <img id="image2" src="img/atari.jpg" alt="Atari TT030">
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img id="image2" src="img/atari.jpg" alt="Atari TT030">
- en: <img id="image3" src="img/commodore16.jpg" alt="Commodore 64">
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img id="image3" src="img/commodore16.jpg" alt="Commodore 64">
- en: <img id="image4" src="img/commodore128.jpg" alt="Commodore 128">
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img id="image4" src="img/commodore128.jpg" alt="Commodore 128">
- en: <img id="image5" src="img/spectrum.jpg" alt="Sinclair ZX Spectrum +2">
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img id="image5" src="img/spectrum.jpg" alt="Sinclair ZX Spectrum +2">
- en: </div>
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <ul id="ui">
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <ul id="ui">
- en: <li class="hidden" id="prev"><a href="" title="Previous">«</a></li>
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li class="hidden" id="prev"><a href="" title="Previous">«</a></li>
- en: <li><a href="#image1" title="Image 1" class="active">Image 1</a></li>
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li><a href="#image1" title="Image 1" class="active">图像 1</a></li>
- en: <li><a href="#image2" title="Image 2">Image 2</a></li>
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li><a href="#image2" title="Image 2">图像 2</a></li>
- en: <li><a href="#image3" title="Image 3">Image 3</a></li>
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li><a href="#image3" title="Image 3">图像 3</a></li>
- en: <li><a href="#image4" title="Image 4">Image 4</a></li>
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li><a href="#image4" title="Image 4">图像 4</a></li>
- en: <li><a href="#image5" title="Image 5">Image 5</a></li>
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li><a href="#image5" title="Image 5">图像 5</a></li>
- en: <li class="hidden" id="next"><a href="" title="Next">»</a></li>
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <li class="hidden" id="next"><a href="" title="下一页">»</a></li>
- en: </ul>
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </ul>
- en: </div>
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: '```'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save the file as `animate-position.html`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为 `animate-position.html`。
- en: Next, we should create the base CSS. By that, I mean we should add the CSS that
    is essential for the content viewer to function as intended, as opposed to styling
    that gives the widget a theme or skin. It's a good practice to separate out the
    styling in this way when creating plugins so that the widget is compatible with
    jQuery UI's ThemeRoller theming mechanism.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们应该创建基本的 CSS。我指的是我们应该添加的 CSS，这些 CSS 对于内容查看器的正常运行至关重要，而不是给小部件添加主题或皮肤的样式。在创建插件时，将样式分离出来是一个很好的做法，这样小部件就与
    jQuery UI 的 ThemeRoller 主题化机制兼容。
- en: 'In a new file in your text editor, add the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中的新文件中，添加以下代码：
- en: '```js'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '#slider {'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#slider {'
- en: width:500px;
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:500px;
- en: position:relative;
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:relative;
- en: '}'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#viewer {'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#viewer {'
- en: width:400px;
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:400px;
- en: height:300px;
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:300px;
- en: margin:auto;
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:auto;
- en: position:relative;
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:relative;
- en: overflow:hidden;
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: overflow:hidden;
- en: '}'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider ul {'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#slider ul {'
- en: width:295px;
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:295px;
- en: margin:0 auto;
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:0 auto;
- en: padding:0;
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: padding:0;
- en: list-style-type:none;
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: list-style-type:none;
- en: '}'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider ul:after {'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#slider ul:after {'
- en: content:".";
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: content:".";
- en: visibility:hidden;
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: visibility:hidden;
- en: display:block;
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: height:0;
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:0;
- en: clear:both;
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clear:both;
- en: '}'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider li {'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#slider li {'
- en: margin-right:10px;
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin-right:10px;
- en: float:left;
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:left;
- en: '}'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#prev, #next {'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#prev, #next {'
- en: position:absolute;
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: top:175px;
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: top:175px;
- en: '}'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#prev { left:20px; }'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#prev { left:20px; }'
- en: '#next {'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#next {'
- en: right:10px;
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: right:10px;
- en: '}'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: .hidden { display:none; }
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .hidden { display:none; }
- en: '#slide {'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#slide {'
- en: width:2000px;
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:2000px;
- en: height:300px;
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:300px;
- en: position:absolute;
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: top:0;
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: top:0;
- en: left:0;
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: left:0;
- en: '}'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#slide img { float:left; }'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#slide img { float:left; }'
- en: '#title {'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#title {'
- en: margin:0;
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:0;
- en: text-align:center;
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: text-align:center;
- en: '}'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this in the `css` folder as `animate-position.css`, and don't forget to
    link to the new stylesheet from the `<head>` tag of our page. Run the page in
    your browser now before we get into the scripting, so that you can see how the
    widget behaves without the accompanying script. You should find that any image
    can be viewed by clicking on its corresponding link using only CSS, and this will
    work in any browser. The previous and next arrows are hidden with our CSS because
    these will simply not work with JS turned off and when the image titles are not
    displayed, however, the widget's core functionality is still fully accessible.
    This is known as **progressive enhancement** and is considered by many to be the
    best practice for web development.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存在 `css` 文件夹中，文件名为 `animate-position.css`，并不要忘记从我们页面的 `<head>` 标签中链接到新样式表。现在在浏览器中运行页面，然后再我们进入脚本之前，看一下小部件在没有附带脚本的情况下的行为。您会发现，任何图像都可以通过单击其相应的链接来查看，仅使用
    CSS 即可，在任何浏览器中都可以使用。前进和后退箭头会被我们的 CSS 隐藏，因为这些箭头在关闭 JS 时根本不起作用，并且当不显示图像标题时，但是小部件的核心功能仍然完全可访问。这被称为**渐进增强**，被许多人认为是
    Web 开发的最佳实践。
- en: '*What just happened?*'
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The underlying HTML in this example is very straightforward. We have an outer
    container for the content-viewer as a whole, and then within this, we have a container
    for our content panels (simple images in this example), and a navigation structure
    to allow the different panels to be viewed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例中的基本 HTML 构造非常简单。我们有一个用于内容查看器的外部容器，然后在其中，我们有一个用于内容面板（在此示例中是简单的图像）的容器，以及一个导航结构，允许查看不同面板。
- en: Some of the elements we've added style rules for in our CSS file aren't hardcoded
    into the underlying markup, but will be created as necessary when needed. Doing
    it this way ensures that the content-viewer is still usable even when the visitor
    has JavaScript disabled.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 CSS 文件中为一些元素添加了样式规则，这些元素并没有硬编码到基本标记中，但将在需要时根据需要创建。以这种方式做可以确保即使访问者禁用了 JavaScript，内容查看器仍然可用。
- en: One important point to note is that the `#slide` wrapper element that we created
    and wrapped around the images has a `height` parameter equal to a single image
    and a `width` parameter equal to the sum of all image widths. The `#viewer` element,
    on the other hand, has both a `width` and a `height` parameter equal to a single
    image, so that only one image is visible at any one time.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的要点是，我们创建并围绕图片包装的 `#slide` 包装元素具有等于单个图片的 `height` 参数和等于所有图片宽度之和的 `width`
    参数。另一方面，`#viewer` 元素具有等于单个图片的 `width` 和 `height` 参数，因此一次只能看到一张图片。
- en: With JavaScript disabled, the images will appear to stack up on top of each
    other, but once the `#slide` wrapper element has been created, the images are
    set to float in order to stack up horizontally.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当 JavaScript 被禁用时，图片将看起来像是堆叠在一起，但一旦创建了 `#slide` 包装元素，图片就会被设置为浮动以水平堆叠。
- en: 'We''ll use easing in this example; so be sure to link to jQuery UI directly
    after the jQuery reference at the end of the `<body>` tag:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用缓动效果；因此，请确保在 `<body>` 标记末尾的 jQuery 引用后直接链接到 jQuery UI：
- en: '```js'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: <script src="img/jquery-ui.js"></script>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <script src="img/jquery-ui.js"></script>
- en: '```'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Time for action – initializing variables and prepping the widget
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 初始化变量并准备小部件
- en: 'First, we need to prepare the underlying markup and store some element selectors.
    Add the following code between our anonymous function in our newly created HTML
    file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要准备底层的标记并存储一些元素选择器。在我们新创建的 HTML 文件中的匿名函数之间添加以下代码：
- en: '```js'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $("#viewer").wrapInner("<div id=\"slide\"></div>");
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: $("#viewer").wrapInner("<div id=\"slide\"></div>");
- en: var container = $("#slider"),
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: var container = $("#slider"),
- en: prev = container.find("#prev"),
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: prev = container.find("#prev"),
- en: prevChild = prev.find("a"),
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: prevChild = prev.find("a"),
- en: next = container.find("#next").removeClass("hidden"),
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: next = container.find("#next").removeClass("hidden"),
- en: nextChild = next.find("a"),
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: nextChild = next.find("a"),
- en: slide = container.find("#slide"),
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: slide = container.find("#slide"),
- en: key = "image1",
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: key = "image1",
- en: details = {
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: details = {
- en: 'image1: {'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image1: {'
- en: 'position: 0, title: slide.children().eq(0).attr("alt")'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'position: 0, title: slide.children().eq(0).attr("alt")'
- en: '},'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: 'image2: {'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image2: {'
- en: 'position: -400, title: slide.children().eq(1).attr("alt")'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'position: -400, title: slide.children().eq(1).attr("alt")'
- en: '},'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: 'image3: {'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image3: {'
- en: 'position: -800, title: slide.children().eq(2).attr("alt")'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'position: -800, title: slide.children().eq(2).attr("alt")'
- en: '},'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: 'image4: {'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image4: {'
- en: 'position: -1200, title: slide.children().eq(3).attr("alt")'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'position: -1200, title: slide.children().eq(3).attr("alt")'
- en: '},'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: 'image5: {'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image5: {'
- en: 'position: -1600, title: slide.children().eq(4).attr("alt")'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'position: -1600, title: slide.children().eq(4).attr("alt")'
- en: '}'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: $("<h2>", {
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: $("<h2>", {
- en: 'id: "title",'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'id: "title",'
- en: 'text: details[key].title'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'text: details[key].title'
- en: '}).prependTo("#slider");'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '}).prependTo("#slider");'
- en: '```'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: To start with, we first wrapped all of the images inside `#viewer` in a new
    container. We'll be using this container to animate the movement of the panels.
    We give this new container an `id` attribute so that we can easily select it from
    the **Document Object Model** (**DOM**) when required.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将所有图片放在一个新的容器 `#viewer` 中。我们将使用此容器来动画显示面板的移动。我们给这个新容器一个 `id` 属性，这样我们就可以在需要时轻松地从**文档对象模型**（**DOM**）中选择它。
- en: This is the element that we will be animating later in the example.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们稍后将要动画显示的元素。
- en: Next, we cache the selectors for some of the elements that we'll need to manipulate
    frequently. We create a single jQuery object pointing to the outer `#slider` container
    and then select all of the elements we want to cache, such as the previous and
    next arrows, using the jQuery `find()` method.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们缓存一些经常需要操作的元素的选择器。我们创建一个指向外部 `#slider` 容器的单个 jQuery 对象，然后使用 jQuery 的 `find()`
    方法选择我们要缓存的所有元素，如上一页和下一页箭头。
- en: A `key` variable is also initialized, which will be used to keep track of the
    panel currently being displayed. Finally, we create a `details` object that contains
    information about each image in the content viewer. We can store the `left` position
    in pixels that the `slide` container must be animated to in order to show any
    given panel, and we can also store the title of each content panel.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 还初始化了一个 `key` 变量，它将用于跟踪当前显示的面板。最后，我们创建了一个 `details` 对象，其中包含内容查看器中每个图像的信息。我们可以存储
    `slide` 容器必须以像素为单位进行动画显示任何给定面板的 `left` 位置，并且我们还可以存储每个内容面板的标题。
- en: The title of each panel is read from the `alt` attribute of each image, but
    if we were using other elements, we could select the `title` attribute, or use
    jQuery's data method to set and retrieve the title of the content.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 每个面板的标题是从每个图像的`alt`属性中读取的，但如果我们使用其他元素，我们可以选择`title`属性，或者使用jQuery的data方法来设置和检索内容的标题。
- en: The `<h2>` element used for the title is created and inserted into the content-viewer
    with JS because there is no way for us to change it without using JavaScript.
    Therefore, when visitors have JS disabled, the title is useless and is better
    off not being shown at all.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`<h2>`元素用于标题是通过JS创建并插入到内容查看器中的，因为我们没有办法在不使用JavaScript的情况下更改它。因此，当访问者禁用JS时，标题是无用的，并且最好根本不显示。'
- en: The last thing we do in the first section of code is to remove the `hidden`
    class name from the next button so that it is displayed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第一部分中，我们做的最后一件事是从下一个按钮中移除`hidden`类名，以便显示它。
- en: The previous link (by this, I mean the link that allows the visitor to move
    to the previous image in the sequence) is not shown initially, because the first
    content panel is always the panel that is visible when the page loads, so there
    are no previous panels to move to.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个链接（我指的是让访问者移动到序列中上一个图像的链接）最初不显示，因为第一个内容面板始终是页面加载时可见的面板，因此没有上一个面板可移动到。
- en: Time for action – defining a post-animation callback
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 定义一个动画后的回调
- en: 'Next, we need a function that we can execute each time an animation ends. Add
    the following code beneath the code we added previously:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个函数，每次动画结束时都可以执行。在我们之前添加的代码下面添加以下代码：
- en: '```js'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: function postAnim(dir) {
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: function postAnim(dir) {
- en: var keyMatch = parseInt(key.match(/\d+$/));
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: var keyMatch = parseInt(key.match(/\d+$/));
- en: '(parseInt(slide.css("left")) < 0) ? prev.show() : prev.hide();'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '(parseInt(slide.css("left")) < 0) ? prev.show() : prev.hide();'
- en: '(parseInt(slide.css("left")) === -1600) ? next.hide() : next.show();'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '(parseInt(slide.css("left")) === -1600) ? next.hide() : next.show();'
- en: if (dir) {
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: if (dir) {
- en: 'var titleKey = (dir === "back") ? keyMatch - 1 : keyMatch + 1;'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var titleKey = (dir === "back") ? keyMatch - 1 : keyMatch + 1;'
- en: key = "image" + titleKey;
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: key = "image" + titleKey;
- en: '}'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: container.find("#title").text(details[key].title);
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: container.find("#title").text(details[key].title);
- en: container.find(".active").removeClass("active");
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: container.find(".active").removeClass("active");
- en: container.find("a[href=#" + key + "]").addClass("active");
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: container.find("a[href=#" + key + "]").addClass("active");
- en: '};'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: In this second section of the code, we define a function that we'll call after
    an animation ends. This is used for some housekeeping to do various things that
    may need to be done repeatedly; so, it is more efficient to bundle them up into
    a single function instead of defining them separately within event handlers. This
    is the `postAnim()` function, and it may accept a single parameter which refers
    to the direction that the slider has moved in.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第二部分中，我们定义了一个函数，该函数在动画结束后调用。这用于进行一些可能需要重复执行的各种事务处理；因此，将它们捆绑到单个函数中比在事件处理程序中单独定义它们更有效。这是`postAnim()`函数，它可能接受一个参数，该参数指示滑块移动的方向。
- en: The first thing we do in this function is use the regular expression, `/\d+$/`,
    with the JavaScript's `match()` function to parse the panel number from the end
    of the string saved in the `key` variable, which we initialized in the first section
    of code, and which will always refer to the currently visible panel.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数中我们要做的第一件事是使用JavaScript的`match()`函数与正则表达式`/\d+$/`来从保存在`key`变量中的字符串中解析面板编号，我们在代码的第一部分中初始化了`key`变量，它始终指向当前可见的面板。
- en: Our `postAnim()` function may be called either when a panel is selected using
    the numeric links, or when the previous/next links are used. However, when the
    previous/next links are used, we need the `key` variable to know which panel is
    currently being displayed in order to move to the next or previous panel.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`postAnim()`函数可能在使用数字链接选择面板时调用，也可能在使用上一个/下一个链接时调用。但是，当使用上一个/下一个链接时，我们需要`key`变量来知道当前显示的是哪个面板，以便移动到下一个或上一个面板。
- en: We then check whether the first panel is currently being displayed by checking
    the `left` CSS style property of the `#slide` element. If the `#slide` element
    is at `0`, we know the first panel is visible, so we hide the previous link. If
    the `left` property is less than `0`, we show the previous link. We do a similar
    test to check whether the last panel is visible, and if so, we hide the next link.
    The previous and next links will only be shown if they are currently hidden.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们检查第一个面板是否当前正在显示，方法是检查`#slide`元素的`left` CSS样式属性。如果`#slide`元素为`0`，我们知道第一个面板是可见的，所以隐藏上一个链接。如果`left`属性小于`0`，我们显示上一个链接。我们进行类似的测试来检查最后一个面板是否可见，如果是，则隐藏下一个链接。只有当前隐藏的上一个和下一个链接才会显示。
- en: We then check whether the `dir` (direction) argument has been supplied to the
    function. If it has, we have to work out which panel is now being displayed by
    reading the `keyMatch` variable that we created earlier, and then either subtract
    `1` from it if the `dir` argument is equal to `back`, or add `1` to it, if not.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们检查是否已向函数提供了`dir`（方向）参数。如果有，我们必须通过阅读我们之前创建的`keyMatch`变量来确定当前显示的面板是哪个，然后根据`dir`参数是`back`还是`forward`来减去`1`或加上`1`。
- en: The result is saved back to the `key` variable, which is then used to update
    the `<h2>` title element. The title text for the current panel is obtained from
    our `details` object using the `key` variable. Lastly, we add the class name `active`
    to the numeric link corresponding to the visible panel.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 结果保存回`key`变量，然后用于更新`<h2>`标题元素。当前面板的标题文本从我们的`details`对象中使用`key`变量获取。最后，我们将`active`类名添加到与可见面板对应的数字链接中。
- en: Although not essential, this is something we will want to use when we come to
    add a skin to the widget. We select the right link using an attribute selector
    that matches the `href` attribute of the current link. Note that we don't create
    any new jQuery objects in this function; we use our cached `container` object
    and the `find()` method to obtain the elements we require.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必要的，但在我们添加小部件皮肤时会用到。我们使用属性选择器选择正确的链接，该选择器与当前链接的`href`属性匹配。请注意，在此函数中我们不会创建任何新的jQuery对象；我们使用我们缓存的`container`对象和`find()`方法来获取我们需要的元素。
- en: Time for action – adding event handlers for the UI elements
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 为UI元素添加事件处理程序
- en: 'Now that the slider has been created, we can add the event handlers that will
    drive the functionality. Insert the following code beneath the `postAnim` function
    we just added in:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在滑块已经创建好了，我们可以添加驱动功能的事件处理程序了。将以下代码插入我们刚刚添加的`postAnim`函数下方：
- en: '```js'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $("#ui li a").not(prevChild).not(nextChild).click(function(e){
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: $("#ui li a").not(prevChild).not(nextChild).click(function(e){
- en: e.preventDefault();
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: e.preventDefault();
- en: key = $(this).attr("href").split("#")[1];
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: key = $(this).attr("href").split("#")[1];
- en: slide.animate({
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: slide.animate({
- en: 'left: details[key].position'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: details[key].position'
- en: '}, "slow", "easeOutBack", postAnim);'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '}, "slow", "easeOutBack", postAnim);'
- en: '});'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: nextChild.add(prevChild).click(function(e){
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: nextChild.add(prevChild).click(function(e){
- en: e.preventDefault();
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: e.preventDefault();
- en: var arrow = $(this).parent();
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: var arrow = $(this).parent();
- en: if (!slide.is(":animated")) {
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: if (!slide.is(":animated")) {
- en: slide.animate({
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: slide.animate({
- en: 'left: (arrow.attr("id") === "prev") ? "+=400" : "-=400"'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: (arrow.attr("id") === "prev") ? "+=400" : "-=400"'
- en: '}, "slow", "easeOutBack", function(){'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, "slow", "easeOutBack", function(){'
- en: '(arrow.attr("id") === "prev") ? postAnim("back") : postAnim("forward")'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '(arrow.attr("id") === "prev") ? postAnim("back") : postAnim("forward")'
- en: '});'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The first handler is bound to the main links used to display different panels,
    excluding the previous and next links with the jQuery `not()` method. We first
    stop the browser following the link with the `preventDefault()` method.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个处理程序绑定到用于显示不同面板的主链接上，使用jQuery的`not()`方法排除了上一个和下一个链接。我们首先使用`preventDefault()`方法停止浏览器跟随链接。
- en: We then update the `key` variable with the panel that is being displayed by
    extracting the panel name from the link's `href` attribute. We use JavaScript's
    `split()` method to obtain just the panel `id` and not the `#` symbol.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们从链接的`href`属性中提取面板名称来更新`key`变量。我们使用JavaScript的`split()`方法仅获取面板`id`而不是`#`符号。
- en: Finally, we animate the slide element by setting its `left` CSS style property
    to the value extracted from the `details` object. We use the `key` variable to
    access the value of the `position` property.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过将其`left` CSS样式属性设置为从`details`对象中提取的值来对滑动元素进行动画处理。我们使用`key`变量来访问`position`属性的值。
- en: As part of the animation, we configure the duration as `slow` and the easing
    as `easeOutBack`, and specify our `postAnim` function as the callback function
    to execute when the animation ends.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 作为动画的一部分，我们将持续时间配置为 `slow`，将缓动配置为 `easeOutBack`，并将我们的 `postAnim` 函数指定为动画结束时要执行的回调函数。
- en: Finally, we need to add a click handler for the previous/next links used to
    navigate to the next or previous image. These two links can share a single-click
    handler. We can select both of these two links using our cached selectors from
    earlier `nextChild` and `prevChild`, along with jQuery's `add()` method, to add
    them both to a single jQuery object in order to attach the handler functions to
    both links.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为用于导航到下一个或上一个图片的上一个/下一个链接添加点击处理程序。这两个链接可以共享一个单击处理程序。我们可以使用之前缓存的选择器 `nextChild`
    和 `prevChild`，以及 jQuery 的 `add()` 方法来选择这两个链接，将它们都添加到一个 jQuery 对象中，以便将处理程序函数附加到这两个链接上。
- en: We again stop the browser from following the link using `preventDefault()`.
    We then cache a reference to the parent of the link that was clicked, using the
    `arrow` variable, so that we can easily refer to it later on in the function.
    This is needed because within the callback function for the `animate()` method,
    the `$(this)` keyword will be scoped to the `#slide` element instead of the link
    that was clicked.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用 `preventDefault()` 阻止浏览器跟随链接。然后，我们使用 `arrow` 变量缓存对已点击链接的父级的引用，以便我们稍后可以轻松地引用它。这是因为在
    `animate()` 方法的回调函数中，`$(this)` 关键字的作用域将是 `#slide` 元素，而不是被点击的链接。
- en: We then check that the `#slide` element is not already being animated using
    the `:animated` filter. This check is important because it prevents the viewer
    from breaking if one of the links is clicked repeatedly.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查 `#slide` 元素是否正在进行动画处理，使用 `:animated` 过滤器进行检查。此检查很重要，因为它防止了查看器在重复点击其中一个链接时出现错误。
- en: If it is not already being animated, we perform the animation and move the slide
    element either `400` pixels (the `width` parameter of a single content panel)
    backward or forward. We can check which arrow was clicked by looking at the `id`
    attribute of the element referenced by the `arrow` variable.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未进行动画处理，我们执行动画处理并将幻灯片元素向后或向前移动 `400` 像素（单个内容面板的 `width` 参数）。我们可以通过查看 `arrow`
    变量引用的元素的 `id` 属性来检查点击了哪个箭头。
- en: We specify the same duration and easing values as before in the animation method,
    but instead of passing a reference to the `postAnim` function as the callback
    parameter, we pass an anonymous function instead. Within this anonymous function,
    we determine which link was clicked and then call the `postAnim` function with
    the appropriate argument. Remember, this is necessary to obtain the correct key
    for the `details` object, because neither the previous nor the next links have
    the `href` attributes pointing to an image.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在动画方法中指定与之前相同的持续时间和缓动值，但是我们不是将 `postAnim` 函数的引用作为回调参数传递，而是传递一个匿名函数。在这个匿名函数中，我们确定点击了哪个链接，然后使用适当的参数调用
    `postAnim` 函数。记住，这是必要的，以获取 `details` 对象的正确键，因为上一个链接和下一个链接都没有指向图片的 `href` 属性。
- en: 'Try the page out in a browser at this point and you should find that an image
    can be viewed by clicking on any of the links, including the previous and next
    links. This is how the widget should appear at this stage:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此时在浏览器中尝试页面，你会发现点击任何链接，包括上一个和下一个链接，都可以查看图片。这是小部件在此阶段应该出现的样子：
- en: '![What just happened?](img/9642_07_01.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/9642_07_01.jpg)'
- en: The previous screenshot shows the widget in its un-skinned state, with only
    the JavaScript required for it to function.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个屏幕截图显示了小部件处于未经过皮肤处理的状态，只有为其功能所需的 JavaScript。
- en: Skinning the widget
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为小部件添加皮肤
- en: '"There''s more than one way to skin a cat", was once proclaimed, and this applies
    to widgets, as well as cats. Lastly, let''s add some custom styling to the widget
    to see how easy it is to make the widget attractive, as well as functional. These
    styles can easily be changed to re-skin the widget to give it a completely different
    look.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有人说过，“杀鸡焉用牛刀”，这适用于小部件，也适用于猫。最后，让我们给小部件添加一些自定义样式，看看如何轻松地使小部件既有吸引力，又具有功能性。这些样式可以轻松更改，以重新设计小部件，赋予它完全不同的外观。
- en: Time for action – adding a new skin
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加新皮肤
- en: 'At the bottom of the `animate-position.css` file, add the following code:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `animate-position.css` 文件的底部，添加以下代码：
- en: '```js'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: a { outline:0 none; }
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: a { outline:0 none; }
- en: '#slider {'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '#slider {'
- en: 'border:1px solid #999;'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 'border:1px solid #999;'
- en: -moz-border-radius:8px;
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: -moz-border-radius:8px;
- en: -webkit-border-radius:8px;
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: -webkit-border-radius:8px;
- en: border-radius:8px;
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: border-radius:8px;
- en: background-color:#ededed;
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: background-color:#ededed;
- en: '-moz-box-shadow:0 2px 7px #aaa;'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '-moz-box-shadow:0 2px 7px #aaa;'
- en: '-webkit-box-shadow:0 2px 7px #aaa;'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '-webkit-box-shadow:0 2px 7px #aaa;'
- en: 'box-shadow:0 2px 7px #aaa;'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 'box-shadow:0 2px 7px #aaa;'
- en: '}'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#title, #slider ul {'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '#title, #slider ul {'
- en: margin-top:10px;
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: margin-top:10px;
- en: margin-bottom:12px;
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: margin-bottom:12px;
- en: '}'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#title {'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '#title {'
- en: font:normal 22px "Nimbus Sans L", "Helvetica Neue",
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: font:normal 22px "Nimbus Sans L", "Helvetica Neue",
- en: '"Franklin Gothic Medium", Sans-serif;'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '"Franklin Gothic Medium", Sans-serif;'
- en: color:#444;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: color:#444;
- en: '}'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#viewer {'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '#viewer {'
- en: 'border:1px solid #999;'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 'border:1px solid #999;'
- en: background-color:#fff;
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: background-color:#fff;
- en: '}'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider ul { width:120px; }'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '#slider ul { width:120px; }'
- en: '#slider ul li a {'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '#slider ul li a {'
- en: display:block;
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: display:block;
- en: width:10px;
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: width:10px;
- en: height:10px;
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: height:10px;
- en: text-indent:-5000px;
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: text-indent:-5000px;
- en: text-decoration:none;
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: text-decoration:none;
- en: 'border:2px solid #666;'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 'border:2px solid #666;'
- en: -moz-border-radius:17px;
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: -moz-border-radius:17px;
- en: -webkit-border-radius:17px;
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: -webkit-border-radius:17px;
- en: border-radius:17px;
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: border-radius:17px;
- en: background-color:#fff;
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: background-color:#fff;
- en: text-align:center;
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: text-align:center;
- en: '}'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider #prev, #slider #next {'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '#slider #prev, #slider #next {'
- en: margin:0;
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: margin:0;
- en: text-align:center;
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: text-align:center;
- en: '}'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider #prev { left:10px; }'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '#slider #prev { left:10px; }'
- en: '#slider #prev a, #slider #next a {'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '#slider #prev a, #slider #next a {'
- en: display:block;
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: display:block;
- en: height:28px;
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: height:28px;
- en: width:28px;
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: width:28px;
- en: line-height:22px;
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: line-height:22px;
- en: text-indent:0;
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: text-indent:0;
- en: 'border:1px solid #666;'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 'border:1px solid #666;'
- en: -moz-border-radius:17px;
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: -moz-border-radius:17px;
- en: -webkit-border-radius:17px;
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: -webkit-border-radius:17px;
- en: border-radius:17px;
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: border-radius:17px;
- en: background-color:#fff;
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: background-color:#fff;
- en: '}'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#prev a, #next a {'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '#prev a, #next a {'
- en: font:bold 40px "Trebuchet MS", sans-serif;
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: font:bold 40px "Trebuchet MS", sans-serif;
- en: color:#666;
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: color:#666;
- en: '}'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '#slider ul li a.active { background-color:#F93; }'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '#slider ul li a.active { background-color:#F93; }'
- en: '```'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: With this code, we style all of the visual aspects of the widget without interfering
    with anything that controls its working. We give it some nice rounded corners
    and add a drop-shadow to the widget, turn the numeric links into little clickable
    icons, and style the previous and next links. Colors and fonts are also set in
    this section as they, too, are obviously highly dependent on the theme.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，我们可以在不干扰任何控制其工作的内容的情况下为部件的所有视觉方面添加样式。我们为它添加了一些漂亮的圆角，并向部件添加了一个阴影，将数字链接变成了可点击的小图标，并为上一个和下一个链接设置了样式。颜色和字体也在此部分设置，因为它们显然也高度依赖于主题。
- en: 'These styles add a basic, neutral theme to the widget, as shown in the following
    screenshot:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式为部件添加了基本的中性主题，如下面的屏幕截图所示：
- en: '![What just happened?](img/9642_07_02.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/9642_07_02.jpg)'
- en: The styles we used to create the theme are purely arbitrary and simply for the
    purpose of the example. They can be changed to whatever we need in any given implementation
    to suit other elements on the page, or the overall theme of the site.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来创建主题的样式是纯粹任意的，仅用于示例目的。它们可以根据需要在任何给定的实现中更改，以适应页面上的其他元素或站点的整体主题。
- en: Pop quiz – creating an animated content-viewer
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 - 创建一个动画内容查看器
- en: Q1\. What arguments may the `animate()` method pass?
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. `animate()` 方法可能传递哪些参数？
- en: An array where the array items are the element to animate, the duration, the
    easing, and a callback function
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数组，其中数组项是要进行动画处理的元素、持续时间、缓动以及回调函数
- en: The first argument is an object containing the style properties to animate,
    optionally followed by the duration, an easing type, and a callback function
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个参数是一个包含要进行动画处理的样式属性的对象，可选地跟随着持续时间、缓动类型和回调函数
- en: An object where each property refers to the style properties to animate, the
    duration, easing, and a callback function
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个对象，其中每个属性都指向要进行动画的样式属性、持续时间、缓动以及回调函数
- en: A function which must return the style properties to animate, the duration,
    easing, and a callback function
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须返回要进行动画处理的样式属性、持续时间、缓动以及回调函数的函数
- en: Q2\. What does the `animate()` method return?
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. `animate()` 方法返回什么？
- en: An array containing the style properties that were animated
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含已进行动画处理的样式属性的数组
- en: A array containing the elements that were animated
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已进行动画处理的元素的数组
- en: A jQuery object for chaining purposes
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于链接目的的 jQuery 对象
- en: A Boolean indicating whether the animation completed successfully
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个布尔值，指示动画是否成功完成
- en: Have a go hero – making the image viewer more scalable
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有一个尝试的英雄 - 使图像查看器更具可伸缩性
- en: 'In our animated content-viewer, we had a fixed number of images and a hardcoded
    navigation structure to access them. Extend the content viewer so that it will
    work with an indeterminate number of images. To do this, you will need to complete
    the following tasks:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的动画内容查看器中，有固定数量的图片和硬编码的导航结构来访问它们。扩展内容查看器，使其能够使用不确定数量的图片。要做到这一点，您需要完成以下任务：
- en: Determine the number of images in the content-viewer at runtime and set the
    `width` parameter of the `#slide` wrapper element based on the number of images
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时确定内容查看器中的图像数量，并根据图像数量设置`#slide`包装元素的`width`参数
- en: Build the navigation links dynamically based on the number of images
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据图像数量动态构建导航链接
- en: Create the `details` object dynamically based on the number of images, and set
    the correct `left` properties to show each image
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态创建`details`对象，根据图像数量设置正确的`left`属性来显示每个图像
- en: Animating an element's size
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画元素大小
- en: As mentioned at the start of the chapter, almost any style property that contains
    a purely numeric value may be animated with the `animate()` method.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在本章开头提到的那样，几乎任何包含纯数值的样式属性都可以使用`animate()`方法进行动画处理。
- en: We looked at animating an element's position by manipulating its `left` style
    property, so let's move on to look at animating an element's size by manipulating
    its `height` and `width` style properties.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先看了如何通过操纵`left`样式属性来动画元素的位置，现在让我们继续看看如何通过操纵`height`和`width`样式属性来动画元素的大小。
- en: In this example, we'll create image wrappers that can be used to display larger
    versions of any images on the page by manipulating the element's size.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建图像包装器，可以通过操纵元素的大小来显示页面上任何图像的大尺寸版本。
- en: Time for action – creating the underlying page and basic styling
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间行动 - 创建基础页面和基本样式
- en: First, we'll create the underlying page on which the example will run.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建示例运行的基础页面。
- en: 'Add the following HTML to the `<body>` tag of our template file:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到我们模板文件的`<body>`标签中：
- en: '```js'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <article>
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <article>
- en: <h1>The Article Title</h1>
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h1>文章标题</h1>
- en: <p><img id="image1-thumb" class="expander" alt="An ASCIIZebra" src="img/ascii.gif"
    width="150" height="100">Lorem
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p><img id="image1-thumb" class="expander" alt="An ASCIIZebra" src="img/ascii.gif"
    width="150" height="100">Lorem
- en: ipsum dolor...</p>
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ipsum dolor...</p>
- en: <p><img id="image2-thumb" class="expander" alt="An ASCII
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p><img id="image2-thumb" class="expander" alt="An ASCII
- en: Zebra" src="img/ascii2.gif" width="100" height="100">Lorem
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Zebra" src="img/ascii2.gif" width="100" height="100">Lorem
- en: ipsum dolor...</p>
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ipsum dolor...</p>
- en: </article>
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </article>
- en: '```'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Save the example page as `animate-size.html`. We''ll keep the styling light
    in this example; in a new file in your text editor, add the following code:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例页面保存为`animate-size.html`。在这个示例中，我们将保持样式轻巧；在您的文本编辑器中的新文件中，添加以下代码：
- en: '```js'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: article {
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: article {
- en: display:block;
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: width:800px;
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:800px;
- en: margin:auto;
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:auto;
- en: z-index:0;
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: z-index:0;
- en: font:normal 18px "Nimbus Sans L", "Helvetica Neue",
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: font:normal 18px "Nimbus Sans L", "Helvetica Neue",
- en: '"Franklin Gothic Medium", sans-serif;'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"Franklin Gothic Medium", sans-serif;'
- en: '}'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: article p {
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: article p {
- en: margin:0 0 20px;
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:0 0 20px;
- en: width:800px;
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:800px;
- en: font:15px Verdana, sans-serif;
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: font:15px Verdana, sans-serif;
- en: line-height:20px;
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: line-height:20px;
- en: '}'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: 'article p #image2-thumb {'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'article p #image2-thumb {'
- en: float:right;
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:right;
- en: margin:6px 0 0 30px;
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:6px 0 0 30px;
- en: '}'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: img.expander {
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: img.expander {
- en: margin:6px 30px 1px 0;
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:6px 30px 1px 0;
- en: float:left;
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:left;
- en: '}'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: .expander-wrapper {
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .expander-wrapper {
- en: position:absolute;
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: z-index:999;
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: z-index:999;
- en: '}'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: .expander-wrapper img {
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .expander-wrapper img {
- en: cursor:pointer;
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cursor:pointer;
- en: margin:0;
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:0;
- en: position:absolute;
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: '}'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: .expander-wrapper .expanded { z-index:9999; }
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .expander-wrapper .expanded { z-index:9999; }
- en: '```'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this file as `animate-size.css` in the `css` folder.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存为`animate-size.css`放在`css`文件夹中。
- en: '*What just happened?*'
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The HTML could be any simple blog post consisting of some text and a couple
    of images. The points to note are that each image is given an `id` attribute so
    that it can be easily referenced, and that each image is actually the full-sized
    version of the image, scaled down with the `width` and `height` attributes.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 可以是任何简单的博客文章，由一些文本和几张图片组成。要注意的是，每个图片都被赋予了一个`id`属性，以便可以轻松引用，并且每个图片实际上都是图片的全尺寸版本，通过`width`和`height`属性进行缩放。
- en: The styles used are purely to lay out the example; very little of the code is
    actually required to make the example work. The `expander-wrapper` styles are
    needed to position the overlaid images correctly, but other than that, the styling
    is purely arbitrary.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 所使用的样式纯粹是为了布置示例；实际上，使示例工作的代码很少。`expander-wrapper` 样式是为了正确定位叠加的图片而需要的，除此之外，样式完全是任意的。
- en: We're floating the second image to the right. Again, this isn't strictly necessary;
    it's used just to make the example a little more interesting.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们把第二张图片向右浮动。再次强调，这并不是绝对必要的；仅仅是为了让示例更有趣一点。
- en: Time for action – defining the full and small sizes of the images
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 定义图片的完整大小和小尺寸
- en: 'First, we need to specify the full and small sizes of each image. Place the
    following code into our anonymous function inside the HTML file we just created:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要指定每张图片的完整大小和小尺寸。将下面的代码放入我们刚刚创建的 HTML 文件内的匿名函数中：
- en: '```js'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: var dims = {
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: var dims = {
- en: 'image1: {'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 'image1: {'
- en: 'small: { width: 150, height: 100 },'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'small: { width: 150, height: 100 },'
- en: 'big: { width: 600, height: 400 }'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'big: { width: 600, height: 400 }'
- en: '},'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'image2: {'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 'image2: {'
- en: 'small: { width: 100, height: 100 },'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '小图：{ width: 100, height: 100 }，'
- en: 'big: { width: 400, height: 400 }'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'big: { width: 400, height: 400 }'
- en: '}'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: 'webkit = ($("body").css("-webkit-appearance") !== "" && $("body").css("-webkit-appearance")
    !== undefined) ? true : false;'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 'webkit = ($("body").css("-webkit-appearance") !== "" && $("body").css("-webkit-appearance")
    !== undefined) ? true : false;'
- en: '```'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We created an object which contains properties matching each image's filename.
    Each property contains another nested object, which has the `small` and `big`
    properties and the relevant integers as values. This is a convenient way to store
    structured information that can easily be accessed at different points in our
    script.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个包含与每张图片文件名匹配的属性的对象。每个属性中包含另一个嵌套对象，其中包含 `small` 和 `big` 属性以及相关整数作为值。这是一种方便的存储结构化信息的方式，可以很容易地在脚本的不同点访问。
- en: We also created a variable called `webkit`. There is a slight bug in how images
    floated to the right are treated in WebKit-based browsers. This variable will
    hold a Boolean that will indicate whether WebKit is in use.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个名为 `webkit` 的变量。在基于 WebKit 的浏览器中，向右浮动的图片的处理存在轻微错误。这个变量将保存一个布尔值，指示是否使用了
    WebKit。
- en: A test is performed which tries to read the `-webkit-appearance` CSS property.
    In WebKit browsers, the test will return `none`, as the property is not set, but
    other browsers will either return an empty string or the value `undefined`.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 执行了一个测试，尝试读取 `-webkit-appearance` CSS 属性。在 WebKit 浏览器中，测试将返回 `none`，因为该属性未设置，但其他浏览器将返回空字符串或值
    `undefined`。
- en: Time for action – creating the overlay images
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建叠加图片
- en: 'Next, we should create an almost exact copy of each image on the page to use
    as an overlay. Add the following code beneath the code we just added to our HTML
    file:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该在页面上创建每张图片的一个几乎完全相同的副本，以用作叠加层。将以下代码添加到我们刚刚添加到 HTML 文件中的代码下方：
- en: '```js'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(".expander").each(function(i) {
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: $(".expander").each(function(i) {
- en: var expander = $(this),
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: var expander = $(this)，
- en: coords = expander.offset(),
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: coords = expander.offset()，
- en: copy = $("<img>", {
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复制 = $("<img>", {
- en: 'id: expander.attr("id").split("-")[0],'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: expander.attr("id").split("-")[0],'
- en: 'src: expander.attr("src"),'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: src：expander.attr("src")，
- en: 'width: expander.width(),'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 宽度：expander.width()，
- en: 'height: expander.height()'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 高度：expander.height()
- en: '});'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: In this part of the `<script>` tag, we selected each image on the page and processed
    them using jQuery's `each()` method. We set some variables, caching a reference
    to the current image, and storing its coordinates on the page relative to the
    document using the jQuery `offset()` method.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 `<script>` 标签的一部分，我们选择页面上的每张图片，并使用 jQuery 的 `each()` 方法对它们进行处理。我们设置了一些变量，缓存了对当前图片的引用，并使用
    jQuery 的 `offset()` 方法将其相对于文档的坐标存储在页面上。
- en: We then create a new image for each existing image on the page, giving it an
    `id` attribute that pairs it with the image it is overlaying, the `src` variable
    of the original image, and the `width` and `height` parameters of the original
    image. We use JavaScript's `split()` function to remove the part of the string
    that says `thumb` when we set the `id` attribute of the new image.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们为页面上的每张现有图片创建一个新的图片，为其增加一个 `id` 属性，与它重叠的图片配对，原始图片的 `src` 变量以及原始图片的 `width`
    和 `height` 参数。当设置新图片的 `id` 属性时，我们使用 JavaScript 的 `split()` 函数去掉字符串中标有 `thumb`
    的部分。
- en: Note
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Note that the previous code does not represent an entire snippet of fully-functional
    code. The outer function passed to the `each()` method has not yet been closed,
    as we need to add some additional code after these variables.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述代码不代表完整的完全功能代码片段。`each()`方法传递给的外部函数尚未关闭，因为我们需要在这些变量之后添加一些额外的代码。
- en: Time for action – creating the overlay wrappers
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建覆盖包装器
- en: 'We now need to create the wrappers for each of the overlay images (note that
    this code is still within the `each()` method, and so will be executed for each
    of the images that have the `expanded` class name). Add the following code directly
    below the last line of the `each` function we just added:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为每个覆盖图像创建包装器（请注意，此代码仍在`each()`方法内，因此将为具有`expanded`类名的每个图像执行此代码）。直接在我们刚刚添加的`each`函数的最后一行下面添加以下代码：
- en: '```js'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: $("<div></div>", {
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: $("<div></div>", {
- en: '"class": "expander-wrapper",'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"class": "expander-wrapper",'
- en: 'css: {'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'css: {'
- en: 'top: coords.top,'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'top: coords.top,'
- en: 'left: (webkit === true && expander.css("float") === "right") ? (coords.left
    + expander.width()) : coords.left,direction: (expander.css("float") === "right")
    ? "rtl" : "ltr"'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: (webkit === true && expander.css("float") === "right") ? (coords.left
    + expander.width()) : coords.left,direction: (expander.css("float") === "right")
    ? "rtl" : "ltr"'
- en: '},'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: 'html: copy,'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'html: copy,'
- en: 'width: expander.width(),'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: expander.width(),'
- en: 'height: expander.height(),'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: expander.height(),'
- en: 'click: function() {'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'click: function() {'
- en: var img = $(this).find("img"),
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var img = $(this).find("img"),
- en: id = img.attr("id");
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: id = img.attr("id");
- en: if (!img.hasClass("expanded")) {
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (!img.hasClass("expanded")) {
- en: img.addClass("expanded").animate({
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: img.addClass("expanded").animate({
- en: 'width: dims[id].big.width,'
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: dims[id].big.width,'
- en: 'height: dims[id].big.height'
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: dims[id].big.height'
- en: '}, {'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, {'
- en: 'queue: false'
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'queue: false'
- en: '});'
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '} else {'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: img.animate({
  id: totrans-437
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: img.animate({
- en: 'width: dims[id].small.width,'
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: dims[id].small.width,'
- en: 'height: dims[id].small.height'
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: dims[id].small.height'
- en: '}, {'
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, {'
- en: 'queue: false,'
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'queue: false,'
- en: 'complete: function() {'
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'complete: function() {'
- en: $(this).removeClass("expanded");
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(this).removeClass("expanded");
- en: '}'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}).appendTo("body");'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '}).appendTo("body");'
- en: '```'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么?*'
- en: In this section of code, we create the wrapper element for the new image. We
    give it a new class name so that it can be positioned correctly.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码部分中，我们为新图像创建包装器元素。我们给它一个新的类名，以便可以正确定位。
- en: Tip
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Quoting the class property**'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '**引用类属性**'
- en: We need to use quotes around the property name `class` because it's a reserved
    word in JavaScript and could throw script errors if this isn't done.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`class`属性名称周围使用引号，因为它是JavaScript中的保留字，如果不这样做可能会引发脚本错误。
- en: We set the position of the wrapper element using the `css` property, in conjunction
    with the coordinates we obtained from the `offset()` method earlier.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`css`属性和从`offset()`方法中获取的坐标来设置包装器元素的位置。
- en: When setting the `left` position of the wrapper element, we need to check our
    `webkit` variable to see if Safari or Chrome is in use. If this variable is set
    to `true`, and if the image is floated to the right, we position the overlay according
    to the `cords.left` value, in addition to the `width` parameter of the original
    image. If the `webkit` variable is `false`, or if the original image is floated
    `left`, we just set the `left` position of the wrapper to the value stored in
    `coords.left`.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 设置包装器元素的`left`位置时，我们需要检查我们的`webkit`变量，以查看是否正在使用Safari或Chrome。如果此变量设置为`true`，并且图像被浮动到右侧，我们将根据原始图像的`width`参数以及`cords.left`值定位覆盖层。如果`webkit`变量为`false`，或者原始图像浮动到`left`，我们只需将包装器的`left`位置设置为存储在`coords.left`中的值。
- en: We also need to set the `direction` property of any images that are floated
    right. We check the `float` style property and set the `direction` to `rtl` if
    the image is floated right, or `ltr` if not. This is done using JavaScript, a
    ternary conditional.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要设置任何浮动到右侧的图像的`direction`属性。我们检查`float`样式属性，并设置`direction`为`rtl`如果图像浮动到右侧，或者如果没有，则设置为`ltr`。这是使用JavaScript，三元条件完成的。
- en: This check is done so that the wrapper expands from right to left when the image
    is floated `right`. If we didn't set this, the wrapper would open up from left
    to right, which could make the full-sized image overflow the viewport, or the
    content container result in scroll bars.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 这个检查是为了在图像浮动`right`时，使包装器从右向左扩展。如果我们没有设置这个，包装器将从左向右打开，这可能导致全尺寸图像溢出视口，或者内容容器出现滚动条。
- en: We add the new image to the wrapper by passing a reference to it into the jQuery
    `html()` method, and set the `width` parameter of the wrapper to the `width` parameter
    of the original (and new) image. This is necessary for the overlay to be positioned
    correctly over any images that are floated right.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将对其的引用传递到jQuery的`html()`方法中，我们将新图像添加到包装器中，并将包装器的`width`参数设置为原始（和新）图像的`width`参数。这对于正确定位覆盖在任何向右浮动的图像上是必要的。
- en: Next, we add a click handler to the wrapper. Within the anonymous function passed
    as the value of the `click()` method, we first cache a reference to the image
    within the wrapper that was clicked, and get the `id` attribute of the image for
    convenience. Remember, the `id` attribute of the overlay image will be the same
    as the original image it is covering, minus the text string `-thumb`.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们向包装器添加一个点击处理程序。在作为`click()`方法值传递的匿名函数内部，我们首先缓存了在包装器中被点击的图像的引用，并为方便起见获取了图像的`id`属性。请记住，覆盖图像的`id`属性将与其覆盖的原始图像相同，减去文本字符串`-thumb`。
- en: We then check whether the image has the class name `expanded`. If it doesn't,
    we add the class name and then animate the image to its full size using the second
    format of the `animate()` method. We pass two objects into the method as arguments;
    the first contains the CSS properties we wish to animate, in this case, the `width`
    and `height` parameters of the image.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查图像是否具有类名`expanded`。如果没有，我们添加类名，然后使用`animate()`方法的第二种格式将图像动画变为其全尺寸。我们将两个对象作为参数传递给该方法；第一个包含我们希望动画的CSS属性，在本例中是图像的`width`和`height`参数。
- en: The correct `width` and `height` parameters to increase the image are retrieved
    from the `dims` object using the `id` attribute of the image that was clicked
    as the key. In the second object passed to the `animate()` method, we set the
    `queue` property to `false`. This has the same effect as using the `stop()` method
    directly before the `animate()` method and ensures that nothing bad happens if
    the overlay wrapper is repeatedly clicked.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 获取要增加图像的正确`width`和`height`参数是使用被点击的图像的`id`属性作为键从`dims`对象中检索的。在传递给`animate()`方法的第二个对象中，我们将`queue`属性设置为`false`。这与直接在`animate()`方法之前使用`stop()`方法具有相同的效果，并确保在重复点击叠加包装器时不会发生任何不好的事情。
- en: If the image already has the class name `expanded`, we animate the image back
    to its small size. Again, we use the two-object format of the `animate()` method,
    supplying `false` as the value of the `queue` property, and removing the class
    name `expanded` in an anonymous callback function passed to the `complete` property.
    Once the wrapper has been created, we append it to the `<body>` tag of the page.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图像已经具有类名`expanded`，我们将图像动画变回其小尺寸。同样，我们使用`animate()`方法的两个对象格式，将`false`作为`queue`属性的值，并在传递给`complete`属性的匿名回调函数中删除类名`expanded`。创建包装器后，我们将其附加到页面的`<body>`标签。
- en: At this point, the code we've written will work as intended—clicking on an image
    will result in the expanded version being animated to its full size. However,
    if the page is resized at all, the overlays will no longer be overlaying their
    images.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们编写的代码将按预期工作 - 单击图像将导致扩展版本动画变为其全尺寸。但是，如果页面被调整大小，叠加将不再覆盖其图像。
- en: Time for action – maintaining the overlay positions
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 维护叠加位置
- en: 'Because the overlays are positioned absolutely, we need to prevent them from
    becoming misaligned if the window is resized:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 由于叠加位置是绝对定位的，我们需要防止它们在窗口调整大小时错位：
- en: '```js'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(window).resize(function() {
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: $(window).resize(function() {
- en: $("div.expander-wrapper").each(function(i) {
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: $("div.expander-wrapper").each(function(i) {
- en: var newCoords = $("#image" + (i + 1) + "-thumb").offset();
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var newCoords = $("#image" + (i + 1) + "-thumb").offset();
- en: $(this).css({
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(this).css({
- en: 'top: newCoords.top,'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'top: newCoords.top,'
- en: 'left: newCoords.left'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: newCoords.left'
- en: '});'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: All we need to do is make sure the overlay images stay directly on top of the
    original images when the page resizes, which we can achieve by binding a handler
    for the resize event to the `window` object. In the handler function, we just
    get the new coordinates of the underlying image, and set the `top` and `left`
    properties of the wrapper accordingly. Note that we don't animate the repositioning
    of the overlays.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是确保叠加图像在页面调整大小时直接位于原始图像的顶部，我们可以通过将调整事件的处理程序绑定到`window`对象来实现。在处理程序函数中，我们只需获取底层图像的新坐标，并相应地设置包装器的`top`和`left`属性。请注意，我们不会对叠加层的重新定位进行动画处理。
- en: 'Save the file and preview it in your browser. We should find that we can click
    on either image and it will expand to show a full-sized version of the image,
    with the first image expanding to the right and the second expanding to the left:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并在浏览器中预览。我们应该发现，我们可以点击任一图像，它都会展开显示图像的全尺寸版本，第一个图像展开到右侧，第二个图像展开到左侧：
- en: '![What just happened?](img/9642_07_03.jpg)'
  id: totrans-481
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/9642_07_03.jpg)'
- en: In the previous screenshot we see the first image as it expands to its full
    size.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个截图中，我们看到第一个图像展开到了它的全尺寸。
- en: Pop quiz – creating expanding images
  id: totrans-483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验——创建展开图像
- en: Q1\. In this example, we used a different format for the arguments passed to
    the `animate()` method. What format did the arguments take?
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 在这个例子中，我们使用了一个不同的格式来传递给 `animate()` 方法的参数。这些参数采用了什么样的格式？
- en: Two arrays where the first array contains selectors for the elements to animate
    and the second contains the duration, easing, the `specialEasing` strings, and
    a callback function
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个数组，第一个数组包含要动画的元素的选择器，第二个数组包含持续时间、缓动、`specialEasing` 字符串和回调函数
- en: A single object containing the style properties to animate, duration, easing,
    and the `specialEasing` strings, and `step` and `complete` callback functions
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含要动画的样式属性、持续时间、缓动和 `specialEasing` 字符串，以及 `step` 和 `complete` 回调函数的单个对象
- en: A function which must return the style properties to animate, the duration and
    easing strings, and a callback function
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须返回要动画的样式属性、持续时间和缓动字符串以及回调函数的函数
- en: Two objects where the first object contains the style properties to animate,
    and the second object contains the duration, easing and the `specialEasing` strings,
    a Boolean indicating whether to queue repeated `animate()` calls, and the step
    and complete callback functions
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个对象，第一个对象包含要动画的样式属性，第二个对象包含持续时间、缓动和 `specialEasing` 字符串，一个布尔值指示是否排队重复调用 `animate()`，以及步进和完成的回调函数
- en: Q2\. What is the keyword `this` scoped to in an animation's callback function?
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 动画的回调函数中的关键字 `this` 被限定在哪个范围？
- en: The element that was animated
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 被动画的元素
- en: The current window
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前窗口
- en: The container of the element that was animated
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 被动画的元素的容器
- en: The event object
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件对象
- en: Have a go hero – doing away with the hardcoded dims object
  id: totrans-494
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战英雄——消除硬编码的 dims 对象
- en: In the previous example, we hardcoded an image into the top of our script that
    was used to tell the `animate()` method what size the image should be animated
    to. While this was fine for the purpose of the example, it doesn't really scale
    well as a long-term solution as we would have to remember to set this every time
    we used the script (or otherwise ensure our images are always of a fixed size).
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个例子中，我们在脚本顶部硬编码了一个图像，用于告诉 `animate()` 方法应该将图像动画到什么大小。虽然这在例子中是可以的，但作为长期解决方案，它并不是一个很好的扩展方式，因为我们必须记住每次使用脚本时都要设置它（或者确保我们的图像始终是固定大小的）。
- en: The problem is that we have no way to programmatically get both the full size
    and thumb size from a single image. The good news is that any data that can be
    stored in a JavaScript object can also be passed across a network for consumption
    as a JSON object. Extend this example so that when the page loads, it passes the
    `src` attributes of the images on the page to the server, which returns a JSON
    object containing the small and large image sizes. An image manipulation library,
    such as GD or ImageMagick, for PHP, ImageResizer, or the `System.Drawing.Image`
    type in .NET, will be your friend here.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于我们没有办法从单个图像中编程方式获取全尺寸和缩略图尺寸。好消息是，任何可以存储在 JavaScript 对象中的数据也可以作为 JSON 对象传递到网络上供消费。扩展此示例，使页面加载时将页面上图像的
    `src` 属性传递到服务器，服务器返回包含小图像和大图像尺寸的 JSON 对象。在这里，图像处理库，如 PHP 的 GD 或 ImageMagick，ImageResizer，或者
    .NET 中的 `System.Drawing.Image` 类型，将是你的朋友。
- en: Creating a jQuery animation plugin
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 jQuery 动画插件
- en: Plugins are an excellent way of packaging up functionality into an easy-to-deploy
    and share module of code that serves a specific purpose. jQuery provides the `fn.extend()`
    method precisely for this purpose, making it easy to create powerful and effective
    plugins that can be easily distributed and used.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是将功能打包成易于部署和共享的代码模块的绝佳方式。jQuery 提供了 `fn.extend()` 方法来实现这一目的，使得创建强大而有效的插件变得轻而易举，这些插件可以轻松分发和使用。
- en: 'There are a few guidelines that should be adhered to when creating jQuery plugins.
    These are as follows:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 jQuery 插件时应遵循一些准则。具体如下：
- en: New methods, which are called like other jQuery methods, for example, `$(elements).newMethod()`,
    should be attached to the `fn` object, and new functions, which are used by the
    plugin, for example, `$.myFunction()`, should be attached to the `jQuery` object
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新方法应像其他 jQuery 方法一样调用，例如，`$(elements).newMethod()`，应该附加到 `fn` 对象，而新函数，例如，`$.myFunction()`，应该附加到
    `jQuery` 对象
- en: New methods and functions should always end in a semi-colon (`;`) to preserve
    the functionality when the plugin is compressed
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当插件被压缩时，新方法和函数应始终以分号（`;`）结尾以保持功能性。
- en: Inside methods, the `this` keyword always refers to the current selection of
    elements, and methods should always return `this` to preserve chaining
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在方法内部，`this` 关键字始终指向当前元素的选择，并且方法应始终返回 `this` 以保留链式调用
- en: Always attach new methods and functions to the `jQuery` object, as opposed to
    the `$` alias, unless using an anonymous function with an aliased `$` object
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非使用带有别名 `$` 对象的匿名函数，否则始终将新方法和函数附加到 `jQuery` 对象，而不是 `$` 别名
- en: In this section, we'll create a plugin that can be used to create advanced transition
    effects when showing a series of images. The finished widget will be similar in
    some respects to the image viewer we created earlier, but will not animate the
    images themselves. Instead, it will apply transition effects between displaying
    them.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个插件，用于在显示一系列图像时创建高级转换效果。完成的小部件在某些方面类似于我们之前创建的图像查看器，但不会对图像本身进行动画处理。相反，它将在显示它们之间应用转换效果。
- en: Time for action – creating a test page and adding some styling
  id: totrans-505
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建一个测试页面并添加一些样式
- en: Once again, we'll create the example page and basic styling first and add the
    script last.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将首先创建示例页面和基本样式，然后最后再添加脚本。
- en: 'The underlying HTML for this example is very light. All we need in the `<body>`
    tag of our template file are the following elements:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此示例的底层 HTML 非常简洁。在模板文件的 `<body>` 标记中，我们只需要以下元素：
- en: '```js'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <div id="frame">
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="frame">
- en: <img class="visible" src="img/F-35_Lightning.jpg" alt="F-35 Lightning">
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img class="visible" src="img/F-35_Lightning.jpg" alt="F-35 Lightning">
- en: <img src="img/A-12_Blackbird.jpg" alt="A-12 Blackbird">
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/A-12_Blackbird.jpg" alt="A-12 Blackbird">
- en: <img src="img/B-2_Spirit.jpg" alt="B-2 Spirit">
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/B-2_Spirit.jpg" alt="B-2 Spirit">
- en: <img src="img/SR-71_Blackbird.jpg" alt="SR-71 Blackbird">
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/SR-71_Blackbird.jpg" alt="SR-71 Blackbird">
- en: <img src="img/F-117_Nighthawk.jpg" alt="F-117 Nighthawk">
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/F-117_Nighthawk.jpg" alt="F-117 Nighthawk">
- en: </div>
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: '```'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this page as `advanced-transitions.html`.
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此页面保存为 `advanced-transitions.html`。
- en: Like the markup, the CSS we rely on for a plugin should also be as minimal as
    possible. Luckily, not much CSS is required for our small collection of elements.
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像标记一样，我们为插件依赖的 CSS 也应尽可能简洁。幸运的是，我们的小型元素集合所需的 CSS 不多。
- en: 'Add the following code to a new file in your text editor:'
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文本编辑器中的新文件中：
- en: '```js'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '#frame {'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#frame {'
- en: position:relative;
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位置：相对;
- en: width:520px;
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 宽度：520像素;
- en: height:400px;
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 高度：400像素;
- en: z-index:0;
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 层级：0;
- en: '}'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#frame img {'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#frame img {'
- en: position:absolute;
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位置：绝对;
- en: top:0;
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 顶部：0;
- en: left:0;
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 左：0;
- en: z-index:1;
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 层级：1;
- en: '}'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#frame img.visible { z-index:2; }'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#frame img.visible { 层级：2; }'
- en: '#frame a {'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#frame a {'
- en: display:block;
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示：块;
- en: width:50%;
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 宽度：50%;
- en: height:100%;
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 高度：100%;
- en: position:absolute;
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位置：绝对;
- en: top:0;
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 顶部：0;
- en: z-index:10;
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 层级：10;
- en: color:transparent;
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 颜色：透明;
- en: background-image:url(transparent.gif);
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 背景图片：url(transparent.gif);
- en: filter:alpha(opacity = 0);
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 滤镜：alpha(opacity = 0);
- en: text-align:center;
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文本对齐：居中;
- en: text-decoration:none;
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文本装饰：无;
- en: font:90px "Palatino Linotype", "Book Antiqua",
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字体：90像素 "Palatino Linotype"，"Book Antiqua"，
- en: Palatino, serif;
  id: totrans-547
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 帕拉蒂诺，衬线;
- en: line-height:400%;
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行高：400%;
- en: '}'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#frame a:hover {'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#frame a:hover {'
- en: color:#fff;
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 颜色：#fff;
- en: 'text-shadow:0 0 5px #000;'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '文本阴影：0 0 5像素 #000;'
- en: filter:alpha(opacity=100);
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 滤镜：alpha(opacity=100);
- en: filter:Shadow(Color=#000, Direction=0);
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 滤镜：阴影（颜色=#000，方向=0）;
- en: '}'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#frame a:focus { outline:none; }'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#frame a:focus { 轮廓：无; }'
- en: '#prev { left:0; }'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#prev { 左：0; }'
- en: '#next { right:0; }'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#next { 右：0; }'
- en: '#overlay {'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#overlay {'
- en: width:100%;
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 宽度：100%;
- en: height:100%;
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 高度：100%;
- en: position:absolute;
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位置：绝对;
- en: left:0;
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 左：0;
- en: top:0;
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 顶部：0;
- en: z-index:3;
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 层级：3;
- en: '}'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#overlay div { position:absolute; }'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#overlay div { 位置：绝对; }'
- en: '```'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this in the `css` folder as `advanced-transitions.css`.
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存在 `css` 文件夹中，命名为 `advanced-transitions.css`。
- en: '*What just happened?*'
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚发生了什么？*'
- en: All we have on the underlying page are the images between which we wish to make
    transition within a container. It's best to keep the markup requirements for plugins
    as simple as possible so that they are easy for others to use and don't place
    undue restrictions on the elements or structure they want to use.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在基础页面上唯一拥有的就是我们希望在容器内进行转换的图像。最好尽可能简化插件的标记要求，以便其他人可以轻松使用，并且不会对他们想要使用的元素或结构施加不必要的限制。
- en: The images are positioned absolutely within the container using CSS so that
    they stack up on top of one another, and we set our `visible` class on the first
    element to ensure one image is above the rest in the stack.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 图像在容器内通过 CSS 绝对定位，使它们彼此叠加，并且我们在第一个元素上设置了`visible`类，以确保其中一个图像位于堆栈的顶部。
- en: Most of the styling goes towards the previous and next anchors, which we'll
    create with the plugin. These are set so that each one will take up exactly half
    of the container and are positioned to appear side-by-side. We set the `z-index`
    property of these links so that they appear above all of the images. The `font-size`
    property is ramped up considerably, and an excessive `line-height` means we don't
    need to middle-align the text with `padding`.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数样式都用于上一个和下一个锚点，我们将使用插件创建这些锚点。这些被设置为每个锚点将占据容器的一半，并且被定位为并排显示。我们设置这些链接的`z-index`属性，使它们显示在所有图像的上方。`font-size`属性被大幅提高，过多的`line-height`意味着我们不需要使用`padding`来使文本居中。
- en: In most browsers, we simply set the `color` property of the anchors to `transparent`,
    which hides them. Then, we set the `color` property to white in the `hover` state.
    This won't work too well in IE, however, so instead we set the link initially
    to transparent with the Microsoft `opacity` `filter`, and then set it to fully
    opaque in the `hover` state, which serves the same purpose.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数浏览器中，我们只需将锚点的`color`属性设置为`transparent`，即可隐藏它们。然后，我们在`hover`状态下将`color`属性设置为白色。然而，在
    IE 中，这种方法效果不佳，因此我们最初将链接设置为透明，并使用 Microsoft 的`opacity` `filter`，然后在`hover`状态下将其设置为完全不透明，其目的相同。
- en: Note
  id: totrans-575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Another IE-specific fix**'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '**另一个针对 IE 的修复**'
- en: 'IE also presents us with another problem: the clickable area of our links will
    only extend the height of the text within them because of their absolute positioning.
    We can overcome this by setting a reference to a background image.'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: IE 也给我们带来了另一个问题：由于链接的绝对定位，其可点击区域仅会延伸到其中的文本高度。我们可以通过设置背景图像的引用来克服这一问题。
- en: The best part is that the image doesn't even need to exist for the fix to work
    (so you'll find no corresponding `transparent.gif` file in the book's companion
    code bundle). The fix has no detrimental effects on normal browsers.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的部分是即使图像不存在也可以使修复工作（因此您在书籍的附带代码包中找不到对应的`transparent.gif`文件）。该修复对于正常浏览器没有不利影响。
- en: Creating the plugin
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建插件
- en: Now, let's create the plugin itself. Unlike most of the other example code we've
    looked at, the code for our plugin will go into its own separate file.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建插件本身。与我们看过的大多数其他示例代码不同，我们插件的代码将放入自己的单独文件中。
- en: Time for action – adding a license and defining configurable options
  id: totrans-581
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 添加许可证和定义可配置选项
- en: 'In a new file, create the following outer structure for the plugin and save
    it in our `js` folder under the name `jquery.tranzify.js`:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 在新文件中，创建插件的以下外部结构，并将其保存在名为`jquery.tranzify.js`的`js`文件夹中：
- en: '```js'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: /*
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: /*
- en: Plugin name jQuery plugin version 1.0
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 插件名称 jQuery 插件版本 1.0
- en: Copyright (c) date copyright holder
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有（c）日期版权所有者
- en: License(s)
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 许可证
- en: '*/'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: ;(function($) {
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: ;(function($) {
- en: $.tranzify = {
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: $.tranzify = {
- en: 'defaults: {'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'defaults: {'
- en: 'transitionWidth: 40,'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'transitionWidth: 40,'
- en: 'transitionHeight: "100%",'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'transitionHeight: "100%",'
- en: 'containerID: "overlay",'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'containerID: "overlay",'
- en: 'transitionType: "venetian",'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'transitionType: "venetian",'
- en: 'prevID: "prev",'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'prevID: "prev",'
- en: 'nextID: "next",'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'nextID: "next",'
- en: 'visibleClass: "visible"'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'visibleClass: "visible"'
- en: '}'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '})(jQuery);'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '})(jQuery);'
- en: '```'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-603
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: All plugins should contain information on the plugin name, version number, the
    copyright owner (usually the author of the code), and the terms, or links to the
    terms, of the license or licenses it is released under.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 所有插件都应包含插件名称、版本号、版权所有者（通常为代码的作者）以及发布的许可证或许可证链接的条款信息。
- en: The plugin is encapsulated within an anonymous function so that its variables
    are protected from other code which may be in use on the page it is deployed on.
    It also has a semicolon placed before it to ensure it remains a discrete block
    of code after potential minification, and in case it is used with other less scrupulously
    written code than our own.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 插件被封装在一个匿名函数中，以便其变量受到在其部署的页面上可能正在使用的其他代码的保护。它还在其前面放置了一个分号，以确保在潜在的缩小之后它仍然保持为一个离散的代码块，并且以防它与比我们自己不那么严谨的其他代码一起使用。
- en: We also alias the `$` character for safe use within our function, to ensure
    it is not hijacked by any other libraries running on the page, and to preserve
    the functionality of jQuery's `noConflict()` method.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将`$`字符别名为安全地在我们的函数中使用，以确保它不会被页面上运行的任何其他库劫持，并保留jQuery的`noConflict()`方法的功能。
- en: It is a good practice to make plugins as configurable as possible so that end
    users can adjust them to suit their own requirements. To facilitate this, we should
    provide a set of default values for any configurable options. When deciding what
    to make configurable, a good rule of thumb is to hardcode nothing other than pure
    logic into the plugin. Hence, IDs, class names, and anything like that should
    be made configurable.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 将插件尽可能地可配置是一个好习惯，以便最终用户可以根据自己的需求进行调整。为了方便起见，我们应该为任何可配置选项提供一组默认值。在决定将什么内容设为可配置时，一个好的经验法则是将除了纯逻辑之外的所有内容都硬编码到插件中。因此，ID、类名之类的东西应该可配置。
- en: The defaults we set for the plugin are stored in an object that is itself stored
    as a property of the `jQuery` object that is passed into the function. The property
    added to the `jQuery` object is called `tranzify`, the name of our plugin, and
    will be used to store the properties, functions, and methods we create so that
    all of our code is within a single namespace.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为插件设置的默认值存储在一个对象中，该对象本身作为传递给函数的`jQuery`对象的属性存储。添加到`jQuery`对象的属性称为`tranzify`，这是我们插件的名称，并将用于存储我们创建的属性、函数和方法，以便我们所有的代码都在一个单一的命名空间中。
- en: Our default properties are contained in a separate object, called `defaults`,
    within the `tranzify` object. We set the `width` and `height` parameters of the
    transition elements, the `id` attribute of the container that gets created, the
    default transition, the `id` attributes for the previous and next links, and the
    class name we give to the currently displayed image.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的默认属性包含在一个名为`defaults`的单独对象中，该对象位于`tranzify`对象内部。我们设置了过渡元素的`width`和`height`参数，创建的容器的`id`属性，默认过渡效果，上一个和下一个链接的`id`属性，以及我们给当前显示的图像的类名。
- en: As I mentioned, it's best not to hardcode any `id` values or class names into
    a plugin if possible. The person implementing the plugin may already have an element
    on the page with an `id` attribute of `overlay`, for example, so we should give
    them the option to change it if need be.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我提到的，如果可能的话最好不要将任何`id`值或类名硬编码到插件中。实施插件的人可能已经在页面上有一个`id`属性为`overlay`的元素，因此我们应该给他们更改的选项。
- en: Time for action – adding our plugin method to the jQuery namespace
  id: totrans-611
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 将我们的插件方法添加到jQuery命名空间
- en: 'Next, we can add the code that will insert our plugin into the jQuery namespace
    so that it can be called like other jQuery methods. Add the following code directly
    above the last line in the code we just added:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以添加代码，将我们的插件插入到jQuery命名空间中，以便像其他jQuery方法一样调用它。在我们刚刚添加的代码的最后一行之上直接添加以下代码：
- en: '```js'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $.fn.extend({
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: $.fn.extend({
- en: 'tranzify: function(userConfig) {'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 'tranzify: function(userConfig) {'
- en: 'var config = (userConfig) ? $.extend({}, $.tranzify.defaults, userConfig) :
    $.tranzify.defaults;'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var config = (userConfig) ? $.extend({}, $.tranzify.defaults, userConfig) :
    $.tranzify.defaults;'
- en: config.selector = "#" + this.attr("id");
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: config.selector = "#" + this.attr("id");
- en: config.multi = parseInt(this.width()) / config.transitionWidth;
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: config.multi = parseInt(this.width()) / config.transitionWidth;
- en: $.tranzify.createUI(config);
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $.tranzify.createUI(config);
- en: return this;
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return this;
- en: '}'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-624
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: jQuery provides the `fn.extend()` method specifically for adding new methods
    that can be chained to the `jQuery()` function, which is how most plugins are
    created. We defined a function as the value of the sole property of an object
    passed to the `extend()` method. We also specified that the method may take one
    argument, which may be a configuration object passed into the method by whoever
    is using the plugin to change the default properties we set.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery专门提供了`fn.extend()`方法来添加可以链接到`jQuery()`函数的新方法，这是大多数插件创建的方式。我们将一个函数定义为传递给`extend()`方法的对象的唯一属性的值。我们还指定该方法可能会接受一个参数，这个参数可能是由使用插件的人传递给方法的配置对象，以改变我们设置的默认属性。
- en: The first thing our method does is check whether or not a configuration object
    has been passed into the method. If it has, we use the `extend()` method (not
    `fn.extend()`, however) to merge the user's configuration object with our own
    `defaults` object.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法首先要做的是检查是否有配置对象传入方法中。如果有，我们使用`extend()`方法（不过这里不是`fn.extend()`）来将用户的配置对象与我们自己的`defaults`对象合并。
- en: The resulting object, created by the merging of these two objects, is stored
    in the variable `config` for easy access by our functions. Any properties that
    are in the `userConfig` object will overwrite the properties stored in our `defaults`
    object. Properties found in the `defaults` object but not the `userConfig` object
    will be preserved. If no `userConfig` object is passed into the method, we simply
    assign the `defaults` object to the `config` variable.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 通过合并这两个对象创建的结果对象，存储在变量`config`中，以方便我们的函数访问。在`userConfig`对象中找到的任何属性将覆盖存储在`defaults`对象中的属性。在`defaults`对象中找到但在`userConfig`对象中找不到的属性将被保留。如果未传递`userConfig`对象到方法中，我们简单地将`defaults`对象赋值给`config`变量。
- en: Next, we built an `id` selector that matched the element of the method that
    was called on and added this as an extra property to the `config` object, making
    it convenient to use throughout the plugin. We can't store this as a default property
    because it is likely to be different on every page that the plugin is used on,
    and we also can't expect users of the plugin to have to define this in a configuration
    object each time the plugin is used.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们建立了一个`id`选择器，用来匹配被调用的方法的元素，并将其作为额外的属性添加到`config`对象中，这样在整个插件中使用起来更加方便。我们不能将这个作为默认属性存储，因为它很可能在插件使用的每个页面上都是不同的，而且我们也不能期望插件的用户每次使用插件时都要在配置对象中定义这个。
- en: The number of transition elements we need to create will depend on the size
    of the images and the width of the transition elements (defined as a configurable
    property), so we worked out a quick multiplier based on the width of the image
    and then configured transition width for use later on.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建的过渡元素的数量将取决于图像的大小和过渡元素的宽度（定义为可配置属性），因此我们根据图像的宽度计算出一个快速乘数，然后配置过渡宽度以便稍后使用。
- en: Following this, we called the function that will create the previous/next links
    (we will define this shortly) and passed the function, the `config` object, so
    that it can read any properties that the user has configured.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们调用将创建前/后链接的函数（我们将很快定义它），并传递函数，`config`对象，以便它可以读取用户配置的任何属性。
- en: Finally, we return the jQuery object (which is automatically assigned to the
    value of the `this` keyword within our plugin method). This is to preserve chaining
    so that the user can call additional jQuery methods after calling our plugin.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们返回jQuery对象（它会自动分配给插件方法内的`this`关键字的值）。这是为了保留链接，以便用户在调用我们的插件后可以调用其他jQuery方法。
- en: Time for action – creating the UI
  id: totrans-632
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间–创建UI
- en: 'Next, we need to create the previous and next links that are overlaid above
    the images and allow the visitor to cycle through the images. Add the following
    chunk of code beneath the `$.fn.extend()` section we just added:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建在图像上方叠加的前一个和后一个链接，让访问者可以浏览图像。在刚刚添加的`$.fn.extend()`部分下面，添加以下代码块：
- en: '```js'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $.tranzify.createUI = function(config) {
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: $.tranzify.createUI = function(config) {
- en: var imgLength = $(config.selector).find("img").length,
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: var imgLength = $(config.selector).find("img").length,
- en: prevA = $("<a></a>", {
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: prevA = $("<a></a>", {
- en: 'id: config.prevID,'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: config.prevID,'
- en: 'href: "#",'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'href: "#",'
- en: 'html: "«",'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'html: "«",'
- en: 'click: function(e) {'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'click: function(e) {'
- en: e.preventDefault();
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e.preventDefault();
- en: $(config.selector).find("a").css("display", "none");
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(config.selector).find("a").css("display", "none");
- en: $.tranzify.createOverlay(config);
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $.tranzify.createOverlay(config);
- en: var currImg = $("." + config.visibleClass, $(config.selector));
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var currImg = $("." + config.visibleClass, $(config.selector));
- en: if(currImg.prev().filter("img").length > 0) {
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if(currImg.prev().filter("img").length > 0) {
- en: currImg.removeClass(config.visibleClass).prev().addClass(config.visibleClass);
  id: totrans-647
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: currImg.removeClass(config.visibleClass).prev().addClass(config.visibleClass);
- en: '} else {'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: currImg.removeClass(config.visibleClass);
  id: totrans-649
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: currImg.removeClass(config.visibleClass);
- en: $(config.selector).find("img").eq(imgLength - 1).addClass(config.visibleClass);
  id: totrans-650
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(config.selector).find("img").eq(imgLength - 1).addClass(config.visibleClass);
- en: '}'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: $.tranzify.runTransition(config);
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $.tranzify.runTransition(config);
- en: '}'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}).appendTo(config.selector),'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '}).appendTo(config.selector),'
- en: nextA = $("<a></a>", {
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: nextA = $("<a></a>", {
- en: 'id: config.nextID,'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: config.nextID,'
- en: 'href: "#",'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'href: "#",'
- en: 'html: "»",'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'html: "»",'
- en: 'click: function(e) {'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'click: function(e) {'
- en: e.preventDefault();
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e.preventDefault();
- en: $(config.selector).find("a").css("display", "none");
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(config.selector).find("a").css("display", "none");
- en: $.tranzify.createOverlay(config);
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $.tranzify.createOverlay(config);
- en: var currImg = $("." + config.visibleClass, $(config.selector));
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var currImg = $("." + config.visibleClass, $(config.selector));
- en: if(currImg.next().filter("img").length > 0) {
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if(currImg.next().filter("img").length > 0) {
- en: currImg.removeClass(config.visibleClass).next().addClass(config.visibleClass);
  id: totrans-665
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: currImg.removeClass(config.visibleClass).next().addClass(config.visibleClass);
- en: '} else {'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: currImg.removeClass(config.visibleClass);
  id: totrans-667
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: currImg.removeClass(config.visibleClass);
- en: $(config.selector).find("img").eq(0).addClass(config.visibleClass);
  id: totrans-668
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(config.selector).find("img").eq(0).addClass(config.visibleClass);
- en: '}'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: $.tranzify.runTransition(config);
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $.tranzify.runTransition(config);
- en: '}'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}).appendTo(config.selector);'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '}).appendTo(config.selector);'
- en: '};'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-675
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: This is by far our largest function and deals with creating the previous and
    next links, as well as defining their click handlers during the creation using
    the jQuery syntax. The first thing we do is obtain the number of images in the
    container, as the click handlers we add will need to know this.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 这是到目前为止我们的最大函数，处理创建前后链接以及在创建时使用jQuery语法定义它们的点击处理程序。我们要做的第一件事是获得容器中的图像数量，因为我们添加的点击处理程序需要知道这一点。
- en: We create the anchor for the previous link, and in the object passed as the
    second argument, we define the `id` attribute (using the value from the `config`
    object), a dummy `href`, an HTML entity as its `innerHTML`, and a click handler.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为上一个链接创建了锚点，并在作为第二个参数传递的对象中定义了`id`属性（使用来自`config`对象的值）、一个虚拟的`href`、一个HTML实体作为其`innerHTML`以及一个点击处理程序。
- en: Within the click handler, we use the `preventDefault()` method to stop the browser
    following the link, then hide the previous and next links in order to protect
    the widget against multiple clicks, as this will break the transitions.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击处理程序中，我们使用`preventDefault()`方法阻止浏览器跟随链接，然后隐藏上一个和下一个链接，以保护小部件免受多次点击的影响，因为这会破坏过渡效果。
- en: Next, we call our `createOverlay()` function, passing it the `config` object,
    to create the overlay container and the transition elements. We also cache a reference
    to the currently selected image using the class name stored in the `config` object.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用我们的`createOverlay()`函数，传递`config`对象，以创建叠加容器和过渡元素。我们还使用存储在`config`对象中的类名缓存对当前选择的图像的引用。
- en: We then test whether there is another image element before the visible image.
    If there is, we remove the class from the element that currently has it and give
    it to the previous image in order to bring it to the top of the stack. If there
    aren't any more images before the current image, we remove the `visible` class
    from the current image and move to the last image in the container to show that
    instead.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们测试是否有另一个图像元素位于可见图像之前。如果有，我们从当前具有该类的元素中删除该类，并将其给予前一个图像，以将其移到堆栈顶部。如果在当前图像之前没有更多图像，则从当前图像中删除`visible`类，并移至容器中的最后一个图像以显示该图像。
- en: Once we've defined everything we need, we can append the new anchor to the specified
    container. We also create the next link within the current function, as well,
    giving it a very similar set of attributes and a click handler, too. All that
    differs in this click handler is that we test for an image after the current one,
    and move to the first image in the container if there isn't one.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了所需的一切，我们就可以将新的锚点附加到指定的容器中。我们还在当前函数内创建了下一个链接，给它一个非常相似的一组属性和一个点击处理程序。在这个点击处理程序中唯一不同的是，我们测试当前图像后面是否有图像，并且如果没有图像，则移动到容器中的第一个图像。
- en: Time for action – creating the transition overlay
  id: totrans-682
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建过渡覆盖
- en: 'Our next function will deal with creating the overlay and transition elements:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个函数将处理创建叠加层和过渡元素：
- en: '```js'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $.tranzify.createOverlay = function(config) {
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: $.tranzify.createOverlay = function(config) {
- en: var posLeftMarker = 0,
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: var posLeftMarker = 0,
- en: bgHorizMarker = 0
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bgHorizMarker = 0
- en: overlay = $("<div></div>", {
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: overlay = $("<div></div>", {
- en: 'id: config.containerID'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: config.containerID'
- en: '});'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: for (var x = 0; x < config.multi; x++) {
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: for (var x = 0; x < config.multi; x++) {
- en: $("<div></div>", {
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("<div></div>", {
- en: 'width: config.transitionWidth,'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: config.transitionWidth,'
- en: 'height: config.transitionHeight,'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: config.transitionHeight,'
- en: 'css: {'
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'css: {'
- en: 'backgroundImage: "url(" + $("." + config.visibleClass, $(config.selector)).attr("src")
    + ")",'
  id: totrans-696
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'backgroundImage: "url(" + $("." + config.visibleClass, $(config.selector)).attr("src")
    + ")",'
- en: 'backgroundPosition: bgHorizMarker + "px 0",'
  id: totrans-697
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'backgroundPosition: bgHorizMarker + "px 0",'
- en: 'left: posLeftMarker,'
  id: totrans-698
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: posLeftMarker,'
- en: 'top: 0'
  id: totrans-699
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'top: 0'
- en: '}'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}).appendTo(overlay);'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}).appendTo(overlay);'
- en: bgHorizMarker -=config.transitionWidth;
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bgHorizMarker -=config.transitionWidth;
- en: posLeftMarker +=config.transitionWidth;
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: posLeftMarker +=config.transitionWidth;
- en: '}'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: overlay.insertBefore("#" + config.prevID);
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: overlay.insertBefore("#" + config.prevID);
- en: '};'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: Our previous function dealt with creating the overlay container and the transition
    elements that will provide the transition animations. The plugin will need to
    set the `position` and `background-position` properties of each transition element
    differently in order to stack the elements up horizontally. We'll need a couple
    of counter variables to do this, so we initialize them at the start of the function.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的函数处理了创建遮罩容器和将提供过渡动画的过渡元素。插件将需要分别设置每个过渡元素的 `position` 和 `background-position`
    属性，以便水平堆叠元素。我们将需要一些计数器变量来实现这一点，因此我们在函数开始时对它们进行初始化。
- en: We then create the overlay container `<div>` and give it just an `id` attribute,
    so that we can easily select it when we run the transitions.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了遮罩容器 `<div>`，并且只给它设置了一个 `id` 属性，以便我们在运行过渡时可以轻松选择它。
- en: Next, we create the transition elements. To do this, we use a standard JavaScript
    `for` loop, which is executed a number of times depending on the multiplier we
    set earlier in the script. On each iteration of the loop, we create a new `<div>`,
    which has its `width` and `height` parameters set according to the properties
    stored in the configuration object.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建过渡元素。为此，我们使用标准的 JavaScript `for` 循环，根据脚本中之前设置的乘数执行若干次。在循环的每次迭代中，我们创建一个新的
    `<div>`，根据存储在配置对象中的属性设置其 `width` 和 `height` 参数。
- en: We use the `css()` method to set the `backgroundImage` property of the overlay
    to the currently visible image, and the `backgroundPosition` property according
    to the current value of the `bgHorizMarker` counter variable. We also set the
    `left` property to position the new element correctly according to the `posLeftMarker`
    variable, and the `top` property to `0` to ensure correct positioning.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `css()` 方法将遮罩的 `backgroundImage` 属性设置为当前可见图像，并根据当前的 `bgHorizMarker` 计数器变量的值设置
    `backgroundPosition` 属性。我们还设置 `left` 属性以正确地根据 `posLeftMarker` 变量定位新元素，并将 `top`
    属性设置为 `0` 以确保正确的定位。
- en: Once created, we append the new element to the container and increment our counter
    variables. Once the loop exits and we have created and appended all of the transition
    elements to the container, we can then append the container to the element on
    the page that the method was called on.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完成后，我们将新元素附加到容器并增加计数器变量。一旦循环退出，并且我们已经创建并附加了所有过渡元素到容器中，我们就可以将容器附加到页面上调用该方法的元素上。
- en: Time for action – defining the transitions
  id: totrans-714
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 定义过渡
- en: 'The final function will perform the actual transitions:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的函数将执行实际的过渡：
- en: '```js'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $.tranzify.runTransition = function(config) {
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: $.tranzify.runTransition = function(config) {
- en: var transOverlay = $("#" + config.containerID),
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: var transOverlay = $("#" + config.containerID),
- en: transEls = transOverlay.children(),
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: transEls = transOverlay.children(),
- en: len = transEls.length - 1;
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: len = transEls.length - 1;
- en: switch(config.transitionType) {
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: switch(config.transitionType) {
- en: 'case "venetian":'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'case "venetian":'
- en: transEls.each(function(i) {
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: transEls.each(function(i) {
- en: transEls.eq(i).animate({
  id: totrans-724
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: transEls.eq(i).animate({
- en: 'width: 0'
  id: totrans-725
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: 0'
- en: '}, "slow", function() {'
  id: totrans-726
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, "slow", function() {'
- en: if (i === len) {
  id: totrans-727
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (i === len) {
- en: transOverlay.remove();
  id: totrans-728
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: transOverlay.remove();
- en: $(config.selector).find("a").css("display", "block");
  id: totrans-729
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(config.selector).find("a").css("display", "block");
- en: '}'
  id: totrans-730
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-731
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: break;
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: break;
- en: 'case "strip":'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'case "strip":'
- en: var counter = 0;
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var counter = 0;
- en: function strip() {
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: function strip() {
- en: transEls.eq(counter).animate({
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: transEls.eq(counter).animate({
- en: 'height: 0'
  id: totrans-738
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: 0'
- en: '}, 150, function() {'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, 150, function() {'
- en: if (counter === len) {
  id: totrans-740
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (counter === len) {
- en: transOverlay.remove();
  id: totrans-741
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: transOverlay.remove();
- en: $(config.selector).find("a").css("display", "block");
  id: totrans-742
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(config.selector).find("a").css("display", "block");
- en: '} else {'
  id: totrans-743
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: counter++;
  id: totrans-744
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: counter++;
- en: strip();
  id: totrans-745
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: strip();
- en: '}'
  id: totrans-746
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: strip();
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: strip();
- en: '}'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-753
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: Our last function deals with actually running the transitions. In this example,
    there are just two different types of transitions, but we could easily extend
    this to add more transition effects.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个函数处理实际运行的过渡。 在这个例子中，只有两种不同类型的过渡，但我们可以很容易地扩展它以添加更多的过渡效果。
- en: This function also requires some variables, so we set these at the start of
    the function for later use. We cache a reference to the overlay container, as
    we'll be referring to it several times. We also store the collection of transition
    elements and the number of transition elements. We subtract `1` from the number
    of children because the figure will be used with the jQuery's `eq()` method, which
    is zero-based.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数还需要一些变量，所以我们在函数的开头设置这些变量以供以后使用。 我们缓存对覆盖容器的引用，因为我们将多次引用它。 我们还存储了过渡元素的集合和过渡元素的数量。
    我们从子项的数量中减去`1`，因为这个数字将与jQuery的`eq()`方法一起使用，该方法是基于零的。
- en: To determine which of our transitions to run, we use JavaScript's `switch` statement
    and check the value of the `config.transitionType` property. The first transition
    is a kind of **venetian-blind** effect. To run this transition, we just animate
    the `width` parameter of each element to `0` using jQuery's `each()` method. The
    function we specify as the argument to this method automatically receives the
    index of the current element, which we access using `i`.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定我们要运行哪个过渡，我们使用JavaScript的`switch`语句并检查`config.transitionType`属性的值。 第一个过渡是一种**威尼斯百叶窗**效果。
    要运行此过渡，我们只需使用jQuery的`each()`方法将每个元素的`width`参数动画化为`0`。 我们指定为此方法的参数的函数自动接收当前元素的索引，我们使用`i`来访问它。
- en: In the callback function for each animation, we check whether `i` is equal to
    the `length` of the collection of transition elements, and if it is, we remove
    the overlay and show the previous and next links once more.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个动画的回调函数，我们检查`i`是否等于过渡元素的`length`，如果是，则移除覆盖层并再次显示上一个和下一个链接。
- en: The second transition removes the old image one strip at a time. To do this,
    we use a simple `counter` variable and a standard JavaScript function. We can't
    use the `each()` method this time, or all of the transition elements will slide
    down together, but we want each one to slide down on its own.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个过渡一次一个条带地移除旧图像。 为此，我们使用一个简单的`counter`变量和一个标准的JavaScript函数。 这次我们不能使用`each()`方法，否则所有的过渡元素将同时下滑，但我们希望每个元素都自己下滑。
- en: Within the function, we animate the current transition element's height to `0`
    and set a rather low duration so that it happens fairly quickly. If the animation
    is too slow, it spoils the effect. In the callback function, we check whether
    our `counter` variable is equal to the number of transition elements, and if so,
    remove the overlay and show the links again. If the `counter` variable hasn't
    reached the last element at this point, we increment the `counter` variable and
    call the function once more.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们将当前过渡元素的高度动画化为`0`，并设置一个相当低的持续时间，以便它发生得相当快。 如果动画太慢，它会破坏效果。 在回调函数中，我们检查我们的`counter`变量是否等于过渡元素的数量，如果是，则移除覆盖层并再次显示链接。
    如果此时`counter`变量尚未达到最后一个元素，则递增`counter`变量并再次调用该函数。
- en: Save this file as `jquery.tranzify.js` in the `js` folder. This is the standard
    naming convention for jQuery plugins and should be adhered to.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`jquery.tranzify.js`，并将其放在`js`文件夹中。 这是jQuery插件的标准命名约定，应遵循。
- en: Using the plugin
  id: totrans-761
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件
- en: 'To use the plugin, we just call it like we would call any other jQuery method,
    inside our ready function or anonymous function, like the following:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用该插件，我们只需像调用任何其他jQuery方法一样调用它，在我们的ready函数或匿名函数内部，如下所示：
- en: '```js'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: <script>
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: <script>
- en: $(function() {
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: $(function() {
- en: $("#frame").tranzify();
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("#frame").tranzify();
- en: '});'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: </script>
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: '```'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In this form, the default properties will be used. If we want to change one
    of the properties, we just supply a configuration object, such as this:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种形式下，将使用默认属性。 如果我们想要更改其中一个属性，我们只需提供一个配置对象，例如：
- en: '```js'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $("#frame").tranzify({
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: $("#frame").tranzify({
- en: 'transitionType: "strip"'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 'transitionType: "strip"'
- en: '});'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The default animation should run something like this:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 默认动画应该运行如下：
- en: '![Using the plugin](img/9642_07_04.jpg)'
  id: totrans-777
  prefs: []
  type: TYPE_IMG
  zh: '![使用插件](img/9642_07_04.jpg)'
- en: In the previous screenshot, we see the transition elements all simultaneously
    shrinking to `0` `width`, creating an effect like Venetian blinds being opened
    to reveal the new image.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中，我们看到过渡元素同时缩小到`0` `width`，产生了一种威尼斯百叶窗被打开以显示新图像的效果。
- en: Using the plugin is simple; there is just one point to remember. All of the
    images should be of same size, and the `width` parameter of each image should
    be exactly divisible by the `transitionWidth` property. As we've exposed the `transitionWidth`
    property as a configurable property, we should be able to use an image of any
    size we wish and set this accordingly.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个插件很简单；只需要记住一点。所有图像的大小都应该相同，并且每个图像的`width`参数都应该能够被`transitionWidth`属性完整地除尽。由于我们已经将`transitionWidth`属性公开为可配置属性，我们应该能够使用任何大小的图像，并相应地进行设置。
- en: 'For reference, the second transition effect runs like this, with strips of
    the old image sliding away to reveal the new image:'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 供参考，第二个过渡效果是这样运行的，旧图像的条纹滑开以显示新图像：
- en: '![Using the plugin](img/9642_07_05.jpg)'
  id: totrans-781
  prefs: []
  type: TYPE_IMG
  zh: '![使用该插件](img/9642_07_05.jpg)'
- en: In the previous screenshot, we can see the effects of the second transition
    type, with the old image being stripped away to reveal the new image.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到第二种过渡类型的效果，旧图像被剥去以显示新图像。
- en: Pop quiz – creating a plugin
  id: totrans-783
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 爆笑测验 - 创建插件
- en: Q1\. What is the difference between a plugin method and a function?
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\.插件方法和函数有什么区别？
- en: There is no difference, conceptually and in practice they are the same
  id: totrans-785
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在概念上和实践上，它们是一样的，没有区别
- en: Methods are able to accept arguments, functions are not
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法可以接受参数，而函数不行
- en: Methods execute faster
  id: totrans-787
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法执行更快
- en: Methods are attached to the `fn` object and are used like existing jQuery methods,
    while functions are attached directly to the jQuery object and called like any
    normal function
  id: totrans-788
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法附加到`fn`对象上，并像现有的jQuery方法一样使用，而函数直接附加到jQuery对象上，并像任何普通函数一样调用
- en: Q2\. What must each new method return?
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\.每个新方法必须返回什么？
- en: A string containing the `id` attribute of the selected element
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含所选元素的`id`属性的字符串
- en: An array containing the `id` attributes of selected elements
  id: totrans-791
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含所选元素的`id`属性的数组
- en: The `this` object, which points to the currently selected element
  id: totrans-792
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`this`对象指向当前选择的元素'
- en: Nothing should be returned
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么都不应该被返回
- en: Have a go hero – extending the plugin
  id: totrans-794
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有一个尝试英雄 - 扩展插件
- en: Our plugin currently contains just two transition effects (venetian and strip).
    Extend the plugin to include more transition effects of your own devising. The
    plugin currently creates a number of transition elements that are the full height
    of each image.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的插件目前只包含了两种过渡效果（百叶窗和条纹）。扩展插件以包括自己设计的更多过渡效果。插件目前创建了一些与每个图像高度相同的过渡元素。
- en: By wrapping our existing `for` loop within another `for` loop and adding some
    new counter variables for `top` position and vertical `background-position`, it
    is relatively easy to add square transition elements in a checkerboard style,
    which opens up the possibility of more complex and attractive transition effects.
    Do this.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将现有的`for`循环包裹在另一个`for`循环中，并添加一些新的计数变量来控制`top`位置和垂直`background-position`，可以比较容易地以棋盘风格添加正方形过渡元素，这样就可以实现更复杂和更有吸引力的过渡效果。做到这一点。
- en: Summary
  id: totrans-797
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at some common usages of the `animate()` method,
    which is the means for us to create custom animations in jQuery when the built-in
    effects are not enough for our requirements. The method is robust, easy to use,
    and makes complex animations trivial.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些`animate()`方法的常见用法，这是我们在jQuery中创建自定义动画的手段，当内置效果不能满足我们的要求时。这个方法强大、易于使用，并使复杂的动画变得轻而易举。
- en: 'When simple sliding or fading does not meet our requirements, we can fall back
    onto the `animate()` method in order to craft our own high-quality custom animations.
    We learned the following points about the `animate()` method:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 当简单的滑动或淡出不能满足我们的要求时，我们可以退而使用`animate()`方法来制作我们自己的高质量自定义动画。我们学到了关于`animate()`方法的以下要点：
- en: The `animate()` method can be used to animate any numeric CSS property (except
    colors, for which jQuery UI is required).
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animate()`方法可用于动画化任何数字类型的CSS属性（除了颜色，需要使用jQuery UI）。'
- en: The arguments passed into the method may take one of two formats. The first
    allows us to pass an object containing the CSS properties to animate, as well
    as separate duration, easing, and callback arguments. The second format allows
    us to pass in two objects, the first allowing us to specify the CSS properties
    to animate as before, and the second allowing us to specify additional options,
    such as the duration, easing, and callback. The second option gives us access
    to some special arguments not accessible in the first format, such as `specialEasing`
    and the `step` callback.
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递到方法中的参数可以采用两种格式之一。第一种允许我们传递一个包含要执行动画的 CSS 属性的对象，以及单独的持续时间、缓动和回调参数。第二种格式允许我们传递两个对象，第一个对象允许我们像以前一样指定要执行动画的
    CSS 属性，而第二个对象允许我们指定附加选项，比如持续时间、缓动和回调。第二种选项让我们可以访问一些在第一种格式中无法访问的特殊参数，比如`specialEasing`和`step`回调。
- en: All CSS properties specified in the first object will be executed simultaneously.
  id: totrans-802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有在第一个对象中指定的 CSS 属性将同时执行。
- en: How to achieve animations involving an element's position, or its dimensions
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现涉及元素位置或其尺寸的动画。
- en: We also looked at how we can extend the jQuery library with brand new functions
    and methods in the form of plugins. Plugins are a great way of wrapping up code
    for easy deployment and sharing.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了如何通过插件形式扩展 jQuery 库的全新功能和方法。插件是将代码封装起来以便轻松部署和共享的绝佳方式。
- en: Now that we've looked at all of jQuery's animation methods, in the next chapter,
    we're going to take a look at other popular animations, such as adding mouse and
    keyboard events and animating the post links.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了所有 jQuery 的动画方法，在下一章中，我们将看看其他流行的动画，比如添加鼠标和键盘事件以及动画化帖子链接。
