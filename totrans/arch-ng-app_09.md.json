["```js\nnpm install -g @angular/cli\n```", "```js\nng new <my new project>\n```", "```js\nnpm install @ngrx/store --save \n```", "```js\n// app.module.ts\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { AppComponent } from \"./app.component\";\nimport { counterReducer } from \"./reducer\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ counter: counterReducer }),\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\nStoreModule.forRoot({ counter: counterReducer })\n```", "```js\n// reducer.ts\n\nexport function counterReducer(state = 0, action) {\n  switch(action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state -1;\n    default:\n      return state;\n  }\n}\n```", "```js\nlet state = counterReducer(0, { type: 'INCREMENT' });\n// state is 1\nstate = counterReducer(state, { type: 'INCREMENT' });\n// state is 2\n```", "```js\n// app-state.ts\nexport interface AppState {\n  counter: number;\n}\n\n// app.component.ts\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AppState } from \"./app-state\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n  {{ counter$ | async }}\n `\n})\nexport class AppComponent {\n  counter$;\n\n  constructor(private store: Store<AppState>) {\n    this.counter$ = store.select(\"counter\");\n  }\n}\n```", "```js\nconstructor(private store: Store<AppState>) {\n  this.counter$ = store.select(\"counter\");\n}\n```", "```js\n{{ counter$ | async }}\n```", "```js\n// example input to a store\n\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT', payload: 1 });\nstore.dispatch({})\n// will throw an error, as it is missing the type property\n```", "```js\n// app.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { AppState } from \"./app-state\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n  {{ counter$ | async }}\n  <button (click)=\"increment()\" >Increment</button>\n <button (click)=\"decrement()\" >Decrement</button>\n `\n})\nexport class AppComponent {\n  counter$;\n\n  constructor(private store: Store<AppState>) {\n    this.counter$ = store.select(\"counter\");\n  }\n\n  increment() {\n this.store.dispatch({ type: 'INCREMENT' });\n }\n\n decrement() {\n this.store.dispatch({ type: 'DECREMENT' }); \n }\n}\n```", "```js\n// jedi-list.reducer.ts\nexport function jediListReducer(state = [], action) {\n  switch(action.type) {\n    case 'ADD_JEDI':\n      return [ ...state, { ...action.payload }];\n    case 'REMOVE_JEDI':\n      return state.filter(jedi => jedi.id !== action.payload.id);\n    case 'LOAD_JEDIS':\n      return action.payload.map(jedi => ({...jedi}));\n    default:\n      return state;\n  }\n}\n```", "```js\nlet state = jediListReducer([], { type: 'ADD_JEDI', payload : { id: 1, name: 'Yoda' });\n// now contains [{ id: 1, name: 'Yoda' }]\n\nstate = jediListReducer(state, { type: 'ADD_JEDI', payload: { id: 2, name: 'Darth Vader'} });\n// now contains [{ id: 1, name: 'Yoda' }, { id: 2, name: 'Darth Vader'}];\n\nstate = jediListReducer(state, { type: 'REMOVE JEDI', payload: { id: 1 } });\n// now contains [{ id: 2, name: 'Darth Vader'}];\n\nstate = jediListReducer(state, { type: 'LOAD_JEDIS', payload: [] });\n// now contains []\n```", "```js\n// app.module.ts\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { AppComponent } from \"./app.component\";\nimport { counterReducer } from \"./reducer\";\nimport { jediListReducer } from \"./jedi-list-reducer\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ \n      count: counterReducer, \n jediList: jediListReducer }),\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\n// jedi.model.ts\n\nexport interface Jedi {\n  id: number;\n  name: string;\n}\n\n// app-state.ts\n\nimport { Jedi } from \"./jedi.model\";\n\nexport interface AppState {\n  counter: number;\n  jediList: Array<Jedi>;\n}\n```", "```js\n// jedi-list.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { AppState } from \"../app-state\";\nimport { Jedi } from \"./jedi.model\";\n\n@Component({\n  selector: \"jedi-list\",\n  template: `\n  <div *ngFor=\"let jedi of list$ | async\">\n    {{ jedi.name }}<button (click)=\"remove(jedi.id)\" >Remove</button>\n  </div>\n  <input [(ngModel)]=\"newJedi\" placeholder=\"\" />\n  <button (click)=\"add()\">Add</button>\n  <button (click)=\"clear()\" >Clear</button>\n `\n})\nexport class JediListComponent {\n  list$: Observable<Array<Jedi>>;\n  counter = 0;\n  newJedi = \"\";\n\n  constructor(private store: Store<AppState>) {\n    this.list$ = store.select(\"jediList\");\n  }\n\n  add() {\n    this.store.dispatch({ \n type: 'ADD_JEDI', \n payload: { id: this.counter++, name: this.newJedi } \n });\n    this.newJedi = '';\n  }\n\n  remove(id) {\n    this.store.dispatch({ type: 'REMOVE_JEDI', payload: { id } }); \n  }\n\n  clear() {\n    this.store.dispatch({ type: 'LOAD_JEDIS', payload: [] });\n    this.counter = 0;\n  }\n}\n```", "```js\n// app.module.ts\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { AppComponent } from \"./app.component\";\nimport { counterReducer } from \"./reducer\";\nimport { jediListReducer } from \"./jedi-list.reducer\"; \nimport { JediListComponent } from './jedi-list.component';\n\n@NgModule({\n  declarations: [AppComponent, JediListComponent ],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ count: counterReducer, jediList: JediListReducer }),\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\n// jedi.constants.ts\n\nexport const ADD_JEDI = 'ADD_JEDI';\nexport const REMOVE_JEDI = \"REMOVE_JEDI\";\nexport const LOAD_JEDIS =\"LOAD_JEDIS\";\n```", "```js\nconst action = { type: 'ADD_JEDI', payload: { id: 1, name: 'Yoda' } };\n```", "```js\n// jedi.actions.ts\n\nimport { \n  ADD_JEDI, \n  REMOVE_JEDI, \n  LOAD_JEDIS \n} from \"./jedi.constants\";\n\nexport const addJedi = (id, name) => ({ type: ADD_JEDI, payload: { id, name } });\nexport const removeJedi = (id) => ({ type: REMOVE_JEDI, payload:{ id } });\nexport const loadJedis = (jedis) => ({ type: LOAD_JEDIS, payload: jedis });\n```", "```js\nstore.dispatch({ type: 'ADD_JEDI', payload: { id: 3, name: 'Luke' } });\n```", "```js\n// example of how we can dispatch to store using an actions method\n\nimport { addJedi } from './jedi.actions';\nstore.dispatch(addJedi(3, 'Luke'));\n```", "```js\napp.component.ts\napp.module.ts\njedi-list-reducer.ts\njedi-constants.ts\njedi-list-actions.ts\njedi-list-component.ts\n```", "```js\nng g module jedi\n```", "```js\njedi/\n jedi.module.ts\n```", "```js\nng g component jedi-list\n```", "```js\njedi/\n  jedi.module.ts\n  jedi-list/\n jedi-list.component.html\n jedi-list.component.ts\n jedi-list.component.css\n jedi-list.component.spec.ts\n```", "```js\njedi/\n  jedi.module.ts\n  jedi-list/\n```", "```js\n// jedi/jedi-list/jedi-list.reducer.ts\n\nimport { \n  ADD_JEDI, \n  REMOVE_JEDI, \n  LOAD_JEDIS \n} from './jedi-list.constants.ts'\n\nconst initialState = [];\n\nexport function jediListReducer(state = initialState, action) {\n  switch(action.type) {\n    case ADD_JEDI:\n      return [ ...state, { ...action.payload }];\n    case REMOVE_JEDI:\n      return state.filter(jedi => jedi.id !== action.payload.id);\n    case LOAD_JEDIS:\n      return action.payload.map(jedi => ({ ...jedi}));\n    default:\n      return state;\n  }\n}\n```", "```js\n// jedi/jedi-list/jedi-list-constants.ts\n\nexport const ADD_JEDI = 'ADD_JEDI';\nexport const REMOVE_JEDI = \"REMOVE_JEDI\";\nexport const LOAD_JEDIS =\"LOAD_JEDIS\";\n```", "```js\n// jedi/jedi-list/jedi-list-actions.ts\n\nimport { ADD_JEDI, REMOVE_JEDI, LOAD_JEDIS } from \"./jedi-list-constants\";\n\nlet counter = 0;\n\nexport const addJedi = (name) => ({ type: ADD_JEDI, payload: { id: counter++, name }});\nexport const removeJedi = (id) => ({ type: REMOVE_JEDI, payload: { id } });\nexport const loadJedis = (jedis) => ({ type: LOAD_JEDIS, payload: jedis });\n```", "```js\njedi/\n  jedi.module.ts\n  jedi-list/    jedi-list.reducer.ts\n jedi-list.actions.ts\n```", "```js\n// jedi/jedi-list/jedi-list.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { Observable } from \"rxjs/Observable\";\nimport { AppState } from \"../app-state\";\nimport { \n  addJedi, \n  removeJedi, \n  loadJedis \n} from './jedi-list-actions';\n\n@Component({\n  selector: \"jedi-list\",\n  template: `\n  <div *ngFor=\"let jedi of list$ | async\">\n    {{ jedi.name }}<button (click)=\"remove(jedi.id)\" >Remove</button>\n  </div>\n  <input [(ngModel)]=\"newJedi\" placeholder=\"\" />\n  <button (click)=\"add()\">Add</button>\n  <button (click)=\"clear()\" >Clear</button>\n `\n})\nexport class JediListComponent {\n  list$: Observable<number>;\n  counter = 0;\n  newJedi = \"\";\n\n  constructor(private store: Store<AppState>) {\n    this.list$ = store.select(\"jediList\");\n  }\n\n  add() {\n    this.store.dispatch(addJedi(this.newJedi));\n    this.newJedi = '';\n  }\n\n  remove(id) {\n    this.store.dispatch(removeJedi(id)); \n  }\n\n  clear() {\n    this.store.dispatch(loadJedis([]));\n    this.counter = 0;\n  }\n}\n```", "```js\njedi/\n  jedi.module.ts\n  jedi-list/    jedi-list.reducer.ts\n    jedi-list.actions.ts    jedi-list.component.ts\n```", "```js\n// app.module.ts\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { AppComponent } from \"./app.component\";\nimport { counterReducer } from \"./reducer\";\nimport { JediModule } from './jedi/jedi.module';\nimport { jediListReducer } from \"./jedi/jedi-list/jedi-list.reducer\";  \n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ \n      counter: counterReducer, \n jediList: JediListReducer \n    }),\n    JediModule\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\n// from app.module.ts\n\nStoreModule.forRoot({ count: counterReducer, jediList: JediListReducer })\n```", "```js\nStoreModule.forRoot({ \n  featureModuleState1: featureModuleState1Reducer, \n  featureModuleState2 : featureModuleState2Reducer\n  .\n  .\n  .\n  .\n  .\n  .\n  .\n  .\n})\n```", "```js\n// app.module.ts\n\nStoreModule.forRoot({  }) // this would be empty\n```", "```js\n// counter.module.ts\n@NgModule({\n  imports: [StoreModule.forFeature(\n    // add reducer object here\n  )]\n})\n\n// jedi.module.ts\n@NgModule({\n  imports : [StoreModule.forFeature(\n  // add reducer here\n  )]\n})\n```", "```js\n{\n  sliceOfState : reducerFunction,\n  anotherSliceOfState: anotherReducerFunction\n}\n```", "```js\n// counter.module.ts\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature('counter',{\n      data: counterReducer    \n    })\n  ]\n})\n```", "```js\n// counter.component.ts\n\n@Component({\n  selector: 'counter',\n  template: `{{ counter$ | async }}`\n})\nexport class CounterComponent {\n  counter$;\n\n  constructor(private store: Store<AppState>) {\n    // this needs to change..\n    this.counter$ = this.store.select('counter');\n  }\n}\n```", "```js\n// counter.component.ts\n@Component({\n  selector: 'counter',\n  template: `{{ counter$ | async }}`\n})\nexport class CounterComponent {\n  counter$;\n\n  constructor(private store: Store<AppState>) {\n    this.counter$ = this.store.select((state) => {\n return state.counter.data;\n });\n  }\n}\n```", "```js\n// counter.module.ts\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature('counter',{\n      data: counterReducer    \n    })\n  ]\n})\n```", "```js\n// counter.reducer.ts\n\nexport interface CounterState = {\n data: number\n};\n\nexport reducer: ActionReducerMap<CounterState> = {\n data: counterReducer\n}\n\n// counter.module.ts\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature('counter', reducer)\n  ]\n})\n```", "```js\n// counter.module.ts\n\nconst CounterState = {\n  data: number\n};\n\nconst reducers: ActionReducerMap<CounterState> = {\n  data: counterReducer\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature<CounterState, Action>('counter', reducers)\n  ]\n})\n```", "```js\n// example of what NOT to do interface State {\n  test: string;\n}\n\nfunction testReducer(state =\"\", action: Action) {\n  switch(action.type) {\n    default:\n      return state;\n  }\n}\n\nconst reducers: ActionReducerMap<State> = {\n  test: testReducer\n};\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    StoreModule.forFeature<CounterState, Action>('counter', reducers)\n  ],\n  exports: [CounterComponent, CounterListComponent],\n  declarations: [CounterComponent, CounterListComponent],\n  providers: [],\n})\nexport class CounterModule { }\n```", "```js\n/counter\n  counter.reducer.ts\n  counter.component.ts\n  counter.constants.ts\n  counter.actions.ts\n  /counter-list\n counter-list.reducer.ts\n counter-list.component.ts\n counter-list.constants.ts\n counter-list.action.ts    counter.model.ts\ncounter.module.ts\n```", "```js\n// counter/counter-list/counter-list.reducer.ts\n\nimport {\n  ADD_COUNTER_ITEM,\n  REMOVE_COUNTER_ITEM\n} from \"./counter-list.constants\";\nimport { ActionPayload } from \"../../action-payload\";\nimport { Counter } from \"./counter.model\";\n\nexport function counterListReducer(state = [], action: ActionPayload<Counter>) {\n  switch (action.type) {\n    case ADD_COUNTER_ITEM:\n      return [...state, Object.assign(action.payload)];\n    case REMOVE_COUNTER_ITEM:\n      return state.filter(item => item.id !== action.payload.id);\n    default:\n      return state;\n  }\n}\n```", "```js\n// counter/counter-list/counter-list.component.ts\n\nimport { Component, OnInit } from \"@angular/core\";\nimport { AppState } from \"../../app-state\";\nimport { Store } from \"@ngrx/store\";\nimport { addItem, removeItem } from \"./counter-list.actions\";\n\n@Component({\n  selector: \"app-counter-list\",\n  templateUrl: \"./counter-list.component.html\",\n  styleUrls: [\"./counter-list.component.css\"]\n})\nexport class CounterListComponent implements OnInit {\n  list$;\n  newItem: string;\n  counter: number;\n\n  constructor(private store: Store<AppState>) {\n    this.counter = 0;\n    this.list$ = this.store.select(state => state.counter.list);\n  }\n\n  ngOnInit() {}\n\n  add() {\n    this.store.dispatch(addItem(this.newItem, this.counter++));\n    this.newItem = \"\";\n  }\n\n  remove(id) {\n    this.store.dispatch(removeItem(id));\n  }\n}\n```", "```js\n// counter/counter-list/counter-list.component.html\n\n<div>\n  <input type=\"text\" [(ngModel)]=\"newItem\">\n  <button (click)=\"add()\">Add</button>\n</div>\n<div *ngFor=\"let item of list$ | async\">\n  {{item.title}}\n  <button (click)=\"remove(item.id)\">Remove</button>\n</div>\n```", "```js\n// counter/counter-list/counter-list.constants.ts\n\nexport const ADD_COUNTER_ITEM = \"add counter item\";\nexport const REMOVE_COUNTER_ITEM = \"remove counter item\";\n```", "```js\n// counter/counter-list/counter-list.actions.ts\n\nimport {\n  ADD_COUNTER_ITEM,\n  REMOVE_COUNTER_ITEM\n} from \"./counter-list.constants\";\n\nexport const addItem = (title, id) => ({\n  type: ADD_COUNTER_ITEM,\n  payload: { id, title }\n});\n\nexport const removeItem = id => ({\n  type: REMOVE_COUNTER_ITEM,\n  payload: { id }\n});\n```", "```js\n// counter/counter-list/counter.model.ts\n\nexport interface Counter {\n  title: string;\n  id: number;\n}\n```", "```js\n// counter/counter.module.ts\n\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { CounterComponent } from \"./counter.component\";\nimport { StoreModule, ActionReducerMap } from \"@ngrx/store\";\nimport { counterReducer } from \"./counter.reducer\";\nimport { CounterListComponent } from \"./counter-list/counter-list.component\";\nimport { Counter } from \"./counter-list/counter.model\";\nimport { counterListReducer } from \"./counter-list/counter-list.reducer\";\nimport { FormsModule } from \"@angular/forms\";\n\nexport interface CounterState {\n  data: number;\n  list: Array<Counter>;\n}\n\nconst combinedReducers: ActionReducerMap<CounterState> = {\n  data: counterReducer,\n  list: counterListReducer\n};\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(\"counter\", combinedReducers),\n    FormsModule\n  ],\n  declarations: [CounterComponent, CounterListComponent],\n  exports: [CounterComponent, CounterListComponent]\n})\nexport class CounterModule {}\n```", "```js\nProductsComponent // container component\nProductsListComponent // presentational component\nProductsCreateComponent // presentational component\n```", "```js\n// products.component.ts  - container component\n@Component({\n  template: `\n    <products-list [products]=\"products$ | async\">\n  `\n})\nexport class ProductsComponent {\n  products$: Observable<Product>;\n\n  constructor(private store: Store<AppState>) {\n    this.products$ = this.store.select('products'); \n  }\n}\n\n// products-list.component.ts  - dumb component\n@Component({\n  selector: 'products-list',\n  template : `\n  <div *ngFor=\"let product of products\">\n  {{ products.name }}\n  </div>\n  `\n})\nexport class ProductsListComponent {\n  @Input() products;\n}\n```", "```js\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { AppComponent } from \"./app.component\";\nimport { counterReducer } from \"./reducer\";\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({\n      counter: counterReducer,\n      StoreDevtoolsModule.instrument({\n maxAge: 25 // Retains last 25 states\n      })\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\nnpm install @ngrx/effects --save\n```", "```js\n// product/product.constants.ts\n\nexport const FETCHING_PRODUCTS = \"FETCHING_PRODUCTS\";\nexport const FETCHING_PRODUCTS_SUCCESSFULLY = \"FETCHING_PRODUCTS_SUCCESSFULLY\";\nexport const FETCHING_PRODUCTS_ERROR = \"FETCHING_PRODUCTS_ERROR\";\n```", "```js\n// product/product.actions.ts\n\nimport { \n  FETCHING_PRODUCTS_SUCCESSFULLY, \n  FETCHING_PRODUCTS_ERROR,\n  FETCHING_PRODUCTS \n} from \"./product.constants\";\n\nexport const fetchSuccessfully = (products) => ({ \n  type: FETCHING_PRODUCTS_SUCCESSFULLY, \n  payload: products \n});\n\nexport const fetchError = (error) => ({ \n  type: FETCHING_PRODUCTS_ERROR, \n  payload: error \n});\n\nexport const fetchProductsSuccessfully = (products) => ({ \n  type: FETCHING_PRODUCTS_SUCCESSFULLY, \n  payload: products \n});\n\nexport const fetchProducts =() => ({ type: FETCHING_PRODUCTS });\n```", "```js\n// product/product.reducer.ts\n\nimport {\n  FETCHING_PRODUCTS_SUCCESSFULLY,\n  FETCHING_PRODUCTS_ERROR,\n  FETCHING_PRODUCTS\n} from \"./product.constants\";\nimport { Product } from \"./product.model\";\nimport { ActionReducerMap } from \"@ngrx/store/src/models\";\n\nconst initialState = {\n  loading: false,\n  list: [{ name: \"init\" }],\n  error: void 0\n};\n\nexport interface ProductState {\n  loading: boolean;\n  list: Array<Product>;\n  error: string;\n}\n\nexport interface FeatureProducts {\n  products: ProductState;\n}\n\nexport const ProductReducers: ActionReducerMap<FeatureProducts> = {\n  products: productReducer\n};\n\nexport function productReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCHING_PRODUCTS_SUCCESSFULLY:\n      return { ...state, list: action.payload, loading: false };\n    case FETCHING_PRODUCTS_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    case FETCHING_PRODUCTS:\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n}\n```", "```js\n// product/product.effect.ts\n\nimport { Actions, Effect } from \"@ngrx/effects\";\n\n@Injectable()\nexport class ProductEffects {\n  @Effect() products$: Observable<Action>;\n\n  constructor(\n    private actions$: Actions<Action>>\n  ) {}\n}\n```", "```js\n// product/product.effect.ts, starting out..\n\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport { switchMap } from \"rxjs/operators\";\nimport { Observable } from \"rxjs/Observable\";\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class ProductEffects {\n  @Effect() products$: Observable<Action> = this.actions$.pipe(\n ofType(FETCHING_PRODUCTS),\n switchMap(action => {\n // do something completely else that returns an Observable\n })\n );\n\n  constructor(\n    private actions$: Actions<Action>>\n  ) {}\n}\n```", "```js\n// product/product.effect.ts\n\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { FETCHING_PRODUCTS } from \"./product.constants\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs/Observable\";\nimport { delay, map, catchError, switchMap } from \"rxjs/operators\";\nimport { fetchProductsSuccessfully, fetchError } from \"./product.actions\";\nimport { Action } from \"@ngrx/store\";\n\n@Injectable()\nexport class ProductEffects {\n  @Effect()\n  products$ = this.actions$.pipe(\n    ofType(FETCHING_PRODUCTS),\n    switchMap(action =>\n      this.http\n      .get(\"data/products.json\")\n      .pipe(\n delay(3000),\n        map(fetchProductsSuccessfully),\n catchError(err => of(fetchError(err)))\n      )\n    )\n  );\n\n  constructor(private actions$: Actions<Action>, private http: HttpClient) {}\n}\n```", "```js\n// app.module.ts - registering our effect in the root module, alternative I\n\n/* omitting the other imports for brevity */\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { ProductEffects } from \"./products/product.effect\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({}),\n    ProductsModule,\n    StoreDevtoolsModule.instrument({\n      maxAge: 25 // Retains last 25 states\n    }),\n    EffectsModule.forRoot([ ProductEffects ])\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```", "```js\n// product/product.module.ts, registering in the feature module, alternative II\n\nimport { NgModule } from \"@angular/core\";\nimport { ProductComponent } from \"./product.component\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { ProductEffects } from \"./product.effect\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { StoreModule, Action } from \"@ngrx/store\";\nimport { ProductReducers } from \"./product.reducer\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { ActionReducerMap } from \"@ngrx/store/src/models\";\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    StoreModule.forFeature(\"featureProducts\", ProductReducers),\n    EffectsModule.forFeature([ProductEffects]),\n    HttpClientModule\n  ],\n  exports: [ProductComponent],\n  declarations: [ProductComponent],\n  providers: []\n})\nexport class ProductModule {}\n```", "```js\n// product/product.component.ts\n\nimport { Component, OnInit } from \"@angular/core\";\nimport { AppState } from \"../app-state\";\nimport { Store } from \"@ngrx/store\";\n\n@Component({\n  selector: \"products\",\n  template: `\n    <div *ngFor=\"let product of products$ | async\">\n      Product: {{ product.name }}\n    </div>\n  </div>\n`\n})\nexport class ProductsComponent {\n  products$;\n  loading$;\n\n  constructor(private store: Store<AppState>) {\n    this.products$ = this.store.select((state) => {\n      return state.products.list;\n    });\n  }\n}\n```", "```js\nconst initialState = {\n  loading: false,\n  list: [],\n  error: void 0\n}\n```", "```js\nthis.products$ = this.store.select((state) => {\n  return state.products.list;\n});\n\n```", "```js\n// product/products-reducer.ts\n\nimport { \n  FETCHING_PRODUCTS_SUCCESSFULLY, \n  FETCHING_PRODUCTS_ERROR,\n  FETCHING_PRODUCTS \n} from \"./product-constants\";\n\nexport interface ProductsState {\n loading: boolean;\n list: Array<Product>;\n error: string;\n}\n\nconst initialState: ProductsState = {\n  loading: false,\n  list: [],\n  error: void 0\n}\n\nexport function productReducer(state = initialState, action) {\n  switch(action.type) {\n    case FETCHING_PRODUCTS_SUCCESSFULLY:\n      return { ...state, list: action.payload, loading: false };\n    case FETCHING_PRODUCTS_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    case FETCHING_PRODUCTS:\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n}\n```", "```js\n// app-state.ts\n\nimport { FeatureProducts } from \"./product/product.reducer\";\n\nexport interface AppState {\n  featureProducts: FeatureProducts;\n}\n\n```", "```js\n// product/product.selectors.ts\nimport { AppState } from \"../app-state\";\n\nexport const getList = (state:AppState) => state.featureProducts.products.list; \nexport const getError = (state:AppState) => state.featureProducts.products.error;\nexport const isLoading = (state:AppState) => state.featureProducts.products.loading;\n```", "```js\n// product/product.component.ts\n\nimport { Component, OnInit } from \"@angular/core\";\nimport { AppState } from \"../app-state\";\nimport { Store } from \"@ngrx/store\";import { getList } from './product.selectors';\n\n@Component({\n  selector: \"products\",\n  template: `\n    <div *ngFor=\"let product of products$ | async\">\n      Product: {{ product.name }}\n    </div>\n`\n})\nexport class ProductsComponent {\n  products$;\n\n  constructor(private store: Store<AppState>) {\n    this.products$ = this.store.select(getList);\n  }\n}\n```", "```js\nimport { Component, OnInit } from \"@angular/core\";\nimport { AppState } from \"../app-state\";\nimport { Store } from \"@ngrx/store\";import { getList, isLoading } from \"./products.selectors\";\n\n@Component({\n  selector: \"products\",\n  template: `\n    <div *ngFor=\"let product of products$ | async\">\n      Product: {{ product.name }}\n    </div>\n    <div *ngIf=\"loading$ | async; let loading\">\n      <div *ngIf=\"loading\">\n      loading...\n </div>\n    </div>\n`\n})\nexport class ProductsComponent {\n  products$;\n  loading$;\n\n  constructor(private store: Store<AppState>) {\n    this.products$ = this.store.select(getList);\n    this.loading$ = this.store.select(isLoading);\n  }\n}\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { AppState } from \"../app-state\";\nimport { Store } from \"@ngrx/store\";import { getList, isLoading, getError } from \"./products.selectors\";\n\n@Component({\n  selector: \"products\",\n  template: `\n    <div *ngFor=\"let product of products$ | async\">\n      Product: {{ product.name }}\n    </div>\n    <div *ngIf=\"loading$ | async; let loading\">\n      <div *ngIf=\"loading\">\n      loading...\n      </div>\n    </div>\n <div *ngIf=\"error$ | async; let error\" >\n <div *ngIf=\"error\">{{ error }}</div> \n </div>\n`\n})\nexport class ProductsComponent {\n  products$;\n  loading$;\n  error$;\n\n  constructor(private store: Store<AppState>) {\n    this.products$ = this.store.select(getList);\n    this.loading$ = this.store.select(isLoading);\n    this.error$ = this.store.select(getError);\n  }\n}\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { AppState } from \"../app-state\";\nimport { Store } from \"@ngrx/store\";import { getList, isLoading, getError } from \"./products.selectors\";\nimport { fetchProducts } from \"./products.actions\";\n\n@Component({\n  selector: \"products\",\n  template: `\n    <div *ngFor=\"let product of products$ | async\">\n      Product: {{ product.name }}\n    </div>\n    <div *ngIf=\"loading$ | async; let loading\">\n      <div *ngIf=\"loading\">\n      loading...\n      </div>\n    </div>\n    <div *ngIf=\"error$ | async; let error\" >\n      <div *ngIf=\"error\">{{ error }}</div> \n    </div>  `\n})\nexport class ProductsComponent implements OnInit {\n products$;\n loading$;\n error$;\n\n constructor(private store: Store<AppState>) {\n   this.products$ = this.store.select(getList);\n   this.loading$ this.store.select(isLoading);\n   this.error$ = this.store.select(getError); }\n\n ngOnInit() {\n   this.store.dispatch(fetchProducts); \n }\n}\n```", "```js\n// product.constants.ts\n\nexport const FETCHING_PRODUCTS = \"FETCHING_PRODUCTS\";\nexport const FETCHING_PRODUCTS_SUCCESSFULLY = \"FETCHING_PRODUCTS_SUCCESSFULLY\";\nexport const FETCHING_PRODUCTS_ERROR = \"FETCHING_PRODUCTS_ERROR\";\nexport const ADD_PRODUCT = \"ADD_PRODUCT\";\nexport const ADD_PRODUCT_SUCCESSFULLY = \"ADD_PRODUCT_SUCCESSFULLY\";\nexport const ADD_PRODUCT_ERROR =\"ADD_PRODUCT_ERROR\";\n```", "```js\n// products.reducer.ts\n\nimport {\n  FETCHING_PRODUCTS_SUCCESSFULLY,\n  FETCHING_PRODUCTS_ERROR,\n  FETCHING_PRODUCTS,\n  ADD_PRODUCT,\n ADD_PRODUCT_SUCCESSFULLY,\n ADD_PRODUCT_ERROR\n} from \"./product.constants\";\n\nimport { Product } from \"./product.model\";\n\nconst initialState = {\n  loading: false,\n  list: [],\n  error: void 0\n}\n\nexport interface ProductsState {\n  loading: boolean;\n  list: Array<Product>,\n  error: string;\n}\n\nfunction addProduct(list, product) {\n  return [ ...list, product];\n}\n\nexport function productsReducer(state = initialState, action) {\n  switch(action.type) {\n    case FETCHING_PRODUCTS_SUCCESSFULLY:\n      return { ...state, list: action.payload, loading: false };\n    case FETCHING_PRODUCTS_ERROR:\n    case ADD_PRODUCT_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    case FETCHING_PRODUCTS:\n    case ADD_PRODUCT:\n      return { ...state, loading: true };\n    case ADD_PRODUCT_SUCCESSFULLY:\n      return { ...state, list: addProduct(state.list, action.payload) };\n    default:\n      return state;\n  }\n}\n```", "```js\n// products.actions.ts\n\nimport {\n  FETCHING_PRODUCTS_SUCCESSFULLY,\n  FETCHING_PRODUCTS_ERROR,\n  FETCHING_PRODUCTS,\n ADD_PRODUCT,\n ADD_PRODUCT_SUCCESSFULLY,\n ADD_PRODUCT_ERROR\n} from \"./product.constants\";\n\nexport const fetchProductsSuccessfully = (products) => ({ \n  type: FETCHING_PRODUCTS_SUCCESSFULLY,\n  payload: products\n});\n\nexport const fetchError = (error) => ({ \n  type: FETCHING_PRODUCTS_ERROR, \n  payload: error \n});\nexport const fetchProductsLoading = () => ({ type: FETCHING_PRODUCTS });\nexport const fetchProducts = () => ({ type: FETCHING_PRODUCTS });\nexport const addProductSuccessfully (product) => ({ \n  type: ADD_PRODUCT_SUCCESSFULLY },\n  payload: product\n);\nexport const addProduct = (product) => ({ \n  type: ADD_PRODUCT,\n  payload: product\n});\nexport const addProductError = (error) => ({ \n  type: ADD_PRODUCT_ERROR, \n  payload: error \n});\n```", "```js\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Action } from \"@ngrx/store\";\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\nimport { Observable } from \"rxjs/Observable\";\nimport { of } from \"rxjs/observable/of\";\nimport \"rxjs/add/observable/of\";\nimport { \n  catchError, \n  map, \n  mergeMap, \n  delay, \n  tap, \n  switchMap \n} from \"rxjs/operators\";\nimport { FETCHING_PRODUCTS, ADD_PRODUCT } from \"./product.constants\";\nimport { \n  fetchProductsSuccessfully, \n  fetchError, \n  addProductSuccessfully, \n addProductError \n} from \"./product.actions\";\nimport { Product } from \"./product.model\";\nimport { ActionPayload } from \"../interfaces\";\n\n@Injectable()\nexport class ProductEffects {  @Effect() productsAdd$: Observable<Action> = this.actions$.pipe(\n ofType(ADD_PRODUCT),\n switchMap(action =>\n this.http.post(\"products/\", action.payload).pipe(\n map(addProductSuccessfully),\n catchError((err) => of(addProductError(err)))</strong>\n **)**\n **)**\n **);** @Effect() productsGet$: Observable<Action> = this.actions$.pipe(\n    ofType(FETCHING_PRODUCTS),\n    switchMap(action =>\n      this.http.get(\"data/products.json\").pipe(\n        delay(3000),\n        map(fetchProductsSuccessfully),\n        catchError((err) => of(fetchError(err)))\n      )\n    )\n  );\n constructor(\n    private http: HttpClient,\n    private actions$: Actions<ActionPayload<Product>>\n  ) {}\n} \n```", "```js\nimport { Component, OnInit } from \"@angular/core\";\nimport { AppState } from \"../app-state\";\nimport { Store } from \"@ngrx/store\";\nimport { fetchProducts, addProduct } from \"./product.actions\";\nimport { getList, isLoading, getError } from \"./products.selectors\";\n\n@Component({\nselector: \"products\",\n  template: `\n  <div>\n    <input [(ngModel)]=\"newProduct\" placeholder=\"new product...\" />\n    <button (click)=\"addNewProduct()\"></button>\n  </div>\n  <div *ngFor=\"let product of products$ | async\">\n  Product: {{ product.name }}\n  </div>\n  <div *ngIf=\"loading$ | async; let loading\">\n    <div *ngIf=\"loading\">\n    loading...\n    </div>\n  </div>\n  <div *ngIf=\"error$ | async; let error\">\n  {{ error }}\n  </div>\n  `\n})\nexport class ProductsComponent implements OnInit {\n  products$;\n  loading$;\n  error$;\n  newProduct: string; \n  constructor(private store: Store<AppState>) {\n    this.products$ = this.store.select(getList);\n    this.loading$ = store.select(isLoading);\n    this.error$ = store.select(getError);\n  }\n\n  ngOnInit() {\n    this.store.dispatch(fetchProducts());\n  }\n\n  addNewProduct() {\n this.store.dispatch(addProduct(this.newProduct));\n    this.newProduct = \"\";\n  }\n}\n```"]