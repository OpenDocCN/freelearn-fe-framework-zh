- en: Chapter 3. The Karma Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript testing has hit the mainstream, thanks to Karma. Karma makes it seamless
    to test JavaScript. Angular was created around testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn a few things about Karma, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The origin of Karma
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why and how Karma will work with an Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Karma configuration and implementation with an Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of **Travis CI**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The birth of Karma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When picking up a new tool, it is important to understand where it comes from
    and why it is built. This section will give us a background of the origin of Karma.
  prefs: []
  type: TYPE_NORMAL
- en: The Karma difference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Karma was created by Vojta Jína. The project was originally called **Testacular**.
    In Vojtech Jína's thesis, he discusses the design, purpose, and implementation
    of Karma.
  prefs: []
  type: TYPE_NORMAL
- en: 'In his thesis (*JavasScript Test Runner*, [https://github.com/karma-runner/karma/raw/master/thesis.pdf](https://github.com/karma-runner/karma/raw/master/thesis.pdf)),
    he describes Karma as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"...a test runner that helps web application developers to be more productive
    and effective by making automated testing simpler and faster. In fact, I have
    a much higher ambition and this thesis is only a part of it - I want to promote
    Test Driven Development (TDD) as "the" way to develop web applications, because
    I believe it is the most effective way to develop high quality software."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Karma has the ability to easily and automatically run JavaScript unit tests
    on real browsers. Traditionally, tests were run by launching a browser manually
    and checking for results by continually clicking on the refresh button. This method
    was awkward and often resulted in developers limiting the number of tests that
    were written.
  prefs: []
  type: TYPE_NORMAL
- en: With Karma, a developer can write a test in almost any standard test framework,
    choose a browser to run against, set the files to watch for changes, and bam!
    We have continuous automated testing. We have to simply check the output window
    for failed or passed tests.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of combining Karma and Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Karma was built for AngularJS. Before Karma, there was a lack of automated testing
    tools for web-based JavaScript developers.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that Karma is a test runner, not a test framework. Its job is to run
    tests and report which tests will pass or fail. Why is this helpful? A test framework
    is where you will write your tests. Apart from doing this, you will need to be
    focused on running the tests easily and seeing the results. Karma easily runs
    tests across several different browsers. It also has some other features, such
    as file watching, which will be discussed in detail later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Karma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to start using Karma. Installations and applications are constantly
    changing. The following guide is intended to be brief; you can go to the Karma
    website at [http://karma-runner.github.io/](http://karma-runner.github.io/) and
    find the latest instructions there.
  prefs: []
  type: TYPE_NORMAL
- en: The main focus of this section will be the specific configuration used in this
    book and not an in-depth installation guide.
  prefs: []
  type: TYPE_NORMAL
- en: Installation prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install Karma, we will need to have Node.js on our computer. Node.js runs
    on Google's V8 engine and allows JavaScript to be run on several operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Developers can publish node applications and modules using **NPM** (**Node Package
    Manager**). NPM allows developers to quickly integrate applications and modules
    into their applications.
  prefs: []
  type: TYPE_NORMAL
- en: Karma runs and is installed through the `npm` package; therefore, we need Node.js
    before we can use or install Karma. To install Node.js, go to [http://nodejs.org/](http://nodejs.org/)
    and follow the installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have Node.js installed, lets type the following command in the Command
    Prompt to install Karma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command uses `npm` to install Karma globally using `-g`. This
    means that we can use Karma on the Command Prompt by simply typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default, installing Karma will install `karma-chrome-launcher` and `karma-jasmine`
    as dependencies. Ensure that these modules are installed globally as well.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Karma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Karma comes equipped with an automated way to create a configuration file.
    To use the automated way, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a sample of the options chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Karma](img/image_03_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing Karma's configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following instructions describe the specific configuration required to
    get Karma running for the project. Customization includes the test framework (Jasmine),
    the browser (Chrome) to test with, and the files to test. To customize the configuration,
    open `karma.conf.js` and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the enabled framework says `jasmine` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the `test` directory. Note that the following definition needs to
    include the tests that are required to be run along with any potential dependencies.
    The directory that will hold our tests is `/test/unit/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the test browser to Chrome, as follows. It will then be initialized and
    will run a popup after every test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Confirming Karma's installation and configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To confirm Karma''s installation and configuration, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to confirm that Karma starts with no errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should be something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition to this, the output should state that no test files were found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should do this along with a failed test message:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: An important point to note is that we will need to install `jasmine-core` globally
    on the system, or else Karma will not run successfully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is expected as no tests have been created yet . Continue to the next step
    if Karma starts, and we will see our Chrome browser with the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Confirming Karma''s installation and configuration](img/image_03_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Common installation/configuration issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the Jasmine or Chrome launcher are missing, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When running the test, an error might occur saying **missing Jasmine or Chrome
    Launcher**. If you get this error, type the following command to install the missing
    dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Retry the test and confirm that the errors have been resolved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, you might not be able to install `npm_modules` globally using
    the `-g` command. This is generally due to permission issues on your computer.
    The following is what you need to do to provide permissions (sudo/administrator):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The resolution is to install Karma directly in your project folder. Use the
    same command without `-g` to do this:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Karma using the relative path:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Now that Karma is installed and running, it's time to put it to use.
  prefs: []
  type: TYPE_NORMAL
- en: Testing with Karma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create a test to confirm that Karma is working as
    expected. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the test directory. In the Karma configuration, tests were defined in
    the following directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go ahead and create the `test/unit` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `firstTest.js` file in the `test/unit` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the first test as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding test uses the Jasmine functions and has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe`: This provides a brief string description of the test suite, the
    things that will be tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`it`: This provides a brief string of the specific assertion called a test
    spec'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expect`: This provides a way to assert values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toBeTruthy`: This is one of the several properties of an expectation that
    can be used to make assertions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This test has no real value other than to confirm the output of a passing test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bam! Let''s check our console window and see that Karma has executed our test.
    And our command line should say something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This output means that Karma automatically recognized that a new file was added.
    The next output should be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This means that our test has passed!
  prefs: []
  type: TYPE_NORMAL
- en: Confirming the Karma installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, the initial set up and configuration of Karma is complete. Here is a review
    of the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We installed Karma through the `npm` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We initialized a default configuration through the `karma init` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we configured Karma with Jasmine and a `test/unit` test directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We started Karma and confirmed that it could be opened with Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we added a Jasmine test, `firstTest.js`, to our `test/unit` test directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Karma recognized that `firstTest.js` had been added to the test directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, Karma executed our `firstTest.js` and reported our output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a couple of steps, we were able to see Karma running and executing tests
    automatically. From a TDD perspective, we can focus on moving tests from failing
    to passing without much effort. There is no need to refresh the browser; just
    check the command output window. Keep Karma running and all our tests and files
    will automatically be added and run.
  prefs: []
  type: TYPE_NORMAL
- en: In the subsequent sections, we will see how to apply Karma with a TDD approach.
    If you're okay with Karma so far and want to move on to Protractor, skip to the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using Karma with Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will walk through a TDD approach to an Angular component. By the end
    of this chapter, we should be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Feel confident about using Karma and its configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the basic components of a Jasmine test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start understanding the integration of a TDD approach in an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Angular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular installation is not possible via Bower; as it was with Angular1, it
    has to be installed via npm. Bootstrapping the Angular application is not as simple
    as Angular1 because Angular doesn't use plain JavaScript. It uses TypeScript or
    ES6 (ES2015), both of which need to be compiled to plain JavaScript before running
    them.
  prefs: []
  type: TYPE_NORMAL
- en: We believe that most of the developer are already aware of the Angular changes
    and how its compilation works. Just a quick recap--we will use TypeScript in our
    Angular example project here as long as Angular recommends that, though there
    is an option to use ES6 instead. We will use the node/npm tsc module to compile
    the TypeScript to plain JavaScript; node/npm will be our CLI tools as well to
    build/start a project and run the test.
  prefs: []
  type: TYPE_NORMAL
- en: A basic understanding of node/npm modules is required here, specifically, how
    the npm commands works.
  prefs: []
  type: TYPE_NORMAL
- en: Angular project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will not demonstrate how to install Angular and how to build a project from
    scratch, as the Angular doc site shows that nicely. So, we will get a simple Angular
    project from the Angular teams' example and update that one for our implementation.
  prefs: []
  type: TYPE_NORMAL
- en: We will clone the `quickstart` project from the Angular GitHub repo and will
    start on that one. Hope we all have `git` installed globally besides the node/npm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will copy the project locally as `angular-karma` and the folder structure
    will look as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Angular project](img/image_03_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s proceed with it and get ready to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here are a couple of steps to get ready with the example project. The `npm install`
    command will install the required modules for the project dependencies that are
    defined in the `package.json` file in the project root.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will run the project with `npm start`; this script, defined in `package.json`,
    is used to run the project in the local server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s compile and run the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If all the required dependencies are installed, this command will compile the
    TypeScript to plain JavaScript and will run the project in the local server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The project will launch in a browser and will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Angular project](img/image_03_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If this sample project runs successfully, then we are good to go in the next
    step, where we will add a test spec, which will include Karma, and run those tests
    with the Karma runner.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we cloned the sample `quickstart` project, it already integrated and configured
    Karma in the project. For the purpose of learning, we would like to integrate
    Karma in the existing project.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, we will have to remove the existing `karma.conf.js` file from the
    project root directory. Also, we will remove the Karma, Jasmine, and related modules
    from `node_modules`.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, instead of doing it manually, we can easily create the basic
    Karma config file with a simple command. And with that command, it will ask some
    basic questions as we saw in the previous part of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Karma
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up Karma in an Angular project, the first job is to create a `karma.conf.js`
    file in the project root directory. This file basically contains some configuration
    in key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly, instead of doing it manually, we can easily create the basic
    Karma config file with a simple command. And with that command, it will ask some
    basic questions as we saw in the previous part of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Use the default answers. After `karma.conf.js` has been created in the current
    directory, open the configuration. A few configurations may need to change, mostly
    the one that is the definition of the files for Karma to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following definition in the `files` section, which defines the files
    required to run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, with the pattern, we have passed two options, `included` and `watched`.
    `included` refers to whether or not we want to include the file with the `<script>`
    tag; here, we will add it via SystemJS, so this is passed as `false`. And `watched`
    refers to whether or not this file will be watched during changes to the file.
    We have set `true`, as we want to watch the changes.
  prefs: []
  type: TYPE_NORMAL
- en: There seem to be a lot of files added, but these are basic and a must for running
    the test.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a closer look at what the files are. In the first chunk, these are
    mostly library files, including SystemJS as a module loader, zonejs as a sync
    handler, RxJS as a reactive library, and the Angular library itself.
  prefs: []
  type: TYPE_NORMAL
- en: Importantly, a new file in the second chunk is `karma-test-shim.js`, which we
    need to use with Karma as the module loader in test suites, that is, use SystemJS
    to load the modules in the Karma test runner. We will look at that file later
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: And then, it's all our app source file; we will put test/spec files on the same
    directory as well so that they will load all of our module files, including their
    test/spec files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the files, we may need to change a few more configuration points
    based on requirements, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plugins`: This is required as Karma will use these `npm` modules to perform.
    If we plan to use more `npm` modules, we will need to add them here; for example,
    if we plan to use PhantomJS as our browser, we will need to add `''karma-phantomjs-launcher''`
    in the list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`frameworks`: This doesn''t need to change for now, as by default it chooses
    Jasmine; however, it will need to be updated if we plan to use other frameworks,
    such as Mocha. In that case, the following option should be updated:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`browsers`: This is useful when we need to run the test in multiple browsers,
    and most of the time, we may need to run the test in PhantomJS, so we can add
    multiple browsers, as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So far, these are the basic changes we need in the `karma.con.js` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our `karma.conf.js` file and see what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Another important file that we added in the files list is `karma-test-shim.js`;
    and as we mentioned earlier, it's needed for us to use SystemJS (the module loader)
    with Karma. We have copied the file from the Angular quick start project and it's
    possible to change this based on the project structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our `karma.conf.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Testing the Karma runner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The initial set up of Karma is almost done; we will have to run our test and
    see how it''s coming along. One more step before we run--we have to add the `karma`
    task in the `npm` script to run via the `npm` command. For that, we will have
    to add a task, as `test`, in the script section of the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding this snippet, we can run the test via `npm`, with `npm test`,
    which works the same way as `karma start`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: So, finally, we are ready to run our test via Karma. However, oops, we are getting
    some error! It's missing the `jasmine-core` module that is needed to run the test;
    in fact, there could be more modules missing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output with the error looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the Karma runner](img/image_03_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Yes, we are indeed missing the modules and these are actually the development
    dependencies in our test suite. We will get to know a bit more about them in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Missing dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Though we are building a basic test suite for Angular, we are still missing
    a few required npm modules and these are the development dependencies for our
    test suite, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`jasmine-core`: This states that Jasmine is our test framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`karma`: This is the Karma test runner of our test suite'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`karma-chrome-launcher`: This is required to launch Chrome from Karma, as we
    defined Chrome as our browser in `karma.config`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`karma-jasmine`: This is the Karma adapter for Jasmine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As long as these are the dependencies, we should install these modules and include
    them in `package.json` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install all of these together, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully installing all the required dependencies, it seems like
     we are done with our configuration process, and we are ready to run `test` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The command output should state something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: That is it. Karma is now running for the first Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing with Angular and Karma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of this first test using Karma is to create a dynamic to-do list.
    This walk-through will follow the TDD steps we discussed in [Chapter 1](ch01.html
    "Chapter 1. Introduction to Test-Driven Development"), *Introduction to Test-Driven
    Development*: test first, make it run, and make it better. This will allow us
    to gain more experience in using TDD with an Angular application.'
  prefs: []
  type: TYPE_NORMAL
- en: A development to-do list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start the test, let's set our focus on what needs to be developed
    using a development to-do list. This will allow us to organize our thoughts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the to-do list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maintain a list of items**: The example list consists of test, execute, and
    refactor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add an item to the list**: The example list after we add the item is test,
    execute, refactor, and repeat'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove an item from the list**: The example list after we add and remove
    the item is test, execute, and refactor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing a list of items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first development item is to provide us with the ability to have a list
    of items on a component. The next couple of steps will walk us through the TDD
    process of adding the first feature using the TDD life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Test first
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Determining where to start is often the most difficult part. The best way is
    to remember the three **A**s (**Assemble**, **Act**, and **Assert**) and start
    with the base Jasmine template format. The code to do this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe`: This defines the main feature that we are testing. The string will
    explain the feature in readable terms, and then the function will follow the test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeEach`: This is the assemble step. The function defined in this step
    will be executed before every assert. It is best to put the required test setup
    before each test in this function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`it`: This is the act and assert step. In the `it` section, we will perform
    the action being tested, followed by some assertion. The act step doesn''t have
    to go into the `it` function. Depending on the test, it might be more suited in
    the `beforeEach` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The three As - Assemble, Act, and Assert
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the template is ready, we can start fitting in the pieces. We will
    again follow the three As mantra.
  prefs: []
  type: TYPE_NORMAL
- en: The following are the two parts of the assemble section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first part, we initialize the component and execute the contractor of
    the class using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Here, we imported some Angular testing APIs, such as `async` and `Testbed`.
    Here, `async` is used to load the required module to Bootstrap the application
    for the test suite, and `TestBed` is the primary API for writing a unit test for
    the Angular API. It has some service to create, compile, and initiate the components
    in the test suite.
  prefs: []
  type: TYPE_NORMAL
- en: We haven't defined the `AppComponent` component, but we will do this after we
    get a failing test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part talks about the `AppComponent` object. The `AppComponent` object
    will contain the list of items on its `this` variable. Add the following code
    to `beforeEach` to get the component object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In assert, there are two parts again:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first assertion is to ensure that the `AppComponent` object has an `items`
    variable defined with three items. The `items` variable will be used to hold the
    list of all the items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The second and third assertions will be used to confirm whether the data in
    the list is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: That's it; the first is test, the second is execute, and the third is refactor.
  prefs: []
  type: TYPE_NORMAL
- en: Make it run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step in the TDD life cycle is to make the application run and fix
    the code so that the tests pass. Remember, think about the smallest components
    that can be added to make the test pass by proceeding with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the Karma test by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we encounter the `TypeError: app_component_1.AppComponent is not a constructor`
    error, then it can be due to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding error message is saying that the `AppComponent` object hasn't
    been defined. Since the error message is telling us what is required, this is
    the perfect place to start.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the `AppComponent` class to the `app.component.ts` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `start` and `test` command again from the `npm` console. We should now
    see a new error. **Error:** `The expected undefined to be defined as follow`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new error message is again clear. We can also see that the code has now
    passed up to the point of our assertion at the following point:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'As there are no items in the object, we need to add one. Update the `app/app.component.ts`
    file as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Let's run the `start` and `test` commands again from the `npm` console. We should
    now see one of the three tests pass! This means that we have successfully used
    TDD and Karma to get our first test to pass. Now, we need to fix the other three.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next error is: `expected 0 to equal 3 `'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The error output again describes exactly what needs to happen. We just need
    to initialize the array with the elements test, execute, and run. Let''s go to
    `app/app.component.ts` and add the data to the array initialization:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `start` and `test` commands again from the npm console. Excellent!
    The output is in green and states that all the tests have passed. The result component
    and class code from this step are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the *Make it run* step is complete, we can move on to the next step
    and make it better.
  prefs: []
  type: TYPE_NORMAL
- en: Make it better
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Until this point, there was nothing required to directly refactor or that had
    been identified in the development to-do list. A review of the development to-do
    list shows that an item can be crossed out:'
  prefs: []
  type: TYPE_NORMAL
- en: '**View a list of to-do list items**: The example list consists of test, execute,
    and refactor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add an item to a to-do-list**: The example list after we add the item will
    consist of test, execute, refactor, and new item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next up is the requirement to add a new item to the list. The TDD rhythm will
    be followed again: test first, make it run, and make it better.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a function to the component class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next task is to give the class the ability to add items to the object. This
    will require the addition of a method to the object. This walk-through will follow
    the same TDD steps that we followed previously.
  prefs: []
  type: TYPE_NORMAL
- en: Test first
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of creating a new file and duplicating some of the assemble steps,
    the following test will be inserted under the last `it` method. The reason is
    that the same module and controller will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The three As - Assemble, Act, and Assert
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the template is ready, we can start filling in the gaps using the
    3 As mantra:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assemble**: There is no initialization or setup required as the component
    and object will be inherited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Act**: Here, we need to act on the `add` method with a new item. We place
    the `act` function into the `beforEach` function. This allows us to repeat the
    same step if/when more tests are added:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Assert**: Here, an item should be added to the list, and then you need to
    confirm that the last item in the array is as expected:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make it run
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step in the TDD life cycle is to make it run. Remember, think about
    the smallest components that can be added to make the test pass, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that Karma is running in our console by typing in the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first error will state `TypeError: undefined is not a function`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This error refers to the following line of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The error is telling us that the `add` method hasn''t been defined. The `add`
    function will need to be added to the `app/app.component.ts` code. The class has
    already been defined, so the `add` function needs to be placed in the class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note how the `add` function doesn't contain any logic. The smallest component
    has been added to get the test to satisfy the error message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review the console window for the next error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Success! All five tests have now passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting code added to get the tests to pass is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Make it better
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main thing that we need to refactor is that the `add` function still hasn't
    been fully implemented. It contains a hard coded value, and the minute we send
    in a different item into the `add` function, the test will fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep Karma running so that we can keep passing the tests as changes are made.
    The main issue with the current `add` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't accept any parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't push a parameter onto the list but uses a hardcoded value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resultant `add` function should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `start` and `test` commands again from the `npm` console. Confirm that
    the Karma output still displays `SUCCESS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Karma with Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous integration** (**CI**) is a development practice where developers
    need to integrate code into a shared repository. It is run in the automated build
    process with a test when any change happens in the codebase. This detects the
    error early, before it is pushed to production. There are lot of CI services around,
    including Travis CI, Jenkin CI, Circle CI, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how we can integrate Karma with Travis.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Travis CI is a popular hosted continuous integration platform that integrates
    with the GitHub project/repository to automatically run the test with every change
    in the code base of any branch or even with a pull request. It's easy to get the
    integration system just by putting a `.travis.yml` file in the project root with
    some configuration information about the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we may ask, why Travis? There are a few other CI services around. If we
    compare Travis to the other CI services, it has some benefits over the others:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a hosted service; there is no need to host, install, and configure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's free and open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a separate test code for every branch, so it is easy to run a test for
    an individual branch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Travis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we said, we will have a `.travis.yml` file in our project directory with
    some configuration and information about our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the basic configuration in the YAML file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Specify the language**: We have used Node.js here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Command or script**: This is required to run before or after each build;
    as shown here, this script will set the `git` username every time before running
    the build:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding example, we have passed the configuration to run the build
    process in a real browser (Firefox) with a virtual screen, by default, with karma.
    It has run the process in the PhantomJS headless browser. This might come in handy,
    as long as Travis supports the real browser beside PhantomJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '**Notifications**: This is required to set the notifications for e-mail and
    chat. Here, we have set `false` for `email`, as we do not want overtime e-mail
    notifications about the builds:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting up the test with Karma
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As seen earlier, we are guessing that we have the `package.json` file in our
    project root among the npm packages; if not, let''s create a `package.json` file
    over there and add these configuration snips. Here, the first one is a dependency
    of Karma and the second one is to set the required params for the `npm test`,
    as Travis will run this to trigger our test. These will tell Travis how to run
    our test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Our initial setup and configuration are ready for testing. We defined the Karma
    dependency, as Travis will run `nmp install` for every suite, and will take the
    necessary steps for adding Karma. And for running the test, it will call the `npm
    test`, and we defined how that test task will run the test. Here, we have set
    the default browser to PhantomJS so that the test will run with it. However, if
    we need to run the test with a different browser, we should define that in the
    `.travis.yml` file with the `before_script` command, as we showed earlier for
    Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: 'In that case, `npm test` will not run the test with the custom browser; for
    that, we have to do a custom call with the browser name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Self-test questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following self-test questions will help you further test your knowledge
    of using TDD with AngularJS and Karma:'
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. How do you use Karma to create a configuration file?
  prefs: []
  type: TYPE_NORMAL
- en: '`karma config`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`karma init`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`karma -config karma.conf.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. The Jasmine test method, named `before`, gets executed before every test.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. Bower is used to install Karma.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. The 3 As stand for which one of these?
  prefs: []
  type: TYPE_NORMAL
- en: A group of super heroes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assemble, Act, and Assert
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept, Approve, and Act
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how Karma became important. We saw how to install,
    configure, and run Karma. Finally, we walked through an Angular example project
    using Karma with TDD.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about end-to-end testing with Protractor.
  prefs: []
  type: TYPE_NORMAL
