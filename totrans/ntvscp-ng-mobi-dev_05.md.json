["```js\nimport { NgModule } from '@angular/core';\nimport { NativeScriptRouterModule } \n  from 'nativescript-angular/router';\nimport { Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/mixer/home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'mixer',\n    loadChildren: () => require('./modules/mixer/mixer.module')['MixerModule']\n  },\n  {\n    path: 'record',\n    loadChildren: () => require('./modules/recorder/recorder.module')['RecorderModule']\n  }\n];\n\n@NgModule({\n  imports: [\n    NativeScriptRouterModule.forRoot(routes)\n  ],\n  exports: [\n    NativeScriptRouterModule\n  ]\n})\nexport class AppRoutingModule { }\n```", "```js\nimport { NgModule, NgModuleFactoryLoader } from '@angular/core';\nimport { NativeScriptRouterModule, NSModuleFactoryLoader } from 'nativescript-angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/mixer/home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'mixer',\n    loadChildren: './modules/mixer/mixer.module#MixerModule'\n  },\n  {\n    path: 'record',\n    loadChildren: './modules/recorder/recorder.module#RecorderModule',\n    canLoad: [AuthGuard]\n  }\n];\n\n@NgModule({\n  imports: [\n    NativeScriptRouterModule.forRoot(routes)\n  ],\n  providers: [\n    AuthGuard,\n    {\n provide: NgModuleFactoryLoader,\n useClass: NSModuleFactoryLoader\n }\n  ],\n  exports: [\n    NativeScriptRouterModule\n  ]\n})\nexport class AppRoutingModule { }\n```", "```js\n<page-router-outlet></page-router-outlet>\n```", "```js\n// angular\nimport { NgModule } from '@angular/core';\n\n// app\nimport { CoreModule } from './modules/core/core.module';\nimport { AppRoutingModule } from './app.routing';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n imports: [\n   CoreModule,\n   AppRoutingModule\n ],\n declarations: [AppComponent],\n bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\n<ActionBar title=\"TNSStudio\" class=\"action-bar\"></ActionBar><GridLayout rows=\"*, 100\" columns=\"*\" class=\"page\">  \n  <track-list row=\"0\" col=\"0\"></track-list>  \n  <player-controls row=\"1\" col=\"0\"></player-controls></GridLayout>\n```", "```js\nimport { Component } from '@angular/core';\n\n@Component({ \n  moduleId: module.id, \n  selector: 'mixer', \n  templateUrl: 'mixer.component.html'\n})\nexport class MixerComponent {}\n```", "```js\n// angular\nimport { Component } from '@angular/core';\n\n@Component({\n moduleId: module.id,\n selector: 'mixer-base',\n template: `<router-outlet></router-outlet>`\n})\nexport class BaseComponent { }\n```", "```js\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { NativeScriptRouterModule } from \n  'nativescript-angular/router';\nimport { Routes } from '@angular/router';\n\nimport { PlayerModule } from '../player/player.module';\nimport { BaseComponent } from './components/base.component';\nimport { MixerComponent } from \n  './components/mixer.component';\n\nconst COMPONENTS: any[] = [\n  BaseComponent,\n  MixerComponent\n]\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BaseComponent,\n    children: [\n      {\n        path: 'home',\n        component: MixerComponent\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [\n    PlayerModule,\n    NativeScriptRouterModule.forChild(routes)\n  ],\n  declarations: [\n    ...COMPONENTS\n  ],\n  schemas: [\n    NO_ERRORS_SCHEMA\n  ]\n})\nexport class MixerModule { }\n```", "```js\n...\n{\n  path: '',\n  redirectTo: '/mixer/home',\n  pathMatch: 'full'\n},\n...\n```", "```js\nPage {\n  background-color:#101B2E;\n}\n```", "```js\n...\n@Injectable()\nexport class AuthService {\n   ...\n   constructor(\n     private databaseService: DatabaseService,\n     private logService: LogService\n   ) {\n     this._init();\n   } \n  ...\n  private _init() {\n    AuthService.CURRENT_USER = this.databaseService.getItem(\n      DatabaseService.KEYS.currentUser);\n    this.logService.debug(`Current user: `,\n AuthService.CURRENT_USER);\n    this._notifyState(!!AuthService.CURRENT_USER);\n  }\n  ...\n}\n```", "```js\n...\n@NgModule({\n  imports: [\n    CoreModule,\n    AppRoutingModule\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  schemas: [NO_ERRORS_SCHEMA]\n})\nexport class AppModule { }\n```", "```js\n...\n@NgModule({\n  imports: [\n    CoreModule\n  ],\n  providers: [...PROVIDERS],\n  declarations: [...COMPONENTS],\n  exports: [...COMPONENTS],\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class PlayerModule { }\n```", "```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module'; \n\n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\n\n// app\nimport { PIPES } from './pipes';\n\n@NgModule({\n  imports: [\n    NativeScriptModule\n  ],\n  declarations: [\n    ...PIPES\n  ],\n  exports: [\n    NativeScriptModule,\n    ...PIPES\n  ],\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class SharedModule {}\n```", "```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module'; \nimport { NativeScriptFormsModule } from 'nativescript-angular/forms'; \nimport {NativeScriptHttpModule } from 'nativescript-angular/http';\n// angular\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\n\n// app\nimport { PROVIDERS } from './services';\n\nconst MODULES: any[] = [\n  NativeScriptModule,\n  NativeScriptFormsModule,\n  NativeScriptHttpModule\n];\n\n@NgModule({\n  imports: [\n    ...MODULES\n  ],\n  providers: [\n    ...PROVIDERS\n  ],\n  exports: [\n    ...MODULES\n  ]\n})\nexport class CoreModule {\n  constructor (\n    @Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error(\n        'CoreModule is already loaded. Import it in the AppModule only');\n    }\n  }\n}\n```", "```js\n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\n\n// app\nimport { SharedModule } from '../shared/shared.module';\nimport { COMPONENTS } from './components';\nimport { PROVIDERS } from './services';\n\n@NgModule({\n  imports: [ SharedModule ],\n  providers: [ ...PROVIDERS ],\n  declarations: [ ...COMPONENTS ],\n  exports: [\n    SharedModule,\n    ...COMPONENTS\n  ],\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class PlayerModule { }\n```", "```js\n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\n\n// app\nimport { SharedModule } from '../shared/shared.module';\nimport { PROVIDERS } from './services';\n\n@NgModule({\n imports: [ SharedModule ],\n providers: [ ...PROVIDERS ],\n schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class RecorderModule { }\n```", "```js\n// angular\nimport { NgModule } from '@angular/core';\n\n// app\nimport { CoreModule } from './modules/core/core.module';\nimport { AppRoutingModule } from './app.routing';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    CoreModule,\n    AppRoutingModule\n  ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Route, CanActivate, CanLoad } from '@angular/router';\nimport { AuthService } from '../modules/core/services/auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanLoad {\n\n  constructor(private authService: AuthService) { }\n\n  canActivate(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (this._isAuth()) {\n        resolve(true);\n      } else {\n        // login sequence to continue prompting\n        let promptSequence = (usernameAttempt?: string) => {\n          this.authService.promptLogin(\n            'Authenticate to record.',\n            usernameAttempt\n          ).then(() => {\n            resolve(true); \n          }, (usernameAttempt) => {\n            if (usernameAttempt === false) {\n              // user canceled prompt\n              resolve(false);\n            } else {\n              // initiate sequence again\n              promptSequence(usernameAttempt);\n            }\n          });\n        };\n        // start login prompt sequence\n        // require auth before activating\n        promptSequence();\n      }\n    });\n  }\n\n  canLoad(route: Route): Promise<boolean> {\n    // reuse same logic to activate\n    return this.canActivate();\n  }\n\n  private _isAuth(): boolean {\n    // just get the latest value from our BehaviorSubject\n    return this.authService.authenticated$.getValue();\n  }\n}\n```", "```js\n...\nimport { AuthGuard } from './guards/auth-guard.service';\n\nconst routes: Routes = [\n  ...\n  {\n    path: 'record',\n    loadChildren: \n      './modules/recorder/recorder.module#RecorderModule',\n    canLoad: [AuthGuard]\n  }\n];\n\n@NgModule({\n  ...\n  providers: [\n    AuthGuard,\n    ...\n  ],\n  ...\n})\nexport class AppRoutingModule { }\n```", "```js\n// nativescript\nimport { NativeScriptModule } from 'nativescript-angular/nativescript.module';\nimport { NativeScriptRouterModule } from 'nativescript-angular/router';\n\n// angular\nimport { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { Routes } from '@angular/router';\n\n// app\nimport { SharedModule } from '../shared/shared.module';\nimport { PROVIDERS } from './services';\nimport { RecordComponent } from './components/record.component';\n\nconst COMPONENTS: any[] = [\n RecordComponent\n]\n\nconst routes: Routes = [\n {\n path: '',\n component: RecordComponent\n }\n];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    NativeScriptRouterModule.forChild(routes)\n  ],\n  declarations: [ ...COMPONENTS ],\n  providers: [ ...PROVIDERS ],\n  schemas: [ NO_ERRORS_SCHEMA ]\n})\nexport class RecorderModule { }\n```", "```js\n<ActionBar title=\"TNSStudio\" class=\"action-bar\">\n  <ActionItem nsRouterLink=\"/record\" ios.position=\"right\">\n <Button text=\"Record\" class=\"action-item\"></Button>\n </ActionItem>\n</ActionBar>\n<GridLayout rows=\"*, 100\" columns=\"*\" class=\"page\">\n  <track-list row=\"0\" col=\"0\"></track-list>\n  <player-controls row=\"1\" col=\"0\"></player-controls>\n</GridLayout>\n```", "```js\n@NgModule({\n  imports: [\n    PlayerModule,\n    NativeScriptRouterModule.forChild(routes)\n  ],\n  ...\n})\nexport class MixerModule { }\n```", "```js\n...\nimport { NativeScriptRouterModule } from 'nativescript-angular/router'; \n...\n\n@NgModule({\n  imports: [\n    NativeScriptModule, \n    NativeScriptRouterModule\n  ],\n  declarations: [\n    ...PIPES\n  ],\n  exports: [\n    NativeScriptModule,\n    NativeScriptRouterModule,\n    ...PIPES\n  ],\n  schemas: [NO_ERRORS_SCHEMA]\n})\nexport class SharedModule { }\n```", "```js\n...\nimport { SharedModule } from '../shared/shared.module'; \n@NgModule({\n  imports: [\n    PlayerModule,\n    SharedModule,\n    NativeScriptRouterModule.forChild(routes)\n  ],\n  ...\n})\nexport class MixerModule { }\n```", "```js\n<ActionBar title=\"Record\" class=\"action-bar\">\n  <NavigationButton text=\"Back\"\n    android.systemIcon=\"ic_menu_back\">\n  </NavigationButton>\n</ActionBar>\n<StackLayout class=\"p-20\">\n  <Label text=\"TODO: Record\" class=\"h1 text-center\"></Label>\n</StackLayout>\n```", "```js\n<ActionBar title=\"Record\" icon=\"\" class=\"action-bar\">\n  <NavigationButton (tap)=\"back()\" text=\"Back\" \n    android.systemIcon=\"ic_menu_back\">\n  </NavigationButton>\n</ActionBar>\n<StackLayout class=\"p-20\">\n  <Label text=\"TODO: Record\" class=\"h1 text-center\"></Label>\n</StackLayout>\n```", "```js\n// angular\nimport { Component } from '@angular/core';\nimport { RouterExtensions } from 'nativescript-angular/router';\n\n@Component({\n moduleId: module.id,\n selector: 'record',\n templateUrl: 'record.component.html'\n})\nexport class RecordComponent { \n\n  constructor(private router: RouterExtensions) { }\n\n  public back() {\n    this.router.back();\n  }\n}\n```", "```js\n...\nimport { MixListComponent } from './components/mix-list.component';\nimport { PROVIDERS } from './services';\n\nconst COMPONENTS: any[] = [\n  BaseComponent,\n  MixerComponent,\n  MixListComponent\n]\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BaseComponent,\n    children: [\n      {\n path: 'home',\n component: MixListComponent\n },\n {\n path: ':id',\n component: MixerComponent\n }\n    ]\n  }\n];\n\n@NgModule({\n   ...\n   providers: [\n ...PROVIDERS\n ]\n})\nexport class MixerModule { }\n```", "```js\n...\ninterface IKeys {\n  currentUser: string;\n  compositions: string;\n}\n\n@Injectable()\nexport class DatabaseService {\n\n  public static KEYS: IKeys = {\n    currentUser: 'current-user',\n    compositions: 'compositions'\n  };\n...\n```", "```js\nimport { ITrack } from './track.model';\n\nexport interface IComposition {\n  id: number;\n  name: string;\n  created: number;\n  tracks: Array<ITrack>;\n  order: number;\n}\nexport class CompositionModel implements IComposition {\n  public id: number;\n  public name: string;\n  public created: number;\n  public tracks: Array<ITrack> = [];\n  public order: number;\n\n  constructor(model?: any) {\n    if (model) {\n      for (let key in model) {\n        this[key] = model[key];\n      }\n    }\n    if (!this.created) this.created = Date.now();\n    // if not assigned, just assign a random id\n    if (!this.id)\n      this.id = Math.floor(Math.random() * 100000);\n  }\n}\n```", "```js\nexport * from './composition.model';\nexport * from './track.model';\n```", "```js\n// angular\nimport { Injectable } from '@angular/core';\n\n// app\nimport { ITrack, IComposition, CompositionModel } from '../../shared/models';\nimport { DatabaseService } from '../../core/services/database.service';\nimport { DialogService } from '../../core/services/dialog.service';\n\n@Injectable()\nexport class MixerService {\n\n  public list: Array<IComposition>;\n\n  constructor(\n    private databaseService: DatabaseService,\n    private dialogService: DialogService\n  ) {\n    // restore with saved compositions or demo list\n    this.list = this._savedCompositions() || \n      this._demoComposition();\n  } \n\n  public add() {\n    this.dialogService.prompt('Composition name:')\n      .then((value) => {\n        if (value.result) {\n          let composition = new CompositionModel({\n            id: this.list.length + 1,\n            name: value.text,\n            order: this.list.length // next one in line\n          });\n          this.list.push(composition);\n          // persist changes\n          this._saveList();\n        }\n      });\n  }\n\n  public edit(composition: IComposition) {\n    this.dialogService.prompt('Edit name:', composition.name)\n      .then((value) => {\n        if (value.result) {\n          for (let comp of this.list) {\n            if (comp.id === composition.id) {\n              comp.name = value.text;\n              break;\n            }\n          }\n          // re-assignment triggers view binding change\n          // only needed with default change detection\n          // when object prop changes in collection\n          // NOTE: we will use Observables in ngrx chapter\n          this.list = [...this.list];\n          // persist changes\n          this._saveList();\n        }\n      });\n  }\n\n  private _savedCompositions(): any {\n    return this.databaseService\n      .getItem(DatabaseService.KEYS.compositions);\n  }\n\n  private _saveList() {\n    this.databaseService\n      .setItem(DatabaseService.KEYS.compositions, this.list);\n  }\n\n  private _demoComposition(): Array<IComposition> {\n    // Starter composition to demo on first launch\n    return [\n      {\n        id: 1,\n        name: 'Demo',\n        created: Date.now(),\n        order: 0,\n        tracks: [\n          {\n            id: 1,\n            name: 'Guitar',\n            order: 0\n          },\n          {\n            id: 2,\n            name: 'Vocals',\n            order: 1\n          }\n        ]\n      }\n    ]\n  }\n}\n```", "```js\nimport { MixerService } from './mixer.service';\n\nexport const PROVIDERS: any[] = [\n  MixerService\n];\n\nexport * from './mixer.service';\n```", "```js\n// angular\nimport { Component } from '@angular/core';\n\n// app\nimport { MixerService } from '../services/mixer.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mix-list',\n  templateUrl: 'mix-list.component.html'\n})\nexport class MixListComponent {\n\n  constructor(public mixerService: MixerService) { } \n}\n```", "```js\n<ActionBar title=\"Compositions\" class=\"action-bar\">\n  <ActionItem (tap)=\"mixerService.add()\" \n    ios.position=\"right\">\n    <Button text=\"New\" class=\"action-item\"></Button>\n  </ActionItem>\n</ActionBar>\n<ListView [items]=\"mixerService.list | orderBy: 'order'\" \n  class=\"list-group\">\n  <ng-template let-composition=\"item\">\n    <GridLayout rows=\"auto\" columns=\"100,*,auto\" \n      class=\"list-group-item\">\n      <Button text=\"Edit\" row=\"0\" col=\"0\" \n        (tap)=\"mixerService.edit(composition)\"></Button>\n      <Label [text]=\"composition.name\"\n        [nsRouterLink]=\"['/mixer', composition.id]\"\n        class=\"h2\" row=\"0\" col=\"1\"></Label>\n      <Label [text]=\"composition.tracks.length\" \n        class=\"text-right\" row=\"0\" col=\"2\"></Label>\n    </GridLayout>\n  </ng-template>\n</ListView>\n```", "```js\n// angular\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs/Subscription';\n\n// app\nimport { MixerService } from '../services/mixer.service';\nimport { CompositionModel } from '../../shared/models';\n\n@Component({\n moduleId: module.id,\n selector: 'mixer',\n templateUrl: 'mixer.component.html'\n})\nexport class MixerComponent implements OnInit, OnDestroy {\n\n  public composition: CompositionModel; \n private _sub: Subscription;\n\n constructor(\n private route: ActivatedRoute,\n private mixerService: MixerService\n ) { } \n\n ngOnInit() {\n this._sub = this.route.params.subscribe(params => {\n for (let comp of this.mixerService.list) {\n if (comp.id === +params['id']) {\n this.composition = comp;\n break;\n }\n }\n });\n } \n\n ngOnDestroy() {\n this._sub.unsubscribe();\n }\n}\n```", "```js\n<ActionBar [title]=\"composition.name\" class=\"action-bar\">\n  <ActionItem nsRouterLink=\"/mixer/home\">\n <Button text=\"List\" class=\"action-item\"></Button>\n </ActionItem>\n  <ActionItem nsRouterLink=\"/record\" ios.position=\"right\">\n    <Button text=\"Record\" class=\"action-item\"></Button>\n  </ActionItem>\n</ActionBar>\n<GridLayout rows=\"*, 100\" columns=\"*\" class=\"page\">\n  <track-list [tracks]=\"composition.tracks\" row=\"0\" col=\"0\"></track-list>\n  <player-controls row=\"1\" col=\"0\"></player-controls>\n</GridLayout>\n```", "```js\n...\nexport class TrackListComponent {\n\n @Input() tracks: Array<ITrack>;\n\n ...\n}\n```", "```js\n<ListView [items]=\"tracks | orderBy: 'order'\" class=\"list-group\">\n  <template let-track=\"item\">\n    <GridLayout rows=\"auto\" columns=\"100,*,100\" class=\"list-group-item\">\n      <Button text=\"Record\" (tap)=\"record(track)\" row=\"0\" col=\"0\" class=\"c-ruby\"></Button>\n      <Label [text]=\"track.name\" row=\"0\" col=\"1\" class=\"h2\"></Label>\n      <Switch [checked]=\"track.solo\" row=\"0\" col=\"2\" class=\"switch\"></Switch>\n    </GridLayout>\n  </template>\n</ListView>\n```", "```js\n// angular\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  moduleId: module.id,\n  selector: 'action-bar',\n  templateUrl: 'action-bar.component.html'\n})\nexport class ActionBarComponent {\n\n  @Input() title: string;\n}\n```", "```js\n<ActionBar [title]=\"title\" class=\"action-bar\">\n  <ActionItem nsRouterLink=\"/mixer/home\">\n    <Button text=\"List\" class=\"action-item\"></Button>\n  </ActionItem>\n  <ActionItem nsRouterLink=\"/record\" ios.position=\"right\">\n    <Button text=\"Record\" class=\"action-item\"></Button>\n  </ActionItem>\n</ActionBar>\n```", "```js\n<ActionBar class=\"action-bar\">\n  <GridLayout rows=\"auto\" columns=\"auto,*,auto\" class=\"action-bar\">\n    <Button text=\"List\" nsRouterLink=\"/mixer/home\" class=\"action-item\" row=\"0\" col=\"0\"></Button>\n    <Label [text]=\"title\" class=\"action-bar-title text-center\" row=\"0\" col=\"1\"></Label>\n    <Button text=\"Record\" nsRouterLink=\"/record\" class=\"action-item\" row=\"0\" col=\"2\"></Button>\n  </GridLayout>\n</ActionBar>\n```", "```js\n<action-bar [title]=\"composition.name\"></action-bar>\n<GridLayout rows=\"*, 100\" columns=\"*\" class=\"page\">\n  <track-list [tracks]=\"composition.tracks\" row=\"0\" col=\"0\"></track-list>\n  <player-controls row=\"1\" col=\"0\"></player-controls>\n</GridLayout>\n```", "```js\n...\nimport { ActionBarComponent } from './components/action-bar/action-bar.component';\n...\n\nconst COMPONENTS: any[] = [\n  ActionBarComponent,\n  BaseComponent,\n  MixerComponent,\n  MixListComponent\n];\n...\n```"]