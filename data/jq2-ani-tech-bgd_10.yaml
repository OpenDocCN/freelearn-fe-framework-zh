- en: Chapter 10. Canvas Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章. 画布动画
- en: '*In the last chapter, we looked at one of the latest CSS3 features, the `transform`
    property, which enabled us to create animated rotations, skews, scales, and translates.
    In this chapter, we''re going to look at one of the new additions to HTML5—the
    `<canvas>` element.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一章中，我们看了最新的CSS3功能之一，`transform`属性，它使我们能够创建动画旋转、扭曲、缩放和转换。在本章中，我们将看一下HTML5的新添加——`<canvas>`元素。*'
- en: '*The best way to think of the `<canvas>` element is to treat it like the kind
    of canvas on which an artist would paint. We can draw simple lines or complex
    shapes using JavaScript API methods, and there is also support for images and
    text. The canvas is two-dimensional at this point, but may be extended to include
    3D support in the future.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*最好的方法是将`<canvas>`元素视为艺术家绘画的画布。我们可以使用JavaScript API方法绘制简单的线条或复杂的形状，并且还支持图像和文本。目前画布是二维的，但将来可能会扩展到包括3D支持。*'
- en: '*The `<canvas>` element, first proposed and used by Apple, has been implemented
    by most modern browsers, and is considered one of the most stable elements from
    the HTML5 specification.*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*`<canvas>`元素首先由苹果提出和使用，已被大多数现代浏览器实现，并被认为是HTML5规范中最稳定的元素之一。*'
- en: '*The best description of the `<canvas>` element I''ve seen states, "*A canvas
    is a rectangle in your page where you can use JavaScript to draw anything you
    want*, from [diveintohtml5.info](http://diveintohtml5.info)", which sums it up
    quite nicely I feel.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*我见过的关于`<canvas>`元素的最好描述是：“一个画布是你页面上的一个矩形，你可以用JavaScript来绘制任何你想要的东西”，来自[diveintohtml5.info](http://diveintohtml5.info)，我觉得这描述得很好。*'
- en: 'Subjects that we''ll look at in this chapter will include:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的主题包括：
- en: The HTMLCanvasElement interface
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTMLCanvasElement接口
- en: Drawing to the `<canvas>` element
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制到`<canvas>`元素
- en: Animating the `<canvas>` element
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画化`<canvas>`元素
- en: Using `<canvas>` with jQuery
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<canvas>`与jQuery
- en: Creating a `<canvas>` based game
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基于`<canvas>`的游戏
- en: Learning the HTMLCanvasElement interface
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习HTMLCanvasElement接口
- en: The HTMLCanvasElement interface exposes methods and properties allowing us to
    define and control the shapes that are drawn on the canvas. The HTMLCanvasElement
    interface can be broken down into distinct sections depending on what the methods
    do.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: HTMLCanvasElement接口公开了允许我们定义和控制在画布上绘制的形状的方法和属性。HTMLCanvasElement接口可以根据方法的作用被分解为不同的部分。
- en: Using the canvas element
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用canvas元素
- en: 'The `<canvas>` element itself has methods that can be called on it, including:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`<canvas>`元素本身有一些可以调用的方法，包括：'
- en: '| Method | Usage |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `getContext(a)` | Returns an object (a `CanvasRenderingContext2D` object
    to be precise) which can then have other methods from the API called on it to
    manipulate the `<canvas>` element. The argument specifies the type of context
    to retrieve. Only two-dimensional contexts are available at present. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `getContext(a)` | 返回一个对象（一个精确的`CanvasRenderingContext2D`对象），然后可以调用API的其他方法来操纵`<canvas>`元素。参数指定要检索的上下文类型。目前仅支持二维上下文。
    |'
- en: '| `toDataURL()` | Returns a data URL representing the image on the `<canvas>`
    element. Optional arguments include the type of image represented by the data
    URL (with the default being image/PNG), and any arguments specific to the type,
    such as the quality for image/JPG data URLs. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `toDataURL()` | 返回代表`<canvas>`元素上图像的数据URL。可选参数包括数据URL表示的图像类型（默认为image/PNG），以及特定于类型的任何参数，例如图像/JPG数据URL的质量。
    |'
- en: The `<canvas>` element can be thought of as being similar to an `<img>` element
    that doesn't have a `src` attribute. Allowed attributes include the `width` and
    `height` parameters of the element, along with an `id` and a `class` attributes,
    among others. There are no special attributes associated with the `<canvas>` element,
    although it can contain other elements. When the browser cannot display the `<canvas>`
    element, it can display the element's content as a fallback. The only properties
    of the `<canvas>` element we have access to, are the `width` and `height` parameters.
    Setting either of these properties causes the `<canvas>` element to reset its
    contents to nothing, which can be useful when we want to clear it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`<canvas>` 元素可以被视为类似于没有 `src` 属性的 `<img>` 元素。允许的属性包括元素的 `width` 和 `height`
    参数，以及 `id` 和 `class` 属性，等等。`<canvas>` 元素没有特殊的属性，尽管它可以包含其他元素。当浏览器无法显示 `<canvas>`
    元素时，它可以将元素的内容显示为备用内容。我们只能访问 `<canvas>` 元素的 `width` 和 `height` 参数。设置其中任何一个属性会导致
    `<canvas>` 元素将其内容重置为空，这在我们想要清除它时会很有用。'
- en: Understanding context methods
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解上下文方法
- en: 'There are two methods that relate directly to the context object returned by
    the `getContext()` method. These are:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个方法与由 `getContext()` 方法返回的上下文对象直接相关。它们是：
- en: '| Method | Usage |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `save()` | Saves the current state of the canvas; only transforms are saved,
    not shapes or paths. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `save()` | 保存画布的当前状态；只保存转换，不保存形状或路径。 |'
- en: '| `restore()` | Restores the saved state. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `restore()` | 恢复保存的状态。 |'
- en: 'We can also set a couple of global properties that apply to all shapes on the
    `<canvas>` element. These properties are:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以设置一些适用于 `<canvas>` 元素上所有形状的全局属性。这些属性包括：
- en: '| Property | Usage |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 用法 |'
- en: '| --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `globalAlpha` | Sets the alpha transparency of shapes. Takes a decimal value
    between 0.0 and 1.0. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `globalAlpha` | 设置形状的 alpha 透明度。取值范围为 0.0 到 1.0 的小数。 |'
- en: '| `globalCompositeOperation` | Sets how shapes stack up on top of one another.
    Can be used to create masks and clear areas of shapes. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `globalCompositeOperation` | 设置形状如何叠放在彼此之上。可以用来创建遮罩和清除形状的区域。'
- en: Native shapes
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地形状
- en: 'The `<canvas>` element has just one native shape defined: the rectangle. One
    important point to note here is that the `<canvas>` element does not have an internal
    DOM tree—shapes or paths we draw on the `<canvas>` element are not created as
    child elements of the `<canvas>` element and cannot be accessed with standard
    DOM manipulation methods. They are not individual objects, they are just pixels.
    Methods from the scripting API used specifically when working with rectangles
    include the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`<canvas>` 元素仅定义了一个本地形状：矩形。这里需要注意的一点是，`<canvas>` 元素没有内部的 DOM 树——在 `<canvas>`
    元素上绘制的形状或路径不会被创建为 `<canvas>` 元素的子元素，并且不能使用标准的 DOM 操作方法来访问它们。它们不是单独的对象，它们只是像素。与矩形相关的脚本
    API 方法包括：'
- en: '| Method | Usage |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `clearRect(a,` `b,` `c,` `d)` | Removes all shapes and paths from an area
    of the canvas. Arguments `a` and `b` specify the coordinates to begin clearing
    at and arguments `c` and `d` specify the width and height of the area to clear.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `clearRect(a,` `b,` `c,` `d)` | 从画布的某个区域移除所有形状和路径。参数 `a` 和 `b` 指定开始清除的坐标，参数
    `c` 和 `d` 指定要清除的区域的宽度和高度。'
- en: '| `fillRect(a,` `b,` `c,` `d)` | Draws a rectangle. Arguments `a` and `b` specify
    the coordinates to begin drawing at and arguments `c` and `d` specify the width
    and height of its sides. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `fillRect(a,` `b,` `c,` `d)` | 绘制矩形。参数 `a` 和 `b` 指定开始绘制的坐标，参数 `c` 和 `d` 指定其边的宽度和高度。'
- en: '| `strokeRect(a,` `b,` `c,` `d)` | Draws the outline of a rectangle. Arguments
    `a` and `b` represent the starting coordinates of the shape, and arguments `c`
    and `d` represent the width and height of its sides. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `strokeRect(a,` `b,` `c,` `d)` | 绘制矩形的轮廓。参数 `a` 和 `b` 表示形状的起始坐标，参数 `c` 和
    `d` 表示其边的宽度和高度。'
- en: 'We can set the color of strokes (outlines) or fills, as well as drop-shadows
    using the following properties:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下属性设置描边（轮廓）或填充的颜色，以及阴影：
- en: '| Property | Usage |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 用法 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `fillStyle` | Sets the color of the fill. Can be set to a CSS color or a
    gradient object. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `fillStyle` | 设置填充的颜色。可以设置为 CSS 颜色或渐变对象。 |'
- en: '| `shadowBlur` | Sets the amount of blur on the shadow. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `shadowBlur` | 设置阴影的模糊程度。|'
- en: '| `shadowColor` | Sets the color of the shadow. Can be set to a CSS color or
    a gradient object. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `shadowColor` | 设置阴影的颜色。可以设置为 CSS 颜色或梯度对象。 |'
- en: '| `shadowOffsetX` | Sets the relative position of the shadow along the x axis.
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `shadowOffsetX` | 设置阴影沿 x 轴的相对位置。 |'
- en: '| `shadowOffsetY` | Sets the relative position of the shadow along the y axis.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `shadowOffsetY` | 设置阴影沿 y 轴的相对位置。 |'
- en: '| `strokeStyle` | Sets the color of the stroke. Can be set to a CSS color or
    a gradient object. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `strokeStyle` | 设置描边的颜色。可以设置为 CSS 颜色或梯度对象。 |'
- en: These properties can be set on paths and text as well. They aren't limited strictly
    to the native shape.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性也可以设置在路径和文本上。它们不仅限于本地形状。
- en: Drawing using a path
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用路径进行绘制
- en: 'Any shape other than a rectangle must be drawn using a path. This gives us
    a flexible way of drawing custom and complex shapes. Some of the methods used
    for creating paths include:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了矩形之外的任何形状都必须使用路径来绘制。这为我们提供了绘制自定义和复杂形状的灵活方式。创建路径的一些方法包括：
- en: '| Method | Usage |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `arc(a, b, c, d, e, f)` | Draws a circular subpath. Arguments `a` and `b`
    are the starting coordinates of the subpath, `c` is the radius, `d` is the starting
    angle in radians, and `e` is the ending angle in radians. The last parameter `f`
    accepts a Boolean indicating whether the subpath should be drawn anticlockwise
    or not. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `arc(a, b, c, d, e, f)` | 绘制圆形子路径。参数 `a` 和 `b` 是子路径的起始坐标，`c` 是半径，`d` 是以弧度表示的起始角度，`e`
    是以弧度表示的结束角度。最后一个参数 `f` 接受一个布尔值，表示是否逆时针绘制子路径。 |'
- en: '| `arcTo(a, b, c, d, e)` | Draws a circular subpath to a specified point. Arguments
    `a` and `b` are the starting coordinates, `c` and `d` are the ending coordinates.
    Argument `e` is the radius. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `arcTo(a, b, c, d, e)` | 绘制到指定点的圆形子路径。参数 `a` 和 `b` 是起始坐标，`c` 和 `d` 是结束坐标。参数
    `e` 是半径。 |'
- en: '| `beginPath()` | Starts a new path. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `beginPath()` | 开始新路径。 |'
- en: '| `bezierCurveTo(a, b, c, d, e, f)` | Draws a subpath along a Bezier curve,
    which is a curve featuring two control points. Arguments `a`, `b`, `c`, and `d`
    represent the coordinates of the two control points and arguments `e` and `f`
    represent the end coordinates of the subpath. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `bezierCurveTo(a, b, c, d, e, f)` | 沿贝塞尔曲线绘制子路径，贝塞尔曲线具有两个控制点。参数 `a`、`b`、`c`
    和 `d` 表示两个控制点的坐标，参数 `e` 和 `f` 表示子路径的结束坐标。 |'
- en: '| `closePath()` | Closes the path by drawing a line from the current position
    to the starting position of the first subpath in the current path list. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `closePath()` | 通过从当前位置到当前路径列表中第一个子路径的起始位置绘制一条线来关闭路径。 |'
- en: '| `fill()` | Colors the shape created by the current path. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `fill()` | 给当前路径创建的形状上色。 |'
- en: '| `lineTo(a, b)` | Creates a new subpath from the current location to the coordinates
    specified as arguments. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `lineTo(a, b)` | 从当前位置创建到指定坐标的新子路径。 |'
- en: '| `moveTo(a, b)` | Moves to the coordinates specified by the arguments without
    drawing a new subpath. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `moveTo(a, b)` | 移动到由参数指定的坐标，而不绘制新的子路径。 |'
- en: '| `quadraticCurveTo(a, b, c, d)` | Draws a subpath along a quadratic curve,
    which is a curve with a single control point. Arguments `a` and `b` represent
    the coordinates of the control point, while arguments `c` and `d` represent the
    end coordinates of the subpath. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `quadraticCurveTo(a, b, c, d)` | 沿二次曲线绘制子路径，二次曲线具有一个控制点。参数 `a` 和 `b` 表示控制点的坐标，而参数
    `c` 和 `d` 表示子路径的结束坐标。 |'
- en: '| `stroke()` | Colors the outline of the current path list. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `stroke()` | 给当前路径列表的轮廓上色。 |'
- en: 'Paths have several properties that can be set including the style, the line,
    or cap, or how paths are joined:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 路径具有可以设置的几个属性，包括样式、线条或端点以及路径如何连接：
- en: '| Property | Usage |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 用法 |'
- en: '| --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `lineCap` | Can be set to either butt (the default), round, or square. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `lineCap` | 可以设置为 `butt`（默认）、`round` 或 `square`。 |'
- en: '| `lineJoin` | Can be set to either miter (the default), round, or bevel. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `lineJoin` | 可以设置为 `miter`（默认）、`round` 或 `bevel`。 |'
- en: '| `lineWidth` | A decimal specifying the width of the path. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `lineWidth` | 指定路径的宽度的小数。 |'
- en: '| `miterLimit` | Determines the length between the inner point where two paths
    connect and the outer point before the join is mitered. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `miterLimit` | 确定两个路径连接的内点与连接斜接前的外点之间的长度。 |'
- en: Drawing images and patterns
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制图像和图案
- en: 'The canvas allows us to draw images to the canvas in the same way that we might
    assign a background image to another element. We can also draw patterns based
    on images or gradients. This category of methods includes:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 画布允许我们以与为其他元素分配背景图像的方式将图像绘制到画布上。我们还可以基于图像或渐变绘制图案。这类方法包括：
- en: '| Method | Usage |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `drawImage(a,` `b,` `c)` | Draws an image on the `<canvas>` element. Argument
    `a` is the image to be drawn and arguments `b` and `c` are the coordinates to
    place the top-left point of the image. Note that other variants of this method
    exist which allow different combinations of arguments allowing images to be scaled
    and sliced. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `drawImage(a,` `b,` `c)` | 在`<canvas>`元素上绘制图像。参数`a`是要绘制的图像，参数`b`和`c`是放置图像左上点的坐标。请注意，该方法存在其他变体，允许以不同的参数组合放置、缩放和切片图像。
    |'
- en: '| `createPattern(a,` `b)` | Draws a repeated pattern on the `<canvas>` element.
    Argument `a` is the image to be used as the pattern and `b` is the type of repeat.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `createPattern(a,` `b)` | 在`<canvas>`元素上绘制重复的图案。参数`a`是要用作图案的图像，`b`是重复的类型。
    |'
- en: '| `createLinearGradient(a,` `b,` `c,` `d)` | Creates a linear gradient between
    two points. Arguments `a` and `b` are the start coordinates of the gradient and
    `c` and `d` are the end coordinates. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `createLinearGradient(a,` `b,` `c,` `d)` | 在两个点之间创建线性渐变。参数`a`和`b`是渐变的起始坐标，`c`和`d`是结束坐标。
    |'
- en: '| `createRadialGradient(a,` `b,` `c,` `d,` `e,` `f)` | Creates a radial gradient
    between two circles. Arguments `a` and `b` are the start coordinates, and `c`
    is the radius of the first circle. Arguments `d` and `e` are the start coordinates
    of the second circle, and `f` is its radius. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `createRadialGradient(a,` `b,` `c,` `d,` `e,` `f)` | 在两个圆之间创建径向渐变。参数`a`和`b`是起始坐标，`c`是第一个圆的半径。参数`d`和`e`是第二个圆的起始坐标，`f`是它的半径。
    |'
- en: '| `addColorStop(a,` `b)` | Adds color to a gradient. The first argument is
    a decimal between 0.0 and 1.0 and is the relative position within the gradient
    to add the color. The second argument is the color to use. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `addColorStop(a,` `b)` | 为渐变添加颜色。第一个参数是介于0.0和1.0之间的十进制数，表示要添加颜色的渐变内的相对位置。第二个参数是要使用的颜色。
    |'
- en: The `drawImage()` and `createPattern()` methods are very similar; in that they
    are both used to draw an image on the `<canvas>` element. The difference is that
    the pattern is repeated. The gradient methods return a gradient object which can
    then be used as the fill or stroke style for a shape.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawImage()`和`createPattern()`方法非常相似；它们都用于在`<canvas>`元素上绘制图像。不同之处在于图案是重复的。渐变方法返回一个渐变对象，然后可以将其用作形状的填充或描边样式。'
- en: Text strings
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本字符串
- en: 'Text strings can be written to the canvas, but there is little styling we can
    perform on them as there is no associated box model with the text; so that means,
    no padding, margins, or borders. However, we can set the font and alignment, along
    with the fill color or stroke color using other properties. These methods include:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将文本字符串写入画布，但我们无法对其进行太多的样式设置，因为文本没有关联的盒模型；这意味着没有填充、边距或边框。但是，我们可以使用其他属性设置字体和对齐方式，以及填充颜色或描边颜色。这些方法包括：
- en: '| Method | Usage |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `fillText(a,` `b,` `c)` | Creates solid text strings on the `<canvas>` element.
    The first argument, `a`, is the text to write and arguments `b` and `c` are the
    start coordinates of the text. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `fillText(a,` `b,` `c)` | 在`<canvas>`元素上创建实心文本字符串。第一个参数`a`是要写入的文本，参数`b`和`c`是文本的起始坐标。
    |'
- en: '| `measureText(a)` | Measures the specified text string and returns a metrics
    object with a width property. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `measureText(a)` | 测量指定的文本字符串，并返回一个具有宽度属性的度量对象。 |'
- en: '| `stroketext(a,` `b,` `c)` | Creates outline text strings on the `<canvas>`
    element. The first argument is the text to write and arguments `b` and `c` are
    the start coordinates of the text. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `stroketext(a,` `b,` `c)` | 在`<canvas>`元素上创建轮廓文本字符串。第一个参数是要写入的文本，参数`b`和`c`是文本的起始坐标。
    |'
- en: 'The properties we can set on text include:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设置文本的属性包括：
- en: '| Property | Usage |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 用法 |'
- en: '| --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `font` | Sets the size and the font-family of the text. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `font` | 设置文本的大小和字体系列。 |'
- en: '| `textAlign` | Sets the alignment of the text. Can be either `start` (the
    default), `end`, `left`, `right`, or `center`. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `textAlign` | 设置文本的对齐方式。可以是`start`（默认值）、`end`、`left`、`right`或`center`。 |'
- en: '| `textBaseline` | Sets the baseline of the text. Can be either `alphabetic`
    (the default), `top`, `hanging`, `middle`, `ideographic`, or `bottom`. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `textBaseline` | 设置文本的基线。可以是`alphabetic`（默认值）、`top`、`hanging`、`middle`、`ideographic`或`bottom`。
    |'
- en: Applying transformation methods
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用变换方法
- en: 'The `<canvas>` element can have the same transforms applied to it that we saw
    in the last chapter, which can be applied using the following methods:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`<canvas>`元素可以应用与上一章中看到的相同的变换，可以使用以下方法应用：'
- en: '| Method | Usage |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `rotate(a)` | Rotates a shape by the specified number of radians. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `rotate(a)` | 将形状旋转指定的弧度数。 |'
- en: '| `scale(a,` `b)` | Scales a shape along each axis by the specified amount,
    with `a` being the x axis and `b` the y axis. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `scale(a,` `b)` | 按指定量沿每个轴缩放形状，其中`a`为x轴，`b`为y轴。 |'
- en: '| `translate(a,` `b)` | Translates the shape along each axis by the specified
    amount, with `a` being the x axis and `b` the y axis. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `translate(a,` `b)` | 沿每个轴按指定量平移形状，其中`a`为x轴，`b`为y轴。 |'
- en: '| `transform(a,` `b,` `c,` `d,` `e,` `f)` | The `transform()` method is equivalent
    to the matrix transform form function and can be used in the same way to scale,
    translate, and/or skew the shape. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `transform(a,` `b,` `c,` `d,` `e,` `f)` | `transform()`方法等效于矩阵变换函数形式，可以用相同的方式来缩放、平移和/或倾斜形状。
    |'
- en: '| `setTransform(a, b, c, d, e, f)` | Resets the current transform to the identify
    matrix, and then invokes the `transform()` method using the same arguments. This
    essentially undoes the current transformation, and then sets the specified transform,
    all in one step. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `setTransform(a, b, c, d, e, f)` | 将当前变换重置为标识矩阵，然后使用相同的参数调用`transform()`方法。这本质上是撤消当前变换，然后一次性设置指定的变换。
    |'
- en: Pixel manipulation
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 像素处理
- en: 'The `<canvas>` element even allows us to work directly with the pixels in the
    canvas and can retrieve shapes as `imageData` objects, or create shapes directly
    by manipulating the `<canvas>` element at pixel-level. We have the following methods
    for manipulating pixels:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`<canvas>`元素甚至允许我们直接处理画布中的像素，并且可以将形状检索为`imageData`对象，或者通过在像素级别操作`<canvas>`元素来直接创建形状。我们有以下用于操作像素的方法：'
- en: '| Method | Usage |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 用法 |'
- en: '| --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `createImageData(a,` `b)` | Creates a new, blank `imageData` object using
    the supplied arguments as width and height properties. This method can also be
    passed to another `imageData` object, which will cause the method to return an
    (empty) `imageData` object the same width and height as the original. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `createImageData(a,` `b)` | 使用提供的参数作为宽度和高度属性创建一个新的空白`imageData`对象。此方法还可以传递给另一个`imageData`对象，这将导致该方法返回一个与原始对象相同宽度和高度的（空白的）`imageData`对象。
    |'
- en: '| `getImageData(a,` `b,` `c,` `d)` | Returns an `imageData` object containing
    the pixel data for the specified area of the `<canvas>` element. Arguments `a`
    and `b` are the start coordinates of the area, and arguments `c` and `d` are the
    width and height. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `getImageData(a,` `b,` `c,` `d)` | 返回一个包含`<canvas>`元素指定区域的像素数据的`imageData`对象。参数`a`和`b`是区域的起始坐标，参数`c`和`d`是宽度和高度。
    |'
- en: '| `putImageData(a,` `b,` `c)` | Paints the pixel data to the `<canvas>` element.
    The first argument is the `imageData` object to use, the second and third are
    the start coordinates of the resulting shape. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `putImageData(a,` `b,` `c)` | 将像素数据绘制到`<canvas>`元素。第一个参数是要使用的`imageData`对象，第二个和第三个是结果形状的起始坐标。
    |'
- en: 'All `imageData` objects, either those we get from the `<canvas>` element, or
    those we create with the `createImageDate()` method have several properties we
    can make use of, including:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有`imageData`对象，无论是我们从`<canvas>`元素获取的对象，还是我们使用`createImageDate()`方法创建的对象，都有几个属性可供我们使用，包括：
- en: '| Property | Usage |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 用法 |'
- en: '| --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `data` | This property is a `CanvasPixelArray`, and is read-only when we
    get an `imageData` object from the `<canvas>` element. We can also use it to set
    the pixel data in an `imageData` object we create. The array contains four items
    per-pixel: the `r`, `g`, and `b` values for the pixel, and the alpha. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 此属性是`CanvasPixelArray`，当我们从`<canvas>`元素获取`imageData`对象时为只读。我们还可以使用它来设置我们创建的`imageData`对象中的像素数据。数组每个像素包含四个项：像素的`r`、`g`和`b`值以及alpha值。
    |'
- en: '| `height` | The height of the image is represented by the `imageData` object.
    This property is read-only. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `height` | 图像的高度由`imageData`对象表示。此属性为只读。 |'
- en: '| `width` | The width of the image is represented by the `imageData` object.
    This property is read-only. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `width` | 图像的宽度由`imageData`对象表示。此属性为只读。 |'
- en: Drawing to the canvas
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制到画布上
- en: Drawing to the `<canvas>` element programmatically is very straightforward in
    theory. The methods and properties are easy to use, and are quite consistent between
    supporting browsers. Direct pixel manipulation is the trickiest part of the API
    to master, but other than that there is nothing really complicated.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以编程方式绘制到 `<canvas>` 元素在理论上非常简单。方法和属性易于使用，在支持的浏览器之间相当一致。直接像素操作是掌握的 API 中最棘手的部分，但除此之外没有什么真正复杂的。
- en: One thing we do find is that our code can very quickly mount up. As soon as
    we're drawing multiple complex shapes, and setting various properties, our code
    can easily run to a few hundred lines or more even for relatively simple drawings.
    This is especially true when animating the contents of the `<canvas>` element.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现的一件事是我们的代码很快就会堆积起来。一旦我们绘制多个复杂形状，并设置各种属性，即使对于相对简单的绘图，我们的代码很容易就会达到几百行甚至更多。这在动画
    `<canvas>` 元素的内容时尤为明显。
- en: Time for action – drawing to the canvas
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间 - 绘制到画布上
- en: Let's take a look at a quick example of drawing a non-animated shape. We don't
    even need jQuery for this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个快速绘制非动画形状的示例。我们甚至不需要 jQuery。
- en: 'Add the `<canvas>` element to the `<body>` tag of our template file:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `<canvas>` 元素添加到我们模板文件的 `<body>` 标签中：
- en: '```js'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <canvas id="c" width="500" height="300">
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <canvas id="c" width="500" height="300">
- en: <p>Your browser doesn't support the canvas element!</p>
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>您的浏览器不支持画布元素！</p>
- en: </canvas>
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </canvas>
- en: '```'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Next we can add the JavaScript that will draw to the `<canvas>` elements. We''ll
    draw a Union Jack flag. Function in the `<script>` element at the bottom of the
    template file and add the following code in its place:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以添加 JavaScript 来绘制 `<canvas>` 元素。我们将绘制一个联合国旗。在模板文件底部的 `<script>` 元素中的函数中添加以下代码，并将其替换为以下代码：
- en: '```js'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: var canvas = document.getElementById("c"),
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var canvas = document.getElementById("c"),
- en: context = canvas.getContext("2d");
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context = canvas.getContext("2d");
- en: context.fillStyle = "#039";
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillStyle = "#039";
- en: context.fillRect(50, 50, 400, 200);
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillRect(50, 50, 400, 200);
- en: context.beginPath();
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.strokeStyle = "#fff";
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.strokeStyle = "#fff";
- en: context.lineWidth = 50;
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineWidth = 50;
- en: context.moveTo(250, 50);
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(250, 50);
- en: context.lineTo(250, 250);
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(250, 250);
- en: context.moveTo(50, 150);
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(50, 150);
- en: context.lineTo(450, 150);
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(450, 150);
- en: context.moveTo(50, 50);
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(50, 50);
- en: context.lineTo(450, 250);
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(450, 250);
- en: context.moveTo(50, 250);
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(50, 250);
- en: context.lineTo(450, 50);
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(450, 50);
- en: context.stroke();
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.stroke();
- en: context.closePath();
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: context.strokeStyle = "#C00";
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.strokeStyle = "#C00";
- en: context.lineWidth = 30;
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineWidth = 30;
- en: context.beginPath();
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(250, 50);
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(250, 50);
- en: context.lineTo(250, 250);
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(250, 250);
- en: context.moveTo(50, 150);
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(50, 150);
- en: context.lineTo(450, 150);
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(450, 150);
- en: context.stroke();
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.stroke();
- en: context.closePath();
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: context.lineWidth = 1;
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineWidth = 1;
- en: context.fillStyle = "#C00";
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillStyle = "#C00";
- en: context.beginPath();
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(50, 50);
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(50, 50);
- en: context.lineTo(195, 125);
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(195, 125);
- en: context.lineTo(165, 125);
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(165, 125);
- en: context.lineTo(50, 66);
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(50, 66);
- en: context.fill();
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fill();
- en: context.closePath();
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: context.beginPath();
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(450, 50);
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(450, 50);
- en: context.lineTo(305, 125);
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(305, 125);
- en: context.lineTo(275, 125);
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(275, 125);
- en: context.lineTo(422, 50);
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(422, 50);
- en: context.lineTo(450, 50);
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(450, 50);
- en: context.fill();
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fill();
- en: context.closePath();
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: context.beginPath();
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(450, 250);
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(450, 250);
- en: context.lineTo(310, 175);
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(310, 175);
- en: context.lineTo(335, 175);
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(335, 175);
- en: context.lineTo(450, 235);
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(450, 235);
- en: context.lineTo(450, 250);
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(450, 250);
- en: context.fill();
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fill();
- en: context.closePath();
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: context.beginPath();
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(50, 250);
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(50, 250);
- en: context.lineTo(200, 175);
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(200, 175);
- en: context.lineTo(225, 175);
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(225, 175);
- en: context.lineTo(80, 250);
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(80, 250);
- en: context.lineTo(50, 250);
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(50, 250);
- en: context.fill();
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fill();
- en: context.closePath();
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: '```'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save the file as `canvas.html`.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为 `canvas.html`。
- en: If we run the page now in any modern browser, we should see something like the
    following screenshot:![Time for action – drawing to the canvas](img/9642OS_10_01.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在在任何现代浏览器中运行页面，应该会看到类似以下截图的内容：![动作时间 - 绘制到画布上](img/9642OS_10_01.jpg)
- en: In the previous screenshot, we can see the simple arrangement of geometric shapes
    that make up the British flag (note that the flag is not completely to the scale).
    Images like this are easy to produce using the `<canvas>` element but even simple
    shapes can require a lot of code.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到组成英国国旗的简单几何形状的简单排列（注意国旗并非完全按比例缩放）。像这样的图像使用`<canvas>`元素很容易生成，但是即使简单的形状也可能需要大量的代码。
- en: '*What just happened?*'
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The first thing we do is get the `<canvas>` element using the JavaScript's `getElementById()`
    method, and then get the two-dimensional context object from the `<canvas>` element
    with the `getContext()` method. We can now interact with the `<canvas>` element
    via the context object.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用JavaScript的`getElementById()`方法获取`<canvas>`元素，然后使用`getContext()`方法从`<canvas>`元素获取二维上下文对象。现在我们可以通过上下文对象与`<canvas>`元素交互了。
- en: We set some of the color for the context using the `fillStyle` property, and
    then draw a solid rectangle using the `fillRect()` method. The arguments specified
    are the starting x and y locations of the rectangle, and the width and height.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`fillStyle`属性设置一些上下文的颜色，然后使用`fillRect()`方法绘制一个实心矩形。指定的参数是矩形的起始x和y位置，以及宽度和高度。
- en: The filled rectangle picks up the fill style that we have just set, which is
    deep blue, and will form the background of the flag. We now need to create a white
    horizontal and diagonal cross on top of the blue background. We can do this by
    drawing two thick lines across the middle of the flag, one vertical and one horizontal.
    We'll use paths for this, so we start a new path using the `beginPath()` method.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 填充的矩形采用我们刚刚设置的填充样式，即深蓝色，并将形成国旗的背景。现在我们需要在蓝色背景上创建一个白色的水平和对角十字。我们可以通过在国旗中间绘制两条粗线条，一条垂直，一条水平来实现这一点。我们将使用路径进行此操作，因此我们使用`beginPath()`方法开始一个新路径。
- en: Next, we set the color of the stroke to white using the `strokeStyle` property,
    and the width of the path using the `lineWidth` property. To draw a path we have
    to tell the `<canvas>` element (or the context object actually) where to start
    the path, which we do using the `moveTo()` method, specifying the coordinates
    to move to as arguments (the top middle of the rectangle).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`strokeStyle`属性将描边颜色设置为白色，并使用`lineWidth`属性设置路径的宽度。要绘制路径，我们必须告诉`<canvas>`元素（或者实际上是上下文对象）从哪里开始路径，我们使用`moveTo()`方法，将要移动到的坐标作为参数指定（矩形的顶部中间）。
- en: To make the path, we then use the `lineTo()` method and specify the coordinates
    of where to end the path (the bottom-middle of the rectangle). This gives us the
    vertical line. To make the horizontal path, we repeat the same process, moving
    to the left-middle of the rectangle and drawing to the right-middle.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成路径，我们然后使用`lineTo()`方法并指定路径的结束坐标（矩形的底部中间）。这给我们了垂直线。要生成水平路径，我们重复相同的过程，移动到矩形的左中部并绘制到右中部。
- en: Coordinates specified using the `moveTo()` method are always relative to the
    canvas itself with `0,` `0` representing the top-left corner of the canvas. This
    is the same for the `lineTo()` method as well, even though the line that is drawn
    begins at the point specified by the last call of `moveTo()`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`moveTo()`方法指定的坐标始终相对于画布本身，其中`0,` `0`代表画布的左上角。即使对于`lineTo()`方法也是如此，尽管所绘制的线条始于上一次调用`moveTo()`指定的点。
- en: Next, we need to make a diagonal white cross over the background rectangle and
    the vertical cross, which we'll do by drawing paths in the same way as before
    using the combinations of `moveTo()` and `lineTo()` methods.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在背景矩形和垂直十字上绘制一个对角的白色十字，我们将使用相同的方法绘制路径，使用`moveTo()`和`lineTo()`方法的组合。
- en: All of the paths we've added so far are part of the same path—they are subpaths,
    and at this point, they aren't actually visible. To make them visible, we need
    to either fill or stroke them, so we stroke them with the `stroke()` method and
    then close the path with the `closePath()` method.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们添加的所有路径都是同一路径的一部分——它们是子路径，并且此时它们实际上是不可见的。为了使它们可见，我们需要填充或描边它们，因此我们使用`stroke()`方法描边它们，然后使用`closePath()`方法关闭路径。
- en: For the next part of the flag, we need to draw a slightly thinner red cross
    over the white cross. We'll use another path for this. We set the new color style
    and width, and draw a new path across the center of the rectangle vertically and
    horizontally again.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于国旗的下一部分，我们需要在白色十字上绘制一个略细的红色十字。我们将使用另一个路径来实现这一点。我们设置新的颜色样式和宽度，并再次在矩形中心绘制新的路径，垂直和水平方向。
- en: To complete the flag, we need to add four more shapes to make the diagonal parts
    of the red cross. We can't use straight-line paths for these because they don't
    intersect, and they are all positioned slightly differently. This means that we
    have to draw them manually as custom shapes and fill them.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成国旗，我们需要添加四个形状来制作红色十字架的对角部分。对于这些部分，我们不能使用直线路径，因为它们不相交，而且它们的位置略有不同。这意味着我们必须手动绘制它们作为自定义形状并对其进行填充。
- en: These four shapes actually make up the majority of the code, but we're basically
    doing very similar things as before. Each shape is made by drawing subpaths and
    filling them. We use a new path for each shape to preserve the anti-aliasing of
    the lines. If we used one big path for all four shapes, the edges of the shapes
    would be jagged.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个形状实际上构成了大部分代码，但我们基本上在做与以前非常相似的事情。每个形状都是通过绘制子路径并填充它们来制作的。我们为每种形状使用新路径以保留线条的抗锯齿效果。如果我们为所有四个形状使用一个大路径，形状的边缘会变得锯齿状。
- en: Pop quiz – drawing to the canvas
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验——绘制到画布上
- en: Q1\. What arguments are required for the `fillRect()` method?
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. `fillRect()`方法需要什么参数？
- en: The x and y location of the rectangle
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矩形的x和y位置
- en: The width and height of the rectangle
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矩形的宽度和高度
- en: The x and y location of the rectangle, its width and height, and its color
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矩形的x和y位置，宽度和高度以及颜色
- en: The x and y location of the rectangle, and its width and height
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矩形的x和y位置，以及宽度和高度
- en: Q2\. What method is required to make a path visible?
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 使路径可见需要哪个方法？
- en: '`strokeStyle` and `lineWidth`'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`strokeStyle`和`lineWidth`'
- en: '`moveTo()` and `lineTo()`'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`moveTo()`和`lineTo()`'
- en: '`stroke()` or `fill()`'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stroke()`或`fill()`'
- en: '`closePath()`'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`closePath()`'
- en: Have a go hero – creating the flag of your nation
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄——创建你的国旗
- en: If you're not from the UK, have a go at drawing the flag of your own nation
    on the canvas. We can create compositions of repeated shapes using standard JavaScript
    for loops, so use this to your advantage in keeping the code required for your
    flag as minimal as possible. If you are from the UK, try recreating a favorite
    logo or icon.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是来自英国，可以尝试在画布上绘制你自己国家的国旗。我们可以使用标准JavaScript for循环创建重复形状的组合，所以尽可能充分利用它，以使你的国旗所需的代码尽可能少。如果你来自英国，可以尝试重新创建一个喜爱的标志或图标。
- en: If part of your flag (or logo) is extremely complex, remember that we can draw
    images to the `<canvas>` element as well as lines and shapes, so feel free to
    draw out the basic part of your flag using the `<canvas>` element drawing methods,
    and then use an image for the complex part.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的国旗（或logo）的某一部分非常复杂，记住我们可以将图像绘制到`<canvas>`元素以外，还可以使用线条和形状，所以可以随意使用`<canvas>`元素的绘制方法绘制国旗的基本部分，然后对于复杂的部分使用图像。
- en: Animating the canvas
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 画布动画
- en: The `<canvas>` methods we've looked at so far are easy to use and nothing, if
    not a little, repetitive. Animating the objects on the `<canvas>` element is where
    things start to get interesting. Animating is harder than simply drawing on the
    `<canvas>` and as we have no real way of debugging it other than trial and error,
    solving bugs can quickly become problematic and somewhat time-consuming.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所看到的`<canvas>`方法很容易使用，它们无非就是有点重复。在`<canvas>`元素上对对象进行动画处理才是开始变得有趣的地方。动画比简单绘制在`<canvas>`上要复杂，而且因为我们除了试错之外没有真正的调试方法，解决bug可能很快变得棘手和耗时。
- en: In our flag example, there was no real benefit to using the `<canvas>` element.
    We could have got exactly the same effect, with much less code and processing,
    by simply including an image of the flag on our page. However, animating the `<canvas>`
    element is where its benefits really begin. This is where we can do much more
    than anything we could achieve with a simple image. The additional complexity
    that animating the `<canvas>` element entails is totally worth it.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的国旗例子中，使用`<canvas>`元素其实没有太大的好处。我们完全可以通过在页面上简单包含国旗图像来达到完全相同的效果，并且代码和处理量要少得多。但是，从`<canvas>`元素的动画开始才是它真正好处的地方。这是我们可以做比简单图像更多的东西的地方。动画`<canvas>`元素带来额外的复杂性完全是值得的。
- en: Time for action – creating an animation on the canvas
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在画布上创建一个动画
- en: In this example, we'll draw the same flag as we did before, except that this
    time we'll animate different shapes. The underlying HTML used in this example
    is exactly the same as in the previous examples. All that changes is the content
    of the `<script>` element at the end of the `<body>` element.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将像以前一样绘制相同的国旗，只是这一次我们将以动画不同的形状。此示例中使用的基本HTML与以前的示例完全相同。改变的只是在`<body>`元素末尾的`<script>`元素的内容。
- en: To make the working file for this example, just remove everything in the `<script>`
    element at the bottom of `canvas-explorer.html` and resave the file as `canvas-animated.html`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了制作本示例的工作文件，只需删除 `canvas-explorer.html` 底部 `<script>` 元素中的所有内容，然后将文件另存为 `canvas-animated.html`。
- en: 'The first thing we''ll do is bring the blue rectangle in from the side of the
    canvas to the center of the `<canvas>` element. Add the following code to the
    now empty `<script>` element at the bottom of the page:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将把蓝色矩形从 `<canvas>` 的侧面移动到 `<canvas>` 元素的中心。将以下代码添加到页面底部现在空的 `<script>`
    元素中：
- en: '```js'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: (function() {
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (function() {
- en: var canvas = document.getElementById("c"),
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var canvas = document.getElementById("c"),
- en: init = function(context) {
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: init = function(context) {
- en: var width = 0,
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var width = 0,
- en: pos = 0,
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos = 0,
- en: rectMotion = function() {
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: rectMotion = function() {
- en: if (width < 400) {
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (width < 400) {
- en: width = width + 2;
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: width = width + 2;
- en: context.fillStyle = "#039";
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillStyle = "#039";
- en: context.fillRect(0, 50, width, 200);
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillRect(0, 50, width, 200);
- en: '} else if (pos < 50) {'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else if (pos < 50) {'
- en: pos = pos + 2;
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos = pos + 2;
- en: canvas.width = 500;
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: canvas.width = 500;
- en: context.fillStyle = "#039";
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillStyle = "#039";
- en: context.fillRect(pos, 50, 400, 200);
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillRect(pos, 50, 400, 200);
- en: '} else {'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(rectInt);
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(rectInt);
- en: whiteLines(context);
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: whiteLines(context);
- en: '}'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: rectInt = setInterval(function() { rectMotion() }, 1);
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: rectInt = setInterval(function() { rectMotion() }, 1);
- en: '};'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: if (window.ActiveXObject) {
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (window.ActiveXObject) {
- en: window.onload = function() {
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: window.onload = function() {
- en: var context = canvas.getContext("2d");
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var context = canvas.getContext("2d");
- en: init(context);
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: init(context);
- en: '}'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: var context = canvas.getContext("2d");
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var context = canvas.getContext("2d");
- en: init(context);
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: init(context);
- en: '}'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '})();'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})();'
- en: '```'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: In the previous examples in this chapter all of our variables were global, which
    is generally bad practice when coding for the real world. In this example, our
    code is within the scope of the anonymous function, so the variables are only
    accessible within that function and are therefore not considered global.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的之前示例中，我们的所有变量都是全局的，这在实际编码中通常是不良的实践。在这个示例中，我们的代码位于匿名函数的范围内，因此变量只能在该函数内部访问，因此不被视为全局变量。
- en: Within the `init()` function, we declare the `width` and `pos` variables and
    then define another inline function called `rectMotion()`, which will be called
    repeatedly by an interval. Any shapes drawn outside of the bounds of the `<canvas>`
    element do not exist, so we can't draw a rectangle out of view and then animate
    it into view. Instead, we gradually build up the rectangle by starting at the
    left edge and incrementally widening the rectangle until it is the correct width.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `init()` 函数中，我们声明 `width` 和 `pos` 变量，然后定义另一个内联函数 `rectMotion()`，该函数将被间隔地重复调用。在
    `<canvas>` 元素的边界之外绘制的任何形状都不存在，因此我们无法在视图之外绘制一个矩形，然后将其动画化为视图内。相反，我们逐渐建立矩形，从左边缘开始逐渐增加矩形的宽度，直到它的宽度正确为止。
- en: This is done using the first branch of the `if` statement, which will be executed
    while the `width` variable is less than 400\. To speed the animation up, we actually
    increase the width of the rectangle by two pixels at a time (although the speed
    of the animation is also considerably different between browsers) by increasing
    the `width` variable and then using the variable as the `width` argument in the
    `fillRect()` method.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 `if` 语句的第一个分支完成的，当 `width` 变量小于 400 时将执行该分支。为了加快动画速度，我们实际上每次增加两个像素的矩形宽度（尽管动画速度在不同的浏览器之间也有很大的差异），通过增加
    `width` 变量，然后将变量用作 `fillRect()` 方法的 `width` 参数。
- en: Once the `width` variable has reached 400, we then change over to use the `pos`
    variable instead. In this part of the condition, we increase the `pos` variable
    by two (the rectangle will appear to move two pixels at a time, again for speed),
    reset the `<canvas>` element by setting its width, and set the `fillStyle` property.
    We then draw the new rectangle, using the `pos` variable as the argument for the
    x axis position.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `width` 变量达到 400，我们就切换到使用 `pos` 变量。在这部分条件中，我们将 `pos` 变量增加两个（矩形将看起来每次移动两个像素，再次为了速度），通过设置其宽度重置
    `<canvas>` 元素，并设置 `fillStyle` 属性。然后，我们绘制新的矩形，使用 `pos` 变量作为 x 轴位置的参数。
- en: It will look as if the rectangle is being moved to the right, but this is not
    the case at all. We are actually destroying the rectangle and then drawing a completely
    new one that's two pixels to the right of the original.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来好像矩形正在向右移动，但实际上并非如此。我们实际上是销毁了矩形，然后绘制了一个完全新的矩形，它比原来的位置右移了两个像素。
- en: Once the rectangle is in the correct location, we clear the interval and then
    call the next function, (we'll add this shortly) passing in the context object.
    After the `rectMotion()` function, we add a final variable that contains the ID
    of the interval which calls the function to animate the rectangle. We use this
    variable to clear the interval once the animation is complete.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形位于正确的位置后，我们清除间隔，然后调用下一个函数（很快我们将添加这个），传递上下文对象。在`rectMotion()`函数之后，我们添加一个包含调用函数以动画矩形的ID的最终变量。完成动画后，我们使用此变量清除间隔。
- en: If you run the page in a browser at this point, the blue rectangle appears to
    move into the `<canvas>` element from the left before stopping in the middle.
    Next, we need to animate the horizontal and diagonal white crosses over the blue
    rectangle.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时在浏览器中运行页面，蓝色矩形似乎从左侧移入`<canvas>`元素，然后停在中间。接下来，我们需要在蓝色矩形上方动画显示水平和对角线白色交叉线。
- en: Time for action – animating the white crosses
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施行动-动画显示白十字架
- en: 'In this part of the animation, we''ll draw a white line down the middle and
    across the center of the rectangle, and then make the diagonal cross grow out
    from the center to the corners. The following code should be added in between
    the `canvas` and `init` variables in the code so far:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在动画的这一部分，我们将在矩形的中间和中心画一条白线，然后将对角线交叉点从中心扩展到角落。以下代码应该添加到目前为止的代码中的`canvas`和`init`变量之间：
- en: '```js'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: whiteLines = function(context) {
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: whiteLines = function(context) {
- en: context.fillStyle = "#fff";
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: context.fillStyle = "＃fff";
- en: context.strokeStyle = "#fff";
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: context.strokeStyle = "＃fff";
- en: context.lineWidth = 50;
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: context.lineWidth = 50;
- en: var width = 0,
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: var width = 0,
- en: height = 0,
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height = 0,
- en: pos = {
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos = {
- en: 'ne: { x: 250, y: 150 },'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ne: { x: 250, y: 150 },'
- en: 'se: { x: 250, y: 150 },'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'se: { x: 250, y: 150 },'
- en: 'nw: { x: 250, y: 150 },'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'nw: { x: 250, y: 150 },'
- en: 'sw: { x: 250, y: 150 }'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'sw: { x: 250, y: 150 }'
- en: '},'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: growDiagonal = function() {
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: growDiagonal = function() {
- en: if (pos.ne.x >= 50) {
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (pos.ne.x >= 50) {
- en: context.beginPath();
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(pos.ne.x, pos.ne.y);
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.ne.x, pos.ne.y);
- en: context.lineTo(pos.ne.x - 4, pos.ne.y - 2);
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.ne.x - 4, pos.ne.y - 2);
- en: context.moveTo(pos.se.x, pos.se.y);
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.se.x, pos.se.y);
- en: context.lineTo(pos.se.x - 4, pos.se.y + 2);
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.se.x - 4, pos.se.y + 2);
- en: context.moveTo(pos.nw.x, pos.nw.y);
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.nw.x, pos.nw.y);
- en: context.lineTo(pos.nw.x + 4, pos.nw.y + 2);
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.nw.x + 4, pos.nw.y + 2);
- en: context.moveTo(pos.sw.x, pos.sw.y);
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.sw.x, pos.sw.y);
- en: context.lineTo(pos.sw.x + 4, pos.sw.y - 2);
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.sw.x + 4, pos.sw.y - 2);
- en: context.stroke();
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.stroke();
- en: context.closePath();
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: pos.ne.x = pos.ne.x - 2;
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.ne.x = pos.ne.x - 2;
- en: pos.ne.y = pos.ne.y - 1;
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.ne.y = pos.ne.y - 1;
- en: pos.se.x = pos.se.x - 2;
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.se.x = pos.se.x - 2;
- en: pos.se.y = pos.se.y + 1;
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.se.y = pos.se.y + 1;
- en: pos.nw.x = pos.nw.x + 2;
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.nw.x = pos.nw.x + 2;
- en: pos.nw.y = pos.nw.y + 1;
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.nw.y = pos.nw.y + 1;
- en: pos.sw.x = pos.sw.x + 2;
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.sw.x = pos.sw.x + 2;
- en: pos.sw.y = pos.sw.y - 1;
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.sw.y = pos.sw.y - 1;
- en: '} else {'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(crossInt);
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(crossInt);
- en: redCross(context);
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: redCross(context);
- en: '}'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: growVertical = function() {
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: growVertical = function() {
- en: if (height < 200 || width < 400) {
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (height < 200 || width < 400) {
- en: if (height < 200) {
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (height < 200) {
- en: height = height + 2;
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: height = height + 2;
- en: context.fillRect(225, 50, 50, height);
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillRect(225, 50, 50, height);
- en: '}'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: if (width < 400) {
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (width < 400) {
- en: width = width + 4;
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: width = width + 4;
- en: context.fillRect(50, 125, width, 50);
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillRect(50, 125, width, 50);
- en: '}'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(rectInt);
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(rectInt);
- en: crossInt = setInterval(function() { growDiagonal() }, 1);
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: crossInt = setInterval(function() { growDiagonal() }, 1);
- en: '}'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: rectInt = setInterval(function() { growVertical() }, 1);
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: rectInt = setInterval(function() { growVertical() }, 1);
- en: '},'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '```'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Essentially we have another inline function, which contains another function
    that gets repeatedly called with another interval. As we're drawing white crosses
    this time, we need to set some style properties (we'll be drawing both lines and
    rectangles in this function and so set the `fillStyle` and `strokeStyle`) as well
    as the `lineWidth` property.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们有另一个内联函数，其中包含另一个函数，该函数以另一个间隔重复调用。由于我们这次画白色十字架，因此我们需要设置一些样式属性（在该函数中我们将画线和矩形，因此设置`fillStyle`和`strokeStyle`）以及`lineWidth`属性。
- en: We initialize the `width` and `height` control variables, which will be used
    to control how many times the interval runs, and we also store the starting positions
    of the vertical and diagonal crosses in an object called `pos`.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化`width`和`height`控制变量，这些变量将控制间隔运行的次数，还将起始位置垂直和对角线交叉点存储在一个名为`pos`的对象中。
- en: We then define two inline functions, one to create the vertical cross and the
    other to create the diagonal cross. The `growVertical()` function is called first
    with an interval and we just draw one white rectangle from top to bottom, and
    one from left to right in the center of the background using the `width` and `height`
    variables to repeat the interval as many times as necessary. The interval is cleared
    once the rectangles are of the correct size and then the `growDiagonal()` function
    is called with another interval.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义两个内联函数，一个用于创建垂直十字架，另一个用于创建对角十字架。首先使用一个间隔调用`growVertical()`函数，我们只需在背景的中心从上到下绘制一个白色矩形，然后使用`width`和`height`变量重复间隔，直到矩形达到正确尺寸。一旦矩形的尺寸正确，间隔就会清除，然后使用另一个间隔调用`growDiagonal()`函数。
- en: In this function we need to draw four lines, each starting in the middle of
    the vertical cross. We use the different properties in our `pos` object to do
    this. Each time the function is executed, we move to the x and y positions specified
    for each line in the object and then draw towards the relevant corner. We then
    update the properties in the object ready for the next iteration of the function.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们需要绘制四条线，每条线都从垂直交叉点的中间开始。我们使用`pos`对象中的不同属性来实现这一点。每次执行函数时，我们移动到对象中每条线指定的x和y位置，然后绘制到相关的角落。然后我们更新对象中的属性，以准备函数的下一次迭代。
- en: Each property needs to be updated by different amounts, for example, the line
    moving from the center to the top-left of the rectangle needs to move negatively
    along both the x and y axes, whereas the line to move to the top-right corner
    needs to move positively along the x axis, but negatively along the y axis. We
    use a new path on each iteration of the function to preserve the anti-aliasing
    of the lines.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 每个属性都需要以不同的量进行更新，例如，从中心移动到矩形的左上角的线需要沿着x和y轴负向移动，而移动到右上角的线需要沿着x轴正向移动，但沿着y轴负向移动。我们在函数的每次迭代中使用新路径来保留线条的反锯齿效果。
- en: Once the lines are drawn, we clear the interval and call the next function.
    We'll define this function now. It should be placed after the `canvas` variable,
    but directly before the `whiteLines()` function that we just added.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦线条绘制完成，我们清除间隔并调用下一个函数。现在我们来定义这个函数。它应该放在`canvas`变量之后，但直接放在我们刚刚添加的`whiteLines()`函数之前。
- en: Time for action – animating the red crosses
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手行动-为红色十字架添加动画
- en: 'All we need to do now is draw the vertical red cross and the four custom red
    shapes. Add the following code in between the `rectInt` variable declaration near
    the top of the `<script>` element and the `whiteLines` function we defined in
    the previous section:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要绘制垂直红色十字架和四个自定义红色形状。在`<script>`元素顶部附近的`rectInt`变量声明和我们在上一节中定义的`whiteLines`函数之间添加以下代码：
- en: '```js'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: redCross = function(context) {
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: redCross = function(context) {
- en: context.fillStyle = "#C00";
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: context.fillStyle = "#C00";
- en: context.strokeStyle = "#C00";
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: context.strokeStyle = "#C00";
- en: context.lineWidth = 30;
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: context.lineWidth = 30;
- en: var width = 0,
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: var width = 0,
- en: height = 0,
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height = 0,
- en: pos = {
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos = {
- en: 'up : { x: 250, y: 150 },'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'up : { x: 250, y: 150 },'
- en: 'down : { x: 250, y: 150 },'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'down : { x: 250, y: 150 },'
- en: 'left: { x: 250, y: 150 },'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: { x: 250, y: 150 },'
- en: 'right: { x: 250, y: 150 }'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'right: { x: 250, y: 150 }'
- en: '},'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: addStripes = function() {
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: addStripes = function() {
- en: context.lineWidth = 1;
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineWidth = 1;
- en: function makeStripe(props) {
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: function makeStripe(props) {
- en: context.beginPath();
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(props.startX, props.startY);
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(props.startX, props.startY);
- en: context.lineTo(props.line1X, props.line1Y);
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(props.line1X, props.line1Y);
- en: context.lineTo(props.line2X, props.line2Y);
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(props.line2X, props.line2Y);
- en: context.lineTo(props.line3X, props.line3Y);
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(props.line3X, props.line3Y);
- en: context.fill();
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fill();
- en: context.closePath();
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: '}'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: setTimeout(function() { makeStripe({
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setTimeout(function() { makeStripe({
- en: 'startX: 50, startY: 50,'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'startX: 50, startY: 50,'
- en: 'line1X: 195, line1Y: 125,'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line1X: 195, line1Y: 125,'
- en: 'line2X: 165, line2Y: 125,'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line2X: 165, line2Y: 125,'
- en: 'line3X: 50, line3Y: 66'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line3X: 50, line3Y: 66'
- en: '})}, 1);'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})}, 1);'
- en: setTimeout(function() { makeStripe({
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setTimeout(function() { makeStripe({
- en: 'startX: 450, startY: 50,'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'startX: 450, startY: 50,'
- en: 'line1X: 305, line1Y: 125,'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line1X: 305, line1Y: 125,'
- en: 'line2X: 275, line2Y: 125,'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line2X: 275, line2Y: 125,'
- en: 'line3X: 422, line3Y: 50'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line3X: 422, line3Y: 50'
- en: '})}, 50);'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})}, 50);'
- en: setTimeout(function() { makeStripe({
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setTimeout(function() { makeStripe({
- en: 'startX: 450, startY: 250,'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'startX: 450, startY: 250,'
- en: 'line1X: 310, line1Y: 175,'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line1X: 310, line1Y: 175,'
- en: 'line2X: 335, line2Y: 175,'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line2X: 335, line2Y: 175,'
- en: 'line3X: 450, line3Y: 235'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line3X: 450, line3Y: 235'
- en: '})}, 100);'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})}, 100);'
- en: setTimeout(function() { makeStripe({
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setTimeout(function() { makeStripe({
- en: 'startX: 50, startY: 250,'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'startX: 50, startY: 250,'
- en: 'line1X: 200, line1Y: 175,'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line1X: 200, line1Y: 175,'
- en: 'line2X: 225, line2Y: 175,'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line2X: 225, line2Y: 175,'
- en: 'line3X: 80, line3Y: 250'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'line3X: 80, line3Y: 250'
- en: '})}, 150);'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})}, 150);'
- en: '},'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: growVertical = function() {
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: growVertical = function() {
- en: if (height < 100 || width < 200) {
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (height < 100 || width < 200) {
- en: if (height < 100) {
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 (height < 100) {
- en: context.beginPath();
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(pos.up.x, pos.up.y);
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.up.x, pos.up.y);
- en: context.lineTo(pos.up.x, pos.up.y - 2);
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.up.x, pos.up.y - 2);
- en: context.moveTo(pos.down.x, pos.down.y);
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.down.x, pos.down.y);
- en: context.lineTo(pos.down.x, pos.down.y + 2);
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.down.x, pos.down.y + 2);
- en: context.stroke();
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.stroke();
- en: context.closePath();
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: height = height + 2;
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: height = height + 2;
- en: pos.up.y = pos.up.y - 2;
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.up.y = pos.up.y - 2;
- en: pos.down.y = pos.down.y + 2;
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.down.y = pos.down.y + 2;
- en: '}'
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: if (width < 200) {
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (width < 200) {
- en: context.beginPath();
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.beginPath();
- en: context.moveTo(pos.left.x, pos.left.y);
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.left.x, pos.left.y);
- en: context.lineTo(pos.left.x - 2, pos.left.y);
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.left.x - 2, pos.left.y);
- en: context.moveTo(pos.right.x, pos.right.y);
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.moveTo(pos.right.x, pos.right.y);
- en: context.lineTo(pos.right.x + 2, pos.right.y);
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.lineTo(pos.right.x + 2, pos.right.y);
- en: context.stroke();
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.stroke();
- en: context.closePath();
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.closePath();
- en: width = width + 2
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: width = width + 2
- en: pos.left.x = pos.left.x - 2;
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.left.x = pos.left.x - 2;
- en: pos.right.x = pos.right.x + 2;
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos.right.x = pos.right.x + 2;
- en: '}'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(crossInt);
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(crossInt);
- en: addStripes();
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: addStripes();
- en: '}'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: crossInt = setInterval( function() { growVertical() }, 1);
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: crossInt = setInterval( function() { growVertical() }, 1);
- en: '},'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '```'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: Again, we have an outer inline function (called `redCross()`) containing some
    properties that set the color and line styles, and some nested functions that
    will be used to draw the red cross and the four custom shapes. As with the previous
    function, we declare the `width` and `height` control variables, and an object
    called `pos` containing the starting positions for the lines that make up the
    cross. The cross is drawn first with the `growVertical()` function.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们有一个外部内联函数（称为`redCross()`）包含设置颜色和线样式的一些属性，以及将用于绘制红十字和四个自定义形状的一些嵌套函数。与前一个函数一样，我们声明了`width`和`height`控制变量，以及一个名为`pos`的对象，其中包含组成十字形的线的起始位置。首先用`growVertical()`函数绘制十字。
- en: This function is very similar to the function in the last section of code. We
    draw four lines starting in the middle of the rectangle which radiate to the top
    and bottom-center, and the right and left-center.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数与上一节代码中的函数非常相似。我们从矩形中间开始绘制四条线，向上和向下中心，以及右边和左边中心辐射。
- en: The four custom shapes are drawn using a single master function that accepts
    a configuration object specifying the start point (passed to the `moveTo()` method),
    and the points that make up each subpath (passed to the `lineTo()` methods). We
    then use the `setTimeout` JavaScript function to create each shape one after the
    other, using the object passed to the master function to specify the relevant
    points on the canvas to draw each shape.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 四个自定义形状使用一个主函数来绘制，该函数接受一个配置对象，指定开始点（传递给`moveTo()`方法）和组成每个子路径的点（传递给`lineTo()`方法）。然后，我们使用`setTimeout`
    JavaScript函数来依次创建每个形状，使用传递给主函数的对象来指定在画布上绘制每个形状的相关点。
- en: This is all the code we need; so now when we run the page, we should see the
    animation of the flag being drawn. The code works in all browsers, with varying
    levels of performance for each browser. Animating the `<canvas>` element is all
    about conditional `if` statements, intervals, and timeouts. As we saw, the code
    itself is quite straightforward. We just need rather a lot of it in order to produce
    even simple animations.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要的所有代码；因此，当我们运行页面时，我们应该看到绘制旗帜动画。代码在所有浏览器中都可以运行，每个浏览器的性能各不相同。动画`<canvas>`元素主要是关于条件`if`语句，间隔和超时。正如我们所见，代码本身非常简单。我们只需要相当多的代码来产生甚至简单的动画。
- en: Pop quiz – animating the canvas
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 – 动画化画布
- en: Q1\. Why did we store each call to `setInterval()`in a variable?
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 为什么我们将每次调用`setInterval()`存储在一个变量中？
- en: For performance reasons
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于性能原因
- en: In order to clear the interval when appropriate
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在适当时清除间隔
- en: Because of the closure created with the anonymous function as the first argument
    to the function
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于使用匿名函数作为函数的第一个参数创建的闭包
- en: So that we can pass arguments to the function called by the interval
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以便我们可以将参数传递给间隔调用的函数
- en: Q2\. In the first function, where we drew the blue rectangle, we set the width
    of the `<canvas>` element each time the `rectMotion()` function is called by the
    interval. Why?
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 在第一个函数中，我们绘制了蓝色矩形，在每次间隔调用`rectMotion()`函数时，我们设置了`<canvas>`元素的宽度。为什么？
- en: To make sure the `<canvas>` element was big enough to contain the rectangle
    as it grew
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`<canvas>`元素足够大，以容纳矩形随着其增长而增长
- en: To correct a bug in Internet Explorer
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了纠正Internet Explorer中的一个错误
- en: To reset the state of the `<canvas>` element, ensuring there was only one rectangle
    at each point in the animation
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重置`<canvas>`元素的状态，确保动画中每个点上只有一个矩形
- en: As a requirement for setting the `fillStyle` property
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为设置`fillStyle`属性的要求
- en: Have a go hero – creating canvas animations
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试吧——创建画布动画
- en: Go back to the static version of the flag you drew of your home country (or
    the logo or image of your choice), and convert it so that the different parts
    of the flag are animated and brought into existence.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 返回您绘制的家乡国家的国旗（或您选择的标志或图像）的静态版本，并将其转换为动画，并呈现出不同的国旗部分。
- en: Creating a canvas game
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个画布游戏
- en: The best animations are those that are interactive and engage the user, and
    this is exactly how a game can be seen, as one continuous, user-driven animation.
    The power of the `<canvas>` element is best demonstrated when it is used to create
    games, as we'll see over the course of this section.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的动画是那些交互性强、能够吸引用户的动画，这正是游戏可以被视为一种连续的、用户驱动的动画的方式。当它用于创建游戏时，`<canvas>`元素的强大功能最能得到展示，正如我们将在本节中看到的那样。
- en: 'We''ll create a very basic clone of the arcade classic *Space Invaders* with
    a series of alien ships that slowly advance down the screen, and a user-controlled
    space ship at the bottom that can shoot the incoming aliens:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个非常基本的街机经典游戏*Space Invaders*的克隆版本，其中包括一系列慢慢向屏幕下方移动的外星飞船，以及底部由用户控制可以射击进来的外星飞船：
- en: '![Creating a canvas game](img/9642OS_10_04.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个画布游戏](img/9642OS_10_04.jpg)'
- en: Time for action – creating the initial page
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建初始页面
- en: 'The initial page that we''ll use for this example is similar to that used in
    the previous example:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于此示例的初始页面与上一个示例中使用的类似：
- en: 'Create a new page in your text editor that contains the following markup:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中创建一个新页面，其中包含以下标记：
- en: '```js'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <!DOCTYPE html>
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <!DOCTYPE html>
- en: <html lang="en">
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <html lang="en">
- en: <head>
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <head>
- en: <meta charset="utf-8">
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <meta charset="utf-8">
- en: <title>A canvas and jQuery Game</title>
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <title>一个画布和jQuery游戏</title>
- en: <link rel="stylesheet" href="css/canvas-game.css">
  id: totrans-447
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <link rel="stylesheet" href="css/canvas-game.css">
- en: </head>
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </head>
- en: <body>
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <body>
- en: <canvas tabindex="1" id="c" width="900" height="675">
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <canvas tabindex="1" id="c" width="900" height="675">
- en: <p>Your browser doesn't support the canvas element!</p>
  id: totrans-451
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>您的浏览器不支持canvas元素！</p>
- en: </canvas>
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </canvas>
- en: <script src="img/jquery.js"></script>
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <script src="img/jquery.js"></script>
- en: <script>
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <script>
- en: $(function() {
  id: totrans-455
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(function() {
- en: '});'
  id: totrans-456
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: </script>
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </script>
- en: </body>
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </body>
- en: </html>
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </html>
- en: '```'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Save the file as `canvas-game.html`. We also require a very basic stylesheet
    for our game. All we''re styling is the `<canvas>` element itself. Create a new
    stylesheet containing the following style rules:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`canvas-game.html`。我们还需要一个非常基本的样式表来制作我们的游戏。我们所做的全部就是对`<canvas>`元素本身进行样式设置。创建一个包含以下样式规则的新样式表：
- en: '```js'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: canvas {
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 画布 {
- en: 'border:1px solid #000;'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'border:1px solid #000;'
- en: margin:auto;
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:auto;
- en: display:block;
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: outline:none;
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: outline:none;
- en: background:url(../img/bg.gif) no-repeat;
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 背景:url(../img/bg.gif) no-repeat;
- en: '}'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this file in the `css` directory as `canvas-game.css`.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存在`css`目录中，命名为`canvas-game.css`。
- en: '*What just happened?*'
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The main element on the page is of course the `<canvas>` element. The only difference
    between this and the element used in previous examples is that we have set the
    `tabindex` attribute on it so that it can receive keyboard events, which is necessary
    for detecting and reacting to the input from the user. We're also using jQuery
    in this example and using the standard anonymous function and the `$` aliasing
    construct we've used throughout the book.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的主要元素当然是`<canvas>`元素。与以前示例中使用的元素唯一的区别在于我们在其上设置了`tabindex`属性，以便它可以接收键盘事件，这对于检测和响应用户输入是必要的。在此示例中，我们还使用了jQuery，并使用了标准的匿名函数和我们在整本书中一直使用的`$`别名构造。
- en: The styles we've used simply position the `<canvas>` element in the center of
    the page, give it a border, and remove the dotted outline that appears around
    focused elements in some browsers. We also set a background image on the element.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的样式简单地将`<canvas>`元素定位在页面中央，给它加上边框，并移除一些浏览器中焦点元素周围出现的虚线轮廓。我们还在元素上设置了背景图像。
- en: The background image applied to the `<canvas>` element helps to set a scene
    for our game, and using CSS to set a background image on the `<canvas>` element
    is much easier than drawing the image within it.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于`<canvas>`元素的背景图像有助于为我们的游戏设置场景，并且使用CSS在`<canvas>`元素上设置背景图像比在其中绘制图像要容易得多。
- en: Time for action – creating the initial script
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动的时间 - 创建初始脚本
- en: 'The script for the game is quite long, so we''ll look at it in different sections,
    starting with the initial structure of the script. The following code should go
    into the anonymous function at the bottom of the page:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的脚本相当长，因此我们将以不同的部分来查看它，从脚本的初始结构开始。以下代码应该放入页面底部的匿名函数中：
- en: '```js'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: var canvas = document.getElementById("c"),
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: var canvas = document.getElementById("c"),
- en: context = canvas.getContext("2d"),
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: context = canvas.getContext("2d"),
- en: motionInt = null,
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: motionInt = null,
- en: dirCounter = 0,
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: dirCounter = 0,
- en: alienSpeed = 1000,
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: alienSpeed = 1000,
- en: aliens = [],
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: aliens = [],
- en: alienMotion = function(dir) {
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: alienMotion = function(dir) {
- en: '},'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: addAliens = function() {
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: addAliens = function() {
- en: '},'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: ship = new Image(),
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ship = new Image(),
- en: shipPos = [430, 600];
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: shipPos = [430, 600];
- en: ship.src = "img/ship.png";
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ship.src = "img/ship.png";
- en: ship.onload = function() {
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ship.onload = function() {
- en: context.drawImage(ship, shipPos[0], shipPos[1]);
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.drawImage(ship, shipPos[0], shipPos[1]);
- en: addAliens();
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: addAliens();
- en: '};'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: Essentially, all we've done here is define a series of variables and an `onload`
    event handler. The `canvas` and `context` variables are defined first, as in previous
    examples, in order to access and manipulate the canvas.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们在这里所做的一切就是定义一系列变量和一个`onload`事件处理程序。首先定义`canvas`和`context`变量，就像以前的示例一样，以便访问和操作画布。
- en: We also set a variable called `motionInt`, which will be used to hold the ID
    of a `setInterval()` function later on, a variable called `dirCounter` which will
    be used to determine which direction the aliens move in, an `alienSpeed` variable
    to set the speed that the aliens move at, and an empty `aliens` array which we'll
    use to keep track of each alien on the page.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了一个名为`motionInt`的变量，稍后将用于保存`setInterval()`函数的ID，一个名为`dirCounter`的变量，用于确定外星人移动的方向，一个`alienSpeed`变量来设置外星人移动的速度，并且一个空的`aliens`数组，我们将用它来跟踪页面上的每个外星人。
- en: Following this we define two inline functions, one to move the aliens and one
    to add the aliens to the page. These are empty at the moment but we'll populate
    each of them next. We also create a new image, which will be the user-controlled
    space ship, and a `shipPosition` array which will be used to keep track of the
    ship's location on the page.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们定义了两个内联函数，一个用于移动外星人，一个用于将外星人添加到页面。目前它们都是空的，但接下来我们将填充它们。我们还创建了一个新的图像，它将是用户控制的太空船，并且一个`shipPosition`数组，将用于跟踪船在页面上的位置。
- en: Once we've defined all our variables, we set the `src` of the new image object
    we created to represent the space ship. We then attach an `onload` event handler
    to the ship object, which will be executed once the image has finished loading.
    Within this function, we draw the ship on the canvas using the values stored in
    the `imagePosition` array. We then call the `addAliens()` function, which will
    add the aliens to the canvas. We can add the code to the `addAliens()` function
    next.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了所有变量后，我们将新创建的图像对象的`src`设置为代表太空船的图像。然后，我们将一个`onload`事件处理程序附加到船对象，该处理程序将在图像加载完成后执行。在此函数中，我们使用存储在`imagePosition`数组中的值在画布上绘制船。然后，我们调用`addAliens()`函数，该函数将在画布上添加外星人。接下来，我们可以添加代码到`addAliens()`函数。
- en: Time for action – adding the aliens to the page
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动的时间 - 将外星人添加到页面
- en: 'Replace the `addAliens()` inline function in the previous code block with the
    following code:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换前一代码块中的`addAliens()`内联函数：
- en: '```js'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: addAliens = function() {
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: addAliens = function() {
- en: var alienPos = [13, 0],
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: var alienPos = [13, 0],
- en: alien = new Image();
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: alien = new Image();
- en: alien.src = "img/alien.gif";
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: alien.src = "img/alien.gif";
- en: alien.onload = function () {
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: alien.onload = function () {
- en: for (var x = 0; x < 15; x++) {
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var x = 0; x < 15; x++) {
- en: for (var y = 0; y < 3; y++) {
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var y = 0; y < 3; y++) {
- en: context.drawImage(alien, alienPos[0], alienPos[1]);
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.drawImage(alien, alienPos[0], alienPos[1]);
- en: var data = {
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var data = {
- en: 'img: alien, posX: alienPos[0], posY: alienPos[1]'
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: img：alien，posX：alienPos[0]，posY：alienPos[1]
- en: '};'
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: aliens.push(data);
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: aliens.push(data);
- en: if (alienPos[1] < 100) {
  id: totrans-517
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (alienPos[1] < 100) {
- en: alienPos[1] = alienPos[1] + 50;
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: alienPos[1] = alienPos[1] + 50;
- en: '} else {'
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: alienPos[0] = alienPos[0] + 50;
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: alienPos[0] = alienPos[0] + 50;
- en: alienPos[1] = 0;
  id: totrans-521
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: alienPos[1] = 0;
- en: '}'
  id: totrans-522
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: motionInt = setInterval(function () { alienMotion("right"); }, alienSpeed);
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: motionInt = setInterval(function () { alienMotion("right"); }, alienSpeed);
- en: '},'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '```'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-529
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We first define a new array that we'll use to incrementally set the position
    of each alien ship while the aliens are initially being drawn to the canvas. We
    define a new `Image` object for the image that will be used by all of the alien
    ships and set its `src` attribute. We then set an `onload` handler for the new
    alien image so that we can manipulate the image once it has finished loading.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个新数组，用于逐步设置每艘外星人飞船的位置，同时外星人最初被绘制到画布上。我们为将用于所有外星人飞船的图像定义一个新的`Image`对象，并设置其`src`属性。然后我们为新外星人图像设置一个`onload`处理程序，以便在图像加载完成后对图像进行操作。
- en: We want to create three rows of 15 aliens, so within the `onload` handler, we
    start with two nested `for` loops where the outer loop runs 15 times and on each
    loop, the inner `for` loop executes three times. Within the nested loops, we first
    draw the new alien to the canvas using the values stored in the `alienPos` array.
    We then create a new `data` object which stores a reference to the image object,
    and the x and y position of the image on the canvas. The new `data` object is
    then pushed into the `aliens` array which we defined earlier at the start of the
    script.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要创建三行各含15个外星人，所以在`onload`处理程序中，我们从两个嵌套的`for`循环开始，其中外部循环运行15次，在每次循环时，内部`for`循环执行三次。在嵌套循环内部，我们首先使用存储在`alienPos`数组中的值将新外星人绘制到画布上。然后，我们创建一个新的`data`对象，该对象存储了图像对象的引用以及图像在画布上的x和y位置。然后将新的`data`对象推入我们之前在脚本开始处定义的`aliens`数组中。
- en: We then update the values in the `alienPos` array. If the second item in the
    array (the item with an index of `1`) is less than 100, we add 50 to the value
    of the array item. The second item in the array corresponds to the position on
    the y axis of the canvas. This will give us a single column of three aliens. Note
    that we start the x position of the first three aliens at `13` instead of `0`
    so that there is a gutter between the edge of the canvas and the first column
    of aliens.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着更新`alienPos`数组中的值。如果数组中的第二项（索引为`1`的项）小于`100`，我们就给该数组项的值加上`50`。数组中的第二项对应画布上y轴的位置。这样我们就得到了一个包含三个外星人的单列。请注意，我们将第一列外星人的x位置从`0`开始改为从`13`开始，这样画布的边缘和第一列外星人之间就有了间隙。
- en: If the second array item is more than `100`, we add `50` to the first item in
    the array instead, which corresponds to the x axis on the canvas, and reset the
    second array item to zero. This will give us 15 columns of three aliens.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第二个数组项大于`100`，我们将`50`添加到数组中的第一个项，该项对应画布上的x轴，并将第二个数组项重置为零。这样我们就得到了三个外星人的15列。
- en: Once all of the aliens have been drawn on the canvas, we set an interval that
    will repeatedly execute the next function, `alienMotion()`, according to the number
    of milliseconds contained in the `alienSpeed` variable, which is initially set
    to `1000` at the start of the script. The interval ID is stored in the `motionInt`
    variable we also created at the start of the script. We can add the code to our
    `alienMotion()` function next.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有外星人都已绘制到画布上，我们就设置一个间隔，根据`alienSpeed`变量中包含的毫秒数，重复执行接下来的函数`alienMotion()`，该变量在脚本开始时最初设置为`1000`。间隔ID存储在我们在脚本开始时还创建的`motionInt`变量中。我们可以接着向`alienMotion()`函数中添加代码。
- en: Time for action – moving the aliens
  id: totrans-535
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 移动外星人
- en: 'Our next block of code will give the aliens their motion, causing them to advance
    to the right along the canvas first, then down a line, then to the left, and so
    on and so forth. Replace the `alienMotion()` function we previously defined with
    the following code:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的代码块将赋予外星人运动，使它们先向右沿着画布前进，然后下移一行，然后向左移动，依此类推。用以下代码替换我们之前定义的`alienMotion()`函数：
- en: '```js'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: alienMotion = function (dir) {
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: alienMotion = function (dir) {
- en: var alienLength = aliens.length;
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: var alienLength = aliens.length;
- en: if (dirCounter < 4) {
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: if (dirCounter < 4) {
- en: for (var x = 0; x < alienLength; x++) {
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var x = 0; x < alienLength; x++) {
- en: context.clearRect(aliens[x].posX, aliens[x].posY, aliens[x].img.width, aliens[x].img.height);
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.clearRect(aliens[x].posX, aliens[x].posY, aliens[x].img.width, aliens[x].img.height);
- en: '}'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: for (var y = 0; y < alienLength; y++) {
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var y = 0; y < alienLength; y++) {
- en: 'aliens[y].posX = (dir === "right") ?  aliens[y].posX + 35 : aliens[y].posX
    - 35;'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'aliens[y].posX = (dir === "right") ?  aliens[y].posX + 35 : aliens[y].posX
    - 35;'
- en: context.drawImage(aliens[y].img, aliens[y].posX, aliens[y].posY);
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.drawImage(aliens[y].img, aliens[y].posX, aliens[y].posY);
- en: '}'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: dirCounter++;
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dirCounter++;
- en: '} else {'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: clearInterval(motionInt);
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(motionInt);
- en: dirCounter = 0;
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dirCounter = 0;
- en: for (var z = 0; z < alienLength; z++) {
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var z = 0; z < alienLength; z++) {
- en: context.clearRect(aliens[z].posX, aliens[z].posY, aliens[z].img.width, aliens[z].img.height);
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.clearRect(aliens[z].posX, aliens[z].posY, aliens[z].img.width, aliens[z].img.height);
- en: '}'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: if (aliens[alienLength - 1].posY > 530) {
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (aliens[alienLength - 1].posY > 530) {
- en: canvas.width = 900;
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: canvas.width = 900;
- en: context.fillStyle = "#fff";
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillStyle = "#fff";
- en: context.textAlign = "center";
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.textAlign = "center";
- en: context.font = "bold 36px Tahoma";
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.font = "bold 36px Tahoma";
- en: context.fillText("GAME OVER!", 450, 350);
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillText("GAME OVER!", 450, 350);
- en: $(canvas).blur().unbind("keydown");
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(canvas).blur().unbind("keydown");
- en: '} else {'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: for (var a = 0; a < alienLength; a++) {
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var a = 0; a < alienLength; a++) {
- en: aliens[a].posY = aliens[a].posY + 29;
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: aliens[a].posY = aliens[a].posY + 29;
- en: context.drawImage(aliens[a].img, aliens[a].posX, aliens[a].posY);
  id: totrans-565
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.drawImage(aliens[a].img, aliens[a].posX, aliens[a].posY);
- en: '}'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: 'motionInt = (dir === "right") ? setInterval(function () { alienMotion("left");
    }, alienSpeed) : setInterval(function () { alienMotion("right"); }, alienSpeed);'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'motionInt = (dir === "right") ? setInterval(function () { alienMotion("left");
    }, alienSpeed) : setInterval(function () { alienMotion("right"); }, alienSpeed);'
- en: '}'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '```'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-572
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚发生了什么?*'
- en: The first thing we do is store the length of the aliens array in a local variable.
    We'll use several `for` loops in this function, so it makes sense to retrieve
    this value only once and compare the counter variables of the `for` loops to the
    variable instead of checking the length on each iteration of the various loops.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是在一个本地变量中存储外星人数组的长度。在这个函数中我们会使用几个`for`循环，因此最好仅在开始时检索这个值，并将`for`循环的计数变量与该变量进行比较，而不是在各种循环的每次迭代中检查长度。
- en: We then use an `if` statement to check whether the `dirCounter` variable is
    less than `4`. Remember, this was one of the variables we set at the start of
    the script. If the variable is less than `4`, we first use a `for` loop to cycle
    through each item in the `aliens` array and use the `clearRect()` function to
    remove the alien from the canvas.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们使用一个`if`语句来检查`dirCounter`变量是否小于`4`。请记住，这是脚本开头设置的变量之一。如果变量小于`4`，我们首先使用一个`for`循环来遍历`aliens`数组中的每个项目，并使用`clearRect()`函数从画布中移除外星人。
- en: We then use a second `for` loop that cycles through the `aliens` array once
    more, this time updating the x position of each alien by either adding or removing
    35 from the current x position stored in the current item in the array.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用第二个`for`循环再次遍历`aliens`数组，这次更新每个外星人的x位置，根据数组中当前项目中存储的当前x位置是增加还是减少35。
- en: Whether 35 is added or removed is determined by the parameter passed into the
    function. The first time the `alienMotion()` function is called, it will receive
    the parameter `right`, so the aliens will initially move across to the canvas
    to the right. We then draw each alien in its new position. Once the `for` loop
    has finished and all of the aliens have been drawn in their new positions, we
    update the `dirCounter` variable.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 添加或移除35取决于传递给函数的参数。第一次调用`alienMotion()`函数，它将接收参数`right`，所以外星人最初会向右移动到画布。然后在新位置绘制每个外星人。一旦`for`循环完成，所有外星人都以新位置绘制，我们更新`dirCounter`变量。
- en: If the `dirCounter` variable is equal to `4`, the aliens have moved horizontally
    across the canvas as far as they should, so this time we need to move the aliens
    down the canvas line instead of across it. In this branch of the condition, we
    clear the interval that controls the horizontal movement, then reset the `dirCounter`
    variable back to `0`. We then remove the aliens from the canvas by clearing the
    rectangle that each alien covers.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`dirCounter`变量等于`4`，外星人已经水平穿过画布所需的距离，这时我们需要将外星人从画布横向移动改为向下移动。在这个条件分支中，我们清除控制横向移动的时间间隔，然后将`dirCounter`变量重置为`0`。然后通过清除每个外星人覆盖的矩形来从画布中删除外星人。
- en: Before moving the aliens down a line, we first check whether the y position
    of the last alien in the array is greater than `530`, as this is the maximum distance
    from the top of the canvas that an alien should get. If it is greater than this
    figure, at least one alien has reached the bottom of the canvas and it's game
    over for the player.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在将外星人下移一行之前，我们首先检查数组中最后一个外星人的y位置是否大于`530`，因为这是外星人应该达到的距离的最大值。如果大于这个数字，至少有一个外星人已经达到了画布底部，对于玩家来说游戏已经结束。
- en: In this case, we clear the whole canvas, removing the space ship and any surviving
    aliens, and print the text **GAME** **OVER!** on the center of the canvas. We
    also use jQuery to unbind the keyboard events that control the space ship (we'll
    add these bindings shortly).
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们清除整个画布，删除太空船和任何存活的外星人，并在画布中央打印文本**游戏结束！**。我们还使用 jQuery 解除控制太空船的键盘事件（我们很快会添加这些绑定）。
- en: If the aliens have not reached the bottom of the canvas, we instead use another
    `for` loop to iterate over each alien in the array and move each of their y positions
    down by one line, and then draw each alien in its new location.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 如果外星人还没有到达画布底部，我们会使用另一个`for`循环遍历数组中的每个外星人，并将它们的y位置向下移动一行，然后在新位置上绘制每个外星人。
- en: We then set a new interval, passing the string in the opposite direction to
    the `alienMotion()` function that was used previously. These loops of four steps,
    to the right, one step down, four steps to the left, and so on, will continue
    until the aliens reach the bottom of the canvas and the game is over. Next, we
    need to add the handlers that enable the player to control the space ship.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置一个新的间隔，向`alienMotion()`函数传递相反方向的字符串，这与先前使用的方法相反。这些四个步骤的循环，向右，向下一步，向左四步，依此类推，将持续到外星人到达画布底部并且游戏结束。接下来，我们需要添加处理程序，使玩家能够控制太空飞船。
- en: Time for action – adding handlers to control the ship
  id: totrans-582
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-添加控制飞船的处理程序
- en: 'The following block of code should replace the `onload` event handler for the
    ship image object:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块应该替换太空船图像对象的`onload`事件处理程序：
- en: '```js'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: ship.onload = function () {
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: ship.onload = function () {
- en: context.drawImage(ship, shipPos[0], shipPos[1]);
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: context.drawImage(ship, shipPos[0], shipPos[1]);
- en: addAliens();
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: addAliens();
- en: $(canvas).focus().bind("keydown", function (e) {
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: $(canvas).focus().bind("keydown", function (e) {
- en: if (e.which === 37 || e.which === 39) {
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (e.which === 37 || e.which === 39) {
- en: context.clearRect(shipPos[0], shipPos[1], ship.width, ship.height);
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.clearRect(shipPos[0], shipPos[1], ship.width, ship.height);
- en: if (e.which === 37 && shipPos[0] > 4) {
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (e.which === 37 && shipPos[0] > 4) {
- en: shipPos[0] = shipPos[0] - 4;
  id: totrans-592
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: shipPos[0] = shipPos[0] - 4;
- en: '} else if (e.which === 39 && shipPos[0] < 896 - ship.width) {'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else if (e.which === 39 && shipPos[0] < 896 - ship.width) {'
- en: shipPos[0] = shipPos[0] + 4;
  id: totrans-594
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: shipPos[0] = shipPos[0] + 4;
- en: '}'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: context.drawImage(ship, shipPos[0], shipPos[1]);
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.drawImage(ship, shipPos[0], shipPos[1]);
- en: '} else if (e.which === 32) {'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else if (e.which === 32) {'
- en: context.fillStyle = "#fff";
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillStyle = "#fff";
- en: var bulletPos = shipPos[0] + 20,
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var bulletPos = shipPos[0] + 20,
- en: newBulletPos = [bulletPos, 596],
  id: totrans-600
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: newBulletPos = [bulletPos, 596],
- en: alienLength = aliens.length,
  id: totrans-601
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: alienLength = aliens.length,
- en: fire = function () {
  id: totrans-602
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: fire = function () {
- en: if (newBulletPos[1] > 0) {
  id: totrans-603
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (newBulletPos[1] > 0) {
- en: context.clearRect(newBulletPos[0], newBulletPos[1], 3, 6);
  id: totrans-604
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.clearRect(newBulletPos[0], newBulletPos[1], 3, 6);
- en: newBulletPos[1] = newBulletPos[1] - 2;
  id: totrans-605
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: newBulletPos[1] = newBulletPos[1] - 2;
- en: context.fillRect(newBulletPos[0], newBulletPos[1], 3, 6);
  id: totrans-606
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.fillRect(newBulletPos[0], newBulletPos[1], 3, 6);
- en: for (var x = 0; x < alienLength; x++) {
  id: totrans-607
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: for (var x = 0; x < alienLength; x++) {
- en: if (newBulletPos[1] === aliens[x].posY || newBulletPos[1] === aliens[x].posY
    + aliens[x].img.height) {
  id: totrans-608
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (newBulletPos[1] === aliens[x].posY || newBulletPos[1] === aliens[x].posY
    + aliens[x].img.height) {
- en: if (newBulletPos[0] > aliens[x].posX && newBulletPos[0] - aliens[x].posX < aliens[x].img.width
    + 13) {
  id: totrans-609
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (newBulletPos[0] > aliens[x].posX && newBulletPos[0] - aliens[x].posX < aliens[x].img.width
    + 13) {
- en: context.clearRect(aliens[x].posX, aliens[x].posY, aliens[x].img.width, aliens[x].img.height);
  id: totrans-610
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.clearRect(aliens[x].posX, aliens[x].posY, aliens[x].img.width, aliens[x].img.height);
- en: aliens.splice(x, 1);
  id: totrans-611
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: aliens.splice(x, 1);
- en: clearInterval(bulletInt);
  id: totrans-612
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(bulletInt);
- en: context.clearRect(newBulletPos[0], newBulletPos[1], 3, 6);
  id: totrans-613
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.clearRect(newBulletPos[0], newBulletPos[1], 3, 6);
- en: if (!aliens.length) {
  id: totrans-614
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (!aliens.length) {
- en: clearInterval(motionInt);
  id: totrans-615
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(motionInt);
- en: dirCounter = 0;
  id: totrans-616
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dirCounter = 0;
- en: alienSpeed = alienSpeed - 100;
  id: totrans-617
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: alienSpeed = alienSpeed - 100;
- en: addAliens();
  id: totrans-618
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: addAliens();
- en: '}'
  id: totrans-619
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-620
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-621
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-622
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-623
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} else {'
- en: context.clearRect(newBulletPos[0], newBulletPos[1], 3, 6);
  id: totrans-624
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: context.clearRect(newBulletPos[0], newBulletPos[1], 3, 6);
- en: clearInterval(bulletInt);
  id: totrans-625
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: clearInterval(bulletInt);
- en: '}'
  id: totrans-626
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: bulletInt = setInterval(function () { fire(); }, 1);
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bulletInt = setInterval(function () { fire(); }, 1);
- en: '}'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '});'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '};'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-633
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We use jQuery to attach an event handler to the `<canvas>` element that listens
    for the `keydown` events. Although we're not providing support for IE and so don't
    need jQuery for its cross-browser normalization when attaching events, it still
    makes the event handling process much easier.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 jQuery 为`<canvas>`元素附加事件处理程序，监听`keydown`事件。尽管我们不需要jQuery用于在附加事件时进行跨浏览器规范化支持IE，但其仍使事件处理过程更加简单。
- en: Within the function that is executed whenever a `keydown` event is detected,
    we check for the presence of either the left or right arrow keys, which have a
    `which` property in the event object of `37` and `39`, or the spacebar, which
    has the code `32`.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测到 `keydown` 事件时执行的函数内部，我们检查左箭头或右箭头键的存在，这些键在事件对象的 `which` 属性中分别为 `37` 和 `39`，或者检查空格键，其代码为
    `32`。
- en: If the code `37` or `39` is detected, we then use a nested `if` statement to
    determine between the two keys. We also check that the ship hasn't reached either
    the left edge, or the right edge of the canvas.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到代码 `37` 或 `39`，则我们使用嵌套的 `if` 语句来区分这两个键。我们还检查飞船是否已经到达了画布的左边缘或右边缘。
- en: We then use the `clearRect()` function to remove the ship and draw a new one
    either 4 pixels to the left, or 4 pixels to the right depending on which key was
    pressed. This gives the ship left and right motion along the bottom of the canvas.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用 `clearRect()` 函数删除飞船，并在左侧或右侧绘制新的飞船，具体取决于按下的键是左箭头还是右箭头。这样一来，飞船就在画布底部左右移动。
- en: The second branch of the outer conditional deals with the spacebar being pressed,
    which causes a bullet to leave the ship and travel in a straight line to the top
    of the canvas. The bullets will be white, so we set the `fillStyle` property of
    the canvas to `#fff`.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 外层条件语句的第二个分支处理按下空格键的情况，这将导致子弹离开飞船直线向画布顶部移动。子弹将是白色的，因此我们将画布的 `fillStyle` 属性设置为
    `#fff`。
- en: We also declare some more local variables here including `bulletPos`, which
    is the current position of the bullet plus half of the width of the ship, and
    an array to hold the x and y coordinates of the bullet. The values for this array
    are set to the `bulletPos` variable for the x position, and directly above the
    nose of the ship for the y position. We also store the length of the aliens array
    as a local variable for use in a `for` loop once again.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在此处声明了一些局部变量，包括 `bulletPos`，它是子弹的当前位置加上飞船宽度的一半，并且声明一个数组来保存子弹的 x 和 y 坐标。该数组的值设置为子弹的
    x 位置，以及飞船鼻子正上方的位置。我们还将外星人数组的长度存储为局部变量，以便再次在 `for` 循环中使用。
- en: We define an inline function along with our variables called `fire()`. This
    function is used in conjunction with an interval to create the motion of the bullet.
    Within this function, we check that the bullet hasn't reached the top of the canvas,
    and provided it hasn't, that is, if its y position is greater than `0`, we remove
    the bullet with the `clearRect()` function, then update the values in the `bulletPos`
    array and draw the bullet in its new location using the updated values from the
    array.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个内联函数和我们的变量，名为 `fire()`。该函数与间隔一起使用以创建子弹的运动。在此函数中，我们检查子弹是否未到达画布顶部，并且只要它未到达，也就是说，如果其
    y 位置大于 `0`，我们就使用 `clearRect()` 函数移除子弹，然后更新 `bulletPos` 数组中的值，并使用数组中的更新值在新位置绘制子弹。
- en: Once the position of the bullet has been updated, we then need to check whether
    the bullet, in its new position, has collided with an alien or not, so we use
    a `for` loop to iterate over each alien in the aliens array.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 更新子弹位置后，我们需要检查子弹在新位置是否与外星人发生碰撞，因此我们使用 `for` 循环迭代 aliens 数组中的每个外星人。
- en: On each iteration, we first check whether the bullet falls within the y axis
    of an alien, that is, whether its position is less than the bottom edge of an
    alien, but more than its top edge. The aliens are positioned according to their
    top-left corner, so to work out whether the bullet has passed its bottom edge
    we just add the height of an alien to its y position.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，我们首先检查子弹是否在外星人的 y 轴范围内，即其位置是否小于外星人的底部边缘，但大于其顶部边缘。外星人的位置是根据其左上角确定的，因此要判断子弹是否已经通过了其底部边缘，我们只需将外星人的高度添加到其
    y 位置即可。
- en: If the bullet does fall within the alien on the y axis, we then check whether
    it falls within the space an alien is taking up along the x axis. If it does,
    we remove the alien from the canvas with the `clearRect()` function and splice
    the alien out of the array so that it stays removed.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 如果子弹在 y 轴上与外星人重叠，则我们检查其在 x 轴上是否与外星人所占据的空间重叠。如果是，则使用 `clearRect()` 函数从画布上移除外星人，并从数组中删除外星人，以确保其不再出现。
- en: We then remove the bullet from the canvas using the `clearRect()` function again,
    and clear the `bulletInt` interval. If there are no more aliens left, we clear
    the interval producing the motion of the aliens, reset the `dirCounter` variable,
    reduce the `alienSpeed` variable by `100`, and then call the `addAliens()` function
    to redraw the aliens at the top of the canvas.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们再次使用`clearRect()`函数从画布中移除子弹，并清除`bulletInt`间隔。如果没有更多的外星人了，我们会清除产生外星人运动的间隔，重置`dirCounter`变量，将`alienSpeed`变量减小`100`，然后调用`addAliens()`函数在画布顶部重新绘制外星人。
- en: This is effectively how the player moves up to the next level, and each time
    the aliens are redrawn they move faster, creating basic progression of the game.
    This now brings us to the end of the code. If we run the game now in a standard-compliant
    browser, such as Firefox or Chrome, we should find that we have a perfectly playable
    game, implemented entirely using JavaScript and the `<canvas>` element.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是玩家升级到下一级的方式，每次重新绘制外星人时，它们移动得更快，从而创建了游戏的基本进展。现在我们来到了代码的结尾。如果我们现在在兼容标准的浏览器中运行游戏，比如Firefox或Chrome，我们应该发现我们有一个完全可玩的游戏，完全使用JavaScript和`<canvas>`元素实现。
- en: Pop quiz – creating canvas-based games
  id: totrans-646
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 爆炸小测验——创建基于画布的游戏
- en: Q1\. In this example, a lot of features related to the player's space ship was
    put into an `onload` event handler. Why?
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 在这个例子中，与玩家的太空飞船相关的许多特性都被放置在一个`onload`事件处理程序中。为什么？
- en: Because we cannot interact with an image until it has loaded completely
  id: totrans-648
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为在图像完全加载之前，我们无法与图像进行交互
- en: To make the code work correctly in Internet Explorer
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让代码在Internet Explorer中正确工作
- en: Because the code runs faster once the image has finished loading
  id: totrans-650
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为图像加载完成后，代码运行速度更快
- en: To help make our code more modular
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 帮助使我们的代码更模块化
- en: Q2\. Why did we set the `textAlign` property of the canvas to center when writing
    the **GAME** **OVER!** message?
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 当写下**GAME** **OVER!**消息时，为什么我们将画布的`textAlign`属性设置为居中？
- en: Setting the alignment is a prerequisite for writing text to the canvas
  id: totrans-653
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置对齐是将文本写入画布的先决条件
- en: Because it is easier than working out the width of the text and then setting
    its position on the x axis in order to position the text in the center of the
    canvas
  id: totrans-654
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为相比于计算文本的宽度并在x轴上设置其位置以将文本定位在画布中心，这种方法更简单。
- en: To anti-alias the text
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使文本具有反锯齿效果
- en: Because it is more efficient than using padding
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为与使用填充相比更有效率
- en: Have a go hero – extending the space invaders clone
  id: totrans-657
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试看吧——扩展太空入侵克隆
- en: Our game is a much simpler version of the original space invaders. The original
    arcade game had many other features including aliens that fired back at the player's
    ship, bases to hide behind, and one-off special aliens that appeared randomly
    throughout the game and dropped bonuses when hit.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏是原始太空入侵的一个简化版本。原始的街机游戏还有许多其他功能，包括外星人向玩家的飞船开火、可以躲藏在后面的基地，以及在游戏中随机出现并击中时会掉落奖励的一次性特殊外星人。
- en: Certainly, one thing that the game needs is a scoring mechanism; otherwise there
    is simply no incentive to play. Implement a scoring system that tracks a player's
    score throughout the game and saves the highest score to the player's machine.
    This could be done easily with jQuery and the cookie plugin, or using LocalStorage.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，游戏需要的一件事情是计分机制；否则就没有动力玩了。实现一个计分系统，跟踪玩家在整个游戏中的得分，并将最高分保存到玩家的机器上。这可以很容易地通过jQuery和cookie插件，或者使用LocalStorage来实现。
- en: I'd also urge you, as this is the last example of the book, to implement some
    of the other missing features, such as giving the aliens the ability to fire back
    and adding bases or shields that the player can hide beneath when the going gets
    tough.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是本书的最后一个例子，我还要敦促你实现一些其他缺失的功能，比如让外星人具有还击能力，并添加玩家在困境中可以躲藏在其下的基地或护盾。
- en: Summary
  id: totrans-661
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the HTML5 `<canvas>` element and saw how it can
    be used to create simple and static images, basic animations, and even complex
    interactive games. It provides a rich API that allows us to interact with it programmatically
    and gives us complete pixel-level control over an area of the page.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了HTML5的`<canvas>`元素，并了解了它如何用于创建简单静态图像、基本动画，甚至复杂的交互式游戏。它提供了丰富的API，允许我们以编程方式与之交互，并完全控制页面上的一个区域的像素级别。
- en: In this chapter, we covered the `HTMLCanvasElement` interface, drawing to the
    `<canvas>` element, creating animations on the `<canvas>` element, and we also
    created an interactive game with the `<canvas>` element. Like with the CSS3 examples
    from the last chapter, there are no methods or properties in jQuery specifically
    for use with `<canvas>`, although there has been a number of plugins that combine
    the power of `<canvas>` with the ease of jQuery, and several projects that extend
    the jQuery's `animate()` method to allow it work on objects drawn to the canvas.
    For more information on this, a good starting point is Steven Wittens' blog at
    [http://acko.net/blog/abusing-jquery-animate-for-fun-and-profit-and-bacon](http://acko.net/blog/abusing-jquery-animate-for-fun-and-profit-and-bacon).
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了`HTMLCanvasElement`接口，绘制到`<canvas>`元素，创建`<canvas>`元素上的动画，我们还使用`<canvas>`元素创建了一个交互式游戏。与上一章的
    CSS3 示例一样，jQuery 没有专门用于`<canvas>`的方法或属性，尽管有一些插件结合了`<canvas>`的强大功能和 jQuery 的易用性，并且有几个项目扩展了
    jQuery 的`animate()`方法，使其能够在画布上绘制的对象上工作。有关更多信息，请参阅 Steven Wittens 的博客 [http://acko.net/blog/abusing-jquery-animate-for-fun-and-profit-and-bacon](http://acko.net/blog/abusing-jquery-animate-for-fun-and-profit-and-bacon)。
- en: We've now reached the end of the book. I hope that over these 10 chapters, I've
    given you a solid foundation for producing animations using jQuery that acts as
    a solid starting point for you to bring your web-based UIs to life.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经到达了本书的结尾。我希望在这 10 章中，我已经为您提供了一个扎实的基础，以便使用 jQuery 制作动画，这是一个坚实的起点，让您的基于网络的用户界面生动起来。
