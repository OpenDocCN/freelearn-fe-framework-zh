["```js\n// store.ts\nimport create from \"zustand\";\nexport const store = create(() => ({ count: 0 }));\n```", "```js\nconsole.log(store.getState()); // ---> { count: 0 }\nstore.setState({ count: 1 });\nconsole.log(store.getState()); // ---> { count: 1 }\n```", "```js\nconst state1 = store.getState();\nstate1.count = 2; // invalid\nstore.setState(state1);\n```", "```js\nstore.setState((prev) => ({ count: prev.count + 1 }));\n```", "```js\nexport const store = create(() => ({\n  count: 0,\n  text: \"hello\",\n}));\n```", "```js\nstore.setState({\n  count: 1,\n  text: \"hello\",\n});\n```", "```js\nconsole.log(store.getState());\nstore.setState({\n  count: 2,\n});\nconsole.log(store.getState());\n```", "```js\nObject.assign({}, oldState, newState);\n```", "```js\nstore.subscribe(() => {\n  console.log(\"store state is changed\");\n});\nstore.setState({ count: 3 });\n```", "```js\n// store.ts\nimport create from \"zustand\";\nexport const useStore = create(() => ({\n  count: 0,\n  text: \"hello\",\n}));\n```", "```js\nimport { useStore } from \"./store.ts\";\nconst Component = () => {\n  const { count, text } = useStore();\n  return <div>count: {count}</div>;\n};\n```", "```js\nconst Component = () => {\n  const count = useStore((state) => state.count);\n  return <div>count: {count}</div>;\n};\n```", "```js\nconst Component = () => {\n  const [{ count }] = useStore(\n    (state) => [{ count: state.count }]\n  );\n  return <div>count: {count}</div>;\n};\n```", "```js\ntype StoreState = {\n  count1: number;\n  count2: number;                                        \n};                      \nconst useStore = create<StoreState>(() => ({\n  count1: 0,\n  count2: 0,\n}));\n```", "```js\nconst selectCount1 = (state: StoreState) => state.count1;\nconst Counter1 = () => {\n  const count1 = useStore(selectCount1);\n  const inc1 = () => {\n    useStore.setState(\n      (prev) => ({ count1: prev.count1 + 1 })\n    );\n  };\n  return (\n    <div>           \n      count1: {count1} <button onClick={inc1}>+1</button>\n    </div>\n  );\n};\n```", "```js\ntype StoreState = {\n  count1: number;\n  count2: number;                                        \n  inc1: () => void;\n  inc2: () => void;\n};                      \nconst useStore = create<StoreState>((set) => ({\n  count1: 0,\n  count2: 0,\n  inc1: () => set(\n    (prev) => ({ count1: prev.count1 + 1 })\n  ),\n  inc2: () => set(\n    (prev) => ({ count2: prev.count2 + 1 })\n  ),\n}));\n```", "```js\nconst selectCount2 = (state: StoreState) => state.count2;\nconst selectInc2 = (state: StoreState) => state.inc2;\nconst Counter2 = () => {\n  const count2 = useStore(selectCount2);\n  const inc2 = useStore(selectInc2);\n  return (\n    <div>\n      count2: {count2} <button onClick={inc2}>+1</button>\n    </div>\n  );\n};\n```", "```js\nconst Total = () => {\n  const count1 = useStore(selectCount1);\n  const count2 = useStore(selectCount2);\n  return (\n    <div>\n      total: {count1 + count2}\n    </div>\n  );\n};\n```", "```js\nconst selectTotal = \n  (state: StoreState) => state.count1 + state.count2;\nconst Total = () => {\n  const total = useStore(selectTotal);\n  return (\n    <div>\n      total: {total}\n    </div>\n  );\n};\n```", "```js\nconst useStore = create((set) => ({\n  count1: 0,\n  count2: 0,\n  total: 0,\n  inc1: () => set((prev) => ({\n    ...prev,\n    count1: prev.count1 + 1,\n    total: prev.count1 + 1 + prev.count2,\n  })),\n  inc2: () => set((prev) => ({\n    ...prev,\n    count2: prev.count2 + 1,\n    total: prev.count2 + 1 + prev.count1,\n  })),\n}));\n```", "```js\nconst App = () => (\n  <>\n    <Counter1 />\n    <Counter2 />\n    <Total />\n  </>\n);\n```", "```js\ntype Todo = {\n  id: number;\n  title: string;\n  done: boolean;\n};\n```", "```js\ntype StoreState = {\n  todos: Todo[];\n  addTodo: (title: string) => void;\n  removeTodo: (id: number) => void;\n  toggleTodo: (id: number) => void;\n};\n```", "```js\nlet nextId = 0;\nconst useStore = create<StoreState>((set) => ({\n  todos: [],\n  addTodo: (title) =>\n    set((prev) => ({\n      todos: [\n        ...prev.todos,\n        { id: ++nextId, title, done: false },\n      ],\n    })),\n  removeTodo: (id) =>\n    set((prev) => ({\n      todos: prev.todos.filter((todo) => todo.id !== id),\n    })),\n  toggleTodo: (id) =>\n    set((prev) => ({\n      todos: prev.todos.map((todo) =>\n        todo.id === id ? { ...todo, done: !todo.done } :\n          todo\n      ),\n    })),\n}));\n```", "```js\nconst selectRemoveTodo = \n  (state: StoreState) => state.removeTodo;\nconst selectToggleTodo = \n  (state: StoreState) => state.toggleTodo;\nconst TodoItem = ({ todo }: { todo: Todo }) => {\n  const removeTodo = useStore(selectRemoveTodo);\n  const toggleTodo = useStore(selectToggleTodo);\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        checked={todo.done}\n        onChange={() => toggleTodo(todo.id)}\n      />\n      <span\n        style={{\n          textDecoration: \n            todo.done ? \"line-through\" : \"none\",\n        }}\n      >\n        {todo.title}\n      </span>\n      <button\n        onClick={() => removeTodo(todo.id)}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst MemoedTodoItem = memo(TodoItem);\n```", "```js\nconst selectTodos = (state: StoreState) => state.todos;\nconst TodoList = () => {\n  const todos = useStore(selectTodos);\n  return (\n    <div>\n      {todos.map((todo) => (\n        <MemoedTodoItem key={todo.id} todo={todo} />\n      ))}\n    </div>\n  );\n};\n```", "```js\nconst selectAddTodo = (state: StoreState) => state.addTodo;\nconst NewTodo = () => {\n  const addTodo = useStore(selectAddTodo);\n  const [text, setText] = useState(\"\");\n  const onClick = () => {\n    addTodo(text);\n    setText(\"\"); // [1]\n  };\n  return (\n    <div>\n      <input\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={onClick} disabled={!text}> // [2]\n        Add\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <TodoList />\n    <NewTodo />\n  </>\n);\n```", "```js\nconst countObj = { value: 0 };\nconst Component = () => {\n  const [count, setCount] = useState(countObj);\n  const handleClick = () => {\n    setCount(countObj);\n  };\n  useEffect(() => {\n    console.log(\"component updated\");\n  });\n  return (\n    <>\n      {count.value}\n      <button onClick={handleClick}>Update</button>\n    </>\n  );\n};\n```", "```js\n  const handleClick = () => {\n    countObj.value += 1;\n    setCount(countObj);\n  };\n```"]