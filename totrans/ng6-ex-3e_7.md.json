["```js\nng test\n```", "```js\nimport { SecondsToTimePipe } from './seconds-to-time.pipe';\ndescribe('SecondsToTimePipe', () => {\n  const pipe = new SecondsToTimePipe();\n  it('should convert integer to time format', () => {\n      expect(pipe.transform(5)).toEqual('00:00:05');\n      expect(pipe.transform(65)).toEqual('00:01:05');\n      expect(pipe.transform(3610)).toEqual('01:00:10');\n  });\n});\n```", "```js\nng test\n```", "```js\nexpect(pipe.transform(5, [])).toEqual('00:00:06'); \n```", "```js\nimport { inject, fakeAsync, async, tick, TestBed, discardPeriodicTasks } from '@angular/core/testing';\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs/observable/of';\n\nimport { WorkoutPlan, ExercisePlan, Exercise } from '../core/model';\nimport { WorkoutRunnerComponent } from './workout-runner.component';\nimport { SecondsToTimePipe } from '../shared/seconds-to-time.pipe';\nimport { WorkoutService } from '../core/workout.service';\nimport { WorkoutHistoryTrackerService } from '../core/workout-history-tracker.service';\n```", "```js\nclass MockWorkoutHistoryTracker { \n    startTracking() {} \n    endTracking() {} \n    exerciseComplete() {} \n} \n```", "```js\nclass MockWorkoutService {\n\n    sampleWorkout = new WorkoutPlan(\n         'testworkout',\n         'Test Workout',\n          40,\n          [\n              new ExercisePlan(new Exercise( 'exercise1', 'Exercise 1', 'Exercise 1 description', \n                                               '/image1/path', 'audio1/path'), 50),\n              new ExercisePlan(new Exercise( 'exercise1', 'Exercise 2', 'Exercise 2 description', \n                                               '/image2/path', 'audio2/path'), 30),\n              new ExercisePlan(new Exercise( 'exercise1', 'Exercise 3', 'Exercise 3 description', \n                                               '/image3/path', 'audio3/path'), 20)\n          ],\n          'This is a test workout'\n    );\n\n    getWorkout(name: string) {\n        return of(this.sampleWorkout);\n    }\n    totalWorkoutDuration() {\n        return 180;\n    }\n} \n```", "```js\nexport class MockRouter {\n    navigate = jasmine.createSpy('navigate');\n}\n```", "```js\ndescribe('Workout Runner', () =>{ \n    let fixture:any; \n    let runner:any; \n```", "```js\nbeforeEach( async(() =>{ \n    TestBed \n        .configureTestingModule({ \n            declarations: [ WorkoutRunnerComponent, SecondsToTimePipe ], \n            providers: [ \n                {provide: Router, useClass: MockRouter}, \n                {provide: WorkoutHistoryTracker ,useClass: \n                MockWorkoutHistoryTracker}, \n                {provide: WorkoutService ,useClass: MockWorkoutService} \n            ], \n            schemas: [ NO_ERRORS_SCHEMA ] \n        }) \n        .compileComponents() \n        .then(() => { \n            fixture = TestBed.createComponent(WorkoutRunnerComponent); \n            runner = fixture.componentInstance; \n        }); \n}));  \n```", "```js\ndeclarations: [ WorkoutRunnerComponent, SecondsToTimePipe ], \n```", "```js\nproviders: [ \n    {provide: Router, useClass: MockRouter}, \n    {provide: WorkoutHistoryTracker ,useClass: MockWorkoutHistoryTracker}, \n    {provide: WorkoutService ,useClass: MockWorkoutService} \n], \n```", "```js\nschemas: [ NO_ERRORS_SCHEMA ] \n```", "```js\n.compileComponents() \n.then(() => { \n    fixture = TestBed.createComponent(WorkoutRunnerComponent); \n    runner = fixture.componentInstance; \n}); \n```", "```js\nit('should start the workout', () => { \n    expect(runner.workoutTimeRemaining).toEqual(runner.workoutPlan.totalWorkoutDuration()); \n    expect(runner.workoutPaused).toBeFalsy(); \n});  \n```", "```js\n        it('should start the workout', () => { \n runner.ngOnInit(); runner.ngDoCheck(); \n            expect(runner.workoutTimeRemaining).toEqual(\n                   runner.workoutPlan.totalWorkoutDuration()); \n            expect(runner.workoutPaused).toBeFalsy(); \n        }); \n```", "```js\nit('should start the first exercise', () => { \n    spyOn(runner, 'startExercise').and.callThrough(); \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    expect(runner.currentExerciseIndex).toEqual(0); \n    expect(runner.startExercise).toHaveBeenCalledWith(\n    runner.workoutPlan.exercises[runner.currentExerciseIndex]); \n    expect(runner.currentExercise).toEqual(\n    runner.workoutPlan.exercises[0]); \n}); \n```", "```js\nit(\"should start history tracking\", inject([WorkoutHistoryTracker], (tracker: WorkoutHistoryTracker) => { \n     spyOn(tracker, 'startTracking'); \n     runner.ngOnInit(); \n     runner.ngDoCheck(); \n     expect(tracker.startTracking).toHaveBeenCalled(); \n })); \n```", "```js\n@Output() workoutStarted: EventEmitter<WorkoutPlan> = new EventEmitter<WorkoutPlan>(); \n```", "```js\nit('should start the workout', () => { \n runner.workoutStarted.subscribe((w: any) => { expect(w).toEqual(runner.workoutPlan); }); \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    expect(runner.workoutTimeRemaining).toEqual(\n    runner.workoutPlan.totalWorkoutDuration()); \n    expect(runner.workoutPaused).toBeFalsy(); \n}); \n```", "```js\n    it('should increase current exercise duration with time', fakeAsync(() => {\n        runner.ngOnInit();\n        runner.ngDoCheck();\n        expect(runner.exerciseRunningDuration).toBe(0);\n        tick(1000);\n        expect(runner.exerciseRunningDuration).toBe(1);\n        tick(1000);\n        expect(runner.exerciseRunningDuration).toBe(2);\n        tick(8000);\n        expect(runner.exerciseRunningDuration).toBe(10);\n        discardPeriodicTasks();\n    })); \n```", "```js\nit(\"should transition to next exercise on one exercise complete\", fakeAsync(() => { \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    let exerciseDuration = runner.workoutPlan.exercises[0].duration; \n    TestHelper.advanceWorkout(exerciseDuration); \n    expect(runner.currentExercise.exercise.name).toBe('rest'); \n    expect(runner.currentExercise.duration).toBe(\n    runner.workoutPlan.restBetweenExercise); \n    discardPeriodicTasks();\n})); \n```", "```js\nclass TestHelper {\n    static advanceWorkout(duration: number) {\n        for (let i = 0; i <= duration; i++) {tick(1000);\n    }\n}\n```", "```js\nit(\"should not update workoutTimeRemaining for paused workout on \n    interval lapse\", fakeAsync(() => { \n    runner.ngOnInit(); \n    runner.ngDoCheck(); \n    expect(runner.workoutPaused).toBeFalsy(); \n    tick(1000); \n    expect(runner.workoutTimeRemaining).toBe(\n    runner.workoutPlan.totalWorkoutDuration() - 1); \n    runner.pause(); \n    expect(runner.workoutPaused).toBe(true); \n    tick(1000); \n    expect(runner.workoutTimeRemaining).toBe(\n    runner.workoutPlan.totalWorkoutDuration() - 1); \n    discardPeriodicTasks();\n})); \n```", "```js\nimport { TestBed, inject, async, fakeAsync } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n\nimport { WorkoutService } from './workout.service';\nimport { WorkoutPlan, Exercise } from './model';\n```", "```js\ndescribe('Workout Service', () => { \n  const collectionUrl = '...[mongo connnection url]...';\n  const apiKey = '...[mongo key]...';\n  const params = '?apiKey=' + apiKey;\n  let httpClient: HttpClient;\n  let httpTestingController: HttpTestingController;\n  let workoutService: WorkoutService;\n```", "```js\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ WorkoutService ],\n    });\n    httpClient = TestBed.get(HttpClient);\n    httpTestingController = TestBed.get(HttpTestingController);\n    workoutService = TestBed.get(WorkoutService);\n  });\n```", "```js\n afterEach(() => {\n   httpTestingController.verify();\n });\n```", "```js\nit('should be created', inject([WorkoutService], (service: WorkoutService) => {\n   expect(service).toBeTruthy();\n }));\n```", "```js\nit('can instantiate service with \"new\"', inject([HttpClient], (http: HttpClient) => {\n    expect(http).not.toBeNull('http should be provided');\n    const service = new WorkoutService(http);\n    expect(service instanceof WorkoutService).toBe(true, 'new service should be ok');\n}));\n```", "```js\n  it('should should return all workout plans', () => {\n    let expectedWorkouts: WorkoutPlan[];\n    let actualWorkouts: WorkoutPlan[];\n\n    expectedWorkouts = [\n      { name: 'Workout1', title: 'workout1' },\n      { name: 'Workout2', title: 'workout2' },\n      { name: 'Workout3', title: 'workout3' },\n      { name: 'Workout4', title: 'workout4' }\n    ] as WorkoutPlan[];\n\n     workoutService.getWorkouts().subscribe(\n      workouts => actualWorkouts = workouts,\n      fail\n    );\n    const req = httpTestingController.expectOne(workoutService.collectionsUrl + '/workouts' + params );\n    expect(req.request.method).toEqual('GET');\n    req.flush(expectedWorkouts);\n    expect(actualWorkouts === expectedWorkouts);\n  });\n```", "```js\nconst req1 = httpTestingController.expectOne(workoutService.collectionsUrl + '/exercises' + params);\nexpect(req1.request.method).toEqual('GET');\nreq1.flush(allExercises);\n\nconst req2 = httpTestingController.expectOne(workoutService.collectionsUrl + '/workouts/Workout1' + params);\nexpect(req2.request.method).toEqual('GET');\nreq2.flush(expectedWorkout);\n```", "```js\n@Component({\n    template: `\n      <form>\n      <input type=\"text\" name=\"workoutName\"\n      id=\"workout-name\" [(ngModel)]=\"workoutName\"\n      abeRemoteValidator=\"workoutname\" [validateFunction]=\"validateWorkoutName\">\n      </form>\n    `\n}) \nexport class TestComponent { \n    workoutName: string; \n\n    constructor() { \n        this.workoutName = '7MinWorkout'; \n    } \n    validateWorkoutName = (name: string): Promise<boolean> => { \n        return Promise.resolve(false); \n    } \n} \n```", "```js\ndescribe('RemoteValidator', () => { \n    let fixture: any; \n    let comp: any; \n    let debug: any; \n    let input: any; \n\n    beforeEach(async(() => { \n        TestBed.configureTestingModule({ \n            imports: [ FormsModule ], \n            declarations: [ TestComponent, RemoteValidatorDirective ] \n        }); \n        fixture = TestBed.createComponent(TestComponent); \n        comp = fixture.componentInstance; \n        debug = fixture.debugElement; \n        input = debug.query(By.css('[name=workoutName]')); \n    }));  \n```", "```js\nit(\"should load the directive without error\", fakeAsync(() => {\n    expect(input.attributes.a2beRemoteValidator).toBe('workoutname',  'remote validator directive should be loaded.')\n}));\n```", "```js\n    it('should create error if remote validation fails', fakeAsync(() => {\n        spyOn(comp, 'validateWorkoutName').and.callThrough();\n        fixture.detectChanges();\n        input.nativeElement.value = '6MinWorkout';\n        tick();\n\n        const form: NgForm = debug.children[0].injector.get(NgForm);\n        const control = form.control.get('workoutName');\n\n        expect(comp.validateWorkoutName).toHaveBeenCalled();\n        expect(control.hasError('workoutname')).toBe(true);\n        expect(control.valid).toBe(false);\n        expect(form.valid).toEqual(false);\n        expect(form.control.valid).toEqual(false);\n        expect(form.control.hasError('workoutname', ['workoutName'])).toEqual(true);\n    }));\n```", "```js\n    it('should not create error if remote validation succeeds', fakeAsync(() => {\n        spyOn(comp, 'validateWorkoutName').and.returnValue(Promise.resolve(true));\n        fixture.detectChanges();\n        input.nativeElement.value = '6MinWorkout';\n        tick();\n\n        const form: NgForm = debug.children[0].injector.get(NgForm);\n        const control = form.control.get('workoutName');\n\n        expect(comp.validateWorkoutName).toHaveBeenCalled();\n        expect(control.hasError('workoutname')).toBe(false);\n        expect(control.valid).toBe(true);\n        expect(form.control.valid).toEqual(true);\n        expect(form.valid).toEqual(true);\n        expect(form.control.hasError('workoutname', ['workoutName'])).toEqual(false);\n    }));\n```", "```js\nexpect(element(by.id(\"start\")).getText()).toBe(\"Select Workout\"); \n```", "```js\nconst { SpecReporter } = require('jasmine-spec-reporter');\n\nexports.config = {\n    . . .\n  jasmineNodeOpts: {\n    showColors: true,\n    defaultTimeoutInterval: 60000,\n    print: function() {}\n  },\n    . . .\n};\n```", "```js\nng e2e\n```", "```js\nimport { AppPage } from './app.po';\n\ndescribe('Personal Trainer App', () => {\n  let page: AppPage;\n\n  beforeEach(() => {\n    page = new AppPage();\n  });\n\n  it('should display welcome message', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('Ready for a Workout?');\n  });\n})\n```", "```js\nimport { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get('/');\n  }\n\n  getParagraphText() {\n    return element(by.css('abe-root h1')).getText();\n  }\n}\n```", "```js\nit('should search workout with specific name.', () => {\n    const filteredWorkouts = element.all(by.css('.workout.tile'));\n    expect(filteredWorkouts.count()).toEqual(5);\n\n    const searchInput = element(by.css('.form-control'));\n    searchInput.sendKeys('1 Minute Workout');\n\n    expect(filteredWorkouts.count()).toEqual(1);\n    expect(filteredWorkouts.first().element(by.css('.title')).getText()).toBe('1 Minute Workout');\n});\n```", "```js\nit('should navigate to workout runner.', () => {\n    const filteredWorkouts = element.all(by.css('.workout.tile'));\n    filteredWorkouts.first().click();\n    expect(browser.getCurrentUrl()).toContain('/workout/1minworkout');\n}) \n```", "```js\nimport { browser, by, element } from 'protractor';\n\nexport class WorkoutRunnerPage {\n  pauseResume: any;\n  playButton: any;\n  pauseButton: any;\n  exerciseTitle: any;\n  exerciseDescription: any;\n  exerciseTimeRemaining; any;\n\n  constructor() {\n      this.pauseResume = element(by.id('pause-overlay'));\n      this.playButton = element.all(by.css('.ion-md-play'));\n      this.pauseButton = element.all(by.css('.ion-md-pause'));\n      this.exerciseTitle = element(by.id('exercise-pane')).element(by.tagName('h1')).getText();\n      this.exerciseDescription = element.all(by.className('card-text')).first().getText();\n      this.exerciseTimeRemaining = element(by.id('exercise-pane')).all(by.tagName('h4')).first().getText();\n  }\n}\n```", "```js\ndescribe('Workout Runner page', () => {\n    beforeEach(() => {\n        browser.get('/workout/1minworkout');\n    });\n\n    it('should load workout data', () => {\n        browser.waitForAngularEnabled(false);\n        const page = new WorkoutRunnerPage();\n        page.pauseResume.click();\n        expect(page.exerciseTitle).toBe('Jumping Jacks');\n        expect(page.exerciseDescription)\n          .toBe('A jumping jack or star jump, also called side-straddle hop is a physical jumping exercise.');\n    });\n```", "```js\nit('should pause workout when paused button clicked', () => {\n    const page = new WorkoutRunnerPage();\n    let timeRemaining;\n    browser.waitForAngularEnabled(false);\n\n    page.pauseResume.click();\n    expect(page.playButton.count()).toBe(1);\n    expect(page.pauseButton.count()).toBe(0);\n\n    page.exerciseTimeRemaining.then((time) => {\n        timeRemaining = time;\n        browser.sleep(3000);\n    });\n    page.exerciseTimeRemaining.then((time) => {\n        expect(page.exerciseTimeRemaining).toBe(timeRemaining);\n    });\n});\n```"]