["```js\nconst connectedMap = {\n  none: \"Disconnected\",\n  unknown: \"Disconnected\",\n  cellular: \"Connected\",\n  wifi: \"Connected\",\n  bluetooth: \"Connected\",\n  ethernet: \"Connected\",\n  wimax: \"Connected\",\n  vpn: \"Connected\",\n  other: \"Connected\",\n} as const; \n```", "```js\nexport default function App() {\n  const [connected, setConnected] = useState(\"\");\n  useEffect(() => {\n    function onNetworkChange(connection: NetInfoState) {\n      const type = connection.type;\n      setConnected(connectedMap[type]);\n    }\n    const unsubscribe = NetInfo.addEventListener(onNetworkChange);\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  return (\n    <View style={styles.container}>\n      <Text>{connected}</Text>\n    </View>\n  );\n} \n```", "```js\nnpx expo install @react-native-async-storage/async-storage \n```", "```js\nexport default function App() {\n  const [key, setKey] = useState(\"\");\n  const [value, setValue] = useState(\"\");\n  const [source, setSource] = useState<KeyValuePair[]>([]); \n```", "```js\n function setItem() {\n    return AsyncStorage.setItem(key, value)\n      .then(() => {\n        setKey(\"\");\n        setValue(\"\");\n      })\n      .then(loadItems);\n  }\n  function clearItems() {\n    return AsyncStorage.clear();\n  }\n  async function loadItems() {\n    const keys = await AsyncStorage.getAllKeys();\n    const values = await AsyncStorage.multiGet(keys);\n    setSource([...values]);\n  }\n  useEffect(() => {\n    loadItems();\n  }, []); \n```", "```js\n return (\n    <View style={styles.container}>\n      <Text>Key:</Text>\n      <TextInput\n        style={styles.input}\n        value={key}\n        onChangeText={(v) => {\n          setKey(v);\n        }}\n      />\n      <Text>Value:</Text>\n      <TextInput\n        style={styles.input}\n        value={value}\n        onChangeText={(v) => {\n          setValue(v);\n        }}\n      />\n      <View style={styles.controls}>\n        <Button label=\"Add\" onPress={setItem} />\n        <Button label=\"Clear\" onPress={clearItems} />\n      </View> \n```", "```js\n <View style={styles.list}>\n        <FlatList\n          data={source.map(([key, value]) => ({\n            key: key.toString(),\n            value,\n          }))}\n          renderItem={({ item: { value, key } }) => (\n            <Text>\n              {value} ({key})\n            </Text>\n          )}\n        />\n      </View>\n    </View>\n  ); \n```", "```js\nexport function set(key: Key, value: boolean) {\n  return new Promise((resolve, reject) => {\n    if (connected) {\n      fakeNetworkData[key] = value;\n      resolve(true);\n    } else {\n      AsyncStorage.setItem(key, value.toString()).then(\n        () => {\n          unsynced.push(key);\n          resolve(false);\n        },\n        (err) => reject(err)\n      );\n    }\n  });\n} \n```", "```js\nexport function get(key?: Key): Promise<boolean | typeof fakeNetworkData> {\n  return new Promise((resolve, reject) => {\n    if (connected) {\n      resolve(key ? fakeNetworkData[key] : fakeNetworkData);\n    } else if (key) {\n      AsyncStorage.getItem(key)\n        .then((item) => resolve(item === \"true\"))\n        .catch((err) => reject(err));\n    } else {\n      AsyncStorage.getAllKeys()\n        .then((keys) =>\n          AsyncStorage.multiGet(keys).then((items) =>\n            resolve(Object.fromEntries(items) as any)\n          )\n        )\n        .catch((err) => reject(err));\n    }\n  });\n} \n```", "```js\nNetInfo.fetch().then(\n  (connection) => {\n    connected = [\"wifi\", \"unknown\"].includes(connection.type);\n  },\n  () => {\n    connected = false;\n  }\n);\nNetInfo.addEventListener((connection) => {\n  connected = [\"wifi\", \"unknown\"].includes(connection.type);\n  if (connected && unsynced.length) {\n    AsyncStorage.multiGet(unsynced).then((items) => {\n      items.forEach(([key, val]) => set(key as Key, val === \"true\"));\n      unsynced.length = 0;\n    });\n  }\n}); \n```", "```js\nexport default function App() {\n  const [message, setMessage] = useState<string | null>(null);\n  const [first, setFirst] = useState(false);\n  const [second, setSecond] = useState(false);\n  const [third, setThird] = useState(false);\n  const setters = new Map([\n    [\"first\", setFirst],\n    [\"second\", setSecond],\n    [\"third\", setThird],\n  ]); \n```", "```js\n function save(key: Key) {\n    return (value: boolean) => {\n      set(key, value).then(\n        (connected) => {\n          setters.get(key)?.(value);\n          setMessage(connected ? null : \"Saved Offline\");\n        },\n        (err) => {\n          setMessage(err);\n        }\n      );\n    };\n  } \n```", "```js\n useEffect(() => {\n    NetInfo.fetch().then(() =>\n      get().then(\n        (items) => {\n          for (let [key, value] of Object.entries(items)) {\n            setters.get(key)?.(value);\n          }\n        },\n        (err) => {\n          setMessage(err);\n        }\n      )\n    );\n  }, []); \n```", "```js\n return (\n    <View style={styles.container}>\n      <Text>{message}</Text>\n      <View>\n        <Text>First</Text>\n        <Switch value={first} onValueChange={save(\"first\")} />\n      </View>\n      <View>\n        <Text>Second</Text>\n        <Switch value={second} onValueChange={save(\"second\")} />\n      </View>\n      <View>\n        <Text>Third</Text>\n        <Switch value={third} onValueChange={save(\"third\")} />\n      </View>\n    </View>\n  ); \n```"]