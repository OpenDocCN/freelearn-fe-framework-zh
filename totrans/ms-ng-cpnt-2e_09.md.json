["```js\nconst chart = new Chartist.Line('#chart', { \n  labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], \n  series: [ \n    [10, 7, 2, 8, 5] \n  ] \n}); \n```", "```js\n<body> \n<div id=\"chart\" class=\"ct-golden-section\"></div> \n</body> \n```", "```js\nconst chart = new Chartist.Line('#chart', { \n  labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], \n  series: [ \n    [10, 7, 2, 8, 5]\n  ]\n}, {\n  showPoint: true,\n  showLine: true\n}, [\n  ['screen and (min-width: 400px)', {\n    showPoint: false\n  }],\n  ['screen and (min-width: 800px)', {\n    lineSmooth: false\n  }]\n]);\n```", "```js\n…\n\nexport interface ProjectSummary {\n project: Project;\n description: string;\n tasks: Task[];\n activities: ProjectActivity[];\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush projects-dashboard/projects-dashboard\n```", "```js\nimport {Component, ViewEncapsulation, ChangeDetectionStrategy, Input, EventEmitter, Output} from '@angular/core';\nimport {Project, ProjectSummary} from '../model';\n\n@Component({\n  selector: 'mac-projects-dashboard',\n  templateUrl: './projects-dashboard.component.html',\n  styleUrls: ['./projects-dashboard.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ProjectsDashboardComponent {\n  @Input() projectSummaries: ProjectSummary[];\n  @Output() outActivateProject = new EventEmitter<Project>();\n\n  activateProject(project: Project) {\n    this.outActivateProject.emit(project);\n  }\n}\n```", "```js\n<header class=\"dashboard-header\">\n  <h2 class=\"dashboard-title\">Dashboard</h2>\n</header>\n<div class=\"dashboard-main\">\n  <h3 class=\"dashboard-sub-title\">Projects>h3>\n <ul class=\"dashboard-list\">\n    <li *ngFor=\"let projectSummary of projectSummaries\"\n        class=\"dashboard-list-item\">\n      <strong>projectSummary.project.title</strong>\n      <p>projectSummary.description</p>\n    </li>\n  </ul>\n</div>\n```", "```js\nng generate component --spec false -ve none -cd onpush projects-dashboard/project-summary\n```", "```js\nimport {ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges, ViewEncapsulation} from '@angular/core';\nimport {ProjectSummary, TimeEfforts} from '../../model';\n\n@Component({\n  selector: 'mac-project-summary',\n  templateUrl: './project-summary.component.html',\n  styleUrls: ['./project-summary.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ProjectSummaryComponent implements OnChanges {\n  @Input() projectSummary: ProjectSummary;\n\n  totalEfforts: TimeEfforts;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.projectSummary && this.projectSummary) {\n      this.totalEfforts = this.projectSummary.tasks.reduce((totalEfforts, task) => {\n        if (task.efforts) {\n          totalEfforts.estimated += task.efforts.estimated || 0;\n          totalEfforts.effective += task.efforts.effective || 0;\n        }\n\n        return totalEfforts;\n      }, {\n        estimated: 0,\n        effective: 0\n      });\n    }\n  }\n}\n```", "```js\n<div class=\"summary-title\">{{projectSummary.project.title}}</div>\n<div class=\"summary-description\">\n  {{projectSummary.description}}\n</div>\n<div class=\"summary-label\">Total Efforts</div>\n<mac-efforts-timeline [efforts]=\"totalEfforts\">\n</mac-efforts-timeline>\n<p>{{totalEfforts | formatEfforts}}</p>\n```", "```js\n<header class=\"dashboard-header\">\n <h2 class=\"dashboard-title\">Dashboard</h2>\n</header>\n<div class=\"dashboard-main\">\n  <h3 class=\"dashboard-sub-title\">Projects</h3>\n  <ul class=\"dashboard-list\">\n    <li *ngFor=\"let projectSummary of projectSummaries\"\n        class=\"dashboard-list-item\">\n <mac-project-summary [projectSummary]=\"projectSummary\"\n (click)=\"activateProject(projectSummary.project)\">\n </mac-project-summary>\n    </li>\n  </ul>\n</div>\n\n```", "```js\nng generate component --spec false -ve none -cd onpush container/projects-dashboard-container\n```", "```js\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {ProjectService} from '../../project/project.service';\nimport {Observable, combineLatest} from 'rxjs';\nimport {Project, ProjectSummary} from '../../model';\nimport {map} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {ActivitiesService} from '../../activities/activities.service';\nimport {TaskService} from '../../tasks/task.service';\nimport {limitWithEllipsis} from '../../utilities/string-utilities';\n\n@Component({\n  selector: 'mac-projects-dashboard-container',\n  templateUrl: './projects-dashboard-container.component.html',\n  styleUrls: ['./projects-dashboard-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectsDashboardContainerComponent {\n  projectSummaries: Observable<ProjectSummary[]>;\n\n  constructor(private projectService: ProjectService,\n              private taskService: TaskService,\n              private activitiesService: ActivitiesService,\n              private router: Router) {\n    this.projectSummaries = combineLatest(\n      this.projectService.getProjects(),\n      this.taskService.getTasks(),\n      this.activitiesService.getActivities()\n    ).pipe(\n      map(([projects, tasks, activities]) =>\n        projects\n          .map(project => ({\n            project,\n            description: limitWithEllipsis(project.description, 100),\n            tasks: tasks.filter(task => task.projectId === project.id),\n            activities: activities.filter(activity => activity.projectId === project.id)\n          }))\n      )\n    );\n  }\n\n  activateProject(project: Project) {\n    this.router.navigate(['/projects', project.id]);\n  }\n}\n```", "```js\n<mac-projects-dashboard\n  [projectSummaries]=\"projectSummaries | async\"\n  (outActivateProject)=\"activateProject($event)\">\n</mac-projects-dashboard>\n```", "```js\n…\n\nimport {ProjectsDashboardContainerComponent} from './container/projects-dashboard-container/projects-dashboard-container.component';\n\nexport const routes: Route[] = [{\n path: 'dashboard',\n component: ProjectsDashboardContainerComponent\n}, {\n  path: 'projects/:projectId',\n  component: ProjectContainerComponent,\n  canActivate: [ProjectContainerGuard],\n  children: [{\n    path: 'tasks',\n    component: TaskListContainerComponent\n  }, {\n    path: 'tasks/:taskId',\n    component: TaskDetailsContainerComponent\n  }, {\n    path: 'comments',\n    component: ProjectCommentsContainerComponent\n  }, {\n    path: 'activities',\n    component: ProjectActivitiesContainerComponent\n  }, {\n    path: '**',\n    redirectTo: 'tasks'\n  }]\n}, {\n  path: '',\n  pathMatch: 'full',\n  redirectTo: '/dashboard'\n}];\n```", "```js\n<aside class=\"side-nav\">\n <mac-user-area [user]=\"user | async\"\n                 [openTasksCount]=\"openTasksCount | async\">\n  </mac-user-area>\n  <mac-navigation>\n    <mac-navigation-section title=\"Main\">\n <mac-navigation-item title=\"Dashboard\"\n navId=\"dashboard\"\n routerLinkActive=\"active\"\n [routerLink]=\"['/dashboard']\">\n </mac-navigation-item>\n </mac-navigation-section>\n    <mac-navigation-section title=\"Projects\">\n      <mac-navigation-item *ngFor=\"let project of projects | async; trackBy: trackByProjectId\"\n                           [navId]=\"project.id\"\n                           [title]=\"project.title\"\n                           routerLinkActive=\"active\"\n                           [routerLink]=\"['/projects', project.id]\">\n      </mac-navigation-item>\n    </mac-navigation-section>\n  </mac-navigation>\n</aside>\n<main class=\"main\">\n  <router-outlet></router-outlet>\n</main>\n```", "```js\n…\n\nexport interface RasterizationData {\n  time: number;\n  weight: number;\n}\n```", "```js\n…\n\nexport function rasterize(\n  timeData: RasterizationData[],\n  timeFrame: number,\n  quantity: number,\n  now: number = +new Date(),\n  fill: number = 0): number[] {\n\n  now = Math.floor(now / timeFrame) * timeFrame;\n\n  return timeData.reduce((rasterized: number[], data: RasterizationData) => {\n    const index = Math.ceil((now - data.time) / timeFrame);\n    if (index < quantity) {\n      rasterized[index] = (rasterized[index] || 0) + data.weight;\n    }\n    return rasterized;\n  }, <number[]>Array.from({length: quantity}).fill(fill)).reverse();\n}\n```", "```js\nnpm install chartist@0.11.0 @types/chartist@0.9.40 --save\n```", "```js\nng generate component --spec false -ve none -cd onpush projects-dashboard/activity-chart\n```", "```js\n<div #chartContainer></div> \n```", "```js\nimport {\n  Component, ViewEncapsulation, ViewChild, ElementRef, Input, ChangeDetectionStrategy\n} from '@angular/core';\nimport * as Chartist from 'chartist';\nimport {IChartistBarChart} from 'chartist';\nimport {Activity} from '../../model';\n\n@Component({\n  selector: 'mac-activity-chart',\n  templateUrl: './activity-chart.component.html',\n  styleUrls: ['./activity-chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ActivityChartComponent {\n  @Input() activities: Activity[];\n  @ViewChild('chartContainer') chartContainer: ElementRef;\n\n  chart: IChartistBarChart;\n}\n```", "```js\nimport {\n  Component, ViewEncapsulation, ViewChild, ElementRef, Input, ChangeDetectionStrategy\n} from '@angular/core';\nimport * as Chartist from 'chartist';\nimport {IChartistBarChart, IChartistData} from 'chartist';\n\nimport {rasterize, UNITS} from '../../utilities/time-utilities';\nimport {Activity, RasterizationData} from '../../model';\n\n@Component({\n  selector: 'mac-activity-chart',\n  templateUrl: './activity-chart.component.html',\n  styleUrls: ['./activity-chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ActivityChartComponent {\n  @Input() activities: Activity[];\n  @ViewChild('chartContainer') chartContainer: ElementRef;\n\n  chart: IChartistBarChart;\n\n createChartData(): IChartistData {\n const timeData: RasterizationData[] = this.activities.map((activity) => {\n return {\n time: activity.time,\n weight: 1\n };\n });\n\n return {\n series: [\n rasterize(\n timeData,\n UNITS.find((unit) => unit.short === 'h').milliseconds,\n 24,\n +new Date())\n ]\n };\n }\n}\n```", "```js\nimport {\n  Component, ViewEncapsulation, ViewChild, ElementRef, Input, ChangeDetectionStrategy,\n  OnChanges, AfterViewInit\n} from '@angular/core';\n…\n\n…\nexport class ActivityChartComponent implements OnChanges, AfterViewInit {\n  @Input() activities: Activity[];\n  @ViewChild('chartContainer') chartContainer: ElementRef;\n\n  chart: IChartistBarChart;\n\n  ngOnChanges() {\n this.createOrUpdateChart();\n }\n\n ngAfterViewInit() {\n this.createOrUpdateChart();\n }\n\n  createOrUpdateChart() {\n if (!this.activities || !this.chartContainer) {\n return;\n }\n\n const data = this.createChartData();\n\n if (this.chart) {\n this.chart.update(data);\n } else {\n this.createChart(data);\n }\n }\n\n  createChart(data: IChartistData) {\n this.chart = new Chartist.Bar(this.chartContainer.nativeElement, data, {\n width: '100%',\n height: 60,\n axisY: {\n onlyInteger: true,\n showGrid: false,\n showLabel: false,\n offset: 0\n },\n axisX: {\n showGrid: false,\n showLabel: false,\n offset: 0\n },\n chartPadding: {\n top: 0,\n right: 0,\n bottom: 0,\n left: 0\n }\n });\n\n this.chart.on('draw', (context) => {\n if (context.type === 'bar' && context.value.y === 0) {\n context.element.attr({\n y2: context.y2 - 1\n });\n }\n });\n }\n\n  …\n}\n```", "```js\n<div class=\"summary-title\">{{projectSummary.project.title}}</div>\n<div class=\"summary-description\">\n  {{projectSummary.description}}\n</div>\n<div class=\"summary-label\">Total Efforts</div>\n<mac-efforts-timeline [efforts]=\"totalEfforts\">\n</mac-efforts-timeline>\n<p>{{totalEfforts | formatEfforts}}</p>\n<div class=\"summary-label\">Activity last 24 hours</div>\n<mac-activity-chart [activities]=\"projectSummary.activities\"></mac-activity-chart>\n```", "```js\nexport interface Task {\n  readonly id?: number;\n  readonly projectId?: number;\n  readonly title: string;\n  readonly description?: string;\n  readonly done: boolean;\n  readonly order: number;\n  readonly created: number;\n readonly completed?: number;\n  readonly efforts?: TimeEfforts;\n}\n\n…\n```", "```js\n…\nexport class TaskComponent {\n  …\n\n  updateTask(done: boolean) {\n    this.outUpdateTask.emit({\n      ...this.task,\n      done,\n completed: done ? +new Date() : this.task.completed\n    });\n  }\n\n  …\n}\n```", "```js\nimport {InMemoryDbService} from 'angular-in-memory-web-api';\nimport {Activity, Project, Task, User} from './model';\n\nexport class Database implements InMemoryDbService {\n  createDb() {\n    …\n\n    const hour = 3600000;\n    const tasks: Task[] = [\n      {id: 1, projectId: 1, title: 'Task 1', done: false, order: 1, created: +new Date() - hour * 8},\n      {id: 2, projectId: 1, title: 'Task 2', done: false, order: 2, created: +new Date() - hour * 6},\n      {id: 3, projectId: 1, title: 'Task 3', done: true, order: 3, created: +new Date() - hour * 12, completed: +new Date() - hour * 3},\n      {id: 4, projectId: 1, title: 'Task 4', done: false, order: 4, created: +new Date() - hour * 20}\n    ];\n\n    …\n  }\n}\n```", "```js\nexport function rasterize(\n  timeData: RasterizationData[],\n  timeFrame: number,\n  quantity: number,\n  now: number = +new Date(),\n  fill: number = 0,\n accumulate: boolean = false): number[] {\n\n  now = Math.floor(now / timeFrame) * timeFrame;\n  let accumulatedValue = 0;\n\n  if (accumulate) {\n timeData = timeData.slice().sort((a, b) => a.time < b.time ? -1 : a.time > b.time ? 1 : 0);\n }\n\n  return timeData.reduce((rasterized: number[], data: RasterizationData) => {\n    accumulatedValue += data.weight;\n    const index = Math.ceil((now - data.time) / timeFrame);\n    if (index < quantity) {\n      rasterized[index] = accumulate ? accumulatedValue : (rasterized[index] || 0) + data.weight;\n    }\n    return rasterized;\n  }, <number[]>Array.from({length: quantity}).fill(fill)).reverse();\n}\n```", "```js\nng generate component --spec false -ve none -cd onpush projects-dashboard/tasks-chart\n```", "```js\nimport {\n  AfterViewInit, ChangeDetectionStrategy, Component, ElementRef,\n  Input, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport * as Chartist from 'chartist';\nimport {IChartistData, IChartistLineChart} from 'chartist';\nimport * as moment from 'moment';\n\nimport {rasterize} from '../../utilities/time-utilities';\nimport {ProjectSummary, RasterizationData} from '../../model';\n\n@Component({\n  selector: 'mac-tasks-chart',\n  templateUrl: './tasks-chart.component.html',\n  styleUrls: ['./tasks-chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class TasksChartComponent implements OnChanges, AfterViewInit {\n  @Input() projectSummaries: ProjectSummary[];\n  @ViewChild('chartContainer') chartContainer: ElementRef;\n\n  chart: IChartistLineChart;\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.createOrUpdateChart();\n  }\n\n  ngAfterViewInit() {\n    this.createOrUpdateChart();\n  }\n\n  createOrUpdateChart() {\n    if (!this.projectSummaries || !this.chartContainer) {\n      return;\n    }\n\n    const data = this.createChartData();\n    if (this.chart) {\n      this.chart.update(data);\n    } else {\n      this.createChart(data);\n    }\n  }\n\n  createChartData(): IChartistData {\n    const now = +new Date();\n    return {\n      series: this.projectSummaries.map(projectSummary => {\n        const tasks = projectSummary.tasks\n          .filter(task => task.projectId === projectSummary.project.id);\n        const timeData: RasterizationData[] = tasks.reduce((data, task) => {\n          data.push({\n            time: task.created,\n            weight: 1\n          });\n\n          if (task.done) {\n            data.push({\n              time: task.completed,\n              weight: -1\n            });\n          }\n          return data;\n        }, []);\n\n        return rasterize(timeData, 600000, 144, now, null, true);\n      }),\n      labels: Array.from({\n        length: 144\n      }).map((e, index) => now - index * 600000).reverse()\n    };\n  }\n\n  createChart(data: IChartistData) {\n    this.chart = new Chartist.Line(this.chartContainer.nativeElement, data, {\n      width: '100%',\n      height: 300,\n      lineSmooth: Chartist.Interpolation.step({\n        fillHoles: true\n      }),\n      axisY: {\n        onlyInteger: true,\n        low: 0,\n        offset: 70,\n        labelInterpolationFnc: value => `${value} tasks`\n      },\n      axisX: {\n        labelInterpolationFnc: (value, index) =>\n          index % Math.floor(144 / 2) === 0 ?\n            moment(value).calendar() : null,\n        labelOffset: {\n          y: 10\n        }\n      }\n    }, [\n      ['screen and (min-width: 1200px)', {\n        axisX: {\n          labelInterpolationFnc: (value, index) =>\n            index % Math.floor(144 / 4) === 0 ?\n              moment(value).calendar() : null\n        }\n      }], ['screen and (min-width: 1500px)', {\n        axisX: {\n          labelInterpolationFnc: (value, index) =>\n            index % Math.floor(144 / 6) === 0 ?\n              moment(value).calendar() : null\n        }\n      }]\n    ]);\n  }\n}\n```", "```js\n<div #chartContainer class=\"chart-container\"></div>\n```", "```js\n<header class=\"dashboard-header\">\n  <h2 class=\"dashboard-title\">Dashboard</h2>\n</header>\n<div class=\"dashboard-main\">\n <h3 class=\"dashboard-sub-title\">Tasks Overview</h3>\n <div class=\"dashboard-tasks\">\n <mac-tasks-chart [projectSummaries]=\"projectSummaries\">\n </mac-tasks-chart>\n </div>\n  <h3 class=\"dashboard-sub-title\">Projects</h3>\n <ul class=\"dashboard-list\">\n    <li *ngFor=\"let projectSummary of projectSummaries\"\n        class=\"dashboard-list-item\">\n      <mac-project-summary [projectSummary]=\"projectSummary\"\n                           (click)=\"activateProject(projectSummary.project)\">\n      </mac-project-summary>\n    </li>\n  </ul>\n</div>\n```", "```js\n…\n\nexport interface ChartLegendItem {\n title: string;\n class: string;\n}\n\n@Component({\n  selector: 'mac-tasks-chart',\n  templateUrl: './tasks-chart.component.html',\n  styleUrls: ['./tasks-chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class TasksChartComponent implements OnChanges, AfterViewInit {\n  …\n\n  legend: ChartLegendItem[];\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.projectSummaries && this.projectSummaries) {\n this.legend = this.projectSummaries.map((projectSummary, index) => ({\n title: projectSummary.project.title,\n class: `series-${index + 1}`\n }));\n }\n\n    this.createOrUpdateChart();\n  }\n\n  …\n}\n```", "```js\n<ul class=\"series-list\">\n  <li *ngFor=\"let series of legend\"\n      class=\"series {{series.class}}\">{{series.title}}</li>\n</ul>\n<div #chartContainer class=\"chart-container\"></div>\n```", "```js\n…\n\nexport interface ChartTimeFrame {\n name: string;\n timeFrame: number;\n amount: number;\n}\n\n@Component({\n  selector: 'mac-tasks-chart',\n  templateUrl: './tasks-chart.component.html',\n  styleUrls: ['./tasks-chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class TasksChartComponent implements OnChanges, AfterViewInit {\n  …\n\n timeFrames: ChartTimeFrame[] = [{\n name: 'day',\n timeFrame: 600000,\n amount: 144\n }, {\n name: 'week',\n timeFrame: 3600000,\n amount: 168\n }, {\n name: 'year',\n timeFrame: 86400000,\n amount: 360\n }];\n timeFrameNames = this.timeFrames.map((timeFrame) => timeFrame.name);\n selectedTimeFrame = this.timeFrames[0];\n\n  …\n\n  selectTimeFrame(timeFrameName: string) {\n this.selectedTimeFrame = this.timeFrames.find((timeFrame) => timeFrame.name === timeFrameName);\n this.createOrUpdateChart();\n }\n\n  createChartData(): IChartistData {\n    const now = +new Date();\n    return {\n      series: this.projectSummaries.map(projectSummary => {\n        …\n\n       return rasterize(timeData, this.selectedTimeFrame.timeFrame, \n this.selectedTimeFrame.amount, now, null, true);\n      }),\n      labels: Array.from({\n        length: this.selectedTimeFrame.amount\n      }).map((e, index) => now - index * this.selectedTimeFrame.timeFrame).reverse()\n    };\n  }\n\n  …\n}\n```", "```js\n<mac-toggle [buttonList]=\"timeFrameNames\"\n [activeButton]=\"selectedTimeFrame.name\"\n (outActivate)=\"selectTimeFrame($event)\"></mac-toggle>\n<ul class=\"series-list\">\n  <li *ngFor=\"let series of legend\"\n      class=\"series {{series.class}}\">{{series.title}}</li>\n</ul>\n<div #chartContainer class=\"chart-container\"></div>\n```"]