- en: Creating a User's Friend List
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户的友情列表
- en: In this chapter, we will move toward the more advanced features in Angular and
    Firebase. We will retrieve our user's friend list using a Firebase list. We will
    display the friend list in a card component provided by Bootstrap. We will implement
    the pagination concept using a Firebase filter. Finally, we will discuss Angular
    pipes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将转向 Angular 和 Firebase 的更高级功能。我们将使用 Firebase 列表检索我们的用户友情列表。我们将使用 Bootstrap
    提供的卡片组件显示友情列表。我们将使用 Firebase 过滤器实现分页概念。最后，我们将讨论 Angular 管道。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating user's friend template
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户的友情模板
- en: Creating the friend's service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建朋友的服务
- en: Creating the friends component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建朋友组件
- en: Creating our first date pipe
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个日期管道
- en: Creating user's friend template
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户的友情模板
- en: In this section, we will cover a slightly more complex template using a Bootstrap
    card component. We will retrieve the friend's list of a defined size and display
    the user's friend list in a card item. We will call the Firebase API to get three
    items and loop the friend's list using an `*ngFor` directive.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一个稍微复杂一些的模板，使用 Bootstrap 卡片组件。我们将检索定义大小的朋友列表，并在卡片项中显示用户的友情列表。我们将调用
    Firebase API 获取三个项目，并使用 `*ngFor` 指令循环朋友的列表。
- en: 'Card is a flexible and extensible container. It has an option to display the
    header, footer, title, and so on. We will use the following properties of the
    card component:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片是一个灵活且可扩展的容器。它有显示标题、页脚、标题等选项。我们将使用以下属性：
- en: '`card-img-top`: This is used to display the friend''s image on the top.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card-img-top`：用于在顶部显示朋友的图片。'
- en: '`card-title`: This is used to display the friend''s name.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card-title`：用于显示朋友的姓名。'
- en: '`card-text`: This is used to display their email and phone number.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card-text`：用于显示他们的电子邮件和电话号码。'
- en: '`card-footer`: This is used to display the date using a custom pipe. We will
    implement custom pipe in a later part of this chapter.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card-footer`：用于使用自定义管道显示日期。我们将在本章的后续部分实现自定义管道。'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After we display the first page, we need the left and right icon to scroll
    to the next and previous page. These icons will be visible based on the total
    items in the list, and `isLeftVisible` will be set from the `component` class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们显示第一页后，我们需要左右图标来滚动到下一页和上一页。这些图标将根据列表中的总项目数显示，并且 `isLeftVisible` 将从 `component`
    类设置：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s the complete `user-friends.component.html` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的 `user-friends.component.html` 文件：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We assign class selectors to apply styles to the elements. In the friends list
    page, we align the elements horizontally using `display:inline`. Also, the left
    icon, card list, and right icon are displayed one after another, so we use `float:
    left`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将类选择器分配给元素以应用样式。在朋友列表页面中，我们使用 `display:inline` 水平对齐元素。同时，左图标、卡片列表和右图标依次显示，因此我们使用
    `float: left`。'
- en: 'Here''s the complete `user-friends.component.scss` as of now:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是到目前为止完整的 `user-friends.component.scss` 文件：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating the friend's service
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建朋友的服务
- en: 'We will introduce one more service as part of our friend''s component. This
    will fetch friend''s details from the Firebase. In this section, we will cover
    the following topics:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在朋友的组件部分引入一个额外的服务。这个服务将从 Firebase 获取朋友的详细信息。在本节中，我们将涵盖以下主题：
- en: Creating a Firebase node in our database
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的数据库中创建 Firebase 节点
- en: Implementing the `Friend` class
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `Friend` 类
- en: Implementing the friend's service
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现朋友的服务
- en: Creating a Firebase node in our database
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的数据库中创建 Firebase 节点
- en: Now, we have prefilled the friend's details in the Firebase as shown in the
    next image. We introduced a separate node called `user-details`. This will store
    all the user's information, and we don't need to query the user node for more
    information, as this increases the query performance.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经如下一张图所示在 Firebase 中预先填充了朋友的详细信息。我们引入了一个名为 `user-details` 的单独节点。这将存储所有用户信息，我们不需要查询用户节点以获取更多信息，因为这会增加查询性能。
- en: 'The following are a few key observations for this instance of Firebase:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对 Firebase 此实例的一些关键观察：
- en: We have not implemented the add friend feature; hence we will add the friend's
    information manually.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们尚未实现添加朋友的功能；因此，我们将手动添加朋友的信息。
- en: We use the UID relationship to list the friends of a user. In this case, the
    UID `qu3bXn9tTJR7j4PBp9LzBGKxHAe2` is the user ID and the other UID—`8wcVXYmEDQdqbaJ12BPmpsCmBMB2`—is
    the friend's ID that is generated when the friend signs up to the application.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用UID关系来列出用户的好友。在这种情况下，UID `qu3bXn9tTJR7j4PBp9LzBGKxHAe2` 是用户ID，而另一个UID—`8wcVXYmEDQdqbaJ12BPmpsCmBMB2`—是当好友注册应用时生成的朋友ID。
- en: In Firebase, we repeat a lot of data. This is a common pattern while organizing
    data in a NoSQL database, as this avoids multiple hits to the database. Although
    it increases the write time, it helps our app to scale when reading data. It prevents
    large queries that slow down our database and nested nodes that take longer to
    read.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Firebase中，我们重复很多数据。这是在NoSQL数据库中组织数据时的常见模式，因为它避免了多次对数据库的访问。尽管这增加了写入时间，但有助于我们的应用在读取数据时进行扩展。它防止了大型查询减慢我们的数据库速度，以及读取时间较长的嵌套节点。
- en: 'The friends node in the Firebase database is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase数据库中的好友节点如下：
- en: '![](img/00025.gif)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00025.gif)'
- en: Implementing the Friend model class
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现好友模型类
- en: We will implement the `Friend` model class to map an array of friend's JSON
    object from Firebase. This class is similar to the `User` model class, and it
    is a good practice to segregate the responsibility in a separate class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现 `Friend` 模型类，以映射从Firebase中获取的朋友JSON对象的数组。这个类与 `User` 模型类类似，将责任分离到单独的类中是一种良好的实践。
- en: This class has `name`, `email`, `mobile`, `uid`, `time`, and `image` properties.
    The time property is used to show the duration of friendship and is stored in
    milliseconds. We will need to convert the time in milliseconds to a human-readable
    date format using an Angular pipe.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类有 `name`、`email`、`mobile`、`uid`、`time` 和 `image` 属性。时间属性用于显示友谊的持续时间，并以毫秒为单位存储。我们需要使用Angular管道将毫秒时间转换为可读的日期格式。
- en: 'The following is the complete `friend.ts` file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为完整的 `friend.ts` 文件：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Implementing the friend's service
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现好友服务
- en: 'As a part of this service, we will need to retrieve a list of friends. `AngularFireDatabase`
    provides a list API to retrieve the list of friends. This service consists of
    the following three methods to give us complete pagination functionalities:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此服务的一部分，我们需要检索好友列表。`AngularFireDatabase` 提供了一个列表API来检索好友列表。此服务包含以下三个方法，以提供完整的分页功能：
- en: '**Retrieving the first page**: The `getFirstPage()` method accepts `uid` and
    `pageSize` as parameters. These are used to retrieve the first `pageSize` data
    from Firebase. We pass the `pageSize` in the second argument of the query function:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取第一页：** `getFirstPage()` 方法接受 `uid` 和 `pageSize` 作为参数。这些参数用于从Firebase检索第一页
    `pageSize` 数据。我们在查询函数的第二个参数中传递 `pageSize`：'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Retrieving the next page:** `loadNextPage()` accepts `uid`, `friendKey`,
    and `pageSize`. `uid` and `friendKey` are used to set the queries. This means
    that they retrieve the next `pageSize` data from the last retrieved `friendKey`
    data:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取下一页：** `loadNextPage()` 接受 `uid`、`friendKey` 和 `pageSize` 参数。`uid` 和 `friendKey`
    用于设置查询。这意味着它们从最后检索的 `friendKey` 数据中检索下一个 `pageSize` 数据：'
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Retrieving the previous page: **`loadPreviousPage()` method accepts `uid`,
    `friendKey`, and `pageSize`. The last two parameters are used to retrieve the
    previous `pageSize` data from the starting `friendKey` element:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取上一页：** `loadPreviousPage()` 方法接受 `uid`、`friendKey` 和 `pageSize`。后两个参数用于从起始
    `friendKey` 元素检索前一个 `pageSize` 数据：'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s the complete `friends.service.ts`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的 `friends.service.ts`：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating a friend's component
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建好友组件
- en: 'This is the main controller of our friend page. In this component, we will
    need to manage the navigation and visibility of our next and previous icon. We
    will cover the following two main things in this section:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的好友页面的主要控制器。在这个组件中，我们需要管理导航和我们的下一页和上一页图标的可见性。在本节中，我们将涵盖以下两个主要内容：
- en: Displaying the next and previous page
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示下一页和上一页
- en: Visibility of icons
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图标的可见性
- en: 'In order to display the next and previous page, we have already created the
    API required to display the friend''s information. We have extended the `OnInit`
    interface and called `getFirstPage()` on `ngOnInit` with `uid` and `pageSize`
    as filter parameters, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示下一页和上一页，我们已创建了显示朋友信息的API。我们已经扩展了 `OnInit` 接口，并在 `ngOnInit` 上调用 `getFirstPage()`，使用
    `uid` 和 `pageSize` 作为过滤参数，如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `ngOnInit()` method runs when the page is loaded.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`ngOnInit()` 方法在页面加载时运行。'
- en: 'Consequently, we will retrieve the next and previous page using the API in
    the friend''s service, as follows; the only difference is that we will also pass
    the friend `uid` so that we can retrieve the next page size data, starting from
    the last retrieved item:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用朋友服务中的API检索下一页和前一页，如下所示；唯一的区别是我们还将传递朋友`uid`，这样我们就可以从最后检索的项目开始检索下一页的大小数据：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we will move on to our next part. We will need to take care of the next
    and previous icons for which we will need the total number of friends. In our
    previous discussion, we obtained the size as `pageSize`. In order to solve this
    problem, we have to create `friendcount` in our Firebase user node. Whenever we
    add a friend, we increase the count. We have added this property in our `User`
    class; all the other parts remain the same:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续到下一部分。我们需要处理下一个和上一个图标，为此我们需要朋友的总数。在我们之前的讨论中，我们得到了大小为`pageSize`。为了解决这个问题，我们必须在我们的Firebase用户节点中创建`friendcount`。每次我们添加一个朋友，我们就增加计数。我们在`User`类中添加了这个属性；其他所有部分保持不变：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will then retrieve the total item count in `ngOnInit`, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`ngOnInit`中，我们将检索总项目数，如下所示：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we initialize the current count to the item retrieved and then call the
    visibility based on the total and current count:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将当前计数初始化为检索的项目，然后根据总数和当前计数调用可见性：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s the complete `user-friends.component.ts` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的`user-friends.component.ts`文件：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The user''s friends page displays three friends with navigation enabled:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的友谊页面显示三个有导航功能的朋友：
- en: '![](img/00026.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00026.jpeg)'
- en: Creating our first date pipe
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个日期管道
- en: A Pipe takes an input as its data and transforms it into the desired output.
    It is used to transform data into a usable form.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 管道接受输入作为其数据，并将其转换为所需的输出。它用于将数据转换为可用的形式。
- en: 'We use pipe to transform time into a human-friendly date format. To create
    the pipe, we implement the `PipeTransform` interface and override the `transform`
    method. In this method, we take the date in milliseconds and use the moment library
    to transform the time to a particular date format. We provide the selector name,
    which is used in the HTML tag with an input data:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用管道将时间转换为人类友好的日期格式。要创建管道，我们实现`PipeTransform`接口并重写`transform`方法。在这个方法中，我们获取以毫秒为单位的日期，并使用moment库将时间转换为特定的日期格式。我们提供了选择器名称，该名称用于HTML标签中的输入数据：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Moment is a JavaScript library used to format, manipulate, or parse dates.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Moment是一个用于格式化、操作或解析日期的JavaScript库。
- en: 'After creating the pipe, we add it in our `user` module:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建管道后，我们在`user`模块中添加它：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we provide the `friendsdate` pipe to our `time` value from the `friend`
    object in a template, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将`friendsdate`管道添加到模板中从`friend`对象中的`time`值，如下所示：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered a lot of important concepts. We covered the card
    component, which is used in most applications nowadays. We decorated our view
    with styles and also created a new service. We discussed the Firebase list and
    then provided the filter options. This implemented pagination for our friend's
    list. Finally, we discussed the Angular pipe, which we used to convert time into
    a human-friendly date format.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了大量的重要概念。我们介绍了现在大多数应用中使用的卡片组件。我们用样式装饰了我们的视图，并创建了一个新的服务。我们讨论了Firebase列表，然后提供了过滤选项。这为我们朋友的列表实现了分页。最后，我们讨论了Angular管道，我们使用它将时间转换为人类友好的日期格式。
- en: In the next chapter, we will cover Firebase storage and learn how to store a
    profile image and then retrieve it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Firebase存储，并学习如何存储个人资料图片以及如何检索它。
