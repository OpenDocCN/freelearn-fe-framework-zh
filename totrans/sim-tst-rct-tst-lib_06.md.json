["```js\nconst reverseWord = str => str.split('').reverse().join('')\n```", "```js\nreverseWord('packt') // tkcap\n```", "```js\nnpm install eslint --save-dev\n```", "```js\n{\n  \"extends\": \"eslint:recommended\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 2021,\n    \"sourceType\": \"module\"\n  }\n}\n```", "```js\nnpx eslint .\n```", "```js\nnpm install --save-dev eslint-plugin-testing-library\n```", "```js\n    \"overrides\": [\n    {\n      \"files\": [\"*.test.js\"],\n      \"extends\": [\n        \"plugin:testing-library/react\"\n      ]\n```", "```js\ntest('LanguageDropdown, given selected menu item, displays   selection', async () => {\n  render(<LanguageDropdown />)\n  user.click(screen.getByRole('button', { name: /programming language/I }))\n  user.click(screen.getByRole''menuite'', { name: /javascript/i }))\n  user.click(screen.getByRole''menuite'', { name: /javascript/i }))\n```", "```js\n  const selection = await waitFor(() =>\n    screen.getByRole('heading', { name: /you selected:       javascript/i })\n  )\n```", "```js\n  const selection = await screen.findByRole('heading', {\n    name: /you selected: javascript/i\n  })\n  expect(selection).toBeInTheDocument()\n})\n```", "```js\n  const { getByRole } = render(<LanguageDropdown />)\n  user.click(getByRole('button', { name: /programming     language/i }))\n  user.click(getByRole('menuitem', { name: /javascript/i }))\n```", "```js\n  \"rules\": {\n    \"testing-library/prefer-screen-queries\": \"error\"\n  }\n```", "```js\nrender(<LanguageDropdown />)\nuser.click(screen.getByRole('button', { name: /programming   language/i }))\nuser.click(screen.getByRole('menuitem', { name: /javascript/i }))\n```", "```js\n  render(<LanguageDropdown />)\n  screen.debug()\n```", "```js\nnpm install --save-dev eslint-plugin-jest-dom\n```", "```js\n{\n  \"extends\": [\"react-app\", \"plugin:jest-dom/recommended\"]\n}\n```", "```js\ntest('LanguageCheckbox, given selected item, item is checked',   () => {\n  render(<LanguageCheckBox />)\n  const jsCheckbox = screen.getByRole('checkbox', { name: /    javascript/i })\n  user.click(jsCheckbox)\n```", "```js\n  expect(jsCheckbox).toHaveAttribute(\"checked\");\n```", "```js\n  expect(jsCheckbox).toHaveProperty(\"checked\", true);\n```", "```js\n  expect(jsCheckbox).toBeChecked()\n```", "```js\nexpect(screen.getByText(/javascript/i).className).  toContain('text-success font-weight-bold')\n```", "```js\n  expect(screen.getByText(/javascript/i)).toHaveClass(\n    'text-success font-weight-bold'\n  )\n```", "```js\nStructured Query Language (SQL) is used to manage data in relational databases.\n```", "```js\nnpm install --save-dev jest-axe\n```", "```js\nimport loginImg from './image/login.png'\n<input src={loginImg} type=\"image\" />\n```", "```js\nimport { render } from '@testing-library/react'\nimport { axe } from 'jest-axe'\nimport 'jest-axe/extend-expect'\nimport NoAccessibility from './NoAccessibility'\n```", "```js\n  const { container } = render(<NoAccessibility />)\n  const results = await axe(container)\n  expect(results).toHaveNoViolations()\n```", "```js\n<input src={loginImg} type=\"image\" alt=\"login\" />\n```", "```js\n      <ul>\n        <li>Building with React</li>\n        <li>Testing with React Testing Library</li>\n        <img\n          src=\"img/200?random&gravity=center\"\n          alt=\"tulips\"\n        />\n      </ul>\n```", "```js\n      <ul>\n        <li>Building with React</li>\n        <li>Testing with React Testing Library</li>\n        <li>\n          <img\n            src=\"img/200?random&               gravity=center\"\n            alt=\"tulips\"\n          />\n        </li>\n      </ul>\n```", "```js\nimport { render, screen } from '@testing-library/react'\nimport MoreInfoPopover from './MoreInfoPopover'\nit('logs output to Testing Playground', () => {\n  render(<MoreInfoPopover />)\n  screen.logTestingPlaygroundURL()\n})\n```", "```js\ntest('MoreInfoPopover, given clicked button, displays popover',   () => {\n  render(<MoreInfoPopover />)\n```", "```js\n  screen.getByRole('button', {  name: /more info/i})\n```", "```js\n  user.click(screen.getByRole('button', { name: /more info/i     }))\n  const popover = await screen.findByRole('heading', { name: /     lorem ipsum/i })\n  expect(popover).toBeInTheDocument()\n```", "```js\n  const popover = await screen.findByRole('heading', { name: /     lorem ipsum/i })\n```"]