- en: Enhanced Inputs and Selects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强输入和选择
- en: This chapter explains frequently used input and select components with enhanced
    features for any kind of application or website. Such components are the main
    parts of every web application*.* All the features of each component will cover
    many real-time use cases that you may encounter while developing the project.
    Input and select components are the first citizens while you're creating a login
    form or registration form or any kind of form-filling application. Due to the
    rapid revolution in web usage and technology improvements, there is a need for
    various enhanced inputs and select components that make the web more powerful.
    PrimeNG provides over 20 components for data input and select, which extend standard
    or native HTML components with skinning capabilities and useful features, such
    as user-friendly interface, validation, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了增强功能的常用输入和选择组件，适用于任何类型的应用程序或网站。这些组件是每个Web应用程序的主要部分。每个组件的所有功能将涵盖您在开发项目时可能遇到的许多实时用例。在创建登录表单、注册表单或任何类型的表单填写应用程序时，输入和选择组件是首要考虑的因素。由于Web使用的快速革命和技术改进，需要各种增强的输入和选择组件，使Web更加强大。PrimeNG提供了超过20个用于数据输入和选择的组件，这些组件通过皮肤能力和有用功能（如用户友好界面、验证等）扩展了标准或原生HTML组件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Formatted input with InputMask
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用InputMask进行格式化输入
- en: Autosuggestion with AutoComplete
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动完成的自动建议
- en: Entering multiple values with Chips
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用芯片输入多个值
- en: Discovering checkbox - boolean, many, and TriState
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现复选框-布尔、多个和三态
- en: Choosing items with Single and MultiSelect components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单选和多选组件选择项目
- en: Basic and advanced Calendar scenarios
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本和高级日历场景
- en: Spinner and Slider - different ways to provide input
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微调器和滑块-提供输入的不同方式
- en: Text editing with rich and powerful editors
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用丰富和强大的编辑器进行文本编辑
- en: Password and star-based rating inputs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码和基于星级的评分输入
- en: Validation with input and select components
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用输入和选择组件进行验证
- en: Formatted input with InputMask
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用InputMask进行格式化输入
- en: 'InputMask is a special kind of input component that minimizes the chances for
    the user to input incorrect data. It applies flexible validation with the provided
    masking template. This is especially useful to enter input in a certain format,
    such as numeric, alphanumeric, date, currency, email, and phone. A basic example
    of an InputMask component for a phone number input would be as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: InputMask是一种特殊类型的输入组件，可以最大程度地减少用户输入不正确数据的机会。它应用了提供的掩码模板的灵活验证。这对以特定格式输入数据特别有用，例如数字、字母数字、日期、货币、电子邮件和电话。电话号码输入的InputMask组件的基本示例如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As per the preceding example, the mask value `(999) 999-9999` depicts that
    only a number can be input along with the parenthesis and dashed structure. Due
    to the usage of the placeholder with the same mask value, it suggests the kind
    of input format that needs to be provided. The initial display of the input looks
    as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的示例，掩码值`(999) 999-9999`表示只能输入数字，括号和破折号结构。由于使用了相同掩码值的占位符，它建议提供的输入格式。输入的初始显示如下：
- en: '![](assets/20fb35dd-516b-4b16-95bc-db10403875b5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20fb35dd-516b-4b16-95bc-db10403875b5.png)'
- en: Once the input gets the focus, the numbers in the mask format will be replaced
    with an empty space and the other characters will remain in the initial phase.
    The default placeholder character for mask is underscore (`_`), so it will display
    underscore characters for each number digit. After each `keyPress` event, the
    mask character (that is, `9`) will be filled up with the actual character. If
    the provided input is incomplete or blurred, then the entire input will be cleared
    out automatically (by default, `autoClear` is `true`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦输入获得焦点，口罩格式中的数字将被空格替换，而其他字符将保持在初始阶段。口罩的默认占位符字符是下划线（`_`），因此它将为每个数字显示下划线字符。每次`keyPress`事件发生后，口罩字符（即`9`）将被实际字符填充。如果提供的输入不完整或模糊，则整个输入将自动清除（默认情况下，`autoClear`为`true`）。
- en: 'There are cases to do certain functionalities during the event occurrence in
    the component''s DOM tree. The `inputMask` component supports the `onComplete`
    callback to invoke when the user completes the mask pattern. For example, the
    user would be notified when the mask input completes as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的DOM树中发生事件时，有些情况需要执行某些功能。`inputMask`组件支持`onComplete`回调，在用户完成口罩模式时调用。例如，当用户完成口罩输入时，用户将收到通知，如下所示：
- en: '![](assets/0605e836-3009-4bcc-a3b5-37f2f1c214e1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0605e836-3009-4bcc-a3b5-37f2f1c214e1.png)'
- en: The growl message appears at the top of the page with the close icon, which
    allows us to remove the sticky notification at any point in time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Growl消息出现在页面顶部，带有关闭图标，这样我们可以随时删除粘性通知。
- en: Mask format options
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 口罩格式选项
- en: 'The `mask` attribute is mandatory to use for the input mask. The component
    not only allows the number type, but it also supports alphabetic and alphanumeric
    characters, so the mask format can be a combination of the following built-in
    definitions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`mask`属性是使用输入口罩的必需属性。该组件不仅允许数字类型，还支持字母和字母数字字符，因此口罩格式可以是以下内置定义的组合：'
- en: '`a`: Alphabetic character (`A-Z,a-z`)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`：字母字符（`A-Z，a-z`）'
- en: '`9`: Numeric character (`0-9`)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`9`：数字字符（`0-9`）'
- en: '`*`: Alphanumeric character (`A-Z,a-z,0-9`)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：字母数字字符（`A-Z，a-z，0-9`）'
- en: 'Let''s take an example where we can show the input mask with different mask
    options based on a radio button selection, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子，我们可以根据单选按钮的选择显示具有不同口罩选项的输入口罩，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As per the preceding example, only one input element will be displayed with
    the defined mask. The following screenshot shows a snapshot result of the mask
    format for a date:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的示例，只会显示一个带有定义口罩的输入元素。以下屏幕截图显示了日期口罩格式的快照结果：
- en: '![](assets/76c545e9-f1a4-466b-a312-95c38063ae7d.png)The `unmask` attribute
    can be used to control masked or unmasked output for the value bounded. For instance,
    it is useful if `ngModel` sets either a raw unmasked value or a formatted mask
    value to the component''s bound value.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/76c545e9-f1a4-466b-a312-95c38063ae7d.png) `unmask`属性可用于控制值的掩码或未掩码输出。例如，如果`ngModel`将原始未掩码值或格式化的掩码值设置为组件的绑定值，则它非常有用。'
- en: Using the slot character
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用占位符字符
- en: 'As stated before, underscore (`_`) is the default active placeholder in a mask.
    But this can be customized using the `slotChar` attribute, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，下划线（`_`）是口罩中默认的活动占位符。但是可以使用`slotChar`属性进行自定义，如下所示：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `slotChar` option can be either a single character or an expression.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`slotChar`选项可以是单个字符或表达式。'
- en: Making a part of the mask optional
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将口罩的一部分设为可选项
- en: 'Till now, all the examples of input masks have shown that all the characters
    in a mask are mandatory. It is also possible that you can make a part of the mask
    optional with the use of the question mark (`?`) character. Anything listed after
    the question mark within a mask definition will be treated as an optional input.
    A common use case is displaying the phone number with an optional extension number,
    as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有输入掩码的示例都表明掩码中的所有字符都是必需的。也可以通过使用问号（`?`）字符使掩码的一部分变为可选。在掩码定义中问号后面列出的任何内容都将被视为可选输入。一个常见的用例是显示带有可选分机号码的电话号码，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once the user finishes the input by reaching the question mark character and
    blurs the component, the rest of the validation will be skipped. That is, the
    input up to that part won't be erased. For example, phone number inputs, such
    as `(666) 234-5678` and `(666) 234-5678? x1230` will be valid inputs for the mask's
    optional case.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户通过到达问号字符完成输入并模糊组件，其余的验证将被跳过。也就是说，直到那部分的输入不会被擦除。例如，电话号码输入，如`(666) 234-5678`
    和 `(666) 234-5678? x1230` 将是掩码的可选情况的有效输入。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/inputmask.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/inputmask)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/inputmask.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/inputmask)'
- en: Autosuggestion with AutoComplete
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AutoComplete的自动建议
- en: AutoComplete is an input component that provides real-time suggestions while
    the user types into the input field. This enables users to quickly find and select
    from a list of looked-up values as they type, which leverages the searching and
    filtering abilities.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: AutoComplete是一个输入组件，它在用户输入到输入框时提供实时建议。这使用户能够在输入时快速查找并从查找的值列表中进行选择，从而利用了搜索和过滤功能。
- en: 'A basic usage of the AutoComplete component includes the `suggestions` attribute
    to provide the list of all resulted items and `completeMethod` to filter items
    based on the typed query. For example, the following AutoComplete component displays
    the list of countries based on the user query:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: AutoComplete组件的基本用法包括`suggestions`属性，以提供所有结果项的列表，以及`completeMethod`，以根据输入的查询过滤项目。例如，以下AutoComplete组件根据用户查询显示国家列表：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding example, `minLength="1"` is used as minimum characters for
    the input to query results. This will render the output as shown in the following
    snapshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`minLength="1"` 用作输入查询结果的最小字符数。这将呈现如下快照中所示的输出：
- en: '![](assets/e88eeb51-c9eb-469d-9613-dd666fb8bda4.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e88eeb51-c9eb-469d-9613-dd666fb8bda4.png)'
- en: 'As the user types in the input field, the complete method will filter the items
    on demand. The method has to be defined in the component class, as shown here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在输入框中输入时，complete方法将按需过滤项目。该方法必须在组件类中定义，如下所示：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding method allows filtering of the list of countries based on the
    user query. In this case, it will filter all the countries that start with the
    `query` character.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法允许根据用户查询对国家列表进行过滤。在这种情况下，它将过滤所有以 `query` 字符开头的国家。
- en: To improve the user experience, AutoComplete provides a drop-down option through
    the `dropdown` property. On clicking the drop-down icon, it will populate all
    possible items in a downwards popup immediately.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善用户体验，AutoComplete通过`dropdown`属性提供了一个下拉选项。单击下拉图标，它将立即在向下弹出窗口中填充所有可能的项目。
- en: Multiple selection
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多重选择
- en: With AutoComplete, it is also possible to select more than one value by setting
    the `multiple` property to `true`. With the help of multiple selects, the selected
    texts can be retrieved as an array (for example, the `countries` property). In
    this case, `ngModel` should refer to an array.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AutoComplete，还可以通过将`multiple`属性设置为`true`来选择多个值。借助多选，可以将选定的文本作为数组（例如，`countries`属性）检索出来。在这种情况下，`ngModel`应该引用一个数组。
- en: Working with objects
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对象
- en: 'Until now, AutoComplete has shown its power on primitive types, but it can
    work with object types as well. The value passed to the model would be an object
    instance, but the `field` property defines the label to be displayed as a suggestion.
    That is, in this case, the `field` property is used to display any property of
    the object as a label. The following example shows the power of the object usage:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，AutoComplete已经展示了它在原始类型上的强大功能，但它也可以处理对象类型。传递给模型的值将是一个对象实例，但`field`属性定义了要显示为建议的标签。也就是说，在这种情况下，`field`属性用于将对象的任何属性显示为标签。以下示例展示了对象使用的功能：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding example, the `Country` object is used as a model object instance
    and the suggestions displayed are from the country using the `name` field property.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`Country`对象被用作模型对象实例，显示的建议来自使用`name`字段属性的国家。
- en: Advanced features - the customized content displays
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级功能 - 定制内容显示
- en: 'In many cases, normal field population is just not enough; it would be more
    powerful to have customized content for a better experience. AutoComplete provides
    this feature using `ng-template`, which displays the custom content inside the
    suggestions panel. The local `template` variable passed to `ng-template` is an
    object from the `suggestions` array. The customized example of AutoComplete with
    the country''s name and flag would be as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，普通字段填充是不够的；为了获得更好的体验，定制内容会更有力量。AutoComplete使用`ng-template`提供了这个功能，它在建议面板内显示定制内容。传递给`ng-template`的本地`template`变量是`suggestions`数组中的一个对象。具有国家名称和国旗的AutoComplete的定制示例如下：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There is no restriction on what kind of data can be shown. The following screenshot
    shows a snapshot result of the customized country information:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对显示的数据类型没有限制。以下截图显示了定制国家信息的快照结果：
- en: '![](assets/bdc965b3-f85c-4525-bde7-c698f512c396.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdc965b3-f85c-4525-bde7-c698f512c396.png)'
- en: The `item` template is used to customize the content inside the suggestions
    panel where `selectedItem` is used to customize a selected item in the multiple
    selection.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`item`模板用于定制建议面板内的内容，其中`selectedItem`用于定制多选中的选定项。'
- en: 'The AutoComplete component supports many events as mentioned here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: AutoComplete组件支持许多事件，如下所述：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `completeMethod` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `completeMethod` |'
- en: '`event.originalEvent`: The browser event'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.query`: Value to search with'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.query`: 用于搜索的值'
- en: '| Callback to `invoke` to search for suggestions. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 调用以搜索建议的回调函数。 |'
- en: '| `onFocus` | `event`: Browser event | Callback to `invoke` when AutoComplete
    gets focus. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `onFocus` | `event`: 浏览器事件 | 当AutoComplete获得焦点时调用的回调函数。 |'
- en: '| `onBlur` | `event`: Browser event | Callback to `invoke` when AutoComplete
    loses focus. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `onBlur` | `event`: 浏览器事件 | 当AutoComplete失去焦点时调用的回调函数。 |'
- en: '| `onSelect` | `value`: The selected value | Callback to `invoke` when a suggestion
    is selected. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `onSelect` | `value`: 选定的值 | 当选择建议时调用的回调函数。 |'
- en: '| `onUnselect` | `value`: Unselected value in multiple mode | Callback to `invoke`
    when a selected value is removed. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `onUnselect` | `value`: 多选模式下取消选定的值 | 当取消选定的值时调用的回调函数。 |'
- en: '| `onDropdownClick` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `onDropdownClick` |'
- en: '`event.originalEvent`: The browser event'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.originalEvent`: 浏览器事件'
- en: '`event.query`: The current value of the input field'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.query`: 输入字段的当前值'
- en: '| Callback to `invoke` when the dropdown button is clicked. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 当下拉按钮被点击时调用的回调函数。|'
- en: '| `onClear` | `event`: The browser event | Callback to `invoke` when the `input`
    field is cleared. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `onClear` | `event`: 浏览器事件 | 当`input`字段被清除时调用的回调函数。|'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/autocomplete.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/autocomplete)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/autocomplete.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/autocomplete)'
- en: Entering multiple values with Chips
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用芯片输入多个值
- en: 'The Chip component is used to represent multiple complex entities in an input
    field as small blocks, such as contact information. A Chip may contain entities
    such as photo, title, text, rules, icons, or even a contact. This is useful to
    represent information in a compact way. The following basic example of the Chips
    component represents contact names in an order. By default, each entity can be
    deleted with the help of a cross icon or backspace keystroke:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片组件用于在输入字段中表示多个复杂实体，如联系信息，以小块的形式。芯片可以包含实体，如照片、标题、文本、规则、图标，甚至联系人。这对以紧凑的方式表示信息很有用。芯片组件的以下基本示例表示联系人姓名的顺序。默认情况下，每个实体都可以通过叉号图标或退格键删除：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows a snapshot result of the company contact names
    as a Chip example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了公司联系人姓名作为芯片示例的快照结果：
- en: '![](assets/dd0108f1-1fed-4351-85d6-c3d63c02c101.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd0108f1-1fed-4351-85d6-c3d63c02c101.png)'
- en: The Chip component supports two event callbacks named `onAdd` and `onRemove`.
    These event callbacks will be invoked when adding and removing Chips from the
    input box, respectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片组件支持两个名为`onAdd`和`onRemove`的事件回调。这些事件回调将在向输入框添加和移除芯片时被调用。
- en: Display complex information using template
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板显示复杂信息
- en: 'A Chip is customized using the `ng-template` element where the value is passed
    as the implicit variable. The content of `ng-template` consists of normal text,
    icons, images, and any other components. Remember that a customized Chip component
    doesn''t have a cross icon, that is, we can remove the Chip entry with backspace
    only. The customized example of the Chip component with icons would be as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ng-template`元素自定义芯片，其中值作为隐式变量传递。`ng-template`的内容包括普通文本、图标、图片和任何其他组件。请记住，自定义芯片组件没有叉号图标，也就是说，我们只能通过退格键删除芯片条目。带有图标的芯片组件的自定义示例如下：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding example, customized content is displayed with the company
    logo and the contact name. The following screenshot shows a snapshot result of
    the customized Chip example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，使用公司标志和联系人姓名显示了自定义内容。以下屏幕截图显示了自定义芯片示例的快照结果：
- en: '![](assets/9372e785-2633-4c4a-a944-244125d35968.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9372e785-2633-4c4a-a944-244125d35968.png)'
- en: The Chips' user entry actions will be controlled using the `max` and `disabled`
    properties. The maximum number of entries can be restricted using the `max` attribute.
    For example, if we set `max="5"`, it won't allow adding a sixth entry in the input.
    Whereas `disabed="true"` makes a disabled input, which restricts the Chips' entry.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`max`和`disabled`属性来控制芯片的用户输入操作。可以使用`max`属性限制最大条目数。例如，如果我们设置`max="5"`，则不允许在输入中添加第六个条目。而`disabled="true"`会使输入框被禁用，从而限制芯片的输入。
- en: The PrimeNG 4.1 release introduced `inputStyle` and `inputStyleClass` properties
    for customized input and the `allowDuplicate` property to control the duplicate
    inputs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 4.1版本引入了用于自定义输入的`inputStyle`和`inputStyleClass`属性，以及用于控制重复输入的`allowDuplicate`属性。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/chips.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/chips)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击以下链接查看章节3中的chips示例代码：[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/chips.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/chips)
- en: Discovering checkbox - boolean, many, and TriState
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现复选框 - 布尔值，多个和三态
- en: A checkbox is an extension to the standard checkbox element with skinning capabilities.
    The checkbox can either be used as a single checkbox to provide a Boolean value
    or in multiple selections with multiple checkboxes having the same group name.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框是具有皮肤功能的标准复选框元素的扩展。复选框可以作为单个复选框来提供布尔值，也可以作为具有相同组名的多个复选框的多个选择。
- en: Boolean checkbox - single selection
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔复选框 - 单选
- en: 'By default, multiple selection is enabled for the checkbox, and we can have
    a single selection by enabling the `binary` attribute. A basic example of a checkbox
    with a single selection would be as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，复选框启用了多选功能，我们可以通过启用`binary`属性来进行单选。单选复选框的基本示例如下：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding example, the boolean checkbox is used to know the interest
    of Angular framework. The component will be displayed as shown in the following
    screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，布尔复选框用于了解对Angular框架的兴趣。组件将显示如下截图所示：
- en: '![](assets/16166cbd-2ff0-4d78-988b-77b8b339ca6b.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/16166cbd-2ff0-4d78-988b-77b8b339ca6b.png)'
- en: The preselection of the checkbox is also possible by enabling the Boolean property
    in the model.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在模型中启用布尔属性，也可以实现复选框的预选。
- en: Checkbox multiple selection
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复选框多选
- en: 'As mentioned earlier, the multiple selection is enabled by default with multiple
    checkbox controls having the same group name. In this case, the `model` property
    binds to an array to hold selected values. By assigning the individual checkbox
    values to the selected values, the checkbox group is displayed with preselection.
    The multiple checkbox selection for selecting different favorite Angular versions
    would be as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，默认情况下启用了多选功能，多个复选框控件具有相同的组名。在这种情况下，`model`属性绑定到一个数组以保存所选值。通过将单个复选框的值分配给所选值，复选框组将显示预选项。选择不同的喜爱的Angular版本的多个复选框选择如下：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The checkbox group will be displayed with the default selection, as shown in
    the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框组将显示默认选择，如下截图所示：
- en: '![](assets/399a8289-e05d-4fc9-820e-eaac9d3fb1f5.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/399a8289-e05d-4fc9-820e-eaac9d3fb1f5.png)'
- en: To notify the checkbox selections, there is one event callback named `onChange`
    that will be invoked on user actions. At the same time, the user actions are disabled
    through the `disabled` property.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通知复选框选择，有一个名为`onChange`的事件回调，将在用户操作时被调用。同时，用户操作通过`disabled`属性被禁用。
- en: Multistate representation - TriStateCheckbox
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多状态表示 - TriStateCheckbox
- en: 'PrimeNG goes beyond the normal checkbox behavior of the "true/false" selection
    on the web. In some cases, there is a need for a "true/false/null" combination,
    especially to represent the status of any entity. Remember that the `model` property
    is assigned to any type instead of a `boolean` type. A basic example of a TriStateCheckbox
    used to enter the feedback for Angular 4 would be as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG超越了Web上“真/假”选择的普通复选框行为。在某些情况下，特别是表示任何实体的状态时，需要“真/假/空”组合。请记住，`model`属性分配给任何类型而不是`boolean`类型。用于输入对Angular
    4的反馈的TriStateCheckbox的基本示例如下：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'TriStateCheckbox will be displayed with three different states (excellent,
    good, and bad) as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: TriStateCheckbox将显示三种不同的状态（优秀，良好和不好），如下截图所示：
- en: '![](assets/c6522e2d-69f8-4268-9ae5-9704c0cfb550.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c6522e2d-69f8-4268-9ae5-9704c0cfb550.png)'
- en: This enhanced checkbox also provides the `onChange` event callback for any user
    interactions. The user actions are disabled through the `disabled` property, just
    like the normal boolean checkbox.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此增强复选框还为任何用户交互提供了`onChange`事件回调。用户操作通过`disabled`属性禁用，就像普通的布尔复选框一样。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/checkbox.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/checkbox)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/checkbox.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/checkbox)'
- en: Choosing items with single and MultiSelect components
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单选和多选组件选择项目
- en: 'Dropdown provides a way to select an item from a collection of available options.
    To list out all possible options, we should use the `SelectItem` interface that
    defines label-value properties, and this list will bind to the `options` attribute.
    The two-way binding for selected items is defined through the `model` property.
    Let''s display a list of countries in a dropdown for user input. A basic example
    of a dropdown with the list of options would be as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉提供了一种从可用选项集合中选择项目的方法。要列出所有可能的选项，我们应该使用定义标签值属性的`SelectItem`接口，并将此列表绑定到`options`属性。选定项目的双向绑定通过`model`属性进行定义。让我们为用户输入在下拉框中显示一个国家列表。下拉框的基本示例将如下所示：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The dropdown will be displayed with options as shown in the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉框将显示如下所示的选项：
- en: '![](assets/9fe92969-59a4-468a-a080-77ce8e8664ee.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9fe92969-59a4-468a-a080-77ce8e8664ee.png)'
- en: The Dropdown component provides three event callbacks, such as `onChange`, `onFocus`,
    and `onBlur`. When the dropdown value changes, it gets the focus and looses the
    focus, respectively. There is a provision to edit the input directly like any
    other input components using the `editable` property (that is, `editable="true"`).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉组件提供了三个事件回调，如`onChange`，`onFocus`和`onBlur`。当下拉值发生变化时，分别获得焦点和失去焦点。有一个属性`editable`（即`editable="true"`）可以直接编辑输入，就像其他输入组件一样。
- en: The width and height of the dropdown's viewport will be controlled through the
    `autoWidth` and `scrollHeight` properties. By default, the width of the dropdown
    is calculated based on the options width. Whereas, the scroll height is controlled
    through the `scrollHeight` option in pixels, the scrollbar is defined if the height
    of the list exceeds this value.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉视口的宽度和高度将通过`autoWidth`和`scrollHeight`属性进行控制。默认情况下，下拉框的宽度是根据选项的宽度计算的。而滚动高度通过`scrollHeight`选项以像素为单位进行控制，如果列表的高度超过此值，则定义滚动条。
- en: Customized Dropdown
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义下拉框
- en: 'The Dropdown component is more powerful with customized content over the default
    label text of an item. The `filter` property is used to filter all the possible
    options through an input in an overlay. A customized example of a Dropdown with
    the list of options representing a country name and a flag image would be as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉组件通过自定义内容比默认标签文本更强大。`filter`属性用于通过覆盖中的输入筛选所有可能的选项。下拉框的自定义示例，显示了代表国家名称和国旗图像的选项列表，将如下所示：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The dropdown will be displayed with the custom content and filtering as shown
    in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉框将显示自定义内容和过滤，如下面的屏幕截图所示：
- en: '![](assets/3ba4fa39-0ecc-48aa-bbfd-656a5eabb8d7.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ba4fa39-0ecc-48aa-bbfd-656a5eabb8d7.png)'
- en: Instead of scrolling down to see a list of all the countries, there is a filter
    input option at the top to filter country names by their starting letters. It
    also supports multiproperty filtering with comma-separated values (for example,
    `filterBy="label, value.name"`.) By default, filtering is done against the label
    of the `SelectItem` API.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不必向下滚动查看所有国家的列表，顶部有一个过滤输入选项，可以按其起始字母过滤国家名称。它还支持逗号分隔值的多属性过滤（例如，`filterBy="label,
    value.name"`）。默认情况下，过滤是针对`SelectItem` API的标签进行的。
- en: The MultiSelect dropdown
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多选下拉框
- en: 'The MultiSelect component is used to select multiple items from a collection,
    unlike the Dropdown component, which provides single item selection. A basic example
    of a MultiSelect component with the list of countries would be as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 多选组件用于从集合中选择多个项目，而不是提供单个项目选择的下拉组件。具有国家列表的多选组件的基本示例如下：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The list of options is available through collection of the `SelectItem` interface,
    which takes a label-value pair. The list of options is bound through the `options`
    attribute of the MultiSelect component. The MultiSelect will be displayed with
    the countries list, as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 选项列表通过`SelectItem`接口的集合可用，该接口采用标签值对。选项列表通过多选组件的`options`属性绑定。多选将显示国家列表，如下面的屏幕截图所示：
- en: '![](assets/9dc79414-33f0-468e-996f-346860b4f862.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9dc79414-33f0-468e-996f-346860b4f862.png)'
- en: In this case, the user can select multiple countries using the checkbox option,
    which is available for each item, and filter input to select specific options.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，用户可以使用复选框选项选择多个国家，该选项适用于每个项目，并且可以过滤输入以选择特定选项。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/select.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/select)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/select.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/select)'
- en: Basic and advanced Calendar scenarios
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本和高级日历场景
- en: 'The Calendar is an input component that selects a date input in different customized
    ways, such as inline, localization, restricted to particular dates, and time-oriented.
    In this case, the Calendar model is backed by a date type property. The simplest
    component declaration for a basic date selection would be as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 日历是一种输入组件，以不同的定制方式选择日期输入，例如内联、本地化、限制特定日期和面向时间。在这种情况下，日历模型由日期类型属性支持。基本日期选择的最简单组件声明如下：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This displays an input textbox that, on being clicked opens up a pop-up date
    selection dialog, as shown here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示一个输入文本框，点击后会打开一个弹出式日期选择对话框，如下所示：
- en: '![](assets/b4edf36c-ee34-4443-af12-f6e18e8c98b2.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b4edf36c-ee34-4443-af12-f6e18e8c98b2.png)'
- en: Apart from the basic date selection, there is also a provision to navigate each
    month for each year with the help of left and right arrow controls at the top.
    This will be explained in the section on advanced features.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的日期选择外，还可以通过顶部的左右箭头控件在每年的每个月之间进行导航。这将在高级功能部分进行解释。
- en: 'The date selection is straightforward and can be done by clicking on a particular
    date in the pop-up dialog. By default, the Calendar is displayed in a popup, but
    this behavior can be altered with the `inline` property. The inline version of
    the calendar display would be as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择很简单，可以通过点击弹出对话框中的特定日期来完成。默认情况下，日历显示为弹出式，但可以通过`inline`属性更改此行为。日历显示的内联版本如下：
- en: '![](assets/4adf4ae8-87b4-412f-96d8-5f1ef6245a57.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4adf4ae8-87b4-412f-96d8-5f1ef6245a57.png)'
- en: 'For a better user experience, there is one more option available from the component
    that displays the Calendar popup through the `showIcon` property. The Calendar
    input example, used with the icon button, would look as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好的用户体验，组件还提供了通过`showIcon`属性显示日历弹出窗口的另一个选项。使用图标按钮的日历输入示例如下：
- en: '![](assets/f80be38d-b441-4a7c-86df-316694ef16d3.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f80be38d-b441-4a7c-86df-316694ef16d3.png)'
- en: The visual display of the Calendar component with the `icon` attribute will
    change the default icon displayed next to the input.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 日历组件的可视显示，带有`icon`属性的将改变输入框旁边显示的默认图标。
- en: Localization
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地化
- en: 'Localization for different languages and formats is defined by binding the
    local settings object to the `locale` property. The default local value is `English`.
    To represent a different locale, we should provide the respective language text
    labels. For example, the German locale should provide the following labels for
    the German calendar:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 不同语言和格式的本地化是通过将本地设置对象绑定到`locale`属性来定义的。默认的本地值是`英语`。要表示不同的区域设置，我们应该提供相应的语言文本标签。例如，德语区域应该为德语日历提供以下标签：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The calendar with German locale labels will be displayed as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 带有德语区域标签的日历将显示如下：
- en: '![](assets/f7fd7d3e-11b9-4d55-b83f-133b82b2a593.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7fd7d3e-11b9-4d55-b83f-133b82b2a593.png)'
- en: As shown before, the locale-specific labels need to be formatted as JSON in
    the backing component to display the locale-specific calendar.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，区域特定的标签需要在后台组件中格式化为JSON以显示区域特定的日历。
- en: Time picker options
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间选择器选项
- en: 'Along with standard calendar dates selection, we can also display time using
    `showTime` and `hourFormat`. This can be further restricted to display time only
    using the `timeOnly` attribute, which is just a time picker. For example, the
    `timeOnly` option will display the time picker as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的日历日期选择，我们还可以使用`showTime`和`hourFormat`来显示时间。这可以进一步限制为仅使用`timeOnly`属性来显示时间，这只是一个时间选择器。例如，`timeOnly`选项将显示时间选择器如下：
- en: '![](assets/9a164876-0b8b-4c04-b2d6-c17b4a1574bf.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a164876-0b8b-4c04-b2d6-c17b4a1574bf.png)'
- en: The two time formats (12H Format and 24H Format) will be shown one at a time
    using the split button with both options. Note that the `showTime` property is
    enabled in this case.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 两种时间格式（12小时制和24小时制）将使用分割按钮分别显示。请注意，此时启用了`showTime`属性。
- en: Advanced features
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级功能
- en: 'The advanced features of the Calendar component such as the date format (using
    the `dateFormat` attribute), restricted dates (using the `min` and `max` dates),
    month and year navigators for easy access (using the `monthNavigator`, `yearNavigator`,
    and `yearRange` attributes), readonly input (using the `readOnlyInput` property),
    and useful events, such as `onSelect`, `onFocus`, `onClear`, and `onBlur`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 日历组件的高级功能，如日期格式（使用`dateFormat`属性）、受限日期（使用`min`和`max`日期）、月份和年份导航器以便轻松访问（使用`monthNavigator`、`yearNavigator`和`yearRange`属性）、只读输入（使用`readOnlyInput`属性）以及有用的事件，如`onSelect`、`onFocus`、`onClear`和`onBlur`：
- en: '![](assets/89c878d9-c334-489b-bfe4-97a672c8c2b4.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/89c878d9-c334-489b-bfe4-97a672c8c2b4.png)'
- en: The preceding snapshot depicts a calendar that can be used with any possible
    combination of its features.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上述快照描述了可以与其特性的任何可能组合一起使用的日历。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/calendar.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/calendar)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/calendar.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/calendar)'
- en: Spinner and Slider – different ways to provide input
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转器和滑块-提供输入的不同方式
- en: 'The input component Spinner provides a numerical input via increments and decrements
    using controls or buttons. But still, there is an option to use it as normal `InputText`
    too. A basic example of a Spinner would be as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 输入组件Spinner通过控件或按钮提供数字输入的增量和减量。但仍然有选项可以将其用作普通的`InputText`。Spinner的基本示例如下：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The Spinner will be displayed with button controls, as shown in the following
    screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，Spinner将显示带有按钮控件：
- en: '![](assets/f2d6f7ed-4541-46f7-bf67-fcbe2945f05b.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f2d6f7ed-4541-46f7-bf67-fcbe2945f05b.png)'
- en: As shown in the snapshot, the value can be modified serially using the Spinner
    controls. Just like any other input component, Spinner supports the `onChange`
    event callback, which will be invoked upon a value change. The maximum number
    of characters allowed can be controlled through the `maxlength` property. The
    user interaction will be restricted through the `readonly` and `disabled` attributes.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如快照所示，可以使用Spinner控件连续修改值。与任何其他输入组件一样，Spinner支持`onChange`事件回调，该回调将在值更改时被调用。可以通过`maxlength`属性控制允许的最大字符数。用户交互将通过`readonly`和`disabled`属性受限。
- en: Advanced features - going beyond basic usage
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级功能-超越基本用法
- en: 'The Spinner component provides more features than just having increment and
    decrement controls. It can provide features such as value boundaries with `min`
    and `max` attributes, customized step factors (by default step factor is `1`)
    using the `step` attribute, and number separators, such as `decimalSeparator`
    and `thousandSeparator`. The customized example of a Spinner would be as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Spinner组件提供的功能不仅仅是具有增量和减量控件。它还可以提供诸如使用`min`和`max`属性的值边界，使用`step`属性自定义步进因子（默认步进因子为`1`）以及数字分隔符，例如`decimalSeparator`和`thousandSeparator`。Spinner的自定义示例如下：
- en: '[PRE19]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The Spinner will be displayed with button controls, as shown in the following
    screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，Spinner将显示带有按钮控件：
- en: '![](assets/c09f0c40-f52e-4f69-a3dc-f200c2f5622b.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c09f0c40-f52e-4f69-a3dc-f200c2f5622b.png)'
- en: Once the user input reaches `min` and `max` limits, the value cannot be changed
    by either controls or input.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户输入达到`min`和`max`限制，值将无法通过控件或输入更改。
- en: The format of the input can be customized using the `formatInput` attribute.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`formatInput`属性自定义输入的格式。
- en: Slider
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滑块
- en: 'The Slider component provides the user with the ability to input a value by
    using a Slider bar or using the dragging of a handle. The `model` property binds
    to a number type, which holds the input value. The input can be attached to Slider
    by providing the same model value for both. A basic example of a Slider would
    be as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块组件提供了使用滑块条或拖动手柄输入值的能力。`model`属性绑定到一个数字类型，它保存输入值。可以通过为两者提供相同的模型值将输入附加到滑块。滑块的基本示例如下：
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The Slider will be displayed with a dragging handle, as shown in the following
    screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，滑块将显示带有拖动手柄：
- en: '![](assets/b7cb7803-335c-458b-8ac6-7fda67c1d490.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b7cb7803-335c-458b-8ac6-7fda67c1d490.png)'
- en: The output value will be updated every time the handle is dragged across the
    bar.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 每次拖动手柄穿过条时，输出值将更新。
- en: Advanced features - going beyond basic usage
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级功能-超越基本用法
- en: The Slider component can be further customized in a similar way to the Spinner
    with input boundaries, using `min` and `max` attributes or the `range` attribute
    to mention both the boundaries at the same time, customized step factors (by default
    step factor is `1`) using the `step` attribute, and the `animate` property to
    provide animations on the click of a Slider.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块组件可以通过类似于具有输入边界的微调器的方式进行进一步定制，使用`min`和`max`属性或`range`属性同时提及两个边界，使用`step`属性定制步进因子（默认步进因子为`1`），以及使用`animate`属性在单击滑块时提供动画效果。
- en: The default orientation of the Slider input is horizontal. The direction or
    orientation of the Slider can be changed to vertical using the `orientation` property.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块输入的默认方向是水平的。可以使用`orientation`属性将滑块的方向或方向更改为垂直。
- en: 'Sometimes, it is good to have regular input along with the Slider handle, because
    it gives you the flexibility to enter input directly and is also used to display
    output by dragging the Slider handle. The customized example of a Slider would
    be as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，除了滑块手柄之外，还可以使用常规输入，因为这样可以直接输入并且还可以通过拖动滑块手柄来显示输出。滑块的定制示例如下：
- en: '[PRE21]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The Slider will be displayed with the customized features as shown in the following
    screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块将显示为以下截图所示的定制特性：
- en: '![](assets/c8ee31e2-a10b-4b19-97ea-a10d6000bb19.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c8ee31e2-a10b-4b19-97ea-a10d6000bb19.png)'
- en: The Slider input and Slider handle bar values are mutually dependent. For example,
    changing one value will reflect the other one.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块输入和滑块手柄值是相互依赖的。例如，更改一个值将反映另一个值。
- en: 'The complete demo application with instructions is available on GitHub:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到：
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/spinner](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/spinner)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/spinner](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/spinner)'
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/slider](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/slider)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/slider](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/slider)'
- en: Text editing with rich editors
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用富文本编辑器进行文本编辑
- en: 'An editor is a rich text editor (WYSIWYG ) based on the Quill editor. It contains
    a default toolbar with common options whose controls can be customized using the
    header element. The latest version of Quill 1.0 is used as a dependency for this.
    The basic text editor with a default toolbar can be represented as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器是基于Quill编辑器的富文本编辑器（所见即所得）。它包含一个带有常见选项的默认工具栏，其控件可以使用标题元素进行定制。此处使用的是Quill 1.0的最新版本作为依赖项。具有默认工具栏的基本文本编辑器可以表示如下：
- en: '[PRE22]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The text editor with common options will look as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 具有常见选项的文本编辑器将如下所示：
- en: '![](assets/46809025-d217-419e-875e-8bdcf68b5982.png)1\. Add the Quill 1.0 dependency
    in `package.json` and install it, or use the CLI tool to install it (`npm install
    quill --save`).'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/46809025-d217-419e-875e-8bdcf68b5982.png)1\. 在`package.json`中添加Quill
    1.0依赖项并安装它，或者使用CLI工具安装它（`npm install quill --save`）。'
- en: '2\. Also add the Quill script and style URLs in the entry page:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 还要在入口页面中添加Quill脚本和样式URL：
- en: '`<script src="https://cdn.quilljs.com/'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`<script src="https://cdn.quilljs.com/'
- en: 1.0.0-beta.3/quill.min.js"></script>`
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 1.0.0-beta.3/quill.min.js"></script>`
- en: '`<link rel="stylesheet" type="text/css" href="https://cdn.quilljs.com/1.0.0-'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`<link rel="stylesheet" type="text/css" href="https://cdn.quilljs.com/1.0.0-'
- en: beta.3/quill.snow.css">`
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: beta.3/quill.snow.css">`
- en: The editor supports `onTextChange` and `onSelectionChange` events, which will
    be invoked when the text of the editor changes and when the selected text of the
    editor changes, respectively.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器支持`onTextChange`和`onSelectionChange`事件，当编辑器的文本发生变化时，将调用`onTextChange`事件，当编辑器的选定文本发生变化时，将调用`onSelectionChange`事件。
- en: The customized editor
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义编辑器
- en: 'As stated before, the editor provides a default toolbar with common options.
    The toolbar can be customized by defining elements inside the header element.
    For example, a custom toolbar created with text style controls would be as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，编辑器提供了一个带有常用选项的默认工具栏。可以通过在头部元素内定义元素来自定义工具栏。例如，使用文本样式控件创建的自定义工具栏如下所示：
- en: '[PRE23]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The text editor with the customized toolbar will be displayed as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 带有自定义工具栏的文本编辑器将显示如下：
- en: '![](assets/bdbc87de-b4a2-42ed-a4d1-6b7329c7a485.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdbc87de-b4a2-42ed-a4d1-6b7329c7a485.png)'
- en: The toolbar can be customized with any number of toolbar controls in different
    ways. Refer to the Quill documentation for all available controls.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏可以以不同的方式使用任意数量的工具栏控件进行自定义。请参考Quill文档以获取所有可用的控件。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到。
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/editor.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/editor)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/editor.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/editor)'
- en: Password and star-based rating inputs
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码和基于星级的评分输入
- en: 'Password is an enhanced input with a secured entry of characters, like any
    other password fields on the web, but it provides strength indicators (weak, medium,
    and strong), which states the security strength of the user input. A basic example
    of a user password can be written as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 密码是一个增强型输入，具有字符的安全输入，就像网页上的其他密码字段一样，但它提供了强度指示器（弱、中、强），表示用户输入的安全强度。用户密码的基本示例可以写成如下形式：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following screenshot shows a snapshot result of a basic password example:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了基本密码示例的快照结果：
- en: '![](assets/9c515c7c-83d4-49c8-a4ab-2bef29a881c3.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c515c7c-83d4-49c8-a4ab-2bef29a881c3.png)'
- en: The password is applied to the input field by attaching the `pPassword` directive.
    The `ngModel` property is used to bind the password value.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过附加`pPassword`指令，密码应用于输入字段。`ngModel`属性用于绑定密码值。
- en: By default, password will display the prompt and strength indicator labels.
    There is an option to customize all the strength indicator labels with the help
    of attributes such as `promptLabel`, `weakLabel`, `mediumLabel`, and `strongLabel`.
    This will be helpful in localizing the password input according to the need. By
    default, the `feedback` attribute is `true`. The indicator labels appear once
    it gets the focus or key strokes in the input. But this behavior is altered by
    setting the feedback as `false`, which suppress the indicators for the input.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，密码将显示提示和强度指示标签。有一个选项可以使用诸如`promptLabel`、`weakLabel`、`mediumLabel`和`strongLabel`等属性来自定义所有强度指示标签。这将有助于根据需要本地化密码输入。默认情况下，`feedback`属性为`true`。一旦输入获得焦点或按键，指示标签就会出现。但是通过将反馈设置为`false`来改变这种行为，可以抑制输入的指示器。
- en: Rating input
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评分输入
- en: 'The Rating component provides a star-based rating with the ability to select
    and cancel. The basic declaration of the component would be as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 评分组件提供了基于星级的评分，具有选择和取消的功能。组件的基本声明如下：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here, the rating-bounded value should be a number type. The default visual
    of an Angular rating will look as shown in the following screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，评分限定值应该是一个数字类型。Angular评分的默认视觉效果如下截图所示：
- en: '![](assets/8179e89f-3cc3-452a-a243-35c028395ed6.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8179e89f-3cc3-452a-a243-35c028395ed6.png)'
- en: The `star` attribute helps to provide the number of stars in the rating. The
    default value of star is `5`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`star`属性帮助提供评分中的星星数量。星星的默认值为`5`。'
- en: 'The behavior of selecting and canceling the rating can be more interactive,
    and you can get notified with the help of `onRate` and `onCancel` callbacks. In
    the preceding snapshot, the rating value can be cleared with the cancel icon on
    the left-hand side. This is because, by default, the `cancel` attribute will be
    enabled. If the attribute is disabled then there is no chance of canceling the
    rating once it is selected. By disabling the `cancel` attribute, the rating snapshot
    will display without the icon, as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 选择和取消评分的行为可以更加交互，您可以通过`onRate`和`onCancel`回调来得到通知。在上面的快照中，评分值可以通过左侧的取消图标清除。这是因为，默认情况下`cancel`属性将被启用。如果该属性被禁用，则一旦选择评分就无法取消。通过禁用`cancel`属性，评分快照将显示为没有图标，如下所示：
- en: '![](assets/c6316c54-a238-48fc-afac-f6255993b6fd.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c6316c54-a238-48fc-afac-f6255993b6fd.png)'
- en: Due to this feature, the cancel button won't appear to cancel the given rating.
    Only one star can be deselected at a time.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个特性，取消按钮不会出现来取消给定的评分。一次只能取消一个星级。
- en: Currently, the Rating component doesn't support half or quarter values.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，评分组件不支持半个或四分之一的值。
- en: By enabling the `readonly` and `disabled` attributes on the Rating component,
    there is no way to select or cancel it. This can be useful for display purposes
    only.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在评分组件上启用`readonly`和`disabled`属性，无法选择或取消评分。这对于仅用于显示目的很有用。
- en: 'The complete demo application with instructions is available on GitHub:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到：
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password)
    [](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password)
    [](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/password)'
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/rating](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/rating)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/rating](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/rating)'
- en: Validation with the input and select components
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用输入和选择组件进行验证
- en: 'Angular provides three different ways of building forms in our applications:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Angular提供了三种不同的构建应用程序中表单的方式：
- en: '**Template-driven approach**: This approach allows us to build forms with very
    little to no application code required'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于模板的方法**：这种方法允许我们构建表单，几乎不需要或根本不需要应用程序代码'
- en: '**Model-driven (or reactive) approach using low-level APIs**: In this approach,
    we create our forms as testable without a DOM being required'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于模型驱动（或响应式）的低级API方法**：在这种方法中，我们创建的表单可以进行测试，而无需DOM'
- en: '**Model-driven with a higher level API**: This approach uses a higher level
    API called `FormBuilder`.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用更高级API的基于模型驱动的方法**：这种方法使用一个称为`FormBuilder`的更高级API。'
- en: PrimeNG created most of the input and select components with model-driven form
    support. Because of this, all input and select components are eligible for validation.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG创建了大多数输入和选择组件，并支持基于模型驱动的表单。因此，所有输入和选择组件都可以进行验证。
- en: 'Let''s take an example of a registration form with `firstname`, `lastname`,
    `password`, `address`, `phone`, and `gender` fields with validation support. PrimeNG
    components are backed by a model-driven API with `FormBuilder`, which groups all
    of the form controls to create a registration form, as shown here:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个带有`firstname`、`lastname`、`password`、`address`、`phone`和`gender`字段的带有验证支持的注册表单为例。PrimeNG组件由一个模型驱动的API支持，使用`FormBuilder`将所有表单控件分组以创建一个注册表单，如下所示：
- en: '[PRE26]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'HTML, however, contains the `form` element with a `formGroup` binding with
    the registration form. The form will wrap with the list of controls and validation
    conditions to display messages:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，HTML中包含了与注册表单绑定的`form`元素和`formGroup`。表单将包含一系列控件和验证条件以显示消息：
- en: '[PRE27]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A registration form with invalid input would result in an error messages, as
    shown in the following snapshot:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 具有无效输入的注册表单将导致错误消息，如下快照所示：
- en: '*![](assets/7a377c97-5548-4270-a8c4-231603d4dbdb.png)*'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '*![](assets/7a377c97-5548-4270-a8c4-231603d4dbdb.png)*'
- en: PrimeNG components provide validations through template-driven forms, as well
    as model-driven forms. The flexibility is given to the user on what kind of validation
    needs to be provided.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG组件通过模板驱动表单和模型驱动表单提供验证。用户可以灵活选择需要提供的验证类型。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到。
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/validation.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/validation)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/validation.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter3/validation)'
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: At the end of this chapter, you will be able to seamlessly use all available
    input and select components for any given use case. Initially, we covered all
    kinds of input components. At first, we started with formatting input with InputMask,
    autosuggestion with AutoComplete, and entering multiple values using Chips components.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的结尾，您将能够无缝地为任何给定的用例使用所有可用的输入和选择组件。最初，我们涵盖了各种输入组件。起初，我们从使用InputMask进行格式化输入，使用AutoComplete进行自动建议，以及使用Chips组件输入多个值开始。
- en: After that, we discussed the various checkbox components, such as the boolean
    checkbox, many checkbox, and TriState checkbox variations. Later, we discussed
    the frequently used select components, such as the single and MultiSelect components.
    The special use case-specific input components, such as Calendar date entry, Slider,
    Spinner, password, star, and text editing using rich editors we explained, with
    all the possible features. Finally, we ended this chapter by looking at validation
    with input and select components. All these components and all possible features
    were explained in a step-by-step approach.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们讨论了各种复选框组件，如布尔复选框、多选框和三态复选框变体。之后，我们讨论了常用的选择组件，如单选和多选组件。我们解释了特定用例的输入组件，如日历日期输入、滑块、微调器、密码、星号和使用丰富编辑器进行文本编辑，以及所有可能的功能。最后，我们通过查看输入和选择组件的验证来结束了本章。所有这些组件和所有可能的功能都是通过逐步方法进行解释的。
- en: In the next chapter, you are going to see how the various kinds of Button and
    Panel components are going to make your life easier.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将看到各种按钮和面板组件将如何使您的生活更轻松。
