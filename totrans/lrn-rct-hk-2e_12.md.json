["```js\nconst [data, saveData] = useLocalStorage(key, initialValue) \n```", "```js\n    $ cp -R Chapter09_1 Chapter10_1 \n    ```", "```js\n    $ npm install --save-exact @uidotdev/usehooks@2.4.1 \n    ```", "```js\n    import { useState } from 'react'\n    import { UserContext } from './contexts/UserContext.js' \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function App() {\n    **const** **[username, setUsername] =** **useState****(****''****)** \n    ```", "```js\n    export function App() {\n    **const** **[username] =** **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n     return (\n        <QueryClientProvider client={queryClient}>\n    **<****UserContext.Provider****value****=****{[username,****setUsername****]}>**\n            â€¦\n    **</****UserContext.Provider****>**\n    </QueryClientProvider>\n      )\n    } \n    ```", "```js\n    import { useContext } from 'react'\n    import { UserContext } from '@/contexts/UserContext.js' \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function UserBar() {\n      const [username] = **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n    import { useState } from 'react'\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function Register() {\n      const [, setUsername] = **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function Login() {\n      const [, setUsername] = **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n    import { useState, useEffect } from 'react'\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function Logout() {\n    **const** **[username, setUsername] =** **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n    import { **useContext**, useActionState } from 'react' \n    ```", "```js\n    import { UserContext } from '@/contexts/UserContext.js' \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function CreatePost() {\n      const [username] = **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function CreateComment({ addComment }) {\n      const [username] = **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n    import { useContext, useState, useOptimistic } from 'react' \n    ```", "```js\n    import { **UserContext** } from '@/contexts/UserContext.js' \n    ```", "```js\n    import { useLocalStorage } from '@uidotdev/usehooks' \n    ```", "```js\n    export function CommentList() {\n      const [username] = **useLocalStorage****(****'username'****,** **null****)** \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst { state, set, undo, redo, clear, canUndo, canRedo } = useHistoryState(initialState) \n```", "```js\n    import { useLocalStorage, **useHistoryState** } from '@uidotdev/usehooks' \n    ```", "```js\n    export function CreatePost() {\n      const [username] = useLocalStorage('username', null)\n      const navigate = useNavigate()\n    **const** **{ state, set, undo, redo, clear, canUndo, canRedo } =**\n    **useHistoryState****(****''****)** \n    ```", "```js\n     function handleContentChange(e) {\n        const { value } = e.target\n    set(value)\n      } \n    ```", "```js\n     <div>\n    <label htmlFor='create-title'>Title:</label>\n    <input type='text' name='title' id='create-title' />\n    </div>\n    **<****div****>**\n    **<****button****type****=****'****button'****disabled****=****{!canUndo}****onClick****=****{undo}****>**\n     **Undo**\n    **</****button****>**\n    **<****button****type****=****'****button'****disabled****=****{!canRedo}****onClick****=****{redo}****>**\n     **Redo**\n    **</****button****>**\n    **<****button****type****=****'****button'****onClick****=****{clear}****>**\n     **Clear**\n    **</****button****>**\n    **</****div****>** \n    ```", "```js\n     <textarea name='content' **value****=****{state}**\n     **onChange****=****{****handleContentChange****} />** \n    ```", "```js\n     const [error, submitAction, isPending] = useActionState(\n        async (currentState, formData) => {\n          const title = formData.get('title')\n          const content = formData.get('content')\n          const post = { title, content, author: username, featured:           false }\n          try {\n            const result = await createPostMutation.mutateAsync(post)\n            **clear****()**\n    navigate(`/post/${result.id}`)\n          } catch (err) {\n            return err\n          }\n        },\n      ) \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst [text, setText] = useState('')\nconst [value] = useDebounce(text, 1000) \n```", "```js\nconst [text, setText] = useState('')\nconst [debouncedSet, cancelDebounce] = useDebouncedCallback(\n  (value) => setText(value),\n  1000\n) \n```", "```js\n    $ cp -R Chapter10_1 Chapter10_2 \n    ```", "```js\n    $ npm install --save-exact use-debounce@10.0.4 \n    ```", "```js\n    import { useActionState, **useState, useEffect** } from 'react'\n    **import** **{ useDebouncedCallback }** **from****'use-debounce'** \n    ```", "```js\n     const { state, set, undo, redo, clear, canUndo, canRedo } =\n        useHistoryState('')\n    **const** **[content, setContent] =** **useState****(****''****)** \n    ```", "```js\n     const debounced = useDebouncedCallback((value) => set(value), 200) \n    ```", "```js\n     useEffect(() => {\n        debounced.cancel()\n        setContent(state)\n      }, [state, debounced]) \n    ```", "```js\n     function handleContentChange(e) {\n        const { value } = e.target\n    **setContent****(value)**\n    **debounced****(value)**\n      } \n    ```", "```js\n     <textarea name='content' value={**content**} onChange={handleContentChange} /> \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst [copiedText, copyToClipboard] = useCopyToClipboard() \n```", "```js\n    $ cp -R Chapter10_2 Chapter10_3 \n    ```", "```js\n    import { useCopyToClipboard } from '@uidotdev/usehooks' \n    ```", "```js\n    const CHECKMARK_EMOJI = <>&#9989;</>\n    const LINK_EMOJI = <>&#128279;</> \n    ```", "```js\n    export function CopyLink({ url }) { \n    ```", "```js\n     const [copiedText, copyToClipboard] = useCopyToClipboard() \n    ```", "```js\n     return (\n        <button type='button' onClick={() => copyToClipboard(url)}> \n    ```", "```js\n     {copiedText ? CHECKMARK_EMOJI : LINK_EMOJI}\n        </button>\n      )\n    } \n    ```", "```js\n    import { CopyLink } from './CopyLink.jsx' \n    ```", "```js\n     <h3 style={{ color: theme.primaryColor }}>\n            {title} **<****CopyLink** **url={****window****.****location****.****href****} />**\n          </h3> \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst [ref, hovering] = useHover() \n```", "```js\n    import { useCopyToClipboard, **useHover** } from '@uidotdev/usehooks' \n    ```", "```js\n    export function CopyLink({ url }) {\n      const [copiedText, copyToClipboard] = useCopyToClipboard()\n    **const** **[ref, hovering] =** **useHover****()** \n    ```", "```js\n     return (\n        **<>** \n    ```", "```js\n     <button **ref={ref}** type='button' onClick={() => copyToClipboard(url)}> \n    ```", "```js\n     {copiedText ? CHECKMARK_EMOJI : LINK_EMOJI}\n          </button>\n     **{hovering && (**\n    **<****small****>**\n    **<****i****>** **{copiedText ?** **'copied!'** **:** **'click to copy a link to the** \n     **post'****}****</****i****>**\n    **</****small****>**\n     **)}**\n    **</>**\n      )\n    } \n    ```"]