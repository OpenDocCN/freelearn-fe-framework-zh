["```js\n// ch6/ts/multi-page-template-driven/developer.ts\n\nexport class Developer { \n  public id: number; \n  public githubHandle: string; \n  public avatarUrl: string; \n  public realName: string; \n  public email: string; \n  public technology: string; \n  public popular: boolean; \n} \n\n```", "```js\n// ch6/ts/multi-page-template-driven/developer_collection.ts \n\nclass DeveloperCollection { \n  private developers: Developer[] = [];\n\n  getUserByGitHubHandle(username: string) { \n    return this.developers \n            .filter(u => u.githubHandle === username) \n            .pop(); \n  }\n\n  getUserById(id: number) { \n    return this.developers \n             .filter(u => u.id === id) \n             .pop(); \n  }\n\n  addDeveloper(dev: Developer) { \n    this.developers.push(dev); \n  }\n\n  getAll() { \n    return this.developers; \n  } \n} \n\n```", "```js\n// ch6/ts/step-0/app.ts\n\nimport {\n  APP_BASE_HREF,\n  LocationStrategy,\n  HashLocationStrategy\n} from '@angular/common';\n\nimport {RouterModule} from '@angular/router';\n\n```", "```js\n// ch6/ts/step-0/app.ts\n\n@Component({\n  selector: 'app',\n  template: `...`,\n  providers: [DeveloperCollection]\n})\nclass App {}\n\nconst routeModule = RouterModule.forRoot([...]);\n\n@NgModule({\n  declarations: [App],\n  bootstrap: [App],\n  imports: [BrowserModule],\n\n  providers: [{\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  }]\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n```", "```js\n@NgModule({\n  declarations: [App],\n  bootstrap: [App],\n  imports: [BrowserModule, routeModule],\n  providers: [{\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  }]\n})\nclass AppModule {}\n\n```", "```js\nimport {APP_BASE_HREF} from '@angular/common'; \n\n//... \n@NgModule({\n  ...\n  providers: [{\n      provide: APP_BASE_HREF,\n      useValue: '/dist/dev/ch6/ts/multi-page-template-driven/'\n    },\n    { provide: LocationStrategy, useClass: HashLocationStrategy }\n  ]\n})\nclass AppModule {}\n\n```", "```js\n// ch6/ts/step-1/app.ts \n\nconst routingModule = RouterModule.forRoot([\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'home',\n    component: Home\n  },\n  {\n    path: 'dev-add',\n    component: AddDeveloper\n  },\n  {\n    path: 'add-dev',\n    redirectTo: 'dev-add'\n  }\n]);\n\n```", "```js\nimport {Component} from '@angular/core';\n\n@Component({ \n  selector: 'home', \n  template: `Home` \n}) \nexport class Home {} \n\n```", "```js\nimport {Component} from '@angular/core'; \n\n@Component({ \n  selector: 'dev-add', \n  template: `Add developer` \n}) \nexport class AddDeveloper {} \n\n```", "```js\n@Component({ \n  //... \n  template: ` \n    <nav class=\"navbar navbar-default\"> \n      <ul class=\"nav navbar-nav\"> \n        <li><a [routerLink]=\"['home']\">Home</a></li> \n        <li><a [routerLink]=\"['dev-add']\">Add developer</a></li> \n      </ul> \n    </nav> \n    <router-outlet></router-outlet> \n  `, \n  //... \n}) \n\n```", "```js\n// ch6/ts/step-1-async/app.ts \n\nconst routingModule = RouterModule.forRoot([\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'home',\n    loadChildren: './home#HomeModule'\n  },\n  {\n    path: 'dev-add',\n    loadChildren: './add_developer#AddDeveloperModule'\n  }\n]);\n\n```", "```js\nimport {RouterModule, PreloadAllModules, ... } from '@angular/router';\n\n...\n\nexport const appRoutes = RouterModule.forRoot(routes, {\n  preloadingStrategy: PreloadAllModules\n});\n```", "```js\nimport {FormsModule} from '@angular/forms';\n\n```", "```js\n// ch6/ts/step-2/add_developer.ts\n\n@NgModule({\n  imports: [BrowserModule, FormsModule, routingModule],\n  declarations: [App, Home, AddDeveloper, ControlErrors],\n  providers: [{\n    provide: LocationStrategy,\n    useClass: HashLocationStrategy\n  }],\n  bootstrap: [App]\n})\nclass AppModule {}\n```", "```js\n// ch6/ts/step-2/add_developer.ts\n\n@Component({ \n  selector: 'dev-add', \n  templateUrl: './add_developer.html', \n  styles: [...]\n}) \nexport class AddDeveloper { \n  developer = new Developer(); \n  errorMessage: string; \n  successMessage: string; \n  submitted = false; \n  // ...\n  constructor(private developers: DeveloperCollection) {} \n  addDeveloper() {} \n} \n\n```", "```js\n<span *ngIf=\"errorMessage\" \n       class=\"alert alert-danger\">{{errorMessage}}</span> \n<span *ngIf=\"successMessage\" \n       class=\"alert alert-success\">{{successMessage}}</span> \n\n```", "```js\n<form #f=\"ngForm\" class=\"form col-md-4\" [hidden]=\"submitted\"\n   (ngSubmit)=\"addDeveloper()\">\n  <div class=\"form-group\">\n    <label class=\"control-label\" for=\"realNameInput\">Real name</label>\n    <div>\n      <input id=\"realNameInput\" class=\"form-control\" \n          type=\"text\" name=\"realName\"\n          [(ngModel)]=\"developer.realName\" required>\n    </div>\n  </div>\n  <!-- MORE CODE TO BE ADDED --> \n  <button class=\"btn btn-default\" type=\"submit\">Add</button> \n</form>  \n\n```", "```js\ninput.ng-dirty.ng-invalid { \n  border: 1px solid red; \n} \n\n```", "```js\n<input id=\"realNameInput\" class=\"form-control\" \n       type=\"text\" minlength=\"2\" maxlength=\"30\"> \n\n```", "```js\n<div class=\"form-group\"> \n  <label class=\"control-label\" for=\"emailInput\">Email</label> \n  <div> \n    <input type=\"text\" id=\"emailInput\" class=\"form-control\" name=\"emailInput\"\n           [(ngModel)]=\"developer.email\"> \n  </div> \n</div> \n\n```", "```js\nfunction validateEmail(emailControl) { \n  if (!emailControl.value || \n    /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/.test(emailControl.value)) { \n    return null; \n  } else { \n    return { 'invalidEmail': true }; \n  } \n} \n\n```", "```js\n@Directive({ \n  selector: '[email-input]', \n  providers: [{\n    provide: NG_VALIDATORS,\n    multi: true,\n    useValue: validateEmail\n  }]\n}) \nclass EmailValidator {} \n\n```", "```js\n<input type=\"text\" id=\"emailInput\" class=\"form-control\" email-input\n       [(ngModel)]=\"developer.email\"> \n\n```", "```js\n// ...\nimport {EmailValidator} from './email_validator';\n// ...\n\n@NgModule({\n  // ...\n  declarations: [..., EmailValidator],\n  // ...\n})\nclass AppModule {}\n```", "```js\nclass AddDeveloper { \n  ... \n  technologies: string[] = [ \n    'JavaScript', \n    'C', \n    'C#', \n    'Clojure' \n  ]; \n  ... \n} \n\n```", "```js\n<div class=\"form-group\"> \n  <label class=\"control-label\" \n         for=\"technologyInput\">Technology</label> \n  <div> \n    <select class=\"form-control\" name=\"technology\" required \n            [(ngModel)]=\"developer.technology\"> \n        <option *ngFor=\"let technology of technologies\" [value]=\"technology\">\n          {{technology}}\n        </option> \n    </select> \n  </div> \n</div> \n\n```", "```js\n@Component({ \n  ... \n  styles: [ \n    `input.ng-touched.ng-invalid, \n     select.ng-touched.ng-invalid { \n      border: 1px solid red; \n    }` \n  ], \n  ... \n}) \nclass AddDeveloper {...} \n\n```", "```js\n<option *ngFor=\"let technology of technologies\" [value]=\"technology\">\n  {{technology}}\n</option> \n\n```", "```js\n<form #f=\"ngForm\" (ngSubmit)=\"addDeveloper()\" \n      class=\"form col-md-4\" [hidden]=\"submitted\"> \n  ... \n</form> \n\n```", "```js\n<label class=\"control-label\" for=\"realNameInput\">Real name</label> \n<div> \n  <input id=\"realNameInput\" class=\"form-control\" type=\"text\" \n         [(ngModel)]=\"developer.realName\" \n         required maxlength=\"50\"> \n  <control-errors control=\"realName\" \n    [errors]=\"{ \n      'required': 'Real name is required', \n      'maxlength': 'The maximum length of the real name is 50 characters' \n    }\" \n   /> \n</div> \n\n```", "```js\nimport {Component, Host, Input} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n```", "```js\n@Component({ \n  template: '<div>{{currentError}}</div>', \n  selector: 'control-errors',\n}) \nclass ControlErrors { \n  @Input() errors: Object; \n  @Input() control: string; \n  constructor(@Host() private formDir: NgForm) {} \n  get currentError() {...} \n} \n\n```", "```js\n<input type=\"text\" name=\"foobar\" required> \n\n```", "```js\n<control-errors control=\"foobar\" \n      [errors]=\"{ \n       'required': 'The value of foobar is required' \n      }\"></control-errors> \n\n```", "```js\n@Component(...) \nclass ControlErrors { \n  ... \n  get currentError() {\n    let control = this.formDir.controls[this.control];\n    let errorMessages = [];\n    if (control && control.touched) {\n      errorMessages = Object.keys(this.errors)\n        .map(k => control.hasError(k) ? this.errors[k] : null)\n        .filter(error => !!error);\n    }\n    return errorMessages.pop();\n  }\n} \n\n```", "```js\n  <control-errors control=\"email\" \n    [errors]=\"{\n      'invalidEmail': 'Invalid email address'\n    }\"></control-errors> \n\n```", "```js\n// ch6/ts/simple-two-way-data-binding/app.ts \n\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {FormsModule} from '@angular/forms';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\n@Component({\n selector: 'app',\n template: `\n  <input type=\"text\" [(ngModel)]=\"name\">\n  <div>{{name}}</div>\n `\n})\nclass App {\n  name: string;\n}\n\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [App],\n  bootstrap: [App]\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n```", "```js\n<input id=\"emailInput\" class=\"form-control\" type=\"text\" \n       [(ngModel)]=\"developer.email\" email-input> \n\n```", "```js\nexport class AddDeveloper { \n  submitted: false; \n  successMessage: string; \n  developer = new Developer(); \n  //... \n  constructor(private developers: DeveloperCollection) {} \n  addDeveloper(form) {...} \n} \n\n```", "```js\n<!-- ch6/ts/multi-page-template-driven/add_developer.html --> \n<form #f=\"form\" (ngSubmit)=\"addDeveloper()\" \n      class=\"form col-md-4\" [hidden]=\"submitted\"> \n  ... \n  <button class=\"btn btn-default\" \n      type=\"submit\" [disabled]=\"!f.form.valid\">Add</button> \n</form> \n\n```", "```js\nclass AddDeveloper { \n  //... \n  addDeveloper() {\n    // We can't remove developers so setting the id this way is safe \n    this.developer.id = this.developers.getAll().length + 1; \n    this.developers.addDeveloper(this.developer); \n    this.successMessage = `Developer ${this.developer.realName} was successfully added`; \n    this.submitted = true; \n  } \n\n```", "```js\nimport {Component} from '@angular/core'; \nimport {DeveloperCollection} from './developer_collection'; \n\n@Component({ \n  selector: 'home', \n  templateUrl: './home.html' \n}) \nexport class Home { \n  constructor(private developers: DeveloperCollection) {}\n\n  getDevelopers() { \n    return this.developers.getAll(); \n  } \n} \n\n```", "```js\n<table class=\"table\" *ngIf=\"getDevelopers().length > 0\"> \n  <thead> \n    <th>Email</th> \n    <th>Real name</th> \n    <th>Technology</th> \n    <th>Popular</th> \n  </thead> \n  <tr *ngFor=\"let dev of getDevelopers()\"> \n    <td>{{dev.email}}</td> \n    <td>{{dev.realName}}</td> \n    <td>{{dev.technology}}</td> \n    <td [ngSwitch]=\"dev.popular\"> \n      <span *ngSwitchCase=\"true\">Yes</span> \n      <span *ngSwitchCase=\"false\">Not yet</span> \n    </td> \n  </tr> \n</table> \n<div *ngIf=\"getDevelopers().length == 0\"> \n  There are no any developers yet \n</div> \n\n```"]