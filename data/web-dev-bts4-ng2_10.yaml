- en: Chapter 10. Advanced Angular Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。高级Angular技术
- en: This chapter is about advanced Angular techniques. We will learn about how to
    create client-side authentication, and how to test it on Firebase. We will introduce
    Webpack to manage modules and their dependencies and transform static assets to
    build bundles. We will learn how to install `ng2-bootstrap` and how it will enable
    readers to create an application in an easier way. Finally, we will finish building
    the project we started to develop in previous chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了高级的Angular技术。我们将学习如何在客户端创建身份验证，并在Firebase上进行测试。我们将介绍Webpack来管理模块及其依赖关系，并将静态资产转换为构建捆绑包。我们将学习如何安装`ng2-bootstrap`，以及它如何使读者能够更轻松地创建应用程序。最后，我们将完成在前几章中开始开发的项目。
- en: 'At the end of the chapter, you will have a solid understanding of:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将对以下内容有扎实的理解：
- en: Webpack
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack
- en: Firebase authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase身份验证
- en: The `ng2-bootstrap` components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng2-bootstrap`组件'
- en: Angular CLI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI
- en: JIT versus AOT compilation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JIT与AOT编译
- en: 'Let''s begin:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: Open the Terminal, create the folder `ecommerce` , and move in to it
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，创建名为`ecommerce`的文件夹，并进入其中
- en: Copy the contents of the project from the `chapter_10/1.ecommerce-seed` folder
    into the new project
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`chapter_10/1.ecommerce-seed`文件夹中的项目内容复制到新项目中。
- en: 'Run the following script to install `npm` modules:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下脚本以安装`npm`模块：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start the TypeScript watcher and lite server with the next command:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动TypeScript监视器和轻量级服务器：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script opens the web browser and navigates to the welcome page of the project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本打开Web浏览器并导航到项目的欢迎页面。
- en: Webpack
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack
- en: 'Until now, we''ve used SystemJS to dynamically load the modules in our application.
    Now we will start using Webpack''s approach to compare it with SystemJS. Our code
    is growing dramatically along with the chapters of this book, and we must decide
    what strategy we will use to load the modules shaping our web application. Webpack
    comes with core functionality and supports many bundle strategies out of the box
    or with extensions using specific loaders and plugins. It traverses through the
    required statements of the project to generate the bundles we have defined. We
    can use plugins for specific tasks such as minification, localization, and so
    on. Here is a small list of supported features:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用SystemJS动态加载应用程序中的模块。现在我们将开始使用Webpack的方法来与SystemJS进行比较。随着本书的章节不断增加，我们的代码也在急剧增长，我们必须决定使用什么策略来加载塑造我们的Web应用程序的模块。Webpack具有核心功能，并支持许多捆绑策略，可以直接使用或使用特定加载器和插件进行扩展。它遍历项目的所需语句，以生成我们定义的捆绑包。我们可以使用插件来执行特定任务，例如最小化，本地化等。以下是支持的功能的小列表：
- en: The **hot module reloading** instantly updates Angular 2 components without
    refresh
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热模块重新加载**可以在不刷新的情况下立即更新Angular 2组件'
- en: Load bundles as you need them via the **lazy loading** mechanism
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**延迟加载**机制根据需要加载捆绑包
- en: Separate application code on bundles
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序代码分开成捆绑包
- en: Use **hashing** to cache bundles of your web application efficiently in the
    browser
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**哈希**在浏览器中高效地缓存Web应用程序的捆绑包
- en: Generate **source maps** for bundles to easily debug minified versions of bundles,
    and so on
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为捆绑包生成**源映射**，以便轻松调试捆绑包的最小化版本等
- en: Webpack migration
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack迁移
- en: Of course, using Webpack require a little commitment of time, but we get all
    of the benefits of managing separate dependencies and performance improvements.
    I've prepared a detailed migration plan to move from SystemJS to Webpack painlessly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，使用Webpack需要一些时间的承诺，但我们可以获得管理独立依赖项和性能改进的所有好处。我已经准备了详细的迁移计划，可以轻松地从SystemJS迁移到Webpack。
- en: Installing Webpack CLI
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Webpack CLI
- en: 'Before using it, we must install Webpack globally. Run the following command
    in the Terminal to make the command available:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用之前，我们必须全局安装Webpack。在终端中运行以下命令以使该命令可用：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Updating packages
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新包
- en: 'We''ve used the `lite-server` to serve our application until now. Webpack has
    its own `webpack-dev-server` , a little Node.js Express server to serve bundles
    via Webpack middleware. The `webpack-dev-server` is a separate npm package, so
    we need to update `devDependencies` in the `package.json` accordingly:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直使用`lite-server`来提供我们的应用程序。Webpack有自己的`webpack-dev-server`，一个小型的Node.js
    Express服务器，通过Webpack中间件来提供捆绑文件。`webpack-dev-server`是一个单独的npm包，因此我们需要相应地更新`package.json`中的`devDependencies`：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `webpack-dev-server` will serve the files in the current directory, unless
    we configure it. Change the `scripts` section in the `package.json` as defined
    in the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack-dev-server`将提供当前目录中的文件，除非我们对其进行配置。根据以下代码定义，更改`package.json`中的`scripts`部分：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Updating TypeScript configuration
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新TypeScript配置
- en: 'From one side, Webpack is a module bundler, and it uses CommonJS or AMD formats
    to resolve dependencies between modules. From the other side, the Typescript compiler
    supports several module code generations. We need to choose one module format
    compatible for both, so I''ve decided to use the CommonJS as it''s much more convenient.
    Please open the `tsconfig.json` file and update it with the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从一方面，Webpack是一个模块捆绑器，它使用CommonJS或AMD格式来解析模块之间的依赖关系。从另一方面，Typescript编译器支持几种模块代码生成。我们需要选择一个适用于两者的模块格式，所以我决定使用CommonJS，因为它更方便。请打开`tsconfig.json`文件并使用以下内容进行更新：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, it''s time to install all necessary `npm` modules and `typings` . Open
    the Terminal and run the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候安装所有必要的`npm`模块和`typings`了。打开终端并运行以下命令：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating Webpack configuration file
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Webpack配置文件
- en: 'There are two ways to configure Webpack:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种配置Webpack的方法：
- en: Via CLI when Webpack reads a file `webpack.config.js` or we specify it as a
    `--config` option
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CLI，当Webpack读取一个名为`webpack.config.js`的文件或我们将其指定为`--config`选项
- en: Via Node.js API where we pass the configuration object as a parameter
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Node.js API，我们将配置对象作为参数传递
- en: 'The first approach is more convenient for us, so let''s create the `webpack.config.js`
    file. A configuration file in Webpack is a CommonJS module. We put all of our
    configuration, loaders, and other specific information relating to the build,
    into this file. There are two main properties each configuration file must have:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法对我们来说更方便，所以让我们创建`webpack.config.js`文件。Webpack中的配置文件是一个CommonJS模块。我们将所有配置、加载器和与构建相关的其他特定信息放入这个文件中。每个配置文件必须具有两个主要属性：
- en: The entry point for one or many bundles.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个捆绑的入口点。
- en: The output affecting the results of the compilation which tells Webpack how
    to write compiled files to disk. There is only one output property, even if we
    have multiple entry points.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出影响编译结果，告诉Webpack如何将编译后的文件写入磁盘。即使我们有多个入口点，也只有一个输出属性。
- en: 'Let''s add the following content into the `webpack.config.js` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将以下内容添加到`webpack.config.js`文件中：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will use the `main.js` file in the app folder as an entry point. We are planning
    to save the results of the compilation into the `bundle.js` file under the `dist`
    directory. The `__dirname` is the name of the directory that the currently executing
    script resides in. I added the array of `extensions` that Webpack will use to
    `resolve` the modules.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在app文件夹中使用`main.js`文件作为入口点。我们计划将编译结果保存到`dist`目录下的`bundle.js`文件中。`__dirname`是当前执行脚本所在的目录的名称。我添加了一个`extensions`数组，Webpack将用它来`resolve`模块。
- en: 'Webpack can only handle JavaScript natively, so we need to add the `ts-loader`
    into the `loaders` to process TypeScript files. **Loaders** allow us to preprocess
    files as we request them. Loaders can be chained together and they are always
    applied right to left. We can specify loaders in the module `request` but if we
    want to avoid repetitiveness, there is a better method. Just add them into the
    Webpack configuration file and specify how to apply them to the different file
    types. Webpack uses the `test` property of the loader to find the specific files
    and transform their content respectively. We can add extra conditions to find
    the files via `include` and `exclude` conditional properties. The condition is
    always tested against an absolute path and can be one of the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack只能原生处理JavaScript，因此我们需要将`ts-loader`添加到`loaders`中以处理TypeScript文件。**加载器**允许我们在请求文件时预处理文件。加载器可以链接在一起，并且始终从右到左应用。我们可以在模块`request`中指定加载器，但如果我们想要避免重复性，有一个更好的方法。只需将它们添加到Webpack配置文件中，并指定如何将它们应用于不同的文件类型。Webpack使用加载器的`test`属性来查找特定文件并相应地转换它们的内容。我们可以添加额外的条件来通过`include`和`exclude`条件属性找到文件。条件始终针对绝对路径进行测试，并且可以是以下之一：
- en: A regular expression
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式
- en: A string with a path
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有路径的字符串
- en: A function getting the path as a parameter and returning a Boolean result
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以路径作为参数并返回布尔结果的函数
- en: An array of one of the above combined with `and`
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述任一组合的数组与`and`
- en: 'And last but not least is the development server configuration. We can configure
    the `webpack-dev-server` via CLI, but a more elegant way is to add the `devServer`
    section into the `webpack.config.js` file where we can put all the properties
    the server needs:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是开发服务器配置。我们可以通过CLI配置`webpack-dev-server`，但更优雅的方法是将`devServer`部分添加到`webpack.config.js`文件中，我们可以在其中放置服务器需要的所有属性：
- en: The `historyApiFallback` helps in using the HTML5 history API
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`historyApiFallback`有助于使用HTML5历史API'
- en: The `open` flag just opens the backend server URL in the web browser
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open`标志只是在Web浏览器中打开后端服务器URL'
- en: The `watch` flag tells runtime to watch the source files and recompile bundles
    whenever they are changed
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`watch`标志告诉运行时监视源文件，并在更改时重新编译捆绑包'
- en: The `inline` flag embeds the `webpack-dev-server` runtime into the bundle
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inline`标志将`webpack-dev-server`运行时嵌入到捆绑包中'
- en: The `colors` option adds some colors to the output
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colors`选项为输出添加一些颜色'
- en: The `port` contains the backend server URL port number
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`包含后端服务器URL端口号'
- en: The `host` keeps the server URL host
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`保留服务器URL主机'
- en: 'Let''s test how Webpack builds the project with the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试Webpack如何使用以下命令构建项目：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Webpack should create the `bundle.js` file inside the `dist` folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack应该在`dist`文件夹内创建`bundle.js`文件。
- en: Updating the markup
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新标记
- en: 'The next thing to do is to update the `index.html` file. We need to delete
    all code belonging to SystemJS and insert the new code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是更新`index.html`文件。我们需要删除所有属于SystemJS的代码并插入新代码：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we are ready to start the `webpack-dev-server` server. Open the Terminal
    and run the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备启动`webpack-dev-server`服务器。打开终端并运行以下命令：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Webpack opens the web browser and navigates to the following web address: `http://localhost:9000`
    .'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack打开Web浏览器并导航到以下Web地址：`http://localhost:9000`。
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code for this at `chapter_10/2.ecommerce-webpack` .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`chapter_10/2.ecommerce-webpack`找到此源代码。
- en: Preparing our project for production
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产准备我们的项目
- en: We can use the project as it is but it's better to make some changes to improve
    the build pipeline so we can produce it ready to deploy the project structure.
    Let's create a source folder and move our source code, styles, and template files
    inside. I would like to include all my resources into the bundles and show you
    the full potential usage of Webpack via plugins.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用项目，但最好进行一些更改以改进构建流程，以便我们可以准备部署项目结构。让我们创建一个源文件夹，并将我们的源代码、样式和模板文件放在里面。我想将所有资源都包含在包中，并向您展示Webpack通过插件的完全潜力使用。
- en: The three main entries
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三个主要条目
- en: 'The code of our project is still far from production status. We''ve left references
    on our JavaScript resources inside the `index.html` file, plus we need to consider
    how to load style files, Angular 2, and other third-party modules. The plan is
    quite simple: we need to split all dependencies into their own bundles:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目代码仍然远未达到生产状态。我们在`index.html`文件中留下了对JavaScript资源的引用，另外我们还需要考虑如何加载样式文件、Angular
    2和其他第三方模块。计划非常简单：我们需要将所有依赖项拆分为它们自己的包：
- en: The `main` file will keep references on our application
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`文件将保留对我们应用程序的引用'
- en: The `polyfill` file contains references on all necessary polyfills
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polyfill`文件包含所有必要的polyfill的引用'
- en: The `vendor` file contains all the vendors we use
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`文件包含我们使用的所有供应商'
- en: One of the benefits of this approach is that we can add and remove polyfills
    and vendors independently of our code, so we don't need to recompile it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个好处是，我们可以独立于我们的代码添加和删除polyfills和vendors，因此我们不需要重新编译它。
- en: Webpack plugins
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webpack插件
- en: 'Webpack has a set of built-in plugins. We need to add them into the `plugins`
    property in the Webpack configuration file. Webpack splits plugins by groups such
    as configuration, output, optimize, dependency injection, localization, debugging,
    and others. You can find the list of built-in Webpack plugins here: [https://webpack.github.io/docs/list-of-plugins.html](https://webpack.github.io/docs/list-of-plugins.html)
    .'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack有一组内置插件。我们需要将它们添加到Webpack配置文件中的`plugins`属性中。Webpack将插件按组进行拆分，例如配置、输出、优化、依赖注入、本地化、调试等。您可以在这里找到内置的Webpack插件列表：[https://webpack.github.io/docs/list-of-plugins.html](https://webpack.github.io/docs/list-of-plugins.html)。
- en: The DefinePlugin
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DefinePlugin
- en: 'It''s obvious that we need to separate development and production configurations
    because they have different global constants and behaviors. This plugin allows
    us to create global constants configurable at compile time and available across
    all other plugins:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们需要分开开发和生产配置，因为它们具有不同的全局常量和行为。这个插件允许我们在编译时创建全局常量，并在所有其他插件中使用：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now the `process.env.NODE_ENV` is available in the global scope and the following
    code in `main.ts` file will work:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`process.env.NODE_ENV`在全局范围内可用，`main.ts`文件中的以下代码将起作用：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The ProvidePlugin
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ProvidePlugin
- en: 'The Bootstrap module requires several third-party libraries, such as *jQuery*
    and *Tether* , to be included in our application. We will use the `ProvidePlugin`
    to automatically load those modules and make them available in Bootstrap:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap模块需要包含在我们的应用程序中的第三方库，例如*jQuery*和*Tether*。我们将使用`ProvidePlugin`自动加载这些模块，并使它们在Bootstrap中可用：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The ProgressPlugin
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ProgressPlugin
- en: We use this plugin to show the progress of compilation in the Terminal.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这个插件在终端中显示编译进度。
- en: The LoaderOptionsPlugin
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LoaderOptionsPlugin
- en: 'This plugin allows us to add options to some specific loaders:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件允许我们向一些特定的加载器添加选项：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you develop your own loader, you can activate the `debug` mode for it to
    set it to equals `true` . In our case, we use the `ENV_PRODUCTION` global constant
    to activate loaders into minimize mode only for production.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您开发自己的加载程序，可以将其激活为`debug`模式，将其设置为`true`。在我们的情况下，我们使用`ENV_PRODUCTION`全局常量仅在生产中激活加载程序以最小化模式。
- en: The CommonsChunkPlugin
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CommonsChunkPlugin
- en: 'Webpack has an opt-in feature helping to split the code into chunks and load
    them on demand. Furthermore, we need to define split points and Webpack will take
    care of everything, such as dependencies, output, and runtime stuff:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack有一个可选择的功能，可以帮助将代码拆分成块并按需加载。此外，我们需要定义拆分点，Webpack会处理一切，如依赖关系、输出和运行时的东西：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In our project, I've explicitly isolated the vendor and polyfills files in their
    bundles. The `minChunks` option is the minimum number of chunks which need to
    contain a module before it can move to common chunks. It can contain a number,
    callback function, or the `Infinity` keyword. Passing the `Infinity` creates a
    common chunk without moving the modules into it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我明确地将供应商和polyfills文件隔离在它们的包中。`minChunks`选项是模块在移动到公共块之前需要包含的最小块数。它可以包含一个数字、回调函数或`Infinity`关键字。传递`Infinity`会创建一个公共块，而不将模块移动到其中。
- en: The UglifyJsPlugin
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UglifyJsPlugin
- en: 'This plugin minimizes all the JavaScript output of chunks:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件最小化了所有块的JavaScript输出：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use it only for production, where it deletes the comments, and compresses
    and mangles variables names in JavaScript files.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只在生产中使用它，它会删除注释，并压缩和混淆JavaScript文件中的变量名。
- en: 'The following are several third-party plugins I''ve used in our project. All
    of them must be installed as separate npm modules:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们项目中使用的几个第三方插件。它们都必须作为单独的npm模块安装：
- en: The extract-text-webpack-plugin
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extract-text-webpack-plugin
- en: 'I imported the style file of our project in the `main.ts` file as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我在`main.ts`文件中导入了我们项目的样式文件，如下所示：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Webpack will include the code for the `ecommerce.scss` file in the `bundle.js`
    file. That solution worked perfectly for development, but I would like to keep
    the styles as a separate file in production for the following reasons:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack将在`bundle.js`文件中包含`ecommerce.scss`文件的代码。这个解决方案在开发中运行得很完美，但我希望在生产中将样式保持为单独的文件，原因如下：
- en: The CSS is not a part of JavaScript bundle
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS不是JavaScript包的一部分
- en: The CSS bundle requests in parallel to the JavaScript bundle
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS包并行请求到JavaScript包
- en: The CSS is cached separately
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS被单独缓存
- en: Runtime is faster because of less code and DOM operations
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于代码和DOM操作减少，运行时更快
- en: 'The `ExtractTextPlugin` must be added into two places:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExtractTextPlugin` 必须添加到两个地方：'
- en: In the loader to extract the CSS file
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在加载程序中提取CSS文件
- en: 'In the plugin to specify the resulting filename and the necessary behavior
    of the compiler:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在插件中指定结果文件名和编译器的必要行为：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After compilation we will have style and source map files ready for production.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，我们将得到准备好用于生产的样式和源映射文件。
- en: The webpack-md5-hash plugin
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: webpack-md5-hash插件
- en: 'Whenever Webpack compiles resources into bundles, it calculates the `hash`
    sum of each bundle and uses this number as a `chunkhash` string in the names of
    files:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每当Webpack将资源编译成包时，它会计算每个包的`hash`总和，并将这个数字作为`chunkhash`字符串用于文件名：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: I prefer to use the Md5 based hash generator plugin to replace a standard Webpack
    `chunkhash` with Md5 for our project.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢使用基于Md5的哈希生成器插件来替换我们项目中标准的Webpack `chunkhash`。
- en: The html-webpack-plugin
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: html-webpack-plugin
- en: 'As we''ve said, Webpack calculates and generates the hash for filenames of
    bundles every time, so we must somehow update that information in our `index.html`
    file. The `html-webpack-plugin` helps make this process painless and adds all
    HTML generated bundles to an application quickly:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，Webpack每次都会计算和生成捆绑包文件名的哈希值，因此我们必须以某种方式更新我们的`index.html`文件中的信息。`html-webpack-plugin`有助于使这个过程变得轻松，并快速地将所有HTML生成的捆绑包添加到应用程序中：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I used the `index.html` from the source file as a `template` that the plugin
    will use to generate the final HTML file inside the `dist` folder. We can `inject`
    generated JavaScript bundles into the `head` , but usually, we add them to the
    bottom of the page, just before closing the `body` tag. This plugin will add the
    chunks bundles by order of dependencies. The format of the template is based on
    the **Embedded JavaScript** ( **EJS** ) templating system, so we can pass values
    into the plugin, and it will retrieve them directly into the HTML.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用源文件中的`index.html`作为`模板`，插件将使用它来生成`dist`文件夹中的最终HTML文件。我们可以将生成的JavaScript捆绑包`注入`到`head`中，但通常我们会将它们添加到页面底部，就在`body`标签关闭之前。该插件将按照依赖关系的顺序添加捆绑包。模板的格式基于**嵌入式JavaScript**（**EJS**）模板系统，因此我们可以将值传递给插件，它将直接在HTML中检索这些值。
- en: Loaders
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载器
- en: 'The newest version of the project uses a wider number of loaders. Loaders,
    like modules, can be installed via npm. We use loaders to teach Webpack new functionality.
    You can find the list of Webpack loaders here: [https://webpack.github.io/docs/list-of-loaders.html](https://webpack.github.io/docs/list-of-loaders.html)
    .'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的最新版本使用了更多的加载器。加载器，就像模块一样，可以通过npm安装。我们使用加载器来教导Webpack新的功能。您可以在这里找到Webpack加载器的列表：[https://webpack.github.io/docs/list-of-loaders.html](https://webpack.github.io/docs/list-of-loaders.html)。
- en: Loader naming conventions and search order
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载器命名约定和搜索顺序
- en: 'Usually, loaders are named as `<context-name>-loader` for easily referencing
    them in configuration by their full or short name. You can change the loaders''
    naming convention and precedence search order via the `moduleTemplates` property
    of `resolveLoader` in the Webpack configuration:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，加载器的命名为`<context-name>-loader`，以便在配置中通过它们的全名或简称轻松引用它们。您可以通过Webpack配置中的`resolveLoader`的`moduleTemplates`属性更改加载器的命名约定和优先搜索顺序：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The bootstrap-loader
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bootstrap-loader
- en: 'The `bootstrap-loader` loads the Bootstrap styles and scripts in the Webpack
    bundle. By default, it''s preconfigured to load Bootstrap 3\. We can use a special
    configuration file, `.bootstraprc` , to tweak many details of the loading process.
    The `bootstrapVersion` option tells the loader which major version of Bootstrap
    to load. Authors of the plugin recommend using the default configuration as a
    starting point to prevent unwanted upgrades or mistakes. You can write it in YAML
    or JSON formats. You can find the full documentation on the official website:
    [https://github.com/shakacode/bootstrap-loader](https://github.com/shakacode/bootstrap-loader)
    .'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`bootstrap-loader`在Webpack捆绑包中加载Bootstrap样式和脚本。默认情况下，它预先配置为加载Bootstrap 3。我们可以使用一个特殊的配置文件`.bootstraprc`来调整加载过程的许多细节。`bootstrapVersion`选项告诉加载器要加载哪个Bootstrap的主要版本。插件的作者建议使用默认配置作为起点，以防止不必要的升级或错误。您可以以YAML或JSON格式编写它。您可以在官方网站上找到完整的文档：[https://github.com/shakacode/bootstrap-loader](https://github.com/shakacode/bootstrap-loader)。'
- en: The css-loader
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: css-loader
- en: 'The `css-loader` can download CSS files as a part of bundle. It resolves and
    interprets the `imports` and `url` statements as a `require` :'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`css-loader`可以将CSS文件作为捆绑包的一部分下载。它解析和解释`imports`和`url`语句作为`require`：'
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: By default, the `css-loader` minimizes the CSS files if specified to do so by
    the module system. The web address of the project on GitHub is [https://github.com/webpack/css-loader](https://github.com/webpack/css-loader)
    .
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`css-loader`会在模块系统指定的情况下最小化CSS文件。项目在GitHub上的网址是[https://github.com/webpack/css-loader](https://github.com/webpack/css-loader)。
- en: The file-loader
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: file-loader
- en: 'The `file-loader` copies the file in the output folder and returns the public
    URL:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`file-loader`将文件复制到输出文件夹并返回公共URL：'
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It processes the content of the file to sum the MD5 hash and uses it as a filename
    of the resulting file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 它处理文件内容以对MD5哈希求和，并将其用作结果文件的文件名：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can configure a custom filename template via query parameters such as `name`
    , `ext` , `path` , `hash` :'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查询参数（如`name`，`ext`，`path`，`hash`）配置自定义文件名模板：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can find documentation on the official website: [https://github.com/webpack/file-loader](https://github.com/webpack/file-loader)
    .'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方网站上找到文档：[https://github.com/webpack/file-loader](https://github.com/webpack/file-loader)。
- en: The postcss-loader
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: postcss-loader
- en: 'Over 200 PostCSS plugins exist to solve global CSS problems, to use future
    CSS today, or to improve the readability of CSS files. The official list of plugins
    to discover can be found at: [http://postcss.parts/](http://postcss.parts/) .'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有超过200个PostCSS插件可用于解决全局CSS问题，使用未来的CSS，或改善CSS文件的可读性。可以在官方插件列表中发现的网址是：[http://postcss.parts/](http://postcss.parts/)。
- en: 'The `postcss-loader` uses PostCSS JS plugins to transform styles:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`postcss-loader`使用PostCSS JS插件来转换样式：'
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can find full documentation about how to use it here: [https://github.com/postcss/postcss-loader](https://github.com/postcss/postcss-loader)
    .'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到有关如何使用它的完整文档：[https://github.com/postcss/postcss-loader](https://github.com/postcss/postcss-loader)。
- en: The raw-loader
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: raw-loader
- en: 'This loader just reads the file content and returns it as a string:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此加载程序只是读取文件内容并将其作为字符串返回：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Check the official website here: [https://github.com/webpack/raw-loader](https://github.com/webpack/raw-loader)
    .'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方网站上查看：[https://github.com/webpack/raw-loader](https://github.com/webpack/raw-loader)。
- en: The resolve-url-loader
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: resolve-url-loader
- en: 'Usually, we use this file in conjunction with other loaders. It resolves relative
    paths in the `url` statement based on the original source file:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将此文件与其他加载程序一起使用。它基于原始源文件解析`url`语句中的相对路径：
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Follow the link on the official website: [https://github.com/bholloway/resolve-url-loader](https://github.com/bholloway/resolve-url-loader)
    .'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方网站上查看链接：[https://github.com/bholloway/resolve-url-loader](https://github.com/bholloway/resolve-url-loader)。
- en: The sass-loader
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sass-loader
- en: 'It loads the SASS file for processing:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 它加载SASS文件进行处理：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Find full documentation here: [https://github.com/jtangelder/sass-loader](https://github.com/jtangelder/sass-loader)
    .'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里找到完整的文档：[https://github.com/jtangelder/sass-loader](https://github.com/jtangelder/sass-loader)。
- en: The style-loader
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: style-loader
- en: 'You can forget about adding CSS files into HTML files manually with the help
    of the style-loader. It adds CSS to the DOM by injecting the style tag. It can
    be very useful for development, but I recommend you extract the contents of CSS
    into a separate file or bundle if you build for production. The web address for
    full information is: [https://github.com/webpack/style-loader](https://github.com/webpack/style-loader)
    .'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用style-loader的帮助，您可以忘记手动将CSS文件添加到HTML文件中。它通过注入样式标签将CSS添加到DOM中。这对开发非常有用，但我建议您在构建生产环境时将CSS内容提取到单独的文件或捆绑包中。有关完整信息的网址是：[https://github.com/webpack/style-loader](https://github.com/webpack/style-loader)。
- en: The ts-loader
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ts-loader
- en: 'You must install TypeScript before using this loader. It loads the TypeScript
    files and runs the compile:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此加载程序之前，您必须安装TypeScript。它加载TypeScript文件并运行编译：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Visit the official website for more information: [https://github.com/TypeStrong/ts-loader](https://github.com/TypeStrong/ts-loader)
    .'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 访问官方网站以获取更多信息：[https://github.com/TypeStrong/ts-loader](https://github.com/TypeStrong/ts-loader)。
- en: The url-loader
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: url-loader
- en: 'This loader is similar to file loader, but it just returns a data URL, if the
    file size is smaller than the limit:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这个加载器类似于文件加载器，但如果文件大小小于限制，它只返回数据URL：
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Find more information here: [https://github.com/webpack/url-loader](https://github.com/webpack/url-loader)
    .'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里找到更多信息：[https://github.com/webpack/url-loader](https://github.com/webpack/url-loader)。
- en: Tip
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code at `chapter_10/3.ecommerce-webpack-advanced` .
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_10/3.ecommerce-webpack-advanced`找到源代码。
- en: User authentication
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户身份验证
- en: '**Authentication** is a process of providing identity to the user. Without
    that, we can''t provide the user specific services to grant permission to the
    user''s data. It''s a high risk to security sensitive information such as credit
    card details, so we need to save the user data securely.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份验证**是向用户提供身份的过程。没有这个，我们无法为用户提供特定的服务来授予用户数据的权限。这对于安全敏感信息如信用卡详细信息来说是高风险的，因此我们需要安全地保存用户数据。'
- en: Adding authentication in the application
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序中添加身份验证
- en: 'Firebase brings easy authentication, so we can integrate it with any existing
    login server or clear cloud-based solutions. It supports third-party authentication
    from GitHub, Google, Twitter, and Facebook as well as built-in authentication
    via e-mail. Each provider has their own steps to set it up. I will use the **password
    authentication provider** , but you can add others at any time. Please find the
    official documentation from the following web page: [https://firebase.google.com/docs/auth](https://firebase.google.com/docs/auth)
    .'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase带来了简单的身份验证，因此我们可以将其与任何现有的登录服务器或清晰的基于云的解决方案集成。它支持来自GitHub、Google、Twitter和Facebook的第三方身份验证，以及通过电子邮件的内置身份验证。每个提供商都有他们自己的设置步骤。我将使用**密码身份验证提供商**，但您随时可以添加其他提供商。请在以下网页中找到官方文档：[https://firebase.google.com/docs/auth](https://firebase.google.com/docs/auth)。
- en: Enabling authentication provider
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用身份验证提供程序
- en: 'When we created the instance of our web application, Firebase disabled all
    providers, so we need to enable one before use. Open the web browser, navigate
    to the Firebase console, and go into our application. Click on the **Auth** menu
    item on the left sidebar:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建我们的Web应用程序实例时，Firebase禁用了所有提供程序，因此我们需要在使用之前启用一个。打开Web浏览器，导航到Firebase控制台，并进入我们的应用程序。点击左侧边栏上的**Auth**菜单项：
- en: '![Enabling authentication provider](Image00146.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![启用身份验证提供程序](Image00146.jpg)'
- en: 'Click on **SET UP SIGN-IN METHOD** to enter. Click on **Email/Password** and
    activate the provider in the popup dialog:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**设置登录方法**进入。点击**电子邮件/密码**并在弹出对话框中激活提供程序：
- en: '![Enabling authentication provider](Image00147.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![启用身份验证提供程序](Image00147.jpg)'
- en: 'The following  **OAuth redirect domains** section keeps only those domains
    that we whitelisted to initiate authentication for our application:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下**OAuth重定向域**部分仅保留我们列入白名单以启动我们应用程序身份验证的域：
- en: '![Enabling authentication provider](Image00148.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![启用身份验证提供程序](Image00148.jpg)'
- en: 'When we registered our application, Firebase added the following origins:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们注册我们的应用程序时，Firebase添加了以下来源：
- en: The `localhost` so that we can develop and test locally
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localhost`，以便我们可以在本地开发和测试'
- en: The `https://<your-project-id>.firebaseapp.com` so that we can use Firebase
    hosting
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://<your-project-id>.firebaseapp.com`，以便我们可以使用Firebase托管'
- en: If you plan to host your application in other authorized origins, you need to
    add all of them to enable authentication from their domains here.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划在其他授权来源中托管您的应用程序，您需要将它们全部添加到此处以启用来自其域的身份验证。
- en: AngularFirebase2 authentication
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AngularFirebase2身份验证
- en: 'The **AngularFire2 authentication** works without configuration, but it''s
    good practice to configure it before use. The best place to do that is the `app.module.ts`
    file file where we defined the `AppModule` :'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**AngularFire2身份验证**可以在不配置的情况下工作，但最好在使用之前进行配置。最好的地方是`app.module.ts`文件，我们在其中定义了`AppModule`：'
- en: '[PRE32]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the `firebaseAuthConfig` , we indicated that we use password authentication
    and Firebase will redirect to the login page for sign-in. Create the `auth` folder
    and `auth.service.ts` file inside it.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在`firebaseAuthConfig`中，我们指示使用密码身份验证，Firebase将重定向到登录页面进行登录。创建`auth`文件夹和其中的`auth.service.ts`文件。
- en: Authentication service
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证服务
- en: 'The `AuthService` is an adapter class that hides implementation details of
    how Firebase authenticates the user. It uses the `FirebaseAuth` class to do all
    the work for us:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthService`是一个适配器类，它隐藏了Firebase如何对用户进行身份验证的实现细节。它使用`FirebaseAuth`类为我们完成所有工作：'
- en: '[PRE33]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Some components of our application need to know the authentication status of
    the user in real time, so I subscribed to listening to the `FirebaseAuthState`
    events from the `FirebaseAuth` service. Our class consists of two main methods
    to manage authentication of the user:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的一些组件需要实时了解用户的身份验证状态，因此我订阅了从`FirebaseAuth`服务监听`FirebaseAuthState`事件。我们的类包括两个主要方法来管理用户的身份验证：
- en: '[PRE34]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `signIn` method expects user credentials, such as an e-mail and password,
    to log in and returns the `FirebaseAuthState` in a Firebase promise. The `signOut`
    helps us to log out from the application
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`signIn`方法期望用户凭据，如电子邮件和密码，以登录并在Firebase promise中返回`FirebaseAuthState`。`signOut`帮助我们从应用程序中注销'
- en: The SignInComponent
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SignInComponent
- en: 'Create the `sign-in.component.ts` file to keep the code of  **SignInComponent**
    . It is a form where the user inputs his or her credentials and clicks on **Sign
    In** to pass the e-mail and password into the authentication service. It listens
    to the response that Firebase returns to redirect the user to the welcome page:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`sign-in.component.ts`文件来保存**SignInComponent**的代码。这是一个表单，用户在其中输入他/她的凭据并点击**登录**以将电子邮件和密码传递到身份验证服务。它监听Firebase返回的响应以将用户重定向到欢迎页面：
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The code shows an error message if the e-mail and password combination is incorrect.
    To protect the routes of the application from unauthorized users, we will use
    the Angular 2 feature called Guards.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码在电子邮件和密码组合不正确时显示错误消息。为了保护应用程序的路由免受未经授权的用户的访问，我们将使用名为Guards的Angular 2功能。
- en: Angular Guards
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular Guards
- en: The Angular 2 router provides a feature called **Guard** that returns either
    `Observable<boolean>` , `Promise<boolean>` , or `boolean` to allow it to activate,
    deactivate, or load a component. It can be registered in dependency injection
    as a function or class. The class registration has benefits if we need dependency
    injection capabilities. To register the Guard as a class, we need to implement
    one of the interfaces provided by Angular.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 2路由器提供了一个名为**Guard**的功能，它返回`Observable<boolean>`、`Promise<boolean>`或`boolean`来允许激活、停用或加载组件。它可以注册为依赖注入的函数或类。如果我们需要依赖注入功能，则类注册具有好处。要将Guard注册为类，我们需要实现Angular提供的接口之一。
- en: 'There are four Angular Guards interfaces:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个Angular Guards接口：
- en: The `CanActivate` Guard checks if a route can be activated
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanActivate` Guard检查路由是否可以被激活'
- en: The `CanActivateChild` Guard checks if the children routes of a particular route
    can be activated
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanActivateChild` Guard检查特定路由的子路由是否可以被激活'
- en: The `CanDeactivate` Guard checks if a route can be deactivated
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanDeactivate` Guard检查路由是否可以被停用'
- en: The `CanLoad` Guard checks if a module can be loaded
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanLoad` Guard检查模块是否可以加载'
- en: 'Because our Guard code will use the authentication service, I created the `auth.guard.ts`
    file and the `AuthGuard` as a class that implements the `CanActivate` interface:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的守卫代码将使用身份验证服务，所以我创建了`auth.guard.ts`文件和`AuthGuard`作为实现`CanActivate`接口的类：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The Angular router will call the `canActivate` method of the interface to decide
    if a route can be activated by listening to the `FirebaseAuthState` event. If
    a user is successfully authenticated the method returns `true` , then the component
    registered in the route will be activated. If not, it returns `false` and redirects
    the user to the login page.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Angular路由器将调用接口的`canActivate`方法来决定是否可以通过监听`FirebaseAuthState`事件来激活路由。如果用户成功验证，该方法返回`true`，然后将激活路由中注册的组件。如果没有，则返回`false`并将用户重定向到登录页面。
- en: Logout in Navbar
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Navbar中注销
- en: 'I think it''s a good idea if our users have the option to sign-out from a web
    application. We should inject the authentication service into the `Navbar` component
    and create the logout method to call it to sign-out the user:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为如果我们的用户有选择从Web应用程序注销的选项是一个好主意。我们应该将身份验证服务注入`Navbar`组件，并创建注销方法来调用它以注销用户：
- en: '[PRE37]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As you''ll remember, we have an `authenticated` property in `AuthService` which
    changes the state when the user signs in or out of the application. We will use
    it to manage the appearance of the **Sign Out** and **Cart** components in the
    markup:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所记得的，我们在`AuthService`中有一个`authenticated`属性，它在用户登录或退出应用程序时更改状态。我们将使用它来管理标记中**Sign
    Out**和**Cart**组件的外观：
- en: '[PRE38]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: When the user is signed-in to the application, those two components becomes
    visible.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录应用程序时，这两个组件变得可见。
- en: Updating the Firebase database rules
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Firebase数据库规则
- en: 'Now, when we secure our application on the client side, we must change the
    Firebase database rules so that only authenticated users have access to the data:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们在客户端保护我们的应用程序时，我们必须更改Firebase数据库规则，以便只有经过身份验证的用户才能访问数据：
- en: '[PRE39]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Time to play
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩的时间
- en: 'Open the Terminal and run the following command to make a production build:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令进行生产构建：
- en: '[PRE40]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After successfully doing this, we can deploy our application onto Firebase
    hosting:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 成功完成后，我们可以将应用程序部署到Firebase托管上：
- en: '[PRE41]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Open a web browser and navigate to the web application: `https://<your-project-id>.firebaseapp.com`
    .'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Web浏览器并导航到Web应用程序：`https://<your-project-id>.firebaseapp.com`。
- en: 'Any combination of e-mail and password brings the exception authorization message
    on the screen:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 任何组合的电子邮件和密码都会在屏幕上带来异常授权消息：
- en: '![Time to play](Image00149.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![玩的时间](Image00149.jpg)'
- en: 'Our application doesn''t have a registration form so that we can add the *test
    user* directly into the Firebase via console. Open the Firebase console and navigate
    to our application. Click on the **Auth** link on left sidebar to open the **Authentication**
    page:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序没有注册表单，因此我们可以通过控制台直接将*测试用户*添加到Firebase中。打开Firebase控制台并导航到我们的应用程序。点击左侧边栏上的**Auth**链接以打开**Authentication**页面：
- en: '![Time to play](Image00150.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![玩的时间](Image00150.jpg)'
- en: 'Click on **Add User** to open the popup dialog:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加用户**以打开弹出对话框：
- en: '![Time to play](Image00151.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![玩的时间](Image00151.jpg)'
- en: Fill in the blank fields and click **Add User** . Now that we have the registered
    test user we can go back to our application and use the e-mail and password to
    successfully sign-in.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 填写空白字段并点击**添加用户**。现在我们有了注册的测试用户，我们可以回到我们的应用程序并使用电子邮件和密码成功登录。
- en: Tip
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code for this at `chapter_10/ 4.ecommerce-firebase-auth`
    .
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_10/ 4.ecommerce-firebase-auth`找到此源代码。
- en: The ng2-bootstrap
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ng2-bootstrap
- en: 'There is the `ng2-bootstrap` library which has no dependencies on jQuery and
    Bootstrap JavaScript files. It has a set of native Angular 2 directives for Bootstrap
    versions 3 and 4, so it costs nothing to try it out. For more information about
    how to use different components please go to the official website: [https://valor-software.com/ng2-bootstrap/index-bs4.html](https://valor-software.com/ng2-bootstrap/index-bs4.html)
    .'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个`ng2-bootstrap`库，它不依赖于jQuery和Bootstrap JavaScript文件。它具有一组用于Bootstrap版本3和4的原生Angular
    2指令，因此尝试它不会花费任何费用。有关如何使用不同组件的更多信息，请访问官方网站：[https://valor-software.com/ng2-bootstrap/index-bs4.html](https://valor-software.com/ng2-bootstrap/index-bs4.html)。
- en: 'Firstly, we will clean the project out of the bootstrap-centric modules:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将清除项目中基于bootstrap的模块：
- en: '[PRE42]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then, remove Bootstrap 4 modules from the `vendors.js` file:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从`vendors.js`文件中删除Bootstrap 4模块：
- en: '[PRE43]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, we are ready to install, so open the Terminal and install `ng2-bootstrap`
    :'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好安装，所以打开终端并安装`ng2-bootstrap`：
- en: '[PRE44]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `ng2-bootstrap` module must be imported into `AppModule` . After installation,
    `ng2-bootstrap` supports Bootstrap version 3, so it''s necessary to set the theme
    to Bootstrap 4 before use:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng2-bootstrap`模块必须导入到`AppModule`中。安装后，`ng2-bootstrap`支持Bootstrap版本3，因此在使用之前必须将主题设置为Bootstrap
    4：'
- en: '[PRE45]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, we will add the link on Bootstrap 4 CSS referencing on CDN inside
    the `index.html` :'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在`index.html`中添加引用CDN上的Bootstrap 4 CSS链接：
- en: '[PRE46]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The migration plan is clear enough: find all the places where we can use `ng2-bootstrap`
    and change the Bootstrap 4 based code to the appropriate components.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移计划已经很清楚：找到所有可以使用`ng2-bootstrap`的地方，并将基于Bootstrap 4的代码更改为相应的组件。
- en: Updating the slideshow on the welcome page
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新欢迎页面上的幻灯片播放
- en: 'On the welcome page, we use the slideshow component for cycling through images
    as a carousel. `ng2-bootstrap` has a native component carousel doing the same
    thing. The main benefit of using the new component is writing less markup code:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在欢迎页面上，我们使用幻灯片组件来循环播放图片作为轮播图。`ng2-bootstrap`有一个原生组件轮播图可以做同样的事情。使用新组件的主要好处是编写更少的标记代码：
- en: '[PRE47]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The carousel has the following properties we can use to manage the slideshow:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 轮播图具有以下属性，我们可以用来管理幻灯片播放：
- en: The `interval` property is an amount of time in milliseconds to delay between
    automatically cycling an item. By default, this amount equals 5,000\. If you change
    it to `false` , the carousel will not automatically cycle.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`interval`属性是以毫秒为单位延迟自动循环项目之间的时间量。默认情况下，此数量等于5,000。如果将其更改为`false`，则轮播图将不会自动循环。'
- en: The `noTransition` property will disable transition between slides. It is `false`
    by default.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noTransition`属性将禁用幻灯片之间的过渡。默认情况下为`false`。'
- en: The `noPause` property will disable pausing on the carousel mouse hover. It's
    `false` by default.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noPause`属性将禁用鼠标悬停时的轮播暂停。默认情况下为`false`。'
- en: The `noWrap` property will prevent continuous cycling. By default, it's set
    to `false` .
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noWrap`属性将阻止连续循环。默认情况下设置为`false`。'
- en: Update the drop-down cart in Navbar
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新导航栏中的下拉购物车
- en: We use the drop-down component in Navbar to display the user's cart information.
    Let's update this component on analog from `ng2-bootstrap` .
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在导航栏中使用下拉组件来显示用户的购物车信息。让我们从`ng2-bootstrap`中更新此组件。
- en: 'First of all, we need import the `DropdownModule` into the `CartModule` :'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将`DropdownModule`导入`CartModule`：
- en: '[PRE48]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'After that, open the `cart-menu.component.html` and update the markup code
    wrapping the cart''s content:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`cart-menu.component.html`并更新包裹购物车内容的标记代码：
- en: '[PRE49]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Any `ng2-bootstrap` drop-down based solution should include the following component:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 任何基于`ng2-bootstrap`的下拉解决方案都应包括以下组件：
- en: A drop-down root element marked with a `dropdown` directive
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`dropdown`指令标记的下拉根元素
- en: An optional toggle element marked as `dropdownToggle`
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可选的标记为`dropdownToggle`的切换元素
- en: A drop-down menu holding the content marked with `dropdownMenu`
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含用`dropdownMenu`标记的内容的下拉菜单
- en: We can use the `isOpen` property to manage the opened state of a dropdown.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`isOpen`属性来管理下拉菜单的打开状态。
- en: Tip
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code for this at `chapter_10/5.ecommerce-ng2-bootstrap`
    .
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`chapter_10/5.ecommerce-ng2-bootstrap`找到这个项目的源代码。
- en: Angular CLI
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular CLI
- en: Now you have some knowledge about how to create a web application with SystemJS
    or Webpack and you understand that this is not a trivial process. Remember that
    all of the configurations belonging to different module loaders is too complicated
    and sometimes you will spend too much time on routine tasks. We've managed everything
    by ourselves until now, but it would be worth adding the Angular CLI to the scaffold
    to handle tedious tasks and build Angular applications.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何使用SystemJS或Webpack创建Web应用程序，并且了解到这不是一个简单的过程。请记住，属于不同模块加载程序的所有配置都太复杂了，有时您会花费太多时间在例行任务上。到目前为止，我们已经自己处理了所有事情，但是值得添加Angular
    CLI到脚手架中来处理繁琐的任务和构建Angular应用程序。
- en: 'The following command will install the Angular CLI:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将安装Angular CLI：
- en: '[PRE50]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the following command to get the use commands:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以获取使用命令：
- en: '[PRE51]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We will create the new Angular project with the following command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令创建新的Angular项目：
- en: '[PRE52]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After several minutes you will be ready to start the Angular 2 project with
    the installed NPM modules. Move into the project folder and start the development
    server:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，您将准备好使用安装的NPM模块启动Angular 2项目。进入项目文件夹并启动开发服务器：
- en: '[PRE53]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Now open `localhost:4200` in the web browser. The Angular CLI follows the recommended
    application structure and style guide when generating the source code and folders.
    We followed the same principles when we developed our project so that we can smoothly
    move the code from the previous project into the new one.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在Web浏览器中打开`localhost:4200`。当生成源代码和文件夹时，Angular CLI遵循推荐的应用程序结构和样式指南。我们在开发项目时也遵循了相同的原则，以便可以顺利地将代码从上一个项目移动到新项目中。
- en: 'Stop the server and install the following modules:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 停止服务器并安装以下模块：
- en: '[PRE54]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Find the `angular-cli.json` file in the root of the project and make the following
    changes in `styles` and `scripts` to add references on our `ecommerce.scss` style
    and `ng2-bootstrap` bundle:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的根目录中找到`angular-cli.json`文件，并在`styles`和`scripts`中进行以下更改，以添加对我们的`ecommerce.scss`样式和`ng2-bootstrap`包的引用：
- en: '[PRE55]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Copy the `database.rules.json` , `firebase.json` , and `firebase.import.json`
    files from the previous project, so we can use Firebase CLI to deploy our project
    to the host.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一个项目中复制`database.rules.json`，`firebase.json`和`firebase.import.json`文件，这样我们就可以使用Firebase
    CLI将项目部署到主机。
- en: Delete all files from the `src/app` folder except for the `index.ts` file. Copy
    all the files from the `src/app` folder of the previous project into the new one.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`src/app`文件夹中的所有文件，除了`index.ts`文件。将上一个项目的`src/app`文件夹中的所有文件复制到新项目中。
- en: Now run the development server, and open or refresh the `localhost:4200` in
    the web browser to see how our project is back online.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行开发服务器，并在Web浏览器中打开或刷新`localhost:4200`，看看我们的项目是如何重新上线的。
- en: 'From now, you can generate new components, routes, services, and pipes with
    a simple command as well as run tests and builds. Please check the official website
    of Angular CLI to get more information: [https://cli.angular.io](https://cli.angular.io)
    .'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，您可以生成新的组件、路由、服务和管道，只需简单的命令，还可以运行测试和构建。请查看Angular CLI的官方网站以获取更多信息：[https://cli.angular.io](https://cli.angular.io)。
- en: Just-in-time compilation
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即时编译
- en: 'My big concern is the size of our application. Look at the stats Webpack usually
    prints at the time of building the chunk files:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我最担心的是我们应用的大小。看看Webpack在构建块文件时通常打印的统计数据：
- en: '![Just-in-time compilation](Image00152.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![即时编译](Image00152.jpg)'
- en: The bundle files are more than 4 Mbytes. Why is the application so huge?
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 捆绑文件超过4兆字节。为什么应用这么庞大？
- en: 'When the application loads in the browser, Angular compiles it at runtime using
    the **Just-In-Time** ( **JIT** ) compiler. That compiler is the part of the code
    we load whenever we bootstrap the application. Note, we used this approach for
    building our project based on SystemJS or Webpack module loaders. That solution
    has the following drawbacks:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序在浏览器中加载时，Angular会使用**即时**（**JIT**）编译器在运行时对其进行编译。该编译器是我们在引导应用程序时加载的代码的一部分。请注意，我们在基于SystemJS或Webpack模块加载器构建项目时使用了这种方法。该解决方案具有以下缺点：
- en: Performance penalty, because code always compiles before use
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能惩罚，因为代码总是在使用之前编译
- en: Rendering penalty, because each view is compiling before display
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染惩罚，因为每个视图在显示之前都要编译
- en: Size penalty, because the code includes JIT compile
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小惩罚，因为代码包含JIT编译
- en: Code quality penalty, because JIT compilation discovers errors at runtime
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码质量惩罚，因为JIT编译在运行时发现错误
- en: We can solve many of those issues if we start using the **Ahead-Of-Time** (
    **AOT** ) compilation.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们开始使用**提前编译**（**AOT**）编译，我们可以解决许多这些问题。
- en: AOT compilation
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AOT编译
- en: 'In an AOT approach, we compile all resources upfront, so we don''t need to
    download the compiler into a web browser. This has the following benefits:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在AOT方法中，我们预先编译所有资源，因此无需将编译器下载到Web浏览器中。这有以下好处：
- en: Smaller application size, because the code doesn't include the compiler
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较小的应用程序大小，因为代码不包括编译器
- en: Blazing rendering, because the browser code and templates are precompiled
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 炽热的渲染，因为浏览器代码和模板是预编译的
- en: Fewer resource requests, because the styles and templates are compiled into
    the code
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更少的资源请求，因为样式和模板被编译到代码中
- en: Better template bindings error detection at the moment of compilation
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的模板绑定错误检测在编译时
- en: Fever possibilities for injection attack, because the web browser doesn't need
    to evaluate precompiled templates and components
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更少的注入攻击可能性，因为Web浏览器不需要评估预编译的模板和组件
- en: 'So, how can we use this fantastic approach? The answer is very simple: use
    Angular CLI. It supports AOT out of the box, so we need only add the following
    commands into the scripts of `package.json` :'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何使用这种奇妙的方法呢？答案很简单：使用Angular CLI。它支持AOT开箱即用，因此我们只需要将以下命令添加到`package.json`的脚本中：
- en: '[PRE56]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Save the changes, open the Terminal and run AOT build:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改，打开终端并运行AOT构建：
- en: '[PRE57]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The size of the bundle files after `gzip` compression are less than 400 Kbytes:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在`gzip`压缩后，捆绑文件的大小小于400千字节：
- en: '![AOT compilation](Image00153.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![AOT编译](Image00153.jpg)'
- en: 'You may start the development server with AOT and check the resulting size
    of the application your web browser:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用AOT启动开发服务器，并检查应用程序在Web浏览器中的最终大小：
- en: '[PRE58]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tip
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find the source code at `chapter_10/6.ecommerce-aot-compilation` .
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`chapter_10/6.ecommerce-aot-compilation`找到源代码。
- en: 读累了记得休息一会哦~
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: Summary
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create a client-side solution for account
    management and authentication, and how to test it on Firebase. We introduced Webpack
    and migrated our application from SystemJS. We know that it traverses through
    the required statements of the project to generate the bundles we have defined.
    Later we rediscovered our project and made more changes to use Webpack plugins.
    We now know that Webpack has a set of built-in plugins we can split by groups,
    such as configuration, output, optimize, dependency injection, localization, debugging,
    and others.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何为帐户管理和身份验证创建客户端解决方案，并在Firebase上进行测试。我们介绍了Webpack，并将我们的应用程序从SystemJS迁移过来。我们知道它会遍历项目的必需语句，以生成我们定义的捆绑包。后来，我们重新发现了我们的项目，并进行了更多的更改以使用Webpack插件。现在我们知道Webpack有一组内置插件，我们可以按组进行拆分，例如配置、输出、优化、依赖注入、本地化、调试等。
- en: We learned that authentication is a process of providing identity to the user,
    and without that, we can't provide user specific services to grant permission
    to the user's data. We learned that Firebase brings easy authentication with any
    existing login server or uses a clear cloud-based solution. It supports third-party
    authentication from GitHub, Google, Twitter, and Facebook as well as built-in
    authentication via e-mail. Now we know that the AngularFire2 authentication works
    without configuration.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，身份验证是向用户提供身份的过程，没有它，我们无法为用户提供特定的服务来授予用户数据的权限。我们了解到，Firebase提供了与任何现有登录服务器的简单身份验证，或者使用清晰的基于云的解决方案。它支持来自GitHub、Google、Twitter和Facebook的第三方身份验证，以及通过电子邮件的内置身份验证。现在我们知道AngularFire2身份验证可以在没有配置的情况下工作。
- en: The `ng2-bootstrap` library has a set of native Angular 2 directives for Bootstrap
    versions 3 and 4 and it has no dependencies on jQuery and Bootstrap JavaScript
    files. We quickly integrated it into our project.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng2-bootstrap`库具有一组用于Bootstrap版本3和4的原生Angular 2指令，并且不依赖于jQuery和Bootstrap JavaScript文件。我们很快将其集成到我们的项目中。'
- en: The Angular CLI helps to easy create an application, generate components, routes,
    services, and pipes out of the box. It supports the Ahead-Of-Time compilation
    to dramatically decrease the size of the application and improve the performance
    and security.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI有助于轻松创建应用程序，开箱即用地生成组件、路由、服务和管道。它支持提前编译，以显著减小应用程序的大小，并提高性能和安全性。
- en: Finally, we ended by building the project we started to develop in previous
    chapters.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过构建我们在前几章中开始开发的项目来结束了。
