- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Customizing Angular CLI Commands Using Schematics
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Schematics 定制 Angular CLI 命令
- en: The Angular CLI is a powerful tool and the de facto solution for working with
    Angular applications. It eliminates most of the boilerplate code and configuration
    from the developer and allows them to focus on the fun stuff, which is building
    awesome Angular applications. Apart from enhancing the Angular development experience,
    it can be easily customized to the needs of each developer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 是一个强大的工具，也是处理 Angular 应用程序的默认解决方案。它消除了开发者大部分的样板代码和配置，使他们能够专注于有趣的事情，即构建出色的
    Angular 应用程序。除了增强 Angular 开发体验外，它还可以轻松地根据每个开发者的需求进行定制。
- en: The Angular CLI contains a set of useful commands for building, bundling, and
    testing Angular applications. It also provides a collection of special commands,
    called **schematics**, that generate various Angular artifacts such as components,
    modules, and services. Schematics expose a public API that developers can use
    to create their own Angular CLI commands or extend the existing ones.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 包含了一组用于构建、打包和测试 Angular 应用的有用命令。它还提供了一组称为 **schematics** 的特殊命令，这些命令可以生成各种
    Angular 艺术品，如组件、模块和服务。Schematics 提供了一个公共 API，开发者可以使用它来创建自己的 Angular CLI 命令或扩展现有的命令。
- en: 'In this chapter, we will cover the following details about schematics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下关于原理图（schematics）的细节：
- en: Installing the **Schematics CLI**
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 **Schematics CLI**
- en: Creating a **Tailwind CSS** component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 **Tailwind CSS** 组件
- en: Creating an HTTP service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 HTTP 服务
- en: Essential background theory and context
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的背景理论和上下文
- en: Angular schematics are libraries that can be installed using `npm`. They are
    used in various situations, including creating components that share a standard
    user interface or enforcing conventions and coding guidelines inside an organization.
    A schematic can be used as a standalone or as a companion for an existing Angular
    library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Angular schematics 是可以通过 `npm` 安装的库。它们在各种情况下使用，包括创建具有标准用户界面的组件或在一个组织内部强制执行约定和编码规范。一个
    schematic 可以作为一个独立的工具使用，也可以作为现有 Angular 库的配套工具。
- en: 'Angular schematics are packaged into collections and reside in the `@schematics/angular`
    npm package. When we use the Angular CLI to run the `ng add` or the `ng build`
    command, it runs the appropriate schematic from that package. The Angular CLI
    currently supports the following types of schematics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Angular schematics 被打包成集合，并位于 `@schematics/angular` npm 包中。当我们使用 Angular CLI
    运行 `ng add` 或 `ng build` 命令时，它会运行该包中的相应 schematic。目前，Angular CLI 支持以下类型的 schematics：
- en: '**Add**: Installs an Angular library in an Angular CLI workspace using the
    `ng add` command.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加**：使用 `ng add` 命令在 Angular CLI 工作区中安装 Angular 库。'
- en: '**Update**: Updates an Angular library using the `ng update` command.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新**：使用 `ng update` 命令更新 Angular 库。'
- en: '**Generate**: Generates Angular artifacts in an Angular CLI workspace using
    the `ng generate` command.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成**：使用 `ng generate` 命令在 Angular CLI 工作区中生成 Angular 艺术品。'
- en: In this project, we will focus on generating schematics, but the same rules
    apply to all the other commands.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将专注于生成 schematics，但所有其他命令都适用相同的规则。
- en: Project overview
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'In this project, we will learn how to use the Schematics API to build custom
    Angular CLI generation schematics for creating components, services, and directives.
    First, we will build a schematic for creating an Angular component that uses the
    Tailwind CSS framework in its template. Then, we will create a schematic to generate
    an Angular service that injects the built-in HTTP client by default and creates
    one method for each HTTP request in a CRUD operation. The following diagram describes
    an architectural overview of the project:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将学习如何使用 Schematics API 来构建自定义 Angular CLI 生成 schematic，用于创建组件、服务和指令。首先，我们将构建一个用于创建使用
    Tailwind CSS 框架的模板的 Angular 组件的 schematic。然后，我们将创建一个用于生成默认注入内置 HTTP 客户端并为 CRUD
    操作中的每个 HTTP 请求创建一个方法的 Angular 服务的 schematic。以下图表描述了项目的架构概述：
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_10_01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![包含图表的图片 自动生成的描述](img/B18465_10_01.png)'
- en: Figure 10.1 – Project architecture
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 项目架构
- en: 'Build time: 1 hour'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：1 小时
- en: Getting started
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The following prerequisites and software tools are required to complete this
    project:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目需要以下先决条件和软件工具：
- en: 'Angular CLI: A command-line interface for Angular, which you can find at [https://angular.io/cli](https://angular.io/cli).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI：Angular 的命令行界面，您可以在 [https://angular.io/cli](https://angular.io/cli)
    找到。
- en: 'GitHub material: The code for this chapter can be found in the `Chapter10`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 材料：本章的代码可以在[https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)的`Chapter10`文件夹中找到。
- en: Installing the Schematics CLI
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Schematics CLI
- en: 'The Schematics CLI is a command-line interface that we can use to interact
    with the Schematics API. To install it, run the following `npm` command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Schematics CLI 是一个命令行界面，我们可以用它来与 Schematics API 交互。要安装它，运行以下`npm`命令：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will install the `@angular-devkit/schematics-cli` npm
    package globally on our system. We can then use the `schematics` executable to
    create a new collection for the schematics:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在我们的系统上全局安装`@angular-devkit/schematics-cli` npm 包。然后我们可以使用`schematics`可执行文件为方案创建一个新的集合：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous command will generate a schematics project called `my-schematics`.
    It contains a schematic with the same name by default inside the `src` folder.
    A schematic includes the following files:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将生成一个名为`my-schematics`的方案项目。它默认在`src`文件夹中包含一个同名的方案。方案包括以下文件：
- en: '`collection.json`: A JSON schema that describes the schematics that belong
    to the `my-schematics` collection.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collection.json`：一个 JSON 方案，描述属于`my-schematics`集合的方案。'
- en: '`my-schematics\index.ts`: The main entry point of the schematic.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my-schematics\index.ts`：方案的主入口点。'
- en: '`my-schematics\index_spec.ts`: The unit test file of the main entry point of
    the schematic.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my-schematics\index_spec.ts`：方案主入口点的单元测试文件。'
- en: 'The JSON schema file of the collection contains one entry for each schematic
    associated with that collection:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合的 JSON 方案文件为每个与该集合关联的方案包含一个条目：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each schematic in the collection contains a short description, as indicated
    by the `description` property, and a `factory` property that points to the main
    entry point of the schematic using a special syntax. It contains the filename
    `./my-schematics/index`, followed by the `#` character, and the name of the function
    exported by that file, named `mySchematics`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 集合中的每个方案都包含一个简短描述，如`description`属性所示，以及一个指向方案主入口点的`factory`属性，使用特殊语法。它包含文件名`./my-schematics/index`，后面跟着`#`字符，以及该文件导出的函数名称，命名为`mySchematics`。
- en: 'The main entry point of a schematic contains a rule factory method that is
    exported by default and returns a `Rule` object, as described in the `index.ts`
    file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 方案的主入口点包含一个默认导出的规则工厂方法，它返回一个`Rule`对象，如`index.ts`文件中所述：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A schematic does not interact directly with the filesystem. Instead, it creates
    a virtual filesystem represented by a `Tree` object. The virtual filesystem contains
    a *staging* area where all transformations from schematics happen. This area aims
    to make sure that any transformations that are not valid will not propagate to
    the actual filesystem. As soon as the schematic is valid to execute, the virtual
    filesystem will apply the changes to the real one. All transformations of a schematic
    operate in a `SchematicContext` object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 方案不会直接与文件系统交互。相反，它创建一个由`Tree`对象表示的虚拟文件系统。虚拟文件系统包含一个*暂存*区域，其中所有方案中的转换都会发生。这个区域旨在确保任何无效的转换都不会传播到实际的文件系统。一旦方案有效可以执行，虚拟文件系统将应用更改到真实文件系统。方案的所有转换都在`SchematicContext`对象中操作。
- en: In the following section, we will learn how to use the Schematics CLI and create
    a component generation schematic.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，我们将学习如何使用 Schematics CLI 并创建一个组件生成方案。
- en: Creating a Tailwind CSS component
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Tailwind CSS 组件
- en: Tailwind is a very popular CSS framework that enforces a utility-first core
    principle. It contains classes and styles that can be used in Angular applications
    to create easily composable user interfaces.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind 是一个非常流行的 CSS 框架，它强制执行以实用程序为核心的原则。它包含可以在 Angular 应用程序中使用以创建易于组合的用户界面的类和样式。
- en: We will use the Schematics API of the Angular CLI to build a generation schematic
    for Angular components. The schematic will generate a new Angular component styled
    with a Tailwind container layout.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Angular CLI 的 Schematics API 来构建一个用于 Angular 组件的生成方案。该方案将生成一个带有 Tailwind
    容器布局的新 Angular 组件。
- en: The schematic we will build does not need Tailwind CSS installed by default.
    However, the application in which we will use the schematic does require it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的方案不需要默认安装 Tailwind CSS。然而，我们将使用该方案的程序确实需要它。
- en: 'Let’s see how we can accomplish that:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何实现这一点：
- en: 'Execute the following command to add a new schematic to our collection:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以向我们的集合添加一个新的原理图：
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding command will update the `collection.json` file to contain a new
    entry for the `tailwind-container` schematic. It will also create a `tailwind-container`
    folder in the `src` folder of our workspace.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将更新 `collection.json` 文件，包含一个新的 `tailwind-container` 原理图条目。它还会在我们的工作区 `src`
    文件夹中创建一个 `tailwind-container` 文件夹。
- en: 'Create a `schema.json` file inside the `tailwind-container` folder and add
    the following content:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `tailwind-container` 文件夹内创建一个 `schema.json` 文件，并添加以下内容：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Each schematic can have a JSON schema file that defines the options available
    when running the schematic. Since we want to create a component generation schematic,
    we need a `name` and a `path` property for our component.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个原理图都可以有一个 JSON 模式文件，该文件定义了在运行原理图时可用选项。由于我们想要创建一个组件生成原理图，我们需要为我们的组件添加一个 `name`
    和 `path` 属性。
- en: Each property has associated metadata, such as the `type` and the `description`.
    The name of the component is required when invoking the schematic, as indicated
    by the `required` array property.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个属性都关联着元数据，例如 `type` 和 `description`。在调用原理图时，组件名称是必需的，这由 `required` 数组属性所示。
- en: 'Open the `collection.json` file and set the properties of the `tailwind-container`
    schematic as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `collection.json` 文件，并按以下方式设置 `tailwind-container` 原理图的属性：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding file, we set a proper description for our schematic. We also
    add the `schema` property, which points to the absolute path of the `schema.json`
    file we created in the previous step.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的文件中，我们为我们的原理图设置了一个适当的描述。我们还添加了 `schema` 属性，它指向我们在上一步创建的 `schema.json` 文件的绝对路径。
- en: 'Create a `schema.ts` file inside the `tailwind-container` folder and add the
    following content:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `tailwind-container` 文件夹内创建一个 `schema.ts` 文件，并添加以下内容：
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding file defines the `Schema` interface with mapping properties to
    those described in the `schema.json` file.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的文件定义了 `Schema` 接口，将映射属性与 `schema.json` 文件中描述的属性相对应。
- en: 'We have now created all the underlying infrastructure we will use to create
    our schematic. Let’s see how to write the actual code that will run our schematic:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经创建了所有我们将用于创建原理图的基础基础设施。让我们看看如何编写实际运行原理图的代码：
- en: Create a folder named `files` inside the `tailwind-container` folder.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `tailwind-container` 文件夹内创建一个名为 `files` 的文件夹。
- en: 'Create a file called `__name@dasherize__.component.html.template` inside the
    `files` folder and add the following contents:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `files` 文件夹内创建一个名为 `__name@dasherize__.component.html.template` 的文件，并添加以下内容：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding file denotes the component template that our schematic will generate.
    The `__name` prefix will be replaced by the name of the component that we will
    pass as an option in the schematic. The `@dasherize__` syntax indicates that the
    name will be separated with dashes and converted in to lowercase if passed in
    camel case.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的文件表示我们的原理图将生成的组件模板。`__name` 前缀将被我们作为选项传递给原理图的组件名称所替换。`@dasherize__` 语法表示如果以驼峰式输入，名称将通过连字符分隔并转换为小写。
- en: 'Create a file called `__name@dasherize__.component.ts.template` and add the
    following contents:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `__name@dasherize__.component.ts.template` 的文件，并添加以下内容：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding file contains the TypeScript class of the component that will
    be generated. The `selector` and the `templateUrl` properties of the `@Component`
    decorator are built using the `dasherize` method and the `name` of the component.
    The class name contains a different method called `classify`, which takes the
    `name` of the component as a parameter and converts it in to title case.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的文件包含将要生成的组件的 TypeScript 类。`@Component` 装饰器的 `selector` 和 `templateUrl` 属性是通过
    `dasherize` 方法和组件的 `name` 构建的。类名包含一个不同的方法 `classify`，它接受组件的 `name` 作为参数并将其转换为标题格式。
- en: 'Open the `index.ts` file of the `tailwind-container` folder, set the option
    type to `Schema`, and remove the `return` statement. The resulting file should
    be the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `tailwind-container` 文件夹内的 `index.ts` 文件，将选项类型设置为 `Schema`，并移除 `return` 语句。生成的文件应该是以下内容：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Modify the `import` statements at the top of the file as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件顶部的 `import` 语句如下：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Insert the following code into the `tailwindContainer` function:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码插入到 `tailwindContainer` 函数中：
- en: '[PRE12]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, first, we set the `path` property of the component in
    case one is not passed in the schematic. By default, we create a folder inside
    the `src\app` folder with the same name as the component. We then use the `apply`
    method to read the template files from the `files` folder and pass the `dasherize`,
    `classify`, and `name` properties using the `applyTemplates` function. Finally,
    we call the `move` method to create the generated component files in the provided
    path.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，首先，我们设置组件的 `path` 属性，以防在 schematic 中未传递。默认情况下，我们在 `src\app` 文件夹内创建一个与组件同名的文件夹。然后，我们使用
    `apply` 方法从 `files` 文件夹中读取模板文件，并使用 `applyTemplates` 函数传递 `dasherize`、`classify`
    和 `name` 属性。最后，我们调用 `move` 方法在提供的路径中创建生成的组件文件。
- en: 'Add the following statement to the end of the factory function:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下语句添加到工厂函数的末尾：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can go ahead and test our new component schematic:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续测试我们的新组件 schematic：
- en: 'Execute the following `npm` command to build the schematic:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 `npm` 命令来构建 schematic：
- en: '[PRE14]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding command will invoke the TypeScript compiler and transpile the
    TypeScript source files into JavaScript. It will generate the JavaScript output
    files into the same folders, side by side, as the TypeScript ones.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将调用 TypeScript 编译器并将 TypeScript 源文件转换为 JavaScript。它将生成与 TypeScript 文件夹并排的
    JavaScript 输出文件。
- en: 'Run the following command to install the schematics library into our global
    npm cache:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令将 schematics 库安装到我们的全局 npm 缓存中：
- en: '[PRE15]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding command will allow us to install the schematic without querying
    the public npm registry.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将允许我们安装 schematic 而不查询公共 npm 注册表。
- en: 'Execute the following Angular CLI command in a folder of your choice outside
    the workspace to scaffold a new Angular application with the default options:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择的文件夹外部的工作空间中执行以下 Angular CLI 命令以使用默认选项生成新的 Angular 应用程序：
- en: '[PRE16]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Navigate to the `my-app` folder and run the following command to install our
    schematics:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `my-app` 文件夹并运行以下命令来安装我们的 schematics：
- en: '[PRE17]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The previous `npm` command will install the `my-schematics` library in the current
    Angular CLI workspace.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的 `npm` 命令将在当前的 Angular CLI 工作空间中安装 `my-schematics` 库。
- en: The `npm link` command is like running `npm install my-schematics`, except that
    it downloads the npm package from the global npm cache of our machine and does
    not add it to the `package.json` file.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`npm link` 命令类似于运行 `npm install my-schematics`，但它从我们的机器的全局 npm 缓存中下载 npm 包，并且不会将其添加到
    `package.json` 文件中。'
- en: 'Use the `generate` command of the Angular CLI to create a `dashboard` component:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 的 `generate` 命令创建一个 `dashboard` 组件：
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding command, we use our custom schematic by passing the name of
    our collection, `my-schematics`, followed by the specific schematic name, `tailwind-container`,
    separated by a colon. We also pass a name for our component using the `--name`
    option of the schematic.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述命令中，我们通过传递我们的集合名称 `my-schematics`，后跟冒号分隔的具体 schematic 名称 `tailwind-container`，来使用我们的自定义
    schematic。我们还使用 schematic 的 `--name` 选项为我们的组件传递一个名称。
- en: 'We can verify that our schematic worked correctly by observing the output in
    the terminal or opening our component with VS Code:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过观察终端中的输出或使用 VS Code 打开我们的组件来验证我们的 schematic 是否正确工作：
- en: '![Figure 10.1 – Generate Angular component](img/B18465_10_02.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 生成 Angular 组件](img/B18465_10_02.png)'
- en: Figure 10.2 – Generate Angular component
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 生成 Angular 组件
- en: We have successfully created a new schematic to craft custom Angular components
    according to our needs. The schematic that we built generates a new Angular component
    from scratch. The Angular CLI is so extensible that we can hook into the execution
    of built-in Angular schematics and modify them accordingly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功创建了一个新的 schematic，可以根据我们的需求创建自定义 Angular 组件。我们构建的 schematic 从头开始生成新的 Angular
    组件。Angular CLI 非常灵活，我们可以挂钩到内置 Angular schematics 的执行并相应地修改它们。
- en: In the following section, we will investigate this by building a schematic for
    Angular HTTP services.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过构建 Angular HTTP 服务的示意图来调查这一点。
- en: Creating an HTTP service
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 HTTP 服务
- en: We will create a schematic for our schematics library that scaffolds an Angular
    service. It will generate a service that imports the built-in HTTP client. It
    will also contain one method for each HTTP request involved in a CRUD operation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的 schematics 库创建一个 schematic，用于构建 Angular 服务。它将生成一个导入内置 HTTP 客户端的服务。它还将包含
    CRUD 操作中涉及的每个 HTTP 请求的一个方法。
- en: The generation schematic we will build will not stand on its own. Instead, we
    will combine it with the existing generation schematic of the Angular CLI for
    services. Thus, we do not need a separate JSON schema.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的生成原理图将不会独立存在。相反，我们将它与Angular CLI为服务提供的现有生成原理图相结合。因此，我们不需要单独的JSON模式。
- en: 'Let’s get started by creating the schematic:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建原理图：
- en: 'Execute the following command to add a new schematic to our collection:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以将新的原理图添加到我们的集合中：
- en: '[PRE19]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the following command to install the `@schematics/angular` npm package:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以安装`@schematics/angular` npm包：
- en: '[PRE20]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `collection.json` file and modify the `crud-service` schematic:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`collection.json`文件并修改`crud-service`原理图：
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We set a short description for the schematic and add a `schema` property pointing
    to the original `schema.json` file of Angular services.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为原理图设置了一个简短描述，并添加了一个`schema`属性，指向Angular服务的原始`schema.json`文件。
- en: Create a folder named `files` inside the `crud-service` folder of the workspace.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作区中的`crud-service`文件夹内创建一个名为`files`的文件夹。
- en: 'Create a file named `__name@dasherize__.service.ts.template` inside the `files`
    folder and add the following code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`files`文件夹内创建一个名为`__name@dasherize__.service.ts.template`的文件，并添加以下代码：
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding file is the template of the Angular service file that our schematic
    will generate. It injects the `HttpClient` service into the `constructor` of the
    class by default.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的文件是原理图将生成的Angular服务文件的模板。它默认将`HttpClient`服务注入到类的`constructor`中。
- en: 'Define a service property that will represent the URL of the API with which
    we want to communicate:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个表示我们想要与之通信的API URL的服务属性：
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following methods for each HTTP request of a CRUD operation:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个CRUD操作的HTTP请求添加以下方法：
- en: '[PRE24]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Creating all the methods beforehand eliminates much of the boilerplate code.
    The developer that uses the schematic will only need to modify these methods and
    add the actual implementation for each one.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在事先创建所有方法可以消除大部分样板代码。使用原理图的开发者只需修改这些方法并为每个方法添加实际实现。
- en: 'We have almost finished our schematic except for creating the factory function
    that will invoke the generation of the service:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了原理图，除了创建将调用服务生成的工厂函数：
- en: 'Open the `index.ts` file of the `crud-service` folder and modify the `import`
    statements as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`crud-service`文件夹中的`index.ts`文件，并按以下方式修改`import`语句：
- en: '[PRE25]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Rename the `tree` parameter and remove it from the `return` statement because
    we will not use it. The resulting factory function should look like the following:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`tree`参数重命名并从`return`语句中删除，因为我们不会使用它。生成的工厂函数应如下所示：
- en: '[PRE26]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following snippet to the `crudService` function:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下片段添加到`crudService`函数中：
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Knowing which options will be used to generate the Angular service beforehand
    is impossible. Thus, we use the **spread** operator to pass all available options
    to the `templateSource` method. That is also why the `_options` parameter is of
    type `any`.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在事先知道将用于生成Angular服务的选项是不可能的。因此，我们使用**展开**运算符将所有可用选项传递给`templateSource`方法。这也是为什么`_options`参数是`any`类型的原因。
- en: 'Add the following `return` statement to the end of the function:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`return`语句添加到函数的末尾：
- en: '[PRE28]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the preceding statement, we use the `externalSchematic` method to call the
    built-in generation schematic for creating Angular services. Then, we merge the
    result from executing that schematic with our `templateSource` variable. We also
    define the strategy of the merge operation using `MergeStrategy.Overwrite` so
    that any changes made by our schematic will overwrite the default ones.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的语句中，我们使用`externalSchematic`方法调用用于创建Angular服务的内置生成原理图。然后，我们将执行该原理图的结果与我们的`templateSource`变量合并。我们还使用`MergeStrategy.Overwrite`定义了合并操作的策略，以便我们的原理图所做的任何更改都将覆盖默认值。
- en: 'Our schematic for creating CRUD services is now complete. Let’s use it in our
    sample application:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建CRUD服务的原理图现在已完成。让我们在我们的示例应用程序中使用它：
- en: 'Execute the following command to build the schematics library:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以构建原理图库：
- en: '[PRE29]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We do not need to link the schematics library again. Our application will be
    automatically updated as soon as we make a new build of our schematics.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不需要再次链接原理图库。我们的应用程序将在我们为原理图进行新的构建时自动更新。
- en: Navigate to the `my-app` folder in which our application resides.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们的应用程序所在的`my-app`文件夹。
- en: 'Execute the following command to generate an Angular service using our new
    schematic:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以使用我们的新原理图生成Angular服务：
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We use the `generate` command of the Angular CLI, passing the name of our schematics
    collection again but targeting the `crud-service` schematic this time.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 Angular CLI 的 `generate` 命令，再次传递我们脚手架集合的名称，但这次目标是 `crud-service` 脚手架。
- en: 'The new Angular service is created in the `src\app` folder, as indicated by
    the output in the terminal window:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的 Angular 服务是在 `src\app` 文件夹中创建的，如终端窗口中的输出所示：
- en: '![Figure 10.2 – Generating an Angular service](img/B18465_10_03.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 生成 Angular 服务](img/B18465_10_03.png)'
- en: Figure 10.3 – Generating an Angular service
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 生成 Angular 服务
- en: Notice that the schematic has generated a unit test file for us automatically.
    How is this possible? Recall that we merged our schematic with the built-in generation
    schematic of the Angular CLI. So, whatever the default schematic does, it reflects
    directly on the execution of the custom schematic.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，脚手架已经为我们自动生成了一个单元测试文件。这是如何实现的？回想一下，我们已经将我们的脚手架与 Angular CLI 内置的生成脚手架合并了。所以，默认脚手架所做的任何事情，都会直接反映在自定义脚手架的执行上。
- en: We have just added a new helpful command to our schematics collection. We can
    generate an Angular service that interacts with HTTP endpoints. Moreover, we have
    added the fundamental methods needed for communicating with the endpoint.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们脚手架集合添加了一个新的有用命令。我们可以生成一个与 HTTP 端点交互的 Angular 服务。此外，我们还添加了与端点通信所需的基本方法。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this project, we used the Schematics API of the Angular CLI to create custom
    schematics for our needs. We built a schematic for generating Angular components
    that contain Tailwind CSS styles in their templates. We also built another schematic
    that creates an Angular service to interact with the built-in HTTP client. The
    service includes all the necessary artifacts for working with an HTTP CRUD application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们使用了 Angular CLI 的 Schematics API 来创建满足我们需求的自定义脚手架。我们构建了一个用于生成包含 Tailwind
    CSS 样式的 Angular 组件的脚手架。我们还构建了另一个脚手架，用于创建一个与内置 HTTP 客户端交互的 Angular 服务。该服务包括与 HTTP
    CRUD 应用程序一起工作的所有必要工件。
- en: The Angular CLI is a flexible and extensible tool that enhances the development
    experience dramatically. The imagination of each developer is all that limits
    what can be done with such an asset in their toolchain. The CLI and the Angular
    framework allow developers to create excellent web applications.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 是一个灵活且可扩展的工具，它极大地提升了开发体验。每个开发者的想象力是限制他们在工具链中使用这种资产所能做到的事情的唯一因素。CLI
    和 Angular 框架允许开发者创建出色的 Web 应用程序。
- en: As we have learned throughout this book, the popularity of the Angular framework
    in the web developer world is so great that it is straightforward to integrate
    it today with any technology and create fast and scalable Angular applications.
    So, we encourage you to get the latest version of Angular and create amazing applications
    today.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在整本书中学到的，Angular 框架在 Web 开发者世界中的普及程度非常高，以至于今天可以轻松地将其与任何技术集成，并创建快速且可扩展的 Angular
    应用程序。因此，我们鼓励你获取 Angular 的最新版本，并立即创建令人惊叹的应用程序。
- en: Exercise
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Use the Schematics CLI to create an Angular schematic for generating an Angular
    directive. The directive should inject the `ElementRef` and `Renderer2` services
    from the `@angular/core` npm package in to the constructor of the TypeScript class.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Schematics CLI 创建一个用于生成 Angular 指令的 Angular 脚手架。该指令应将 `ElementRef` 和 `Renderer2`
    服务从 `@angular/core` npm 包注入到 TypeScript 类的构造函数中。
- en: You should follow the same approach as we did for the component schematic in
    the *Creating a Tailwind CSS component* section.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该遵循我们在 *创建 Tailwind CSS 组件* 部分中为组件脚手架所采取的相同方法。
- en: You can find the solution in the `Chapter10` folder of the `exercise` branch
    in the GitHub repository for this chapter.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中该章节的 `exercise` 分支的 `Chapter10` 文件夹中找到解决方案。
- en: Further reading
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Schematics overview: [https://angular.io/guide/schematics](https://angular.io/guide/schematics)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚手架概述：[https://angular.io/guide/schematics](https://angular.io/guide/schematics)
- en: 'Authoring schematics: [https://angular.io/guide/schematics-authoring](https://angular.io/guide/schematics-authoring)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写脚手架：[https://angular.io/guide/schematics-authoring](https://angular.io/guide/schematics-authoring)
- en: 'Schematics for libraries: [https://angular.io/guide/schematics-for-libraries](https://angular.io/guide/schematics-for-libraries)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库的脚手架：[https://angular.io/guide/schematics-for-libraries](https://angular.io/guide/schematics-for-libraries)
- en: 'Angular CLI built-in schematics: [https://github.com/angular/angular-cli/tree/master/packages/schematics/angular](https://github.com/angular/angular-cli/tree/master/packages/schematics/angular)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI 内置的脚本文档：[https://github.com/angular/angular-cli/tree/master/packages/schematics/angular](https://github.com/angular/angular-cli/tree/master/packages/schematics/angular)
