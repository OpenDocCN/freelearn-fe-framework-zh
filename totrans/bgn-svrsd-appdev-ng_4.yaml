- en: Chapter 4. Service Workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous lesson, we learned how to add server-side rendering to our application.
    In the next lesson, we'll configure service workers for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Lesson Objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this lesson, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Explore service workers and PWAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a service worker to the application that we built in the previous lessons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the service worker to convert the app to a progressive web app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore how to debug a service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's first understand what a service worker and a progressive web app is.
  prefs: []
  type: TYPE_NORMAL
- en: What Is a Service Worker?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A service worker is a script that the browser runs in the background which acts
    as a network proxy to manage network requests programmatically. It sits between
    the network and the device and caches content, enabling an offline experience
    for the user.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to caching data, it can also synchronize API data in the background
    and add things like push notifications.
  prefs: []
  type: TYPE_NORMAL
- en: What Is a Progressive Web App?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Progressive Web App** (**PWA**) is a term that is used for web applications
    that behave in a way similar to native mobile applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Like native apps, they allow an application to be started when the user is offline,
    caching the UI elements and API calls to display an initial page. That way, a
    user can interact with the application on a basic level until the connection gets
    established.
  prefs: []
  type: TYPE_NORMAL
- en: Once the connection is established, the PWA will retrieve the updated data from
    the server and refresh the application, so the user can work with the latest data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The official Angular documentation has a great section on service workers:
    [https://angular.io/guide/service-worker-intro](https://angular.io/guide/service-worker-intro)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular comes with support for service workers. In order to use it, we first
    need to install the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Open the terminal in the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the dependencies needed using the `npm` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the installation is successful, we should see the new package added to
    the `dependencies` object in our project's `package.json` file:![Installing Dependencies](img/3.1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we have installed the dependencies for our service worker,
    which is the first step in implementing service workers in our app. Let's move
    on to the next section, where we will enable the service worker in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the Service Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the dependency is installed, it's time to enable the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: 'This involves three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the service worker in our browser app in `.angular-cli.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing and registering the `ServiceWorkerModule` in our `AppModule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the service worker configuration file `src/ngsw-config.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the `ng set` command to enable support for the service worker in
    our browser app in `.angular-cli.json:`
  prefs: []
  type: TYPE_NORMAL
- en: Open the terminal in the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to adjust `.angular-cli.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Confirm that the property `serviceWorker` is set to `true` in the first app
    in the `apps` array in `.angular-cli.json`:![Enabling the Service Worker](img/3.2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing the ServiceWorkerModule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will import the `ServiceWorkerModule` in our `AppModule` and register it.
  prefs: []
  type: TYPE_NORMAL
- en: We will invoke the `register` method on the `ServiceWorkerModule`. This method
    takes two parameters. The first parameter defines what the location of the Angular
    service worker is. The value '`/ngsw-worker.js'` is what should be used in our
    case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second parameter is an object named `environment`, and with this object,
    we can control if we want to enable the service worker. We use the `environment`
    object to determine if the service worker should be enabled, as we only want to
    enable it on production builds:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/app/app.module.ts` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `import` statements at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `ServiceWorkerModule` to the `imports` array and invoke the `register`
    method with these parameters:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the Service Worker Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the `src/ngsw-config.json` file and open it in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we add the initial default content to the `ngsw-config.json` file. This
    is the default configuration provided by the Angular team, and can be found here:
    [https://angular.io/guide/service-worker-getting-started#step-4-create-the-configuration-file-ngsw-configjson](https://angular.io/guide/service-worker-getting-started#step-4-create-the-configuration-file-ngsw-configjson)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the Terminal in the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `npm run build:browser` to create a production build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the build ran successfully and that the files `ngsw-worker.js` and
    `ngsw.json` got generated in the `dist/browser` directory.![Creating the service
    workerenablingService Worker Configuration](img/3.3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we enabled the service worker in our application and used the
    default configuration. We have verified that a production build generates the
    service worker configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add some custom configuration options next.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Service Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we added the service worker configuration file `src/ngsw-config.json`
    to our project, but we have not configured anything yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will add two types of configurations: asset groups and
    data groups.'
  prefs: []
  type: TYPE_NORMAL
- en: Asset and Data Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the asset groups configuration, we specify how we want our service worker
    to handle the assets of our application. When we talk about assets, we should
    think of style sheets, images, external JS files, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Asset groups are defined using the following TypeScript interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the parameters mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` uniquely identifies the group of assets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`installMode` defines how new resources are initially cached'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updateMode` defines the caching behavior of existing resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `resources` object describes the actual resource to cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A complete reference for this can be found at: [https://angular.io/guide/service-worker-config#assetgroups](https://angular.io/guide/service-worker-config#assetgroups).'
  prefs: []
  type: TYPE_NORMAL
- en: In the data groups configuration, we specify how we want our service worker
    to cache the data of the APIs we are requesting the data from.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data groups are defined using the following TypeScript interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the parameters mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` uniquely identifies the group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urls` is an array of URL patterns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version` provides a mechanism to force reloading of cached items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cacheConfig` defines the policy that is used to cache this group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A complete reference for this can be found at: [https://angular.io/guide/service-worker-config#datagroups](https://angular.io/guide/service-worker-config#datagroups).'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Asset and Data Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will append two items to the asset groups configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The first asset group caches the data that comes from the domains that we use
    to fetch our CSS and the fonts included in that CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second asset group caches the static data from the API we work with; in
    this case, the user avatars:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/ngsw-config.json` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `assetGroups` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following two objects to this array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure to correctly format the JSON; use [https://jsonlint.com/](https://jsonlint.com/)
    to be sure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will create the data groups configuration. We will define one data group
    that caches the requests from our API:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `src/ngsw-config.json` file in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a top-level array with the key `dataGroups`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following object to this array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this section, we configured the asset groups and data groups of our application
    in our service worker.
  prefs: []
  type: TYPE_NORMAL
- en: With this configuration and our service worker running, we should be able to
    retrieve a fully styled application that displays the latest API data.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Service Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to test if our service worker works, we will have to load our application,
    and then disconnect our browser from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Checking Where the Data Comes from
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Chrome Developer Tools, it's easy to see where a particular resource is
    being retrieved from.
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Network** tab in Chrome Developer Tools, you can see what files
    are being retrieved, where the data comes from, and how long it took the browser
    to fetch those resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a normal page request, where each file is downloaded
    from the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking Where the Data Comes from](img/3.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, in the **Size** column, you can see that the data
    is being retrieved from the service worker. This means it did not make a request
    to the network to fetch those items; rather, it got them from the browser cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking Where the Data Comes from](img/3.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enabling Offline Mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's the nature of a web browser to be online, but in reality, we've all found
    ourselves in situations where our device is offline due to a lack of network connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: In order to develop apps that can handle these situations, Chrome offers a so-called
    **Offline mode**. It will stop the browser from connecting to the network. That
    way, we can make sure our applications behave as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Network** tab in Chrome Developer Tools, you can find a checkbox named
    **Offline**, which triggers this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling Offline Mode](img/3.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After checking this box, you will see a yellow indicator next to the tab name,
    which indicates that there is something unusual going on with the **Network**
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling Offline Mode](img/3.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running a Local Build of the Browser App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will build a production version of our app that enables the service worker.
    Once the build is made, we will host the build using a simple web server called
    `http-server` and open it in our browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the browser app using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Serve the app using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application will now be served on: `http://localhost:8080`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the page in the browser. You should see the list of posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Console** tab in Chrome Developer Tools and verify that there are
    no errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspecting the Behavior
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will see how our app behaves with the service worker enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the page from the last exercise in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Network** tab in Chrome Developer Tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this **Network** tab open, reload `http://localhost:8080` to see where
    the data comes from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see that the data gets loaded from the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Our Application to Offline Mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will set our application to **Offline** mode and verify that the service
    worker displays a complete and cached version of our app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the page from the last exercise in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Network** tab in Chrome Developer Tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Offline** mode by enabling the checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While in **Offline** mode, navigate to: `http://localhost:8080`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see that our application still gets loaded and displays the cached
    data.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we ran a local build of our app and then tested its behavior
    in offline mode. Our app runs well even in offline mode. We can now explore how
    to debug our service workers.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the Service Worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a famous saying in computer science:'
  prefs: []
  type: TYPE_NORMAL
- en: '"There are 2 hard problems in computer science: cache invalidation, naming
    things."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: -Phil Karlton
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first one applies to debugging service workers.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed earlier, a service worker adds a caching layer between the network
    and the device. This inherently makes it hard to debug, because when you update
    your service worker definition or the configuration of your website, your changes
    might very well be cached, and thus not visible.
  prefs: []
  type: TYPE_NORMAL
- en: It is a quite well-known challenge while developing applications with service
    worker support, so it's good to understand how to debug the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging the Service Worker](img/3.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chrome Developer Tools to the Rescue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chrome Developer Tools is an advanced tool for inspecting and debugging the
    technology behind websites, and luckily, it has great support for service workers.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Application** tab, we can see which service workers are installed,
    what their status is, and unregister them to make sure we download the latest
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Locating the Running Service Worker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will locate where we can find the running service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the page from the last exercise in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Application** tab in Chrome Developer Tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the sidebar of the **Application** tab, click on the **Service Workers**
    link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that there is an entry in the list of service workers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unregistering the Registered Service Worker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will unregister our service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the page from the last exercise in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Application** tab in Chrome Developer Tools and click on the **Service
    Workers** link in the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the entry of the service worker that has the **Status** set to **activated**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Unregister** link next to the **Update** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you now refresh the page, a new service worker should be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you just refresh the page, it will load the same service worker from our
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'The development cycle for building a service worker looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a change in the Angular application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a production build using the `npm run build:browser` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serve the new build using the `npx http-server ./dist/browser` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unregister the currently active service worker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the new version and verify the changes you made are applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we saw where to locate the service worker in our browser. We
    then debugged it by unregistering it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this lesson, we worked entirely with service workers. We started by installing
    the required dependencies. We then moved on to enabling the service worker, configuring
    it, testing it, and finally, debugging it.
  prefs: []
  type: TYPE_NORMAL
