- en: Pickers - Selecting Dates and Times
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择器 - 选择日期和时间
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using date pickers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日期选择器
- en: Using time pickers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用时间选择器
- en: Setting initial date and time values
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置初始日期和时间值
- en: Combining date and time components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合日期和时间组件
- en: Integrating other date and time packages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成其他日期和时间包
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Most applications need to allow the user to select date and time values. For
    example, if a form includes a scheduling piece, the user needs an intuitive way
    to select date and time values. With Material-UI applications, you can use the
    date and time picker components that ship with the library.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序都需要允许用户选择日期和时间值。例如，如果表单包含一个调度部分，用户需要一个直观的方式来选择日期和时间值。在Material-UI应用程序中，你可以使用库中提供的日期和时间选择器组件。
- en: Using date pickers
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日期选择器
- en: To use a date picker in Material-UI applications, you can leverage the `TextField`
    component. It accepts a `type` property that you can set to `date`. However, you
    have to take care of a few other things in addition to changing the text field
    type.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Material-UI应用程序中使用日期选择器，你可以利用`TextField`组件。它接受一个`type`属性，你可以将其设置为`date`。然而，除了更改文本字段类型之外，你还需要注意其他一些事情。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here''s some code that renders a date picker text field for the user, and another
    text field that displays the date in another format as the date selection changes:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一段代码，用于为用户渲染一个日期选择器文本字段，并在日期选择改变时显示另一个格式的文本字段：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what you''ll see when the page first loads:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面首次加载时，你会看到以下内容：
- en: '![](img/55a30640-865b-4284-93f5-15f8d22a1603.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/55a30640-865b-4284-93f5-15f8d22a1603.png)'
- en: 'The My Date field to the left is the date picker. The Updated Date Value field
    to the right shows the selected date in a different format. Here''s what the date
    picker looks like when it receives focus:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的“我的日期”字段是日期选择器。右侧的“更新日期值”字段以不同的格式显示选定的日期。以下是日期选择器在获得焦点时的外观：
- en: '![](img/d62f3329-4068-4543-ae5d-aa894d632aef.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d62f3329-4068-4543-ae5d-aa894d632aef.png)'
- en: 'The year portion of the date is highlighted. You can type the year, or you
    can use the up/down arrow button to change the selected value. You change to the
    month or day portion of the date by hitting the *Tab* key or by using your mouse
    pointer. The drop-down arrow to the far right will display the following native
    browser date picker when clicked:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 日期的年份部分被突出显示。你可以输入年份，或者可以使用上下箭头按钮来更改选定的值。通过按*Tab*键或使用鼠标指针，你可以切换到日期的月份或日部分。最右侧的向下箭头在点击时会显示以下原生浏览器日期选择器：
- en: '![](img/49a32613-c74b-4046-be94-7543d714b732.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/49a32613-c74b-4046-be94-7543d714b732.png)'
- en: 'Once you''ve made a date selection, here''s what the My Date and Updated Date
    Value fields look like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了日期，下面是“我的日期”和“更新日期值”字段的外观：
- en: '![](img/0e085c2d-5d46-47e6-b3e1-0d38230dd308.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e085c2d-5d46-47e6-b3e1-0d38230dd308.png)'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start by taking a look at the date picker `TextField` component:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看日期选择器`TextField`组件：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Most of the date picker functionality comes from the `type` property that is
    set to `date`. This applies the input mask and the native browser date picker
    control. Because of the input mask value, the `shrink` input property needs to
    be `true` to avoid overlap. The `value` property comes from the state of the `UsingDatePickers`
    component. This value defaults to an empty string, but it needs to be in a specific
    format. The date picker text field will put the date value in the correct format,
    so the `onChange()` handler doesn't actually have to do anything other than set
    the `date` state.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数日期选择器功能来自设置为`date`的`type`属性。这应用了输入掩码和原生浏览器日期选择器控件。由于输入掩码值，`shrink`输入属性需要设置为`true`以避免重叠。`value`属性来自`UsingDatePickers`组件的状态。此值默认为空字符串，但需要以特定格式。日期选择器文本字段将把日期值放入正确的格式，因此`onChange()`处理程序实际上不需要做任何事情，只需设置`date`状态即可。
- en: 'The Updated Date Value field uses a different format for the date. Let''s take
    a look at how this is done:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “更新日期值”字段使用不同的日期格式。让我们看看这是如何实现的：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First, you have to take the `date` string from the component state and use it
    to construct a new `Date` instance. To do this, you need to append the time string
    to the date string. This makes it a valid ISO string, and enables the date to
    be constructed without any surprises. Now you can use any of the date formatting
    functions available to `date` instances, such as `toLocaleDateString()`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要从组件状态中获取`date`字符串，并使用它来构造一个新的`Date`实例。为此，你需要将时间字符串附加到日期字符串上。这使得它成为一个有效的ISO字符串，并使得日期可以无任何意外地构造。现在你可以使用任何可用的日期格式化函数，例如`toLocaleDateString()`。
- en: 'Now you can pass `dateFormatted` to the second text field, which is read-only
    since it''s only used to display values:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将`dateFormatted`传递给第二个文本字段，该字段是只读的，因为它只用于显示值：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a couple of improvements that could be made to the preceding example.
    For starters, you could have a `DatePicker` component that hides some of the details
    about turning a `TextField` component into something that picks dates. Further,
    it would be nice if the new `DatePicker` component supported actual `Date` instances
    as values.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对前面的示例进行一些改进。首先，你可以有一个`DatePicker`组件，它隐藏了一些将`TextField`组件转换为选择日期的组件的细节。此外，如果新的`DatePicker`组件支持实际的`Date`实例作为值，那就更好了。
- en: 'First, you''ll need a utility function that can format `Date` instances into
    the string format expected by the `TextField` component when it''s being used
    as a date picker:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要一个实用函数，可以将`Date`实例格式化为`TextField`组件作为日期选择器使用时预期的字符串格式：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `formatDate()` function takes a `Date` instance and returns a string in
    the format of `YYYY-MM-dd`. Now, you''re ready to build the `DatePicker` component:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`formatDate()`函数接受一个`Date`实例，并返回一个格式为`YYYY-MM-dd`的字符串。现在，你已经准备好构建`DatePicker`组件了：'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `DatePicker` component renders a `TextField` component. It has the `type`
    property value set to `date` and the `shrink` input property set to `true`. It
    also sets the `value` – first it checks whether the `date` property is a `Date`
    instance, and if it is, calls `formatDate()`. Otherwise, the `date` argument is
    used as is.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatePicker`组件渲染一个`TextField`组件。它将`type`属性值设置为`date`，将`shrink`输入属性设置为`true`。它还设置了`value`属性——首先检查`date`属性是否是`Date`实例，如果是，则调用`formatDate()`。否则，直接使用`date`参数。'
- en: 'Now, let''s replace the `TextField` component in the previous example with
    the `DatePicker` component:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用`DatePicker`组件替换前面示例中的`TextField`组件：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `onChange`, `label`, and `className` properties are passed to the `TextField` component
    as they were before. The big difference with the `DatePicker` component is that
    you don't need to pass `type` or `InputProps`, and that `date` is used instead
    of `value`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`onChange`、`label`和`className`属性以与之前相同的方式传递给`TextField`组件。与`DatePicker`组件的主要区别是，你不需要传递`type`或`InputProps`，而是使用`date`而不是`value`。'
- en: See also
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器演示：[https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: Using time pickers
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时间选择器
- en: Like date pickers, time pickers help users input time values. Also like date
    pickers, time pickers in Material-UI applications are derived from the `TextInput`
    components.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与日期选择器一样，时间选择器帮助用户输入时间值。同样，Material-UI应用程序中的时间选择器也是从`TextInput`组件派生出来的。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s create the same abstraction that''s used in the *Using date pickers*
    section, only this time, it''s meant for the `time` pickers:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建与*使用日期选择器*部分中使用的相同抽象，但这次是为了`time`选择器：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s what you''ll see when the page first loads:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 页面首次加载时，你会看到以下内容：
- en: '![](img/44387282-93d2-4808-a598-909c3f00b77d.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/44387282-93d2-4808-a598-909c3f00b77d.png)'
- en: 'Once the My Time field receives focus, you can change the individual time pieces
    using the up/down arrow keys or the up/down arrow buttons that are displayed to
    the right of the time value:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当My Time字段获得焦点后，你可以使用上/下箭头键或显示在时间值右侧的上/下箭头按钮来更改单个时间部分：
- en: '![](img/6a2f23af-f232-4b81-843a-49f6a19b7280.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6a2f23af-f232-4b81-843a-49f6a19b7280.png)'
- en: 'The Updated Time Value field doesn''t get updated until the full time is selected
    in the My Time field, because there''s no time value until this happens:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更新时间值字段不会更新，直到在My Time字段中选择了完整的时间，因为在此发生之前没有时间值：
- en: '![](img/061efd13-2f02-45a4-a16c-2074b731d067.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/061efd13-2f02-45a4-a16c-2074b731d067.png)'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The structure of the `TimePicker` component is very similar to the `DatePicker`
    component from the previous recipe. The main difference is that `TimePicker` doesn''t
    support the `Date` instances because it only deals with time. Because there''s
    no date piece, using the `Date` instances to express only time is a lot more difficult
    than expressing only the date:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimePicker`组件的结构与上一道菜谱中的`DatePicker`组件非常相似。主要区别在于`TimePicker`不支持`Date`实例，因为它只处理时间。因为没有日期部分，使用`Date`实例仅表达时间比仅表达日期要困难得多：'
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `TimePicker` component sets the same properties on `TextField` as the `DatePicker`
    component. Additionally, the `step` value of `300` makes the minute portion of
    the time move by five minutes at a time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimePicker`组件在`TextField`上设置的属性与`DatePicker`组件相同。此外，`step`值为`300`使得时间部分的分钟数每次移动五分钟。'
- en: See also
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器演示：[https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API 文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: Setting initial date and time values
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置初始日期和时间值
- en: Date and time pickers can have default date and time values, respectively. For
    example, a common scenario is to have these inputs default to the current date
    and time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 日期和时间选择器可以分别具有默认的日期和时间值。例如，一个常见的场景是让这些输入默认为当前日期和时间。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have a date picker and a time picker on a screen in your
    app. You want the `date` field to default to the current date and the `time` field
    to default to the current time. To do this, it''s best to rely on the `Date` instances
    to set the initial `Date/Time` value. However, a little work is involved, since
    you can''t natively pass the `Date` instances to the `TextField` components. Here''s
    an example that shows how this can work:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在应用的屏幕上有一个日期选择器和时间选择器。你希望`date`字段默认为当前日期，`time`字段默认为当前时间。为此，最好依赖于`Date`实例来设置初始的`Date/Time`值。然而，这需要一点工作，因为你不能原生地将`Date`实例传递给`TextField`组件。以下是一个示例，说明这是如何工作的：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s what you''ll see when the screen first loads:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，你会看到以下内容：
- en: '![](img/475b3285-5008-4701-88a9-b0fc48d4e037.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/475b3285-5008-4701-88a9-b0fc48d4e037.png)'
- en: The date and time that you see will depend on when you load the screen. You
    can then change the date and time values.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的日期和时间将取决于你何时加载屏幕。然后你可以更改日期和时间值。
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'What''s nice about this approach is that you only have one piece of `state`
    to work with, `datetime`, which is a `Date` instance. Let''s step through the
    code to see how this is made possible, starting with the initial state of the
    `UsingDatePickers` component:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是，你只需要处理一个`state`，即`datetime`，它是一个`Date`实例。让我们逐步查看代码，看看这是如何实现的，从`UsingDatePickers`组件的初始状态开始：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The current date and time is assigned to the `datetime` state. Next, let''s
    look at the two formatting functions that enable the `Date` instances to work
    with the `TextField` components:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当前日期和时间被分配给`datetime`状态。接下来，让我们看看两个格式化函数，它们使`Date`实例能够与`TextField`组件一起工作：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Both of these functions, `formatDate()` and `formatTime()`, take a `Date` instance
    as an argument, and `return` a string-formatted value that works with the `TextField`
    component. Next, let''s look at the `onChangeDate()` handler:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数，`formatDate()`和`formatTime()`，都接受一个`Date`实例作为参数，并返回一个与`TextField`组件一起工作的字符串格式值。接下来，让我们看看`onChangeDate()`处理程序：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first check that happens in `onChangeDate()` is for the `value` property.
    The reason this check needs to happen is so that the date picker can actually
    allow the user to select an invalid date, such as Feb 31\. By not changing the
    `state` when this invalid date is selected, you're actually preventing invalid
    dates from being selected.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onChangeDate()`中发生的第一个检查是对`value`属性的检查。这个检查之所以需要发生，是为了让日期选择器实际上允许用户选择一个无效的日期，比如2月31日。当选择这个无效日期时，不改变`state`实际上是在防止选择无效日期。
- en: Next, the `year`, `month`, and `day` values are split and mapped to numbers.
    Then, the new `newDatetime` value is initialized by creating a new `Date` instance
    using `datetime` as the value. This is done to preserve the time selection. Finally,
    `setYear()`, `setMonth()`, and `setDate()` are used to update the `Date` instance
    without changing the time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`year`、`month` 和 `day` 值被分割并映射到数字。然后，通过使用 `datetime` 作为值创建一个新的 `Date` 实例来初始化新的
    `newDatetime` 值。这样做是为了保留时间选择。最后，使用 `setYear()`、`setMonth()` 和 `setDate()` 更新 `Date`
    实例而不改变时间。
- en: 'Lastly, let''s go over the `onChangeTime()` handler:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看看 `onChangeTime()` 处理器：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `onChangeTime()` handler follows the same general pattern as `onChangeDate()`.
    It's simpler because there are fewer values and no need to check for invalid times
    – every day has 24 hours.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`onChangeTime()` 处理器遵循与 `onChangeDate()` 相同的一般模式。它更简单，因为值更少，且不需要检查无效的时间 - 每天都有24小时。'
- en: See also
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器演示：[https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API 文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: Combining date and time components
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并日期和时间组件
- en: If your application needs to collect the date and time from the user, you don't
    necessarily need two `TextField` components. Instead, you can combine them both
    into a single field.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序需要从用户那里收集日期和时间，你不必一定需要两个 `TextField` 组件。相反，你可以将它们合并成一个字段。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'You can use a single `TextInput` component to collect date and time input from
    the user by setting the `type` property to `datetime-local`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将 `type` 属性设置为 `datetime-local` 来使用单个 `TextInput` 组件收集用户的日期和时间输入：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here''s what you''ll see when the screen first loads:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，你会看到以下内容：
- en: '![](img/3b166d9b-ae2c-4a92-a774-b7a0ed5732c1.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3b166d9b-ae2c-4a92-a774-b7a0ed5732c1.png)'
- en: 'This is how the field looks when the field has focus and the controls for changing
    the Date/Time are shown:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是字段获得焦点并且显示更改日期/时间控件时的外观：
- en: '![](img/38775400-e4cf-4ff2-b61a-7a78b466871e.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38775400-e4cf-4ff2-b61a-7a78b466871e.png)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When you use the `datetime-local` type of input, it simplifies working with
    the `Date` instances. Let''s take a look at the `onChangeDate()` handler:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `datetime-local` 类型的输入时，它简化了与 `Date` 实例的工作。让我们看看 `onChangeDate()` 处理器：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can pass `e.target.value` as the argument to a new `Date` instance, which
    then becomes the new `datetime` state value. Finally, let''s take a look at the
    `formatDate()` function that''s used to pass the correct value to the `value`
    property of `TextField`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 `e.target.value` 作为参数传递给一个新的 `Date` 实例，然后它将成为新的 `datetime` 状态值。最后，让我们看看用于将正确值传递给
    `TextField` 的 `value` 属性的 `formatDate()` 函数：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The reason to use this function is to remove the seconds and milliseconds from
    the `value` property. Otherwise, these will show up as values in the input field
    that the user can then select. It's very uncommon to have the user select seconds
    or milliseconds when choosing a time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此函数的原因是删除 `value` 属性中的秒和毫秒。否则，这些将显示为用户可以选择的输入字段中的值。当选择时间时，用户选择秒或毫秒的情况非常罕见。
- en: See also
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器演示：[https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API 文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: Integrating other date and time packages
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成其他日期和时间包
- en: You aren't stuck with only using `TextField` components for `Date/Time` selection
    in your Material-UI application. There are packages available that make the `Date/Time`
    selection experience feel more like traditional Material Design components.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必只使用 `TextField` 组件在你的 Material-UI 应用程序中进行 `日期/时间` 选择。有可用的包可以让 `日期/时间` 选择体验更接近传统的
    Material Design 组件。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The `material-ui-pickers` package has a `DatePicker` component and a `TimePicker`
    component. Here''s some code that shows you how to use both components:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`material-ui-pickers` 包包含一个 `DatePicker` 组件和一个 `TimePicker` 组件。以下是一些代码示例，展示了如何使用这两个组件：'
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here''s what you''ll see when the screen first loads:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，你会看到以下内容：
- en: '![](img/27c696f5-e9d9-4474-bad3-b6acaf92e099.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27c696f5-e9d9-4474-bad3-b6acaf92e099.png)'
- en: 'Here''s what you''ll see when you click on the Date picker field:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击日期选择器字段时，你会看到以下内容：
- en: '![](img/5b64a0b2-06ca-4ea4-8837-85e3be32e8b5.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5b64a0b2-06ca-4ea4-8837-85e3be32e8b5.png)'
- en: 'You can use this dialog to make your date selection, then click on OK to change
    it. Here''s what you''ll see when you click on the Time picker field:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个对话框来选择你的日期，然后点击“确定”来更改它。当你点击时间选择器字段时，你会看到以下内容：
- en: '![](img/a21bffe3-911a-4be6-a3b5-eb7d12d6b25d.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a21bffe3-911a-4be6-a3b5-eb7d12d6b25d.png)'
- en: How it works...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `DatePicker` and `TimePicker` components from the `material-ui-pickers`
    package display dialogs that render other Material-UI components, which makes
    selecting a date/time easier. Rather than having to interact with text inputs
    directly, you can show your users dialogs such as these that are themed to look
    like the rest of your application and provide a visual interaction for selecting
    dates/times.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 `material-ui-pickers` 包的 `DatePicker` 和 `TimePicker` 组件显示的对话框可以渲染其他 Material-UI
    组件，这使得选择日期/时间更加容易。你无需直接与文本输入进行交互，可以展示给用户这样的对话框，这些对话框的主题与你的应用程序的其他部分相匹配，并提供视觉交互来选择日期/时间。
- en: See also
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Picker demos: [https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器演示：[https://material-ui.com/demos/pickers/](https://material-ui.com/demos/pickers/)
- en: Material-UI pickers: [https://github.com/chingyawhao/material-ui-next-pickers](https://github.com/chingyawhao/material-ui-next-pickers)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI 选择器：[https://github.com/chingyawhao/material-ui-next-pickers](https://github.com/chingyawhao/material-ui-next-pickers)
