- en: Firebase Security and Hosting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase安全和托管
- en: Firebase provides flexible security rules with a JavaScript-like syntax, as
    this helps to structure our data and index the frequently used data. Security
    rules are integrated with Firebase authentication, which helps to define read
    and write access based on the user. In this chapter, we will add security rules
    for users and chat nodes to our Firebase database. Firebase security rules provide
    a nice simulator to check new rules before releasing them into production. We
    will also index our user's and their friends data for faster queries. Finally,
    we will deploy our application to the Firebase server. We will set up a different
    deployment environment so that we can test our application in the staging server
    and then deploy the application to the production server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase提供灵活的安全规则，语法类似于JavaScript，这有助于我们结构化数据和索引常用数据。安全规则与Firebase身份验证集成，有助于根据用户定义读取和写入访问权限。在本章中，我们将为Firebase数据库中的用户和聊天节点添加安全规则。Firebase安全规则提供了一个很好的模拟器，在将新规则发布到生产环境之前进行检查。我们还将索引用户及其朋友的数据，以便更快地进行查询。最后，我们将应用程序部署到Firebase服务器。我们将设置不同的部署环境，以便我们可以在预发布服务器上测试我们的应用程序，然后将应用程序部署到生产服务器。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Introducing Firebase security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Firebase安全
- en: Adding security rules for users
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户添加安全规则
- en: Adding security rules for chat messages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为聊天消息添加安全规则
- en: Indexing users and their friends
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引用户及其朋友
- en: Setting up multiple deployment environments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置多个部署环境
- en: Hosting the friends app in Firebase
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Firebase托管朋友应用
- en: Introducing Firebase security
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Firebase安全
- en: 'Firebase security provides tools to manage the security of our application,
    as we can add rules and validate inputs for our data in the Firebase database.
    Firebase provides the following security for our application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase提供了管理我们应用程序安全性的工具，因为我们可以在Firebase数据库中添加规则并验证数据输入。Firebase为我们应用程序提供了以下安全：
- en: '**Authentication**: The first step to secure our application is to identify
    the user. Firebase authentication supports multiple authentication mechanisms,
    such as Google, Facebook, email, and password authentication.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：确保我们的应用程序安全的第一步是识别用户。Firebase身份验证支持多种身份验证机制，例如Google、Facebook、电子邮件和密码身份验证。'
- en: '**Authorization**: Once the user is authenticated, we will need to control
    the access to data in our database. Firebase security rules has built-in variables
    and functions, such as an `auth` object, as it helps to control read and write
    operations for users.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权**：一旦用户经过身份验证，我们就需要控制对数据库中数据的访问。Firebase安全规则具有内置的变量和函数，例如`auth`对象，它有助于控制用户的读取和写入操作。'
- en: Go to the Firebase portal and navigate to Database|RULES tab. The default Firebase
    security rule is as follows; the `auth!= null` condition means that only authenticated
    users have access to data in the Firebase database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前往Firebase门户并导航到数据库|规则选项卡。默认的Firebase安全规则如下；`auth!= null`条件表示只有经过身份验证的用户才能访问Firebase数据库中的数据。
- en: '![](img/00057.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00057.jpeg)'
- en: 'Firebase security rules provides the following four types of functions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase安全规则提供了以下四种类型的函数：
- en: '`.read`: We can define this function for the data and control the user''s read
    operation.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.read`：我们可以为数据定义此函数，以控制用户的读取操作。'
- en: 'The following example shows that only a logged-in user can read their own user
    data:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示，只有已登录的用户才能读取自己的用户数据：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`.write`: We define this for the data and control the user''s write operation.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.write`：我们为此数据定义此函数，以控制用户的写入操作。'
- en: 'The following example shows that only a logged-in user can write on their own
    user data node:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示，只有已登录的用户才能在其自己的用户数据节点上写入：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`.validate`: This function maintains the integrity of the data, and this variable
    provides data validation.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.validate`：此函数维护数据的完整性，此变量提供数据验证。'
- en: 'The following example validates the `name` field to be a string:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例验证`name`字段为字符串：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`.indexOn`: This provides a child index for the querying and ordering of data.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.indexOn`：这为查询和排序数据提供了子索引。'
- en: In the following example, we index the `name` field of user data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们索引了用户数据的`name`字段。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Firebase security rules also provide the following predefined variables, which
    are used to define the security rules:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase安全规则还提供了以下预定义变量，用于定义安全规则：
- en: '`root`: This variable gives a `RuleDataSnapshot` instance to access data from
    the root of the Firebase database.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root`：此变量提供了一个`RuleDataSnapshot`实例，用于从Firebase数据库的根访问数据。'
- en: 'The following root variables are used to traverse the Firebase database path
    from the root user node:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下根变量用于从根用户节点遍历Firebase数据库路径：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`newData`: This variable provides a `RuleDataSnapshot` instance that represents
    the new data, which exists after the insert operation.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`newData`：此变量提供了一个表示插入操作后存在的新的`RuleDataSnapshot`实例。'
- en: 'The following example validates the new data to be a string:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例验证新的数据是否为字符串：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`data`: This variable gives a `RuleDataSnapshot` instance that represents the
    data that exists before the insert operation.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：此变量提供了一个表示插入操作之前存在的数据的`RuleDataSnapshot`实例。'
- en: 'The following example shows that the current data in the `name` field is not
    null:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示当前`name`字段中的数据不为空：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`$variables`: This variable represents the dynamic IDs and keys.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$variables`：此变量代表动态ID和键。'
- en: 'In the following example, the unique ID is assigned to the `$uid` variable:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，唯一ID被分配给`$uid`变量：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`auth`: This represents the `auth` object, which provides the UID of the user.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth`：这代表`auth`对象，它提供了用户的UID。'
- en: 'In the following example, we access the `auth` object to get a UID of a user:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们访问`auth`对象以获取用户的UID：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`now`: This variable provides the current time in milliseconds and helps to
    validate the time stamp.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`now`：此变量提供当前时间的毫秒数，有助于验证时间戳。'
- en: 'In the following example, we conclude that the time stamp is greater than the
    current time:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们得出结论，时间戳大于当前时间：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding security rules for users
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户添加安全规则
- en: In our application, users' details play a critical part, so we need to provide
    security rules for our users' details. We have already seen the default settings
    for security. By default, only an authenticated user can access any part of our
    Firebase database. We will modify the security rules for the user node and retain
    the default security rules for the other nodes for now.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，用户详情起着至关重要的作用，因此我们需要为用户详情提供安全规则。我们已经看到了默认的安全设置。默认情况下，只有认证用户可以访问我们Firebase数据库的任何部分。我们将修改用户节点的安全规则，而暂时保留其他节点的默认安全规则。
- en: 'As you can see from the following screenshot, for `users` node, `read` and
    `write` operations are allowed for an authentic user with the same unique user
    ID; we will also need to validate the type of data in our user node to maintain
    the data integrity:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下截图中所见，对于`users`节点，对于具有相同唯一用户ID的认证用户，允许进行`read`和`write`操作；我们还需要验证用户节点中的数据类型以保持数据完整性：
- en: '![](img/00058.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: 'To validate the changes in our security rules, Firebase provides a simulator
    to test our changes before deploying it into production. You will see a SIMULATOR
    option on the top-right corner of the RULES tab. This tool provides the mock operation
    without actually performing any CRUD operation within the database. We will test
    the following scenarios on the simulator:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证我们的安全规则的变化，Firebase提供了一个模拟器来测试我们的更改，在将其部署到生产环境之前。您将在“RULES”标签页的右上角看到一个“SIMULATOR”选项。此工具提供了模拟操作，而实际上并不在数据库中执行任何CRUD操作。我们将在模拟器上测试以下场景：
- en: '**Successful read operation for an authentic user**: Open the simulator and
    enable the Authenticated switch button; it provides a mock uid in the Auth token
    payload text box. In the Location text box, we enter the path as `/users/6e115890-7802-4f56-87ed-4e6ac359c2e0`
    and click on the RUN button. This operation will be successful when the Simulated
    read allowed message appears, as shown in the following screenshot:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证用户的成功读取操作**：打开模拟器并启用“Authenticated”开关按钮；它会在“Auth token”文本框中提供一个模拟的uid。在“Location”文本框中，我们输入路径为`/users/6e115890-7802-4f56-87ed-4e6ac359c2e0`并点击“RUN”按钮。当出现“Simulated
    read allowed”消息时，此操作将成功，如以下截图所示：'
- en: '![](img/00059.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: '**Successful write operation with an authentic user and proper data**: In this
    scenario, we will provide a location path with the user UID with the string name
    data as JSON payload in the simulator. When we click on RUN, this operation is
    considered successful when the Simulated write allowed message appears, as shown
    in the following screenshot. Also, the succeeding screenshots show two ticks,
    which indicates that our authorization and data validation have been successful.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有认证用户和正确数据的成功写入操作**：在这种情况下，我们将提供包含用户UID的路径，字符串名称数据作为JSON有效载荷在模拟器中。当我们点击“运行”时，当出现“模拟写入允许”的消息时，这个操作被认为是成功的，如下面的截图所示。接下来的截图显示两个勾号，这表明我们的授权和数据验证已经成功。'
- en: '![](img/00060.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00060.jpeg)'
- en: '**Failed write operation with a different UID**: In this scenario, we provide
    a wrong UID in the user path location and then perform the same write operation.
    This operation fails, resulting in a Simulated write denied message and a cross
    on the write tag, as follows; you can take a look at more error details by clicking
    on the DETAILS button:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用不同UID的失败写入操作**：在这种情况下，我们在用户路径位置提供了一个错误的UID，然后执行相同的写入操作。这个操作失败了，导致出现“模拟写入被拒绝”的消息和写入标签上的一个叉号，如下所示；你可以通过点击“详情”按钮查看更多错误详情：'
- en: '![](img/00061.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00061.jpeg)'
- en: '**Failed write operation with data validation:** In this scenario, we provide
    the correct user UID path in Location but the wrong data type in payload. For
    example, we will give number data type for a string name data. This operation
    fails in data validation tag, as follows:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据验证失败的写入操作**：在这种情况下，我们在位置中提供了正确的用户UID路径，但在有效载荷中提供了错误的数据类型。例如，我们将为字符串名称数据提供数字数据类型。这个操作在数据验证标签中失败，如下所示：'
- en: '![](img/00062.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00062.jpeg)'
- en: Adding security rules for chat messages
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为聊天消息添加安全规则
- en: 'In this section, we will enable the security rules for chat messages. The message
    details node contains two identifiers, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将启用聊天消息的安全规则。消息详情节点包含两个标识符，如下所示：
- en: '`$identifierKey`: The first is the identifier key, which is used for users
    under conversation, and this key is also stored in the user details node. In the
    following example, `"-L-0uxNuc6gC95iQytu9"` is the identifier key.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$identifierKey`：第一个是标识符键，用于会话中的用户，并且这个键也存储在用户详情节点中。在以下示例中，“-L-0uxNuc6gC95iQytu9”是标识符键。'
- en: '`$messageKey`: The second is the message key, which is generated when we push
    a new message in the node. In the following example, `"-L-125Am3LVQQQiN_xlG"`
    is the message key:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$messageKey`：第二个是消息键，在我们向节点推送新消息时生成。在以下示例中，“-L-125Am3LVQQQiN_xlG”是消息键：'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will define the following security rules for a message details node:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为消息详情节点定义以下安全规则：
- en: '**Read permission**: We give read permission only to the authentic users'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取权限**：我们只授予认证用户读取权限'
- en: '**Write permission**: We give write permission to authentic users and also
    check whether any new data exists before the data push happens'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入权限**：我们授予认证用户写入权限，并在数据推送发生之前检查是否存在任何新数据'
- en: '**Validation**: We validate all the fields in the message so that data integrity
    is maintained for any new data insertion, as shown here:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：我们验证消息中的所有字段，以确保在插入任何新数据时数据完整性得到保持，如下所示：'
- en: '![](img/00063.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00063.jpeg)'
- en: 'Finally, we will validate the new rules in the simulator to check whether they
    work:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在模拟器中验证新规则，以检查它们是否有效：
- en: '![](img/00064.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00064.jpeg)'
- en: Indexing users and friends
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引用户和好友
- en: Firebase provides the querying and ordering of data upon collection of the nodes
    using any common child key. This query becomes slow when the data grows. To increase
    the performance, the Firebase recommends that you index within a particular child
    field. Firebase indexes the key to the server to increase the performance of the
    query.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase通过使用任何常见的子键收集节点来提供数据的查询和排序。当数据增长时，这个查询会变慢。为了提高性能，Firebase建议你在特定的子字段内进行索引。Firebase将键索引到服务器以提高查询性能。
- en: 'As part of this section, we will implement an index on our user data to search
    or find friends, which is quite common in any social application. To achieve this,
    we will perform the following tasks:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本节的一部分，我们将对我们的用户数据进行索引，以便搜索或找到好友，这在任何社交应用中都很常见。为了实现这一点，我们将执行以下任务：
- en: '**Creating an index within the name field of the user data**: We provide an
    index within the name field of our user data. We will use the `.indexOn` tag for
    the name field, as follows:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在用户数据的名称字段中创建索引**：我们在用户数据的名称字段中提供了一个索引。我们将使用`.indexOn`标签为名称字段，如下所示：'
- en: '![](img/00065.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00065.jpeg)'
- en: '**Creating a service for querying the data based on the text**: In this task,
    we will query the user data based on the search text. We will provide `orderByChild` as
    the name field of the user.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建基于文本查询数据的服务**：在这个任务中，我们将根据搜索文本查询用户数据。我们将提供`orderByChild`作为用户的名称字段。'
- en: 'Here''s the `friends-search.service.ts`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`friends-search.service.ts`：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Modifying the template**: We modify the app template to show the search result
    in the drop-down menu below the search text.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修改模板**：我们修改应用模板，以便在搜索文本下方显示搜索结果的下拉菜单。'
- en: 'Here''s the modified `app.component.html` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是修改后的`app.component.html`文件：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Modifying the component**: When an app component is loaded the we query for
    all the user in `ngOnInit()` method and when user click in search text box then
    user list appears with all the names. We also filter the list with the user type
    on the text box and then the `onSearch()` method is called and we query the Firebase
    database with the query range.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修改组件**：当应用程序组件加载时，我们在`ngOnInit()`方法中查询所有用户，当用户点击搜索文本框时，用户列表会显示所有名称。我们还通过用户类型在文本框中过滤列表，然后调用`onSearch()`方法，并使用查询范围查询Firebase数据库。'
- en: 'Here''s the complete `app.component.ts` file as of now:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是到目前为止完整的`app.component.ts`文件：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `\uf8ff` characters is a very high code point in the unicode range, which
    allows you to match all values that start with your search text.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`\uf8ff`字符是Unicode范围内的一个非常高的代码点，它允许您匹配以您的搜索文本开头的所有值。'
- en: Setting up multiple environments
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置多个环境
- en: 'When our application is ready to deploy, we will need to separate the Firebase
    projects for the development and production environments so that we can test our
    code changes in a development environment before deploying them into production.
    We will follow these steps to set up a separate environment:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序准备部署时，我们需要为开发和生产环境分别分离Firebase项目，以便在部署到生产环境之前在开发环境中测试我们的代码更改。我们将遵循以下步骤来设置一个单独的环境：
- en: '**Creating a new staging project in Firebase**: Because we cannot use the same
    Firebase features, such as database and storage, we will need to separate the
    production and staging environments. We will then create a new project with the `friends-staging` name; this
    project has the new Firebase environment variables:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Firebase中创建新的预发布项目**：因为我们不能使用相同的Firebase功能，例如数据库和存储，所以我们需要分别设置生产和预发布环境。然后我们将创建一个名为`friends-staging`的新项目；该项目具有新的Firebase环境变量：'
- en: '![](img/00066.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00066.jpeg)'
- en: '**Creating a new environment variable**: The new Firebase project has a new
    environment variable, and you can get configuration from the Firebase project.
    So, navigate to Project Overview | Project settings | Add Firebase to your web
    app.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建新的环境变量**：新的Firebase项目有一个新的环境变量，您可以从Firebase项目中获取配置。因此，导航到项目概览 | 项目设置 |
    将Firebase添加到您的Web应用。'
- en: 'Copy the content into the new environment file, as shown in the following code; we
    have two environment files for staging and production:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码复制到新的环境文件中，如下所示；我们有两个环境文件用于预发布和生产：
- en: 'The `environment.prod.ts` file with production is set as `true`, and this is
    used for the production environment:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment.prod.ts`文件将生产环境设置为`true`，这用于生产环境：'
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `environment.ts` file with production is set as `false`; this will be used
    for the staging environment:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment.ts`文件将生产环境设置为`false`；这将用于预发布环境：'
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Installing Firebase tools**: Once you create a new Firebase project, you
    will need to install the Firebase tools and log into the Firebase portal with
    the following command:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装Firebase工具**：一旦创建了一个新的Firebase项目，您将需要安装Firebase工具并使用以下命令登录Firebase门户：'
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding command will open your Gmail permission page; clicking on ALLOW will
    give permission to list all the available projects:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将打开您的Gmail权限页面；点击ALLOW将允许列出所有可用的项目：
- en: '![](img/00067.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00067.jpeg)'
- en: '**Using the new Firebase project**: Once we give permission, we will need to
    add the available project based on the current environment in use. Suppose that
    we need to test a new feature under development, we can select a staging environment
    and give the alias name for the staging environment for future use. We can switch
    the environment using the alias name, as follows:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用新的Firebase项目**：一旦我们给予权限，我们需要根据当前使用的环境添加可用的项目。假设我们需要在开发中的新功能下进行测试，我们可以选择一个测试环境，并为测试环境提供一个别名名称以供将来使用。我们可以使用别名名称切换环境，如下所示：'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This creates the `.firebaserc` file in the base project directory, which looks
    like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在基本项目目录中创建`.firebaserc`文件，其外观如下：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Hosting the friends app in Firebase
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Firebase上托管朋友应用程序
- en: 'Firebase supports hosting as a service, and application deployment is easy
    in Firebase. Most applications adopt a two-stage deployment, that is, first staging
    and then production. Once we test the application in the staging environment,
    we can deploy it into the production environment. The steps to deploy an application
    are as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase支持作为服务提供托管，在Firebase上部署应用程序很容易。大多数应用程序采用两阶段部署，即首先进行测试，然后是生产。一旦我们在测试环境中测试了应用程序，我们就可以将其部署到生产环境中。部署应用程序的步骤如下：
- en: 'The first is to build the application, which creates a `dist` folder that has `index.html`
    and other required files. You can build for production just by adding a `--prod`
    option:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是构建应用程序，这会创建一个包含`index.html`和其他所需文件的`dist`文件夹。您只需添加一个`--prod`选项即可用于生产构建：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next step is to initialize the application project. We will execute the
    init command and select the Firebase features using the space key in the command
    prompt; for our friends application, we will use the database, storage, and hosting
    features of Firebase, and when we select the respective features, it creates a
    default database and storage rules:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是初始化应用程序项目。我们将执行init命令，并在命令提示符中使用空格键选择Firebase功能；对于我们的朋友应用程序，我们将使用Firebase的数据库、存储和托管功能，当我们选择相应的功能时，它将创建默认的数据库和存储规则：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It also creates the `firebase.json` file, which looks as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会创建一个`firebase.json`文件，其外观如下：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we deploy our application using the following command; once our application
    is deployed, we can take a look at the deployed application in the Firebase hosting
    our project:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用以下命令部署我们的应用程序；一旦我们的应用程序部署完成，我们就可以在Firebase托管的项目中查看已部署的应用程序：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The deployed application appears in the Firebase portal. You can see the deployed
    application in the Firebase portal by navigating to  DEVELOP | Hosting, and on
    the right panel Domain and Deployment history appear as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 已部署的应用程序将出现在Firebase门户中。您可以通过导航到DEVELOP | Hosting，在右侧面板中查看已部署的应用程序，如下所示：
- en: '![](img/00068.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: 'Finally, you can open your live application using the following command or
    by pasting the URL as [https://friends-staging.firebaseapp.com](https://friends-staging.firebaseapp.com):'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以使用以下命令或通过粘贴URL作为[https://friends-staging.firebaseapp.com](https://friends-staging.firebaseapp.com)打开您的实时应用程序：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the Firebase security mechanism. We added security
    rules for our friends application database to make our application more secure.
    We indexed the `name` field of our user node for our database so that the search
    query became faster. We then used a search API in our friends application. Finally,
    we created multiple environments for our application so that we were able to separate
    staging from production. We then deployed our application on to Firebase.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Firebase的安全机制。我们为我们的朋友应用程序数据库添加了安全规则，使我们的应用程序更加安全。我们为数据库中的用户节点`name`字段建立了索引，以便搜索查询更快。然后我们在朋友应用程序中使用了搜索API。最后，我们为我们的应用程序创建了多个环境，以便我们能够将测试和生产分离。然后我们在Firebase上部署了我们的应用程序。
- en: In the next chapter, we will learn about Firebase cloud messaging, Google analytics,
    and ads.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Firebase云消息、Google分析以及广告。
