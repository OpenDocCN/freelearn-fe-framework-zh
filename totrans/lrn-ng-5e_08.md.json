["```js\nfetch(url)\n  .then(response => {\n    return response.ok ? response.text() : '';\n  })\n  .then(result => {\n    if (result) {\n      console.log(result);\n    } else {\n      console.error('An error has occurred');\n    }\n  }); \n```", "```js\n**const request$ = new Observable(observer => {**\n  fetch(url)\n    .then(response => {\n      return response.ok ? response.text() : '';\n    })\n    .then(result => {\n      if (result) {\n        **observer.next(result);**\n        **observer.complete();**\n      } else {\n        **observer.error('An error has occurred');**\n      }\n    });\n**});** \n```", "```js\n**import { provideHttpClient } from '@angular/common/http';**\nimport { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { routes } from './app.routes';\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    **provideHttpClient()**\n  ]\n}; \n```", "```js\n    export class AppComponent {\n      settings = inject(APP_SETTINGS);\n    } \n    ```", "```js\n    <header>{{ **settings.title** }}</header> \n    ```", "```js\n    import { provideHttpClient } from '@angular/common/http';\n    import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\n    import { provideRouter } from '@angular/router';\n    import { routes } from './app.routes';\n    **import { APP_SETTINGS, appSettings } from './app.settings';**\n    export const appConfig: ApplicationConfig = {\n      providers: [\n        provideZoneChangeDetection({ eventCoalescing: true }),\n        provideRouter(routes),\n        provideHttpClient(),\n        **{ provide: APP_SETTINGS, useValue: appSettings }**\n      ]\n    }; \n    ```", "```js\n    import { InjectionToken } from '@angular/core';\n    export interface AppSettings {\n      title: string;\n      version: string;\n      **apiUrl: string;**\n    }\n    export const appSettings: AppSettings = {\n      title: 'My e-shop',\n      version: '1.0',\n      **apiUrl: 'https://fakestoreapi.com'**\n    };\n    export const APP_SETTINGS = new InjectionToken<AppSettings>('app.settings'); \n    ```", "```js\n    **import { HttpClient } from '@angular/common/http';**\n    import { Injectable, **inject** } from '@angular/core';\n    import { Product } from './product';\n    import { Observable, of } from 'rxjs';\n    **import { APP_SETTINGS } from './app.settings';** \n    ```", "```js\n    private productsUrl = inject(APP_SETTINGS).apiUrl + '/products'; \n    ```", "```js\n    constructor(**private http: HttpClient**) { } \n    ```", "```js\n    getProducts(): Observable<Product[]> {\n      return **this.http.get<Product[]>(this.productsUrl);**\n    } \n    ```", "```js\n    private products: Product[] = **[]**; \n    ```", "```js\n    @if (**products**) {\n      <h1>Products ({{products.length}})</h1>\n    } \n    ```", "```js\n    import { HttpClient, **HttpParams** } from '@angular/common/http'; \n    ```", "```js\n    const options = new HttpParams().set('limit', 10); \n    ```", "```js\n`const options = new HttpParams();`\n`options.set('limit', 10);` \n```", "```js\nconst options = new HttpParams()\n  .set('limit', 10)\n  .set('page', 1); \n```", "```js\n    return this.http.get<Product[]>(this.productsUrl, **{**\n      **params: options**\n    **}**); \n    ```", "```js\n<li class=\"pill\" (click)=\"selectedProduct = product\">\n  **@switch (product.title) {**\n    **@case ('Keyboard') {** **![img](img/Icon-041.png)** **}**\n    **@case ('Microphone') {** **![img](img/Icon-05.png)** **}**\n    **@default {** **![img](img/Icon-09.png)** **}**\n  **}**\n  **{{product.title}}**\n</li> \n```", "```js\n    category: string; \n    ```", "```js\n    @switch (product.category) {\n      @case ('electronics') { ![img](img/Icon-041.png) }\n      @case ('jewelery') { ![img](img/Icon-10.png) }\n      @default { ![img](img/Icon-09.png) }\n    } \n    ```", "```js\n    @if (product()) {\n      <p>You selected:\n        <strong>{{product()!.title}}</strong>\n      </p>\n      <p>{{product()!.price | currency:'EUR'}}</p>\n      <div class=\"pill-group\">\n        **<p class=\"pill\">{{ product()!.category }}</p>**\n      </div>  \n      <button (click)=\"addToCart()\">Add to cart</button>\n    } \n    ```", "```js\n<app-product-detail\n  **[product]=\"selectedProduct\"**\n  (added)=\"onAdded()\"\n></app-product-detail> \n```", "```js\n    getProduct(id: number): Observable<Product> {\n      return this.http.get<Product>(`${this.productsUrl}/${id}`);\n    } \n    ```", "```js\n    import { CommonModule } from '@angular/common';\n    import {\n      Component,\n      input,\n      output,\n      **OnChanges**\n    } from '@angular/core';\n    import { Product } from '../product';\n    **import { Observable } from 'rxjs';**\n    **import { ProductsService } from '../products.service';** \n    ```", "```js\n    id = input<number>(); \n    ```", "```js\n    product$: Observable<Product> | undefined; \n    ```", "```js\n    constructor(private productService: ProductsService) { } \n    ```", "```js\n    export class ProductDetailComponent **implements OnChanges** \n    ```", "```js\n    ngOnChanges(): void {\n      this.product$ = this.productService.getProduct(this.id()!);\n    } \n    ```", "```js\n    **@let product = (product$ | async);**\n    @if (**product**) {\n      <p>You selected:\n        <strong>{{**product**.title}}</strong>\n      </p>\n      <p>{{**product**.price | currency:'EUR'}}</p>\n      <div class=\"pill-group\">\n        <p class=\"pill\">{{ **product**.category }}</p>\n      </div>  \n      <button (click)=\"addToCart()\">Add to cart</button>\n    } \n    ```", "```js\n    <app-product-detail\n      **[id]=\"selectedProduct?.id\"**\n      (added)=\"onAdded()\"\n    ></app-product-detail> \n    ```", "```js\n    import { Observable, **map**, of } from 'rxjs'; \n    ```", "```js\n    getProducts(): Observable<Product[]> {\n      const options = new HttpParams().set('limit', 10);\n      return this.http.get<Product[]>(this.productsUrl, {\n        params: options\n      })**.pipe(map(products => {**\n        **this.products = products;**\n        **return products;**\n      **}));**\n    } \n    ```", "```js\n    getProduct(id: number): Observable<Product> {\n      **const product = this.products.find(p => p.id === id);**\n      **return of(product!);**\n    } \n    ```", "```js\n    addProduct(newProduct: Partial<Product>): Observable<Product> {\n      return this.http.post<Product>(this.productsUrl, newProduct).pipe(\n        map(product => {\n          this.products.push(product);\n          return product;\n        })\n      );\n    } \n    ```", "```js\n    ng generate component product-create \n    ```", "```js\n    import { ProductsService } from '../products.service'; \n    ```", "```js\n    constructor(private productsService: ProductsService) {} \n    ```", "```js\n    createProduct(title: string, price: string, category: string) {\n      this.productsService.addProduct({\n        title,\n        price: Number(price),\n        category\n      }).subscribe();\n    } \n    ```", "```js\n    <h1>Add new product</h1>\n    <div>\n      <label for=\"title\">Title</label>\n      <input id=\"title\" #title />\n    </div>\n    <div>\n      <label for=\"price\">Price</label>\n      <input id=\"price\" #price type=\"number\" />\n    </div>\n    <div>\n      <label for=\"category\">Category</label>\n      <select id=\"category\" #category>\n        <option>Select a category</option>\n        <option value=\"electronics\">Electronics</option>\n        <option value=\"jewelery\">Jewelery</option>\n        <option>Other</option>\n      </select>\n    </div>\n    <div>\n      <button (click)=\"createProduct(title.value, price.value, category.value)\">Create</button>\n    </div> \n    ```", "```js\n    input {\n      border-radius: 4px;\n      padding: 8px;\n      margin-bottom: 16px;\n      border: 1px solid #BDBDBD;\n    } \n    ```", "```js\n    input {\n      width: 200px;\n    }\n    select {\n      border-radius: 4px;\n      padding: 8px;\n      margin-bottom: 16px;\n      border: 1px solid #BDBDBD;\n      width: 220px;\n    }\n\n    label {\n      margin-bottom: 4px;\n      display: block;\n    } \n    ```", "```js\n    import { AsyncPipe } from '@angular/common';\n    import { Component, OnInit } from '@angular/core';\n    import { Observable } from 'rxjs';\n    import { Product } from '../product';\n    import { ProductDetailComponent } from '../product-detail/product-detail.component';\n    import { SortPipe } from '../sort.pipe';\n    import { ProductsService } from '../products.service';\n    **import { ProductCreateComponent } from '../product-create/product-create.component';**\n    @Component({\n      selector: 'app-product-list',\n      imports: [\n        ProductDetailComponent,\n        SortPipe,\n        AsyncPipe,\n        **ProductCreateComponent**\n      ],\n      templateUrl: './product-list.component.html',\n      styleUrl: './product-list.component.css'\n    }) \n    ```", "```js\n    <app-product-create></app-product-create> \n    ```", "```js\n    updateProduct(id: number, price: number): Observable<Product> {\n      return this.http.patch<Product>(`${this.productsUrl}/${id}`, {\n        price\n      }).pipe(\n        map(product => {\n          const index = this.products.findIndex(p => p.id === id);\n          this.products[index].price = price;\n          return product;\n        })\n      );\n    } \n    ```", "```js\n    changePrice(product: Product, price: string) {\n      this.productService.updateProduct(product.id, Number(price)).subscribe();\n    } \n    ```", "```js\n    @let product = (product$ | async);\n    @if (product) {\n      <p>You selected:\n        <strong>{{product.title}}</strong>\n      </p>\n      <p>{{product.price | currency:'EUR'}}</p>\n      **<input placeholder=\"New price\" #price type=\"number\" />**\n      **<button**\n        **class=\"secondary\"**\n        **(click)=\"changePrice(product, price.value)\">**\n          **Change**\n      **</button>**\n      <div class=\"pill-group\">\n        <p class=\"pill\">{{ product.category }}</p>\n      </div>  \n      <button (click)=\"addToCart()\">Add to cart</button>\n    } \n    ```", "```js\n    button.secondary {\n      display: inline;\n      margin-left: 5px;\n      --button-accent: var(--vivid-pink);\n    } \n    ```", "```js\n    import { Observable, map, of, **tap** } from 'rxjs'; \n    ```", "```js\n    deleteProduct(id: number): Observable<void> {\n      return this.http.delete<void>(`${this.productsUrl}/${id}`).pipe(\n        tap(() => {\n          const index = this.products.findIndex(p => p.id === id);\n          this.products.splice(index, 1);\n        })\n      );\n    } \n    ```", "```js\n    deleted = output(); \n    ```", "```js\n    remove(product: Product) {\n      this.productService.deleteProduct(product.id).subscribe(() => {\n        this.deleted.emit();\n      });\n    } \n    ```", "```js\n    @let product = (product$ | async);\n    @if (product) {\n      <p>You selected:\n        <strong>{{product.title}}</strong>\n      </p>\n      <p>{{product.price | currency:'EUR'}}</p>\n      <input placeholder=\"New price\" #price type=\"number\" />\n      <button\n        class=\"secondary\"\n        (click)=\"changePrice(product, price.value)\">\n          Change\n      </button>\n      <div class=\"pill-group\">\n        <p class=\"pill\">{{ product.category }}</p>\n      </div>  \n      **<div class=\"button-group\">** \n        **<button (click)=\"addToCart()\">Add to cart</button>**\n        **<button class=\"delete\" (click)=\"remove(product)\">Delete</button>**\n      **</div>**\n    } \n    ```", "```js\n    button.delete {\n      display: inline;\n      margin-left: 5px;\n      --button-accent: var(--hot-red);\n    }\n    .button-group {\n      display: flex;\n      flex-direction: row;\n      align-items: start;\n      flex-wrap: wrap;\n    } \n    ```", "```js\n    <app-product-detail\n      [id]=\"selectedProduct?.id\"\n      (added)=\"onAdded()\"\n      **(deleted)=\"selectedProduct = undefined\"**\n    ></app-product-detail> \n    ```", "```js\n    ng generate service auth \n    ```", "```js\n    import { Injectable, **computed, inject, signal** } from '@angular/core';\n    **import { HttpClient } from '@angular/common/http';**\n    **import { Observable, tap } from 'rxjs';**\n    **import { APP_SETTINGS } from './app.settings';** \n    ```", "```js\n    private accessToken = signal('');\n    private authUrl = inject(APP_SETTINGS).apiUrl + '/auth';\n    isLoggedIn = computed(() => this.accessToken() !== ''); \n    ```", "```js\n    constructor(**private http: HttpClient**) { } \n    ```", "```js\n    login(username: string, password: string): Observable<string> {\n      return this.http.post<string>(this.authUrl + '/login', {\n        username, password\n      }).pipe(tap(token => this.accessToken.set(token)));\n    } \n    ```", "```js\n    logout() {\n      this.accessToken.set('');\n    } \n    ```", "```js\n    ng generate component auth \n    ```", "```js\n    import { AuthService } from '../auth.service'; \n    ```", "```js\n    constructor(public authService: AuthService) {} \n    ```", "```js\n    login() {\n      this.authService.login('david_r', '3478*#54').subscribe();\n    }\n    logout() {\n      this.authService.logout();\n    } \n    ```", "```js\n    @if (!authService.isLoggedIn()) {\n      <button (click)=\"login()\">Login</button>\n    } @else {\n      <button (click)=\"logout()\">Logout</button>\n    } \n    ```", "```js\n    import { AuthService } from '../auth.service'; \n    ```", "```js\n    constructor(private productService: ProductsService, **public authService: AuthService**) { } \n    ```", "```js\n    **@if (authService.isLoggedIn()) {** \n      <button (click)=\"addToCart()\">Add to cart</button>\n    **}** \n    ```", "```js\n    import { Component, inject } from '@angular/core';\n    import { RouterOutlet } from '@angular/router';\n    import { ProductListComponent } from './product-list/product-list.component';\n    import { CopyrightDirective } from './copyright.directive';\n    import { APP_SETTINGS } from './app.settings';\n    **import { AuthComponent } from './auth/auth.component';**\n    @Component({\n      selector: 'app-root',\n      imports: [\n        RouterOutlet,\n        ProductListComponent,\n        CopyrightDirective,\n        **AuthComponent**\n      ],\n      templateUrl: './app.component.html',\n      styleUrl: './app.component.css'\n    }) \n    ```", "```js\n    <header>\n      {{ settings.title }}\n      **<app-auth></app-auth>**\n    </header> \n    ```", "```js\ngetProducts(): Observable<Product[]> {\n  const options = {\n    **params: new HttpParams().set('limit', 10),**\n    **headers: new HttpHeaders({ Authorization: 'myToken' })**\n  **};**\n  return this.http.get<Product[]>(this.productsUrl, **options**).pipe(map(products => {\n    this.products = products;\n    return products;\n  }));\n} \n```", "```js\n    ng generate interceptor auth \n    ```", "```js\n    import { provideHttpClient, **withInterceptors** } from '@angular/common/http'; \n    ```", "```js\n    import { authInterceptor } from './auth.interceptor'; \n    ```", "```js\n    export const appConfig: ApplicationConfig = {\n      providers: [\n        provideZoneChangeDetection({ eventCoalescing: true }),\n        provideRouter(routes),\n        provideHttpClient(**withInterceptors([authInterceptor])**),\n        { provide: APP_SETTINGS, useValue: appSettings }\n      ]\n    }; \n    ```", "```js\n    export const authInterceptor: HttpInterceptorFn = (req, next) => {\n      **const authReq = req.clone({**\n        **setHeaders: { Authorization: 'myToken' }**\n      **});**\n      return next(**authReq**);\n    }; \n    ```", "```js\n**import { inject } from '@angular/core';**\nimport { HttpInterceptorFn } from '@angular/common/http';\n**import { AuthService } from './auth.service';**\nexport const authInterceptor: HttpInterceptorFn = (req, next) => {\n  **const authService = inject(AuthService);**\n  const authReq = req.clone({\n    setHeaders: { Authorization: 'myToken' }\n  });\n  return next(authReq);\n}; \n```", "```js\n{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n} \n```"]