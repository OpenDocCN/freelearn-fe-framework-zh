["```js\n    import React from \"react\";\n    import {\n      initializeReactContainer,\n      render,\n      element,\n    } from \"./reactTestExtensions\";\n    import { CustomerForm } from \"../src/CustomerForm\";\n    describe(\"CustomerForm\", () => {\n      beforeEach(() => {\n        initializeReactContainer();\n      });\n    });\n    ```", "```js\n    it(\"renders a form\", () => {\n      render(<CustomerForm />);\n      expect(element(\"form\")).not.toBeNull();\n    });\n    ```", "```js\n    FAIL test/CustomerForm.test.js\n      ● Test suite failed to run\n        Cannot find module '../src/CustomerForm' from 'CustomerForm.test.js'\n    ```", "```js\n    FAIL test/CustomerForm.test.js\n     ● CustomerForm › renders a form\n       Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\n           8 |\n           9 | export const render = (component) =>\n        > 10 |   act(() => \n          11 |     ReactDOM.createRoot(...).render(...)\n             |     ^\n          12 |   );\n          11 |\n          12 | export const click = (element) =>\n          13 |   act(() => element.click());\n    ```", "```js\n    export const CustomerForm = () => null;\n    ```", "```js\n    ● CustomerForm › renders a form\n      expect(received).not.toBeNull()\n      Received: null\n    ```", "```js\nimport React from \"react\";\nexport const CustomerForm = () => <form />;\n```", "```js\n    export const form = (id) => element(\"form\");\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      element,\n      form,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"renders a form\", () => {\n      render(<CustomerForm />);\n      expect(form()).not.toBeNull();\n    });\n    ```", "```js\n    it(\"renders the first name field as a text box\", () => {\n      render(<CustomerForm />);\n      const field = form().elements.firstName;\n      expect(field).not.toBeNull();\n      expect(field.tagName).toEqual(\"INPUT\");\n      expect(field.type).toEqual(\"text\");\n    });\n    ```", "```js\n    export const CustomerForm = () => (\n      <form\n        <input type=\"text\" name=\"firstName\" />\n      </form>\n    );\n    ```", "```js\n    it(\"includes the existing value for the first name\", () => {\n      const customer = { firstName: \"Ashley\" };\n      render(<CustomerForm original={customer} />);\n      const field = form().elements.firstName;\n      expect(field.value).toEqual(\"Ashley\");\n    });\n    ```", "```js\n    export const CustomerForm = ({ original }) => (\n      <form\n        <input\n          type=\"text\"\n          name=\"firstName\"\n    value={original.firstName} />\n      </form>\n    );\n    ```", "```js\n    Warning: You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.\n    ```", "```js\n    const blankCustomer = {\n      firstName: \"\",\n    };\n    ```", "```js\n    it(\"renders a form\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      expect(form()).not.toBeNull();\n    });\n    it(\"renders the first name field as a text box\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      const field = form().elements.firstName;\n      expect(field).not.toBeNull();\n      expect(field.tagName).toEqual(\"INPUT\");\n      expect(field.type).toEqual(\"text\");\n    });\n    ```", "```js\n    <input\n      type=\"text\"\n      name=\"firstName\"\n      value={original.firstName}\n      readOnly\n    />\n    ```", "```js\n    const field = form().elements.firstName;\n    ```", "```js\nexport const field = (fieldName) =>\n  form().elements[fieldName];\n```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      element,\n      form,\n      field,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"includes the existing value for the first name\", () => {\n      const customer = { firstName: \"Ashley\" };\n      render(<CustomerForm original={customer} />);\n      expect(field(\"firstName\").value).toEqual(\"Ashley\");\n    });\n    ```", "```js\n    it(\"renders the first name field as a text box\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      expect(field(\"firstName\")).not.toBeNull();\n      expect(field(\"firstName\")).toEqual(\"INPUT\");\n      expect(field(\"firstName\")).toEqual(\"text\");\n    });\n    ```", "```js\n    it(\"renders a label for the first name field\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      const label = element(\"label[for=firstName]\");\n      expect(label).not.toBeNull();\n    });\n    ```", "```js\n    <form\n      <label htmlFor=\"firstName\" />\n      ...\n    </form>\n    ```", "```js\n    it(\"renders 'First name' as the first name label content\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      const label = element(\"label[for=firstName]\");\n      expect(label).toContainText(\"First name\");\n    });\n    ```", "```js\n    <form\n      <label htmlFor=\"firstName\">First name</label>\n      ...\n    </form>\n    ```", "```js\n    it(\"assigns an id that matches the label id to the first name field\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      expect(field(\"firstName\").id).toEqual(\"firstName\");\n    });\n    ```", "```js\n    <form>\n      <label htmlFor=\"firstName\">First name</label>\n      <input\n        type=\"text\"\n        name=\"firstName\"\n        id=\"firstName\"\n        value={firstName}\n        readOnly\n      />\n    </form>\n    ```", "```js\n    it(\"renders a submit button\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      const button = element(\"input[type=submit]\");\n      expect(button).not.toBeNull();\n    });\n    ```", "```js\n    <form>\n      ...\n      <input type=\"submit\" value=\"Add\" />\n    </form>\n    ```", "```js\n    it(\"saves existing first name when submitted\", () => {\n      expect.hasAssertions();\n    });\n    ```", "```js\n    const customer = { firstName: \"Ashley\" };\n    render(\n      <CustomerForm\n        original={customer}\n        onSubmit={({ firstName }) =>\n          expect(firstName).toEqual(\"Ashley\")\n        }\n      />\n    );\n    ```", "```js\n    const button = element(\"input[type=submit]\");\n    click(button);\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      element,\n      form,\n      field,\n      click,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    export const CustomerForm = ({\n      original,\n      onSubmit\n    }) => (\n      <form onSubmit={() => onSubmit(original)}>\n        ...\n      </form>\n    );\n    ```", "```js\n    console.error\n    Error: Not implemented: HTMLFormElement.prototype.submit\n        at module.exports (.../node_modules/jsdom/lib/jsdom/browser/not-implemented.js:9:17)\n    ```", "```js\nevent.preventDefault();\n```", "```js\nexpect(event.defaultPrevented).toBe(true);\n```", "```js\n    export const submit = (formElement) => {\n      const event = new Event(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n      });\n      act(() => formElement.dispatchEvent(event));\n      return event;\n    };\n    ```", "```js\n    import {\n      ...,\n      submit,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"prevents the default action when submitting the form\", () => {\n      render(\n        <CustomerForm\n          original={blankCustomer}\n          onSubmit={() => {}}\n        />\n      );\n      const event = submit(form());\n      expect(event.defaultPrevented).toBe(true);\n    });\n    ```", "```js\n    export const CustomerForm = ({\n      original,\n      onSubmit\n    }) => {\n      return (\n        <form onSubmit={() => onSubmit(original)}>\n          ...\n        </form>\n      );\n    };\n    ```", "```js\n    export const CustomerForm = ({\n      original,\n      onSubmit\n    }) => {\n      const handleSubmit = (event) => {\n        event.preventDefault();\n        onSubmit(original);\n      };\n      return (\n        <form onSubmit={handleSubmit}>\n        </form>\n      );\n    };\n    ```", "```js\nconst originalValueProperty = (reactElement) => {\n  const prototype =\n    Object.getPrototypeOf(reactElement);\n  return Object.getOwnPropertyDescriptor(\n    prototype,\n    \"value\"\n  );\n};\n```", "```js\n    const button = element(\"input[type=submit]\");\n    ```", "```js\nexport const submitButton = () =>\n  element(\"input[type=submit]\");\n```", "```js\n    import {\n      ...,\n      submitButton,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"renders a submit button\", () => {\n      render(<CustomerForm original={blankCustomer} />);\n      expect(submitButton()).not.toBeNull();\n    });\n    ```", "```js\n    it(\"saves new first name when submitted\", () => {\n      expect.hasAssertions();\n      render(\n        <CustomerForm\n          original={blankCustomer}\n          onSubmit={({ firstName }) =>\n            expect(firstName).toEqual(\"Jamie\")\n          }\n        />\n      );\n      change(field(\"firstName\"), \"Jamie\");\n      click(submitButton());\n    });\n    ```", "```js\n    const originalValueProperty = (reactElement) => {\n      const prototype = \n        Object.getPrototypeOf(reactElement);\n      return Object.getOwnPropertyDescriptor(\n        prototype,\n        \"value\"\n      );\n    };\n    export const change = (target, value) => {\n      originalValueProperty(target).set.call(\n        target,\n        value\n      );\n      const event = new Event(\"change\", {\n        target,\n        bubbles: true,\n      });\n      act(() => target.dispatchEvent(event));\n    };\n    ```", "```js\n    import React, { useState } from \"react\";\n    ```", "```js\n    const [ customer, setCustomer ] = useState(original);\n    ```", "```js\n    const handleChangeFirstName = ({ target }) =>\n      setCustomer((customer) => ({\n        ...customer,\n        firstName: target.value\n      }));\n    ```", "```js\n    <input\n      type=\"text\"\n      name=\"firstName\"\n      id=\"firstName\"\n      value={customer.firstName}\n      onChange={handleChangeFirstName}\n    />\n    ```", "```js\ndescribe(\"CustomerForm\", () => {\n  describe(\"first name field\", () => {\n    // ... tests ...\n  };\n  describe(\"last name field\", () => {\n    // ... tests ...\n  };\n  describe(\"phone number field\", () => {\n    // ... tests ...\n  };\n});\n```", "```js\ndescribe(\"first name field\", () => {\n  it(\"renders as a text box\" ... );\n  it(\"includes the existing value\" ... );\n  it(\"renders a label\" ... );\n  it(\"assigns an id that matches the label id\" ... );\n  it(\"saves existing value when submitted\" ... );\n  it(\"saves new value when submitted\" ... );\n});\n```", "```js\n    const itRendersAsATextBox = () =>\n      it(\"renders as a text box\", () => {\n        render(<CustomerForm original={blankCustomer} />);\n        expect(field(\"firstName\")).not.toBeNull();\n        expect(field(\"firstName\").tagName).toEqual(\n          \"INPUT\"\n        );\n        expect(field(\"firstName\").type).toEqual(\"text\");\n      });\n    itRendersAsATextBox();\n    ```", "```js\n    const itRendersAsATextBox = (fieldName) =>\n      it(\"renders as a text box\", () => {\n        render(<CustomerForm original={blankCustomer} />);\n        expect(field(fieldName)).not.toBeNull();\n        expect(field(fieldName).tagName).toEqual(\"INPUT\");\n        expect(field(fieldName).type).toEqual(\"text\");\n      });\n    itRendersAsATextBox(\"firstName\");\n    ```", "```js\n    const itIncludesTheExistingValue = (\n      fieldName,\n      existing\n    ) =>\n      it(\"includes the existing value\", () => {\n        const customer = { [fieldName]: existing };\n        render(<CustomerForm original={customer} />);\n        expect(field(fieldName).value).toEqual(existing);\n      });\n    itIncludesTheExistingValue(\"firstName\", \"Ashley\");\n    ```", "```js\n    const itRendersALabel = (fieldName, text) => {\n      it(\"renders a label for the text box\", () => {\n        render(<CustomerForm original={blankCustomer} />);\n        const label = element(`label[for=${fieldName}]`);\n        expect(label).not.toBeNull();\n      });\n      it(`renders '${text}' as the label content`, () => {\n        render(<CustomerForm original={blankCustomer} />);\n        const label = element(`label[for=${fieldName}]`);\n        expect(label).toContainText(text);\n      });\n    };\n    ```", "```js\n    const itAssignsAnIdThatMatchesTheLabelId = (\n      fieldName\n    ) => \n       ...\n    const itSubmitsExistingValue = (fieldName, value) =>\n       ...\n    const itSubmitsNewValue = (fieldName, value) =>\n       ...\n    ```", "```js\n    describe(\"first name field\", () => {\n      itRendersAsATextBox(\"firstName\");\n      itIncludesTheExistingValue(\"firstName\", \"Ashley\");\n      itRendersALabel(\"firstName\", \"First name\");\n      itAssignsAnIdThatMatchesTheLabelId(\"firstName\");\n      itSubmitsExistingValue(\"firstName\", \"Ashley\");\n      itSubmitsNewValue(\"firstName\", \"Jamie\");\n    });\n    ```", "```js\ndescribe(\"last name field\", () => {\n  itRendersAsATextBox(\"lastName\");\n});\n```", "```js\nconst blankCustomer = {\n  firstName: \"\",\n  lastName: \"\",\n};\n```", "```js\n<input type=\"text\" name=\"lastName\" />\n```", "```js\nPASS test/CustomerForm.test.js\n  CustomerForm\n    ✓ renders a form (28ms)\n    first name field\n      ✓ renders as a text box (4ms)\n      ✓ includes the existing value (3ms)\n      ✓ renders a label (2ms)\n      ✓ saves existing value when submitted (4ms)\n      ✓ saves new value when submitted (5ms)\n    last name field\n      ✓ renders as a text box (3ms)\n      ✓ includes the existing value (2ms)\n      ✓ renders a label (6ms)\n      ✓ saves existing value when submitted (2ms)\n      ✓ saves new value when submitted (3ms)\n    phone number field\n      ✓ renders as a text box (2ms)\n      ✓ includes the existing value (2ms)\n      ✓ renders a label (2ms)\n      ✓ saves existing value when submitted (3ms)\n      ✓ saves new value when submitted (2ms)\n```", "```js\nconst handleChangeFirstName = ({ target }) =>\n  setCustomer((customer) => ({\n    ...customer,\n    firstName: target.value\n  }));\nconst handleChangeLastName = ({ target }) =>\n  setCustomer((customer) => ({\n    ...customer,\n    lastName: target.value\n  }));\nconst handleChangePhoneNumber = ({ target }) =>\n  setCustomer((customer) => ({\n    ...customer,\n    phoneNumber: target.value\n  }));\n```", "```js\nconst handleChange = ({ target }) =>\n  setCustomer(customer => ({\n    ...customer,\n   [target.name]: target.value\n  }));\n```", "```js\n    expect(labelFor(fieldName)).not.toBeNull();\n    ```", "```js\n    expect(field(fieldName)).toBeInputFieldOfType(\"text\");\n    ```"]