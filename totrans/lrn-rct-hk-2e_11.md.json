["```js\nconst [state, setState] = useState(initialState) \n```", "```js\nsetState(val => val + 1) \n```", "```js\nconst [state, setState] = useState(() => {\n  return computeInitialState()\n}) \n```", "```js\nuseEffect(() => {\n  // do something\n}) \n```", "```js\nuseEffect(() => {\n  const interval = setInterval(() => {}, 100)\n  return () => {\n    clearInterval(interval)\n  }\n}) \n```", "```js\nuseEffect(() => {\n  // do something when state changes\n}, [state]) \n```", "```js\nconst value = useContext(NameOfTheContext) \n```", "```js\nconst [state, dispatch] = useReducer(reducer, initialState, initFn) \n```", "```js\nconst [state, action, isPending] = useActionState(actionFn, initialState) \n```", "```js\nfunction actionFn(currentState, formData) { \n```", "```js\nconst { pending, data, method, action } = useFormStatus() \n```", "```js\nimport { useFormStatus } from 'react-dom'\nfunction SubmitButton() {\n  const { pending } = useFormStatus()\n  return <button disabled={pending}>Submit</button>\n}\nfunction ExampleForm() {\n  return (\n    <form>\n<SubmitButton />\n</form>\n  )\n} \n```", "```js\nconst [optimisticState, addOptimistic] = useOptimistic(state, updateFn) \n```", "```js\nfunction updateFn(state, newObject) {\n  return state.concat(\n    { ...newObject, pending: true }\n  )\n} \n```", "```js\nconst [isPending, startTransition] = useTransition() \n```", "```js\n    $ cp -R Chapter08_2 Chapter09_1 \n    ```", "```js\n    export function Demo() {\n      return <h1>Demo Page</h1>\n    } \n    ```", "```js\n    import { Demo } from './pages/Demo.jsx' \n    ```", "```js\n     <BrowserRouter>\n                <div style={{ padding: 8 }}>\n    <NavBarLink to='/'>Home</NavBarLink>\n     **{' | '}**\n    **<****NavBarLink****to****=****'/demo'****>****Demo****</****NavBarLink****>** \n    ```", "```js\n     <Routes>\n                          <Route index element={<Home />} />\n                          <Route path='post/:id' element={<ViewPost />} />\n    **<****Route****path****=****'demo'****element****=****{****<****Demo** **/>****} />** \n    ```", "```js\n    $ npm run dev \n    ```", "```js\nconst refContainer = useRef(initialValue) \n```", "```js\n    import { useRef, useEffect } from 'react' \n    ```", "```js\n    export function AutoFocus() {\n      const inputRef = useRef(null) \n    ```", "```js\n     useEffect(() => inputRef.current.focus(), []) \n    ```", "```js\n     return (\n        <div>\n    <h3>AutoFocus</h3>\n    <input ref={inputRef} type='text' />\n    </div>\n      )\n    } \n    ```", "```js\n    import { AutoFocus } from '@/components/demo/useRef/AutoFocus.jsx' \n    ```", "```js\n    export function Demo() {\n    **return** **(**\n    **<****div****>**\n    **<****h1****>****Demo Page****</****h1****>**\n    **<****h2****>****useRef****</****h2****>**\n    **<****AutoFocus** **/>**\n    **</****div****>**\n     **)**\n    } \n    ```", "```js\n    import { useState } from 'react' \n    ```", "```js\n    export function InitialWidthMeasure() {\n      const [width, setWidth] = useState(0) \n    ```", "```js\n     function measureRef(node) { \n    ```", "```js\n     if (node !== null) {\n          setWidth(node.getBoundingClientRect().width)\n        }\n      } \n    ```", "```js\n     return (\n        <div>\n    <h3>InitialWidthMeasure</h3>\n    <div ref={measureRef}>I was initially {Math.round(width)}px wide</div>\n    </div>\n      )\n    } \n    ```", "```js\n    import { InitialWidthMeasure } from '@/components/demo/useRef/InitialWidthMeasure.jsx' \n    ```", "```js\n    export function Demo() {\n      return (\n        <div>\n          <h1>Demo Page</h1>\n    <h2>useRef</h2>\n    <AutoFocus />\n    **<****InitialWidthMeasure** **/>** \n    ```", "```js\n    import { useRef, useState, useEffect } from 'react' \n    ```", "```js\n    export function Timer() { \n    ```", "```js\n     const intervalRef = useRef(null)\n      const [seconds, setSeconds] = useState(0) \n    ```", "```js\n     function increaseSeconds() {\n        setSeconds((prevSeconds) => prevSeconds + 1)\n      } \n    ```", "```js\n     useEffect(() => {\n        intervalRef.current = setInterval(increaseSeconds, 1000) \n    ```", "```js\n     return () => clearInterval(intervalRef.current)\n      }, []) \n    ```", "```js\n     return (\n        <div>\n          <h3>Timer</h3>\n          {seconds} seconds \n    ```", "```js\n     <button type='button' onClick={() => clearInterval(intervalRef.current)}>\n            Cancel\n    </button>\n    </div>\n      )\n    } \n    ```", "```js\n    import { Timer } from '@/components/demo/useRef/Timer.jsx' \n    ```", "```js\n    export function Demo() {\n      return (\n        <div>\n          <h1>Demo Page</h1>\n    <h2>useRef</h2>\n    <AutoFocus />\n    <InitialWidthMeasure />\n    **<****Timer** **/>** \n    ```", "```js\n    export function CustomInput({ ref }) { \n    ```", "```js\n     return <input ref={ref} type='text' />\n    } \n    ```", "```js\n    import { CustomInput } from './CustomInput.jsx' \n    ```", "```js\n     return (\n        <div>\n          <h3>AutoFocus</h3>\n    **<****CustomInput****ref****=****{inputRef}** **/>** \n    ```", "```js\nfunction Map() {\n  const pathfinderRef = useRef(null)\n  if (pathfinderRef.current === null) {\n    pathfinderRef.current = createPathfinder()\n  }\n} \n```", "```js\nuseImperativeHandle(ref, createHandle, [dependencies]) \n```", "```js\n    import { useImperativeHandle, useRef, useState } from 'react' \n    ```", "```js\n    export function HighlightFocusInput({ ref }) { \n    ```", "```js\n     const inputRef = useRef(null)\n      const [highlight, setHighlight] = useState(false) \n    ```", "```js\n     useImperativeHandle(ref, () => ({ \n    ```", "```js\n     focus: () => {\n          inputRef.current.focus()\n          setHighlight(true)\n          setTimeout(() => setHighlight(false), 1000)\n        },\n      })) \n    ```", "```js\n     return (\n        <input\n     ref={inputRef}\n     type='text' \n    ```", "```js\n     style={{ backgroundColor: highlight ? 'yellow' : undefined }}\n        />\n      )\n    } \n    ```", "```js\n    import { useRef } from 'react'\n    import { HighlightFocusInput } from './HighlightFocusInput.jsx' \n    ```", "```js\n    export function HighlightFocus() {\n      const inputRef = useRef(null) \n    ```", "```js\n     return (\n        <div>\n    <h3>HighlightFocus</h3>\n    <button onClick={() => inputRef.current.focus()}>focus it</button>\n    <HighlightFocusInput ref={inputRef} />\n    </div>\n      )\n    } \n    ```", "```js\n    import { HighlightFocus } from '@/components/demo/useImperativeHandle/HighlightFocus.jsx' \n    ```", "```js\n     <InitialWidthMeasure />\n          <Timer />\n    **<****h2****>****useImperativeHandle****</****h2****>**\n    **<****HighlightFocus** **/>**\n        </div>\n      )\n    } \n    ```", "```js\nconst uniqueId = useId() \n```", "```js\n    import { useId } from 'react' \n    ```", "```js\n    export function AriaInput() {\n      const inputId = useId() \n    ```", "```js\n     return (\n        <div>\n          <h3>AriaInput</h3>\n    <label htmlFor={inputId}> \n    ```", "```js\n     <input id={inputId} type='checkbox' /> I agree to the Terms\n            and Conditions.\n          </label>\n    </div>\n      )\n    } \n    ```", "```js\n    import { AriaInput } from '@/components/demo/useId/AriaInput.jsx' \n    ```", "```js\n     <Timer />\n          <h2>useImperativeHandle</h2>\n    <HighlightFocus />\n    **<****h2****>****useId****</****h2****>**\n    **<****AriaInput** **/>**\n        </div>\n      )\n    } \n    ```", "```js\nconst snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) \n```", "```js\n    import { useSyncExternalStore } from 'react' \n    ```", "```js\n    function subscribe(callback) { \n    ```", "```js\n     window.addEventListener('online', callback)\n      window.addEventListener('offline', callback) \n    ```", "```js\n     return () => {\n        window.removeEventListener('online', callback)\n        window.removeEventListener('offline', callback)\n      }\n    } \n    ```", "```js\n    function getSnapshot() {\n      return navigator.onLine\n    } \n    ```", "```js\n    export function OnlineIndicator() {\n      const isOnline = useSyncExternalStore(subscribe, getSnapshot) \n    ```", "```js\n     const status = isOnline ? 'online' : 'offline' \n    ```", "```js\n     return (\n        <div>\n    <h3>OnlineIndicator</h3>\n          {status}\n        </div>\n      )\n    } \n    ```", "```js\n    import { OnlineIndicator } from '@/components/demo/useSyncExternalStore/OnlineIndicator.jsx' \n    ```", "```js\n     <h2>useId</h2>\n          <AriaInput />\n    **<****h2****>****useSyncExternalStore****</****h2****>**\n    **<****OnlineIndicator** **/>**\n        </div>\n      )\n    } \n    ```", "```js\nuseDebugValue(value, format) \n```", "```js\n    import { useSyncExternalStore**, useDebugValue** } from 'react' \n    ```", "```js\n    function useOnlineStatus() {\n      const isOnline = useSyncExternalStore(subscribe, getSnapshot)\n      const status = isOnline ? 'online' : 'offline' \n    ```", "```js\n     useDebugValue(status) \n    ```", "```js\n     return status\n    } \n    ```", "```js\n    export function OnlineIndicator() {\n    **const** **status =** **useOnlineStatus****()**\n    return (\n        <div>\n    <h3>OnlineIndicator</h3>\n          {status}\n        </div>\n      )\n    } \n    ```", "```js\nconst deferredValue = useDeferredValue(value, initialValue) \n```", "```js\n    function sleep(ms) {\n      return new Promise((resolve) => setTimeout(resolve, ms))\n    } \n    ```", "```js\n    export async function searchPosts(query) {\n      const res = await fetch('/api/posts')\n      const posts = await res.json() \n    ```", "```js\n     const filteredPosts = posts.filter((post) => {\n        const title = post.title.toLowerCase()\n        return title.includes(query.toLowerCase())\n      }) \n    ```", "```js\n     await sleep(1000) \n    ```", "```js\n     return filteredPosts\n    } \n    ```", "```js\n    import { useSuspenseQuery } from '@tanstack/react-query'\n    import { searchPosts } from '@/api.js'\n    import { PostList } from './PostList.jsx' \n    ```", "```js\n    export function PostSearchResults({ query }) {\n      const { data } = useSuspenseQuery({\n        queryKey: ['posts', query],\n        queryFn: () => searchPosts(query),\n      })\n      return <PostList posts={data} />\n    } \n    ```", "```js\n    import { useState, Suspense } from 'react'\n    import { PostSearchResults } from './PostSearchResults.jsx' \n    ```", "```js\n    export function PostSearch() {\n      const [query, setQuery] = useState('')\n      return (\n        <div>\n          <input value={query} onChange={(e) =>setQuery(e.target.value)} /> \n    ```", "```js\n     <Suspense fallback={<h4>loading...</h4>}>\n            <PostSearchResults query={query} />\n    </Suspense>\n    </div>\n      )\n    } \n    ```", "```js\n    import { PostSearch } from '@/components/post/PostSearch.jsx' \n    ```", "```js\n    export function Search() {\n      return (\n        <div>\n    <h1>Search posts</h1>\n    <PostSearch />\n    </div>\n      )\n    } \n    ```", "```js\n    import { Search } from './pages/Search.jsx' \n    ```", "```js\n     <BrowserRouter>\n                <div style={{ padding: 8 }}>\n    <NavBarLink to='/'>Home</NavBarLink>\n     **{' | '}**\n    **<****NavBarLink****to****=****'/search'****>****Search****</****NavBarLink****>**\n                  {' | '}\n                  <NavBarLink to='/demo'>Demo</NavBarLink> \n    ```", "```js\n     <Routes>\n                          <Route index element={<Home />} />\n                          <Route path='post/:id' element={<ViewPost />} />\n                          <Route path='demo' element={<Demo />} />\n    **<****Route****path****=****'search'****element****=****{****<****Search** **/>****} />**\n                        </Routes> \n    ```", "```js\n    import { useState, Suspense**, useDeferredValue** } from 'react' \n    ```", "```js\n    export function PostSearch() {\n      const [query, setQuery] = useState('')\n    **const** **deferredQuery =** **useDeferredValue****(query)** \n    ```", "```js\n     <Suspense fallback={<h4>loading...</h4>}>\n            <SearchResults query={**deferredQuery**} />\n    </Suspense>\n    </div>\n      )\n    } \n    ```", "```js\nconst memoizedVal = useMemo(\n  () => computeVal(a, b, c),\n  [a, b, c]\n) \n```", "```js\nconst memoizedCallback = useCallback(\n  () => doSomething(a, b, c),\n  [a, b, c]\n) \n```", "```js\nconst memoizedCallback = useMemo(\n  () => () => doSomething(a, b, c),\n  [a, b, c]\n) \n```"]