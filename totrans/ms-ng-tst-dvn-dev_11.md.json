["```js\n calculate(): void {\n    if (this.calculatorForm.get('operator')?.value === '+') {\n      this.add(\n        this.calculatorForm.get('operand1')?.value,\n        this.calculatorForm.get('operand2')?.value\n      );\n    }\n    if (this.calculatorForm.get('operator')?.value === '-') {\n      this.substract(\n        this.calculatorForm.get('operand1')?.value,\n        this.calculatorForm.get('operand2')?.value\n      );\n    }\n    if (this.calculatorForm.get('operator')?.value === '*') {\n      this.multiply(\n        this.calculatorForm.get('operand1')?.value,\n        this.calculatorForm.get('operand2')?.value\n      );\n    }\n    if (this.calculatorForm.get('operator')?.value === '/') {\n      this.divide(\n        this.calculatorForm.get('operand1')?.value,\n        this.calculatorForm.get('operand2')?.value\n      );\n    }\n  }\n```", "```js\n it('should be valid when all of the fields are filled in correctly', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(123);\n    calculator.calculatorForm.get('operand2')?.setValue(456);\n    calculator.calculatorForm.get('operator')?.setValue('+');\n    expect(calculator.calculatorForm.valid).toBe(true);\n  });\n  it('should be invalid when one of the field is not filled in correctly', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(123);\n    calculator.calculatorForm.get('operator')?.setValue('+');\n    expect(calculator.calculatorForm.valid).toBe(false);\n  });\n  it('should add when the + operator is selected and the calculate button is clicked', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(2);\n    calculator.calculatorForm.get('operand2')?.setValue(3);\n    calculator.calculatorForm.get('operator')?.setValue('+');\n    calculator.calculate();\n    expect(calculator.result).toBe(5);\n  });\n  it('should subtract when the - operator is selected and the calculate button is clicked', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(2);\n    calculator.calculatorForm.get('operand2')?.setValue(3);\n    calculator.calculatorForm.get('operator')?.setValue('-');\n    calculator.calculate();\n    expect(calculator.result).toBe(-1);\n  });\n  it('should multiply when the * operator is selected and the calculate button is clicked', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(2);\n    calculator.calculatorForm.get('operand2')?.setValue(3);\n    calculator.calculatorForm.get('operator')?.setValue('*');\n    calculator.calculate();\n    expect(calculator.result).toBe(6);\n  });\n  it('should divide when the / operator is selected and the calculation button is clicked.', () => {\n    calculator.calculatorForm.get('operand1')?.setValue(3);\n    calculator.calculatorForm.get('operand2')?.setValue(2);\n    calculator.calculatorForm.get('operator')?.setValue('/');\n    calculator.calculate();\n    expect(calculator.result).toBe(1.5);\n  });\n```", "```js\n calculate(): void {\n  const operator = this.calculatorForm.get('operator')?.value;\n  const operand1 = this.calculatorForm.get('operand1')?.value;\n  const operand2 = this.calculatorForm.get('operand2')?.value;\n  if (!operator ||!operand1 ||!operand2) return;\n  switch (operator) {\n    case '+':\n      this.add(operand1, operand2);\n      break;\n    case '-':\n      this.subtract(operand1, operand2);\n      break;\n    case '*':\n      this.multiply(operand1, operand2);\n      break;\n    case '/':\n      this.divide(operand1, operand2);\n      break;\n    default:\n      console.error(`Unsupported operator: ${operator}`);\n      break;\n  }\n}\n```"]