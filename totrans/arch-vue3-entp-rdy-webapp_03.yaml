- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Scaling Performance in Vue.js 3
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vue.js 3中扩展性能
- en: This chapter depends solely on the knowledge of the previous chapters, where
    we explored the different libraries to develop large-scale and enterprise-ready
    applications with Vue.js 3\. This chapter will dive deeper into scaling an extensive
    Vue application. You will learn how to scale performance with asynchronous lazy
    loading, image compression, code splitting, tree shaking, and many other tricks
    to better increase the performance of your Vue.js 3 enterprise-ready application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完全依赖于前几章的知识，我们在那里探讨了使用Vue.js 3开发大规模和企业级应用的不同库。本章将进一步深入探讨扩展大型Vue应用。你将学习如何通过异步懒加载、图像压缩、代码拆分、摇树优化以及许多其他技巧来提高你的Vue.js
    3企业级应用性能。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Why do we need Vue.js performance optimization?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为什么需要Vue.js性能优化？
- en: The primary reasons for poor Vue performance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导致Vue性能不佳的主要原因
- en: Checking your Vue.js application’s bundle size
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查你的Vue.js应用包大小
- en: Optimizing the performance of an enterprise Vue application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化企业级Vue应用的性能
- en: Once you’ve mastered each of these topics, you will be ready to get stuck into
    building your first enterprise-ready application with Vue 3.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了这些主题中的每一个，你将准备好开始使用Vue 3构建你的第一个企业级应用。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started with this chapter, I recommend you read through [*Chapter 1*](B17237_01.xhtml#_idTextAnchor015),
    *Getting Started with Vue.js 3*, where you will get an overview of Vue 3 and the
    Composition API, intensively used in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章的学习，我建议你阅读[*第一章*](B17237_01.xhtml#_idTextAnchor015)，*Vue.js 3入门*，在那里你将了解Vue
    3和本章中广泛使用的组合API的概述。
- en: Why do we need Vue.js performance optimization?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么需要Vue.js性能优化？
- en: In this section, we will learn why performance stability in an application is
    important and how to develop an application with performance in mind.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习为什么应用中的性能稳定性很重要，以及如何以性能为导向开发应用。
- en: Developing an application without taking actionable steps to ensure the stable
    performance of the application can cost the application a lot. Developing an application
    that takes a while to load, navigate, submit, or take any user actions will result
    in losing users, thereby gradually losing on the initial plan of the application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用时，如果不采取行动确保应用的稳定性能，可能会给应用带来很大损失。开发一个加载、导航、提交或执行任何用户操作需要较长时间的应用，会导致用户流失，从而逐渐偏离应用的初始计划。
- en: Suppose the end users are not satisfied with the enterprise application’s user
    experience and load time, Vue.js performance, and efficiency. In this case, the
    time invested and the lines of code written don’t matter; the user might not return
    to the application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设最终用户对企业的用户体验和加载时间、Vue.js性能和效率不满意。在这种情况下，投入的时间和编写的代码都不重要；用户可能不会返回到该应用。
- en: 'Here are some different facts from Kinsta that show how poor performance can
    affect the performance of an enterprise application on the market: [https://kinsta.com/blog/laravel-caching/](https://kinsta.com/blog/laravel-caching/).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些来自Kinsta的不同事实，展示了糟糕的性能如何影响市场上企业级应用的表现：[https://kinsta.com/blog/laravel-caching/](https://kinsta.com/blog/laravel-caching/)。
- en: An online study ([https://kinsta.com/learn/page-speed/#slow-how-slow](https://kinsta.com/learn/page-speed/#slow-how-slow))
    found that it cost Amazon $1.6 billion in sales per year for every 1 second of
    load lag time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一项在线研究([https://kinsta.com/learn/page-speed/#slow-how-slow](https://kinsta.com/learn/page-speed/#slow-how-slow))发现，对于每1秒的加载延迟，亚马逊每年损失16亿美元的销售额。
- en: Another Google study ([https://www.thinkwithgoogle.com/future-of-marketing/digital-transformation/the-google-gospel-of-speed-urs-hoelzle/](https://www.thinkwithgoogle.com/future-of-marketing/digital-transformation/the-google-gospel-of-speed-urs-hoelzle/))
    reported that if search results are slow even by a fraction of a second, people
    will search less. What this means is that a 400-millisecond delay leads to a 0.44%
    drop in search volume.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一项谷歌研究([https://www.thinkwithgoogle.com/future-of-marketing/digital-transformation/the-google-gospel-of-speed-urs-hoelzle/](https://www.thinkwithgoogle.com/future-of-marketing/digital-transformation/the-google-gospel-of-speed-urs-hoelzle/))报告称，即使搜索结果慢了一秒钟，人们也会减少搜索。这意味着400毫秒的延迟会导致搜索量下降0.44%。
- en: A further study shows that four out of five internet users will click away if
    a video stalls while loading.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的研究表明，如果有五分之四的互联网用户在视频加载时遇到卡顿，他们将会离开。
- en: The preceding study shows that a slight sluggishness in your web page load time
    can have a massive impact on your users’ experience and the loss of a huge amount
    of funds.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know why we need performance stability in our application, in the
    next section, let’s look at the primary reasons behind poor Vue performance.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The primary reasons for poor Vue performance
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many known reasons behind poor Vue performance, and we will explore
    the primary and most notable reasons in this section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The apparent reason for a Vue application slowing down is in the structure.
    As an enterprise application, it’s evident that the bigger the application, the
    slower the application becomes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: For example, one of the significant reasons behind poor performance in enterprise
    Vue applications may vary in different projects and how they deal with **server-side**
    **rendering** (**SSR**).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The primary reason for poor performance in any Vue **single-page application**
    (**SPA**) or SSR enterprise application is the bundle size. The larger the bundle
    size, the slower the Vue performance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other common reasons behind poor performance in enterprise Vue applications,
    such as the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Not structuring the CSS and JS files properly
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not using third-party libraries wisely
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unwanted hits to API requests
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overlooking code splitting and lazy loading
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are more reasons for poor performance, and we have just listed a few.
    Before we discuss how to resolve them, let’s explore how to check for the bundle
    size of an enterprise Vue application in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Checking your Vue application’s bundle size
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The bundle size is the total size of your Vue application that will be loaded
    by the browser. The larger the size, the slower your application loads.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: There are two different ways to check your Vue bundle size when working with
    the Vue framework.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through each of these methods in more detail.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Generating a report
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `build` command with the `--report` flag to generate your application
    report. This method gives a visual representation of all the packages used and
    each bundle size. Further, with the information generated from this visual report,
    you can figure out how to replace any package that takes up more space and size
    than expected.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that the `build` command will only build a report when `webpack-bundle-analyzer`
    is installed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a report for your application, follow these steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the package with the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create a script for the command in your `package.json` file:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And lastly, execute the following command to generate the report:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After running the preceding command, a file named `report.html` is created
    inside the `dist` folder. When you open the file, you will see the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.1 – Application bundle-size\uFEFF report](img/Figure_3.01_B17237.jpg)"
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Application bundle-size report
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Running the npm build command
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running the `build` method of your Vue application will generate a list of
    different chunks and bundle sizes. From this information, you can see additional
    warnings concerning which chunk has a bigger bundle size and how you can improve
    it. Here’s how it looks:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的Vue应用程序的`build`方法将生成不同块和包大小的列表。从这些信息中，你可以看到有关哪个块具有更大的包大小以及如何改进它的额外警告。以下是它的样子：
- en: '![Figure 3.2 – Chunks and bundle sizes](img/Figure_3.02_B17237.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 块和包的大小](img/Figure_3.02_B17237.jpg)'
- en: Figure 3.2 – Chunks and bundle sizes
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 块和包的大小
- en: In this section, we learned why we need Vue.js performance optimization, the
    primary reasons for poor performance, and the different ways to check Vue.js bundle
    size.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了为什么我们需要Vue.js性能优化，性能不佳的主要原因以及检查Vue.js包大小的不同方法。
- en: In the next section, we will learn how to optimize the performance of a Vue
    application using different standard methods.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用不同的标准方法优化Vue应用程序的性能。
- en: Optimizing the performance of an enterprise Vue application
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化企业Vue应用程序的性能
- en: One of the downsides of creating an enterprise application is the size of the
    application regarding the code base, the data size, and the speed it takes to
    respond to users’ actions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建企业应用程序的一个缺点是应用程序的大小，包括代码库、数据量以及响应用户操作的速度。
- en: One solution could be to implement a proper caching mechanism on both the backend
    and frontend of the enterprise application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可能的解决方案是在企业应用程序的后端和前端实施适当的缓存机制。
- en: You will agree that it’s challenging to develop an application. Still, it is
    more challenging to create an application with optimized performance or even solve
    the performance bottleneck of an enterprise application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你会同意开发一个应用程序是有挑战性的。然而，创建一个性能优化或甚至解决企业应用程序性能瓶颈的应用程序更具挑战性。
- en: In this section, we will look at some tips that you can implement to improve
    the performance of your enterprise Vue application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨一些你可以实施的技巧来提高你的企业Vue应用程序的性能。
- en: Asynchronous/lazy component loading
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步/延迟组件加载
- en: We will start with asynchronous/lazy components loading to lessen your challenges
    to explore Vue.js performance optimization.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先从异步/延迟组件加载开始，以减轻你探索Vue.js性能优化的挑战。
- en: Asynchronous/lazy components loading in Vue.js is a term used to describe loading
    modules/components when the user needs a module/component. In an enterprise application,
    it is unnecessary to load all the modules from the JavaScript bundle whenever
    the user visits the website, as doing so will cause a performance bottleneck.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue.js中，异步/延迟组件加载是一个术语，用于描述在用户需要模块/组件时加载模块/组件。在企业应用程序中，当用户访问网站时，没有必要从JavaScript包中加载所有模块，因为这样做将导致性能瓶颈。
- en: In enterprise projects, you will agree that there are complex components with
    many modals, tooltips, and other interconnected components that will slow down
    the performance of your application if not lazy loaded.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业项目中，你会同意存在许多模态框、工具提示和其他相互关联的复杂组件，如果不延迟加载，这些组件将减慢应用程序的性能。
- en: 'Before we explore how to lazy load components, you can check the actual JavaScript
    code used on your web page by following these simple steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索如何延迟加载组件之前，你可以通过以下简单步骤检查你网页上使用的实际JavaScript代码：
- en: 'Click on **DevTools**. The following screen will appear:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**DevTools**。以下屏幕将出现：
- en: '![Figure 3.3 – Sample of live DevTools in Chrome](img/Figure_3.03_B17237.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 – Chrome中实时DevTools的示例](img/Figure_3.03_B17237.jpg)'
- en: Figure 3.3 – Sample of live DevTools in Chrome
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – Chrome中实时DevTools的示例
- en: Press *Cmd* + *Shift* + *P*.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Cmd* + *Shift* + *P*。
- en: 'Type `Coverage`. Once you type it, the following message will appear at the
    bottom of the screen:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Coverage`。一旦输入，屏幕底部将出现以下信息：
- en: '![Figure 3.4 – A screenshot showing the Coverage tab](img/Figure_3.04_B17237.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – 显示覆盖率标签的屏幕截图](img/Figure_3.04_B17237.jpg)'
- en: Figure 3.4 – A screenshot showing the Coverage tab
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 显示覆盖率标签的屏幕截图
- en: Click **Record**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**记录**。
- en: 'After recording and analyzing the web page, it will highlight some URLs in
    red, which shows that the URLs are not in use and can be lazy-loaded:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录和分析网页后，它将以红色突出显示一些URL，这表明这些URL未使用，可以延迟加载：
- en: '![Figure 3.5 – A screenshot showing different URLs when analyzing with DevTools](img/Figure_3.05_B17237.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 使用DevTools分析时显示不同URL的屏幕截图](img/Figure_3.05_B17237.jpg)'
- en: Figure 3.5 – A screenshot showing different URLs when analyzing with DevTools
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 使用DevTools分析时显示的不同URL的截图
- en: If lazy loading is appropriately implemented, the bundle size of your enterprise
    application can be reduced to 60%, thereby increasing the speed of your application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果懒加载得到适当的实现，您的企业应用程序的包大小可以减少到60%，从而提高应用程序的速度。
- en: Lastly, let’s explore how to enforce lazy loading. We can use Webpack dynamic
    imports over regular imports to separate the chunk of lazily loaded modules.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们探讨如何强制执行懒加载。我们可以使用Webpack动态导入而不是常规导入来分离懒加载模块的块。
- en: 'Traditionally, this is how components/modules are imported in JavaScript:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，这是JavaScript中导入组件/模块的方式：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By importing this module this way, Webpack will create a file named `photo.js`
    as a node to the `app.js` file in its dependency graph and bundle it together
    even when the user doesn’t need to use the module.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式导入此模块，Webpack将在其依赖图中创建一个名为`photo.js`的文件作为`app.js`文件的节点，并将其捆绑在一起，即使用户不需要使用该模块。
- en: 'But to improve things a little, we can use dynamic imports or lazy loading
    to achieve and overcome the performance bottleneck with the previous method. The
    following code block shows dynamic/lazy loading in action:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了稍微改进一下，我们可以使用动态导入或懒加载来克服之前方法中的性能瓶颈。以下代码块展示了动态/懒加载的实际应用：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Lazy loading in Vue.js is one of the best practices to reduce the bundle size
    and optimize performance. Vue recommends that bundles should not exceed a size
    of 244 KiB, but you can also try to optimize your web page to make sure that it’s
    not very slow in performance, even with a bundle size a little higher than recommended.
    Develop a habit of knowing which modules you don’t need unless there’s an explicit
    user action, and download them lazily for better performance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue.js中实现懒加载是减少包大小和优化性能的最佳实践之一。Vue建议包的大小不应超过244 KiB，但您也可以尝试优化您的网页，以确保即使包的大小略高于推荐值，性能也不会非常慢。养成一个习惯，知道哪些模块您不需要，除非有明确用户操作，然后懒加载它们以获得更好的性能。
- en: WebP images and image compression
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebP图像和图像压缩
- en: One of the primary reasons for large bundle sizes and slow applications is that
    images contribute a lot to an application’s bundle size. If images are not correctly
    optimized, it can increase the loading time of an application when the application
    renders images of considerable sizes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 大型包大小和缓慢的应用程序的一个主要原因是图像对应用程序包大小贡献很大。如果图像没有正确优化，当应用程序渲染较大尺寸的图像时，可能会增加应用程序的加载时间。
- en: 'There are different ways to achieve image optimization, and we are going to
    discuss two of the popular methods:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 实现图像优化的方法有很多，我们将讨论两种流行的方法：
- en: Compressing images
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩图片
- en: Optimizing **content delivery network** (**CDN**) images
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化**内容分发网络**（**CDN**）图像
- en: Compressing images
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 压缩图片
- en: If your enterprise application contains small images in number, these images
    will be served locally while applying a different compression algorithm to reduce
    the sizes of each image.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的企业应用程序包含少量的小图像，这些图像将本地提供服务，同时应用不同的压缩算法以减小每个图像的大小。
- en: 'There are thousands of online tools to compress images, and the following is
    the list of some popular ones:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有成千上万的在线工具可以压缩图像，以下是一些流行的工具列表：
- en: TinyPNG
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TinyPNG
- en: Compressnow
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Compressnow
- en: Image Compressor
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Image Compressor
- en: Adobe Photoshop
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adobe Photoshop
- en: Also, the best compression algorithm used to reduce the si[zes of an image i](https://developers.google.com/speed/webp)s
    the WebP image format ([https://developers.google.com/speed/webp](https://developers.google.com/speed/webp)),
    which is developed and maintained by Google.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用于减少图像大小的最佳压缩算法是Google开发的WebP图像格式（[https://developers.google.com/speed/webp](https://developers.google.com/speed/webp)），它由Google开发和维护。
- en: Optimizing CDN images
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优化CDN图像
- en: A CDN is used to optimize images. It provides transformation features for reducing
    image sizes by up to 70% without affecting the UI and pixelating. It’s also advisable
    to use a CDN when your enterprise application deals with extensive media use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: CDN用于优化图像。它提供通过减少图像大小高达70%的转换功能，而不会影响UI和像素化。当您的企业应用程序处理大量媒体使用时，也建议使用CDN。
- en: The most popular CDN tools for image optimization are **Cloudinary** and **ImageKit**.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像优化方面最受欢迎的CDN工具是**Cloudinary**和**ImageKit**。
- en: Media takes a considerable amount of space in any enterprise application and
    therefore can cause lagging and slow performance if not optimized and served appropriately.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体在任何企业应用中都占用相当大的空间，因此如果不进行优化和适当提供，可能会导致延迟和缓慢的性能。
- en: '[Co](https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting)de splitting'
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[Co](https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting)de splitting'
- en: 'MDN explains the following ([https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting](https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting)):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: MDN解释如下（[https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting](https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting)）：
- en: “Code splitting is the splitting of code into various bundles or components
    which can then be loaded on demand or in parallel.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “代码拆分是将代码拆分为各种包或组件的过程，这些包或组件可以按需或并行加载。”
- en: As an application grows in complexity or is maintained, CSS and JavaScripts
    files or bundles grow in byte size, especially as the number and size of included
    third-party libraries increases.”
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序复杂性的增加或维护，CSS和JavaScript文件或包的大小也会增加，特别是随着包含的第三方库的数量和大小增加。”
- en: When creating an enterprise application, there will always be many routes, files,
    and bundles that will increase the byte size of the enterprise application. Code
    splitting is the answer to separating and only loading smaller and on-demand files,
    thereby increasing the load time of your enterprise application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建企业应用时，总会存在许多路由、文件和包，这些都会增加企业应用的字节大小。代码拆分是分离和仅加载较小和按需文件的答案，从而提高您企业应用的加载时间。
- en: 'Let’s our enterprise application has two pages and we implement it with the
    popular `vue-router` library, as we have here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们的企业应用有两个页面，我们使用流行的`vue-router`库来实现，如下所示：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: // routing.js
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: // routing.js
- en: import Dashboard from './Dashboard.vue'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: import Dashboard from './Dashboard.vue'
- en: import Photo from './Photo.vue'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: import Photo from './Photo.vue'
- en: const routes = [
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: const routes = [
- en: '{ path: ''/'', component: Dashboard }'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '{ path: ''/'', component: Dashboard }'
- en: '{ path: ''/photo, component: Photo }'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '{ path: ''/photo'', component: Photo }'
- en: ']'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Due to the coding standard in Vue.js, all the components in our script will
    be downloaded when the user visits any page. This activity causes slow performance
    due to the number of pages, the complexity of each page, and the large bundle
    size.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Vue.js的编码标准，当用户访问任何页面时，我们脚本中的所有组件都将被下载。由于页面的数量、每个页面的复杂性和大型的包大小，这种活动会导致性能缓慢。
- en: To avoid this issue, we can implement a proper route code splitting that will
    separate our large bundle into different route bundles, meaning each page will
    have its small bundle to download when a user visits that page.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这个问题，我们可以实现适当的路由代码拆分，将我们的大型包拆分成不同的路由包，这意味着当用户访问该页面时，每个页面都将有一个小的包进行下载。
- en: 'With the technique of dynamic imports, rather than importing the components
    directly as demonstrated previously, we can pass the dynamic route and lazy-load
    the component, as shown in the following code block:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动态导入技术，而不是像之前演示的那样直接导入组件，我们可以传递动态路由并按需加载组件，如下面的代码块所示：
- en: '[PRE7]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: // routing.js
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: // routing.js
- en: const routes = [
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: const routes = [
- en: '{ path: ''/'', component: () => import(''./Dashboard.vue'') }'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '{ path: ''/'', component: () => import(''./Dashboard.vue'') }'
- en: '{ path: ''/photo, component: () => import(''./Photo.vue'') }'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '{ path: ''/photo'', component: () => import(''./Photo.vue'') }'
- en: ']'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By following this method, you can halve your bundle size. Also, it is important
    to be sure which components can be used with dynamic imports.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循此方法，您可以减半您的包大小。同时，确定哪些组件可以使用动态导入也非常重要。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we dove deeper into scaling an extensive Vue application. We
    discussed how to scale performance with asynchronous lazy loading, image compression,
    code splitting, tree shaking, and many other tricks to better increase the performance
    of your Vue.js 3 enterprise-ready application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了扩展Vue应用的缩放。我们讨论了如何通过异步懒加载、图像压缩、代码拆分、摇树优化以及许多其他技巧来提高Vue.js 3企业级应用的性能。
- en: We also covered in detail why performance optimization is needed and what your
    enterprise application can lose if performance is not deliberately built into
    the application. We also discussed the reasons for poor performance in an enterprise
    application and how to fix them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还详细讨论了为什么需要性能优化，以及如果性能没有故意构建到应用程序中，您的企业应用可能会失去什么。我们还讨论了企业应用性能不佳的原因以及如何修复它们。
- en: Next, we discussed how to check our Vue.js application’s bundle size, demonstrating
    this with simple instructions on how to generate package reports using Webpack
    and commands. We also discussed how to understand the report and discover how
    to improve an application from the generated report to further boost our enterprise
    application’s performance.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了如何检查我们的 Vue.js 应用程序的包大小，通过简单的说明如何使用 Webpack 和命令生成包报告来演示这一点。我们还讨论了如何理解报告，并从生成的报告中发现如何改进应用程序，以进一步提升我们的企业应用程序的性能。
- en: In the next chapter, we will learn how to handle a sizable enterprise-ready
    project, from managing larger file structures to using a micro frontend architecture.
    You will also learn how to handle the internationalization and localization of
    your Vue.js 3 project.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何处理一个大型企业级项目，从管理更大的文件结构到使用微前端架构。你还将了解如何处理你的 Vue.js 3 项目的国际化与本地化。
