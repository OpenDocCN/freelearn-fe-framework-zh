["```js\nexport const AppointmentsDayViewLoader = ({ today }) => {\n  const [appointments, setAppointments] = useState([]);\n  useEffect(() => {\n    // fetch data from the server\n    const result = await global.fetch(...);\n    // populate the appointments array:\n    setAppointments(await result.json());\n  }, [today]);\n  return (\n    <AppointmentsDayView appointments={appointments} />\n  );\n};\n```", "```js\njest.mock(\"../src/AppointmentsDayView\", () => ({\n  AppointmentsDayView: jest.fn(() => (\n    <div id=\"AppointmentsDayView\" />\n  )),\n}));\n```", "```js\nimport { MyComponent } from \"some/file/path\";\njest.mock(\"/some/file/path\", ...);\ndescribe(\"something that uses MyComponent\", () => {\n});\n```", "```js\n    import React from \"react\";\n    import {\n      initializeReactContainer,\n      render,\n      element,\n    } from \"./reactTestExtensions\";\n    import {\n      AppointmentsDayViewLoader\n    } from \"../src/AppointmentsDayViewLoader\";\n    import {\n      AppointmentsDayView\n    } from \"../src/AppointmentsDayView\";\n    ```", "```js\n    jest.mock(\"../src/AppointmentsDayView\", () => ({\n      AppointmentsDayView: jest.fn(() => (\n        <div id=\"AppointmentsDayView\" />\n      )),\n    }));\n    ```", "```js\n    describe(\"AppointmentsDayViewLoader\", () => {\n      beforeEach(() => {\n        initializeReactContainer();\n      });\n      it(\"renders an AppointmentsDayView\", () => {\n        await render(<AppointmentsDayViewLoader />);\n        expect(\n          element(\"#AppointmentsDayView\")\n        ).not.toBeNull();\n      });\n    });\n    ```", "```js\n    import React from \"react\";\n    import {\n      AppointmentsDayView\n    } from \"./AppointmentsDayView\";\n    export const AppointmentsDayViewLoader = () => (\n      <AppointmentsDayView />\n    );\n    ```", "```js\nit(\"initially passes empty array of appointments to AppointmentsDayView\", () => {\n  await render(<AppointmentsDayViewLoader />);\n  expect(AppointmentsDayView).toBeCalledWith(\n    { appointments: [] },\n    expect.anything()\n  );\n});\n```", "```js\n    export const AppointmentsDayViewLoader = () => (\n      <AppointmentsDayView appointments={[]} />\n    );\n    ```", "```js\nGET /appointments/<from>-<to>\n```", "```js\nexport const AppointmentsDayViewLoader = ({ today }) => {\n  useEffect(() => {\n    // ... code runs here\n  }, [today]);\n\n  // ... render something\n}\n```", "```js\nuseEffect(async () => { ... }, []);\n```", "```js\nuseEffect(() => {\n  const fetchAppointments = async () => {\n    const result = await global.fetch(...);      \n    setAppointments(await result.json());\n  };\n  fetchAppointments();\n}, [today]);\n```", "```js\n    export const renderAndWait = (component) =>\n      act(async () => (\n        ReactDOM.createRoot(container).render(component)\n      )\n    );\n    ```", "```js\n    import {\n      initializeReactContainer,\n      renderAndWait,\n      element,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"renders an AppointmentsDayView\", async () => {\n      await renderAndWait(<AppointmentsDayViewLoader />);\n      expect(\n        element(\"#AppointmentsDayView\")\n      ).not.toBeNull();\n    });\n    ```", "```js\n    it(\"initially passes empty array of appointments to AppointmentsDayView\", async () => {\n      await renderAndWait(<AppointmentsDayViewLoader />);\n      expect(AppointmentsDayView).toBeCalledWith(\n        { appointments: [] },\n        expect.anything()\n      );\n    });\n    ```", "```js\n    import { todayAt } from \"./builders/time\";\n    import { fetchResponseOk } from \"./builders/fetch\";\n    ```", "```js\n    describe(\"AppointmentsDayViewLoader\", () => {\n      const appointments = [\n        { startsAt: todayAt(9) },\n        { startsAt: todayAt(10) },\n      ];\n      ...\n    });\n    ```", "```js\n    beforeEach(() => {\n      initializeReactContainer();\n      jest\n        .spyOn(global, \"fetch\")\n        .mockResolvedValue(fetchResponseOk(appointments));\n    });\n    ```", "```js\n    it(\"fetches data when component is mounted\", async () => {\n      const from = todayAt(0);\n      const to = todayAt(23, 59, 59, 999);\n      await renderAndWait(\n        <AppointmentsDayViewLoader today={today} />\n      );\n      expect(global.fetch).toBeCalledWith(\n        `/appointments/${from}-${to}`,\n        {\n          method: \"GET\",\n          credentials: \"same-origin\",\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n    });\n    ```", "```js\n    import React, { useEffect } from \"react\";\n    ```", "```js\n    export const AppointmentsDayViewLoader = (\n      { today }\n    ) => {\n      useEffect(() => {\n        const from = today.setHours(0, 0, 0, 0);\n        const to = today.setHours(23, 59, 59, 999);\n        const fetchAppointments = async () => {\n          await global.fetch(\n            `/appointments/${from}-${to}`,\n            {\n              method: \"GET\",\n              credentials: \"same-origin\",\n              headers: {\n    \"Content-Type\": \"application/json\" \n              },\n            }\n          );\n        };\n        fetchAppointments();\n      }, []);\n      return <AppointmentsDayView appointments={[]} />;\n    };\n    ```", "```js\n    AppointmentsDayViewLoader.defaultProps = {\n      today: new Date(),\n    };\n    ```", "```js\n    it(\"passes fetched appointments to AppointmentsDayView once they have loaded\", async () => {\n      await renderAndWait(<AppointmentsDayViewLoader />);\n\n      expect(\n        AppointmentsDayView\n      ).toHaveBeenLastCalledWith(\n        { appointments },\n        expect.anything()\n      );\n    });\n    ```", "```js\n    import React, { useEffect, useState } from \"react\";\n    ```", "```js\n    export const AppointmentsDayViewLoader = (\n      { today }\n    ) => {\n      const [\n        appointments, setAppointments\n      ] = useState([]);\n      useEffect(() => {\n        ...\n        const fetchAppointments = async () => {\n    const result = await global.fetch(\n            ...\n          );\n          setAppointments(await result.json());\n        };\n        fetchAppointments();\n      }, []);\n      return (\n        <AppointmentsDayView\n          appointments={appointments}\n        />\n      );\n    };\n    ```", "```js\n    export let container;\n    let reactRoot;\n    export const initializeReactContainer = () => {\n       container = document.createElement(\"div\");\n       document.body.replaceChildren(container);\n      reactRoot = ReactDOM.createRoot(container);\n    };\n    ```", "```js\n    export const render = (component) =>\n      act(() => reactRoot.render(component));\n    export const renderAndWait = (component) =>\n      act(async () => reactRoot.render(component));\n    ```", "```js\n    import {\n      today,\n      todayAt,\n      tomorrow,\n      tomorrowAt\n    } from \"./builders/time\";\n    ```", "```js\n    it(\"re-requests appointment when today prop changes\", async () => {\n      const from = tomorrowAt(0);\n      const to = tomorrowAt(23, 59, 59, 999);\n      await renderAndWait(\n        <AppointmentsDayViewLoader today={today} />\n      );\n      await renderAndWait(\n        <AppointmentsDayViewLoader today={tomorrow} />\n      );\n      expect(global.fetch).toHaveBeenLastCalledWith(\n        `/appointments/${from}-${to}`,\n        expect.anything()\n      );\n    });\n    ```", "```js\n        AppointmentsDayViewLoader ' re-requests appointment when today prop changes\n        expect(\n          jest.fn()\n        ).toHaveBeenLastCalledWith(...expected)\n        Expected: \"/appointments/1643932800000-1644019199999\", Anything\n        Received: \"/appointments/1643846400000-1643932799999\", {\"credentials\": \"same-origin\", \"headers\": {\"Content-Type\": \"application/json\"}, \"method\": \"GET\"}\n    ```", "```js\n    useEffect(() => {\n      ...\n    }, [today]);\n    ```", "```js\nexpect(AppointmentsDayView).toBeCalledWith(\n  { appointments },\n  expect.anything()\n);\n```", "```js\nconst mockedCall =\n  mockedComponent.mock.calls[\n    mockedComponent.mock.calls.length – 1\n  ];\n```", "```js\nconst mockedCall = mockedComponent.mock.calls[0];\n```", "```js\n    import React from \"react\";\n    import {\n      toBeRenderedWithProps,\n    } from \"./toBeRenderedWithProps\";\n    import {\n      initializeReactContainer,\n      render,\n    } from \"../reactTestExtensions\";\n    ```", "```js\n    describe(\"toBeRenderedWithProps\", () => {\n      let Component;\n      beforeEach(() => {\n        initializeReactContainer();\n        Component = jest.fn(() => <div />);\n      });\n    });\n    ```", "```js\n    it(\"returns pass is true when mock has been rendered\", () => {\n      render(<Component />);\n      const result = toBeRenderedWithProps(Component, {});\n      expect(result.pass).toBe(true);\n    });\n    ```", "```js\n    export const toBeRenderedWithProps = (\n      mockedComponent,\n      expectedProps\n    ) => ({  pass: true });\n    ```", "```js\n    it(\"returns pass is false when the mock has not been rendered\", () => {\n      const result = toBeRenderedWithProps(Component, {});\n      expect(result.pass).toBe(false);\n    });\n    ```", "```js\n    export const toBeRenderedWithProps = (\n      mockedComponent,\n      expectedProps\n    ) => ({\n      pass: mockedComponent.mock.calls.length > 0,\n    });\n    ```", "```js\n    it(\"returns pass is false when the properties do not match\", () => {\n      render(<Component a=\"b\" />);\n      const result = toBeRenderedWithProps(\n        Component, {\n          c: \"d\",\n        }\n      );\n      expect(result.pass).toBe(false);\n    });\n    ```", "```js\n    import { equals } from \"@jest/expect-utils\";\n    export const toBeRenderedWithProps = (\n      mockedComponent,\n      expectedProps\n    ) => {\n      const mockedCall = mockedComponent.mock.calls[0];\n      const actualProps = mockedCall ?\n        mockedCall[0] : null;\n      const pass = equals(actualProps, expectedProps);\n      return { pass };\n    };\n    ```", "```js\n    it(\"returns pass is true when the properties of the last render match\", () => {\n      render(<Component a=\"b\" />);\n      render(<Component c=\"d\" />);\n      const result = toBeRenderedWithProps(\n        Component,\n        { c: \"d\" }\n      );\n      expect(result.pass).toBe(true);\n    });\n    ```", "```js\n    export const toBeRenderedWithProps = (\n      mockedComponent,\n      expectedProps\n    ) => {\n      const mockedCall =\n        mockedComponent.mock.calls[\n          mockedComponent.mock.calls.length – 1\n        ];\n      ...\n    };\n    ```", "```js\n    import {\n      toBeRenderedWithProps,\n    } from \"./matchers/toBeRenderedWithProps\";\n    expect.extend({\n      ...,\n      toBeRenderedWithProps,\n    });\n    ```", "```js\n    it(\"passes fetched appointments to AppointmentsDayView once they have loaded\", async () => {\n      await renderAndWait(<AppointmentsDayViewLoader />);\n      expect(AppointmentsDayView).toBeRenderedWithProps({\n        appointments,\n      });\n    });\n    ```", "```js\njest.mock(\"../src/AppointmentsDayView\", () => ({\n  AppointmentsDayView: () => (\n    <div id=\"AppointmentsDayView\" />\n  ),\n}));\n```", "```js\njest.mock(\"../src/AppointmentsDayView\", () => ({\n  AppointmentsDayView: jest.fn(({ children }) => (\n    <div id=\"AppointmentsDayView\">{children}</div>\n  )),\n}));\n```", "```js\njest.mock(\"../src/AppointmentsDayView\", () => ({\n  AppointmentsDayView: jest.fn(({ key }) => (\n    <div id={`AppointmentsDayView${key}`} />\n  )),\n}));\n```"]