["```js\nInvoice\n  details\n  total\n  date\n  validate()\n  print()\n  log()\n  saveToDatabase()\n```", "```js\nInvoice\n  details\n  total\n  date\n  validate()\n\nPrinter\n  print(document)\n\nLogger\n  log()\n\nInvoiceRepository\n  saveToDatabase(invoice)\n```", "```js\n// cohesion-and-coupling/invoice-system.java\n\nclass Printer {\n  print(Invoice invoice) {\n    String total =\"\";\n    total += invoice.getTitle();\n    total += invoice.getDetails();\n    total += invoice.getDate();\n    //print 'total'\n  }\n}\n\nclass Invoice {\n  String title;\n    String details;\n    int total;\n    Date date;\n    public String getTitle() { return this.title; }\n    public String getDetails() { return this.details; }\n    public String getDate() { return this.date; }\n}\n\npublic class Program {\n  private Printer printer = new Printer();\n  public void run(ArrayList list) {\n    for(int i=0; i< list.length; i++) {\n      Object item = list.getItem(i);\n      if(item instanceof Invoice) {\n        Invoice invoice = (Invoice) item;\n        printer.print(invoice);\n      }\n    }\n  }\n\n  public static void main(String [] args) {\n    ArrayList list = new ArrayList();\n    list.add(new Invoice());\n    Program program = new Program();\n    program.run( list );\n  }\n}\n```", "```js\n// cohesion-and-coupling/invoice-systemII.java\n\nclass Email {\n  String from;\n  String to;\n  String subject;\n  String body;\n  String getSubject() { return this.subject; }\n  String getFrom() { return this.from; }\n  String getTo() { return this.to; }\n  String getBody() { return this.body; }\n}\n\nclass Invoice {\n  String title;\n  String details;\n  int total;\n  Date date;\n  String getTitle(){ return this.title; }\n  String getDetails() { return this.details; }\n  Date getDate() { return this.date; }\n}\n\nclass Printer {\n  print(Invoice invoice) {\n    String total =\"\";\n    total += invoice.getTitle();\n    total += invoice.getDetails();\n    total += invoice.getDate();\n    //print 'total'\n  }\n\n  print(Email email) {\n    String total =\"\";\n    total += email.getSubject();\n    total += email.getFrom();\n    total += email.getTo();\n    total += email.getBody();\n  }\n}\n\nclass Program {\n  private Printer printer = new Printer();\n  run(ArrayList list) {\n    for(int i=0; i< list.length; i++) {\n      Object item = list.getItem(i);\n      if(item instanceof Invoice) {\n        Invoice invoice = (Invoice) item;\n        printer.print( invoice );\n      } else if( item instanceof Email ) {\n        Email email = (Email) item;\n        printer.print( email );\n      }\n    }\n  }\n\n  public static void main(String [] args) {\n    ArrayList list = new ArrayList();\n    list.add( new Invoice() );\n    list.add( new Email() );\n    Program program = new Program();\n    program.run( list );\n  }\n}\n```", "```js\n// cohesion-and-coupling/invoice-systemIII.java\n\nclass Email implements IPrintable {\n  String from;\n  String to;\n  String subject;\n  String body;\n  String getSubject() { return this.subject; }\n  String getFrom() { return this.from; }\n  String getTo() { return this.to; }\n  String getBody() { return this.body; }\n  public String getContent() {\n    String total = \"\";\n    total += email.getSubject();\n    total += email.getFrom();\n    total += email.getFrom();\n    total += email.getBody();\n    return total;\n  }\n}\n\nclass Invoice implements IPrintable {\n  String title;\n  String details;\n  int total;\n  Date date;\n  String getTitle() { return this.title; }\n  String getDetails() { return this.details; }\n  String getDate() { return this.date; }\n  public String getContent() {\n    String total = \"\";\n    total += invoice.getTitle();\n    total += invoice.getDetails();\n    total += invoice.getDate();\n    return total;\n  }\n}\n\ninterface IPrintable {\n  String getContent();\n}\n\ninterface IPrinter {\n  print(IPrintable printable);\n}\n\nclass Printer implements IPrinter {\n  print( IPrintable printable ) {\n    String content = printable.getContent();\n    // print content\n  }\n}\n\nclass Program {\n  private IPrinter printer;\n  public Program(IPrinter printer) {\n    this.printer = printer;\n  }\n\n  run(ArrayList<IPrintable> list) {\n    for(int i=0; i< list.length; i++) {\n      IPrintable item = list.getItem(i);\n      printer.print(item);\n    }\n  }\n\n  public static void main(String [] args) {\n    ArrayList<IPrintable> list = new ArrayList<IPrintable>();\n    Printer printer = new Printer();\n    list.add(new Invoice());\n    list.add(new Email());\n    Program program = new Program(printer);\n  }\n}\n```", "```js\n// invoice-systemIV.java\n\nclass Document implements IPrintable {\n  String title;\n  String body; \n\n  String getContent() {\n    return this.title + this.body;\n  }\n}\n\nclass Note implements IPrintable {\n  String message;\n\n  String getContent() {\n    return this.message;\n  }\n}\n\n// everything else stays the same\n\n// adding the new types to the list\nclass Program {\n  public static void main(String[] args) {\n    list.add(new Note());\n    list.add(new Document());\n  }\n}\n```", "```js\n// cohesion-and-coupling/invoice-systemV.java\n\nclass FakePrinter implements IPrinter {\n  print(IPrintable printable) { System.out.println(\"printing\"); }\n}\n\nclass Program {\n  FakePrinter fakePrinter;\n  Program(FakePrinter fakePrinter) {\n    this.fakePrinter = fakePrinter;\n  }\n\n  public static void main(String[] args) {\n    ArrayList<IPrintable> list = new ArrayList<IPrintable>();\n    Printer printer = new FakePrinter();\n    list.add(new Invoice());\n    list.add(new Email());\n    Program program = new Program(printer);\n  }\n}\n```", "```js\n// mvc/MvcExample/src/app/product.model.ts\n\nexport class Product {\n  constructor(\n    private id: number,\n    private title: string,\n    private description: string,\n    private created: Date\n  ) {}\n\n  method() {}\n\n  anotherMethod() {}\n}\n```", "```js\n// example of what routing might look like\n\nexport const appRoutes: Routes = [\n  { \n    path: '', \n    component: HomeComponent\n  },\n  {\n    path: 'payments',\n    component: ProductsComponent,\n    data: { title: 'Products' }\n  }\n]\n```", "```js\n// an example component\n\n@Component({\n  selector: 'example-component'\n})\nexport class ExampleComponent {}\n```", "```js\n// an example container component\n@Component({\n  selector: `\n  {{ title }}\n  <example-component>\n  `\n})\nexport class ContainerComponent {\n  title =\"container component\";\n}\n```", "```js\nAppComponent\n  TodoList\n    TodoItem\n    TodoItem\n    TodoItem\n    ...\n```", "```js\n// mvc/MvcExample/src/app/app.component.ts\n\nimport { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n  <todo-list></todo-list>\n`,\n  styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent {\n  title = \"app\";\n}\n\n```", "```js\n// mvc/MvcExample/src/app/todo-list.component.ts\n\nimport { Component } from \"@angular/core\";\n\n@Component({\nselector: \"todo-list\",\ntemplate: `\n  <h1>{{title}}</h1> <custom></custom>\n  <div *ngFor=\"let todo of todos\">\n    <todo-item [todo]=\"todo\" ></todo-item>\n  </div>\n` . // the view\n})\nexport class TodoListComponent { // the controller class\n  title: string;\n  todos = [{\n    title: \"todo1\"\n  },{\n    title: \"todo1\"\n  }]\n}\n```", "```js\n<div *ngFor=\"let todo of todos\">\n    <todo-item [todo]=\"todo\" ></todo-item>\n</div>\n```", "```js\n// mvc/MvcExample/src/app/todo-item.component.ts\n\nimport { Component, Input } from \"@angular/core\";\n@Component({\n  selector: \"todo-item\",\n  template: `<h1>{{todo.title}}</h1>` \n})\nexport class TodoItemComponent {\n  @Input() todo;\n}\n```", "```js\n// an old facade file, index.ts\n\nimport { MyComponent } from 'my.component';\nimport { MyService } from 'my.service';\n\nexport MyComponent;\nexport MyService;\n```", "```js\n/my\n  MyComponent.ts\n  MyService.ts\n  MyOtherService.ts\n  index.ts\n```", "```js\n// consumer.ts\n\nimport * as my from './my';\nlet component = new my.MyComponent();\nlet service = new MyService();\n```", "```js\n// index.ts\nimport { Service } from '../../../path-to-service';\nimport { AnotherService } from '../../path-to-other-service';\nexport Service;\nexport AnotherService;\n\n// consumer.ts\n\n// the long and tedious way\nimport { Service } from '../../../path-to-service';\nimport { AnotherService } from '../../path-to-other-service';\n\n// the easier way using a barrel\nimport * as barrel from './index';\nlet service = new barrel.Service();\nlet anotherService = new barrel.AnotherService();\n\n```", "```js\n// mvc/MvcExample/src/app/my/my.module.ts\n\nimport { NgModule } from \"@angular/core\";\nimport { MyComponent } from \"./my.component\";\nimport { MyPipe } from \"./my.pipe\";\n\n@NgModule({\n  imports: [],\n  exports: [MyComponent],\n  declarations: [MyComponent, MyPipe],\n  providers: []\n})\nexport class MyModule {}\n```", "```js\nexports: [MyComponent]\n```", "```js\nimport { SomeConstruct } from './module';\n```", "```js\nexport let SomeConstruct = 5;\n```", "```js\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: []\n})\nexport class FeatureModule {}\n```", "```js\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'example'\n})\nexport class ExampleComponent {}\n```", "```js\nexport class Math {\n  add() {}\n  subtract() {}\n}\n\nexport const PI = 3.14 \n```", "```js\nclass Math {\n  add() {}\n  subtract() {}\n}\n\nconst PI = 3.14 \n\nexport {\n  Math, PI\n}\n```", "```js\nimport { Math, PI } from './module';\n```", "```js\nexport default class Player {\n  attack() {}\n  move() {}\n}\n\nexport const PI = 3.13;\n```", "```js\nimport Player from './module';\nimport { PI } from './module'\n```", "```js\nimport { productService } from './module1/service'\nimport { productService } from './module2/service'; // name collision\n```", "```js\nimport { productService as m1_productService }\nimport { productService as m2_productService }\n```", "```js\nexport Service {\n  constructor(){}\n  getData() {}\n}\n```", "```js\nimport { Service } from './service'\nlet service = new Service();\nservice.getData();\n```", "```js\nclass Service {\n  constructor() {}\n  getData() {}\n}\nconst service = new Service();\nexport default service;\n```", "```js\nexport class Service {\n  constructor(\n    Logger logger: Logger, \n    repository:Repository\n  ) {}\n}\n```", "```js\nimport { Service } from './service'\nimport logger from './logger';\nimport { Repository } from './repository';\n\n// create the service\nlet service = new Service( logger, new Repository() )\n```", "```js\nimport { Service } from './service'\nimport logger from './logger';\nimport { Repository } from './repository';\n\nclass FileLogger implements Logger {\n  log(message: string) {\n    // write to a file\n  }\n}\n\nclass ConsoleLogger implements Logger {\n  log(message: string) {\n    console.log('message', message);\n  }\n}\n\n// create the service\nlet service = new Service( new FileLogger(), new Repository() )\n```", "```js\nexport class Logger { }\n\nexport class Service {\n  constructor(logger: Logger) { }\n}\n\n```", "```js\nimport { Service } from './service';\n\nexport class ExampleComponent {\n  constructor(srv: Service) { }\n}\n\n```", "```js\nexport class SimpleService {}\n```", "```js\n@Component({\n  selector: 'component'\n})\nexport class ExampleComponent {\n  constructor(srv: Service) {}\n}\n```", "```js\nimport { Service } from \"./Service\";\n\n@NgModule({\n  providers: [Service]\n})\nexport class FeatureModule{}\n```", "```js\n@Component({\n  providers: [Service]\n})\nexport ExampleComponent {}\n```", "```js\nAppComponent // Service added here, Can resolve Service\n  TodosComponent // Can resolve Service\n    TodoComponent // Can resolve Service\n```", "```js\n// example code on how DI for works for Component providers, there is no file for it\n// app.component.ts\n@Component({\n  providers: [Service] // < - provided,\n  template : `<todos></todos>`\n})\nexport class AppComponent {}\n\n// todos.component.ts\n@Component({\n  template : `<todo></todo>`,\n  selector: 'todos'\n})\nexport class TodosComponent {\n  // this works\n  constructor(private service: Service) {}\n}\n\n// todo.component.ts\n@Component({\n  selector: 'todo',\n  template: `todo component ` \n})\nexport class TodoComponent {\n  // this works\n  constructor(private service: Service) {}\n}\n```", "```js\nAppComponent // Does not know about Service\n  TodosComponent // Service added here, Can resolve Service\n    TodoComponent // Can resolve Service\n```", "```js\n// this is example code on how it works, there is no file for it\n// app.component.ts\n@Component({\n  selector: 'app',\n  template: `<todos></todos>`\n})\nexport class AppComponent {\n  // does NOT work, only TodosComponent and below knows about Service\n  constructor(private service: Service) {}\n}\n\n// todos.component.ts\n@Component({\n  selector: 'todos',\n  template: `<todo></todo>`\n  providers: [Service]\n})\nexport class TodosComponent {\n  // this works\n  constructor(private service: Service) {}\n}\n\n// todo.component.ts\n@Component({\n  selector: 'todo',\n  template: `a todo`\n})\nexport class TodoComponent {\n  // this works\n  constructor(private service: Service) {}\n}\n```", "```js\nAppModule\nSharedModule\n```", "```js\n//app.module.ts\n\n@NgModule({\n  imports: [ SharedModule ],\n  providers: [ AppService ]\n})\nexport class AppModule{}\n```", "```js\n//shared.module.ts\n\n@NgModule({\n  providers : [ SharedService ]\n})\nexport class SharedModule {} \n```", "```js\n@Component({\n  providers: [\n    { provide: Service, useClass : FakeService }\n  ]\n})\n```", "```js\nexport class Service {\n  no: number = 0;\n  constructor() {}\n}\n```", "```js\n@Component({\n  providers: [{ provide : Service, useClass: FakeService }]\n})\n```", "```js\nexport class FakeService {\n  set no(value) {\n    // do nothing\n  }\n\n  get no() {\n    return 99;\n  }\n}\n```", "```js\nlet factory = () => {\n  if(condition) {\n    return new FakeService();\n  } else {\n    return new Service();\n  }\n}\n\n@Component({\n providers : [\n   { provide : Service, useFactory : factory }\n ]\n})\n```", "```js\nlet factory = (auth:AuthService, logger: Logger) => {\n  if(condition) {\n    return new FakeService();\n  } else {\n    return new Service();\n  }  \n}\n\n@Component({\n  providers : [\n   { provide : Service, useFactory : factory, \n deps: [AuthService, Logger] }\n  ]\n})\n```", "```js\nproviders: [ { provide: 'a-string-token', useValue: 12345678 } ]\n```", "```js\nconstructor(a-string-token) . // will not compile\n```", "```js\nconstructor( @Inject('a-string-token') token) // token will have value 12345678\n```", "```js\nimport { Injectable } from '@angular/core';\n\n@Injectable() \nexport class Service {\n  constructor(logger:Logger) {}\n}\n```", "```js\nproviders: [Service, Logger]\n```", "```js\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [HttpClientModule]\n})\n```", "```js\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'consumer',\n  template: ``\n})\nexport class ConsumerComponent {\n  constructor(private http:HttpClient) {}\n}\n```", "```js\n// converting an Observable to a Promise using toPromise()\nhttp\n  .get('url')\n  .toPromise()\n  .then(x => x.data)\n  .then(data => console.log('our data'))\n  .catch(error => console.error('some error happened', error));\n```", "```js\n// calling http.get() and gets an Observable back\nhttp\n  .get('url')\n  .map( x => x.data ) \n  .subscribe( data => console.log('our data', data))\n  .catch( error => console.error('some error happened', error))\n```", "```js\nhttp\n  .get('url')\n  .toPromise()\n  .then(x => x.data)\n  .then(data => console.log('our data'))\n  .catch(error => console.error('some error happened', error));\n```", "```js\n.then(x => x.data)\n```", "```js\n.then(data => console.log('our data'))\n```", "```js\nhttp\n  .get('url')\n  .map( x => x.data ) \n  .subscribe( data => console.log('our data', data) )\n  .catch( error => console.error('some error happened', error) )\n```", "```js\n.map( x => x.data )\n```", "```js\n.subscribe( data => console.log('our data', data) )\n```"]