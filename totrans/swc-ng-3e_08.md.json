["```js\n<form class=\"form col-md-4\" [formGroup]=\"addDevForm\" [hidden]=\"submitted\">\n  <!-- TODO --> \n</form> \n```", "```js\n<form class=\"form col-md-4\" [formGroup]=\"importDevForm\" [hidden]=\"submitted\">\n<!-- TODO --> \n</form> \n```", "```js\nimport {FormGroup} from '@angular/forms';\n\n@Component(...) \nexport class AddDeveloper { \n  importDevForm: FormGroup; \n  addDevForm: FormGroup; \n  ... \n  constructor(private developers: DeveloperCollection, \n    fb: FormBuilder) {...} \n  addDeveloper() {...} \n} \n```", "```js\n... \nconstructor(private developers: DeveloperCollection, \n  fb: FormBuilder) {\n  this.importDevForm = fb.group({\n    githubHandle: ['', Validators.required],\n    fetchFromGitHub: [false]\n  });\n  this.addDevForm = fb.group({\n    realName: ['', Validators.required],\n    email: ['', validateEmail],\n    technology: ['', Validators.required],\n    popular: [false]\n  });\n} \n... \n```", "```js\nfunction validateEmail(emailControl) { \n  if (!emailControl.value || \n     /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/.test(emailControl.value)) { \n    return null; \n  } else { \n    return { 'invalidEmail': true }; \n  } \n} \n```", "```js\nthis.addDevForm = fb.group({ \n  ... \n  email: ['', Validators.compose([ \n      Validators.required, \n      validateEmail\n    ])\n  ], \n  ... \n}); \n```", "```js\n<form class=\"form col-md-4\" [formGroup]=\"importDevForm\" [hidden]=\"submitted\">\n  <div class=\"form-group\">\n  <label class=\"control-label\" for=\"githubHandleInput\">GitHub handle</label>\n  <div>\n    <input id=\"githubHandleInput\" class=\"form-control\"\n           type=\"text\" formControlName=\"githubHandle\">\n    <control-errors control=\"githubHandle\"\n      [errors]=\"{\n        'required': 'The GitHub handle is required'\n      }\"></control-errors>\n   </div>\n  </div>\n  <div class=\"form-group\">\n    <label class=\"control-label\" for=\"fetchFromGitHubCheckbox\">\n      Fetch from GitHub\n    </label>\n    <input class=\"checkbox-inline\" id=\"fetchFromGitHubCheckbox\"\n      type=\"checkbox\" formControlName=\"fetchFromGitHub\">\n  </div>\n</form>\n```", "```js\n...\nexport class AddDeveloper {\n  //...\n  ngOnInit() {\n    this.toggleControls(this.importDevForm.controls['fetchFromGitHub'].value);\n    this.subscription = this.importDevForm.controls['fetchFromGitHub']\n      .valueChanges.subscribe(this.toggleControls.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  private toggleControls(importEnabled: boolean) {\n    const addDevControls = this.addDevForm.controls;\n    if (importEnabled) {\n      this.importDevForm.controls['githubHandle'].enable();\n      Object.keys(addDevControls).forEach((c: string) =>\n        addDevControls[c].disable());\n    } else {\n      this.importDevForm.controls['githubHandle'].disable();\n      Object.keys(addDevControls).forEach((c: string) =>\n        addDevControls[c].enable());\n    }\n  }\n}\n...\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface GitHubUser {\n  id: number;\n  login: string;\n  email: string;\n  followers: number;\n  name: string;\n  avatar_url: string;\n}\n\n@Injectable()\nexport class GitHubGateway {\n  constructor(private http: HttpClient) { }\n  getUser(username: string): Observable<GitHubUser> {\n    return this.http.get<GitHubUser>(`https://api.github.com/users/${username}`);\n  }\n}\n```", "```js\nimport {HttpClientModule} from '@angular/common/http';\n...\n\n@NgModule({\n  imports: [..., HttpClientModule],\n  declarations: [...],\n  providers: [...],\n  bootstrap: [...]\n})\nclass AppModule {}\n...\n```", "```js\nimport {GitHubGateway} from './github_gateway'; \n```", "```js\n@Component({ \n  ... \n  providers: [GitHubGateway] \n}) \nclass AddDeveloper {...} \n```", "```js\nconstructor(private githubAPI: GitHubGateway, \n  private developers: DeveloperCollection, \n  fb: FormBuilder) { \n  //... \n} \n```", "```js\nif (this.importDevForm.controls['fetchFromGitHub'].value) { \n  // Import developer \n} else { \n  // Add new developer \n} \n```", "```js\nthis.githubAPI.getUser(model.githubHandle) \n```", "```js\nthis.githubAPI.getUser(model.githubHandle) \n  .subscribe((res: GitHubUser) => { \n    // \"res\" contains the response of the GitHub's API.\n  }); \n```", "```js\nlet dev = new Developer(); \ndev.githubHandle = res.login; \ndev.email = res.email; \ndev.popular = res.followers >= 1000; \ndev.realName = res.name; \ndev.id = res.id; \ndev.avatarUrl = res.avatar_url; \nthis.developers.addDeveloper(dev); \nthis.successMessage = `Developer ${dev.githubHandle} successfully imported from GitHub`; \n```", "```js\nimport {DeveloperDetails} from './developer_details'; \n```", "```js\nconst routingModule = RouterModule.forRoot([\n  ...\n  {\n    component: DeveloperDetails,\n    path: 'dev-details/:id',\n    children: devDetailsRoutes\n  }\n]);\n```", "```js\n<td> \n  <a [routerLink]=\"['/dev-details', dev.id, 'dev-basic-info']\"> \n    {{dev.realName}} \n  </a> \n</td> \n```", "```js\nimport {Component} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {Developer} from './developer';\nimport {DeveloperCollection} from './developer_collection';\nimport {DeveloperBasicInfo} from './developer_basic_info';\nimport {DeveloperAdvancedInfo} from './developer_advanced_info';\n\nimport 'rxjs/add/operator/take';\n\n@Component({\n  selector: 'dev-details',\n  template: `...`,\n})\nexport class DeveloperDetails {\n  public dev: Developer;\n\n  constructor(private route: ActivatedRoute,\n    private developers: DeveloperCollection) {}\n\n  ngOnInit() {\n    this.route.params.take(1)\n     .subscribe((params: any) => {\n       this.dev = this.developers.getUserById(parseInt(params['id']));\n    });\n  }\n}\n\nexport const devDetailsRoutes = [...];\n```", "```js\nexport const devDetailsRoutes = [\n  { path: '', redirectTo: 'dev-basic-info', pathMatch: 'full' },\n  { component: DeveloperBasicInfo, path: 'dev-basic-info' },\n  { component: DeveloperAdvancedInfo, path: 'dev-details-advanced' }\n];\n```", "```js\n@Component({\n selector: 'dev-details',\n template: `\n   <section class=\"col-md-4\">\n   <ul class=\"nav nav-tabs\">\n     <li><a [routerLink]=\"['./dev-basic-info']\">Basic profile</a></li>\n     <li><a [routerLink]=\"['./dev-details-advanced']\">Advanced details</a></li>\n   </ul>\n   <router-outlet></router-outlet>\n   </section>\n `\n})\nexport class DeveloperDetails {...}\n```", "```js\nimport {Component, Inject, OnInit, forwardRef, Host} from '@angular/core';\nimport {DeveloperDetails} from './developer_details';\nimport {Developer} from './developer';\n\n@Component({\n  selector: 'dev-details-basic',\n  styles: [`\n    .avatar {\n      border-radius: 150px;\n    }`\n  ],\n  template: `\n    <h2>{{dev.githubHandle | uppercase}}</h2>\n    <img *ngIf=\"dev.avatarUrl == null\" class=\"avatar\"\n     src=\"img/gravatar-60-grey.jpg\" width=\"150\">\n    <img *ngIf=\"dev.avatarUrl != null\" class=\"avatar\" [src]=\"dev.avatarUrl\" width=\"150\">\n `\n})\nexport class DeveloperBasicInfo implements OnInit {\n  dev: Developer;\n\n  constructor(@Inject(forwardRef(() => DeveloperDetails))\n     @Host() private parent: DeveloperDetails) {\n  }\n\n  ngOnInit() {\n    this.dev = this.parent.dev;\n  }\n}\n```", "```js\n... \n<td [ngSwitch]=\"dev.popular\"> \n  <span *ngSwitchCase=\"true\">Yes</span> \n  <span *ngSwitchCase=\"false\">Not yet</span> \n</td> \n... \n```", "```js\n<td>{{dev.popular | boolean: 'Yes': 'No'}}</td> \n```", "```js\n<td>{{dev.popular | boolean: '': ''}}</td> \n```", "```js\nimport {Pipe, PipeTransform} from '@angular/core'; \n```", "```js\nimport {Pipe, PipeTransform} from '@angular/core'; \n\n@Pipe({ name: 'boolean' })\nexport class BooleanPipe implements PipeTransform {\n  transform(flag: boolean, trueValue: any, falseValue: any): string {\n    return flag ? trueValue : falseValue;\n  }\n}\n```", "```js\n@NgModule({\n  ...\n  declarations: [..., BooleanPipe, ...],\n  ...\n})\nclass AppModule {}\n```", "```js\n      {{ currencyValue | currency: 'USD' }} <!-- USD42 --> \n```", "```js\n      {{ dateValue | date: 'shortTime'  }} <!-- 12:00 AM --> \n```", "```js\n      {{ 42.1618 | number: '3.1-2' }} <!-- 042.16 --> \n```", "```js\n      {{ { foo: 42 } | json }} <!-- { \"foo\": 42 } --> \n```", "```js\n      {{ FOO | lowercase }} <!-- foo --> \n```", "```js\n      {{ 'foo' | uppercase }} <!-- FOO --> \n```", "```js\n      {{ 42 | percent: '2.1-2' }}  <!-- 4,200.0% --> \n```", "```js\n      {{ [1, 2, 3] | slice: 1: 2 }} <!-- 2 --> \n```", "```js\n{{ \"http://example.com/user.json\" | fetchJson | json }} \n```", "```js\nimport {Pipe, PipeTransform} from '@angular/core'; \nimport {HttpClient} from '@angular/common/http'; \nimport 'rxjs/add/operator/toPromise'; \n```", "```js\n@Pipe({ \n  name: 'fetchJson', \n  pure: false \n}) \nexport class FetchJsonPipe implements PipeTransform { \n  private data: any; \n  private prevUrl: string = null; \n  constructor(private http: HttpClient) {} \n  transform(url: string): any {...} \n} \n```", "```js\n... \ntransform(url: string): any { \n  if (this.prevUrl !== url) { \n    this.http.get(url).toPromise(Promise) \n      .then(result => this.data = result); \n    this.prevUrl = url; \n  } \n  return this.data || {}; \n} \n... \n```", "```js\n// ch8/statful_pipe/app.ts \n\n@Component({ \n  selector: 'app',\n  template: ` \n    <input type=\"text\" #input> \n    <button (click)=\"setUsername(input.value)\">Get Avatar</button> \n  ` \n}) \nclass App { \n  username: string; \n  setUsername(user: string) { \n    this.username = user; \n  } \n} \n```", "```js\n<img width=\"160\"\n  [src]=\"(('https://api.github.com/users/' + username) | fetchJson).avatar_url\"> \n```", "```js\n// ch8/async-pipe/app.ts \n\n@Component({ \n  selector: 'greeting', \n  template: 'Hello {{ greetingPromise | async }}' \n}) \nclass Greeting { \n  greetingPromise = new Promise<string>(resolve => this.resolve = resolve); \n  resolve: Function;\n\n  constructor() { \n    setTimeout(_ => { \n      this.resolve('Foobar!'); \n    }, 3000); \n  } \n} \n```", "```js\nlet observer = Observable.create(observer => { \n  setInterval(() => { \n    observer.next(new Date().getTime()); \n  }, 1000); \n}); \nobserver.subscribe(date => console.log(date)); \n```", "```js\n// ch8/async_pipe/app.ts\n\n@Component({  selector: 'timer' }) \nclass Timer { \n  username: string; \n  timer: Observable<number>;\n\n  constructor() { \n    let counter = 0; \n    this.timer = new Observable<number>(observer => { \n      setInterval(() => { \n        observer.next(new Date().getTime()); \n      }, 1000); \n    }); \n  } \n} \n```", "```js\n{{ timer | async | date: \"medium\" }} \n```"]