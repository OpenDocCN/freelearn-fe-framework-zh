- en: '*Chapter 9*: Deployment and Hosting'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 9 章*：部署和托管'
- en: In this chapter, we will finally take the project we have been working on and
    deploy it for the world to see! We will delve into the different types of builds
    that Gatsby creates and gain an understanding of how to debug common build errors.
    Following this, we will continue to learn how we can deploy them using a variety
    of different platforms. Additionally, we will discover how we can lock down access
    to our site by serving it up as part of an Express server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将最终将我们一直在工作的项目部署出去，让全世界都能看到！我们将深入了解 Gatsby 创建的不同类型的构建，并了解如何调试常见的构建错误。在此之后，我们将继续学习如何使用各种不同的平台来部署它们。此外，我们还将发现如何通过将其作为
    Express 服务器的一部分来提供服务，以锁定对网站的访问。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding build types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解构建类型
- en: Common build errors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见构建错误
- en: Your pre-deployment checklist
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署前的检查清单
- en: Platforms for deploying hybrid builds
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于部署混合构建的平台
- en: Platforms for deploying static builds
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于部署静态构建的平台
- en: Serving a Gatsby site with reduced user access
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用限制用户访问权限的 Gatsby 网站提供服务
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To navigate this chapter, you will need to have completed [*Chapter 8*](B15983_08_ePub_RK.xhtml#_idTextAnchor116),
    *Web Analytics and Performance Monitoring*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要导航本章内容，您需要完成[*第 8 章*](B15983_08_ePub_RK.xhtml#_idTextAnchor116)，*网络分析和性能监控*。
- en: The code that is presented in this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter09](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter09).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中展示的代码可以在[https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter09](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter09)找到。
- en: Understanding build types
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解构建类型
- en: 'Gatsby version 4 introduced the ability for your website to be built in two
    different ways:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Gatsby 版本 4 引入了两种不同的网站构建方式：
- en: 'As a **static build**: This creates all your pages at build time using Node.js.
    The resulting files are all static HTML, JavaScript, and CSS, which can be served
    entirely statically.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为**静态构建**：这将在构建时使用 Node.js 创建所有页面。生成的文件都是静态的 HTML、JavaScript 和 CSS，可以完全静态地提供服务。
- en: 'As a **hybrid build**: This is a mixture of a static build combined with pages
    that are server-side rendered or have been created via deferred static generation.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为**混合构建**：这是一种静态构建与服务器端渲染的页面或通过延迟静态生成创建的页面的混合。
- en: When running `gatsby build`, Gatsby will inspect your site's content, and if
    possible, create a static build. However, if your site contains pages that are
    server-side rendered or have been created via deferred static generation, it will
    create a build that requires server-side code that runs on a Node.js server or
    via serverless functions. Builds of both types can be tested locally using the
    `gatsby serve` command.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 `gatsby build` 时，Gatsby 将检查您网站的内容，并在可能的情况下创建一个静态构建。然而，如果您的网站包含需要服务器端渲染的页面或通过延迟静态生成创建的页面，它将创建一个需要运行在
    Node.js 服务器或通过无服务器函数上的服务器端代码的构建。这两种类型的构建都可以使用 `gatsby serve` 命令在本地进行测试。
- en: Before deploying your build, it's worth ensuring that everything is working
    as it should locally. Now, let's take a moment to look at common build errors
    and learn how you can avoid them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署构建之前，确保本地一切正常运行是值得的。现在，让我们花点时间看看常见的构建错误，并学习如何避免它们。
- en: Common build errors
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见构建错误
- en: While working on our project, we mostly run the project in development mode.
    This is a great idea to ensure that the site also works with a production build
    by running the `gatsby build` command.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目开发过程中，我们主要以开发模式运行项目。这是一个很好的主意，确保通过运行 `gatsby build` 命令，网站也能与生产构建一起工作。
- en: 'Sometimes, you might find that errors occur during the build process. So, let''s
    talk about the most common issues and how we can fix them:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能会发现构建过程中出现错误。那么，让我们谈谈最常见的问题以及我们如何修复它们：
- en: The most common error that you'll come across is `window` and `document` variables
    found in the browser. Therefore, while your site is being built, it is unable
    to access them. You can get around this issue in a couple of ways. You can perform
    a check to confirm that the variable is defined (for example, `typeof window !==
    undefined && yourFunction()`), or if appropriate, you can move the code into a
    `useEffect` hook.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您最常遇到的问题是浏览器中找到的 `window` 和 `document` 变量。因此，在您的网站构建过程中，它无法访问它们。您可以通过几种方式解决这个问题。您可以执行一个检查以确认变量已定义（例如，`typeof
    window !== undefined && yourFunction()`），或者如果适当，您可以将代码移动到 `useEffect` 钩子中。
- en: Ensure that all your components, your pages, and your `gatsby-browser.js` and
    `gatsby-ssr.js` files do not mix **ES5** and **ES6** syntax, as this can lead
    to builds crashing out.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的所有组件、页面以及 `gatsby-browser.js` 和 `gatsby-ssr.js` 文件不要混合使用 **ES5** 和 **ES6**
    语法，因为这可能导致构建崩溃。
- en: Take special care to ensure that all JavaScript files found within your `pages`
    directory are React components with a default export. Gatsby treats all JavaScript
    files as pages within this folder. If you have components or other utility functions
    within this directory, you will get an error that says **A page component must
    export a React component for it to be valid**. If you see this error, just move
    the files in question outside of the folder.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请特别注意确保您 `pages` 目录中找到的所有 JavaScript 文件都是具有默认导出的 React 组件。Gatsby 将此文件夹中的所有 JavaScript
    文件视为页面。如果您在此目录中有组件或其他实用函数，您将收到一个错误，表明**页面组件必须导出一个 React 组件才能有效**。如果您看到这个错误，只需将相关文件移出文件夹即可。
- en: Now that we can build our site without issues, let's examine a practical checklist
    that we should run through before deploying our site.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在没有问题的前提下构建我们的网站，让我们检查在部署我们的网站之前我们应该运行的实际检查清单。
- en: Your pre-deployment checklist
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署前的检查清单
- en: 'Regardless of how you intend to deploy your site, there are a few steps you
    should follow on your local machine to ensure that your first deployment will
    run smoothly:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您打算如何部署您的网站，您都应该在本地机器上遵循一些步骤，以确保您的首次部署能够顺利运行：
- en: '*Ensure any deployment platform plugins that are required have been installed.*
    A couple of the platforms we will look at have Gatsby plugins specifically for
    use with their product. By adding them to your Gatsby site, the platform is better
    able to understand your project and, as a result, build your site faster.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*确保所需的任何部署平台插件都已安装.* 我们将要查看的一些平台有专门用于其产品的 Gatsby 插件。通过将它们添加到您的 Gatsby 网站中，平台能够更好地理解您的项目，因此可以更快地构建您的网站。'
- en: '*Make sure your Gatsby site builds without an error.* Once the build has passed
    successfully, try running `gatsby serve` to ensure that you can use the site without
    issue.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*确保您的 Gatsby 网站构建时没有错误.* 一旦构建成功通过，尝试运行 `gatsby serve` 以确保您可以在没有问题的前提下使用该网站。'
- en: '*Ensure all your tests are passing.* Make sure that you have run your unit
    tests that we set up in [*Chapter 7*](B15983_07_ePub_RK.xhtml#_idTextAnchor105),
    *Testing and Auditing Your Site*, using `npm run test`, and ensure that they are
    all passing.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*确保所有测试都通过.* 确保您已经使用 `npm run test` 运行了我们设置在 [*第 7 章*](B15983_07_ePub_RK.xhtml#_idTextAnchor105)
    的单元测试，即 *测试和审计您的网站*，并确保它们都通过了。'
- en: '*Take note of your Node.js version.* As of Gatsby version 4, your Node.js version
    should be 14 or higher. You''ll want to ensure that the Node.js version matches
    your deployment platform so that you don''t have compatibility issues. You can
    check this by running `node -v` in your terminal.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*注意您的 Node.js 版本.* 截至 Gatsby 版本 4，您的 Node.js 版本应该是 14 或更高。您需要确保 Node.js 版本与您的部署平台相匹配，以避免兼容性问题。您可以在终端中运行
    `node -v` 来检查这一点。'
- en: Now that we have completed our checklist, let's look at the various platforms
    we can deploy our site with, starting with those that support hybrid sites.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们的检查清单，让我们看看我们可以使用各种平台部署我们的网站，从支持混合网站的平台开始。
- en: Important Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is recommended that you only deploy your site on one deployment platform
    and not multiple platforms. Managing multiple platforms when you can do the job
    with one is far easier for you to maintain. Try experimenting with all the options
    to find the best fit for your project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您只在单一部署平台上部署您的网站，而不是多个平台。当您可以用一个平台完成工作时，管理多个平台对您来说更容易维护。尝试尝试所有选项，以找到最适合您项目的最佳选择。
- en: Platforms for deploying hybrid builds
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署混合构建的平台
- en: As hybrid sites require a Node.js server, we need to use platforms that can
    provision them. Hybrid sites are also very new to the Gatsby ecosystem. At the
    time of writing, the only stable option for hosting a hybrid build is Gatsby Cloud
    Hosting, so let's look at the platform next.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于混合站点需要一个 Node.js 服务器，我们需要使用能够提供这些服务的平台。混合站点在 Gatsby 生态系统中也非常新。在撰写本文时，托管混合构建的唯一稳定选项是
    Gatsby Cloud Hosting，因此让我们看看这个平台。
- en: Deploying to Gatsby Cloud Hosting
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到 Gatsby Cloud Hosting
- en: '**Gatsby Cloud** is a cloud platform that has been specifically designed and
    built for the Gatsby framework by the Gatsby organization. Because they focus
    on this framework, they excel at building technology that makes your builds run
    as fast as possible. This includes the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gatsby Cloud** 是由 Gatsby 组织专门设计和构建的云平台，专为 Gatsby 框架设计。因为他们专注于这个框架，所以他们擅长构建使您的构建尽可能快的科技。这包括以下内容：'
- en: '**Incremental builds**: Gatsby Cloud observes the GraphQL data layer and identifies
    page dependencies. When you push changes to your code, it identifies the data
    layer changes and only rebuilds the pages that are dependent on that data. This
    can drastically speed up repeat builds – Gatsby says that incremental builds can
    be as much as 1,000 times faster than traditional builds.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量构建**：Gatsby Cloud 会观察 GraphQL 数据层并识别页面依赖关系。当您推送代码更改时，它会识别数据层更改，并且只重新构建依赖于该数据的页面。这可以大幅加快重复构建的速度——Gatsby
    表示增量构建可以比传统构建快 1,000 倍。'
- en: '**Intelligent caching**: Special caching headers are sent to the browser when
    requesting your site. These are used to ensure that the browser does not re-download
    any content that has not changed between builds.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能缓存**：当请求您的站点时，浏览器会收到特殊的缓存头。这些用于确保浏览器不会重新下载在构建之间没有更改的内容。'
- en: It should be noted that incremental builds are not available on the free tier
    of the platform. If you want to benefit from them, you'll need to upgrade.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，平台免费层不支持增量构建。如果您想从中受益，您需要升级。
- en: Now that we understand the benefits of using the platform, let's look at how
    we can deploy our site to the platform.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了使用该平台的好处，让我们看看如何将我们的站点部署到该平台。
- en: Quick Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 快速笔记
- en: The process for deploying a hybrid site and a static site is the same on the
    Gatsby platform, so these instructions will work in both cases.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Gatsby 平台上部署混合站点和静态站点的流程是相同的，因此这些说明在两种情况下都适用。
- en: 'Perform the following steps to deploy your site to the Gatsby Cloud platform:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将您的站点部署到 Gatsby Cloud 平台：
- en: 'Install the Gatsby Cloud plugin:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Gatsby Cloud 插件：
- en: '[PRE0]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are installing the Gatsby Cloud plugin. This adds basic security headers
    during the build for the Gatsby Cloud platform.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在安装 Gatsby Cloud 插件。这为 Gatsby Cloud 平台在构建过程中添加了基本的安全头。
- en: 'Include the `gatsby-plugin-gatsby-cloud` plugin in your `gatsby-config.js`
    file:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `gatsby-config.js` 文件中包含 `gatsby-plugin-gatsby-cloud` 插件：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Commit and push all changes to your chosen Git repository.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有更改提交并推送到您选择的 Git 仓库。
- en: Open a browser and navigate to [https://www.gatsbyjs.com/products/cloud](https://www.gatsbyjs.com/products/cloud).
    Click on **Get Started**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并导航到 [https://www.gatsbyjs.com/products/cloud](https://www.gatsbyjs.com/products/cloud)。点击**开始使用**。
- en: Sign up to the platform by populating the form with your name, email, and country
    of residence:![Figure 9.1 – Signing up to Gatsby Cloud
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过填写您的姓名、电子邮件和居住国家/地区来注册平台：![图 9.1 – 注册 Gatsby Cloud
- en: '](img/Figure_9.01_B15983.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.01_B15983.jpg]'
- en: Figure 9.1 – Signing up to Gatsby Cloud
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.1 – 注册 Gatsby Cloud
- en: Select your **VCS** (**version control system**) provider, log in, and approve
    the requested permissions that the Gatsby Cloud platform requires in order to
    integrate with it:![Figure 9.2 – The Gatsby Cloud VCS Provider authorization step
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的**版本控制系统（VCS**）提供商，登录，并批准 Gatsby Cloud 平台为了与其集成所请求的权限：![图 9.2 – Gatsby Cloud
    VCS 提供商授权步骤
- en: '](img/Figure_9.02_B15983.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.02_B15983.jpg]'
- en: Figure 9.2 – The Gatsby Cloud VCS Provider authorization step
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.2 – Gatsby Cloud VCS 提供商授权步骤
- en: Upon being redirected to Gatsby Cloud, you will be asked whether you would like
    to trial a 14-day upgrade. This is up to you.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您被重定向到 Gatsby Cloud 时，您将被询问是否想要试用 14 天升级。这取决于您。
- en: Then, you will be navigated to your dashboard, which will be empty, as we have
    not set up any sites yet. Let's add our site now by clicking on **Add Site**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将被导航到您的仪表板，它将是空的，因为我们还没有设置任何站点。现在让我们通过点击**添加站点**来添加我们的站点。
- en: Select **Import from a Git Repository**, and click on **Next**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **从 Git 仓库导入**，然后点击 **下一步**。
- en: Select your Git provider from the list, followed by the organization and repository
    name. If, for some reason, this list has not been populated, ensure that you have
    given Gatsby the relevant permissions to read from your Git repositories.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择您的 Git 提供商，然后选择组织和存储库名称。如果由于某种原因，此列表尚未填充，请确保您已授予 Gatsby 从您的 Git 存储库读取的相关权限。
- en: Following this, you will need to provide your site details, including a base
    branch and base directory. Your base directory should point to the root of the
    Gatsby project within the repository – this is most likely the root directory
    or `/`. Click on **Next**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要提供网站详情，包括基础分支和基础目录。您的基础目录应指向存储库中 Gatsby 项目的根目录——这很可能是根目录或 `/`。点击 **下一步**。
- en: You will then be presented with optional integrations for your site. These integrations
    can help your CMS communicate with Gatsby Cloud. When you make a change to your
    CMS, you can see a preview of how that content will look via Gatsby Cloud. If
    you desire to do this, you can click on **Connect** next to the CMS platform you
    are using and follow the steps; otherwise, you can click on **Skip this Step**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将看到为您的网站提供的可选集成。这些集成可以帮助您的 CMS 与 Gatsby Cloud 通信。当您对 CMS 进行更改时，您可以通过 Gatsby
    Cloud 预览该内容的外观。如果您想这样做，您可以点击您所使用的 CMS 平台旁边的 **连接** 并按照步骤操作；否则，您可以点击 **跳过此步骤**。
- en: Finally, you will be asked to add any environment variables that your site needs
    to build. Gatsby scans your site's integrations and plugins to help fill in the
    environment variables it thinks you need. Be sure to cross-check this with your
    local `.env` file to ensure you have everything that is required.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您将被要求添加网站构建所需的任何环境变量。Gatsby 会扫描您网站的综合和插件，以帮助填写它认为您需要的环境变量。务必与您本地的 `.env`
    文件进行交叉检查，以确保您拥有所需的一切。
- en: 'Click on **Create site**. This will prompt Gatsby to start building your site
    for the very first time:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建网站**。这将提示 Gatsby 首次开始构建您的网站：
- en: '![Figure 9.3 – The Gatsby Cloud site dashboard'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.3 – Gatsby Cloud 网站仪表板'
- en: '](img/Figure_9.03_B15983.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.03_B15983.jpg)'
- en: Figure 9.3 – The Gatsby Cloud site dashboard
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – Gatsby Cloud 网站仪表板
- en: Once the build has been completed, you can see the deployed site live by following
    the purple hyperlink underneath the **HOSTED ON GATSBY CLOUD** heading in the
    preceding screenshot.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，您可以通过在先前的截图下 **HOSTED ON GATSBY CLOUD** 标题下的紫色超链接中查看已部署的网站。
- en: With every subsequent push to the base branch, Gatsby Cloud will build and deploy
    the change automatically.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每次对基础分支的后续推送，Gatsby Cloud 都会自动构建和部署更改。
- en: Now that we understand how to deploy a hybrid build, let's look at the options
    we have for deploying static builds.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何部署混合构建，让我们看看我们有哪些选项可以用于部署静态构建。
- en: Platforms for deploying static builds
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态构建的部署平台
- en: As static builds are a far more common and predictable format, there are plenty
    more options for where you can host them. We have already looked at Gatsby Cloud,
    which can deploy static sites in the same way as it does hybrid. Now, let's look
    at three other platforms – Netlify, Render, and Firebase.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于静态构建是一个更常见且可预测的格式，因此有更多选项可以托管它们。我们已经了解了 Gatsby Cloud，它可以像混合构建一样部署静态网站。现在，让我们看看另外三个平台——Netlify、Render
    和 Firebase。
- en: Deploying to Netlify
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到 Netlify
- en: 'Netlify is the deployment platform used for over 500,000 websites. It is popular
    among developers for its ease of use. It also provides a free **Secure Sockets
    Layer** (**SSL**). Let''s learn how we can deploy our site with Netlify:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Netlify 是超过 500,000 个网站使用的部署平台。它因其易用性而受到开发者的喜爱。它还提供免费的 **安全套接字层** (**SSL**)。让我们学习如何使用
    Netlify 部署我们的网站：
- en: 'Install the Netlify plugin:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Netlify 插件：
- en: '[PRE2]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we are installing the Netlify plugin, which adds basic security headers
    during the build for the Netlify platform.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们正在安装 Netlify 插件，该插件在构建过程中为 Netlify 平台添加基本的安全头。
- en: 'Include the `gatsby-plugin-netlify` plugin in your `gatsby-config.js` file:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `gatsby-config.js` 文件中包含 `gatsby-plugin-netlify` 插件：
- en: '[PRE3]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Commit and push all changes to a Git repository.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有更改提交并推送到 Git 仓库。
- en: Navigate to [https://app.netlify.com/signup](https://app.netlify.com/signup)
    in your browser.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的浏览器中导航到 [https://app.netlify.com/signup](https://app.netlify.com/signup)。
- en: Sign up by logging in with the third-party login details provided by your VCS,
    and approve the requested permissions that the Netlify platform requires to integrate
    with it.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的VCS提供的第三方登录详情进行注册，并批准Netlify平台为与其集成所需的请求权限。
- en: Click on **Create New Site** from your dashboard:![Figure 9.4 – The Netlify
    new site page
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的仪表板点击**创建新站点**：![Figure 9.4 – The Netlify new site page
- en: '](img/Figure_9.04_B15983.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.04_B15983.jpg](img/Figure_9.04_B15983.jpg)'
- en: Figure 9.4 – The Netlify new site page
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.4 – Netlify新站点页面
- en: Select the Git provider where your repository is stored. Then, pick the repository
    that you would like to build.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择存储您的仓库的Git提供商。然后，选择您想要构建的仓库。
- en: You can leave the **Owner** option in its default setting. However, make sure
    that the deploy branch matches your site's main production branch:![Figure 9.5
    – The Netlify site creation settings
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以保留**所有者**选项的默认设置。但是，请确保部署分支与您的站点的主要生产分支匹配：![Figure 9.5 – The Netlify site
    creation settings
- en: '](img/Figure_9.05_B15983.jpg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.05_B15983.jpg](img/Figure_9.05_B15983.jpg)'
- en: Figure 9.5 – The Netlify site creation settings
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.5 – Netlify站点创建设置
- en: Finally, provide the `npm run build` and `public`, respectively:![Figure 9.6
    – The Netlify site creation build settings
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，分别提供`npm run build`和`public`：![Figure 9.6 – The Netlify site creation build
    settings
- en: '](img/Figure_9.06_B15983.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.06_B15983.jpg](img/Figure_9.06_B15983.jpg)'
- en: Figure 9.6 – The Netlify site creation build settings
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.6 – Netlify站点创建构建设置
- en: Clicking on **Deploy site** will start the build process.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**部署站点**将启动构建过程。
- en: 'While your site is building, take note of the URL, in blue, at the top of the
    dashboard. This is where your site will be deployed:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的站点正在构建时，注意仪表板顶部的蓝色URL。这就是您的站点将被部署的地方：
- en: '![Figure 9.7 – The Netlify site dashboard'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.7 – The Netlify site dashboard'
- en: '](img/Figure_9.07_B15983.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_9.07_B15983.jpg](img/Figure_9.07_B15983.jpg)'
- en: Figure 9.7 – The Netlify site dashboard
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – Netlify站点仪表板
- en: If everything goes well, your site should be deployed after a few minutes. With
    every subsequent push to the base branch, Netlify will build and deploy the change
    automatically.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您的站点应在几分钟内部署。随着对基础分支的每次后续推送，Netlify将自动构建和部署更改。
- en: Now that we understand how to deploy with Netlify, let's look at another alternative
    – Render.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用Netlify进行部署，让我们看看另一个替代方案——Render。
- en: Deploying to Render
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到Render
- en: 'Render is a cloud platform that can build and run Gatsby websites with free
    SSL and a global CDN. Let''s learn how we can deploy our site with Render:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Render是一个云平台，可以免费SSL和全球CDN构建和运行Gatsby网站。让我们学习如何使用Render部署我们的站点：
- en: Commit and push all changes to a Git repository.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有更改提交并推送到Git仓库。
- en: Navigate to [https://dashboard.render.com/register](https://dashboard.render.com/register),
    and then create an account.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://dashboard.render.com/register](https://dashboard.render.com/register)，然后创建一个账户。
- en: From the dashboard, click on **New**:![Figure 9.8 – The Render site dashboard
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从仪表板中，点击**新建**：![Figure 9.8 – The Render site dashboard
- en: '](img/Figure_9.08_B15983.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.08_B15983.jpg](img/Figure_9.08_B15983.jpg)'
- en: Figure 9.8 – The Render site dashboard
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.8 – 渲染站点仪表板
- en: Select **Static Site**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**静态站点**。
- en: At this point, you will be asked to present a repository. However, as you have
    not connected Render to your VCS, the list will be empty. Click on the hyperlink
    for your VCS and proceed to connect Render to that system by following the UI
    journey from that third party. In the case of GitHub, it will look something like
    this:![Figure 9.9 – GitHub's third-party installation
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，您将被要求提供一个仓库。但是，由于您尚未将Render连接到您的VCS，列表将是空的。点击您的VCS的超链接，然后按照该第三方提供的UI旅程连接Render到该系统。在GitHub的情况下，它看起来可能像这样：![Figure
    9.9 – GitHub's third-party installation
- en: '](img/Figure_9.09_B15983.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.09_B15983.jpg](img/Figure_9.09_B15983.jpg)'
- en: Figure 9.9 – GitHub's third-party installation
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.9 – GitHub的第三方安装
- en: The list should now be populated with your repositories. Select the one containing
    your Gatsby site.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表现在应该已经填充了您的仓库。选择包含您的Gatsby站点的那个。
- en: Next, configure your site settings:![Figure 9.10 – The Render site settings
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，配置您的站点设置：![Figure 9.10 – The Render site settings
- en: '](img/Figure_9.10_B15983.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.10_B15983.jpg](img/Figure_9.10_B15983.jpg)'
- en: Figure 9.10 – The Render site settings
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.10 – Render站点设置
- en: The `npm run build`, and `./public`.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`npm run build`和`./public`。'
- en: Click on **Create Static Site**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建静态站点**。
- en: 'While your site is building, take note of the URL, in blue, at the top of the
    dashboard. This is where your site will be deployed:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的站点正在构建时，注意仪表板顶部的蓝色URL。这就是您的站点将被部署的地方：
- en: '![Figure 9.11 – The Render site dashboard'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.11 – The Render site dashboard'
- en: '](img/Figure_9.11_B15983.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_9.11_B15983.jpg](img/Figure_9.11_B15983.jpg)'
- en: Figure 9.11 – The Render site dashboard
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11 – Render网站仪表板
- en: If everything goes well, your site should be deployed after a few minutes. Check
    the URL to be sure. With every subsequent push to the base branch, Render will
    build and deploy the change automatically.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您的网站应在几分钟内部署。检查URL以确保无误。每次将更改推送到基础分支时，Render都会自动构建和部署更改。
- en: Now that we understand how to deploy with Render, let's look at another alternative
    – Firebase.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用Render进行部署，让我们看看另一种选择——Firebase。
- en: Deploying to Firebase
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到Firebase
- en: 'Firebase is Google''s mobile development application. It allows you to focus
    on the frontend of your application by allowing you to manage your backend infrastructure
    through a no-code/low-code development UI. Firebase has a large number of features,
    including real-time databases, machine learning, Cloud Functions authentication,
    and – the feature we will be focusing on – hosting. Let''s learn how we can deploy
    our site with Firebase:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是谷歌的移动开发应用程序。它允许您通过无代码/低代码开发UI管理后端基础设施，从而让您专注于应用程序的前端。Firebase拥有大量功能，包括实时数据库、机器学习、Cloud
    Functions身份验证，以及我们将要关注的特性——托管。让我们学习如何使用Firebase部署我们的网站：
- en: Navigate to [https://console.firebase.google.com](https://console.firebase.google.com),
    and sign in with a Google account.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://console.firebase.google.com](https://console.firebase.google.com)，并使用谷歌账户登录。
- en: Once logged in, you will be directed to the Firebase console. From there, click
    on **Add Project**.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，您将被引导到Firebase控制台。从那里，点击**添加项目**。
- en: You will be prompted to give your project a name. Once entered, take note of
    your project ID, and click on **Continue**:![Figure 9.12 – Firebase project naming
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被提示为您的项目命名。输入后，注意您的项目ID，然后点击**继续**：![图9.12 – Firebase项目命名
- en: '](img/Figure_9.12_B15983.jpg)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.12_B15983.jpg)'
- en: Figure 9.12 – Firebase project naming
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.12 – Firebase项目命名
- en: At this point, you can optionally set up Google Analytics for your project.
    If you added Google Analytics to your site as part of [*Chapter 8*](B15983_08_ePub_RK.xhtml#_idTextAnchor116),
    *Web Analytics and Performance Monitoring*, then do not set this up again here:![Figure
    9.13 – Setting up Firebase project analytics
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，您可以可选地为您项目设置Google Analytics。如果您在[*第8章*](B15983_08_ePub_RK.xhtml#_idTextAnchor116)“网络分析和性能监控”中将Google
    Analytics添加到您的网站，则在此处不要再次设置：![图9.13 – 设置Firebase项目分析
- en: '](img/Figure_9.13_B15983.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.13_B15983.jpg)'
- en: Figure 9.13 – Setting up Firebase project analytics
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.13 – 设置Firebase项目分析
- en: Click on **Create project** – this will provision the Google Cloud services
    that are required for your project. Now we have set up everything we need within
    the Firebase platform and can return to the code.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建项目**——这将为您项目提供所需的Google Cloud服务。现在我们已经在Firebase平台上设置了所需的所有内容，可以返回代码。
- en: 'Install the Firebase CLI:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Firebase CLI：
- en: '[PRE4]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This package allows us to integrate local projects with the Firebase platform.
    We can use the `-g` command to install it globally.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此软件包允许我们将本地项目与Firebase平台集成。我们可以使用`-g`命令全局安装它。
- en: 'Run the `firebase login` command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`firebase login`命令：
- en: '[PRE5]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will open a browser window prompting you to log in with a Google account.
    Log in with the Google account that you signed up to Firebase with.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将打开一个浏览器窗口，提示您使用谷歌账户登录。使用您注册Firebase时使用的谷歌账户登录。
- en: 'Once complete, return to your Gatsby project''s root directory and run the
    following:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，返回您的Gatsby项目根目录并运行以下命令：
- en: '[PRE6]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will trigger the Firebase initialization UI within our Gatsby project
    and present you with the following:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在我们的Gatsby项目中触发Firebase初始化UI，并显示以下内容：
- en: '![Figure 9.14 – Firebase CLI project initialization'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图9.14 – Firebase CLI项目初始化'
- en: '](img/Figure_9.14_B15983.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.14_B15983.jpg)'
- en: Figure 9.14 – Firebase CLI project initialization
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.14 – Firebase CLI项目初始化
- en: Within this project, we are only using hosting, so press the down arrow key
    until **Hosting** is selected. Then, hit the spacebar to select it followed by
    *Enter* to confirm your choice.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此项目中，我们只使用托管，所以按向下箭头键直到**托管**被选中。然后，按空格键选择它，再按*Enter*键确认您的选择。
- en: Firebase will then ask you which Firebase project to associate with this directory:![Figure
    9.15 – Setting up the Firebase CLI project
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Firebase将询问您要将哪个Firebase项目与该目录关联：![图9.15 – 设置Firebase CLI项目
- en: '](img/Figure_9.15_B15983.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.15_B15983.jpg)'
- en: Figure 9.15 – Setting up the Firebase CLI project
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.15 – 设置Firebase CLI项目
- en: We have already created a Firebase project, so ensure **Use an existing project**
    is selected and hit *Enter*.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经创建了一个 Firebase 项目，所以请确保选择 **使用现有项目** 并按 *Enter*。
- en: Use the up and down arrow keys to select the project ID that we created in *Step
    3* (the project name should be visible in brackets next to the ID). Then, hit
    *Enter*.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上下箭头键选择我们在 *步骤 3* 中创建的项目 ID（项目名称应显示在 ID 旁边的括号中）。然后，按 *Enter*。
- en: Tell Firebase where to find the static build during the hosting setup:![Figure
    9.16 – Setting up Firebase CLI hosting
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机设置期间告诉 Firebase 静态构建的位置：![图 9.16 – 设置 Firebase CLI 主机
- en: '](img/Figure_9.16_B15983.jpg)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.16_B15983.jpg)'
- en: Figure 9.16 – Setting up Firebase CLI hosting
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.16 – 设置 Firebase CLI 主机
- en: By default, Firebase uses the `public` directory, so we can hit *Enter* without
    changing this.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，Firebase 使用 `public` 目录，因此我们可以按 *Enter* 而不更改此设置。
- en: Then, it will ask you whether you would like it to configure your application
    as a single-page app. Type in `n` and hit *Enter*.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它将询问您是否希望将其配置为单页应用程序。输入 `n` 并按 *Enter*。
- en: Finally, it will ask whether you want to set up automatic deploys with GitHub.
    Type in `n` and hit *Enter*. You can change this in the future if needed, but
    for now, we will focus on manual deployments.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，它将询问您是否想设置与 GitHub 的自动部署。输入 `n` 并按 *Enter*。如果需要，您可以在将来更改此设置，但现在我们将专注于手动部署。
- en: 'We now have everything in place ready to deploy to Firebase. Run the following
    command:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经准备好了一切，可以部署到 Firebase。运行以下命令：
- en: '[PRE7]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we already know, `gatsby build` will create a production-ready build of
    our site. Then, the `firebase deploy` command will take our build and upload it
    to the Firebase platform, ready to be served to site visitors:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我们所知，`gatsby build` 将创建一个适合生产的网站构建。然后，`firebase deploy` 命令将我们的构建上传到 Firebase
    平台，准备好供网站访客访问：
- en: '![Figure 9.17 – Deploying the Firebase CLI'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.17 – 部署 Firebase CLI'
- en: '](img/Figure_9.17_B15983.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.17_B15983.jpg)'
- en: Figure 9.17 – Deploying the Firebase CLI
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17 – 部署 Firebase CLI
- en: At the end of the Firebase deployment, it will log a **Hosting URL** to the
    terminal. Navigate to this link in a browser to see your deployed application.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 部署完成后，它将在终端中记录一个 **主机 URL**。在浏览器中导航到这个链接，查看您部署的应用程序。
- en: Quick Tip
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: As you might have noticed from these instructions, Firebase is the only platform
    in this list that does not require you to push your code to a VCS. If you have
    a project where you do not wish to use a VCS, this is a great choice. It's important
    to note that, unlike the other platforms, Firebase will not automatically deploy
    your project unless it has been set up as part of a deployment pipeline.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从这些说明中注意到的，Firebase 是这个列表中唯一一个不需要您将代码推送到版本控制系统的平台。如果您有一个不想使用 VCS 的项目，这是一个很好的选择。需要注意的是，与其他平台不同，Firebase
    不会自动部署您的项目，除非它已被设置为部署管道的一部分。
- en: We have now looked at a multitude of different ways to deploy our site onto
    the internet. If you have completed any of the implementations discussed in the
    previous sections, you should be able to send a friend the site URL, and they
    should be able to see it. However, what if you don't want your site to be visible
    to everyone but only a selected few? Next, let's look at how we can reduce the
    level of access to our site for when the situation requires it.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了将我们的网站部署到互联网上的多种不同方法。如果您完成了前几节中讨论的任何实现，您应该能够将网站 URL 发送给朋友，他们应该能够看到它。然而，如果你不希望网站对所有人可见，而只想对少数人可见怎么办？接下来，让我们看看我们如何可以在需要时降低网站的访问级别。
- en: Serving a Gatsby site with reduced user access
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为具有减少用户访问权限的 Gatsby 网站提供服务
- en: You might be asking yourself why you would ever want to reduce the access to
    your site. One word – security. In all the examples we have seen so far, our site
    is public and out there on the internet for all to see, but what if you are building
    an application that is only for a selected group of people? Perhaps it's portfolio
    work that you want to have locked behind a password or an onboarding application
    that should only be available to colleagues at a specific company. We can achieve
    functionalities such as these using most backend web applications.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问自己，为什么您会想要减少对网站的访问。一个词 – 安全性。在我们迄今为止看到的所有示例中，我们的网站是公开的，在互联网上供所有人查看，但如果你正在构建一个仅针对选定群体的应用程序呢？也许是你想将作品集锁定在密码后面，或者是一个仅对特定公司的同事可用的入职应用程序。我们可以使用大多数后端
    Web 应用程序实现这些功能。
- en: Important Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This type of authentication is not to be confused with that of [*Chapter 11*](B15983_11_ePub_RK.xhtml#_idTextAnchor152),
    *Creating Authenticated Experiences*. Here, we are restricting access to the entirety
    of the site unless you have been approved. In [*Chapter 11*](B15983_11_ePub_RK.xhtml#_idTextAnchor152),
    *Creating Authenticated Experiences*, access is only partially restricted, as
    we allow users to visit parts of the application without logging in.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的认证不要与[*第11章*](B15983_11_ePub_RK.xhtml#_idTextAnchor152)中的认证相混淆，*创建认证体验*。在这里，我们限制了对整个网站的访问，除非你已被批准。在[*第11章*](B15983_11_ePub_RK.xhtml#_idTextAnchor152)中，*创建认证体验*，访问仅部分受限，因为我们允许用户在不登录的情况下访问应用程序的某些部分。
- en: 'As an example, let''s explore how we can use Express to introduce a password
    login to our site:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们探索如何使用Express在我们的网站上引入密码登录：
- en: 'Install the dependencies:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项：
- en: '[PRE8]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will be using Express as our backend and `express-basic-auth` to implement
    HTTP basic authorization as middleware.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用Express作为后端，并使用`express-basic-auth`实现HTTP基本认证作为中间件。
- en: 'At the root of your Gatsby project, create a `server.js` file with the following:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Gatsby项目根目录下创建一个`server.js`文件，内容如下：
- en: '[PRE9]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'First, we create an `express` app. Then, we instruct it to use the `express-basic-auth`
    middleware. You will see that we are passing an object that instructs the middleware
    to challenge the user. When a user navigates to the site, before seeing any content,
    they will be prompted with the following dialog box:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们创建一个`express`应用。然后，我们指导它使用`express-basic-auth`中间件。你会看到我们传递了一个对象，指示中间件对用户进行挑战。当用户导航到网站时，在看到任何内容之前，他们将会看到一个以下对话框：
- en: '![Figure 9.18 – Basic auth challenge dialog box'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure 9.18 – Basic auth challenge dialog box'
- en: '](img/Figure_9.18_B15983.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_9.18_B15983.jpg](img/Figure_9.18_B15983.jpg)'
- en: Figure 9.18 – Basic auth challenge dialog box
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Figure 9.18 – Basic auth challenge dialog box
- en: They will only be allowed onto the site if the credentials they provide match
    those in the `users` object provided to `basicAuth`.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有当提供的凭据与传递给`basicAuth`的`users`对象中的凭据匹配时，他们才被允许进入网站。
- en: Assuming they successfully pass this middleware check, we then allow them to
    view the static content of our site using the `express.static()` method.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设他们成功通过了这个中间件的检查，我们然后允许他们使用`express.static()`方法查看我们网站的静态内容。
- en: 'Modify your scripts in `package.json` to include a `start:server` script:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`package.json`中的脚本以包括一个`start:server`脚本：
- en: '[PRE10]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This script will run our `server.js` file using Node.js.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本将使用Node.js运行我们的`server.js`文件。
- en: 'We now have everything in place to try our server:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好尝试我们的服务器：
- en: '[PRE11]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will build your Gatsby project and then run your server code, which will
    serve up your Gatsby build content. If all has gone well, you should be able to
    visit `localhost:3000` and see this implementation working. Upon entering the
    username and password that has been specified on the server, you should be able
    to see your Gatsby application.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将构建你的Gatsby项目，然后运行你的服务器代码，这将提供你的Gatsby构建内容。如果一切顺利，你应该能够访问`localhost:3000`并看到这个实现正在工作。在输入服务器上指定的用户名和密码后，你应该能够看到你的Gatsby应用程序。
- en: All the other static deployment methods we have looked at within this chapter
    have assumed that the Gatsby project is being hosted on its own dedicated server,
    but sometimes, you don't always have the luxury of multiple servers. This example
    is also a great demonstration of how you can combine backend and frontend code
    on a single server. You could use a similar approach to lock down your site to
    certain IP ranges. For instance, we could expand upon this Express server to serve
    API endpoints alongside our Gatsby project within the same repository.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们探讨的所有其他静态部署方法都假设Gatsby项目是在其自己的专用服务器上托管，但有时，你并不总是有多个服务器的奢侈。这个例子也是一个很好的演示，说明你如何在单个服务器上结合后端和前端代码。你可以使用类似的方法来锁定你的网站到特定的IP范围。例如，我们可以扩展这个Express服务器，在同一个存储库中为我们的Gatsby项目提供API端点。
- en: Quick Tip
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: You might be wondering how to deploy a site using this functionality – deploying
    Express servers is beyond the remit of this book, but platforms that support this
    include Heroku, Render, and Google Cloud.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道如何使用此功能部署网站——Express服务器的部署超出了本书的范围，但支持此功能的平台包括Heroku、Render和Google Cloud。
- en: Now, let's take a moment to summarize what we have learned in this chapter.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们花点时间总结一下我们在本章中学到的内容。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we investigated the builds that a Gatsby project can create
    and the differences between them. We looked at common errors that crop up during
    build time and how we can debug them. We learned how we can deploy hybrid builds
    using Gatsby Cloud and how we can deploy static builds with Netlify, Render, and
    Firebase. Additionally, we discovered how we can lock down access to our site
    by serving it up as part of an Express server. You should now feel comfortable
    with the process of taking your site live.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Gatsby 项目可以创建的构建类型及其之间的区别。我们研究了在构建过程中出现的常见错误以及如何调试它们。我们学习了如何使用 Gatsby
    Cloud 部署混合构建，以及如何使用 Netlify、Render 和 Firebase 部署静态构建。此外，我们还发现了如何通过将其作为 Express
    服务器的一部分来提供服务，以锁定对网站的访问。现在，你应该对将网站上线的过程感到舒适。
- en: In the next chapter, we will start looking at more advanced concepts. We will
    begin by learning about Gatsby's plugin creation.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探讨更高级的概念。我们将从学习 Gatsby 插件创建开始。
