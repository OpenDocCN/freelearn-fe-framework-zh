- en: Chapter 5. Integrating AJAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。集成AJAX
- en: A question – what do **Deferreds**, **Promises**, and /**ˈeɪdʒæks**/ have in
    common?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题 - **Deferreds**、**Promises**和/**ˈeɪdʒæks**/有什么共同点？
- en: The answer is simple – for at least two of them; they are utilities that work
    with AJAX; the third is actually the International Phonetic spelling of AJAX.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 答案很简单 - 至少其中两个是工作与AJAX的实用程序；第三个实际上是AJAX的国际音标拼写。
- en: Throughout the history of the Internet, we as end users were forced to endure
    page refreshes – you had to force a page refresh to show new content. Not so now
    – we can refresh content without needing to clear the page, using the power of
    AJAX, but not without its issues. Enter Deferreds and Promises – not for beginners,
    but a useful tool once you understand how it works!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网的历史上，我们作为最终用户被迫忍受页面刷新 - 您必须强制刷新页面才能显示新内容。现在不一样了 - 我们可以在不需要清除页面的情况下刷新内容，利用了AJAX的力量，但并非没有问题。进入延迟和承诺
    - 不适合初学者，但一旦了解其工作原理就是有用的工具！
- en: 'Over the next few pages, we''ll look at a number of topics relating to the
    use of AJAX with jQuery. These would include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将研究与使用jQuery进行AJAX相关的一些主题。这些主题包括：
- en: Detailing AJAX best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详述AJAX最佳实践
- en: Improving the speed of loading data with static sites
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过静态站点提高数据加载速度
- en: Using callbacks to handle multiple AJAX requests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用回调处理多个AJAX请求
- en: Enhancing your code with jQuery Deferreds and Promises
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery Deferreds和Promises增强您的代码
- en: Seeing Deferreds and Promises in action
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看Deferreds和Promises的实际效果
- en: Let's get stuck in…!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧...！
- en: Revisiting AJAX
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视AJAX
- en: Does anyone remember the days when clicking on a link or button would force
    a refresh of the page, no matter which site we were looking at? Those were the
    days when you knew that to order a pizza takeaway, or books from an online book
    store meant clicking through many pages…yawn!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有没有人还记得点击链接或按钮会强制刷新页面的日子，无论我们在哪个网站上？那些日子，当您知道要订购披萨外卖或从在线书店订购书籍时，意味着要点击许多页面...真无聊！
- en: Thankfully, the advent of AJAX in 2006 as a standard has put paid to that need.
    Today, we are no longer constrained by the need to refresh our page entirely;
    we can easily update a page's contents asynchronously. Okay – so we don't need
    to refresh our page, but…AJAX? Isn't that some old technology from last century,
    which died its death some time ago?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，AJAX在2006年作为一种标准的出现已经结束了这种需要。今天，我们不再受到完全刷新页面的限制；我们可以轻松地异步更新页面的内容。好吧 - 所以我们不需要刷新页面，但是...AJAX？那不是上个世纪的某种老技术，早就消亡了吗？
- en: 'The answer is, not yet – granted that even though the magic of jQuery allows
    us to update on a page asynchronously, AJAX still has an important role to play.
    The phenomenal rise of using the Internet means that there will be instances where
    we need to fetch pages from another site. As we all know, security settings in
    most browsers will block access of content, if it violates the **Cross-Origin
    Resource Sharing** (**CORS**) policy, as displayed in the following image:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是否定的 - 尽管jQuery的魔力使我们能够异步更新页面，但AJAX仍然起着重要的作用。互联网的惊人崛起意味着我们会有需要从另一个站点获取页面的情况。众所周知，大多数浏览器中的安全设置将阻止对内容的访问，如果违反了**跨域资源共享**（**CORS**）策略，如下图所示：
- en: '![Revisiting AJAX](img/image00374.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![重新审视AJAX](img/image00374.jpeg)'
- en: To circumvent the security controls associated with CORS, we can use AJAX. Before
    we get involved in more complex uses, let's take a moment to recap what AJAX is,
    and how we can use it in action.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了规避与CORS相关的安全控制，我们可以使用AJAX。在我们涉足更复杂的用法之前，让我们花点时间回顾一下AJAX是什么，以及我们如何在实践中使用它。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see this effect in action, you can run the `ajaxblocked` demo that is available
    in the code download that accompanies this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这种效果的实际情况，您可以运行本书附带的代码下载中提供的`ajaxblocked`演示。
- en: Defining AJAX
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义AJAX
- en: If you've spent any time using AJAX, no doubt you will have come across one
    or more of the variations, such as AHAH, AJAH, or AJAJ work using similar principles.
    However, the interchange of data differs; for example, AJAH uses HTML, AJAJ works
    with JSON, and AHAH is based around HTML.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您花费了一些时间使用AJAX，毫无疑问您会遇到一种或多种变体，例如AHAH、AJAH或AJAJ，它们使用相似的原理。但数据的交换有所不同；例如，AJAH使用HTML，AJAJ使用JSON，而AHAH是基于HTML的。
- en: 'No matter which variation is used, this group of interrelated technologies
    may be mature, but it still plays an important role is the presentation of data
    to the end user. Throughout the course of this chapter, we''ll work with what
    is arguably the grandfather of them all, that is AJAX. As a reminder, it is made
    up of the following individual technologies:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种变体，这组相互关联的技术可能已经成熟，但它仍然在向最终用户呈现数据方面发挥着重要作用。在本章的整个过程中，我们将与可以说是它们中的鼻祖的 AJAX
    一起工作。作为提醒，它由以下各个技术组成：
- en: HTML (or XHTML) and CSS for presentation
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于演示的 HTML（或 XHTML）和 CSS
- en: The **Document Object Model** (**DOM**) for dynamic display of, and interaction
    with, data
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于动态显示和与数据交互的**文档对象模型**（**DOM**）
- en: XML and **Extensible Stylesheet Language Transformations** (**XSLT**) for the
    interchange and manipulation of data
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于数据的交换和操作的 XML 和**可扩展样式表语言转换**（**XSLT**）
- en: The `XMLHttpRequest` object for asynchronous communication
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于异步通信的 `XMLHttpRequest` 对象
- en: JavaScript to bring these technologies together
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 将这些技术结合起来
- en: 'When used in jQuery, we can easily configure AJAX using the `$.ajax` object.
    There are a host of options available, but some of the ones we might work with
    frequently include:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 jQuery 中使用时，我们可以使用 `$.ajax` 对象轻松配置 AJAX。有许多可用的选项，但我们可能经常使用的一些包括：
- en: '| Configuration option | Purpose |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 配置选项 | 目的 |'
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `url` | The URL of the content, for the request. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `url` | 请求的内容的 URL。 |'
- en: '| `data` | The data to be sent to the server. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 要发送到服务器的数据。 |'
- en: '| `error` | This function is called in the event of the request failing – the
    function will be passed three arguments: the `jqXHR` object, a string describing
    the error, and an optional exception object, if one is generated. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `error` | 在请求失败时调用此函数 - 函数将传递三个参数：`jqXHR` 对象，描述错误的字符串以及（如果生成了一个）可选异常对象。 |'
- en: '| `dataType` | This describes the type of data that you''re expecting to see
    returned from the server. By default, jQuery will try to work this out automatically,
    but it could be one of the following: XML, JSON, script, or HTML. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `dataType` | 这描述了您期望从服务器返回的数据类型。默认情况下，jQuery 将尝试自动解决此问题，但它可能是以下之一：XML、JSON、脚本或
    HTML。 |'
- en: '| `Success` | A function to be called if the request is successful. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `Success` | 如果请求成功，则调用的函数。 |'
- en: '| `type` | The type of request to make, for example, `''POST''`, `''GET''`
    or `''PUT''` – the default is `''GET''`. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `type` | 发送的请求类型，例如，''POST''，''GET'' 或 ''PUT'' - 默认为 ''GET''。 |'
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are many more options available. For a reminder, it is worth browsing
    to [http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/) for
    more details.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他选项可用。作为提醒，值得浏览 [http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/)
    以获取更多详细信息。
- en: Enough theory – at least for the moment! Let's move on and take a look at developing
    an example using AJAX and jQuery.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 足够的理论 - 至少暂时够了！让我们继续并看看如何使用 AJAX 和 jQuery 开发一个示例。
- en: Creating a simple example using AJAX
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AJAX 创建一个简单的示例
- en: Before we get stuck in developing code, and pushing the boundaries of what we
    can do, let's spend a moment understanding what typical AJAX code looks like in
    action.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码并推动我们所能做的边界之前，让我们花一点时间了解典型的 AJAX 代码在实际中是什么样子的。
- en: 'In a typical application that relies on importing content, we might come across
    something akin to the following extract:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在依赖导入内容的典型应用程序中，我们可能会遇到类似以下摘录的内容：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is a standard configuration object for AJAX-enabled code. Let''s take
    a look at some of these configuration options in a little more detail:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于 AJAX 启用代码的标准配置对象。让我们更详细地看看其中一些配置选项：
- en: '| Option | Comments |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 注释 |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `url` | The URL of the |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `url` | URL 的 |'
- en: '| `type` | Default is `GET`, but other verbs can be used instead, if required
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `type` | 默认为 `GET`，但如果需要，可以使用其他动词代替 |'
- en: '| `cache` | The default is `true`, but `false` for `''script''` and `''jsonp''`
    datatypes, so must be set on a per case basis |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `cache` | 默认为 `true`，但对于 `''script''` 和 `''jsonp''` 数据类型为 `false`，因此必须根据具体情况进行设置
    |'
- en: '| `data` | Any request parameters should be set in the `data` object |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 任何请求参数都应设置在 `data` 对象中 |'
- en: '| `datatype` | The `datatype` should be set for future reference |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `datatype` | 应将 `datatype` 设置为将来参考 |'
- en: '| `jsonp` | Only specify this to match the name of the callback parameter your
    API is expecting for JSONP requests, which are being made of a server hosted in
    a different domain |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `jsonp` | 只需指定此项以匹配你的 API 期望的 JSONP 请求的回调参数的名称，这些请求是对托管在不同域中的服务器发起的 |'
- en: '| `statusCode` | If you want to handle specific error codes, use the status
    code mapping settings |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `statusCode` | 如果您想处理特定的错误代码，请使用状态代码映射设置 |'
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There is plenty of documentation on the jQuery Core site – it is well worth
    reading! A good place to start is with the main `ajax()` object, at [http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Core 站点上有大量文档 - 值得一读！一个好的起点是主要的 `ajax()` 对象，位于 [http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/)。
- en: 'We can use it to great effect to produce a simple demo, such as displaying
    information from an XML file, or even plain HTML, as shown in the next screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其用于生成一个简单的演示，比如从 XML 文件或者甚至是纯 HTML 中显示信息，如下一张截图所示：
- en: '![Creating a simple example using AJAX](img/image00375.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![使用 AJAX 创建一个简单示例](img/image00375.jpeg)'
- en: 'Let''s take a look at this demo in more detail:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这个演示：
- en: From the code download that accompanies this book, extract copies of the `basicajax.html`,
    `content.html,` and `basicajax.css` files – place the HTML files into the root
    of our project folder, and the style sheet into the `css` subfolder.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从随书附带的代码下载中，提取 `basicajax.html`、`content.html` 和 `basicajax.css` 文件的副本 - 将 HTML
    文件放入我们项目文件夹的根目录，样式表放入 `css` 子文件夹。
- en: 'Next, add the following code to a new file, saving it as `basicajax.js` in
    the `js` sub-folder of our project area:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到一个新文件中，将其保存为 `basicajax.js`，并将其放入我们项目区域的 `js` 子文件夹中：
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Immediately below the declared `$description` variable, add the following helper
    function to control the rendering of our extracted text on screen:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在声明的 `$description` 变量的下方，添加以下辅助函数来控制我们在屏幕上提取的文本的呈现：
- en: '[PRE2]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next up comes the core of our jQuery code – the call to `$.ajax`. Add the following
    event handler immediately below the helper function:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是我们的 jQuery 代码的核心部分 - 对 `$.ajax` 的调用。立即在辅助函数下面添加以下事件处理程序：
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we preview the results in a browser, we can see the content appear when clicking
    on the button, as shown in the screenshot at the start of this demo.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果，我们可以看到点击按钮时内容出现，就像在这个演示开始时所示的截图中一样。
- en: In this instance, we've created a simple demo. It first references the `content.html`
    file, using the HTML format to import it to our page. Our jQuery code then pulls
    the content and assigns it to `$response`, before first extracting the title,
    then each of the paragraphs, and appending them to the `#info` div.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实例中，我们创建了一个简单的演示。它首先引用了 `content.html` 文件，使用 HTML 格式将其导入到我们的页面中。我们的 jQuery
    代码然后提取内容并将其分配给 `$response`，然后首先提取标题，然后每个段落，并将它们附加到 `#info` div 中。
- en: 'At this point, it is worth noting that we could have referenced each of those
    extracted paragraphs individually, using a statement such as the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此时值得注意的是，我们可以使用类似以下语句引用每个提取的段落：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This however is an inefficient way to extract the text – we would have to run
    the code multiple times to reference subsequent values, which places an unnecessary
    load on our server.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是提取文本的一种低效方式 - 我们必须多次运行代码来引用后续的值，这会给我们的服务器带来不必要的负载。
- en: Improving the speed of loading data with static sites
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高静态站点加载数据的速度
- en: Now that we have seen an AJAX example in action, it may surprise you to learn
    that the code used isn't *technically* as efficient as it could be, even with
    the small amount of text that we displayed on screen.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一个 AJAX 示例的实际操作，也许让你惊讶的是，即使在我们在屏幕上显示的少量文本中，使用的代码并不 *技术上* 是尽可能高效的。
- en: 'Huh? I hear you ask – surely we can''t really improve on such a simple demo,
    right? Well, strange as it might seem, we can already make one improvement. Let''s
    take a look at some of the tricks we can use to reduce any slowness in our code
    – not all of them have to do with simply changing our code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯？我听到你在问 - 我们真的不能改进这样一个简单的演示吗？好吧，尽管可能有些奇怪，但我们确实可以做出改进。让我们看看我们可以使用哪些技巧来减少代码中的任何缓慢
    - 并不是所有的技巧都只是简单地改变我们的代码：
- en: Reduce the number of AJAX requests – no, I've not lost the plot; improving our
    code isn't always about making changes to the code itself! If we consider when
    each AJAX request is made, there may be opportunities to reduce the number, if
    reordering means we can achieve the same result. For example, if we have AJAX
    requests being made on a timer, we can set a flag to indicate that AJAX requests
    should only be performed in changes have been made.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少 AJAX 请求的数量 - 不，我没有疯掉；改善我们的代码并不总是意味着改变代码本身！如果我们考虑每次 AJAX 请求何时发出，可能会有机会减少数量，如果重新排序意味着我们可以达到相同的结果。例如，如果我们有一个基于定时器发出的
    AJAX 请求，我们可以设置一个标志来指示仅在进行更改时才执行 AJAX 请求。
- en: If we need to fetch content, then it is often more effective to simply use GET,
    rather than POST – the former simply retrieves content, while the latter will
    cause a server reaction, such as updating a database record. If we don't need
    to perform an action, then using GET is perfectly adequate.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们需要获取内容，那么简单地使用 GET 往往更有效，而不是 POST - 前者只是检索内容，而后者会导致服务器反应，例如更新数据库记录。如果我们不需要执行操作，则使用
    GET 完全足够了。
- en: When updating content on a page – make sure you are only updating a small amount;
    AJAX performance will be affected if our page is set to update a broad sweep of
    content, rather than a defined section.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当更新页面内容时，请确保只更新少量内容；如果我们的页面设置为更新大量内容而不是定义的部分，则会影响 AJAX 性能。
- en: Reduce the amount of data to be transmitted – remember I said there was a change
    we could make to our code? Here's where we can make it – while we don't need to
    limit the content we retrieve, we can change from using HTML format to plain text.
    This allows us to remove the markup tags, thereby reducing our content. We could
    always go in the completely opposite direction, and switch to using XML, but this
    wouldn't be without an equal increase in data size!
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少要传输的数据量 - 记得我说过我们的代码可以做出改变吗？这就是我们可以做出改变的地方 - 虽然我们不需要限制我们检索的内容，但我们可以从使用 HTML
    格式更改为纯文本。这允许我们删除标记标签，从而减少我们的内容。当然，我们也可以完全反向，转而使用 XML，但这不会不增加数据大小！
- en: We should also check that our server has been properly configured – the two
    key areas to check are the use of ETags (or Entity Tags), and that the server
    is set to send the correct expires or Cache-Control headers for the content being
    served, as shown in the next example:![Improving the speed of loading data with
    static sites](img/image00376.jpeg)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还应该检查我们的服务器是否已正确配置 - 要检查的两个关键领域是使用 ETags（或实体标签），以及服务器是否设置为发送正确的过期或 Cache-Control
    头用于提供的内容，如下例所示：![通过静态网站改善数据加载速度](img/image00376.jpeg)
- en: In a nutshell, server will not send any response if it detects that ETags for
    a URL have not changed.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简而言之，如果服务器检测到某个 URL 的 ETags 没有更改，它将不会发送任何响应。
- en: Tip
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Head over to [http://en.wikipedia.org/wiki/HTTP_ETag](http://en.wikipedia.org/wiki/HTTP_ETag)
    if you would like to learn more about ETags and how they work in a browser.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于 ETags 及其在浏览器中的工作方式，请访问 [http://en.wikipedia.org/wiki/HTTP_ETag](http://en.wikipedia.org/wiki/HTTP_ETag)。
- en: 'We can further limit the impact of AJAX requests by only creating and destroying
    the `XMLHttpRequest` at the right time – if they are only needed at certain instances,
    then this will have a dramatic effect on AJAX performance. For example, we might
    only instigate an AJAX request if our code doesn''t have an active class:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过在正确的时间仅创建和销毁 `XMLHttpRequest` 来进一步限制 AJAX 请求的影响 - 如果它们只在某些情况下需要，那么这将对
    AJAX 性能产生显著影响。例如，如果我们的代码没有活动类，我们可能只会启动 AJAX 请求：
- en: '[PRE5]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ensure that your callbacks are set correctly – if our code has been updated,
    then we need to tell our users as much, and not keep them waiting; after all,
    the one thing we do not want to do is fall into the trap of callback hell! (Later
    in this chapter, we will cover this in more detail.)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的回调函数设置正确 - 如果我们的代码已更新，那么我们需要告诉我们的用户，并且不要让他们等待；毕竟，我们最不想做的事情就是陷入回调地狱的陷阱！（本章后面我们将更详细地介绍这个问题。）
- en: We can take things even further! One way we can reduce unnecessary calls to
    the server is by caching content. But – before you say "I know that", I didn't
    say where!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以进一步！我们可以通过缓存内容来减少对服务器的不必要调用。但是，在你说“我知道”的之前，我还没说在哪里呢！
- en: Yes – the *where* in this instance is key and the *where* is - the localStorage.
    This is built into each browser, and can be used to remove the need to continually
    hit the server. While the amount you can store varies from browser to browser
    (it's typically 5 MB, but can be as high as 20 MB), it works using the same principles
    for each browser – the content must be stored as text, but can include images
    and text (within reason!).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 是的——在这种情况下，*where* 是关键，而 *where* 是 - localStorage。这是内置在每个浏览器中的，可以用来消除不断击中服务器的需要。虽然您可以存储的量因浏览器而异（通常为
    5 MB，但最高可达 20 MB），但对于每个浏览器，它使用相同的原则工作——内容必须存储为文本，但可以包括图像和文本（在合理范围内！）。
- en: Intrigued? Using a simple plugin and making some small changes to code, we can
    quickly implement a workable solution – let's revisit our basic AJAX demo from
    earlier, and make those changes now.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有兴趣吗？使用一个简单的插件并对代码进行一些小修改，我们可以快速实现一个可行的解决方案——让我们重新审视一下我们之前的基本 AJAX 演示，并立即进行这些更改。
- en: Using localStorage to cache AJAX content
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 localStorage 缓存 AJAX 内容
- en: Working with AJAX requires careful consideration – it is important to strike
    a balance in fetching the right amount of content, at the appropriate points,
    without making too many unnecessary requests to the server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AJAX 需要仔细考虑——重要的是在适当的点获取正确数量的内容，而不是对服务器进行太多不必要的请求，这一点很重要。
- en: We've seen a number of tricks we can use to help reduce the impact of AJAX requests.
    One of the more adventurous ways is to store content in the **localStorage** area
    of each browser – we can do this using an AJAX prefilter. The developer Paul Irish
    has wrapped up the code needed to do this in a plugin, which is available at [https://github.com/paulirish/jquery-ajax-localstorage-cache](https://github.com/paulirish/jquery-ajax-localstorage-cache).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些可以帮助减少 AJAX 请求影响的技巧。其中一种更为冒险的方式是将内容存储在每个浏览器的 **localStorage** 区域中——我们可以使用
    AJAX 预过滤器来实现这一点。开发者 Paul Irish 已经将完成此操作所需的代码封装在一个插件中，该插件可在 [https://github.com/paulirish/jquery-ajax-localstorage-cache](https://github.com/paulirish/jquery-ajax-localstorage-cache)
    获取。
- en: 'We''re going to use it to alter our `basicajax` demo from earlier. Let''s take
    a look at how we are going to do this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用它来修改我们之前的 `basicajax` 演示。让我们看看我们将如何做到这一点：
- en: Let's start by extracting a copy of the `basicajax` demo folder from the code
    download that accompanies this book, and saving it to our project area.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从随附本书代码下载中提取 `basicajax` 演示文件夹的副本，并将其保存到我们的项目区域。
- en: Next, we need to download the plugin – this is available at [https://github.com/paulirish/jquery-ajax-localstorage-cache/archive/master.zip](https://github.com/paulirish/jquery-ajax-localstorage-cache/archive/master.zip).
    From the zip file, extract `jquery-ajax-localstorage-cache.js`, and save it to
    the `js` subfolder within `basicajax`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要下载插件——这可以在 [https://github.com/paulirish/jquery-ajax-localstorage-cache/archive/master.zip](https://github.com/paulirish/jquery-ajax-localstorage-cache/archive/master.zip)
    获取。从 zip 文件中提取 `jquery-ajax-localstorage-cache.js`，并将其保存到 `basicajax` 中的 `js`
    子文件夹中。
- en: 'We need to make some changes to our JavaScript and HTML markup. Let''s first
    change the JavaScript. In `basicajax.js`, add the following two lines as shown:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对 JavaScript 和 HTML 标记进行一些更改。让我们首先更改 JavaScript。在 `basicajax.js` 中，按如下所示添加以下两行：
- en: '[PRE6]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In `basicajax.html`, we need to reference the new plugin, so go ahead and alter
    the script calls, as shown next:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `basicajax.html` 中，我们需要引用新的插件，因此继续修改脚本调用，如下所示：
- en: '[PRE7]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If we rerun the demo and click on the button to load the content, we should
    not see anything different visually; the change will be apparent if we fire up
    Firebug, switch to the **Net** tab, and then click on **JavaScript**:![Using localStorage
    to cache AJAX content](img/image00377.jpeg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们重新运行演示并点击按钮加载内容，从视觉上不应该看到任何不同；如果我们启动 Firebug，切换到 **Net** 选项卡，然后点击 **JavaScript**，则更改将显而易见：![使用
    localStorage 缓存 AJAX 内容](img/image00377.jpeg)
- en: If we explore further, we can now see signs of our AJAX content being stored
    within the **localStorage** area of our browser:![Using localStorage to cache
    AJAX content](img/image00378.jpeg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们进一步探索，现在我们可以看到我们的 AJAX 内容被存储在浏览器的 **localStorage** 区域中的迹象：![使用 localStorage
    缓存 AJAX 内容](img/image00378.jpeg)
- en: Tip
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you would like to see all of the localStorage settings, then try downloading
    and installing the FireStorage Plus! plugin from [https://addons.mozilla.org/en-US/firefox/addon/firestorage-plus/](https://addons.mozilla.org/en-US/firefox/addon/firestorage-plus/).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想要查看所有 localStorage 设置，请尝试下载并安装 FireStorage Plus! 插件，该插件可以从 [https://addons.mozilla.org/en-US/firefox/addon/firestorage-plus/](https://addons.mozilla.org/en-US/firefox/addon/firestorage-plus/)
    获取。
- en: All of the content that we cache in this area can now be manipulated using jQuery
    and the `localStorage.getItem` or `localStorage.clearItem` methods. If you would
    like to learn more, then you may refer to my book *HTML5 Local Storage How-to*,
    which is available from Packt Publishing.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用jQuery和`localStorage.getItem`或`localStorage.clearItem`方法来操纵该区域中的所有内容。如果你想了解更多，可以参考我的书*HTML5
    Local Storage How-to*，该书可在Packt Publishing上获得。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a working version of this code available in the code download that
    accompanies this book, within the `basicajax-localstorage` folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本书附带的代码下载中有这段代码的可运行版本，位于`basicajax-localstorage`文件夹中。
- en: 'There may be instances where you find you want to reduce the cache TTL value
    to minutes (or maybe even seconds?). You can do this by modifying lines `70` to
    `72` in `jquery-ajax-localstorage-cache.js`, and remove one of the multipliers,
    to leave the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有时候你会发现你想将缓存TTL值减少到几分钟（甚至几秒钟？）。你可以通过修改`jquery-ajax-localstorage-cache.js`中的第70到72行，并删除一个乘数来实现，留下以下内容：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's change track . We mentioned earlier that one of the ways we can improve
    performance when working with AJAX is to ensure that we keep the number of requests
    to a minimum. If our code contains multiple requests, it will have an adverse
    impact on performance, particularly if we have to wait for each request to be
    completed before the next is started.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变方向。我们先前提到当处理AJAX时，提高性能的一种方法是确保我们尽量减少请求的数量。如果我们的代码包含多个请求，将对性能产生不利影响，特别是如果我们必须等待每个请求完成后才能开始下一个请求。
- en: We could potentially use localStorage to reduce the impact, by requesting content
    from within the browser, instead of the server; it will work, but may not suit
    every type of request. Instead, as we'll see later, there are better alternatives
    that allow multiple requests to be handled with ease. Let's delve into this issue
    in more detail, beginning with the impacts of using callbacks to manage the multiple
    requests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会使用localStorage来减少影响，通过在浏览器内请求内容，而不是从服务器请求；这样做是可行的，但可能不适用于每种类型的请求。相反，正如我们将在后面看到的，有更好的替代方法可以轻松处理多个请求。让我们更详细地探讨一下这个问题，首先从使用回调来处理多个请求的影响开始。
- en: Using callbacks to handle multiple AJAX requests
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用回调处理多个AJAX请求
- en: When working with AJAX, we can use the `$.Callbacks` object to manage callback
    lists – callbacks would be added using the `callbacks.add()` method, fired using
    `.fire(),` and removed using the `.remove()` method.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用AJAX时，我们可以使用`$.Callbacks`对象来管理回调列表—可以使用`callbacks.add()`方法添加回调，使用`.fire()`触发，使用`.remove()`方法移除。
- en: Normally we might initiate a single AJAX request if we have decided that content
    should only appear when needed, and not be present all the time. There is nothing
    wrong with this – it's a perfectly valid way of working, and reduces the need
    for page refreshes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定在需要的时候才出现内容，而不是一直存在的情况下，通常我们会启动一个单一的AJAX请求。这样做没有错—这是一种完全有效的工作方式，可以减少页面刷新的需求。
- en: However, if we decided we had to perform multiple requests at the same time,
    and needed each of them to complete before we could continue, then things will
    get messy.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们决定必须同时执行多个请求，并且需要每个请求都完成后才能继续，那么情况将变得混乱。
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We could be waiting for a while!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能需要等一会儿！
- en: The problem here is the slow speed of response when working with multiple requests,
    particularly if all of them have to finish before we can continue. I, for one,
    certainly don't want to have to wait for a slow responding page to finish!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是当处理多个请求时响应速度很慢，尤其是如果所有请求都必须在我们继续之前完成。我个人肯定不想等待一个响应速度慢的页面完成！
- en: To avoid what many affectionately term **callback hell**, we can make use of
    an alternative – jQuery's Deferreds and Promises. These can be thought of as a
    special form of AJAX. Over the next few pages, we'll dig into what makes this
    technology tick, and work through a simple example that you can use as a basis
    for developing your own ideas in the future.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免许多人喜欢称之为**回调地狱**的情况，我们可以使用另一种方法——jQuery的Deferreds和Promises。这可以被视为一种特殊形式的AJAX。在接下来的几页中，我们将深入探讨这项技术的奥秘，并通过一个简单的示例来演示，你可以将其作为将来开发自己想法的基础。
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There is even a website dedicated to the horrors of callback hell – you can
    view it at [http://callbackhell.com/](http://callbackhell.com/) - it is definitely
    worth a read!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至有一个专门讨论回调地狱的网站—你可以在[http://callbackhell.com/](http://callbackhell.com/)上查看它—绝对值得一读！
- en: Let's take a look at how Deferreds and Promises work within jQuery, and how
    we can use it to enhance our code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Deferreds 和 Promises 如何在 jQuery 中工作，以及如何使用它来增强我们的代码。
- en: Enhancing your code with jQuery Deferreds and Promises
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 jQuery Deferreds 和 Promises 增强你的代码
- en: 'Although Deferreds and Promises sound like a relatively new technology, they
    have been available since 1976\. In a nutshell:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Deferreds 和 Promises 听起来像是一种相对新的技术，但它们早在 1976 年就已经可用了。简而言之：
- en: A Deferred represents a task that has yet to finish
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Deferred 代表了一个尚未完成的任务
- en: A Promise is a value that is not yet known
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Promise 是一个尚未知晓的值
- en: If we have to use standard AJAX, then we will likely have to wait for each request
    to complete before moving onto the next. This is not necessary with Deferreds
    / Promises. We do not have to wait for each request to be processed when using
    Deferreds / Promises. We can queue several to be fired at the same time through
    the `jQuery.Deferred()` object and manage them individually or together, even
    though each may take varying amounts of time to complete.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们必须使用标准 AJAX，那么我们可能必须等待每个请求完成才能继续。这在使用 Deferreds / Promises 时是不必要的。当使用 Deferreds
    / Promises 时，我们不必等待每个请求被处理。我们可以通过`jQuery.Deferred()`对象排队多个请求以同时触发它们，并单独或一起管理它们，即使每个请求可能需要不同的时间来完成。
- en: If your application uses, or could benefit from using, AJAX-enabled requests,
    then it is worth spending the time to familiarize yourself with Deferreds and
    Promises.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序使用了 AJAX 启用的请求，或者可能受益于使用它们，那么花时间熟悉 Deferreds 和 Promises 是值得的。
- en: 'When working with standard AJAX, a key deficiency was the lack of *standard*
    feedback from any AJAX call – it was difficult to tell when something had been
    completed. jQuery AJAX now creates and returns a Promise object, that will return
    a promise when all of the actions bound to it have been completed. Using jQuery,
    the following way is how we would implement, using the `when()`, `then()` and
    `fail()` methods:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用标准 AJAX 时，一个关键的缺陷是缺乏来自任何 AJAX 调用的 *标准* 反馈 - 很难判断何时完成了某事。jQuery AJAX 现在创建并返回一个
    Promise 对象，该对象将在与之绑定的所有操作都完成时返回一个 promise。使用 jQuery，我们会使用`when()`、`then()`和`fail()`方法来实现以下方式：
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can represent the principles of working with Deferreds and Promises, using
    the following diagram:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下图表来表示使用 Deferreds 和 Promises 的工作原理：
- en: '![Enhancing your code with jQuery Deferreds and Promises](img/image00379.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![用 jQuery Deferreds 和 Promises 增强你的代码](img/image00379.jpeg)'
- en: The key benefit of using Deferreds is that we can begin to chain together multiple
    functions, instead of being limited to only calling one function at a time (as
    is the case with standard AJAX). We can then either `.resolve()` or `.reject()`
    individual Deferreds from within the `jQuery.Deferred` list, and provide a consistent
    mechanism to determine what should happen if Deferreds are successful or if they
    fail, using the `.success()`, `.fail(),` or `error()` event handlers.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Deferreds 的关键好处是我们可以开始链接多个函数，而不仅仅是一次调用一个函数（这是标准 AJAX 的情况）。然后，我们可以从`jQuery.Deferred`列表内部`.resolve()`或`.reject()`单个
    Deferreds，并使用`.success()`、`.fail()` 或 `error()` 事件处理程序提供一致的机制来确定如果 Deferreds 成功或失败应该发生什么。
- en: Finally, we can then call the `.done()` event handler to determine what should
    happen once the actions bound to our Promise have been completed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以调用`.done()`事件处理程序来确定在与我们的 Promise 绑定的操作完成后应该发生什么。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to learn more about the inner workings of Deferreds and Promises,
    there is a useful article at [https://github.com/promises-aplus/promises-spec](https://github.com/promises-aplus/promises-spec),
    although it does make for somewhat dry reading (no pun intended!).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于 Deferreds 和 Promises 的内部工作原理的信息，请查阅 [https://github.com/promises-aplus/promises-spec](https://github.com/promises-aplus/promises-spec)，尽管它可能会让人感觉有些枯燥（无意冒犯！）。
- en: Now that we've covered the basics of Deferreds and Promises, let's change track
    and take a look at using both in action, along with outlining why it is worth
    spending time getting acquainted with the concepts behind them.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Deferreds 和 Promises 的基础知识，让我们改变一下方向，看看如何在实际中使用这两者，并概述为什么值得花时间了解它们背后的概念。
- en: Working with Deferreds and Promises
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Deferreds 和 Promises
- en: 'Switching to using Deferreds and Promises will take some time, but is worth
    the effort put into understanding how they work. To get a feel of the benefits
    of using Deferreds and Promises, let''s take a look at some of the advantages
    of incorporating them into our code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到使用 Deferreds 和 Promises 需要一些时间，但值得花费精力去理解它们的工作原理。为了感受使用 Deferreds 和 Promises
    的好处，让我们来看看将它们融入我们的代码中的一些优势：
- en: '**Cleaner method signatures, and uniform return**: We can separate out the
    code that dictates what happens with the outcome of any request, which makes it
    cleaner to read and allows chaining if desired, as shown next:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更清晰的方法签名和统一的返回值**：我们可以将决定任何请求结果如何处理的代码分离出来，这样读起来更清晰，如果需要，还可以进行链式调用，如下所示：'
- en: '[PRE11]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Easy to put together**: We''re not forced to incorporate complex functions
    to manage handling within each request; this means the core code required to initiate
    each request is greatly simplified, as shown in the following example:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容易组合在一起**：我们不需要在每个请求中加入复杂的函数来管理处理；这意味着启动每个请求所需的核心代码大大简化，如下面的示例所示：'
- en: '[PRE12]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Easy to chain statements together**: The architecture of a Deferred / Promise
    allows us to chain a number of event handlers together, so that we can fire off
    a number of methods with a single action, as shown next:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容易链式调用语句**：Deferred / Promise 的架构允许我们将多个事件处理程序链接在一起，这样我们就可以通过单个操作触发多个方法，如下所示：'
- en: '[PRE13]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Promises always run asynchronously**: They can be fired even when we don''t
    know which callbacks will use the values generated by Promises, before the task
    completes. Promises will store the resulting value, and we can call that value
    either from existing callbacks, or any that we add after the promise has been
    generated.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Promises 总是异步执行**：它们甚至可以在我们不知道哪些回调函数将使用 Promises 生成的值之前就被触发，而不管任务是否完成。Promises
    将存储生成的值，我们可以从现有的回调函数中调用该值，或者在生成 Promise 后添加任何回调函数时调用。'
- en: '**Exception-style error bubbling**: Typically with AJAX, we would have to use
    a series of `if…then…else` statements, which makes for a convoluted (and sometimes
    fragile) way of working. With Promises, we can simply chain together one or more
    `.then()` statements to handle any outcome, as shown next:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异常式错误传递**：通常在 AJAX 中，我们需要使用一系列的 `if…then…else` 语句，这样做会使工作方式复杂（有时还会脆弱）。使用
    Promises，我们只需链式连接一个或多个 `.then()` 语句来处理任何结果，如下所示：'
- en: '[PRE14]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There is so much more to Promises than we can cover here. For a useful discussion
    on comparing Promises with standard AJAX requests, check out this discussion at
    [http://stackoverflow.com/a/22562045](http://stackoverflow.com/a/22562045).
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 Promises，有很多内容我们无法在这里详细介绍。关于将 Promises 与标准 AJAX 请求进行比较的有用讨论，请查看[此处的讨论](http://stackoverflow.com/a/22562045)。
- en: Remember the code we examined back in *Using callbacks to handle multiple AJAX
    requests*? The key drawback of using multiple callbacks is the resulting mess
    (and ultimately the impact on performance of our site) – clearly we need a better
    alternative!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们之前审查的关于*使用回调函数处理多个 AJAX 请求*的代码吗？使用多个回调函数的主要缺点是结果混乱（最终影响了我们网站的性能）——显然我们需要一个更好的替代方案！
- en: 'The beauty about Deferreds and Promises is that it allows us to restructure
    the code to make it easier to read. This includes not only the commands that we
    need to run as part of the requests, but also what happens if they succeed or
    fail. Let''s revisit that code extract from earlier, and see what it looks like
    when rewritten to use Deferreds / Promises:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Deferreds 和 Promises 的美妙之处在于它允许我们重构代码，使其更易于阅读。这不仅包括我们需要作为请求的一部分运行的命令，还包括成功或失败时发生的情况。让我们重新审视一下之前的代码片段，并看看当重写为使用
    Deferreds / Promises 时会是什么样子：
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Hopefully you will agree that it looks significantly cleaner, and that we can
    now run multiple requests from a single process, without having to wait for each
    to complete before moving onto the next request!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您会同意，它看起来明显更清晰了，现在我们可以从单个过程中运行多个请求，而不必等待每个请求完成后再进行下一个请求！
- en: Time now for some code, I think – let's make use of Deferreds and Promises,
    and build a demo that uses AJAX. We'll see how we can use it to respond to form
    submissions, without the need for a page refresh.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是编写一些代码的时候了，我认为——让我们利用 Deferreds 和 Promises，并构建一个使用 AJAX 的演示。我们将看到如何使用它来响应表单提交，而无需刷新页面。
- en: Modifying our advance contact form
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改我们的高级联系表单
- en: In the first part of our real-world example, we're going to reuse and develop
    the basic AJAX form that we created earlier in this chapter, and from the *Developing
    an advanced file upload form using jQuery* demo in [Chapter 4](part0037.xhtml#aid-1394Q1
    "Chapter 4. Working with Forms"), *Working with Forms*. We will adjust it to display
    confirmation of submission using AJAX, and for confirmation to also appear as
    an e-mail.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实际示例的第一部分中，我们将重新使用并开发本章前面创建的基本 AJAX 表单，并从[第 4 章](part0037.xhtml#aid-1394Q1
    "Chapter 4. Working with Forms")中的 *使用 jQuery 开发高级文件上传表单* 演示中获取，*与表单一起工作*。我们将调整它以使用
    AJAX 显示提交确认，并且确认也会显示为电子邮件。
- en: 'For this exercise, we will need to avail ourselves of a couple of tools:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们需要准备一些工具：
- en: A local web server installed using default settings – options include WAMP (for
    PC – [http://www.wampserver.de](http://www.wampserver.de) or [http://www.wampserver.com/en/](http://www.wampserver.com/en/)),
    or MAMP (for Mac, [http://www.mamp.info/en/](http://www.mamp.info/en/)). Linux
    users will likely already have something available as part of their distribution.
    You will need to ensure that your version of PHP is 5.4 or greater, as the code
    relies on functionality that breaks if an older version is used. You can also
    try the cross-platform solution XAMPP, available from [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)
    (note that the Test Mail tool is not needed if you use this option – e-mail support
    is included in XAMPP).
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用默认设置安装本地 Web 服务器 - 选项包括 WAMP（适用于 PC - [http://www.wampserver.de](http://www.wampserver.de)
    或 [http://www.wampserver.com/en/](http://www.wampserver.com/en/)），或者 MAMP（适用于
    Mac，[http://www.mamp.info/en/](http://www.mamp.info/en/)）。Linux 用户可能已经作为其发行版的一部分拥有可用的工具。您需要确保您的
    PHP 版本为 5.4 或更高，因为代码依赖于如果使用较旧版本将会中断的功能。您也可以尝试跨平台解决方案 XAMPP，可从 [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)
    获取（请注意，如果使用此选项则不需要测试邮件工具 - 电子邮件支持已包含在 XAMPP 中）。
- en: The free Test Mail Server tool (Windows only), available from [http://www.toolheap.com/test-mail-server-tool/](http://www.toolheap.com/test-mail-server-tool/)
    E-mailing from a local web server can be difficult to set up, so this brilliant
    tool monitors port 25 and provides local e-mailing capabilities. For Mac, you
    might try the instructions at [https://discussions.apple.com/docs/DOC-4161](https://discussions.apple.com/docs/DOC-4161);
    Linux users can try following the steps outlined at [http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html](http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html).
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费的测试邮件服务器工具（仅限 Windows），可从 [http://www.toolheap.com/test-mail-server-tool/](http://www.toolheap.com/test-mail-server-tool/)
    获取。从本地 Web 服务器发送电子邮件可能很难设置，因此这个出色的工具监视端口 25 并提供本地发送电子邮件的功能。对于 Mac，您可以尝试[https://discussions.apple.com/docs/DOC-4161](https://discussions.apple.com/docs/DOC-4161)中的说明；Linux
    用户可以尝试遵循[http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html](http://cnedelcu.blogspot.co.uk/2014/01/how-to-set-up-simple-mail-server-debian-linux.html)中概述的步骤。
- en: Access to an e-mail package from the PC or laptop that is being used – this
    is required to receive the e-mails that are sent using the Test Mail Server tool.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问正在使用的个人电脑或笔记本电脑的电子邮件包 - 这是接收使用测试邮件服务器工具发送的电子邮件所必需的。
- en: 'Okay – with the tools in place, let''s make a start:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 好的 - 工具已经准备就绪，让我们开始吧：
- en: We're going to start by opening a copy of the code download that accompanies
    this book, and extracting the `ajaxform` folder; this contains the markup, styling,
    and assorted files for our demo. We need to save the folder into the web server's
    `WWW` folder, which (for PC) will usually be `C:\wamp\www`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从打开附带本书的代码下载的副本开始，并提取`ajaxform`文件夹；这个文件夹包含我们演示的标记、样式和各种文件。我们需要将该文件夹保存到 Web
    服务器的`WWW`文件夹中，对于 PC（通常为`C:\wamp\www`）。
- en: The markup is relatively straightforward, and very similar to what we've already
    seen throughout this chapter.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标记相对简单，并且与本章中我们已经看到的非常相似。
- en: 'We need to make one small change to the `mailer.php` file – open it in your
    text editor of choice, and then look for the following line:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对`mailer.php`文件进行一个小小的更改 - 在您选择的文本编辑器中打开它，然后查找以下行：
- en: '[PRE16]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Change `<ENTER EMAIL HERE>` to a valid e-mail address that you can use to check
    that an email has appeared afterwards.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`<ENTER EMAIL HERE>`更改为您可以用来检查邮件是否出现的有效电子邮件地址。
- en: 'The magic for this demo happens within `ajax.js`, so let''s take a look at
    that now, beginning with setting some variables:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个演示的魔法发生在`ajax.js`中，所以现在让我们来看一下，首先设置一些变量：
- en: '[PRE17]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We start the real magic here, when the **Send** button is pressed. We first
    prevent the form from submitting (as it''s default action), then serialize the
    form data into a string, for submission:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当按下**发送**按钮时，我们开始了真正的魔术。我们首先阻止表单提交（因为它的默认操作），然后将表单数据序列化为一个字符串以进行提交：
- en: '[PRE18]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The core of the AJAX action on this form is next. This function sets the type
    of request to make, where the content will be sent to, and the data to send:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是此表单的AJAX操作的核心。此函数设置要执行的请求类型，内容将被发送到哪里，以及要发送的数据：
- en: '[PRE19]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We then add the two functions to determine what should happen – first one deals
    with successful submission of our form:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们添加了两个函数来确定接下来该发生什么 - 第一个处理表单成功提交的情况：
- en: '[PRE20]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next comes the function that handles the outcome if form submission fails:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是处理表单提交失败结果的函数：
- en: '[PRE21]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Start the Email Test Server Tool by double-clicking on it. If we preview the
    form in a browser, and fill out some valid details, we should see the following
    image when submitting:![Modifying our advance contact form](img/image00380.jpeg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击启动电子邮件测试服务器工具。如果我们在浏览器中预览表单，并填写一些有效的详细信息，当提交时我们应该会看到以下图片：![修改我们的高级联系表单](img/image00380.jpeg)
- en: Our form is now in place and is able to submit, with confirmation appearing
    by e-mail within a few moments. We will revisit the use of AJAX within jQuery
    in greater depth in the next chapter; for now let's move on and continue to develop
    our form.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单现在已经就位，并且能够提交，确认邮件将在几分钟内出现。在下一章中，我们将更深入地讨论jQuery中的AJAX使用；现在让我们继续开发我们的表单。
- en: Adding file upload capabilities using AJAX
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用AJAX添加文件上传功能
- en: Adding a file upload function is relatively straightforward; it requires both
    client and server-side components to function correctly.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 添加文件上传功能相对简单；它需要客户端和服务器端组件才能正常运行。
- en: 'In our example, we''re going to focus more on the client-side functionality.
    For the purpose of the demo, we will upload files to a fake folder stored within
    the project area. To give you an idea of what we will build, following is a screenshot
    of the completed example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将更专注于客户端功能。为了演示目的，我们将上传文件到项目区域内的一个虚拟文件夹。以下是我们将构建的内容示例的屏幕截图：
- en: '![Adding file upload capabilities using AJAX](img/image00381.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![使用AJAX添加文件上传功能](img/image00381.jpeg)'
- en: To help us along with this demo, we're going to use the BlueImp file upload
    plugin; at over 1300 lines long, it's a very comprehensive plugin! This, along
    with BlueImp's PHP-based file manipulation plugin and some additional jQuery UI,
    will help with creating a useable file upload facility.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们进行这个演示，我们将使用BlueImp文件上传插件；它超过1300行代码，是一个非常全面的插件！这个插件与BlueImp的基于PHP的文件处理插件以及一些额外的jQuery
    UI 一起，将有助于创建一个可用的文件上传设施。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Copies of the plugin files are available in the code download that accompanies
    this book, or from [https://github.com/blueimp/jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 插件文件的副本可在伴随本书的代码下载中找到，也可以在[https://github.com/blueimp/jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload)上找到。
- en: 'Let''s make a start:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: We'll begin by extracting a copy of the `ajaxform-files` folder that is in the
    code download that accompanies this book – this contains the BlueImp file upload
    plugins, along with some additional custom CSS and JavaScript files.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先提取伴随本书的代码下载中`ajaxform-files`文件夹的副本 - 这个文件夹中包含了BlueImp文件上传插件，以及一些额外的自定义CSS和JavaScript文件。
- en: Add the files from the `ajaxform-files` folder into the `ajaxform` folder that
    is stored within the webserver folder; the JavaScript files should go in the `js`
    folder, the CSS stylesheet into the `css` folder, and the 2 PHP files can be dropped
    into the root of our `ajaxform` folder.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ajaxform-files`文件夹中的文件添加到存储在web服务器文件夹内的`ajaxform`文件夹中；JavaScript文件应放在`js`文件夹中，CSS样式表应放在`css`文件夹中，而2个PHP文件可以放在我们的`ajaxform`文件夹的根目录中。
- en: 'Next, we need to open a copy of the `ajaxform.html` file from the previous
    exercise – we first need to add a link to `fileupload.css`, which will contain
    some additional styles for our upload form:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要打开上一个练习中的`ajaxform.html`文件的副本 - 我们首先需要添加一个链接到`fileupload.css`，其中包含了我们上传表单的一些额外样式：
- en: '[PRE22]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We also need to reference the additional JavaScript files that we''ve just
    downloaded – add the highlighted links below the reference to `ajax.js` as shown
    here:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们同样需要引用我们刚刚下载的额外JavaScript文件 - 将以下突出显示的链接添加到`ajax.js`的引用下面，如下所示：
- en: '[PRE23]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next up comes some markup changes to `index.html`. So in `ajaxform.html`, go
    ahead and first alter the title as shown next:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是对`index.html`的一些标记更改。因此，在`ajaxform.html`中，首先按照下面的步骤更改标题：
- en: '[PRE24]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We now need to add the file upload code, so immediately after closing the `</div>`
    tag of the message field, add the following code:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加文件上传代码，所以在消息字段的`</div>`标签关闭后立即添加以下代码：
- en: '[PRE25]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Save all your files.—If we preview the results using our local web server, then
    we should expect to see an updated form that now shows a file upload area at the
    bottom of the form.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件。—如果我们使用本地 Web 服务器预览结果，那么我们应该期望看到更新后的表单，现在在表单底部显示一个文件上传区域。
- en: Tip
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you would like to see a version with the changes already made, then there
    is a completed version of this code in the code download that accompanies this
    book, in the `ajaxform-completed` folder.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想看到已经进行了更改的版本，那么在随附本书的代码下载中的`ajaxform-completed`文件夹中有一个完成的代码版本。
- en: Examining the use of Promises and Deferreds in the demo
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查演示中使用 Promises 和 Deferreds
- en: Although our changes in the second part of this demo are relatively straightforward
    to make, they hide a wealth of functionality. To get a feel of how AJAX can be
    used, it is worth looking through the source code of the `jquery.fileupload.js`
    plugin in detail.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在此演示的第二部分中所做的更改相对简单，但它们隐藏了丰富的功能。要了解 AJAX 的使用方式，有必要详细查看`jquery.fileupload.js`插件的源代码。
- en: 'If we open a copy of `ajax.js`, we can see clear use of jQuery''s Deferred
    object, in the form of `.done()`, as shown in the following extract:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开`ajax.js`的副本，我们可以清楚地看到 jQuery 的 Deferred 对象的使用，形式为`.done()`，如下所示的摘录：
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If however, our AJAX code had failed, jQuery would be executing the methods
    or functions outlined in the `.fail()` event handler:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们的 AJAX 代码失败了，jQuery 将执行`.fail()`事件处理程序中概述的方法或函数：
- en: '[PRE27]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we switch to looking at the code in `uploadfiles.js`, we could be forgiven
    for thinking that it doesn't use AJAX at all. On the contrary, AJAX is used, but
    in the `jquery.fileupload.js` plugin.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们转而查看`uploadfiles.js`中的代码，我们可能会认为它根本没有使用 AJAX。相反，AJAX 被使用了，但是在`jquery.fileupload.js`插件中。
- en: 'If we open up the plugin file in a text editor, we can see lots of instances
    where Deferreds and Promises. Let''s take a look at some extracts as examples:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在文本编辑器中打开插件文件，我们可以看到很多 Deferreds 和 Promises 的实例。让我们看一些摘录作为示例：
- en: 'From the `upload` method – lines 762-766:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`upload`方法 - 第 762-766 行：
- en: '[PRE28]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the same method, but this time from lines 794-804:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一方法中，但这次是从第 794-804 行：
- en: '[PRE29]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This time, from the private `_onSend` method, at lines 900-904:'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这次，从私有的`_onSend`方法，在第 900-904 行：
- en: '[PRE30]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: These are just some examples of how we can use Deferreds and Promises to enhance
    our code. Hopefully this has given a flavor of what is possible, and how we can
    dramatically improve not only the readability of our code, but also the resulting
    performance of our projects.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些示例，说明了我们如何使用 Deferreds 和 Promises 来增强我们的代码。希望这给您留下了一些可能性的味道，以及我们如何显着改善代码的可读性以及项目的性能。
- en: Detailing AJAX best practices
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 详细介绍 AJAX 最佳实践
- en: Throughout this chapter, we've revisited the basics, and explored some of the
    techniques we can use to take our knowledge of AJAX to the next level – the key
    being that it is not necessarily just about coding, but visiting some of those
    tips and tricks that help make us a more rounded developer.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们重新访问了基础知识，并探讨了一些可以用来提升 AJAX 知识的技巧 - 关键不仅仅是编码，还有一些提示和技巧，可以帮助我们成为更全面的开发人员。
- en: 'In *Working with Deferreds and Promises* section, we explored the basics of
    using jQuery''s Deferreds and Promises, and how the change in architecture when
    using them can lead to significant improvements in performance. Before we round
    up this chapter, there are some additional best practices that we should follow
    wherever possible. Following list explains them:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在“使用 Deferreds 和 Promises”部分，我们探讨了使用 jQuery 的 Deferreds 和 Promises 的基础知识，以及在使用它们时架构的变化如何导致性能显著提高。在我们总结本章之前，有一些额外的最佳实践，我们应该尽可能遵循。以下列表解释了它们：
- en: There is no need to call `.getJson()` or `.get()` directly. These are called
    when using the `$.ajax()` object by default.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有必要直接调用`.getJson()`或`.get()`。这些在使用`$.ajax()`对象时默认调用。
- en: Don't mix protocols when calling requests. The preference is to use schemaless
    requests where possible.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用请求时不要混合协议。最好尽可能使用无模式请求。
- en: 'If you are just making GET requests, try to avoid putting request parameters
    in the URL – instead send them using the `data` object setting, thus:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您只是进行 GET 请求，请尽量避免将请求参数放在 URL 中 - 而是使用 `data` 对象设置来发送它们，如下所示：
- en: '[PRE31]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Try to specify the `dataType` setting so it's easier to know what kind of data
    you are working with. For an example, please refer to the *Creating a simple example
    using AJAX*, from earlier section in the chapter.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试指定 `dataType` 设置，以便更容易知道您正在处理的数据类型。例如，请参考本章前一节中的 *使用 AJAX 创建简单示例*。
- en: 'Use delegated event handlers for attaching events to content loaded using AJAX.
    Delegated events can process events from descendant elements that are added to
    the document at a later time:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用委托事件处理程序将事件附加到使用 AJAX 加载的内容。委托事件可以处理稍后添加到文档中的后代元素的事件：
- en: '[PRE32]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Tip
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To learn more, please refer to [http://api.jquery.com/on/#direct-and-delegated-events](http://api.jquery.com/on/#direct-and-delegated-events).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多，请参阅[http://api.jquery.com/on/#direct-and-delegated-events](http://api.jquery.com/on/#direct-and-delegated-events)。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'AJAX as a technology has been around for years. It can arguably be seen as
    a game-changer, where the use of JavaScript killed the need to continually refresh
    page content within a browser. jQuery has helped to enhance this group of technologies.
    In this chapter we revisited some of the basics, before exploring how best to
    take our development skills further. Let''s recap what we''ve learnt:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX 作为一种技术已经存在多年。可以说它是一个改变游戏规则的技术，在这里，JavaScript 的使用消除了在浏览器中不断刷新页面内容的需求。jQuery
    已经帮助增强了这一系列技术。在本章中，我们重新审视了一些基础知识，然后探讨了如何更好地提升我们的开发技能。让我们回顾一下我们学到的内容：
- en: We kicked off with a brief look back at what AJAX is, and reminded ourselves
    of the basics of constructing an AJAX request within jQuery.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先简要回顾了 AJAX 是什么，并提醒自己构建 jQuery 中 AJAX 请求的基础知识。
- en: Next, we took a look at some of the tips and tricks we can use to improve the
    speed of loading from static sites; we picked up one additional trick in the form
    of using localStorage to cache content. We then moved onto discussing how implementing
    callbacks can make code messy and slow, before moving onto seeing how Deferreds
    and Promises can improve our code, and ultimately the performance of our sites.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看了一些可以用来提高静态站点加载速度的技巧；我们学到了一项额外的技巧，即使用 localStorage 缓存内容。然后，我们讨论了如何实现回调可能会使代码混乱和缓慢，然后转而看到
    Deferreds 和 Promises 如何改进我们的代码，最终改进了我们的站点的性能。
- en: We finished off with a look at a demo, where we borrowed one of the forms from
    [Chapter 4](part0037.xhtml#aid-1394Q1 "Chapter 4. Working with Forms"), *Working
    with Forms*, and extended it by first adding an AJAX based-notification, then
    by making use of the BlueImp plugin to incorporate a file upload facility, that
    made use of Deferreds and Promises.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了一个演示，在这个演示中，我们借用了[第 4 章](part0037.xhtml#aid-1394Q1 "第 4 章。与表单一起工作")中的一个表单，*与表单一起工作*，并通过首先添加基于
    AJAX 的通知，然后利用 BlueImp 插件来扩展它，以实现一个文件上传功能，该功能利用了 Deferreds 和 Promises。
- en: In the next chapter, we're going to expand on one of my personal favorites.
    It's time to get animated, as we take a look at using jQuery to bring life to
    elements on our websites.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究我个人最喜欢的一个主题。是时候加入动画了，我们将看看如何使用 jQuery 为我们的网站元素赋予生命。
