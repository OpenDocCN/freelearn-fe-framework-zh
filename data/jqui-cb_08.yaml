- en: Chapter 8. Using Sliders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。使用滑块
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Controlling the size of the slider handle
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制滑块手柄的大小
- en: Removing the handle focus outline
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除焦点轮廓
- en: Using master sliders and child sliders
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主滑块和子滑块
- en: Marking step increments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记步进增量
- en: Getting range values
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取范围值
- en: Changing the slider orientation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改滑块方向
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The **slider** widget is almost like a progress bar that the user can manipulate.
    The slider gives the user a handle that can be dragged along a plane in order
    to produce the desired value. This is especially useful in working with form values.
    The slider widget, by default, has useful options such as the ability to change
    orientation and letting the user select a value range. In this chapter, we'll
    look at some of the various ways we can tweak the slider widget by adding new
    options, or by attaching even handler functions. We'll also look at some visual
    tweaks, and how slider instances can communicate with one another.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**滑块**部件几乎就像一个用户可以操纵的进度条。滑块给用户一个手柄，可以沿平面拖动以产生所需值。这在处理表单值时尤其有用。滑块部件默认具有有用的选项，如更改方向的能力和允许用户选择值范围。在本章中，我们将看看通过添加新选项或附加事件处理函数来调整滑块部件的各种方法。我们还将研究一些视觉调整以及滑块实例如何相互通信。'
- en: Controlling the size of the slider handle
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制滑块手柄的大小
- en: The **slider handle** used to control the position of the slider, dragged by
    the mouse, is a square shape. That is, the width is the same as the height, and
    we may want a different shape for the slider handle. In the case of a **horizontal
    slider**, the default orientation, let's look at how we can override widget CSS
    styles to alter the shape of the slider handle in order to meet the needs of our
    application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用于控制滑块位置的**滑块手柄**，由鼠标拖动，是一个正方形。也就是说，宽度与高度相同，而我们可能想要不同形状的滑块手柄。在**水平滑块**的情况下，即默认方向，让我们看看如何通过覆盖部件
    CSS 样式来改变滑块手柄的形状，以满足我们应用程序的需求。
- en: Getting ready...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好...
- en: The HTML we'll create is for two slider widgets. We'll also give them a label
    and wrap them each with container div elements to control the layout.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的 HTML 是两个滑块部件。我们还将为它们添加标签，并将它们各自包装在容器 div 元素中以控制布局。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here is the CSS used to customize the slider handle. This overrides values
    defined in the widget CSS, and so should be included in the page after the jQuery
    UI stylesheet:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于自定义滑块手柄的 CSS。这覆盖了部件 CSS 中定义的值，因此应包含在 jQuery UI 样式表之后的页面中：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here is the JavaScript code used to create two instances of the slider
    widget:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于创建两个滑块部件实例的 JavaScript 代码：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As a reference, here is what the two slider widgets look like before applying
    our custom CSS:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，这是应用我们自定义 CSS 前两个滑块部件的外观：
- en: '![How to do it...](img/2186_08_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_08_01.jpg)'
- en: 'And here are the same two slider widgets with our custom CSS applied:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用我们自定义 CSS 后的相同两个滑块部件：
- en: '![How to do it...](img/2186_08_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_08_02.jpg)'
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: As you can see, the handle is taller, extending farther beyond the boundary
    of the slider borders. This gives the user a larger surface area to click and
    drag the slider handle around. The exact size changes we've introduced are arbitrary,
    and can be tweaked on a per-application basis.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，手柄变得更高，延伸到滑块边界之外。这为用户提供了更大的点击和拖动滑块手柄的表面积。我们引入的确切尺寸变化是任意的，可以根据每个应用程序进行调整。
- en: The `.ui-slider-horizontal .ui-slider-handle` selector overrides three properties
    defined in the widget CSS. The width is changed to `0.8em`, which makes it slightly
    thinner. The `height` property's value is changed to `1.6em`, which makes it taller.
    When we make the handle taller using the `height` property, we push it downward
    so that it no longer aligns with the slider. To compensate for the change in height,
    we pull it back up by decreasing the `top` value to `-0.48em`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ui-slider-horizontal .ui-slider-handle` 选择器覆盖了部件 CSS 中定义的三个属性。宽度被改变为 `0.8em`，使其略微变细。`height`
    属性的值被改为 `1.6em`，使其变得更高。当我们使用 `height` 属性使手柄变高时，我们将其向下推，以使其不再与滑块对齐。为了弥补高度变化，我们通过减少
    `top` 值来将其拉回上来，直到 `-0.48em`。'
- en: Removing the handle focus outline
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除焦点轮廓
- en: Most browsers display a dotted or solid **outline** around an element when they
    receive the focus. This isn't part of the user interface style, but rather a built-in
    accessibility feature of the browser. This forced visual display around elements,
    such as the slider handle, isn't always desirable. Let's look at how we can go
    about removing this default browser behavior from the slider handle.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器在接收到焦点时在元素周围显示虚线或实线**轮廓**。这不是用户界面样式的一部分，而是浏览器内置的辅助功能特性。例如，滑块手柄周围的这种强制视觉显示并不总是理想的。让我们看看我们如何取消滑块手柄的默认浏览器行为。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: We can use any basic `div` element to base our sample slider widget on. So let's
    jump right to our custom slider widget CSS.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用任何基本的`div`元素来构建我们的示例滑块小部件。所以让我们直接跳转到我们的自定义滑块小部件 CSS。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And, now we have our customized implementation of the slider widget and an instance
    of our customized slider.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了我们的滑块小部件的自定义实现和我们自定义滑块的一个实例。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before we applied our changes to the slider widget, the handle had an outline
    that looked something like this after being dragged:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在对滑块小部件应用我们的更改之前，拖动手柄后轮廓看起来如下所示：
- en: '![How to do it...](img/2186_08_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](img/2186_08_03.jpg)'
- en: 'After our changes have been applied to the slider widget, our slider instance
    looks like this after the handle is dragged:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在对滑块小部件应用我们的更改后，拖动手柄后我们的滑块实例如下所示：
- en: '![How to do it...](img/2186_08_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](img/2186_08_04.jpg)'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We've added a new option to the slider widget called `handleOutline`. We've
    set this option to `true` by default because it's always a good idea to support
    native browser behavior out of the box. This option, when set to `false`, turns
    off this native border outline functionality. It does so by adding `the ui-slider-handle-no-outline`
    class to each handle element in the slider. There can be many handles in one slider,
    for example, a range slider. So in the `_create()` method, we check if the `handleOutline`
    option is `true`, and if so, we use the `handles` jQuery object stored as a property
    of this widget to apply the new class we've created.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为滑块小部件添加了一个名为`handleOutline`的新选项。我们将此选项默认设置为`true`，因为始终支持原生浏览器行为是一个好主意。当此选项设置为`false`时，该选项会关闭此原生边框轮廓功能。它通过向滑块中的每个手柄元素添加`ui-slider-handle-no-outline`类来实现。一个滑块中可以有很多手柄，例如，一个范围滑块。因此，在`_create()`方法中，我们检查`handleOutline`选项是否为`true`，如果是，我们使用存储为该小部件属性的`handles`
    jQuery 对象来应用我们创建的新类。
- en: The class itself is simple in that it only changes one property. In fact, we
    could have simply added the `outline` property with a value of `0` to the `ui-slider-handle`
    class instead of creating a new one. However, our chosen approach allows us to
    keep the native widget styles intact, which allows the outline browser functionality
    to toggle on or off for each instance of our widget. You'll also notice that the
    handle, even without the native browser outline, doesn't lose any accessibility
    because the jQuery UI state classes take care of this for us.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 类本身很简单，因为它只改变了一个属性。事实上，我们可以简单地将`outline`属性添加到`ui-slider-handle`类中，值为`0`，而不是创建一个新类。但是，我们选择的方法允许我们保持本地小部件样式不变，这样可以让轮廓浏览器功能为我们的小部件的每个实例切换打开或关闭。您还会注意到，即使没有本地浏览器轮廓，手柄也不会失去任何可访问性，因为
    jQuery UI 状态类为我们处理了这个问题。
- en: Using master sliders and child sliders
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主滑块和子滑块
- en: It is possible that your application will use some quantity that can be further
    decomposed into smaller values. Additionally, the user may need to control these
    smaller values and not just the aggregate. If we decide to use the slider widget
    for this purpose, we can think of the child sliders observing the changing value
    of the master slider. Let's take a look at how we might go about implementing
    such a group of sliders. We'll design an interface that allows us to allocate
    how much of the CPU this application is allowed to use. This is the **master slider**.
    We'll assume a quad-core architecture, and so we'll have four subsequent sliders
    that depend on, and observe, the main CPU slider.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可能会使用一些可以进一步分解为较小值的数量。此外，用户可能需要控制这些较小值，而不仅仅是聚合值。如果我们决定使用滑块小部件来实现这个目的，我们可以想象子滑块观察主滑块的变化值。让我们看看如何实现这样一组滑块。我们将设计一个界面，允许我们分配该应用程序可以使用多少
    CPU。这是**主滑块**。我们假设一个四核架构，因此我们将有四个依赖于主 CPU 滑块并观察主 CPU 滑块的子滑块。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Here is the HTML used to define the layout of our five sliders. Each slider
    has its own `div` container, mainly used to define widths and margins. Inside
    the `div` container, we have a label of each CPU, their current MHz allotment,
    and the maximum. This is where each slider widget is placed too.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是用于定义我们的五个滑块布局的 HTML。每个滑块都有自己的 `div` 容器，主要用于定义宽度和边距。在 `div` 容器内，我们有每个 CPU
    的标签，它们的当前 MHz 分配和最大值。这也是放置每个滑块小部件的地方。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we have some CSS styles to help align and position these components.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一些 CSS 样式来帮助对齐和定位这些组件。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, we have our JavaScript code that extends the slider widget to provide
    developers using it with two new options, `parent` and `percentage`. When the
    document loads, we instantiate our CPU slider widgets and establish the appropriate
    relations between them using our new slider capabilities.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有我们的 JavaScript 代码，该代码扩展了滑块小部件，为使用它的开发人员提供了两个新选项，`parent` 和 `percentage`。文档加载时，我们实例化了我们的
    CPU 滑块小部件，并利用我们的新滑块功能来建立它们之间的适当关系。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Take a look at the resulting slider widgets in the browser and adjust some of
    the child CPU values. You'll notice that the label updates have changed and that
    each CPU has its own CPU allotment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看结果滑块小部件，并调整一些子 CPU 值。您会注意到标签更新已经改变，并且每个 CPU 都有其自己的 CPU 分配。
- en: '![How to do it...](img/2186_08_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_08_05.jpg)'
- en: Now, leaving the CPU values as they are, try adjusting the master CPU allocation
    slider. You'll notice that the current and maximum values for each child CPU slider
    change, but the ratio is preserved. This means that if we've set up CPU 1 to use
    10 percent of the overall CPU allocation, it will continue to use 10 percent even
    if the overall allocation increases or decreases.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保持 CPU 值不变，尝试调整主 CPU 分配滑块。您会注意到每个子 CPU 滑块的当前值和最大值都会改变，但比例是保持不变的。这意味着如果我们设置
    CPU 1 使用总体 CPU 分配的 10%，即使总体分配增加或减少，它仍将继续使用 10%。
- en: '![How to do it...](img/2186_08_06.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_08_06.jpg)'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In each container `div` element we've created for CPU sliders, we have a header,
    `slider-value`, used to display both the current value of the slider in addition
    to the maximum value. This is an important addition we need to consider in most
    cases while using the slider widget. The widget is great for allowing the user
    to change values, but they need specific feedback that shows the result of their
    actions. In this example, changing the master slider updates five labels, further
    highlighting the need to label specific slider values outside the widget where
    the user can see them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为 CPU 滑块创建的每个容器 `div` 元素中，我们都有一个名为 `slider-value` 的头部，用于显示滑块的当前值以及最大值。这是一个需要在大多数情况下考虑的重要补充，而滑块小部件则非常适合让用户更改值，但他们需要特定的反馈来显示他们操作的结果。在这个例子中，更改主滑块会更新五个标签，进一步凸显了在用户能够看到的滑块外部标记特定滑块值的必要性。
- en: We've added two new options to the slider widget, `parent` and `percentage`.
    The two options are related to each other and basically translate to "the maximum
    value of this slider is this percentage of this parent slider value". In the `_create()`
    method, we're checking if both these options have an actual value before continuing,
    as they default to `null`. If not, we've already called the original slider constructor
    using the `_super()` method, and so it's safe for us to simply return.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在滑块小部件中新增了两个选项，`parent` 和 `percentage`。这两个选项彼此相关，基本上可以理解为"此滑块的最大值是其父级滑块值的百分比"。在
    `_create()` 方法中，我们在继续之前会检查这两个选项是否有实际值，因为它们默认为`null`。如果没有值，我们已经使用 `_super()` 方法调用了原始滑块构造函数，因此我们可以安全地返回。
- en: If, on the other hand, we've been given a parent slider widget and a percentage,
    we call the `_reset()` method, passing it the current value of our parent slider.
    This will potentially update both the maximum and the current value of this widget.
    Once that is done, we set up our observer that watches the parent slider for changes.
    This is done using the `_on()` method, where we pass `parent` as the element we're
    listening for events on and the configuration object. This object has a `slidechange`
    event, which is the event we're interested in, and the callback function. Inside
    the callback function, we're simply calling our `_reset()` method using the updated
    value from the parent. It is worth noting that we must use `_on()` to register
    our event handler. If the child slider is destroyed, the event handler is removed
    from the parent.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们已经得到了一个父级滑块小部件和一个百分比，我们将调用`_reset()`方法，并将当前值传递给我们的父级滑块。这将可能更新此小部件的最大值和当前值。完成这些操作后，我们设置了一个观察者，用于观察父级滑块的更改。这是使用`_on()`方法完成的，我们在其中传递`parent`作为我们正在监听事件的元素以及配置对象。该对象具有一个`slidechange`事件，这是我们感兴趣的事件，以及回调函数。在回调函数内部，我们只是使用来自父级的更新值简单地调用了我们的`_reset()`方法。值得注意的是，我们必须使用`_on()`来注册我们的事件处理程序。如果销毁了子滑块，事件处理程序将从父级中删除。
- en: The `_reset()` method takes a value from the parent slider and resets both the
    `value` and `max` options of this child slider. We're using this method both when
    the child is first created and when the parent value changes. The goal is to preserve
    the current value/max ratio. This is where the `percent` option comes into play.
    Since this is passed to the widget as an integer, we must multiply it by `0.01`.
    This is how we calculate that new maximum for this child. Once we have the new
    maximum value, we can scale the current value either up or down.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`_reset()`方法接受来自父级滑块的值，并重置此子滑块的`值`和`最大`选项。我们在首次创建子元素和父元素值更改时都使用此方法。目标是保持当前值/最大值比率。这就是`percent`选项发挥作用的地方。由于这作为整数传递给小部件，我们必须将其乘以`0.01`。这是我们计算出该子级的新最大值的方法。一旦我们有了新的最大值，我们就可以将当前值放大或缩小。'
- en: Finally, in the document-ready event handler where we instantiate each of the
    five slider widgets, we've defined a generic callback function used to update
    the label in each CPU `div`. This gets passed to the create and change options
    of each slider widget. We're also using values for our newly-defined options here.
    Each child slider has a unique `percentage` value of the overall CPU allocation,
    and each child is using `#master` as its `parent`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在文档准备就绪的事件处理程序中，我们实例化了五个滑块小部件，在其中定义了一个用于更新每个 CPU `div` 中标签的通用回调函数。这个函数被传递给了每个滑块小部件的创建和更改选项。我们还在这里使用了我们新定义的选项的值。每个子滑块都有一个独特的总
    CPU 分配的`百分比`值，并且每个子元素都使用`#master`作为其`父级`。
- en: Marking step increments
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记步长增量
- en: The slider widget can be passed a step value, which determines the increments
    by which the user can slide the handle. If unspecified, the `step` option is `1`,
    and the handle slides smoothly back and forth. On the other hand, if the `step`
    value were more pronounced, let's say `10`, we would notice the handle snapping
    into position as we move it. Let's take a look at how we might extend the slider
    widget to give the user a better feel for where these increments lie. We'll mark
    the increments visually using ticks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块小部件可以传递一个步长值，该值确定用户可以滑动手柄的增量。如果未指定，`步长`选项为`1`，手柄会平滑地来回滑动。另一方面，如果`步长`值更加明显，比如`10`，我们会注意到随着移动手柄而手柄会吸附到位置。让我们看看我们如何扩展滑块小部件以使用户更好地感受到这些增量的位置。我们将使用刻度来在视觉上标记增量。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll jump right into the custom CSS used for this widget enhancement. The underlying
    `div` element used for the slider element can be as simple as `<div></div>`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接进入用于此小部件增强的自定义 CSS。用于滑块元素的基础`div`元素可以简单地是`<div></div>`。
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And here is our JavaScript code that extends the slider and creates an instance
    of the widget using the new `ticks` option:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的 JavaScript 代码，扩展了滑块并使用新的`ticks`选项创建了小部件的实例：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Looking at this slider widget, we can see that the `step` value we've specified,
    `20`, is depicted using tick marks underneath the slider.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此滑块小部件，我们可以看到我们指定的`步长`值`20`在滑块下方使用刻度标记来表示。
- en: '![How to do it...](img/2186_08_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_08_07.jpg)'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let's examine the additional capability we've introduced into the slider widget.
    We've added the `ticks` Boolean option, which is turned off by default. This option,
    when true, tells the widget to display the step increments using tick marks. In
    the `_create()` method, we're calling the original implementation of `_create()`
    using `_super()`, as we want the slider constructed as normal. Then, we check
    to see if the `ticks` option has been turned on and if the `step` value is greater
    than `5`. If the `ticks` option has been turned on and we have a `step` value
    that is less than `5`, they'll appear to be close to each other; so we simply
    don't display them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查我们已经引入到滑块小部件中的附加功能。我们添加了`ticks`布尔选项，默认情况下关闭。当这个选项为真时，告诉小部件使用刻度标记显示步进增量。在`_create()`方法中，我们使用`_super()`调用了原始的`_create()`实现，因为我们希望滑块按照正常方式构造。然后，我们检查`ticks`选项是否已打开，以及`step`值是否大于`5`。如果已打开`ticks`选项并且我们有一个小于`5`的`step`值，它们将看起来彼此靠近；所以我们简单地不显示它们。
- en: The `cnt` counter variable controls our tick rendering loop, and is initialized
    to the first `step` above the `min` option. Likewise, the loop exits before the
    `max` option value. This is because we do not want to render tick marks at the
    beginning or the end of the slider, but only the mid section. The `backgroud`
    variable is used to extract the `border-color` CSS property from the slider widget.
    What we're actually doing here is transferring the theme setting to a new element
    we're adding to the widget. This allows the theme to be swapped, and the tick
    marks will change color accordingly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器变量`cnt`控制着我们的刻度渲染循环，并初始化为`min`选项上方的第一个`step`。同样，循环在`max`选项值之前退出。这是因为我们不想在滑块的开头或结尾渲染刻度标记，而只想在中间部分显示。变量`background`用于从滑块小部件中提取`border-color`
    CSS属性。我们实际上在这里所做的是将主题设置传递给我们要添加到小部件中的新元素。这允许主题被交换，刻度标记的颜色也会相应更改。
- en: Inside the `while` loop, we're creating the `div` elements that represent the
    tick marks. The `left` CSS property is computed to actually position the `div`
    so that it lines up with the slider handle as the user moves it around. The `ui-slider-tick`
    CSS class we're adding to the `div` element configures the common properties for
    each tick mark, including the `z-index`, which pushes a portion of the `div` behind
    the main slider bar.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环内，我们正在创建代表刻度标记的`div`元素。`left` CSS 属性被计算为实际定位`div`，使其与用户移动手柄时的滑块手柄对齐。我们将`ui-slider-tick`
    CSS 类添加到`div`元素中，配置每个刻度标记的公共属性，包括`z-index`，将`div`的一部分推到主滑块栏的后面。
- en: Getting range values
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取范围数值
- en: The slider widget can be used to control a range value. So instead of moving
    a fixed point, that is the handle, back and forth over the slider axis, the user
    will move two handles back and forth. The space in between these two points represents
    the range value. But how do we go about computing that number? The slider widget
    gives us the raw data, the upper and lower bounds on the user selection. We can
    use these values inside our event handlers to compute the range value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块小部件可用于控制范围值。因此，用户不是在滑块轴上来回移动一个固定点，即手柄，而是在两个手柄之间来回移动。这两个点之间的空间表示范围值。但是我们如何计算这个数字呢？滑块小部件给我们提供了原始数据，即用户选择的上限和下限。我们可以在我们的事件处理程序中使用这些值来计算范围值。
- en: Getting ready...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: 'We''ll use just a basic slider for this demonstration, but we''ll need some
    supporting CSS and HTML surrounding the slider so that we can display the range
    values as they''re changed. Here is the CSS:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅使用基本的滑块进行演示，但我们需要一些支持的 CSS 和 HTML 来包围滑块，以便在更改时显示范围值。以下是 CSS：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And here is the HTML:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 HTML 代码：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: We'll create the `slider` instance using the following JavaScript code. Note
    that we're passing options specific to supporting range selections.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下 JavaScript 代码创建`slider`实例。请注意，我们传递了支持范围选择的特定选项。
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now when you view this slider in your browser, you'll notice that the range
    value is displayed as a label outside the widget. And, if you move either one
    of the slider handles, the label will reflect the changed range value.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您在浏览器中查看此滑块时，您会注意到范围值显示为小部件外的标签。而且，如果您移动滑块手柄中的任何一个，标签将反映更改的范围值。
- en: '![How to do it...](img/2186_08_08.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法...](img/2186_08_08.jpg)'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this example, we''re creating a simple slider widget that uses a range of
    values instead of just a single value. We do this by passing an array of values
    to the widget constructor, and by passing a `range` value of `true` to the constructor
    as well. This is how the widget knows to use two handles instead of one, and to
    fill in the space between them. We''re also passing the slider constructor with
    two event callback functions: one for the `create` event and the other for the
    `change` event.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在创建一个简单的滑块小部件，它使用一系列值而不是单个值。我们通过将值数组传递给小部件构造函数，并将`range`值传递给构造函数，以此来实现。这就是小部件知道要使用两个手柄而不是一个，并填充它们之间的空间的方式。我们还将滑块构造函数与两个事件回调函数一起传递：一个用于`create`事件，另一个用于`change`事件。
- en: 'The two callbacks do the same thing: they compute the range value and display
    it in our `#range-value` label. The two callbacks, however, implement the same
    logic in a slightly different manner. The `create` callback doesn''t have the
    `values` array as part of the `ui` object, which is used to hold widget data.
    So, our workaround here is the use of the `uiSlider` data, which holds an instance
    of the JavaScript slider widget instance in order to access the `values()` method.
    This returns the same data that we find in the `ui` object passed to the change
    event callback.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个回调函数执行相同的操作：它们计算范围值并将其显示在我们的`#range-value`标签中。然而，这两个回调函数以稍微不同的方式实现相同的逻辑。`create`回调函数不包含`ui`对象的`values`数组，该数组用于保存小部件数据。因此，在这里我们的解决方法是使用`uiSlider`数据，该数据保存了JavaScript滑块小部件实例，以便访问`values()`方法。这将返回传递给change事件回调函数的`ui`对象中找到的相同数据。
- en: The number we're computing here is simply the value of the first handle, minus
    the value of the second. For example, if we're using a slider such as this in
    a form, the API might not care about the two values as represented by the two
    slider handles, but only the range value derived by the two numbers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里计算的数字只是第一个手柄的值减去第二个手柄的值。例如，如果我们在表单中使用这样的滑块，API可能不关心由两个滑块手柄表示的两个值，而只关心由这两个数字导出的范围值。
- en: Changing the slider orientation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改滑块方向
- en: By default, the slider widget will render horizontally. It's easy for us to
    change the slider orientation to a vertical layout using the `orientation` option.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，滑块小部件将水平呈现。我们可以通过`orientation`选项轻松将滑块方向更改为垂直布局。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'We''ll use the following HTML to define our two widgets. The first slider will
    be vertical while the second uses the default horizontal layout:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下HTML来定义我们的两个小部件。第一个滑块将是垂直的，而第二个则使用默认的水平布局：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we''ll use the following JavaScript code to instantiate the two widgets:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下JavaScript代码实例化这两个小部件：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you look at the two sliders in your browser, you can see the contrast between
    the vertical layout and the default horizontal layout:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中查看这两个滑块，您可以看到垂直布局和默认水平布局之间的对比：
- en: '![How to do it...](img/2186_08_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_08_09.jpg)'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The two slider widgets we've created here, `#vslider` and `#hslider`, are identical
    in terms of content. The only difference is that the `#vslider` instance is created
    with the `orientation` option set to `vertical`. The `#hslider` instance doesn't
    specify an `orientation` option and so uses the default, `horizontal`. The key
    difference between them is the layout as is made obvious in our example. The actual
    layout itself is controlled by the `ui-slider-vertical` and `ui-slider-horizontal`
    CSS classes, which are mutually exclusive.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里创建的两个滑块小部件，`#vslider`和`#hslider`，在内容上是相同的。唯一的区别是`#vslider`实例是使用`orientation`选项设置为`vertical`创建的。`#hslider`实例没有指定`orientation`选项，因此使用默认的`horizontal`。它们之间的关键区别在于布局，正如我们的示例中明显的那样。布局本身由`ui-slider-vertical`和`ui-slider-horizontal`CSS类控制，这两个类是互斥的。
- en: Being able to control the slider orientation is valuable depending on where
    you want to put the widget in the context of the UI. The containing element, for
    example, might not have a lot of horizontal space, and so using the vertical orientation
    option might make good sense here. However, be careful about dynamically changing
    the slider orientation. The handle can sometimes break away from the slider bar.
    Therefore, it's best to decide on the orientation at design time.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 控制滑块的方向是有价值的，这取决于你想把小部件放在 UI 上下文中的位置。例如，包含元素可能没有太多的水平空间，所以在这里使用垂直方向选项可能是个不错的选择。然而，要小心动态改变滑块的方向。手柄有时会从滑块条中脱离。因此，在设计时最好确定方向。
