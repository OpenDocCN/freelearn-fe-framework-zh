- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Building an Enterprise Portal Using Nx Monorepo Tools and NgRx
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nx 单仓库工具和 NgRx 构建 Enterprise Portal
- en: Typical enterprise applications usually consist of a backend and a frontend
    system. The backend is responsible for interacting with a database for data persistence
    and exposes a REST API. The frontend communicates with the backend system via
    the REST interface to exchange data. The frontend system can sometimes consist
    of multiple applications, including a web interface or a mobile application. Keeping
    all these applications and systems in separate source control repositories scales
    poorly and is difficult to maintain and build. Alternatively, we can follow a
    **monorepo** architecture for large enterprise applications, where each application
    resides in a separate location inside the same repository.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的企业应用程序通常由后端和前端系统组成。后端负责与数据库交互以实现数据持久化，并公开 REST API。前端通过 REST 接口与后端系统通信以交换数据。前端系统有时可以由多个应用程序组成，包括网页界面或移动应用程序。将这些应用程序和系统保留在单独的源控制仓库中会扩展不佳，且难以维护和构建。作为替代，我们可以为大型企业应用程序遵循
    **单仓库** 架构，其中每个应用程序位于同一仓库内的不同位置。
- en: A popular tool in the Angular ecosystem that embraces monorepo architecture
    is **Nx**. Combining an Nx monorepo application with a state management library
    can significantly improve your application. **NgRx**, a popular state management
    library for Angular applications, can help us maintain a consistent and manageable
    global state.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 生态系统中，**Nx** 是一个流行的工具，它采用了单仓库架构。将 Nx 单仓库应用程序与状态管理库相结合可以显著提高您的应用程序。对于
    Angular 应用程序，**NgRx** 是一个流行的状态管理库，可以帮助我们维护一致且可管理的全局状态。
- en: 'In this chapter, we will investigate both technologies by building an enterprise
    portal application for visiting **points of interest (POIs)**. We will cover the
    following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过构建一个用于访问 **兴趣点（POI）** 的企业门户应用程序来研究这两种技术。我们将涵盖以下主题：
- en: Creating a monorepo application using Nx
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Nx 创建单仓库应用程序
- en: Creating user-specific portals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户特定的门户
- en: Managing application state with NgRx
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NgRx 管理应用程序状态
- en: Visualizing data with graphs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图表可视化数据
- en: Essential background theory and context
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的背景理论和上下文
- en: Nx is a suite of development tools and libraries for building web applications
    based on monorepo architecture. A typical Nx application can contain many applications
    and shared libraries inside a single workspace. The flexibility of monorepo architecture
    allows any application, backend or frontend, to use the same libraries inside
    the workspace.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Nx 是一套基于单仓库架构构建 Web 应用程序的开发工具和库。一个典型的 Nx 应用程序可以在单个工作区内部包含许多应用程序和共享库。单仓库架构的灵活性允许任何应用程序，无论是后端还是前端，都可以在工作区内部使用相同的库。
- en: In this project, we will consider only frontend applications built with the
    Angular framework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们只考虑使用 Angular 框架构建的前端应用程序。
- en: 'Nx provides developers with the following features:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nx 为开发者提供了以下功能：
- en: '**Centralized management of application dependencies**: Each application has
    the same version of the Angular framework, making it easy to update all at once.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序依赖的集中管理**：每个应用程序都使用相同版本的 Angular 框架，这使得一次性更新所有应用程序变得容易。'
- en: '**Fast builds**: The build process of an Nx application involves only those
    artifacts that have been changed and does not do a complete rebuild of the entire
    monorepo.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速构建**：Nx 应用程序的构建过程仅涉及已更改的工件，而不对整个单仓库进行完全重建。'
- en: '**Distributed caching**: Each application build can be cached locally or to
    the cloud, using **Nx Cloud**, to improve the build process of other developers
    that build similar artifacts.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式缓存**：每个应用程序构建都可以使用 **Nx Cloud** 本地或云端缓存，以改善其他构建类似工件的开发者的构建过程。'
- en: Maintaining a consistent global state is tedious in a large Angular enterprise
    application. Using `@Input` and `@Output` decorators to communicate between Angular
    components is not always viable, especially when many components need to share
    the same state.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型 Angular 企业应用程序中维护一致的全球状态是繁琐的。使用 `@Input` 和 `@Output` 装饰器在 Angular 组件之间通信并不总是可行的，尤其是在许多组件需要共享相同状态时。
- en: 'NgRx is a library that efficiently manages the global application state powered
    by the **RxJS** library. The main building blocks of NgRx are the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NgRx 是一个由 **RxJS** 库驱动的库，它高效地管理应用程序的全局状态。NgRx 的主要构建块如下：
- en: '**Store**: The central storage that keeps the global state of the application.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：保持应用程序全局状态的中央存储。'
- en: '**Reducer**: A function that listens to a specific event and interacts directly
    with the store. Reducers derive a new application state based on the existing
    one from the store.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Reducer**：一个监听特定事件并直接与存储交互的函数。Reducer根据存储中的现有状态推导出新的应用程序状态。'
- en: '**Action**: A unique event dispatched from components and services that triggers
    a reducer. Actions can be any interaction initiated by the user or an external
    source, such as an HTTP call.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：由组件和服务派发的一个独特事件，触发reducer。动作可以是用户或外部源（如HTTP调用）发起的任何交互。'
- en: '**Effect**: Handles interaction with external sources, such as making an HTTP
    call or exchanging data with the local storage. Effects take care of side effects
    in an application by hiding the business logic from components.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效果**：处理与外部源（如进行HTTP调用或与本地存储交换数据）的交互。效果通过隐藏业务逻辑从组件中处理应用程序的副作用。'
- en: '**Selector**: A function that selects the application state or a specific part
    of it (*slice*) from the store. Selectors support **memoization**, a technique
    where they can return the same state if called with the same parameters, greatly
    enhancing the performance of an application.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器**：一个从存储中选择应用程序状态或其特定部分（*切片*）的函数。选择器支持**记忆化**技术，即如果用相同的参数调用，它们可以返回相同的状态，这极大地提高了应用程序的性能。'
- en: Project overview
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this project, we will build an Angular enterprise application to manage POI
    visits on a map. The application will consist of two portals, where one will allow
    a visitor to select a POI from a list and view its location on a map. Another
    portal will enable an administrator to view the visiting traffic of each POI.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将构建一个Angular企业应用来管理地图上的POI访问。该应用将包括两个门户，其中一个将允许访客从列表中选择一个POI并在地图上查看其位置。另一个门户将允许管理员查看每个POI的访问流量。
- en: 'First, we will build an Angular application from scratch using Nx. We will
    then create the skeleton of each portal by adding the essential components of
    our application. After we have scaffolded our application, we will start adding
    the functionality of the visitor portal using NgRx. Finally, we will implement
    the administrator portal and learn how to use an Angular library to visualize
    data in a graph. The following diagram describes an architectural overview of
    the project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用Nx从头开始构建一个Angular应用。然后，我们将通过添加我们应用的基本组件来创建每个门户的框架。在我们搭建好应用之后，我们将开始使用NgRx添加访客门户的功能。最后，我们将实现管理员门户，并学习如何使用Angular库在图表中可视化数据。以下图表描述了项目的架构概述：
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_08_01.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![包含图表的图片 自动生成的描述](img/B18465_08_01.png)'
- en: Figure 8.1 – Project architecture
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 项目架构
- en: 'Build time: 3 hours'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：3小时
- en: Getting started
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The following software tools are required to complete this project:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目所需的以下软件工具：
- en: '**Nx Console**: A VSCode extension that provides a graphical interface to work
    with Nx. You can learn more about installing it in *Chapter 1*, *Creating Your
    First Web Application in Angular*.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nx控制台**：一个VSCode扩展，提供了一个图形界面来与Nx一起工作。你可以在*第一章*，*在Angular中创建你的第一个Web应用*中了解更多关于如何安装它的信息。'
- en: '**GitHub material**: The code related to this chapter can be found in the `Chapter08`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub材料**：本章相关的代码可以在[https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)的`Chapter08`文件夹中找到。'
- en: Creating a monorepo application using Nx
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nx创建单仓库应用
- en: 'Nx provides developers with tools to work with monorepos, including the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Nx为开发者提供了与单仓库一起工作的工具，包括以下内容：
- en: '**create-nx-workspace**: An npm package that scaffolds a new Nx monorepo application.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**create-nx-workspace**：一个npm包，用于搭建新的Nx单仓库应用。'
- en: '**Nx CLI**: A command-line interface that runs commands against a monorepo
    application. The Nx CLI extends the Angular CLI to provide more commands, which
    is faster due to the distributed caching mechanism.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nx CLI**：一个命令行界面，可以对单仓库应用运行命令。Nx CLI扩展了Angular CLI，提供了更多命令，由于分布式缓存机制，这使它更快。'
- en: It is recommended to use the **Quick Open** feature of VSCode when working with
    Nx monorepos. The number of generated folders and files will significantly increase,
    and it will be challenging to navigate through them. You can find out more at
    [https://code.visualstudio.com/docs/editor/editingevolved#_quick-file-navigation](https://code.visualstudio.com/docs/editor/editingevolved#_quick-file-navigation).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在使用Nx单仓库时使用VSCode的**快速打开**功能。生成的文件夹和文件数量将显著增加，这将使导航变得具有挑战性。更多信息请参阅[https://code.visualstudio.com/docs/editor/editingevolved#_quick-file-navigation](https://code.visualstudio.com/docs/editor/editingevolved#_quick-file-navigation)。
- en: 'To install the Nx CLI, run the following command in a terminal:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Nx CLI，请在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will install the `nx` npm package globally on our system.
    We can now scaffold a new Nx monorepo workspace using the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在我们的系统上全局安装`nx`npm包。现在，我们可以使用以下命令来创建新的Nx单仓库工作区：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command will do the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将执行以下操作：
- en: Find the latest version of the `create-nx-workspace` npm package and request
    us to install it.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找`create-nx-workspace`npm包的最新版本，并请求我们安装它。
- en: Ask if we want to use standalone components in the application. Ensure that
    `No` is selected and press *Enter* to continue.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 询问我们是否想在应用程序中使用独立组件。确保选择`No`并按*Enter*键继续。
- en: Standalone Angular components are a simpler and modern approach to a more component-centric
    Angular application without using Angular modules. In this project, we will use
    Angular modules by default.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 独立的Angular组件是一种更简单、更现代的方法，用于构建不使用Angular模块的更组件化的Angular应用程序。在这个项目中，我们将默认使用Angular模块。
- en: 'The execution of the `create-nx-workspace` package involves the following options:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`create-nx-workspace`包涉及以下选项：
- en: '`packt`: The name of the Nx monorepo workspace. In large enterprise environments,
    we typically use the organization name.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packt`: Nx单仓库工作区的名称。在大型企业环境中，我们通常使用组织名称。'
- en: '`--appName=tour`: The name of the application.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--appName=tour`: 应用程序的名称。'
- en: '`--preset=angular-monorepo`: Nx supports applications built with various JavaScript
    frameworks. The `preset` option defines what type of application we want to build.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--preset=angular-monorepo`: Nx支持使用各种JavaScript框架构建的应用程序。`preset`选项定义了我们想构建的应用程序类型。'
- en: '`--style=css`: Indicates that our application will use the CSS style sheet
    format.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--style=css`: 表示我们的应用程序将使用CSS样式表格式。'
- en: '`--linter=eslint`: Configures our application to use ESLint as the default
    linter.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--linter=eslint`: 将我们的应用程序配置为使用ESLint作为默认的代码检查工具。'
- en: '`--nx-cloud=false`: Disables Nx Cloud for our application.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--nx-cloud=false`: 禁用Nx Cloud为我们应用程序。'
- en: '`--routing`: Enables Angular routing in the application.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--routing`: 启用应用程序中的Angular路由。'
- en: Creating a new Nx workspace may take some time, as it installs all the necessary
    packages for an enterprise environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的Nx工作区可能需要一些时间，因为它会安装企业环境所需的所有必要的包。
- en: 'After the creation of the workspace has been completed, we can run it to verify
    that everything has been set up correctly:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 工作区创建完成后，我们可以运行它来验证一切是否已正确设置：
- en: Open the project in the VSCode editor and click on the **Nx Console** menu in
    the VSCode sidebar.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VSCode编辑器中打开项目，然后在VSCode侧边栏中点击**Nx控制台**菜单。
- en: 'Select the **serve** command from the **PROJECTS** pane and click the play
    button to execute it:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**面板中选择**服务**命令，然后点击播放按钮执行它：
- en: '![](img/B18465_08_02.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_08_02.png)'
- en: Figure 8.2 – Serve option
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 服务选项
- en: 'Open your browser at `http://localhost:4200`, and you should see the following
    output:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:4200`，你应该会看到以下输出：
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_08_03.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像 自动生成的描述](img/B18465_08_03.png)'
- en: Figure 8.3 – Minimal Nx application
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 最小Nx应用程序
- en: Congratulations! Your new application has been configured correctly! Nx creates
    a minimal skeleton application, just like Angular CLI does, for our convenience
    so that we can build our features on top of that.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您的新应用程序已正确配置！Nx创建了一个最小骨架应用程序，就像Angular CLI一样，以便我们可以在其上构建我们的功能。
- en: In the next section, we will dive deeper into Nx by creating the administrator
    and visitor portals in our workspace.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过在我们的工作区中创建管理员和访客门户来深入了解Nx。
- en: Creating user-specific portals
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户特定门户
- en: 'Our application will consist of two portals that different users will use.
    Visitors will be able to view a list of POIs and select them on a map. Administrators
    will be able to view statistics for each POI. We will learn more about how to
    use Nx in the following sections:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将包含两个门户，不同的用户将使用它们。访客将能够查看POI列表并在地图上选择它们。管理员将能够查看每个POI的统计数据。我们将在接下来的章节中了解更多关于如何使用Nx的信息：
- en: Building the visitor portal
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建访客门户
- en: Building the administrator portal
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建管理员门户
- en: Each portal will be a separate Nx library that will be loaded according to the
    URL entered in the address bar of the browser. Organizing our code in libraries
    allows us to reuse it between different applications and build and test it individually.
    We will start building the visitor portal in the following section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个门户都将是一个独立的Nx库，根据在浏览器地址栏中输入的URL进行加载。将我们的代码组织到库中允许我们在不同的应用程序之间重用它，并单独构建和测试它。我们将在下一节开始构建访客门户。
- en: Building the visitor portal
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建访客门户
- en: 'The visitor portal will be a library inside the Nx workspace that will be loaded
    by default. Let’s see how we can build that library with Nx Console:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 访客门户将是Nx工作区内的一个库，默认情况下将被加载。让我们看看如何使用Nx控制台构建这个库：
- en: 'Run Nx Console from the VSCode sidebar and select the **generate** option from
    the **GENERATE & RUN TARGET** pane:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从VSCode侧边栏运行Nx控制台，并从**GENERATE & RUN TARGET**面板中选择**generate**选项：
- en: '![](img/B18465_08_04.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_08_04.png)'
- en: Figure 8.4 – The generate option
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 生成选项
- en: Select the **@nrwl/angular – library** option from the dialog that appears.
    The **@nx/angular** namespace contains schematics we can execute in an Nx monorepo
    for Angular applications.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的对话框中选择**@nrwl/angular – library**选项。**@nx/angular**命名空间包含我们可以在Nx单仓库中执行的Angular应用的schematics。
- en: 'Enter `visitor` as the name of the library and click the **Run** button:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将库的名称输入为`visitor`并点击**运行**按钮：
- en: '![Εικόνα που περιέχει τραπέζι  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_08_05.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![包含表格的图片 自动生成的描述](img/B18465_08_05.png)'
- en: Figure 8.5 – Library name
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 库名称
- en: When you were typing the name of the library, you may have noticed that Nx was
    running the **generate** command in the terminal. Well, it did not run it. Instead,
    it mimicked the effect of running the command in your system, a technique called
    a **dry run**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入库的名称时，你可能已经注意到Nx在终端中运行了**generate**命令。但是，它并没有运行。相反，它模拟了在系统中运行命令的效果，这种技术称为**dry
    run**。
- en: 'Nx will create the `visitor` library inside the `libs` folder of our workspace.
    The library does not contain any components yet. According to the project specifications,
    the visitor portal will have a list of POIs where users can select and view their
    location on a map. Thus, we need to create an Angular component with the following
    layout:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Nx将在我们的工作区`libs`文件夹内创建`visitor`库。该库目前还没有任何组件。根据项目规格，访客门户将有一个POI列表，用户可以在地图上选择并查看他们的位置。因此，我们需要创建一个具有以下布局的Angular组件：
- en: '![Figure 8.6 – Visitor portal layout](img/B18465_08_06.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 访客门户布局](img/B18465_08_06.png)'
- en: Figure 8.6 – Visitor portal layout
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 访客门户布局
- en: In the previous diagram, the portal consists of the sidebar that displays a
    POI list and the main content area to display the map. Instead of creating the
    layout from scratch, we will use Angular Material, which contains a handful of
    ready-made layouts, including one with a sidebar.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的图中，门户由显示POI列表的侧边栏和显示地图的主要内容区域组成。我们不会从头开始创建布局，而是会使用Angular Material，它包含一些现成的布局，包括带有侧边栏的一个。
- en: 'Before working with Angular Material, we need to install it in our application
    with the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Angular Material之前，我们需要使用以下命令将其安装到我们的应用程序中：
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After the installation completes successfully, we can configure Angular Material
    in our Nx workspace using the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功完成后，我们可以使用以下命令在Nx工作区中配置Angular Material：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding command will configure the `@angular/material` npm package for
    use in our workspace, passing additional options. You can learn more about these
    options in *Chapter 4*, *Building a PWA Weather Application Using Angular Service
    Worker*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将为我们的工作区配置`@angular/material` npm包，并传递额外的选项。你可以在*第4章*，*使用Angular Service
    Worker构建PWA天气应用程序*中了解更多关于这些选项的信息。
- en: Configuring Angular Material in our project will also install the `@angular/cdk`
    npm package, which contains specific behaviors and interactions used to build
    Angular Material.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中配置 Angular Material 也会安装 `@angular/cdk` npm 包，该包包含用于构建 Angular Material
    的特定行为和交互。
- en: The **Angular CDK** can be used to build custom UI libraries without relying
    on Angular Material. We will learn how to build such libraries in *Chapter 9*,
    *Building a Component UI Library Using Angular CLI and Angular CDK*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**地址表单**：这使用 Angular Material 表单控件输入地址信息。'
- en: 'The Angular Material library contains the following component templates that
    we can use:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 库包含以下组件模板，我们可以使用：
- en: '**address-form**: This uses Angular Material form controls to enter address
    information.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在第 9 章 *使用 Angular CLI 和 Angular CDK 构建组件 UI 库* 中学习如何构建这样的库。
- en: '**navigation**: This contains a side navigation component along with a content
    placeholder and a title bar.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航**：这包含一个侧边导航组件以及一个内容占位符和标题栏。'
- en: '**dashboard**: This consists of multiple Angular Material card and menu components
    organized in a grid layout.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表板**：这由多个 Angular Material 卡片和菜单组件组成，以网格布局组织。'
- en: '**table**: This displays an Angular Material table with sorting and filtering
    enabled.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表格**：这显示了一个具有排序和过滤功能的 Angular Material 表格。'
- en: '**tree**: This represents a visual folder structure in a tree view.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树形结构**：这表示树视图中的可视文件夹结构。'
- en: 'In our case, we will use the **navigation** component because we need a sidebar.
    Let’s see how we can generate that component:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将使用 **导航** 组件，因为我们需要一个侧边栏。让我们看看我们如何生成该组件：
- en: Open Nx Console from the VSCode sidebar and select the **generate** option.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 VSCode 侧边栏打开 Nx 控制台并选择 **生成** 选项。
- en: Select the **@angular/material – navigation** option from the dialog that appears.
    The **@angular/material** namespace contains schematics that we can run to create
    Angular Material components.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的对话框中选择 **@angular/material – 导航** 选项。**@angular/material** 命名空间包含我们可以运行的脚本来创建
    Angular Material 组件。
- en: 'Enter the name of the component:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入组件的名称：
- en: '![Figure 8.7 – Component name](img/B18465_08_07.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 组件名称](img/B18465_08_07.png)'
- en: Figure 8.7 – Component name
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 组件名称
- en: Select the **visitor** library from the **project** dropdown that we created
    earlier:![Figure 8.8 – Project selection](img/B18465_08_08.png)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们之前创建的 **项目** 下拉菜单中选择 **访客** 库：![图 8.8 – 项目选择](img/B18465_08_08.png)
- en: Figure 8.8 – Project selection
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.8 – 项目选择
- en: Click the **Show more** button if the option is not displayed.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果选项未显示，请点击 **显示更多** 按钮。
- en: Check the **flat** option so that the component will not be generated in a separate
    folder:![Figure 8.9 – The flat option](img/B18465_08_09.png)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **平铺** 选项，以便组件不会在单独的文件夹中生成：![图 8.9 – 平铺选项](img/B18465_08_09.png)
- en: Figure 8.9 – The flat option
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.9 – 平铺选项
- en: The component will be the main one of the library, so we want to have it in
    the same folder with its related module file.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组件将是库的主要组件，因此我们希望将其与其相关的模块文件放在同一个文件夹中。
- en: Enter the folder where the component will be created:![Figure 8.10 – Component
    folder](img/B18465_08_10.png)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入组件将被创建的文件夹：![图 8.10 – 组件文件夹](img/B18465_08_10.png)
- en: Figure 8.10 – Component folder
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.10 – 组件文件夹
- en: There is no need to define the module where the component will be created because
    the Angular CLI can deduce it directly from the **path** option.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有必要定义组件将被创建的模块，因为 Angular CLI 可以直接从 **路径** 选项中推断出来。
- en: Click the **Run** button to generate the component.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **运行** 按钮以生成组件。
- en: 'Nx Console will create the **visitor** component in the **visitor** library
    of the Nx workspace. We now need to connect it with the main application of the
    workspace:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Nx 控制台将在 Nx 工作区的 **访客** 库中创建 **访客** 组件。我们现在需要将其与工作区的主应用程序连接：
- en: Open the `app.component.html` file and remove the `<packt-nx-welcome>` selector.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.html` 文件并删除 `<packt-nx-welcome>` 选择器。
- en: 'Open the `app.routes.ts` file and add a route configuration that will load
    the visitor portal when the URL contains the `tour` path:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.routes.ts` 文件并添加一个路由配置，当 URL 包含 `tour` 路径时将加载访客门户：
- en: '[PRE4]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The route configuration contains two paths. The **default** path, denoted by
    the empty string, redirects to the `tour` path. The `tour` path lazily loads the
    module of the **visitor** library.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路由配置包含两个路径。默认路径，由空字符串表示，重定向到 `tour` 路径。`tour` 路径会懒加载 **访客** 库的模块。
- en: 'Open the `visitor.module.ts` file and add a route configuration to load the
    **visitor** component that we created:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`visitor.module.ts`文件，并添加一个路由配置来加载我们创建的**visitor**组件：
- en: '[PRE5]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The route configuration will activate `VisitorComponent` by default as soon
    as `VisitorModule` is loaded, using the `tour` path described in described in
    the step 3.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 路由配置将在`VisitorModule`加载后默认激活`VisitorComponent`，使用步骤3中描述的`tour`路径。
- en: 'If we now run the **serve** command from Nx Console and navigate to `http://localhost:4200`,
    we should see the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在从Nx控制台运行**serve**命令并导航到`http://localhost:4200`，我们应该看到以下输出：
- en: '![](img/B18465_08_11.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_08_11.png)'
- en: Figure 8.11 – Visitor portal
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 访客门户
- en: The Angular router will redirect us to `http://localhost:4200/tour` and display
    the visitor portal. It currently contains some demo data that Angular Material
    entered when we generated the navigation component. We will revisit it in the
    *Managing application state with NgRx* section to implement the full functionality
    using NgRx. For now, we will continue building the administrator portal in the
    next section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Angular路由将重定向我们到`http://localhost:4200/tour`并显示访客门户。它目前包含一些Angular Material在生成导航组件时输入的演示数据。我们将在*使用NgRx管理应用程序状态*部分重新访问它，以使用NgRx实现完整的功能。现在，我们将继续在下一节构建管理员门户。
- en: Building the administrator portal
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建管理员门户
- en: 'The administrator portal will be an Nx library with a single component, just
    like the visitor portal, except it will not be based on an Angular Material template.
    Let’s start scaffolding the structure of the library using Nx Console:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员门户将是一个Nx库，包含一个组件，就像访客门户一样，但它不会基于Angular Material模板。让我们使用Nx控制台开始构建库的结构：
- en: Run Nx Console from the VSCode sidebar and select the **generate** option.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从VSCode侧边栏运行Nx控制台并选择**generate**选项。
- en: In the dialog that appears, select the **@nx/angular – library** option.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的对话框中，选择**@nx/angular – library**选项。
- en: 'Enter `admin` as the library name and click the **Run** button:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`admin`作为库名称并点击**Run**按钮：
- en: '![Figure 8.12 – Library name](img/B18465_08_12.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图8.12 – 库名称](img/B18465_08_12.png)'
- en: Figure 8.12 – Library name
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – 库名称
- en: Click the **generate** option again and select the **@schematics/angular – component**
    option. The **@schematics/angular** namespace contains schematics that we can
    run in an Angular application using the Angular CLI.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**generate**选项并选择**@schematics/angular – component**选项。**@schematics/angular**命名空间包含我们可以在Angular应用程序中使用Angular
    CLI运行的schematics。
- en: 'Enter the same name for the component as in step 3:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组件名称与步骤3中相同：
- en: '![Figure 8.13 – Component name](img/B18465_08_13.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图8.13 – 组件名称](img/B18465_08_13.png)'
- en: Figure 8.13 – Component name
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – 组件名称
- en: 'Select the library that we created from the **project** drop-down list:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**下拉列表中选择我们创建的库：
- en: '![Figure 8.14 – Project selection](img/B18465_08_14.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – 项目选择](img/B18465_08_14.png)'
- en: Figure 8.14 – Project selection
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 项目选择
- en: Check the **flat** option so that the component will be created in the same
    folder as the module file of the library:![Figure 8.15 – The flat option](img/B18465_08_15.png)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**flat**选项，以便组件将在库的模块文件相同的文件夹中创建：![图8.15 – 平铺选项](img/B18465_08_15.png)
- en: Figure 8.15 – The flat option
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.15 – 平铺选项
- en: Click the **Show more** button if the option is not displayed.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果选项未显示，请点击**Show more**按钮。
- en: 'Enter the folder where the component will be created and click the **Run**
    button:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入组件将被创建的文件夹，并点击**Run**按钮：
- en: '![Figure 8.16 – Component folder](img/B18465_08_16.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图8.16 – 组件文件夹](img/B18465_08_16.png)'
- en: Figure 8.16 – Component folder
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – 组件文件夹
- en: 'The Angular CLI will create the **admin** component inside the folder of the
    **admin** library. We now need to wire it up to the main application:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI将在**admin**库的文件夹内创建**admin**组件。我们现在需要将其连接到主应用程序：
- en: 'Open the `app.routes.ts` file and add a new route configuration object for
    the `admin` path:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.routes.ts`文件，并为`admin`路径添加一个新的路由配置对象：
- en: '[PRE6]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open the `admin.module.ts` file and add a route configuration to activate `AdminComponent`
    by default:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`admin.module.ts`文件，并添加一个路由配置来默认激活`AdminComponent`：
- en: '[PRE7]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Use the **serve** option of Nx Console to run the application, and navigate
    to `http://localhost:4200/admin`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Nx控制台的**serve**选项运行应用程序，并导航到`http://localhost:4200/admin`：
- en: '![Figure 8.17 – Administrator portal](img/B18465_08_17.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图8.17 – 管理员门户](img/B18465_08_17.png)'
- en: Figure 8.17 – Administrator portal
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – 管理员门户
- en: The page will display the default template of the main component of the **admin**
    library.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 页面将显示 **admin** 库主组件的默认模板。
- en: We have now completed the scaffolding of our enterprise application. First,
    we created the Nx monorepo workspace that will host the portals of the application.
    Then, we used Nx Console to generate our portals and their main components. We
    also installed Angular Material to use its UI elements in our components.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了企业应用程序的脚手架搭建。首先，我们创建了将托管应用程序门户的 Nx 单一代码仓库。然后，我们使用 Nx Console 生成我们的门户及其主组件。我们还安装了
    Angular Material 以在组件中使用其 UI 元素。
- en: In the next section, we will implement the functionality of the visitor portal
    using NgRx.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 NgRx 实现访客门户的功能。
- en: Managing application state with NgRx
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NgRx 管理应用程序状态
- en: 'The visitor portal will allow the user to see a list of available POIs and
    select one to view its location on a map. The list of available POIs and the selection
    of a POI is the global state of our application. We will integrate NgRx to manage
    the application state in the visitor portal by completing the following tasks:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 访客门户将允许用户查看可用的 POI 列表并选择一个查看其在地图上的位置。可用的 POI 列表和 POI 的选择是我们应用程序的全局状态。我们将通过完成以下任务来集成
    NgRx 以管理访客门户的应用程序状态：
- en: Configuring the state
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置状态
- en: Interacting with the store
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与存储交互
- en: Let’s begin by configuring the state of our application in the following section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从配置应用程序状态开始，在下一节中。
- en: Configuring the state
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置状态
- en: 'Our application will consist of a `root` state for the whole application and
    a feature state for the visitor portal. We will start by executing the following
    command to create the `root` state:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将包括一个用于整个应用程序的 `root` 状态和一个用于访客门户的功能状态。我们将首先执行以下命令来创建 `root` 状态：
- en: '[PRE8]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding command uses the `generate` command of the Nx CLI, passing the
    following options:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令使用 Nx CLI 的 `generate` 命令，传递以下选项：
- en: '`@nx/angular:ngrx`: Indicates that we want to set up an NgRx state'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@nx/angular:ngrx`：表示我们想要设置 NgRx 状态'
- en: '`app`: The name of the state'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`：状态名称'
- en: '`--root`: Indicates that we want to configure a root state'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--root`：表示我们想要配置一个根状态'
- en: '`--no-interactive`: Disables interactive input prompts'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-interactive`：禁用交互式输入提示'
- en: '`--parent=apps/tour/src/app/app.module.ts`: Registers the state with the main
    Angular module of our application'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--parent=apps/tour/src/app/app.module.ts`：将状态注册到我们应用程序的主要 Angular 模块中'
- en: The previous command will add all necessary NgRx npm packages in the `package.json`
    file and install them. It will also modify the `app.module.ts` file to configure
    all NgRx-related artifacts, such as the store and effects.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令将在 `package.json` 文件中添加所有必要的 NgRx npm 包并安装它们。它还将修改 `app.module.ts` 文件以配置所有
    NgRx 相关艺术品，如存储和效果。
- en: 'The **visitor** library will not manage the data for the state of the visitor
    portal. Instead, we will create a new library in our Nx workspace to fetch and
    store data in the feature state. Execute the following command of the Nx CLI to
    create a new library:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**访客**库不会管理访客门户状态的数据。相反，我们将在 Nx 工作区中创建一个新的库来获取和存储功能状态中的数据。执行以下 Nx CLI 命令来创建一个新的库：'
- en: '[PRE9]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command will generate the `poi` library in our Nx monorepo. Now,
    we can set up the feature state using the following command:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令将在我们的 Nx 单一代码仓库中生成 `poi` 库。现在，我们可以使用以下命令设置功能状态：
- en: '[PRE10]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding command uses the `generate` command of the Nx CLI to register
    a feature state, passing additional options:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令使用 Nx CLI 的 `generate` 命令注册功能状态，传递额外的选项：
- en: '`@nx/angular:ngrx`: Indicates that we want to set up an NgRx state.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@nx/angular:ngrx`：表示我们想要设置 NgRx 状态。'
- en: '`poi`: The name of the state.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poi`：状态名称。'
- en: '`--no-interactive`: Disables interactive input prompts.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-interactive`：禁用交互式输入提示。'
- en: '`--parent=libs/poi/src/lib/poi.module.ts`: Registers the state with the Angular
    module of our library.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--parent=libs/poi/src/lib/poi.module.ts`：将状态注册到我们库的 Angular 模块中。'
- en: '`--barrels`: Indicates using barrel files to re-export NgRx artifacts such
    as selectors and state. The name of a barrel file is usually `index.ts` by convention.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--barrels`：表示使用桶文件重新导出 NgRx 艺术品，如选择器和状态。桶文件的名称通常按惯例为 `index.ts`。'
- en: 'The preceding command will create a folder, named `+state` by convention, inside
    our library, which contains the following files:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令将在我们的库中创建一个名为 `+state` 的文件夹（按惯例命名），其中包含以下文件：
- en: '`poi.actions.ts`: Defines NgRx actions for the feature state'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poi.actions.ts`：定义功能状态 NgRx 动作'
- en: '`poi.effects.ts`: Defines NgRx effects for the feature state'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poi.effects.ts`: 定义 NgRx 效应用于功能状态'
- en: '`poi.models.ts`: Defines an entity interface for POI data'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poi.models.ts`: 定义 POI 数据的实体接口'
- en: '`poi.reducer.ts`: Defines NgRx reducers for the feature state'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poi.reducer.ts`: 定义 NgRx 减法器用于功能状态'
- en: '`poi.selectors.ts`: Defines NgRx selectors for the feature state'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`poi.selectors.ts`: 定义 NgRx 选择器用于功能状态'
- en: 'The Nx CLI has done most of the job by adding the necessary content in the
    previous files, eliminating the boilerplate code for us. We now need to create
    an Angular service in the library that will fetch the POI data:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Nx CLI 已经通过在之前的文件中添加必要的内容完成了大部分工作，消除了我们需要的样板代码。我们现在需要在库中创建一个 Angular 服务来获取 POI
    数据：
- en: 'Open the `poi.models.ts` file and add the following properties to the `PoiEntity`
    interface:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `poi.models.ts` 文件并为 `PoiEntity` 接口添加以下属性：
- en: '[PRE11]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Execute the following command to generate the Angular service:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以生成 Angular 服务：
- en: '[PRE12]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding command will create an Angular service called `poi` in the **poi**
    library.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将在 `poi` 库中创建一个名为 `poi` 的 Angular 服务。
- en: 'Open the `poi.service.ts` file and add the following `import` statements:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `poi.service.ts` 文件并添加以下 `import` 语句：
- en: '[PRE13]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inject `HttpClient` in the `constructor` of the `PoiService` class and create
    a method to get POI data from the `assets/poi.json` file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PoiService` 类的 `constructor` 中注入 `HttpClient` 并创建一个从 `assets/poi.json` 文件获取
    POI 数据的方法：
- en: '[PRE14]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We use the built-in HTTP client of the Angular framework to get POI data by
    initiating a GET HTTP request.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 Angular 框架内置的 HTTP 客户端通过发起 GET HTTP 请求来获取 POI 数据。
- en: You can get the `poi.json` file from the GitHub repository in the *Getting started*
    section and copy it to the `apps\tour\src\assets` folder of your workspace.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从 GitHub 仓库的 *入门* 部分获取 `poi.json` 文件并将其复制到您的工作区中的 `apps\tour\src\assets`
    文件夹。
- en: 'Open the `poi.effects.ts` file and import the `map` and `PoiService` artifacts:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `poi.effects.ts` 文件并导入 `map` 和 `PoiService` 实体：
- en: '[PRE15]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Inject `PoiService` in the `PoiEffects` class:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PoiEffects` 类中注入 `PoiService`：
- en: '[PRE16]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Modify the `init$` property to use the `poiService` variable:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `init$` 属性修改为使用 `poiService` 变量：
- en: '[PRE17]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: An NgRx effect is responsible for listening to all actions dispatched in the
    store. When a `PoiActions.initPoi` action is dispatched, the `init$` property
    is triggered and calls the `getAll` method of the `poiService` variable. The `init$`
    property knows which action to listen for by the parameters in the `ofType` operator.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NgRx 效应负责监听存储中派发的所有动作。当派发 `PoiActions.initPoi` 动作时，`init$` 属性被触发并调用 `poiService`
    变量的 `getAll` 方法。`init$` 属性通过 `ofType` 操作符的参数知道要监听哪个动作。
- en: The `ofType` operator can accept more than one action.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ofType` 操作符可以接受多个动作。'
- en: If the data is fetched successfully, the effect will dispatch a new action in
    the store, `PoiActions.loadPoiSuccess`, with POI data as the payload. If there
    is a failure when getting the data, it will dispatch a `PoiActions.loadPoiFailure`
    action in the store.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果数据获取成功，效应将在存储中触发一个新动作，即 `PoiActions.loadPoiSuccess`，并将 POI 数据作为负载。如果获取数据时出现失败，它将在存储中触发一个
    `PoiActions.loadPoiFailure` 动作。
- en: Open the `app.module.ts` file and import `HttpClientModule` from the `@angular/common/http`
    namespace. Also add the `HttpClientModule` class in the `imports` array of the
    `@NgModule` decorator.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.module.ts` 文件并从 `@angular/common/http` 命名空间导入 `HttpClientModule`。同时将
    `HttpClientModule` 类添加到 `@NgModule` 装饰器的 `imports` 数组中。
- en: The global state of our application is now configured and ready to be used.
    In the following section, we will create additional Angular components in the
    visitor library that will interact with the feature state of our application.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的全局状态现在已配置并准备好使用。在下一节中，我们将在访客库中创建额外的 Angular 组件，这些组件将与我们的应用程序的功能状态进行交互。
- en: Interacting with the store
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与存储进行交互
- en: The visitor portal will interact with the feature state of our application through
    two Angular components. One component will display the list of POIs and allow
    the user to select one. The other component will display the selected POI inside
    Google Maps.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 访客门户将通过两个 Angular 组件与我们的应用程序的功能状态进行交互。一个组件将显示 POI 列表并允许用户选择一个。另一个组件将在 Google
    Maps 中显示所选的 POI。
- en: 'Initially, we will build the component that displays the list of POIs:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，我们将构建显示 POI 列表的组件：
- en: 'Open the `visitor.module.ts` file and add the following `import` statement:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `visitor.module.ts` 文件并添加以下 `import` 语句：
- en: '[PRE18]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add `PoiModule` in the `imports` array of the `@NgModule` decorator:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@NgModule` 装饰器的 `imports` 数组中添加 `PoiModule`：
- en: '[PRE19]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We import `PoiModule` so that the **poi** feature state is registered in the
    store as soon as the visitor portal is loaded.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们导入 `PoiModule` 以确保在访问者门户加载时，**poi** 功能状态立即在存储中注册。
- en: 'Execute the following command of the Nx CLI to create the Angular component:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 Nx CLI 命令以创建 Angular 组件：
- en: '[PRE20]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `poi-list.component.ts` file and modify the `import` statements accordingly:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `poi-list.component.ts` 文件并相应地修改 `import` 语句：
- en: '[PRE21]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Modify the `PoiListComponent` class so that it dispatches the `PoiActions.initPoi`
    action in the store to fetch POI data when the component is initialized:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `PoiListComponent` 类，使其在组件初始化时在存储中触发 `PoiActions.initPoi` 动作以获取 POI 数据：
- en: '[PRE22]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We execute the action as a method and pass its result to the `dispatch` method
    of the `store` variable.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将操作作为方法执行并将结果传递给 `store` 变量的 `dispatch` 方法。
- en: 'Create a component property that invokes the `PoiSelectors.selectAllPoi` selector
    to list POI data from the store:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个组件属性，它调用 `PoiSelectors.selectAllPoi` 选择器以从存储中列出 POI 数据：
- en: '[PRE23]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We use the `select` method of the `store` variable to execute the selector.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `store` 变量的 `select` 方法来执行选择器。
- en: We did not create the `PoiSelectors.selectAllPoi` selector. NgRx did it for
    us when we generated the feature state in the **poi** library.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们没有创建 `PoiSelectors.selectAllPoi` 选择器。在生成 **poi** 库中的功能状态时，NgRx 为我们完成了这项工作。
- en: 'Open the `poi-list.component.html` file and replace its content with the following
    HTML template:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `poi-list.component.html` 文件并用以下 HTML 模板替换其内容：
- en: '[PRE24]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We use the `<mat-action-list>` component of the Angular Material library to
    display each POI as a single action item. We subscribe to the `pois$` property
    using the `async` pipe and create a `<button>` element with the `mat-list-item`
    directive for each POI.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 Angular Material 库中的 `<mat-action-list>` 组件来显示每个 POI 作为单个操作项。我们使用 `async`
    管道订阅 `pois$` 属性并为每个 POI 创建一个带有 `mat-list-item` 指令的 `<button>` 元素。
- en: Open the `visitor.component.html` file and replace the `<mat-nav-list>` component
    with the `<packt-poi-list>` component we created.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `visitor.component.html` 文件并用我们创建的 `<packt-poi-list>` 组件替换 `<mat-nav-list>`
    组件。
- en: 'Use Nx Console to start the application, and you should see the following output
    in the menu sidebar:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Nx Console 启动应用程序，你应该在菜单侧边栏中看到以下输出：
- en: '![Figure 8.18 – List of POIs](img/B18465_08_18.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – POI 列表](img/B18465_08_18.png)'
- en: Figure 8.18 – List of POIs
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – POI 列表
- en: We have already created the Angular component to display the available POIs.
    Let’s see now how to create the component to display a POI on the map using Google
    Maps.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了 Angular 组件来显示可用的 POI。现在让我们看看如何创建一个组件来在地图上显示 POI 使用 Google Maps。
- en: 'The Angular Material library contains a component for Google Maps that we can
    use in our application:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 库包含一个用于 Google Maps 的组件，我们可以在我们的应用程序中使用它：
- en: 'Run the following command of the `npm` client to install the Google Maps component:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 `npm` 客户端命令来安装 Google Maps 组件：
- en: '[PRE25]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the `visitor.module.ts` file and add the following `import` statement:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `visitor.module.ts` 文件并添加以下 `import` 语句：
- en: '[PRE26]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add `GoogleMapsModule` to the `imports` array of the `@NgModule` decorator:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `GoogleMapsModule` 添加到 `@NgModule` 装饰器的 `imports` 数组中：
- en: '[PRE27]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Open the `index.html` file of the application and add the Google Maps JavaScript
    API inside the `<head>` element:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序的 `index.html` 文件并在 `<head>` 元素内添加 Google Maps JavaScript API：
- en: '[PRE28]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now that we have installed and registered Google Maps in our application, let’s
    create the Angular component that will host it:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并注册了 Google Maps 到我们的应用程序中，让我们创建一个将托管它的 Angular 组件：
- en: 'Execute the following command of the Nx CLI to create a new Angular component:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 Nx CLI 命令以创建一个新的 Angular 组件：
- en: '[PRE29]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Open the `map.component.ts` file and add the following `import` statements:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `map.component.ts` 文件并添加以下 `import` 语句：
- en: '[PRE30]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Inject the `Store` service in the `constructor` of the `MapComponent` class
    and declare a property to get the selected POI from the store:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MapComponent` 类的 `constructor` 中注入 `Store` 服务并声明一个属性以从存储中获取选定的 POI：
- en: '[PRE31]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open the `map.component.html` file and replace its content with the following
    HTML template:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `map.component.html` 文件并用以下 HTML 模板替换其内容：
- en: '[PRE32]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding template, we subscribe to the `poi$` property using the `async`
    pipe. As soon as we get a selected POI from the store, we display a `<google-map>`
    component and set the center of the map to the POI coordinates. Furthermore, we
    add a marker on the map in the specified POI coordinates.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们使用 `async` 管道订阅 `poi$` 属性。一旦我们从存储中获取到选定的 POI，我们就显示一个 `<google-map>`
    组件并将地图的中心设置为 POI 坐标。此外，我们在指定的 POI 坐标上添加了一个标记。
- en: Open the `visitor.component.html` file and replace the `<!-- Add Content Here
    -->` comment with the `<packt-map>` selector.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`visitor.component.html`文件并将`<!-- Add Content Here -->`注释替换为`<packt-map>`选择器。
- en: The Angular component we created will show the location of a POI on the map
    as soon as we select it from the list. If you try to choose a POI from the list,
    you will notice that nothing happens. Why is that?
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的Angular组件将在我们从列表中选择POI时立即在地图上显示其位置。如果您尝试从列表中选择一个POI，您会注意到没有任何反应。这是为什么？
- en: 'The global state of the application does not currently know when a POI has
    been selected. We need to add the necessary code to set the selected POI and interact
    with the store:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的全局状态目前不知道何时选择了POI。我们需要添加必要的代码来设置选中的POI并与存储进行交互：
- en: 'Open the `poi.actions.ts` file and add a new action to pass the ID of the selected
    POI:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`poi.actions.ts`文件并添加一个新操作以传递选中POI的ID：
- en: '[PRE33]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open the `poi.reducer.ts` file and add a new statement in the `reducer` property
    that will listen to the `selectPoi` action and save the selected POI in the store:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`poi.reducer.ts`文件，并在`reducer`属性中添加一个新语句，该语句将监听`selectPoi`操作并将选中的POI保存到存储中：
- en: '[PRE34]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Open the `poi-list.component.ts` file and import the `PoiEntity` interface:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`poi-list.component.ts`文件并导入`PoiEntity`接口：
- en: '[PRE35]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a new method to dispatch the `selectPoi` action to the store along with
    the selected `PoiEntity`:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新方法以将`selectPoi`操作及其选中的`PoiEntity`一起分发给存储：
- en: '[PRE36]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Open the `poi-list.component.html` file and bind the `selectPoi` method to
    the `click` event of the `<button>` element:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`poi-list.component.html`文件，并将`selectPoi`方法绑定到`<button>`元素的`click`事件：
- en: '[PRE37]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To see the new functionality in action, run the application using the **serve**
    option from Nx Console and select a POI from the list. The output of the application
    should look like the following:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看新功能的效果，请使用Nx Console中的**serve**选项运行应用程序，并从列表中选择一个POI。应用程序的输出应如下所示：
- en: '![Figure 8.19 – POI selection](img/B18465_08_19.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图8.19 – POI选择](img/B18465_08_19.png)'
- en: Figure 8.19 – POI selection
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19 – POI选择
- en: In this project, we use Google Maps in development mode. For production environments,
    you should get an API key from [https://developers.google.com/maps/get-started](https://developers.google.com/maps/get-started)
    and include it in the Google Maps JavaScript API script that you load in the `index.html`
    file as `<script src="img/js?key=YOUR_API_KEY"></script>`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在此项目中，我们以开发模式使用Google Maps。对于生产环境，您应从[https://developers.google.com/maps/get-started](https://developers.google.com/maps/get-started)获取API密钥，并将其包含在您在`index.html`文件中加载的Google
    Maps JavaScript API脚本中，作为`<script src="img/js?key=YOUR_API_KEY"></script>`。
- en: We have now completed all the required features for the portal of our visitors.
    Well done! Implementing the basic functionality of the visitor portal required
    interacting with NgRx to manage the global state of our application.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了访客门户所需的所有功能。做得好！实现访客门户的基本功能需要与NgRx交互以管理我们应用程序的全局状态。
- en: The global state was separated into the root state for the application and the
    feature state for the visitor portal. The **visitor** library used the latter
    to create Angular components to display a POI list and select one to view in Google
    Maps.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 全局状态被分离为应用程序的根状态和访客门户的特征状态。**访客**库使用后者创建Angular组件以显示POI列表并选择一个在Google Maps中查看：
- en: In the next section, we will build the administrator portal to get visit statistics
    for each POI.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将构建管理员门户以获取每个POI的访问统计。
- en: Visualizing data with graphs
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图表可视化数据
- en: 'The administrator portal will display traffic visits for each POI using a chart.
    When visitors visit a POI by clicking its marker on the map, traffic will be generated.
    The application will persist visit data in the local storage of the browser. It
    will keep a record for each visit containing the ID of the POI and the total visits.
    The administrator portal will consist of the following features:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员门户将使用图表显示每个POI的流量访问。当访客通过点击地图上的标记访问POI时，将生成流量。应用程序将在浏览器的本地存储中持久化访问数据。它将为每次访问记录POI的ID和总访问次数。管理员门户将包括以下功能：
- en: Persisting visit data in the store
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储中持久化访问数据
- en: Displaying visit statistics
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示访问统计
- en: In the following section, we will start building the administrator portal by
    implementing the mechanism to keep track of visits.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过实现跟踪访问的机制来开始构建管理员门户。
- en: Persisting visit data in the store
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在存储中持久化访问数据
- en: 'Our application does not record traffic statistics for POIs yet. Let’s see
    how we can accomplish this task:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序目前还没有记录POI的交通统计数据。让我们看看我们如何完成这个任务：
- en: 'Open the `map.component.html` file and add a `<map-info-window>` component:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`map.component.html`文件，并添加一个`<map-info-window>`组件：
- en: '[PRE38]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `<map-info-window>` component is a pop-up window that displays additional
    information about the current map marker. It shows the title, image, and description
    of a POI as an Angular Material card component.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<map-info-window>`组件是一个弹出窗口，显示有关当前地图标记的附加信息。它以Angular Material卡片组件的形式显示POI的标题、图像和描述。'
- en: The `<mat-card>` component contains a header denoted by the `<mat-card-header>`
    component and an image denoted by the `<img>` element with the `mat-card-image`
    directive. The `<mat-card-content>` component indicates the main content of the
    card.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<mat-card>`组件包含一个由`<mat-card-header>`组件表示的标题和一个由带有`mat-card-image`指令的`<img>`元素表示的图像。`<mat-card-content>`组件表示卡的正文内容。'
- en: 'Open the `visitor.module.ts` file and add the following `import` statement:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`visitor.module.ts`文件，并添加以下`import`语句：
- en: '[PRE39]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the `MatCardModule` class in the `imports` array of the `@NgModule` decorator:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@NgModule`装饰器的`imports`数组中添加`MatCardModule`类：
- en: '[PRE40]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `MatCardModule` class is an Angular Material module that exposes all the
    components we need to create a card component.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MatCardModule`类是一个Angular Material模块，它公开了我们创建卡片组件所需的所有组件。'
- en: 'Open the `map.component.ts` file and modify the `import` statements accordingly:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`map.component.ts`文件，并相应地修改`import`语句：
- en: '[PRE41]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Declare a component property to get a reference for the information window
    using the `@ViewChild` decorator:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@ViewChild`装饰器声明一个组件属性，以获取信息窗口的引用：
- en: '[PRE42]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a method to open the information window:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个打开信息窗口的方法：
- en: '[PRE43]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In the preceding code, we call the `open` method of the information window reference,
    passing the associated map `marker` as a parameter.
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们调用信息窗口引用的`open`方法，并将相关的地图`marker`作为参数传递。
- en: 'Open the `map.component.html` file and bind the `showInfo` component method
    to the `mapClick` event of the `<map-marker>` component:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`map.component.html`文件，并将`showInfo`组件方法绑定到`<map-marker>`组件的`mapClick`事件：
- en: '[PRE44]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We create the `marker` template reference variable to get a reference to the
    `mapMarker` object and pass it as a parameter in the `showInfo` method.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们创建`marker`模板引用变量以获取对`mapMarker`对象的引用，并在`showInfo`方法中将它作为参数传递。
- en: Run the application using the **serve** option of Nx Console and select a POI
    from the list.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Nx Console的**serve**选项运行应用程序，并从列表中选择一个POI。
- en: 'Click on the POI marker on the map, and you should get output similar to the
    following:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击地图上的POI标记，你应该得到以下类似的输出：
- en: '![Figure 8.20 – Map information window](img/B18465_08_20.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图8.20 – 地图信息窗口](img/B18465_08_20.png)'
- en: Figure 8.20 – Map information window
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20 – 地图信息窗口
- en: 'We consider that a POI is visited when the visitor clicks on the map marker
    and the information window appears. Our application will then notify the store
    of that action to save it in the local storage. Let’s create the logic to interact
    with the store:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为当访客点击地图标记并出现信息窗口时，POI已被访问。然后我们的应用程序将通知存储该动作以将其保存在本地存储中。让我们创建与存储交互的逻辑：
- en: 'Open the `poi.actions.ts` file and create the following actions for the feature
    of visiting a POI:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`poi.actions.ts`文件，并为访问POI的功能创建以下操作：
- en: '[PRE45]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Open the `poi.effects.ts` file, and create a new effect that listens to the
    `visitPoi` action and increases the total visits of the specified `poiId` by one:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`poi.effects.ts`文件，并创建一个新的效果，该效果监听`visitPoi`动作，并将指定`poiId`的总访问次数增加一：
- en: '[PRE46]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding code, we fetch the local storage key that begins with the word
    `tour-`, followed by the POI ID. If this is located, we increment it by one and
    update the local storage. Otherwise, we initialize it to one.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们获取以单词`tour-`开头的本地存储键，后面跟着POI ID。如果找到这个键，我们就将其增加一，并更新本地存储。如果没有找到，我们将其初始化为1。
- en: In a real case, it would be better to abstract the logic of local storage in
    an Angular service that would act as a wrapper over the global `localStorage`
    object. We encourage you to create such a service while building this project.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实际情况下，最好将本地存储的逻辑抽象为一个Angular服务，该服务将作为全局`localStorage`对象的包装器。我们鼓励你在构建此项目时创建此类服务。
- en: 'Open the `map.component.ts` file and import `PoiActions` from the `@packt/poi`
    namespace:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`map.component.ts`文件，并从`@packt/poi`命名空间导入`PoiActions`：
- en: '[PRE47]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Modify the `showInfo` component method so that it dispatches a `visitPoi` action
    to the store:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`showInfo`组件方法，使其向存储发送`visitPoi`动作：
- en: '[PRE48]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Finally, open the `map.component.html` file and pass the selected POI ID into
    the `showInfo` method:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开`map.component.html`文件并将选定的POI ID传递给`showInfo`方法：
- en: '[PRE49]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Our application can now record the visits of each POI and keep them in the local
    storage of the browser. In the following section, we will create the main component
    of the administrator portal that leverages visit data.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在可以记录每个POI的访问次数并将它们保存在浏览器的本地存储中。在下一节中，我们将创建管理员门户的主组件，该组件利用访问数据。
- en: Displaying visit statistics
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示访问统计
- en: 'The administrator portal will display visit statistics on its main component
    with a graph. We will use the **ng2-charts** library to visualize data on a pie
    chart. Let’s see how to add the required functionality in that component:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员门户将在其主组件上显示访问统计，并使用图表进行可视化。我们将使用**ng2-charts**库在饼图中可视化数据。让我们看看如何在组件中添加所需的功能：
- en: 'Install the `ng2-charts` library using the following command:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装`ng2-charts`库：
- en: '[PRE50]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The preceding command will also install the `chart.js` library, which is at
    the core of the `ng2-charts` library.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令还将安装`chart.js`库，它是`ng2-charts`库的核心。
- en: 'Open the `admin.module.ts` file, and import `PoiModule` from the `@packt/poi`
    namespace and `NgChartsModule` from the `ng2-charts` npm package:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`admin.module.ts`文件，并从`@packt/poi`命名空间导入`PoiModule`，从`ng2-charts` npm包导入`NgChartsModule`：
- en: '[PRE51]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Open the `admin.component.ts` file and modify the `import` statements accordingly:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`admin.component.ts`文件并根据需要修改`import`语句：
- en: '[PRE52]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Modify the `AdminComponent` class so that it interacts with the application
    store to get POI data:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`AdminComponent`类，使其与应用程序存储交互以获取POI数据：
- en: '[PRE53]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the preceding code, we manually subscribe to the `selectAllPoi` selector
    using a `subscription` property instead of an `async` pipe. In this case, we must
    also unsubscribe manually in the `ngOnDestroy` life cycle hook of the component
    using the `unsubscribe` method. If we fail to do so, we may introduce a memory
    leak to our application.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们手动使用`subscription`属性订阅`selectAllPoi`选择器，而不是使用`async`管道。在这种情况下，我们必须在组件的`ngOnDestroy`生命周期钩子中使用`unsubscribe`方法手动取消订阅。如果我们不这样做，我们可能会在我们的应用程序中引入内存泄漏。
- en: 'Now that we have set up the interaction with the store, we can get statistics
    from the local storage and create our pie chart:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了与存储的交互，我们可以从本地存储中获取统计数据并创建我们的饼图：
- en: 'Execute the following command of the Nx CLI to create a service in the `admin`
    library:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下Nx CLI命令以在`admin`库中创建一个服务：
- en: '[PRE54]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Open the `admin.service.ts` file and add the following `import` statement:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`admin.service.ts`文件并添加以下`import`语句：
- en: '[PRE55]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create a method to get all saved traffic statistics from the local storage
    of the browser:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个方法来从浏览器的本地存储中获取所有保存的流量统计数据：
- en: '[PRE56]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In the preceding method, we get the traffic of each POI based on its `id` property.
    We then convert the `stat` property to a number by adding the `+` prefix.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们根据每个POI的`id`属性获取其流量。然后通过添加`+`前缀将`stat`属性转换为数字。
- en: 'Open the `admin.component.ts` file and add the following `import` statements:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`admin.component.ts`文件并添加以下`import`语句：
- en: '[PRE57]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Declare component properties for the labels and the actual data that we will
    display on the pie graph, and inject `AdminService` into the `constructor` of
    the `AdminComponent` class:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明组件属性，用于显示在饼图上的标签和实际数据，并将`AdminService`注入到`AdminComponent`类的`constructor`中：
- en: '[PRE58]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create a component method to set the labels and the data of the graph:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个组件方法来设置图表的标签和数据：
- en: '[PRE59]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The graph labels are the titles of the POI, and the data comes from the `getStatistics`
    method of the `adminService` variable.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图表标签是POI的标题，数据来自`adminService`变量的`getStatistics`方法。
- en: 'Call the `buildChart` method inside the `subscribe` method of the `selectAllPoi`
    selector:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`selectAllPoi`选择器的`subscribe`方法内部调用`buildChart`方法：
- en: '[PRE60]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Finally, open the `admin.component.html` file and replace its content with
    the following HTML template:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开`admin.component.html`文件并用以下HTML模板替换其内容：
- en: '[PRE61]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In the preceding template, we use the `baseChart` directive to convert the `<canvas>`
    element to a graph. The graph is set to `pie` using the `type` property.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们使用`baseChart`指令将`<canvas>`元素转换为图表。图表通过`type`属性设置为`pie`类型。
- en: 'If we now run our application using Nx Console, visit a POI from the map, and
    switch to the `http://localhost:4200/admin` URL, we should see the following output:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在使用 Nx 控制台运行我们的应用程序，从地图中访问一个 POI，并切换到 `http://localhost:4200/admin` URL，我们应该看到以下输出：
- en: '![Figure 8.21 – POI statistics](img/B18465_08_21.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – POI 统计信息](img/B18465_08_21.png)'
- en: Figure 8.21 – POI statistics
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – POI 统计信息
- en: An administrator can now have a complete overview of how each POI does from
    a visit perspective. Our administrator portal has now been completed. The visitor
    portal can interact with the store and save visit statistics for each POI in the
    local storage of the browser. The administrator portal can then fetch and display
    that data on a pie chart.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 现在管理员可以全面了解每个 POI 的访问情况。我们的管理员门户现在已经完成。访客门户可以与存储交互并在浏览器的本地存储中保存每个 POI 的访问统计信息。然后管理员门户可以获取并显示这些数据在饼图上。
- en: Summary
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this project, we built an enterprise portal application to visit POIs on
    a map and display visit statistics for each one. First, we saw how to use Nx to
    scaffold a new Nx monorepo application. Then, we created two different portals
    for our application, a visitor and an administrator. We learned how to use the
    NgRx library in the visitor portal to maintain and manage the state of our application.
    Finally, we saw how to use a chart library in the administrator portal to display
    statistics for each POI.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们构建了一个企业门户应用程序，用于在地图上访问 POI 并显示每个 POI 的访问统计信息。首先，我们看到了如何使用 Nx 来搭建一个新的
    Nx 单一代码库应用程序。然后，我们为我们的应用程序创建了两个不同的门户，一个是访客门户，另一个是管理员门户。我们学习了如何在访客门户中使用 NgRx 库来维护和管理应用程序的状态。最后，我们看到了如何在管理员门户中使用图表库来显示每个
    POI 的统计信息。
- en: In the next chapter, we will use the Angular CLI to build a UI component library
    using the Angular CDK.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Angular CLI 使用 Angular CDK 构建一个 UI 组件库。
- en: Practice questions
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习问题
- en: 'Let’s take a look at a few practice questions:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看几个练习问题：
- en: Which npm package creates an Nx monorepo application?
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 npm 包创建一个 Nx 单一代码库应用程序？
- en: What are the differences between the Angular CLI and Nx CLI?
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Angular CLI 和 Nx CLI 之间的区别是什么？
- en: How can we enable NgRx in the library of a monorepo?
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在单一代码库的库中启用 NgRx？
- en: How do we select data from the store?
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何从存储中选择数据？
- en: How do we interact with HTTP in NgRx?
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 NgRx 中与 HTTP 交互？
- en: Where do we modify the state of an NgRx store?
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在哪里修改 NgRx 存储的状态？
- en: What is the difference between a root and a feature state?
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根状态和功能状态之间的区别是什么？
- en: Which npm package can we use for Google Maps in an Angular application?
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个 npm 包在 Angular 应用程序中使用 Google Maps？
- en: How can we subscribe to an NgRx selector manually?
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何手动订阅 NgRx 选择器？
- en: Which component do we use to display additional information on Google Maps?
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个组件在 Google 地图上显示附加信息？
- en: Further reading
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are some links to build upon what we learned in the chapter:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些链接，可以帮助我们巩固本章所学的内容：
- en: 'Nx: [https://nx.dev](https://nx.dev)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nx：[https://nx.dev](https://nx.dev)
- en: 'NgRx: [https://ngrx.io](https://ngrx.io)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx：[https://ngrx.io](https://ngrx.io)
- en: 'NgRx store guide: [https://ngrx.io/guide/store](https://ngrx.io/guide/store)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NgRx 存储指南：[https://ngrx.io/guide/store](https://ngrx.io/guide/store)
- en: 'Angular Material card component: [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview)'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Material 卡组件：[https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview)
- en: 'Angular Google Maps: [https://github.com/angular/components/tree/main/src/google-maps](https://github.com/angular/components/tree/main/src/google-maps)'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Google Maps：[https://github.com/angular/components/tree/main/src/google-maps](https://github.com/angular/components/tree/main/src/google-maps)
- en: '`ng2-charts`: [https://valor-software.com/ng2-charts](https://valor-software.com/ng2-charts)'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng2-charts`：[https://valor-software.com/ng2-charts](https://valor-software.com/ng2-charts)'
- en: '`create-nx-workspace`: [https://www.npmjs.com/package/create-nx-workspace](https://www.npmjs.com/package/create-nx-workspace)'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create-nx-workspace`：[https://www.npmjs.com/package/create-nx-workspace](https://www.npmjs.com/package/create-nx-workspace)'
