["```js\n      // App.js\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport SocialTracker from '../components/SocialTracker'\nimport * as SocialActions from '../actions/social'\n\nfunction mapStateToProps(state) {\n  return {\n    social: state.social\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(SocialActions, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocialTracker)\n```", "```js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```", "```js\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducer from '../reducers'\n\nconst createStoreWithMiddleware = applyMiddleware(\n  thunk\n)(createStore)\n\nexport default function configureStore(initialState) {\n  const store = createStoreWithMiddleware(reducer, initialState)\n\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      const nextReducer = require('../reducers')\n      store.replaceReducer(nextReducer)\n    })\n  }\n\n  return store\n}\n```", "```js\nimport JSONUtil from '../utils/jsonutil'\nimport ArrayUtil from '../utils/array'\n\nexport const FILTER_BY_TWEETS = 'FILTER_BY_TWEETS';\nexport const FILTER_BY_REDDITS = 'FILTER_BY_REDDITS';\nexport const SYNC_TWEETS = 'SYNC_TWEETS';\nexport const SYNC_REDDITS = 'SYNC_REDDITS';\n\nexport function filterTweets(event) {\n  return {\n    type: FILTER_BY_TWEETS,\n    showTweets: event.target.checked\n  }\n}\n\nexport function filterReddits(event) {\n  return {\n    type: FILTER_BY_REDDITS,\n    showReddits: event.target.checked\n  }\n}\n\nexport function syncTweets(json) {\n  return {\n    type: SYNC_TWEETS,\n    tweets: json.map((tweet) => {\n      return {...tweet, type: 'tweet'}\n    }),\n    receivedAt: Date.now()\n  }\n}\n\nexport function syncReddits(json) {\n  return {\n    type: SYNC_REDDITS,\n    reddits: json.data.children.map((child) => {\n      return {...child.data, type: 'reddit'}\n    }),\n    receivedAt: Date.now()\n  }\n}\n\nexport function fetchTweets(username) {\n  return dispatch => {\n    fetch(`/tweets.json?username=${username}`)\n        .then(JSONUtil.parseJSON)\n        .then(json => dispatch(syncTweets(json))).catch(JSONUtil.handleParseException)\n  }\n}\n\nexport function fetchReddits(topic) {\n  return dispatch => {\n    fetch(`https://www.reddit.com/r/${topic}.json`)\n        .then(JSONUtil.parseJSON)\n        .then(json => dispatch(syncReddits(json))).catch(JSONUtil.handleParseException)\n  }\n}\n```", "```js\nimport JSONUtil from '../utils/jsonutil'\nimport ArrayUtil from '../utils/array'\n```", "```js\nclass ArrayUtil {\n  static in_groups_of(arr, n) {\n    var ret = [];\n    var group = [];\n    var len = arr.length;\n    for (var i = 0; i < len; ++i) {\n      group.push(arr[i]);\n      if ((i + 1) % n == 0) {\n        ret.push(group);\n        group = [];\n      }\n    }\n    if (group.length) ret.push(group);\n    return ret;\n  };\n}\n\nexport {ArrayUtil as default};\n```", "```js\nclass JSONUtil{\n  static parseJSON(response){\n    return response.json()\n  }\n\n  static handleParseException(ex) {\n    console.log('parsing failed', ex)\n  }\n}\n\nexport { JSONUtil as default }\n```", "```js\nexport const FILTER_BY_TWEETS = 'FILTER_BY_TWEETS';\nexport const FILTER_BY_REDDITS = 'FILTER_BY_REDDITS';\nexport const SYNC_TWEETS = 'SYNC_TWEETS';\nexport const SYNC_REDDITS = 'SYNC_REDDITS';\n\n```", "```js\nexport function filterTweets(event) {\n  return {\n    type: FILTER_BY_TWEETS,\n    showTweets: event.target.checked\n  }\n}\n```", "```js\nexport function fetchTweets(username) {\n  return dispatch => {\n    fetch(`/tweets.json?username=${username}`)\n        .then(JSONUtil.parseJSON)\n        .then(json => dispatch(syncTweets(json))).catch(JSONUtil.handleParseException)\n  }\n}\n```", "```js\nbindActionCreators(SocialActions, dispatch)\n```", "```js\ndispatch(syncTweets(json))\n```", "```js\nimport { FILTER_BY_TWEETS, FILTER_BY_REDDITS, SYNC_REDDITS, SYNC_TWEETS } from '../actions/social'\nimport _ from 'underscore'\n\nconst mergeFeed = (tweets = [], reddits = [], showTweets = true, showReddits = true) => {\n  let mergedFeed = []\n  mergedFeed = showTweets ? mergedFeed.concat(tweets) : mergedFeed;\n  mergedFeed = showReddits ? mergedFeed.concat(reddits) : mergedFeed;\n\n  mergedFeed = _.sortBy(mergedFeed, (feedItem) => {\n    if (feedItem.type == 'tweet') {\n      let date = new Date(feedItem.created_at);\n      return date.getTime();\n    } else if ((feedItem.type == 'reddit')) {\n      return feedItem.created_utc * 1000;\n    }\n  })\n  return mergedFeed;\n};\n\nexport default function social(state = {\n  tweets: [],\n  reddits: [],\n  feed: [],\n  showTweets: true,\n  showReddits: true\n}, action) {\n  switch (action.type) {\n    case FILTER_BY_TWEETS:\n      return {...state, showTweets: action.showTweets, feed: mergeFeed(state.tweets, state.reddits, action.showTweets, state.showReddits)};\n    case FILTER_BY_REDDITS:\n      return {...state, showReddits: action.showReddits, feed: mergeFeed(state.tweets, state.reddits, state.showTweets, action.showReddits)};\n    case SYNC_TWEETS:\n      return {...state, tweets: action.tweets, feed: mergeFeed(action.tweets, state.reddits, state.showTweets, state.showReddits)};\n    case SYNC_REDDITS:\n      return {...state, reddits: action.reddits, feed: mergeFeed(state.tweets, action.reddits,  state.showTweets, state.showReddits)}\n    default:\n      return state\n  }\n}\n```", "```js\nexport default function social(state = {\n  tweets: [],\n  reddits: [],\n  feed: [],\n  showTweets: true,\n  showReddits: true\n}, action) \n```", "```js\nswitch (action.type) {\n    case FILTER_BY_TWEETS:\n      return {...state, showTweets: action.showTweets, feed: mergeFeed(state.tweets, state.reddits, action.showTweets, state.showReddits)};\n  â€¦\n}\n```", "```js\nclass SocialTracker extends Component {\n  constructor() {\n    super();\n    this.state = {twitter: 'twitter', reddit: 'twitter'}\n  }\n  componentDidMount() {\n    this.syncFeed();\n  }\n  render() {\n   let {filterTweets, filterReddits} = this.props;\n    let {showTweets, showReddits} = this.props.social;\n    return (\n        <Grid className=\"grid\">\n          <Row>\n            <Jumbotron className=\"center-text\">\n              <h1>Social Media Tracker</h1>\n            </Jumbotron>\n          </Row>\n          <Row>\n            <Col xs={8} md={8} mdOffset={2}>\n              <Table striped  hover>\n                <thead>\n                <tr>\n                  <th width='200'>Feed Type</th>\n                  <th>Feed Source</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                  <td><Input id='test' type=\"checkbox\" label=\"Twitter\" onChange={filterTweets} checked={showTweets}/></td>\n                  <td><Input onChange={::this.changeTwitterSource} type=\"text\" addonBefore=\"@\" value={this.state.twitter}/></td>\n                </tr>\n                <tr>\n                  <th><Input type=\"checkbox\" label=\"Reddit\" onChange={filterReddits} checked={showReddits}/></th>\n                  <td><Input onChange={::this.changeRedditSource} type=\"text\" addonBefore=\"@\" value={this.state.twitter}/></td>\n                </tr>\n                <tr>\n                  <th></th>\n                  <td><Button bsStyle=\"primary\" bsSize=\"large\" onClick={::this.syncFeed}>Sync Feed</Button>\n                  </td>\n                </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n          {this.renderFeed()}\n        </Grid>\n    )\n  }\n\n  changeTwitterSource(event) {\n    this.setState({twitter: event.target.value});\n  }\n\n  changeRedditSource(event) {\n    this.setState({reddit: event.target.value});\n  }\n\n  syncFeed() {\n    const { fetchTweets, fetchReddits } = this.props;\n    fetchReddits(this.state.reddit);\n    fetchTweets(this.state.twitter);\n    console.log('syncFeed was called');\n  }\n\n  renderFeed() {\n    let {feed} = this.props.social;\n    let feedCollection = ArrayUtil.in_groups_of(feed, 3);\n    if (feed.length > 0) {\n      return feedCollection.map((feedGroup, index) => {\n        return <Row key={`${feedGroup[0].id}${index}`}>\n          {feedGroup.map((feed) => {\n            if (feed.type == 'tweet') {\n              return <Col md={4} key={feed.id}><div className=\"well twitter\"><p>{feed.text}</p></div></Col>;\n            } else {\n              let display = feed.selftext == \"\" ? `${feed.title}: ${feed.url}` : feed.selftext;\n              return <Col md={4} key={feed.id}><div className=\"well reddit\"><p>{display}</p></div></Col>;\n            }\n\n          })}\n        </Row>\n      });\n    } else {\n      return <div></div>\n    }\n  }\n\n}\n\nexport default SocialTracker\n```", "```js\nconstructor() {\n    super();\n    this.state = {twitter: 'twitter', reddit: 'twitter'}\n  }\n```", "```js\n    let {filterTweets, filterReddits} = this.props;\n    let {showTweets, showReddits} = this.props.social;\n```", "```js\nfunction mapStateToProps(state) {\n  return {\n    social: state.social\n  }\n}\n```", "```js\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(SocialActions, dispatch)\n}\n```", "```js\n<Input id='test' type=\"checkbox\" label=\"Twitter\" onChange={filterTweets} checked={showTweets}/>\n```", "```js\nrenderFeed() {\n    let {feed} = this.props.social;\n    let feedCollection = ArrayUtil.in_groups_of(feed, 3);\n    if (feed.length > 0) {\n      return feedCollection.map((feedGroup, index) => {\n        console.log(feedGroup);\n        return <Row key={`${feedGroup[0].id}${index}`}>\n          {feedGroup.map((feed) => {\n            if (feed.type == 'tweet') {\n              return <Col md={4} key={feed.id}><div className=\"well twitter\"><p>{feed.text}</p></div></Col>;\n            } else {\n              let display = feed.selftext == \"\" ? `${feed.title}: ${feed.url}` : feed.selftext;\n              return <Col md={4} key={feed.id}><div className=\"well reddit\"><p>{display}</p></div></Col>;\n            }\n\n          })}\n        </Row>\n      });\n    } else {\n      return <div></div>\n    }\n  }\n```", "```js\n    let {feed} = this.props.social;\n```", "```js\n  syncFeed() {\n    const { fetchTweets, fetchReddits } = this.props;\n    fetchReddits(this.state.reddit);\n    fetchTweets(this.state.twitter);\n    console.log('syncFeed was called');\n  }\n```"]