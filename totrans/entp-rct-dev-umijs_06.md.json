["```js\n    import { User } from '@/types/user.d';\n    import { Request, Response } from 'express';\n    const user: { currentUser: User } = {\n      currentUser: {\n        isLoggedIn: false,\n      },\n    };\n    const login = (req: Request, res: Response) => {\n      const { email, password } = req.body;\n    };\n    ```", "```js\n      if (email == 'john@doe.com' && password == 'user') {\n        user.currentUser = {\n          id: 0,\n          name: 'John Doe',\n          company: 'Umi Group',\n          role: {\n            id: 1,\n            title: 'Inside Sales',\n          },\n          isLoggedIn: true,\n        };\n        res.json(user.currentUser);\n      }\n    ```", "```js\n    else if (email == 'marry@doe.com' && \n             password == 'admin') {\n        user.currentUser = {\n          id: 1,\n          name: 'Marry Doe',\n          company: 'Umi Group',\n          role: {\n            id: 0,\n            title: 'Sales Manager',\n          },\n          isLoggedIn: true,\n        };\n        res.json(user.currentUser);\n      } else {\n        res.status(401).send();\n      }\n    ```", "```js\n    const logout = (_: any, res: Response) => {\n      user.currentUser = { isLoggedIn: false };\n      res.send({ success: true });\n    };\n    const getUser = (_: any, res: Response) => {\n      if (!user.currentUser.isLoggedIn) {\n        res.status(204).send();\n      } else {\n        res.json(user.currentUser);\n      }\n    };\n    export default {\n      'POST /api/login': login,\n      'POST /api/logout': logout,\n      '/api/currentUser': getUser,\n    };\n    ```", "```js\n    import { User } from '@/types/user.d';\n    import { request } from 'umi';\n    export function getCurrentUser() {\n      return request<User>(`/api/currentUser`, {\n        method: 'GET',\n      });\n    }\n    export function userLogin(email: string, \n      password: string) {\n      return request<User>(`/api/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        data: { email, password },\n      });\n    }\n    export function userLogout() {\n      return request<void>(`/api/logout`, {\n        method: 'POST',\n      });\n    }\n    ```", "```js\n    import { SelectLang, useModel, history } from 'umi';\n    import styles from './index.less';\n    import LoginForm from './LoginForm';\n    export default function Page() {\n      return (\n        <div>\n          <span className={styles.header}>\n            <span className={styles.logo}>\n              <img\n                height={45}\n                alt=\"crm logo\"\n                src=\"https://img.icons8.com/ios-filled/\n                     50/ffffff/customer-insight.png\"\n              />\n              &nbsp; &nbsp;\n              <h1 className={styles.title}>Umi CRM</h1>\n            </span>\n            <SelectLang className={styles.language} />\n          </span>\n          <div className={styles.container}>\n            <LoginForm />\n          </div>\n        </div>\n      );\n    }\n    ```", "```js\n    @import '~antd/es/style/themes/default.less';\n    .title {\n      text-align: center;\n    }\n    .container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .language {\n      color: white;\n    }\n    ```", "```js\n    .header {\n      display: flex;\n      flex-flow: row nowrap;\n      justify-content: space-between;\n      padding: 10px;\n      margin-bottom: 20px;\n      background: #1895bb;\n      background: linear-gradient(50deg, #1895bb 0%,\n                                  #14cfbd 100%);\n      > .logo {\n        width: 95%;\n        display: flex;\n        flex-flow: row nowrap;\n        justify-content: center;\n        > h1 {\n          color: white;\n        }\n      }\n    }\n    ```", "```js\n    @import '~antd/es/style/themes/default.less';\n    .container {\n      :global {\n        #components-form-demo-normal-login .login-form {\n          width: 450px;\n          margin: 5%;\n          @media screen and (max-width: @screen-sm) {\n            width: 90%;\n          }\n        }\n        #components-form-demo-normal-login \n          .login-form-forgot {\n          float: right;\n        }\n        #components-form-demo-normal-login \n          .login-form-button {\n          width: 100%;\n        }\n      }\n    }\n    ```", "```js\n<!doctype html>\n<html>\n<head>\n  <title>\n    <%= context.config.layout.title %>\n  </title>\n</head>\n<body>\n  <div id=\"root\"></div>\n</body>\n</html>\n```", "```js\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width,\n    initial-scale=1.0\" />\n  <title>Umi CRM</title>\n</head>\n<body style=\"background-color: whitesmoke;\">\n  <div id=\"root\"></div>\n</body>\n</html>\n```", "```js\n    import { User } from '@/types/user.d';\n    export interface GlobalState {\n      login?: (email: string, password: string) => \n        Promise<User>;\n      logout?: () => Promise<void>;\n      fetchUser?: () => Promise<User>;\n      currentUser?: User;\n    }\n    ```", "```js\n    import routes from '../config/routes';\n    import { RunTimeLayoutConfig, history } from 'umi';\n    import HeaderOptions from './components/HeaderOptions';\n    import { getCurrentUser, userLogin, userLogout } from './services/user';\n    import { GlobalState } from './types/globalState';\n    export async function getInitialState(): \n      Promise<GlobalState> {\n      const fetchUser = async () => \n        await getCurrentUser();\n      const logout = async () => {\n        await userLogout(), history.push('/login');\n      };\n      const login = \n        async (email: string, password: string) => {\n        return await userLogin(email, password);\n      };\n      const currentUser = await fetchUser();\n      return {\n        login,\n        logout,\n        fetchUser,\n        currentUser,\n      };\n    }\n    ```", "```js\n    export default function HeaderMenu() {\n      const { initialState, setInitialState } = \n        useModel('@@initialState');\n      const userLogout = () => {\n        initialState?.logout?.();\n        setInitialState((state) => ({\n          ...state,\n          currentUser: undefined,\n        }));\n      };\n    ```", "```js\n    const options = (\n        <Menu className=\n          {styles.menu} onClick={userLogout}>\n          <Menu.Item key=\"center\">\n            <LogoutOutlined /> Logout\n          </Menu.Item>\n        </Menu>\n      );\n    ```", "```js\n    return (\n        <Dropdown className=\n          {styles.dropdown} overlay={options}>\n          <span>\n            <Avatar size=\"small\" className=\n              {styles.avatar} icon={<UserOutlined />} />\n            <span className={`${styles.name} anticon`}>\n              {initialState?.currentUser?.name}\n            </span>\n          </span>\n        </Dropdown>\n      );\n    ```", "```js\n    const { initialState } = useModel('@@initialState');\n    ```", "```js\n    <div className={styles.content}>\n      <div className={styles.contentTitle}>\n        <FormattedMessage id=\"greetings.hello\" /> \n          {initialState?.currentUser?.name},{' '}\n        <FormattedMessage id=\"greetings.welcome\" />.\n      </div>\n      <div>\n        {initialState?.currentUser?.role?.title} |{' '}\n        {initialState?.currentUser?.company}\n      </div>\n    </div>\n    ```", "```js\n    const { initialState, setInitialState } = useModel('@@initialState');\n      const onFinish = async (values: any) => {\n        const user = await initialState?.login?.(\n          values.username, values.password);\n        if (user) {\n          setInitialState((state) => ({\n            ...state,\n            currentUser: user,\n          }));\n        }\n      };\n    ```", "```js\n    const { initialState } = useModel('@@initialState');\n      useEffect(() => {\n        if (initialState?.currentUser?.isLoggedIn)\n          history.push('/');\n      }, [initialState?.currentUser]); \n    ```", "```js\nexport const layout: RunTimeLayoutConfig = ({ initialState }) => {\n  return {\n    routes,\n    rightContentRender: () => <HeaderOptions />,\n    onPageChange: () => {\n      const isLoggedIn =\n      initialState?.currentUser?.isLoggedIn;\n      const location = history.location.pathname;\n      if (!isLoggedIn && location != '/login') \n        history.push(`/login`);\n    },\n  };\n};\n```", "```js\nexport default function (initialState: any) {\n  const { access } = initialState;\n  return {\n    readOnly: access == 'basic',\n  };\n}\n```", "```js\nimport { GlobalState } from './types/globalState';\nexport default function (initialState: GlobalState) {\n  const { currentUser } = initialState;\n  return {\n    canAdmin: currentUser?.role?.id == 0,\n  };\n}\n```", "```js\n    yarn umi g page /Workflow/index --typescript --less\n    ```", "```js\n    import ProTable from '@ant-design/pro-table';\n    import { Button } from 'antd';\n    import { PageContainer } from '@ant-design/pro-layout';\n    import { PlusOutlined } from '@ant-design/icons';\n    import { FormattedMessage } from '@/.umi/plugin-locale/localeExports';\n    import columns from './columns';\n    export default function Page() {\n      return (\n        <PageContainer>\n          <ProTable<any>\n            columns={columns}\n            dataSource={workflow}\n            rowKey=\"id\"\n            search={false}\n            pagination={{ pageSize: 5 }}\n            dateFormatter=\"string\"\n            toolBarRender={() => [\n              <Button key=\"button\" icon={<PlusOutlined />}\n               type=\"primary\">\n                <FormattedMessage id=\"table.new\" />\n              </Button>,\n            ]}\n          />\n        </PageContainer>\n      );\n    }\n    ```", "```js\n    const workflow = [\n      {\n        id: 0,\n        name: 'AssignEmail',\n        table: 'Opportunity',\n        type: 0,\n        trigger: 0,\n      },\n      {\n        id: 1,\n        name: 'NewOpportunity',\n        table: 'Analytics',\n        type: 1,\n        trigger: 1,\n      },\n    ];\n    ```", "```js\n    import { ProColumns } from '@ant-design/pro-table';\n    import { FormattedMessage } from 'umi';\n    const columns: ProColumns<any>[] = [\n      {\n        title: <FormattedMessage id=\"table.workflow.name\"\n               />,\n        dataIndex: 'name',\n      },\n      {\n        title: <FormattedMessage id=\"table.workflow.type\"\n               />,\n        dataIndex: 'type',\n      },\n      {\n        title: <FormattedMessage id=\"table.workflow.table\"\n               />,\n        dataIndex: 'table',\n      },\n      {\n        title: <FormattedMessage id=\"table.options\" />,\n        valueType: 'option',\n        hideInSetting: true,\n        hideInDescriptions: true,\n        render: () => [\n          <a>\n            <FormattedMessage id=\"table.edit\" />\n          </a>,\n        ],\n      },\n    ];\n    export default columns;\n    ```", "```js\n    'table.workflow.name': 'Name',\n    'table.workflow.type': 'Type',\n    'table.workflow.table': 'Table',\n    ```", "```js\n    {\n      path: '/workflow',\n      name: 'workflow',\n      access: 'canAdmin',\n      icon: 'DeploymentUnitOutlined',\n      component: '@/pages/Workflow',\n    },\n    ```", "```js\n    unAccessible: (\n      <Result\n        status=\"403\"\n        title=\"403\"\n        subTitle=\"Sorry, you are not authorized to access \n                  this page.\"\n        extra={\n            <Button type=\"primary\" onClick={() => \n              history.push('/')}>\n              Back to Home\n            </Button>\n        }\n      />\n    )\n    ```", "```js\nimport { useAccess } from \"umi\";\nconst Page = (props) => {\n  const [disabled, setDisabled] = useState<any>();\n  const access = useAccess();\n  if (access.readOnly) {\n    setDisabled(true);\n  }\n  return <Button disabled={disabled}> Edit </Button>;\n};\nexport default Page;\n```", "```js\nimport { useAccess } from \"umi\";\nconst Page = (props) => {\n  const access = useAccess();\n  return (\n    <Access\n      accessible={access.readAndWrite}\n      fallback={<div>You are not allowed to write \n                content.</div>}\n    >\n      <TextArea></TextArea>\n    </Access>\n  );\n};\nexport default Page;\n```", "```js\n    const { canAdmin } = useAccess();\n    ```", "```js\n    rowSelection={canAdmin && { onChange: () => {} }}\n    tableAlertOptionRender={() => <a>Assign</a>}\n    ```", "```js\n    const errorHandler = (error: ResponseError) => {\n      const { response } = error;\n      let messages = undefined;\n      switch (getLocale()) {\n        case 'en-US':\n          messages = eng;\n          break;\n        case 'pt-BR':\n          messages = port;\n          break;\n      }\n      if (response) {\n        message.error(messages[response.status]);\n      } else if (!response) {\n        message.error(messages['empty']);\n      }\n      throw error;\n    };\n    export const request: RequestConfig = { errorHandler };\n    ```", "```js\n    export default {\n      400: 'The request failed.',\n      401: 'Invalid credentials, you are not \n            authenticated.',\n      403: 'You cannot perform this operation.',\n      404: 'Resource not found.',\n      405: 'Operation not allowed.',\n      406: 'The operation cannot be completed.',\n      410: 'The service is no longer available',\n      422: 'Could not process your request.',\n      500: 'Internal error, contact administrator.',\n      502: 'Internal service communication failed.',\n      503: 'Service temporarily unavailable.',\n      504: 'The maximum wait time for an answer has \n            expired.',\n      empty: 'Failed to connect to services',\n    };\n    ```", "```js\n    import eng from './locales/en-US/http';\n    import port from './locales/pt-BR/http';\n    ```"]