- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reactive State Management with NgRx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular and **reactive programming** are best buddies, and handling an app’s
    state reactively is one of the best things you can do with your app. **NgRx**
    (short for **Angular Reactive Extensions**) is a framework that provides a set
    of libraries as reactive extensions for Angular. In this chapter, you’ll learn
    how to use the NgRx ecosystem to manage your app’s state reactively, and you’ll
    also learn about a couple of cool things the NgRx ecosystem will help you with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the recipes we’re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first NgRx store with actions and reducers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx Store Devtools to debug state changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx selectors to select and render state in components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx effects to fetch data from API calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx Component Store to manage the state of a component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the recipes in this chapter, ensure your setup is complete as per the ''Technical
    Requirements'' in the ''Angular-Cookbook-2E'' GitHub repository. For setup details,
    visit: [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/docs/technical-requirements.md).
    The starter code for this chapter is located at [https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter06](https://github.com/PacktPublishing/Angular-Cookbook-2E/tree/main/start/apps/chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first NgRx store with actions and reducers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll work your way through understanding NgRx’s basics by
    setting up your first NgRx store. You’ll also create some actions, along with
    a reducer, and to see the changes in the reducer, we’ll be putting in appropriate
    console logs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-actions-reducer`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. If you add a couple of items,
    you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_01.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.1: ngrx-actions-reducers app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running, we’ll move on to the steps for the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an Angular application with a single page containing a bucket. You
    can add fruits to your bucket and remove items from the bucket. We already have
    the `@ngrx/store` package installed in the workspace, so you don’t have to install
    it. However, when you work on a standalone app (or on some of your own projects),
    you would start by adding NgRx and running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `app.config.ts` file to provide the NgRx store as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we’ve passed an empty object `{}` to the `provideStore()` method;
    we’ll change that going forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we’ll create some actions. Create a folder named `store` inside the `app`
    folder. Then, create a file named `bucket.actions.ts` inside the `store` folder,
    and finally, add the following code to the newly created file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Since we have the actions in place now, we must create a reducer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `store` folder, name it `bucket.reducer.ts`, and
    add the following code to it to define the necessary imports and the initial state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’ll define the reducer. Add the following code to the `bucket.reducer.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll update the `app.config.ts` file to use the reducer we just created.
    Update the file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will use the actions we created to see the console logs from the reducer
    functions. Update the `bucket.component.ts` file to first use the NgRx store as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s dispatch actions to the store for when we’re adding fruits to and removing
    fruits from the bucket. We’ll also modify the code a bit to avoid repetition.
    Update the `bucket.component.ts` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you add or remove items from the bucket, you’re going to see the logs
    on the console, as follows in *Figure 6.2*, which means our actions and reducer
    are working:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Logs showing the actions for adding and removing items from a bucket'
  prefs: []
  type: TYPE_NORMAL
- en: And that covers it all for this recipe! You are now able to integrate an NgRx
    store into an Angular app, create NgRx actions, and dispatch those actions. You’re
    also able to create a reducer, define its state, and listen to actions to act
    on them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NgRx store walkthrough tutorial ([https://ngrx.io/guide/store/walkthrough](https://ngrx.io/guide/store/walkthrough))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NgRx reducers documentation ([https://ngrx.io/guide/store/reducers](https://ngrx.io/guide/store/reducers))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NgRx actions documentation ([https://ngrx.io/guide/store/actions](https://ngrx.io/guide/store/actions))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx Store Devtools to debug state changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use `@ngrx/store-devtools` to debug your
    app’s state, the dispatched actions, and the difference in the state when the
    actions are dispatched. We’ll be using an existing app we’re familiar with to
    learn about the process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-devtools`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab. If you add a couple of items,
    you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.3: Using the ngrx-devtools app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app set up, let’s see the steps of the recipe in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an Angular app that already has the `@ngrx/store` package integrated.
    We also have a reducer set up and some actions in place that are logged on the
    console as soon as you add or remove an item. We already have the `@ngrx/store-devtools`
    package installed in the workspace, so you don’t have to install it. However,
    when you work on a standalone app (or on some of your own projects), you would
    start by adding NgRx store `devtools` and running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'First, update your `app.config.ts` file to include a `StoreDevtoolsModule.instrument`
    entry, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And now download the **Redux DevTools** extension from [https://github.com/zalmoxisus/redux-devtools-extension/](https://github.com/zalmoxisus/redux-devtools-extension/)
    for your browser and install it. I’ll be consistently using the Chrome browser
    in this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Chrome DevTools**. There should be a new tab named **Redux**. Tap it
    and refresh the page. You’ll see something like this:![](img/B18469_06_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.4: Redux DevTools showing the initial Redux action dispatched'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remove all the fruits, add two cherries and a banana to the bucket, and then
    remove the banana from the bucket. You should see all the relevant actions being
    dispatched along with the state as follows:![](img/B18469_06_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.5: Redux DevTools showing bucket actions and state'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Great! You’ve just learned how to use the Redux DevTools extension to see your
    NgRx state and the actions being dispatched.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to understand that NgRx is a combination of Angular and RxJS,
    resulting in different patterns being implemented including Redux. By using the
    Store Devtools package and the Redux DevTools extension, we’re able to debug the
    app easily, which helps us find potential bugs, predict state changes, and be
    more transparent about what’s happening behind the scenes in the `@ngrx/store`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also see the difference that an action caused within an app’s state,
    i.e., when we add an item to the bucket and we remove an item from the bucket.
    See *Figure 6.6* and *Figure 6.7* for each case respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_06_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Add Fruit action in Redux Devtools'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the green background around the bucket item in *Figure 6.6*. This represents
    an addition to the state. You can see the `ReemoveFruit` action in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18469_06_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Remove Fruit action in Redux Devtools'
  prefs: []
  type: TYPE_NORMAL
- en: Now notice the red background and a strikethrough of the `Diff`. This represents
    removal from the state.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NgRx Store Devtools documentation ([https://ngrx.io/guide/store-devtools](https://ngrx.io/guide/store-devtools))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx selectors to select and render state in components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, we created some actions, a single reducer, and we integrated
    devtools to observe the state changes. However, our bucket application still renders
    the data using some variables in `BucketService`. In this recipe, we’re going
    all in with NgRx. We’re going to render the bucket items from the state as we
    already are saving them in the NgRx store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-selectors`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.8: Using the ngrx-selectors app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All we must do in this recipe is to work with NgRx selectors. The store, actions,
    and the reducer have already been set up. *Easy peasy*! Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll first show the fruits in our bucket on the **Home** page and, to do that,
    we must create our first NgRx selector:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `store` folder. Name it `bucket.selectors.ts`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have the selector in place, let’s use it in the `BucketComponent`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the `bucket.component.ts` file as follows to reassign the `$bucket`
    observable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refresh the app and try adding and removing items from the bucket. You can see
    that we still get the bucket items rendered. This time, it is from the NgRx store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we can remove the extra code that was managing the state from `BucketServic`e.
    Update the `BucketComponent` class in the `bucket.component.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you’ve removed the code, make sure to remove unused dependencies (imports)
    from the file as well. Try the app and you’ll see it still works. *Yay!*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we can update the `bucket.service.ts` file to not keep the bucket items
    in `BehaviorSubject`. Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we’ve removed the `addItem` and `removeItem` functions and added
    the `saveItems` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see that TypeScript is angry. That’s because `BucketService` doesn’t
    implement the `IBucketService` interface anymore. Update the `bucket-service.ts`
    file to update the interface as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And that’s it! You’ve finished the recipe. You will notice that as soon as we
    refresh the app, we lose the bucket items. But fear not – we’ll bring them back
    in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we already had actions and selectors set up. However, we were
    only dispatching actions to the store to add/remove items. The components were
    still using the `BucketService` and the Observable from it to manage the state
    and to render the items. Since we only wanted to work with NgRx for the entire
    process, we introduced a selector in our application to select the bucket items.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we use the `createFeatureSelector` method from `@ngrx/store` package.
    This allows us to select a feature from the application. For example, your application
    can have features like profile, users, events, and settings. And ideally, we create
    feature selectors to extract only the target feature’s data instead of the whole
    NgRx state object.
  prefs: []
  type: TYPE_NORMAL
- en: Then we replace the `$bucket` property in our `BucketComponent` class using
    the selector `selectBucket()` we just created. Notice that the selector returns
    a `Readonly` array. This ensures we are not mutating the actual data and that
    is is read-only. Finally, we remove the unnecessary functions from the `BucketService`
    class and remove the usage of those functions from the `BucketComponent` class
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the app holistically now, we can add and remove items to the
    bucket using NgRx and can use selectors to render the items in the UI. However,
    as soon as you refresh the app, it all goes away since the data is not persistent;
    even though we have the functions to get and save items using `LocalStorage`.
    The ideal way of handling this would be to use NgRx effects. However, you are
    going to learn them in the next recipe. You can challenge yourself to come back
    to this recipe again to implement an effect that saves the updated bucket list
    to storage.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NgRx selectors documentation ([https://ngrx.io/guide/store/selectors](https://ngrx.io/guide/store/selectors))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx effects to fetch data from API calls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use NgRx effects using the `@ngrx/effects`
    package. We have an app that already has `@ngrx/store` and `@ngrx/store-devtools`
    installed. And we are able to add and remove items from the bucket. However, in
    this recipe, we’ll use a server to receive, store, add, and remove items from
    a bucket, i.e., the data will live in the NgRx store as well as on the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-effects`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project with the backend app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.9: ngrx-effects app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an Angular application having a single page containing a bucket. You
    can add fruits to your buckets and remove items from the bucket. We already have
    the `@ngrx/store`, `@ngrx/store-devtools`, and `@ngrx/effects` packages installed
    in the workspace, so you don’t have to install them. However, when you work on
    a standalone app (or on some of your own projects), you could add NgRx effects
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll update the `bucket.actions.ts` file to add some actions including the
    API call. Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file in the `store` folder named `bucket.effects.ts` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can provide the effects with the `BucketEffects` class in the `app.config.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll now update the `bucket.reducer.ts` file to add or remove items from the
    state on the success events of the HTTP calls. Also, to set the bucket items retrieved
    from the server on app start. Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We’ll now dispatch the `getBucket` action from `bucket.componen.ts` when the
    component is mounted. Update `bucket.component.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have linked everything, refresh the app and you’ll see the bucket
    items from the server in the app. You can see the actions in Redux Devtools as
    follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.10: Getting the bucket from the server using NgRx effects'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should also be able to see the network call (see *Figure 6.10*) that occurred
    due to the `[Bucket] Get Bucket` action in *Figure 6.9*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_11.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.11: @ngrx/effects initiating network calls'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you try to add or remove items, you’ll see that they don’t work. That’s because
    we changed our reducer to act when there’s an `addFruitSuccess` or `removeFruitSuccess`
    event in *step 4*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we will add the effect for `addFruit` in `bucket.effects.ts`. Update the
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s add the effect for `removeFruit` as well, in `bucket.effects.ts`. Update
    the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you refresh the app now, add an apple, and remove it, you should see the
    state in Redux Devtools, as shown in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.12: NgRx effects getting a bucket and adding and removing items'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice in *Figure 6.11* that the state shows 4 items, shown in the UI. Also,
    notice the sequence of the actions dispatched. Every API/HTTP action results in
    the following `Success` action in this case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Great! You now know how to use NgRx effects in your Angular apps. See the next
    section to understand how NgRx effects work.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for the NgRx effects to work, we needed to install the `@ngrx/effects`
    package, create an effect, and register it in an array of effects (root effects)
    in the `main.ts` file. An NgRx effect is essentially something that listens to
    an action, does something (we call this something a side-effect), and then returns
    an action as a result. When an action is dispatched to the store from any component
    or even from another effect, the registered effect does the job you want it to
    do and is supposed to dispatch another action in return. For HTTP calls, we usually
    have three actions—that is, the main action, and the following success and failure
    actions. Ideally, on the success action (and perhaps on the failure action too),
    you would want to update some of your state variables. In *step 4*, inside the
    `BucketEffects` class, you’ll notice that we inject the `Action` service from
    NgRx and `BucketService`. Then we use the `createEffect` function to create the
    effect. The effect itself listens to the `Action` stream for a particular event
    using the `ofType` operator. We then use the `exhaustMap` operator to perform
    the HTTP call, which returns an observable. Finally, we use the `map` operator
    to return the success action and the `catchError` operator to return the failure
    action.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NgRx effects documentation ([https://ngrx.io/guide/effects](https://ngrx.io/guide/effects))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NgRx Component Store to manage the state of a component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you’ll learn how to use the **NgRx Component Store** and how
    to use it instead of the push-based `Subject/BehaviorSubject` pattern with services
    for maintaining a component’s state. We’ll also see how this can facilitate cross-component
    communication using the **Component Store**.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that `@ngrx/component-store` is a standalone library and doesn’t correlate
    with Redux or `@ngrx/store`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app that we are going to work with resides in `start/apps/chapter06/ngrx-component-store`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the code repository in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal, navigate to the code repository directory, and run the following
    command to serve the project with the backend app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the app in a new browser tab, and you should see the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.13: ngrx-component-store app running on http://localhost:4200'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let’s see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have our favorite bucket app that we’ve used in a lot of recipes so far.
    The state of the bucket right now is stored in the component itself. This limits
    the state to being just in the component and we can’t use the bucket’s length
    in the top header. One way could be using `BehaviorSubject` for this. But we’d
    rather use NgRx Component Store. We already have `@ngrx/component-store` package
    installed in the monorepository. But if you’re working on a new project, you would
    install the package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We’re going to build our component store in `BucketService`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make it compatible with `ComponentStore`. In order to do that, we’ll
    create an interface for the bucket state, extend `BucketService` from `ComponentStore`,
    and initialize the service by calling the `super` method. Update the `bucket.service.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: None of this will make sense until we actually show the data from `ComponentStore`.
    Let’s work on that now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s create a `bucket$` observable in `BucketService` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, let’s make sure that we can initialize the component store using the
    values from `localStorage`. We’ll update the `constructor` method in the `bucket.service.ts`
    file as follows to use the `loadItems` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we’ll add the methods for adding and removing fruit items to and from the
    bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have the Component Store set up, let’s use it in the `bucket.component.ts`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use the `bucket$` observable in the template. Update `bucket.component.html`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this change, you should see the app working. If you now try to add or remove
    items, you should be able to see them being reflected in the app. And this is
    all being done using Component Store now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next thing we need to do is to use the bucket’s length in the application’s
    header. Let’s create a new state selector in the `bucket.service.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And we can now use the component store in the app’s header. First, let’s import
    the store in `app.component.ts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now use the `bucketLength$` observable in `app.component.html` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And voila! If you add and remove items from the bucket, you should be able
    to see the bucket’s length in the header as well:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18469_06_14.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.14: Bucket length in header via Component Store'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Congratulations! You finished the recipe. See the next section to understand
    how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, `@ngrx/component-store` is a standalone package that can
    easily be installed in your Angular apps without having to use `@ngrx/store`,
    `@ngrx/effects` and so on. It is supposed to replace the usage of `BehaviorSubject`
    in Angular services, and that’s what we did in this recipe. We covered how to
    initialize `ComponentStore` and how to set the initial state using the `setState`
    method when we already had the values without accessing the state, and we learned
    how to create updater methods that can be used to update the state, as they can
    access the state and allow us to even pass arguments for our own use cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`@ngrx/component-store` documentation ([https://ngrx.io/guide/component-store](https://ngrx.io/guide/component-store))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effects in `@ngrx/component-store` documentation ([https://ngrx.io/guide/component-store/effect](https://ngrx.io/guide/component-store/effect))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularCookbook2e](Chapter_6.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code1388317275422265.png)'
  prefs: []
  type: TYPE_IMG
