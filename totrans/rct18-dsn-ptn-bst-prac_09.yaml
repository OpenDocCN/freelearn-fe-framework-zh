- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a library that provides a lot of useful building blocks for creating
    web applications, but it doesn’t include everything you might need *out of the
    box*. One key feature that React doesn’t provide is routing, which is the ability
    to handle URLs and navigate between different pages or views in a single-page
    application. For that, we turn to third-party libraries, and the most popular
    one for React is **React Router**.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore React Router and learn how to use it to create
    dynamic routes and handle navigation in our React applications. By the end of
    this chapter, you’ll have a good understanding of how React Router works and how
    to use it effectively in your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the differences between the `react-router`, `react-router-dom`,
    and `react-router-native` packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install and configure React Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the `<Routes>` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding parameters to routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Router v6.4 and React Router loaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 19+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the code for this chapter in the book’s GitHub repository at [https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/React-18-Design-Patterns-and-Best-Practices-Fourth-Edition/tree/main/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After you create a new React application using `create-react-app`, the first
    thing you need to do is to install **React Router v6.x**, using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You are probably confused about why we are installing `react-router-dom` instead
    of `react-router`. React Router contains all the common components of `react-router-dom`
    and `react-router-native`. That means that if you are using React for the web,
    you should use `react-router-dom`, and if you are using React Native, you need
    to use `react-router-native`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `react-router-dom` package was created originally to contain version 4
    and `react-router` uses version 3\. The `react-router-dom` v6 package has some
    improvements over `react-router`. They are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simplified route configuration**: React Router v6 has introduced a more straightforward
    route configuration, eliminating the need for `Switch` and exact props. Routes
    are now implicitly prioritized based on their definition order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nested routing**: React Router v6 has improved support for nested routing.
    The `Outlet` component is used to render child routes, allowing for more intuitive
    and maintainable route structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplified navigation**: In v6, the `useNavigate` hook has replaced the `useHistory`
    hook, providing a more straightforward and declarative approach to navigation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Route relative links and navigation**: With the introduction of the `useLinkProps`
    and `Link` components in v6, it’s now easier to create links relative to the current
    route. This reduces the need to hardcode full paths and simplifies route management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplified route guards**: React Router v6 introduces a more streamlined
    approach to route guards using the `useRoutes` hook and the `element` prop. It
    allows for easier and more maintainable route protection patterns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since React Router v6.4, the approach to creating routes has changed slightly,
    but it still supports the “old way.” In our final section, we will convert the
    same example to the new approach.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s create some sections to test some basic routes. We need to create four
    stateless components (`About`, `Contact`, `Home`, and `Error404`) and name them
    as `index.tsx` in their directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add the following to the `src/components/Home.tsx` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `src/components/About.tsx` component can be created with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following creates the `src/components/Contact.tsx` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `src/components/Error404.tsx` component is created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have created all the functional components, we need to modify our
    `index.tsx` file to import our route file, which we will create in the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create the `src/routes.tsx` file, where we will render our
    `Home` component when the user accesses the root path (`/`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to modify our `App.tsx` file to render the route components
    as children:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the application, you will see the `Home` component in the root (`/`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18414_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Home page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add `Error404` when the user tries to access any other route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you go to `/somefakeurl`, you will be able to see the **Error404**
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18414_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Error 404 page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can add our other components (`About` and `Contact`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can visit `/about`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18414_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: About page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can now visit `/contact`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18414_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Contact page'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have implemented your first routes, let’s add some parameters to
    the routes in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding parameters to the routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have learned how to use React Router for basic routes (one-level
    routes). Next, I will show you how to add some parameters to the routes and get
    them into your components.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will create a `Contacts` component to display a list of
    contacts when we visit the `/contacts` route, but we will show the contact information
    (name, phone, and email) when the user visits `/contacts/:contactId`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to create our `Contacts` component. Let’s
    use the following skeleton: const Contacts = () => ('
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s use these CSS styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have created the `Contacts` component, you need to import it into
    your route file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you will be able to see the `Contacts` component if you go to the `/contacts`
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18414_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Contacts page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the `Contacts` component is connected to React Router, let’s render
    our contacts as a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using the `<Link>` component, which will generate an
    `<a>` tag that points to `/contacts/contact.id`, and this is because we will add
    a new nested route to our route file to match the ID of the contact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'React Router v6 has a special hook called `useParams`, which will give you
    access to the `contactId` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, we are going to add our contacts to our local state, but normally
    this should come from some service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, our `selectedNote` is `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `contactId` is higher than `0`, then we filter it from our `contacts`
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are receiving the `contactId` parameter with `useParams`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application again, you should see your contacts like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_09_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Displaying contacts'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on **John Smith** (whose `contactId` is 2), you will see the contact
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_09_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: Displaying a specific contact'
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, you can add a `navbar` in the `App` component to access all the
    routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s modify our `App` styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_09_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: Displaying the menu'
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this section, you’ll know how to add routes with parameters to
    your application. *This is amazing, right?*
  prefs: []
  type: TYPE_NORMAL
- en: React Router v6.4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned at the beginning of this chapter, **React Router v6.4** introduces
    a new way of implementing routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s rewrite our last example to explore the differences. The first difference
    is that instead of using `AppRoutes` as we did previously, we will now add our
    routes directly to our `App.tsx` file. Let’s begin by modifying our `main.tsx`
    and removing `AppRoutes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in our `App.tsx` file, we need to import some new functions from `react-router-dom`
    and load the components that will be rendered for each URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterward, we need to specify our routes by utilizing the `createBrowserRouter`
    and `createRoutesFromElements` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are rendering the `<Root />` component, and you might be
    wondering where this component is located. The `<Root />` component serves the
    purpose of housing our **Navigation** menu. Additionally, using the new `<Outlet
    />` component, we can specify the location where we want to render the content
    of our routes. To accomplish this, you need to create the `<Root />` component
    before defining the `App` component (at the top):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The first route is our `Home`, which is why we need to utilize the index prop.
    Next, we have the `about` route where we specify the path as `/about`. Lastly,
    we added an asterisk, which will match any other page that we don’t have, rendering
    a **404 Error page**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have created the `Root` component and specified the routes, we need
    to render the `RouterProvider` and pass the created router as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’ve done everything correctly, you should be able to see the **Home**
    and **About** pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B18414_09_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Home page'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on **About**, you should see the page appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B18414_09_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: About page'
  prefs: []
  type: TYPE_NORMAL
- en: With this foundational understanding of the changes in React Router v6.4, we’ll
    now venture into looking at implementing the new addition of loaders using the
    **Pokemons** page as our working example.
  prefs: []
  type: TYPE_NORMAL
- en: React Router loaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main changes in React Router 6.4 is the addition of **loaders**.
    These loaders provide a better way to fetch data, eliminating the need for the
    common pattern of using `useEffect` and `fetch` within components.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed in the menu, I have included a **Pokemons** page without
    specifying the route just yet. The reason for this is that I want to demonstrate
    how to use the new React Router loaders with this page as an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create our `Pokemons` component by using the `Home` component
    as a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our base component, we need to create a `dataLoader` function
    that is asynchronous. This function will be responsible for fetching the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we place the `dataLoader` before exporting the `Pokemons` component
    as the default. Once you have created your `dataLoader`, you need to import it
    and specify the route for `Pokemons` in the `App.tsx` file. Remember to pass the
    `dataLoader` to the loader prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'After connecting our `dataLoader` to the route, we can now render the data
    for `Pokemons`. To retrieve the data, we will utilize the new `useLoaderData`
    hook. Additionally, we will use the `useNavigation` hook to monitor the state
    of the route, enabling us to determine if the data is still loading. The following
    is the complete code for the `Pokemons` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s test our **Pokemons** page. We should see the first 150 **Pokemons**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a game  Description automatically generated](img/B18414_09_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: Pokemons page'
  prefs: []
  type: TYPE_NORMAL
- en: Through new features like loaders, React Router v6.4 streamlines routing and
    data fetching in React applications. We created a **Pokemons** page using a `dataLoader`
    function, which asynchronously fetched data from an API. We provided a more user-friendly
    interface by integrating this function into our route configuration and using
    React Router’s `useLoaderData` and `useNavigation` hooks. As a result of these
    enhancements, React Router v6.4 is now more robust, efficient, and intuitive,
    enabling developers to create more complex, data-driven applications with less
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good job! By navigating React Router, you have acquired essential skills for
    installing, configuring, and managing routes, as well as incorporating parameters
    into nested routes. You will be able to create more dynamic and robust web applications
    using React Router by utilizing these capabilities. In addition, you have learned
    about the cutting-edge features of React Router v6.4, particularly its innovative
    use of loaders.
  prefs: []
  type: TYPE_NORMAL
- en: We are about to embark on the next chapter of this series, where we will explore
    the exciting new features introduced in React 18\. By continuously learning and
    applying, you will become proficient in React.
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussion with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/React18DesignPatterns4e](https://packt.link/React18DesignPatterns4e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2450023176943770109.png)'
  prefs: []
  type: TYPE_IMG
