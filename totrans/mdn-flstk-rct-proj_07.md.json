["```js\n# comment\nINSTRUCTION arguments\n```", "```js\n    $ cp -R ch4 ch5\n    ```", "```js\n    FROM node:20\n    ```", "```js\n    WORKDIR /app\n    ```", "```js\n    COPY package.json package-lock.json ./\n    ```", "```js\n    RUN npm install\n    ```", "```js\n    COPY . .\n    ```", "```js\n    CMD [\"npm\", \"start\"]\n    ```", "```js\n    node_modules\n    .env*\n    ```", "```js\n    blog-backend as the name of our image and backend/ as the working directory.\n    ```", "```js\n    blog-backend image that we just created, and the mongo and ubuntu images that we previously used.\n    ```", "```js\n    docker run command:*   **-it** runs the container in interactive mode (**-t** to allocate a pseudo Terminal and **-i** to keep the input stream open).*   **-e PORT=3001** sets the **PORT** environment variable inside the container to **3001**.*   **-e DATABASE_URL=mongodb://host.docker.internal:27017/blog** sets the **DATABASE_URL** environment variable. Here, we replaced **localhost** with **host.docker.internal**, as the MongoDB service runs in a different container on the Docker host (our machine).*   **-p 3001:3001** forwards port **3001** from inside the container to port **3001** on the host (our machine).*   **blog-backend** is the name of our image.\n    ```", "```js\n    FROM node:20 AS build\n    ```", "```js\n    ARG VITE_BACKEND_URL=http://localhost:3001/api/v1\n    ```", "```js\n    WORKDIR /build\n    COPY package.json .\n    COPY package-lock.json .\n    RUN npm install\n    COPY . .\n    ```", "```js\n    RUN npm run build\n    ```", "```js\n    FROM nginx AS final\n    ```", "```js\n    WORKDIR /usr/share/nginx/html\n    ```", "```js\n    COPY --from=build /build/dist .\n    ```", "```js\n    node_modules\n    .env*\n    backend\n    .vscode\n    .git\n    .husky\n    .commitlintrc.json\n    ```", "```js\nnode image to build our frontend in the build stage. Then, it will switch to the final stage, use the nginx image, and copy over the built static files from the build stage.\nNow, let’s create and run the frontend container.\nCreating and running the frontend container\nSimilarly to what we did for the backend container, we can also create and run a container from the `blog-frontend` image by executing the following command:\n\n```", "```js\n    version: '3.9'\n    ```", "```js\n    services:\n    ```", "```js\n      blog-database:\n        image: mongo\n        ports:\n          - '27017:27017'\n    ```", "```js\n      blog-backend:\n        build: backend/\n        environment:\n          - PORT=3001\n          - DATABASE_URL=mongodb://host.docker.internal:27017/blog\n        ports:\n          - '3001:3001'\n        depends_on:\n          - blog-database\n    ```", "```js\n      blog-frontend:\n        build:\n          context: .\n          args:\n            VITE_BACKEND_URL: http://localhost:3001/api/v1\n        ports:\n          - '3000:80'\n        depends_on:\n          - blog-backend\n    ```", "```js\n    $ docker stop dbserver\n    ```", "```js\n    $ docker compose up\n    ```", "```js\n    mongodb+srv://<username>:<password>@<cluster-name>.<cluster-id>.mongodb.net/?retryWrites=true&w=majority\n    ```", "```js\n    $ mongosh \"<connection-string>\"\n    ```", "```js\n    $ docker login\n    ```", "```js\n    $ docker build --platform linux/amd64 -t blog-frontend .\n    $ docker tag blog-frontend [USERNAME]/blog-frontend\n    $ docker push [USERNAME]/blog-frontend\n    ```", "```js\n    $ cd backend/\n    $ docker build --platform linux/amd64 -t blog-backend .\n    $ docker tag blog-backend [USERNAME]/blog-backend\n    $ docker push [USERNAME]/blog-backend\n    ```", "```js\n    [URL] with the URL to the backend service deployed on Google Cloud Run.\n    ```", "```js\n    $ docker tag blog-frontend [USERNAME]/blog-frontend\n    $ docker push [USERNAME]/blog-frontend\n    ```", "```js\n    name: Blog Frontend CI\n    ```", "```js\n    on:\n      push:\n        branches:\n          - main\n      pull_request:\n        branches:\n          - main\n    ```", "```js\n    jobs:\n      lint-and-build:\n    ```", "```js\n        runs-on: ubuntu-latest\n    ```", "```js\n        strategy:\n          matrix:\n            node-version: [16.x, 18.x, 20.x]\n    ```", "```js\n        steps:\n    ```", "```js\n          - uses: actions/checkout@v3\n    ```", "```js\n          - name: Use Node.js ${{ matrix.node-version }}\n            uses: actions/setup-node@v3\n            with:\n              node-version: ${{ matrix.node-version }}\n              cache: 'npm'\n    ```", "```js\n          - name: Install dependencies\n            run: npm install\n          - name: Run linter on frontend\n            run: npm run lint\n          - name: Build frontend\n            run: npm run build\n    ```", "```js\n    name: Blog Backend CI\n    on:\n      push:\n        branches:\n          - main\n      pull_request:\n        branches:\n          - main\n    ```", "```js\n    jobs:\n      lint-and-test:\n        runs-on: ubuntu-latest\n        strategy:\n          matrix:\n            node-version: [16.x, 18.x, 20.x]\n        defaults:\n          run:\n            working-directory: ./backend\n    ```", "```js\n        steps:\n          - uses: actions/checkout@v3\n          - name: Use Node.js ${{ matrix.node-version }}\n            uses: actions/setup-node@v3\n            with:\n              node-version: ${{ matrix.node-version }}\n              cache: 'npm'\n          - name: Install dependencies\n            run: npm install\n    ```", "```js\n          - name: Run linter on backend\n            run: npm run lint\n          - name: Run backend tests\n            run: npm test\n    ```", "```js\n    name: Deploy Blog Application\n    ```", "```js\n    on:\n      push:\n        branches:\n          - main\n    ```", "```js\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n        environment:\n          name: production\n          url: ${{ steps.deploy-frontend.outputs.url }}\n    ```", "```js\n        steps:\n          - uses: actions/checkout@v3\n    ```", "```js\n          - name: Login to Docker Hub\n            uses: docker/login-action@v2\n            with:\n              username: ${{ secrets.DOCKERHUB_USERNAME }}\n              password: ${{ secrets.DOCKERHUB_TOKEN }}\n    ```", "```js\n          - uses: google-github-actions/auth@v1\n            with:\n              service_account: ${{ secrets.GOOGLECLOUD_SERVICE_ACCOUNT }}\n              credentials_json: ${{ secrets.GOOGLECLOUD_CREDENTIALS }}\n    ```", "```js\n          - name: Build and push backend image\n            uses: docker/build-push-action@v4\n            with:\n              context: ./backend\n              file: ./backend/Dockerfile\n              push: true\n              tags: ${{ secrets.DOCKERHUB_USERNAME }}/blog-backend:latest\n    ```", "```js\n          - id: deploy-backend\n            name: Deploy backend\n            uses: google-github-actions/deploy-cloudrun@v1\n            with:\n              service: blog-backend\n              image: ${{ secrets.DOCKERHUB_USERNAME }}/blog-backend:latest\n              region: ${{ secrets.GOOGLECLOUD_REGION }}\n    ```", "```js\n          - name: Build and push frontend image\n            uses: docker/build-push-action@v4\n            with:\n              context: .\n              file: ./Dockerfile\n              push: true\n              tags: ${{ secrets.DOCKERHUB_USERNAME }}/blog-frontend:latest\n              build-args: VITE_BACKEND_URL=${{ steps.deploy-backend.outputs.url }}/api/v1\n    ```", "```js\n          - id: deploy-frontend\n            name: Deploy frontend\n            uses: google-github-actions/deploy-cloudrun@v1\n            with:\n              service: blog-frontend\n              image: ${{ secrets.DOCKERHUB_USERNAME }}/blog-frontend:latest\n              region: ${{ secrets.GOOGLECLOUD_REGION }}\n    ```", "```js\n\n```"]