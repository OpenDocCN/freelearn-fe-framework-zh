- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Delivering High-Quality UX with Material
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Material提供高质量UX
- en: In *Chapter 4*, *Automated Testing, CI, and Release to Production*, we mentioned
    the need to deliver a high-quality application. Currently, the app has a terrible
    look and feel to it that is only fit for a website created in the late 1990s.
    The first impression a user or a client gets about your product or your work is
    very important, so we must be able to create a great-looking application that
    also delivers a great user experience across mobile and desktop browsers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在**第四章**，“自动化测试、CI和发布到生产”中，我们提到了交付高质量应用程序的需求。目前，应用程序的外观和感觉非常糟糕，只适合20世纪90年代末创建的网站。用户或客户对你产品或工作的第一印象非常重要，因此我们必须能够创建一个外观出色且在移动和桌面浏览器上提供出色用户体验的应用程序。
- en: As full-stack developers, it is difficult to focus on the polish of your application.
    This often gets worse as the feature set of an application rapidly grows. It is
    no fun to write great modular code backing your views, but then revert to CSS
    hacks and inline styles in a rush to improve the look and feel of your application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为全栈开发者，专注于应用程序的打磨是件困难的事情。当应用程序的功能集迅速增长时，这种情况往往会变得更糟。编写支持视图的出色模块化代码固然有趣，但随后又匆忙地使用CSS技巧和内联样式来改善应用程序的外观和感觉，这并不愉快。
- en: Developed in close coordination with Angular, Angular Material is amazing. If
    you learn how to leverage Angular Material effectively, the features you create
    will look and work great from the get-go, whether you're working on small or large
    applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在与Angular紧密协调下开发的Angular Material非常出色。如果你学会了如何有效地利用Angular Material，你创建的功能将从一开始就看起来和运行得很好，无论你是在开发小型还是大型应用程序。
- en: Angular Material will make you a far more effective web developer because it
    ships with a wide variety of user controls that you can leverage, and you won't
    have to worry about browser compatibility. As an added bonus, writing custom CSS
    will become a rarity.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material将使你成为一个更有效的Web开发者，因为它提供了一系列你可以利用的用户控件，你不必担心浏览器兼容性。作为额外的奖励，编写自定义CSS将变得罕见。
- en: While this chapter covers how to create an attractive **user interface** (**UI**)
    relying on Angular Material for a decent **user experience** (**UX**) out of the
    box, it is also important to know what not to do. There's a great website called
    User Interface, which demonstrates UI/UX worst practices, at [https://userinyerface.com](https://userinyerface.com).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章介绍了如何创建一个吸引人的**用户界面**（UI），并利用Angular Material实现开箱即用的**用户体验**（UX），但了解不应该做什么也同样重要。有一个名为User
    Interface的网站，展示了UI/UX的糟糕实践，网址为[https://userinyerface.com](https://userinyerface.com)。
- en: 'In this chapter, you are going to learn about the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Distinguishing aspects of Angular Material as a UI/UX library
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分Angular Material作为UI/UX库的特点
- en: How to configure Angular Material
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置Angular Material
- en: Responsive design using Angular Flex Layout
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular Flex Layout进行响应式设计
- en: Upgrade the UX with Angular Material
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular Material提升UX
- en: Enforcing accessibility compliance via **command-line interface** (**CLI**)
    tools
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**命令行界面**（CLI）工具强制执行可访问性合规性
- en: Building an interactive prototype
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建交互式原型
- en: The most up-to-date versions of the sample code for the book are on GitHub at
    the following repository linked. The repository contains the final and completed
    state of the code. You can verify your progress at the end of this chapter by
    looking for the end-of-chapter snapshot of code under the `projects` folder.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍的样本代码的最新版本可在以下GitHub仓库链接中找到。该仓库包含代码的最终和完成状态。你可以在本章结束时通过查找`projects`文件夹下的代码章节快照来验证你的进度。
- en: 'For *Chapter 5*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**第五章**：
- en: Clone the repo [https://github.com/duluca/local-weather-app](https://github.com/duluca/local-weather-app
    )
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆以下仓库[https://github.com/duluca/local-weather-app](https://github.com/duluca/local-weather-app)
- en: Execute `npm install` on the root folder to install dependencies
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录下执行`npm install`以安装依赖项
- en: 'The code sample for this chapter is under the following sub-folder:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本章的代码示例位于以下子文件夹中：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To run the Angular app for this chapter, execute:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的Angular应用程序，请执行：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run Angular unit tests for this chapter, execute:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的Angular单元测试，请执行：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To run Angular e2e tests for this chapter, execute:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行本章的Angular e2e测试，请执行：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To build a production-ready Angular app for this chapter, execute:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建本章的生产就绪型Angular应用程序，请执行：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the `dist/ch5` folder at the root of the repository will contain the
    compiled result.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，存储库根目录下的`dist/ch5`文件夹将包含编译结果。
- en: Beware that the source code in the book or on GitHub may not always match the
    code generated by Angular CLI. There may also be slight differences in implementation
    between the code in the book and what's on GitHub because the ecosystem is ever-evolving.
    It is natural for the sample code to change over time. Also on GitHub, expect
    to find corrections, fixes to support newer versions of libraries, or side-by-side
    implementations of multiple techniques for you to observe. You are only expected
    to implement the ideal solution recommended in the book. If you find errors or
    have questions, please create an issue or submit a pull request on GitHub for
    the benefit of all readers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，书中或GitHub上的源代码可能并不总是与Angular CLI生成的代码相匹配。由于生态系统不断演变，书中代码与GitHub上代码之间的实现也可能存在细微差异。随着时间的推移，示例代码发生变化是自然的。在GitHub上，您可能会找到更正、修复以支持库的新版本，或者观察多种技术并行的实现。您只需实现书中推荐的理想解决方案即可。如果您发现错误或有问题，请创建一个issue或提交一个pull
    request到GitHub，以供所有读者受益。
- en: Let's begin by understanding what makes Angular Material an excellent choice
    as a UI/UX library.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解是什么让Angular Material成为UI/UX库的一个优秀选择。
- en: Angular Material
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Material
- en: 'The goal of an Angular Material project is to provide a collection of useful
    and standard-setting high-quality UI components. The library implements Google''s
    Material Design specification, which is pervasive in Google''s mobile apps, web
    properties, and the Android operating system. Material Design has a particular
    digital and boxy look and feel, but it is not just another CSS library like Bootstrap.
    Consider the login experience coded using Bootstrap here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material项目的目标是提供一组有用且具有标准设置的高质量UI组件。该库实现了谷歌的Material Design规范，该规范在谷歌的移动应用、网络属性和Android操作系统中无处不在。Material
    Design具有特定的数字和方盒式外观和感觉，但它不仅仅是一个像Bootstrap一样的CSS库。考虑这里使用Bootstrap编写的登录体验：
- en: '![](img/B14094_05_01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_01.png)'
- en: 'Figure 5.1: Bootstrap login experience'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：Bootstrap登录体验
- en: 'Note that input fields and their labels are on separate lines, the checkbox
    is a small target to hit, the error messages are displayed as an ephemeral toast
    notification, and the **Submit** button just sits in the corner. Now, consider
    the following Angular Material sample:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，输入字段及其标签位于单独的行上，复选框是一个小目标，错误信息以临时吐司通知的形式显示，而**提交**按钮则静静地坐在角落里。现在，考虑以下Angular
    Material示例：
- en: '![](img/B14094_05_02.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_02.png)'
- en: 'Figure 5.2: Angular Material login experience'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：Angular Material登录体验
- en: 'The input fields and their labels are initially combined, grabbing the user''s
    attention in a compact form factor. The checkbox is touch-friendly and the **Submit**
    button stretches to take up the available space for a more responsive UX by default.
    Once a user clicks on a field, the label tucks away to the top-left corner of
    the input field, as shown:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段及其标签最初是合并的，以紧凑的形态因素吸引用户的注意力。复选框触感友好，**提交**按钮默认拉伸以占用可用空间，从而提供更响应式的用户体验。一旦用户点击一个字段，标签就会折叠到输入字段的左上角，如下所示：
- en: '![](img/B14094_05_03.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_03.png)'
- en: 'Figure 5.3: Angular Material animations and error'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：Angular Material动画和错误
- en: In addition, the validation error messages are shown inline, combined with a
    color change in the label, keeping the user's attention on the input field.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，验证错误信息以行内形式显示，与标签的颜色变化相结合，保持用户的注意力在输入字段上。
- en: Material Design helps you design a modular UI with your own branding and styling,
    while also defining animations that allow the user to have a better UX when using
    your application. The human brain subconsciously keeps track of objects and their
    locations. Any kind of animation that aids in transitions or reactions to changes
    that result from human input results in reduced cognitive load on the user, therefore
    allowing the user to focus on processing the content instead of trying to figure
    out the quirks of your particular app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design帮助您设计具有自己品牌和样式的模块化UI，同时定义动画，使用户在使用您的应用程序时拥有更好的用户体验。人类大脑无意识地跟踪对象及其位置。任何有助于过渡或对人类输入产生的变化做出反应的动画都能减少用户的认知负荷，因此使用户能够专注于处理内容，而不是试图弄清楚您特定应用程序的怪癖。
- en: 'A combination of modular UI design and fluid motion creates a great UX. Look
    at how Angular Material implements a simple button:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化UI设计和流畅运动的结合创造了一个出色的用户体验。看看Angular Material如何实现一个简单的按钮：
- en: '![](img/B14094_05_04.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_04.png)'
- en: 'Figure 5.4: Angular Material button animation'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：Angular Material按钮动画
- en: In the preceding screenshot, note how the click animation on the button originates
    from the actual location that the user has clicked on. However subtle, this creates
    a continuity motion, resulting in an appropriate onscreen reaction to a user's
    action. This particular effect becomes more pronounced when the button is used
    on a mobile device, leading to an even more natural human-computer interaction.
    Most users can't articulate what makes an intuitive UX actually intuitive, and
    these subtle yet crucial cues in design and experience allow you to make tremendous
    progress in designing such an experience for your users.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，请注意按钮上的点击动画是从用户实际点击的位置开始的。虽然这种效果很微妙，但它创造了一种连续的运动，从而对用户的行为产生适当的屏幕反应。当按钮在移动设备上使用时，这种效果更为明显，从而带来更自然的人机交互。大多数用户无法明确表达出什么使得直观的用户体验真正直观，而这些微妙但至关重要的设计经验和设计中的提示，可以帮助你在为用户设计这种体验方面取得巨大进步。
- en: 'Angular Material also aims to become the reference implementation for high-quality
    UI components for Angular. If you intend to develop your own custom controls,
    the source code for Angular Material should be your first and foremost resource.
    The term high quality is used often, and it''s really important to quantify what
    that means. The Angular Material team puts it well on their website:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 还旨在成为 Angular 高质量 UI 组件的参考实现。如果您打算开发自己的自定义控件，Angular Material
    的源代码应该是您首要的资源。术语“高质量”经常被使用，而且真正重要的是要量化它的含义。Angular Material 团队在他们的网站上表达得很好：
- en: '**What do we mean by "high quality"?**'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**我们所说的“高质量”是什么意思？**'
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Internationalized and accessible so that all users can use them. Straightforward
    APIs that don't confuse developers and behave as expected across a wide variety
    of use cases without bugs. Behavior is well tested with both unit and integration
    tests. Customizable within the bounds of the Material Design specification. Performance
    cost is minimized. Code is clean and well documented to serve as an example for
    Angular devs. Browser and screen reader support.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 国际化和可访问性，确保所有用户都能使用它们。直观的 API 不会让开发者感到困惑，并且能够在各种用例中按预期工作，而不会出现错误。行为经过单元和集成测试的充分测试。在
    Material 设计规范范围内可定制。性能成本降至最低。代码整洁且文档完善，可作为 Angular 开发者的示例。支持浏览器和屏幕阅读器。
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Angular Material supports the most recent two versions of all major browsers:
    Chrome (including Android), Firefox, Safari (including iOS), and IE11/Edge.'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Angular Material 支持所有主流浏览器的最新两个版本：Chrome（包括 Android）、Firefox、Safari（包括 iOS）和
    IE11/Edge。
- en: Building web applications, especially ones that are also mobile-compatible,
    is really difficult. There are a lot of nuances that you must be aware of. Angular
    Material abstracts away these nuances, including supporting all major browsers,
    so that you can focus on creating your application. Angular Material is no fad,
    and it's not to be taken lightly. If used correctly, you can greatly increase
    your productivity and the perceived quality of your work.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 构建网络应用程序，尤其是那些也兼容移动设备的，是非常困难的。有很多细微之处你必须注意。Angular Material 抽象掉了这些细微之处，包括支持所有主流浏览器，这样你就可以专注于创建你的应用程序。Angular
    Material 不是一种时尚，也不应该被轻视。如果使用得当，你可以大大提高你的生产力和工作的感知质量。
- en: It won't always be possible to use Angular Material in your projects. I would
    recommend either PrimeNG, found at [https://www.primefaces.org/primeng](https://www.primefaces.org/primeng),
    or Clarity, found at [https://vmware.github.io/clarity](https://vmware.github.io/clarity),
    as component toolkits that can satisfy most, if not all, of your user-control
    needs. The one thing to avoid here would be to pull dozens of user controls from
    different sources and end up with a hodgepodge library with hundreds of quirks
    and bugs to learn, maintain, or work around.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并非总是可以在项目中使用 Angular Material。我建议使用 PrimeNG，可在 [https://www.primefaces.org/primeng](https://www.primefaces.org/primeng)
    找到，或者使用 Clarity，可在 [https://vmware.github.io/clarity](https://vmware.github.io/clarity)
    找到，作为可以满足您大部分甚至所有用户控件需求的组件工具包。这里要避免的一件事是从不同的来源拉取数十个用户控件，最终得到一个包含数百个怪癖和错误的混乱库，这些怪癖和错误需要学习、维护或绕过。
- en: One of the most significant challenges when working with UI components is the
    amount of bulk they can add to your app's bundle size. Next, let's see how using
    a cohesive component library can help keep the performance of your app in tip-top
    shape and configure Angular Material for your app.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 UI 组件时，最显著的挑战之一是它们可以添加到您的应用程序包大小中的大量内容。接下来，让我们看看如何使用一致的组件库来帮助保持您应用程序的性能处于最佳状态，并为您的应用程序配置
    Angular Material。
- en: Angular Material setup and performance
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Material设置和性能
- en: Angular Material is configured by default to optimize the package size of your
    final deliverable. In Angular JS and Angular Material 1.x, the entire dependent
    library would be loaded. However, now with Angular Material, we are able to specify
    only the components that we intend to use, resulting in dramatic performance improvements.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Angular Material配置为优化最终交付物的包大小。在Angular JS和Angular Material 1.x中，整个依赖库都会被加载。然而，现在使用Angular
    Material，我们能够指定我们打算使用的组件，从而实现显著的性能提升。
- en: 'In the following table, you can see improvement of the performance characteristics
    of a typical Angular 1.x + Angular Material 1.x versus an Angular 6 + Material
    6 application over a fiber connection with high speed and low latency:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下表格中，您可以看到典型Angular 1.x + Angular Material 1.x应用程序与Angular 6 + Material 6应用程序在高速低延迟光纤连接下的性能特性改进：
- en: '| **Fiber Network** | **Angular 6 + Material 6** | **Angular 1.5 + Material
    1.1.5** | **% Diff** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **光纤网络** | **Angular 6 + Material 6** | **Angular 1.5 + Material 1.1.5**
    | **% 差异** |'
- en: '| First paint (DOMContentLoaded) * | 0.61 s | 1.69 s** | ~2.8x faster |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 首次绘制（DOMContentLoaded）* | 0.61秒 | 1.69秒** | 大约2.8倍更快 |'
- en: '| JS bundle size* | 113 KB | 1,425 KB | 12.6x smaller |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| JS包大小* | 113 KB | 1,425 KB | 12.6倍更小 |'
- en: '*Images and other media content have not been included in the results for a
    fair comparison'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了公平比较，结果中未包含图像或其他媒体内容*'
- en: '**Average value: Lower quality infrastructure causes a wide range of render
    times from 0.9s to 2.5s'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**平均值：较差的基础设施导致渲染时间从0.9秒到2.5秒不等**'
- en: 'Under the ideal conditions of a high-speed and low-latency connection, Angular
    6 + Material 6 apps load under a second. However, when we switch over to a more
    common moderate-speed and high-latency fast 3G mobile network, the differences
    become more pronounced, as in the following table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在高速低延迟的理想条件下，Angular 6 + Material 6应用程序在1秒内加载完成。然而，当我们切换到更常见的普通速度和高延迟的快速3G移动网络时，差异变得更加明显，如下表所示：
- en: '| **Fast 3G Mobile Network** | **Angular 6 + Material 6** | **Angular 1.5 +
    Material 1.1.5** | **% Diff** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **快速3G移动网络** | **Angular 6 + Material 6** | **Angular 1.5 + Material 1.1.5**
    | **% 差异** |'
- en: '| First paint* | 1.94 s | 11.02 s | 5.7x faster |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 首次绘制* | 1.94秒 | 11.02秒 | 5.7倍更快 |'
- en: '| JS bundle size* | 113 KB | 1,425 KB | 12.6x smaller |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| JS包大小* | 113 KB | 1,425 KB | 12.6倍更小 |'
- en: '*Images or other media content have not been included in the results for a
    fair comparison'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了公平比较，结果中未包含图像或其他媒体内容*'
- en: Even though the size differences of the apps remain consistent, you can see
    that the additional latency introduced by a mobile network results in a dramatic
    slowdown of the legacy Angular application to an unacceptable level.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管应用程序的大小差异保持一致，但您可以看到，由移动网络引入的额外延迟导致传统Angular应用程序的运行速度急剧下降，达到了不可接受的水平。
- en: Adding all components to Material will result in about ~1.3 MB of additional
    payload that will need to be delivered to the user. As you can see from the earlier
    comparison, this must be avoided at all costs. To deliver the smallest app possible,
    which is crucial in mobile- and sales-related scenarios, where every 100 ms of
    load time has an impact on user retention, you may load and include modules individually.
    Webpack's tree-shaking process will divide modules into different files, trimming
    down the initial download size.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有组件添加到Material中会导致大约~1.3 MB的额外负载需要发送给用户。正如您从之前的比较中看到的，这必须不惜一切代价避免。为了提供尽可能小的应用程序，这在移动和销售相关场景中至关重要，因为每次加载时间增加100毫秒都会影响用户保留率，您可以单独加载和包含模块。Webpack的tree-shaking过程将模块分割成不同的文件，从而减少初始下载大小。
- en: As a real-world example, when you're done building the final version of the
    LocalCast Weather app, your app's bundle size will come in at around 800 KB, with a first
    paint happening in just over 2 seconds on a fast 3G connection with Angular 9
    + Material 9\. A fully-featured multi-page application that leverages lazy loading
    only loads around ~300 KB of dependencies, while maintaining a sub 2 second first
    paint.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作为现实世界的例子，当您完成LocalCast Weather应用程序的最终版本构建后，您的应用程序包大小将约为800 KB，在快速3G连接上使用Angular
    9 + Material 9时，首次绘制时间仅为2秒多。一个功能齐全的多页面应用程序，利用懒加载，仅加载大约~300 KB的依赖项，同时保持首次绘制时间低于2秒。
- en: Note that the sample app contains example code that can be trimmed away to make
    the app even smaller. This is a testament to how the Angular ecosystem can deliver
    a rich and optimized UX.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，示例应用程序包含可以裁剪掉的示例代码，这使得应用程序的体积更小。这证明了Angular生态系统如何提供丰富和优化的用户体验。
- en: Next, let's set up Angular Material.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们设置 Angular Material。
- en: Installing Angular Material
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Angular Material
- en: 'There are two ways you can configure Angular Material for your Angular app:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你有几种方法可以为你的 Angular 应用配置 Angular Material：
- en: Automatically using the Angular CLI
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 自动安装
- en: Manually using npm
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 npm 手动安装
- en: 'Let''s get started with the task and improve the UX of the weather app with
    Angular Material. Let''s move the **Improve the UX of the app** task to **In Progress**
    on our GitHub project. Here, you can see the status of my Kanban board:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始这个任务，并使用 Angular Material 提升天气应用的 UX。将 **提升应用的 UX** 任务移动到我们 GitHub 项目的
    **进行中** 状态。在这里，你可以看到我的看板状态：
- en: '![](img/B14094_05_05.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_05.png)'
- en: 'Figure 5.5: GitHub project Kanban board'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5：GitHub 项目看板
- en: Automatically
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动安装
- en: 'Since Angular 6, you can automatically add Angular Material to your project,
    saving a lot of time in the process:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Angular 6 开始，你可以自动将 Angular Material 添加到你的项目中，从而在过程中节省大量时间：
- en: 'Execute the `add` command, as shown:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `add` 命令，如下所示：
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Choose the prebuilt theme named `indigo-pink`
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择名为 `indigo-pink` 的预构建主题
- en: When you get the prompt "`Set up global Angular Material typography styles?`"
    enter "`no`"
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你得到提示 “`Set up global Angular Material typography styles?`” 时，输入 “`no`”
- en: When you get the prompt "`Set up browser animations for Angular Material?`"
    enter "`yes`"
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你得到提示 “`Set up browser animations for Angular Material?`” 时，输入 “`yes`”
- en: 'The output should be similar to the following example:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应类似于以下示例：
- en: '[PRE6]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that the `index.html` file has been modified to add the icons library
    and the default font, as follows:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`index.html` 文件已被修改，以添加图标库和默认字体，如下所示：
- en: '[PRE7]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `angular.json` file has been updated to set up the default theme:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`angular.json` 文件已被更新以设置默认主题：'
- en: '[PRE8]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`styles.css` has been updated with the default global CSS styles:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`styles.css` 已被更新为默认的全局 CSS 样式：'
- en: '[PRE9]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also note that `app.module.ts` has been updated to import `BrowserAnimationsModule`,
    as shown:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还请注意，`app.module.ts` 已被更新以导入 `BrowserAnimationsModule`，如下所示：
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Start your app and ensure that it works correctly:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的应用并确保它正常工作：
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With that, you're done. Your app should be configured with Angular Material.
    You can now skip over to the *Importing modules* section to see how you can import
    Material modules in a robust manner.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经完成了。你的应用应该已经配置了 Angular Material。你现在可以跳转到 *导入模块* 部分，看看如何以稳健的方式导入 Material
    模块。
- en: I strongly recommend skimming over all the manual installation and configuration
    steps. The more you know!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议快速浏览所有手动安装和配置步骤。知道的越多越好！
- en: It is still important to understand all the various components that make up
    Angular Material or maybe you dislike automatic things; in the next sections,
    we will go over the manual installation and configuration steps.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然重要的是要理解构成 Angular Material 的所有各种组件，或者你可能不喜欢自动化的东西；在接下来的章节中，我们将介绍手动安装和配置步骤。
- en: Manually
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动安装
- en: 'We will begin by installing all the required libraries. As of Angular 5, the
    major version of Angular Material should match the version of your Angular installation
    and with Angular 6, the versions should be synced:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装所有必需的库。截至 Angular 5，Angular Material 的主版本应与你的 Angular 安装版本相匹配，并且从 Angular
    6 开始，版本应同步：
- en: In the Terminal, execute `npm install @angular/material @angular/cdk`
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行 `npm install @angular/material @angular/cdk`
- en: 'Observe the `package.json` versions:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察到 `package.json` 版本：
- en: '[PRE12]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this case, all libraries have the same major and minor versions. If your
    major and minor versions don''t match, you can rerun the `npm install` command
    to install a specific version or choose to upgrade your version of Angular by
    appending the server version of the package to the `install` command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，所有库都有相同的主版本和次版本。如果你的主版本和次版本不匹配，你可以重新运行 `npm install` 命令来安装特定版本，或者选择通过将包的服务器版本附加到
    `install` 命令来升级你的 Angular 版本：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you are working on a Bash-like shell, you can save some typing by using the
    bracket syntax to avoid having to repeat portions of the command, in the form
    of `npm install @angular/{material,cdk}@9.0.0`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个类似 Bash 的 shell 中工作，你可以通过使用方括号语法来节省一些输入，避免重复命令的部分，形式为 `npm install @angular/{material,cdk}@9.0.0`。
- en: If you need to update your version of Angular, refer to the *Updating Angular*
    section in *Appendix C*, *Keeping Angular and Tools Evergreen*. You can find this
    appendix online from [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    or at [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更新你的Angular版本，请参考附录C中的*更新Angular*部分，*保持Angular和工具始终如一*。您可以从[https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)或[https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen)在线找到此附录。
- en: Understanding Material's components
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Material的组件
- en: 'Let''s look at what exactly we are installing:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们到底在安装什么：
- en: '`@angular/material` is the official Material library.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/material`是官方的Material库。'
- en: '`@angular/cdk` is a peer dependency, not something you use directly unless
    you intend to build your own components.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/cdk`是一个同级依赖项，除非你打算构建自己的组件，否则你不会直接使用它。'
- en: '`@angular/animations` enables some of the animations for some Material modules.
    It can be omitted to keep the app size minimal. You may use `NoopAnimationsModule`
    to disable animations in the modules that require this dependency. As a result,
    you will lose some of the UX benefits of Angular Material.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/animations`为某些Material模块启用了一些动画。可以省略以保持应用大小最小。你可以使用`NoopAnimationsModule`来禁用需要此依赖项的模块中的动画。结果，你将失去Angular
    Material的一些UX优势。'
- en: Manually configuring Angular Material
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动配置Angular Material
- en: Now that the dependencies are installed, let's configure Angular Material in
    our Angular app. Note that if you used `ng add @angular/material` to install Angular
    Material, some of this work will be done for you.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在依赖项已安装，让我们在Angular应用中配置Angular Material。请注意，如果你使用`ng add @angular/material`安装Angular
    Material，其中一些工作将为你完成。
- en: Importing modules
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入模块
- en: 'We will start by creating a separate module file to house all of our Material
    module imports:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个单独的模块文件来存放所有的Material模块导入：
- en: 'Execute the following command in the Terminal to generate `material.module.ts`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令以生成`material.module.ts`：
- en: '[PRE14]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note the use of the `--flat` flag, which indicates that an additional directory
    shouldn't be created for `material.module.ts`. Also, note that `-m`, an alias
    for `--module`, is specified so that our new module is automatically imported
    into `app.module.ts`.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意使用`--flat`标志，它表示不应为`material.module.ts`创建额外的目录。另外，注意`-m`是`--module`的别名，这样我们的新模块就会自动导入到`app.module.ts`中。
- en: 'Observe the newly created file `material.module.ts` and remove `CommonModule`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察新创建的文件`material.module.ts`并移除`CommonModule`：
- en: '[PRE15]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Ensure that the module has been imported into `app.module.ts`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保模块已被导入到`app.module.ts`中：
- en: '[PRE16]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add animations and gesture support (if not automatically added):'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加动画和手势支持（如果尚未自动添加）：
- en: '[PRE17]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Modify `material.module.ts` to import and export basic components for `MatButton`,
    `MatToolbar`, and `MatIcon`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`material.module.ts`以导入和导出`MatButton`、`MatToolbar`和`MatIcon`的基本组件：
- en: '[PRE18]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `imports` and `exports` arrays can sometimes become long and duplicative.
    If you miss an element in one of the arrays, you could be chasing bugs for hours.
    Consider implementing a single array as a constant that you can assign to `imports`
    and `exports` properties for a more reliable configuration. Thanks to Brendon
    Caulkins for the tip.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`imports`和`exports`数组有时会变得很长且重复。如果你在其中一个数组中遗漏了一个元素，你可能会花费数小时来追踪错误。考虑实现一个单一的数组作为常量，你可以将其分配给`imports`和`exports`属性以获得更可靠的配置。感谢Brendon
    Caulkins提供的提示。'
- en: 'Optimize your code to store your modules in an array and reuse it to import
    and export:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优化你的代码，将你的模块存储在数组中，并重复使用它来导入和导出：
- en: '[PRE19]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Material is now imported into the app; let's now configure a theme and add the
    necessary CSS to our app.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Material已被导入到应用中；现在让我们配置一个主题并向我们的应用添加必要的CSS。
- en: Importing themes
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入主题
- en: 'A base theme is necessary in order to use Material components. We already selected
    a default theme when installing Angular Material. We can define or change the
    default theme in `angular.json`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Material组件，需要一个基本主题。我们在安装Angular Material时已经选择了一个默认主题。我们可以在`angular.json`中定义或更改默认主题：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Choose a new option from here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里选择一个新的选项：
- en: '`deeppurple-amber.css`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deeppurple-amber.css`'
- en: '`indigo-pink.css`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indigo-pink.css`'
- en: '`pink-bluegrey.css`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pink-bluegrey.css`'
- en: '`purple-green.css`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`purple-green.css`'
- en: Update `angular.json` to use the new Material theme.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`angular.json`以使用新的Material主题。
- en: You may create your own themes as well, which is covered in the *Custom themes*
    section of this chapter. For more information, visit [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以创建自己的主题，这在本章的*自定义主题*部分有介绍。更多信息，请访问[https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)。
- en: Note that any CSS implemented in `styles.css` will be globally available throughout the
    application. That said, do not include view-specific CSS in this file. Every component
    has its own CSS file for this purpose.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`styles.css`中实现的任何CSS都将全局可用。话虽如此，请不要在此文件中包含特定视图的CSS。每个组件都有自己的CSS文件用于此目的。
- en: Adding the Material Icon font
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加Material图标字体
- en: You can get access to a good default set of iconography by adding the Material
    Icon web font to your application. Clocking in at 48 KB in size, this is a very
    lightweight library.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将Material Icon网络字体添加到你的应用程序中，来获取一个很好的默认图标集。这个库的大小为48 KB，是一个非常轻量级的库。
- en: 'For icon support, import the font in `index.html`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持图标，请在`index.html`中导入字体：
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Discover and search through the icons at [https://material.io/resources/icons](https://material.io/resources/icons).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://material.io/resources/icons](https://material.io/resources/icons)上发现和搜索图标。
- en: For a richer set of icons, check out [MaterialDesignIcons.com](http://MaterialDesignIcons.com).
    This icon set contains the base set of Material icons, plus a rich set of third-party
    icons that contains useful imagery from social media sites for a rich set of actions
    that cover a lot of ground. This font is 118 KB in size.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取更丰富的图标集，请访问[MaterialDesignIcons.com](http://MaterialDesignIcons.com)。这个图标集包含了Material图标的基础集合，以及一个丰富的第三方图标集，其中包含来自社交媒体网站的有用图像，涵盖了众多丰富的操作，覆盖了广泛的领域。这个字体大小为118
    KB。
- en: Our UI/UX library for Angular Material is now configured. We also need a layout
    library that can make life easier when placing components on the page.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为Angular Material配置了UI/UX库。我们还需要一个布局库，以便在页面上放置组件时使生活更加轻松。
- en: Next, let's learn about different layout techniques, from Bootstrap to Flexbox
    CSS, and why Angular Flex Layout is a great tool to manage your layout. After
    configuring Angular Flex Layout for our app, we will be ready to implement Material
    UI components in our app.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解不同的布局技术，从Bootstrap到Flexbox CSS，以及为什么Angular Flex Layout是管理布局的绝佳工具。在为我们的应用程序配置Angular
    Flex Layout之后，我们将准备好在我们的应用程序中实现Material UI组件。
- en: Angular Flex Layout
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Flex Layout
- en: Before you can make effective use of Material, you must be aware of its layout
    engine. If you have been doing web development for a while, you may have encountered
    Bootstrap's 12-column layout system. I find it enormously irritating, since it
    falls foul of a mathematical barrier in my brain, which is wired to divvy things
    up as parts of 100%. Bootstrap also demands strict adherence to a `div` column and
    row hierarchy that must be precisely managed from your top-level HTML to the bottom.
    This can make for a very frustrating development experience.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够有效使用Material之前，你必须了解其布局引擎。如果你已经从事了一段时间的Web开发，你可能已经遇到过Bootstrap的12列布局系统。我发现这非常令人烦恼，因为它在我的大脑中遇到了一个数学障碍，我的大脑习惯于将事物分成100%的部分。Bootstrap还要求严格遵循`div`列和行的层次结构，这必须从你的顶级HTML精确管理到最底层。这可能会使开发体验非常令人沮丧。
- en: 'In the following screenshot, you can see how Bootstrap''s 12-column scheme
    looks:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，你可以看到Bootstrap的12列方案看起来如何：
- en: '![](img/B14094_05_06.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_06.png)'
- en: 'Figure 5.6: Bootstrap''s 12-column layout scheme'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：Bootstrap的12列布局方案
- en: Bootstrap's custom grid-layout system was revolutionary for its time, but then
    CSS3 Flexbox arrived on the scene. In combination with media queries, these two
    technologies allow for the creation of responsive UIs. However, it is very laborious
    to leverage these technologies effectively. As of Angular v4.1, the Angular team
    introduced its Flex Layout system that just works.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的定制网格布局系统在当时是革命性的，但随后CSS3 Flexbox出现了。结合媒体查询，这两种技术允许创建响应式UI。然而，有效地利用这些技术是非常费力的。截至Angular
    v4.1，Angular团队引入了其Flex Layout系统，它只需简单设置即可工作。
- en: 'The Angular Flex Layout documentation on GitHub aptly explains the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的Angular Flex Layout文档很好地解释了以下内容：
- en: Angular Flex Layout provides a sophisticated layout API using FlexBox CSS and
    mediaQuery. This module provides Angular (v4.1 and higher) developers with component
    layout features using a custom Layout API, mediaQuery observables, and injected
    DOM flexbox-2016 CSS stylings.
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Angular Flex Layout使用FlexBox CSS和mediaQuery提供了一个复杂的布局API。此模块为Angular（v4.1及以上）开发者提供了使用自定义Layout
    API、mediaQuery可观察对象和注入DOM flexbox-2016 CSS样式的组件布局功能。
- en: 'Angular''s excellent implementation makes it very easy to use Flexbox. As the
    documentation further explains:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的出色实现使得使用Flexbox变得非常容易。正如文档进一步解释的那样：
- en: The Layout engine intelligently automates the process of applying appropriate
    FlexBox CSS to browser view hierarchies. This automation also addresses many of
    the complexities and workarounds encountered with the traditional, manual, CSS-only
    application of Flexbox CSS.
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 布局引擎智能地自动化了将适当的FlexBox CSS应用于浏览器视图层次结构的过程。这种自动化还解决了使用传统的、仅CSS的手动应用FlexBox CSS时遇到的大多数复杂性和解决方案。
- en: 'The library is highly capable and can accommodate any kind of grid layout you
    can imagine, including integration with all CSS features that you would expect,
    such as the `calc()` function. In the next illustration, you can see how columns
    can be described using CSS Flexbox:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 该库功能强大，可以适应您能想象到的任何类型的网格布局，包括与您期望的所有CSS功能集成，例如`calc()`函数。在下一幅插图，您可以看到如何使用CSS
    Flexbox描述列：
- en: '![](img/B14094_05_07.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_07.png)'
- en: 'Figure 5.7: Angular Flex Layout scheme'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：Angular Flex Layout方案
- en: The great news is that Angular Flex Layout is in no way coupled with Angular
    Material and can be used independently of it. This is a very important decoupling
    that resolves one of the major pain points of using AngularJS with Material v1,
    where version updates to Material would often result in bugs in layout.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，Angular Flex Layout与Angular Material没有任何耦合，可以独立使用。这是一个非常重要的解耦，解决了使用AngularJS与Material
    v1时的一个主要痛点，即Material的版本更新经常会引起布局中的错误。
- en: For more details, check out [https://github.com/angular/flex-layout/wiki](https://github.com/angular/flex-layout/wiki).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情，请查看[https://github.com/angular/flex-layout/wiki](https://github.com/angular/flex-layout/wiki)。
- en: You will notice that `@angular/flex-layout` is installed with a beta tag. This
    has been the status quo for this library for a very long time. It hasn't been
    possible for the library to cover every edge case going back to Internet Explorer
    11, which prevents it from exiting beta. However, in evergreen browsers, I've
    found the behavior of the library to reliable and consistent. Further, CSS Grid
    is poised to supersede CSS Flexbox and as a result, the underlying technology
    that this library uses may change. My wish is that this library acts as an abstraction
    layer to the layout engine underneath.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到`@angular/flex-layout`安装时带有beta标签。这个状态已经持续了很长时间。由于库无法覆盖回Internet Explorer
    11的所有边缘情况，这阻止了它退出beta。然而，在持续更新的浏览器中，我发现该库的行为是可靠和一致的。此外，CSS Grid有取代CSS Flexbox的趋势，因此，该库使用的底层技术可能会改变。我的愿望是，这个库作为布局引擎下方的抽象层。
- en: Responsive layouts
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式布局
- en: All UIs you design and build should be mobile-first UIs. This is not just to
    serve mobile phone browsers, but also cases where a laptop user may use your application
    in a window side by side with another one. There are many nuances to getting mobile-first
    design right.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 所有您设计和构建的用户界面（UI）都应该是以移动端优先的UI。这不仅仅是为了服务于手机浏览器，还包括笔记本电脑用户可能在一侧并排使用您的应用程序的情况。正确实现以移动端优先的设计有很多细微之处。
- en: The following is the *Mozilla Holy Grail Layout*, which demonstrates "the ability
    to dynamically change the layout for different screen resolutions" while optimizing
    the display content for mobile devices.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是*Mozilla Holy Grail布局*，它展示了“动态改变不同屏幕分辨率的布局”的能力，同时优化移动设备上的显示内容。
- en: You can read more about basic concepts of Flexbox at [https://mzl.la/2vvxj25](https://mzl.la/2vvxj25).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://mzl.la/2vvxj25](https://mzl.la/2vvxj25)了解更多关于Flexbox基本概念的信息。
- en: 'This is a representation of how the UI looks on a large screen:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示了UI在大屏幕上的外观：
- en: '![](img/B14094_05_08.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_08.png)'
- en: 'Figure 5.8: Mozilla Holy Grail Layout on a large screen'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：大屏幕上的Mozilla Holy Grail布局
- en: 'The same layout is represented on a small screen as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，相同的布局在小屏幕上表示：
- en: '![](img/B14094_05_09.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_09.png)'
- en: 'Figure 5.9: Mozilla Holy Grail Layout on a small screen'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9：小屏幕上的Mozilla Holy Grail布局
- en: Mozilla's reference implementation takes 85 lines of code to accomplish this
    kind of responsive UI. Angular Flex Layout accomplishes the same task with only
    half the code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla 的参考实现需要 85 行代码来完成这种响应式 UI。Angular Flex Layout 只需一半的代码就能完成同样的任务。
- en: Installing Angular Flex Layout
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Angular Flex Layout
- en: 'Let''s install and add Angular Flex Layout to our project:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装并将 Angular Flex Layout 添加到我们的项目中：
- en: In the Terminal, execute `npm i @angular/flex-layout`
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行 `npm i @angular/flex-layout`
- en: To get around peer dependency errors, execute `npm i @angular/flex-layout@next`
    or `npm i @angular/flex-layout --force`, as mentioned in *Appendix C*, *Keeping
    Angular and Tools Evergreen*. You can find this appendix online from [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    or at [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen).
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要解决依赖错误，执行 `npm i @angular/flex-layout@next` 或 `npm i @angular/flex-layout --force`，如
    *附录 C* 中所述，*保持 Angular 和工具始终如一*。您可以从 [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    或 [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen)
    在线找到此附录。
- en: 'Update `app.module.ts`, as shown:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `app.module.ts`，如下所示：
- en: '[PRE22]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With Flex Layout installed, let's cover the basics of how the library works.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Flex Layout 后，让我们来了解一下库的基本工作原理。
- en: Layout basics
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局基础
- en: Bootstrap and CSS Flexbox are different beasts than Angular Flex Layout. If
    you learn Angular Flex Layout, you will find yourself using a lot less layout
    code, because Angular Material automatically does the right thing most of the
    time, but you'll be in for a disappointment once you realize how much more code
    you have to write to get things working once you leave the protective cocoon of
    Angular Flex Layout. However, your skills still translate over since the concepts
    are mostly the same.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 和 CSS Flexbox 与 Angular Flex Layout 不同。如果你学习 Angular Flex Layout，你会发现你将使用更少的布局代码，因为
    Angular Material 大多数时候会自动做正确的事情，但一旦你意识到一旦离开 Angular Flex Layout 的保护壳，你需要编写更多的代码才能使事物工作，你可能会感到失望。然而，你的技能仍然可以迁移，因为概念大多相同。
- en: Let's review the Flex Layout APIs in the following sections.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下章节中回顾 Flex Layout API。
- en: If you're new to CSS or even Flexbox, some of the abbreviations used may not
    make sense. I recommend that you experiment with the live demo app provided in
    the documentation to get a better sense of the capabilities of the library at
    a more intuitive level. For more information and a link to the live demo visit
    [https://github.com/angular/flex-layout/wiki/Declarative-API-Overview](https://github.com/angular/flex-layout/wiki/Declarative-API-Overview).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 CSS 或 Flexbox 的初学者，一些使用的缩写可能没有意义。我建议你尝试在文档中提供的实时演示应用程序中实验，以更好地了解库在更直观的层面的功能。更多信息及访问实时演示的链接请访问
    [https://github.com/angular/flex-layout/wiki/Declarative-API-Overview](https://github.com/angular/flex-layout/wiki/Declarative-API-Overview)。
- en: Flex Layout APIs for DOM containers
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flex Layout API 用于 DOM 容器
- en: These directives can be used on DOM containers such as `<div>` or `<span>` to
    manipulate their layout direction, alignment, or gaps in between elements.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令可以用于 DOM 容器，如 `<div>` 或 `<span>`，以操纵它们的布局方向、对齐或元素之间的间隙。
- en: 'Consider the following example:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE23]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `div` is laid out as a row, so multiple `div`s would be rendered on top
    of each other, versus a column layout where they would render next to each other.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`div` 被布局为行，因此多个 `div` 将会堆叠在一起，而不是列布局，它们会并排渲染。'
- en: The `div` is aligned to horizontally left-aligned and vertically centered within
    its parent container.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`div` 在其父容器内水平左对齐且垂直居中。'
- en: The `div` has a 15-px gap between its surrounding elements.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`div` 与其周围元素之间有 15-px 的间隙。'
- en: 'Consider the following diagram to map `fxLayout` terminology spatially:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下图表来在空间上映射 `fxLayout` 术语：
- en: '![css3-flexbox-model](img/B14094_05_10.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![css3-flexbox-model](img/B14094_05_10.jpg)'
- en: 'Figure 5.10: Spatial mapping of Angular Flex Layout terminology'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10：Angular Flex Layout 术语的空间映射
- en: 'The full list of options is presented in the following table:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 选项的完整列表如下表所示：
- en: '| **HTML API** | **Allowed values** |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| **HTML API** | **允许的值** |'
- en: '| `fxLayout` | `<direction>` &#124; `<direction> <wrap>`Use: row &#124; column
    &#124; row-reverse &#124; column-reverse |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `fxLayout` | `<direction>` &#124; `<direction> <wrap>`使用：row &#124; column
    &#124; row-reverse &#124; column-reverse |'
- en: '| `fxLayoutAlign` | `<main-axis> <cross-axis>``main-axis`: start &#124;center
    &#124; end &#124; space-around &#124; space-between`cross-axis`: start &#124;
    center &#124; end &#124; stretch |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `fxLayoutAlign` | `<main-axis> <cross-axis>` `main-axis`: start | center
    | end | space-around | space-between `cross-axis`: start | center | end | stretch
    |'
- en: '| `fxLayoutGap` | % &#124; px &#124; vw &#124; vh |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `fxLayoutGap` | % | px | vw | vh |'
- en: Flex Layout APIs for DOM elements
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DOM 元素的 Flex 布局 API
- en: These directives influence how DOM elements act within their containers.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令影响 DOM 元素在其容器内的行为。
- en: 'Consider the following example:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE24]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `input` element will grow to fill all available space that the parent `div`
    provides. If `fxFlex` was set to `fxFlex="50%"`, it would fill only half of the
    available space. In this case the `fxFlexAlign` property could be used to left-,
    right-, or center-align the element within the `div`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`input` 元素会扩展以填充父 `div` 提供的所有可用空间。如果 `fxFlex` 被设置为 `fxFlex="50%"`，它将只填充可用空间的一半。在这种情况下，可以使用
    `fxFlexAlign` 属性在 `div` 内部左对齐、右对齐或居中对齐元素。'
- en: 'The full list of options is presented in the following table:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了完整的选项列表：
- en: '| **HTML API** | **Allowed values** |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| **HTML API** | **允许的值** |'
- en: '| `fxFlex` | "" &#124; px &#124; % &#124; vw &#124; vh &#124; `<grow> <shrink>
    <basis>` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlex` | "" | px | % | vw | vh | `<grow> <shrink> <basis>` |'
- en: '| `fxFlexOrder` | `int` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexOrder` | `int` |'
- en: '| `fxFlexOffset` | % &#124; px &#124; vw &#124; vh |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexOffset` | % | px | vw | vh |'
- en: '| `fxFlexAlign` | start &#124; baseline &#124; center &#124; end |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexAlign` | start | baseline | center | end |'
- en: '| `fxFlexFill` | none |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexFill` | none |'
- en: Flex Layout APIs for any element
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任何元素的 Flex 布局 API
- en: The following directives can be applied to any HTML element to show, hide, or
    change the look and feel of these elements.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指令可以应用于任何 HTML 元素，以显示、隐藏或更改这些元素的样式和外观。
- en: 'Consider the following example:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`fxShow`, set to `true` by default, will show the `div` element. Unless the
    `lt-sm` condition becomes `true`, which occurs when the browser window shrinks
    below the threshold of *small*. *Small* is defined as a pixel value of 468 px.
    So, if the width of the browser window shrinks to 467 px or less, `fxHide` would
    hide the `div` element.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置为 `true` 的 `fxShow` 将显示 `div` 元素。除非 `lt-sm` 条件变为 `true`，这发生在浏览器窗口缩小到 *small*
    的阈值以下。*Small* 被定义为 468 像素的像素值。因此，如果浏览器窗口的宽度缩小到 467 像素或更少，`fxHide` 将隐藏 `div` 元素。
- en: 'The full list of options is presented in the following table:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了完整的选项列表：
- en: '| **HTML API** | **Allowed values** |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| **HTML API** | **允许的值** |'
- en: '| `fxHide` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `fxHide` | TRUE | FALSE | 0 | "" |'
- en: '| `fxShow` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `fxShow` | TRUE | FALSE | 0 | "" |'
- en: '| `ngClass` | `@extends ngClass core` |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `ngClass` | `@extends ngClass core` |'
- en: '| `ngStyle` | `@extends ngStyle core` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `ngStyle` | `@extends ngStyle core` |'
- en: This section covers the basics of Static Layouts. You can read more about the
    Static APIs at [https://github.com/angular/flex-layout/wiki/Declarative-API-Overview](https://github.com/angular/flex-layout/wiki/Declarative-API-Overview).
    We'll cover the Responsive APIs in *Chapter 11*, *Recipes – Reusability, Routing,
    and Caching*. You can read more about the Responsive APIs at [https://github.com/angular/flex-layout/wiki/Responsive-API](https://github.com/angular/flex-layout/wiki/Responsive-API).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了静态布局的基础知识。您可以在[https://github.com/angular/flex-layout/wiki/Declarative-API-Overview](https://github.com/angular/flex-layout/wiki/Declarative-API-Overview)了解更多关于静态
    API 的信息。我们将在第 11 章“食谱 - 可重用性、路由和缓存”中介绍响应式 API。您可以在[https://github.com/angular/flex-layout/wiki/Responsive-API](https://github.com/angular/flex-layout/wiki/Responsive-API)了解更多关于响应式
    API 的信息。
- en: Now that our layout engine is configured and you have a rudimentary understanding
    of how it works, we can start building the screens for our app.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了布局引擎，并且你对它的工作原理有了基本的了解，我们可以开始构建我们应用的屏幕。
- en: Using Material components
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Material 组件
- en: Now that we have all the various dependencies installed, we can start modifying
    our Angular app to add Material components. We will add a toolbar and a Material
    Design card element, and cover accessibility and typography concerns alongside
    basic layout techniques.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有各种依赖项，我们可以开始修改我们的 Angular 应用以添加 Material 组件。我们将添加一个工具栏和一个 Material
    Design 卡元素，并介绍可访问性和排版问题，同时涵盖基本的布局技术。
- en: Angular Material schematics
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular Material 规划图
- en: Since Angular 6 and the introduction of schematics, libraries like Material
    can provide their own code generators. At the time of publication, Angular Material
    ships with three rudimentary generators to create Angular components with a side
    navigation, a dashboard layout, or a data table. You can read more about generator
    schematics at [https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Angular 6 和脚图引入以来，像 Material 这样的库可以提供自己的代码生成器。在出版时，Angular Material 随带三个基本的生成器，用于创建具有侧导航、仪表板布局或数据表的
    Angular 组件。你可以在 [https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics)
    上了解更多关于生成器脚图的信息。
- en: 'For example, you can create a side navigation layout by executing the following
    command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以通过执行以下命令创建一个侧导航布局：
- en: '[PRE26]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This command updates `app.module.ts`, directly importing Material modules into
    that file, breaking my suggested `material.module.ts` pattern from earlier. Further,
    a new `SideNavComponent` is added to the app as a separate component, but as mentioned
    in the *Side navigation* section in *Chapter 8*, *Designing Authentication and
    Authorization*, such a navigation experience needs to be implemented at the very
    root of your application.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令更新 `app.module.ts`，直接将该文件中的 Material 模块导入，破坏了之前建议的 `material.module.ts` 模式。此外，一个新的
    `SideNavComponent` 作为单独的组件添加到应用中，但如第 8 章 *设计身份验证和授权* 中的 *侧导航* 节所述，这种导航体验需要在应用的根目录中实现。
- en: In short, Angular Material Schematics makes it a lot less cumbersome to add
    various Material modules and components to your Angular app; however, as provided,
    these schematics are not suitable for creating a flexible, scalable, and well-architected
    code base, which is the goal pursued by this book.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Angular Material Schematics 使得向你的 Angular 应用添加各种 Material 模块和组件变得更加简单；然而，正如提供的，这些脚图并不适合创建一个灵活、可扩展且结构良好的代码库，这正是本书追求的目标。
- en: For the time being, I would recommend using these schematics for rapid prototyping
    or experimentation purposes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我建议将这些脚图用于快速原型设计或实验目的。
- en: Now, let's start manually adding some components to our LocalCast Weather app.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始手动向我们的 LocalCast Weather 应用添加一些组件。
- en: Modifying the landing page with Material Toolbar
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Material 工具栏修改登录页面
- en: 'Before we start making further changes to `app.component.ts`, let''s switch
    the component to use inline templates and inline styles, so we don''t have to
    switch back and forth between files for a relatively simple component:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始对 `app.component.ts` 进行进一步修改之前，让我们将组件切换到使用内联模板和内联样式，这样我们就不必在文件之间来回切换，因为这是一个相对简单的组件：
- en: 'Update `app.component.ts` to use an inline template. Cut and paste the contents
    of `app.component.html` to `app.component.ts` and remove the `styleUrls` property
    as shown below:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `app.component.ts` 更新为使用内联模板。将 `app.component.html` 的内容剪切并粘贴到 `app.component.ts`
    中，并移除如下所示的 `styleUrls` 属性：
- en: '[PRE27]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Delete the files `app.component.html` and `app.component.css`.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除文件 `app.component.html` 和 `app.component.css`。
- en: 'Let''s start improving our app by implementing an app-wide toolbar. Observe the
    `h1` tag in `app.component.ts`:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从实现一个全局工具栏开始改进我们的应用。观察 `app.component.ts` 中的 `h1` 标签：
- en: '[PRE28]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Update the `h1` tag with `mat-toolbar`:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '更新 `h1` 标签为 `mat-toolbar`:'
- en: '[PRE29]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update `mat-toolbar` with a more attention-grabbing color:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `mat-toolbar` 更新为更具吸引力的颜色：
- en: '[PRE30]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note that your app will fail to compile if you didn't import `MatToolbarModule`
    as instructed in the earlier section *Importing modules*.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你的应用未能按照前面章节 *导入模块* 中所述导入 `MatToolbarModule`，则应用将无法编译。
- en: 'Note that Material adds the following style as a global style:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Material 会添加以下全局样式：
- en: '[PRE31]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Having a `0` margin provides a native app feeling, where the toolbar touches
    the edges of the browser. This works well both on large- and small-screen formats.
    When you place clickable elements such as a hamburger menu or a help button on the
    far-left or far-right side of the toolbar, you'll avoid the potential that the
    user will click on empty space. This is why Material buttons actually have a larger hit-area
    than visually represented. This makes a big difference in crafting frustration-free
    UXs.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`0` 外边距提供了原生应用的感觉，其中工具栏触及浏览器的边缘。这在大屏幕和小屏幕格式上都很好用。当你将汉堡菜单或帮助按钮等可点击元素放置在工具栏的左侧或右侧时，你会避免用户点击空白区域的可能性。这就是为什么
    Material 按钮实际上比视觉上表示的点击区域更大。这为制作无烦恼的用户体验做出了很大的贡献。'
- en: 'Similarly, if you were building an information-dense application, note that
    your content would go all the way to the edges of the application, making your
    content more difficult to read, which is not a desirable outcome. In these cases,
    you should wrap your content area in a `div` and apply the appropriate margins
    using CSS, as shown here:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果你正在构建一个信息密集型的应用程序，请注意，你的内容将延伸到应用程序的边缘，这使得内容更难以阅读，这不是一个理想的结果。在这些情况下，你应该在内容区域包裹一个`div`，并使用CSS应用适当的边距，如下所示：
- en: '[PRE32]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the next screenshot, you can see the edge-to-edge toolbar with the primary
    color applied to it:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕截图中，你可以看到边缘到边缘的工具栏，并应用了主要颜色：
- en: '![](img/B14094_05_11.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_11.png)'
- en: 'Figure 5.11: LocalCast Weather with improved toolbar'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11：改进后的工具栏的LocalCast天气
- en: Now we have the toolbar configured, let's move on to making a container for
    the weather information.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了工具栏，让我们继续制作天气信息的容器。
- en: Material cards
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料卡片
- en: 'Material cards are a great container to represent the current weather information.
    The card element is surrounded by a drop-shadow that delineates the content from
    its surroundings:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 材料卡片是一个很好的容器，可以表示当前的天气信息。卡片元素周围有一个阴影，将内容与其周围环境区分开来：
- en: 'Import `MatCardModule` in `material.module`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`material.module`中导入`MatCardModule`：
- en: '[PRE33]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In AppComponent''s template, surround `<app-current-weather>` with `<mat-card>`:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AppComponent`的模板中，将`<app-current-weather>`包围在`<mat-card>`中：
- en: '[PRE34]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Observe the barely distinguishable card element with its shadow near the bottom
    of the screen below:![](img/B14094_05_12.png)
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察屏幕底部附近的几乎无法区分的卡片元素及其阴影：![](img/B14094_05_12.png)
- en: 'Figure 5.12: LocalCast Weather with indistinguishable card element'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.12：LocalCast天气与难以区分的卡片元素
- en: To lay out the screen better, we need to switch to the Flex Layout engine. We'll
    start by removing the training wheels from the component template.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了更好地布局屏幕，我们需要切换到Flex布局引擎。我们将从移除组件模板中的训练轮开始。
- en: Remove `style="text-align:center"` from the outermost `<div>` element.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从最外层的`<div>`元素中移除`style="text-align:center"`。
- en: 'Surround `<mat-card>` with the following HTML, where the contents of `<mat-card>`
    replaces the ellipses in the middle of the code:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下HTML将`<mat-card>`包围起来，其中`<mat-card>`的内容替换了代码中间的省略号：
- en: 'To center an element in a page, we need to create a row, assign a width to
    the center element, and create two additional columns on either side that can
    flex to take the empty space, such as this:'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在页面上居中一个元素，我们需要创建一个行，为居中元素分配一个宽度，并在两侧创建两个额外的列，这些列可以伸缩以填充空余空间，如下所示：
- en: '[PRE35]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Observe that the `mat-card` element is properly centered, as follows:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意到`mat-card`元素被正确地居中，如下所示：
- en: '![](img/B14094_05_13.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_13.png)'
- en: 'Figure 5.13: LocalCast Weather with centered card'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13：LocalCast天气与居中的卡片
- en: Reading through the card documentation and looking through the examples on Material's
    documentation site at [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview),
    you'll note that `mat-card` provides elements to house the title and content.
    We will implement this in the upcoming sections.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读卡片文档并查看Material文档站点[https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview)上的示例，你会注意到`mat-card`提供了容纳标题和内容的元素。我们将在接下来的部分中实现这一点。
- en: On `material.angular.io`, you can view the source code of any example by clicking
    on the brackets icons or launch a working example in [StackBlitz.io](http://StackBlitz.io)
    by clicking on the arrow icon.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在`material.angular.io`上，你可以通过点击括号图标查看任何示例的源代码，或者通过点击箭头图标在[StackBlitz.io](http://StackBlitz.io)上启动一个工作示例。
- en: Card header and content
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卡片标题和内容
- en: 'Now, let''s implement the title and content elements of `mat-card` using `mat-card-header`
    and `mat-card-content`, as shown:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`mat-card-header`和`mat-card-content`来实现`mat-card`的标题和内容元素，如下所示：
- en: '[PRE36]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'All Material elements have native support for the Flex Layout engine. This
    allows us to optimize our HTML and merge `<div fxFlex="300px">` with `<mat-card>`
    and simplify the code:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Material元素都原生支持Flex布局引擎。这允许我们优化我们的HTML，将`<div fxFlex="300px">`与`<mat-card>`合并并简化代码：
- en: '[PRE37]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This has tremendous positive implications for maintainability in complicated
    UIs.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这对复杂UI的可维护性有巨大的积极影响。
- en: '**Don''t forget**: With Material, less is always more.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要忘记**：使用Material，少即是多。'
- en: 'After we apply `mat-card-header` and `mat-card-content`, you can see this result:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用`mat-card-header`和`mat-card-content`之后，你可以看到这个结果：
- en: '![](img/B14094_05_14.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_14.png)'
- en: 'Figure 5.14: LocalCast Weather card with title and content'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14：LocalCast天气卡片，带有标题和内容
- en: Note that fonts within the card now match Material's Roboto font. However, **Current Weather**
    is no longer as attention-grabbing as it was before. If you add back in the `h2`
    tag inside `mat-card-title`, **Current Weather** will visually look bigger; however,
    the font won't match the rest of your application. To fix this issue, you must
    understand Material's typography features.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，卡片内的字体现在与材料的Roboto字体相匹配。然而，**当前天气**不再像以前那样引人注目。如果你在`mat-card-title`内的`h2`标签中添加回来，**当前天气**在视觉上看起来会更大；然而，字体不会与你的应用程序的其他部分匹配。要解决这个问题，你必须了解材料的排印功能。
- en: Material typography
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料排印
- en: 'Material''s documentation aptly puts it as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 材料文档恰如其分地表述如下：
- en: Typography is a way of arranging type to make text legible, readable, and appealing
    when displayed.
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 排印是排列文本以使其在显示时易于阅读、可读且吸引人的方式。
- en: Material offers a different level of typography that has different `font-size`,
    `line-height`, and `font-weight` characteristics that you can apply to any HTML
    element, not just the components provided out of the box.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 材料提供了一种不同的排印级别，它具有不同的`font-size`、`line-height`和`font-weight`特性，你可以将这些特性应用于任何HTML元素，而不仅仅是那些开箱即用的组件。
- en: In the following table are CSS classes that you can use to apply Material's
    typography.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了你可以用来应用材料排印的CSS类：
- en: 'Consider the following example:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE38]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `display-4` typography is applied to the `div` by prepending it with "`mat-`".
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`display-4`排印通过在`div`前添加"`mat-"`来应用于`div`。'
- en: 'See the following table for a full list of typographical styles:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 查看下表以获取完整的排印样式列表：
- en: '| **Class Name** | **Usage** |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| **类名** | **用途** |'
- en: '| `display-4`, `display-3`, `display-2`, and `display-1` | Large, one-off headers,
    usually at the top of the page (for example, a hero header) |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `display-4`, `display-3`, `display-2`, 和 `display-1` | 大型一次性标题，通常位于页面顶部（例如，英雄标题）|'
- en: '| `h1`, `headline` | Section heading corresponding to the `<h1>` tag |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `h1`, `headline` | 与`<h1>`标签对应的章节标题 |'
- en: '| `h2`, `title` | Section heading corresponding to the `<h2>` tag |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `h2`, `title` | 与`<h2>`标签对应的章节标题 |'
- en: '| `h3`, `subheading-2` | Section heading corresponding to the `<h3>` tag |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `h3`, `subheading-2` | 与`<h3>`标签对应的章节标题 |'
- en: '| `h4`, `subheading-1` | Section heading corresponding to the `<h4>` tag |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `h4`, `subheading-1` | 与`<h4>`标签对应的章节标题 |'
- en: '| `body-1` | Base body text |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `body-1` | 基础正文文本 |'
- en: '| `body-2` | Bolder body text |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `body-2` | 更粗的正文文本 |'
- en: '| `Caption` | Smaller body and hint text |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `Caption` | 较小的正文和提示文本 |'
- en: '| `Button` | Buttons and anchors |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `Button` | 按钮 |'
- en: You can read more about Material typography at [https://material.angular.io/guide/typography](https://material.angular.io/guide/typography).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://material.angular.io/guide/typography](https://material.angular.io/guide/typography)了解更多关于材料排印的信息。
- en: Applying typography
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用排印
- en: 'There are multiple ways to apply typography. One way is to leverage the `mat-typography`
    class and use the corresponding HTML tag, such as `<h2>`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 应用排印的方式有多种。一种方式是利用`mat-typography`类并使用相应的HTML标签，例如`<h2>`：
- en: '[PRE39]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Another way is to apply the specific typography directly on an element, as
    in `class="mat-title"`:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式是将特定的排印直接应用于一个元素上，例如`class="mat-title"`：
- en: '[PRE40]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that `class="mat-title"` can be applied to `div`, `span`, or an `h2` with
    the same results.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`class="mat-title"`可以应用于`div`、`span`或具有相同结果的`h2`。
- en: As a rule of thumb, it is usually a better idea to implement the more specific
    and localized option, which is the second implementation here.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一条经验法则，通常实施更具体和本地化的选项会更好，这里就是第二种实现。
- en: 'As we implement Material typography in the upcoming sections, we need to ensure
    the card title stands out from rest of the elements on the screen. In this context,
    I prefer the look of the `mat-headline` typography to achieve this goal, so your
    implementation should look like:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中实现材料排印时，我们需要确保卡片标题在屏幕上的其他元素中脱颖而出。在这种情况下，我更喜欢`mat-headline`排印的外观来实现这一目标，因此你的实现应该看起来像：
- en: '[PRE41]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Next, let's see how we can align the other elements on the screen.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何对屏幕上的其他元素进行对齐。
- en: Flex Layout Align
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性布局对齐
- en: 'We can center the tagline of the application using `fxLayoutAlign` and give
    it a subdued look using the `mat-caption` typography:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`fxLayoutAlign`来居中对齐应用程序的标语，并使用`mat-caption`排印给它一种低调的外观：
- en: 'Center the `div` containing the tagline using `fxLayoutAlign`:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fxLayoutAlign`居中对齐包含标语标签的`div`：
- en: '[PRE42]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Apply the `mat-caption` typography to the tagline:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`mat-caption`排印应用于标语：
- en: '[PRE43]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Observe the results, as shown here:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下结果，如图所示：
- en: '![](img/B14094_05_15.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_15.png)'
- en: 'Figure 5.15: LocalCast Weather with centered tagline'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15：带有居中标语标签的 LocalCast 天气
- en: Next, we need to work on laying out the elements to match the design.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要对齐和样式化元素以匹配设计。
- en: Flex Layout
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flex 布局
- en: 'There''s still more work to do to make the UI look like the design. Observe
    the following design of the Current Weather card:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 UI 看起来像设计，还需要做更多的工作。观察以下当前天气卡的以下设计：
- en: '![](img/B14094_05_16.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_16.png)'
- en: 'Figure 5.16: Lo-fi design of Current Weather'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16：当前天气的 Lo-fi 设计
- en: To design the layout, we'll leverage Angular Flex.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设计布局，我们将利用 Angular Flex。
- en: You'll be editing `current-weather.component.html`, which uses the `<div>` and
    `<span>` tags to establish elements that live on separate lines or on the same
    line, respectively. With the switch over to Angular Flex, we need to switch all
    elements to `<div>` and specify rows and columns using `fxLayout`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '你将编辑 `current-weather.component.html`，它使用 `<div>` 和 `<span>` 标签来建立分别位于单独行或同一行的元素。随着切换到
    Angular Flex，我们需要将所有元素切换到 `<div>`，并使用 `fxLayout` 指定行和列。 '
- en: Implementing layout scaﬀolding
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实施布局脚手架
- en: 'We need to start by implementing the rough scaffolding. Consider the current
    state of the template:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先实现初步的脚手架。考虑模板的当前状态：
- en: '[PRE44]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let''s go through the file step by step and update it. First let''s make the
    structural changes to support Flex Layout:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地通过文件并更新它。首先，让我们进行结构更改以支持 Flex 布局：
- en: On lines 6, 7, and 11, update `<span>` elements to `<div>` elements.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 6、7 和 11 行，将 `<span>` 元素更新为 `<div>` 元素。
- en: On line 10, wrap the `<img>` element with a `<div>` element.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 10 行，将 `<img>` 元素包裹在一个 `<div>` 元素中。
- en: On lines 5 and 9, add the `fxLayout="row"` property to the outer `<div>` element
    that has multiple child elements.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 5 和 9 行，向具有多个子元素的父 `<div>` 元素添加 `fxLayout="row"` 属性。
- en: 'Next, apply the `fxFlex` attribute to `div` elements to determine how much
    horizontal space elements should take:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将 `fxFlex` 属性应用到 `div` 元素上，以确定元素应占用多少水平空间：
- en: On line 6, the City and Country column should take roughly ²⁄³ of the screen,
    so add `fxFlex="66%"` to the `<div>` element.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 6 行，城市和国家列应占据屏幕的大约 ²⁄³，因此向 `<div>` 元素添加 `fxFlex="66%"`。
- en: On line 7, add `fxFlex` to the `<div>` element to ensure that it fills up the
    rest of the horizontal space.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 7 行，向 `<div>` 元素添加 `fxFlex` 以确保它填满剩余的水平空间。
- en: On line 10, add `fxFlex="66%"` to the new `<div>` element, surrounding the `<img>`
    element.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 10 行，向包围 `<img>` 元素的新 `<div>` 元素添加 `fxFlex="66%"`。
- en: On line 11, add `fxFlex` to the `<div>` element.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 11 行，向 `<div>` 元素添加 `fxFlex`。
- en: 'The final state of the template should look like this:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的最终状态应如下所示：
- en: '[PRE45]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You can be more verbose in adding Angular Flex attributes; however, the more
    code you write, the more you'll need to maintain, making future changes more difficult.
    For example, on line 13, the `<div>` element doesn't need `fxLayout="row"`, since
    a `<div>` implicitly gets a new line. Similarly, on lines 7 and 11, the right-hand
    column doesn't need an explicit `fxFlex` attribute, since the left-hand element
    automatically squeezes it. However, we are going to keep those `fxFlex` attributes
    in.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在添加 Angular Flex 属性时更加详细；然而，你写的代码越多，你需要维护的也就越多，这会使未来的更改更加困难。例如，在第 13 行，`<div>`
    元素不需要 `fxLayout="row"`，因为 `<div>` 隐式地得到一个新行。同样，在第 7 和 11 行，右侧列不需要显式的 `fxFlex`
    属性，因为左侧元素会自动压缩它。但是，我们将保留那些 `fxFlex` 属性。
- en: 'From a grid placement perspective, all your elements are now in the correct
    *cell*, as shown here:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 从网格放置的角度来看，所有元素现在都位于正确的 *单元格* 中，如图所示：
- en: '![](img/B14094_05_17.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_17.png)'
- en: 'Figure 5.17: LocalCast Weather with layout scaffolding'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17：带有布局脚手架的 LocalCast 天气
- en: With a responsive design implemented, next, let's work on alignment of major
    elements.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 实现响应式设计后，接下来让我们处理主要元素的对齐。
- en: Aligning elements with CSS
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 CSS 对齐元素
- en: 'Now, we need to align and style each cell to match the design. For this purpose,
    we rely on CSS over `fxLayoutAlign`. The date and temperature need to be right-aligned
    and the description centered:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要对齐和样式化每个单元格以匹配设计。为此，我们依赖于 CSS 而不是 `fxLayoutAlign`。日期和温度需要右对齐，而描述需要居中：
- en: 'To right-align the date and temperature, create a new CSS class named `.right`
    in `current-weather.component.css`:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使日期和温度右对齐，请在 `current-weather.component.css` 中创建一个新的 CSS 类 `.right`：
- en: '[PRE46]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Add `class="right"` to the `<div>` element on lines 7 and 11.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 7 和 11 行的 `<div>` 元素上添加 `class="right"`。
- en: Center the `<div>` element for the description in the same way you centered
    the app's tagline earlier in the chapter. Use a surrounding `div` with an `fxLayoutAlign="center"`
    attribute.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与本章早期中心对齐应用标语相同的方式，将描述的 `<div>` 元素居中。使用具有 `fxLayoutAlign="center"` 属性的周围 `div`。
- en: 'Observe that the elements are aligned correctly, as follows:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察到元素对齐正确，如下所示：
- en: '![](img/B14094_05_18.png)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_18.png)'
- en: 'Figure 5.18: LocalCast Weather with correct alignments'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18：LocalCast 天气正确对齐
- en: After aligning the major elements, let's apply the first layer of styling to
    every element to match the design.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在对主要元素进行对齐后，让我们为每个元素应用第一层样式以匹配设计。
- en: Individually styling elements
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单独设置元素样式
- en: 'Finalizing the styling of elements is usually the most time-consuming part
    of front-end development. I recommend doing multiple passes to achieve a close-enough
    version of the design with minimal effort first and then have your client or team
    decide whether it''s worth the extra resources to spend more time to polish the
    design:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 完成元素样式通常是前端开发中最耗时的部分。我建议先进行多次迭代，以最小的努力实现设计的一个足够接近的版本，然后让你的客户或团队决定是否值得投入额外资源来进一步润色设计：
- en: 'Add a new CSS property:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的 CSS 属性：
- en: '[PRE47]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: For the city name, add `class="mat-title no-margin"`.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于城市名称，添加 `class="mat-title no-margin"`。
- en: For the date, add `"mat-h3 no-margin"` to `class="right"`.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于日期，将 `class="right"` 修改为添加 `"mat-h3 no-margin"`。
- en: Change the display format of the date from `'fullDate'` to `'EEEE MMM d'` so
    it matches the design.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将日期的显示格式从 `'fullDate'` 更改为 `'EEEE MMM d'` 以匹配设计。
- en: 'Modify `<img>` to add `style="zoom: 175%"`.'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将 `<img>` 修改为添加 `style="zoom: 175%"`。'
- en: For the temperature, add `"mat-display-3 no-margin"` to `class="right"`.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于温度，将 `class="right"` 修改为添加 `"mat-display-3 no-margin"`。
- en: For the description, add `class="mat-caption"`.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于描述，添加 `class="mat-caption"`。
- en: 'This is the final state of the template:'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是模板的最终状态：
- en: '[PRE48]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Observe that the styled output of your code changes, as illustrated:![](img/B14094_05_19.png)
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察到代码的样式输出发生了变化，如图所示：![](img/B14094_05_19.png)
- en: 'Figure 5.19: LocalCast Weather with styling'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.19：LocalCast 天气样式
- en: We're done with adding the first layer of styles for our design. Next, let's
    fine-tune the spacing and alignment of elements.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了设计的第一层样式添加。接下来，让我们微调元素之间的间距和对齐。
- en: Fine-tuning styles
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微调样式
- en: 'The tagline can benefit from some top and bottom margins. This is common CSS
    that we''re likely to use across the application, so let''s put it in `styles.css`:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 标语可以从一些顶部和底部边距中受益。这是我们可能会在整个应用中使用的常见 CSS，所以让我们将其放入 `styles.css`：
- en: 'Implement `vertical-margin` in the global `styles.css`:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在全局 `styles.css` 中实现 `vertical-margin`：
- en: '[PRE49]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In `app.component.ts`, apply `vertical-margin` to the app''s tagline:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app.component.ts` 中，为应用的标语应用 `vertical-margin`：
- en: '[PRE50]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In `current-weather.component.html`, the image and the temperature aren''t
    centered, so add `fxLayoutAlign="center center"` to the outer `div` surrounding
    these elements:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `current-weather.component.html` 中，图片和温度没有居中，所以将这些元素的外围 `div` 添加 `fxLayoutAlign="center
    center"`：
- en: '[PRE51]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Observe the finalized layout of your app, which should look like this:![](img/B14094_05_20.png)
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察你应用最终布局，它应该看起来像这样：![](img/B14094_05_20.png)
- en: 'Figure 5.20: LocalCast Weather ﬁnalized layout'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.20：LocalCast 天气最终布局
- en: Finally, let's add some more visual flair by tightening up our design, like
    fixing the missing line break between the day and the month, and adding some nice-to-have
    features.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们通过紧缩我们的设计来增加一些视觉亮点，比如修复日期和月份之间缺失的换行符，并添加一些锦上添花的特性。
- en: Tweaking to match design
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整以匹配设计
- en: 'This is an area where you may spend a significant amount of time. If we were
    following the 80-20 principle, pixel-perfect tweaks usually end up being the last
    20% that takes 80% of the time to complete. Let''s examine the differences between
    our implementation in the previous figure, and the original design as shown in
    the following figure, and what it would take to bridge the gap:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可能会花费大量时间的地方。如果我们遵循 80-20 原则，像素级的调整通常会是最后的 20%，而这需要 80% 的时间来完成。让我们比较前一个图中的实现和以下图中的原始设计，以及弥合差距需要做什么：
- en: '![](img/B14094_05_21.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_05_21.png)'
- en: 'Figure 5.21: LocalCast Weather original design'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21：LocalCast 天气原始设计
- en: 'The date needs further customization. The numeric ordinal *th* is missing in
    our implementation; to accomplish this, we will need to bring in a third-party
    library such as `moment` or implement our own solution and bind it next to the
    date on the template:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 日期需要进一步定制。在我们的实现中缺少数字序数*th*；为了完成这个任务，我们需要引入第三方库，如`moment`，或者实现我们自己的解决方案并将其绑定到模板上的日期旁边：
- en: 'Implement a `getOrdinal` function in `CurrentWeatherComponent`:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CurrentWeatherComponent`中实现一个`getOrdinal`函数：
- en: '[PRE52]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the template, update `current.date` to append an ordinal to it:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中，更新`current.date`以向其添加一个序数：
- en: '[PRE53]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note that the implementation of `getOrdinal` boils down to a complicated one-liner
    that isn't very readable and is very difficult to maintain. Such functions, if
    critical to your business logic, should be heavily unit tested.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`getOrdinal`的实现归结为一个复杂的一行代码，可读性差，且难以维护。如果这些函数对你的业务逻辑至关重要，应该对它们进行大量的单元测试。
- en: Next, let's fix the missing line break between the day of the week and the month.
    On certain days like Monday Mar 23^(rd), Monday and Mar will be on the first line,
    leaving 23^(rd) by itself on the second line. However, on Tuesday Mar 24^(th),
    the issue doesn't exist and Mar and 24^(th) fall on the same line. Angular, at the
    time of publishing, doesn't support new line breaks in the date template; ideally,
    we should be able to specify the date format as "EEEE\nMMM d" to ensure that the
    line break is always consistent. We can, however, throw some inefficient code
    at the problem and enforce the behavior we desire.
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，让我们修复星期和月份之间缺失的换行符。在某些日子，比如3月23日（星期一），星期一和三月将位于第一行，而23日（星期一）则单独位于第二行。然而，在3月24日（星期二），这个问题并不存在，三月和24日（星期二）都位于同一行。在发布时，Angular不支持日期模板中的新行断开；理想情况下，我们应该能够指定日期格式为“EEEE\nMMM
    d”，以确保行断开始终一致。然而，我们可以对问题进行一些低效的代码处理，并强制执行我们想要的操作。
- en: 'Break up the current date into two parts and separate them with the line break
    tag `<br>`, then remove the class right from the outer `div`:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前日期分成两部分，并用换行标签`<br>`分隔它们，然后从外部的`div`中移除类：
- en: '[PRE54]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Never use `<br>` for layout purposes. It's acceptable in this limited case,
    because we're breaking up content within a `div` or a `p` tag.
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要为了布局目的使用`<br>`。在这个有限的例子中，这是可以接受的，因为我们正在将内容拆分在`div`或`p`标签内。
- en: Now, let's add some visual flair, when displaying the temperature unit. To accomplish
    this, the temperature implementation needs to separate the digits from the unit
    with a `<span>` element, surrounded with a `<p>` element, so a superscript style
    can be applied to the unit along the lines of `<span class="unit">``˚``F</span>`,
    where `unit` is a CSS class that makes its content look like a superscript element.
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们添加一些视觉亮点，当显示温度单位时。为了实现这一点，温度实现需要使用`<span>`元素将数字与单位分开，并用`<p>`元素包围，这样就可以在单位上应用上标样式，例如`<span
    class="unit">``˚``F</span>`，其中`unit`是一个CSS类，使其内容看起来像上标元素。
- en: 'Implement a `unit` CSS class:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`unit` CSS类：
- en: '[PRE55]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Reduce the flex on the image to 55%, wrap the temperature and the unit with
    a `p` tag and apply `mat-display-3` on the `p` tag. Then implement a `span` around
    the temperature unit with the `p` tag, and apply the classes `unit` and `mat-display-1`
    to the `span`:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像的弹性设置为55%，将温度和单位用`p`标签包裹，并在`p`标签上应用`mat-display-3`。然后，在温度单位周围实现一个`span`，并用`p`标签应用`unit`和`mat-display-1`类：
- en: '[PRE56]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You usually need to experiment with how much space the forecast image should
    have by tweaking the `fxFlex` value on the preceding first line. If it takes too
    much space, the temperature overflows to the next line. Your settings can further
    be affected by the size of your browser window. 60% seems to work well, but when
    I was coding this sample the current weather was 55˚F, so for entirely poetic
    reasons I decided to go with 55%. See the polished version of our app here:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常需要通过调整前一行上的`fxFlex`值来实验预测图像应该有多少空间。如果它占用了太多空间，温度就会溢出到下一行。你的设置还可以受到浏览器窗口大小的影响。60%似乎效果不错，但当我编写这个示例时，当前天气是55˚F，所以出于完全诗意的理由，我决定选择55%。在这里查看我们应用的精炼版本：
- en: '![](img/B14094_05_22.png)'
  id: totrans-414
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_22.png)'
- en: 'Figure 5.22: LocalCast Weather after tweaks'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.22：调整后的LocalCast天气
- en: As always, it is possible to further tweak the margins and paddings to further
    customize the design. However, each deviation from the library will have maintainability
    consequences down the line. Unless you're truly building a business around displaying
    weather data, you should defer any further optimizations to the end of the project,
    if time permits, and if experience is any guide, you will not be making this optimization.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，您可以进一步调整边距和填充来进一步自定义设计。然而，任何与库的偏差都可能在后续的维护中产生后果。除非您真正围绕显示天气数据来构建业务，否则您应该将任何进一步的优化推迟到项目末尾，如果时间允许，并且如果经验是任何指导，您可能不会进行这种优化。
- en: 'With two negative margin-bottom hacks, you can attain a design fairly close
    to the original, but I will not include those hacks here and leave it as an exercise
    for the reader to discover on the GitHub repository. Such hacks are sometimes
    necessary evils, but in general, they point to a disconnect between design and
    implementation realities. The solution leading up to the tweaks section is the
    sweet spot, where Angular Material thrives. Beyond that you''re probably wasting
    your time. I went ahead and wasted my time for you and here''s the result:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个负边距下边距的技巧，您可以获得一个相当接近原始设计的样式，但在这里我不会包括这些技巧，将其作为读者在 GitHub 仓库中发现的练习。这样的技巧有时是必要的恶，但通常它们指向设计和实现现实之间的脱节。调整部分之前的解决方案是最佳点，在那里
    Angular Material 最为繁荣。超出这一点，您可能是在浪费时间。我提前浪费了我的时间，以下是我的结果：
- en: '![](img/B14094_05_23.png)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_23.png)'
- en: 'Figure 5.23: LocalCast Weather after tweaks and hacks'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.23：调整和技巧后的 LocalCast 天气
- en: Now that our layout and design is in great shape, let's look into creating a
    custom theme using Angular Material.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了布局和设计，让我们来看看如何使用 Angular Material 创建一个自定义主题。
- en: Custom themes
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义主题
- en: As we previously discussed, Material ships with some default themes including
    `deeppurple-amber`, `indigo-pink`, `pink-blue-grey`, and `purple-green`. However,
    your company or product may have its own color scheme. For this, you can create
    a custom theme to change the look of your application.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，Material 随带一些默认主题，包括 `deeppurple-amber`、`indigo-pink`、`pink-blue-grey`
    和 `purple-green`。然而，您的公司或产品可能有它自己的配色方案。为此，您可以创建一个自定义主题来改变您应用程序的外观。
- en: 'In order to create a new theme, you must implement a new SCSS file:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个新的主题，您必须实现一个新的 SCSS 文件：
- en: Remove all definitions of your default theme from `angular.json`.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `angular.json` 中移除您默认主题的所有定义。
- en: Re-run the command `npx ng add @angular/material`.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行命令 `npx ng add @angular/material`。
- en: This time select `Custom` as the theme.
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次选择 `Custom` 作为主题。
- en: After running the command make sure that your `index.html` and `styles.css`
    files have not been modified. If so, revert the changes.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令后，请确保您的 `index.html` 和 `styles.css` 文件没有被修改。如果被修改了，请撤销更改。
- en: 'This will create a new file under `src` called `custom-theme.scss.` Rename
    it to `localcast-theme.scss`, shown as follows:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在 `src` 目录下创建一个名为 `custom-theme.scss` 的新文件。将其重命名为 `localcast-theme.scss`，如下所示：
- en: '[PRE57]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You can find the Material theme guide at [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)
    for more detailed information.
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在 [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)
    找到 Material 主题指南，获取更详细的信息。
- en: Note that `mat-core()` should only be included once in your application; otherwise,
    you'll introduce unnecessary and duplicated CSS payloads in your application.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`mat-core()` 应该只包含在您的应用程序中一次；否则，您将在应用程序中引入不必要的和重复的 CSS 负载。
- en: '`mat-core()` contains the necessary SCSS functions to be able to inject your
    custom colors into Material, such as `mat-palette`, `mat-light-theme`, and `mat-dark-theme`.'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mat-core()` 包含将自定义颜色注入 Material 所必需的 SCSS 函数，例如 `mat-palette`、`mat-light-theme`
    和 `mat-dark-theme`。'
- en: At a minimum, we must define a new primary and an accent color. Defining new
    colors, however, is not a straightforward process. Material requires a palette
    to be defined through `mat-palette`, which needs to be seeded by a complicated
    color object that can't just be overridden by a simple hex value such as `#BFB900`.
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 至少，我们必须定义一个新的主色调和一个强调色。然而，定义新的颜色并不是一个简单的过程。Material 需要通过 `mat-palette` 定义调色板，这需要一个复杂的颜色对象来初始化，不能简单地通过如
    `#BFB900` 这样的十六进制值来覆盖。
- en: 'To pick your colors, you can use the Material Design Color Tool, located at
    [https://material.io/resources/color](https://material.io/resources/color). Here''s
    a screenshot of the tool:'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要选择您的颜色，您可以使用位于 [https://material.io/resources/color](https://material.io/resources/color)
    的 Material Design 颜色工具。以下是工具的截图：
- en: '![](img/B14094_05_24.png)'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_24.png)'
- en: 'Figure 5.24: Material.io Color Tool'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.24：Material.io色彩工具
- en: 'Using **Material Palette**, select a **Primary** and a **Secondary** color:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Material调色板**选择**主色**和**辅助色**：
- en: My primary selection is red with a hue value of `500`.
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的主色选择是带有色调值`500`的红色。
- en: My secondary selection is indigo with a hue value of `A400`.
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的次要选择是带有色调值`A400`的靛蓝色。
- en: Observe how your selections would apply to a Material Design app by going through
    the six prebuilt screens on the left of the page.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览页面左侧的六个预建屏幕，观察您的选择如何应用于Material Design应用。
- en: Evaluate the accessibility implications of your selections, as shown:![](img/B14094_05_25.png)
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估您选择的可访问性影响，如图所示：![图片](img/B14094_05_25.png)
- en: 'Figure 5.25: Material.io Color Tool Accessibility tab'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.25：Material.io色彩工具的可访问性选项卡
- en: The tool is warning us that our selections result in illegible text, when white
    text is used over the primary color. You should either take care to avoid displaying
    white text over your primary color or change your selection.
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工具警告我们，当在主色上使用白色文本时，我们的选择会导致文本难以辨认。您应该注意避免在主色上显示白色文本，或者更改您的选择。
- en: 'If you want to create your own palette, then the interface for `mat-palette`
    looks like this:'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想创建自己的调色板，那么`mat-palette`的界面看起来是这样的：
- en: '[PRE58]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Define the primary and secondary `mat-palette` objects using the default hue from
    the tool:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认色调定义主色和辅助色的`mat-palette`对象：
- en: '[PRE59]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Even though your theme is in SCSS, you may continue using CSS in the rest of
    your application. The Angular CLI supports compiling both SCSS and CSS. If you
    would like to change the default behavior, you may switch to SCSS altogether by
    changing the `defaults.styleExt` property in the `angular.json` file from CSS
    to SCSS.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您的主题在SCSS中，您也可以继续在应用程序的其他部分使用CSS。Angular CLI支持编译SCSS和CSS。如果您想更改默认行为，您可以通过将`angular.json`文件中的`defaults.styleExt`属性从CSS更改为SCSS来完全切换到SCSS。
- en: You may also choose to eliminate `styles.css` and merge its contents with `localcast-theme.scss`
    or convert `styles.css` to a SASS file by simply renaming it to `styles.scss`.
    If you do this, don't forget to update `angular.json`.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择删除`styles.css`并将其内容合并到`localcast-theme.scss`中，或者通过简单地将其重命名为`styles.scss`将`styles.css`转换为SASS文件。如果您这样做，别忘了更新`angular.json`。
- en: 'Congratulations! Your application should now bear your trademark color scheme:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您的应用程序现在应该具有您自己的商标色彩方案：
- en: '![](img/B14094_05_26.png)'
  id: totrans-451
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_26.png)'
- en: 'Figure 5.26: LocalCast Weather with custom theme'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.26：使用自定义主题的LocalCast天气
- en: Push your code to GitHub and check out your CircleCI pipeline.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的代码推送到GitHub并检查您的CircleCI流水线。
- en: Unit testing with Material
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Material进行单元测试
- en: 'Once you commit your code, you will notice that your pipeline is now failing
    due to failed tests. In order to keep your unit tests running, you will need to
    import `MaterialModule` to any component''s `spec` file that uses Angular Material:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您提交代码，您会注意到由于测试失败，您的流水线现在失败了。为了保持您的单元测试运行，您需要将`MaterialModule`导入到任何使用Angular
    Material的组件的`spec`文件中：
- en: '[PRE60]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: You will also need to update any test, including e2e tests, that search for
    a particular HTML element.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要更新任何搜索特定HTML元素的测试，包括端到端测试。
- en: 'For example, since the app''s title, LocalCast Weather, is not in an `h1` tag
    anymore, you must update the `spec` file to look for it in a `span` element:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由于应用程序的标题LocalCast Weather不再位于`h1`标签中，您必须更新`spec`文件以在`span`元素中查找它：
- en: '[PRE61]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Another example is in the `CurrentWeather` component, where the surrounding
    element for `city` is no longer `span`, so you can use the `mat-title` CSS class
    instead:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是在`CurrentWeather`组件中，`city`周围的元素不再是`span`，因此您可以使用`mat-title` CSS类：
- en: '[PRE62]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Similarly, in e2e tests, you will need to update your page object function
    to retrieve the text from the correct location:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在端到端测试中，您需要更新您的页面对象函数以从正确的位置检索文本：
- en: '[PRE63]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Once your tests are passing, push your code to GitHub again. When your CircleCI
    pipeline succeeds, ship your app using Vercel Now. Remember, if you don't ship
    it, it never happened!
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的测试通过，再次将您的代码推送到GitHub。当您的CircleCI流水线成功时，使用Vercel Now发布您的应用程序。记住，如果您不发布它，它就从未发生过！
- en: 'We can now move the UX task to the **Done** column:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将UX任务移动到**完成**列：
- en: '![](img/B14094_05_27.png)'
  id: totrans-466
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_27.png)'
- en: 'Figure 5.27: GitHub project Kanban board status'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.27：GitHub项目看板板状态
- en: In *Chapter 7*, *Creating a Router-First Line-of-Business App*, you will learn
    about more sophisticated tools to be able to further customize the look and feel
    of your Material theme to create a truly unique experience that fits the brand
    you're representing.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **第 7 章**，**创建一个以路由器为第一线的业务应用** 中，你将了解更多高级的工具，以便进一步自定义你的 Material 主题的外观和感觉，从而创建一个真正独特的体验，适合你所代表的品牌。
- en: Accessibility
  id: totrans-469
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可访问性
- en: It is important to be aware of potential accessibility issues with your app.
    You may familiarize yourself with accessibility concerns by visiting the A11Y
    project website at [https://a11yproject.com](https://a11yproject.com). Material
    itself provides additional tooling to help you improve accessibility; you can
    read about it at [https://material.angular.io/cdk/a11y/overview](https://material.angular.io/cdk/a11y/overview).
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你的应用中可能存在的潜在可访问性问题非常重要。你可以通过访问 A11Y 项目网站 [https://a11yproject.com](https://a11yproject.com)
    来熟悉可访问性方面的考虑。Material 本身也提供了额外的工具来帮助你提高可访问性；你可以在 [https://material.angular.io/cdk/a11y/overview](https://material.angular.io/cdk/a11y/overview)
    上了解更多信息。
- en: Leveraging such Material features may feel unnecessary; however, you must consider
    responsiveness, styling, spacing, and accessibility concerns when designing your
    app. The Material team has put in a lot of effort so that your code works correctly
    under most circumstances and can serve the largest possible user base with a high-quality
    UX. This can include visually impaired or keyboard-primary users, who must rely
    on specialized software or keyboard features such as tabs to navigate your app.
    Leveraging Material elements provides crucial metadata for these users to be able
    to navigate your app.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这样的 Material 功能可能感觉不必要；然而，在设计你的应用时，你必须考虑响应性、样式、间距和可访问性方面的考虑。Material 团队投入了大量努力，以确保你的代码在大多数情况下都能正确运行，并且能够为最大可能的用户群体提供高质量的
    UX。这可能包括视觉障碍者或以键盘为主的用户，他们必须依赖专门的软件或键盘功能，如标签，来导航你的应用。利用 Material 元素为这些用户提供关键的元数据，使他们能够导航你的应用。
- en: 'Material claims support for the following screen-reader software:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: Material 声称支持以下屏幕阅读软件：
- en: NVDA and JAWS with Internet Explorer/Firefox/Chrome on Windows
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上的 Internet Explorer/Firefox/Chrome 中使用 NVDA 和 JAWS
- en: VoiceOver with Safari on iOS and Safari/Chrome on macOS X
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 iOS 上的 Safari 和 macOS X 上的 Safari/Chrome 中使用 VoiceOver
- en: TalkBack with Chrome on Android
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 上的 Chrome 中使用 TalkBack
- en: Beyond Material, you may be required or have a desire to support specific accessibility
    standards, like the US-based Section 508 or the W3C-defined **Web Content Accessibility
    Guidelines** (**WCAG**). Claiming official support for such standards requires
    expensive certifications and qualified testers to ensure compliance.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Material 之外，你可能需要或希望支持特定的可访问性标准，如基于美国的第 508 条或 W3C 定义的 **Web 内容可访问性指南**（**WCAG**）。声称对这样的标准提供官方支持需要昂贵的认证和合格的测试人员来确保合规性。
- en: Consider pa11y, which is a command-line tool that automates accessibility testing.
    Since it is a CLI tool, you can easily integrate it with your CI pipeline. Being
    able to catch accessibility issues automatically and early in the development
    cycle dramatically decreases the cost of implementing accessibility features in
    your application.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑 pa11y，这是一个自动化可访问性测试的命令行工具。由于它是一个 CLI 工具，你可以轻松地将它集成到你的 CI 管道中。能够在开发周期的早期自动捕捉到可访问性问题，可以显著降低在应用中实现可访问性功能的成本。
- en: '**A11y** is short for **accessibility**, as there are 11 characters between
    *a* and *y* in the word accessibility. You may read more about why accessibility
    support matters at [https://a11yproject.com/](https://a11yproject.com/).'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '**A11y** 是 **accessibility** 的缩写，因为在单词 accessibility 中，字母 *a* 和 *y* 之间有 11
    个字符。你可以在 [https://a11yproject.com/](https://a11yproject.com/) 上了解更多关于为什么支持可访问性很重要。'
- en: You may learn more about pa11y at [https://pa11y.org/](https://pa11y.org/).
    Next, let's configure the pa11y CLI tool in our project.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://pa11y.org/](https://pa11y.org/) 上了解更多关于 pa11y 的信息。接下来，让我们在我们的项目中配置
    pa11y CLI 工具。
- en: Configuring automated pa11y testing
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置自动 pa11y 测试
- en: pa11y is an automated accessibility tool that you can execute from the command
    line to check your web app against various accessibility rulesets like Section
    508 or WCAG 2 AAA. You may configure pa11y to run on your project locally or your
    CI server. In both cases, you must be running the tests against a deployed version
    of your application.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: pa11y 是一个可以从命令行执行的自动化可访问性工具，你可以用它来检查你的 Web 应用是否符合各种可访问性规则集，如第 508 条或 WCAG 2
    AAA。你可以配置 pa11y 在你的项目本地或 CI 服务器上运行。在两种情况下，你必须对已部署的应用版本进行测试。
- en: 'Let''s start with configuring pa11y for a local run:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为本地运行配置 pa11y 开始：
- en: 'Install the pa11y and pa11y-ci packages with the following command:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装pa11y和pa11y-ci包：
- en: '[PRE64]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Add `npm` scripts to execute pa11y for local runs, checking for Section 508
    compliance issues:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`npm`脚本以执行pa11y进行本地运行，检查第508节合规性问题：
- en: '[PRE65]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Ensure that the app is running by executing `npm start`.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行`npm start`确保应用正在运行。
- en: 'In a new Terminal window, execute `npm run test:a11y`. The output should be
    as follows:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的终端窗口中，执行`npm run test:a11y`。输出应该如下所示：
- en: '[PRE66]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Note that we have one error. The error message indicates that under `app-current-weather`,
    the image we display inside `mat-card-content` is missing an `alt` attribute.
    Observe the following line of code that caused the error:'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们有一个错误。错误信息表明，在`app-current-weather`下，我们在`mat-card-content`内部显示的图片缺少一个`alt`属性。观察以下导致错误的代码行：
- en: '[PRE67]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The preceding code refers to the image that we grab from the OpenWeatherMap
    API. A visually impaired user, relying on a screen reader, would not be able to
    determine what the image is for without an `alt` attribute present. Since this
    is a dynamic image, a static `alt` attribute like the **Current weather icon**
    would be a disservice to our user. However, it would be appropriate to bind the
    current weather description value as the attribute. We can fix the accessibility
    issue as shown:'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码指的是我们从OpenWeatherMap API获取的图片。一个视觉障碍用户，依赖屏幕阅读器，如果没有`alt`属性，将无法确定图片的用途。由于这是一个动态图片，一个静态的`alt`属性，如**当前天气图标**，将不利于我们的用户。然而，将当前天气描述值绑定为属性是合适的。我们可以像下面这样修复可访问性问题：
- en: '[PRE68]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Re-run pa11y to confirm that the issue has been fixed.
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行pa11y以确认问题已修复。
- en: Now users relying on screen readers quickly figure out that the image on the
    page reflects the current weather. In this case, we already have the description
    on our page. This is a very important issue to fix because it is crucial to avoid
    having mystery elements on our page that an entire class of users is unable to
    decipher.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，依赖屏幕阅读器的用户可以快速了解页面上的图片反映了当前天气。在这种情况下，我们已经在页面上有了描述。这是一个非常重要的问题，需要修复，因为避免在我们的页面上出现整个用户群体都无法解读的神秘元素至关重要。
- en: Now let's configure pa11y for our CI pipeline.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的CI管道配置pa11y。
- en: 'Create a `.pa11yci` configuration file in the root of your project:'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录下创建一个`.pa11yci`配置文件：
- en: '[PRE69]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Add `npm` scripts to execute pa11y for local runs, checking for Section 508
    compliance issues:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`npm`脚本以执行pa11y进行本地运行，检查第508节合规性问题：
- en: '[PRE70]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Now we can add the command `npm run test:a11y:ci` to `.circleci/config.yml`.
    However, as you may notice, we would be running the test against the already deployed
    version of our app. To overcome this challenge, you must create an alternative
    `now:publish` command that will deploy our branch to a different URL, update `.pa11yci`
    to check against the new URL, and perform a deployment in your pipeline. Since
    all actions involved here are CLI commands, you may execute them sequentially.
    I leave this as an exercise for the user to complete.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将命令`npm run test:a11y:ci`添加到`.circleci/config.yml`中。然而，如您所注意到的，我们将对已经部署的应用版本进行测试。为了克服这个挑战，您必须创建一个替代的`now:publish`命令，将我们的分支部署到不同的URL，更新`.pa11yci`以检查新的URL，并在您的管道中执行部署。由于这里涉及的所有操作都是CLI命令，您可以按顺序执行它们。我将这个作为练习留给用户来完成。
- en: More advanced uses for CircleCI are covered in *Chapter 9*, *DevOps Using Docker*.
    Next, we are going to go over how you can build an interactive prototype to discover UI/UX
    issues early in development to reduce your development costs.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI的更多高级用法在*第9章*，*使用Docker的DevOps*中有所介绍。接下来，我们将讲解如何构建一个交互式原型，以便在开发早期发现UI/UX问题，从而降低开发成本。
- en: Building an interactive prototype
  id: totrans-503
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建交互式原型
- en: Appearances do matter. Whether you're working in a development team or as a
    freelancer, your colleagues, bosses, or clients will always take a well-put-together
    presentation more seriously. In *Chapter 3*, *Creating a Basic Angular App*, I
    mentioned the time and information management challenges of being a full-stack
    developer. We must pick a tool that can achieve the best results with the least
    amount of work. This usually means going down the paid-tool route, but UI/UX design
    tools are rarely free or cheap.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 外观很重要。无论您是在开发团队中工作还是作为自由职业者，您的同事、老板或客户都会更加重视一个精心准备好的演示。在*第3章*，*创建基本的Angular应用*中，我提到了全栈开发者面临的时间和信息管理挑战。我们必须选择一个可以以最少的劳动量实现最佳结果的工具。这通常意味着走付费工具的道路，但UI/UX设计工具很少是免费或便宜的。
- en: A prototyping tool will help you create a better, more professional-looking,
    mock-up of the app. Whatever tool you choose should also support the UI framework
    you choose to use, in this case, Material.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 一个原型工具将帮助你创建一个更好、更专业的应用原型。无论你选择什么工具，它也应该支持你选择的UI框架，在这种情况下，是Material。
- en: If a picture is worth a thousand words, an interactive prototype of your app
    is worth a thousand lines of code. An interactive mock-up of the app will help
    you vet ideas before you write a single line of code and save you a lot of code
    writing.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一张图片值一千个字，那么你应用的交互式原型就值一千行代码。一个交互式原型将帮助你在你写第一行代码之前检验想法，并节省你大量的代码编写。
- en: MockFlow WireframePro
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MockFlow WireframePro
- en: I've picked MockFlow WireframePro, available at [https://mockflow.com](https://mockflow.com),
    as an easy-to-use, capable, online tool that supports Material Design UI elements
    and allows you to create multiple pages, which can then be linked together to
    create the illusion of a working application.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了MockFlow WireframePro，可在[https://mockflow.com](https://mockflow.com)获取，作为一个易于使用、功能强大的在线工具，它支持Material
    Design UI元素，并允许你创建多个页面，然后可以将它们链接在一起，以创建一个工作应用的错觉。
- en: Most importantly, at the time of publishing, MockFlow allows one free project
    forever with the full feature set and capabilities available. This will give you
    a chance to truly vet the usefulness of the tool without artificial limits or
    a trial period that always seems to go by much quicker than you expect.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，在发布时，MockFlow允许永久免费使用一个完整功能集和能力的项目。这将给你一个真正检验工具有用性的机会，而不受人工限制或总是比你预期的更快过去的试用期。
- en: Balsamiq (available at [https://balsamiq.com](https://balsamiq.com)) is a better-known
    wireframing tool; however, it doesn't offer any free usage. If you are looking
    for a tool without a monthly cost, I would highly recommend Balsamiq's desktop
    application Mockups, which has a one-time purchase cost.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: Balsamiq（可在[https://balsamiq.com](https://balsamiq.com)获取）是一个更知名的线框工具；然而，它不提供任何免费使用。如果你在寻找一个没有月费的工具，我强烈推荐Balsamiq的桌面应用程序Mockups，它有一个一次性购买成本。
- en: Building a mock-up
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建原型
- en: We start by adding a new task to create an interactive prototype and at the
    end of the task, I'll attach all artifacts to this task so that they're stored
    on GitHub and are accessible to all team members and can also be linked from the
    wiki page for persistent documentation.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先添加一个新任务来创建一个交互式原型，并在任务结束时，我将把所有工件附加到这个任务上，以便它们存储在GitHub上，所有团队成员都可以访问，并且也可以从维基页面上链接，以实现持久的文档。
- en: 'Let''s pull this new task to the **In Progress** column and take a look at
    the status of our Kanban board from Waffle.io:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这项新任务拖到**进行中**列，并查看我们从Waffle.io的看板状态：
- en: '![](img/B14094_05_28.png)'
  id: totrans-514
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_28.png)'
- en: 'Figure 5.28: Current Kanban board status'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.28：当前看板板状态
- en: 'WireframePro is pretty intuitive as a drag and drop design interface, so I
    won''t go into the details of how the tool works, but I will highlight some tips:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: WireframePro作为一个拖放式设计界面非常直观，所以我不将深入探讨工具的工作原理，但我将突出一些技巧：
- en: Create your project
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你的项目
- en: Select a component pack, either **Hand Drawn UI** or **Material Design**
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个组件包，无论是**手绘UI**还是**Material Design**
- en: 'Add each screen as a new page, as shown in the following screenshot:'
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下截图所示，将每个屏幕作为新页面添加：
- en: '![](img/B14094_05_29.png)'
  id: totrans-520
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_29.png)'
- en: 'Figure 5.29: MockFlow.com WireFrame Pro'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.29：MockFlow.com WireFrame Pro
- en: I would recommend sticking to the hand-drawn UI look and feel, because it sets
    the right expectations for your audience. If you present a very high-quality mock-up
    on your first meeting with a client, your first demo will be an understatement.
    You will, at best, merely meet expectations and, at worst, underwhelm your audience.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议坚持使用手绘UI的外观和感觉，因为这为你的观众设定了正确的期望。如果你在与客户的第一次会面中展示一个非常高质量的样稿，你的第一次演示将会是保守的。你最多只能满足期望，最坏的情况是令观众感到失望。
- en: Home screen
  id: totrans-523
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主屏幕
- en: 'Here''s the new mock-up of the home screen that we just created:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 这是刚刚创建的主屏幕的新原型：
- en: '![](img/B14094_05_30.png)'
  id: totrans-525
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_30.png)'
- en: 'Figure 5.30: LocalCast Weather home screen wireframe'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.30：LocalCast天气主屏幕线框
- en: You'll note some differences, such as the app toolbar being conflated with the
    browser bar and the intentional vagueness of the repeating elements. I have made
    these choices to reduce the amount of design time I would need to spend on each
    screen. I simply used horizontal and vertical line objects to create the grid.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到一些差异，例如应用工具栏与浏览器栏合并，以及重复元素的故意模糊。我做出了这些选择，以减少我需要在每个屏幕上花费的设计时间。我只是简单地使用了水平和垂直线对象来创建网格。
- en: Search results
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索结果
- en: The search screen similarly remains intentionally vague to avoid having to maintain
    any kind of detailed information. Surprisingly, your audience is far more likely
    to focus on what your test data is rather than focusing on the design elements.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索屏幕同样故意保持模糊，以避免维护任何详细的信息。令人惊讶的是，你的观众更有可能关注你的测试数据，而不是关注设计元素。
- en: 'By being vague, we intentionally keep the audience''s attention on what matters.
    Here''s the search screen mock-up:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 通过模糊处理，我们故意将观众的注意力集中在重要的事情上。以下是搜索屏幕的原型图：
- en: '![](img/B14094_05_31.png)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_31.png)'
- en: 'Figure 5.31: LocalCast Weather search screen wireframe'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.31：LocalCast天气搜索屏幕线框图
- en: Settings pane
  id: totrans-533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置面板
- en: The **Settings** pane is a separate screen with the elements from the home screen
    copied over and with 85% opacity applied to create a model-like experience. The
    **Settings** pane itself is just a rectangle with a black border and a solid white
    background.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置**面板是一个独立的屏幕，它将主页面的元素复制过来，并应用了85%的不透明度以创建类似模型的体验。**设置**面板本身只是一个带有黑色边框和纯白色背景的矩形。'
- en: 'Take a look at the following mock-up:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的原型图：
- en: '![](img/B14094_05_32.png)'
  id: totrans-536
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_32.png)'
- en: 'Figure 5.32: LocalCast Weather settings wireframe'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.32：LocalCast天气设置线框图
- en: Adding interactivity
  id: totrans-538
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加交互性
- en: Being able to click around a mock-up and get a feel for the navigational workflow
    is an indispensable tool to get early user feedback. This will save you and your
    clients a lot of frustration, time, and money.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 能够点击原型并了解导航工作流程是一种不可或缺的工具，可以让你在早期获得用户反馈。这将为你和你的客户节省大量的挫败感、时间和金钱。
- en: 'To link elements together, do as follows:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 要将元素链接在一起，请按照以下步骤操作：
- en: Select a clickable element such as the *gear* icon on the home screen
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个可点击的元素，例如主页面的*齿轮*图标
- en: Under the **Link** subheading, click on **Select Page**
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**链接**子标题下，点击**选择页面**
- en: On the pop-over window, select **Settings**
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中，选择**设置**
- en: 'Click on **Create Link**, as shown in this screenshot:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建链接**，如图所示：
- en: '![](img/B14094_05_33.png)'
  id: totrans-545
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_05_33.png)'
- en: 'Figure 5.33: Adding a link in Wireframe Pro'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.33：在Wireframe Pro中添加链接
- en: Now, when you click on the *gear* icon, the tool will display the **Settings**
    page, which will create the effect of the sidebar actually being displayed on
    the same page. To go back to the home screen, you can link the *gear* icon and
    the section outside of the sidebar back to that page so that the user can navigate
    back and forth.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你点击*齿轮*图标时，工具将显示**设置**页面，这将创建侧边栏实际上在同一页面上显示的效果。要返回主页，你可以将*齿轮*图标和侧边栏外的部分链接回该页面，以便用户可以来回导航。
- en: Exporting the functional prototype
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导出功能原型
- en: 'Once your prototype is completed, you can export it as various formats:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的原型完成，你可以将其导出为各种格式：
- en: Under the **Project** menu, select the **Export Wireframe** button, as shown:![](img/B14094_05_34.png)
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**菜单下，选择**导出线框**按钮，如图所示![图片](img/B14094_05_34.png)
- en: 'Figure 5.34: Wireframe Pro''s Export Wireframe menu option'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.34：Wireframe Pro的导出线框菜单选项
- en: Now select your file format, as follows:![](img/B14094_05_35.png)
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择你的文件格式，如下所示![图片](img/B14094_05_35.png)
- en: 'Figure 5.35: File formats in Wireframe Pro'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.35：Wireframe Pro中的文件格式
- en: I prefer the HTML format for flexibility; however, your workflow and needs will
    differ.
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我更喜欢HTML格式，因为它具有灵活性；然而，你的工作流程和需求可能会有所不同。
- en: If you selected HTML, you will get to download a ZIP bundle of all the assets.
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你选择了HTML，你将下载一个包含所有资产的ZIP压缩包。
- en: Unzip the bundle and navigate to it using your browser; you should get an interactive
    version of your wireframe, as illustrated:![](img/B14094_05_36.png)
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压包并使用浏览器导航到它；你应该会得到一个交互式的线框图版本，如图所示![图片](img/B14094_05_36.png)
- en: 'Figure 5.36: Interactive wireframe in Wireframe Pro'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.36：Wireframe Pro中的交互式线框图
- en: The interactive elements are highlighted in yellow (light gray in print) and
    pointed out by the fat arrows in the preceding screenshot. You can enable or disable
    this behavior with the **Reveal Links** option in the bottom-left corner of the
    screen.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 交互元素在截图中被突出显示为黄色（打印为浅灰色），并由前一个截图中的粗箭头指出。你可以通过屏幕左下角的 **Reveal Links** 选项启用或禁用此行为。
- en: Now add all assets to comment on the GitHub issue, including the ZIP bundle,
    and we are done.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将所有资产添加到 GitHub 问题的评论中，包括 ZIP 压缩包，我们就完成了。
- en: You can also publish your prototype's HTML project using Vercel Now, as discussed
    in *Chapter 4*, *Automated Testing, CI, and Release to Production*.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 *第 4 章* 中讨论的 Vercel Now 发布你的原型 HTML 项目。
- en: Summary
  id: totrans-561
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned what Angular Material is, how to use the Angular
    Flex Layout engine, the impact of UI libraries on performance, and how to apply
    specific Angular Material components to your application. You became aware of
    pitfalls of over-optimized UI design with individual CSS tweaks and how to add
    a custom theme to your application.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Angular Material 是什么，如何使用 Angular Flex Layout 引擎，UI 库对性能的影响，以及如何将特定的
    Angular Material 组件应用到你的应用程序中。你意识到了过度优化的 UI 设计中 CSS 微调的陷阱，以及如何为你的应用程序添加自定义主题。
- en: We also went over how you can improve the accessibility of your application
    and build an interactive prototype to vet your designs before implementing them.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了如何提高你应用程序的可访问性，并在实现之前验证你的设计。
- en: In the next chapter, we will update the weather app to respond to user input
    with reactive forms and keep our components decoupled, while also enabling data
    exchange between them using `BehaviorSubject`. After the next chapter, we will
    be done with the weather app and shift our focus to building larger line-of-business
    applications.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更新天气应用程序以响应用户输入的响应式表单，并保持我们的组件解耦，同时使用 `BehaviorSubject` 在它们之间启用数据交换。在下一章之后，我们将完成天气应用程序，并将我们的重点转移到构建更大的业务线应用程序。
- en: See *Appendix C*, *Keeping Angular and Tools Evergreen*, for information on
    how you can upgrade Angular Material. You can find this appendix online from [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    or at [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen).
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 *附录 C*，*保持 Angular 和工具常青*，了解如何升级 Angular Material。你可以从 [https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_C_Keeping_Angular_and_Tools_Evergreen.)
    或 [https://expertlysimple.io/stay-evergreen](https://expertlysimple.io/stay-evergreen)
    在线找到此附录。
- en: Further reading
  id: totrans-566
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Insanely Simple: The Obsession That Drives Apple''s Success, Ken Segall*,
    2013'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《疯狂简单：推动苹果成功的执着，肯·塞格尔》，2013*'
- en: '*Material Design, Google*, 2020, at [https://material.io](https://material.io)'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Material Design，谷歌》，2020，位于 [https://material.io](https://material.io)*'
- en: '*Pa11y, Team Pa11y*, 2020, at [https://pa11y.org](https://pa11y.org)'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pa11y，Team Pa11y*，2020，位于 [https://pa11y.org](https://pa11y.org)'
- en: Exercises
  id: totrans-570
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Implement pa11y in your CI pipeline by implementing an alternative Now deployment
    so that you can test against the changes in your branch.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现替代的 Now 部署在你的 CI 流程中实施 pa11y，以便你可以测试你分支中的更改。
- en: Questions
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Answer the following questions as best as you can to ensure that you've understood
    the key concepts from this chapter without Googling. Do you need help answering
    the questions? See *Appendix D*, *Self-Assessment Answers* online at [https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf)
    or visit [https://expertlysimple.io/angular-self-assessment](https://expertlysimple.io/angular-self-assessment).
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能好地回答以下问题，以确保你在没有使用 Google 的情况下理解了本章的关键概念。你需要帮助回答这些问题吗？请参阅 *附录 D*，*自我评估答案*，在线位于
    [https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf](https://static.packt-cdn.com/downloads/9781838648800_Appendix_D_Self-Assessment_Answers.pdf)
    或访问 [https://expertlysimple.io/angular-self-assessment](https://expertlysimple.io/angular-self-assessment)。
- en: What are the benefits of using Angular Material?
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Angular Material 的好处是什么？
- en: Which underlying CSS technology does Angular Flex Layout rely on?
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Angular Flex Layout 依赖于哪种底层 CSS 技术？
- en: Why is it important to test for accessibility?
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么测试可访问性很重要？
- en: Why should you build an interactive prototype?
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么你应该构建交互式原型？
