- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The State of Vue State Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve now seen how to build Vue.js applications and have begun to string together
    multiple different components into your first set of real applications. As the
    size of your application grows, so does the complexity. In this chapter, it’s
    time to take a look at how you can begin managing that complexity by integrating
    **state management**.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you’ll begin by taking a look at how problems with states arise, how state
    management can help address it, and what features Vue.js 3 has to help you deal
    with it directly. You’ll learn this while building a simple *profile card* application
    that uses multiple components between which the state needs to be synchronized.
    The next chapter will introduce a tool to further help with this, called **Pinia**.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the component architecture and the problem of the state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Holding the state in a common ancestor component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding simple state management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding when to use a local state or global state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical requirements for this chapter outside of the `npm` CLI
    you have previously used to scaffold applications with Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find this chapter’s source here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the component architecture and the problem of the state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have seen how to use a local state and `props` to hold
    the state and share it in a parent-child component hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will begin by showing how to leverage `state`, `props`, and `events`
    to share states between components that do not have a **parent-child** configuration.
    These types of components are called **siblings**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Child 1 and Child 2 are “sibling” components](img/Figure_9.01_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Child 1 and Child 2 are “sibling” components
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, we will be building a **profile card generator** app
    that demonstrates how the state flows down the component tree as props in an application,
    and how updates are propagated as backup using events, event buses, and store
    updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that we want to build a profile card generator, we can break the application
    down into three sections: a *header*, where we will have global controls and display
    the title of the page; a *profile form*, where we will capture data; and finally,
    a *profile display*, where we will display the profile card. In *Figure 9**.2*,
    you can see our root component (**App (root)**), as well as three sibling child
    components.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Representation of a profile card application component tree](img/Figure_9.02_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Representation of a profile card application component tree
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to think of our application as a component tree and how
    our application can be structured as a component tree. In the next section, we’ll
    demonstrate putting all of the shared states in the root component.
  prefs: []
  type: TYPE_NORMAL
- en: Holding the state in a common ancestor component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To only hold the state with the `state` component and `props`, and update it
    with `events`, we will store it in the nearest common ancestor component.
  prefs: []
  type: TYPE_NORMAL
- en: '`state` is only propagated through `props` and is only updated through `events`.
    In this case, all the `state` components will live in a shared ancestor of the
    components that require them. The `App` component, since it is the root component,
    is a good default for holding a shared state.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Common ancestor component holds state with props and event propagation](img/Figure_9.03_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Common ancestor component holds state with props and event propagation
  prefs: []
  type: TYPE_NORMAL
- en: To change `state`, a component needs to emit `events` up to the component holding
    our `state` (the shared ancestor). The shared ancestor needs to update `state`
    according to the data and type of `events`. This, in turn, causes a re-render,
    during which the ancestor component passes the updated `props` to the component
    reading `state`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Updating a sibling component when the ancestor holds state](img/Figure_9.04_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Updating a sibling component when the ancestor holds state
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example of this by working on a *profile card editor*. To build
    a header, we need to create an `AppHeader` component in the `AppHeader.vue` file,
    which will contain a template and an `h2` heading with TailwindCSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about using Tailwind CSS with Vue3 here: [https://tailwindcss.com/docs/guides/vite](https://tailwindcss.com/docs/guides/vite).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then import the header, register it, and render it in the `App.vue`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – AppHeader displayed in the profile card generator](img/Figure_9.05_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – AppHeader displayed in the profile card generator
  prefs: []
  type: TYPE_NORMAL
- en: 'We will similarly create an `AppProfileForm` file; the purpose of this component
    is to lay out the labels and form fields for editing the profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create an `AppProfileDisplay` file; this component handles displaying
    the profile so the user can preview their edits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Both of our containers (`AppProfileForm` and `AppProfileDisplay`) can now be
    imported and rendered in `App`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – App skeleton with AppHeader, AppProfileForm, and AppProfileDisplay](img/Figure_9.06_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – App skeleton with AppHeader, AppProfileForm, and AppProfileDisplay
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a form field, in this case, `name`, we will start by adding an input
    to `AppProfileForm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will display as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – AppProfileForm with a name field and label](img/Figure_9.07_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – AppProfileForm with a name field and label
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep track of the name input data, we will add a two-way binding to it using
    `v-model` and set a `name` property in the component’s `data` initializer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need a `submit` button that, upon being clicked, sends the form
    data to the parent by emitting a `submit` event with the form’s contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will display as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – AppProfileForm with a wired-up Submit button](img/Figure_9.08_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – AppProfileForm with a wired-up Submit button
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to store the form’s state in the `App` component. It is a good
    candidate for storing form state since it is a common ancestor to `AppProfileForm`
    and `AppProfileDisplay`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we will need a `formData` attribute returned from `reactive()`.
    We will also need a way to update `formData`. Hence, we will add an `update(formData)`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to bind `update()` to the `submit` event emitted by `AppProfileForm`.
    We will do this using the `@submit` shorthand and with the magic event object
    notation as `update($event)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the name inside of `AppProfileDisplay`, we will need to add `formData`
    as a prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to display the name using `formData.name`. We will add a
    `p-12` class to the container to improve the appearance of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, `App` needs to pass `formData` to `AppProfileDisplay` as a prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now able to update the name on the form. When you click on the **Submit**
    button, it will show the name in the profile card display as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – App storing state, passing as props to AppProfileDisplay](img/Figure_9.09_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – App storing state, passing as props to AppProfileDisplay
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to store a shared state in the `App` component and how
    to update it from `AppProfileForm` and display it in `AppProfileDisplay`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next topic, we will see how to add an additional field to the profile
    card generator.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.01 – adding an occupation field to the profile card generator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from the example of storing the `name` shared state, another field
    that would be interesting to capture in a profile card is the occupation of the
    individual. To this end, we will add an `occupation` field to `AppProfileForm`
    to capture this extra part of the state, and we’ll display it in `AppProfileDisplay`.
  prefs: []
  type: TYPE_NORMAL
- en: The complete code for this exercise can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Exercise9.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Exercise9.01)
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps in order to add the field:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first place to start is by adding the new `occupation` field to `src/components/AppProfileForm`.
    We’ll also take this opportunity to get rid of the `h-64` and `bg-red-200` classes
    from the `section` element (if they’re present), which will mean the form is displayed
    without a background and a set height:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – AppProfileForm with the new Occupation field](img/Figure_9.10_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – AppProfileForm with the new Occupation field
  prefs: []
  type: TYPE_NORMAL
- en: 'To track the value of `occupation` with a two-way data binding, we will add
    a new instance of the `ref()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now apply a two-way data binding from the `occupation` reactive data
    property to the `occupation` input using `v-model`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the `occupation` value to be transmitted when `submit` is clicked, we will
    need to add it to the `submitForm` method as a property of the `submit` event
    payload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final step of adding this field is to display it in the `AppProfileDisplay`
    component. We will add a paragraph with a couple of styling classes. We’ll also
    take this opportunity to remove the `h-64` and `bg-blue-200` classes from the
    container (if they are present):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our browser should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – AppProfileForm](img/Figure_9.11_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – AppProfileForm
  prefs: []
  type: TYPE_NORMAL
- en: As we have just seen, adding a new field using the common ancestor to manage
    the state is a case of passing the data up in an event and back down in the props
    to the reading component.
  prefs: []
  type: TYPE_NORMAL
- en: We will now see how we can reset the form and profile display with a **Clear**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.02 – adding a Clear button to the profile card generator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a new profile with our application, it is useful to be able to
    reset the profile. To this end, we will add a **Clear** button.
  prefs: []
  type: TYPE_NORMAL
- en: A `AppProfileDisplay`. The complete code can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Exercise9.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Exercise9.02)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s look at the steps to perform this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We want a `src/components/AppProfileForm.vue`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To clear the form, we need to reset the `name` and `occupation` fields. We
    can create a `clear` method that will do this (in `src/components/AppProfileForm.vue`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to bind the `clear` method to `click` events on the `Clear` button
    to reset the form (in `src/components/AppProfileForm.vue`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Thus, we can now enter data into the form and submit it as per the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – AppProfileForm with the Name and Occupation fields filled in](img/Figure_9.12_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – AppProfileForm with the Name and Occupation fields filled in
  prefs: []
  type: TYPE_NORMAL
- en: 'On clicking the `AppProfileDisplay` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – AppProfileForm and AppProfileDisplay with data filled in  and
    submitted with a Clear button](img/Figure_9.13_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.13 – AppProfileForm and AppProfileDisplay with data filled in and submitted
    with a Clear button
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, `AppProfileDisplay` still has stale data, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – AppProfileForm and AppProfileDisplay with only AppProfileForm
    cleared while AppProfileDisplay still has stale data](img/Figure_9.14_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.14 – AppProfileForm and AppProfileDisplay with only AppProfileForm
    cleared while AppProfileDisplay still has stale data
  prefs: []
  type: TYPE_NORMAL
- en: 'To also clear the contents of `AppProfileDisplay`, we will need to update `formData`
    in `App.vue` by emitting a `submit` event with an empty payload in `src/components/AppProfileForm.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we fill out the form and submit it, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – AppProfileForm and AppProfileDisplay with data filled out and
    submitted with a Clear button](img/Figure_9.15_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.15 – AppProfileForm and AppProfileDisplay with data filled out and
    submitted with a Clear button
  prefs: []
  type: TYPE_NORMAL
- en: 'We can click on `AppProfileDisplay` and `AppProfileForm` as per the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – AppProfileForm and AppProfileDisplay after data is cleared
    (using the Clear button)](img/Figure_9.16_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.16 – AppProfileForm and AppProfileDisplay after data is cleared (using
    the Clear button)
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen how to set up communication between sibling components through
    a common ancestor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is quite a bit of bookkeeping and menial work required to keep track of
    all the bits of the state that need to stay in sync across the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how Vue 3’s built-in support for reactive
    data means we can roll our own simple state management.
  prefs: []
  type: TYPE_NORMAL
- en: Adding simple state management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our simple application, we can replace a lot of the boilerplate code if
    we use the `reactive()` API to build a simple store:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by building a new file, `store.js`, that uses a `reactive` object
    for our profile values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This *very* simple object will be very powerful due to the use of Vue 3’s reactivity
    support. Any component making use of the values from here will be able to rely
    on knowing that when a value changes, it will instantly be reflected. Right away,
    we can see how this simplifies things as we switch to the store.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `AppProfileForm`, let’s import the store first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, update both fields to point to the store instead of local data. In the
    following code, the `v-model` value was changed and the **Submit** button is removed
    – it’s no longer necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can edit the script block to remove most of the previous logic. The
    `clear` method needs to be updated to change the store values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can make similar changes to `AppProfileDisplay`. First, import the
    store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, modify the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: We’ve now switched from a system of events being broadcasted from components
    to one of a simpler, shared state. Our code is simpler, which will make updates
    even easier.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 9.03 – moving the Clear button to the application header profile card
    generator and updating the Clear logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our profile card generator application, the **Clear** button clears the state
    in the whole application. Its presence inside the form makes the **Clear** button’s
    functionality unclear since it looks as though it might only affect the form.
  prefs: []
  type: TYPE_NORMAL
- en: To reflect the fact that the **Clear** button has a global functionality, we
    will move it into the header.
  prefs: []
  type: TYPE_NORMAL
- en: We will also update our store to handle the logic of clearing the state. Our
    simple state utility not only can define variables but also methods. Since the
    script is handling keeping the values, it makes sense for it to handle logic related
    to those values.
  prefs: []
  type: TYPE_NORMAL
- en: You can also find the complete code at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Exercise9.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Exercise9.03)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help us perform this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating a `button` component in `src/components/AppHeader.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our store, let''s add a new `clear` function in store.js. It is responsible
    for resetting both values back to their initial state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `AppHeader`, we need to import the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to bind the `Reset` button to call the store `clear` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final step is to delete the `Clear` button and `Submit` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The form looks as follows when it gets filled out and submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – Filled-out and submitted form](img/Figure_9.17_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.17 – Filled-out and submitted form
  prefs: []
  type: TYPE_NORMAL
- en: 'Resetting the form now clears the form fields as well as `AppProfileDisplay`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – Resetting the form and the display using the Reset button](img/Figure_9.18_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.18 – Resetting the form and the display using the Reset button
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now seen how Vue 3’s built-in reactivity support makes it simple to handle
    state management in your components.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 9.01 – adding Organization, Email, and Phone Number fields to a profile
    card generator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a profile generator, you look at a profile to find some information about
    the individual. A person’s organization, email, and phone number are often the
    most crucial pieces of information looked for on a profile card. This activity
    is about adding these details to a profile card generator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will add `Organization`, `Email`, and `Phone Number` fields
    in `AppProfileForm` and `AppProfileDisplay`:'
  prefs: []
  type: TYPE_NORMAL
- en: Begin by adding the `organization` input field and label to `AppProfileForm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add a new `email` input field and label to `AppProfileForm` for the `Email`
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can then add a new `phone` input field (of the `tel` type) and a label to
    `AppProfileForm` for the `Phone` `Number` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new fields look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – Application with new Email and Phone Number fields](img/Figure_9.19_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.19 – Application with new Email and Phone Number fields
  prefs: []
  type: TYPE_NORMAL
- en: We can then add the `organization`, `email`, and `phone` fields to the initial
    state in `src/store.js` so that the values get set and then update `clear` to
    reset the new values.
  prefs: []
  type: TYPE_NORMAL
- en: For `organization` to display, we add it after `occupation` in `src/components/AppProfileDisplay.vue`.
    We’ll prefix it with the `"at"` literal string and only show it when there is
    a value. The end result is a paragraph that includes the occupation and organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `email` to display, we need to render it in `src/components/AppProfileDisplay.vue`
    using a conditional paragraph (to hide the `Email` label when there is no email
    set).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For `phone` to display, we need to render it in `src/components/AppProfileDisplay.vue`
    using a conditional span (to hide the `Phone Number` label when there is no phone
    set).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The application should look as follows when the form is filled out and submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Application with Email and Phone Number fields](img/Figure_9.20_B18645.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.20 – Application with Email and Phone Number fields
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Activity9.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter09/Activity9.01)
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now taken your application from a more complex event-driven state management
    system to one using a shared state that is far simpler to work with an update.
    Now that you’ve seen how to work with the global state, it’s a good time to go
    over some thoughts on when it makes sense to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding when to use a local state or global state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen through the examples, the Vue.js ecosystem has solutions for
    managing shared and global states. What we will look at now is how to decide whether
    something belongs in a local state or global state.
  prefs: []
  type: TYPE_NORMAL
- en: A good rule of thumb is that *if a prop is passed through a depth of three components*,
    it is probably best to put that piece of state in a global state and access it
    that way – so for example, a value goes from a parent to a child, and then on
    to a grandchild. This could also apply to two siblings and a parent, with three
    components but less depth.
  prefs: []
  type: TYPE_NORMAL
- en: The second way to decide whether something is local or global is to ask the
    question *when the page reloads, does the user expect this information to persist?*
    Why does this matter? Well, a global state is a lot easier to save and persist
    than a local state. This is due to the nature of a global state *just being a
    JavaScript object* as opposed to a component state, which is more closely tied
    to the component tree and Vue.js. The browser supports powerful methods of persisting
    data on the client, from simpler web storage to the more complex IndexedDB. Either
    of these browser features could be used to store the state for a Vue application,
    restore them on load, and if used in a global state, then be applied to components
    across the app.
  prefs: []
  type: TYPE_NORMAL
- en: Another key idea to bear in mind is that it is very much possible to mix global
    states and local states in a component. Every component may use a mix of things
    that only apply to itself versus data that impacts the entire application.
  prefs: []
  type: TYPE_NORMAL
- en: As with most things, careful planning and thought into what data a component
    needs and what possibly needs to be shared can help with proper planning ahead
    of time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was an introduction to the state management landscape in Vue.js.
    Throughout this chapter, we have looked at different approaches to shared and
    global state management in a Vue.js application.
  prefs: []
  type: TYPE_NORMAL
- en: We began by looking at storing a global state in one shared ancestor. This allows
    data sharing between sibling components through props and events. While this works,
    it does require extra code to handle the architecture of passing around data.
  prefs: []
  type: TYPE_NORMAL
- en: You then used Vue’s built-in reactivity to create a simple, shared store. This
    resulted in a much simpler application, as much of the code from the previous
    version was able to be removed.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have had a look at what criteria can be used to decide whether a
    state should live in a local component state or a more global or shared state
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be a deep dive into writing large-scale Vue.js applications
    with the new recommended way of handling shared state, the Pinia library.
  prefs: []
  type: TYPE_NORMAL
