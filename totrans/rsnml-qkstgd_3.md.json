["```js\ngit clone https://github.com/PacktPublishing/ReasonML-Quick-Start-Guide.git\ncd ReasonML-Quick-Start-Guide\ncd Chapter03/start\nnpm install\n```", "```js\nlet component = ReasonReact.statelessComponent(\"App\");\n\nlet make = _children => {\n  ...component,\n  render: _self => <div> {ReasonReact.string(\"hello world\")} </div>,\n};\n```", "```js\nReactDOMRe.renderToElementWithId(<App />, \"root\");\n```", "```js\nlet component = ReasonReact.statelessComponent(\"App\");\n\nlet make = _children => {\n  ...component,\n  render: _self =>\n    <div onClick={_event => Js.log(\"clicked\")}>\n      {ReasonReact.string(\"hello world\")}\n    </div>,\n};\n```", "```js\nRandom.bool()\n```", "```js\nlet component = ReasonReact.statelessComponent(\"App\");\n\nlet make = _children => {\n  ...component,\n  render: _self =>\n    <div onClick={_event => 42}> {ReasonReact.string(\"hello world\")} </div>,\n};\n```", "```js\nError: This expression has type int but an expression was expected of type\n  unit\n```", "```js\n<div>\"hello world\"</div>\n```", "```js\n<div>ReasonReact.string(\"hello world\")</div>\n```", "```js\n<div> {ReasonReact.string(\"hello world\")} </div>\n```", "```js\nlet str = ReasonReact.string;\n<div> {str(\"hello world\")} </div>;\n```", "```js\nReasonReact.element(App.make([||]))\n```", "```js\nlet make = (~greeting, ~name, _children) => {\n  ...component,\n  render: _self => <div> {ReasonReact.string(greeting ++ \" \" ++ name)} </div>,\n};\n```", "```js\nWe've found a bug for you!\n\n1 │ ReactDOMRe.renderToElementWithId(<App />, \"root\");\n\nThis call is missing arguments of type:\n(~greeting: string),\n(~name: string)\n```", "```js\nlet make = (~greeting=\"hello\", ~name=?, _children) => {\n  ...component,\n  render: _self => {\n    let name =\n      switch (name) {\n      | None => \"\"\n      | Some(name) => name\n      };\n    <div> {ReasonReact.string(greeting ++ \" \" ++ name)} </div>;\n  },\n};\n```", "```js\nReactDOMRe.renderToElementWithId(<App />, \"root\");\n/* hello */\n\nReactDOMRe.renderToElementWithId(\n  <App greeting=\"welcome,\" name=\"reason\" />,\n  \"root\",\n);\n/* welcome, reason */\n\n```", "```js\n/* App.re */\nlet component = ReasonReact.statelessComponent(\"App\");\n\nlet make = children => {\n  ...component,\n  render: _self => children(\"hello\"),\n};\n```", "```js\n/* Index.re */\nReactDOMRe.renderToElementWithId(\n  <App> ...{greeting => <div> {ReasonReact.string(greeting)} </div>} </App>,\n  \"root\",\n);\n```", "```js\nWe've found a bug for you!\n\n1 │ ReactDOMRe.renderToElementWithId(\n2 │ <App> {greeting => <div> {ReasonReact.string(greeting)} </div>} </App>,\n3 │ \"root\",\n4 │ );\n\nThis has type:\n  array('a)\nBut somewhere wanted:\n  string => ReasonReact.reactElement\n```", "```js\n/* App.re */\nlet component = ReasonReact.statelessComponent(\"App\");\n\nlet make = children => {\n  ...component,\n  render: _self => {\n    let (greeting, name) = children;\n    <div> {ReasonReact.string(greeting ++ \" \" ++ name)} </div>;\n  },\n};\n```", "```js\n/* Index.re */\nReactDOMRe.renderToElementWithId(<App> ...(\"hello\", \"tuple\") </App>, \"root\");\n```", "```js\nReactDOMRe.renderToElementWithId(<App> (\"hello\") </App>, \"root\");\n```", "```js\nWe've found a bug for you!\n\n1 │ ReactDOMRe.renderToElementWithId(<App> (\"hello\") </App>, \"root\");\n\nThis has type:\n  array('a)\nBut somewhere wanted:\n  (string, string)\n```", "```js\nlet make = _children => {\n  ...component,\n  didMount: _self => Js.log(\"mounted\"),\n  render: _self => <div> {ReasonReact.string(\"hello\")} </div>,\n};\n```", "```js\ndidMount: self => {\n  let intervalId = Js.Global.setInterval(() => Js.log(\"hello!\"), 1000);\n  self.onUnmount(() => Js.Global.clearInterval(intervalId));\n},\n```", "```js\ntype state = int;\n\ntype action =\n  | Increment\n  | Decrement;\n\nlet component = ReasonReact.reducerComponent(\"App\");\n\nlet make = _children => {\n  ...component,\n  initialState: () => 0,\n  reducer: (action, state) =>\n    switch (action) {\n    | Increment => ReasonReact.Update(state + 1)\n    | Decrement => ReasonReact.Update(state - 1)\n    },\n  render: self =>\n    <>\n      <button onClick={_event => self.send(Decrement)}>\n        {ReasonReact.string(\"-\")}\n      </button>\n      <span> {ReasonReact.string(string_of_int(self.state))} </span>\n      <button onClick={_event => self.send(Increment)}>\n        {ReasonReact.string(\"+\")}\n      </button>\n    </>,\n};\n```", "```js\ntype state = int;\n\ntype action =\n  | Increment\n  | Decrement;\n```", "```js\n<button onClick={_event => self.send(Increment)}>\n  {ReasonReact.string(\"+\")}\n</button>\n```", "```js\ninitialState: () => 0,\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | Increment => ReasonReact.Update(state + 1)\n  | Decrement => ReasonReact.Update(state - 1)\n  },\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | Increment =>\n    ReasonReact.UpdateWithSideEffects(\n      state + 1,\n      (_self => Js.log(\"incremented\")),\n    )\n  | Decrement => ReasonReact.Update(state - 1)\n  },\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | Increment =>\n    ReasonReact.UpdateWithSideEffects(\n      state + 1,\n      (\n        self =>\n          Js.Global.setTimeout(() => self.send(Decrement), 1000) |> ignore\n      ),\n    )\n  | Decrement => ReasonReact.Update(state - 1)\n  },\n```", "```js\ntype state = {\n  count: int,\n  showMessage: bool\n};\n```", "```js\ntype action =\n  | UpdateCount(int)\n  | ToggleMessage;\n```", "```js\nWe've found a bug for you!\n24 | render: self =>\n25 | <>\n26 | <button onClick={_event => self.send(Decrement)}>\n27 | {ReasonReact.string(\"-\")}\n28 | </button>\nThe variant constructor Decrement can't be found.\n- If it's defined in another module or file, bring it into scope by:\n- Annotating it with said module name: let food = MyModule.Apple\n- Or specifying its type: let food: MyModule.fruit = Apple\n- Constructors and modules are both capitalized. Did you want the latter?\nThen instead of let foo = Bar, try module Foo = Bar.\n```", "```js\nrender: self =>\n  <>\n    <button onClick={_event => self.send(UpdateCount(-1))}>\n      {ReasonReact.string(\"-\")}\n    </button>\n    <span> {ReasonReact.string(string_of_int(self.state))} </span>\n    <button onClick={_event => self.send(UpdateCount(1))}>\n      {ReasonReact.string(\"+\")}\n    </button>\n  </>,\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | UpdateCount(delta) =>\n    let count = state.count + delta;\n    ReasonReact.UpdateWithSideEffects(\n      {...state, count},\n      (\n        self =>\n          if (count == 10) {\n            self.send(ToggleMessage);\n          }\n      ),\n    );\n  | ToggleMessage =>\n    ReasonReact.Update({...state, showMessage: !state.showMessage})\n  },\n```", "```js\n| UpdateCount(delta) =>\n  let count = state.count + delta;\n  ReasonReact.Update(\n    if (count == 10) {\n      {count, showMessage: true};\n    } else {\n      {...state, count};\n    },\n  );\n```", "```js\nWe've found a bug for you!\n\n16 | switch (action) {\n17 | | UpdateCount(delta) =>\n18 | let count = state.count + delta;\n19 | ReasonReact.UpdateWithSideEffects(\n20 | {...state, count},\n\nThis has type:\n  int\nBut somewhere wanted:\n  state\n```", "```js\ninitialState: () => {count: 0, showMessage: false},\n```", "```js\nrender: self =>\n  <>\n    <button onClick={_event => self.send(UpdateCount(-1))}>\n      {ReasonReact.string(\"-\")}\n    </button>\n    <span> {ReasonReact.string(string_of_int(self.state.count))} </span>\n    <button onClick={_event => self.send(UpdateCount(1))}>\n      {ReasonReact.string(\"+\")}\n    </button>\n    {\n      if (self.state.showMessage) {\n        <>\n          <p>\n            {ReasonReact.string(\"Congratulations! You've reached ten!\")}\n          </p>\n          <button onClick={_event => self.send(ToggleMessage)}>\n            {ReasonReact.string(\"close\")}\n          </button>\n        </>;\n      } else {\n        ReasonReact.null;\n      }\n    }\n  </>,\n```", "```js\ntype state = {\n  count: int,\n  showMessage: bool,\n  userHasSeenMessage: ref(bool)\n};\n```", "```js\ntype ref('a) = {\n  mutable contents: 'a\n};\n\nlet foo = {contents: 5};\nJs.log(foo.contents); /* 5 */\nfoo.contents = 6;\nJs.log(foo.contents); /* 6 */\n```", "```js\ntype ref('a) = {contents: 'a};\n\nlet foo = {contents: 5};\nJs.log(foo.contents); /* 5 */\nfoo.contents = 6;\nJs.log(foo.contents); /* 6 */\n```", "```js\nWe've found a bug for you!\n\nThe record field contents is not mutable\n```", "```js\ntype foo = ref(int);\n\nlet foo = ref(5);\nJs.log(foo^); /* 5 */\nfoo := 6;\nJs.log(foo^); /* 6 */\n```", "```js\ninitialState: () => {\n  count: 0,\n  showMessage: false,\n  userHasSeenMessage: ref(false),\n},\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | UpdateCount(delta) =>\n    let count = state.count + delta;\n    if (! state.userHasSeenMessage^ && count == 10) {\n      state.userHasSeenMessage := true;\n      ReasonReact.UpdateWithSideEffects(\n        {...state, count},\n        (self => self.send(ToggleMessage)),\n      );\n    } else {\n      ReasonReact.Update({...state, count});\n    };\n  | ToggleMessage =>\n    ReasonReact.Update({...state, showMessage: !state.showMessage})\n  },\n```", "```js\ngit clone https://github.com/PacktPublishing/ReasonML-Quick-Start-Guide.git\ncd ReasonML-Quick-Start-Guide\ncd Chapter03/app-start\nnpm install\n```", "```js\n├── bsconfig.json\n├── package-lock.json\n├── package.json\n├── src\n│   ├── App.re\n│   ├── App.scss\n│   ├── Index.re\n│   ├── Index.scss\n│   ├── img\n│   │   └── icon\n│   │   ├── arrow.svg\n│   │   ├── chevron.svg\n│   │   └── hamburger.svg\n│   └── index.html\n└── webpack.config.js\n```", "```js\ntype state = {isOpen: bool};\n```", "```js\ntype action =\n  | ToggleMenu(bool);\n```", "```js\nreducer: (action, _state) =>\n  switch (action) {\n  | ToggleMenu(isOpen) => ReasonReact.Update({isOpen: isOpen})\n  },\n```", "```js\n<div\n  className={\"App\" ++ (self.state.isOpen ? \" overlay\" : \"\")}\n  onClick={\n    _event =>\n      if (self.state.isOpen) {\n        self.send(ToggleMenu(false));\n      }\n  }>\n```", "```js\n.App {\n  min-height: 100vh;\n\n  &:after {\n    content: \"\";\n    transition: opacity 450ms cubic-bezier(0.23, 1, 0.32, 1),\n      transform 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms;\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.33);\n    transform: translateX(-100%);\n    opacity: 0;\n    z-index: 1;\n  }\n\n  &.overlay {\n    &:after {\n      transition: opacity 450ms cubic-bezier(0.23, 1, 0.32, 1);\n      transform: translateX(0%);\n      opacity: 1;\n    }\n  }\n  ...\n}\n```", "```js\n[@bs.val] external require: string => string = \"\";\n\nrequire(\"../../../src/App.scss\");\n```", "```js\nrequire(\"../../../src/App.scss\");\n```", "```js\nonClick=(event => ReactEvent.Mouse.stopPropagation(event))\n```", "```js\n/* App.re */\nReactEvent.Touch.changedTouches(event)##item(0)##clientX\n```", "```js\n/* App.bs.js */\nevent.changedTouches.item(0).clientX\n```", "```js\ntype action =\n  | ToggleMenu(bool)\n  | TouchStart(float)\n  | TouchMove(float)\n  | TouchEnd;\n```", "```js\nrender: self =>\n  <div\n    className={\"App\" ++ (self.state.isOpen ? \" overlay\" : \"\")}\n    onClick={\n      _event =>\n        if (self.state.isOpen) {\n          self.send(ToggleMenu(false));\n        }\n    }\n    onTouchStart={\n      event =>\n        self.send(\n          TouchStart(\n            ReactEvent.Touch.changedTouches(event)##item(0)##clientX,\n          ),\n        )\n    }\n    onTouchMove={\n      event =>\n        self.send(\n          TouchMove(\n            ReactEvent.Touch.changedTouches(event)##item(0)##clientX,\n          ),\n        )\n    }\n    onTouchEnd={_event => self.send(TouchEnd)}>\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | ToggleMenu(isOpen) => ReasonReact.Update({isOpen: isOpen})\n  | TouchStart(clientX) =>\n    Js.log2(\"Start\", clientX);\n    ReasonReact.NoUpdate;\n  | TouchMove(clientX) =>\n    Js.log2(\"Move\", clientX);\n    ReasonReact.NoUpdate;\n  | TouchEnd =>\n    Js.log(\"End\");\n    ReasonReact.NoUpdate;\n  },\n```", "```js\ntype touches = {\n  first: option(float),\n  last: option(float),\n};\n\ntype state = {\n  isOpen: bool,\n  touches,\n};\n```", "```js\ninitialState: () => {\n  isOpen: false,\n  touches: {\n    first: None,\n    last: None,\n  },\n},\n```", "```js\nreducer: (action, state) =>\n  switch (action) {\n  | ToggleMenu(isOpen) => ReasonReact.Update({...state, isOpen})\n  | TouchStart(clientX) =>\n    if (state.isOpen) {\n      ReasonReact.Update({\n        ...state,\n        touches: {\n          first: Some(clientX),\n          last: None,\n        },\n      });\n    } else {\n      ReasonReact.NoUpdate;\n    }\n  | TouchMove(clientX) =>\n    if (state.isOpen) {\n      ReasonReact.Update({\n        ...state,\n        touches: {\n          ...state.touches,\n          last: Some(clientX),\n        },\n      });\n    } else {\n      ReasonReact.NoUpdate;\n    }\n  | TouchEnd => ReasonReact.NoUpdate\n  },\n```", "```js\nstyle={ReactDOMRe.Style.make(~backgroundColor=\"yellow\", ())}\n```", "```js\nstyle={\n  switch (self.state.touches) {\n  | {first: Some(x), last: Some(x')} =>\n    ReactDOMRe.Style.make(\n      ~transform=\n        \"translateX(\"\n        ++ string_of_float(x' -. x > 0.0 ? 0.0 : x' -. x)\n        ++ \"0px)\",\n      ~transition=\"none\",\n      (),\n    )\n  | _ => ReactDOMRe.Style.make()\n  }\n}\n```", "```js\n| TouchEnd =>\n  if (state.isOpen) {\n    let x = Belt.Option.getWithDefault(state.touches.last, 0.0);\n    if (x < 300.0 /. 2.0) {\n      ReasonReact.UpdateWithSideEffects(\n        {\n          ...state,\n          touches: {\n            first: None,\n            last: None,\n          },\n        },\n        (self => self.send(ToggleMenu(false))),\n      );\n    } else {\n      ReasonReact.Update({\n        ...state,\n        touches: {\n          first: None,\n          last: None,\n        },\n      });\n    };\n  } else {\n    ReasonReact.NoUpdate;\n  }\n```", "```js\ntype state = {\n  isOpen: bool,\n  touches,\n  width: ref(float),\n};\n```", "```js\nref={\n  self.handle((ref, self) =>\n    self.state.width :=\n      (\n        switch (Js.Nullable.toOption(ref)) {\n        | None => 0.0\n        | Some(r) => ReactDOMRe.domElementToObj(r)##clientWidth\n        }\n      )\n  )\n}\n```", "```js\n[@bs.val] [@bs.scope \"performance\"] external now: unit => float = \"\";\n```", "```js\ntype touches = {\n  first: option((float, float)),\n  last: option((float, float)),\n};\n```", "```js\n| TouchEnd =>\n  if (state.isOpen) {\n    let (x, t) =\n      Belt.Option.getWithDefault(state.touches.first, (0.0, 0.0));\n    let (x', t') =\n      Belt.Option.getWithDefault(state.touches.last, (0.0, 0.0));\n    let velocity = (x' -. x) /. (t' -. t);\n    let state = {\n      ...state,\n      touches: {\n        first: None,\n        last: None,\n      },\n    };\n    if (velocity < (-0.3) || x' < state.width^ /. 2.0) {\n      ReasonReact.UpdateWithSideEffects(\n        state,\n        (self => self.send(ToggleMenu(false))),\n      );\n    } else {\n      ReasonReact.Update(state);\n    };\n  } else {\n    ReasonReact.NoUpdate;\n  }\n```", "```js\nstyle=(\n  switch (self.state.touches) {\n  | {first: Some((x, _)), last: Some((x', _))} =>\n    ReactDOMRe.Style.make(\n      ~transform=\n        \"translateX(\"\n        ++ string_of_float(x' -. x > 0.0 ? 0.0 : x' -. x)\n        ++ \"0px)\",\n      ~transition=\"none\",\n      (),\n    )\n  | _ => ReactDOMRe.Style.make()\n  }\n)\n```", "```js\ntype url = {\n  path: list(string),\n  hash: string,\n  search: string,\n};\n```", "```js\ntype route = {\n  href: string,\n  title: string,\n  component: ReasonReact.reactElement,\n};\n\nlet routes = [\n  {href: \"/\", title: \"Home\", component: <Home />},\n  {href: \"/page1\", title: \"Page1\", component: <Page1 />},\n  {href: \"/page2\", title: \"Page2\", component: <Page2 />},\n  {href: \"/page3\", title: \"Page3\", component: <Page3 />},\n];\n```", "```js\nReactDOMRe.renderToElementWithId(\n  <Router.WithRouter>\n    ...((~currentRoute) => <App currentRoute />)\n  </Router.WithRouter>,\n  \"root\",\n);\n```", "```js\nmodule WithRouter = {\n  type state = route;\n  type action =\n    | ChangeRoute(route);\n  let component = ReasonReact.reducerComponent(\"WithRouter\");\n  let make = children => {\n    ...component,\n    didMount: self => {\n      let watcherID =\n        ReasonReact.Router.watchUrl(url =>\n          self.send(ChangeRoute(urlToRoute(url)))\n        );\n      ();\n      self.onUnmount(() => ReasonReact.Router.unwatchUrl(watcherID));\n    },\n    initialState: () =>\n      urlToRoute(ReasonReact.Router.dangerouslyGetInitialUrl()),\n    reducer: (action, _state) =>\n      switch (action) {\n      | ChangeRoute(route) => ReasonReact.Update(route)\n      },\n    render: self => children(~currentRoute=self.state),\n  };\n};\n```", "```js\nwillReceiveProps: self => {...self.state, isOpen: false},\n```", "```js\nlet hrefToPath = href =>\n  Js.String.replaceByRe([%bs.re \"/(^\\\\/)|(\\\\/$)/\"], \"\", href)\n  |> Js.String.split(\"/\")\n  |> Belt.List.fromArray;\n```", "```js\nlet urlToRoute = (url: ReasonReact.Router.url) =>\n  switch (\n    Belt.List.getBy(routes, route => url.path == hrefToPath(route.href))\n  ) {\n  | None => Belt.List.headExn(routes)\n  | Some(route) => route\n  };\n```", "```js\nmodule Link = {\n  let component = ReasonReact.statelessComponent(\"Link\");\n  let make = (~href, ~className=\"\", children) => {\n    ...component,\n    render: self =>\n      <a\n        href\n        className\n        onClick=(\n          self.handle((event, _self) => {\n            ReactEvent.Mouse.preventDefault(event);\n            ReasonReact.Router.push(href);\n          })\n        )>\n        ...children\n      </a>,\n  };\n};\n```", "```js\nmodule NavLink = {\n  let component = ReasonReact.statelessComponent(\"NavLink\");\n  let make = (~href, children) => {\n   ...component,\n   render: _self =>\n    <WithRouter>\n      ...(\n          (~currentRoute) =>\n            <Link\n              href className=(currentRoute.href == href ? \"active\" : \"\")>\n              ...children\n            </Link>\n          )\n    </WithRouter>,\n  };\n};\n```", "```js\n<li>\n  <Router.NavLink href=\"/\">\n    (ReasonReact.string(\"Home\"))\n  </Router.NavLink>\n</li>\n```", "```js\n<h1> (ReasonReact.string(currentRoute.title)) </h1>\n```", "```js\n<main> currentRoute.component </main>\n```"]