["```js\n<form> \n  <div>\n    <input type=\"text\" name=\"username\" placeholder=\"Username\" /> \n  </div> \n  <div>\n    <input type=\"password\" name=\"password\" placeholder=\"Password\" /> \n  </div> \n  <button type=\"submit\">Login</button> \n</form> \n```", "```js\n    import { FormsModule } from '@angular/forms'; \n    ```", "```js\n    @Component({\n      selector: 'app-product-detail',\n      imports: [CommonModule, **FormsModule**],\n      templateUrl: './product-detail.component.html',\n      styleUrl: './product-detail.component.css'\n    }) \n    ```", "```js\n    <input placeholder=\"New price\" type=\"number\" name=\"price\" [(ngModel)]=\"product.price\" /> \n    ```", "```js\n    <button class=\"secondary\" type=\"submit\">Change</button> \n    ```", "```js\n    **<form (ngSubmit)=\"changePrice(product)\">**\n      <input placeholder=\"New price\" type=\"number\" name=\"price\" [(ngModel)]=\"product.price\" />\n      <button class=\"secondary\" type=\"submit\">Change</button>\n    **</form>** \n    ```", "```js\n    changePrice(product: Product) {\n      this.productService.updateProduct(\n        product.id,\n        product.price\n      ).subscribe(() => this.router.navigate(['/products']));\n    } \n    ```", "```js\n    price: number | undefined; \n    ```", "```js\n    changePrice(product: Product) {\n      this.productService.updateProduct(\n        product.id,\n        **this.price!**\n      ).subscribe(() => this.router.navigate(['/products']));\n    } \n    ```", "```js\n    <input placeholder=\"New price\" type=\"number\" name=\"price\" [(ngModel)]=\"**price**\" /> \n    ```", "```js\n    import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms'; \n    ```", "```js\n    @Component({\n      selector: 'app-product-create',\n      imports: [**ReactiveFormsModule**],\n      templateUrl: './product-create.component.html',\n      styleUrl: './product-create.component.css'\n    }) \n    ```", "```js\n    productForm = new FormGroup({\n      title: new FormControl('', { nonNullable: true }),\n      price: new FormControl<number | undefined>(undefined, { nonNullable: true }),\n      category: new FormControl('', { nonNullable: true })\n    }); \n    ```", "```js\n    **<form [formGroup]=\"productForm\">**\n      <div>\n        <label for=\"title\">Title</label>\n        <input id=\"title\" #title />\n      </div>\n      <div>\n        <label for=\"price\">Price</label>\n        <input id=\"price\" #price type=\"number\" />\n      </div>\n      <div>\n        <label for=\"category\">Category</label>\n        <select id=\"category\" #category>\n          <option>Select a category</option>\n          <option value=\"electronics\">Electronics</option>\n          <option value=\"jewelery\">Jewelery</option>\n          <option>Other</option>\n        </select>\n      </div>\n      <div>\n        <button (click)=\"createProduct(title.value, price.value, category.value)\">Create</button>\n      </div>\n    **</form>** \n    ```", "```js\n    <div>\n      <label for=\"title\">Title</label>\n      <input id=\"title\" **formControlName=\"title\"** />\n    </div>\n    <div>\n      <label for=\"price\">Price</label>\n      <input id=\"price\" **formControlName=\"price\"** type=\"number\" />\n    </div>\n    <div>\n      <label for=\"category\">Category</label>\n      <select id=\"category\" **formControlName=\"category\"**>\n        <option>Select a category</option>\n        <option value=\"electronics\">Electronics</option>\n        <option value=\"jewelery\">Jewelery</option>\n        <option>Other</option>\n      </select>\n    </div> \n    ```", "```js\n    createProduct() {\n      this.productsService.addProduct(this.productForm.value).subscribe(() => {\n        this.router.navigate(['/products']);\n      });\n    } \n    ```", "```js\ncreateProduct() {\n  this.productsService.addProduct({\n    **title: this.productForm.controls.title.value,**\n **price: this.productForm.controls.price.value,**\n **category: this.productForm.controls.category.value**\n  }).subscribe(() => {\n    this.router.navigate(['/products']);\n  });\n} \n```", "```js\n    <form [formGroup]=\"productForm\" **(ngSubmit)=\"createProduct()\"**>\n      <div>\n        <label for=\"title\">Title</label>\n        <input id=\"title\" formControlName=\"title\" />\n      </div>\n      <div>\n        <label for=\"price\">Price</label>\n        <input id=\"price\" formControlName=\"price\" type=\"number\" />\n      </div>\n      <div>\n        <label for=\"category\">Category</label>\n        <select id=\"category\" formControlName=\"category\">\n          <option>Select a category</option>\n          <option value=\"electronics\">Electronics</option>\n          <option value=\"jewelery\">Jewelery</option>\n          <option>Other</option>\n        </select>\n      </div>\n      <div>\n        <button **type=\"submit\"**>Create</button>\n      </div>\n    </form> \n    ```", "```js\n    label {\n      margin-bottom: 4px;\n      display: block;\n    } \n    ```", "```js\nproductForm = new FormGroup({\n  title: new FormControl('', { nonNullable: true }),\n  price: new FormControl<number | undefined>(undefined, { nonNullable: true }),\n  category: new FormControl('', { nonNullable: true }),\n  **extra: new FormGroup({**\n    **image: new FormControl(''),**\n    **description: new FormControl('')**\n  **})**\n}); \n```", "```js\n<form [formGroup]=\"productForm\" (ngSubmit)=\"createProduct()\">\n  <div>\n    <label for=\"title\">Title</label>\n    <input id=\"title\" formControlName=\"title\" />\n  </div>\n  <div>\n    <label for=\"price\">Price</label>\n    <input id=\"price\" formControlName=\"price\" type=\"number\" />\n  </div>\n  <div>\n    <label for=\"category\">Category</label>\n    <select id=\"category\" formControlName=\"category\">\n      <option>Select a category</option>\n      <option value=\"electronics\">Electronics</option>\n      <option value=\"jewelery\">Jewelery</option>\n      <option>Other</option>\n    </select>\n  </div>\n  <h2>Additional details</h2>\n  **<form formGroupName=\"extra\">**\n    **<div>**\n      **<label for=\"descr\">Description</label>**\n      **<input id=\"descr\" formControlName=\"description\" />**\n    **</div>**\n    **<div>**\n      **<label for=\"photo\">Photo URL</label>**\n      **<input id=\"photo\" formControlName=\"image\" />**\n    **</div>**\n  **</form>**\n  <div>\n    <button type=\"submit\">Create</button>\n  </div>\n</form> \n```", "```js\n    ng generate interface Cart \n    ```", "```js\n    export interface Cart {\n     **id: number;**\n      **products: { productId :number }[];**\n    } \n    ```", "```js\n    ng generate service cart \n    ```", "```js\n    import { Injectable, **inject** } from '@angular/core';\n    **import { HttpClient } from '@angular/common/http';**\n    **import { Observable, defer, map } from 'rxjs';**\n    **import { Cart } from './cart';**\n    **import { APP_SETTINGS } from './app.settings';** \n    ```", "```js\n    cart: Cart | undefined;\n    private cartUrl = inject(APP_SETTINGS).apiUrl + '/carts'; \n    ```", "```js\n    constructor(**private http: HttpClient**) { } \n    ```", "```js\n    addProduct(id: number): Observable<Cart> {\n      const cartProduct = { productId: id, quantity: 1 };\n\n      return defer(() =>\n        !this.cart\n        ? this.http.post<Cart>(this.cartUrl, { products: [cartProduct] })\n        : this.http.put<Cart>(`${this.cartUrl}/${this.cart.id}`, {\n          products: [\n            ...this.cart.products,\n            cartProduct\n          ]\n        })\n      ).pipe(map(cart => this.cart = cart));\n    } \n    ```", "```js\n    import { CartService } from '../cart.service'; \n    ```", "```js\n    constructor(\n      private productService: ProductsService,\n      public authService: AuthService,\n      private route: ActivatedRoute,\n      private router: Router,\n      **private cartService: CartService**\n    ) { } \n    ```", "```js\n    addToCart(**id: number**) {\n      **this.cartService.addProduct(id).subscribe();**\n    } \n    ```", "```js\n    <button (click)=\"addToCart(**product.id**)\">Add to cart</button> \n    ```", "```js\n    import { Component, **OnInit** } from '@angular/core';\n    **import {**\n      **FormArray,**\n      **FormControl,**\n      **FormGroup,**\n      **ReactiveFormsModule**\n    **} from '@angular/forms';**\n    **import { Product } from '../product';**\n    **import { CartService } from '../cart.service';**\n    **import { ProductsService } from '../products.service';** \n    ```", "```js\n    @Component({\n      selector: 'app-cart',\n      imports: [**ReactiveFormsModule**],\n      templateUrl: './cart.component.html',\n      styleUrl: './cart.component.css'\n    }) \n    ```", "```js\n    export class CartComponent **implements OnInit** \n    ```", "```js\n    cartForm = new FormGroup({\n      products: new FormArray<FormControl<number>>([])\n    });\n    products: Product[] = []; \n    ```", "```js\n    constructor(\n      private cartService: CartService,\n      private productsService: ProductsService\n    ) {} \n    ```", "```js\n    private getProducts() {\n      this.productsService.getProducts().subscribe(products => {\n        this.cartService.cart?.products.forEach(item => {\n          const product = products.find(p => p.id === item.productId);\n          if (product) {\n            this.products.push(product);\n          }\n        });\n      });\n    } \n    ```", "```js\n    private buildForm() {\n      this.products.forEach(() => {\n        this.cartForm.controls.products.push(\n          new FormControl(1, { nonNullable: true })\n        );\n      });\n    } \n    ```", "```js\n    ngOnInit(): void {\n      this.getProducts();\n      this.buildForm();\n    } \n    ```", "```js\n    <div [formGroup]=\"cartForm\">\n      <div formArrayName=\"products\">\n        @for(product of cartForm.controls.products.controls; track $index) {\n          <label>{{products[$index].title}}</label>\n          <input [formControlName]=\"$index\" type=\"number\" />\n        }\n      </div>\n    </div> \n    ```", "```js\n    :host {\n      width: 500px;\n    }\n    input {\n      width: 50px;\n    } \n    ```", "```js\n    import { inject } from '@angular/core';\n    import { CartService } from './cart.service'; \n    ```", "```js\n    const cartService = inject(CartService); \n    ```", "```js\n    **if (cartService.cart) {**\n      const confirmation = confirm(\n        'You have pending items in your cart. Do you want to continue?'\n      );\n      return confirmation;\n    **}**\n    **return true;** \n    ```", "```js\n    import { Component, **OnInit** } from '@angular/core';\n    import { FormControl, FormGroup, ReactiveFormsModule, **FormBuilder** } from '@angular/forms'; \n    ```", "```js\n    export class ProductCreateComponent **implements OnInit** \n    ```", "```js\n    constructor(\n      private productsService: ProductsService,\n      private router: Router,\n      **private builder: FormBuilder**\n    ) {} \n    ```", "```js\n    productForm: FormGroup<{\n      title: FormControl<string>,\n      price: FormControl<number | undefined>,\n      category: FormControl<string>\n    }> | undefined; \n    ```", "```js\n    private buildForm() {\n      this.productForm = this.builder.nonNullable.group({\n        title: [''],\n        price: this.builder.nonNullable.control<number | undefined>(undefined),\n        category: ['']\n      });\n    } \n    ```", "```js\n    ngOnInit(): void {\n      this.buildForm();\n    } \n    ```", "```js\n    createProduct() {\n      this.productsService.addProduct(this.**productForm!**.value).subscribe(() => {\n        this.router.navigate(['/products']);\n      });\n    } \n    ```", "```js\n    <form [formGroup]=\"**productForm!**\" (ngSubmit)=\"createProduct()\">\n      <div>\n        <label for=\"title\">Title</label>\n        <input id=\"title\" formControlName=\"title\" />\n      </div>\n      <div>\n        <label for=\"price\">Price</label>\n        <input id=\"price\" formControlName=\"price\" type=\"number\" />\n      </div>\n      <div>\n        <label for=\"category\">Category</label>\n        <select id=\"category\" formControlName=\"category\">\n          <option>Select a category</option>\n          <option value=\"electronics\">Electronics</option>\n          <option value=\"jewelery\">Jewelery</option>\n          <option>Other</option>\n        </select>\n      </div>\n      <div>\n        <button type=\"submit\">Create</button>\n      </div>\n    </form> \n    ```", "```js\ninput.ng-touched {\n  border: 3px solid lightblue;\n} \n```", "```js\n    input.valid, **input.ng-dirty.ng-valid** {\n      border: solid green;\n    } \n    ```", "```js\n    input.invalid, **input.ng-dirty.ng-invalid** {\n      border: solid red;\n    } \n    ```", "```js\n    <div>\n      <label for=\"title\">Title</label>\n      <input id=\"title\" formControlName=\"title\" **required** />\n    </div>\n    <div>\n      <label for=\"price\">Price</label>\n      <input id=\"price\" formControlName=\"price\" type=\"number\" **required** />\n    </div> \n    ```", "```js\n    <input\n      placeholder=\"New price\"\n      type=\"number\"\n      name=\"price\"\n      **#priceCtrl=\"ngModel\"**\n      [(ngModel)]=\"price\" /> \n    ```", "```js\n    <input\n      placeholder=\"New price\"\n      type=\"number\"\n      name=\"price\"\n      **required min=\"1\"** \n      #priceCtrl=\"ngModel\"\n      [(ngModel)]=\"price\" /> \n    ```", "```js\n    @if (priceCtrl.dirty && (priceCtrl.invalid || priceCtrl.hasError('min'))) {\n      <span class=\"help-text\">Please enter a valid price</span>\n    } \n    ```", "```js\n    <form (ngSubmit)=\"changePrice(product)\" **#priceForm=\"ngForm\"**>\n      <input\n        placeholder=\"New price\"\n        type=\"number\"\n        name=\"price\"\n        required min=\"1\"\n        #priceCtrl=\"ngModel\"\n        [(ngModel)]=\"price\" />\n      <button class=\"secondary\" type=\"submit\">Change</button>\n      @if (priceCtrl.dirty && (priceCtrl.invalid || priceCtrl.hasError('min'))) {\n        <span class=\"help-text\">Please enter a valid price</span>\n      }    \n    </form> \n    ```", "```js\n    <button\n      class=\"secondary\"\n      type=\"submit\"\n      **[disabled]=\"priceForm.invalid\">**\n      Change\n    </button> \n    ```", "```js\n    .help-text {\n      display: flex;\n      color: var(--hot-red);\n      font-size: 0.875rem;\n    }\n    button:disabled {\n      background-color: lightgrey;\n      cursor: not-allowed;\n    } \n    ```", "```js\n    import {\n      FormControl,\n      FormGroup,\n      ReactiveFormsModule,\n      **Validators**\n    } from '@angular/forms'; \n    ```", "```js\n    productForm = new FormGroup({\n      title: new FormControl('', {\n        nonNullable: true,\n        **validators: Validators.required**\n      }),\n      price: new FormControl<number | undefined>(undefined, {\n        nonNullable: true,\n        **validators: [Validators.required, Validators.min(1)]**\n      }),\n      category: new FormControl('', { nonNullable: true })\n    }); \n    ```", "```js\n    <button type=\"submit\" **[disabled]=\"productForm.invalid\"**>Create</button> \n    ```", "```js\n    <div>\n      <label for=\"title\">Title</label>\n      <input id=\"title\" formControlName=\"title\" required />\n      **@if (productForm.controls.title.touched && productForm.controls.title.invalid) {**\n        **<span class=\"help-text\">Title is required</span>**\n      **}**\n    </div>\n    <div>\n      <label for=\"price\">Price</label>\n      <input id=\"price\" formControlName=\"price\" type=\"number\" required />\n      **@if (productForm.controls.price.touched && productForm.controls.price.invalid) {**\n    **<span class=\"help-text\">Price is required</span>**\n    **}**\n    </div> \n    ```", "```js\n    <div>\n      <label for=\"price\">Price</label>\n      <input id=\"price\" formControlName=\"price\" type=\"number\" required />\n      **@if (productForm.controls.price.touched && productForm.controls.price.hasError('required')) {**\n        **<span class=\"help-text\">Price is required</span>**\n      **}**\n      **@if (productForm.controls.price.touched && productForm.controls.price.hasError('min')) {**\n        **<span class=\"help-text\">Price should be greater than 0</span>**\n      **}**\n    </div> \n    ```", "```js\n    import { ValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\n    export function priceMaximumValidator(price: number): ValidatorFn {\n      return (control: AbstractControl): ValidationErrors | null => {\n        const isMax = control.value <= price;\n        return isMax ? null : { priceMaximum: true };\n      };\n    } \n    ```", "```js\n    import { priceMaximumValidator } from '../price-maximum.validator'; \n    ```", "```js\n    price: new FormControl<number | undefined>(undefined, {\n      nonNullable: true,\n      validators: [\n        Validators.required,\n        Validators.min(1),\n        **priceMaximumValidator(1000)**\n      ]\n    }) \n    ```", "```js\n    <div>\n      <label for=\"price\">Price</label>\n      <input id=\"price\" formControlName=\"price\" type=\"number\" required />\n      @if (productForm.controls.price.touched && productForm.controls.price.hasError('required')) {\n        <span class=\"help-text\">Price is required</span>\n      }\n      @if (productForm.controls.price.touched && productForm.controls.price.hasError('min')) {\n        <span class=\"help-text\">Price should be greater than 0</span>\n      }\n      **@if (productForm.controls.price.touched && productForm.controls.price.hasError('priceMaximum')) {**\n        **<span class=\"help-text\">Price must be smaller or equal to 1000</span>**\n      }\n    </div> \n    ```", "```js\n    ng generate directive price-maximum \n    ```", "```js\n    import { Directive, **input, numberAttribute** } from '@angular/core';\n    **import { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator****} from '@angular/forms';** \n    **import { priceMaximumValidator } from './price-maximum.validator';** \n    ```", "```js\n    @Directive({\n      selector: '[appPriceMaximum]',\n      **providers: [**\n        **{**\n          **provide: NG_VALIDATORS,**\n          **useExisting: PriceMaximumDirective,**\n          **multi: true**\n        **}**\n      **]**\n    }) \n    ```", "```js\n    export class PriceMaximumDirective **implements Validator** \n    ```", "```js\n    appPriceMaximum = input(undefined, {\n      alias: 'threshold',\n      transform: numberAttribute\n    }); \n    ```", "```js\n    validate(control: AbstractControl): ValidationErrors | null {\n      return this.appPriceMaximum\n        ? priceMaximumValidator(this.appPriceMaximum()!)(control)\n        : null;\n    } \n    ```", "```js\n    import { PriceMaximumDirective } from '../price-maximum.directive'; \n    ```", "```js\n    @Component({\n      selector: 'app-product-detail',\n      imports: [\n        CommonModule,\n        FormsModule,\n        **PriceMaximumDirective**\n      ],\n      templateUrl: './product-detail.component.html',\n      styleUrl: './product-detail.component.css'\n    }) \n    ```", "```js\n    <input\n      placeholder=\"New price\"\n      type=\"number\"\n      name=\"price\"\n      required min=\"1\"\n      **appPriceMaximum threshold=\"500\"**\n      #priceCtrl=\"ngModel\"\n      [(ngModel)]=\"price\" /> \n    ```", "```js\n    @if (priceCtrl.dirty && priceCtrl.hasError('priceMaximum')) {\n      <span class=\"help-text\">Price must be smaller or equal to 500</span>\n    } \n    ```", "```js\nthis.productForm.setValue({\n  title: 'TV monitor',\n  price: 600,\n  category: 'electronics'\n}); \n```", "```js\nthis.productForm.patchValue({\n  title: 'TV monitor',\n  category: 'electronics'\n}); \n```", "```js\n<input\n  placeholder=\"New price\"\n  type=\"number\"\n  name=\"price\"\n  required min=\"1\"\n  appPriceMaximum threshold=\"500\"\n  #priceCtrl=\"ngModel\"\n  **[ngModel]=\"price\"**\n  **(ngModelChange)=\"price = $event\"** /> \n```", "```js\n    import { Component, **OnInit** } from '@angular/core'; \n    ```", "```js\n    export class ProductCreateComponent **implements OnInit** \n    ```", "```js\n    ngOnInit(): void {\n      this.productForm.controls.category.valueChanges.subscribe(() => {\n        this.productForm.controls.price.reset();\n      });\n    } \n    ```"]