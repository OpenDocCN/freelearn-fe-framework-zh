- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Advanced Vue.js Frameworks
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级 Vue.js 框架
- en: In the previous chapter, we explored how to deploy Vue.js 3 projects to AWS
    Cloud. We learned about the best practices for deploying to AWS. In addition,
    we learned how enterprise companies deploy their enterprise Vue applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了如何将 Vue.js 3 项目部署到 AWS 云。我们学习了部署到 AWS 的最佳实践。此外，我们还学习了企业公司如何部署他们的企业级
    Vue 应用程序。
- en: This chapter explores a definitive guide to Nuxt.js. We will learn about the
    nitty-gritty of Nuxt.js and how to build and deliver enterprise SSR projects with
    Vue.js 3\. Additionally, we will explore a definitive guide to Gridsome where
    you will learn about the nitty-gritty of Gridsome and how to build and deliver
    enterprise CSR projects with Vue.js 3.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨 Nuxt.js 的 definitive guide。我们将学习 Nuxt.js 的细节以及如何使用 Vue.js 3 构建和交付企业级 SSR
    项目。此外，我们还将探索 Gridsome 的 definitive guide，你将学习 Gridsome 的细节以及如何使用 Vue.js 3 构建和交付企业级
    CSR 项目。
- en: 'In this chapter, we will cover the following key topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Introduction to Vue frameworks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue 框架简介
- en: Top Vue frameworks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶级 Vue 框架
- en: Understanding Nuxt.js and how it works
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Nuxt.js 及其工作原理
- en: Benefits of Nuxt.js
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt.js 的优势
- en: Creating a Nuxt.js app
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Nuxt.js 应用
- en: What is Gridsome?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Gridsome？
- en: What is Gridsome used for?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gridsome 用途是什么？
- en: How does Gridsome work?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gridsome 是如何工作的？
- en: Benefits of Gridsome
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gridsome 的优势
- en: Creating a Gridsome app
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Gridsome 应用
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started with this chapter, you should read through [*Chapter 12*](B17237_12.xhtml#_idTextAnchor471),
    *Deploying Enterprise-Ready Vue.js 3*, where we learned how to deploy Vue.js 3
    projects to the AWS cloud and some of the best practices for deploying to AWS.
    Additionally, we explored different deployment options and mastered best practices
    in deploying our Vue.js 3 project to AWS. We will rely heavily on the knowledge
    from that chapter in this chapter to learn about more advanced Vue frameworks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本章的学习，你应该阅读[*第12章*](B17237_12.xhtml#_idTextAnchor471)，*部署企业级 Vue.js 3*，在那里我们学习了如何将
    Vue.js 3 项目部署到 AWS 云以及部署到 AWS 的一些最佳实践。此外，我们还探讨了不同的部署选项，并掌握了将我们的 Vue.js 3 项目部署到
    AWS 的最佳实践。在本章中，我们将大量依赖该章节的知识来学习更高级的 Vue 框架。
- en: Introduction to Vue frameworks
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue 框架简介
- en: A single framework cannot solve all the problems of frontend engineering, as
    it will become bloated and very heavy to load. Vue.js is not exempt; there are
    some issues that are not completely out-of-the-box with Vue.js. Also, it will
    require harder configuration and can lead to a waste of development time to implement
    some features into Vue.js right out of the box.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 单个框架不能解决前端工程的所有问题，因为它将变得臃肿且非常难以加载。Vue.js 也不例外；有一些问题并不是完全现成的 Vue.js。此外，它将需要更复杂的配置，并且可能导致将一些功能直接实现到
    Vue.js 中会浪费开发时间。
- en: The pressing needs of developers make Vue.js the framework of all frameworks.
    In recent years, after the release of the Vue.js framework, we have noticed a
    good number of other frameworks that have been created out of Vue.js.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者的迫切需求使 Vue.js 成为所有框架的框架。在近年来，Vue.js 框架发布后，我们注意到有相当数量的其他框架是基于 Vue.js 创建的。
- en: These frameworks offer different options to meet development needs such as **Server-Side
    Rendering** (**SSR**), **Static Site Generators** (**SSGs**), **Progressive Web
    Apps** (**PWAs**), and more.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些框架提供不同的选项以满足开发需求，如**服务器端渲染**（**SSR**）、**静态站点生成器**（**SSGs**）、**渐进式网页应用**（**PWAs**）等。
- en: 'Frameworks can be divided into four distinct groups based on their purpose
    and capabilities. These include the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其目的和能力，框架可以分为四个不同的组。以下包括以下内容：
- en: '**Vue.js UI frameworks**: These provide tools to create modern, responsive
    websites'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vue.js UI 框架**：这些提供工具来创建现代、响应式的网站'
- en: '**Mobile frameworks**: These help to construct hybrid mobile web apps'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动框架**：这些有助于构建混合移动网页应用'
- en: '**Static site frameworks**: These generate static websites'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态站点框架**：这些生成静态网站'
- en: '**SSR frameworks**: These are used to create SSR applications'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSR 框架**：这些用于创建 SSR 应用'
- en: In this section, we are going to explore the top Vue.js frameworks, and later
    in this chapter, we will explore the top two frameworks in more detail.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨最顶级的 Vue.js 框架，并在本章的后面部分，我们将更详细地探讨前两个框架。
- en: Top Vue frameworks
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶级 Vue 框架
- en: There are various Vue.js frameworks available for developers to utilize when
    creating universal Vue applications. Let’s explore some of them in the following
    subsections.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者创建通用Vue应用时，有各种Vue.js框架可供利用。让我们在以下小节中探索其中的一些。
- en: Vue UI frameworks
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vue UI框架
- en: Creating an attractive and user-friendly UI is a key part of frontend development.
    If the design of the interface is not appealing or easy to use, it will be hard
    to keep a consistent user base.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个吸引人且用户友好的UI是前端开发的关键部分。如果界面的设计不吸引人或者不易使用，将很难保持一个稳定的用户基础。
- en: When designing a UI for a large enterprise product, it is beneficial to utilize
    a Vue UI framework that offers pre-made Vue components and elements to create
    an attractive frontend.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在为大型企业产品设计UI时，利用提供预制Vue组件和元素的Vue UI框架是有益的。
- en: 'The top UI component frameworks for Vue are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Vue的顶级UI组件框架如下：
- en: Bootstrap Vue
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap Vue
- en: Vuetify
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vuetify
- en: Quasar Framework
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quasar Framework
- en: Vue Material
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue Material
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/bootstrap-vue-vs-quasar-vs-vue-material-vs-vuetify](https://npmtrends.com/bootstrap-vue-vs-quasar-vs-vue-material-vs-vuetify).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此*npm趋势*链接比较每个框架的流行度：[https://npmtrends.com/bootstrap-vue-vs-quasar-vs-vue-material-vs-vuetify](https://npmtrends.com/bootstrap-vue-vs-quasar-vs-vue-material-vs-vuetify)。
- en: Mobile frameworks
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动框架
- en: Over the years, Vue.js has gained popularity in hybrid and robust web app development
    including hybrid mobile development according to Monocubed ([https://www.monocubed.com/blog/why-vuejs-gaining-popularity/](https://www.monocubed.com/blog/why-vuejs-gaining-popularity/)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Monocubed的说法（[https://www.monocubed.com/blog/why-vuejs-gaining-popularity/](https://www.monocubed.com/blog/why-vuejs-gaining-popularity/)），多年来，Vue.js在混合和健壮的Web应用开发中，包括混合移动开发方面获得了人气。
- en: 'However, both hybrid and native mobile development can also be achieved with
    Vue.js using some of the mobile frameworks listed here in conjunction with other
    mobile development libraries and frameworks:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用这里列出的某些移动框架以及其他的移动开发库和框架，也可以使用Vue.js实现混合和原生移动开发：
- en: Vue Native
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue Native
- en: Vux
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vux
- en: Mint UI
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mint UI
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/mint-ui-vs-vue-native-core-vs-vux](https://npmtrends.com/mint-ui-vs-vue-native-core-vs-vux).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此*npm趋势*链接比较每个框架的流行度：[https://npmtrends.com/mint-ui-vs-vue-native-core-vs-vux](https://npmtrends.com/mint-ui-vs-vue-native-core-vs-vux)。
- en: Static site frameworks
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态网站框架
- en: A SSG utilizes templates and raw data to create static HTML pages. One of the
    advantages of this is that the website loads in the same manner each time, and
    the content does not vary dynamically, meaning that the web pages do not need
    to be coded separately.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个SSG使用模板和原始数据来创建静态HTML页面。这种方法的优点是网站每次加载的方式相同，内容不会动态变化，这意味着网页不需要分别编码。
- en: 'The following is a list of Vue frameworks used to generate static websites:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个用于生成静态网站的Vue框架列表：
- en: Vue Press
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue Press
- en: Gridsome
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gridsome
- en: Nuxt.js
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt.js
- en: Moreover, it’s important to note that Nuxt.js can be used to generate static
    websites. However, that is not the main focus of Nuxt.js.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得注意的是，Nuxt.js可以用来生成静态网站。然而，这并不是Nuxt.js的主要焦点。
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/gridsome-vs-nuxt-vs-vuepress](https://npmtrends.com/gridsome-vs-nuxt-vs-vuepress).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此*npm趋势*链接比较每个框架的流行度：[https://npmtrends.com/gridsome-vs-nuxt-vs-vuepress](https://npmtrends.com/gridsome-vs-nuxt-vs-vuepress)。
- en: SSR frameworks
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SSR框架
- en: According to the official documentation ([https://vuejs.org/guide/scaling-up/ssr.html#why-ssr](https://vuejs.org/guide/scaling-up/ssr.html#why-ssr)),
    SSR applications have better and faster time-to-content conversion rates, better
    SEO, and the same unified language and declarative component-oriented metal model
    for developing your entire application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 根据官方文档（[https://vuejs.org/guide/scaling-up/ssr.html#why-ssr](https://vuejs.org/guide/scaling-up/ssr.html#why-ssr)），SSR应用具有更好的内容转换速度，更好的SEO，以及相同的统一语言和声明式组件导向的金属模型，用于开发整个应用程序。
- en: A Vye.js application rendered server-side allows your application codes to run
    on both the server and client side as opposed to SSGs, which will only run on
    the client side.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在服务器端渲染的Vye.js应用程序允许你的应用程序代码在服务器端和客户端上运行，这与仅运行在客户端的SSGs形成对比。
- en: 'The following is a list of Vue frameworks used to implement SSRs:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个用于实现SSRs的Vue框架列表：
- en: Nuxt.js
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt.js
- en: Quasar
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quasar
- en: Vite SSR
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vite SSR
- en: 'You can compare the popularity of each of the frameworks using this *npm trends*
    link: [https://npmtrends.com/nuxt-vs-quasar-vs-vite-ssr](https://npmtrends.com/nuxt-vs-quasar-vs-vite-ssr).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这个 *npm 趋势* 链接比较每个框架的流行度：[https://npmtrends.com/nuxt-vs-quasar-vs-vite-ssr](https://npmtrends.com/nuxt-vs-quasar-vs-vite-ssr)。
- en: In this section, we explored the top Vue.js frameworks and their different categories.
    In the next section, we will take a deep-dive into Nuxt.js and see how it works.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了最顶级的 Vue.js 框架及其不同类别。在下一节中，我们将深入探讨 Nuxt.js 并了解其工作原理。
- en: Understanding Nuxt.js and how it works
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Nuxt.js 及其工作原理
- en: 'Nuxt.js is an open source, Vue.js-based framework that provides developers
    with the tools to create frontend projects with confidence. It is designed to
    make web development simpler and more powerful, and it also offers server-side
    rendering capabilities to help developers manage complex configurations for asynchronous
    data, middleware, and routing:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js 是一个基于 Vue.js 的开源框架，为开发者提供了创建前端项目的工具。它旨在使网页开发更加简单和强大，同时也提供了服务器端渲染功能，帮助开发者管理异步数据、中间件和路由的复杂配置：
- en: '![Figure 13.1 – The official Nuxt.js logo](img/Figure_13.01_B17237.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – 官方 Nuxt.js 标志](img/Figure_13.01_B17237.jpg)'
- en: Figure 13.1 – The official Nuxt.js logo
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 官方 Nuxt.js 标志
- en: Vue.js applications can be organized using a well-known architecture, which
    can be used to create either basic or complex applications. Furthermore, this
    structure can help to improve the development of Vue.js applications.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 应用可以通过一个众所周知的架构来组织，该架构可以用来创建基本或复杂的应用。此外，这种结构有助于提高 Vue.js 应用的开发。
- en: In this section, we will learn about the different use cases of Nuxt.js and
    why you should consider switching to Nuxt.js.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 Nuxt.js 的不同用例以及为什么你应该考虑切换到 Nuxt.js。
- en: Uses of Nuxt.js
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nuxt.js 的用途
- en: With Nuxt.js, you’re limitless in terms of the type of applications you can
    build, and Nuxt.js has been used to develop high-performing and SEO-focused websites.
    In the following subsections, we will look at the most popular types of websites
    you can use to build with Nuxt.js.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Nuxt.js，你可以在构建应用类型上无拘无束，Nuxt.js 已被用于开发高性能和 SEO 优化的网站。在接下来的子节中，我们将探讨你可以使用
    Nuxt.js 构建的最流行的网站类型。
- en: Statically generated pages
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态生成页面
- en: Statically generated pages are websites that do not require any outside data
    sources, as the content is already included in the HTML. Nuxt.js can be used to
    create statically generated pages, such as portfolios, demo sites, or tutorial
    pages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 静态生成页面是不需要任何外部数据源的网站，因为内容已经包含在 HTML 中。Nuxt.js 可以用来创建静态生成页面，如作品集、演示网站或教程页面。
- en: SPAs
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单页应用（SPAs）
- en: A **single-page application** (**SPA**) is a type of frontend development that
    retrieves data from an external source and displays it on a user’s device. It
    is not surprising that many popular JavaScript frameworks such as React.js, Vue.js,
    and Angular are all SPA frameworks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**单页应用**（SPA）是一种前端开发类型，它从外部源检索数据并在用户的设备上显示。许多流行的 JavaScript 框架，如 React.js、Vue.js
    和 Angular，都是 SPA 框架，这并不奇怪。'
- en: The HTML 5 history Application Programming Interface (API) and the location
    hash are utilized to create SPA routing systems. This capability allows developers
    to alter a website’s URL without needing to reload the entire page.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 5 历史应用程序编程接口（API）和位置哈希被用来创建 SPA 路由系统。这种能力允许开发者在不重新加载整个页面的情况下更改网站的 URL。
- en: Universal applications
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用应用
- en: This part of Nuxt.js is my favorite because almost all the applications I have
    developed with Nuxt.js have been universal applications.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分 Nuxt.js 是我最喜欢的，因为我用 Nuxt.js 开发的几乎所有应用都是通用应用。
- en: A universal application is a technique that utilizes SSR to obtain client-side
    data on the server before completely displaying the page on the client’s web browser.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通用应用是一种利用 SSR 在客户端浏览器完全显示页面之前在服务器上获取客户端数据的技巧。
- en: SSR is built into Nuxt.js right out of the box, and it solves the tedious configurations
    that are involved in activating and enabling SSR in Vue.js.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SSR（服务器端渲染）是 Nuxt.js 内置的功能，无需进行繁琐的配置即可激活和启用 Vue.js 中的 SSR。
- en: Nuxt.js can be used to resolve the existing SSR issue in Vue.js, which is beneficial
    for SEO and can even be extended to create a universal application that allows
    for a single code base to be used for both the frontend and the backend of a monolithic
    application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js可以解决Vue.js中现有的SSR问题，这对SEO有益，甚至可以扩展以创建一个通用应用程序，允许使用单个代码库为单体应用程序的前端和后端服务。
- en: These were just some of the categories of applications you can use to build
    with Nuxt.js. In the next section, we are going to explore how Nuxt.js actually
    works.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是你可以使用Nuxt.js构建的一些应用程序类别。在下一节中，我们将探讨Nuxt.js实际上是如何工作的。
- en: How does Nuxt.js work?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nuxt.js是如何工作的？
- en: Depending on your settings, Nuxt.js can operate in two different ways. If you
    enable SSR or use the universal mode, it will function in the same manner as a
    server-side framework. This means that every time a user visits your website,
    the requests are processed on the server, and a server is required to render and
    deliver the page.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的设置，Nuxt.js可以以两种不同的方式运行。如果你启用了SSR或使用通用模式，它将以与服务器端框架相同的方式运行。这意味着每次用户访问你的网站时，请求都会在服务器上处理，并且需要一个服务器来渲染和交付页面。
- en: However, if client-side rendering is enabled or universal mode has not been
    activated, the content and the pages are rendered in the browser using JavaScript.
    This approach has the fastest load time and performs well in terms of speed and
    page performance.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果启用了客户端渲染或未激活通用模式，内容和页面将使用JavaScript在浏览器中渲染。这种方法具有最快的加载时间，在速度和页面性能方面表现良好。
- en: The Nuxt.js lifecycle gives a high-level overview of the different parts of
    the framework, their order of execution, and how they work together. Also, it
    describes what happens after the build phase, where your application is bundled,
    chunked, and minified.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js的生命周期提供了框架不同部分的概述，它们的执行顺序以及它们是如何协同工作的。此外，它还描述了构建阶段之后发生的事情，即你的应用程序被打包、分割和压缩。
- en: 'There are three main actions and methods used in Nuxt.js depending on whether
    you enabled SSR or not:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt.js中，根据是否启用了SSR（服务器端渲染），主要使用三种动作和方法：
- en: The `nuxtServerInit` action is the initial hook that is executed on the server
    side if a Vuex store is enabled. It is used to fill the store and is only called
    if the store has been enabled. Additionally, this hook can be used to dispatch
    other actions in the Vuex store on the server.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nuxtServerInit`动作是在服务器端执行的首个钩子，如果启用了Vuex存储。它用于填充存储，并且只有在存储已启用时才会被调用。此外，此钩子还可以用于在服务器上的Vuex存储中分派其他动作。'
- en: '`validate()` is a function that validates the dynamic parameters of a page
    component. It is called before rendering the page components.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate()`是一个用于验证页面组件动态参数的函数。它在渲染页面组件之前被调用。'
- en: '`AsyncData` and `Fetch` are functions utilized to acquire data and display
    it on the server side (`AsyncData`) or to obtain data and fill the store before
    rendering the page (`Fetch`).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AsyncData`和`Fetch`是用于获取数据并在服务器端（`AsyncData`）显示，或者获取数据并在渲染页面之前填充Vuex存储的函数（`Fetch`）。'
- en: Here is a quick summary of how your requests are processed when you visit a
    Nuxt.js website. When Nuxt.js receives an initial page visit, it calls out to
    the `nuxtServerInit` action to update the store or dispatch necessary actions
    if your store is enabled; otherwise, Nuxt.js will ignore `nuxtServerInit` and
    move to the next stage.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个快速总结，当你访问Nuxt.js网站时你的请求是如何处理的。当Nuxt.js收到初始页面访问时，它会调用`nuxtServerInit`动作来更新存储或分派必要的动作，如果你的存储已启用；否则，Nuxt.js将忽略`nuxtServerInit`并进入下一阶段。
- en: Next, Nuxt.js will look up your `nuxt.config.js` file for any global middleware
    and execute it accordingly. After the execution, it will move to the layout pages
    and check for any middleware for execution, and lastly, it will execute the page’s
    middleware including the page children.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Nuxt.js将查找你的`nuxt.config.js`文件以查找任何全局中间件并相应地执行它。执行后，它将移动到布局页面并检查任何中间件以执行，最后，它将执行页面的中间件包括页面子组件。
- en: After executing the middleware in order, it will check the routes and use the
    `validate()` function to run validations against the params, queries, and more.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在按顺序执行中间件之后，它将检查路由并使用`validate()`函数对参数、查询等进行验证。
- en: The `asyncData` method is then employed to acquire and display data on the server
    side if it had been enabled previously. Afterward, the `fetch` method is used
    to fill Vuex on the client side.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果之前已启用，`asyncData`方法随后被用来在服务器端获取和显示数据。之后，使用`fetch`方法在客户端填充Vuex。
- en: 'At this point, the page should have all the required data to be displayed a
    proper web page. The following diagram of a flowchart illustrates all the steps
    it takes to render a single page:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，页面应该已经包含了显示适当网页所需的所有数据。以下流程图展示了渲染单个页面所需的所有步骤：
- en: "![Figure 13.2 – An overview of Nuxt.js \uFEFFlifecycle hooks (source: https://nuxtjs.org/docs/concepts/nuxt-lifecycle/)](img/Figure_13.02_B17237.jpg)"
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – Nuxt.js 生命周期钩子的概述（来源：https://nuxtjs.org/docs/concepts/nuxt-lifecycle/）](img/Figure_13.02_B17237.jpg)'
- en: 'Figure 13.2 – An overview of Nuxt.js lifecycle hooks (source: https://nuxtjs.org/docs/concepts/nuxt-lifecycle/)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – Nuxt.js 生命周期钩子的概述（来源：https://nuxtjs.org/docs/concepts/nuxt-lifecycle/）
- en: The official Nuxt.js lifecycle ([https://nuxtjs.org/docs/concepts/nuxt-lifecycle](https://nuxtjs.org/docs/concepts/nuxt-lifecycle))
    page gives a more detailed overview of the behind-the-scenes of how Nuxt.js renders
    and processes your pages whether they are enabled server-side or client-side.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 官方 Nuxt.js 生命周期([https://nuxtjs.org/docs/concepts/nuxt-lifecycle](https://nuxtjs.org/docs/concepts/nuxt-lifecycle))页面提供了对
    Nuxt.js 如何渲染和处理您的页面（无论是服务器端还是客户端）的更详细概述。
- en: Having gone through the inner workings of Nuxt.js, it should now be simple to
    comprehend. In the following section, let’s investigate the advantages of using
    Nuxt.js for your upcoming project.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 经过对 Nuxt.js 内部运作的了解，现在应该很容易理解。在下一节中，让我们调查一下使用 Nuxt.js 为您即将到来的项目带来的优势。
- en: Benefits of Nuxt.js
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nuxt.js 的优势
- en: The benefits of Nuxt.js cannot be underestimated; you can easily spot a few
    of them with the introduction of SSR and project structuring for enterprise-level
    projects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js 的优势不容小觑；您可以通过 SSR 的引入和企业级项目的项目结构来轻松发现其中的一些。
- en: However, in the following subsections, we will understand some of the benefits
    of the Nuxt.js framework and why it’s becoming very popular for building SSR-enabled
    projects with Vue.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在以下小节中，我们将了解 Nuxt.js 框架的一些优势以及为什么它正变得越来越受欢迎，用于构建启用 SSR 的 Vue 项目。
- en: Creating universal apps easily
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轻松创建通用应用
- en: With Nuxt.js, you can create SSR applications very easily without needing to
    go through the painful route of configuring Vue to support SSR. The SSR feature
    is already built into Nuxt.js and is very easy to use.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Nuxt.js，您可以非常容易地创建 SSR 应用，无需经历配置 Vue 以支持 SSR 的痛苦过程。SSR 功能已经内置在 Nuxt.js 中，并且非常易于使用。
- en: Nuxt.js exposes two important properties called `isServer` and `isClient` to
    determine the state of the framework at runtime. It can be useful when checking
    whether your component should render on the server side or the client side.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js 提供了两个重要的属性，称为 `isServer` 和 `isClient`，以确定框架在运行时的状态。当检查您的组件是否应在服务器端或客户端渲染时，这可能很有用。
- en: Statically rendering your Vue apps with universal benefits
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用静态渲染为您的 Vue 应用带来通用优势
- en: Statically generated websites are actively gaining popularity with different
    frameworks developed to focus only on them. However, you can easily generate a
    static website with Nuxt.js without installing any additional frameworks or tools.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 静态生成的网站正日益受到不同框架的青睐，这些框架专注于它们。然而，您可以使用 Nuxt.js 轻松生成静态网站，而无需安装任何额外的框架或工具。
- en: You can quickly create a static version of your website, complete with HTML
    and routes, by using the `nuxt` `generate` command.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `nuxt` `generate` 命令快速创建网站的静态版本，包括 HTML 和路由。
- en: Nuxt.js enables the creation of a powerful universal application that does not
    require a server to utilize the SSR feature, similar to building a statically
    generated website.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js 允许创建一个强大的通用应用，无需服务器即可利用 SSR 功能，类似于构建静态生成的网站。
- en: Automatic code-splitting
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动代码拆分
- en: Frontend development that focuses on speed and performance has become a fundamental
    part of enterprise software, and Nuxt.js stands out for its exceptional performance
    due to its code-splitting feature.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 关注速度和性能的前端开发已成为企业软件的基本部分，Nuxt.js 由于其代码拆分功能而以其卓越的性能脱颖而出。
- en: This feature allows each route to be given its own JavaScript file that only
    contains the code necessary to run that route. This approach to building applications
    helps to reduce the amount of code that needs to be loaded in order to render
    a single page, thus decreasing loading times.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能允许为每个路由分配其自己的 JavaScript 文件，该文件仅包含运行该路由所需的代码。这种构建应用程序的方法有助于减少渲染单个页面时需要加载的代码量，从而减少加载时间。
- en: Webpack’s built-in configuration enables code splitting when creating static
    web pages for your website.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 内置的配置在为您的网站创建静态网页时启用代码拆分。
- en: ES6/7 compilation
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ES6/7 编译
- en: ES6 and 7 are enabled by default in Nuxt.js because Webpack and Babel are prebuilt
    into it for translating and compiling the latest version of JavaScript to the
    versions that older browsers can execute.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js 默认启用 ES6 和 7，因为 Webpack 和 Babel 已经预构建到其中，用于将最新版本的 JavaScript 转换为旧浏览器可以执行的版本。
- en: Babel is set up to take all the `.vue` files and ES6 code within the script
    tags and convert them into JavaScript, which is compatible with all browsers.
    This functionality eliminates the need to manually set up and configure browser
    compatibility from the beginning.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Babel 已经配置为将所有的 `.vue` 文件和脚本标签内的 ES6 代码转换为与所有浏览器兼容的 JavaScript。此功能消除了从开始手动设置和配置浏览器兼容性的需求。
- en: In the next section, we will look at how to create our first Nuxt.js application
    and the practical approach for developing enterprise-ready applications with Nuxt.js.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何创建我们的第一个 Nuxt.js 应用程序，以及使用 Nuxt.js 开发企业级应用程序的实用方法。
- en: Creating a Nuxt.js app
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Nuxt.js 应用
- en: This section will introduce you to a practical approach to developing applications
    with Nuxt.js. Before we delve in, let’s explore some of the few critical concepts
    when it comes to developing enterprise-ready applications with Nuxt.js.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您介绍使用 Nuxt.js 开发应用程序的实用方法。在我们深入之前，让我们探讨一些使用 Nuxt.js 开发企业级应用程序时的一些关键概念。
- en: Creating a Nuxt application
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Nuxt 应用
- en: 'You can easily create a Nuxt.js application in different ways, but the recommended
    way is to use any of the following commands:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过不同的方式轻松创建 Nuxt.js 应用程序，但推荐的方式是使用以下任一命令：
- en: '[PRE0]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, move into the created project folder and serve your newly created Nuxt.js
    project with the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，进入创建的项目文件夹，使用以下命令提供您新创建的 Nuxt.js 项目：
- en: '[PRE1]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It’s important that you replace `<project-name>` with an actual project name.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是您需要将 `<project-name>` 替换为实际的项目名称。
- en: Now that we have our new Nuxt.js project generated for us, let’s explore the
    different folders and files that come with the project.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了我们的新 Nuxt.js 项目，让我们探索项目附带的不同文件夹和文件。
- en: Understanding the Nuxt.js folder structure
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 Nuxt.js 文件夹结构
- en: 'When you create a new project using any of the preceding commands mentioned,
    it can feel quite daunting due to the number of folders and files it comes with.
    In this section, we will take a look at some of the key folders and files that
    are part of the Nuxt.js project. Additionally, some of these files and folders
    are essential and must remain unchanged without any extra configuration. The following
    figure shows the folder structure of Nuxt.js:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用前面提到的任何命令创建新项目时，由于包含的文件夹和文件数量众多，可能会感到有些令人畏惧。在本节中，我们将查看一些属于 Nuxt.js 项目的关键文件夹和文件。此外，这些文件和文件夹是必不可少的，并且必须保持不变，无需任何额外配置。以下图显示了
    Nuxt.js 的文件夹结构：
- en: '![Figure 13.3 – A screenshot of the Nuxt.js folder structure](img/Figure_13.03_B17237.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – Nuxt.js 文件夹结构的截图](img/Figure_13.03_B17237.jpg)'
- en: Figure 13.3 – A screenshot of the Nuxt.js folder structure
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – Nuxt.js 文件夹结构的截图
- en: Let’s go over this folder structure in the following subsections.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下小节中回顾这个文件夹结构。
- en: .nuxt
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: .nuxt
- en: When you start your development server, the `.nuxt` folder will be created automatically
    and will not be visible. This folder is also known as the build directory and
    includes generated files and artifacts that are used to serve your project during
    development.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动开发服务器时，`.nuxt` 文件夹将自动创建，并且不可见。这个文件夹也被称为构建目录，包括用于在开发期间提供项目的生成文件和工件。
- en: assets
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: assets
- en: The `assets` directory holds all the raw materials such as pictures, CSS, SASS
    documents, fonts, and more. Webpack will compile any file that is included in
    this folder while the page is being created.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`assets` 目录包含所有原始材料，如图片、CSS、SASS 文档、字体等。Webpack 将在页面创建时编译此文件夹中包含的任何文件。'
- en: components
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: components
- en: This folder is analogous to the `components` folders in Vue. It is the repository
    of all your Vue components. Components are the files that make up the various
    components of your pages and can be reused and imported into any page, layout,
    or component.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹类似于 Vue 中的 `components` 文件夹。它是您所有 Vue 组件的仓库。组件是构成您页面各种组件的文件，可以重用并导入到任何页面、布局或组件中。
- en: layouts
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: layouts
- en: The `layouts` folder is a great place for organizing the different page layouts
    of your application. It can be used to differentiate between the page structure
    of the dashboard and the page structure for users who are not logged in. This
    helps to keep the different parts of the application organized.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`layouts` 文件夹是组织应用程序不同页面布局的好地方。它可以用来区分仪表板页面结构和未登录用户的页面结构。这有助于保持应用程序不同部分的有序。'
- en: You can create different structures to correspond to different structures of
    your applications such as different sidebars, menus, headers, footers, and more.
    You can achieve all these separations with Nuxt.js layouts.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建不同的结构来对应你应用程序的不同结构，例如不同的侧边栏、菜单、页眉、页脚等。你可以通过 Nuxt.js 布局实现所有这些分离。
- en: middleware
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: middleware
- en: Middleware can be defined as custom functions that are triggered before or after
    a page or set of pages (layout) is rendered. These middleware functions can be
    stored in the `middleware` folder in Nuxt.js.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件可以定义为在页面或一组页面（布局）渲染之前或之后触发的自定义函数。这些中间件函数可以存储在 Nuxt.js 的 `middleware` 文件夹中。
- en: Middleware is important and handy when creating membership-only or authentication-enabled
    applications. You can use it to restrict users from accessing certain authenticated
    pages.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件在创建仅限会员或启用身份验证的应用程序时非常重要且方便。你可以用它来限制用户访问某些受保护的页面。
- en: plugins
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: plugins
- en: The `plugins` directory is where all the JavaScript code you want to run before
    initializing the root Vue application is stored. This is the place in which to
    add Vue plugins and inject functions or constants.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`plugins` 目录是存储所有在初始化根 Vue 应用程序之前想要运行的 JavaScript 代码的地方。这是添加 Vue 插件和注入函数或常量的地方。'
- en: You will use this folder a lot to include different Vue plugins that have not
    been included in Nuxt.js as a module.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你将大量使用这个文件夹来包含 Nuxt.js 作为模块未包含的不同 Vue 插件。
- en: It works by creating a JavaScript file in the `plugins` folder, using the `Vue.use()`
    function to add the plugin to the Vue instance, and lastly, adding the file to
    the `plugins` array in the `nuxt.config.js` file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是在 `plugins` 文件夹中创建一个 JavaScript 文件，使用 `Vue.use()` 函数将插件添加到 Vue 实例中，最后将文件添加到
    `nuxt.config.js` 文件中的 `plugins` 数组中。
- en: static
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: static
- en: The `static` directory is a special one, housing all the static files of your
    application that are unlikely to be altered or that will be displayed without
    any further processing by Nuxt.js or Webpack.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`static` 目录是一个特殊的目录，包含了你应用程序中所有不太可能被更改或将被 Nuxt.js 或 Webpack 进一步处理显示的静态文件。'
- en: Any files located in the `static` folder will be provided by Nuxt.js and can
    be accessed through the root URL of the project. This includes items such as `favicon`,
    `robot.txt`, and more.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 位于 `static` 文件夹中的任何文件都将由 Nuxt.js 提供，并且可以通过项目的根 URL 访问。这包括 `favicon`、`robot.txt`
    等项目。
- en: store
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: store
- en: The `store` folder holds all of your Vuex store documents, and it is automatically
    divided into modules. The Vuex store is included in the package, but it has to
    be enabled by creating an `index.js` file in the `store` folder before it can
    be used.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`store` 文件夹包含了你所有的 Vuex store 文档，并且它被自动划分为模块。Vuex store 包含在包中，但必须在 `store`
    文件夹中创建一个 `index.js` 文件才能启用并使用。'
- en: Nuxt.js is designed to help with the development of enterprise-level applications,
    and it comes pre-equipped with Vuex for state management. This makes it easier
    to create and manage applications of this scale.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js 是为了帮助企业级应用程序的开发而设计的，它预装了 Vuex 用于状态管理。这使得创建和管理此类规模的应用程序变得更加容易。
- en: pages
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pages
- en: The `pages` folder is very important as it is the bedrock of the Nuxt.js routing
    system. Therefore, it cannot be renamed without updating the Nuxt.js configuration.
    Nuxt.js automatically reads all the `.vue` files inside the `pages` directory
    and creates a corresponding route for the page.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`pages` 文件夹非常重要，因为它是 Nuxt.js 路由系统的基石。因此，在更新 Nuxt.js 配置之前，它不能被重命名。Nuxt.js 会自动读取
    `pages` 目录下所有的 `.vue` 文件，并为每个页面创建相应的路由。'
- en: The `pages` directory holds all the views and routes for your application, and
    each page component is a regular Vue component that Nuxt.js automatically transforms
    into routes by adding special attributes and functions to make the development
    of your application smooth and straightforward.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`pages` 目录包含了你应用程序的所有视图和路由，每个页面组件都是一个常规的 Vue 组件，Nuxt.js 会通过添加特殊属性和函数自动将其转换为路由，以使应用程序的开发变得顺畅和直接。'
- en: In the next section, we will explore how Nuxt.js automatically converts `.vue`
    files in the `pages` folder into routes.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨Nuxt.js如何自动将`pages`文件夹中的`.vue`文件转换为路由。
- en: Nuxt.js pages and routing system
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nuxt.js页面和路由系统
- en: Nuxt.js simplifies the routing process by allowing users to create directories
    and files in the `pages` folder, which will then automatically generate a router
    file based on the structure of the directory.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt.js通过允许用户在`pages`文件夹中创建目录和文件来简化路由过程，这将根据目录结构自动生成一个路由器文件。
- en: For example, if you have a `posts.vue` file in the directory, it will automatically
    be converted into a route, and you can then access the route in your browser to
    view the content of the `Posts` page.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在目录中有`posts.vue`文件，它将自动转换为路由，然后你可以在浏览器中访问该路由以查看`Posts`页面的内容。
- en: This routing system enables you to establish three distinct routes simply by
    creating files and folders. Let’s take a closer look at these route types.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这种路由系统允许你通过创建文件和文件夹来简单地建立三个不同的路由。让我们更详细地看看这些路由类型。
- en: We will explore the different types of routing that are supported by Nuxt.js
    and see how each of the routing types is used within Nuxt.js.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨Nuxt.js支持的不同的路由类型，并查看每种路由类型在Nuxt.js中的使用方式。
- en: Basic routing
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本路由
- en: 'Routing is a process by which requests are routed or directed to the code that
    handles them. These requests can come in the form of URLs and are redirected to
    the appropriate handler. It can be a simple process, as no extra configuration
    is needed for it to function. Examples of this are `/about`, `/contact`, `/posts`,
    and more. To set up a basic routing system, the `pages` directory should be organized
    in the following manner:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是一个将请求路由或定向到处理它们的代码的过程。这些请求可以以URL的形式出现，并被重定向到适当的处理器。这可能是一个简单的过程，因为它不需要额外的配置即可运行。例如，`/about`、`/contact`、`/posts`等。要设置基本路由系统，`pages`目录应按以下方式组织：
- en: '[PRE2]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Nuxt will generate a `router` file automatically similar to the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt将自动生成一个类似于以下的路由器文件：
- en: '[PRE3]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code snippet is automatically generated by Nuxt.js and is not
    available for editing because everything is properly routed according to your
    folder structure in the `pages` directory.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码片段是由Nuxt.js自动生成的，不可编辑，因为所有内容都已根据`pages`目录中的文件夹结构正确路由。
- en: Nested routing
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套路由
- en: Nested routes are routes that are embedded within a parent route. This type
    of routing is used to create multiple levels of routing that are more detailed.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套路由是嵌套在父路由中的路由。这种类型的路由用于创建更详细的多级路由。
- en: 'With Nuxt.js, you can easily create nested routes by creating a parent folder
    and placing all the route files within that folder. Take a look at the following
    folder structure:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Nuxt.js，你可以通过创建父文件夹并将所有路由文件放置在该文件夹中来轻松创建嵌套路由。请看以下文件夹结构：
- en: '[PRE4]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, we created a new file and folder with the same name as
    the dashboard in the directory structure shown previously. Afterward, we placed
    the `portfolios.vue` and `settings.vue` files as sub-items in the dashboard folder.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在之前显示的目录结构中创建了一个与仪表板同名的新的文件和文件夹。之后，我们将`portfolios.vue`和`settings.vue`文件作为子项放置在仪表板文件夹中。
- en: 'This straightforward organization of folders will create a router with routes
    that will look like the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的文件夹组织结构将创建一个具有以下路由的路由器：
- en: '[PRE5]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Vue.js, nested routes are created manually and registered inside an `index.js`
    router file, which can easily becomes complicated when creating many routes for
    an enterprise application, but with Nuxt.js, it is made very simple and easy to
    create files and nested folders.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue.js中，嵌套路由是手动创建的，并在`index.js`路由文件内部注册，当为企业应用程序创建许多路由时，这很容易变得复杂，但使用Nuxt.js，它变得非常简单且易于创建文件和嵌套文件夹。
- en: Dynamic routing
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态路由
- en: Dynamic routes can be generated with undefined route names either due to an
    API call or because you don’t want to keep creating the same page. These routes
    are generated from a variable, such as a name or ID, which is obtained from the
    data within the application.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 动态路由可以通过未定义的路由名称生成，这可能是由于API调用，或者因为你不想不断创建相同的页面。这些路由是从应用程序中的数据中获取的变量（如名称或ID）生成的。
- en: In order to make a route dynamic, you must add an underscore at the end of the
    `.vue` file or directory name. You can name the file or directory whatever you
    want, but an underscore must be included in order for it to be dynamic.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使路由动态化，你必须在 `.vue` 文件或目录名的末尾添加一个下划线。你可以命名文件或目录，但必须包含一个下划线，以便使其动态化。
- en: For instance, if you define a `_slug.vue` file in the `pages` directory, you
    can access the value using the `params.slug` object.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在 `pages` 目录中定义了一个 `_slug.vue` 文件，你可以使用 `params.slug` 对象访问其值。
- en: Using a dynamic route is advantageous when constructing a blog application;
    for instance, when the ID or slug of the post that the user is going to select
    to read is unknown. However, with a dynamic route, it is possible to obtain the
    ID/slug of the post and display the appropriate post with the ID/slug.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建博客应用时使用动态路由是有优势的；例如，当用户要选择的阅读的帖子 ID 或 slug 未知时。然而，使用动态路由，可以获取帖子的 ID/slug
    并显示相应的帖子。
- en: 'Using an example, we’ll demonstrate how to create a dynamic route:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个示例，我们将演示如何创建一个动态路由：
- en: '[PRE6]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we add an underscore to `slug` in order to create a dynamic route for
    the page, as well as a parent route with a string parameter and its respective
    child routes. This page structure will generate a router with the following routes
    in the file:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在 `slug` 中添加一个下划线，以创建页面的动态路由，以及一个带有字符串参数的父路由及其相应的子路由。这种页面结构将在文件中生成以下路由：
- en: '[PRE7]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we’ve explored the different routing systems that come built into the
    Nuxt.js framework, you have a solid knowledge of how Nuxt.js works and can start
    building your enterprise-ready universal application with it.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了 Nuxt.js 框架内置的不同路由系统，你对 Nuxt.js 的工作原理有了扎实的了解，并可以使用它开始构建企业级通用应用程序。
- en: In the next section, we will explore Gridsome and learn about the nitty-gritty
    of Gridsome and how to build and deliver enterprise CSR projects with Vue.js 3.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索 Gridsome，了解 Gridsome 的细节以及如何使用 Vue.js 3 构建和交付企业级 CSR 项目。
- en: What is Gridsome?
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gridsome 是什么？
- en: Gridsome is a powerful static website generator. It is powered by Vue.js to
    build statically generated websites and apps that are fast by default. It is also
    a Jamstack framework for building websites and applications that delivers better
    performance, higher security, and lower cost of scaling.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Gridsome 是一个强大的静态网站生成器。它由 Vue.js 驱动，用于构建默认快速生成的网站和应用。它也是一个用于构建网站和应用的 Jamstack
    框架，能够提供更好的性能、更高的安全性和更低的扩展成本。
- en: Gridsome is focused on implementing the Jamstack approach to build fast and
    secure sites and applications by pre-rendering files and serving them directly
    from a CDN – thereby increasing the speed of your application and removing the
    requirement to manage or run web servers.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Gridsome 致力于通过预渲染文件并直接从 CDN 提供服务来实现 Jamstack 方法，以构建快速和安全的网站和应用——从而提高应用程序的速度，并消除管理或运行
    Web 服务器的需求。
- en: Jamstack is an architectural approach that decouples the web experience layer
    from data and business logic, improving flexibility, scalability, performance,
    and maintainability.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Jamstack 是一种将 Web 体验层从数据和业务逻辑中分离出来的架构方法，提高了灵活性、可伸缩性、性能和可维护性。
- en: What is Gridsome used for?
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gridsome 用作什么？
- en: At the moment, Gridsome does not support SSR but focuses on creating faster
    websites and applications. In the following subsections, we will look at the most
    popular types of websites you can build with Gridsome.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Gridsome 不支持 SSR，但专注于创建更快的网站和应用。在接下来的小节中，我们将探讨你可以使用 Gridsome 构建的最流行的网站类型。
- en: Statically generated pages
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态生成的页面
- en: These are the types of websites that do not require any external data sources
    – the content is already embedded into the HTML. You can use Gridsome to create
    statically generated pages such as portfolios, demo websites, or tutorial pages
    with different data sources and higher performance.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的网站不需要任何外部数据源——内容已经嵌入到 HTML 中。你可以使用 Gridsome 创建静态生成的页面，例如作品集、演示网站或教程页面，这些页面可以包含不同的数据源和更高的性能。
- en: SPAs
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单页应用（SPAs）
- en: A frontend development approach that utilizes dynamic data from an external
    API and displays it on the client side is known as creating an SPA. It is not
    unexpected that the majority of JavaScript frameworks, such as React.js, Vue.js,
    and Angular, are all SPA frameworks.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 利用外部 API 的动态数据并在客户端显示的开发方法被称为创建单页应用（SPA）。JavaScript 框架的大多数，如 React.js、Vue.js
    和 Angular，都是 SPA 框架，这并不令人意外。
- en: The HTML 5 history API and the location hash are utilized to create SPA routing
    systems. This capability allows developers to alter a website’s URL without needing
    to reload the entire page.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 5 历史API和位置哈希被用来创建 SPA 路由系统。这种能力允许开发者在不重新加载整个页面的情况下更改网站的 URL。
- en: In the next section, we will explore how Gridsome works and how can use it to
    create a statically rendered website.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨 Gridsome 的工作原理以及如何使用它来创建一个静态渲染的网站。
- en: How does Gridsome work?
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gridsome 是如何工作的？
- en: Gridsome is a Jamstack framework; therefore, it uses modern web development
    architecture based on client-side JavaScript, reusable APIs, and prebuilt markup.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Gridsome 是一个 Jamstack 框架；因此，它使用基于客户端 JavaScript、可重用 API 和预构建标记的现代 Web 开发架构。
- en: It works by generating static SEO-friendly HTML markup that is converted into
    a dynamic DOM once loaded in the browser. This simple feature allows Gridsome
    to be a go-to Jamstack framework for building both static and dynamic websites.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过生成静态、SEO 优化的 HTML 标记来实现，这些标记在浏览器加载后会被转换为动态 DOM。这个简单功能使得 Gridsome 成为构建静态和动态网站的首选
    Jamstack 框架。
- en: Internally, Gridsome builds one `.html` file and one `.json` file for every
    page that you create and loads the `.json` files after the first page load to
    prefetch and load data for the next pages. Additionally, it also builds a `.js`
    bundle for each page to take advantage of code splitting.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，Gridsome 为你创建的每个页面构建一个 `.html` 文件和一个 `.json` 文件，并在首次页面加载后加载 `.json` 文件以预取和加载下一页的数据。此外，它还为每个页面构建一个
    `.js` 包以利用代码拆分。
- en: Additionally, the source plugins can obtain data from either local files or
    external **APIs** and store it in a local database. A unified GraphQL data layer
    allows you to access only the required data from the database and use it in your
    Vue components.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，源插件可以从本地文件或外部 **API** 获取数据，并将其存储在本地数据库中。统一的 GraphQL 数据层允许你从数据库中访问所需的数据，并在你的
    Vue 组件中使用它。
- en: 'The following diagram explains the inner workings of Gridsome and how data
    is passed and processed until it gets to your Vue component:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表解释了 Gridsome 的内部工作原理以及数据是如何传递和处理的，直到它到达你的 Vue 组件：
- en: '![Figure 13.4 – An overview of how Gridsome works (source: https://gridsome.org/docs/how-it-works/)](img/Figure_13.04_B17237.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.4 – Gridsome 的工作概述（来源：https://gridsome.org/docs/how-it-works/）](img/Figure_13.04_B17237.jpg)'
- en: 'Figure 13.4 – An overview of how Gridsome works (source: https://gridsome.org/docs/how-it-works/)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – Gridsome 的工作概述（来源：https://gridsome.org/docs/how-it-works/）
- en: 'There are two ways to run Gridsome:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Gridsome 有两种方式：
- en: '`gridsome develop`: This command starts a local development server and watches
    for changes'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gridsome develop`：此命令启动本地开发服务器并监视更改'
- en: '`gridsome build`: This command generates production-ready static files'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gridsome build`：此命令生成生产就绪的静态文件'
- en: You can learn more about how each command works and how they generate these
    static pages from the official documentation at [https://gridsome.org/docs/how-it-works/](https://gridsome.org/docs/how-it-works/).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从官方文档 [https://gridsome.org/docs/how-it-works/](https://gridsome.org/docs/how-it-works/)
    中了解更多关于每个命令的工作原理以及它们如何生成这些静态页面。
- en: Next, let’s look at some benefits of using Gridsome.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看使用 Gridsome 的一些好处。
- en: Benefits of Gridsome
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gridsome 的好处
- en: The benefits of using Gridsome are enormous and depend on the type of website
    and application intended. For statically generated websites, Gridsome proves to
    focus on speed by default and has good project structures for building enterprise-ready
    static websites and applications.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gridsome 的好处非常多，这取决于你打算构建的网站和应用类型。对于静态生成的网站，Gridsome 默认注重速度，并且拥有良好的项目结构，适用于构建企业级静态网站和应用。
- en: The following subsections describe some of the benefits of using Gridsome.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下小节描述了使用 Gridsome 的一些好处。
- en: Serverless and statically generated
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无服务器和静态生成
- en: Gridsome uses the Jamstack approach of building websites thats, which provides
    better performance and increased security, and reduces costs and complexity in
    your development stack. Gridsome generates static pages and websites using the
    Jamstack philosophy where the final product is a folder with static HTML files
    that can be deployed anywhere.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Gridsome 采用 Jamstack 方法构建网站，这提供了更好的性能和更高的安全性，并减少了你的开发栈中的成本和复杂性。Gridsome 使用 Jamstack
    哲学生成静态页面和网站，最终产品是一个包含静态 HTML 文件的文件夹，这些文件可以部署到任何地方。
- en: Easy to install and use
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 易于安装和使用
- en: Gridsome is very easy to install and simple to start using. It comes with a
    CLI, which is a command-line tool that helps you to create Gridsome projects effortlessly.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Gridsome非常容易安装，并且使用起来简单。它附带了一个CLI（命令行工具），它可以帮助你轻松创建Gridsome项目。
- en: 'You can install Gridsome by running the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来安装Gridsome：
- en: '[PRE8]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once the CLI has been installed, you can use it to create as many Gridsome projects
    as you want in the future.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦CLI被安装，你就可以使用它来创建你想要的任意数量的Gridsome项目。
- en: Organized project structure
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有序的项目结构
- en: One of the challenges of enterprise projects is the project structure, as discussed
    in previous chapters. Gridsome solves this problem by helping you structure your
    enterprise project with a predictive project structure.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 企业项目的一个挑战是项目结构，如前几章所述。Gridsome通过帮助你使用预测性项目结构来解决这个问题。
- en: We will go over the important files and folders that make up the Gridsome project
    in the *Understanding the Gridsome folder* *structure* section.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*理解Gridsome文件夹结构*部分中介绍构成Gridsome项目的关键文件和文件夹。
- en: Automatic routing
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动路由
- en: Automatic routing is a very important feature in the frontend development industry,
    starting with Nuxt where routes are automatically generated as you add files and
    folders to the `pages` folder.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 自动路由是前端开发行业中的一个非常重要的特性，从Nuxt开始，当你向`pages`文件夹添加文件和文件夹时，路由会自动生成。
- en: Gridsome also makes it super easy to create routing with the automatic routing
    feature. Routes are generated automatically whenever there’s a file or new folder
    in the `src/pages` folder. This is similar to how Nuxt works, as discussed earlier.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Gridsome也通过自动路由功能使得创建路由变得非常简单。每当在`src/pages`文件夹中有新文件或新文件夹时，路由会自动生成。这与之前讨论的Nuxt的工作方式类似。
- en: Code splitting/pre-fetching
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码拆分/预取
- en: With the integration of code splitting and pre-fetching in Gridsome, navigation
    in a Gridsome website becomes super fast because any link you click on has already
    been prefetched before you clicked on it.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Gridsome中集成代码拆分和预取，Gridsome网站的导航变得超级快，因为你在点击之前，任何链接都已经预先获取。
- en: Additionally, the code-splitting feature helps in increasing the performance
    and loading speed of a Gridsome website because it allows the user to only load
    only the JavaScript that is needed to only load the requested page and load the
    others on demand.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，代码拆分功能有助于提高Gridsome网站的性能和加载速度，因为它允许用户只加载请求页面上需要的JavaScript，其他内容按需加载。
- en: Markdown file support
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持Markdown文件
- en: Using markdown in Gridsome is the easiest way to automate your content management.
    You can create content in the form of blog posts, articles, or anything described
    in its own `.md` (markdown extension) file. These markdown files will be grouped
    and consumed by Gridsome to generate individual HTML files.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gridsome中使用Markdown是最容易实现内容自动管理的方式。你可以以博客文章、文章或其他任何形式创建内容，这些内容以自己的`.md`（Markdown扩展名）文件描述。这些Markdown文件将被分组并由Gridsome消费以生成单独的HTML文件。
- en: Now that we have seen the benefits of using Gridsome, let’s see how to create
    a Gridsome app in the next section.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了使用Gridsome的好处，接下来我们将看到如何在下一节中创建一个Gridsome应用。
- en: Creating a Gridsome app
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Gridsome应用
- en: This section will introduce you to a practical approach to developing applications
    with Gridsome. Before we delve in, let’s explore a few critical concepts in developing
    enterprise-ready applications with Gridsome.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍使用Gridsome开发应用程序的实用方法。在我们深入之前，让我们探索一些使用Gridsome开发企业级应用程序的关键概念。
- en: Creating a Gridsome application
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Gridsome应用
- en: 'You can easily create a Gridsome application in different ways, but the recommended
    way is to use any of the following commands:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式轻松创建Gridsome应用，但推荐的方式是使用以下任意一条命令：
- en: '[PRE9]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, move into the created a Gridsome project and serve your newly created
    Gridsome project with the following command:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，进入创建的Gridsome项目，使用以下命令来运行你新创建的Gridsome项目：
- en: '[PRE10]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It’s important that you replace `<project-name>` with an actual project name.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，你需要将`<project-name>`替换为实际的项目名称。
- en: Now that we have our newly Gridsome project generated for us, let’s explore
    the different folders and files that come with the project.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们生成了新的Gridsome项目，让我们探索项目附带的不同文件夹和文件。
- en: Understanding the Gridsome folder structure
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解Gridsome文件夹结构
- en: When you scaffold a new project using any of the preceding commands, it comes
    with a lot of overwhelming folders and files. But in this section, we will explore
    some of the important folders and files within the newly created Gridsome project.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用任何前面的命令创建新项目时，它将附带许多令人眼花缭乱的文件夹和文件。但在这个部分，我们将探索新创建的Gridsome项目中的重要文件夹和文件。
- en: 'Furthermore, some of these files and folders are vital and require that some
    of the folder names and filenames remain unchanged without additional configuration.
    Here is what the Gridsome folder structure looks like:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些这些文件和文件夹至关重要，需要某些文件夹名称和文件名保持不变，无需额外配置。以下是Gridsome文件夹结构的样子：
- en: "![Figure 13.5 – The Gridsome folder stru\uFEFFcture](img/Figure_13.05_B17237.jpg)"
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5 – Gridsome文件夹结构](img/Figure_13.05_B17237.jpg)'
- en: Figure 13.5 – The Gridsome folder structure
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – Gridsome文件夹结构
- en: Let’s go over some of the important folders in the following subsections.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下小节中回顾一些重要的文件夹。
- en: pages
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pages
- en: The `pages` folder is one of the most important folders in Gridsome as it is
    responsible for automatic routing and works exactly the same as in Nuxt except
    each page will be generated statically and have its own `index.html` file with
    markup.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`pages`文件夹是Gridsome中最重要的文件夹之一，因为它负责自动路由，并且与Nuxt的工作方式完全相同，除了每个页面都将生成静态的，并且有自己的`index.html`文件和标记。'
- en: 'There are two options for creating pages in Gridsome:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gridsome中创建页面有两种选项：
- en: '**File-based pages**:'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于文件的页面**：'
- en: 'When creating your pages with single file components (a single `.vue` file),
    then you should use the filesystem. Any single file component found in the `src/pages`
    directory will automatically be converted into its own route or URL. The file
    location is used to generate the URL, and you can see it in the following example:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用单个文件组件（单个`.vue`文件）创建页面时，您应该使用文件系统。`src/pages`目录中找到的任何单个文件组件都将自动转换为它自己的路由或URL。文件位置用于生成URL，您可以在以下示例中看到它：
- en: '[PRE11]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding page structure will be converted into the following:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 上述页面结构将被转换为以下结构：
- en: '[PRE12]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, let’s explore the second option of creating pages in Gridsome called programmatic
    pages.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索Gridsome中创建页面的第二种选项，即程序化页面。
- en: '**Programmatic pages**:'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**程序化页面**：'
- en: The `createPages` hook, located in the `gridsome.server.js` file, can be used
    to generate programmatic pages. This is useful if you need to manually create
    pages from an external API without using Gridsome’s built-in GraphQL data layer.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`gridsome.server.js`文件中的`createPages`钩子可以用于生成程序化页面。如果您需要手动从外部API创建页面而不使用Gridsome内置的GraphQL数据层，这将非常有用。
- en: 'You can programmatically create a page by implementing the `createPages` hook,
    as shown in the following code block:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过实现`createPages`钩子来程序化创建一个页面，如下面的代码块所示：
- en: '[PRE13]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can also create dynamic pages using the same `createPages` hook as shown
    earlier.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用之前展示的相同`createPages`钩子来创建动态页面。
- en: Templates
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模板
- en: Gridsome uses templates to display nodes or single pages of collections. When
    you create a template file, Gridsome will try to locate a file with the same name
    as the collection if not specified in the template config. Often, templates are
    mapped to collections for displaying information.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Gridsome使用模板来显示节点或集合的单个页面。当您创建一个模板文件时，Gridsome会尝试定位一个与集合同名的文件，如果模板配置中没有指定。通常，模板会被映射到集合以显示信息。
- en: 'Here is an example of displaying a post title from a GraphQL query using templates:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用模板从GraphQL查询中显示帖子标题的示例：
- en: '[PRE14]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Templates are very important in Gridsome as they are a way to present data pages
    in their own URLs. You can learn more advanced use cases of templates from the
    documentation at [https://gridsome.org/docs/templates/](https://gridsome.org/docs/templates/).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 模板在Gridsome中非常重要，因为它们是数据页面在其自己的URL中展示的方式。您可以从[https://gridsome.org/docs/templates/](https://gridsome.org/docs/templates/)的文档中了解更多高级模板用法。
- en: Layouts
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 布局
- en: Layouts are Vue components that are used inside pages and templates to wrap
    the content. You can use a layout to create different structures for your website.
    It works exactly like layouts in Nuxt.js.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 布局是Vue组件，用于在页面和模板中包裹内容。您可以使用布局为您的网站创建不同的结构。它的工作方式与Nuxt.js中的布局完全相同。
- en: 'Usually, layouts are used as follows in pages:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，布局在页面中的使用方式如下：
- en: '[PRE15]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In Gridsome, layouts files are global and do not need to be imported before
    you start using them. There are more important files and folders that come with
    the Gridsome project, and as your project grows, you will quickly discover that
    you have added even more files and folders.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Gridsome 中，布局文件是全局的，在使用之前不需要导入。Gridsome 项目附带更多重要的文件和文件夹，随着你的项目增长，你将很快发现你添加了更多的文件和文件夹。
- en: However, the previously mentioned folders are the important folders and their
    names should not be changed as you add more files and folders to your project.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，之前提到的文件夹是重要的文件夹，当你在项目中添加更多文件和文件夹时，它们的名称不应更改。
- en: Summary
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored every important detail about Nuxt.js. You learned
    about the nitty-gritty of Nuxt.js and how to build and deliver enterprise SSR
    projects with Vue.js 3\. Additionally, we explored Gridsome, the super fast Jamstack
    framework for building statically generated websites.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了关于 Nuxt.js 的每一个重要细节。你学习了 Nuxt.js 的细节以及如何使用 Vue.js 3 构建和交付企业级 SSR 项目。此外，我们还探讨了
    Gridsome，这是一个用于构建静态生成网站的超级快速 Jamstack 框架。
- en: We also covered the benefits of using Nuxt and Gridsome. Then, we saw how to
    create an app using both of these frameworks. Finally, we explored the folder
    structures of Nuxt and Gridsome.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了使用 Nuxt 和 Gridsome 的好处。然后，我们看到了如何使用这两个框架创建一个应用。最后，我们探讨了 Nuxt 和 Gridsome
    的文件夹结构。
