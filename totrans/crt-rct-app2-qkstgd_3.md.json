["```js\nconst foo = () => {\n  doSomething();\n  doSomethingElse();\n}\n```", "```js\nvar foo = function() {\n  doSomething();\n  doSomethingElse();\n}\n```", "```js\nfunction foo() {\n  doSomething();\n  doSomethingElse();\n}\n```", "```js\nconst HelloWorld = () => (<div>Hello World</div>);\n```", "```js\nfunction HelloWorld() {\n  return React.createElement('div', null, 'Hello World');\n}\n```", "```js\nconst HelloWorld = props => (<div>Hello {props.name}</div>);\n```", "```js\nfunction HelloWorld(props) {\n  return React.createElement(\"div\", null, `Hello ${props.name}!`);\n}\n```", "```js\nimport React from \"react\";\nimport \"./Divider.css\";\n\nfunction Divider() {\n return React.createElement(\n \"div\",\n { className: \"Divider\" },\n React.createElement(\"hr\")\n );\n}\n\nexport default Divider;\n```", "```js\nhr {\n  border: 0;\n  height: 1px;\n  background-image: linear-gradient(\n    to right,\n    rgba(0, 0, 0, 0),\n    rgba(0, 0, 0, 0.8),\n    rgba(0, 0, 0, 0)\n  );\n}\n```", "```js\nimport Divider from \"./Divider\";\n```", "```js\n  renderItems() {\n    return this.state.items.map(description => (\n      <div key={\"div-\" + description}>\n        <Todo\n          key={description}\n          description={description}\n          removeTodo={this.removeTodo}\n        />\n        <Divider key={\"divide-\" + description}/>\n      </div>\n    ));\n  }\n```", "```js\n  renderItems() {\n    return this.state.items.map(description =>\n      React.createElement(\"div\", { key: \"div-\" + description }, [\n        React.createElement(Todo, {\n          key: description,\n          description: description,\n          removeTodo: this.removeTodo\n        }),\n        React.createElement(Divider, { key: \"divider-\" + description })\n      ])\n    );\n  }\n  render() {\n    return React.createElement(\"div\", { className: \"TodoList\" }, [\n      React.createElement(NewTodo, { addTodo: this.addTodo }),\n      this.renderItems()\n    ]);\n  }\n```", "```js\nfunction sayHello(name) {\n  console.log(`Hello ${name}!`);\n}\n```", "```js\nvar sayHello = function(name) {\n  console.log(`Hello ${name}!`);\n}\n```", "```js\nsayHello('Mason');\n```", "```js\nconst sayHello = name => {\n console.log(`Hello ${name}!`);\n};\n```", "```js\nconst foo = () => { return \"Hi!\"; }\n```", "```js\nconst foo = name => { return `Hi ${name}!` };\n```", "```js\nconst foo = (greeting, name) => { return `${greeting} ${name}!`; } \n```", "```js\nconst foo = (greeting, name) => `${greeting} ${name}`;\n```", "```js\nconst foo = (greeting, name) => {\n    const message = greeting + \" \" + name + \"!\";\n    return message;\n};\n```", "```js\nconst App = () => (\n  <div className=\"App\">\n    <h2>Todoifier</h2>\n    <br />\n    <TodoList />\n  </div>\n);\n```", "```js\nconst details = {\n  header: \"Todoifier\",\n  headerColor: \"red\"\n};\n```", "```js\nconst { header } = details;\n```", "```js\nconsole.log(\"appName is \" + appName);\n```", "```js\nconst App = () => (\n  <div className=\"App\">\n    <h2>{appName}</h2>\n    <br />\n    <TodoList />\n  </div>\n);\n```", "```js\nconst headerDisplay = ({ header: title, headerColor: color }) => (\n  <h2 style={{ color: color }}>{title}</h2>\n);\n```", "```js\nconst App = () => (\n  <div className=\"App\">\n    {headerDisplay(details)}\n    <br />\n    <TodoList />\n  </div>\n);\n```", "```js\nconst [item1, item2, ...rest] = [\n  \"Write some code\",\n  \"Change the world\",\n  \"Take a nap\",\n  \"Eat a cookie\"\n];\nthis.state = {\n  items: [item1, item2, rest.join(\" and \")]\n};\n```", "```js\nconst sayHello = name => {\n  console.log(`Hello ${name}!`);\n};\n```", "```js\nconst sayHello = (name = \"Unknown\") => {\n  console.log(`Hello ${name}!`);\n};\n```", "```js\nsayHello();\n```", "```js\nconst headerDisplay = ({\n  header: title = \"Todo List\",\n  headerColor: color = \"blue\"\n}) => <h2 style={{ color: color }}>{title}</h2>;\n```", "```js\nconst App = () => (\n  <div className=\"App\">\n    {headerDisplay({})}\n    <br />\n    <TodoList />\n  </div>\n);\n```", "```js\n    const [item1, item2, ...rest] = [\n      \"Write some code\",\n      \"Change the world\",\n      \"Take a nap\",\n      \"Eat a cookie\"\n    ];\n```", "```js\n  addTodo(item) {\n    this.setState({ items: [...this.state.items, item] });\n  }\n```", "```js\nthis.setState({ items: this.state.items.concat(item) });\n```", "```js\nconst moreDetails = {\n  ...details,\n  header: \"Best Todoifier\",\n  background: \"black\"\n};\n```", "```js\nconst headerDisplay = ({\n  header: title = \"Todo List\",\n  headerColor: color = \"blue\",\n  background: background = \"none\"\n}) => <h2 style={{ color: color, background: background }}>{title}</h2>;\n```", "```js\nconst App = () => (\n  <div className=\"App\">\n    {headerDisplay(moreDetails)}\n    <br />\n    <TodoList />\n  </div>\n);\n```", "```js\nconst moreDetails = Object.assign({}, details, {\n  header: \"Best Todoifier\",\n  background: \"black\"\n});\n```", "```js\nimport React, { Fragment, Component } from \"react\";\n```", "```js\n renderItems() {\n return this.state.items.map(description => (\n <Fragment key={\"item-\" + description}>\n  <Todo\n   key={description}\n   description={description}\n   removeTodo={this.removeTodo}\n  />\n <Divider key={\"divide-\" + description} />\n  </Fragment>\n ));\n }\n```", "```js\nimport React, { Fragment, Component } from \"react\";\nimport Todo from \"./Todo\";\nimport \"./TodoList.css\";\n\nimport NewTodo from \"./NewTodo\";\nimport Divider from \"./Divider\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    const [item1, item2, ...rest] = [\n      \"Write some code\",\n      \"Change the world\",\n      \"Take a nap\",\n      \"Eat a cookie\"\n    ];\n    this.state = {\n      items: [item1, item2, rest.join(\" and \")]\n    };\n\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n  addTodo(item) {\n    this.setState({ items: [...this.state.items, item] });\n  }\n  removeTodo(removeItem) {\n    const filteredItems = this.state.items.filter(description => {\n      return description !== removeItem;\n    });\n    this.setState({ items: filteredItems });\n  }\n  renderItems() {\n    return this.state.items.map(description => (\n      <Fragment key={\"item-\" + description}>\n        <Todo\n          key={description}\n          description={description}\n          removeTodo={this.removeTodo}\n        />\n        <Divider key={\"divide-\" + description} />\n      </Fragment>\n    ));\n  }\n  render() {\n    return (\n      <div className=\"TodoList\">\n        <NewTodo addTodo={this.addTodo} />\n        {this.renderItems()}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n```", "```js\nimport React from \"react\";\nimport \"./App.css\";\n\nimport TodoList from \"./TodoList\";\n\nconst details = {\n header: \"Todoifier\",\n headerColor: \"red\"\n};\n\nconst moreDetails = {\n ...details,\n header: \"Best Todoifier\",\n background: \"black\"\n};\n\nconst App = () => (\n <div className=\"App\">\n {header(moreDetails)}\n <br />\n <TodoList />\n </div>\n);\n\nconst header = ({\n header: title = \"Todo List\",\n headerColor: color = \"blue\",\n background: background = \"none\"\n}) => <h2 style={{ color: color, background: background }}>{title}</h2>;\n\nexport default App;\n```"]