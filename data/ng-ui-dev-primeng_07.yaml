- en: Endless Menu Variations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无尽的菜单变体
- en: In this chapter, you will learn about several menu variations. PrimeNG's menus
    fulfill all major requirements. These days, every website contains menus. Usually,
    a menu is presented to a user as a list of links to be navigated or commands to
    be executed. Menus are sometimes organized hierarchically, allowing navigation
    through different levels of the menu structure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到几种菜单变体。PrimeNG的菜单满足所有主要要求。如今，每个网站都包含菜单。通常，菜单被呈现给用户作为要导航或执行的命令的链接列表。菜单有时是按层次组织的，允许通过菜单结构的不同级别进行导航。
- en: Arranging menu items in logical groups makes it easy for users to quickly locate
    the related tasks. They come with various facets such as static, dynamic, tiered,
    hybrid, iPod-styled, and so on, and leave nothing to be desired. Readers will
    face a lot of recipes that discuss the menu's structure, configuration options,
    customizations, and integration with other components. Menu-like components helping
    in wizards and workflows will be explained as well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将菜单项排列成逻辑组，使用户可以快速找到相关任务。它们具有各种方面，如静态、动态、分层、混合、iPod风格等，无所不包。读者将面临许多讨论菜单结构、配置选项、自定义以及与其他组件集成的示例。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating programmatic menus with the MenuModel API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MenuModel API创建程序化菜单
- en: Statically and dynamically positioned menus
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态和动态定位的菜单
- en: Accessing commands via MenuBar
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过MenuBar访问命令
- en: ContextMenu with nested items
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有嵌套项的上下文菜单
- en: SlideMenu - menu in the iPod style
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SlideMenu - iPod风格的菜单
- en: TieredMenu - sub-menus in nested Overlays
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TieredMenu - 嵌套覆盖中的子菜单
- en: MegaMenu - the multicolumn menu
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MegaMenu - 多列菜单
- en: PanelMenu - hybrid of Accordion and Tree
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PanelMenu - 手风琴和树的混合
- en: TabMenu - menu items as tabs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TabMenu - 菜单项作为选项卡
- en: Breadcrumb - providing contextual information about page hierarchy
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breadcrumb - 提供有关页面层次结构的上下文信息
- en: Creating programmatic menus using the MenuModel API
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MenuModel API创建程序化菜单
- en: PrimeNG provides a `MenuModel` API, which will be shared by all menu components
    to specify menu items and sub-menus. The core item of the `MenuModel` API is the
    `MenuItem` class with options such as `label`, `icon`, `url`, child menu items
    with the `items` option, and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG提供了一个`MenuModel` API，它将被所有菜单组件共享，用于指定菜单项和子菜单。`MenuModel` API的核心项目是`MenuItem`类，具有`label`、`icon`、`url`、带有`items`选项的子菜单项等选项。
- en: 'Let''s take an example of the Menu component to represent a common toolbar
    user interface. The Menu component is binding an array of the `MenuItem` classes
    as items through the `model` property as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以菜单组件为例，代表常见的工具栏用户界面。菜单组件通过`model`属性绑定`MenuItem`类的数组作为项目，如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`MenuItem` is the key item in the `MenuModel` API. It has the following list
    of properties. Each property is described with the type, default value, and its
    description:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`MenuItem`是`MenuModel` API中的关键项目。它具有以下属性列表。每个属性都用类型、默认值和描述进行描述：'
- en: '| **Name** | **Type** | **Default** | **Description** |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **类型** | **默认** | **描述** |'
- en: '| `label` | `string` | `null` | Text of the item. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `label` | `字符串` | `null` | 项目的文本。 |'
- en: '| `icon` | `string` | `null` | Icon of the item. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `icon` | `字符串` | `null` | 项目的图标。 |'
- en: '| `command` | `function` | `null` | Callback to execute when the item is clicked.
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `command` | `函数` | `null` | 单击项目时要执行的回调。'
- en: '| `url` | `string` | `null` | External link to navigate when the item is clicked.
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `url` | `字符串` | `null` | 单击项目时要导航到的外部链接。 |'
- en: '| `routerLink` | `array` | `null` | RouterLink definition for internal navigation.
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `routerLink` | `数组` | `null` | 用于内部导航的RouterLink定义。 |'
- en: '| `items` | `array` | `null` | An array of children menu items. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `items` | `数组` | `null` | 子菜单项的数组。'
- en: '| `expanded` | `boolean` | `false` | Visibility of sub-menu. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `expanded` | `boolean` | `false` | 子菜单的可见性。 |'
- en: '| `disabled` | `boolean` | `false` | When set as `true`, disables the menu
    item. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `disabled` | `boolean` | `false` | 当设置为`true`时，禁用菜单项。 |'
- en: '| `visible` | `boolean` | `true` | Whether the DOM element of menu item is
    created or not. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `visible` | `boolean` | `true` | 菜单项的DOM元素是否已创建。 |'
- en: '| `target` | `string` | `null` | Specifies where to open the linked document.
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `target` | `string` | `null` | 指定打开链接文档的位置。 |'
- en: Table 1.0
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.0
- en: Menu actions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单操作
- en: The menu items with plain read-only labels and icons are not really useful.
    The Menu component with user actions need to perform business implementations
    or navigations to other resources. The major components of menu actions are command
    invocation and navigations. This can be achieved through the `url` and `routerLink`
    properties of the `MenuItem` interface.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 具有纯文本只读标签和图标的菜单项并不是真正有用的。具有用户操作的菜单组件需要执行业务实现或导航到其他资源。菜单操作的主要组件是命令调用和导航。这可以通过`MenuItem`接口的`url`和`routerLink`属性来实现。
- en: 'The example usage of URL and router link options of the `MenuItem` API would
    be as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`MenuItem` API的URL和路由链接选项的示例用法如下：'
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the following sections, you will see how this `MenuModel` API is going to
    be used in various kinds of Menu components.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，您将看到`MenuModel` API将如何在各种菜单组件中使用。
- en: Statically and dynamically positioned menus
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态和动态定位的菜单
- en: Menu is a navigation or command component that supports dynamic and static positioning.
    This is a basic Menu component among all variations of Menu components. The menus
    are statically positioned by default, but they are made dynamic by providing the
    `target` attribute. The static positioned menus are attached to the page body
    as target (that is, `appendTo="body"` ), whereas assigning to other elements create
    dynamic-positioned menus.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单是一个支持动态和静态定位的导航或命令组件。这是所有菜单组件中的基本菜单组件。菜单默认是静态定位的，但通过提供`target`属性可以使其变为动态定位。静态定位的菜单附加到页面主体作为目标（即`appendTo="body"`），而分配给其他元素则创建动态定位的菜单。
- en: 'A basic menu example, which holds project document or file types of menu items,
    would be as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的菜单示例，包含项目文档或文件类型的菜单项，如下所示：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The list of menu items needs to be organized within a component class. For
    example, the root menu item titled `Edit` will have nested items as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在一个组件类中进行组织。例如，名为“编辑”的根菜单项将有如下嵌套项：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot shows a snapshot result of the basic menu (with all
    menu items) example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了基本菜单（包含所有菜单项）示例的快照结果：
- en: '![](assets/075dec88-b8b0-43b3-b3e7-1510ddec1bb1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/075dec88-b8b0-43b3-b3e7-1510ddec1bb1.png)'
- en: From the preceding snapshot, you can observe that the Menu component is displayed
    in the inline format. But, this behavior can be changed by enabling the `popup`
    property in order to display as overlay.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的快照中，您可以观察到菜单组件以内联格式显示。但是，通过启用`popup`属性可以改变此行为，以便以覆盖的形式显示。
- en: 'The Menu component defines `toggle`, `show`, and `hide` methods for the `Menu`
    API. The detailed description of each method listed in tabular format is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单组件为`Menu` API定义了`toggle`、`show`和`hide`方法。每个方法的详细描述如下表所示：
- en: '| **Name** | **Parameters** | **Description** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **参数** | **描述** |'
- en: '| `toggle` | `event: browser event` | Toggles the visibility of the pop-up
    menu. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `toggle` | `event: 浏览器事件` | 切换弹出菜单的可见性。 |'
- en: '| `show` | `event: browser event` | Displays the pop-up menu. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `show` | `event: 浏览器事件` | 显示弹出菜单。 |'
- en: '| `hide` | - | Hides the pop-up menu. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `hide` | - | 隐藏弹出菜单。 |'
- en: Table 2.0The complete demo application with instructions is available on GitHub
    at
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.0 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menu).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menu).'
- en: Accessing commands via MenuBar
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过MenuBar访问命令
- en: 'MenuBar component is a group of horizontal menu components with nested sub-menus
    (or a component with group of drop-down menus for page navigations). Like any
    other Menu component, MenuBar uses a common menu model API which holds a list
    of the `MenuItem` interfaces. There is no limit for nested levels of sub-menus.
    Let''s see a basic MenuBar example for window or application-specific menus. This
    provides an access for common functions such as opening files, edit operations,
    interacting with an application, displaying help documentation, and so on, and
    would be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: MenuBar组件是一组水平菜单组件，带有嵌套子菜单（或用于页面导航的下拉菜单组件）。与任何其他菜单组件一样，MenuBar使用一个包含`MenuItem`接口列表的常见菜单模型API。嵌套子菜单的级别没有限制。让我们看一个用于窗口或应用程序特定菜单的基本MenuBar示例。这提供了对常见功能的访问，例如打开文件，编辑操作，与应用程序交互，显示帮助文档等，如下所示：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The list of menu items needs to be organized within a component class. For
    example, a root menu item titled `Edit` will have nested items as shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在组件类中进行组织。例如，名为“编辑”的根菜单项将具有如下所示的嵌套项：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows a snapshot result of the basic MenuBar (with
    all menu items) example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了基本MenuBar（带有所有菜单项）示例的快照结果：
- en: '![](assets/c3fbf422-2a5b-4d58-8d1c-0e4e60f02b44.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3fbf422-2a5b-4d58-8d1c-0e4e60f02b44.png)'
- en: The component skinning can be achieved through the `style` and `styleClass`
    properties. PrimeNG 4.1 allows custom content (form controls) by placing them
    inside the MenuBar tags.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 组件皮肤可以通过`style`和`styleClass`属性实现。PrimeNG 4.1允许通过将其放置在MenuBar标签内部来使用自定义内容（表单控件）。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menubar](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menubar).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menubar](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/menubar).'
- en: ContextMenu with nested items
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有嵌套项的上下文菜单
- en: ContextMenu is a menu with **Graphical User Interface** **(GUI)** representation
    that appears on top of your page just by right-clicking. By right-clicking, an
    Overlay menu is displayed on the target element. There are two types of Context
    menus, one for the document and the other for the specific component. Apart from
    these two, there is also a special integration with components such as DataTable.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ContextMenu是一个具有**图形用户界面** **(GUI)**表示的菜单，通过右键单击即可出现在页面顶部。通过右键单击，会在目标元素上显示一个覆盖菜单。有两种类型的上下文菜单，一种用于文档，另一种用于特定组件。除了这两种之外，还有与组件（如DataTable）的特殊集成。
- en: 'By default, the ContextMenu is attached to the document with the global setting.
    A basic Context menu example, which displays a document or file type menu, would
    be as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，ContextMenu附加到具有全局设置的文档。一个基本的上下文菜单示例，显示文档或文件类型菜单，如下所示：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The list of menu items needs to be organized within a component class. For
    example, a root menu item titled `File` will have nested items as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在组件类中进行组织。例如，名为“文件”的根菜单项将具有如下所示的嵌套项：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows a snapshot result of the basic Context menu
    (with all menu items) example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了基本上下文菜单（带有所有菜单项）示例的快照结果：
- en: '![](assets/5a208bbd-9fa6-4fc7-8ace-415efde36062.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5a208bbd-9fa6-4fc7-8ace-415efde36062.png)'
- en: The Context menu will disappear once you click on the outside of this component.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦单击此组件之外，上下文菜单将消失。
- en: Customized target for ContextMenu
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ContextMenu的自定义目标
- en: 'The default global settings of the Context menu can be changed using the `target`
    attribute (that is, the Context menu will be displayed on other elements other
    than the global document target). Let''s take a Context menu example where the
    Overlay or popup appears on top of the image element on right-click as shown here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`target`属性更改上下文菜单的默认全局设置（即，上下文菜单将显示在全局文档目标以外的其他元素上）。让我们来看一个上下文菜单示例，在右键单击图像元素时，覆盖或弹出窗口会出现在上面，如下所示：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, both next and previous operations can be performed from the Context
    menu just by defining the menu items array.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，只需定义菜单项数组，就可以从上下文菜单执行下一个和上一个操作。
- en: DataTable integration
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataTable集成
- en: In the previous section, you have seen how to integrate the context menu with
    other elements using the `target` property. But integration with the DataTable
    component is a different case which needs a special treatment. This combination
    is one of the frequently used use cases in web development.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，您已经看到如何使用`target`属性将上下文菜单与其他元素集成。但是与DataTable组件的集成是一个不同的情况，需要特殊处理。这种组合是Web开发中经常使用的用例之一。
- en: 'The DataTable provides reference to a Context menu using the `contextMenu`
    property (that is, the template reference variable of the Context menu should
    be assigned to DataTable''s `contextMenu` attribute). The Context menu integration
    with DataTable would be written as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: DataTable使用`contextMenu`属性提供对上下文菜单的引用（即，上下文菜单的模板引用变量应分配给DataTable的`contextMenu`属性）。上下文菜单与DataTable的集成将如下所示编写：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The Context menu model is bounded to an array of menu items such as `View`
    and `Delete` options as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文菜单模型绑定到菜单项数组，例如`View`和`Delete`选项，如下所示：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding example, we performed command actions which notify the user
    with messages. But in real time, all CRUD operations are in sync with the database.
    The following screenshot shows a snapshot result of the Context menu integration
    with DataTable component as an example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们执行了通知用户消息的命令操作。但在实时中，所有CRUD操作都与数据库同步。以下截图显示了上下文菜单与DataTable组件集成的快照结果。
- en: '![](assets/0797425e-5793-40b3-bcd5-339753234bf1.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0797425e-5793-40b3-bcd5-339753234bf1.png)'
- en: As per the preceding snapshot, the table row is selected on a right-click and
    Overlay appears on the row. The menu item selection can either do business logic
    or navigation to various web pages.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上面的快照，在右键单击并在行上出现覆盖时，表格行被选中。菜单项选择可以执行业务逻辑或导航到各种网页。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/contextmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/contextmenu).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/contextmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/contextmenu)。'
- en: SlideMenu – menu in the iPod style
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SlideMenu - iPod样式菜单
- en: 'SlideMenu is a component which displays sub-menus with slide animation effects.
    This kind of slide menu component is the best example of iPod style menu widgets.
    By default, the slide menu is displayed as an inline menu component. A basic slide
    menu example which displays a document or file type menu would be as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: SlideMenu是一个显示带有滑动动画效果的子菜单的组件。这种滑动菜单组件是iPod样式菜单小部件的最佳示例。默认情况下，滑动菜单显示为内联菜单组件。显示文档或文件类型菜单的基本滑动菜单示例如下：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The list of menu items needs to be organized with in a component class. For
    example, a root menu item titled `File` will have nested items as shown here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在组件类中进行组织。例如，名为“文件”的根菜单项将具有如下嵌套项：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows a snapshot result of the basic slide menu, which
    displays file menu items on the click of the File menu item as an example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了基本幻灯片菜单的快照结果，例如，单击文件菜单项时显示文件菜单项：
- en: '![](assets/1bd4f028-7ae4-419f-949a-64a45e994549.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1bd4f028-7ae4-419f-949a-64a45e994549.png)'
- en: As seen in the preceding snapshot, the slide menu is displayed in an inline
    format. It will be displayed in pop-up mode by enabling the `popup` property.
    At the bottom of the slide menu popup, a back button appears with the Back label,
    but this can also be customized using the `backLabel` property.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的快照所示，幻灯片菜单以内联格式显示。通过启用`popup`属性，可以以弹出模式显示。在幻灯片菜单弹出窗口底部，会出现一个带有“返回”标签的返回按钮，但也可以使用`backLabel`属性进行自定义。
- en: The slide menu is accessed using API methods such as `toggle`, `show`, and `hide`
    methods. The slide menu provides various animation effects with the default effect
    `easing-out`. This default behavior can changed using the `effect` property. Similarly,
    the default effect duration of a slide menu is 500 milliseconds, but this can
    be customized using the `effectDuration` property.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`toggle`、`show`和`hide`等API方法访问幻灯片菜单。幻灯片菜单提供各种动画效果，默认效果为`easing-out`。可以使用`effect`属性更改此默认行为。同样，幻灯片菜单的默认效果持续时间为500毫秒，但可以使用`effectDuration`属性进行自定义。
- en: The dimensions for any visual component is much needed and must be configured.
    Considering this standard, dimensions of Menu dimensions are configurable. The
    sub-menu width is controlled through the `menuWidth` property, which defaults
    to 180 (normally measured in pixels). Also the height of the scrollable area is
    controlled through the `viewportHeight` property with a default value of 175 pixels
    (that is, the scroll bar appears if the menu height is more than this default
    value).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可视组件的尺寸都是非常重要的，必须进行配置。考虑到这一标准，菜单尺寸是可配置的。子菜单宽度通过`menuWidth`属性控制，默认为180（通常以像素为单位）。同时，可滚动区域的高度通过`viewportHeight`属性控制，默认值为175像素（即，如果菜单高度超过此默认值，则会出现滚动条）。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/slidemenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/slidemenu).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/slidemenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/slidemenu).'
- en: TieredMenu – sub-menus in nested overlays
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层菜单 - 嵌套叠加的子菜单
- en: 'The TieredMenu component displays the sub-menus in a nested Overlays mode.
    By default, the slide menu is displayed as an inline menu component. A basic tiered
    menu example, which displays the document or file type menu would be as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: TieredMenu组件以嵌套叠加模式显示子菜单。默认情况下，幻灯片菜单显示为内联菜单组件。一个基本的分层菜单示例，显示文档或文件类型菜单，如下所示：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The list of menu items needs to be organized with in a component class. For
    example, a root menu item titled `File` will have nested items as shown here:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在组件类中进行组织。例如，名为“文件”的根菜单项将具有如下嵌套项：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot shows a snapshot result of the basic tiered menu example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了基本分层菜单示例的快照结果：
- en: '![](assets/64eb76e8-e9d2-46fe-8b0d-c76751eba177.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64eb76e8-e9d2-46fe-8b0d-c76751eba177.png)'
- en: As seen in the preceding snapshot, the slide menu is displayed in an inline
    format. It will be displayed in pop-up mode by enabling the `popup` property.
    PrimeNG 4.1 introduced the `appendTo` property to attach the Overlay. The slide
    menu is accessed using the API methods such as `toggle`, `show`, and `hide`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的快照所示，滑动菜单以内联格式显示。通过启用`popup`属性，它将以弹出模式显示。PrimeNG 4.1引入了`appendTo`属性以附加覆盖。可以使用API方法（如`toggle`、`show`和`hide`）访问滑动菜单。
- en: The main difference between slide menu and tiered menu components is that a
    slide menu displays the sub-menu by replacing the parent menu whereas a tiered
    menu displays the sub-menus in an Overlay mode. The API methods for both a slide
    menu and tiered menu with more details in a tabular format is explained in menu
    section *Table 2.0*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动菜单和分层菜单组件之间的主要区别在于，滑动菜单通过替换父菜单显示子菜单，而分层菜单以覆盖模式显示子菜单。有关滑动菜单和分层菜单的API方法以及更详细的表格格式，请参阅菜单部分*表2.0*。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tieredmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tieredmenu).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tieredmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tieredmenu)。'
- en: MegaMenu – the multicolumn menu
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MegaMenu - 多列菜单
- en: MegaMenu is like a drop-down menu that expands into a relatively large and complex
    interface rather than a simple list of commands. It displays the sub-menus of
    root items together. MegaMenu is formed with the nested menu items where each
    item's root item is a two-dimensional array which define columns in an Overlay
    menu.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: MegaMenu类似于一个下拉菜单，它展开成一个相对较大和复杂的界面，而不是一个简单的命令列表。它一起显示根项目的子菜单。MegaMenu由嵌套菜单项组成，其中每个项目的根项目是定义覆盖菜单中列的二维数组。
- en: 'A basic MegaMenu example of a retailer application to purchase clothing items
    would be written as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一个零售商应用程序的基本MegaMenu示例，用于购买服装项目，将如下所示：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The list of menu items needs to be organized with in a component class. For
    example, a root menu item titled Home & Furniture will have nested items as shown:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在组件类中进行组织。例如，名为“家居与家具”的根菜单项将具有如下嵌套项：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot shows a snapshot result of the basic MegaMenu (with
    all menu items) example:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了基本MegaMenu（带有所有菜单项）示例的快照结果：
- en: '![](assets/fdfeabdf-f978-427a-8536-2341726aef75.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fdfeabdf-f978-427a-8536-2341726aef75.png)'
- en: 'The default orientation of MegaMenu is horizontal. This can also be positioned
    in a vertical manner using the `orientation` attribute (that is, `orientation="vertical"`).
    The vertical MegaMenu looks like as the following snapshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: MegaMenu的默认方向是水平的。也可以使用`orientation`属性（即`orientation="vertical"`）以垂直方式定位。垂直MegaMenu如下快照所示：
- en: '![](assets/ecc6ecc5-94ad-4f88-8694-e8b5559bf42c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ecc6ecc5-94ad-4f88-8694-e8b5559bf42c.png)'
- en: PrimeNG 4.1 allows custom content (form controls) by placing them inside MegaMenu
    tags.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 4.1允许通过将它们放置在MegaMenu标签内来使用自定义内容（表单控件）。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/megamenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/megamenu).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/megamenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/megamenu)。'
- en: PanelMenu – hybrid of Accordion and Tree
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PanelMenu - 手风琴和树的混合体
- en: 'PanelMenu is a hybrid of vertical stacked Accordion and hierarchical Tree components.
    Each parent menu item has a toggleable panel; with the panel, it shows child menu
    items in a hierarchical Tree format. A basic panel menu example, which displays
    the document or file type menu would be as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: PanelMenu是垂直堆叠的手风琴和分层树组件的混合体。每个父菜单项都有一个可切换的面板；面板显示子菜单项以分层树格式显示。一个基本的面板菜单示例，显示文档或文件类型菜单，如下所示：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The list of menu items needs to be organized within a component class. For
    example, a root menu item titled Help will have nested items as shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在组件类中组织。例如，名为帮助的根菜单项将具有如下所示的嵌套项：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows a snapshot result of the basic panel menu example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了基本面板菜单示例的快照结果：
- en: '![](assets/d465a7d3-8147-42c3-b3e8-db4f1fcf8358.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d465a7d3-8147-42c3-b3e8-db4f1fcf8358.png)'
- en: The initial state of each menu item is controlled through the `expanded` attribute
    (that is, `expanded="true"`), which is available on the `MenuItem` interface level.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每个菜单项的初始状态通过`expanded`属性（即`expanded="true"`）进行控制，该属性在`MenuItem`接口级别上可用。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/panelmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/panelmenu).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/panelmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/panelmenu)。'
- en: TabMenu - menu items as tabs
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TabMenu - 菜单项作为选项卡
- en: TabMenu is a navigation/command component that displays the items as tab headers
    (that is, the parent root items are represented in the form of horizontal stacked
    tabs). On the click of each tab, you can perform all kinds of menu actions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: TabMenu是一个导航/命令组件，它将项目显示为选项卡标题（即，父根项目以水平堆叠的选项卡形式表示）。单击每个选项卡时，可以执行各种菜单操作。
- en: 'A basic tabbed menu example, which displays the PrimeNG website information
    in the form of various tabs, would be as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的选项卡菜单示例，以各种选项卡的形式显示PrimeNG网站信息，如下所示：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The list of menu items need to be organized within a component class. For example,
    PrimeNG''s various details are explained in different horizontal tabs using menu
    items as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项列表需要在组件类中组织。例如，使用菜单项如下，解释了PrimeNG的各种详细信息：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following screenshot shows a snapshot result of the tabbed panel menu example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了选项卡面板菜单示例的快照结果：
- en: '![](assets/e5385a16-c2b4-4f4e-8568-754c9545bfcd.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e5385a16-c2b4-4f4e-8568-754c9545bfcd.png)'
- en: By default, the TabMenu displays or activates on the first tab. But the default
    visibility or initial display of a tab can be changed with the help of the `activeItem`
    property.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，TabMenu显示或激活第一个选项卡。但是，可以通过`activeItem`属性来更改选项卡的默认可见性或初始显示。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tabmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tabmenu).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tabmenu](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/tabmenu)。'
- en: Breadcrumb – providing contextual information about the page hierarchy
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面包屑 - 提供有关页面层次结构的上下文信息
- en: The Breadcrumb component provides contextual information about the page hierarchy.
    It allows you to keep track of their locations in programs, documents, and websites.
    This typically appears as horizontal on top of the web page separated by a greater
    than operator (>) as a hierarchy separator. This menu variation consists of a
    common menu model API to define its items. These menu items (collection of menu
    items) are connected to a `model` property.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 面包屑组件提供有关页面层次结构的上下文信息。它允许您跟踪程序、文档和网站中的位置。这通常显示为水平的，位于网页顶部，由大于号(>)作为层次分隔符。这种菜单变体由一个常见的菜单模型API来定义其项目。这些菜单项（菜单项的集合）与`model`属性相连。
- en: 'A basic Breadcrumb example of an e-commerce application to purchase electrical
    items would be as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一个电子商务应用程序的基本面包屑示例，用于购买电器，如下所示：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The item''s `model` property is an array of the `MenuItem` type. The possible
    options or properties for the `MenuModel` API are described in the beginning of
    the section. In this example, we define both label and command actions for menu
    items. The list of menu items need to be organized to display items as shown here:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的`model`属性是`MenuItem`类型的数组。`MenuModel` API的可能选项或属性在本节的开头进行了描述。在这个例子中，我们为菜单项定义了标签和命令操作。菜单项的列表需要组织起来，以显示如下所示的项目：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot shows a snapshot result of the basic Breadcrumb as
    an example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了基本面包屑的快照结果：
- en: '![](assets/001b9beb-a621-49aa-b994-9a023816d7ce.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/001b9beb-a621-49aa-b994-9a023816d7ce.png)'
- en: 'The Home icon is also part of the menu items and this can be customized using
    the `home` property of the `MenuItem` type. So, all features of the menu items
    apply to the Home menu item as well. The `home` property has to be defined for
    the Breadcrumb component as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 主页图标也是菜单项的一部分，可以使用`MenuItem`类型的`home`属性进行自定义。因此，所有菜单项的功能也适用于主页菜单项。`home`属性必须为面包屑组件定义如下：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The component class holds the Home menu item as shown here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 组件类如下所示包含主页菜单项：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is a component supported customized icon property, which can be defined
    from `MenuItem`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个支持自定义图标属性的组件，可以从`MenuItem`中定义。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/breadcrumb](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/breadcrumb).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/breadcrumb](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter7/breadcrumb).'
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At the end of this chapter, you now know how to deal with various menu components
    and how to put them on a page for a particular use case. At first, we started
    with the MenuModel API to create an array of items, after that the menu component
    was introduced as the basic component, then MenuBar is moved to MegaMenu components
    with nested complex sub-menus, and followed by other menu variations such as slide
    menu, tiered menu, and panel menu.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您现在知道如何处理各种菜单组件，以及如何将它们放在页面上以满足特定的用例。首先，我们从MenuModel API开始创建一个项目数组，然后介绍了菜单组件作为基本组件，然后将MenuBar移动到具有嵌套复杂子菜单的MegaMenu组件，然后是其他菜单变体，如滑动菜单、分层菜单和面板菜单。
- en: Later, we moved to the Context menu and Breadcrumb components as another kind
    of menu operations. In the next chapter, you will see a chart model as an API,
    and how to create awesome charts and maps for a visual representation of the data.
    All these components are explained with all possible features in a step-by-step
    approach.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将转向上下文菜单和面包屑组件，作为另一种菜单操作。在下一章中，您将看到一个图表模型作为API，以及如何为数据的可视表示创建出色的图表和地图。所有这些组件都是通过逐步方法解释的，包括所有可能的功能。
