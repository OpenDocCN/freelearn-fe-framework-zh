- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Deploying Microfrontends to Static Storage
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将微前端部署到静态存储
- en: Things start to get interesting from this chapter on, because we are now stepping
    out of the frontend/React world and moving into the areas of cloud and full life
    cycle engineering.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章开始，事情开始变得有趣，因为我们现在正走出前端/React 世界，进入云和全生命周期工程的领域。
- en: As you may recollect from earlier chapters of this book, one of the primary
    goals of a microfrontend architecture is to ensure that we don’t need to deploy
    the entire application each time a small change is made but instead only deploy
    the micro apps that have changed. Hence, a book on microfrontends wouldn’t be
    deemed complete unless we covered the critical topic of deploying our microfrontend
    to production in the right way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从本书的早期章节所回忆的那样，微前端架构的一个主要目标是确保我们不需要在每次进行小幅度修改时部署整个应用，而是只需部署已更改的微应用。因此，一本关于微前端的书籍如果不涵盖将我们的微前端正确部署到生产环境的关键主题，就不能被认为是完整的。
- en: When it comes to deploying SPAs, usually we run the webpack `build` command
    to generate our JavaScript bundles and assets in the `/build` or `/dist` folder,
    which we then simply copy to a static website hosting provider to make our app
    available to our users. However, deploying microfrontends is a bit more complex.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到部署单页应用（SPAs）时，我们通常运行 webpack 的 `build` 命令来生成我们的 JavaScript 打包文件和资产，存放在 `/build`
    或 `/dist` 文件夹中，然后我们只需将其复制到静态网站托管提供商那里，以便我们的应用对用户可用。然而，部署微前端要复杂得多。
- en: 'In this chapter, we will see how to deploy the client-side-rendered microfrontend
    we built in [*Chapter 5*](B18987_05.xhtml#_idTextAnchor073) to a static storage
    cloud provider such as Firebase. We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何将我们在 [*第 5 章*](B18987_05.xhtml#_idTextAnchor073) 中构建的客户端渲染微前端部署到静态存储云提供商，如
    Firebase。我们将涵盖以下主题：
- en: Understanding what static storage is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解什么是静态存储
- en: Setting up Firebase Hosting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Firebase 托管
- en: Learning how to build production bundles with Nx
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 Nx 构建 production 打包
- en: Learning how to only build and deploy modified apps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何仅构建和部署已修改的应用
- en: By the end of this chapter, we will have our microfrontend apps running on Firebase,
    and we will have also created scripts that only build and deploy the apps that
    have been modified.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将使我们的微前端应用在 Firebase 上运行，并且我们还将创建仅构建和部署已修改应用的脚本。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'As we go through the code examples in this chapter, we will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们浏览本章中的代码示例时，我们需要以下内容：
- en: A PC, Mac, or Linux desktop/laptop with at least 8 GB of RAM (16 GB preferred)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台至少有 8 GB RAM（16 GB 更佳）的 PC、Mac 或 Linux 桌面/笔记本电脑
- en: An Intel chipset i5+ or Mac M1+ chipset
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔芯片组 i5+ 或 Mac M1+ 芯片组
- en: At least 256 GB of free hard disk storage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少 256 GB 的空闲硬盘存储空间
- en: 'You will also need the following software installed on your computer:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在您的计算机上安装以下软件：
- en: Node.js version 18+ (use **nvm** to manage different versions of Node.js if
    you have to)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 版本 18+（如果您必须管理不同版本的 Node.js，请使用 **nvm**）
- en: 'Terminal: iTerm2 with OhMyZsh (you will thank me later)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端：iTerm2 配合 OhMyZsh（您会感谢我的）
- en: 'IDE: We strongly recommend VS Code as we will be making use of some of the
    plugins that come with VS Code for an improved developer experience'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE：我们强烈推荐 VS Code，因为我们将会使用一些 VS Code 内置的插件来提升开发者体验
- en: 'npm, Yarn, or pnpm: We recommend pnpm because it’s fast and storage efficient'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm、Yarn 或 pnpm：我们推荐 pnpm，因为它速度快且存储效率高
- en: 'Browser: Chrome/Microsoft Edge, Firefox'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器：Chrome/Microsoft Edge，Firefox
- en: A basic understanding of Nx.dev monorepos
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 Nx.dev 单一仓库有基本理解
- en: A basic understanding of Firebase and static site hosting would be helpful
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 Firebase 和静态网站托管有基本理解会有所帮助
- en: 'The code files for this chapter can be found here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在以下位置找到：
- en: '[https://github.com/PacktPublishing/Building-Micro-Frontends-with-React](https://github.com/PacktPublishing/Building-Micro-Frontends-with-React)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-Micro-Frontends-with-React](https://github.com/PacktPublishing/Building-Micro-Frontends-with-React)'
- en: We also assume you have a basic working knowledge of Git, such as branching,
    committing code, and raising a pull request.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还假设您对 Git 有基本的操作知识，例如分支、提交代码和发起拉取请求。
- en: What is Static Storage?
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是静态存储？
- en: Cloud hosting providers such as AWS, Google, and Azure offer a variety of hosting
    solutions. Static storage, also known as blob storage, refers to a type of storage
    service that is optimized for storing large amounts of unstructured data, such
    as **Binary Large Objects** (**Blob**). This data can be of any type, including
    images, videos, audio files, and text file formats such as HTML, CSS, and JavaScript.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 云托管提供商，如 AWS、Google 和 Azure，提供各种托管解决方案。静态存储，也称为 blob 存储，是指一种针对存储大量非结构化数据优化的存储服务，例如
    **二进制大对象**（**Blob**）。这些数据可以是任何类型，包括图像、视频、音频文件以及 HTML、CSS 和 JavaScript 等文本文件格式。
- en: Static storage is designed to be highly scalable and is usually served via a
    **Content Delivery Network** (**CDN**). This allows it to handle large volumes
    of data without performance degradation, and also makes it highly durable, with
    data replication across different nodes to ensure that data is not lost due to
    hardware failures or other disruptions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 静态存储旨在高度可扩展，通常通过 **内容分发网络**（**CDN**）提供服务。这使得它能够处理大量数据而不会降低性能，并且也使其非常耐用，通过在不同节点上的数据复制来确保数据不会因为硬件故障或其他中断而丢失。
- en: A key point to keep in mind about static storage is that it doesn’t have any
    compute power; that is, it doesn’t have any CPU or RAM resources. It can only
    serve static files. Think of it like a very large external hard disk connected
    to the cloud.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于静态存储的一个关键点是它没有任何计算能力；也就是说，它没有 CPU 或 RAM 资源。它只能提供静态文件。把它想象成一个连接到云的非常大的外部硬盘。
- en: 'Historically, static storage has been used to store and serve images, JavaScript,
    or CSS files, or as backup storage. It was never an option to host web apps. However,
    with the advent of SPAs that execute on the browser, frontend engineers realized
    they could use storage to host JavaScript and CSS bundles and have the apps execute
    and run on the browser. Most hosting providers now officially offer static site
    hosting. Some popular static site hosting providers are the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，静态存储被用于存储和提供图像、JavaScript 或 CSS 文件，或者作为备份存储。它从未是托管 Web 应用的选择。然而，随着在浏览器上执行的单页应用（SPAs）的出现，前端工程师意识到他们可以使用存储来托管
    JavaScript 和 CSS 包，并让应用在浏览器上执行和运行。现在，大多数托管提供商都正式提供静态站点托管服务。以下是一些流行的静态站点托管提供商：
- en: Firebase
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase
- en: Netlify
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netlify
- en: Cloudflare
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloudflare
- en: Azure Static Web Apps
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 静态 Web 应用
- en: Google Cloud Storage
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Storage
- en: Amazon S3
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon S3
- en: Due to its simplicity and very low costs, static storage is ideal for serving
    client-side-rendered (CSR) React apps. Due to the lack of compute power, they
    cannot be used to serve backend or node-based APIs, or to execute **server-side**
    **rendering** (**SSR**).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其简单性和非常低的成本，静态存储非常适合提供客户端渲染（CSR）的 React 应用。由于缺乏计算能力，它们不能用于提供后端或基于节点的基础 API，或执行
    **服务器端** **渲染**（**SSR**）。
- en: In our case, since our microfrontend is client-side-rendered, we will use it
    to deploy our apps.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，由于我们的微前端是客户端渲染的，我们将使用它来部署我们的应用。
- en: Of the various hosting options available, we will choose Firebase for our hosting
    solution, and in the next section, we will go about setting up our Firebase application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在可用的各种托管选项中，我们将选择 Firebase 作为我们的托管解决方案，在下一节中，我们将介绍如何设置我们的 Firebase 应用程序。
- en: Just a note that deploying the microfrontend to any other hosting provider will
    follow a similar process to what we will go through in the rest of the sections
    of this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，将微前端部署到任何其他托管提供商的过程将与本章其余部分中我们将要经历的类似过程相似。
- en: Setting up Firebase
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Firebase
- en: Firebase, which is part of Google Cloud Platform, is an extremely easy-to-use
    and developer-friendly hosting provider. Firebase has a lot of offerings and services
    for building and managing web and mobile applications.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase，作为 Google 云平台的一部分，是一个极其易于使用且对开发者友好的托管提供商。Firebase 提供了大量的构建和管理 Web 和移动应用的服务和产品。
- en: Many of these services have free tiers, which make it ideal for building and
    testing things out. You can access all the products and services by heading over
    to [www.firebase.com](https://www.firebase.com) and logging in with your Google
    account.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些服务都有免费层，这使得它们非常适合构建和测试。您可以通过访问 [www.firebase.com](https://www.firebase.com)
    并使用您的 Google 账户登录来访问所有产品和服务。
- en: Once you’ve logged in to Firebase, head over to **Manage** **Console** ([https://console.firebase.google.com/](https://console.firebase.google.com/)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录到 Firebase，请转到 **管理** **控制台**（[https://console.firebase.google.com/](https://console.firebase.google.com/)）。
- en: Create a new project. Let's call it `ebuy`. In the next section, we will set
    up our sites within this project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的项目。让我们称它为`ebuy`。在下一节中，我们将在这个项目中设置我们的站点。
- en: Setting up a project with multiple sites
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置具有多个站点的项目
- en: 'We will be using Firebase’s hosting service to deploy our apps. If you are
    not familiar with Firebase Hosting, we strongly encourage you to head over to
    [https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting)
    and read about it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Firebase 的托管服务来部署我们的应用程序。如果您不熟悉 Firebase 托管，我们强烈建议您访问[https://firebase.google.com/docs/hosting](https://firebase.google.com/docs/hosting)并阅读相关内容：
- en: Once in the console, select the **ebuy** project.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入控制台，选择**ebuy**项目。
- en: Head over to the **Build** | **Hosting** link on the left navigation pane. Click
    on the **Get Started** button to start the wizard and follow the steps to create
    a new site within the **ebuy** project.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到左侧导航面板上的**构建** | **托管**链接。点击**开始**按钮以启动向导，并按照步骤在**ebuy**项目中创建一个新的站点。
- en: 'We are going to need a new site for every micro app that we build, so on the
    Dashboard page use the **Add another site** and go ahead and create five sites.
    For the sake of consistency in this chapter, let’s name them as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为每个构建的微应用都需要一个新的站点，所以在仪表板页面上使用**添加另一个站点**，然后继续创建五个站点。为了保持本章的一致性，让我们按照以下名称命名：
- en: '**ebuy-app-shell.web.app**'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ebuy-app-shell.web.app**'
- en: '**ebuy-catalog.web.app**'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ebuy-catalog.web.app**'
- en: '**ebuy-checkout.web.app**'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ebuy-checkout.web.app**'
- en: '**ebuy-recommendations.web.app**'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ebuy-recommendations.web.app**'
- en: '**ebuy-datastore.web.app**'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ebuy-datastore.web.app**'
- en: Note that these names need to be unique to the entirety of Firebase. If the
    name is taken (and most likely it would have been taken), you can choose suitable
    names or go with the recommendation Firebase provides.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些名称在整个 Firebase 中必须是唯一的。如果名称已被占用（这很可能会发生），您可以选择合适的名称或接受 Firebase 提供的建议。
- en: Once you’ve created these five sites, note down the URLs at which these sites
    will be available, as we will need them later.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了这五个站点，记下这些站点将可用的 URL，因为我们稍后会需要它们。
- en: Installing and configuring the Firebase CLI
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 Firebase CLI
- en: 'Next, we need to install Firebase tools and connect them to our project and
    site:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装 Firebase 工具并将它们连接到我们的项目和站点：
- en: In the terminal, run **npm install -****g firebase-tools**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行**npm install -g firebase-tools**。
- en: Then, run **firebase login**. This will open up a browser window and request
    you to log in to your Firebase account.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行**firebase login**。这将打开一个浏览器窗口并请求您登录到您的 Firebase 账户。
- en: Run **firebase init hosting**. This will take you through a series of steps.
    If all goes well, then you will see new **.firebaserc** and **firebase.json**
    files created.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**firebase init hosting**。这将带您完成一系列步骤。如果一切顺利，您将看到新创建的**.firebaserc**和**firebase.json**文件。
- en: 'Next, we need to let Firebase know which micro app should be deployed to which
    target site. We do this by running the following commands. The syntax looks as
    follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要让 Firebase 知道哪个微应用应该部署到哪个目标站点。我们通过运行以下命令来实现。语法如下：
- en: '[PRE0]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, in our case, given the names we have for our micro apps and the websites
    created within Firebase, our commands would look as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，在我们的情况下，考虑到我们的微应用名称和 Firebase 内创建的网站，我们的命令如下所示：
- en: '**firebase target:apply hosting** **app-shell ebuy-app-shell**'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**firebase target:apply hosting** **app-shell ebuy-app-shell**'
- en: '**firebase target:apply hosting** **catalog ebuy-catalog**'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**firebase target:apply hosting** **catalog ebuy-catalog**'
- en: '**firebase target:apply hosting** **checkout ebuy-checkout**'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**firebase target:apply hosting** **checkout ebuy-checkout**'
- en: '**firebase target:apply hosting recommendations** **ebuy-recommendations**'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**firebase target:apply hosting** **ebuy-recommendations**'
- en: '**firebase target:apply hosting** **store ebuy-datastore**'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**firebase target:apply hosting** **store ebuy-datastore**'
- en: Once these commands have been executed successfully, you’ll notice these entries
    being made in the `.``firebaserc` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功执行了这些命令，您会注意到在`.firebaserc`文件中创建了这些条目。
- en: This completes our setup on the Firebase side of things. In the next section,
    we will prepare our microfrontend for production builds.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们在 Firebase 方面的设置。在下一节中，我们将为生产构建准备我们的微前端。
- en: Creating the Microfrontend Production build
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建微前端生产构建
- en: As you may recollect, so far, we’ve only run and tested our microfrontends in
    development mode, using the `nx serve` command. For us to deploy applications
    to a hosting server, they need to be built in production mode.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所回忆的，到目前为止，我们只以开发模式运行并测试了我们的微前端，使用的是`nx serve`命令。为了将应用程序部署到托管服务器，它们需要以生产模式构建。
- en: This is usually quite straightforward in regular React apps, but with our microfrontends,
    it needs a bit more work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常在常规 React 应用程序中相当直接，但与我们的微前端相比，需要做更多的工作。
- en: 'Open up the ebuy app we built in [*Chapter 5*](B18987_05.xhtml#_idTextAnchor073)
    and follow these steps. Let''s first create a script command to build all our
    apps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们构建的 ebuy 应用程序，见 [*第5章*](B18987_05.xhtml#_idTextAnchor073)，并按照以下步骤操作。让我们首先创建一个脚本来构建所有我们的应用程序：
- en: 'Open up the **package.json** file on the root and just like the **serve:all**
    command, let''s create a new command for **build:all** as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录下打开 **package.json** 文件，就像 **serve:all** 命令一样，让我们创建一个新的命令 **build:all**，如下所示：
- en: '[PRE1]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run the **pnpm build:all** command and let us see whether all the apps build.
    Oops! You’ll notice while all the other apps built fine, **app-shell** threw out
    some error about not being able to find **catalog/Module** or **checkout/Module**,
    and so on.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 **pnpm build:all** 命令，让我们看看是否所有应用程序都构建成功。哎呀！你会注意到，尽管所有其他应用程序都构建得很好，**app-shell**
    抛出了一些关于找不到 **catalog/Module** 或 **checkout/Module** 等错误，等等。
- en: Let's dig a bit into it.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们深入探讨一下。
- en: Open up the `remotes` array is blank. This is the reason why our app-shell build
    command is failing, because webpack doesn’t know the path from where it needs
    to fetch the `remoteEntry.js` file.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `remotes` 数组是空的。这就是我们的应用程序外壳构建命令失败的原因，因为 webpack 不知道它需要从哪里获取 `remoteEntry.js`
    文件的路径。
- en: Let's add our list of remotes to this array. This should mirror the list of
    apps in the remotes array of our `remoteEntry` files will exist.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将我们的远程列表添加到这个数组中。这应该与我们的 `remoteEntry` 文件中远程数组中的应用程序列表相匹配。
- en: 'We update the remotes array in **apps/app-shell/webpack.config.prod.js** as
    follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们更新了 **apps/app-shell/webpack.config.prod.js** 文件中的远程数组如下：
- en: '[PRE2]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, rerun the `catalog` and `recommendations` apps also need the array of remotes
    in their `webpack.config.prod.js` files.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重新运行 `catalog` 和 `recommendations` 应用程序也需要在它们的 `webpack.config.prod.js` 文件中的远程数组。
- en: We also notice that because our catalog and checkout apps were not originally
    built as microfrontend remote apps, they have a slightly different configuration
    and are missing `webpack.config.prod.js` files. Let's fix that first.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还注意到，由于我们的目录和结账应用程序最初并不是作为微前端远程应用程序构建的，它们有略微不同的配置，并且缺少 `webpack.config.prod.js`
    文件。让我们首先修复这个问题。
- en: First and foremost, let’s copy and paste the `.prod.js` file when building the
    production builds.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们在构建生产构建时复制并粘贴 `.prod.js` 文件。
- en: 'So, in their respective **project.json** files, we add the following line within
    the **build > configuration > production** object, as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，在它们各自的 **project.json** 文件中，我们在 **build > configuration > production** 对象内添加以下行，如下所示：
- en: '[PRE3]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will now ensure that all apps use their corresponding `webpack.config.prod.js`
    file to run their production builds.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将确保所有应用程序都使用它们各自的 `webpack.config.prod.js` 文件来运行它们的生产构建。
- en: 'Now, let''s go and update the array for the remote paths in our **apps/catalog/webpack.config.prod.js**
    file. Since the catalog app has only one remote, which is the recommendations
    micro app, our remotes array would look like this:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们更新我们的 **apps/catalog/webpack.config.prod.js** 文件中的远程路径数组。由于目录应用程序只有一个远程，即推荐微应用程序，我们的远程数组看起来如下：
- en: '[PRE4]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, let''s do the same for our recommendations apps, which use the `store`
    micro app as a remote. So, in the `apps/recommendations/webpack.config.prod.js`
    file, we update the remotes array as follows:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，让我们为我们的推荐应用程序做同样的事情，这些应用程序使用 `store` 微应用程序作为远程。因此，在 `apps/recommendations/webpack.config.prod.js`
    文件中，我们更新远程数组如下：
- en: '[PRE5]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '10\. Since the checkout app also needs to use the store as a remote we update
    the **apps/checkout/webpack.config.prod.js** as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 10. 由于结账应用程序也需要使用存储作为远程，我们更新了 **apps/checkout/webpack.config.prod.js** 文件如下：
- en: '[PRE6]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run our **pnpm build:all** command again to generate the production builds based
    on the latest webpack configurations we made.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行我们的 **pnpm build:all** 命令，以根据我们最新创建的 webpack 配置生成生产构建。
- en: When the build is successful, have a look in the `/dist` folder on the root
    of the project and verify that all our micro-app folders are present within `/dist/apps`.
    Note their paths as we will need them in the next section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建成功时，查看项目根目录下的 `/dist` 文件夹，并验证所有我们的微前端文件夹是否位于 `/dist/apps` 内。注意它们的路径，因为我们将在下一节中使用它们。
- en: In this section, we were able to generate production builds for our microfrontends
    by ensuring all the apps used the right webpack configuration, including the correct
    public URLs for the `remoteEntry.js` files.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过确保所有应用程序都使用了正确的 webpack 配置，包括 `remoteEntry.js` 文件的正确公共 URL，成功生成了我们的微前端的生产构建。
- en: In the next section, we will see how to deploy these apps to Firebase.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何将这些应用到Firebase上部署。
- en: Deploying our Apps to Firebase
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的应用部署到Firebase
- en: Deploying our apps to Firebase is quite easy using the Firebase CLI’s `deploy`
    command. However, before we run our Firebase `deploy` command, we need to let
    Firebase know which micro-apps go into the corresponding Firebase website. We
    do this in the `/``firebase.json` file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firebase CLI的`deploy`命令将我们的应用部署到Firebase相当简单。然而，在我们运行Firebase的`deploy`命令之前，我们需要让Firebase知道哪些微应用将部署到相应的Firebase网站上。我们在`/firebase.json`文件中完成这项操作。
- en: 'Replace the default configuration with the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认配置替换为以下内容：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the preceding code is a configuration, where we have an array
    of our target apps, and we define the folder path where Firebase should look for
    the bundles for each of the micro apps. We also have a few settings regarding
    ignoring and not deploying `node_modules` and a rewrite rule, which is essential
    if you want each micro app to also be available as its own SPA within its respective
    site.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，前面的代码是一个配置，其中我们有一个目标应用数组，并定义了Firebase应该查找每个微应用的包的文件夹路径。我们还设置了一些关于忽略不部署`node_modules`和重写规则的设置，这对于你想要每个微应用也能作为其各自网站内的独立SPA可用是至关重要的。
- en: With this, we are now ready to deploy our apps to Firebase. Let's first run
    it manually to ensure things work fine.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好将我们的应用部署到Firebase。让我们先手动运行以确保一切正常。
- en: 'In the terminal of the project, run the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的终端中运行以下命令：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This would generate a `.firebase` folder with a lot of files. Don’t forget to
    add `.firebase` to your `.gitignore`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个包含许多文件的`.firebase`文件夹。别忘了将`.firebase`添加到你的`.gitignore`文件中。
- en: 'Let Firebase do its thing, and if all goes well, it should display a success
    message and print out the list of URLs where the sites have been deployed, like
    so:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让Firebase完成其工作，如果一切顺利，它应该会显示一个成功消息并打印出已部署的网站URL列表，如下所示：
- en: '![Figure 7.1 – List of website URLs published after a successful deployment
    on Firebase](img/Figure_7.01_B18987.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – Firebase成功部署后发布的网站URL列表](img/Figure_7.01_B18987.jpg)'
- en: Figure 7.1 – List of website URLs published after a successful deployment on
    Firebase
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Firebase成功部署后发布的网站URL列表
- en: Great! Let’s click on the `app-shell` link and check whether we can see our
    microfrontend.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们点击`app-shell`链接，检查我们是否可以看到我们的微前端。
- en: Err, we see a blank page... Have a peek into the browser’s developer tools console
    and you’ll notice what the problem is. Our browser has blocked calls to the `remoteEntry.js`
    files because of **Cross-Origin Resource** **Sharing** (**CORS**).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 哎，我们看到一个空白页...看看浏览器开发者工具的控制台，你会注意到问题所在。我们的浏览器因为**跨源资源共享**（**CORS**）的原因阻止了对`remoteEntry.js`文件的调用。
- en: '![Figure 7.2 – CORS policy headers due to missing Access-Control-Allow-Origin
    header](img/Figure_7.02_B18987.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 由于缺少`Access-Control-Allow-Origin`头部导致的CORS策略头部](img/Figure_7.02_B18987.jpg)'
- en: Figure 7.2 – CORS policy headers due to missing Access-Control-Allow-Origin
    header
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 由于缺少`Access-Control-Allow-Origin`头部导致的CORS策略头部
- en: We will see how to fix this in the next section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中看到如何解决这个问题。
- en: Fixing CORS issues
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决CORS问题
- en: If you’ve been building React or any other web apps, you’ll be familiar with
    the dreaded CORS problem. This is where the browser, for security reasons, prevents
    calls to external domains unless it sees an explicit `'Access-Control-Allow-Origin'`
    header. The access control is set on the apps that decide whether they want assets
    from their domain to be consumed and executed on other domains.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经构建过React或其他任何Web应用，你将熟悉令人讨厌的CORS问题。这是浏览器出于安全原因阻止对外部域的调用，除非它看到明确的`'Access-Control-Allow-Origin'`头部。访问控制是在决定是否允许其域的资产在其他域上被消费和执行的app上设置的。
- en: So, for our microfrontend apps to work properly, the host app needs to be able
    to load the `remoteEntry.js` file from the public URL where each of the micro
    apps is hosted. This is what we are going to set in the next steps.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了使我们的微前端应用能够正常工作，宿主应用需要能够从每个微应用托管在的公共URL加载`remoteEntry.js`文件。这就是我们将在接下来的步骤中设置的。
- en: With Firebase Hosting, it is quite easy, and we can define a headers array in
    the `firebase.json` file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firebase Hosting，这相当简单，我们可以在`firebase.json`文件中定义一个头部数组。
- en: 'Open up `/firebase.json` for all the apps except `app-shell`, and within each
    of the target objects, define the headers we’d like to set:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 打开除`app-shell`以外的所有应用的`/firebase.json`文件，并在每个目标对象中定义我们想要设置的头部信息：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: firebase deploy --only hosting:<app-name>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: firebase deploy --only hosting:<app-name>
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: firebase deploy --only hosting:app-shell
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: firebase deploy --only hosting:app-shell
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: pnpm nx print-affected --type=app --select=projects
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: pnpm nx print-affected --type=app --select=projects
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: pnpm nx affected --target=deploy --base=main --head=HEAD
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: pnpm nx affected --target=deploy --base=main --head=HEAD
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"deploy": {'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '"deploy": {'
- en: '"executor": "@nrwl/workspace:run-commands",'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '"executor": "@nrwl/workspace:run-commands",'
- en: '"options": {'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '"options": {'
- en: '"commands": ["firebase deploy --only hosting:app-shell"],'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '"commands": ["firebase deploy --only hosting:app-shell"],'
- en: '"parallel": true'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '"parallel": true'
- en: '}'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: pnpm nx affected -–target=build
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: pnpm nx affected -–target=build
- en: pnpm nx affected -–target=deploy
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: pnpm nx affected -–target=deploy
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
