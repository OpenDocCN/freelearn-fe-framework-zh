- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Working with Tree, TreeTable, and Timeline Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tree、TreeTable 和 Timeline 组件
- en: Data presentation in applications isn’t just about tables, lists, and cards.
    Sometimes, the nature of the data demands a more hierarchical or chronological
    structure. That’s where components such as `Tree`, `TreeTable`, and `Timeline`
    come into play. In this chapter, we’ll dive deep into these specialized components,
    each offering unique ways to display and interact with data in Angular applications
    using PrimeNG.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的数据展示不仅仅是表格、列表和卡片。有时，数据的本质需要更分层或按时间顺序的结构。这就是 `Tree`、`TreeTable` 和 `Timeline`
    等组件发挥作用的地方。在本章中，我们将深入探讨这些专用组件，每个组件都提供独特的显示和交互方式，以使用 PrimeNG 在 Angular 应用程序中处理数据。
- en: The primary objective is to familiarize yourself with the specialized PrimeNG
    components that cater to specific data presentation needs. As we progress through
    this chapter, we’ll be equipped with the knowledge to handle diverse data presentation
    challenges and how to implement them effectively in their Angular applications.
    Mastering these components means being prepared to offer solutions that enhance
    user experience and data clarity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 主要目标是熟悉专门针对特定数据展示需求的 PrimeNG 组件。随着我们进入本章，我们将掌握处理各种数据展示挑战的知识，以及如何在 Angular 应用程序中有效地实现它们。掌握这些组件意味着准备好提供增强用户体验和数据清晰度的解决方案。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Working with Tree components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Tree 组件
- en: Working with TreeTable components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TreeTable 组件
- en: Working with Timeline components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Timeline 组件
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various code samples of PrimeNG displaying components.
    You can find the related source code in the `chapter-07` folder of the following
    GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-07](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-07).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种 PrimeNG 显示组件的代码示例。您可以在以下 GitHub 仓库的 `chapter-07` 文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-07](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-07)。
- en: Working with Tree components
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tree 组件
- en: The PrimeNG **Tree** component is a powerful tool for displaying hierarchical
    data in an organized and visually appealing way, providing a tree-like structure
    where data can be presented as nodes and can be expanded or collapsed to reveal
    or hide child nodes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG **Tree** 组件是一个强大的工具，用于以有组织和视觉吸引力的方式显示分层数据，提供一种树状结构，其中数据可以呈现为节点，并且可以展开或折叠以显示或隐藏子节点。
- en: In this section, we will explore the various aspects of working with the PrimeNG
    `Tree` component, including its purpose, usage, and key features. The component
    also offers a wide range of features, including node expansion and collapse, selection
    modes, lazy loading of data, drag-and-drop functionality, and context menu support,
    which we will explore too.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨使用 PrimeNG `Tree` 组件的各个方面，包括其目的、用法和关键特性。该组件还提供了一系列功能，包括节点展开和折叠、选择模式、数据的懒加载、拖放功能以及上下文菜单支持，我们也将对其进行探讨。
- en: When to use the PrimeNG Tree component
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用 PrimeNG Tree 组件
- en: The PrimeNG `Tree` component is particularly useful in scenarios where data
    needs to be organized and presented in a hierarchical manner. It is commonly used
    in applications that deal with categories, file directories, organizational structures,
    and any other data that exhibits a parent-child relationship.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 的 `Tree` 组件在需要以分层方式组织和展示数据的情况下特别有用。它通常用于处理类别、文件目录、组织结构以及其他表现出父子关系的任何数据。
- en: For example, let’s consider a product catalog application. The catalog may have
    categories, subcategories, and products organized in a hierarchical structure.
    In such a case, the PrimeNG `Tree` component can be used to visually represent
    the product catalog, allowing users to navigate through the categories and subcategories
    and select specific products.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们考虑一个产品目录应用程序。目录可能包含类别、子类别和按层次结构组织的产品。在这种情况下，PrimeNG `Tree` 组件可以用来直观地表示产品目录，使用户能够浏览类别和子类别，并选择特定的产品。
- en: Creating a basic Tree component
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本的 Tree 组件
- en: 'To better understand how the PrimeNG `Tree` component can be used, let’s take
    a look at an example of a product catalog – mentioned in the previous section.
    Suppose we have the following hierarchical structure for our products:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解如何使用 PrimeNG `Tree` 组件，让我们看一下前一个部分提到的产品目录示例。假设我们为我们的产品有以下层次结构：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using the PrimeNG `Tree` component, we can represent this hierarchical structure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PrimeNG `Tree` 组件，我们可以表示这种层次结构。
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，我们需要从 PrimeNG 库中导入必要的模块：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once we have the dependencies installed and imported, we can use the `Tree`
    component in our Angular template. Here’s an example of how we can display the
    products in a tree layout:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并导入了依赖项，我们就可以在 Angular 模板中使用 `Tree` 组件。以下是如何以树布局显示产品的示例：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s break down the code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '`<p-tree [value]="products" />`: This represents the usage of the PrimeNG `Tree`
    component. It binds the `value` property of the `Tree` component to the `products`
    variable.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-tree [value]="products" />`：这表示了 PrimeNG `Tree` 组件的使用。它将 `Tree` 组件的 `value`
    属性绑定到 `products` 变量。'
- en: '`Products: TreeNode[]`: This defines the `products` variable as an array of
    `TreeNode` objects. `TreeNode` is a type defined by PrimeNG for representing a
    node in the tree component. Each `TreeNode` object has the following properties:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Products: TreeNode[]`：这定义了 `products` 变量为 `TreeNode` 对象的数组。`TreeNode` 是 PrimeNG
    定义的一种类型，用于在树组件中表示节点。每个 `TreeNode` 对象具有以下属性：'
- en: '`key`: A unique identifier for the node.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`：节点的唯一标识符。'
- en: '`label`: The text that will be displayed for the node.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`：将显示在节点上的文本。'
- en: '`data`: Additional data associated with the node. In this example, it represents
    the level of the node (category level, subcategory level, or product level).'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：与节点相关联的附加数据。在这个例子中，它表示节点的级别（类别级别、子类别级别或产品级别）。'
- en: '`icon`: An optional icon associated with the node.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icon`：与节点相关联的可选图标。'
- en: '`children`: An array of child nodes. This property allows the tree to have
    a nested structure.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`children`：子节点的数组。此属性允许树具有嵌套结构。'
- en: 'That is an example of a simplified tree structure representing a store. Here
    is the result:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个表示商店的简化树结构的示例。以下是结果：
- en: '![Figure 7.1 – Basic Tree](img/B18805_07_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 基本树](img/B18805_07_01.jpg)'
- en: Figure 7.1 – Basic Tree
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 基本树
- en: Expanding and collapsing nodes
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展开和折叠节点
- en: One of the fundamental features of the PrimeNG `Tree` component is the ability
    to expand and collapse nodes. This allows users to navigate through the tree and
    reveal or hide child nodes based on their interests.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG `Tree` 组件的一个基本特性是能够展开和折叠节点。这使用户能够根据兴趣在树中导航，显示或隐藏子节点。
- en: By default, the PrimeNG `Tree` component starts with all nodes collapsed. Users
    can expand a node by clicking on its expand icon, and they can collapse a node
    by clicking on its collapse icon.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PrimeNG `Tree` 组件以所有节点折叠的状态开始。用户可以通过点击其展开图标来展开一个节点，也可以通过点击其折叠图标来折叠一个节点。
- en: In addition to user interactions, you can also programmatically control the
    expansion and collapse of nodes by manipulating the state of the nodes. For example,
    you can programmatically expand all nodes or collapse all nodes using the `expandAll()`
    and `collapseAll()` methods, respectively.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用户交互之外，您还可以通过操作节点的状态来以编程方式控制节点的展开和折叠。例如，您可以使用 `expandAll()` 和 `collapseAll()`
    方法分别以编程方式展开所有节点或折叠所有节点。
- en: 'Here’s an example that demonstrates the use of the expand and collapse functionality:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个演示展开和折叠功能的示例：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we have added two buttons to the UI for expanding and collapsing nodes.
    The `expandAll()` and `collapseAll()` methods are bound to the respective buttons’
    click events. When a user clicks the **Expand all** button, all nodes in the tree
    will be expanded, and when the **Collapse all** button is clicked, all nodes will
    collapse.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们向 UI 中添加了两个按钮用于展开和折叠节点。`expandAll()` 和 `collapseAll()` 方法分别绑定到相应按钮的点击事件。当用户点击**展开全部**按钮时，树中的所有节点都将展开，而当点击**折叠全部**按钮时，所有节点都将折叠。
- en: The `expandRecursive(...)` method is a private method that recursively expands
    or collapses the nodes in the tree. It takes a `TreeNode` object (`node`) and
    a `boolean` value (`isExpand`) as parameters, and sets the `expanded` property
    of `node` to the value of `isExpand`, thus expanding or collapsing the node.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`expandRecursive(...)` 方法是一个私有方法，它递归地展开或折叠树中的节点。它接受一个 `TreeNode` 对象（`node`）和一个布尔值（`isExpand`）作为参数，并将
    `node` 的 `expanded` 属性设置为 `isExpand` 的值，从而展开或折叠节点。'
- en: 'Here is the result when clicking on the **Expand** **all** button:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **展开** **全部** 按钮的结果如下：
- en: '![Figure 7.2 – Tree with expanding and collapsing abilities](img/B18805_07_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 带展开和折叠能力的树](img/B18805_07_02.jpg)'
- en: Figure 7.2 – Tree with expanding and collapsing abilities
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 带展开和折叠能力的树
- en: Using node selection events
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用节点选择事件
- en: The PrimeNG `Tree` component provides a set of events and methods that allow
    you to interact with the component and respond to user actions. These events and
    methods enable you to perform tasks such as handling node selection, capturing
    node expansion and collapse events, and dynamically loading data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG `Tree` 组件提供了一系列事件和方法，允许你与组件交互并响应用户操作。这些事件和方法使你能够执行诸如处理节点选择、捕获节点展开和折叠事件以及动态加载数据等任务。
- en: 'Before enabling node selection events, we need to add `selectionMode` to the
    component. There are four types of selection:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用节点选择事件之前，我们需要向组件添加 `selectionMode`。有四种选择类型：
- en: '`<p-tree [value]="products"` `selectionMode="single" />`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-tree [value]="products"` `selectionMode="single" />`。'
- en: '`<p-tree [value]="products"` `selectionMode="single" [metaKeySelection]="true"/>`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-tree [value]="products"` `selectionMode="single"` `[metaKeySelection]="true"/>`。'
- en: '`<p-tree [value]="products"` `selectionMode="multiple" />`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-tree [value]="products"` `selectionMode="multiple" />`。'
- en: '`<p-tree [value]="products"` `selectionMode="checkbox" />`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-tree [value]="products"` `selectionMode="checkbox" />`。'
- en: After adding the node selection type, the PrimeNG `Tree` component emits events
    when a node is selected or unselected. You can use these events to perform actions
    based on the user’s node selection.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加节点选择类型后，PrimeNG `Tree` 组件在节点被选择或取消选择时发出事件。你可以使用这些事件根据用户的节点选择执行操作。
- en: 'To capture the node selection event, you can use the `(onNodeSelect)` and `(onNodeUnselect)`
    event bindings. Here’s an example of `single` selection:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕获节点选择事件，你可以使用 `(onNodeSelect)` 和 `(onNodeUnselect)` 事件绑定。以下是一个 `single` 选择示例：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the code, the `(onNodeSelect)` event is bound to the `onNodeSelected()` method,
    and the `(onNodeUnselect)` event is bound to the `onNodeUnselected()` method.
    These methods will be invoked when a node is selected or unselected, respectively.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，`(onNodeSelect)` 事件绑定到 `onNodeSelected()` 方法，而 `(onNodeUnselect)` 事件绑定到
    `onNodeUnselected()` 方法。当节点被选择或取消选择时，这些方法将被调用。
- en: 'Let’s have a look at a sample event when selecting the **Electronics** node:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看选择 **Electronics** 节点时的一个示例事件：
- en: '![Figure 7.3 – Tree with selection events](img/B18805_07_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 带选择事件的树](img/B18805_07_03.jpg)'
- en: Figure 7.3 – Tree with selection events
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 带选择事件的树
- en: 'As a result, we can see that after selecting the `node` data, which has the
    following details:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到在选择具有以下详细信息的 `node` 数据后：
- en: '`expanded: true`: This indicates the current node is in the expanded state'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expanded: true`：这表示当前节点处于展开状态'
- en: '`parent: undefined`: This shows that the current node doesn’t have a parent'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent: undefined`：这表明当前节点没有父节点'
- en: '`data, icon, key, label, children`: This shows the existing values of the current
    node'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data, icon, key, label, children`：这显示了当前节点的现有值'
- en: Using node expansion and collapse events
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用节点展开和折叠事件
- en: The PrimeNG `Tree` component emits events when a node is expanded or collapsed.
    You can utilize these events to perform actions when nodes are expanded or collapsed
    by the user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当节点展开或折叠时，PrimeNG `Tree` 组件会发出事件。你可以利用这些事件在用户展开或折叠节点时执行操作。
- en: 'To capture node expansion or collapse events, you can use the `(onNodeExpand)`
    and `(onNodeCollapse)` event bindings. Here’s an example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕获节点展开或折叠事件，你可以使用 `(onNodeExpand)` 和 `(onNodeCollapse)` 事件绑定。以下是一个示例：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, the `(onNodeExpand)` event is bound to the `onNodeExpanded()` method,
    and the `(onNodeCollapse)` event is bound to the `onNodeCollapsed()` method. These
    methods will be triggered when a node is expanded or collapsed, respectively.
    The event value after expanding or collapsing is the same as when we select or
    unselect a node.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`(onNodeExpand)` 事件绑定到 `onNodeExpanded()` 方法，而 `(onNodeCollapse)` 事件绑定到
    `onNodeCollapsed()` 方法。这些方法将在节点展开或折叠时分别被触发。展开或折叠后的事件值与选择或取消选择节点时的值相同。
- en: Working with lazy loading
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 懒加载的工作方式
- en: The PrimeNG `Tree` component supports lazy loading of data, which is beneficial
    when dealing with large datasets. Instead of loading all the nodes at once, you
    can load nodes dynamically as the user expands them.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 的 `Tree` 组件支持数据的懒加载，这在处理大数据集时非常有用。您不必一次性加载所有节点，而可以在用户展开节点时动态加载节点。
- en: To enable lazy loading, you need to use the `[loading]` property and the `(onNodeExpand)`
    event. The `[loading]` property allows you to indicate whether the tree is currently
    loading data, and the `(onNodeExpand)` event is triggered when a node is expanded,
    allowing you to load the child nodes dynamically.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用懒加载，您需要使用 `[loading]` 属性和 `(onNodeExpand)` 事件。`[loading]` 属性允许您指示树是否正在加载数据，而
    `(onNodeExpand)` 事件在节点展开时触发，允许您动态加载子节点。
- en: 'Here’s an example that demonstrates lazy loading:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个演示懒加载的例子：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, the `[loading]` property is bound to the `loading` variable
    in the Angular component, which indicates whether the tree is currently loading
    data. The `(onNodeExpand)` event is bound to the `loadChildNodes()` method, which
    is responsible for loading the child nodes of the expanded node. Here is the result:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`[loading]` 属性绑定到 Angular 组件中的 `loading` 变量，该变量指示树是否正在加载数据。`(onNodeExpand)`
    事件绑定到 `loadChildNodes()` 方法，该方法负责加载展开节点的子节点。以下是结果：
- en: '![Figure 7.4 – Tree with loading](img/B18805_07_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 带加载的树](img/B18805_07_04.jpg)'
- en: Figure 7.4 – Tree with loading
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 带加载的树
- en: Note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `loadChildNodes()` method should be implemented in the Angular component
    to fetch the child nodes dynamically based on the expanded node.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 应在 Angular 组件中实现 `loadChildNodes()` 方法，以便根据展开的节点动态获取子节点。
- en: In this section, we discussed when to use the PrimeNG `Tree` component, such
    as in scenarios where data needs to be organized hierarchically, such as product
    catalogs or file systems, and its various features. In the next section, let’s
    delve into the `TreeTable` component.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了何时使用 PrimeNG `Tree` 组件，例如在需要按层次组织数据的情况下，如产品目录或文件系统，以及它的各种功能。在下一节中，我们将深入了解
    `TreeTable` 组件。
- en: Working with TreeTable components
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 TreeTable 组件一起工作
- en: 'When it comes to presenting hierarchical data structures in a tabular format,
    PrimeNG’s **TreeTable** emerges as a powerful tool, combining the best of both
    worlds: the nested structure of a tree and the organized columns of a table. Let’s
    embark on a journey to understand this component better and see how it can elevate
    our data presentation game.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到以表格格式展示层次数据结构时，PrimeNG 的 **TreeTable** 成为了一个强大的工具，它结合了两个世界的最佳之处：树的嵌套结构和表格的有序列。让我们开始一段旅程，更好地理解这个组件，并看看它如何提升我们的数据展示水平。
- en: When to use the PrimeNG TreeTable component
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用 PrimeNG TreeTable 组件
- en: The PrimeNG `TreeTable` component is particularly useful in scenarios where
    you need to represent data that has a hierarchical structure. It provides an intuitive
    and user-friendly way to navigate and interact with hierarchical data, making
    it ideal for applications that deal with organizational structures, file systems,
    product categories, and any other data that exhibits parent-child relationships.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 的 `TreeTable` 组件在需要表示具有层次结构的数据的场景中特别有用。它提供了一种直观且用户友好的方式来导航和交互层次数据，使其非常适合处理组织结构、文件系统、产品类别以及其他表现出父子关系的任何数据的应用程序。
- en: The `TreeTable` component is more suitable for presenting hierarchical data
    in a tabular format with advanced interaction options such as sorting, filtering,
    and pagination, while the `Tree` component is best suited for displaying and navigating
    hierarchical data in a compact and collapsible tree-like structure.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`TreeTable` 组件更适合以表格格式展示具有高级交互选项（如排序、过滤和分页）的层次数据，而 `Tree` 组件最适合以紧凑且可折叠的树形结构显示和导航层次数据。'
- en: By leveraging the `TreeTable` component, you can present complex hierarchical
    data in a structured and organized manner, allowing users to expand and collapse
    nodes, perform sorting and filtering operations, and interact with the data in
    a seamless manner.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 `TreeTable` 组件，你可以以结构化和组织的方式展示复杂层次数据，使用户能够展开和折叠节点，执行排序和过滤操作，并以无缝的方式与数据交互。
- en: Creating a basic TreeTable component
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个基本的 TreeTable 组件
- en: Imagine you have a list of products categorized under different product families.
    Each product has details such as price, availability, and ratings. The `TreeTable`
    component can be an excellent choice to represent this data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个产品列表，这些产品被归类在不同的产品系列下。每个产品都有价格、可用性和评分等详细信息。`TreeTable` 组件可以是一个很好的选择来表示这些数据。
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要从 PrimeNG 库中导入必要的模块：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we have the dependencies installed and imported, we can use the `TreeTable`
    component in our Angular template. Here’s an example of how we can display the
    products in a `TreeTable` layout:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并导入了依赖项，我们就可以在我们的 Angular 模板中使用 `TreeTable` 组件。以下是如何在 `TreeTable` 布局中显示产品的示例：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s break down the code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '`<p-treeTable>`: This is the Angular component from the PrimeNG library used
    to display hierarchical tabular data in a tree-like structure.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-treeTable>`: 这是 PrimeNG 库中的 Angular 组件，用于以树状结构显示层次表格数据。'
- en: '`[value]="products"`: This attribute binding sets the `products` property as
    the data source for the `TreeTable` component. The `products` variable in the
    component’s code contains an array of `TreeTableNode` objects representing the
    hierarchical data structure.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[value]="products"`: 此属性绑定将 `products` 属性设置为 `TreeTable` 组件的数据源。组件代码中的 `products`
    变量包含一个 `TreeTableNode` 对象数组，代表层次数据结构。'
- en: '`[scrollable]="true"`: This attribute binding enables scrolling within the
    `TreeTable` component if the content overflows the available space.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[scrollable]="true"`: 此属性绑定启用 `TreeTable` 组件内的滚动，如果内容超出可用空间。'
- en: '`[tableStyle]="{ ''min-width'': ''50rem'' }"`: This attribute binding applies
    an inline CSS style object to the `tableStyle` attribute of the `<p-treeTable>`
    component. In this case, it sets the minimum width of the `TreeTable` component
    to `50rem`.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[tableStyle]="{ ''min-width'': ''50rem'' }"`: 此属性绑定将内联 CSS 样式对象应用于 `<p-treeTable>`
    组件的 `tableStyle` 属性。在这种情况下，它将 `TreeTable` 组件的最小宽度设置为 `50rem`。'
- en: '`<ng-template pTemplate="header">`: This element defines a template for rendering
    the header row of the `TreeTable` component.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="header">`: 此元素定义了一个用于渲染 `TreeTable` 组件的标题行的模板。'
- en: '`<ng-template pTemplate="body" let-rowNode let-product="rowData">`: This element
    defines a template for rendering the body (rows) of the `TreeTable` component.
    This template also has two other properties:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="body" let-rowNode let-product="rowData">`: 此元素定义了一个用于渲染
    `TreeTable` 组件的体（行）的模板。此模板还具有两个其他属性：'
- en: '`let-rowNode`: This declares a local variable named `rowNode` that represents
    the current row node being rendered'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let-rowNode`: 这声明了一个名为 `rowNode` 的局部变量，它代表正在渲染的当前行节点'
- en: '`let-product="rowData"`: This declares a local variable named `product` that
    represents the data associated with the current row'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`let-product="rowData"`: 这声明了一个名为 `product` 的局部变量，它代表与当前行关联的数据'
- en: '`<p-treeTableToggler [rowNode]="rowNode" />`: This component is used to display
    a toggle button for expanding and collapsing child nodes in the `TreeTable` component.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-treeTableToggler [rowNode]="rowNode" />`: 此组件用于在 `TreeTable` 组件中显示用于展开和折叠子节点的切换按钮。'
- en: '`products: TreeTableNode[]`: This defines the `products` array as the data
    source for the `TreeTable` component. The products array consists of `TreeTableNode`
    objects representing the hierarchical data structure. Each node has a data property
    containing the product information, such as `name`, `price`, `rating`, and `category`.
    The example shows a nested structure with a parent node, `Electronics`, and a
    child node, `Computers`, which further contains a `MacBook Air` child node with
    its respective properties.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`products: TreeTableNode[]`: 这定义了 `products` 数组作为 `TreeTable` 组件的数据源。`products`
    数组由 `TreeTableNode` 对象组成，代表层次数据结构。每个节点都有一个包含产品信息的数据属性，例如 `name`、`price`、`rating`
    和 `category`。示例显示了一个嵌套结构，其中包含一个父节点 `Electronics` 和一个子节点 `Computers`，它进一步包含一个具有相应属性的
    `MacBook Air` 子节点。'
- en: 'That is an example of a simplified `TreeTable` structure representing a store.
    Here is the result:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个表示商店的简化 `TreeTable` 结构的示例。以下是结果：
- en: '![Figure 7.5 – Basic TreeTable structure](img/B18805_07_05.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – 基本的 TreeTable 结构](img/B18805_07_05.jpg)'
- en: Figure 7.5 – Basic TreeTable structure
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 基本的 TreeTable 结构
- en: Using dynamic columns
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用动态列
- en: '`TreeTable` component allow us to create columns on the fly based on the data
    or configuration we provide. Instead of defining each column manually in the template,
    we can bind a collection of columns from our component and let the `TreeTable`
    component generate the necessary columns dynamically. This approach is not only
    efficient but also offers a high degree of flexibility.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`TreeTable` 组件允许我们根据提供的数据或配置动态创建列。而不是在模板中手动定义每个列，我们可以绑定来自组件的列集合，并让`TreeTable`组件动态生成必要的列。这种方法不仅高效，而且提供了高度的灵活性。'
- en: 'Let’s consider an example of an e-commerce application that displays products
    in a `TreeTable` format. The application needs to handle different product categories,
    each with its own set of attributes. The goal is to dynamically render the columns
    based on the selected product category. Here is the code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个电子商务应用的例子，该应用以`TreeTable`格式显示产品。该应用需要处理不同的产品类别，每个类别都有自己的属性集。目标是根据所选的产品类别动态渲染列。以下是代码：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s break down the code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '`<button (click)="updateColumns(...)" >`: This is a button element that triggers
    the `updateColumns()` method when clicked.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button (click)="updateColumns(...)" >`：这是一个按钮元素，当点击时触发`updateColumns()`方法。'
- en: '`<th *ngFor="let col of columns">{{ col.header }}</th>`: This line uses an
    `*ngFor` directive to iterate over the `columns` array and generates a `<th>`
    element for each column. The column’s `header` property is displayed as the content
    of the `header` cell.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<th *ngFor="let col of columns">{{ col.header }}</th>`：这一行使用`*ngFor`指令遍历`columns`数组并为每个列生成一个`<th>`元素。列的`header`属性作为`header`单元格的内容显示。'
- en: '`<td *ngFor="let col of columns; let i = index">`: This line uses an `*ngFor`
    directive to iterate over the `columns` array and generates a `<td>` element for
    each column.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<td *ngFor="let col of columns; let i = index">`：这一行使用`*ngFor`指令遍历`columns`数组并为每个列生成一个`<td>`元素。'
- en: '`<p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0" />`: This `<p-treeTableToggler>`
    component is used to display a toggle button for expanding and collapsing child
    nodes in the `TreeTable` component.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0" />`：这个`<p-treeTableToggler>`组件用于在`TreeTable`组件中显示一个切换按钮，用于展开和折叠子节点。'
- en: 'With this implementation, the `TreeTable` will display the product data with
    the appropriate columns based on the selected type. Let’s look at the result:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种实现，`TreeTable`将根据所选类型显示适当的产品数据列。让我们看看结果：
- en: '![Figure 7.6 – TreeTable with dynamic columns](img/B18805_07_06.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6 – 带有动态列的 TreeTable](img/B18805_07_06.jpg)'
- en: Figure 7.6 – TreeTable with dynamic columns
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 带有动态列的 TreeTable
- en: If the user switches from the **Rating** type to the **Quantity** type, the
    table will automatically update to show the **Quantity** column instead of **Rating**,
    as depicted back in *Figure 7**.5*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户从**评分**类型切换到**数量**类型，表格将自动更新以显示**数量**列而不是**评分**，如图7.5所示。
- en: Enabling the TreeTable paginator
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 TreeTable 分页器
- en: The `TreeTable` component that allows us to break down large sets of data into
    smaller, more manageable chunks or pages. Instead of displaying hundreds or thousands
    of rows all at once, the paginator lets users navigate through the data one page
    at a time. It provides controls for moving to the next page or previous page,
    jumping to the start or the end, and even selecting the page size.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`TreeTable` 组件允许我们将大量数据分解成更小、更易于管理的块或页面。而不是一次性显示数百或数千行，分页器允许用户逐页浏览数据。它提供了移动到下一页或上一页、跳转到开始或结束以及选择页面大小的控件。'
- en: 'We can easily enable the paginator in our `TreeTable` component by adding `paginator`
    and `rows` attributes, as shown in the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加`paginator`和`rows`属性轻松地在`TreeTable`组件中启用分页器，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, we’ve enabled pagination by setting `[paginator]="true"` and
    specified that we want to display two rows per page with `[rows]="2"`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过设置`[paginator]="true"`并指定每页显示两行来启用分页，`[rows]="2"`。
- en: 'The `TreeTable` component will now display pagination controls, and users can
    navigate through the product data page by page:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`TreeTable` 组件将显示分页控件，用户可以逐页浏览产品数据：
- en: '![Figure 7.7 – TreeTable with paginator](img/B18805_07_07.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – 带有分页器的 TreeTable](img/B18805_07_07.jpg)'
- en: Figure 7.7 – TreeTable with paginator
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 带分页器的树表
- en: Associated events and methods
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关事件和方法
- en: 'The `TreeTable` component provides various events and methods that you can
    leverage to enhance the functionality and interactivity of your application. Here
    are some commonly used events and methods:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`TreeTable` 组件提供了各种事件和方法，您可以利用这些来增强您应用程序的功能性和交互性。以下是一些常用的事件和方法：'
- en: '`onNodeExpand`: This event is triggered when a node is expanded'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onNodeExpand`: 当节点被展开时触发此事件'
- en: '`onNodeCollapse`: This event is triggered when a node is collapsed'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onNodeCollapse`: 当节点折叠时触发此事件'
- en: '`onNodeSelect`: This event is triggered when a node is selected'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onNodeSelect`: 当选择一个节点时触发此事件'
- en: '`onNodeUnselect`: This event is triggered when a node is unselected'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onNodeUnselect`: 当节点被取消选择时触发此事件'
- en: '`reset`: This method clears the sort and paginator state*   `resetScrollTop`:
    This method resets scroll to top*   `scrollToVirtualIndex`: This method scrolls
    to a given index when using virtual scrolling*   `scrollTo`: This method scrolls
    to the given index'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use these events and methods to customize the behavior of the `TreeTable`
    component based on your application’s requirements. For example, you can listen
    to the `onNodeCollapse` event to perform certain actions when a node is collapsed,
    such as removing detailed information or triggering additional operations:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这些事件和方法根据您应用程序的需求自定义`TreeTable`组件的行为。例如，您可以通过监听`onNodeCollapse`事件在节点折叠时执行某些操作，例如删除详细信息或触发附加操作：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s break down the code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '`(onNodeCollapse)="handleNodeCollapse($event)"`: This binds the `handleNodeCollapse`
    method to the event that occurs when a node in the `TreeTable` component is collapsed.
    The method will be called with the `event` object as an argument.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(onNodeCollapse)="handleNodeCollapse($event)"`: 这将 `handleNodeCollapse` 方法绑定到
    `TreeTable` 组件中节点折叠时发生的事件。该方法将使用 `event` 对象作为参数被调用。'
- en: '`handleNodeCollapse(event: TreeTableNodeCollapseEvent) { ... }`: This takes
    the `event` object of the `TreeTableNodeCollapseEvent` type as an argument. This
    `event` object contains information about the collapsed node, which you can use
    to handle the event.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleNodeCollapse(event: TreeTableNodeCollapseEvent) { ... }`: 这接受一个 `TreeTableNodeCollapseEvent`
    类型的 `event` 对象作为参数。这个 `event` 对象包含了有关折叠节点的信息，您可以使用这些信息来处理事件。'
- en: Throughout our exploration of the PrimeNG `TreeTable` component, we’ve seen
    its power in presenting hierarchical data in a structured and user-friendly manner.
    From dynamic columns to efficient pagination, the `TreeTable` component offers
    a robust solution for various data representation challenges. Now, let’s shift
    our focus to the PrimeNG `Timeline` component, a tool that beautifully visualizes
    data in a chronological sequence.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索 PrimeNG 的 `TreeTable` 组件过程中，我们已经看到了它在以结构化和用户友好的方式呈现层次化数据方面的强大功能。从动态列到高效的分页，`TreeTable`
    组件为各种数据表示挑战提供了一个强大的解决方案。现在，让我们将焦点转移到 PrimeNG 的 `Timeline` 组件上，这是一个能够以时间顺序美妙的可视化数据的工具。
- en: Working with Timeline components
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时间线组件
- en: The PrimeNG `Timeline` component is a powerful component provided by the PrimeNG
    library for Angular applications, allowing you to visualize a series of chained
    events in chronological order. The timeline provides a user-friendly and interactive
    way to display events, making it easier for users to understand the sequence of
    activities or changes over time.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 的 `Timeline` 组件是 Angular 应用程序中由 PrimeNG 库提供的强大组件，它允许您按时间顺序可视化一系列连锁事件。时间轴提供了一种用户友好且交互式的显示事件的方式，使用户更容易理解活动或随时间变化的顺序。
- en: The PrimeNG `Timeline` component is designed to present events in a linear fashion,
    allowing users to navigate through different stages or milestones. Each event
    in the timeline is represented by a marker, which can be customized to show relevant
    information such as status, date, or any other meaningful data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 的 `Timeline` 组件旨在以线性方式呈现事件，使用户能够浏览不同的阶段或里程碑。时间线中的每个事件都由一个标记表示，该标记可以自定义以显示相关信息，例如状态、日期或任何其他有意义的资料。
- en: The timeline offers various features to enhance the user experience – it supports
    both vertical and horizontal layouts, providing flexibility in terms of the orientation
    of the timeline, plus alignment options to position the timeline bar relative
    to the content.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 时序图提供了各种功能来增强用户体验——它支持垂直和水平布局，提供了时序图方向的灵活性，以及对齐选项来定位时序图条相对于内容的位置。
- en: When to use the PrimeNG Timeline component
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当使用 PrimeNG 时序图组件时
- en: 'The PrimeNG `Timeline` component can be used in a wide range of applications
    and scenarios. Here are a few examples of when the `Timeline` component can be
    beneficial:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 的 `Timeline` 组件可以在各种应用程序和场景中使用。以下是一些 `Timeline` 组件可能有益的示例：
- en: '**Project management**: Use a timeline to showcase project milestones, such
    as project initiation, requirements gathering, development phases, and project
    completion. It helps stakeholders and team members visualize the project’s progress
    and understand the sequence of key events.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目管理**：使用时序图来展示项目里程碑，例如项目启动、需求收集、开发阶段和项目完成。这有助于利益相关者和团队成员可视化项目的进度并理解关键事件的顺序。'
- en: '**Order tracking**: If you have an e-commerce application, you can utilize
    a timeline to display the different stages of order processing, such as order
    placement, payment verification, order fulfillment, and delivery. This gives customers
    a clear overview of the order’s progress.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订单跟踪**：如果您有一个电子商务应用程序，可以利用时序图来显示订单处理的各个阶段，如订单提交、支付验证、订单履行和交付。这为顾客提供了一个清晰的订单进度概览。'
- en: '**Historical events**: A timeline is also suitable for presenting historical
    events or significant achievements. For instance, you can use it to illustrate
    the timeline of scientific discoveries, major historical events, or the evolution
    of a specific industry.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**历史事件**：时序图也适合展示历史事件或重大成就。例如，您可以使用它来展示科学发现的时序、重大历史事件或特定行业的演变。'
- en: '**Product updates**: If you maintain a product roadmap or want to showcase
    the release history of your software product, a timeline can be an effective way
    to present the different versions, updates, and new features over time.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品更新**：如果您维护产品路线图或想展示软件产品的发布历史，时序图可以是一种有效的方式来展示随时间推移的不同版本、更新和新功能。'
- en: Whenever there’s a need to represent a series of events in the order they took
    place, the PrimeNG `Timeline` component is an excellent choice.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 每当需要按事件发生的顺序表示一系列事件时，PrimeNG 的 `Timeline` 组件是一个极佳的选择。
- en: Creating a basic timeline
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本时序图
- en: 'To get started, we need to import the necessary modules from the PrimeNG library:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要从 PrimeNG 库中导入必要的模块：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once we have the dependencies installed and imported, we can use the `Timeline`
    component in our Angular template. Here’s an example of how we can display the
    order status in a timeline layout:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装并导入了依赖项，我们就可以在 Angular 模板中使用 `Timeline` 组件。以下是一个如何在时序图布局中显示订单状态的示例：
- en: '[PRE13]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s break down the code and understand its functionality:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码并理解其功能：
- en: '`<p-timeline [value]="orderStatuses">`: This represents the usage of the PrimeNG
    `Timeline` component. It binds the `value` property of the `Timeline` component
    to the `orderStatuses` variable.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p-timeline [value]="orderStatuses">`：这代表了 PrimeNG 的 `Timeline` 组件的使用。它将 `Timeline`
    组件的 `value` 属性绑定到 `orderStatuses` 变量。'
- en: '`<ng-template pTemplate="content" let-order>`: This defines the template for
    rendering the content of each status in the timeline.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ng-template pTemplate="content" let-order>`：这定义了在时序图中渲染每个状态内容的模板。'
- en: '`orderStatuses`: This represents different stages or statuses of an order.
    Each element in the array corresponds to a specific event that will be displayed
    on the timeline.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderStatuses`：这代表订单的不同阶段或状态。数组中的每个元素对应将在时序图中显示的特定事件。'
- en: Overall, the code demonstrates how to use the PrimeNG `Timeline` component to
    display a timeline of order status. The timeline is populated with status data
    from the `orderStatuses` array, and each status is rendered using a template that
    includes an icon and a title. This allows for a visually appealing and informative
    representation of events in chronological order.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，代码展示了如何使用 PrimeNG 的 `Timeline` 组件来显示订单状态的时序图。时序图通过 `orderStatuses` 数组中的状态数据填充，每个状态都使用包含图标和标题的模板进行渲染。这允许以直观且信息丰富的方式按时间顺序展示事件。
- en: 'Here is the result of the code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的结果：
- en: '![Figure 7.8 – Basic timeline](img/B18805_07_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 基本时序图](img/B18805_07_08.jpg)'
- en: Figure 7.8 – Basic timeline
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 基本时间线
- en: Timeline alignment
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间线对齐
- en: The PrimeNG **timeline alignment** feature enables you to control the location
    of the content relative to the timeline. You can align the content to the left,
    right, top, bottom, or alternate sides of the timeline. This flexibility allows
    you to customize the appearance and layout of the timeline based on your design
    preferences or application needs.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG的**时间线对齐**功能允许您控制内容相对于时间线的位置。您可以将内容对齐到时间线的左侧、右侧、顶部、底部或交替侧。这种灵活性允许您根据您的设计偏好或应用需求自定义时间线的外观和布局。
- en: 'Let’s imagine we’re building a timeline to showcase the order statuses of a
    product. You can customize the alignment by choosing different values for the
    `align` attribute, such as `left`, `right`, or `alternate`, depending on your
    specific design requirements. Let’s update the alignment in our existing order
    status timeline:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象我们正在构建一个时间线来展示产品的订单状态。您可以通过选择`align`属性的不同的值来自定义对齐方式，例如`left`、`right`或`alternate`，具体取决于您的特定设计要求。让我们更新我们现有的订单状态时间线的对齐方式：
- en: '[PRE14]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the code snippet, we have used the `align` attribute with the `alternate`
    value to align the content of each activity on alternate sides of the timeline
    line. This layout creates an interesting visual pattern, with activities appearing
    on both the left and right sides of the timeline:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码片段中，我们使用了`align`属性并设置为`alternate`值，以使每个活动的内容在时间线线的交替两侧对齐。这种布局创建了一个有趣的视觉模式，活动出现在时间线的左右两侧：
- en: '![Figure 7.9 – Timeline alignment](img/B18805_07_09.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 时间线对齐](img/B18805_07_09.jpg)'
- en: Figure 7.9 – Timeline alignment
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 时间线对齐
- en: Timeline horizontal layout
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间线水平布局
- en: In addition to the alignment options, the PrimeNG `Timeline` component also
    provides a horizontal layout option. The horizontal layout is designed to present
    events or milestones in a linear fashion from left to right, which is particularly
    useful when you want to showcase a timeline that spans across a wide area, such
    as a project timeline or a historical sequence of events.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对齐选项之外，PrimeNG的`Timeline`组件还提供了一个水平布局选项。水平布局旨在从左到右线性地展示事件或里程碑，这在您想要展示跨越广阔区域的时间线时尤其有用，例如项目时间线或历史事件序列。
- en: 'To use `Timeline` with a horizontal layout, you can set the `layout` attribute
    to `horizontal` in the `Timeline` component. Let’s take a look at an example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用具有水平布局的`Timeline`，您可以在`Timeline`组件中将`layout`属性设置为`horizontal`。让我们看看一个例子：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the code snippet, we have set the `layout` attribute to `horizontal`, indicating
    that we want to display the timeline events in a horizontal manner. Here is the
    result:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码片段中，我们将`layout`属性设置为`horizontal`，表示我们希望以水平方式显示时间线事件。以下是结果：
- en: '![Figure 7.10 – Horizontal timeline](img/B18805_07_10.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10 – 水平时间线](img/B18805_07_10.jpg)'
- en: Figure 7.10 – Horizontal timeline
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 水平时间线
- en: Through our exploration of the PrimeNG `Timeline` component, we’ve seen how
    it offers a dynamic way to visually represent events, milestones, or processes.
    Its flexibility, from basic event representation to features such as alignment
    or layout, ensures that we can craft narratives tailored to our needs. As we wrap
    up this section, let’s take a moment to reflect on our journey and summarize the
    key takeaways.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们对PrimeNG的`Timeline`组件的探索，我们看到了它如何提供一种动态的方式来视觉表示事件、里程碑或过程。它的灵活性，从基本事件表示到对齐或布局等特性，确保我们可以根据我们的需求定制叙述。在我们结束这一节的时候，让我们花点时间回顾我们的旅程并总结关键要点。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Navigating through the chapter, we explored the intricacies of representing
    hierarchical and chronological data using PrimeNG’s `Tree`, `TreeTable`, and `Timeline`
    components. These powerful tools play a pivotal role in presenting structured
    data in a visually appealing and user-friendly manner, whether it’s displaying
    a hierarchical structure of items or visualizing a sequence of events over time.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用PrimeNG的`Tree`、`TreeTable`和`Timeline`组件表示层次和时序数据的复杂性。这些强大的工具在以视觉吸引力和用户友好的方式展示结构化数据方面发挥着关键作用，无论是显示项目的层次结构还是可视化随时间推移的事件序列。
- en: We began by uncovering the capabilities of the `Tree` component and understanding
    its significance in effectively representing data with parent-child relationships.
    The `TreeTable` component expanded on this concept by offering a seamless integration
    of tabular and hierarchical data presentation. Additionally, the `Timeline` component
    showcased its prowess in visualizing sequences, milestones, or events in chronological
    order, providing us with the flexibility to present narratives or process flows
    with clarity and coherence.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从揭示`Tree`组件的能力和了解其在有效表示父子关系数据中的重要性开始。`TreeTable`组件在此基础上扩展了这一概念，通过提供表格和层次数据展示的无缝集成。此外，`Timeline`组件展示了其在按时间顺序可视化序列、里程碑或事件方面的能力，为我们提供了清晰和连贯地呈现叙事或流程的灵活性。
- en: By mastering these components, we equip ourselves with the necessary tools to
    effectively present complex data structures in an intuitive manner. This not only
    enhances the user experience but also ensures that our applications are functional
    and aesthetically pleasing.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握这些组件，我们为自己配备了有效以直观方式呈现复杂数据结构的必要工具。这不仅提升了用户体验，还确保了我们的应用既实用又美观。
- en: As we gear up for the next journey, we will delve into another set of PrimeNG
    components that further elevate our application’s interactivity and functionality.
    Get ready to explore navigation and layout components in the next chapter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们为下一次旅程做好准备，我们将深入探讨另一组PrimeNG组件，这些组件将进一步提升我们应用的用户交互性和功能性。准备好在下一章探索导航和布局组件。
