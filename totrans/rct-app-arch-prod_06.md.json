["```js\ngit clone https://github.com/PacktPublishing/React-Application-Architecture-for-Production.git\n```", "```js\nnpm install\n```", "```js\ncp .env.example .env\n```", "```js\nnpm run stage:switch\n```", "```js\n? What stage do you want to switch to? (Use arrow\n keys)\n❯ chapter-02\n  chapter-03\n  chapter-03-start\n  chapter-04\n  chapter-04-start\n  chapter-05\n  chapter-05-start\n(Move up and down to reveal more choices)\n```", "```js\nimport Axios from 'axios';\nimport { API_URL } from '@/config/constants';\nexport const apiClient = Axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\napiClient.interceptors.response.use(\n  (response) => {\n    return response.data;\n  },\n  (error) => {\n    const message =\n      error.response?.data?.message || error.message;\n    console.error(message);\n    return Promise.reject(error);\n  }\n);\n```", "```js\nconst loadData = () => Promise.resolve('data');\nconst DataComponent = () => {\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [isLoading, setIsLoading] = useState();\n  useEffect(() => {\n    setIsLoading(true);\n    loadData()\n      .then((data) => {\n        setData(data);\n      })\n      .catch((error) => {\n        setError(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n  if (isLoading) return <div>Loading</div>;\n  if (error) return <div>{error}</div>;\n  return <div>{data}</div>;\n};\n```", "```js\nimport { useQuery } from '@tanstack/react-query';\nconst loadData = () => Promise.resolve('data');\nconst DataComponent = () => {\n  const {data, error, isLoading} = useQuery({\n    queryFn: loadData,\n    queryKey: ['data']\n  })\n  if (isLoading) return <div>Loading</div>;\n  if (error) return <div>{error}</div>;\n  return <div>{data}</div>;\n};\n```", "```js\nimport { QueryClient } from '@tanstack/react-query';\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      refetchOnWindowFocus: false,\n      useErrorBoundary: true,\n    },\n  },\n});\n```", "```js\nimport {\n  ChakraProvider,\n  GlobalStyle,\n} from '@chakra-ui/react';\nimport { QueryClientProvider } from '@tanstack/\n  react-query';\nimport { ReactQueryDevtools } from '@tanstack/\n  react-query-devtools';\nimport { ReactNode } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { theme } from '@/config/theme';\nimport { queryClient } from '@/lib/react-query';\ntype AppProviderProps = {\n  children: ReactNode;\n};\nexport const AppProvider = ({\n  children,\n}: AppProviderProps) => {\n  return (\n    <ChakraProvider theme={theme}>\n      <ErrorBoundary\n        fallback={<div>Something went wrong!</div>}\n        onError={console.error}\n      >\n        <GlobalStyle />\n        <QueryClientProvider client={queryClient}>\n          <ReactQueryDevtools initialIsOpen={false} />\n          {children}\n        </QueryClientProvider>\n      </ErrorBoundary>\n    </ChakraProvider>\n  );\n};\n```", "```js\nimport { useQuery } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api-client';\nimport { Job } from '../types';\ntype GetJobsOptions = {\n  params: {\n    organizationId: string | undefined;\n  };\n};\nexport const getJobs = ({\n  params,\n}: GetJobsOptions): Promise<Job[]> => {\n  return apiClient.get('/jobs', {\n    params,\n  });\n};\nexport const useJobs = ({ params }: GetJobsOptions) => {\n  const { data, isFetching, isFetched } = useQuery({\n    queryKey: ['jobs', params],\n    queryFn: () => getJobs({ params }),\n    enabled: !!params.organizationId,\n    initialData: [],\n  });\n  return {\n    data,\n    isLoading: isFetching && !isFetched,\n  };\n};\n```", "```js\nexport * from './api/get-jobs';\n```", "```js\nimport { useQuery } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api-client';\nimport { Job } from '../types';\ntype GetJobOptions = {\n  jobId: string;\n};\nexport const getJob = ({\n  jobId,\n}: GetJobOptions): Promise<Job> => {\n  return apiClient.get(`/jobs/${jobId}`);\n};\nexport const useJob = ({ jobId }: GetJobOptions) => {\n  const { data, isLoading } = useQuery({\n    queryKey: ['jobs', jobId],\n    queryFn: () => getJob({ jobId }),\n  });\n  return { data, isLoading };\n};\n```", "```js\nexport * from './api/get-job';\n```", "```js\nimport { useMutation } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api-client';\nimport { queryClient } from '@/lib/react-query';\nimport { Job, CreateJobData } from '../types';\ntype CreateJobOptions = {\n  data: CreateJobData;\n};\nexport const createJob = ({\n  data,\n}: CreateJobOptions): Promise<Job> => {\n  return apiClient.post(`/jobs`, data);\n};\ntype UseCreateJobOptions = {\n  onSuccess?: (job: Job) => void;\n};\nexport const useCreateJob = ({\n  onSuccess,\n}: UseCreateJobOptions = {}) => {\n  const { mutate: submit, isLoading } = useMutation({\n    mutationFn: createJob,\n    onSuccess: (job) => {\n      queryClient.invalidateQueries(['jobs']);\n      onSuccess?.(job);\n    },\n  });\n  return { submit, isLoading };\n};\n```", "```js\nimport { useQuery } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/api-client';\nimport { Organization } from '../types';\ntype GetOrganizationOptions = {\n  organizationId: string;\n};\nexport const getOrganization = ({\n  organizationId,\n}: GetOrganizationOptions): Promise<Organization> => {\n  return apiClient.get(\n    `/organizations/${organizationId}`\n  );\n};\nexport const useOrganization = ({\n  organizationId,\n}: GetOrganizationOptions) => {\n  const { data, isLoading } = useQuery({\n    queryKey: ['organizations', organizationId],\n    queryFn: () => getOrganization({ organizationId }),\n  });\n  return { data, isLoading };\n};\n```", "```js\nexport * from './api/get-organization';\n```", "```js\nimport {\n  getJobs,\n  getOrganization,\n} from '@/testing/test-data';\n```", "```js\nimport { JobsList, Job, getJobs } from '@/features/jobs';\nimport {\n  getOrganization,\n  OrganizationInfo,\n} from '@/features/organizations';\n```", "```js\nconst [organization, jobs] = await Promise.all([\n  getOrganization(organizationId).catch(() => null),\n  getJobs(organizationId).catch(() => [] as Job[]),\n]);\n```", "```js\nconst [organization, jobs] = await Promise.all([\n  getOrganization({ organizationId }).catch(() => null),\n  getJobs({\n    params: {\n      organizationId: organizationId,\n    },\n  }).catch(() => [] as Job[]),\n]);\n```", "```js\nimport {\n  getJob,\n  getOrganization,\n} from '@/testing/test-data';\n```", "```js\nimport { getJob, PublicJobInfo } from '@/features/jobs';\nimport { getOrganization } from '@/features/organizations';\n```", "```js\nconst [organization, job] = await Promise.all([\n  getOrganization({ organizationId }).catch(() => null),\n  getJob({ jobId }).catch(() => null),\n]);\n```", "```js\nimport { JobsList, useJobs } from '@/features/jobs';\nimport { useUser } from '@/testing/test-data';\n```", "```js\nconst jobs = useJobs({\n  params: {\n    organizationId: user.data?.organizationId ?? '',\n  },\n});\n```", "```js\nimport { useJob } from '@/testing/test-data';\n```", "```js\nimport {\n  DashboardJobInfo,\n  useJob,\n} from '@/features/jobs';\n```", "```js\nconst job = useJob({ jobId });\n```", "```js\nimport { Box, Stack } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '@/components/button';\nimport { InputField } from '@/components/form';\nimport { useCreateJob } from '../../api/create-job';\nimport { CreateJobData } from '../../types';\nexport type CreateJobFormProps = {\n  onSuccess: () => void;\n};\nexport const CreateJobForm = ({\n  onSuccess,\n}: CreateJobFormProps) => {\n  const createJob = useCreateJob({ onSuccess });\n  const { register, handleSubmit, formState } =\n    useForm<CreateJobData>();\n  const onSubmit = (data: CreateJobData) => {\n    createJob.submit({ data });\n  };\n  return (\n    <Box w=\"full\">\n      <Stack\n        as=\"form\"\n        onSubmit={handleSubmit(onSubmit)}\n        w=\"full\"\n        spacing=\"8\"\n      >\n        <InputField\n          label=\"Position\"\n          {...register('position', {\n            required: 'Required',\n          })}\n          error={formState.errors['position']}\n        />\n        <InputField\n          label=\"Department\"\n          {...register('department', {\n            required: 'Required',\n          })}\n          error={formState.errors['department']}\n        />\n        <InputField\n          label=\"Location\"\n          {...register('location', {\n            required: 'Required',\n          })}\n          error={formState.errors['location']}\n        />\n        <InputField\n          type=\"textarea\"\n          label=\"Info\"\n          {...register('info', {\n            required: 'Required',\n          })}\n          error={formState.errors['info']}\n        />\n        <Button\n          isDisabled={createJob.isLoading}\n          isLoading={createJob.isLoading}\n          type=\"submit\"\n        >\n          Create\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n```"]