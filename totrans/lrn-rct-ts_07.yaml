- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are extremely common in apps, so it’s essential to be able to efficiently
    implement them. In some apps, forms can be large and complex, and getting them
    to perform well is challenging.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll learn how to build forms in React using different approaches.
    The example form we will make here is a contact form that you would often see
    on company websites. It will contain a handful of fields and some validation logic.
  prefs: []
  type: TYPE_NORMAL
- en: The first approach to building a form will be to store field values in the state.
    We will see how this approach can bloat code and hurt performance. The next approach
    embraces the browser’s native form capabilities, reducing the amount of code required
    and improving performance. We will then use React Router’s `Form` component, which
    we briefly covered in [*Chapter 6*](B19051_06.xhtml#_idTextAnchor151), *Routing
    with React Router*. The final approach will be to use a popular library called
    **React Hook Form**. We’ll experience how React Hook Form helps us implement form
    validation and submission logic while maintaining excellent performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using controlled fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using uncontrolled fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React Router Form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using native validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React Hook Form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser**: A modern browser such as Google Chrome'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter7](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter7).
  prefs: []
  type: TYPE_NORMAL
- en: Using controlled fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build the first version of our contact form. It will
    contain fields for the user’s name, email address, contact reason, and any additional
    notes the user may want to make.
  prefs: []
  type: TYPE_NORMAL
- en: This method will involve the use of **controlled fields**, which is where field
    values are stored in the state. We will use this approach to implement the form
    – however, in doing so, we will pay attention to the amount of code required and
    the negative impact on performance; this will help you see why other methods are
    better.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, first, we need to create a React and TypeScript project, as
    in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will develop the form using Visual Studio Code and a new Create React App
    based project setup. We’ve previously covered this several times, so we will not
    cover the steps in this chapter – instead, refer to [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React and TypeScript*. Create the project for the contact form with
    the name of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: We will style the form with Tailwind CSS. We have previously covered how to
    install and configure Tailwind in Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*, so after you have created the React and TypeScript
    project, install and configure Tailwind.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a Tailwind plugin to help us style the form – it provides nice
    styles for field elements out of the box. Carry out the steps below to install
    and configure this plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install this plugin by running the following command in a terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `tailwind.config.js` to configure the plugin. Add the highlighted code
    to this file to tell Tailwind to use the forms plugin we just installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the project setup. Next, we will create the first version of
    the form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a contact form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, carry out the following steps to create the first version of the contact
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `ContactPage.tsx` in the `src` folder with the following
    `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported the `useState` hook and the `FormEvent` type from React, which
    we will eventually use in the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `type` alias under the import statement. This type will represent
    all the field values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `function` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This displays a heading and some instructions, horizontally centered on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following fields inside the `form` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have added fields for the user’s name, email address, contact reason, and
    additional notes. Each field label is associated with its editor by setting the
    `htmlFor` attribute to the editor’s `id` value. This helps assistive technology
    such as screen readers to read out labels when fields gain focus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `submit` button to the bottom of the `form` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The field containers will all have the same style, so create a variable for
    the style and assign it to all the field containers as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The fields are nicely styled now using a vertically flowing flexbox and a small
    margin under each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the state to hold the field values as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have given the state the `Contact` type we created earlier and initialized
    the field values to empty strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bind the state to the `name` field editor as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`value` is set to the current value of the state. `onChange` is triggered when
    the user fills in the input element, which we use to update the state value. To
    construct the new state object, we clone the current state and override its `name`
    property with the new value from the `onChange` parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat the same approach for the binding state to the other field editors as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a submit handler to the `form` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The submit handler parameter is typed using React’s `FormEvent` type. The submit
    handler function prevents the form from being sent to the server using the `preventDefault`
    method on the handler parameter. Instead of sending the form to a server, we output
    the `contact` state to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to render `ContactPage` in the `App` component. Open `App.tsx`
    and replace its content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `App` component simply renders the `ContactPage` page component we just
    created. The `App` component also remains a default export so that `index.tsx`
    isn’t broken.
  prefs: []
  type: TYPE_NORMAL
- en: 'That completes the first iteration of the form. We will now use the form and
    discover a potential performance problem. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app in development mode by executing `npm start` in the terminal. The
    form appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Contact form](img/B19051_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Contact form
  prefs: []
  type: TYPE_NORMAL
- en: We are going to highlight component re-rendering using React DevTools, which
    will highlight a potential performance problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the browser DevTools and select the **Components** panel. If there is no
    **Components** panel, ensure that the React DevTools are installed in the browser
    (see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072) for how to install React
    DevTools).
  prefs: []
  type: TYPE_NORMAL
- en: Click on the settings cog to view the React DevTools settings and tick the **Highlight
    updates when components render** option. This option will display a blue-green
    outline around components in the page that re-render.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form and notice a bluey green outline appears around the form every
    time a character is entered into a field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Highlighted re-render for every keystroke](img/B19051_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Highlighted re-render for every keystroke
  prefs: []
  type: TYPE_NORMAL
- en: So, every time a character is entered into a field, the whole form is re-rendered.
    This makes sense because a state change occurs when a field changes, and a state
    change causes a re-render. This isn’t a huge problem in this small form but can
    be a significant performance problem in larger forms.
  prefs: []
  type: TYPE_NORMAL
- en: Complete all the fields in the form and click on the **Submit** button. The
    field values are output to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That completes the first iteration of the form. Keep the app running as we reflect
    on the implementation and move to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The key takeaway from this section is that controlling field values with the
    state can lead to performance problems. Having to bind the state to each field
    also feels a bit repetitive.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement a more performant and succinct version of the form.
  prefs: []
  type: TYPE_NORMAL
- en: Using uncontrolled fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Uncontrolled fields** are the opposite of controlled fields – it’s where
    field values *aren’t* controlled by state. Instead, native browser features are
    used to obtain field values. In this section, we will refactor the contact form
    to use uncontrolled fields and see the benefits.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `ContactPage.tsx` and start by removing `useState` from the React import,
    because this is no longer required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, at the top of the `component` function, remove the call to `useState`
    (this iteration of the form won’t use any state).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `value` and `onChange` props from the field editors, because we are
    no longer controlling field values with the state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add a `name` attribute on all the field editors as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `name` attribute is important because it will allow us to easily extract
    field values in the form submit handler, which we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in the submit handler to extract the field values before
    they are output to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`FormData` is an interface that allows access to values in a form and takes
    in a form element in its constructor parameter. It contains a `get` method that
    returns the value of the field whose name is passed as an argument. For more information
    on `FormData`, see [https://developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).'
  prefs: []
  type: TYPE_NORMAL
- en: That completes the refactoring of the form. To recap, uncontrolled fields don’t
    have values stored in the state. Instead, field values are obtained using `FormData`,
    which relies on field editors having a `name` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the reduced code in the implementation compared to the controlled fields
    implementation. We will now try the form and check whether the form is re-rendered
    on every keystroke. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the running app, make sure DevTools is still open with the **Highlight updates
    when the components render** option still ticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form and you will notice that the re-render outline never appears.
    This makes sense because there is no longer any state, so a re-render can’t occur
    because of a state change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete all the fields in the form and click on the **Submit** button. The
    field values are output to the console just as they were before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Completed form with submitted data in console](img/B19051_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Completed form with submitted data in console
  prefs: []
  type: TYPE_NORMAL
- en: Stop the app from running by pressing *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, this implementation is shorter, more performant, and an excellent approach
    for simple forms. The key points in the implementation are to include a `name`
    attribute for field editors and use the `FormData` interface to extract the form
    values.
  prefs: []
  type: TYPE_NORMAL
- en: The current implementation is very simple though – for example, there is no
    submission success message. In the next section, we will use React Router and
    add a submission message.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Router Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 6*](B19051_06.xhtml#_idTextAnchor151), we started to learn about
    React Router’s `Form` component. We learned that `Form` is a wrapper around the
    HTML `form` element that handles the form submission. We will now cover `Form`
    in more detail and use it to provide a nice submission success message on our
    contact form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install React Router by executing the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s create a `ThankYouPage` component, which will inform the user that
    their submission has been successful. To do this, create a file called `ThankYouPage.tsx`
    in the `src` folder with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component uses a route parameter for the person’s name that is included
    in the thank you message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `App.tsx` and add the following imports from React Router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We haven’t come across React Router’s `Navigate` component before – it is a
    component that performs navigation. We will use this in *step 5*, in the route
    definitions, to redirect from the root path to the contact page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `contactPageAction` to the `import` statement for `ContactPage` and also
    import the `ThankYouPage` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that `contactPageAction` doesn’t exist yet, so a compile error will occur.
    We will resolve this error in *step 9*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in `App.tsx`, set up routes that render the contact and thank you pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is an `action` property on the `contact` route that we haven’t covered
    yet – this handles form submission. We have set this to `contactPageAction`, which
    we will create in *step 9*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last task in `App.tsx` is to change the `App` component to return `RouterProvider`
    with the route definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `ContactPage.tsx` and add the following imports from React Router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSX, change the `form` element to be a React Router `Form` component
    and remove the `onSubmit` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have set the form’s method to `"post"` because the form will mutate data.
    The default form method is `"get"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, move the `handleSubmit` function outside the component, to the bottom
    of the file. Rename the function to `contactPageAction`, allow it to be exported,
    and make it asynchronous:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will now be a React Router action that handles part of the form submission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the parameters on `contactPageAction` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: React Router will pass in a `request` object when it calls this function.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `e.preventDefault()` statement in `contactPageAction` because React
    Router does this for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `formData` assignment to get the data from the React Router’s `request`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last change to the `contactPageAction` function is to redirect to the thank
    you page at the end of the submission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove the `FormEvent` import because this is redundant now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app in development mode by executing `npm start` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app will automatically redirect to the `Contact` page. Complete the form
    and submit it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The app will redirect to the thank you page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Thank you page](img/B19051_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Thank you page
  prefs: []
  type: TYPE_NORMAL
- en: That completes this section on React Router’s form capability. Keep the app
    running as we recap and move to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key points on React Router’s `Form` component are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: React Router’s `Form` component is a wrapper around the HTML `form` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The form is submitted to the current route by default, but can be submitted
    to a different path using the `path` attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can write logic inside the submission process using an action function defined
    on the route that is submitted to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on React Router’s Form component, see the following link:
    [https://reactrouter.com/en/components/form](https://reactrouter.com/en/components/form).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will implement validation on the form.
  prefs: []
  type: TYPE_NORMAL
- en: Using native validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will add the required validation to the name, email, and
    reason fields and ensure that the email matches a particular pattern. We will
    use standard HTML form validation to implement these rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `ContactPage.tsx`, add a `required` attribute to the name, email, and reason
    field editors to add HTML form required validation for these fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following pattern-matching validation on the `email` field editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This pattern will ensure that the entry is in an email format.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the running app, without populating any fields, submit the form. Validation
    kicks in and the form submission doesn’t complete. Instead, the name field is
    focused and an error message appears beneath it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – HTML form validation message for the name field](img/B19051_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – HTML form validation message for the name field
  prefs: []
  type: TYPE_NORMAL
- en: Note that the error message is styled slightly differently in different browsers
    – the preceding screenshot is from Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Correctly fill in the name field so that it is valid. Then, move on to experiment
    with the email field validation. For example, try entering an email address without
    an @ character; you will find that the email field needs to be populated with
    a correctly formatted email address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – HTML form validation message for the email field](img/B19051_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – HTML form validation message for the email field
  prefs: []
  type: TYPE_NORMAL
- en: Correctly fill in the email field so that it is valid. Then, move on to experiment
    with the reason field validation. Try to select the blank reason and you will
    find that a validation error occurs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Correctly fill in all the fields and submit the form. You will find that the
    thank you message appears as it did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the app from running by pressing *CTRL* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The simplicity of the implementation of standard HTML form validation is nice.
    However, if we want to customize the validation user experience, we’ll need to
    write JavaScript to use the constraint validation API. For information on this
    API and more information on HTML form validation, see the following link: [https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll use a popular form library to improve the validation
    user experience. This is a little easier to work with in React than the constraint
    validation API.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Hook Form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about React Hook Form and use it to improve the
    validation user experience in our contact form.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React Hook Form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name suggests, React Hook Form is a React library for building forms.
    It is very flexible and can be used for simple forms such as our contact form,
    as well as large forms with complex validation and submission logic. It is also
    very performant and optimised not to cause unnecessary re-renders. It is also
    very popular with tens of thousands of GitHub stars and maturing nicely having
    been first released in 2019.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key part of React Hooks Form is a `useForm` hook, which returns useful
    functions and the state. The following code snippet shows the `useForm` hook being
    called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '`useForm` has a generic type parameter for the type of the field values. In
    the preceding example, the field values type is `FormData`.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the register function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A key function that `useForm` returns is a `register` function, which takes
    in a unique field name and returns the following in an object structure:'
  prefs: []
  type: TYPE_NORMAL
- en: An `onChange` handler, which happens when the field editor’s value changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `onBlur` handler, which happens when the field editor loses focus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reference to the field editor element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The field name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These items returned from the `register` function are spread onto the field
    editor element to allow React Hook Form to efficiently track its value. The following
    code snippet allows a name field editor to be tracked by React Hook Form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: 'After the result of `register` has been spread on to the `input` element, it
    will contain `ref`, `name`, `onChange`, and `onBlur` attributes.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: The `ref`, `onChange`, and `onBlur` attributes will reference code in React
    Hook Form that tracks the value of the `input` element.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Field validation is defined in the `register` field in an options parameter
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, required validation is specified. The associated
    error message can be defined as an alternative to the `true` flag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a range of different validation rules that can be applied. See this
    page in the React Hook Form documentation for a list of all the rules that are
    available: [https://react-hook-form.com/get-started#applyvalidation](https://react-hook-form.com/get-started#applyvalidation).'
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining validation errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `useForm` returns a state called `errors`, which contains the form validation
    errors. The `errors` state is an object containing invalid field error messages.
    For example, if a `name` field is invalid because a `required` rule has been violated,
    the `errors` object could be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: 'Fields in a valid state don’t exist in the `errors` object, so a field validation
    error message can be conditionally rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, if the name field is valid, `errors.name` will
    be `undefined`, and so the error message won’t render. If the name field is invalid,
    `errors.name` will contain the error and so the error message will render.
  prefs: []
  type: TYPE_NORMAL
- en: Handling submission
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `useForm` hook also returns a handler called `handleSubmit` that can be
    used for form submission. `handleSubmit` takes in a function that React Hook Form
    calls when it has successfully validated the form. Here’s an example of `handleSubmit`
    being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `onSubmit` is only called in the submission when the
    form is successfully validated and not when the form is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `isSubmitting` state can be used to disable elements whilst the form is
    being submitted. The following example disables the `submit` button while the
    form is being submitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '`isSubmitSuccessful` can be used to conditionally render a successful submission
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: There are many more features in React Hook Form, but these are the essential
    functions and states that are commonly used. Refer to the React Hook Form documentation
    for more information at [https://react-hook-form.com/](https://react-hook-form.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand React Hook Form’s basics, we will refactor our contact
    form to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Using React Hook Form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will refactor the contact form that we have been working on to use React
    Hook Form. The form will contain the same features but the implementation will
    use React Hook Form. After making the code changes, we will check how often the
    form is re-rendered using React’s DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: We will remove the use of React Router’s `Form` component– it currently handles
    form submission. React Hook Form is capable of handling submission as well, and
    we need it to fully control submission to ensure the form is valid as part of
    this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by installing React Hook Form. Run the following command in the
    terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: TypeScript types are included in this package, so there is no need for a separate
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `ContactPage.tsx` and add an `import` statement for `useForm` from React
    Hook Form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove `Form`, `redirect`, and `ActionFunctionArgs` from the React Router `import`
    statement and replace them with `useNavigate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use `useNavigate` to navigate to the thank you page at the end of the
    form submission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following call to `useForm` at the top of the `ContactPage` component
    and destructure the `register` and `handleSubmit` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following call to `useNavigate` after the call to `useForm` to get
    a function that we can use to perform navigation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSX, replace the use of React Router’s `Form` element with a native
    `form` element. Remove the `method` attribute on the `form` element, and replace
    it with the following `onSubmit` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will implement the `onSubmit` function in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `onSubmit` function after the call to `useNavigate`. React
    Hook Form will call this function with the form data after it has ensured the
    form is valid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function outputs the form data to the console and then navigates to the
    thank you page.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `contactPageAction` function at the bottom of the file because this
    is no longer required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `name` attribute on the field editors with a call to `register`.
    Pass the field name into `register` and spread the result of `register` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: React Hook Form will now be able to track these fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and remove `contactPageAction` from the `import` statement for
    `ContactPage` and remove it from the `/``contact` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app in development mode by executing `npm start` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the React DevTools and ensure the **Highlight updates when components render**
    option is still ticked so that we can observe when the form is re-rendered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form with valid values. The re-render outline doesn’t appear when
    the field values are entered because they aren’t using the state to cause a re-render
    yet. This is confirmation that React Hook Form efficiently tracks field values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Submit** button. After the form has been successfully submitted,
    the field values are output to the console and the thank you page appears, just
    as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve had to do a little more work to set up the form in React Hook Form so
    that it can track the fields. This enables React Hook Form to validate the fields,
    which we will implement in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now remove the use of standard HTML form validation and use React Hook
    Form’s validation. Using React Hook Form’s validation allows us to more easily
    provide a great validation user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `ContactPage.tsx` and add the `FieldError` type to the React Hook Form
    `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Destructure the `errors` state from `useForm` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`errors` will contain validation errors if there are any.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `noValidate` attribute to the form element to prevent any native HTML
    validation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove the native HTML validation rules on all the field editors by removing
    the validation `required` and `pattern` attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the required validation rules to the `register` function for the name,
    email, and reason fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have specified the validation error message with the validation rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an additional rule for the email field to ensure it matches a particular
    pattern:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now style fields if they are invalid. Each field is going to have the
    same styling logic, so define the style in a function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The field error is passed into the `getEditorStyle` function. The function returns
    a Tailwind CSS class that styles the element with a red border if there is an
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `getEditorStyle` function to style the name, email, and reasons fields
    when invalid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: React Hook Form’s `errors` state contains a property for a field containing
    a validation error if the field has an invalid value. For example, if the name
    field value is invalid, `errors` will contain a property called `name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s display the validation error under each field when it’s invalid.
    The structure and style of the error will be the same for each field with a varying
    message, so we will create a reusable validation error component. Create a file
    in the `src` folder called `ValidationError.tsx` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component has a `fieldError` prop for the field error from React Hook Form.
    Nothing is rendered if there is no field error. If there is an error, it is rendered
    with red text inside a `div` element. The `role="alert"` attribute allows a screen
    reader to read the validation error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to `ContactPage.tsx` and import the `ValidationError` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add instances of `ValidationError` beneath each field editor as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That completes the implementation of the form validation. We will now test
    our enhanced form in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the running app, ensure the **Highlight updates when components render**
    option is still ticked in DevTools so we can observe when the form is re-rendered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button without filling in the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Highlighted re-render and validation errors when the form is
    submitted](img/B19051_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Highlighted re-render and validation errors when the form is submitted
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the form and click on the `errors` state. This is a necessary re-render
    because we need the page to update with the validation error messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another thing that you may have noticed is that nothing is output to the console
    because our `onSubmit` function is not called until the form is valid.
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the form correctly and submit it. The field values are now output to
    the console and the thank you page appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The form is working nicely now.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing you may have spotted is when validation actually happens – it happens
    when the form is submitted. We will change the validation to happen every time
    a field editor loses focus. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On `ContactPage.tsx`, add the following argument to the `useForm` call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `mode` option now tells React Hook Form to initially validate when a field
    editor loses focus. The `reValidationMode` option now tells React Hook Form to
    validate subsequently when a field editor loses focus.
  prefs: []
  type: TYPE_NORMAL
- en: In the running app, visit the fields in the form without filling them in and
    see the validation happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes the form and indeed this section on React Hook Form. Here’s
    a recap of the critical parts of React Hook Form:'
  prefs: []
  type: TYPE_NORMAL
- en: React Hook Form doesn’t cause unnecessary re-renders when a form is filled in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Hook Form’s `register` function needs to be spread on field editors. This
    function allows field values to be efficiently tracked and allows validation rules
    to be specified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Hook Form’s submit handler automatically prevents a server post and ensures
    the form is valid before our submission logic is called.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will summarize this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the start of this chapter, we learned that field values in a form can be
    controlled by the state. However, this leads to lots of unnecessary re-rendering
    of the form. We then realised that not controlling field values with the state
    and using the `FormData` interface to retrieve field values instead is more performant
    and requires less code.
  prefs: []
  type: TYPE_NORMAL
- en: We used React Router’s `Form` component, which is a wrapper around the native
    `form` element. It submits data to a client-side route instead of a server. However,
    it doesn’t cover validation – we tried using native HTML validation for that,
    which was simple to implement, but providing a great user experience with native
    HTML validation is tricky.
  prefs: []
  type: TYPE_NORMAL
- en: We introduced ourselves to a popular forms library called React Hook Form to
    provide a better validation user experience. It contains a `useForm` hook that
    returns useful functions and a state. The library doesn’t cause unnecessary renders,
    so it is very performant.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that React Hook Form’s `register` function needs to be spread on
    every field editor. This is so that it can efficiently track field values without
    causing unnecessary renders. We learned that React Hook Form contains several
    common validation rules, including required fields and field values that match
    a particular pattern. Field validation rules are specified in the `register` function
    and can be specified with an appropriate validation message. `useForm` returns
    an `errors` state variable, which can be used to render validation error messages
    conditionally.
  prefs: []
  type: TYPE_NORMAL
- en: We explored the submit handler that React Hook Form provides. We learned that
    it prevents a server post and ensures that the form is valid. This submit handler
    has an argument for a function that is called with the valid form data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on state management in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to check what you have learned about forms in
    React:'
  prefs: []
  type: TYPE_NORMAL
- en: How many times will the following form render after the initial render when
    `Bob` is entered into the name field?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How many times will the following form render after the initial render when
    `Bob` is entered into the name field?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following form contains an uncontrolled search field. When search criteria
    is entered into it and submitted, `null` appears in the console rather than the
    search criteria. Why is that so?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE503]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE504]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following component is a search form implemented using React Hook Form.
    When search criteria are entered into it and submitted, an empty object appears
    in the console, rather than an object containing the search criteria. Why is that
    so?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE506]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE507]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE508]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE509]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE510]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE511]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE512]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE513]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE514]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following component is another search form implemented using React Hook
    Form. The form does function correctly but a type error is raised on the `onSubmit`
    parameter. How can the type error be resolved?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE519]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE520]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Continuing with the search form from the last question, how can we disable the
    `input` element while the search is being performed on the web server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuing with the search form from the last question, how can we prevent a
    search from executing if the criteria is blank?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The form will render three times when `Bob` is entered into the name field.
    This is because each change of value causes a re-render because the value is bound
    to the state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The form will never re-render when `Bob` is entered into the name field because
    its value isn’t bound to the state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `FormData` interface requires the `name` attribute to be on the `input`
    element or it won’t be able to find it and it will return `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For React Hook Form to track the field, the `register` function needs to be
    spread on the `input` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE533]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE534]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE535]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE536]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE537]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE539]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE540]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE541]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE542]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE543]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE544]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE545]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A type for field values can be defined and specified in the call to `useForm`
    and also the `onSubmit` search parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE547]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE548]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE549]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE550]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE551]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE552]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE553]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE554]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE555]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'React Hook Form’s `isSubmitting` state can be used to disable the `input` element
    while the search is being performed on the web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE556]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE557]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE558]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE559]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE560]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE561]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE562]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE563]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE564]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE565]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE566]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE567]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE568]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE569]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE570]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE571]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE572]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE573]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The required validation can be added to the search form to prevent a search
    from executing if the criteria are blank:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE574]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE575]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE576]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE577]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE578]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE579]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Part 3: Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part covers different approaches for interacting with both REST and GraphQL
    APIs and the benefits of each approach. We will learn about different approaches
    for efficiently managing the data from these APIs in states, including using several
    popular third-party libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19051_08.xhtml#_idTextAnchor205), *State Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19051_09.xhtml#_idTextAnchor220), *Interacting with RESTful
    APIs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19051_10.xhtml#_idTextAnchor248), *Interacting with GraphQL
    APIs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
