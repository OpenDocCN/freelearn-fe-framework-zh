- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Enriching Applications Using Pipes and Directives
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用管道和指令丰富应用程序
- en: In the previous chapter, we built several components that rendered data on the
    screen with the help of input and output properties. We’ll leverage that knowledge
    in this chapter to take our components to the next level using Angular **pipes**
    and **directives** . Pipes allow us to digest and transform the information we
    bind in our templates. Directives enable more ambitious functionalities, such
    as manipulating the DOM or altering the appearance and behavior of HTML elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了几个组件，利用输入和输出属性在屏幕上渲染数据。在本章中，我们将利用这些知识，通过使用Angular **管道**和**指令**将我们的组件提升到下一个层次。管道允许我们消化和转换我们在模板中绑定的信息。指令使更雄心勃勃的功能成为可能，例如操作DOM或改变HTML元素的外观和行为。
- en: 'In this chapter, we will learn about the following concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下概念：
- en: Manipulating data with pipes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用管道操作数据
- en: Building pipes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建管道
- en: Building directives
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建指令
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The chapter contains code samples to walk you through Angular pipes and directives.
    You can find the related source code in the `ch04` folder of the following GitHub
    repository:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含代码示例，引导您了解Angular管道和指令。您可以在以下GitHub仓库的`ch04`文件夹中找到相关源代码：
- en: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition
    )'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition)'
- en: Manipulating data with pipes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用管道操作数据
- en: Pipes allow us to transform the outcome of our expressions at the view level.
    They take data as input, transform it into the desired format, and display the
    output in the template.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 管道允许我们在视图级别转换表达式的结果。它们以数据为输入，将其转换为所需的格式，并在模板中显示输出。
- en: 'The syntax of a pipe consists of the pipe name following the expression we
    want to transform, separated by a pipe symbol ( `|` ):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的语法由我们想要转换的表达式后面的管道名称组成，由管道符号（`|`）分隔：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any parameters are added after the pipe name, and they are separated by colons:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任何参数都添加在管道名称之后，并由冒号分隔：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Pipes can be used with interpolation and property binding in Angular templates
    and can be chained to each other.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 管道可以在Angular模板中使用插值和属性绑定，并且可以相互链接。
- en: 'Angular has a wide range of built-in pipe types already baked into it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Angular已经内置了广泛的自定义管道类型：
- en: '`uppercase` / `lowercase` : This transforms a string into uppercase or lowercase
    letters.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uppercase` / `lowercase` : 将字符串转换为大写或小写字母。'
- en: '`percent` : This formats a number as a percentage.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percent` : 将数字格式化为百分比。'
- en: '`date` : This formats a date or a string in a particular date format. The default
    usage of the pipe displays the date according to the local settings of the user’s
    machine. However, we can pass additional formats Angular has already baked in
    as parameters.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date` : 以特定的日期格式格式化日期或字符串。默认情况下，管道显示的日期根据用户的机器的本地设置。然而，我们可以传递Angular已经内置的额外格式作为参数。'
- en: '`currency` : This formats a number as a local currency. We can override local
    settings and change the currency symbol, passing the currency code as a parameter
    to the pipe.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currency` : 将数字格式化为本地货币。我们可以覆盖本地设置并更改货币符号，通过将货币代码作为参数传递给管道。'
- en: '`json` : This takes an object as an input and outputs it in JSON format, replacing
    single quotes with double quotes. The main usage of the `json` pipe is debugging.
    It is an excellent way to see what a complex object contains and print it nicely
    on the screen.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json` : 将对象作为输入，并以JSON格式输出，将单引号替换为双引号。`json`管道的主要用途是调试。这是一种查看复杂对象内容并优雅地打印到屏幕上的绝佳方式。'
- en: '`keyvalue` : This converts an object into a collection of key-value pairs,
    where the `key` of each item represents the object’s property and the `value`
    is its actual value.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyvalue` : 将对象转换为键值对集合，其中每个项目的`key`代表对象的属性，而`value`是其实际值。'
- en: '`slice` : This subtracts a subset (slice) of a collection or string. It accepts
    as parameters a starting index, where it will begin slicing the input data, and,
    optionally, an end index. When the end index is specified, the item at that index
    is not included in the resulting array. If the end index is omitted, it falls
    back to the last index of the data.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slice` : 从集合或字符串中减去一个子集（切片）。它接受一个起始索引作为参数，其中它将开始切片输入数据，以及可选的结束索引。当指定结束索引时，该索引处的项目不包括在结果数组中。如果省略结束索引，则默认为数据的最后一个索引。'
- en: The `slice` pipe transforms immutable data. The transformed list is always a
    copy of the original data, even when it returns all items.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`slice` 管道转换不可变数据。转换后的列表始终是原始数据的副本，即使它返回所有项目。'
- en: '`async` : This is used when we manage data handled asynchronously by our component
    class, and we need to ensure that our views promptly reflect the changes. We will
    learn more about this pipe later in *Chapter 8* , *Communicating with Data Services
    over HTTP* , where we will use it to fetch and display data asynchronously.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`async`：当我们管理组件类异步处理的数据时使用，我们需要确保我们的视图能够及时反映变化。我们将在 *第 8 章* 中学习更多关于这个管道的内容，*通过
    HTTP 与数据服务通信*，我们将使用它来异步获取和显示数据。'
- en: You will need the source code of the Angular application we created in *Chapter
    3* , *Structuring User Interfaces with Components* , to follow along with the
    rest of the chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要我们创建在 *第 3 章* 中 *使用组件构建用户界面* 中创建的 Angular 应用程序的源代码，以跟随本章的其余部分。
- en: 'We will cover the `lowercase` , `currency` , and `keyvalue` pipes in more detail,
    but we encourage you to explore the rest in the API reference at [https://angular.dev/api](https://angular.dev/api)
    :'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地介绍 `lowercase`、`currency` 和 `keyvalue` 管道，但我们鼓励您在 [https://angular.dev/api](https://angular.dev/api)
    的 API 参考中探索其余部分：
- en: 'Open the `product-detail.component.ts` file and import the `CommonModule` class:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-detail.component.ts` 文件并导入 `CommonModule` 类：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `CommonModule` class exports the Angular built-in pipes. An Angular component
    must import `CommonModule` before using built-in pipes in the component template.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`CommonModule` 类导出 Angular 内置管道。Angular 组件在使用组件模板中的内置管道之前必须导入 `CommonModule`。'
- en: 'Open the `product.ts` file and add the following fields to the `Product` interface
    that describe additional properties for a product:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product.ts` 文件，并将以下字段添加到 `Product` 接口中，以描述产品的附加属性：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `categories` property is an object where the key represents the category
    ID, and the value represents the category description.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`categories` 属性是一个对象，其中键代表类别 ID，值代表类别描述。'
- en: 'Open the `product-list.component.ts` file and modify the `products` array to
    set values for the new properties:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-list.component.ts` 文件并修改 `products` 数组以设置新属性的值：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the `product-detail.component.html` file and add a paragraph element to
    display the price of the selected product in euros:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-detail.component.html` 文件并添加一个段落元素以显示所选产品的欧元价格：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run `ng serve` to start the application and select the **Microphone** from
    the product list:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ng serve` 以启动应用程序并从产品列表中选择 **麦克风**：
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, στιγμιότυπο οθόνης, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_01.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、字体、屏幕截图、徽标的图片，自动生成的描述](img/B21418_04_01.png)'
- en: 'Figure 4.1: Product details'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：产品详情
- en: In the preceding image, the product price is displayed in the currency format.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图像中，产品价格以货币格式显示。
- en: 'Add the following snippet below the product price to display the product categories:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在产品价格下方添加以下代码片段以显示产品类别：
- en: '[PRE6]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding snippet, we used the `@for` block to iterate over the `categories`
    property of the `product` variable. The `categories` property is not iterable
    because it is a plain object, so, we used the `keyvalue` pipe to convert it into
    an array that contains `key` and `value` properties. The `key` property represents
    the category ID, a unique identifier we can use with the `track` variable. The
    `value` property stores the category description.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用了 `@for` 块来遍历 `product` 变量的 `categories` 属性。由于 `categories` 属性不是一个可迭代的对象，所以我们使用了
    `keyvalue` 管道将其转换为包含 `key` 和 `value` 属性的数组。`key` 属性代表类别 ID，这是一个我们可以与 `track` 变量一起使用的唯一标识符。`value`
    属性存储类别描述。
- en: Additionally, we used the `lowercase` pipe to convert the category description
    to lowercase text.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还使用了 `lowercase` 管道将类别描述转换为小写文本。
- en: 'Add the following CSS styles to the `product-detail.component.css` file:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 CSS 样式添加到 `product-detail.component.css` 文件中：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'While running the application, select the **Web camera** product from the list:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行应用程序时，从列表中选择 **网络摄像头** 产品：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_02.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、字体、徽标的图片，自动生成的描述](img/B21418_04_02.png)'
- en: 'Figure 4.2: Product details with categories'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：包含类别的产品详情
- en: 'Alternative to using the `CommonModule` , we could have imported each pipe
    class separately from the `@angular/common` npm package:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CommonModule`的替代方案，我们可以从`@angular/common` npm包中单独导入每个管道类：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the final `product-detail.component.html` file, we use the snippet `product()!`
    many times to read the value of the `product` property. Alternatively, we could
    create an alias using the `@let` syntax as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终的`product-detail.component.html`文件中，我们多次使用`product()!`片段来读取`product`属性的值。或者，我们可以使用`@let`语法创建一个别名，如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `@let` keyword is similar to the `let` keyword in JavaScript and is used
    to declare variables that are available only in the component template. In the
    preceding snippet, we declare the `selectedProduct` variable, which can be used
    in the rest of the HTML code as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`@let`关键字类似于JavaScript中的`let`关键字，用于声明仅在组件模板中可用的变量。在前面的代码片段中，我们声明了`selectedProduct`变量，它可以在HTML代码的其余部分中使用，如下所示：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `@let` keyword helps us in cases where we want to use complex expressions
    in templates such as:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`@let`关键字帮助我们处理在模板中使用复杂表达式的情况，例如：'
- en: Ternary operators
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三元运算符
- en: Nested object properties
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套对象属性
- en: The async pipe
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步管道
- en: Built-in pipes are sufficient for most use cases, but we must apply complex
    transformations to our data in other cases. The Angular framework provides a mechanism
    to create uniquely customized pipes, as we will see in the following section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 内置管道对于大多数用例来说已经足够了，但在其他情况下，我们必须对数据进行复杂的转换。Angular框架提供了一个机制来创建独特的自定义管道，正如我们将在下一节中看到的。
- en: Building pipes
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建管道
- en: We have already seen what pipes are and what their purpose is in the Angular
    ecosystem. Next, we will dive deeper into how we can build a pipe to provide custom
    transformations to data bindings. In the following section, we will create a pipe
    that sorts our list of products by title.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了管道是什么以及它们在Angular生态系统中的用途。接下来，我们将深入了解如何构建一个管道来为数据绑定提供自定义转换。在下一节中，我们将创建一个管道，按标题对产品列表进行排序。
- en: Sorting data using pipes
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用管道排序数据
- en: 'To create a new pipe, we use the `ng generate` command of the Angular CLI,
    passing its name as a parameter:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的管道，我们使用Angular CLI的`ng generate`命令，并传递其名称作为参数：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding command will generate all necessary files of the `sort` pipe
    inside the folder where we run the `ng generate` command. The TypeScript class
    of the pipe is defined in the `sort.pipe.ts` file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在我们运行`ng generate`命令的文件夹内生成`sort`管道的所有必要文件。管道的TypeScript类定义在`sort.pipe.ts`文件中：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `@Pipe` is an Angular decorator that defines the `name` of the Angular pipe.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Pipe`是Angular装饰器，用于定义Angular管道的`name`。'
- en: 'The TypeScript class of a pipe implements the `transform` method of the `PipeTransform`
    interface and accepts two parameters:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的TypeScript类实现了`PipeTransform`接口的`transform`方法，并接受两个参数：
- en: '`value` : The input data that we want to transform'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：我们想要转换的输入数据'
- en: '`args` : An optional list of arguments we can provide to the transformation
    method, each separated by a colon'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args`：我们可以提供给转换方法的可选参数列表，每个参数由冒号分隔'
- en: 'The Angular CLI helped us by scaffolding an empty `transform` method. We now
    need to modify it to satisfy our business needs. The pipe will operate on a list
    of `Product` objects, so we need to make the necessary adjustments to the types
    provided:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI通过为我们搭建一个空的`transform`方法来帮助我们。我们现在需要修改它以满足我们的业务需求。该管道将在`Product`对象列表上操作，因此我们需要对提供的类型进行必要的调整：
- en: 'Add the following statement to import the `Product` interface:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下语句以导入`Product`接口：
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Change the type of the `value` parameter to `Product[]` since we want to sort
    a list of `Product` objects.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`value`参数的类型更改为`Product[]`，因为我们想对`Product`对象列表进行排序。
- en: Change the method type to `Product[]` since the sorted list will only contain
    `Product` objects, and modify it so that it returns an empty array by default.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将方法类型更改为`Product[]`，因为排序后的列表将只包含`Product`对象，并修改它以便默认返回一个空数组。
- en: 'The resulting `sort.pipe.ts` file should now look like the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的`sort.pipe.ts`文件现在应该看起来像以下这样：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are now ready to implement the sorting algorithm of our method. We will
    use the native `sort` method, which sorts items alphabetically by default. We
    will provide a custom comparator function to the `sort` method that overrides
    the default functionality and performs the sorting logic that we want to achieve:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始实现我们方法的排序算法。我们将使用原生的`sort`方法，它默认按字母顺序排序项。我们将提供一个自定义比较函数给`sort`方法，以覆盖默认功能并执行我们想要实现的排序逻辑：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It is worth noting that the `transform` method checks whether there is input
    data first before proceeding to the sorting process. Otherwise, it returns an
    empty array. This mitigates cases where the collection is set asynchronously,
    or the component that consumes the pipe does not set the collection at all.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`transform`方法在继续排序过程之前首先检查是否存在输入数据。否则，它返回一个空数组。这减轻了集合异步设置或消费管道的组件根本未设置集合的情况。
- en: For more information about the `sort` method, refer to [https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)
    .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`sort`方法的更多信息，请参阅[https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)。
- en: 'That’s it! We have successfully created our first pipe. We need to call it
    from our component template to see it in action:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经成功创建了我们的第一个管道。我们需要从我们的组件模板中调用它以查看其效果：
- en: 'Open the `product-list.component.ts` file and import the `SortPipe` class:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.ts`文件并导入`SortPipe`类：
- en: '[PRE16]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `product-list.component.html` file and add the pipe in the `@for`
    block:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.html`文件并在`@for`块中添加管道：
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we run the application using the `ng serve` command, we will notice that
    the product list is now sorted by title alphabetically:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用`ng serve`命令运行应用程序，我们会注意到产品列表现在按标题字母顺序排序：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_03.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、字体、标志的图像，自动生成的描述](img/B21418_04_03.png)'
- en: 'Figure 4.3: Product list sorted by title alphabetically'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：按标题字母顺序排序的产品列表
- en: The sort pipe can sort product data only by `title` . In the following section,
    we will learn how to configure the pipe so that it can sort by other product properties
    as well.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 排序管道只能按`title`对产品数据进行排序。在下一节中，我们将学习如何配置管道，使其可以按其他产品属性进行排序。
- en: Passing parameters to pipes
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向管道传递参数
- en: 'As we learned in the *Manipulating data with pipes* section, we can pass additional
    parameters to a pipe using colons. We use the `args` parameter in the `transform`
    method of a pipe to get the value of each parameter separated by a colon. We learned
    that the Angular CLI creates the `args` parameter by default and uses the spread
    operator to expand its values in the method:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在*使用管道操作数据*部分所学，我们可以使用冒号传递管道的额外参数。我们在管道的`transform`方法中使用`args`参数来获取由冒号分隔的每个参数的值。我们了解到Angular
    CLI默认创建`args`参数并使用扩展运算符在方法中展开其值：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `transform` method can currently work only with the `title` property of
    a product. We could leverage the `args` parameter to make it dynamic and allow
    the consumer of the pipe to define the property they want to sort data, such as
    the product price:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`transform`方法只能与产品的`title`属性一起工作。我们可以利用`args`参数使其动态化，并允许管道的消费者定义他们想要排序数据的属性，例如产品价格：
- en: 'Remove the spread operator from the `args` parameter because we will pass a
    single property of a product each time and change its type, as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`args`参数中移除扩展运算符，因为我们每次将传递产品的一个属性并更改其类型，如下所示：
- en: '[PRE19]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding method, we use the `keyof` type operator from TypeScript to
    define that the `args` parameter can be any property of a `Product` object.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们使用TypeScript的`keyof`类型运算符来定义`args`参数可以是`Product`对象中的任何属性。
- en: 'Replace the `title` property with the `args` parameter inside the `if` statement:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if`语句内部将`title`属性替换为`args`参数：
- en: '[PRE20]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Notice that in the preceding snippet, we access the `a` and `b` objects using
    square bracket syntax instead of the dot syntax as before.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前面的代码片段中，我们使用方括号语法而不是之前的点语法来访问`a`和`b`对象。
- en: 'Modify the `args` parameter in the method signature so that it uses the `title`
    property by default, if the consumer does not pass any parameter in the pipe:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法签名中修改`args`参数，以便它默认使用`title`属性，如果管道的消费者没有在管道中传递任何参数：
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding behavior ensures that the product list component will work without
    any change to the pipe usage.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行为确保产品列表组件在管道使用上无需任何更改即可正常工作。
- en: Run the `ng serve` command and verify that the product list is sorted initially
    by title.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令并验证产品列表最初是否按标题排序。
- en: 'Open the `product-list.component.html` file and pass the `price` property as
    a pipe parameter:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.html`文件并将`price`属性作为管道参数传递：
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Save the file and wait for the application to reload. You should see that the
    product list is now sorted by price:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并等待应用程序重新加载。你应该会看到产品列表现在是按价格排序的：
- en: '![img](img/B21418_04_04.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B21418_04_04.png)'
- en: 'Figure 4.4: Product list sorted by price'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4：按价格排序的产品列表
- en: The `@Pipe` decorator contains another significant property that we can set,
    which is directly related to the way that pipes react in the change detection
    mechanism of the Angular framework.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Pipe`装饰器包含另一个我们可以设置的显著属性，它与管道在Angular框架的变更检测机制中的反应方式直接相关。'
- en: Change detection with pipes
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用管道进行变更检测
- en: 'There are two categories of pipes: **pure** and **impure** . All pipes are
    considered pure by default unless we set the `pure` property explicitly to `false`
    in the `@Pipe` decorator:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 管道分为两类：**纯**和**不纯**。默认情况下，所有管道都被视为纯的，除非我们在`@Pipe`装饰器中明确将`pure`属性设置为`false`：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Angular executes pure pipes when there is a change to the reference of the input
    variable. For example, if the `products` array in the `ProductListComponent` class
    is assigned to a new value, the pipe will correctly reflect that change. However,
    if we add a new product to the array using the native `Array.push` method, the
    pipe will not be triggered because the object reference of the array does not
    change.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入变量的引用发生变化时，Angular会执行纯管道。例如，如果`ProductListComponent`类中的`products`数组被分配给新值，管道将正确反映这种变化。然而，如果我们使用原生的`Array.push`方法向数组中添加新产品，管道将不会触发，因为数组的对象引用没有改变。
- en: Another example is when we have created a pure pipe that operates on a single
    object. Similarly, if the reference of the value changes, the pipe executes correctly.
    If a property of the object changes, the pipe cannot detect the change.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是当我们创建了一个仅操作单个对象的纯管道。同样地，如果值的引用发生变化，管道将正确执行。如果对象的一个属性发生变化，管道无法检测到这种变化。
- en: 'A word of caution, however—impure pipes call the `transform` method every time
    the change detection cycle is triggered. So, this might not be good for performance.
    Alternatively, you could leave the `pure` property unset and try to cache the
    value or work with reducers and immutable data to solve this in a better way,
    like the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个警告——不纯的管道会在每次变更检测周期触发时调用`transform`方法。所以，这可能会对性能不利。作为替代，你可以不设置`pure`属性，并尝试缓存值或使用reducer和不可变数据以更好的方式解决这个问题，如下所示：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding snippet, we used the spread parameter syntax to create a new
    reference of the `products` array by appending a new item to the reference of
    the existing array.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用了扩展参数语法来创建一个新引用的`products`数组，通过向现有数组的引用中添加一个新项目来实现。
- en: 'Alternatively to a pure pipe, we can use a **computed signal** , which is more
    effective and ergonomic due to the following reasons:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与纯管道不同，我们可以使用**计算信号**，它由于以下原因更有效且更直观：
- en: We can access the value of the signal in the component class, as opposed to
    pipes, where their values can be read only in the template
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在组件类中访问信号值，与管道不同，在模板中只能读取它们的值。
- en: A computed signal is a simple plain function so we do not need to use a TypeScript
    class as in pipes
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算信号是一个简单的普通函数，所以我们不需要像在管道中那样使用TypeScript类。
- en: We will learn more about signals in *Chapter 7* , *Tracking Application State
    with Signals* .
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第7章*使用信号跟踪应用程序状态*中了解更多关于信号的内容。
- en: Creating custom pipes allows us to transform our data in a particular way according
    to our needs. We must create custom directives if we also want to transform template
    elements.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义管道允许我们根据我们的需求以特定方式转换我们的数据。如果我们还想转换模板元素，我们必须创建自定义指令。
- en: Building directives
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建指令
- en: 'Angular directives are HTML attributes that extend the behavior or the appearance
    of a standard HTML element. When we apply a directive to an HTML element or even
    an Angular component, we can add custom behavior or alter its appearance. There
    are three types of directives:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Angular指令是扩展标准HTML元素行为或外观的HTML属性。当我们将指令应用于HTML元素或Angular组件时，我们可以添加自定义行为或改变其外观。有三种类型的指令：
- en: '**Components** : Components are directives that contain an associated HTML
    template.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：组件是包含相关HTML模板的指令。'
- en: '**Structural directives** : These add or remove elements from the DOM.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构指令**：这些指令向DOM添加或删除元素。'
- en: '**Attribute directives** : These modify the appearance of a DOM element or
    define a custom behavior. We met attribute directives in class and style bindings
    in the previous chapter.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性指令**：这些指令可以修改DOM元素的外观或定义自定义行为。我们在上一章中遇到了属性指令在类和样式绑定中的应用。'
- en: If a directive has a template attached, then it becomes a component. In other
    words, components are Angular directives with a view. This rule is handy when
    deciding whether to create a component or a directive for your needs. If you need
    a template, create a component; otherwise, make it a directive.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个指令附加了模板，那么它就变成了一个组件。换句话说，组件是有视图的Angular指令。这个规则在决定是否为您的需求创建组件或指令时很有用。如果您需要一个模板，请创建一个组件；否则，将其制作为一个指令。
- en: Custom directives allow us to attach advanced behaviors to elements in the DOM
    or modify their appearance. In the following sections, we will explore how to
    create attribute directives.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义指令允许我们将高级行为附加到DOM中的元素或修改它们的外观。在接下来的章节中，我们将探讨如何创建属性指令。
- en: Displaying dynamic data
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示动态数据
- en: Attribute directives are commonly used to alter the appearance of an HTML element.
    We have all probably found ourselves in a situation where we want to add copyrighted
    information to our applications. Ideally, we want to use this information in various
    parts of our application, on a dashboard or a contact page. The content of the
    information should also be dynamic. The year or range of years (it depends on
    how you want to use it) should update dynamically according to the current date.
    Our first intention is likely to be to create a component, but what about making
    it a directive instead? This way, we could attach the directive to any element
    we want and not bother with a particular template. So, let’s begin!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 属性指令通常用于改变HTML元素的外观。我们可能都遇到过想要在我们的应用程序中添加版权信息的情况。理想情况下，我们希望将此信息用于应用程序的各个部分，如仪表板或联系页面。信息的内容也应该是动态的。年份或年份范围（这取决于你如何使用它）应根据当前日期动态更新。我们的第一个想法可能是创建一个组件，但将其改为指令怎么样？这样，我们就可以将指令附加到任何我们想要的元素上，而不必担心特定的模板。那么，让我们开始吧！
- en: 'We will use the `ng generate` command of the Angular CLI, passing the name
    of the directive as a parameter:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Angular CLI的`ng generate`命令，将指令的名称作为参数传递：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding command will generate all the necessary files of the `copyright`
    directive inside the folder where we run the `ng generate` command. The TypeScript
    class of the directive is defined in the `copyright.directive.ts` file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在我们运行`ng generate`命令的文件夹内生成`copyright`指令的所有必要文件。指令的TypeScript类定义在`copyright.directive.ts`文件中：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `@Directive` is an Angular decorator that defines the properties of the
    Angular directive. It configures a TypeScript class as an Angular directive using
    the `selector` property. It is a CSS selector that instructs Angular to load the
    directive in the location that finds the corresponding attribute in an HTML template.
    The Angular CLI adds the `app` prefix by default, but you can customize it using
    the `--prefix` option when creating the Angular project.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Directive`是Angular装饰器，用于定义Angular指令的属性。它使用`selector`属性将TypeScript类配置为Angular指令。它是一个CSS选择器，指示Angular在HTML模板中找到对应属性的位置加载指令。Angular
    CLI默认添加`app`前缀，但您可以在创建Angular项目时使用`--prefix`选项来自定义它。'
- en: When we use the selector in an HTML template, we do not add the square brackets.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在HTML模板中使用选择器时，我们不需要添加方括号。
- en: 'Let’s use the newly created directive to add copyright information to our application:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用新创建的指令将版权信息添加到我们的应用程序中：
- en: 'Open the `styles.css` file and add the following CSS styles:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`styles.css`文件并添加以下CSS样式：
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding snippet, we added the CSS styles for our copyright directive
    in the global CSS stylesheet. Directives do not have an accompanying CSS file
    that we can use, such as components.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们在全局CSS样式表中添加了我们的版权指令的CSS样式。与组件不同，指令没有伴随的CSS文件供我们使用。
- en: 'Open the `copyright.directive.ts` file and import the `ElementRef` class from
    the `@angular/core` npm package:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`copyright.directive.ts`文件，并从`@angular/core` npm包中导入`ElementRef`类：
- en: '[PRE28]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Modify the `constructor` of the directive as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改指令的`constructor`：
- en: '[PRE29]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding snippet, we used the `ElementRef` class to access and manipulate
    the underlying HTML element attached to the directive. The `nativeElement` property
    contains the actual native HTML element. We also add the `copyright` class using
    the `add` method of the `classList` property. Finally, we change the text of the
    element by modifying the `textContent` property.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用了 `ElementRef` 类来访问和操作指令附加的底层HTML元素。`nativeElement` 属性包含实际的本地HTML元素。我们还使用
    `classList` 属性的 `add` 方法添加了 `copyright` 类。最后，我们通过修改 `textContent` 属性来更改元素的文本。
- en: The `ElementRef` is a built-in Angular service. To use a service in a component
    or a directive, we need to inject it into the `constructor` , as we will learn
    in *Chapter 5* , *Managing Complex Tasks with Services* .
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`ElementRef` 是一个内置的Angular服务。要在组件或指令中使用服务，我们需要将其注入到 `constructor` 中，正如我们将在第5章
    *使用服务管理复杂任务* 中学习的那样。'
- en: 'Open the `app.component.ts` file and import the `CopyrightDirective` class:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.ts` 文件并导入 `CopyrightDirective` 类：
- en: '[PRE30]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open the `app.component.html` file and add a `<footer>` element to display
    copyright information:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app.component.html` 文件并添加一个 `<footer>` 元素以显示版权信息：
- en: '[PRE31]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the application using the `ng serve` command and observe the application
    output:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ng serve` 命令运行应用程序并观察应用程序输出：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_04_05.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、字体、标志的图片，自动生成的描述](img/B21418_04_05.png)'
- en: 'Figure 4.5: The application’s output'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5：应用程序的输出
- en: When creating directives, it is important to consider reusable functionality
    that doesn’t necessarily relate to a particular feature. The topic we looked at
    was copyrighted information, but we could build other functionalities, such as
    tooltips and collapsible or infinite scrolling features, with relative ease. In
    the following section, we will build another attribute directive that explores
    the options available further.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建指令时，考虑可重用功能非常重要，这些功能不一定与特定功能相关。我们探讨的主题是受版权保护的信息，但我们可以相对容易地构建其他功能，例如工具提示和可折叠或无限滚动功能。在下一节中，我们将构建另一个属性指令，进一步探索可用的选项。
- en: Property binding and responding to events
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性绑定和响应事件
- en: 'Attribute directives are also concerned with the behavior of an HTML element.
    They can extend the functionality of the element and add new features. The Angular
    framework provides two helpful decorators that we can use in our directives to
    enhance the functionality of an HTML element:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 属性指令也关注HTML元素的行为。它们可以扩展元素的功能并添加新功能。Angular框架提供了两个有用的装饰器，我们可以在我们的指令中使用它们来增强HTML元素的功能：
- en: '`@HostBinding` : This binds a value to the property of the native host element.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@HostBinding`：将值绑定到本地宿主元素的属性。'
- en: '`@HostListener` : This binds to an event of the native host element.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@HostListener`：绑定到本地宿主元素的事件。'
- en: The native host element is the element where our directive takes action.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本地宿主元素是我们指令执行动作的元素。
- en: The native `<input>` HTML element can support different input types, including
    simple text, radio buttons, and numeric values. When we use the latter, the input
    adds two arrows inline, up and down, to control its value. It is this feature
    of the input element that makes it look incomplete. If we type a non-numeric character,
    the input still renders it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 原生的 `<input>` HTML元素可以支持不同的输入类型，包括简单的文本、单选按钮和数值。当我们使用后者时，输入会添加两个箭头，一个向上，一个向下，以控制其值。正是输入元素的这一特性使其看起来不完整。如果我们输入一个非数值字符，输入仍然会渲染它。
- en: 'We will create an attribute directive that rejects non-numeric values entered
    by the keyboard:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个属性指令，该指令将拒绝通过键盘输入的非数值：
- en: 'Run the following Angular CLI command to create a new directive named `numeric`
    :'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Angular CLI命令以创建一个名为 `numeric` 的新指令：
- en: '[PRE32]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Open the `numeric.directive.ts` file and import the two decorators that we
    are going to use:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `numeric.directive.ts` 文件并导入我们将要使用的两个装饰器：
- en: '[PRE33]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Define a `currentClass` property using the `@HostBinding` decorator that will
    be bound to the `class` property of the `<input>` element:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `@HostBinding` 装饰器定义一个 `currentClass` 属性，该属性将绑定到 `<input>` 元素的 `class` 属性：
- en: '[PRE34]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Define an `onKeyPress` method using the `@HostListener` decorator that will
    be bound to the `keypress` native event of the `<input>` element:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `@HostListener` 装饰器定义一个 `onKeyPress` 方法，该方法将绑定到 `<input>` 元素的 `keypress`
    本地事件：
- en: '[PRE35]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open the `styles.css` file and add the following CSS styles that will be applied
    when a component uses the directive:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`styles.css`文件，并添加以下CSS样式，当组件使用指令时将应用这些样式：
- en: '[PRE36]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `onKeyPress` method contains the logic of how our directive works under
    the hood.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`onKeyPress`方法包含了我们的指令在底层如何工作的逻辑。'
- en: When the user presses a key inside an `<input>` element, Angular knows to call
    the `onKeyPress` method because we have registered it with the `@HostListener`
    decorator. The `@HostListener` decorator accepts the event name and a list of
    arguments as parameters. In our case, we pass the `keypress` event name and the
    `$event` argument, respectively. The `$event` is the current object that triggered
    the event, which is of the `KeyboardEvent` type and contains the keystrokes entered
    by the user.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在`<input>`元素内按下键时，Angular知道调用`onKeyPress`方法，因为我们已经使用`@HostListener`装饰器注册了它。`@HostListener`装饰器接受事件名称和参数列表作为参数。在我们的情况下，我们传递了`keypress`事件名称和`$event`参数。`$event`是触发事件的当前对象，它是`KeyboardEvent`类型，包含用户输入的按键。
- en: Every time the user presses a key, we extract it from the `$event` object, convert
    it into a Unicode character using the `charCodeAt` method, and check it against
    a non-numeric code. If the character is non-numeric, we call the `preventDefault`
    method of the `$event` object to cancel the user action and roll back the `<input>`
    element to its previous state. At the same time, we set the respective class to
    `valid` if the key is numeric and `invalid` if it is not.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户按下键时，我们从`$event`对象中提取它，使用`charCodeAt`方法将其转换为Unicode字符，并检查它是否为非数字代码。如果字符是非数字的，我们调用`$event`对象的`preventDefault`方法来取消用户操作并将`<input>`元素回滚到其之前的状态。同时，如果键是数字的，我们将相应的类设置为`valid`，如果不是，则设置为`invalid`。
- en: 'We can apply the directive in an `<input>` tag as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`<input>`标签中如下应用指令：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We will see a real-world usage of the directive in *Chapter 10* , *Collecting
    User Data with Forms* . In the meantime, if you want to try it yourself, remember
    to import the `NumericDirective` class in your component before using it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第10章*，*使用表单收集用户数据*中看到指令的实际应用。同时，如果你想亲自尝试，记得在使用它之前在你的组件中导入`NumericDirective`类。
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now that we have reached this point, it is fair to say that you have met almost
    every Angular artifact for building Angular components, which are indeed the wheels
    and the engine of all Angular applications. In the forthcoming chapters, we will
    see how we can design our application architecture better, manage dependency injection
    throughout our component tree, consume data services, and leverage the new Angular
    router to show and hide components when required.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经到达这个阶段，可以说你已经遇到了几乎所有的Angular构建Angular组件的元素，这些元素确实是所有Angular应用程序的轮子和引擎。在接下来的章节中，我们将看到我们如何更好地设计我们的应用程序架构，管理组件树中的依赖注入，消费数据服务，并利用新的Angular路由器在需要时显示和隐藏组件。
- en: Now, get ready to take on new challenges—in the next chapter, we will discover
    how to use data services to manage complex tasks in our components.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，准备好迎接新的挑战——在下一章中，我们将发现如何使用数据服务来管理组件中的复杂任务。
