["```js\n/* Foo.re */\ntype fromFoo =\n  | Add(int, int)\n  | Multiply(int, int);\n\nlet a = 1;\nlet b = 2;\n```", "```js\n/* Bar.re */\nlet fromFoo = Foo.Add(Foo.a, Foo.b);\n```", "```js\n/* Bar.re */\nmodule F = Foo;\nlet fromFoo = F.Add(F.a, F.b);\n```", "```js\n/* Bar.re */\nlet fromFoo = Foo.(Add(a, b));\n```", "```js\n/* Bar.re */\ninclude Foo;\nlet a = 4; /* override Foo.a */\nlet fromFoo = Add(a, b);\n```", "```js\n/* Bar.re */\nopen Foo;\nlet fromFoo = Add(a, b);\n```", "```js\n/* Bar.re */\nlet fromFoo = {\n  open Foo;\n  Add(a, b);\n};\n```", "```js\n/* Bar.re */\nlet fromFoo = {\n  open Foo;\n  Js.log(\"foo\");\n  let result = Add(a, b);\n};\n```", "```js\nlet array = [|\"first\", \"second\", \"third\"|];\n```", "```js\narray[0] = \"updated\";\n```", "```js\n/* JavaScript */\narray.map(e => e + \"-mapped\")\n```", "```js\n/* Reason standard library */\nlet array = [|\"first\", \"second\", \"third\"|];\nArray.map(e => e ++ \"-mapped\", array);\n```", "```js\n('a => 'b, array('a)) => array('b);\n```", "```js\n(string => string, array(string)) => array(string);\n```", "```js\n/* in the compiled output */\n...\nrequire(\"./stdlib/array.js\");\n...\n```", "```js\n/* Belt standard library */\nlet array = [|\"first\", \"second\", \"third\"|];\nBelt.Array.map(array, e => e ++ \"-mapped\");\n```", "```js\n/* BuckleScript's JavaScript bindings */\nlet array = [|\"first\", \"second\", \"third\"|];\nJs.Array.map(e => e ++ \"-mapped\", array);\n```", "```js\n[@bs.send] external map: (array('a), 'a => 'b) => array('b) = \"\";\nlet array = [|\"first\", \"second\", \"third\"|];\nmap(array, e => e ++ \"-mapped\")\n```", "```js\nlet array = [|\"first\", \"second\", \"third\"|];\nlet map = [%raw {|\n  function(f, array) {\n    return array.map(f)\n  }\n|}];\nmap(e => e ++ \"-mapped\", array)\n```", "```js\nlet array = [%raw \"['first', 'second', 'third']\"];\n[%%raw {|\n  array = array.map(e => e + \"-mapped\");\n|}];\n```", "```js\nlet array: array(string) = [%raw \"['first', 'second', 'third']\"];\n```", "```js\nlet random: unit => float = [%raw\n  {|\n    function() {\n     return Math.random();\n    }\n  |}\n];\n```", "```js\nlet list = [\"first\", \"second\", \"third\"];\n```", "```js\n/* Belt standard library */\nlet list = [\"first\", \"second\", \"third\"];\nlet array = Belt.List.toArray(list);\n\nlet array = [|\"first\", \"second\", \"third\"|];\nlet list = Belt.List.fromArray(array);\n\n/* Reason standard library */\nlet list = [\"first\", \"second\", \"third\"];\nlet array = Array.of_list(list);\n\nlet array = [|\"first\", \"second\", \"third\"|];\nlet list = Array.to_list(array);\n```", "```js\n/* Belt standard library */\nlet list = [\"first\", \"second\", \"third\"];\nBelt.List.map(list, e => e ++ \"-mapped\");\n\n/* Reason standard library */\nlet list = [\"first\", \"second\", \"third\"];\nList.map(e => e ++ \"-mapped\", list);\n```", "```js\n[\"first\", [\"second\", [\"third\", 0]]]\n```", "```js\ntype list('a) = Empty | Head('a, list('a));\n```", "```js\nHead(\"first\", Head(\"second\", Head(\"third\", Empty)));\n```", "```js\nlet rec sum = list => switch(list) {\n  | [] => 0\n  | [hd, ...tl] => hd + sum(tl)\n};\n```", "```js\nsum([1, 2, 3])\n1 + sum([2, 3])\n1 + 2 + sum([3])\n1 + 2 + 3\n6\n```", "```js\nlet rec reverse = list => switch(list) {\n  | [] => []\n  | [hd, ...tl] => reverse(tl) @ [hd]\n};\n```", "```js\nreverse([\"first\", \"second\", \"third\"])\nreverse([\"second\", \"third\"]) @ [\"first\"]\nreverse([\"third\"]) @ [\"second\"] @ [\"first\"]\nreverse([]) @ [\"third\"] @ [\"second\"] @ [\"first\"]\n[] @ [\"third\"] @ [\"second\"] @ [\"first\"]\n[\"third\", \"second\", \"first\"]\n```", "```js\nlet reverse = list => {\n  let rec aux = (list, acc) => switch(list) {\n    | [] => acc\n    | [hd, ...tl] => aux(tl, [hd, ...acc])\n  };\n  aux(list, []);\n};\n```", "```js\nlet list = [\"first\", \"second\", \"third\"];\nlet list = [\"prepended\", ...list];\n```", "```js\nreverse([\"first\", \"second\", \"third\"])\naux([\"first\", \"second\", \"third\"], [])\naux([\"second\", \"third\"], [\"first\"])\naux([\"third\"], [\"second\", \"first\"])\naux([], [\"third\", \"second\", \"first\"])\n[\"third\", \"second\", \"first\"]\n```", "```js\n|> (pipe)\n-> (fast pipe)\n```", "```js\nthree |> f(one, two)\none -> f(two, three)\n```", "```js\nf(one, two, three)\n```", "```js\nBelt.List.(reduce(map([1, 2, 3], e => e + 1), 0, (+)))\n```", "```js\nBelt.List.(\n [1, 2, 3]\n ->map(e => e + 1)\n ->reduce(0, (+))\n);\n```", "```js\nlet foo = Some(3)->Belt.Option.getExn;\nJs.log(foo); /* 3 */\n\nlet foo = None->Belt.Option.getExn;\nJs.log(foo); /* raises getExn exception */\n```", "```js\nlet foo = None->Belt.Option.getWithDefault(0);\nJs.log(foo); /* 0 */\n```", "```js\n(int, 'a) => Belt.List.t('a)\n```", "```js\n(int, 'a) => list('a)\n```", "```js\nlet list = Belt.List.make(10, \"string\");\n```", "```js\n(int, int => 'a) => Belt.List.t('a)\n```", "```js\nlet list = Belt.List.makeBy(10, i => i);\n```", "```js\nBelt.List.t('a) => Belt.List.t('a)\n```", "```js\nlet list = Belt.List.(makeBy(10, i => i)->shuffle);\n```", "```js\n(Belt.List.t('a), int) => option(Belt.List.t('a))\n```", "```js\nlet list = Belt.List.(makeBy(10, i => i)->shuffle->take(2));\n```", "```js\ntype suit =\n  | Hearts\n  | Diamonds\n  | Spades\n  | Clubs;\n\ntype card = {\n  suit,\n  rank: int,\n};\n\nBelt.List.(\n  makeBy(52, i =>\n    switch (i / 13, i mod 13) {\n    | (0, rank) => {suit: Hearts, rank: rank + 1}\n    | (1, rank) => {suit: Diamonds, rank: rank + 1}\n    | (2, rank) => {suit: Spades, rank: rank + 1}\n    | (3, rank) => {suit: Clubs, rank: rank + 1}\n    | _ => assert(false)\n    }\n  )\n  ->shuffle\n  ->take(5)\n  ->Belt.Option.getExn\n  ->(\n      cards => {\n        let rankToString = rank =>\n          switch (rank) {\n          | 1 => \"Ace\"\n          | 13 => \"King\"\n          | 12 => \"Queen\"\n          | 11 => \"Jack\"\n          | rank => string_of_int(rank)\n          };\n\n        let suitToString = suit =>\n          switch (suit) {\n          | Hearts => \"Hearts\"\n          | Diamonds => \"Diamonds\"\n          | Spades => \"Spades\"\n          | Clubs => \"Clubs\"\n          };\n\n        map(cards, ({rank, suit}) =>\n          rankToString(rank) ++ \" of \" ++ suitToString(suit)\n        );\n      }\n    )\n  ->toArray\n  ->Js.log\n);\n```", "```js\n[\n  \"Queen of Clubs\",\n  \"4 of Clubs\",\n  \"King of Spades\",\n  \"Ace of Hearts\",\n  \"9 of Spades\"\n]\n```", "```js\nBelt.List.makeBy\n```", "```js\nBelt.List.makeByU\n```", "```js\nlet add = (a, b) => a + b;\n```", "```js\nlet add = a => b => a + b;\n```", "```js\nadd(2)(3);\n```", "```js\nadd(2, 3);\nadd(2)(3);\n```", "```js\nlet addOne = add(1);\n```", "```js\nfunction add(a, b) {\n  return a + b | 0;\n}\n```", "```js\nlet addOne = (+)(1);\n```", "```js\nlet add = (. a, b) => a + b;\n```", "```js\nlet result = add(. 2, 3); /* 5 */\n```", "```js\nlet result = add(2, 3);\n\nWe've found a bug for you!\n\nThis is an uncurried BuckleScript function. It must be applied with a dot.\n\nLike this: foo(. a, b)\nNot like this: foo(a, b)\n```", "```js\nlet result = add(. 2);\n\nWe've found a bug for you!\n\nFound uncurried application [@bs] with arity 2, where arity 1 was expected.\n```", "```js\n...\nmakeByU(52, (. i) =>\n  switch (i / 13, i mod 13) {\n  | (0, rank) => {suit: Hearts, rank: rank + 1}\n  | (1, rank) => {suit: Diamonds, rank: rank + 1}\n  | (2, rank) => {suit: Spades, rank: rank + 1}\n  | (3, rank) => {suit: Clubs, rank: rank + 1}\n  | _ => assert(false)\n  }\n)\n...\n```", "```js\n[@bs.val] external alert: string => unit = \"alert\";\n```", "```js\n[@bs.val] external alert: string => unit = \"\";\n```", "```js\nalert(\"hi!\");\n```", "```js\n[@bs.val] [@bs.scope (\"window\", \"location\")] external pathname: string = \"\";\n```", "```js\n[@bs.val] external pathname: string = \"window.location.pathname\";\n```", "```js\n[@bs.val] external document: Dom.document = \"\";\n[@bs.send] external getElementById: (Dom.document, string) => Dom.element = \"\";\nlet element = getElementById(document, \"root\");\n```", "```js\n[@bs.send] external getElementById: (Dom.document, string) => option(Dom.element) = \"\";\n```", "```js\n[@bs.module] external leftPad: (string, int) => string = \"left-pad\";\nlet result = leftPad(\"foo\", 6);\n```", "```js\nimport * as LeftPad from \"left-pad\";\n\nvar result = LeftPad(\"foo\", 6);\n\nexport {\n  result ,\n}\n```", "```js\nvar LeftPad = require(\"left-pad\");\n\nvar result = LeftPad(\"foo\", 6);\n\nexports.result = result;\n```", "```js\nfunction padLeft(value, padding) {\n  if (typeof padding === \"number\") {\n    return Array(padding + 1).join(\" \") + value;\n  }\n  if (typeof padding === \"string\") {\n    return padding + value;\n  }\n  throw new Error(`Expected string or number, got '${padding}'.`);\n}\n```", "```js\n[@bs.val]\nexternal padLeft: (\n  string,\n  [@bs.unwrap] [\n    | `Str(string)\n    | `Int(int)\n  ])\n  => string = \"\";\n\npadLeft(\"Hello World\", `Int(4));\npadLeft(\"Hello World\", `Str(\"Message: \"));\n```", "```js\npadLeft(\"Hello World\", 4);\npadLeft(\"Hello World\", \"Message: \");\n```", "```js\ngit clone https://github.com/PacktPublishing/ReasonML-Quick-Start-Guide.git\ncd ReasonML-Quick-Start-Guide\ncd Chapter03/app-end\nnpm install\n```", "```js\n[@bs.module \"react-transition-group\"]\nexternal transitionGroup: ReasonReact.reactClass = \"TransitionGroup\";\n\n[@bs.module \"react-transition-group\"]\nexternal cssTransition: ReasonReact.reactClass = \"CSSTransition\";\n```", "```js\nmodule TransitionGroup = {\n  let make = children =>\n    ReasonReact.wrapJsForReason(\n      ~reactClass=transitionGroup,\n      ~props=Js.Obj.empty(),\n      children,\n    );\n};\n```", "```js\n[@bs.deriving abstract]\ntype cssTransitionProps = {\n  [@bs.as \"in\"] _in: bool,\n  timeout: int,\n  classNames: string,\n};\n```", "```js\nmodule CSSTransition = {\n  let make = (~_in: bool, ~timeout: int, ~classNames: string, children) =>\n    ReasonReact.wrapJsForReason(\n      ~reactClass=cssTransition,\n      ~props=cssTransitionProps(~_in, ~timeout, ~classNames),\n      children,\n    );\n};\n```", "```js\n<main> {currentRoute.component} </main>\n```", "```js\n<main>\n  ReactTransitionGroup.(\n    <TransitionGroup>\n      <CSSTransition\n        key={currentRoute.title} _in=true timeout=900 classNames=\"routeTransition\">\n        {currentRoute.component}\n      </CSSTransition>\n    </TransitionGroup>\n  )\n</main>\n```", "```js\n@keyframes enter {\n  from {\n    opacity: 0;\n    transform: translateY(50px);\n  }\n}\n\n@keyframes exit {\n  to {\n    opacity: 0;\n    transform: translateY(50px);\n  }\n}\n\n.routeTransition-enter.routeTransition-enter-active {\n  animation: enter 500ms ease 400ms both;\n}\n\n.routeTransition-exit.routeTransition-exit-active {\n  animation: exit 400ms ease both;\n}\n```", "```js\n/* ReactTransitionGroup.re */\n[@bs.val] external require: string => string = \"\";\nrequire(\"../../../src/ReactTransitionGroup.scss\");\n```"]