- en: Chapter 9. Plug-In API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章 插件 API
- en: I do two at a time now
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在我一次做两个
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I've developed a technique
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我已经开发了一种技术
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Devo，
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Fräulein"'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"Fräulein"'
- en: Whenever a task is to be performed two or more times, it is a good idea to apply
    the **DRY** principle—Don't Repeat Yourself. To facilitate this, jQuery provides
    several tools for developers that go beyond simple iteration and function creation.
    **Plug-in** development is a technique that proves rewarding time and time again.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每当一个任务要执行两次或更多次时，都应用**DRY**原则——不要重复自己是一个好主意。为了方便起见，jQuery 为开发人员提供了几种工具，超出了简单的迭代和函数创建。**插件**开发是一种反复证明有益的技术。
- en: In this chapter, we'll take a brief look at the basics of using another developer's
    plug-in, and then delve into the various ways of extending jQuery with plug-ins
    we define ourselves.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍使用其他开发者的插件的基础知识，然后深入探讨用我们自己定义的插件扩展 jQuery 的各种方法。
- en: Using a Plug-in
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用插件
- en: Taking advantage of an existing jQuery plug-in is very straightforward. A plug-in
    is contained in a standard JavaScript file. There are many ways to obtain the
    file, but the simplest is to browse the jQuery plug-in repository at [http://jquery.com/plugins](http://jquery.com/plugins).
    The latest releases of many popular plug-ins are available for download from this
    site.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 利用现有的 jQuery 插件非常简单。插件包含在一个标准的 JavaScript 文件中。获得该文件的方法有很多种，但最简单的方法是浏览[http://jquery.com/plugins](http://jquery.com/plugins)上的
    jQuery 插件仓库。许多热门插件的最新版本都可以从该网站下载。
- en: 'To make a plug-in''s methods available to us, we just include it in the `<head>`
    of the document. We must ensure that it appears *after* the main jQuery source
    file, and *before* our custom JavaScript code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使插件的方法对我们可用，我们只需将其包含在文档的`<head>`中。我们必须确保它出现在主要的 jQuery 源文件之后，并且出现在我们自定义的 JavaScript
    代码之前：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, we''re ready to use any of the methods made public by the plug-in.
    For example, using the *Form* plug-in, we can add a single line inside our custom
    file''s `$(document).ready` method to submit a form via AJAX:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，我们就可以使用插件公开的任何方法了。例如，使用*Form*插件，我们可以在我们自定义文件的`$(document).ready`方法内添加一行代码来通过
    AJAX 提交表单：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each plug-in is independently documented. In the subsequent chapters, we will
    examine a couple of the more prominent plug-ins in detail, describing each of
    their methods. To find out more about other plug-ins, we can explore the documentation
    linked from the jQuery plug-in repository, or read the explanatory comments found
    in the source code itself.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个插件都有独立的文档。在接下来的章节中，我们将详细介绍一些更显著的插件，描述它们的每个方法。要了解更多关于其他插件的信息，我们可以查看从 jQuery
    插件仓库链接的文档，或者阅读源代码中的解释性注释。
- en: If we can't find the answers to all of our questions in the plug-in repository,
    the author's website, or the plug-in's comments, we can always turn to the jQuery
    discussion list. Many of the plug-in authors are frequent contributors to the
    list and are always willing to help with any problems that new users might face.
    Instructions for subscribing to the discussion list can be found at [http://docs.jquery.com/Discussion](http://docs.jquery.com/Discussion).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在插件仓库、作者的网站或插件的注释中找不到所有问题的答案，我们总是可以求助于 jQuery 讨论列表。许多插件作者经常在列表上发表意见，并且总是乐意帮助新用户可能面临的任何问题。订阅讨论列表的说明可以在[http://docs.jquery.com/Discussion](http://docs.jquery.com/Discussion)找到。
- en: Developing a Plug-in
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发插件
- en: 'As we discussed above, plug-in development is a useful technique whenever we
    are going to perform a task more than once. Here we will itemize the components
    that can populate a plug-in file of our own design. Our plug-ins can use any combination
    of the following four types of jQuery enhancements: object methods, global functions,
    selector expressions, and easing styles.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们上面讨论的，当我们要执行一个任务超过一次时，插件开发是一种有用的技术。在这里，我们将列举可以填充我们自己设计的插件文件的组件。我们的插件可以使用以下四种类型的
    jQuery 增强的任意组合：对象方法、全局函数、选择器表达式和缓动样式。
- en: Object Method
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象方法
- en: '| Adds a new method to all jQuery objects created with the `$()` factory function.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将一个新的方法添加到由`$()`工厂函数创建的所有 jQuery 对象中。'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Components
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件
- en: '`methodName`: A label for the new method.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`methodName`：新方法的标签。'
- en: '`methodDefinition`: A function object to execute when `.methodName()` is called
    on a jQuery object instance.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`methodDefinition`：在 jQuery 对象实例上调用`.methodName()`时要执行的函数对象。'
- en: Discussion
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: When a function needs to act on one or more DOM elements, creating a new jQuery
    object method is usually appropriate. Object methods have access to the matched
    elements that are referenced by the jQuery object, and can inspect or manipulate
    them.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数需要对一个或多个 DOM 元素进行操作时，通常适合创建一个新的 jQuery 对象方法。对象方法可以访问由 jQuery 对象引用的匹配元素，并且可以检查或操作它们。
- en: 'The jQuery object can be retrieved from within the method implementation by
    referencing the keyword `this`. We can either call the built-in jQuery methods
    of this object, or we can extract the DOM nodes to work with them directly. As
    we saw in [Chapter 8](ch08.html "Chapter 8. Miscellaneous Methods"), we can retrieve
    a referenced DOM node using array notation:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过引用关键字 `this` 从方法实现中检索到 jQuery 对象。我们可以调用这个对象的内置 jQuery 方法，也可以直接提取 DOM 节点以直接处理它们。正如我们在[第
    8 章](ch08.html "第 8 章。各种方法")中看到的那样，我们可以使用数组表示法检索引用的 DOM 节点：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we use `this[0]` to find one element, but we need to remember that a
    jQuery selector expression can always match zero, one, or multiple elements. We
    must allow room for any of these scenarios when designing a plug-in method. The
    easiest way to accomplish this is to call `.each()` on the method context; this
    enforces **implicit iteration**, which is important for maintaining consistency
    between plug-in and built-in methods. Within the function argument of the `.each()`
    call, `this` refers to each DOM element in turn:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `this[0]` 来找到一个元素，但是我们需要记住，jQuery 选择器表达式始终可以匹配零个、一个或多个元素。在设计插件方法时，我们必须为这些情况中的任何一种留出空间。实现这一点的最简单方法是在方法上下文中调用
    `.each()`；这强制进行**隐式迭代**，这对于保持插件和内置方法之间的一致性很重要。在 `.each()` 调用的函数参数内，`this` 依次引用每个
    DOM 元素：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we can apply our method to a jQuery object referencing multiple items:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将我们的方法应用于引用多个项的 jQuery 对象：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our method produces a separate alert for each element that was matched by the
    preceding selector expression.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法为每个由前面选择器表达式匹配的元素生成一个单独的警报。
- en: Note also that in these examples, we return the jQuery object itself (referenced
    by `this`) when we are done with our work. This enables the **chaining** behavior
    that jQuery users should be able to rely on. We must return a jQuery object from
    all plug-in methods, unless the method is clearly intended to retrieve a different
    piece of information and is documented as such.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，在这些示例中，当我们完成工作时，我们会返回 jQuery 对象本身（由 `this` 引用）。这样一来，就实现了 jQuery 用户应该依赖的**链接**行为。除非方法明确用于检索不同的信息并且已经记录了这样的用法，否则我们必须从所有插件方法中返回一个
    jQuery 对象。
- en: Global Function
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局函数
- en: '| Makes a new function available to scripts, contained within the jQuery namespace.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '| 使一个新的函数可用于脚本，包含在 jQuery 命名空间内。'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Components (First Version)
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件（第一个版本）
- en: '`pluginName`: The name of the current plug-in.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pluginName`: 当前插件的名称。'
- en: '`fnDefinition`: A function object to execute when `$.pluginName()` is called.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fnDefinition`: 当调用 `$.pluginName()` 时要执行的函数对象。'
- en: Components (Second Version)
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件（第二个版本）
- en: '`pluginName`: The name of the current plug-in.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pluginName`: 当前插件的名称。'
- en: '`function1`: A label for the first function.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function1`: 第一个函数的标签。'
- en: '`fnDefinition1`: A function object to execute when `$.pluginName.function1()`
    is called.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fnDefinition1`: 当调用 `$.pluginName.function1()` 时要执行的函数对象。'
- en: '`function2`: A label for the second function.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function2`: 第二个函数的标签。'
- en: '`fnDefinition2`: A function object to execute when `$.pluginName.function2()`
    is called.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fnDefinition2`: 当调用 `$.pluginName.function2()` 时要执行的函数对象。'
- en: Discussion
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: What we call **global functions** here are technically methods of the `jQuery`
    function object. Practically speaking, they are functions within a jQuery namespace.
    By placing the function within the jQuery namespace, we reduce the chance of name
    conflicts with other functions and variables in scripts.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里称之为**全局函数**的东西在技术上是 `jQuery` 函数对象的方法。从实际上来说，它们是 jQuery 命名空间内的函数。通过将函数放在
    jQuery 命名空间内，我们减少了与脚本中其他函数和变量的名称冲突的机会。
- en: '**Single Functions**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**单一函数**'
- en: 'The first usage opposite illustrates the creation of a global function when
    the plug-in needs only a single function. By using the plug-in name as the function
    name, we can ensure that our function definition will not be trod on by other
    plug-ins (as long as the others follow the same guideline!). The new function
    is assigned as a property of the `jQuery` function object:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种用法反映了当插件仅需要一个单独的函数时创建全局函数的情况。通过使用插件名称作为函数名称，我们可以确保我们的函数定义不会被其他插件踩踏（只要其他插件遵循相同的准则！）。新函数被分配为
    `jQuery` 函数对象的属性：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now in any code that uses this plug-in, we can write:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在使用此插件的任何代码中，我们可以编写：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also use the `$` alias and write:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 `$` 别名并写：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will work just like any other function call, and the alert will be displayed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将像任何其他函数调用一样工作，并显示警报。
- en: '**Multiple Functions**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**多个函数**'
- en: 'In the second usage, we see how to define global functions when more than one
    is needed by the same plug-in. We encapsulate all of the plug-ins within a single
    namespace, named after our plug-in:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种用法中，我们看到如何在同一个插件需要多个函数时定义全局函数。我们将所有插件封装在一个名为我们插件的命名空间中：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To invoke these functions, we address them as members of an object named after
    our plug-in, which is itself a property of the global jQuery function object:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用这些函数，我们将它们视为命名为我们插件的对象的成员，该对象本身是全局 jQuery 函数对象的属性：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Functions are now properly protected from collisions with other functions and
    variables in the global namespace.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在函数已正确保护，不会与全局命名空间中的其他函数和变量发生冲突。
- en: In general, it is wise to use this second usage from the start, even if it seems
    that only one function will be needed, as it makes future expansion easier.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，从一开始就使用第二种用法是明智的，即使看起来只需要一个函数，因为这样做可以更轻松地进行将来的扩展。
- en: Selector Expression
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器表达式
- en: '| Adds a new way to find DOM elements using a jQuery selector string.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '| 添加了一种使用 jQuery 选择器字符串查找 DOM 元素的新方法。'
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Components
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件
- en: '`selectorType`: The prefix character for the selector string, which indicates
    which type of selector is being defined. In practice, the useful value for plug‑ins
    is `'':''`, which indicates a pseudo-class selector.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectorType`：选择器字符串的前缀字符，指示正在定义哪种类型的选择器。在实践中，对于插件来说，有用的值是 `'':''`，表示伪类选择器。'
- en: '`selectorName`: A string uniquely identifying this selector.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectorName`：一个唯一标识此选择器的字符串。'
- en: '`elementTest`: A string containing a JavaScript expression to evaluate. If
    the expression evaluates to `true` for an element `a`, that element will be included
    in the resulting set; otherwise, the element will be excluded.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elementTest`：包含要评估的 JavaScript 表达式的字符串。如果表达式对元素 `a` 评估为 `true`，则该元素将包含在结果集中；否则，该元素将被排除。'
- en: Discussion
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: Plug-ins can add selector expressions that allow scripts to find specific sets
    of DOM elements using a compact syntax. Generally, the expressions that plug-ins
    add are new pseudo-classes, identified by a leading `':'` character.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以添加允许脚本使用紧凑语法找到特定集合的 DOM 元素的选择器表达式。通常，插件添加的表达式是新的伪类，以领先的 `':'` 字符标识。
- en: The pseudo-classes that are supported by jQuery have the general format `:selectorName(param1(param2))`.
    Only the `selectorName` portion of this format is required; `param1` and `param2`
    are available if the pseudo-class allows parameters to make it more specific.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 支持的伪类具有 `:selectorName(param1(param2))` 的一般格式。此格式仅需要 `selectorName` 部分；如果伪类允许参数以使其更具体，`param1`
    和 `param2` 可用。
- en: 'The element test expression can refer to two special variables, named `a` and
    `m`. The DOM element being tested is stored in `a`, and the components of the
    selector expression are held in `m`. The contents of `m` are the result of a regular
    expression match, which breaks `:selectorName(param1(param2))` down as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 元素测试表达式可以引用两个特殊变量，名为 `a` 和 `m`。正在测试的 DOM 元素存储在 `a` 中，选择器表达式的组件存储在 `m` 中。`m`
    的内容是正则表达式匹配的结果，它将 `:selectorName(param1(param2))` 分解如下：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For example, we can build a pseudo-class that tests the number of child nodes
    of an element, and call this new selector expression `:num-children(n)`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以构建一个测试元素的子节点数的伪类，并将这个新的选择器表达式称为 `:num-children(n)`：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can, for example, select all `<ul>` elements with exactly two child
    nodes, and turn them red:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以，例如，选择所有具有两个子节点的 `<ul>` 元素，并将它们变为红色：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If it is necessary to add selector expressions other than pseudo-classes, `jQuery.parse`
    inside `jquery.js` should be consulted to find the relevant regular expression
    matches for other selector types.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要添加除伪类之外的选择器表达式，应查看`jquery.js`中的`jQuery.parse`以找到其他选择器类型的相关正则表达式匹配。
- en: Easing Style
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**缓动样式**'
- en: '| Defines an acceleration curve for future animations.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '| 为未来的动画定义了一个加速曲线。'
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Components
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件
- en: '`easingStyleName`: A label for the new easing style.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easingStyleName`：新缓动样式的标签。'
- en: '`easingFunction`: A function object that determines the animation value at
    any given moment. Easing functions are passed the following arguments:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easingFunction`：确定任何给定时刻的动画值的函数对象。缓动函数传递以下参数：'
- en: '`fraction`: The current position of the animation, as measured in time between
    0 (the beginning of the animation) and 1 (the end of the animation).'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fraction`：动画的当前位置，以从0（动画的开始）到1（动画的结束）的时间来衡量。'
- en: '`elapsed`: The number of milliseconds that have passed since the beginning
    of the animation (seldom used).'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elapsed`：动画开始后经过的毫秒数（很少使用）。'
- en: '`attrStart`: The beginning value of the CSS attribute that is being animated.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrStart`：正在进行动画的CSS属性的起始值。'
- en: '`attrDelta`: The difference between the start and end values of the CSS attribute
    that is being animated.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attrDelta`：正在进行动画的CSS属性的起始值和结束值之间的差异。'
- en: '`duration`: The total number of milliseconds that will pass during the animation
    (seldom used).'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration`：动画期间总共经过的毫秒数（很少使用）。'
- en: Discussion
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: Most effect methods trigger an animation with a fixed **easing style**, called
    **swing**. An easing style defines how the animation will speed up and slow down
    over time. The `.animate` method gives us more flexibility; a parameter to the
    method allows a custom easing style to be specified. New easing styles can be
    created using this plug-in mechanism.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数有效的方法都会触发一个具有固定**缓动样式**的动画，称为**swing**。缓动样式定义了动画随时间加速和减速的方式。`.animate` 方法给了我们更大的灵活性；该方法的一个参数允许指定自定义缓动样式。可以使用这个插件机制创建新的缓动样式。
- en: 'An easing function must return the value of the property being animated at
    any moment within the animation. Because of the arguments that are passed to an
    easing function, the calculation usually takes the form:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动函数必须在动画的任何时刻返回正在动画的属性的值。由于传递给缓动函数的参数，计算通常采用以下形式：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this calculation, `f` represents a mathematical function whose value varies
    from 0 to 1 as its parameter varies from 0 to 1\. For example, an easing style
    that caused the animation to proceed at a constant rate would require a linear
    function (`f(x) = x`):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个计算中，`f`代表一个数学函数，其值随着参数从0到1的变化而从0到1变化。例如，一个导致动画以恒定速率进行的缓动样式将需要一个线性函数（`f(x)
    = x`）：
- en: '![Discussioneasing styleabout](img/3810_09_01.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![关于缓动样式的讨论](img/3810_09_01.jpg)'
- en: 'In a plug-in, this easing style would be expressed with the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个插件中，这个缓动样式将用以下代码表示：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On the other hand, if we wished our animation to begin slowly and speed up
    gradually, we could use a quadratic function (`f(x)` `=` `x` `2` `)`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们希望我们的动画开始缓慢，然后逐渐加速，我们可以使用一个二次函数（`f(x)` `=` `x` `2` `）`：
- en: '![Discussioneasing styleabout](img/3810_09_02.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![关于缓动样式的讨论](img/3810_09_02.jpg)'
- en: 'In a plug-in, this easing style would be expressed with the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个插件中，这个缓动样式将用以下代码表示：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With an easing plug-in such as this one installed, we can choose the new easing
    style any time we invoke the `.animate` method:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这样一个缓动插件后，我们可以在调用`.animate`方法时随时选择新的缓动样式：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With this call, all elements with a class of `myClass` attached will move and
    fade to the specified values, starting slowly and speeding up gradually until
    they reach their destinations.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个调用，所有附有`myClass`类的元素都会移动并淡出到指定的值，开始缓慢，然后逐渐加速直到它们到达目的地。
- en: 'Example: Maintaining Multiple Event Logs'
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：维护多个事件日志
- en: In the various examples in preceding reference chapters, we have had the need
    to display log events when various events occur. JavaScript's `alert` function
    is often used for this type of demonstration, but does not allow for the frequent,
    timely messages we needed on occasion. A better alternative is the `console.log`
    function available to Firefox and Safari, which allows printing messages to a
    separate log that does not interrupt the flow of interaction on the page. As this
    function is not available to Internet Explorer, however, we used a custom function
    to achieve this style of message logging.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的参考章节中的各种示例中，我们需要在各种事件发生时显示日志事件。JavaScript 的 `alert` 函数通常用于此类演示，但不允许我们按时显示频繁的消息。一个更好的选择是
    Firefox 和 Safari 可用的 `console.log` 函数，它允许将消息打印到不会中断页面交互流程的单独日志中。然而，由于此函数不适用于 Internet
    Explorer，因此我们使用了一个自定义函数来实现此类消息记录的样式。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Firebug Lite script (described in [Appendix B](apb.html "Appendix B. Development
    Tools")) provides a very robust cross‑platform logging facility. The method we
    develop here is tailored specifically for the examples in the preceding chapters;
    for general utility, Firebug Lite is typically preferable.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Firebug Lite 脚本（见 [附录 B](apb.html "附录 B. 开发工具")）提供了一个非常强大的跨平台日志记录工具。我们在这里开发的方法专门针对前几章的示例；对于一般情况，通常更倾向于使用
    Firebug Lite。
- en: 'A simple way to log messages would be to create a global function that appends
    messages to a specific element on the page:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 记录消息的一个简单方法是创建一个全局函数，将消息附加到页面上的特定元素：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can get a bit fancier, and have the new message appear with an animation:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以变得更加花哨，让新消息以动画的方式出现：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now we can call `$.log('foo')` to display `foo` in the log box on the page.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以调用 `$.log('foo')` 在页面上的日志框中显示 `foo`。
- en: 'We sometimes had multiple examples on a single page, however, and it was convenient
    to be able to keep separate logs for each example. We accomplished this by using
    a method rather than global function:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们有时在单个页面上有多个示例，因此，将每个示例保持单独的日志记录是很方便的。我们通过使用方法而不是全局函数来实现这一点：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now calling `$('.log').log('foo')` has the effect our global function call did
    previously, but we can change the selector expression to target different log
    boxes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在调用 `$('.log').log('foo')` 就像我们之前的全局函数调用一样，但我们可以更改选择器表达式以定位不同的日志框。
- en: 'Ideally, though, the `.log` method would be intelligent enough to locate the
    most relevant box to use for the log message without an explicit selector. By
    exploiting the context passed to the method, we can traverse the DOM to find the
    log box nearest the selected element:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，理想情况下，`.log` 方法应该足够智能，能够在没有显式选择器的情况下找到最相关的日志消息框。通过利用传递给方法的上下文，我们可以遍历 DOM，找到最接近所选元素的日志框：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This code looks for a log message box within the matched elements, and if none
    is found, walks up the DOM in search of one.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码在匹配元素中查找日志消息框，如果找不到，则向上遍历 DOM 查找一个。
- en: 'Finally, at times we require the ability to display the contents of an object.
    Printing out the object itself yields something barely informative like `[object
    Object]`, so we can detect the argument type and do some of our own pretty-printing
    in the case that an object is passed in:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有时我们需要显示对象的内容。直接打印对象本身得到的是几乎没有信息的东西，像 `[object Object]`，因此，我们可以检测参数类型，在传递对象时进行一些自己的美化打印：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now we have a method that can be used to write out both objects and strings
    in a place that is relevant to the work being done on the page.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个可以在页面上与正在进行的工作相关的地方写出对象和字符串的方法。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We''ve viewed plug-ins from two angles in this chapter: usage and development.
    We''ve looked at four types of additions we can make to jQuery with our own plug-ins.
    Plug-ins can introduce new global methods and jQuery object methods; moreover,
    they can add selector expressions and easing styles.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从两个角度查看了插件：使用和开发。我们看了四种类型的 jQuery 插件添加：插件可以引入新的全局方法和 jQuery 对象方法；此外，它们可以添加选择器表达式和缓动样式。
- en: Often, though, we'll be more interested in using plug-ins that others have created.
    While we've already pointed to available documentation for many plug-ins, we will
    go into more detail about two of the more popular ones in the following chapters.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然如此，我们通常更感兴趣的是使用其他人创建的插件。虽然我们已经指向了许多插件的可用文档，但在接下来的章节中，我们将更详细地介绍两个较受欢迎的插件。
