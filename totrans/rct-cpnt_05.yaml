- en: Chapter 5. Going Material!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we looked at the basics of how to style and animate React
    components. We can make components look how we want them to, but how do we want
    them to look?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at something called material design. You'll learn
    how to express our interface not only in terms of components, but in a consistent
    design language.
  prefs: []
  type: TYPE_NORMAL
- en: You will see a major intersection between component-based design and visual
    design patterns. Material design is very detailed, as we'll see in this chapter.
    It describes, in great detail, how each type of component (or surface) must look,
    feel, and move. It's that core approach of designing in the smallest terms that
    we've come to understand with React. Now, we get to apply those lessons from a
    visual standpoint as well.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding material design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For me, the name material design evokes an image of fashion or engineering,
    where different textures and patterns have distinct visual or technical characteristics.
    Everything I touch is some kind of material. Everything I see is some kind of
    material. All of these materials obey the laws of physics and behave in familiar
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: These senses, of touch and sight, are fundamental to how we interact with the
    world. They're a broad and unspoken constant. Material design is a language that
    aims to bridge the gap between the physical and digital world, using material
    as a metaphor.
  prefs: []
  type: TYPE_NORMAL
- en: In this language, the surfaces and edges of material give us some visual interface
    cues that are grounded in reality. In this language, components respond immediately
    to touch in ways that hint at what they can do.
  prefs: []
  type: TYPE_NORMAL
- en: Material design is heavily inspired by print design. Yet all the typography,
    color, and imagery do more than just look good. They create focus, hierarchy,
    and meaning. It reinforces the user as the primary cause of movement, using meaningful
    motion to focus on important areas of the interface, always giving the appropriate
    amount of feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Surfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each object is represented by a material surface. These objects are sized in
    **device-independent pixels** (or **dp**, for short). This is a great unit to
    measure user input because it allows designers to design interfaces independent
    of the screen size.
  prefs: []
  type: TYPE_NORMAL
- en: It can also be converted to absolute units (such as inches or millimeters) depending
    on the device's screen size.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about dp at [http://en.wikipedia.org/wiki/Device_independent_pixel](http://en.wikipedia.org/wiki/Device_independent_pixel).
  prefs: []
  type: TYPE_NORMAL
- en: Surfaces are thought of as 3D objects, having width, height, and depth. All
    surfaces have a depth of 1 dp, but they can have any width or height. Surfaces
    also overlap, so they have a vertical offset from each other.
  prefs: []
  type: TYPE_NORMAL
- en: This vertical offset (or elevation) allows layering, creating a sense of depth
    similar to the real world. The content on a surface, such as typography and images,
    lies flat on the surface. Think of it like ink on paper, where the paper has a
    depth that's easier to notice than the ink printed on it.
  prefs: []
  type: TYPE_NORMAL
- en: This layering effect is accentuated with shadows cast onto lower surfaces. The
    screen serves as a light source, so the closer the surfaces are to it (the higher
    they are in the interface), the bigger the shadow they cast.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about elevation and layering at [https://www.google.com/design/spec/what-is-material/elevation-shadows.html](https://www.google.com/design/spec/what-is-material/elevation-shadows.html).
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Surfaces provide the depth and hierarchy, but the real value of an application
    comes from the content presented through the interface. Content drives interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Material surfaces should respond to interactions. Playing videos, zooming photos,
    or completing forms should feel natural. An interaction should feel natural, and
    wherever possible, it should mimic how it would feel in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about interactions at [https://www.google.com/design/spec/animation/responsive-interaction.html](https://www.google.com/design/spec/animation/responsive-interaction.html).
  prefs: []
  type: TYPE_NORMAL
- en: Motion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the ways in which an interface can respond to a user interaction is through
    the efficient use of motion. Animation is not new to mobile interfaces (where
    material design was born), but we're talking about a considered approach to how
    that animation is performed.
  prefs: []
  type: TYPE_NORMAL
- en: Just like in the real world, some objects move faster or slower when interacted
    with as concepts such as friction and momentum come into play. Some elements compress
    deeper when pressed and others barely move at all.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about motion at [https://www.google.com/design/spec/animation/meaningful-transitions.html](https://www.google.com/design/spec/animation/meaningful-transitions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Typography and iconography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are guidelines for how to structure and color textual content in material
    interfaces. Most of the examples show Roboto (which is the standard Android font),
    but the rules work just as well with other clear typefaces.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, there are guidelines for how to create and use icons through your
    interface. There is a standard set of icons (called system icons), which will
    get you started.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download Roboto from [https://www.google.com/fonts/specimen/Roboto](https://www.google.com/fonts/specimen/Roboto)
    and the system icons from [http://www.google.com/design/spec/style/icons.html#icons-system-icons](http://www.google.com/design/spec/style/icons.html#icons-system-icons).
  prefs: []
  type: TYPE_NORMAL
- en: Keeping your head above water
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first time you read through the material design specification (available
    at [http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html)),
    you may be a little overwhelmed. There's a lot of detail in there, and knowing
    where to start is not easy.
  prefs: []
  type: TYPE_NORMAL
- en: The truth is you don't have to keep all of it in mind. I freaked out the first
    time I read through it, but I've since come to realize that the point is not to
    memorize it all. Sure, that would help when making every minute choice about your
    interface, but it isn't meant to be a toolkit or component library.
  prefs: []
  type: TYPE_NORMAL
- en: Material design is a language—a living document. Google has and will continue
    to adapt it, and when you learn a language, it helps to know some of the words.
    However, you cannot learn a whole language in a day, nor can you learn it well
    only by memorizing set phrases.
  prefs: []
  type: TYPE_NORMAL
- en: No, to learn a language, you need to speak it daily. You need to take to heart
    the grammar and struggle through your mistakes, until one day you have learned
    how to be comfortable with it without consciously having to remember each and
    every rule. On that day, material design becomes second nature to you.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I encourage you to read through the material design specification at least once
    before continuing. Remember, you can find it at [http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html).
    It doesn't matter if you forget some or even most of it. The purpose of reading
    it is that some of the decisions will seem more natural to you, as you remember
    parts of the specification. The pieces may fit together easier.
  prefs: []
  type: TYPE_NORMAL
- en: Material design lite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having said all that, there are a few tools to help you get started. The first
    tool we will look at is called material design lite. Over 120 contributors have
    teamed up to create a set of reusable components in the material design language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *lite* part of the name comes mainly from two things:'
  prefs: []
  type: TYPE_NORMAL
- en: It is framework agnostic, which means you can use it without including something
    such as jQuery or Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it is gzipped, it's less than 30 KB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's try it out by customizing the colors of the default template. Go to [http://www.getmdl.io/customize/index.html](http://www.getmdl.io/customize/index.html)
    and pick a couple of colors. The color palettes in material design consist of
    primary colors and an accent color. You can also use some hues of the primary
    color in your design, but we'll not worry about those just yet.
  prefs: []
  type: TYPE_NORMAL
- en: As you select colors from the color wheel, you may notice some of the other
    colors disappear. The color wheel hides colors that will not have enough contrast
    to those you have already selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should pick the colors you want to use in your design. I''ve picked the
    two colors marked as **1** and **2** in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Material design lite](img/5268_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just below the wheel, you''ll see a link element. This points to a hosted CSS
    file. If you place it in the head of your HTML page, those colors will be applied
    to your material design elements. I picked indigo and pink, which is reflected
    in the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can choose to save this file and serve it locally. For now, I will include
    it directly in the head of my HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to include a JavaScript file, and another CSS file that defines
    a few custom fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a few class names to our button elements as we begin to apply some
    material design styles to our interface. We''ll begin with `PageAdmin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: All the material design lite class names start with `mdl-`. We added a few that
    define some visual styles for **floating action buttons** (or **FAB**, for short).
  prefs: []
  type: TYPE_NORMAL
- en: 'These styles make our *add* button look much better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Material design lite](img/5268_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This isn't a great layout though. We should position the button better and add
    some boundaries to the `Page` components. In fact, we should start thinking of
    this CMS interface in terms of the different sections/pages we plan to have.
  prefs: []
  type: TYPE_NORMAL
- en: In the beginning, this admin interface won't be open for everyone to see, so
    perhaps we should have a login page. And, how will we navigate between different
    sections of this interface? Perhaps we should add some navigation to the mix.
  prefs: []
  type: TYPE_NORMAL
- en: When we visit [http://www.getmdl.io/templates/index.html](http://www.getmdl.io/templates/index.html),
    we can see a few different starter layouts that we can use. I really like the
    look of the **Dashboard** layout, so I think we can base the navigation on that.
  prefs: []
  type: TYPE_NORMAL
- en: Then, there's the **Text-heavy webpage** layout, which has a list of card components.
    These look just right for our `Page` components. Let's get to work!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by creating a simple login without any server-side validation
    (for now). We''ll break it out into its own `login.html` page and `login.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'I made a few changes to how SystemJS is configured. Instead of listing every
    individual file, we now set the root directory as the `baseURL`. This means we
    need to change how we import everything except `react` and `react-dom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we will use some material design lite **Dashboard** class names, which
    we defined in `example.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These styles are mostly taken from the **Dashboard** layout files, though I've
    deleted styles that we don't need. Take a note of how the `.react` container element
    is stretched to the bounds of the window.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ideally, we would like to isolate the styles for each component inside each
    component. This can be achieved in a number of ways (which we briefly looked at
    in the previous chapter). Try to pull the styles for each of these components
    into the components themselves. It may be a bit more difficult to do if most of
    the styles come from the packaged MDL source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `Nav` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This new `Nav` component is vastly different from the other React components
    we've created so far. For a start, it has no internal state, rendering only static
    content. It's not a class, but rather a plain arrow function. Since React 0.14,
    it has become possible to pass a function to the `ReactDOM.render`, whether directly
    or indirectly.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may also want to move the class arrays outside of the functions that use
    them, since they're not likely to change often. This isolates them away from the
    moving parts of each component and reduces the amount of work done each time the
    components are rendered.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, I've left them inside the render function, but you're
    welcome to move them as you extend or customize your components.
  prefs: []
  type: TYPE_NORMAL
- en: This style is far simpler to follow when it comes to stateless components. It's
    a pattern that we'll repeat as time goes on, so be on the lookout for it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need to create the `Login` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, input elements work the same as usual, with the addition of
    a few special MDL classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us a pleasant login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a login page](img/5268_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating page admin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to apply similar changes to the now-separate `page-admin.html` and
    `page-admin.js` files. Let''s begin with the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is almost exactly the same as `login.html`, except that we load a different
    bootstrap file in this page. There are significant differences in `page-admin.js`
    though:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We still load in the `mdl-` classes and HTML structure, but we also include
    the same `Backend` bootstrapping as we included earlier. The `PageAdmin` component
    `render` method looks very different now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to update the `PageView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These changes don't do anything significant to the functionality we had previously,
    other than the CSS and HTML changes. We still create pages in exactly the same
    way. Also, we still edit and delete them in exactly the same way. We simply apply
    new visuals to an already functional interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The page admin section should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating page admin](img/5268_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's much better than before! One thing to note is that we haven't yet styled
    the `PageEdit` component, so consider that an exercise for next time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pay careful attention to the example code files. A lot has changed since the
    last chapter, including splitting the example files and loading everything differently
    with SystemJS. You cannot continue on from the last chapter's code without making
    these changes and expect the examples in this chapter to work out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we wrap up, I want to share a few resources that you might find helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Font Squirrel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we used Roboto. More accurately, The MDL instructions told
    us how to embed a link to Roboto on Google Webfonts. If you would prefer to use
    your own custom fonts, then you may need to convert them.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can convert font files at Font Squirrel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Font Squirrel](img/5268_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Head over to [http://www.fontsquirrel.com/tools/webfont-generator](http://www.fontsquirrel.com/tools/webfont-generator)
    and upload your font files. You'll start to download the converted files with
    helpful CSS files to get you started. We don't have time to cover all the intricacies
    of custom fonts, but the example files you download should set you on the right
    path.
  prefs: []
  type: TYPE_NORMAL
- en: Material UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a bit of a mash-up between the MDL CSS/JavaScript and React. This
    might not always work or be as elegant as you would like. In such instances, check
    out [http://www.material-ui.com](http://www.material-ui.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Material UI has a huge range of components to choose from, as we can see in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Material UI](img/5268_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's a catalogue of material design components built to work on top of React.
    We may use some of them in our CMS, but I'll make sure that I explain when we
    do. It's worth taking a look through the components it has to offer and deciding
    whether you'd prefer the purer approach of material design over the code we have
    so far.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we blasted through some of the concepts in material design.
    You learned to think of it as an ever-changing language that we must learn over
    time. We implemented a global navigation component using a new form of React component
    (a function). We also implemented a login page, which is in need of a server-side
    validation, and we made our `PageAdmin` component look heaps better!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at how to change views without page reloads
    and some of the neat things we can do to make that experience beautiful.
  prefs: []
  type: TYPE_NORMAL
