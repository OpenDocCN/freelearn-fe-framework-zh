["```js\nng update @angular/core@17 @angular/cli@17\n```", "```js\n@if (loadService.isLoading) {\n  <app-loading-overlay />\n}\n<router-outlet></router-outlet>\n```", "```js\n<section class=\"mb-8\">\n  <h2 class=\"mb-4 text-xl font-bold\">List of entries</h2>\n  <ul class=\"rounded border shadow\">\n    @for (item of exerciseList; track item.id) {\n    <li>\n      <app-entry-item\n        [exercise-set]=\"item\"\n        (deleteEvent)=\"deleteEvent.emit($event)\"\n        (editEvent)=\"editEvent.emit($event)\"\n      />\n    </li>\n    } @empty {\n      <div>\n        No Items!\n      </div>\n    }\n  </ul>\n</section>\n```", "```js\n. . .\n@if (entryForm.get('date')?.invalid && entryForm.get('date')?.touched) {\n    <div class=\"mt-1 text-red-500\">Date is required.</div>\n    }\n. . .\n@if (showSuggestions) {\n    <ul\n      class=\"absolute z-10 mt-2 w-auto rounded border border-gray-300 bg-white\"\n    >\n      @for (suggestion of exercises$ | async; track suggestion.id) {\n      <li\n        class=\"cursor-pointer px-3 py-2 hover:bg-blue-500 hover:text-white\"\n        (click)=\"selectExercise(suggestion.description)\"\n      >\n        {{ suggestion.description }}\n      </li>\n      }\n    </ul>\n    } @if (entryForm.get('exercise')?.invalid &&\n    entryForm.get('exercise')?.touched) {\n    <div class=\"mt-1 text-red-500\">Exercise is required.</div>\n    }\n. . .\n@if (entryForm.get('reps')?.invalid && entryForm.get('reps')?.touched) {\n    <div class=\"mt-1 text-red-500\">\n      Reps is required and must be a positive number.\n    </div>\n    }@else if ( entryForm.get('reps')?.errors?.['isNotMultiple'] &&\n    entryForm.get('reps')?.touched) {\n    <div class=\"mt-1 text-red-500\">\n      Reps is required and must be multiple of 3.\n    </div>\n    }\n```", "```js\nng g @angular/core:control-flow\n```", "```js\n@Component({\n  standalone: true,\n  templateUrl: './diary.component.html',\n  styleUrls: ['./diary.component.css'],\n  imports: [ListEntriesComponent, NewItemButtonComponent],\n})\n```", "```js\n@Component({\n  selector: 'app-entry-item',\n  standalone: true,\n  templateUrl: './entry-item.component.html',\n  styleUrls: ['./entry-item.component.css'],\n  imports: [DatePipe],\n})\n```", "```js\n@Component({\n  selector: 'app-new-item-button',\n  templateUrl: './new-item-button.component.html',\n  styleUrls: ['./new-item-button.component.css'],\n  standalone: true,\n})\n```", "```js\n@Component({\n  selector: 'app-list-entries',\n  standalone: true,\n  templateUrl: './list-entries.component.html',\n  styleUrls: ['./list-entries.component.css'],\n  imports: [EntryItemComponent],\n})\n```", "```js\n@NgModule({\n  declarations: [\n    NewEntryFormTemplateComponent,\n    NewEntryFormReactiveComponent,\n  ],\n  imports: [\n    CommonModule,\n    DiaryRoutingModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class DiaryModule {}\n```", "```js\n@defer {\n  <app-list-entries\n    [exerciseList]=\"exerciseList\"\n    (deleteEvent)=\"deleteItem($event)\"\n    (editEvent)=\"editEntry($event)\"\n  />\n}\n```", "```js\n. . .\n@defer (on hover(trigger)){\n  <app-list-entries\n    [exerciseList]=\"exerciseList\"\n    (deleteEvent)=\"deleteItem($event)\"\n    (editEvent)=\"editEntry($event)\"\n  />\n}\n. . .\n  <button\n    #trigger\n    class=\"rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700\"\n    (click)=\"newList()\"\n  >\n    Server Sync\n  </button>\n. . .\n```", "```js\n@defer {\n  <app-list-entries\n    [exerciseList]=\"exerciseList\"\n    (deleteEvent)=\"deleteItem($event)\"\n    (editEvent)=\"editEntry($event)\"\n  />\n  } @loading {\n  <div>Loading</div>\n  } @placeholder {\n  <div>PlaceHolder</div>\n  } @error {\n  <div>Error</div>\n  }\n```", "```js\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      bindToComponentInputs: true,\n      enableViewTransitions: true,\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```", "```js\n@keyframes slide-right {\n  from {\n    transform: translateX(40px);\n  }\n}\n@keyframes slide-left {\n  to {\n    transform: translateX(-40px);\n  }\n}\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n}\n@keyframes fade-out {\n  to {\n    opacity: 0;\n  }\n}\n```", "```js\n::view-transition-old(root) {\n  animation: 100ms cubic-bezier(0.4, 0, 1, 1) both fade-out,\n  400ms cubic-bezier(0.4, 0, 0.2, 1) both slide-left;\n}\n::view-transition-new(root) {\n  animation: 250ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,\n  400ms cubic-bezier(0.4, 0, 0.2, 1) both slide-right;\n}\n```", "```js\nlet a = signal<number>(2);\nlet b = signal<number>(3);\nlet sum = computed(() => a() + b());\nconsole.log(sum());\n```", "```js\nlet a = signal<number>(2);\nlet b = signal<number>(3);\nlet sum = computed(() => a() + b());\nconsole.log(sum());\na.set(9);\nconsole.log(sum());\n```", "```js\nlet a = signal<number>(2);\nlet b = signal<number>(3);\nlet sum = computed(() => a() + b());\nconsole.log(sum());\na.set(9);\nconsole.log(sum());\nb.update((oldValue) => oldValue * 2);\nconsole.log(sum());\n```", "```js\nexport class LoadService {\n  isLoading = signal<Boolean>(false);\n  showLoader() {\n    this.isLoading.set(true);\n  }\n  hideLoader() {\n    this.isLoading.set(false);\n  }\n}\n```", "```js\n@if (loadService.isLoading()) {\n  <app-loading-overlay />\n}\n<router-outlet></router-outlet>\n```", "```js\nexport class ExerciseSetsService {\n. . .\n  exerciseList = signal<ExerciseSetList>([] as ExerciseSetList);\n  getInitialList() {\n    const headers = new HttpHeaders().set('X-TELEMETRY', 'true');\n    this.httpClient\n      .get<ExerciseSetListAPI>(this.url, { headers })\n      .pipe(map((api) => api?.items))\n      .subscribe((list) => this.exerciseList.set(list));\n  }\n  deleteItem(id: string) {\n    this.httpClient.delete<boolean>(`${this.url}/${id}`).subscribe(() => {\n    this.exerciseList.update((list) =>\n      list.filter((exerciseSet) => exerciseSet.id !== id)\n    );\n    });\n  }\n. . .\n}\n```", "```js\nexport class ListEntriesComponent {\n  @Output() editEvent = new EventEmitter<ExerciseSet>();\n  @Output() deleteEvent = new EventEmitter<string>();\n  private exerciseSetsService = inject(ExerciseSetsService);\n  exerciseList = this.exerciseSetsService.exerciseList;\n}\n```", "```js\n<section class=\"mb-8\">\n  <h2 class=\"mb-4 text-xl font-bold\">List of entries</h2>\n  <ul class=\"rounded border shadow\">\n  @for (item of exerciseList(); track item.id) {\n    <li>\n      <app-entry-item\n        [exercise-set]=\"item\"\n        (deleteEvent)=\"deleteEvent.emit($event)\"\n        (editEvent)=\"editEvent.emit($event)\"\n      />\n    </li>\n    } @empty {\n      <div>\n        No Items!\n      </div>\n    }\n  </ul>\n</section>\n```", "```js\n<app-list-entries\n  (deleteEvent)=\"deleteItem($event)\"\n  (editEvent)=\"editEntry($event)\"\n/>\n```", "```js\nngOnInit(): void {\n  this.exerciseSetsService.getInitialList();\n}\ndeleteItem(id: string) {\n  this.exerciseSetsService.deleteItem(id);\n}\n```", "```js\nvolume = computed<number>(() =>\n  this.exerciseSetsService\n    .exerciseList()\n    .reduce(\n      (volume, exerciseSet) => volume + exerciseSet.reps * exerciseSet.sets,\n      0\n    )\n);\n```", "```js\n<header class=\"bg-blue-500 py-4 text-white\">\n  <div class=\"mx-auto max-w-6xl px-4\">\n    <h1 class=\"text-2xl font-bold\">Workout diary - Total Volume: {{volume()}} </h1>\n  </div>\n</header>\n```"]