["```js\n    function calculateTotalPriceJS(product, quantity, discount) {\n    ```", "```js\n      const priceWithoutDiscount = product.price * quantity;\n    ```", "```js\n      const discountAmount = priceWithoutDiscount * discount;\n    ```", "```js\n      return priceWithoutDiscount - discountAmount;\n    ```", "```js\n    }\n    ```", "```js\n    function calculateTotalPrice(\n    ```", "```js\n      product: { name: string; unitPrice: number },\n    ```", "```js\n      quantity: number,\n    ```", "```js\n      discount: number\n    ```", "```js\n    ) {\n    ```", "```js\n      const priceWithoutDiscount = product.price * quantity;\n    ```", "```js\n      const discountAmount = priceWithoutDiscount * discount;\n    ```", "```js\n      return priceWithoutDiscount - discountAmount;\n    ```", "```js\n    }\n    ```", "```js\n    let firstName = \"Fred\"\n    ```", "```js\n    console.log(\"firstName\", firstName, typeof firstName);\n    ```", "```js\n    let score = 9\n    ```", "```js\n    console.log(\"score\", score, typeof score);\n    ```", "```js\n    let date = new Date(2022, 10, 1);\n    ```", "```js\n    console.log(\"date\", date, typeof date);\n    ```", "```js\n    score = \"ten\"\n    ```", "```js\n    console.log(\"score\", score, typeof score);\n    ```", "```js\n    let unitPrice: number;\n    ```", "```js\nlet unitPrice;\n```", "```js\n    unitPrice = \"Table\";\n    ```", "```js\n    function getTotal(\n    ```", "```js\n      unitPrice: number,\n    ```", "```js\n      quantity: number,\n    ```", "```js\n      discount: number\n    ```", "```js\n    ): number {\n    ```", "```js\n      const priceWithoutDiscount = unitPrice * quantity;\n    ```", "```js\n      const discountAmount = priceWithoutDiscount * discount;\n    ```", "```js\n      return priceWithoutDiscount - discountAmount;\n    ```", "```js\n    }\n    ```", "```js\n    let total: string = getTotal(500, \"one\", 0.1);\n    ```", "```js\n    let flag = false;\n    ```", "```js\n    flag = \"table\";\n    ```", "```js\n    let today: Date;\n    ```", "```js\n    today = new Date();\n    ```", "```js\n    let today = new Date();\n    ```", "```js\n    today.addMonths(2);\n    ```", "```js\nlet flag;\n```", "```js\n    fetch(\"https://swapi.dev/api/people/1\")\n    ```", "```js\n      .then((response) => response.json())\n    ```", "```js\n      .then((data) => {\n    ```", "```js\n        console.log(\"firstName\", data.firstName);\n    ```", "```js\n      });\n    ```", "```js\n     fetch(\"https://swapi.dev/api/people/1\")\n    ```", "```js\n      .then((response) => response.json())\n    ```", "```js\n      .then((data: unknown) => {\n    ```", "```js\n        console.log(\"firstName\", data.firstName);\n    ```", "```js\n      });\n    ```", "```js\n    fetch(\"https://swapi.dev/api/people/1\")\n    ```", "```js\n      .then((response) => response.json())\n    ```", "```js\n      .then((data: unknown) => {\n    ```", "```js\n        console.log(\"name\", data.name);\n    ```", "```js\n      });\n    ```", "```js\n    fetch(\"https://swapi.dev/api/people/1\")\n    ```", "```js\n      .then((response) => response.json())\n    ```", "```js\n      .then((data: unknown) => {\n    ```", "```js\n        if (isCharacter(data)) {\n    ```", "```js\n          console.log(\"name\", data.name);\n    ```", "```js\n        }\n    ```", "```js\n      });\n    ```", "```js\n    function isCharacter(\n    ```", "```js\n      character: any\n    ```", "```js\n    ): character is { name: string } {\n    ```", "```js\n      return \"name\" in character;\n    ```", "```js\n    }\n    ```", "```js\ncharacter is { name: string }\n```", "```js\nfunction logText(text: string) {\n  console.log(text);\n}\n```", "```js\nfunction logText(text: string): undefined {\n  console.log(text);\n}\n```", "```js\n    function foreverTask(taskName: string): never {\n    ```", "```js\n      while (true) {\n    ```", "```js\n        console.log(`Doing ${taskName} over and over again       ...`);\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    function foreverTask(taskName: string): never {\n    ```", "```js\n      while (true) {\n    ```", "```js\n        console.log(`Doing ${taskName} over and over again       ...`);\n    ```", "```js\n        break;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    function foreverTask(taskName: string) {\n    ```", "```js\n      while (true) {\n    ```", "```js\n        console.log(`Doing ${taskName} over and over again ...`);\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    const numbers: number[] = [];\n    ```", "```js\nconst numbers: Array<number> = [];\n```", "```js\n    numbers.push(1);\n    ```", "```js\n    numbers.push(\"two\");\n    ```", "```js\n    const numbers = [1, 2, 3];\n    ```", "```js\nfunction calculateTotalPrice(\n  product: { name: string; unitPrice: number },\n  ...\n) {\n  ...\n}\n```", "```js\n    let table = {name: \"Table\", unitPrice: 450};\n    ```", "```js\n{\n  name: string;\n  unitPrice: number;\n}\n```", "```js\n    table.discount = 10;\n    ```", "```js\n    const table: { name: string; unitPrice: number } = {\n    ```", "```js\n      name: \"Table\",\n    ```", "```js\n    };\n    ```", "```js\n    const table: { name: string; unitPrice?: number } = {\n    ```", "```js\n      name: \"Table\",\n    ```", "```js\n    };\n    ```", "```js\nconst table: { name: string; unitPrice?: number } = ...;\nconst chair: { name: string; unitPrice?: number } = ...;\n```", "```js\ntype YourTypeAliasName = AnExistingType;\n```", "```js\n    type Product = { name: string; unitPrice?: number };\n    ```", "```js\n    let table: Product = { name: \"Table\" };\n    ```", "```js\n    let chair: Product = { name: \"Chair\", unitPrice: 40 };\n    ```", "```js\n    type DiscountedProduct = Product & { discount: number };\n    ```", "```js\n    let chairOnSale: DiscountedProduct = {\n    ```", "```js\n      name: \"Chair on Sale\",\n    ```", "```js\n      unitPrice: 30,\n    ```", "```js\n      discount: 5,\n    ```", "```js\n    };\n    ```", "```js\n    type Purchase = (quantity: number) => void;\n    ```", "```js\n    type Purchase = (quantity: number) => void;\n    ```", "```js\n    type Product = {\n    ```", "```js\n      name: string;\n    ```", "```js\n      unitPrice?: number;\n    ```", "```js\n      purchase: Purchase;\n    ```", "```js\n    };\n    ```", "```js\n    let table: Product = {\n    ```", "```js\n      name: \"Table\",\n    ```", "```js\n      purchase: (quantity) =>\n    ```", "```js\n        console.log(`Purchased ${quantity} tables`),\n    ```", "```js\n    };\n    ```", "```js\n    table.purchase(4);\n    ```", "```js\ninterface Product {\n  ...\n}\n```", "```js\n    interface Product {\n    ```", "```js\n      name: string;\n    ```", "```js\n      unitPrice?: number;\n    ```", "```js\n    }\n    ```", "```js\n    interface DiscountedProduct extends Product {\n    ```", "```js\n      discount: number;\n    ```", "```js\n    }\n    ```", "```js\n    interface Purchase {(quantity: number): void}\n    ```", "```js\n    interface Product {\n    ```", "```js\n      name: string;\n    ```", "```js\n      unitPrice?: number;\n    ```", "```js\n      purchase: Purchase;\n    ```", "```js\n    }\n    ```", "```js\n    class Product {\n    ```", "```js\n      name;\n    ```", "```js\n      unitPrice;\n    ```", "```js\n    }\n    ```", "```js\n    class Product {\n    ```", "```js\n      name: string;\n    ```", "```js\n      unitPrice: number;\n    ```", "```js\n    }\n    ```", "```js\n    class Product {\n    ```", "```js\n      name?: string;\n    ```", "```js\n      unitPrice?: number;\n    ```", "```js\n    }\n    ```", "```js\n    class Product {\n    ```", "```js\n      name = \"\";\n    ```", "```js\n      unitPrice = 0;\n    ```", "```js\n    }\n    ```", "```js\n    class Product {\n    ```", "```js\n      name;\n    ```", "```js\n      unitPrice;\n    ```", "```js\n      constructor(name: string, unitPrice: number) {\n    ```", "```js\n        this.name = name;\n    ```", "```js\n        this.unitPrice = unitPrice;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    class Product {\n    ```", "```js\n      constructor(public name: string, public unitPrice:     number) {\n    ```", "```js\n        this.name = name;\n    ```", "```js\n        this.unitPrice = unitPrice;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    class Product {\n    ```", "```js\n      constructor(public name: string, public unitPrice:     number) {\n    ```", "```js\n        this.name = name;\n    ```", "```js\n        this.unitPrice = unitPrice;\n    ```", "```js\n      }\n    ```", "```js\n      getDiscountedPrice(discount: number): number {\n    ```", "```js\n        return this.unitPrice - discount;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    const table = new Product(\"Table\", 45);\n    ```", "```js\n    console.log(table.getDiscountedPrice(5));\n    ```", "```js\n    enum Level {\n    ```", "```js\n      Low,\n    ```", "```js\n      Medium,\n    ```", "```js\n      High\n    ```", "```js\n    }\n    ```", "```js\n    let level = Level.Low;\n    ```", "```js\n    console.log(level);\n    ```", "```js\n    level = Level.High\n    ```", "```js\n    console.log(level);\n    ```", "```js\n    enum Level {\n    ```", "```js\n      Low = 1,\n    ```", "```js\n      Medium = 2,\n    ```", "```js\n      High = 3\n    ```", "```js\n    }\n    ```", "```js\n    level = 10;\n    ```", "```js\n    enum Level {\n    ```", "```js\n      Low = \"L\",\n    ```", "```js\n      Medium = \"M\",\n    ```", "```js\n      High = \"H\"\n    ```", "```js\n    }\n    ```", "```js\n    let level = Level.Low;\n    ```", "```js\n    console.log(level);\n    ```", "```js\n    level = Level.High\n    ```", "```js\n    console.log(level);\n    ```", "```js\n    level = \"VH\";\n    ```", "```js\n    level = \"M\"\n    ```", "```js\ntype Level = \"H\" | \"M\" | \"L\";\n```", "```js\n    type RGB = \"red\" | \"green\" | \"blue\";\n    ```", "```js\n    let color: RGB = \"red\";\n    ```", "```js\n    color = \"yellow\";\n    ```", "```js\n    {\n    ```", "```js\n      \"name\": \"tsc-play\",\n    ```", "```js\n      \"dependencies\": {\n    ```", "```js\n        \"typescript\": \"^4.6.4\"\n    ```", "```js\n      },\n    ```", "```js\n      \"scripts\": {\n    ```", "```js\n        \"build\": \"tsc src/product.ts\"\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    npm install\n    ```", "```js\n    class Product {\n    ```", "```js\n      constructor(public name: string, public unitPrice:     number) {\n    ```", "```js\n        this.name = name;\n    ```", "```js\n        this.unitPrice = unitPrice;\n    ```", "```js\n      }\n    ```", "```js\n      getDiscountedPrice(discount: number): number {\n    ```", "```js\n        return this.unitPrice - discount;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    const table = new Product(\"Table\", 45);\n    ```", "```js\n    console.log(table.getDiscountedPrice(5));\n    ```", "```js\n    npm run build\n    ```", "```js\n    var Product = /** @class */ (function () {\n    ```", "```js\n      function Product(name, unitPrice) {\n    ```", "```js\n        this.name = name;\n    ```", "```js\n        this.unitPrice = unitPrice;\n    ```", "```js\n        this.name = name;\n    ```", "```js\n        this.unitPrice = unitPrice;\n    ```", "```js\n      }\n    ```", "```js\n      Product.prototype.getDiscountedPrice = function     (discount) {\n    ```", "```js\n        return this.unitPrice - discount;\n    ```", "```js\n      };\n    ```", "```js\n      return Product;\n    ```", "```js\n    })();\n    ```", "```js\n    var table = new Product(\"Table\", 45);\n    ```", "```js\n    console.log(table.getDiscountedPrice(5));\n    ```", "```js\n    {\n    ```", "```js\n      \"compilerOptions\": {\n    ```", "```js\n        \"outDir\": \"build\",\n    ```", "```js\n        \"target\": \"esnext\",\n    ```", "```js\n        \"module\": \"esnext\",\n    ```", "```js\n        \"lib\": [\"DOM\", \"esnext\"],\n    ```", "```js\n        \"strict\": true,\n    ```", "```js\n        \"jsx\": \"react\",\n    ```", "```js\n        \"moduleResolution\": \"node\",\n    ```", "```js\n        \"noEmitOnError\": true\n    ```", "```js\n      },\n    ```", "```js\n      \"include\": [\"src/**/*\"],\n    ```", "```js\n      \"exclude\": [\"node_modules\", \"build\"]\n    ```", "```js\n    }\n    ```", "```js\n    {\n    ```", "```js\n      ...,\n    ```", "```js\n      \"scripts\": {\n    ```", "```js\n        \"build\": \"tsc\"\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    npm run build\n    ```", "```js\n    class Product {\n    ```", "```js\n      constructor(public name: string, public unitPrice:     number) {\n    ```", "```js\n        this.name = name;\n    ```", "```js\n        this.price = unitPrice;\n    ```", "```js\n      }\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    npm run build\n    ```", "```js\n    let flag = false;\n    ```", "```js\n    function log(message: string) {\n    ```", "```js\n      return console.log(message);\n    ```", "```js\n    }\n    ```", "```js\n    type Point = {x: number; y: number; z?: number};\n    ```", "```js\n    const point: Point = { x: 24, y: 65 };\n    ```", "```js\n    type Product = {\n    ```", "```js\n      name: string;\n    ```", "```js\n      lastSale: Date;\n    ```", "```js\n    }\n    ```", "```js\n    const table: Product = {name: \"Table\", lastSale: null}\n    ```", "```js\n    type OneToThree = 1 | 2 | 3;\n    ```", "```js\n    type Product = {\n    ```", "```js\n      name: string;\n    ```", "```js\n      lastSale: Date | null;\n    ```", "```js\n    }\n    ```", "```js\n    const table: Product = {name: \"Table\", lastSale: null}\n    ```"]