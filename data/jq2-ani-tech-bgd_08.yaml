- en: Chapter 8. Other Popular Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。其他热门动画
- en: '*This chapter will follow a similar format to the previous one and will consist
    of a series of recipe-style examples that show the real-world implementations
    of animations in action. We won''t restrain ourselves—anything goes!*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*此章将遵循与上一章类似的格式，并由一系列示例式的示例组成，展示动画在实际操作中的实现。我们不会约束自己—一切皆有可能！*'
- en: 'We''ll look at the following examples in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中查看以下示例：
- en: Proximity animations, where the animation is a reaction to the proximity of
    the mouse pointer to a target element or area of the page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接近动画，其中动画是对鼠标指针接近目标元素或页面区域的反应
- en: An animated header element
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个动画的页眉元素
- en: A text-scrolling marquee widget
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本滚动的跑马灯组件
- en: Understanding Proximity animations
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解近性动画
- en: Proximity animations, which are usually driven by the position of the mouse
    pointer relative to an element or series of elements on the page, are an awesome
    effect. While not suitable on all sites and in all contexts, it can add real flair
    when used in certain situations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 常按近性动画，这通常由鼠标指针相对于页面上一个元素或一系列元素的位置驱动，是一种令人敬畏的效果。虽然并非适用于所有网站和所有环境，但在特定情况下使用时，它可以增加真正的魅力。
- en: The effect isn't often very accessible, and pretty much shuts the door on non-mouse
    users, but it can be implemented as an additional bonus (often called progressive
    enhancement) to visitors that are able to make use of it, while at the same time
    providing other, more accessible forms of interaction.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种效果通常并不非常实用，并且基本上关闭了非鼠标用户的大门，但它可以作为额外的奖励（通常称为渐进增强）实施给能够利用它的访客，同时提供其他更可访问的交互形式。
- en: In this example, we'll create an image scroller that is triggered when the mouse
    pointer enters its container. The speed with which the images will scroll will
    be determined by the distance of the mouse pointer from the center of the container.
    Moving the pointer will slow down or speed up the animation accordingly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将创建一个图像滚动器，当鼠标指针进入其容器时将触发。图像滚动的速度将由鼠标指针与容器中心的距离决定。移动指针将相应地减慢或加快动画速度。
- en: Time for action – creating and styling the page
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—创建和样式化页面
- en: In this part of the example we'll create the underlying page that the animation
    will run on, and add the styling.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例的这一部分中，我们将创建动画将在其上运行的基础页面，并添加样式。
- en: 'First, we''ll create the default page, and add the CSS for the example. Add
    the following elements to the `<body>` element of our template file:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建默认页面，并添加示例的CSS。将以下元素添加到模板文件的`<body>`元素中：
- en: '```js'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <div id="proximity">
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="proximity">
- en: <img src="img/proximity1.jpg" alt="CH-47 Chinook">
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity1.jpg" alt="CH-47 Chinook">
- en: <img src="img/proximity2.jpg" alt="Mi-24W">
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity2.jpg" alt="Mi-24W">
- en: <img src="img/proximity3.jpg" alt="Mil Mi-24A">
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity3.jpg" alt="Mil Mi-24A">
- en: <img src="img/proximity4.jpg" alt="AH-1J Cobra">
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity4.jpg" alt="AH-1J Cobra">
- en: <img src="img/proximity5.jpg" alt="Mi-24P">
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity5.jpg" alt="Mi-24P">
- en: <img src="img/proximity6.jpg" alt="AH-1Z Viper">
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity6.jpg" alt="AH-1Z Viper">
- en: <img src="img/proximity7.jpg" alt="AH-1W Cobra">
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity7.jpg" alt="AH-1W Cobra">
- en: <img src="img/proximity8.jpg" alt="UH-1Y Huey">
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity8.jpg" alt="UH-1Y Huey">
- en: <img src="img/proximity9.jpg" alt="AH-64 Apache">
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity9.jpg" alt="AH-64 Apache">
- en: <img src="img/proximity10.jpg" alt="AH-1W Super Cobra">
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity10.jpg" alt="AH-1W Super Cobra">
- en: <img src="img/proximity11.jpg" alt="MI-28 Havoc">
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity11.jpg" alt="MI-28 Havoc">
- en: <img src="img/proximity12.jpg" alt="AH-1W Super Cobra">
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity12.jpg" alt="AH-1W Super Cobra">
- en: <img src="img/proximity13.jpg" alt="AH-1W Cobra">
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity13.jpg" alt="AH-1W Cobra">
- en: <img src="img/proximity14.jpg" alt="Mi-24 HIND E">
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity14.jpg" alt="Mi-24 HIND E">
- en: <img src="img/proximity15.jpg" alt="AH-1W Super Cobra">
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity15.jpg" alt="AH-1W Super Cobra">
- en: <img src="img/proximity16.jpg" alt="UH-1N Huey">
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity16.jpg" alt="UH-1N Huey">
- en: <img src="img/proximity17.jpg" alt="AH-64D Apache">
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity17.jpg" alt="AH-64D Apache">
- en: <img src="img/proximity18.jpg" alt="UH-1N Huey">
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity18.jpg" alt="UH-1N Huey">
- en: <img src="img/proximity19.jpg" alt=" Lempira Bell 412">
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity19.jpg" alt=" Lempira Bell 412">
- en: <img src="img/proximity20.jpg" alt="UH-60L Blackhawk">
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <img src="img/proximity20.jpg" alt="UH-60L Blackhawk">
- en: </div>
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: '```'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Save this file as `proximity.html`. Next, we''ll add some CSS. In a new file,
    add the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件另存为`proximity.html`。接下来，我们将添加一些CSS。在新文件中，添加以下代码：
- en: '```js'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: /* base classes (scripting disabled) */
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /* 基础类（已禁用脚本） */
- en: '#proximity {'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#proximity {'
- en: width:960px;
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:960px;
- en: margin:auto;
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:auto;
- en: 'border:1px solid #000;'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'border:1px solid #000;'
- en: -moz-border-radius:8px;
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: -moz-border-radius:8px;
- en: -webkit-border-radius:8px;
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: -webkit-border-radius:8px;
- en: border-radius:8px;
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: border-radius:8px;
- en: '}'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#proximity img { border:1px solid #000; }'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#proximity img { border:1px solid #000; }'
- en: /* scripting enabled classes */
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: /* scripting enabled classes */
- en: '#proximity.slider {'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#proximity.slider {'
- en: width:550px;
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:550px;
- en: height:250px;
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:250px;
- en: position:relative;
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:relative;
- en: overflow:hidden;
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: overflow:hidden;
- en: '}'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '.slider #scroller {'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '.slider #scroller {'
- en: position:absolute;
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: left:0;
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: left:0;
- en: top:0;
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: top:0;
- en: '}'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '.slider #scroller img {'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '.slider #scroller img:'
- en: display:block;
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: width:150px;
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:150px;
- en: height:150px;
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:150px;
- en: margin:50px 0 0 50px;
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:50px 0 0 50px;
- en: float:left;
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:left;
- en: color:#fff;
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: color:#fff;
- en: background-color:#000;
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background-color:#000;
- en: '}'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '.slider #scroller img:first-child { margin-left:0; }'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '.slider #scroller img:first-child { margin-left:0; }'
- en: '#message {'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#message {'
- en: width:100%;
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:100%;
- en: height:30px;
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:30px;
- en: padding-top:10px;
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: padding-top:10px;
- en: margin:0;
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:0;
- en: -moz-border-radius:0 0 8px 8px;
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: -moz-border-radius:0 0 8px 8px;
- en: -webkit-border-bottom-radius:8px;
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: -webkit-border-bottom-radius:8px;
- en: -webkit-border-bottom-right-radius:8px;
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: -webkit-border-bottom-right-radius:8px;
- en: border-radius:0 0 8px 8px;
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: border-radius:0 0 8px 8px;
- en: position:absolute;
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: bottom:0;
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bottom:0;
- en: left:0;
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: left:0;
- en: background-color:#000;
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background-color:#000;
- en: color:#fff;
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: color:#fff;
- en: text-align:center;
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: text-align:center;
- en: font:18px "Nimbus Sans L", "Helvetica Neue",
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: font:18px "Nimbus Sans L", "Helvetica Neue",
- en: '"Franklin Gothic Medium", Sans-serif;'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"Franklin Gothic Medium", Sans-serif;'
- en: '}'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this in the `css` folder as `proximity.css` and don't forget to link to
    it from the `<head>` of the HTML page.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存在`css`文件夹中，命名为`proximity.css`，并不要忘记从HTML页面的`<head>`中链接到它。
- en: '*What just happened?*'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Keeping the HTML as simple and as light as possible, we simply add the images
    that we want to show to a container element. Any extra elements that we need can
    be added dynamically in the nature of progressive enhancement.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 保持HTML尽可能简单和轻便，我们只需将要显示的图像添加到一个容器元素中。我们需要的任何额外元素都可以以渐进增强的方式动态添加。
- en: There are two sections in the CSS file. The first section is a collection of
    base styles which are used if the page is loaded by a visitor that has JavaScript
    disabled. This ensures that all of the images are visible and therefore accessible—none
    of them are hidden or otherwise obscured.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: CSS文件中有两个部分。第一部分是基本样式的集合，如果页面由禁用JavaScript的访问者加载，则使用这些样式。这确保所有图像都是可见的，因此可访问
    - 没有隐藏或其他遮挡。
- en: The second section changes the appearance of the container element and adds
    styling to elements or classes that are added dynamically, transforming the appearance
    of the slider, provided JavaScript is enabled.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分改变了容器元素的外观，并为动态添加的元素或类添加了样式，以改变滑块的外观，前提是启用了 JavaScript。
- en: We set the `height` and `width` of the container so that only three images are
    visible at any one time, and set its `overflow` style property to `hidden` so
    that all of the other images are hidden, ready to be scrolled into view.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置容器的`height`和`width`，以便任何时候只有三个图像可见，并将其`overflow`样式属性设置为`hidden`，以便所有其他图像都被隐藏，准备滚动到视图中。
- en: We also add positioning for an element with an `id` of `scroller`. This element
    doesn't yet exist and will be added by the script, which we'll look at shortly.
    This element will also need a `width`, but we can assign this dynamically based
    on the number of images in the container.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为具有`id`为`scroller`的元素添加了定位。此元素尚不存在，将由稍后查看的脚本添加。此元素还需要一个`width`，但我们可以根据容器中的图像数量动态分配。
- en: We also change the styling of the images themselves, setting them to block-level
    elements and floating them to the left so that they stack up horizontally in a
    long line, without wrapping onto two lines as this would destroy the functionality
    of the scroller. It is the combination of floating the images and setting the
    `width` of the container to accommodate them all, that allows them to stack up
    as horizontally as required. We'll add a message that tells the visitor how to
    use the scroller so we also include some styling for this, as well.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还改变了图像本身的样式，将它们设置为块级元素，并将它们向左浮动，以便它们在一行中水平堆叠，而不会换行到两行，因为这样会破坏滚动条的功能。浮动图像并设置容器的`width`，允许它们按水平方向堆叠。我们将添加一个告诉访客如何使用滚动条的消息，因此我们还包括了一些用于此目的的样式。
- en: 'The following screenshot shows how the page will appear with scripting disabled:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了页面在禁用脚本时的外观：
- en: '![What just happened?](img/9642_08_01.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![刚才发生了什么？](img/9642_08_01.jpg)'
- en: In the previous image we can see that the images are all visible. It's not pretty,
    but it's highly accessible and doesn't hide the content when scripting is disabled
    on the client.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图像中，我们可以看到所有图像都是可见的。这不太好看，但非常易于访问，并且在客户端禁用脚本时不会隐藏内容。
- en: Time for action – preparing the page for sliding functionality
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动-为滑动功能准备页面
- en: 'When scripting is enabled, we can enhance the page to add the additional elements
    that the proximity slider requires. Add the following code to the empty function
    at the bottom of the HTML page:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本启用时，我们可以增强页面以添加近距离滑块所需的附加元素。将以下代码添加到HTML页面底部的空函数中：
- en: '```js'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: var prox = $("#proximity"),
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: var prox = $("#proximity"),
- en: scroller = $("<div></div>", {
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: scroller = $("<div></div>", {
- en: 'id: "scroller"'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: "scroller"'
- en: '}),'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '}),'
- en: pointerText = "Use your pointer to scroll, moving to "+
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: pointerText = "使用指针滚动，移动到"+
- en: '"the edge scrolls faster!",'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"边缘滚动更快！",'
- en: keyboardMessage = "Use your arrow keys to scroll the images!",
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: keyboardMessage = "使用箭头键滚动图像！",
- en: message = $("<p></p>", {
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: message = $("<p></p>", {
- en: 'id: "message",'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: "message",'
- en: 'text: keyboardMessage'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'text: keyboardMessage'
- en: '});'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: prox.addClass("slider").wrapInner(scroller).append(message);
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: prox.addClass("slider").wrapInner(scroller).append(message);
- en: var middle = prox.width() / 2;
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: var middle = prox.width() / 2;
- en: scroller = $("#scroller");
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: scroller = $("#scroller");
- en: scroller.width(function() {
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: scroller.width(function() {
- en: var total = 0;
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: var total = 0;
- en: scroller.children().each(function(i, val) {
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: scroller.children().each(function(i, val) {
- en: var el = $(this);
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var el = $(this);
- en: total = total + (el.outerWidth() + parseInt(el.css("marginLeft")));
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: total = total + (el.outerWidth() + parseInt(el.css("marginLeft")));
- en: '});'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: return total;
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: return total;
- en: '}).css("left", "-" + (scroller.width() / 2 - middle) + "px");'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '}).css("left", "-" + (scroller.width() / 2 - middle) + "px");'
- en: '```'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: First, we cache the selector for the proximity container, which we'll use a
    couple of times in this chunk of code, and a couple of times a little later on
    in the script. Next, we create a new `<div>` element and give it an `id` attribute
    so that we can easily select it again when necessary. We also use this `id` for
    styling purposes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们缓存了近距离容器的选择器，在这段代码中我们会使用几次，在脚本稍后的地方还会使用几次。接下来，我们创建一个新的 `<div>` 元素，并给它一个
    `id` 属性，这样我们在需要时可以轻松地再次选择它。我们还使用这个 `id` 进行样式处理。
- en: Next, we store a couple of text strings in variables for convenience. These
    will be used as messages to display to the visitor at different points. We also
    create a new paragraph element as a container for the message text, give the element
    an ID (again for selecting purposes), and use the jQuery `text()` method to set
    its `innerText` to one of the text strings. We then use the property `text` on
    the object passed as the second argument to the element creation jQuery method
    format, which automatically maps to the `text()` method.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为了方便起见，将一些文本字符串存储在变量中。这些将用作在不同点显示给访问者的消息。我们还创建一个新的段落元素作为消息文本的容器，为元素设置一个ID（再次是为了选择的目的），并使用jQuery的`text()`方法设置其`innerText`为其中一个文本字符串。然后，我们在传递给元素创建jQuery方法格式的第二个参数的对象上使用`text`属性，它会自动映射到`text()`方法。
- en: Next, we add a class name to the outer proximity container. Remember, this class
    name is used to differentiate between scripting being disabled and enabled so
    that we can add the required styling. We also wrap the contents of the proximity
    container (the 20 `<img>` tags) in our newly created scroller element, and append
    the message to the proximity container.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们向外部近距离容器添加一个类名。请记住，这个类名用于区分脚本启用和禁用，以便我们可以添加所需的样式。我们还将近距离容器的内容（20 个 `<img>`
    标签）包装在我们新创建的滚动条元素中，并将消息附加到近距离容器。
- en: Next, we set a variable which is equal to the `width` of the proximity container
    divided by two. This gives us the horizontal middle of the element, which we'll
    need to use in some calculations to position the scroller element, and work out
    where the mouse pointer is relative to the proximity container.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置一个变量，它等于近距离容器的 `width` 除以二。这给了我们元素的水平中心，这将是我们需要在一些计算中使用的，以定位滚动条元素，并计算鼠标指针相对于近距离容器的位置。
- en: We could just as easily have set the number that the `middle` variable needs
    to contain, instead of calculating it in this way. The `width` of the proximity
    container (with scripting enabled) is set in our CSS file and is highly arbitrary
    to this particular example. If we changed its `width` however, the script would
    break if we set the figure directly in the variable instead of working it out
    programmatically. It is always best to avoid hardcoding 'magic' numbers into scripts
    whenever possible.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地设置`middle`变量需要包含的数字，而不是以这种方式计算它。接近容器的`width`（启用脚本）在我们的CSS文件中设置，并且与此特定示例高度任意。但是，如果我们直接在变量中设置数字而不是通过程序计算它，那么如果更改了其`width`，脚本将中断。尽量避免将“魔术”数字硬编码到脚本中是最好的。
- en: At this point we also need to cache a reference to the scroller element now
    that it has been appended to the page. We can't use the contents of the `scroller`
    variable that we created at the start of the script, so we overwrite it with a
    fresh reference to the element by selecting it from the page again.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们还需要缓存对滚动条元素的引用，因为它已附加到页面上。我们不能使用我们在脚本开始时创建的`scroller`变量的内容，因此我们通过再次从页面中选择该元素来用新引用覆盖它。
- en: We now need to set the `width` of the `scroller` element so that it is wide
    enough to accommodate all of the images in a single row. To do this we pass a
    function to jQuery's `width()` method, which returns the `width` to be set.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要设置`scroller`元素的`width`，以便它足够宽以容纳单行中的所有图像。为此，我们将一个函数传递给jQuery的`width()`方法，该函数返回要设置的`width`。
- en: The function calculates this figure by iterating over each image and adding
    both its `width` and horizontal `margin` to the `total` variable. This means that
    an indeterminate number of images can be used without changing the script, and
    images with different widths and spacing can be used.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数通过迭代每个图像并将其`width`和水平`margin`相加到`total`变量中来计算此数字。这意味着可以使用不确定数量的图像而无需更改脚本，并且可以使用具有不同宽度和间距的图像。
- en: Once we've set the `width` of the `scroller` element, we then need to position
    it so that the center of the scroller is at the center of the proximity container.
    This is so that when the page loads, the visitor can move it to the left or right,
    depending on where they move their pointer or which arrow key is pressed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了`scroller`元素的`width`后，我们需要将其定位，以使滚动条的中心位于接近容器的中心。这样，当页面加载时，访问者可以将其向左或向右移动，这取决于他们移动鼠标指针的位置或按下哪个箭头键。
- en: If we load the page in a browser at this point, we should find that the appearance
    of the elements on the page has changed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时在浏览器中加载页面，我们应该发现页面上元素的外观已更改。
- en: '![What just happened?](img/9642_08_02.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/9642_08_02.jpg)'
- en: In the previous screenshot, we can see that the proximity container is resized
    and the `scroller` element is centered within it. We can also see the default
    message at the bottom of the proximity container.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个屏幕截图中，我们可以看到接近容器已调整大小，并且`scroller`元素居中于其中。我们还可以看到接近容器底部的默认消息。
- en: Time for action – animating the scroller
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 动画滚动条
- en: 'The next section of code deals with actually animating the `scroller` element
    based on where the mouse pointer is relative to the outer proximity container.
    Add the following code below the `}).css("left", "-" + (scroller.width()` line:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一部分涉及基于鼠标指针相对于外部接近容器的位置实际动画化`scroller`元素。在`}).css("left", "-" + (scroller.width()`行下面添加以下代码：
- en: '```js'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: function goAnim(e) {
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: function goAnim(e) {
- en: var offset = prox.offset(),
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: var offset = prox.offset(),
- en: resetOffset = e.pageX - offset.left - middle,
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: resetOffset = e.pageX - offset.left - middle,
- en: 'normalizedDuration = (resetOffset > 0) ? resetOffset :  -resetOffset,'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'normalizedDuration = (resetOffset > 0) ? resetOffset :  -resetOffset,'
- en: duration = (middle - normalizedDuration) * 50;
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: duration = (middle - normalizedDuration) * 50;
- en: scroller.stop().animate({
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scroller.stop().animate({
- en: 'left: (resetOffset < 0) ? 0 : "-" + (parseInt(scroller.width()) - parseInt(prox.width()))'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: (resetOffset < 0) ? 0 : "-" + (parseInt(scroller.width()) - parseInt(prox.width()))'
- en: '}, duration, "linear");'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, duration, "linear");'
- en: '}'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: Within the `goAnim()` function, we first get the `offset` value of the proximity
    container so that we know its position relative to the document. We then work
    out where the mouse pointer is relative to the middle of the proximity container.
    This means that numerically, the pointer offset will be `0` when it is in the
    center.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `goAnim()` 函数内部，我们首先获取接近容器的 `offset` 值，以便了解其相对于文档的位置。然后我们计算鼠标指针相对于接近容器中心的位置。这意味着在数值上，当鼠标指针位于中心时，指针偏移量将为
    `0`。
- en: If the mouse pointer is in the left half of the proximity container, the number
    in the `resetOffset` variable will be negative. This would cause our calculations
    later in the function to be incorrect, so we need to check whether the `resetOffset`
    variable is greater than `0`, and if it isn't, we invert the number using its
    minus value.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果鼠标指针位于接近容器的左半部分，`resetOffset` 变量中的数字将为负数。这将导致我们在函数后面的计算出现错误，因此我们需要检查 `resetOffset`
    变量是否大于 `0`，如果不是，我们使用其负值来取反。
- en: Ultimately, what we want to happen is for the speed of the scroller to increase
    as the pointer moves towards either end of the proximity container, and slow down
    as it moves into the center. In other words, the speed of the animation needs
    to be inversely proportionate to the distance of the pointer from the middle of
    the proximity container.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们希望随着指针移向接近容器的任一端，滚动条的速度增加，并且当指针移向中心时减速。换句话说，动画的速度需要与指针距离接近容器中心的距离成反比。
- en: The problem that we have at this point is that the figure representing the distance
    of the pointer from the middle of the proximity container gets larger as it moves
    towards the edge, so the animation would slow down instead of speeding up if we
    were to use this figure as the duration of the animation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此时我们遇到的问题是，表示指针距离接近容器中心的数字随着指针移向边缘而增大，因此如果将此数字用作动画的持续时间，动画将减速而不是加速。
- en: To invert the value stored in the `normalizedDuration` variable, we subtract
    it from the value representing the middle of the proximity container, and then
    multiply the resulting figure by `50`. The duration argument is in milliseconds,
    so if we don't use a multiplier (`50` was arrived at by trial and error) to increase
    our value, the animations will occur too quickly.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了取反存储在 `normalizedDuration` 变量中的值，我们将其从表示接近容器中心的值中减去，然后将得到的数字乘以 `50`。持续时间参数以毫秒为单位，因此如果我们不使用乘数（`50`
    是通过反复试验得出的），动画将发生得太快。
- en: We can now initiate the animation. We use the JavaScript ternary statement to
    test whether the `resetOffset` figure is less than `0`, and if it is, we know
    that to get the scroller to slide to the right we just need to set the `left`
    style property of the scroller element to `0`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动动画了。我们使用 JavaScript 三元运算符来测试 `resetOffset` 数字是否小于 `0`，如果是的话，我们知道要让滚动条向右滑动，只需将滚动条元素的
    `left` 样式属性设置为 `0`。
- en: If the variable is greater than `0`, we have to move the scroller element negatively
    (to the left) in order to show the images hidden at the right. To align the right
    edge of the scroller `<div>` element to the right edge of the proximity container,
    we set the end point of the animation to the `width` of the scroller `<div>` element,
    minus the `width` of the proximity container.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量大于 `0`，我们必须将滚动条元素向负方向移动（向左）以显示右侧隐藏的图像。为了使滚动条 `<div>` 元素的右边缘与接近容器的右边缘对齐，我们将动画的终点设置为滚动条
    `<div>` 元素的 `width` 减去接近容器的 `width`。
- en: Time for action – adding the mouse events
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 添加鼠标事件
- en: 'Now, we need to add the mouse events that will trigger the animations. The
    following code will be added below these two lines that we previously added:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加触发动画的鼠标事件。以下代码将添加在我们之前添加的两行代码下面：
- en: '```js'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: '}, duration, "linear");'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '}, duration, "linear");'
- en: '}'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Below the preceding lines, add the following lines of code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码的下面添加以下代码行：
- en: '```js'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: prox.mouseenter(function(e) {
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: prox.mouseenter(function(e) {
- en: message.text(pointerText).delay(1000).fadeOut("slow");
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: message.text(pointerText).delay(1000).fadeOut("slow");
- en: goAnim(e);
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: goAnim(e);
- en: prox.mousemove(function(ev) {
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: prox.mousemove(function(ev) {
- en: goAnim(ev);
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: goAnim(ev);
- en: '});'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: prox.mouseleave(function() {
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: prox.mouseleave(function() {
- en: scroller.stop();
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: scroller.stop();
- en: prox.unbind("mousemove");
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: prox.unbind("mousemove");
- en: '});'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: First, we set a `mouseeenter` event handler so that we can detect when the pointer
    initially enters the proximity container. When this occurs we change the message
    text so that it shows what to do with the mouse pointer and then fades out the
    message slowly after a delay of one second.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们设置一个 `mouseeenter` 事件处理程序，以便我们可以检测指针最初进入接近容器的时候。当这种情况发生时，我们更改消息文本，以便显示指针该如何操作，然后在一秒的延迟后缓慢淡出消息。
- en: We then call our `goAnim()` function to start the animation. At this point,
    we set a `mousemove` event so that we can increase or decrease the speed of the
    animation as the pointer moves within the proximity container. Each time the pointer
    moves, we call the `goAnim()` function once more. Each time this function is called
    we pass in the event object.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后调用我们的 `goAnim()` 函数来开始动画。此时，我们设置了一个 `mousemove` 事件，以便在接近容器内移动指针时增加或减少动画的速度。每次指针移动时，我们再次调用
    `goAnim()` 函数。每次调用此函数时，我们都会传入事件对象。
- en: We also set a `mouseleave` event handler on the proximity container so that
    we can detect when the pointer leaves this element altogether. When this occurs
    we stop the currently running animation and unbind the `mousemove` event handler.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在接近容器上设置了一个 `mouseleave` 事件处理程序，以便我们可以检测指针何时完全离开此元素。当发生这种情况时，我们会停止当前正在运行的动画并解绑
    `mousemove` 事件处理程序。
- en: At this point we should have a fully working proximity slider. Earlier, we discussed
    how the proximity effect is only useful to mouse users, so let's add a keyboard
    event handler to our script that will let keyboard users navigate the scroller
    as well.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该有一个完全可用的接近滑块。稍早，我们讨论了接近效果仅对鼠标用户有用，因此让我们向脚本中添加一个键盘事件处理程序，以便键盘用户也可以导航滚动条。
- en: Time for action – adding keyboard events
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 添加键盘事件
- en: Now, we'll be enabling keyboard-driven animations. We'll specifically be adding
    triggers for the left and right arrow keys on the keyboard.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将启用键盘驱动的动画。我们将专门为键盘上的左右箭头键添加触发器。
- en: 'Add the following code below the `prox.mouseleave` function that we just added
    in the preceding section:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚在前一节中添加的 `prox.mouseleave` 函数下方添加以下代码：
- en: '```js'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '```js'
- en: $(document).keydown(function(e) {
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: $(document).keydown(function(e) {
- en: //37 = left arrow | 39 = right arrow
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: //37 = 左箭头 | 39 = 右箭头
- en: if (e.keyCode === 37 || e.keyCode === 39) {
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: if (e.keyCode === 37 || e.keyCode === 39) {
- en: message.fadeOut("slow");
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: message.fadeOut("slow");
- en: if (!scroller.is(":animated")) {
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (!scroller.is(":animated")) {
- en: scroller.stop().animate({
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scroller.stop().animate({
- en: 'left: (e.keyCode === 37) ? 0 : -(scroller.width() - prox.width())'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'left: (e.keyCode === 37) ? 0 : -(scroller.width() - prox.width())'
- en: '}, 6000, "linear");'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, 6000, "linear");'
- en: '}'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}).keyup(function() {'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '}).keyup(function() {'
- en: scroller.stop();
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: scroller.stop();
- en: '});'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '*What just happened?*'
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么?*'
- en: We attach the `keydown` event handler to the `document` object so that the visitor
    doesn't have to focus the proximity container somehow. Within the anonymous function,
    we first check whether the left or right arrow keys were pressed.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `keydown` 事件处理程序附加到 `document` 对象上，以便访问者不必以某种方式聚焦接近容器。在匿名函数内部，我们首先检查左箭头键或右箭头键是否被按下。
- en: The key code `37` refers to the left arrow key and the code `39` refers to the
    right arrow key. The `keyCode` property, normalized by jQuery so that it is accessible
    to all browsers, will contain the code for whichever key was pressed, but we only
    want to react to either of the specified keys being pressed.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 按键码 `37` 指的是左箭头键，而代码 `39` 指的是右箭头键。jQuery 规范化了 `keyCode` 属性，以便所有浏览器都可以访问，该属性将包含按下的任何键的代码，但我们只想对按下的这两个键中的任何一个做出反应。
- en: When either of these keys is pressed, we first fade out the message and then
    check that the scroller is not already being animated using jQuery's `is()` method
    in conjunction with the `:animated` filter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下这两个键中的任何一个时，我们首先淡出消息，然后检查滚动条是否已经在使用 jQuery 的 `is()` 方法与 `:animated` 过滤器结合使用。
- en: As long as the `scroller` element is not already being animated (denoted by
    the `!` symbol at the start of the condition), we then animate it. We check the
    `keyCode` property once again with a JavaScript ternary conditional so that we
    can move the scroller in the correct direction, depending on which key is pressed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 只要 `scroller` 元素尚未被动画化（在条件开始处使用 `!` 符号表示），我们就会对其进行动画处理。我们再次使用 JavaScript 三元条件来检查
    `keyCode` 属性，以便根据按下的键移动滚动条的方向。
- en: Finally, we add a `keyup` event handler that stops the scroller animation once
    the key is released. This improves the interactivity of animation, as it allows
    the visitor to intuitively stop the scroller whenever they wish.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了一个`keyup`事件处理程序，一旦释放键就停止滚动动画。这提高了动画的互动性，因为它允许访问者在希望时直观地停止滚动器。
- en: Have a go hero – extending proximity animations
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄 – 扩展接近动画
- en: The obvious way to extend our example would be to trigger animations on the
    vertical axis as well. We could have a grid of images instead of a single row
    and animate the grid up and down as well as left and right.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展我们示例的明显方法是在垂直轴上触发动画。我们可以有一个图像网格而不是单行，并且还可以向上和向下以及向左和向右移动网格。
- en: One thing to do to extend the example would be to add additional keyboard functionality.
    Check for additional keys, such as the home and end keys, for example, which could
    navigate to the start or end of the `scroller` element accordingly.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展示例的一件事情是添加额外的键盘功能。例如，检查额外的键，如home和end键，这些键可以相应地导航到`scroller`元素的开头或结尾。
- en: Pop quiz – implementing proximity animations
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验 – 实施接近动画
- en: Q1\. We provided additional functionality by adding keyboard navigability in
    the previous example; why?
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 我们在上一个示例中通过添加键盘可导航性提供了额外的功能;为什么？
- en: For fun
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了好玩
- en: To look good
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了看起来好
- en: To provide an alternate way for the content to be explored by users that aren't
    using a mouse
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提供另一种内容被非使用鼠标的用户探索的方式
- en: Keyboard events must be bound whenever mouse events are used
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用鼠标事件时，必须绑定键盘事件
- en: Q2\. Why should we avoid hardcoding 'magic' numbers into our scripts?
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 为什么我们应该避免在脚本中硬编码'魔法'数字？
- en: To make our code more readable
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的代码更易读
- en: So that our scripts are less reliant on the content that they act upon
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样我们的脚本就不那么依赖于它们所操作的内容了
- en: Hardcoded integers take longer to process
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写硬编码的整数需要更长时间来处理
- en: Because jQuery prefers working with strings
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为jQuery更喜欢使用字符串
- en: Animating page headers
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画页面标题
- en: Another quite fashionable technique is to have an animation that runs in the
    header of the page when the home page loads. Sometimes the animations run continually
    on every page of the site; others run once on the home page only.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种非常时尚的技术是在主页加载时在页面的页眉中运行动画。有时动画在站点的每一页上持续运行；在主页上只运行一次。
- en: This technique is an easy and effective way to make your site stand out, and
    they needn't be complex or heavily apparent animations; a short, subtle animation
    can be enough to add the WOW! factor.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术是使您的网站脱颖而出的一种简单有效的方式，它们不需要复杂或非常明显的动画；一个简短、微妙的动画就足以增加惊叹号！的因素。
- en: Earlier in the book, we looked at using **cssHooks** in conjunction with a pre-written
    file that makes use of cssHooks, which extends jQuery's `css()` method to allow
    an element's `background-position` style property to be animated. In this example,
    we'll look at how we can do this manually without the use of the plugin.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的前面部分中，我们研究了在与一个预先编写的文件一起使用**cssHooks**的情况，该文件利用了cssHooks，它扩展了jQuery的`css()`方法，以允许对元素的`background-position`样式属性进行动画处理。在这个例子中，我们将看看如何在不使用插件的情况下手动实现这一点。
- en: Well-written plugins can be an effective and easy solution, but there are times
    when a plugin adds much more functionality than we actually need, and therefore
    increases a page's script overhead. It's not often that reinventing the wheel
    is necessary or advised, but there can be times when it's beneficial to write
    a custom script that does only what we require.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 设计良好的插件可以是一种有效且简便的解决方案，但有时插件添加的功能远远超出我们实际需要的范围，因此会增加页面的脚本开销。重复造轮子并不经常是必要或明智的，但有时编写一个只做我们需要的事情的自定义脚本是有益的。
- en: Time for action – creating an animated header
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 创建一个动画页眉
- en: 'The underlying page for this example will be relatively straightforward, with
    just a `<header>` element whose `background-position` we''ll animate manually:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的基础页面将相对简单，只有一个放置在`<body>`标签中的空的`<header>`元素，我们将手动对其`background-position`进行动画处理：
- en: 'The header of the example page will consist of just an empty `<header>` element
    placed inside the `<body>` tag:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 示例页面的页眉将只包括一个空的`<header>`元素，放置在`<body>`标签内部：
- en: '```js'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <header>
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <header>
- en: </header>
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </header>
- en: '```'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'Save this as `animated-header.html`. The CSS is even simpler, with just a single
    selector and a few rules:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此保存为`animated-header.html`。CSS更简单，只有一个选择器和几条规则：
- en: '```js'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: header {
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: header {
- en: display:block;
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: width:960px;
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:960px;
- en: height:200px;
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:200px;
- en: margin:auto;
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:auto;
- en: background:url(../img/header.jpg) repeat 0 0;
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background:url(../img/header.jpg) repeat 0 0;
- en: '}'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this as `animated-header.css`. We'll need to link to the file from the
    `<head>` of the page we just created.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此保存为 `animated-header.css`。我们需要从我们刚创建的页面的 `<head>` 链接到该文件。
- en: 'The script itself is also surprisingly simple. Add the following code to the
    function at the end of the `<body>` element:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本本身也非常简单。将以下代码添加到 `<body>` 元素末尾的函数中：
- en: '```js'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: var header = $("header");
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var header = $("header");
- en: header.css("backgroundPosition", "0 0");
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: header.css("backgroundPosition", "0 0");
- en: var bgscroll = function() {
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var bgscroll = function() {
- en: var current = parseInt(header.css(
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var current = parseInt(header.css(
- en: '"backgroundPosition").split(" ")[1]),'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"backgroundPosition").split(" ")[1]),'
- en: newBgPos = "0 " + (current - 1) + "px";
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: newBgPos = "0 " + (current - 1) + "px";
- en: header.css("backgroundPosition", newBgPos);
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: header.css("backgroundPosition", newBgPos);
- en: '};'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '};'
- en: setInterval(function() { bgscroll() }, 75);
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: setInterval(function() { bgscroll() }, 75);
- en: '```'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: When we run the file in a browser, we should find that the background image
    used for the `<header>` slowly scrolls.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在浏览器中运行该文件时，应该会发现用于 `<header>` 的背景图片会缓慢滚动。
- en: '*What just happened?*'
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: In the script we cache the `header` selector outside of our main function for
    efficiency, so that we aren't creating a new jQuery object every time the function
    is executed. Even though the `<header>` element is cached in a variable outside
    of the function, the variable is still accessible by the function.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们在主函数之外缓存 `header` 选择器以提高效率，这样我们不会在每次函数执行时都创建新的 jQuery 对象。虽然 `<header>`
    元素在函数之外以变量形式缓存，但变量仍然可以被函数访问。
- en: Within the function we first get the current vertical `background-position`
    of the `header` element, extracting just the part of the returned string we require
    using the JavaScript `split()` function. We also use `parseInt` to convert the
    string into an integer.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数中，我们首先获取 `header` 元素当前的垂直 `background-position`，使用 JavaScript 的 `split()`
    函数提取我们需要的字符串部分。我们还使用 `parseInt` 将字符串转换为整数。
- en: We then decrement the integer by one. This means that the background image will
    scroll up. This is not important. There's no reason why the image couldn't scroll
    down, I, personally, just happen to prefer motion in the upward direction for
    some reason. Finally, we set the new `background-position` using jQuery's `css()`
    method.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接着我们递减整数一次。这意味着背景图片会向上滚动。这并不重要。当然，图片也可以向下滚动，我个人只是偏好向上移动的动作。最后，我们使用 jQuery 的
    `css()` 方法设置新的 `background-position`。
- en: After the function definition, we use the JavaScript `setInterval()` method
    to repeatedly call the function every 75 milliseconds. This is relatively quick,
    but is quite smooth—much higher than this and the animation begins to get a bit
    jerky. There's no reason, however, that different background images might not
    need to run as quickly.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数定义之后，我们使用 JavaScript 的 `setInterval()` 方法每 75 毫秒调用一次函数。这相对来说很快，但非常顺滑，如果速度更快，动画会开始有点卡顿。然而，不同的背景图片可能不需要以如此快的速度运行。
- en: Have a go hero – extending the animated header
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄 - 扩展动态页眉
- en: As the example is so small, there is a lot that could be done to build on it.
    Depending on the background image in use, it could be extended to move along the
    horizontal axis instead, or even both, perhaps moving diagonally in a north-westerly
    direction.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 由于示例太简单，可以进行许多延伸。根据所使用的背景图片，可以扩展为沿水平轴移动，甚至可能同时移动，也许朝西北方向对角线移动。
- en: Animating text using the marquee effect
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 marquee 效果实现文本动画
- en: The use of the `<marquee>` element died out many years ago, but a similar effect,
    created with JavaScript, is resurfacing in recent years thanks to its use on high-profile
    sites, such as the tickers for headlines on news sites, and the animated trending
    topics on the old Twitter home page.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`<marquee>` 元素的使用在许多年前就已经消失了，但是最近几年，由于在知名网站上的应用，如新闻网站标题的滚动字幕和旧版 Twitter 首页上的动态热门话题，使用
    JavaScript 创建的类似效果重新出现。'
- en: This is an effective and attractive way to present potentially relevant content
    to the visitor without taking up too much content space. It won't suit all sites,
    of course, but used sparingly, and in as non-intrusive a way as possible, it can
    be a great effect.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种有效和吸引人的方式，可以向访问者呈现潜在相关的内容，而不会占用太多内容空间。当然，并不适用于所有网站，但适度使用，并尽可能不引人注意，可以产生很好的效果。
- en: Time for action – creating and styling the underlying page
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 创建和设计基础页面
- en: In this example, we can see how easy it is to grab a series of text strings
    and display them in a smoothly scrolling marquee style. We'll use jQuery's built-in
    AJAX capabilities to grab a JSON file out of the latest posts on my blog. Let's
    get started.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们可以看到多么容易地抓取一系列文本字符串并以平滑滚动的走马灯样式显示它们。我们将使用 jQuery 内置的 AJAX 功能从我的博客的最新帖子中抓取一个
    JSON 文件。让我们开始吧。
- en: 'Add the following markup to the `<body>` element of the template file:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板文件的 `<body>` 元素中添加以下标记：
- en: '```js'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: <div id="outer">
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div id="outer">
- en: <header>
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <header>
- en: <hgroup>
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <h1>Site Title</h1>
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h1>网站标题</h1>
- en: <h2>Site Description</h2>
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h2>网站描述</h2>
- en: </hgroup>
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </hgroup>
- en: <nav>Main site navigation along here</nav>
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <nav>主站导航在这里</nav>
- en: </header>
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </header>
- en: <article>
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <article>
- en: <h1>A Blog Post Title</h1>
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h1>一篇博客文章标题</h1>
- en: <p>The post copy</p>
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>帖子内容</p>
- en: </article>
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </article>
- en: <aside>
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <aside>
- en: <div>
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Ads</h2>
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h2>广告</h2>
- en: <p>Probably a bunch of ads here that take up a reasonable section of this aside
    vertically</p>
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>可能有一堆广告在这里，占用旁白的合理部分垂直空间</p>
- en: </div>
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <div>
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Popular Posts</h2>
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h2>热门文章</h2>
- en: <p>Some links here to other posts, which may or may not be related to the current
    post, but are deemed popular based on the number of comments</p>
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>这里有一些链接到其他帖子的链接，这些帖子可能与当前帖子相关，也可能不相关，但基于评论数量，它们被认为是热门的</p>
- en: </div>
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <div>
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Related Posts</h2>
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h2>相关帖子</h2>
- en: <p>Some links here to other posts that are definitely related to this post,
    based on post tags</p>
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>这里有一些链接到其他帖子的链接，这些链接与当前帖子肯定相关，基于帖子标签</p>
- en: </div>
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <div>
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div>
- en: <h2>Twitter Feed</h2>
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h2>Twitter 动态流</h2>
- en: <p>Maybe a twitter feed here that displays recent tweetsor something. Aside
    could be quite long by now</p>
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p>也许这里有一个显示最近推文或其他内容的 Twitter 动态流。现在旁白可能已经相当长了。</p>
- en: </div>
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </aside>
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </aside>
- en: </div>
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: '```'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save the new page as `marquee.html`.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新页面保存为 `marquee.html`。
- en: 'We can also add some basic CSS at this point to layout the example in an acceptable,
    generic manner. In a new file in your text editor, add the following code:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们还可以添加一些基本的 CSS 来以一种可接受的通用方式布局示例。在您的文本编辑器中的新文件中，添加以下代码：
- en: '```js'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '#outer {'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#outer {'
- en: width:960px;
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:960px;
- en: margin:auto;
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:auto;
- en: color:#3c3c3c;
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: color:#3c3c3c;
- en: font:normal 17px "Palatino Linotype", "Book Antiqua",
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: font:normal 17px "Palatino Linotype", "Book Antiqua",
- en: Palatino, serif;
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Palatino, serif;
- en: '}'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: header {
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: header {
- en: display:block;
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: padding:0 20px 0;
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: padding:0 20px 0;
- en: margin-bottom:40px;
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin-bottom:40px;
- en: 'border:3px solid #d3d1d1;'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'border:3px solid #d3d1d1;'
- en: background-color:#e5e5e5;
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background-color:#e5e5e5;
- en: '}'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: hgroup { float:left; }
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: hgroup { float:left; }
- en: h1,
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: h1,
- en: h2 { margin-bottom:10px; }
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: h2 { margin-bottom:10px; }
- en: nav {
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: nav {
- en: display:block;
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: width:100%;
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:100%;
- en: height:40px;
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:40px;
- en: clear:both;
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clear:both;
- en: text-align:right;
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: text-align:right;
- en: '}'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: article {
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: article {
- en: width:700px;
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:700px;
- en: height:900px;
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:900px;
- en: 'border:3px solid #d3d1d1;'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'border:3px solid #d3d1d1;'
- en: background-color:#e5e5e5;
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background-color:#e5e5e5;
- en: float:left;
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:left;
- en: '}'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: article h1,
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: article h1,
- en: article p { margin:20px; }
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: article p { margin:20px; }
- en: p, nav{
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: p, nav{
- en: font:normal 17px "Nimbus Sans L", "Helvetica Neue",
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: font:normal 17px "Nimbus Sans L", "Helvetica Neue",
- en: '"Franklin Gothic Medium", Sans-serif;'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"Franklin Gothic Medium", Sans-serif;'
- en: '}'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: p { margin-top:0; }
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: p { margin-top:0; }
- en: aside {
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[旁白](https://example.org/aside) {'
- en: width:220px;
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:220px;
- en: height:900px;
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:900px;
- en: 'border:3px solid #d3d1d1;'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'border:3px solid #d3d1d1;'
- en: background-color:#e5e5e5;
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background-color:#e5e5e5;
- en: float:right;
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:right;
- en: '}'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: aside div { padding:0 20px 20px; }
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: aside div { padding:0 20px 20px; }
- en: '```'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Save this file as `marquee.css` in the `css` directory. Link to this stylesheet
    from the `<head>` element of the page we just created.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件保存为 `marquee.css` 在 `css` 目录中。从我们刚刚创建的页面的 `<head>` 元素链接到这个样式表。
- en: '*What just happened?*'
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: The underlying HTML represents a typical blog. We've added a series of elements
    for two reasons, primarily so that we have somewhere to insert the marquee, but
    also so that we can see why this approach can be necessary.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 底层 HTML 表示一个典型的博客。我们添加了一系列元素有两个原因，主要是为了在这里插入走马灯，但也是为了我们能够看到为什么这种方法是必要的。
- en: Having the latest posts scrolling across the page near the top of the site ensures
    that this content is seen straight away, and the fact that it's animated also
    helps to draw the visitor's attention to it.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 最新帖子在网站顶部滚动，确保此内容立即被看到，并且它是动画的事实也有助于吸引访问者的注意。
- en: 'The CSS used so far is purely to layout the example elements in a precise and
    mildly aesthetic way, giving us a generic layout and a light skinning. We''ll
    add some more CSS a little later in the example for our dynamically created marquee.
    At this point, the page should appear as follows:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止所使用的 CSS 纯粹是为了以准确而略微美学的方式布局示例元素，为我们提供通用布局和轻微的外观设计。稍后我们将在示例中添加更多 CSS，用于我们动态创建的走马灯。此时，页面应该如下所示：
- en: '![What just happened?](img/9642_08_03.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/9642_08_03.jpg)'
- en: Remember, all of the elements in the previous screenshot are there for the marquee
    to be inserted between. They are not specifically required, and are there for
    this example.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，前一个屏幕截图中的所有元素都是为了插入跑马灯而存在的。它们不是特别必需的，并且仅用于此示例。
- en: Time for action – retrieving and processing the post list
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 检索和处理帖子列表
- en: Now, we're ready to retrieve the list of latest posts and process them, making
    them ready to be displayed as items in the marquee. In order to access this data
    across the Internet from another domain, we need to use **JSONP**, which stands
    for **JSON with Padding**, and involves dynamically creating and injecting a `<script>`
    element to the page, although jQuery actually handles this aspect of it for us.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好检索最新帖子列表并处理它们，使它们准备好作为跑马灯中的项目显示。为了从另一个域通过互联网访问这些数据，我们需要使用 **JSONP**，它代表
    **JSON with Padding**，并涉及动态创建和注入 `<script>` 元素到页面中，尽管实际上是 jQuery 为我们处理了这个方面。
- en: Note
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More about JSONP can be found in these great articles: [http://remysharp.com/2007/10/08/what-is-jsonp](http://remysharp.com/2007/10/08/what-is-jsonp)
    and [http://jquery4u.com/json/jsonp-examples](http://jquery4u.com/json/jsonp-examples)'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 JSONP 的信息可以在这些精彩文章中找到：[http://remysharp.com/2007/10/08/what-is-jsonp](http://remysharp.com/2007/10/08/what-is-jsonp)
    和 [http://jquery4u.com/json/jsonp-examples](http://jquery4u.com/json/jsonp-examples)
- en: 'jQuery provides native support for JSONP and allows us to bypass the same-origin
    security policy of the browser. In order to output JSON in the correct format,
    I''m using the JSON API ([http://wordpress.org/plugins/json-api](http://wordpress.org/plugins/json-api))
    plugin on a WordPress-powered blog, which outputs JSON in the following format:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jQuery 提供了对 JSONP 的原生支持，并允许我们绕过浏览器的同源安全策略。为了以正确的格式输出 JSON，我正在使用 WordPress 驱动的博客上的
    JSON API ([http://wordpress.org/plugins/json-api](http://wordpress.org/plugins/json-api))
    插件，该插件以以下格式输出 JSON：
- en: '```js'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '{'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '"status": "ok",'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"status": "ok",'
- en: '"count": 1,'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"count": 1,'
- en: '"count_total": 1,'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"count_total": 1,'
- en: '"pages": 1,'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"pages": 1,'
- en: '"posts": ['
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"posts": ['
- en: '{'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '"id": 1,'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"id": 1,'
- en: etc...
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等等...
- en: '},'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '"id": 2,'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"id": 2,'
- en: Etc...
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等等...
- en: '}'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: ']'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: There are more properties in the `posts` array shown in the previous code block,
    as well as other arrays and properties in the outer object, but the previous snippet
    should give you an idea of the structure of the data we'll be working with.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一个代码块中显示的 `posts` 数组中还有更多的属性，以及外部对象中的其他数组和属性，但是前面的代码片段应该给您一个关于我们将要处理的数据结构的概念。
- en: 'Add the following code to the anonymous function of our HTML page:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到我们 HTML 页面的匿名函数中：
- en: '```js'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: $.getJSON("http://adamculpepper.net/blog?json=1&count=10&callback=?", function(data)
    {
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $.getJSON("http://adamculpepper.net/blog?json=1&count=10&callback=?", function(data)
    {
- en: var marquee = $("<div></div>", {
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var marquee = $("<div></div>", {
- en: 'id: "marquee"'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: "marquee"'
- en: '}),'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}),'
- en: h2 = $("<h2></h2>", {
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: h2 = $("<h2></h2>", {
- en: 'text: "Recent Posts:"'
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'text: "最近的帖子："'
- en: '}),'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}),'
- en: fadeLeft = $("<div></div>", {
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: fadeLeft = $("<div></div>", {
- en: 'id: "fadeLeft"'
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: "fadeLeft"'
- en: '}),'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}),'
- en: fadeRight = $("<div></div>", {
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: fadeRight = $("<div></div>", {
- en: 'id: "fadeRight"'
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: "fadeRight"'
- en: '});'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: for(var x = 0, y = data.count; x < y; x++) {
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for(var x = 0, y = data.count; x < y; x++) {
- en: $("<a></a>", {
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("<a></a>", {
- en: 'href: data.posts[x].url,'
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'href: data.posts[x].url,'
- en: 'title: data.posts[x].title,'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'title: data.posts[x].title,'
- en: 'html: data.posts[x].title'
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'html: data.posts[x].title'
- en: '}).appendTo(marquee);'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}).appendTo(marquee);'
- en: '}'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: marquee.wrapInner("<div></div>").prepend(h2).append(fadeLeft).append(fadeRight).insertAfter("header").slideDown("slow");
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: marquee.wrapInner("<div></div>").prepend(h2).append(fadeLeft).append(fadeRight).insertAfter("header").slideDown("slow");
- en: $("#marquee").find("div").eq(0).width(function() {
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("#marquee").find("div").eq(0).width(function() {
- en: var width = 0;
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var width = 0;
- en: $(this).children().each(function() {
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(this).children().each(function() {
- en: var el = $(this);
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: var el = $(this);
- en: width += el.width() + parseInt(el.css("marginRight"));
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: width += el.width() + parseInt(el.css("marginRight"));
- en: '});'
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: return width;
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return width;
- en: '});'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: marquee.trigger("marquee-ready");
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: marquee.trigger("marquee-ready");
- en: '});'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: 'We can also add some more CSS, this time for the newly-created elements. Add
    the following code to the bottom of `marquee.css`:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以添加一些更多的 CSS 样式，这次是为新创建的元素。在 `marquee.css` 的底部添加以下代码：
- en: '```js'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: '#marquee {'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#marquee {'
- en: display:none;
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:none;
- en: height:58px;
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:58px;
- en: margin:-20px 0 20px;
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:-20px 0 20px;
- en: 'border:3px solid #d3d1d1;'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'border:3px solid #d3d1d1;'
- en: position:relative;
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:relative;
- en: overflow:hidden;
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: overflow:hidden;
- en: background-color:#e5e5e5;
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background-color:#e5e5e5;
- en: '}'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#marquee h2 {'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#marquee h2 {'
- en: margin:0;
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:0;
- en: position:absolute;
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: top:10px;
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: top:10px;
- en: left:20px;
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: left:20px;
- en: '}'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#marquee a {'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#marquee a {'
- en: display:block;
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: margin-right:20px;
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin-right:20px;
- en: float:left;
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: float:left;
- en: font:normal 15px "Nimbus Sans L", "Helvetica Neue",
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: font:normal 15px "Nimbus Sans L", "Helvetica Neue",
- en: '"Franklin Gothic Medium", Sans-serif;'
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"Franklin Gothic Medium", Sans-serif;'
- en: '}'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#marquee div {'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#marquee div:'
- en: margin:20px 0 0 210px;
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:20px 0 0 210px;
- en: overflow:hidden;
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: overflow:hidden;
- en: '}'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#marquee div:after {'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#marquee div:after {'
- en: content:"";
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: content:"";
- en: display:block;
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: display:block;
- en: height:0;
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:0;
- en: visibility:hidden;
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: visibility:hidden;
- en: clear:both;
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: clear:both;
- en: '}'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#fadeLeft,'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#fadeLeft,'
- en: '#fadeRight {'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#fadeRight {'
- en: width:48px;
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: width:48px;
- en: height:21px;
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: height:21px;
- en: margin:0;
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: margin:0;
- en: position:absolute;
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: position:absolute;
- en: top:17px;
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: top:17px;
- en: left:210px;
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: left:210px;
- en: background:url(../img/fadeLeft.png) no-repeat;
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background:url(../img/fadeLeft.png) no-repeat;
- en: '}'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '#fadeRight {'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '#fadeRight {'
- en: left:906px;
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: left:906px;
- en: background:url(../img/fadeRight.png) no-repeat;
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: background:url(../img/fadeRight.png) no-repeat;
- en: '}'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: When we run the page now, we should see that the new marquee element, along
    with its links, is inserted into the page.![Time for action – retrieving and processing
    the post list](img/9642_08_04.jpg)
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们现在运行页面时，我们应该看到新的滚动条元素及其链接被插入到页面中。![执行动作的时间 - 检索和处理帖子列表](img/9642_08_04.jpg)
- en: The previous screenshot shows the elements in the new marquee section including
    the heading, the links themselves, and the fade elements, which are added purely
    for aesthetics.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的截图显示了新滚动条部分中的元素，包括标题、链接本身和仅用于美观的淡出元素。
- en: '*What just happened?*'
  id: totrans-473
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: All of our JavaScript is wrapped up in jQuery's `getJSON()` method, which uses
    jQuery's AJAX functionality to make a request to the URL specified as the first
    argument to the method. The second argument is an anonymous function that is executed
    if the request is successful. The returned JSON data is passed to this function
    automatically.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的 JavaScript 都包含在 jQuery 的`getJSON()`方法中，该方法使用 jQuery 的 AJAX 功能向指定为方法第一个参数的
    URL 发出请求。第二个参数是一个匿名函数，如果请求成功，则执行该函数。返回的 JSON 数据会自动传递给此函数。
- en: Within the function we first create some of the elements that make up our marquee
    including the outer container, the heading, and two purely aesthetic `<div>` elements
    used to add the left and right fade effects at the start and end of the row of
    links. All of these elements are stored in variables so that we can access them
    easily when required.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们首先创建一些组成我们滚动条的元素，包括外部容器、标题和两个纯粹用于在链接行的开头和结尾添加左右淡出效果的`<div>`元素。所有这些元素都存储在变量中，以便在需要时轻松访问。
- en: Next, we process the JSON object passed into the function. Remember, this object
    contains a series of properties where the values of some of these properties are
    arrays, such as the `posts` array, which contains each of the returned posts as
    objects within each of its array items.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们处理传递给函数的 JSON 对象。请记住，该对象包含一系列属性，其中一些属性的值是数组，比如`posts`数组，它包含每个返回的帖子作为其数组项中的对象。
- en: We use a `for` loop to iterate over each object in the `posts` array that is
    returned with the JSON object. This object contains a property called `count`,
    where the number of posts that are returned is stored as an integer, so we can
    use this to tell the `for` loop how many times to execute, which is marginally
    easier than counting the objects in the `posts` array.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`for`循环遍历返回的`posts`数组中的每个对象。此对象包含一个名为`count`的属性，其中以整数形式存储了返回的帖子数，因此我们可以使用这个来告诉`for`循环执行多少次，这比计算`posts`数组中的对象稍微容易一些。
- en: For each post that has been returned, we create a new `<a>` element, setting
    its `href` to point to the `url` property of the current object, and the `title`
    and `text` of the element set to the `title` property of the current object, and
    then append the new `<a>` element to the `marquee` element that we created a minute
    ago.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 对于返回的每个帖子，我们创建一个新的`<a>`元素，将其`href`设置为当前对象的`url`属性，将元素的`title`和`text`设置为当前对象的`title`属性，然后将新的`<a>`元素附加到我们一分钟前创建的`marquee`元素中。
- en: Once we've created and appended a link for each post, we then wrap the contents
    of the marquee element (the links) in a new `<div>` element, prepend the `<h2>`
    element to the start of the marquee, and append the `<div>` elements for the fades
    to the end of the `marquee` element. We then append the marquee to the page before
    sliding it into view with the `slideDown()` method.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们为每个帖子创建并附加了一个链接，我们就会将滚动条元素（链接）的内容包裹在一个新的`<div>`元素中，将`<h2>`元素前置到滚动条的开头，并将淡出的`<div>`元素追加到`marquee`元素的末尾。然后我们将滚动条附加到页面，然后使用`slideDown()`方法将其滑入视图中。
- en: At this point we need to set a `width` on the container's `<div>` element that
    we wrapped the links in a moment ago. This is so that the links can all line up
    in a single row. We need to take into account the `width` value of each link,
    plus any `margin` it has (which we set in the CSS).
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要在我们刚刚包裹链接的容器的`<div>`元素上设置一个`width`。这样，链接就可以排成一行。我们需要考虑每个链接的`width`值，加上它的任何`margin`（我们在CSS中设置的）。
- en: We use a function as the value of jQuery's `width()` method to iterate over
    each link and add its `width` and `margin` to a running total. We can't do this
    until the marquee has been appended to the page because it is not until this point
    that each element actually has a `width` or `margin` that we can retrieve.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个函数作为jQuery的`width()`方法的值，来迭代每个链接，并将其`width`和`margin`添加到一个运行总数中。直到滚动字幕被添加到页面上，我们才能执行此操作，因为在此时每个元素实际上才具有我们可以检索的`width`或`margin`。
- en: The last thing we do in the callback function for our `getJSON()` method is
    fire off a custom event with the `trigger()` jQuery method. The custom event is
    called `marquee-ready` and is used to tell our script when the `marquee` has been
    added to the page. We'll use this custom event shortly to animate the post links.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`getJSON()`方法的回调函数中最后要做的一件事是，使用`trigger()` jQuery方法触发一个自定义事件。自定义事件称为`marquee-ready`，用于告诉我们的脚本`marquee`已被添加到页面中。我们将很快使用这个自定义事件来对帖子链接进行动画处理。
- en: We also added some new CSS to our stylesheet. Some of this code is to give our
    `marquee` elements the same light skin as the rest of the page. But other parts
    of it, such as floating the links, and setting the marquee's `overflow` property
    to `hidden` is so that the links line up in a single row, and so that the majority
    of the links are hidden, ready to be scrolled into view. We also add the fade
    images to the last two `<div>` elements inside the `marquee` element.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在样式表中添加了一些新的CSS。其中一些代码是为了给我们的`marquee`元素提供与页面其余部分相同的浅色皮肤。但其中的其他部分，比如浮动链接，并将marquee的`overflow`属性设置为`hidden`，是为了使链接排成一行，并且大多数链接都是隐藏的，准备好滚动到视图中。我们还将淡入的图片添加到`marquee`元素内的最后两个`<div>`元素中。
- en: Time for action – animating the post links
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 动画化帖子链接
- en: We're now ready to begin scrolling the post links within the marquee. We can
    do this using our custom event.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备开始在marquee中滚动帖子链接。我们可以使用我们的自定义事件来完成这个任务。
- en: 'After the `getJSON()` method, add the following code to the page:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getJSON()`方法之后，向页面添加以下代码：
- en: '```js'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```js'
- en: $("body").on("marquee-ready", "#marquee", function() {
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $("body").on("marquee-ready", "#marquee", function() {
- en: var marquee = $(this),
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var marquee = $(this),
- en: postLink = marquee.find("a").eq(0);
  id: totrans-490
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: postLink = marquee.find("a").eq(0);
- en: width = postLink.width() + parseInt(postLink.css("marginRight")),
  id: totrans-491
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: width = postLink.width() + parseInt(postLink.css("marginRight")),
- en: time = 15 * width;
  id: totrans-492
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: time = 15 * width;
- en: postLink.animate({
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postLink.animate({
- en: 'marginLeft: "-=" + width'
  id: totrans-494
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'marginLeft: "-=" + width'
- en: '}, time, "linear", function() {'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}, time, "linear", function() {'
- en: $(this).css({
  id: totrans-496
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: $(this).css({
- en: 'marginLeft: 0'
  id: totrans-497
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'marginLeft: 0'
- en: '}).appendTo(marquee.find("div").eq(0));'
  id: totrans-498
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}).appendTo(marquee.find("div").eq(0));'
- en: marquee.trigger("marquee-ready");
  id: totrans-499
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: marquee.trigger("marquee-ready");
- en: '});'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: Our example is now complete. When we run the page at this point, the posts should
    begin scrolling from left to right.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的示例现在已经完成。当我们此时运行页面时，帖子应该会从左向右滚动。
- en: '*What just happened?*'
  id: totrans-504
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚发生了什么？*'
- en: We use the jQuery `on()` method to bind an event handler to our custom `marquee-ready`
    event. We need to use the `on()`event to achieve this, because when this part
    of the code is executed, the JSON response is unlikely to have returned so the
    `marquee` element won't even exist. Attaching the event handler to the `<body>`
    element of the page is an easy way to prepare the page for when the `marquee`
    element does exist.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用jQuery的`on()`方法将事件处理程序绑定到我们的自定义`marquee-ready`事件上。我们需要使用`on()`事件来实现这一点，因为当此部分代码被执行时，JSON响应不太可能返回，因此`marquee`元素甚至都不存在。将事件处理程序附加到页面的`<body>`元素是准备页面准备好`marquee`元素时的一种简单方法。
- en: Within the anonymous event-handling function, we first cache a reference to
    the marquee element using the `this` object, which is scoped to our `marquee`
    element. We then select the first link in the marquee and determine its total
    `width` including `margin`.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 在匿名事件处理函数内部，我们首先使用`this`对象（作用域限于我们的`marquee`元素）缓存了对marquee元素的引用。然后，我们选择滚动字幕中的第一个链接，并确定其包括`margin`在内的总`width`。
- en: We also work out what is effectively the speed of the animation. jQuery animations
    use a duration to determine how quickly an animation should run, but the problem
    this causes us is that posts with longer titles will move faster, because they
    have a greater distance to animate in the same amount of time.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还计算了动画的有效速度。jQuery动画使用持续时间来确定动画运行的速度，但这给我们带来的问题是，标题较长的帖子将移动得更快，因为它们在相同时间内需要动画的距离更长。
- en: To fix this, we work out a duration to pass to the animation method based on
    an arbitrary speed of `15` multiplied by the `width` of the current `<a>` element.
    This ensures that each post will scroll at the same speed regardless of how long
    it is.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们计算出一个持续时间，以传递给动画方法，该持续时间基于任意速度`15`乘以当前`<a>`元素的`宽度`。这确保了每篇文章无论有多长，都以相同的速度滚动。
- en: Once we have obtained the total `width` and `duration`, we can then run the
    animation on the first link in the `marquee`, using our `width` and `time` variables
    to configure the animation. We animate the post link by setting a negative `margin`
    of the first link, which drags all of the other links along with it.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了总`width`和`duration`，我们就可以在`marquee`中运行动画，使用我们的`width`和`time`变量来配置动画。我们通过设置第一个链接的负`margin`来动画帖子链接，这将所有其他链接一起拉动。
- en: Once the animation is complete, we remove the `margin-left` from the link, re-append
    it to the end of the `<div>` within the `marquee` element, and fire the `marquee-ready`
    event once more to repeat the process. This occurs repeatedly, creating the ongoing
    animation and bringing us to the end of this example.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦动画完成，我们从链接中删除`margin-left`，将其重新附加到`marquee`元素中的`<div>`的末尾，并再次触发`marquee-ready`事件以重复此过程。这一过程反复发生，创建了持续的动画，将我们带到了这个示例的结尾。
- en: Have a go hero – extending the marquee scroller
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下 - 扩展跑马灯滚动器
- en: One feature that would certainly be beneficial to our users would be if the
    post titles stopped being animated when the mouse pointer hovered over them. The
    animation could then be restarted when the pointer moves off the titles again.
    Have a go at adding this functionality in, by yourself. It shouldn't be too tricky
    at all and should involve adding the `mouseenter` and `mouseleave` event handlers.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们的用户肯定有益处的一个功能是，如果鼠标指针悬停在帖子标题上时，帖子标题停止动画。当鼠标指针再次移开标题时，动画可以重新启动。尝试自己添加此功能。这一点一点也不难，只需添加`mouseenter`和`mouseleave`事件处理程序即可。
- en: You'll need to work out how much of any given link is already outside of the
    visible area of the marquee in order to ensure the animation restarts at the same
    speed that it stopped at, but this should be quite similar to how we worked out
    the duration in this version of the example. See how you get on.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要计算任何给定链接已经在跑马灯的可见区域之外的部分有多少，以确保动画以与停止时相同的速度重新启动，但这应该与我们在本例中计算持续时间的方式非常相似。看看你能做到什么。
- en: Pop quiz – creating a marquee scroller
  id: totrans-514
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 - 创建跑马灯滚动器
- en: Q1\. Why did we create a dynamic-duration variable (time) instead of using one
    of jQuery's predefined durations?
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 为什么我们创建了一个动态持续时间变量（时间），而不是使用jQuery的预定义持续时间之一？
- en: Because its quicker using an integer, even if that integer has to be calculated,
    than using one of the duration strings
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为使用整数更快，即使必须计算该整数，也比使用其中一个持续时间字符串更快
- en: Because it's more fun
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这更有趣
- en: To make sure the links are appended to the correct element after being animated
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保链接在被动画后附加到正确的元素上
- en: To ensure that the links all animate at the same speed regardless of how long
    they are
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保所有链接无论有多长都以相同的速度进行动画
- en: Summary
  id: totrans-520
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, the second of our heavily example-based as opposed to theory-based
    chapters, we looked at some more common animations that are increasingly found
    on the web. Specifically, we looked at the following types of animations:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的第二个重点是基于实例而不是理论的章节，我们看了一些在网络上越来越常见的动画。具体来说，我们看了以下类型的动画：
- en: A proximity-driven image scroller, where the images scrolled in a certain direction
    and at a certain speed, depending on the movements of the mouse pointer
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个基于接近距离的图像滚动器，其中图像根据鼠标指针的移动方向和速度滚动
- en: Background-position animations, in which we created a continuous-header animation
    manually with just a few lines of code
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景位置动画，在此我们只需几行代码手动创建了一个连续的页眉动画
- en: A text marquee, where a series of headlines were grabbed from a live Internet
    feed and displayed in a scrolling marquee-style banner
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文本跑马灯，其中一系列的头条新闻从实时互联网源中抓取，并显示在滚动的跑马灯式横幅中。
- en: In the next chapter, we'll move to look at some pure CSS animations that were
    introduced with CSS3, and how jQuery can be used to enhance them and generally
    make working with them easier.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始研究一些纯 CSS 动画，这些动画是由 CSS3 引入的，以及如何使用 jQuery 来增强它们，并通常使与它们一起工作更容易。
