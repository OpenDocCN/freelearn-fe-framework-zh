["```js\n$ng test\n```", "```js\nconstructor(private userService: UserService,\n         private router: Router,\n         private authService: AuthenticationService,\n         private angularFireAuth: AngularFireAuth)\n```", "```js\nclass UserServiceStub {\n\n   getUser(): Observable<User> {\n      return Observable.of(mockUserJSON);\n   }\n\n}\n```", "```js\nexport const mockUserJSON = {\n   email: 'user@gmail.com',\n   friendcount: 0,\n   image: '',\n   mobile: '9999999999',\n   name: 'User',\n   uid: 'XXXX'\n};\n```", "```js\nclass AuthenticationServiceStub {\n\n   login(email: string, password: string) {}\n\n   resetPassword(email: string) {}\n}\n```", "```js\nclass AngularFireAuthStub {\n   readonly auth: AuthStub = new AuthStub();,\n}\n```", "```js\nclass AuthStub {\n\n   onAuthStateChanged() {\n      return Observable.of({uid: '1234'});\n   }\n}\n```", "```js\nclass RouterStub {\n   navigateByUrl(url: string) {\n      return url;\n   }\n}\n```", "```js\ndescribe(description: string, specDefinitions: () => void)\n```", "```js\nbeforeEach(async(() => {\n\n  TestBed.configureTestingModule({\n    declarations: [\n      LoginComponent,\n      ErrorAlertComponent\n    ],\n    imports: [\n      CommonModule,\n      BrowserModule,\n      FormsModule\n    ],\n    providers: [\n      {provide: UserService, useClass: UserServiceStub},\n      {provide: Router, useClass: RouterStub},\n      {provide: AuthenticationService, useValue: mockAuthService},\n      {provide: AngularFireAuth, useClass: AngularFireAuthStub}\n    ]\n  }).compileComponents();\n}));\n```", "```js\nbeforeEach(() => {\n   fixture = TestBed.createComponent(LoginComponent);\n   component = fixture.componentInstance;\n   de = fixture.debugElement;\n   fixture.detectChanges();\n});\n```", "```js\nit('Should instantiate LoginComponent', async(() => {\n   expect(component instanceof LoginComponent).toBe(true,\n      'LoginComponent not created');\n}));\n```", "```js\nafterEach(async(() => {\n   fixture.detectChanges();\n   fixture.whenStable().then(() => fixture.destroy());\n}));\n```", "```js\n$ng test\n```", "```js\nit('Should call login', async(() => {\n   const loginButton = de.query(By.css('#login-btn'));\n   expect(loginButton).not.toBeNull('Login button not found');\n\n   spyOn(mockAuthService, 'login').and.callThrough();\n   de.query(By.css('#email')).nativeElement.value = \n   'user@gmail.com';\n   de.query(By.css('#password')).nativeElement.value = 'password';\n   fixture.detectChanges();\n\n   // Click on Login button \n   loginButton.nativeElement.click();\n   fixture.detectChanges();\n   expect(mockAuthService.login).toHaveBeenCalled();\n}));\n```", "```js\nimport {async, ComponentFixture, TestBed} from '@angular/core/testing';\nimport {LoginComponent} from './login.component';\nimport {Router} from '@angular/router';\nimport {UserService} from '../../services/user.service';\nimport {Observable} from 'rxjs/Observable';\nimport {User} from '../../services/user';\nimport {mockUserJSON} from '../../test-data/user-test-data';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport {AngularFireAuth} from 'angularfire2/auth';\nimport {CommonModule} from '@angular/common';\nimport {BrowserModule, By} from '@angular/platform-browser';\nimport {FormsModule} from '@angular/forms';\nimport {DebugElement} from '@angular/core';\nimport {ErrorAlertComponent} from '../../shared/error-alert/error-alert.component';\n\nclass RouterStub {\n  navigateByUrl(url: string) {\n    return url;\n  }\n}\n\nclass UserServiceStub {\n\n  getUser(): Observable<User> {\n    return Observable.of(mockUserJSON);\n  }\n\n}\n\nclass AuthenticationServiceStub {\n\n  login(email: string, password: string) {\n  }\n\n  resetPassword(email: string) {\n  }\n}\n\nclass AngularFireAuthStub {\n  readonly auth: AuthStub = new AuthStub();\n}\n\nclass AuthStub {\n\n  onAuthStateChanged() {\n    return Observable.of({uid: '1234'});\n  }\n}\n\ndescribe('LoginComponent with tests', () => {\n\n  let fixture: ComponentFixture<LoginComponent>;\n  let component: LoginComponent;\n  let de: DebugElement;\n  const mockAuthService: AuthenticationServiceStub = new \n  AuthenticationServiceStub();\n\n  beforeEach(async(() => {\n\n    TestBed.configureTestingModule({\n      declarations: [\n        LoginComponent,\n        ErrorAlertComponent\n      ],\n      imports: [\n        CommonModule,\n        BrowserModule,\n        FormsModule\n      ],\n      providers: [\n        {provide: UserService, useClass: UserServiceStub},\n        {provide: Router, useClass: RouterStub},\n        {provide: AuthenticationService, useValue: mockAuthService},\n        {provide: AngularFireAuth, useClass: AngularFireAuthStub}\n      ]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    de = fixture.debugElement;\n    fixture.detectChanges();\n  });\n\n  afterEach(async(() => {\n    fixture.detectChanges();\n    fixture.whenStable().then(() => fixture.destroy());\n  }));\n\n  it('Should instantiate LoginComponent', async(() => {\n    expect(component instanceof LoginComponent).toBe(true,\n      'LoginComponent not created');\n  }));\n\n  it('Should call login', async(() => {\n    const loginButton = de.query(By.css('#login-btn'));\n    expect(loginButton).not.toBeNull('Login button not found');\n\n    spyOn(mockAuthService, 'login').and.callThrough();\n    de.query(By.css('#email')).nativeElement.value = 'user@gmail.com';\n    de.query(By.css('#password')).nativeElement.value = 'password';\n    fixture.detectChanges();\n\n    // Login button is enabled\n    expect(loginButton.nativeElement.disabled).toBe(false);\n    loginButton.nativeElement.click();\n    fixture.detectChanges();\n    expect(mockAuthService.login).toHaveBeenCalled();\n  }));\n\n});\n```", "```js\nconstructor(private fireDb: AngularFireDatabase)\n```", "```js\nclass AngularFireDatabaseStub {\n\n   app: AngularFireAppStub = new AngularFireAppStub;\n\n   angularFireObject: AngularFireObjectStub;\n\n   constructor(angularFireObject: AngularFireObjectStub) {\n      this.angularFireObject = angularFireObject;\n   }\n\n   object(pathOrRef: PathReference): AngularFireObjectStub {\n      return this.angularFireObject;\n   }\n}\n```", "```js\nclass AngularFireAppStub {\n\n   storage() {}\n}\n```", "```js\nclass AngularFireObjectStub {\n\n   set() {}\n\n   valueChanges() {}\n\n   update() {}\n\n}\n```", "```js\nconst angularFireObject: AngularFireObjectStub = new AngularFireObjectStub();\nconst mockAngularFireDatabase: AngularFireDatabaseStub = new AngularFireDatabaseStub(angularFireObject);\nlet userService: UserService;\n\nbeforeEach(() => {\n   TestBed.configureTestingModule({\n      providers: [\n         {provide: AngularFireDatabase, useValue: \n          mockAngularFireDatabase},\n         {provide: UserService, useClass: UserService}\n      ]\n   });\n   userService = TestBed.get(UserService);\n});\n```", "```js\nit('Add user', () => {\n   spyOn(angularFireObject, 'set');\n   userService.addUser(mockUserJSON);\n   expect(angularFireObject.set).toHaveBeenCalled();\n});\n```", "```js\nit('getUser return valid user', () => {\n   spyOn(angularFireObject, \n   'valueChanges').and.returnValue(Observable.of(mockUserJSON));\n   userService.getUser(mockUserJSON.uid).subscribe((user) => {\n      expect(angularFireObject.valueChanges).toHaveBeenCalled();\n      expect(user.uid).toBe(mockUserJSON.uid);\n      expect(user.name).toBe(mockUserJSON.name);\n      expect(user.mobile).toBe(mockUserJSON.mobile);\n      expect(user.email).toBe(mockUserJSON.email);\n   });\n\n});\n```", "```js\nit('saveUser saves user in Subject', () => {\n   userService.saveUser(mockUserJSON);\n   userService.getSavedUser().subscribe((user) => {\n      expect(user.uid).toBe(mockUserJSON.uid);\n      expect(user.name).toBe(mockUserJSON.name);\n      expect(user.mobile).toBe(mockUserJSON.mobile);\n      expect(user.email).toBe(mockUserJSON.email);\n   });\n\n});\n```", "```js\nit('updateEmail update the email', () => {\n   spyOn(angularFireObject, 'update');\n   userService.saveUser(mockUserJSON);\n   mockUserJSON.email = 'user1@gmail.com';\n   userService.updateEmail(mockUserJSON , mockUserJSON.email);\n   userService.getSavedUser().subscribe((user) => {\n      expect(angularFireObject.update).toHaveBeenCalled();\n      expect(user.email).toBe(mockUserJSON.email);\n   });\n\n});\n```", "```js\nimport {UserService} from './user.service';\nimport {AngularFireDatabase, PathReference} from 'angularfire2/database';\nimport {FirebaseApp} from 'angularfire2';\nimport {mockUserJSON} from '../test-data/user-test-data';\nimport {AngularFireAuth} from 'angularfire2/auth';\nimport {TestBed} from '@angular/core/testing';\nimport {Observable} from 'rxjs/Observable';\nimport {User} from './user';\n\nclass AngularFireDatabaseStub {\n\n   app: AngularFireAppStub = new AngularFireAppStub;\n\n   angularFireObject: AngularFireObjectStub;\n\n   constructor(angularFireObject: AngularFireObjectStub) {\n      this.angularFireObject = angularFireObject;\n   }\n\n   object(pathOrRef: PathReference): AngularFireObjectStub {\n      return this.angularFireObject;\n   }\n}\n\nclass AngularFireAppStub {\n\n   storage() {}\n}\n\nclass AngularFireObjectStub {\n\n   set() {}\n\n   valueChanges() {}\n\n   update() {}\n\n}\n\ndescribe('User service test suites', () => {\n\n   const angularFireObject: AngularFireObjectStub = new \n   AngularFireObjectStub();\n   const mockAngularFireDatabase: AngularFireDatabaseStub = new \n   AngularFireDatabaseStub(angularFireObject);\n   let userService: UserService;\n\n   beforeEach(() => {\n      TestBed.configureTestingModule({\n         providers: [\n            {provide: AngularFireDatabase, useValue: \n             mockAngularFireDatabase},\n            {provide: UserService, useClass: UserService}\n         ]\n      });\n      userService = TestBed.get(UserService);\n   });\n\n   it('Add user', () => {\n      spyOn(angularFireObject, 'set');\n      userService.addUser(mockUserJSON);\n      expect(angularFireObject.set).toHaveBeenCalled();\n   });\n\n   it('getUser return valid user', () => {\n      spyOn(angularFireObject, \n      'valueChanges').and.returnValue(Observable.of(mockUserJSON));\n      userService.getUser(mockUserJSON.uid).subscribe((user) => {\n         expect(angularFireObject.valueChanges).toHaveBeenCalled();\n         expect(user.uid).toBe(mockUserJSON.uid);\n         expect(user.name).toBe(mockUserJSON.name);\n         expect(user.mobile).toBe(mockUserJSON.mobile);\n         expect(user.email).toBe(mockUserJSON.email);\n      });\n\n   });\n\n   it('saveUser saves user in Subject', () => {\n      userService.saveUser(mockUserJSON);\n      userService.getSavedUser().subscribe((user) => {\n         expect(user.uid).toBe(mockUserJSON.uid);\n         expect(user.name).toBe(mockUserJSON.name);\n         expect(user.mobile).toBe(mockUserJSON.mobile);\n         expect(user.email).toBe(mockUserJSON.email);\n      });\n\n   });\n\n   it('updateEmail update the email', () => {\n      spyOn(angularFireObject, 'update');\n      userService.saveUser(mockUserJSON);\n      mockUserJSON.email = 'user1@gmail.com';\n      userService.updateEmail(mockUserJSON , mockUserJSON.email);\n      userService.getSavedUser().subscribe((user) => {\n         expect(angularFireObject.update).toHaveBeenCalled();\n         expect(user.email).toBe(mockUserJSON.email);\n      });\n\n   });\n\n   it('updateMobile update the mobile', () => {\n      spyOn(angularFireObject, 'update');\n      userService.saveUser(mockUserJSON);\n      mockUserJSON.mobile = '88888888';\n      userService.updateEmail(mockUserJSON , mockUserJSON.mobile);\n      userService.getSavedUser().subscribe((user) => {\n         expect(angularFireObject.update).toHaveBeenCalled();\n         expect(user.mobile).toBe(mockUserJSON.mobile);\n      });\n   });\n});\n```", "```js\nconst pipe = new FriendsDatePipe();\n```", "```js\nimport {FriendsDatePipe} from './friendsdate.pipe';\n\ndescribe('friendsdatepipe', () => {\n\n   const pipe = new FriendsDatePipe();\n\n   it('Transform dateInMillis to MM/DD/YY', () => {\n      expect(pipe.transform('1506854340801')).toBe('10/01/17');\n   });\n\n   it('Transform invalid date', () => {\n      expect(pipe.transform('-1')).toBe('Invalid Date');\n   });\n\n});\n```", "```js\n\"scripts\": {\n  \"ng\": \"ng\",\n  \"start\": \"ng serve\",\n  \"build\": \"ng build\",\n  \"test\": \"ng test --sourcemaps false\",\n  \"coverage\": \"ng test --sourcemaps false --watch=false \n   --code-coverage\",\n  \"lint\": \"ng lint\",\n  \"e2e\": \"ng e2e\"\n}\n```", "```js\n$ng test --codeCoverage\n```"]