- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about sharing common logic between components
    using mixins, creating app plugins, and other approaches to creating components,
    such as dynamic and functional components.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will guide you through how routing and Vue Router work. You will
    learn how to set up, implement, and manage the routing system in your app with
    Vue Router. You will look at dynamic routing for passing parameter values and
    nested routes for better reusability in complex applications. In addition, we
    will also look at JavaScript Hooks, which are helpful for authentication and error
    handling.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be ready to handle static and dynamic routing
    in any Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Vue Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the `RouterView` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a default layout for your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up navigation links with `RouterLink`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing route parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Router Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoupling params with props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching error paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you need to set up a basic Vue project following the instructions
    in [*Chapter 1*](B18645_01.xhtml#_idTextAnchor015), *Starting Your First Vue Project*.
    It’s recommended to create a single file Vue component to practice working with
    the examples and concepts mentioned easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find this chapter’s source code here: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`website.com/about` into their URL bar will be redirected to the **About**
    page.'
  prefs: []
  type: TYPE_NORMAL
- en: In web development, routing is the matching mechanism by which we decide how
    to connect HTTP requests to the code that handles them. We use routing whenever
    there is a need for URL navigation in our application. Most modern web applications
    contain a lot of different URLs, even single-page ones.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, routing creates a navigation system and helps users quickly move around
    our application and the web. With **Single-Page Applications** (**SPAs**), routing
    allows you to smoothly navigate within an application without the need for page
    refreshing.
  prefs: []
  type: TYPE_NORMAL
- en: In short, routing is a way for an application to interpret what resource users
    want based on the URL provided. It is a system for web-based resource navigation
    with URLs, such as paths to assets (images and videos), scripts, and stylesheets.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated in the Vue.js documentation, **Vue Router** is the official router
    service for any Vue.js application. It provides a single-entry point for communication
    between components with routes and therefore effectively controls the application’s
    flow, regardless of the user’s behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Vue Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vue Router is not installed by default; however, it can easily be enabled when
    creating an application with Vite. Create a new application by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the `Yes` option for adding Vue Router to the project as shown in *Figure
    7**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Adding Vue Router during creating a project](img/B18645_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Adding Vue Router during creating a project
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to add Vue Router to an existing Vue.js application, you
    can install it as an application’s dependency with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next step is understanding how Vue Router synchronizes the browser URL and
    the application’s view.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s look at the `RouterView` element.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the RouterView element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`RouterView` is a Vue component whose job is to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Render different child components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mount and unmount itself automatically at any nesting level, depending on the
    route’s given path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without `RouterView`, it is almost impossible to render dynamic content correctly
    for users at runtime. For example, when a user navigates to the `RouterView` knows
    and only generates the content related to that page.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how we can pass props to the view through `RouterView`.
  prefs: []
  type: TYPE_NORMAL
- en: Passing props to view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since `RouterView` is a component, it can also receive props. The only prop
    it receives is `name`, which is the same name registered in the corresponding
    route’s record defined in the `router` object at the initialization phase.
  prefs: []
  type: TYPE_NORMAL
- en: The Vue engine automatically passes any other additional HTML attributes to
    any view component that `RouterView` renders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following `RouterView` component with a `"main-app-view"` class, for
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s say we have a view component’s template with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the child component will receive the `"main-app-view"` attribute
    class when it’s the active view. The actual output after rendering will be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s look at how `RouterView` works.
  prefs: []
  type: TYPE_NORMAL
- en: Working with RouterView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your newly created application, let’s navigate to `App.vue` and replace
    the default code of `<template>` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go to `src/router/index.js` and comment out the generated code within
    the `routes` array, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the app locally and open the local server URL in the browser,
    the output will be as seen in *Figure 7**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Output of the app when there is no route defined](img/B18645_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Output of the app when there is no route defined
  prefs: []
  type: TYPE_NORMAL
- en: The output is an empty page because we have not set up any router configurations
    in our file, including mapping the paths with the related view. Without this step,
    the routing system cannot dynamically pick the suitable view component and render
    it into our `RouterView` element.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to set up Vue Router.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Vue Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we add Vue Router to our project, Vite creates and adds a `router` folder
    to the `/src` directory with a single auto-generated `index.js` file. This file
    contains the necessary configurations for our router system, which we will explore
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/main.js` file, we import the defined configuration object and uses
    the Vue instance method `use()` to install the router system into the application,
    as seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`app.use` is an instance method with a built-in mechanism to prevent you from
    installing a plugin more than once.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing `app.use(router)`, the following objects are available for
    access in any component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.$router`: The global router object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`this.$route`: The current route object points to the element in context'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using `setup()` and Composition API (or `<script setup>`), you can
    import `useRoute()` and `useRouter()` functions from `vue-router` package and
    get the current route object (instead of `this.$route`), and global router object
    (instead of `this.$router`) respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have registered the use of Vue Router in our application, let’s
    move on to the next step – defining the routes for the configuration object of
    the router instance.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a web application, a route is a URL path pattern. Vue Router will map it
    to a specific handler. This handler is a Vue component, defined and located in
    a physical file. For example, when the user enters the `localhost:3000/home` route,
    if you map the `HomeView` component to this specific route, the routing system
    knows how to render `HomeView` content accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 7**.2*, it is crucial to set up `routes` (or paths) for navigation
    within the application; otherwise, your application will display as empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each route is an object literal that uses the `RouteRecordRaw` interface with
    the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We define all the routes needed for an application as a list of `routes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We return to the `src/router/index.js` file and uncomment the code inside `routes`.
    For convenience, there will be two predefined routes called `home` and `about`,
    each being an object located in the `routes` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a closer look at the first route as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `path` property is a required string that indicates the path of the targeted
    route. Vue Router resolves this property to an absolute URL path for the browser’s
    navigation. For instance, the `/about` path will be translated into `<app domain>/about`
    (`localhost:8080/about` or `example.com/about`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, Vue Router understands `/` – the empty path – as the default
    path for loading the application when there is no other indicator after the forward
    slash (`/`) – for example, when the user navigates to `<app-domain>` or `<app-domain>/`
    (without setting `strict: true`).'
  prefs: []
  type: TYPE_NORMAL
- en: The next property is `name`, a string indicating the name given to the targeted
    route. Even though it is optional, we recommend defining every path with a name
    for better code maintenance and route tracking purposes, which we will discuss
    later in this chapter in the *Passing route* *parameters* section.
  prefs: []
  type: TYPE_NORMAL
- en: The last property is `component`, which is a Vue component instance. `RouterView`
    uses this property to reference the view component to render the page content
    when the path is active.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the route is defined as the `home` route, mapped as the default path to
    the application, and tied to the `HomeView` component for content.
  prefs: []
  type: TYPE_NORMAL
- en: Vite also auto-generates two simple components for these two sample routes –
    `HomeView` and `AboutView`, located in the `src/views` folder.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll go over some tips that can be helpful when you use
    loading components with routes.
  prefs: []
  type: TYPE_NORMAL
- en: Tips on loading components for route configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Indeed, we need to import the component to tie it to the targeted route in
    the same `index.js` file. The classic and most popular way is to import it at
    the top of the file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Often, we add this code line under the main imports as shown in *Figure 7**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Importing the HomeView component on line 2 – src/router/index.js](img/B18645_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Importing the HomeView component on line 2 – src/router/index.js
  prefs: []
  type: TYPE_NORMAL
- en: However, a more efficient way is to lazy-load the component.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lazy loading**, also known as on-demand loading, is a technique that aims
    to optimize the content of a website or web application at runtime. It helps to
    reduce the time consumption and number of resources required to download an application
    on the first load.'
  prefs: []
  type: TYPE_NORMAL
- en: This optimization is critical to ensure the best user experience possible, where
    every millisecond of waiting matters. Besides this, lazy loading also enables
    better code-splitting at the route level and performance optimization in large
    or complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can lazy-load the component by using Vite (and Rollup). Instead of importing
    the `AboutView` component into the top of the file, as we did with `HomeView`
    (see *Figure 7**.3*), we can dynamically add the following right after defining
    the name of the `about` route instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, we dynamically lazy-load the `AboutView` view component for the `about`
    route. During compilation, Vite generates a separate chunk with the designated
    name (`about`) for the target route and only loads it when the user visits this
    route.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, since the user will likely land on the default path on the first
    go, it is better not to lazy-load the default component (`HomeView` in our app)
    but to import it in the usual way. Hence, the tip here is to determine which elements
    should be lazily loaded when designing your routing and combine the two methods
    for the most benefit.
  prefs: []
  type: TYPE_NORMAL
- en: We will now see how to set up the router instance.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the router instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After defining the routes, the final step is to create the `router` instance
    based on the given configuration options by using the `createRouter` method, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: A configuration is an object consisting of different properties that help to
    form the app’s router. We will now examine these properties in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`routes` is a required option. Without this, the router won’t be able to recognize
    the paths and direct users to the suitable view content accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`history` determines the router’s mode. There are two modes in Vue Router for
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`createWebHistory()` method to leverage the default `history.pushState()` API,
    as well as the HTML5 History API. It allows us to achieve URL navigation without
    a page reload and makes the URL path human-readable – for example, `yourapplication.com/about`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createWebHashHistory()` method to create a hash mode, which allows you to
    use a hash symbol (`#`) to simulate a URL – for example, `yourapplication.com/#about`
    for an `youapplication.com/#/` for the **Home** URL of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: base
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`base` determines the base URL for the app. For example, when we set it to
    `process.env.BASE_URL`, it allows developers to control the base URL from outside
    the application code, specifically from a `.env` file. Hence, developers can set
    the directory from which the hosting platform serves the code at runtime.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With `base` finally out of the way, we have created the `router` instance.
    All that is left is to export it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In `main.js`, we import the `router` instance and use it in the router plugin
    right after the creation of the main `app` instance received from `createApp`,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In `App.vue`, replace `<template>` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Our application will now render as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Home page in the browser](img/B18645_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Home page in the browser
  prefs: []
  type: TYPE_NORMAL
- en: 'If we navigate to `/about`, let’s assume the content of the `about` component
    from the auto-generated code is as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The website should look like that shown in *Figure 7**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.5 – The About page of the applic\uFEFFation in the browser](img/B18645_07_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – The About page of the application in the browser
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at how we can lazy-load components to speed up large
    and complex SPAs. We also looked at some options for setting up your router systems,
    such as `routes`, `history`, and `base`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also saw the Vue engine renders both pages, `/about` and `/home`, with
    the same header content, as shown in *Figure 7**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.6 – The Home page with the same header displayed in the About \uFEFF\
    page in Figure 7.5](img/B18645_07_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – The Home page with the same header displayed in the About page
    in Figure 7.5
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that Vue only replaces the placeholder component, `RouterView`,
    with the target view’s content, and whatever template is defined outside this
    scope will remain. In this way, we can create a default layout for all our views
    in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a default layout for your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our template to be functional, it should also contain the `<RouterView/>`
    element. One standard setup is to have a navigation menu, `<nav>`, within the
    template and `RouterView` underneath. That way, the content changes between pages
    while the `header` menu stays the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `App.vue` and ensure that your template has the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output should now contain a static header with two navigation links –
    **Home** and **About** – while the content changes depending on the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The Home page’s content](img/B18645_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – The Home page’s content
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you navigate to the `/about` page, the header links will not change, while
    the content now become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The About page’s content](img/B18645_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – The About page’s content
  prefs: []
  type: TYPE_NORMAL
- en: By this point, you have learned how to create a default layout and render the
    target content view using `RouterView` dynamically. In the next section, we will
    learn how to implement and add a **Message Feed** page with the help of Vue Router.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.01 – implementing a Message Feed page using Vue Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use `RouterView` to render a new view component that
    displays a message feed.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.01).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create a new page that displays a list of messages to the user.
    Users will be able to visit this page whenever they enter the `localhost:3000/messages`
    path in the browser. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated by `npm init vue@3` as a starting point, or within
    the root folder of the code repository, navigate into the `Chapter07/Exercise7.01`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a new view component called `MessageFeed` by adding a `MessageFeed.vue`
    file to the `./``src/views/` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – The views directory hierarchy](img/B18645_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – The views directory hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'This component will render a list of messages. We define `messages` – an array
    of strings – as our local data using `<script setup>` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a router file at `src/router/index.js` if it doesn’t exist. Make sure
    you import `createRoute` and `createWebHistory` from `''vue-router''` and the
    `HomeView` component, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We declare a route designated to `MessageFeed`, named `messageFeed` with its
    path set to `/messages`. We will also lazy-load the component. This step will
    be completed by appending an object with the required information to the `routes`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, within the same file, create a `router` instance using the `routes`
    array we defined and with the `createRouter` and `createWebHistory` functions
    we imported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that in `src/main.js`. we import the created `router` instance and
    attach it to the `app` instance as a plugin by using `app.use(router)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `App.vue`, make sure `<template>` only contains the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upon visiting `localhost:3000/messages` in the browser (or any local server
    Vite has created), the page should appear with the correct content – the **Message
    Feed** page as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – The Message Feed Page](img/B18645_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – The Message Feed Page
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how simple it is to add a new page route to a Vue.js
    application using Vue Router, while keeping your code organized and easy to read.
    Now that we have our routes ready to use, we can allow users to navigate between
    pages without typing the full path.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up navigation links with RouterLink
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, `RouterView` oversees rendering the correct active view content
    relative to the URL path; `RouterLink`, on the other hand, oversees mapping the
    routes to navigable links. `RouterLink` is a Vue component that helps users navigate
    within an app with routing enabled. `RouterLink` by default renders an anchor
    tag, `<a>`, with a valid `href` link generated by its `to` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example app generated by Vite, since there are two routes pre-populated,
    there are also two `RouterLink` instances added to the `<template>` section of
    `App.vue` as the header navigation menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Since we are using the web history mode with `createWebHistory()`, the `to`
    prop of each `RouterLink` should receive an identical value with the `path` property
    declared in the targeted route object (as in the list of routes defined in `src/router/index.js`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we name our routes, an alternative way of using the `to` prop is to bind
    it with an object containing the route name instead of the path. Using the name
    is highly recommended to avoid complex link refactoring when we need to adjust
    the paths given to certain routes in our app. Hence, we can rewrite our links
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Also, Vue Router adds an extra CSS class, `router-link-active`, to the `<a>`
    tag when the route in question is active. We can customize this class selector
    through the `active-class` prop of the `RouterLink` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `RouterLink` component rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – RouterLink in the browser’s Element tab](img/B18645_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – RouterLink in the browser’s Element tab
  prefs: []
  type: TYPE_NORMAL
- en: 'The view in the browser will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – The Home page with navigation links](img/B18645_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – The Home page with navigation links
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that since we have access to `this.$router` within a component, we can
    trigger a navigation route programmatically by using `this.$router.push()` and
    pass a path or a router object in a similar way to using `to`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Or within the <script setup>, we can perform the following alternative code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at how you can use the `<RouterLink/>` element to
    navigate between our views as with traditional HTML `<``a>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will see how you can programmatically send a user to their last viewed
    route in a manner similar to the web browser’s **Back** button.
  prefs: []
  type: TYPE_NORMAL
- en: Tip for implementing the Back button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we want to navigate back to the previous page. Using `this.$router.push()`
    can achieve this, but it adds more routes in the history stack instead of going
    back. The correct technique is to use `this.$router.go(steps)`, in which `steps`
    is an integer that indicates the number of steps to go back or forward in the
    history stack. This functionality works similarly to `window.history.go(steps)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides this, you can also navigate forward to a page that was loaded before
    and still exists in the history stack by using the same method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can rewrite the above code using useRouter() and <script
    setup>, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll make use of navigation links to add our new message feed page to
    our application’s `nav` menu.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.02 – adding the navigation link to the MessageFeed route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add a quick link to the `MessageFeed` route we created in *Exercise
    7.01*, using the `to` prop and `RouterLink` as explained in the preceding topic.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.02).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter07/Exercise7.02`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions in *Exercise 7.01* to create the `MessageFeed` component,
    register it to `/messages` path, and make sure your router is enabled in the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `./src/App.vue` file, besides the auto-generated `RouterLink` components
    for `home` and `about`, add another `RouterLink` component that points to `/messages`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will see the navigation links available in any view – they will not disappear
    when users navigate away since they are not a part of the `RouterView` component.
    Our screen should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – The Home page with updated navigation links](img/B18645_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – The Home page with updated navigation links
  prefs: []
  type: TYPE_NORMAL
- en: 'Within `App.vue`, let’s change the `to` value to point to the object named
    `messageFeed`. This is the `name` value given to this route defined in `./src/router/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The navigation should work as before; clicking on the `/messages`, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Active page changes to Message Feed after clicking on the Message
    Feed link](img/B18645_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Active page changes to Message Feed after clicking on the Message
    Feed link
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `index.js` file located in the `./src/router/` folder and change
    the path defined for the `messageFeed` route from `/messages/` to `/messagesFeed`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the app’s `Home` page and click on `/messagesFeed`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.1\uFEFF5 – The Message Feed page with a new URL path](img/B18645_07_15.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – The Message Feed page with a new URL path
  prefs: []
  type: TYPE_NORMAL
- en: Note how straightforward it is to set up the link to the `/messages` path with
    just one line of code and update the related path accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have defined some simple routes without additional parameters for
    the targeted route – this will be our next challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Passing route parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously we learnt each route was a standalone view and did not need to pass
    or connect any data to the other routes. But Vue Router doesn’t limit the power
    of routing to only this. With named routes, we can also easily enable data communication
    between routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example app, we want our `about` page to be able to receive a data string
    called `user` as the user’s name from the link triggered. Prior to Vue Router
    4.1.4, we can achieve this feature by changing the `to` prop from a string literal
    to an object literal with a `name` and `params` properties, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'This change informs the router to pass the desired parameters to the `About`
    page when users click on the targeted link. These additional parameters are not
    visible on the rendered `href` link, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 - Generated href link is without parameters](img/B18645_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 - Generated href link is without parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.17 – The About pag\uFEFF\uFEFF\uFEFFe renders the user passed through\
    \ route params](img/B18645_07_17.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – The About page renders the user passed through route params
  prefs: []
  type: TYPE_NORMAL
- en: However, there is one significant downside to this approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s refresh the page while you are still on the `./about` path. The output
    will be an page without user’s name, as seen below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18 – About page on refresh loses user’s details](img/B18645_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – About page on refresh loses user’s details
  prefs: []
  type: TYPE_NORMAL
- en: Upon refresh, the Vue engine triggers route without any `user` passed to the
    route’s `params` field, unlike when the user clicked on a specific predefined
    link. And parameters passed using this approach was not saved or cached. We consider
    this an anti-pattern for Vue practice.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Vue Router 4.1.4, passing params directly on the `to` object is
    deprecated. for passing params to a route, we should use alternative approach
    such as using Pinia as the global’s data store, or to use the query params of
    the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Query params for a URL route starts after the question mask - `?`, as seen
    in the syntax below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above syntax, each parameter field is separated by `&` symbol. For example,
    to pass the user parameter to our `/about` page, we will construct our URL as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: And in the `About` component, we will retrieve the `query` field from the `route`
  prefs: []
  type: TYPE_NORMAL
- en: 'object, and get the relevant field’s value, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: In the `template` section, we can replace `$route.params.user` to `user`, and
    the output stays the same, even on refreshing the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: In the following section, we will learn how to intercept the navigation flow
    and dynamically assigning `params` between routes with **Router Hooks**.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Router Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand Vue Router Hooks, first, we need to understand the general flow
    of route navigation as described in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Navigation resolution flow diagram](img/B18645_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Navigation resolution flow diagram
  prefs: []
  type: TYPE_NORMAL
- en: Once navigation is triggered for a certain route, Vue Router provides several
    primary navigation guards, or Hooks, for developers to guard or intercept that
    navigation process. These guards can be hooked either globally or in the component,
    depending on the type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`beforeEach`, `beforeResolve`, and `afterEach`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeEnter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeRouteUpdate`, `beforeRouteEnter`, and `beforeRouteLeave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Composition API, those in-component Hooks are available as `onBeforeRouteUpdate`,
    and `onBeforeRouteLeave`. There is no `onBeforeRouteEnter` since this is equivalent
    to using the `setup()` (or `script` `setup`) itself.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 7**.19*, the Vue engine considers navigation only after all
    the Hooks or guards have been resolved, including any asynchronous guard.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s see how to set up `beforeEach` Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up beforeEach Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`beforeEach` is a global Hook and is called at the very beginning of navigation,
    *before* the other global and in-component Hooks are triggered (except for `beforeRouteLeave`
    in the previous view component). It should be defined as a global method of the
    `router` instance during initialization in the `index.js` file and takes the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding snippet, `beforeEachCallback` is a `hook` function that receives
    three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'We could write this directly as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if we want to display a different page to display a generic message
    whenever a user navigates to `About` without a value for the `user` passed to
    query params, we can hook `beforeEach` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Here, we check whether the destination route is `about`, and if it doesn’t pass
    any additional parameters nor any value for the `user` parameter, we will navigate
    to an `error` route instead. Otherwise, we will just proceed as normal with `next()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`next()` is required to be called *exactly once in any given non-overlapped
    flow logic* (once for `if` and once for `else`); otherwise, there will be errors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We still need to create an `error` page with an `Error.vue` view component
    that displays a simple message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, make sure to register the path accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the default view, after clicking on the **About** link, the app will
    render the **Error** page instead of the **About** page, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20 – The Error page displayed when About is clicked without param
    being passed](img/B18645_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – The Error page displayed when About is clicked without param being
    passed
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s go to the `App.vue` file and assign the `to` prop to the path `"/about?user=Adam":`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the About.vue file, we use the following template code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s navigate back to our app’s `user` passed, the output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.21 – The About page displayed when there is a user passed in query
    params](img/B18645_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – The About page displayed when there is a user passed in query
    params
  prefs: []
  type: TYPE_NORMAL
- en: We shall now look at a few key points that differentiate the `beforeEach` and
    `beforeResolve` Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Distinguishing between the beforeEach and beforeResolve Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also register a global Hook with `beforeResolve` with the same syntax.
    Unlike `beforeEach`, which is triggered when navigation is set up, `beforeResolve`
    will be triggered just before the navigation is carried out and confirmed *after
    all the Hooks (both global and in-component)* *are resolved*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: The output results will remain the same as in *Figure 7**.20* and *Figure 7**.21*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at the `afterEach` Hook in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The afterEach Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `afterEach()` Hook is the last global navigation guard to be triggered after
    the navigation is confirmed (which means after `beforeResolve()`). Unlike the
    other global guards, the `hook` function to pass to `afterEach()` does not receive
    a `next` function – hence, it won’t affect the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the `to` and `from` parameters are read-only `Route` objects. Hence,
    the best use case for `afterEach` is to save data such as the last visited `Route`
    object for a `route` destination, or page view tracking.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can have a default value of `user`, assign it, and save it
    whenever needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `App.vue` file, let’s change the value of `user` to `Alex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'The output when clicking on the **About** link now is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.22 – The About page displaying the new user’s name (Alex)](img/B18645_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – The About page displaying the new user’s name (Alex)
  prefs: []
  type: TYPE_NORMAL
- en: 'However, on navigating to `"/about"` only, the **About** page renders with
    the default user – **Adam** – instead, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.23 – The About page displaying the default user value on reloading
    (Adam)](img/B18645_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – The About page displaying the default user value on reloading
    (Adam)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at the `afterEach` Hook. We used the `afterEach`
    Hook to pass data through to the `Back` button.
  prefs: []
  type: TYPE_NORMAL
- en: Personalizing Hooks per route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of defining a global Hook, which can cause unseen bugs and requires
    a route check, we can define a `beforeEnter` guard directly in the targeted route’s
    configuration object – for example, our `about` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: With this approach, whether reloading the page or clicking on the link to navigate
    to the **About** page, the output is now consistent, but the URL doesn’t show
    the default params (*Figure 7**.24*)
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24 – The About page displaying the default user (Adam) without URL
    updated](img/B18645_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – The About page displaying the default user (Adam) without URL
    updated
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: With `beforeEnter()`, `to` is writeable and you will have access to `this` (which
    points to the specific route – `About`). It will only be triggered when users
    trigger navigation to the `About` page.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at the different Router Hooks available in Vue, including
    `beforeEach`, `beforeResolve`, and `afterEach`. We saw how each of these Hooks
    is called at a different point in the routing process. As a practical example,
    we looked at a route that, if not provided a parameter, instead directs the user
    to an **Error** page. These Hooks can be very useful, especially when setting
    up an authenticated route.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll look at setting up in-component Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up in-component Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we can also use in-component Hooks as component lifecycle Hooks when
    we want to scope those Hooks at the component level for better code maintenance
    or enhance the workflow when the same component needs to behave differently in
    a certain use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can have the `about` component now with the `beforeRouteEnter()` Hook defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we don’t have access to the `this` scope of the component during
    `beforeRouteEnter` because the view component is still being created. Luckily,
    we can access the instance through a callback passed to `next()`. Whenever the
    navigation is confirmed, which means the component is created, the callback will
    be triggered, and the component instance will be available as the sole argument
    (`comp`) of the callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can rewrite the above code using Composition API and the
    hook `useRoute` imported from `''vue-router''` package, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For `beforeRouteUpdate` and `beforeRouteLeave`, the component has been created
    – hence, this instance is available and there is no need for a callback for `next()`.
    In fact, a callback function is only supported in `next()` within the use of `beforeRouteEnter()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`beforeRouteUpdate` (or `onBeforeRouteUpdate`) is called when the same component
    is reused for a different route. This applies when we use dynamic routing, which
    will be discussed in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: '`beforeRouteLeave` (or `onBeforeRouteLeave`) is triggered when the component
    is deactivated or before the user navigates away from the current view. This is
    called right before the `beforeEach` guard of the new navigation and is usually
    used in editor components to prevent users from navigating away without saving.'
  prefs: []
  type: TYPE_NORMAL
- en: In this guard, we can cancel the new navigation by passing `false` to the `next()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, imagine that we add the following Hook to the component’s option
    in the `AboutView.vue` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'When we navigate away from the **About** page, a pop-up dialog will appear
    asking for confirmation, as shown in the following screenshot, and then continue
    navigating accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – Dialog asking to confirm before navigating away from the About
    page](img/B18645_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – Dialog asking to confirm before navigating away from the About
    page
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at setting up in-component Hooks – that is, Hooks
    that are scoped to specific components. We set up an in-component Hook for the
    `about` component that asks a user to confirm before leaving the page.
  prefs: []
  type: TYPE_NORMAL
- en: We will now see how to decouple passed parameters into `props`.
  prefs: []
  type: TYPE_NORMAL
- en: Decoupling Params with Props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `index.js` file, let’s adjust the configuration of the `about` route
    with an additional property called `props`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By setting this property’s value as a function which accepts a `route` and
    returns an object containing an `user` field of value based on `route.query.user`,
    the router will automatically understand and map any `route.query` parameters
    into the `props` of the view component accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `AboutView.vue` file, we will define a prop type `user` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the `<template>` section, we will replace `$route.query.user` with `user`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will still be the same, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26 – The user is passed through route params and mapped to props](img/B18645_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – The user is passed through route params and mapped to props
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can define a static data that you want to pass within the `props`
    property of the `route` configuration. Instead of a `Function` value, `props`
    can now be declared as an object with the required data, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'With a similar step, we will declare `age` as a `props` component in `AboutView.vue`,
    and print it out to the screen as text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when the `About` page is clicked, the page will render as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.27 – With the props preset in the router configuration](img/B18645_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27 – With the props preset in the router configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.03: Passing the content of the selected message to a new message
    page and having it printed out'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We shall continue from *Exercise 7.02*, *Adding the Navigation Link to the MessageFeed
    Route*, where we defined the `MessageFeed` route with a URL path to `messages`.
    This view will render a list of predefined messages in the `data` property of
    the `view` component’s options.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.03).
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we will create a new `/message` page, designated to render
    the content of a message selected by the user. It should be reusable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `./src/views/` folder, we create a new single-file component called
    `Message.vue`. This component receives a `content` prop of type `string` and renders
    it under a `<``p>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s register a new route with the `Message` component to the existing `routes`
    in `./src/router/index.js`. We will define the new route as a `message` with the
    path to `/message`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since the route is registered and ready to be used, we need to make changes
    to the `<template>` section of `./src/views/MessageFeed.vue` to ensure each message
    line is now clickable and will redirect the user to the new route when clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s replace the `<p>` tag with `router-click`. And because we have named our
    new route as `message`, we will set `to` of each `RouterLink` to bind to `/message`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'Under `template`, we’ll add a `<script setup>` tag containing some sample data
    for our `messages`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `message` route definition (`router/index.js`), we add `props: route
    => ({ content: route.query.content })` to map all `content` query passed to the
    route to the related prop.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you open the `./messages` page, all the messages are now clickable as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.28 – Each message now is a navigable link](img/B18645_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.28 – Each message now is a navigable link
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when the user clicks on a message, it will open a new page. However, the
    page content will be empty, as we have not passed any content parameter to the
    `<RouteLink>` component, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.29 – Empty message page](img/B18645_07_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.29 – Empty message page
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go back to `./src/views/MessageFeed.vue` and add `?content=${m}` to the
    route link of message, in which `m` is the `message` at index `i` in the `messages`
    list, in the `<``template>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now when you click on the first message, `Hello, how are you?`, the output
    will be the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.30 – Message page with the passed content](img/B18645_07_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.30 – Message page with the passed content
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s extract the `messages` static data from `./src/views/MessageFeed.vue`
    and save it in `./src/assets/messages.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `./src/views/MessageFeed.vue`, we will replace the local data property with
    `props` which has a `messages` array type, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to load the list of `messages` and assign it the `props` upon
    navigating to the `/messages` route. We will do this by using the Function `props`
    of the route definition, and the hook `beforeEnter()` to normalize the data into
    related `props` for rendering. You can do that by modifying your `messageFeed`
    route defined in `src/router/index.js` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within `beforeEnter`, we will lazy-load the list of messages with `import`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can retrieve the needed information as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full code for the route in `src/router/index.js` should be the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When viewing the website, we should see a message feed like in *Figure 7**.28*.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have learned and practiced how to configure routers, pass
    parameters, and intercept navigation between pages in the application using different
    routing Hooks. In the next section, we are going to look at a more advanced topic
    – **dynamic routing**.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there is a lot of data that follows the same format, such as a list of users
    or a list of messages, and it’s required to create a page for each of them, so
    we need to use a routing pattern. With a routing pattern, we can create a new
    route dynamically from the same component based on some additional information.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we want to render the `User` view component for every user but
    with different `id` values. Vue Router provides us with the ability to use dynamic
    segments denoted by a colon (`:`) to achieve dynamic routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of using `params`, which doesn’t persist its value when you refresh
    the page or appear in the URL, we define the required `params` directly in the
    path as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, `:id` means `params` here is not static. When the route
    matches the given pattern, Vue Router will render the corresponding component
    with the appropriate content while keeping the URL as it should be. The value
    of `:id` will be exposed as `$route.params.id` in that view component’s instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: When users select URLs such as `/user/1` or `/user/2` (`./src/App.vue`), Vue
    will automatically generate sub-pages using our template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigation paths will be mapped to the same route pattern and component but
    with different information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.31 – Navigating to /user/2](img/B18645_07_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.31 – Navigating to /user/2
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on **User 1**, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.32 – Navigating to /user/1](img/B18645_07_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.32 – Navigating to /user/1
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also normalize `id` to `props` of the `User` component with `props:
    true` and load the data of the selected user before the instance is created and
    rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can adjust `<template>` to print out the details of the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: 'The output when selecting `/user/1` will now be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.33 – Navigating to /user/1 with an updated UI](img/B18645_07_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.33 – Navigating to /user/1 with an updated UI
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at dynamic routing by setting up a route that extracts
    a parameter from a given URL. This technique allows you to create user-friendly
    URLs and pass information to routes dynamically. In the next section, we will
    look at catching error paths.
  prefs: []
  type: TYPE_NORMAL
- en: Catching error paths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Other important routes that we always need to remember to handle besides the
    `'/'`) include `error` routes, such as `404 Not found` when the URL path doesn’t
    match any registered path, among others.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `404 Not found`, we can use the Regex pattern, `/:pathMatch(.*)*`, which
    stands for *matching every other URLs,* to collect all the cases that don’t match
    the definted routes. The router’s configuration should be located at the end of
    the array routes to avoid matching the wrong path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: 'When we type the wrong path for `/users`, the output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.34 – Redirecting to 404 when the /users path is not found](img/B18645_07_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.34 – Redirecting to 404 when the /users path is not found
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at how to use the Regex pattern to create a catch-all
    `404` page displayed to anyone that navigates to a non-existent route. Next, we
    will be implementing a message route that passes relevant data to the URL itself
    using the dynamic routing pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.04 – implementing a message route for each message with the dynamic
    routing pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise will get you familiar with creating and maintaining dynamic routes
    in combination with other navigation Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.04).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go back to our message feed in *Exercise 7.03*, we will refactor our
    `Message` path to use routing patterns to dynamically navigate to a specific `message`
    path upon the user’s selection and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open `./src/router/index.js` and change the path configuration of the
    message route to `/message/:id`, where `id` will be the index of a given `message`
    in the list of messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, navigate to `./src/views/MessageFeed.vue`, and change the `to` prop of
    `RouterLink` for each message to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s go back to `./src/router/index.js`. Here, define `beforeEnter` as an
    asynchronous Hook for the `/message` route and lazy-load the content of the message
    into the `content` field of the route’s `query`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then we will define the props field as a function that returns an object containing
    the original params.id, and the query.content as id and content fields, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full routes should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When clicking on the first message in **Message Feed**, the next page will
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.35 – The page displayed when visiting the /message/0 path](img/B18645_07_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.35 – The page displayed when visiting the /message/0 path
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can also set props: true, and instead of mapping the content
    to query.content in beforeEnter hook, you can also map it to the route.params
    directly, as seen below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output should stay the same.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how to use dynamic routing, you can play around even
    further with more layers of routing patterns, such as `message/:id/author/:aid`.
    For these scenarios, we normally use a better approach – **nested routes**.
  prefs: []
  type: TYPE_NORMAL
- en: Nested routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many applications are composed of components that consist of several multiple-level
    nested components. For example, `/user/settings/general` indicates that a general
    view is nested in the `settings` view and this `settings` view is nested within
    the `user` view. It represents the **General information** section of a user’s
    settings page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the time, we want the URL to correspond to such a structure, as demonstrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.36 – User with two nested views – Info and Extra](img/B18645_07_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.36 – User with two nested views – Info and Extra
  prefs: []
  type: TYPE_NORMAL
- en: Vue Router makes it easy to achieve this structure using `nested` route configurations
    and the `RouterView` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go back to the `User.vue` view in our previous example (located in `./src/views/`)
    and add a nested `RouterView` component in the `<``template>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: To start rendering components to this `RouterView`, we will configure the `user`
    route to have the `children` option, which accepts an array of route configurations
    for the child routes. For our example, we’ll be adding an `info` and `extra` page
    for each user.
  prefs: []
  type: TYPE_NORMAL
- en: 'These child routes will be accessed as `/user/:id/info` and `/user/:id/extra`
    giving each user a unique `info` and `extra` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: 'Certainly, we must create two new views. The first one is `UserInfo`, which
    will render all the information about a user based on the `id` value received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: 'We also create `UserExtra.vue`, which will render any extra information (if
    there is any). In this example, it will only render simple text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: 'The nested views are ready! Whenever the user clicks on the `UserInfo` view
    and update the URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.37 – The User page with the nested UserInfo view](img/B18645_07_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.37 – The User page with the nested UserInfo view
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on **Extra**, they will see the same, as is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.38 – The User page with the nested UserExtra view](img/B18645_07_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.38 – The User page with the nested UserExtra view
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at nested routes – routes that have multiple children.
    In our example, the child routes were `/user/:id/info` and `/user/:id/extra`.
    This pattern allows us to create pages that extend their parent pages.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we can now make edits to the **About a user** header
    and apply them to all child routes. As projects grow, making use of this pattern
    will allow you to avoid duplicating code across multiple views.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will use what we’ve learned so far to create navigation
    tabs for our message view component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 7.05 – building navigation tabs within the message view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will adapt the knowledge learned in the *Nested routes* section to build
    a `Message` view from *Exercise 7.04*.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Exercise7.05).
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, let’s make some changes to our `messages` database in `src/assets/messages.js`
    by adding the following `author` and `sent` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `MessageFeed.vue`, we update the field to render as `message.content`, and
    not `message` since `message` is no longer a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will create a `MessageAuthor.vue` view that only renders the name
    of the creator of the message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will create a `MessageInfo.vue` view that renders the `message.sent`
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we are done with the components, we need to register the new nested route
    under the children of the `message` route inside our router at `src/router/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to move the logic of `beforeEnter` for the `message` route to a separate
    function – `beforeEnterMessage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, bind it to the `message` route’s `beforeEnter`, and also to each of its
    child route’s `beforeEnter` Hook, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, in `Message.vue`, we will refactor the code to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following when you select the **Author** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.39 – Message page with Author selected](img/B18645_07_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.39 – Message page with Author selected
  prefs: []
  type: TYPE_NORMAL
- en: 'When we navigate to the **Info** tab, the output becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.40 – The Message page with Info selected](img/B18645_07_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.40 – The Message page with Info selected
  prefs: []
  type: TYPE_NORMAL
- en: With this exercise, we have covered almost all the basic functionalities of
    Vue Router, especially in terms of handling dynamic and nested routing. In the
    final section, we will go through how to create a reusable layout for the view
    by templating our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to implement layouts in a Vue application. One of them is
    using a slot and creating a static wrapper `layout` component on top of `RouterView`.
    Despite its flexibility, this approach results in a heavy performance cost, both
    in terms of the unnecessary recreation of the component and in the extra data
    fetching required for every route change.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will discuss a better approach, which is to take advantage
    of the power of the dynamic component. The components are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s create an `src/layouts` folder with a `default` layout component. This
    component has a simple header navigation, a `main` slot to render the actual content
    (which is whatever `<RouterView>` renders), and a footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `App.vue` file, we will change the default view generated by Vite to
    only `<RouterView>` and a wrapper around it. This wrapper is a dynamic component
    that will render whatever in the `layout` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also initialize `layout` to be the `default.vue` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: Now, to render the `layout` component in response to corresponding route changes,
    `RouterView` should control which layout to render. In other words, `layout` should
    be updatable and decided by the view component rendered inside `RouterView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we will pass `layout` to the `currentLayout` prop and update
    `layout` with the `@update` event in `<RouterView>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<script setup>` section, we change `layout` into a reactive variable
    using `shallowRef` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon creating an instance of the `HomeView.vue` component, we will emit an
    `update:currentLayout` event to update and render the desired layout accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.41 – The Home page rendered with a layout](img/B18645_07_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.41 – The Home page rendered with a layout
  prefs: []
  type: TYPE_NORMAL
- en: Since the `layout` component is not part of the `RouterView` component, it will
    only re-render whenever the layout changes from within the view. This will maintain
    the performance of the app during user navigation.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at how a dynamic component can be used to provide
    different layouts for different routes. This gives us the ability to have different
    common layouts – for example, one global menu for user-facing pages and another
    for admin pages, rendered based on the routes used.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll build on what we learned here by creating a message
    application with dynamic nested routing and layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 7.01 – creating a message SPA with dynamic, nested routing, and layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Activity7.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter07/Activity7.01)
  prefs: []
  type: TYPE_NORMAL
- en: 'This activity aims to leverage your knowledge about Vue Router regarding registering
    routes and handling dynamic routes, nested routes, and route Hooks to create a
    **Message SPA**. This application will allow users to compose new messages, view
    a message feed, and navigate between messages to see their details:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `MessageEditor` view (at `src/views/MessageEditor.vue`), which will
    render a view with `textarea` to the user, and a `submit` button to save the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the `editor` route with `MessageEditor` as its view in `src/router/index.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `MessageList` view (at `src/views/MessageList.vue`) that will render
    a list of `message id` values wrapped by an `a` tag, which will direct to the
    single message page with the given `id` upon selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the `list` route with `MessageList` as its view in `src/router/index.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `Messages` view (at `src/views/Messages.vue`), which will render links
    to either `editor` or `list` as its nested routes and render the nested view accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user navigates away from `editor`, should some content not yet have
    been submitted, display a message asking whether they want to save before navigating
    away. `Yes` will continue and `No` will abort the navigation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `Message` view (at `src/views/Message.vue`), which will render message
    content from `props`, and a `back` button to go back to the previous view. By
    default, it should go to `messages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the `Message` view with the dynamic route of `message/:id` in `src/router/index.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Improve the UI by creating two different simple layouts, one for `messages`
    (with the title only) and one for `message` (with both the title and the `back`
    button).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding messages via the editor route, the `/list` view that displays
    a feed of messages should look as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.42 – The /list view in the Messages app](img/B18645_07_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.42 – The /list view in the Messages app
  prefs: []
  type: TYPE_NORMAL
- en: 'The `/editor` view that allows the user to compose and send a new message looks
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.43 – The /editor view in the Messages app](img/B18645_07_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.43 – The /editor view in the Messages app
  prefs: []
  type: TYPE_NORMAL
- en: 'The `/message/:id` dynamic route (here, `/message/0` for a message with an
    `id` value of `0`) in the **Message** app looks as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.44 – The /message/0 view in the Message app](img/B18645_07_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.44 – The /message/0 view in the Message app
  prefs: []
  type: TYPE_NORMAL
- en: 'An alert will be displayed when the user tries to navigate away with an unsaved
    message as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 7.45 – The /editor view whe\uFEFFn the user tries to leave the page\
    \ with an unsaved message](img/B18645_07_45.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.45 – The /editor view when the user tries to leave the page with an
    unsaved message
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we have learned about the most basic and useful functionalities
    offered by Vue Router for building routing for any Vue.js application in an effective
    and organized way.
  prefs: []
  type: TYPE_NORMAL
- en: '`RouterView` and `RouterLink` allow app developers to easily set up the navigation
    paths to their related views and maintain the SPA concept. The fact that they
    are Vue components themselves provides us as developers with the benefits of the
    Vue architecture, giving us flexibility in implementing nested views or layouts.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the route as an object with different properties simplifies the architecture
    process, including refactoring existing paths and adding a new route to the system.
    Using router parameters and patterns provides dynamic routing with reusable views
    and enables communication and data preservation between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, with Hooks, we saw how we can intercept the navigation flow, set up
    authentication where needed, redirect to the desired path, or even load and keep
    certain important data before the user lands on the targeted page. There is an
    unlimited number of use cases in which these Hooks can be extremely useful, such
    as when implementing a back button, for instance. With Vue Router, we are now
    capable of composing a Vue.js application with a proper navigation system for
    users to explore.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how we can enhance the UI experience for
    users by adding transitions and animations to our application.
  prefs: []
  type: TYPE_NORMAL
