["```js\n<!DOCTYPE html>\n            <html>\n<head>\n<script src=\"img/react.min.js\"></script>\n<script src=\"img/JSXTransformer.js\"></script>\n  <script src=\"img/react-dom.js\"></script>\n\n<meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n  <div id=\"myReactContainer\">\n        <script type=\"text/jsx\", src=\"img/index.js\"></script>\n  </div>\n</body>\n</html>\n```", "```js\n//Defining the Mixin\n . var ReactMixin = {\n . getInitialState:function(){\n .    return {count:0};\n .  },\n\n// componentWillMount, a  lifecycle method, is added as a part of the Mixin.\n . componentWillMount:function(){\n    console.log('Component will mount!');\n  },\n  increaseCountBy10: function(){\n    this.setState({count: this.state.count+10})\n }\n  }\n\n//This method displays text to display\n     var App = React.createClass({\n  render:function(){\n   return (\n     <div>\n     <Label txt=\"SetInterval increase by 10 in every 100ms\" />\n        </div>\n     )\n  }\n  });\n\n// React component (<Label />), called from the <App /> component.\n  var Label = React.createClass({\n\n// Mixins are called using the keyword Mixin, followed by the Mixin name within an array.\n  mixins:[ReactMixin],\n  componentWillMount:function(){\n\n    //setting the interval to 100ms\n       interval = setInterval(this.increaseCountBy10,100);\n  },\n\n//The function is called for the second time to update the interval every 100ms\n  componentWillUnMount:function(){\n  clearInterval(this.interval);\n  },\n  render:function(){\n   return <label>{this.props.txt} : {this.state.count}</label>\n  }\n });\n\nReactDOM.render(<App />, document.getElementById('myReactContainer'));\n```", "```js\ndoel@doel-Vostro-3500:~/reactjs/ch7_mixins_validationProps/app1_mixin$ httpster\nStarting HTTPster v1.0.1 on port 3333 from /home/doel/reactjs/ch7_mixins_validationProps/app1_mixin\n\n```", "```js\nCalling Multiple Mixins from a single React Component\n```", "```js\nvar ReactMixin1= {\n\n     getDefaultProps: function () {\n\n        return {text1: \"I am from first Mixin\"};\n\n    }\n\n};\n\nvar ReactMixin2 = {\n\n      getDefaultProps: function () {\n\n        return {text2: \"I am from second Mixin\"};\n\n    }\n\n};\n```", "```js\nvar App = React.createClass({\n\n  Mixins:[ReactMixin, ReactMixin2],\n\n  render: function () {\n\n    return (\n\n    <div>\n\n        <p>Mixin1: {this.props.text1} </p>\n\n        <p>Mixin2: {this.props.text2}</p>\n\n    </div>\n\n    );\n\n  }\n\n});\n\nReactDOM.render(<App />, document.getElementById('myReactContainer'));\n\\\\\n```", "```js\nReact.createClass({\n  propTypes: {\n    // You can declare that a prop is a specific JS primitive. By default, these\n    // are all optional.\n    optionalArray: React.PropTypes.array,\n    optionalBool: React.PropTypes.bool,\n    optionalFunc: React.PropTypes.func,\n    optionalNumber: React.PropTypes.number,\n    optionalObject: React.PropTypes.object,\n    optionalString: React.PropTypes.string,\n\n    // Anything that can be rendered: numbers, strings, elements or an array\n    // (or fragment) containing these types.\n    optionalNode: React.PropTypes.node,\n\n    // A React element.\n    optionalElement: React.PropTypes.element,\n\n    // You can also declare that a prop is an instance of a class. This uses\n    // JS's instanceof operator.\n    optionalMessage: React.PropTypes.instanceOf(Message),\n\n    // You can ensure that your prop is limited to specific values by treating\n    // it as an enum.\n    optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),\n\n    // An object that could be one of many types\n    optionalUnion: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number,\n      React.PropTypes.instanceOf(Message)\n    ]),\n\n    // An array of a certain type\n    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),\n\n    // An object with property values of a certain type\n    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),\n\n    // An object taking on a particular shape\n    optionalObjectWithShape: React.PropTypes.shape({\n      color: React.PropTypes.string,\n      fontSize: React.PropTypes.number\n    }),\n\n    // You can chain any of the above with `isRequired` to make sure a warning\n    // is shown if the prop isn't provided.\n    requiredFunc: React.PropTypes.func.isRequired,\n\n    // A value of any data type\n    requiredAny: React.PropTypes.any.isRequired,\n\n    // You can also specify a custom validator. It should return an Error\n    // object if the validation fails. Don't `console.warn` or throw, as this\n    // won't work inside `oneOfType`.\n    customProp: function(props, propName, componentName) {\n      if (!/matchme/.test(props[propName])) {\n        return new Error('Validation failed!');\n      }\n    }\n  },\n  /* ... */\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"img/react.js\"></script>\n<script src=\"img/JSXTransformer.js\"></script>\n  <script src=\"img/react-dom.js\"></script>\n  <script type=\"text/jsx\", src=\"img/index4.js\"></script>\n\n<meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n  <div id=\"myReactContainer\">\n        <script type=\"text/jsx\", src=\"img/index.js\"></script>\n  </div>\n</body>\n</html>\n```", "```js\n\"use strict\"\n\nclass App extends React.Component {\n\n  render () {\n\n    return (\n\n      <div className=\"app\">\n\n        <h1 ref=\"title\" className=\"app__title\"></h1>\n\n        <div ref=\"content\" className=\"widget__content\">{this.props.content}</div>\n\n      </div>\n\n    )\n\n  }\n\n}\n\nApp.propTypes = {\n\n  title: React.PropTypes.string.isRequired,\n\n  content: React.PropTypes.node.isRequired\n\n}\n\nReactDOM.render(<App content=\"I am learning react\"/>,document.getElementById('myReactContainer'));\n```", "```js\nerror = propTypes[propName](props, propName, componentName, location); \n```", "```js\nvar ValidationApp = React.createClass({\n\n  propTypes: {\n\n    name: function(props, propName,componentName){\n\n      if(!(propName in props))  {\n\n        throw new Error(\"Property Name Missing \")\n\n      }\n  },\n\n  render:function(){\n    return <h1>{this.props.name}</h1>\n  }\n});\n ReactDOM.render(<ValidationApp />, document.getElementById('myReactContainer')); //missing prop name\n```", "```js\nvar ValidationApp = React.createClass({\n\n  propTypes: {\n\n    name: function(props, propName,componentName){\n\n      if(!(propName in props))  {\n\n        throw new Error(\"Property Name Missing \")\n\n      }\n\n if(props[propName].length < 7) {\n\n throw new Error(\"Can you add a longer Property Name, more than 7chars\")\n\n }\n\n }\n\n  },\n\n  render:function(){\n\n    return <h1>{this.props.name}</h1>\n\n  }\n\n});\n\n// ReactDOM.render(<ValidationApp />, document.getElementById('myReactContainer')); //missing prop name\n\nReactDOM.render(<ValidationApp name=\"react\" />, document.getElementById('myReactContainer')); //prop length should be more than 7 chars\n\n```"]