- en: Chapter 4. Working with Styles and Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you may feel that the application is lacking a certain appeal.
    The success of any application relies greatly on how the user interface looks.
    Just like how React Native borrows from React on the web, the same thing goes
    for styles. In this chapter, you will learn how React Native styles and lays out
    the components with React CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is React CSS?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Style Sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the `SimpleButton` to include custom styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to layout with Flexbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling the `NavigationBar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling the `NoteScreen`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have any experience in writing CSS for a browser then you will feel comfortable
    with the styles in React Native. Although, instead of the browser's implementation
    of cascading styles, Facebook has developed a subset version of CSS in JavaScript.
    The benefit of this approach is that the designer can fully utilize features in
    JavaScript, such as variables and conditionals, which CSS does not support natively.
  prefs: []
  type: TYPE_NORMAL
- en: Style Sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Style Sheet is the React Native abstraction to declare styles using object notation.
    The components can use any style, so if you find that you are not able to get
    the right look then refer to the React Native documentation on that component
    in its styles section.
  prefs: []
  type: TYPE_NORMAL
- en: When inserting styles, it is common to include only those styles that you need
    for that specific component. It is similar to how JSX combines the JavaScript
    logic and markup into a single component; we are also going to define our styles
    in the same file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Style Sheet, use the `Stylesheet.create({..})` method by passing
    in an object of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This looks similar to CSS but it uses commas instead of semicolons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Styles are declared to be *inline* on a component using the style prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to pass normal JavaScript objects to the style prop. This
    is generally not recommended, since the Style Sheet ensures that each style is
    immutable and only created once throughout the lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the SimpleButton component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s extend our `SimpleButton` component further to accept custom styles
    for the button background and text. In the `render` method, let''s set the `style`
    attribute of the `View` and `Text` components from the `props`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Revisiting PropTypes**'
  prefs: []
  type: TYPE_NORMAL
- en: To validate, the `View` or `Text` styles passed into your component use `View.propTypes.style`
    and `Text.propType.style`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `HomeScreen` we are going to style the `simpleButton` component to draw
    the user''s attention to the `NoteScreen` when there are no notes. We will start
    by adding it to the `StyleSheet` and defining some text styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we want the text on the button to be bold, white in color, and with size
    16\. To style the button, we need to add another object to the `StyleSheet` called
    `simpleButton` and also define a background color; the `simpleButton` code is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the SimpleButton component](img/5162_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s not that appealing yet; let''s add some padding so that it''s easier
    for the user to press the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`paddingVertical` is shorthand for `paddingTop` and `paddingBottom`. `paddingHorizontal`
    is shorthand for `paddingLeft` and `paddingRight`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'React CSS does not have a shorthand notion, such as `border: 1px solid #000`.
    Instead each item is declared individually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a drop shadow, we define each property similar to borders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how the shadow offset requires an object with `width` and `height` properties.
    Since we are dealing with JavaScript objects, this is a perfectly acceptable notation.
    Now, we include the `SimpleButton` component in our `HomeScreen` render method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `renderScene` function of `ReactNotes` in `index.ios.js` and `index.android.js`
    to pass the navigator through the `props` to the `HomeScreen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the SimpleButton component](img/5162_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is not too shabby for a typical call to action button. If you reload this
    in the simulator and press the button, it will still fade due to the `TouchableOpacity`
    feedback. For more information on React CSS or to contribute, visit the open source
    CSS-layout repository at [https://github.com/facebook/css-layout](https://github.com/facebook/css-layout).
  prefs: []
  type: TYPE_NORMAL
- en: Layout and Flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Flexbox is the foundation of React Native's layout, we are going to explore
    it in depth. If you are already familiar with the intricacies of Flexbox, feel
    free to jump to the *Styling the NavigationBar component* section. There we will
    focus more on the styling of the components that we made in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Flex container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The flex container is the parent element that describes how children or flex
    items are laid out. The `flexDirection` property of the container specifies the
    `main-axis`; the primary direction in which the items are rendered. The line perpendicular
    to the `main-axis` is called the `cross-axis`. Different flex properties on the
    container affect how the items are aligned across each axis. The `flexDirection`
    property has two possible values; `row` values for horizontal layouts (left to
    right) and `column` for vertical layouts (top to bottom). The following figure
    shows the `flexDirection`: `row` items aligned from left to right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flex container](img/5162_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next figure shows the items laid out from top to bottom when it''s set
    to `flexDirection`: `column`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flex container](img/5162_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can move the items in the container along the established `main-axis` with
    the help of `justifyContent`. The following diagram shows the different options
    along the `main-axis`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flex container](img/5162_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice how `space-between` does not include white space along the left and right
    edges, whereas `space-around` does, but it is half the width of the white space
    included in between the items.
  prefs: []
  type: TYPE_NORMAL
- en: 'To move items along the `cross-axis`, we use `alignItems`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flex container](img/5162_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wrapping items is also possible, but it is disabled by default. Items within
    a container will all try to fit along the `main-axis`. If there are too many items
    or if they are too squeezed, you can apply `flexWrap`. The container will then
    calculate if it is necessary to put an item onto a new row or column.
  prefs: []
  type: TYPE_NORMAL
- en: Flex items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, `flex` items will only be as wide as their internal content. The
    `flex` property dictates the amount of remaining space the item should take up.
    The available space is divided based on the ratio of each item''s `flex` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flex items](img/5162_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Make a note of how the items in row two are all of the same width, since their
    `flex` value is `1`. The item with `flex` value `2` in row three takes twice as
    much space as the rest of the items.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `alignItems`, a `flex` item can align itself along the `cross-axis`
    with `alignSelf`.
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal and vertical centering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take a look at a quick example of how Flexbox makes layout easier. One
    of the biggest challenges in CSS is the vertically and horizontally centered elements
    (take five minutes and attempt to accomplish this in normal CSS). We''re going
    to start by creating our `Center` components and defining a `flex` container with
    three `flex` items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize a new `StyleSheet` and define some simple styles for the items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we want to control where the items are aligned along the `main-axis` and
    `cross-axis` with `justifyContent` and `alignItems`. Create a container style
    and set `justifyContent` and align items to `center`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Horizontal and vertical centering](img/5162_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This does not seem like the `behaviour` was specified. The items are aligned
    along the `centre` of the `main-axis` but not the `cross-axis`. Let''s add a border
    around the container to visualize it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Horizontal and vertical centering](img/5162_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can see that the height of the container does not span the entire screen.
    Since the default `flexDirection` in the root `View` container is `column`, the
    content will only span the height of the content. Luckily, we now know the property
    to take up the remaining space. Adding `flex 1` to our container will have its
    span in the vertical length of the screen, which gives us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Horizontal and vertical centering](img/5162_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This completes our overview of layout with Flexbox! For the entire list of supported
    Flexbox properties, check out the React Native documentation at [https://facebook.github.io/react-native/docs/flexbox.html#content](https://facebook.github.io/react-native/docs/flexbox.html#content).
  prefs: []
  type: TYPE_NORMAL
- en: Absolute positioning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Additionally, React Native gives you the option of positioning the items on
    your screen. This works the same way as it does in the browser by defining the
    `top`, `left`, `right`, and `bottom` properties. We recommend that you try to
    create your layout in Flexbox before resorting to absolute positioning.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the NavigationBar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to give our `NavigationBar` the iOS and Android style treatment.
    There is a small difference between the two, except for how the font size and
    padding are rendered. We will start by giving our `NavigationBar` a background
    color and a bottom border. Add this to the `StyleSheet` in `index.ios.js` and
    `index.android.js` and define the `navbar` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the `Navigator.NavigatorBar` with the style prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The last things to be updated are our `navbar` title and `SimpleButton` styles.
    We want the text to be `centered` vertically as well as to give the left-hand
    and right-hand buttons some padding from the sides of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we alluded to earlier, the `marginVertical` for iOS is different than the
    Android version to produce the same visual result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, update the `NavigationBarRouteMapper` to include the styles for the
    title and buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Styling the NavigationBar component](img/5162_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make a note of how the iOS version, for which we have changed the status bar
    text to appear white. React Native provides an API to interact with the status
    bar in iOS. In our `index.ios.js` we can toggle it to white in the `ReactNotes`
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The documentation for `StatusBarIOS` can be found in the React Native documentation
    at [https://facebook.github.io/react-native/docs/statusbarios.html](https://facebook.github.io/react-native/docs/statusbarios.html).
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Android Material Theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The color of the status and navigation bar on our Android application appears
    to be solid black. Currently, there is no support system in React Native to style
    these from JavaScript like what the `StatusBarIOS` API provides on iOS. We can
    still use the Material Theme (available in Android 5.0 and above), located in
    `ReactNotes/android/app/src/6main/res/values/styles.xml`, to apply the colors
    we want. Change the contents of `styles.xml` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `colorPrimaryDark` refers to the color of the status bar, whereas `navigationBarColor`
    is the color of the bottom navigation container. When you re-launch the application
    you should be able to see the status and navigation bars colored correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the Android Material Theme](img/5162_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For more information on using the Material Theme, refer to the Android developers
    documentation at [https://developer.android.com/training/material/theme.html](https://developer.android.com/training/material/theme.html).
  prefs: []
  type: TYPE_NORMAL
- en: Styling the NoteScreen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `NoteScreen` has two `TextInputs` without any styles. As of right now,
    it''s difficult to see where each input rests on the screen. It is common on iOS
    and Android to put an underline under each input. To achieve this, we are going
    to wrap our `TextInput` in `View` and apply `borderBottom` to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The existing title and body styles define the height of each `TextInput`. Since
    each input will share the `flex` properties and text size, we can define a shared
    style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in each input style we can pass an array to include both styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![Styling the NoteScreen](img/5162_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This doesn''t look right on Android yet. The `TextInputs` on Android have a
    default underline and they center the text vertically on multiline inputs. There
    are two Android only attributes that can be added to match the look of the iOS
    application. On each `TextInput` set the `underlineColorAndroid` as `transparent`
    and `textAlignVertical` on the body as `TextInput`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Styling the NoteScreen](img/5162_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this we get the same look on both devices! This wraps up the styling of
    the components we created in the previous chapter. Henceforth, we are going to
    style as soon as we add new components to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Styles in React Native are very similar to how CSS works in browser. In this
    chapter, you learned how to create and manage Style Sheets and add them to your
    components. If you ever find yourself frustrated with the layout then use the
    Flexbox section as a guide. Make sure to review where your `main-axis` and `cross-axis`
    are defined, as well as where the `flex` items are aligned along them. Feel free
    to go back to our components and play around with any of the styles before continuing
    with the next chapter.
  prefs: []
  type: TYPE_NORMAL
