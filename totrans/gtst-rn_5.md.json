["```js\nimport React, {\n  StyleSheet,\n  Text,\n  View,\n  ListView\n  } from 'react-native';\n\nexport default class NoteList extends React.Component {\n\n  constructor (props) {\n    super(props);\n    this.ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n  }\n\n  render() {\n    return (\n      <ListView\n        dataSource={\n          this.ds.cloneWithRows( [\n              {title:\"Note 1\", body:\"Body 1\", id:1}, \n              {title:\"Note 2\", body:\"Body 2\", id:2}\n            ])\n        }\n        renderRow={(rowData) => {\n              return (\n                 <Text>{rowData.title}</Text>\n              )\n            }\n          }/>\n      )\n  }\n}\n```", "```js\nimport NoteList from './NoteList';\n```", "```js\nrender () {\n    return (\n      <View style={styles.container}>\n        <NoteList/>\n        <Text style={styles.noNotesText}>You haven't created any notes!</Text>\n\n        <SimpleButton\n          onPress={() => this.props.navigator.push({\n            name: 'createNote'\n          })}\n          customText=\"Create Note\"\n          style={styles.simpleButton}\n          textStyle={styles.simpleButtonText}\n        />\n      </View>\n    );\n  }\n```", "```js\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 60\n  }\n```", "```js\nimport React, {\n  StyleSheet,\n  Text,\n  View,\n  ListView,\n  TouchableHighlight\n  } from 'react-native';\n```", "```js\nrenderRow={\n  (rowData) => {\n    return (\n      <TouchableHighlight onPress={() => console.log(rowData)}>\n         <Text>{rowData.title}</Text>\n      </TouchableHighlight>\n    )\n}\n```", "```js\n_onPress (rowData) {\n  this.props.navigator.push(\n    {\n      name: 'createNote',\n      note: {\n        id: rowData.id,\n        title: rowData.title,\n        body: rowData.body\n      }\n    });\n  }\n```", "```js\n                <TouchableHighlight onPress={() => this._onPress(rowData)}>\n                  <Text>{rowData.title}</Text>\n                </TouchableHighlight>\n```", "```js\nexport default class NoteList extends React.Component {\n  constructor (props) {\n    super(props);\n    this.ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n  }\n```", "```js\nexport default class HomeScreen extends React.Component {\n  render () {\n    return (\n      <View style={styles.container}>\n        <NoteList navigator={this.props.navigator}/>\n       ...\n      </View>\n    );\n  }\n}\n```", "```js\n        <View style={styles.inputContainer}>\n          <TextInput\n            autoFocus={true}\n            autoCapitalize=\"sentences\"\n            placeholder=\"Untitled\"\n            style={[styles.textInput, styles.title]}\n            onEndEditing={(text) => {this.refs.body.focus()}}\n            underlineColorAndroid=\"transparent\"\n            value={this.props.note.title}\n          />\n        </View>\n        <View style={styles.inputContainer}>\n          <TextInput\n            ref=\"body\"\n            multiline={true}\n            placeholder=\"Start typing\"\n            style={[styles.textInput, styles.body]}\n            textAlignVertical=\"top\"\n            underlineColorAndroid=\"transparent\"\n            value={this.props.note.body}\n          />\n        </View>\n```", "```js\n  constructor (props) {\n    super(props)\n    this.state = {note:this.props.note};\n  }\n```", "```js\n        <View style={styles.inputContainer}>\n          <TextInput\n            ref=\"title\"\n            autoFocus={true}\n            autoCapitalize=\"sentences\"\n            placeholder=\"Untitled\"\n            style={[styles.textInput, styles.title]}\n            onEndEditing={(text) => {this.refs.body.focus()}}\n            underlineColorAndroid=\"transparent\"\n            value={this.state.note.title}\n            onChangeText={(title) => {this.setState({title})}}\n          />\n        </View>\n        <View style={styles.inputContainer}>\n          <TextInput\n            ref=\"body\"\n            multiline={true}\n            placeholder=\"Start typing\"\n            style={[styles.textInput, styles.body]}\n            textAlignVertical=\"top\"\n            underlineColorAndroid=\"transparent\"\n            value={this.state.body}\n            onChangeText={(body) => {this.setState({body})}}\n          />\n        </View>\n```", "```js\n  renderScene (route, navigator) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <HomeScreen navigator={navigator} />\n        );\n      case 'createNote':\n        return (\n          <NoteScreen \n            note={route.note} \n            onChangeNote={(note) => console.log(\"note changed\", note)}/>\n        );\n    }\n  }\n```", "```js\nthis.props.onChangeNote(note);\n```", "```js\nclass NoteScreen extends React.Component {\n  …\n  updateNote(title, body) {\n    var note = Object.assign(this.state.note, {title:title, body:body});\n    this.props.onChangeNote(note);\n    this.setState(note);\n  }\n  …\n}\n```", "```js\nonChangeText={(title) => this.updateNote(title, this.state.note.body)}\n```", "```js\nonChangeText={(body) => this.updateNote(this.state.note.title, body)}\n```", "```js\n  <ListView\n        dataSource={\n          this.ds.cloneWithRows([\n            { title:\"Note 1\", body:\"body\", id:1}, \n            {title:\"Note 2\", body:\"body\", id:2}\n          ])\n        }\n        renderRow={(rowData) => {\n              return (\n                <TouchableHighlight onPress={() => this._onPress(rowData)}>\n                  <Text>{rowData.title}</Text>\n                </TouchableHighlight>\n              )\n            }\n          }\n/>\n```", "```js\nexport default class HomeScreen extends React.Component {\n  render () {\n    return (\n      <View style={styles.container}>\n        <NoteList \n          navigator={this.props.navigator} \n           notes={[{title:\"Note 1\", body:\"body\", id:1}, {title:\"Note 2\", body:\"body\", id:2}]}\n       />\n  …\n}\n```", "```js\nexport default class NoteList extends React.Component {\n...\n  render() {\n    return (\n      <ListView\n        dataSource={this.ds.cloneWithRows(this.props.notes)}\n        ...\n        />\n      )\n  }\n}\n```", "```js\nexport default class HomeScreen extends React.Component {\n  render () {\n    return (\n      <View style={styles.container}>\n        <NoteList navigator={this.props.navigator} notes={this.props.notes}/>\n      ...\n     </View>\n    );\n  }\n}\n```", "```js\nclass ReactNotes extends React.Component {\n  renderScene (route, navigator) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <HomeScreen navigator={navigator} \n          notes={[{title:\"Note 1\", body:\"body\", id:1}, {title:\"Note 2\", body:\"body\", id:2}]}/>\n        );\n      case 'createNote':\n        return (\n          <NoteScreen note={route.note} onChangeNote={(note) => console.log(\"note changed\", note)}/>\n        );\n    }\n  }\n  …\n}\n```", "```js\nclass ReactNotes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [{title: \"Note 1\", body: \"body\", id: 1}, {title: \"Note 2\", body: \"body\", id: 2}]};\n  }\n  renderScene(route, navigator) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <HomeScreen navigator={navigator} notes={this.state.notes}/>\n        );\n      case 'createNote':\n        return (\n          <NoteScreen note={route.note} onChangeNote={(note) => console.log(\"note changed\", note)}/>\n        );\n    }\n  }\n\n  ...\n}\n```", "```js\nclass ReactNotes extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedNote: {title:\"\", body:\"\"},\n      notes: {\n        1: {title: \"Note 1\", body: \"body\", id: 1},\n        2: {title: \"Note 2\", body: \"body\", id: 2}\n      }\n    }\n  }\n…\n}\n```", "```js\n<HomeScreen navigator={navigator} notes={_(this.state.notes).toArray()} />\n```", "```js\nclass ReactNotes extends React.Component {\n  ...\n  updateNote(note) {\n    var newNotes = Object.assign({}, this.state.notes);\n    newNotes[note.id] = note;\n    this.setState({notes:newNotes});\n  }\n\n  renderScene(route, navigator) {\n    switch (route.name) {\n      case 'createNote':\n\n        return (\n          <NoteScreen note={this.state.selectedNote} onChangeNote={(note) => this.updateNote(note)}/>\n        );\n    }\n  }\n...\n}\n```", "```js\nclass ReactNotes extends React.Component {\n  renderScene(route, navigator) {\n    switch (route.name) {\n      case 'home':\n        return (<HomeScreen navigator={navigator} notes={_(this.state.notes).toArray()} onSelectNote={(note) => navigator.push({name:\"createNote\", note: note})}/>);\n      case 'createNote':\n      return (\n          <NoteScreen note={route.note} onChangeNote={(note) => this.updateNote(note)}/>\n        );\n    }\n  }\n```", "```js\nexport default class HomeScreen extends React.Component {\n  render () {\n    return (\n      <View style={styles.container}>\n        <NoteList notes={this.props.notes} onSelectNote={this.props.onSelectNote}/>\n        <Text style={styles.noNotesText}>You haven't created any notes!</Text>\n        <SimpleButton\n          onPress={() => this.props.navigator.push({\n            name: 'createNote'\n          })}\n          customText=\"Create Note\"\n          style={styles.simpleButton}\n          textStyle={styles.simpleButtonText}\n        />\n      </View>\n    );\n  }\n}\n```", "```js\nexport default class NoteList extends React.Component {\n\n  constructor (props) {\n    super(props);\n    this.ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n  }\n  render() {\n    return (\n      <ListView\n        dataSource={this.ds.cloneWithRows(this.props.notes)}\n        renderRow={(rowData) => {\n              return (\n            <TouchableHighlight\n              onPress={() => this.props.onSelectNote(rowData)}\n              style={styles.rowStyle}\n              underlayColor=\"#9E7CE3\"\n            >\n              <Text style={styles.rowText}>{rowData.title}</Text>\n            </TouchableHighlight>              )\n            }\n          }/>\n      )\n  }\n}\n\nvar styles = StyleSheet.create({\n  rowStyle: {\n    borderBottomColor: '#9E7CE3',\n    borderBottomWidth: 1,\n    padding: 20,\n  },\n  rowText: {\n    fontWeight: '600'\n  }\n});\n```", "```js\n  Title: function(route, navigator, index, navState) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <Text style={styles.navBarTitleText}>React Notes</Text>\n        );\n      case 'createNote':\n        return (\n          <Text style={styles.navBarTitleText}>{route.note ? route.note.title : 'Create Note'}</Text>\n        );\n    }\n  }\n```", "```js\n   RightButton: function(route, navigator, index, navState) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <SimpleButton\n            onPress={() => {\n              navigator.push({\n                name: 'createNote',\n                note: {\n                  id: new Date().getTime(),\n                  title: '',\n                  body: ''\n                }\n              });\n            }}\n            customText='Create Note'\n            style={styles.navBarRightButton}\n            textStyle={styles.navBarButtonText}\n          />\n        );\n      default:\n         return null;\n    }\n  }\n```", "```js\nimport React, {\n  AppRegistry,\n  Navigator,\n  StyleSheet,\n  Text,\n  AsyncStorage\n} from 'react-native';\n```", "```js\n  async saveNotes(notes) {\n    try {\n      await AsyncStorage.setItem(\"@ReactNotes:notes\", JSON.stringify(notes));\n    } catch (error) {\n      console.log('AsyncStorage error: ' + error.message);\n    }\n  }\n```", "```js\n  updateNote(note) {\n    var newNotes = Object.assign({}, this.state.notes);\n    newNotes[note.id] = note;\n    this.setState({notes:newNotes});\n    this.saveNotes(newNotes);\n  }\n```", "```js\n  async loadNotes() {\n    try {\n      var notes = await AsyncStorage.getItem(\"@ReactNotes:notes\");\n      if (notes !== null) {\n        this.setState({notes:JSON.parse(notes)})\n      }\n    } catch (error) {\n      console.log('AsyncStorage error: ' + error.message);\n    }\n  }\n```", "```js\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: {\n        1: {title: \"Note 1\", body: \"body\", id: 1},\n        2: {title: \"Note 2\", body: \"body\", id: 2}\n      }\n    }\n    this.loadNotes();\n  }\n```", "```js\n  RightButton: function(route, navigator, index, navState) {\n    switch (route.name) {\n      case 'home':\n        return (\n          <SimpleButton\n            onPress={() => {\n              navigator.push({\n                name: 'createNote',\n                note: {\n                  id: new Date().getTime(),\n                  title: '',\n                  body: '',\n                  isSaved: false\n                }\n              });\n            }}\n            customText='Create Note'\n            style={styles.navBarRightButton}\n            textStyle={styles.navBarButtonText}\n          />\n        );\n      case 'createNote':\n        if (route.note.isSaved) {\n          return (\n            <SimpleButton\n              onPress={\n                () => {\n                  navigator.props.onDeleteNote(route.note);\n                  navigator.pop();\n                }\n              }\n              customText='Delete'\n              style={styles.navBarRightButton}\n              textStyle={styles.navBarButtonText}\n              />\n          );\n        } else {\n          return null;\n        }\n      default:\n         return null;\n    }\n  },\n```", "```js\n              onPress={\n                () => {\n                  navigator.props.onDeleteNote(route.note);\n                  navigator.pop();\n                }\n              }\n```", "```js\n  render () {\n    return (\n      <Navigator\n        initialRoute={{name: 'home'}}\n        renderScene={this.renderScene.bind(this)}\n        navigationBar={\n          <Navigator.NavigationBar\n            routeMapper={NavigationBarRouteMapper}\n            style={styles.navBar}\n          />\n        }\n        onDeleteNote={(note) => this.deleteNote(note)}\n      />\n    );\n  }\n```", "```js\n  updateNote(note) {\n    var newNotes = Object.assign({}, this.state.notes);\n    note.isSaved = true;\n    newNotes[note.id] = note;\n    this.setState({notes:newNotes});\n    this.saveNotes(newNotes);\n  }\n```", "```js\n  deleteNote(note) {\n    var newNotes = Object.assign({}, this.state.notes);\n    delete newNotes[note.id];\n    this.setState({notes:newNotes});\n    this.saveNotes(newNotes);\n  }\n```"]