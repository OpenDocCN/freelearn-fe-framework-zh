- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Setting Up React and TypeScript
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置React和TypeScript
- en: In this chapter, we will learn how to use both React and TypeScript together.
    We will start by going through the steps for creating a React and TypeScript project
    using a tool called webpack. Then we will create another project, but this time
    using a tool called Create React App to show you how to speed up the process of
    creating a React and TypeScript project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何同时使用React和TypeScript。我们将首先通过使用webpack这个工具的步骤来创建一个React和TypeScript项目。然后我们将创建另一个项目，但这次使用Create
    React App这个工具来展示如何加快创建React和TypeScript项目的流程。
- en: This chapter will then cover how to use TypeScript to make React props and states
    type-safe, extending the alert component built in the first chapter. Lastly, we
    will learn how to debug your app with React’s DevTools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，本章将介绍如何使用TypeScript使React的props和states类型安全，扩展第一章节中构建的alert组件。最后，我们将学习如何使用React的DevTools调试你的应用。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Creating a project with webpack
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用webpack创建项目
- en: Creating a project with Create React App
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Create React App创建项目
- en: Creating a React and TypeScript component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建React和TypeScript组件
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will use the following technologies in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中将使用以下技术：
- en: '**Node.js** and **npm**: React and TypeScript are dependent on these. You can
    install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**和**npm**：React和TypeScript依赖于这些。你可以从[https://nodejs.org/en/download/](https://nodejs.org/en/download/)安装它们。'
- en: '**Visual Studio Code**: We’ll use this editor to write code and execute terminal
    commands. You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**：我们将使用这个编辑器来编写代码和执行终端命令。你可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)安装它。'
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有的代码片段都可以在网上找到，链接为[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3)。
- en: Creating a project with webpack
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用webpack创建项目
- en: Setting up a React and TypeScript project is tricky because both JSX and TypeScript
    code needs to be transpiled into JavaScript. In this section, we will cover how
    to set up a React and TypeScript project step by step, with the help of a tool
    called webpack.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设置React和TypeScript项目是棘手的，因为JSX和TypeScript代码都需要被转换成JavaScript。在本节中，我们将逐步介绍如何使用一个名为webpack的工具来设置React和TypeScript项目。
- en: Introducing webpack
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍webpack
- en: Webpack is a tool that bundles JavaScript source code files together. It can
    also bundle CSS and images. It can run other tools such as Babel to transpile
    React and the TypeScript type checker as it scans the files. It is a mature and
    incredibly popular tool used in the React community that powers many React projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是一个将JavaScript源代码文件打包在一起的工具。它还可以打包CSS和图片。它可以在扫描文件时运行其他工具，如Babel，将React转换成JavaScript，以及将TypeScript类型检查器。它是一个成熟且在React社区中极其流行的工具，许多React项目都依赖于它。
- en: Webpack is incredibly flexible but, unfortunately, it requires a lot of configuration.
    We will witness this as we create our project with webpack.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack非常灵活，但不幸的是，它需要大量的配置。当我们使用webpack创建我们的项目时，我们将见证这一点。
- en: It is important to understand that webpack isn’t a project creation tool. For
    example, it won’t install React or TypeScript – we have to do that separately.
    Instead, webpack brings tools such as React and TypeScript together once installed
    and configured. So, we won’t use webpack until later in this section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解webpack不是一个项目创建工具。例如，它不会安装React或TypeScript - 我们必须单独做这件事。相反，一旦安装和配置，webpack会将React和TypeScript等工具结合起来。因此，我们不会在本节中早期使用webpack。
- en: Creating the folder structure
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文件夹结构
- en: 'We will start by creating a simple folder structure for the project. The structure
    will separate the project’s configuration files from the source code. Carry out
    the following steps to do this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先为项目创建一个简单的文件夹结构。这个结构将把项目的配置文件与源代码分开。执行以下步骤来完成这个任务：
- en: Open Visual Studio Code in the folder where you want the project to be.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要项目所在的文件夹中的Visual Studio Code。
- en: In the `src`. A folder can be created by right-clicking in the `src` is short
    for source code.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`。通过在`src`上右键单击可以创建一个文件夹，其中`src`是源代码的简称。
- en: So, the `src` folder will hold all the source code for the app. The project
    configuration files will be placed at the root of the project.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`src` 文件夹将包含应用的所有源代码。项目配置文件将被放置在项目的根目录中。
- en: Next, we will define the critical information about the project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义关于项目的关键信息。
- en: Creating package.json
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 package.json
- en: The `package.json` file defines our project name, description, npm scripts,
    dependent npm modules, and much more.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件定义了我们的项目名称、描述、npm 脚本、依赖的 npm 模块等等。'
- en: 'Create a `package.json` file at the root of the project with the following
    content:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的根目录中创建一个 `package.json` 文件，内容如下：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This file contains minimal information at the moment. However, it will eventually
    contain other details, such as React and TypeScript as the app’s dependencies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件目前包含最少的信息。然而，它最终将包含其他详细信息，例如 React 和 TypeScript 作为应用的依赖项。
- en: Note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information can be found on `package.json` at the following link: [https://docs.npmjs.com/cli/v8/configuring-npm/package-json](https://docs.npmjs.com/cli/v8/configuring-npm/package-json).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在以下链接的 `package.json` 中找到：[https://docs.npmjs.com/cli/v8/configuring-npm/package-json](https://docs.npmjs.com/cli/v8/configuring-npm/package-json)。
- en: Next, we will add the web page that will host the React app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加将托管 React 应用的网页。
- en: Adding a web page
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加网页
- en: 'An HTML page is going to host the app. In the `src` folder, create a file called
    `index.html` with the following content:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 HTML 页面将托管应用。在 `src` 文件夹中，创建一个名为 `index.html` 的文件，内容如下：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code snippet can be copied and pasted from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.html](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.html).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段可以从以下链接复制并粘贴：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.html](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.html)。
- en: The React app will be injected into the `div` element with an `id` attribute
    value of `"root"`. We will cover the injection of the React app in a later section,
    *Adding React*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: React 应用将被注入到具有 `"root"` 属性值的 `div` 元素中。我们将在后面的章节中介绍如何注入 React 应用，即*添加 React*。
- en: Adding TypeScript
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 TypeScript
- en: 'Next, we will install TypeScript into the project. To do this, carry out the
    following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装 TypeScript 到项目中。为此，执行以下步骤：
- en: Start by opening the Visual Studio Code terminal by opening the **Terminal**
    menu and clicking **New Terminal**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过打开 **终端** 菜单并点击 **新建终端** 来打开 Visual Studio Code 终端。
- en: 'We know from the last chapter that using `npm install` without specifying any
    options will install the dependencies listed inside `package.json`. The `install`
    command has options for the specific packages to be installed that aren’t in `package.json`
    yet. Execute the following command in the terminal to install `typescript`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从上一章知道，如果不指定任何选项使用 `npm install`，则会安装 `package.json` 内列出的依赖项。`install` 命令有选项用于安装尚未在
    `package.json` 中列出的特定包。在终端中执行以下命令来安装 `typescript`：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have also included a `--save-dev` option to specify that `typescript` should
    be installed as a **development-only** dependency. This is because TypeScript
    is only required during development and not at runtime.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还包含了一个 `--save-dev` 选项来指定 `typescript` 应该作为一个**仅开发**依赖项安装。这是因为 TypeScript
    只在开发期间需要，而不在运行时需要。
- en: 'After the command has finished, open `package.json`. You will see that `typescript`
    is now listed as a development dependency in the `devDependencies` section:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令完成后，打开 `package.json`。您将看到 `typescript` 现在在 `devDependencies` 部分中被列为一个开发依赖项：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the version (`4.6.4`) of `typescript` in the preceding code snippet
    will probably be different in your example. This is because `npm install` installs
    the latest version of the dependency unless a version is specified in the command.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面代码片段中 `typescript` 的版本（`4.6.4`）可能和您的示例不同。这是因为 `npm install` 会安装依赖项的最新版本，除非在命令中指定了版本。
- en: Next, we will create a TypeScript configuration file. Note that we aren’t going
    to configure TypeScript to do any transpilation – we will use Babel for that,
    which is covered later. So, the TypeScript configuration will be focused on type
    checking.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 TypeScript 配置文件。请注意，我们不会配置 TypeScript 进行任何转换编译 – 我们将使用 Babel 来做，这将在后面介绍。因此，TypeScript
    配置将专注于类型检查。
- en: 'To do this, create a file called `tsconfig.json` in the `root` folder and enter
    the following content into it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个任务，请在`root`文件夹中创建一个名为`tsconfig.json`的文件，并将以下内容输入到其中：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code snippet can be copied and pasted from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/tsconfig.json](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/tsconfig.json).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段可以从[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/tsconfig.json](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/tsconfig.json)复制和粘贴。
- en: 'Here is an explanation of each setting that has been configured that wasn’t
    explained in the last chapter:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对上一章未解释的每个设置的说明：
- en: Setting `noEmit` to `true` suppresses the TypeScript compiler from doing any
    transpilation.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`noEmit`设置为`true`可以阻止TypeScript编译器进行任何转换。
- en: 'Setting `allowSyntheticDefaultImports` and `esModuleInterop` to `true` allows
    React to be imported as a default import, like the following:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`allowSyntheticDefaultImports`和`esModuleInterop`设置为`true`允许React以默认导入的方式导入，如下所示：
- en: '[PRE12]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Without these settings set to `true`, React would have to be imported like
    this:'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不将这些设置设置为`true`，React将必须像这样导入：
- en: '[PRE13]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Setting `forceConsistentCasingInFileNames` to `true` enables the type-checking
    process to check the casing of referenced filenames in import statements are consistent.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`forceConsistentCasingInFileNames`设置为`true`可以启用类型检查过程，检查导入语句中引用的文件名的首字母大小写是否一致。
- en: Note
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the TypeScript compiler options, see the following
    link: [https://www.typescriptlang.org/docs/handbook/compiler-options.html](https://www.typescriptlang.org/docs/handbook/compiler-options.html).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于TypeScript编译器选项的更多信息，请参阅以下链接：[https://www.typescriptlang.org/docs/handbook/compiler-options.html](https://www.typescriptlang.org/docs/handbook/compiler-options.html)。
- en: Adding React
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加React
- en: 'Next, we will install React and its TypeScript types into the project. We will
    then add a React root component. To do this, carry out the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装React及其TypeScript类型到项目中。然后我们将添加一个React根组件。为此，执行以下步骤：
- en: 'Execute the following command in the terminal to install React:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令以安装React：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Reacts comes in two libraries:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: React有两个库：
- en: The core library is called `react`, which is used in all variants of React.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心库被称为`react`，它被用于所有版本的React。
- en: The specific React variant, which is the variant used to build web apps, is
    called `react-dom`. An example of a different variant would be the React Native
    variant used to build mobile apps.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定的React变体，用于构建Web应用的变体，称为`react-dom`。另一个变体的例子是用于构建移动应用的React Native变体。
- en: 'React doesn’t include TypeScript types – instead, they are in a separate npm
    package. Let’s install these now:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React不包含TypeScript类型——相反，它们在单独的npm包中。现在让我们安装这些包：
- en: '[PRE15]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The root component will be in a file called `index.tsx` in the `src` folder.
    Create this file with the following content:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根组件将位于`src`文件夹中的名为`index.tsx`的文件中。创建此文件并包含以下内容：
- en: '[PRE16]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This code snippet can be copied and pasted from [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.tsx).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段可以从[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/src/index.tsx)复制和粘贴。
- en: The structure of this file is similar to the `index.js` file in the alert component
    project from the first chapter. It injects the React app into a DOM element with
    an `id` of `'root'`. The app is straightforward – it displays a heading called
    **My React and** **TypeScript App!**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的结构与第一章中警报组件项目中的`index.js`文件类似。它将React应用注入到具有`id`为`'root'`的DOM元素中。应用很简单——它显示一个名为**My
    React and** **TypeScript App!**的标题。
- en: Notice that the file extension for `index` is `.tsx` rather than `.js`. This
    allows Babel and TypeScript to detect TypeScript files containing JSX in the transpilation
    and type-checking processes. A `.ts` extension can be used for TypeScript code
    that doesn’t contain any JSX.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`index`文件的扩展名是`.tsx`而不是`.js`。这允许Babel和TypeScript在转换和类型检查过程中检测包含JSX的TypeScript文件。对于不包含任何JSX的TypeScript代码，可以使用`.ts`扩展名。
- en: 'Also, notice `as HTMLElement` in the call to `createRoot`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意`createRoot`调用中的`as HTMLElement`：
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is called a `HTMLElement | null` because `document.getElementById` may
    not find an element and return `null`. However, we are confident that the element
    will be found because we specified it in the `index.html` file, so it is safe
    to narrow the type to `HTMLElement` using a type assertion.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为`HTMLElement | null`，因为`document.getElementById`可能找不到元素并返回`null`。然而，我们确信元素会被找到，因为我们已经在`index.html`文件中指定了它，所以使用类型断言将类型缩小到`HTMLElement`是安全的。
- en: React is now installed in the project, and the project also contains a simple
    React app.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: React现在已安装到项目中，项目还包含一个简单的React应用。
- en: Adding Babel
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Babel
- en: 'As mentioned earlier, Babel will transpile both React and TypeScript code into
    JavaScript in this project. Carry out the following steps to install and configure
    Babel:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Babel将在这个项目中将React和TypeScript代码转换为JavaScript。执行以下步骤以安装和配置Babel：
- en: 'Start by installing the core Babel library using the following command in Visual
    Studio Code’s terminal:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在Visual Studio Code的终端中使用以下命令安装核心Babel库：
- en: '[PRE30]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Babel is installed as a development dependency because it is only needed during
    development to transpile code and not when the app runs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Babel作为开发依赖项安装，因为它仅在开发期间需要将代码转换为JavaScript，而不是在应用运行时。
- en: 'A shortened version of this command is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的简短版本如下：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`i` is short for `install`, and `-D` is short for `--save-dev`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`i`代表`install`，`-D`代表`--save-dev`。'
- en: 'Next, install a Babel plugin called `@babel/preset-env` that allows the latest
    JavaScript features to be used:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装一个名为`@babel/preset-env`的Babel插件，它允许使用最新的JavaScript功能：
- en: '[PRE32]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, install a Babel plugin called `@babel/preset-react` that enables React
    code to be transformed into JavaScript:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，安装一个名为`@babel/preset-react`的Babel插件，它可以将React代码转换为JavaScript：
- en: '[PRE33]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Similarly, install a Babel plugin called `@babel/preset-typescript` that enables
    TypeScript code to be transformed into JavaScript:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，安装一个名为`@babel/preset-typescript`的Babel插件，它可以将TypeScript代码转换为JavaScript：
- en: '[PRE34]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The last two plugins to install allow the use of the async and await features
    in JavaScript:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后两个要安装的插件允许在JavaScript中使用async和await功能：
- en: '[PRE35]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Babel can be configured in a file called `.babelrc.json`. Create this file
    at the root of the project with the following content:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Babel可以在一个名为`.babelrc.json`的文件中进行配置。在项目的根目录下创建此文件，并包含以下内容：
- en: '[PRE36]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This code snippet can be found at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/.babelrc.json](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/.babelrc.json).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段可以在[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/.babelrc.json](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/.babelrc.json)找到。
- en: The preceding configuration tells Babel to use the installed plugins. Babel
    is now installed and configured.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置告诉Babel使用已安装的插件。Babel现在已安装并配置。
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about Babel, see the following link: [https://babeljs.io/](https://babeljs.io/).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Babel的信息，请参阅以下链接：[https://babeljs.io/](https://babeljs.io/)。
- en: Next, we will glue everything together with webpack.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用webpack将所有内容粘合在一起。
- en: Adding webpack
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加webpack
- en: Webpack is a popular tool that primarily bundles JavaScript source code files
    together. It can run other tools, such as Babel, as it scans the files. So, we
    will use webpack to scan all the source files and transpile them into JavaScript.
    The output from the webpack process will be a single JavaScript bundle that is
    referenced in `index.html`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是一个流行的工具，主要用于将JavaScript源代码文件捆绑在一起。它在扫描文件时可以运行其他工具，如Babel。因此，我们将使用webpack扫描所有源文件并将它们转换为JavaScript。Webpack处理过程的输出将是一个在`index.html`中引用的单个JavaScript包。
- en: Installing webpack
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装webpack
- en: 'Carry out the following steps to install webpack and its associated libraries:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以安装webpack及其相关库：
- en: 'Start by installing webpack using the following command in the terminal in
    Visual Studio Code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在Visual Studio Code的终端中使用以下命令安装webpack：
- en: '[PRE51]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This installs the core webpack library as well as its command-line interface.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装核心webpack库以及其命令行界面。
- en: Webpack has TypeScript types in the `webpack` package, so we don’t need to install
    them separately.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack在`webpack`包中包含TypeScript类型，因此我们不需要单独安装它们。
- en: 'Next, run the following command to install webpack’s development server:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令以安装webpack的开发服务器：
- en: '[PRE52]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Webpack’s development server is used during developments to host the web app
    and automatically updates as changes are made to the code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，Webpack 的开发服务器用于托管 Web 应用程序，并在代码更改时自动更新。
- en: 'A webpack plugin is required to allow Babel to transpile the React and TypeScript
    code into JavaScript. This plugin is called `babel-loader`. Install this using
    the following command:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要一个 Webpack 插件来允许 Babel 将 React 和 TypeScript 代码转换为 JavaScript。这个插件被称为 `babel-loader`。使用以下命令安装它：
- en: '[PRE53]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Webpack can create the `index.html` file that hosts the React app. We want
    webpack to use the `index.html` file in the `src` folder as a template and add
    the React app’s bundle to it. A plugin called `html-webpack-plugin` is capable
    of doing this. Install this plugin using the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Webpack 可以创建一个 `index.html` 文件来托管 React 应用程序。我们希望 Webpack 使用 `src` 文件夹中的 `index.html`
    文件作为模板，并将 React 应用的包添加到其中。一个名为 `html-webpack-plugin` 的插件可以完成这项工作。使用以下命令安装此插件：
- en: '[PRE54]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Webpack and its associated libraries are now installed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 及其相关库现在已安装。
- en: Configuring webpack
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Webpack
- en: 'Next, we will configure webpack to do everything we need. Separate configurations
    for development and production can be created because the requirements are slightly
    different. However, we will focus on a configuration for development in this chapter.
    Carry out the following steps to configure webpack:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将配置 Webpack 以完成我们所需的一切。可以创建开发和生产的不同配置，因为它们的要求略有不同。然而，在本章中，我们将专注于开发配置。执行以下步骤以配置
    Webpack：
- en: 'First, install a library called `ts-node`, which allows the configuration to
    be defined in a TypeScript file:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，安装一个名为 `ts-node` 的库，它允许在 TypeScript 文件中定义配置：
- en: '[PRE55]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, we can add the development configuration file. Create a file called `webpack.dev.config.ts`
    in the project root. The code to go in this file is lengthy and can be copied
    and pasted from the following link: [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/webpack.dev.config.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/webpack.dev.config.ts).
    In the following steps, we will explain the different parts of this file.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以添加开发配置文件。在项目根目录下创建一个名为 `webpack.dev.config.ts` 的文件。这个文件中的代码很长，可以从以下链接复制粘贴：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/webpack.dev.config.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter3/Section1-Creating-a-project-with-Webpack/webpack.dev.config.ts)。在接下来的步骤中，我们将解释这个文件的不同部分。
- en: 'The configure file starts with various import statements and a type for the
    configuration object:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置文件以各种导入语句和一个配置对象类型开始：
- en: '[PRE56]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Let’s review the most important points:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾以下最重要的几点：
- en: The `path` node library will tell webpack where to place the bundle.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path` 节点库将告诉 Webpack 将包放置在哪里。'
- en: '`HtmlWebpackPlugin` will be used to create `index.html`.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HtmlWebpackPlugin` 将被用来创建 `index.html`。'
- en: The webpack configuration TypeScript types come from both the `webpack` and
    `webpack-dev-server` packages. So, we combine them using an intersect type, creating
    a type called `Configuration`.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 的配置 TypeScript 类型来自 `webpack` 和 `webpack-dev-server` 包。因此，我们使用交集类型将它们结合起来，创建了一个名为
    `Configuration` 的类型。
- en: 'The configuration object is then defined as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后配置对象定义如下：
- en: '[PRE68]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Let’s review the most important points here:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾以下最重要的几点：
- en: The `mode` property tells webpack the configuration is for development, meaning
    that the React development tools are included in the bundle
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode` 属性告诉 Webpack 配置是用于开发的，这意味着 React 开发工具将包含在包中。'
- en: The `output.publicPath` property is the root path in the app, which is important
    for deep linking in the dev server to work correctly
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output.publicPath` 属性是应用中的根路径，这对于在开发服务器中正确实现深度链接非常重要。'
- en: The `entry` property tells webpack where the React app’s entry point is, which
    is `index.tsx` in our project
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry` 属性告诉 Webpack React 应用程序的入口点在哪里，在我们的项目中是 `index.tsx`。'
- en: Webpack expects the configuration object to be a default export, so we export
    the `config` object as a default export
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 期望配置对象是一个默认导出，因此我们将 `config` 对象作为默认导出。
- en: 'Further configuration is highlighted by the following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码突出了进一步的配置：
- en: '[PRE77]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The `module` property informs webpack how different modules should be processed.
    We need to tell webpack to use `babel-loader` for files with `.js`, `.ts`, and
    `.``tsx` extensions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`module`属性通知webpack如何处理不同的模块。我们需要告诉webpack对于具有`.js`、`.ts`和`.tsx`扩展名的文件使用`babel-loader`。'
- en: The `resolve.extensions` property tells webpack to look for TypeScript files
    and JavaScript files during module resolution.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolve.extensions`属性告诉webpack在模块解析期间查找TypeScript文件和JavaScript文件。'
- en: 'Next, a couple of plugins are defined:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义了几个插件：
- en: '[PRE97]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: As mentioned earlier, `HtmlWebpackPlugin` creates the HTML file. It has been
    configured to use `index.html` in the `src` folder as a template.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`HtmlWebpackPlugin`创建HTML文件。它已被配置为使用`src`文件夹中的`index.html`作为模板。
- en: '`HotModuleReplacementPlugin` allows modules to be updated while an application
    is running, without a full reload.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`HotModuleReplacementPlugin`允许在应用运行时更新模块，而无需完全重新加载。'
- en: 'Lastly, the following properties complete the configuration:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，以下属性完成了配置：
- en: '[PRE106]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The `devtool` property tells webpack to use full inline source maps, which allow
    the original source code to be debugged before transpilation.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`devtool`属性告诉webpack使用完整的内联源映射，这允许在转译之前调试原始源代码。'
- en: The `devServer` property configures the webpack development server. It configures
    the web server root to be the `dist` folder and to serve files on port `4000`.
    Now, `historyApiFallback` is required for deep links to work, and we have also
    specified to open the browser after the server has been started.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`devServer`属性配置webpack开发服务器。它配置了Web服务器根目录为`dist`文件夹，并在端口`4000`上提供文件。现在，`historyApiFallback`对于深度链接是必需的，并且我们还指定了在服务器启动后打开浏览器。'
- en: The development configuration is now complete. But before we try to run the
    app in development mode, we need to create an npm script to run webpack.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 开发配置现在已经完成。但在我们尝试以开发模式运行应用之前，我们需要创建一个npm脚本来运行webpack。
- en: 'First, open `package.json` and add a `scripts` section with a `start` script:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`package.json`并添加一个包含`start`脚本的`scripts`部分：
- en: '[PRE117]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Now, we can run the app in development mode by running the following command
    in the terminal:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在终端运行以下命令以开发模式运行应用：
- en: '[PRE123]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The `npm run` command executes a script in the `scripts` section of `package.json`.
    The `start` script is commonly used to run a program in development mode. It is
    so common that npm recognizes this without the `run` part. So, the command can
    be shortened to the following:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run`命令在`package.json`的`scripts`部分执行一个脚本。`start`脚本通常用于以开发模式运行程序。它如此常见，以至于npm不需要`run`部分就能识别。因此，命令可以缩短为以下形式：'
- en: '[PRE124]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'After a few seconds, the app opens in the default browser:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，应用在默认浏览器中打开：
- en: '![Figure 3.1 – The app running in a browser in development mode](img/B19051_03_01.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 开发模式下在浏览器中运行的应用](img/B19051_03_01.jpg)'
- en: Figure 3.1 – The app running in a browser in development mode
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 开发模式下在浏览器中运行的应用
- en: 'Leave the app running and open the `index.tsx` file. Change the content of
    the `h1` element to something slightly different:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持应用运行并打开`index.tsx`文件。将`h1`元素的内容更改为略有不同：
- en: '[PRE125]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'When the file is saved, notice that the running app automatically refreshes:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件被保存时，请注意正在运行的应用会自动刷新：
- en: '![Figure 3.2 – The app is automatically refreshed](img/B19051_03_02.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 应用自动刷新](img/B19051_03_02.jpg)'
- en: Figure 3.2 – The app is automatically refreshed
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 应用自动刷新
- en: 'That completes the setup of the React and TypeScript project using webpack.
    Here’s a recap of the key points of the setup:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了使用webpack设置React和TypeScript项目的配置。以下是设置的关键点回顾：
- en: An HTML file is required to host the React app
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要一个HTML文件来托管React应用
- en: Webpack transpiles the app’s React and TypeScript code into JavaScript with
    the help of Babel and then references it in the HTML file
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack在Babel的帮助下将应用的React和TypeScript代码转译成JavaScript，然后在HTML文件中引用它
- en: Webpack has a development server that automatically refreshes the app as we
    write code
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack有一个开发服务器，它会自动在我们编写代码时刷新应用
- en: Note
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information about webpack is available at the following link: [https://webpack.js.org/](https://webpack.js.org/).'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于webpack的信息可在以下链接找到：[https://webpack.js.org/](https://webpack.js.org/)。
- en: That was an incredible amount of work to set up a React and TypeScript app,
    and it only does a fraction of what we will need to build a real app. For example,
    CSS can’t be used, and the setup doesn’t support unit testing. Luckily, there
    is a much easier way to create React and TypeScript projects, which we will learn
    in the next section. What you have learned in this section is really important
    though, because the tool we are about to use also uses webpack under the hood.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 React 和 TypeScript 应用程序需要做大量的工作，而且它只能完成我们将要构建的实际应用程序的一小部分。例如，不能使用 CSS，并且设置不支持单元测试。幸运的是，有一个更简单的方法来创建
    React 和 TypeScript 项目，我们将在下一节中学习。不过，在本节中学到的内容非常重要，因为我们即将使用的工具在底层也使用了 webpack。
- en: Creating a project with Create React App
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Create React App 创建项目
- en: Create React App is a popular tool for creating React projects. It is based
    on webpack, so the knowledge from the last section will give you an understanding
    of how Create React App works. In this section, we will use Create React App to
    create a React and TypeScript project.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App 是创建 React 项目的流行工具。它基于 webpack，因此上一节的知识将帮助您了解 Create React App
    的工作原理。在本节中，我们将使用 Create React App 创建一个 React 和 TypeScript 项目。
- en: Using Create React App
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Create React App
- en: Unlike the setup in the last section, Create React App generates a React and
    TypeScript project with all the common tools we will likely require, including
    CSS and unit testing support.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一节的设置不同，Create React App 会生成一个包含我们可能需要的所有常用工具的 React 和 TypeScript 项目，包括 CSS
    和单元测试支持。
- en: 'To use Create React App, open Visual Studio Code in a blank folder of your
    choice and run the following command:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Create React App，请在您选择的空白文件夹中打开 Visual Studio Code 并运行以下命令：
- en: '[PRE128]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '`npx` allows npm packages to temporarily be installed and run. It is a common
    method of running project scaffolding tools such as Create React App.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`npx` 允许 npm 包临时安装和运行。这是运行项目脚手架工具（如 Create React App）的常用方法。'
- en: '`create-react-app` is the package for the Create React App tool that creates
    the project. We have passed it the app name, `myapp`. We have also specified that
    the `typescript` template should be used to create the project.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-react-app` 是用于创建项目的 Create React App 工具的包。我们已传递了应用程序名称 `myapp`。我们还指定了应使用
    `typescript` 模板来创建项目。'
- en: It takes a minute or so for the project to be created, but this is much quicker
    than creating it manually with webpack!
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目需要花费大约一分钟的时间，但这比手动使用 webpack 创建要快得多！
- en: When the command has finished creating the project, reopen the project in Visual
    Studio Code in the `myapp` folder. Note that your directory might be slightly
    different if you called the app something different. It is important to be in
    the app name folder; otherwise, the dependencies may be installed in the wrong
    location.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令完成创建项目后，请在 Visual Studio Code 中重新打开位于 `myapp` 文件夹中的项目。请注意，如果您将应用程序命名为其他名称，您的目录可能会有所不同。在应用程序名称文件夹中非常重要；否则，依赖项可能会安装在不正确的位置。
- en: Next, we will understand what linting is and add an extension for it into Visual
    Studio Code.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解 linting 是什么，并将其扩展程序添加到 Visual Studio Code 中。
- en: Adding linting to Visual Studio Code
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 linting 添加到 Visual Studio Code
- en: '**Linting** is the process of checking code for potential problems. It is common
    practice to use linting tools to catch problems early in the development process
    as code is written. **ESLint** is a popular tool that can lint React and TypeScript
    code. Fortunately, Create React App has already installed and configured ESLint
    in our project.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linting** 是检查代码中潜在问题的过程。在代码编写过程中，使用 linting 工具来捕捉问题是一种常见的做法。**ESLint** 是一个流行的工具，可以
    lint React 和 TypeScript 代码。幸运的是，Create React App 已经在我们的项目中安装并配置了 ESLint。'
- en: 'Editors such as Visual Studio Code can be integrated with ESLint to highlight
    potential problems. Carry out the following steps to install an ESLint extension
    into Visual Studio Code:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 例如 Visual Studio Code 这样的编辑器可以与 ESLint 集成，以突出显示潜在问题。按照以下步骤将 ESLint 扩展程序安装到 Visual
    Studio Code 中：
- en: Open up the **Extensions** area in Visual Studio Code. The **Extensions** option
    is in the **Preferences** menu in the **File** menu on Windows *or* in the **Preferences**
    menu in the **Code** menu on a Mac.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中打开 **扩展** 区域。在 Windows 的 **文件** 菜单中的 **首选项** 菜单，或者在 Mac
    的 **代码** 菜单中的 **首选项** 菜单中都可以找到 **扩展** 选项。
- en: A list of extensions will appear on the left-hand side and the search box above
    the extensions list can be used to find a particular extension. Enter `eslint`
    into the extensions list search box.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧将出现一个扩展列表，并且可以在扩展列表上方的搜索框中搜索特定扩展。在扩展列表搜索框中输入 `eslint`。
- en: '![Figure 3.3 – The Visual Studio Code ESLint extension](img/B19051_03_03.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – Visual Studio Code ESLint 扩展](img/B19051_03_03.jpg)'
- en: Figure 3.3 – The Visual Studio Code ESLint extension
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – Visual Studio Code ESLint 扩展
- en: An extension by Microsoft called ESLint should appear at the top of the list.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 应该出现在列表顶部的由微软开发的扩展 ESLint。
- en: Click the **Install** button to install the extension.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装** 按钮安装扩展。
- en: Now, we need to make sure the ESLint extension is configured to check React
    and TypeScript. So, open the **Settings** area in Visual Studio Code. The **Settings**
    option is in the **Preferences** menu in the **File** menu on Windows or in the
    **Preferences** menu in the **Code** menu on a Mac.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要确保 ESLint 扩展已配置为检查 React 和 TypeScript。因此，在 Visual Studio Code 中打开 **设置**
    区域。在 Windows 的 **文件** 菜单中的 **首选项** 菜单或 Mac 上的 **代码** 菜单中的 **首选项** 菜单中找到 **设置**
    选项。
- en: 'In the settings search box, enter `eslint: probe` and select the **Workspace**
    tab:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在设置搜索框中，输入 `eslint: probe` 并选择 **工作区** 选项卡：'
- en: '![Figure 3.4 – Visual Studio Code ESLint Probe settings](img/B19051_03_04.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – Visual Studio Code ESLint 探针设置](img/B19051_03_04.jpg)'
- en: Figure 3.4 – Visual Studio Code ESLint Probe settings
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – Visual Studio Code ESLint 探针设置
- en: This setting defines the languages to use when ESLint checks code.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置定义了 ESLint 检查代码时使用的语言。
- en: Make sure that **typescript** and **typescriptreact** are on the list. If not,
    add them using the **Add** **Item** button.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保列表中包含 **typescript** 和 **typescriptreact**。如果没有，请使用 **添加** **项目** 按钮添加它们。
- en: The ESLint extension for Visual Studio Code is now installed and configured
    in the project.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 的 ESLint 扩展现在已在项目中安装和配置。
- en: Note
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about ESLint, see the following link: [https://eslint.org/](https://eslint.org/).'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 ESLint 的更多信息，请参阅以下链接：[https://eslint.org/](https://eslint.org/)。
- en: Next, we will add automatic code formatting to the project.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向项目中添加自动代码格式化。
- en: Adding code formatting
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加代码格式化
- en: The next tool we will set up automatically formats code. Automatic code formatting
    ensures code is consistently formatted, which helps its readability. Having consistently
    formatted code also helps developers see the important changes in a code review
    – rather than differences in formatting.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个我们将自动设置的工具有助于格式化代码。自动代码格式化确保代码格式一致，这有助于提高可读性。拥有格式一致的代码也有助于开发者在代码审查中看到重要的更改——而不是格式上的差异。
- en: '**Prettier** is a popular tool capable of formatting React and TypeScript code.
    Unfortunately, Create React App doesn’t install and configure it for us. Carry
    out the following steps to install and configure Prettier in the project:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**Prettier** 是一个流行的工具，能够格式化 React 和 TypeScript 代码。不幸的是，Create React App 不会为我们安装和配置它。请按照以下步骤在项目中安装和配置
    Prettier：'
- en: 'Install Prettier using the following command in the terminal in Visual Studio
    Code:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在 Visual Studio Code 的终端中安装 Prettier：
- en: '[PRE129]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Prettier is installed as a development dependency because it is only used during
    development time and not at runtime.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier 作为开发依赖项安装，因为它仅在开发时间使用，而不在运行时使用。
- en: 'Prettier has overlapping style rules with ESLint, so install the following
    two libraries to allow Prettier to take responsibility for the styling rules from
    ESLint:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Prettier 与 ESLint 有重叠的样式规则，因此安装以下两个库以允许 Prettier 从 ESLint 负责样式规则：
- en: '[PRE130]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '`eslint-config-prettier` disables conflicting ESLint rules, and `eslint-plugin-prettier`
    is an ESLint rule that formats code using Prettier.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`eslint-config-prettier` 禁用冲突的 ESLint 规则，而 `eslint-plugin-prettier` 是一个使用 Prettier
    格式化代码的 ESLint 规则。'
- en: 'The ESLint configuration needs to be updated to allow Prettier to manage the
    styling rules. Create React App allows ESLint configuration overrides in an `eslintConfig`
    section in `package.json`. Add the Prettier rules to the `eslintConfig` section
    in `package.json` as follows:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要更新 ESLint 配置以允许 Prettier 管理样式规则。Create React App 允许在 `package.json` 中的 `eslintConfig`
    部分覆盖 ESLint 配置。如下所示，将 Prettier 规则添加到 `package.json` 中的 `eslintConfig` 部分：
- en: '[PRE131]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Prettier can be configured in a file called `.prettierrc.json`. Create this
    file with the following content in the root folder:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以在名为 `.prettierrc.json` 的文件中配置 Prettier。在根目录中创建此文件，并包含以下内容：
- en: '[PRE142]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'We have specified the following:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了以下内容：
- en: Lines wrap at 100 characters
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行在 100 个字符处换行
- en: String qualifiers are single quotes
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串限定符是单引号
- en: Semicolons are placed at the end of statements
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分号放置在语句的末尾
- en: The indentation level is two spaces
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩进级别为两个空格
- en: A trailing comma is added to multi-line arrays and objects
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多行数组和对象的末尾添加尾随逗号
- en: Existing line endings are maintained
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持现有的行结束符
- en: Note
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information on the configuration options can be found at the following
    link: [https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html).'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 更多有关配置选项的信息可以在以下链接中找到：[https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html)。
- en: Prettier is now installed and configured in the project.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier 现已安装并配置到项目中。
- en: 'Visual Studio Code can integrate with Prettier to automatically format code
    when source files are saved. So, let’s install a Prettier extension into Visual
    Studio Code:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 可以与 Prettier 集成，在保存源文件时自动格式化代码。因此，让我们将 Prettier 扩展安装到 Visual
    Studio Code 中：
- en: 'Open the `prettier` into the extensions list search box. An extension called
    **Prettier – Code formatter** should appear at the top of the list:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扩展列表的搜索框中打开 `prettier`。一个名为 **Prettier – 代码格式化器** 的扩展应该出现在列表的顶部：
- en: '![Figure 3.5 – The Visual Studio Code Prettier extension](img/B19051_03_05.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – Visual Studio Code Prettier 扩展](img/B19051_03_05.jpg)'
- en: Figure 3.5 – The Visual Studio Code Prettier extension
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – Visual Studio Code Prettier 扩展
- en: Click the **Install** button to install the extension.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装** 按钮来安装扩展。
- en: 'Next, open the **Settings** area in Visual Studio Code. Select the **Workspace**
    tab and make sure the **Format On Save** option is ticked:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 Visual Studio Code 中打开 **设置** 区域。选择 **工作区** 选项卡并确保 **保存时格式化** 选项被勾选：
- en: '![Figure 3.6 – Visual Studio Code “Format On Save” setting](img/B19051_03_06.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – Visual Studio Code “保存时格式化”设置](img/B19051_03_06.jpg)'
- en: Figure 3.6 – Visual Studio Code “Format On Save” setting
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – Visual Studio Code “保存时格式化”设置
- en: This setting tells Visual Studio Code to automatically format code in files
    that are saved.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置告诉 Visual Studio Code 在保存文件时自动格式化代码。
- en: 'There is one more setting to set. This is the default formatter that Visual
    Studio Code should use to format code. Click the **Workspace** tab and make sure
    **Default Formatter** is set to **Prettier -** **Code formatter**:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要设置另一个设置。这是 Visual Studio Code 应用于格式化代码的默认格式化器。点击 **工作区** 选项卡并确保 **默认格式化器**
    设置为 **Prettier -** **代码格式化器**：
- en: '![Figure 3.7 – Setting Default Formatter to Prettier - Code formatter](img/B19051_03_07.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 将默认格式化器设置为 Prettier - 代码格式化器](img/B19051_03_07.jpg)'
- en: Figure 3.7 – Setting Default Formatter to Prettier - Code formatter
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 将默认格式化器设置为 Prettier - 代码格式化器
- en: The Prettier extension for Visual Studio Code is now installed and configured
    in the project. Next, we will run the app in development mode.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 的 Prettier 扩展现在已安装并配置到项目中。接下来，我们将以开发模式运行应用程序。
- en: Starting the app in development mode
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以开发模式启动应用程序
- en: 'Carry out the following steps to start the app in development mode:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以以开发模式启动应用程序：
- en: 'Create React App has already created an npm script called `start`, which runs
    the app in development mode. Run this script in the terminal as follows:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Create React App 已经创建了一个名为 `start` 的 npm 脚本，该脚本以开发模式运行应用程序。在终端中运行此脚本如下：
- en: '[PRE150]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'After a few seconds, the app will appear in the default browser:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，应用程序将出现在默认浏览器中：
- en: '![Figure 3.8 – The React app running in development mode](img/B19051_03_08.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 以开发模式运行的 React 应用程序](img/B19051_03_08.jpg)'
- en: Figure 3.8 – The React app running in development mode
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 以开发模式运行的 React 应用程序
- en: If your app reports Prettier formatting issues, open the file in question and
    save it. This will correctly format the file and resolve the errors.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序报告了 Prettier 格式化问题，请打开相关的文件并保存。这将正确格式化文件并解决错误。
- en: 'Open `App.tsx` and change the **Learn React** link to **Learn React** **and
    TypeScript**:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.tsx` 并将 **学习 React** 链接更改为 **学习 React** **和 TypeScript**：
- en: '[PRE151]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'After the file is saved, the running app is automatically refreshed with the
    updated link text:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，运行中的应用程序将自动刷新以更新链接文本：
- en: '![Figure 3.9 – The updated React app](img/B19051_03_09.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 更新的 React 应用程序](img/B19051_03_09.jpg)'
- en: Figure 3.9 – The updated React app
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 更新的 React 应用程序
- en: 'Experiment with the code in `App.tsx`. Add a used variable and pass an invalid
    prop in a JSX element:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.tsx` 中的代码进行实验。添加一个已使用的变量并在 JSX 元素中传递一个无效的属性：
- en: '[PRE159]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: As expected, the problems are caught and reported in Visual Studio Code. The
    issues are also reported in the browser.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，问题被捕获并在 Visual Studio Code 中报告。问题也在浏览器中报告。
- en: '![Figure 3.10 – Problems caught by Visual Studio Code](img/B19051_03_10.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – Visual Studio Code 捕获的问题](img/B19051_03_10.jpg)'
- en: Figure 3.10 – Problems caught by Visual Studio Code
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – Visual Studio Code 捕获的问题
- en: Remove the invalid code and stop the app from running before continuing. The
    shortcut key for stopping the app is *Ctrl* + *C*.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，删除无效代码并停止应用程序运行。停止应用程序的快捷键是 *Ctrl* + *C*。
- en: We have now seen how Create React App provides a productive development experience.
    Next, we will produce a production build.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 Create React App 如何提供高效的开发体验。接下来，我们将生成生产构建。
- en: Producing a production build
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成生产构建
- en: 'Carry out the following steps to produce a build of the app that can be deployed
    into production:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤生成可以部署到生产环境的应用程序构建：
- en: 'Create React App has already created an npm script called `build` that produces
    all the artifacts for deployment to production. Run this script in the terminal
    as follows:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Create React App 已经创建了一个名为 `build` 的 npm 脚本，用于生成部署到生产所需的所有工件。在终端中按照以下方式运行此脚本：
- en: '[PRE167]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: After a few seconds, the deployment artifacts are placed in a `build` folder.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，部署工件将放置在 `build` 文件夹中。
- en: Open the `build` folder – it contains many files. The root file is `index.html`,
    which references the other JavaScript, CSS, and image files. All the files are
    optimized for production with whitespace removed and the JavaScript minified.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `build` 文件夹 – 它包含许多文件。根文件是 `index.html`，它引用了其他 JavaScript、CSS 和图像文件。所有文件都经过优化，用于生产，已移除空白并压缩
    JavaScript。
- en: 'This completes the production build and the React and TypeScript project set
    up with Create React App. Here’s a recap of the key points of the setup:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了生产构建和用 Create React App 设置的 React 和 TypeScript 项目的设置。以下是设置的关键点回顾：
- en: The `npx` tool can execute the Create React App library, specifying the `typescript`
    template to create a React and TypeScript project.
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npx` 工具可以执行 Create React App 库，指定 `typescript` 模板以创建一个 React 和 TypeScript
    项目。'
- en: Create React App sets up many useful project features, such as linting, CSS
    support, and SVG support.
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Create React App 设置了许多有用的项目功能，例如代码检查、CSS 支持、SVG 支持。
- en: Create React App also sets up npm scripts to run the app in development mode
    and produce a production build.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Create React App 还设置了 npm 脚本来在开发模式下运行应用程序并生成生产构建。
- en: One feature that Create React App doesn’t set up is automatic code formatting.
    However, Prettier can be installed and configured manually to provide this capability.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Create React App 没有设置的一个功能是自动代码格式化。然而，Prettier 可以手动安装和配置以提供此功能。
- en: Keep this project safe because we will continue to use it in the next section.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 请保持此项目安全，因为我们将在下一节继续使用它。
- en: Next, we will learn how to create a React component that uses TypeScript for
    type checking.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何创建一个使用 TypeScript 进行类型检查的 React 组件。
- en: Creating a React and TypeScript component
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 React 和 TypeScript 组件
- en: In [*Chapter 1*](B19051_01.xhtml#_idTextAnchor015)*, Introducing React*, we
    built an alert component using React. In this section, we will use TypeScript
    to make the component strongly typed and experience the benefits. We start by
    adding a type to the alert component’s props and then experiment with defining
    a type for its state. After completing the alert component, we will inspect the
    component using React’s DevTools.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 1 章*](B19051_01.xhtml#_idTextAnchor015)*，介绍 React* 中，我们使用 React 创建了一个警告组件。在本节中，我们将使用
    TypeScript 使组件具有强类型，并体验其带来的好处。我们首先为警告组件的属性添加一个类型，然后尝试为其状态定义一个类型。完成警告组件后，我们将使用
    React 的 DevTools 检查该组件。
- en: Adding a props type
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加属性类型
- en: 'We will continue using the React and TypeScript project created in the last
    section with Create React App. Take the following steps to add a strongly typed
    version of the alert component:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用上一节中用 Create React App 创建的 React 和 TypeScript 项目。按照以下步骤添加具有强类型的警告组件：
- en: Open the project in Visual Studio Code if it isn’t already open. Make sure you
    open the project in the app name folder so that `package.json` is at the root.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果项目尚未打开，请打开 Visual Studio Code 中的项目。确保您在应用程序名称文件夹中打开项目，以便 `package.json` 位于根目录。
- en: Create a new file in the `src` folder called `Alert.tsx`. Paste in the JavaScript
    version of the alert component, which can be found on GitHub at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section7-Using-events/Alert.js](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section7-Using-events/Alert.js).
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 文件夹中创建一个名为 `Alert.tsx` 的新文件。粘贴警告组件的 JavaScript 版本，该版本可在 GitHub 上找到：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section7-Using-events/Alert.js](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter1/Section7-Using-events/Alert.js)。
- en: Notice that type errors are reported on some of the props because they can only
    be inferred as having the `any` type.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，某些属性上报告了类型错误，因为它们只能推断为具有 `any` 类型。
- en: 'Add the following type just above the component. This will be the type for
    the component props:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件上方添加以下类型。这将成为组件属性的类型：
- en: '[PRE168]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The `heading` and `children` props are required but the rest of the props are
    optional.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`heading` 和 `children` 属性是必需的，但其余属性是可选的。'
- en: The `children` prop is given a special type called `React.ReactNode`. This allows
    it to accept JSX elements as well as strings.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`children` 属性被赋予了一个特殊类型，称为 `React.ReactNode`。这允许它接受 JSX 元素以及字符串。'
- en: The name of the type can be anything, but it is common practice to call it `Props`.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 类型名称可以是任何名称，但通常将其称为 `Props`。
- en: 'Remember from the *Creating interfaces* section in [*Chapter 2*](B19051_02.xhtml#_idTextAnchor044)*,
    Introducing TypeScript*, that the interface syntax can be used to create types
    as an alternative to type aliases. An interface version of the `Props` type is
    as follows:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 记住从 [*第2章*](B19051_02.xhtml#_idTextAnchor044)* “创建接口”部分，在 [*介绍 TypeScript*](B19051_02.xhtml#_idTextAnchor044)
    中，接口语法可以用作创建类型的替代方案，而不是类型别名。`Props` 类型的接口版本如下：
- en: '[PRE175]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: As mentioned in the last chapter, it is largely personal preference whether
    you choose type aliases or interfaces for the type of component props.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 如上章所述，选择类型别名或接口作为组件属性的类型主要取决于个人喜好。
- en: 'Now, assign the `Props` type to the alert component after the destructed parameters:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解构参数之后将 `Props` 类型分配给警报组件：
- en: '[PRE176]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: The alert props are now strongly typed.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 警报属性现在具有强类型。
- en: 'Open `App.tsx` and replace the header element with the alert component. Don’t
    forget to import the alert component before using it in the JSX. Don’t pass any
    props into `Alert` to test the type checking:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.tsx` 并将标题元素替换为警报组件。在使用 JSX 之前，不要忘记导入警报组件。不要向 `Alert` 传递任何属性以测试类型检查：
- en: '[PRE185]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'As expected, a type error is raised on `Alert`:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，在 `Alert` 上引发了类型错误：
- en: '![Figure 3.11 – Type error on the Alert component](img/B19051_03_11.jpg)'
  id: totrans-440
  prefs: []
  type: TYPE_IMG
  zh: '![图3.11 – 警报组件上的类型错误](img/B19051_03_11.jpg)'
- en: Figure 3.11 – Type error on the Alert component
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 – 警报组件上的类型错误
- en: 'Pass in a `header` prop to `Alert`, and give it some content:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `Alert` 传递一个 `header` 属性并给它一些内容：
- en: '[PRE196]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: The type errors will disappear.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 类型错误将消失。
- en: Start the app in development mode if not already running (`npm start`). After
    that, the app component appears on the page as expected.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未运行，请以开发模式启动应用程序（`npm start`）。之后，应用程序组件将按预期出现在页面上。
- en: Next, we will learn how to explicitly give the React component state a type.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何显式地为 React 组件状态赋予类型。
- en: Adding a state type
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加状态类型
- en: 'Follow these steps to experiment with the `visible` state type in the alert
    component:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在警报组件中实验 `visible` 状态类型：
- en: Open `Alert.tsx` and hover over the `visible` state variable to determine its
    inferred type. It has been inferred to be `boolean` because it has been initialized
    with the `true` value. The `boolean` type is precisely what we want.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Alert.tsx` 并将鼠标悬停在 `visible` 状态变量上以确定其推断类型。它已被推断为 `boolean` 类型，因为它被初始化为
    `true` 值。`boolean` 类型正是我们想要的类型。
- en: As an experiment, remove the initial value of `true` passed into `useState`.
    Then, hover over the `visible` state variable again. It has been inferred to be
    `undefined` because no default value has been passed into `useState`. This obviously
    isn’t the type we want.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为实验，移除传递给 `useState` 的初始值 `true`。然后，再次将鼠标悬停在 `visible` 状态变量上。它已被推断为 `undefined`
    类型，因为没有传递默认值到 `useState`。这显然不是我们想要的类型。
- en: 'Sometimes, the `useState` type isn’t inferred to be the type we want, like
    in the previous step. In these cases, the type of the state can be explicitly
    defined using a `useState`. Explicitly give the `visible` state a `boolean` type
    by adding the following generic argument:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，`useState` 类型没有被推断为我们想要的类型，就像在上一个步骤中那样。在这些情况下，可以使用 `useState` 显式地定义状态类型。通过添加以下泛型参数显式地为
    `visible` 状态赋予 `boolean` 类型：
- en: '[PRE197]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Note
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A generic argument is like a regular function argument but defines a type for
    the function. A generic argument is specified using angled brackets after the
    function name.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型参数就像一个常规函数参数，但为函数定义了一个类型。泛型参数在函数名称之后使用尖括号指定。
- en: 'Restore the `useState` statement to what it originally was, with it initialized
    as `true` and no explicit type:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `useState` 声明恢复到其原始状态，将其初始化为 `true` 并不指定显式类型：
- en: '[PRE198]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Stop the app from running by pressing *Ctrl* + *C*.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *C* 停止应用程序运行。
- en: In summary, always check the inferred state type from `useState` and use its
    generic argument to explicitly define the type if the inferred type is not what
    is required.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，始终检查从 `useState` 推断的状态类型，如果推断的类型不是所需的类型，则使用其泛型参数显式定义类型。
- en: Next, we will learn how to use the React browser development tools.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何使用 React 浏览器开发工具。
- en: Using React DevTools
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 React DevTools
- en: 'React DevTools is a browser extension available for Chrome and Firefox. The
    tools allow React apps to be inspected and debugged. The links to the extensions
    are as follows:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: React DevTools 是适用于 Chrome 和 Firefox 的浏览器扩展。这些工具允许检查和调试 React 应用程序。扩展程序的链接如下：
- en: 'Chrome: [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/)'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Chrome: [https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/)'
- en: 'Firefox: [https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/](https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/)'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Firefox: [https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/](https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/)'
- en: To install the extension, click the **Add to Chrome** or **Add to Firefox**
    button. You will need to reopen the browser for the tools to be available.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装扩展，点击 **添加到 Chrome** 或 **添加到 Firefox** 按钮。您需要重新打开浏览器才能使用这些工具。
- en: 'Carry out the following steps to explore the tools:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以探索工具：
- en: In Visual Studio Code, start the app in development mode by running `npm start`
    in a terminal. After a few seconds, the app will appear in the browser.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，通过在终端中运行 `npm start` 以开发模式启动应用程序。几秒钟后，应用程序将在浏览器中显示。
- en: Open the browser’s development tools by pressing *F12*. React DevTools adds
    two panels called **Components** and **Profiler**.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *F12* 打开浏览器开发工具。React DevTools 添加了两个面板，分别称为 **组件** 和 **分析器**。
- en: 'First, we will explore the **Components** panel, so select this panel:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将探索 **组件** 面板，因此选择此面板：
- en: '![Figure 3.12 – The React DevTools Components panel](img/B19051_03_12.jpg)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – React DevTools 组件面板](img/B19051_03_12.jpg)'
- en: Figure 3.12 – The React DevTools Components panel
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – React DevTools 组件面板
- en: The React component tree appears on the left-hand side. Selecting a React component
    reveals the current props and state values on the right-hand side.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: React 组件树出现在左侧。选择一个 React 组件将显示右侧的当前属性和状态值。
- en: Notice that the state isn’t named – it has a generic name, **State**. Click
    the wand icon at the right of the **hooks** section.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，状态没有命名——它有一个通用的名称，**状态**。点击 **hooks** 部分右侧的魔杖图标。
- en: 'The name of the state now appears in brackets:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 状态的名称现在出现在括号中：
- en: '![Figure 3.13 – State variable name after wand is clicked](img/B19051_03_13.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 点击魔杖后的状态变量名](img/B19051_03_13.jpg)'
- en: Figure 3.13 – State variable name after wand is clicked
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 点击魔杖后的状态变量名
- en: 'In Visual Studio Code, open `App.tsx` and pass the `closable` prop to `Alert`:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，打开 `App.tsx` 并将 `closable` 属性传递给 `Alert`：
- en: '[PRE199]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: The app refreshes and the close button appears.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序刷新，关闭按钮出现。
- en: Click the close button and notice that the `visible` state changes to `false`
    in DevTools.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击关闭按钮，注意在 DevTools 中 `visible` 状态变为 `false`。
- en: The **Components** panel is useful when debugging a large component tree to
    quickly understand the values of the props and state.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件** 面板在调试大型组件树时非常有用，可以快速了解属性和状态值。'
- en: Refresh the browser so that the alert appears again. While still in the **Components**
    panel in React DevTools, open the settings by clicking the cog icon. Tick the
    **Highlight updates when components render.** option in the **General** section,
    if not already ticked.
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新浏览器，以便警报再次出现。在 React DevTools 的 **组件** 面板中，通过点击齿轮图标打开设置。在 **常规** 部分中，如果尚未勾选，请勾选
    **组件渲染时高亮更新** 选项。
- en: '![Figure 3.14 – Re-render highlight option](img/B19051_03_14.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – 重新渲染高亮选项](img/B19051_03_14.jpg)'
- en: Figure 3.14 – Re-render highlight option
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 重新渲染高亮选项
- en: This option will highlight when a component is re-rendered.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将在组件重新渲染时高亮显示。
- en: 'Before we try the re-render highlight, open `Alert.tsx` and update it to render
    `visible` state is `false`:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在尝试重新渲染高亮之前，打开 `Alert.tsx` 并将其更新为渲染 `visible` 状态为 `false`：
- en: '[PRE202]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Before this change, the re-render highlight would have no element to highlight.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在此更改之前，重新渲染高亮没有元素可以高亮。
- en: 'Now, click the close button on the alert in the browser. The re-rendered alert
    component will be highlighted with a green border:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击浏览器中警报的关闭按钮。重新渲染的警报组件将以绿色边框突出显示：
- en: '![Figure 3.15 – Re-render highlight](img/B19051_03_15.jpg)'
  id: totrans-493
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 重新渲染高亮](img/B19051_03_15.jpg)'
- en: Figure 3.15 – Re-render highlight
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 重新渲染高亮
- en: This completes our exploration of the **Components** panel. Press *F5* to refresh
    the browser so that the alert component reappears before continuing.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对 **组件** 面板的探索。按 *F5* 刷新浏览器，以便在继续之前警报组件再次出现。
- en: Now, we will explore the **Profiler** panel, so select this panel. This tool
    allows interactions to be profiled, which is useful for tracking performance problems.
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将探索 **Profiler** 面板，因此请选择此面板。此工具允许对交互进行性能分析，这对于跟踪性能问题很有用。
- en: Click the **Start profiling** option, which is the blue circle icon.
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **开始分析** 选项，即蓝色圆形图标。
- en: Click the close button in the alert.
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击警报中的关闭按钮。
- en: 'Click the **Stop profiling** option, which is the red circle icon. A timeline
    appears of all the component re-renders:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **停止分析** 选项，即红色圆形图标。将出现所有组件重新渲染的时间线：
- en: '![Figure 3.16 – React DevTools components](img/B19051_03_16.jpg)'
  id: totrans-500
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – React DevTools 组件](img/B19051_03_16.jpg)'
- en: Figure 3.16 – React DevTools components
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – React DevTools 组件
- en: This shows that `Alert` was re-rendered when the close button was clicked, taking
    0.7 milliseconds.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明在点击关闭按钮时，`Alert` 被重新渲染，耗时 0.7 毫秒。
- en: This tool is helpful in quickly spotting the slow components for a particular
    user interaction.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具有助于快速识别特定用户交互中的慢速组件。
- en: 'This completes our exploration of React DevTools. Undo the change we made to
    the `Alert` component so that it renders `null` again when invisible:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这完成了我们对 React DevTools 的探索。撤销我们对 `Alert` 组件所做的更改，以便它在不可见时再次渲染 `null`：
- en: '[PRE205]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'That completes this section. Here’s a recap:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了本节的内容。以下是一个回顾：
- en: A type can be added to component props to make them type-safe
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以向组件 props 添加类型以使它们具有类型安全性
- en: A state can be inferred from its initial value but can be explicitly defined
    using a generic argument on `useState`
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态可以从其初始值推断出来，但可以使用 `useState` 上的泛型参数显式定义
- en: React DevTools can be installed in a browser to inspect the component tree in
    a running app and help track down performance problems
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React DevTools 可以安装在浏览器中，以检查运行中的应用程序中的组件树并帮助追踪性能问题
- en: That brings us to the end of the chapter.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了本章的内容。
- en: Summary
  id: totrans-513
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started the chapter by creating a React and TypeScript project with the help
    of webpack and Babel. Lots of steps were involved and we only set up a fraction
    of what we would need for a real project. For example, we have not set up the
    ability to produce an optimized bundle for production.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以使用 webpack 和 Babel 创建 React 和 TypeScript 项目开始本章。涉及了许多步骤，而我们只设置了我们实际项目所需的一小部分。例如，我们尚未设置生成用于生产的优化包的能力。
- en: We moved on to use Create React App for creating a React and TypeScript project.
    We saw how this approach is a much faster and more thorough way of creating a
    project. Then, we used ESLint for linting and Prettier for automatic code formatting.
    As a result of that exercise, we now understand how TypeScript, ESLint, and Prettier
    can be used together to create a high-quality React and TypeScript project environment.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续使用 Create React App 创建 React 和 TypeScript 项目。我们看到了这种方法是如何以更快、更彻底的方式创建项目。然后，我们使用了
    ESLint 进行代码检查和 Prettier 进行自动代码格式化。通过这次练习，我们现在理解了 TypeScript、ESLint 和 Prettier
    如何一起使用来创建高质量的 React 和 TypeScript 项目环境。
- en: In the final section, we learned how to create React components with strongly
    typed props and states. We experienced how this helps to catch problems quickly.
    We also played with React’s DevTools, which allows a React component tree to be
    inspected and the performance profiled.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们学习了如何使用强类型属性和状态创建 React 组件。我们体验了这种方式如何帮助我们快速发现问题。我们还使用了 React 的 DevTools，它允许检查
    React 组件树并分析性能。
- en: In the next chapter, we will learn about React’s common hooks.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 React 的常见 hooks。
- en: Questions
  id: totrans-518
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions will check what you have learned in this chapter:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题将检查你在本章中学到的内容：
- en: What type will the `name` prop have in the following component, which has no
    type annotation?
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下没有类型注解的组件中，`name` prop 将具有什么类型？
- en: '[PRE208]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: What type will the `firstName` state have in the following `useState` statement?
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的 `useState` 语句中，`firstName` 状态将具有什么类型？
- en: '[PRE211]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'A `ContactDetails` component has the following type for its props:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ContactDetails` 组件的 props 具有以下类型：'
- en: '[PRE212]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'The preceding component is referenced in another component’s JSX as follows:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个组件在另一个组件的 JSX 中如下引用：
- en: '[PRE219]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Will a type error be raised?
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 是否会引发类型错误？
- en: 'A `status` state variable can hold the `"Good"` and `"Bad"` values and is initially
    `"Good"`. It is defined in the following code:'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status` 状态变量可以存储 `"Good"` 和 `"Bad"` 的值，初始值为 `"Good"`。它在以下代码中定义：'
- en: '[PRE220]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: What is the type given to `status`? How can its type be narrowed to only `"Good"`
    or `"Bad"`?
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 给 `status` 分配的类型是什么？如何将其类型缩小到只有 `"Good"` 或 `"Bad"`？
- en: 'A `FruitList` component takes in an array of fruit names and displays them
    in a list. It is referenced in another component’s JSX as follows:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FruitList` 组件接收一个水果名称数组并在列表中显示它们。它在另一个组件的 JSX 中如下引用：'
- en: '[PRE221]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: What type would you define for the `FruitList` component?
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 你会为 `FruitList` 组件定义什么类型？
- en: An `email` state variable can hold `null` or an email address and is initially
    `null`. How would you define this state using the `useState` hook?
  id: totrans-543
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个可以存储 `null` 或电子邮件地址的 `email` 状态变量，初始值为 `null`。你将如何使用 `useState` 钩子定义此状态？
- en: 'The following component allows the user to agree:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下组件允许用户同意：
- en: '[PRE222]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: What would you define as the type definition for `Props`?
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 你会定义什么作为 `Props` 的类型定义？
- en: Answers
  id: totrans-553
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: Here are the answers to the questions in the preceding section.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是前一个部分问题的答案。
- en: The `name` prop will have the `any` type.
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`name` 属性将具有 `any` 类型。'
- en: The `firstName` state will be given the `string` type because `string` will
    be inferred from the initial value `""`.
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`firstName` 状态将被赋予 `string` 类型，因为 `string` 将从初始值 `""` 推断出来。'
- en: There will be no type error even though `firstName` is not passed because it
    is defined as optional.
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使没有传递 `firstName`，也不会引发类型错误，因为它被定义为可选的。
- en: 'The inferred type of `status` is `string`. An explicit type can be defined
    for the state using a generic type argument as follows:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status` 的推断类型是 `string`。可以使用泛型类型参数显式地为状态定义类型，如下所示：'
- en: '[PRE229]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'The type for the `FruitList` component could be as follows:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FruitList` 组件的类型可能如下所示：'
- en: '[PRE230]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Alternatively, it could be defined using an interface as follows:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它可以使用以下方式定义：
- en: '[PRE233]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'The `email` state could be defined as follows:'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`email` 状态可以定义如下：'
- en: '[PRE234]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: An explicit type needs to be defined; otherwise, an initial value of `null`
    would give `email` a type of `null`.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 需要显式地定义类型；否则，`null` 的初始值将使 `email` 的类型变为 `null`。
- en: 'The type for `Props` could be as follows:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Props` 的类型可能如下所示：'
- en: '[PRE235]'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Alternatively, it could be defined using an interface as follows:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它可以使用以下方式定义：
- en: '[PRE238]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
