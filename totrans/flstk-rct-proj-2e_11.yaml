- en: Extending the Marketplace for Orders and Payments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Processing payments from customers when they place orders and allowing sellers
    to manage these orders are key aspects of e-commerce applications. In this chapter,
    we'll extend the online marketplace we built in the previous chapter by implementing
    capabilities for buyers to add products to a shopping cart, a checkout, and place
    orders, and for sellers to manage these orders and have payments processed from
    the marketplace application. Once you've gone through this chapter and added these
    features, besides extending the marketplace application with advanced features,
    you will be able to utilize browser storage, process payments using Stripe, and integrate
    other technologies into this stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will extend the online marketplace by covering the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing a cart, payments, and orders in the MERN Marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Stripe for payments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the checkout process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing orders for each shop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing single-order details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing cart, payments, and orders in the MERN Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MERN Marketplace application we developed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*, has very simple features and is missing
    core e-commerce functionality. In this chapter, we will extend this marketplace
    application so that it includes a shopping cart feature for the buyer, Stripe
    integration for processing credit card payments, and a basic order-management
    flow for the seller. The implementations that follow are kept simple to serve
    as starting points for developing more complex versions of these features for
    your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: The code for the complete MERN Marketplace application is available on GitHub
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter. To get the code for Stripe payments working, you
    will need to create your own Stripe account and update the `config/config.js` file
    with your testing values for the Stripe API key, secret key, and Stripe Connect
    client ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following component tree diagram shows the custom components that make
    up the MERN Marketplace frontend, including the components for the shopping cart,
    payments, and order-related features that will be implemented in the rest of this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/385630b6-003e-4ee0-97a9-b4d535d18400.png)'
  prefs: []
  type: TYPE_IMG
- en: The features that will be discussed in this chapter modify some of the existing
    components, such as `Profile`, `MyShops`, `Products`, and `Suggestions`, and also
    add new components, such as `AddToCart`, `MyOrders`, `Cart`, and `ShopOrders`.
    In the next section, we will begin extending the online marketplace with the implementation
    of the shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a shopping cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to the MERN Marketplace can add products they wish to buy to a shopping
    cart by clicking the add to cart button on each product. A cart icon on the menu
    will indicate the number of products that have already been added to their cart
    as the user continues to browse through the marketplace. They can also update
    the cart's contents and begin the checkout process by opening the cart view. But
    to complete the checkout process and place an order, users will be required to
    sign in.
  prefs: []
  type: TYPE_NORMAL
- en: The shopping cart is mainly a frontend feature, so the cart details will be
    stored locally on the client side until the user places the order at checkout.
    To implement the shopping cart features, we will set up helper methods in `client/cart/cart-helper.js`
    that will help manipulate the cart details from relevant React components.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will look at how to add products to the cart,
    update the menu to indicate the status of the cart, and implement the cart view
    where users can see and modify all the items that have already been added to their
    cart before checking out.
  prefs: []
  type: TYPE_NORMAL
- en: Adding to the cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While browsing the products in the marketplace, users will see the option on
    each product to add it to their cart. This option will be implemented with a React
    component named `AddToCart`. This `AddToCart` component in `client/Cart/AddToCart.js` takes
    a `product` object and a CSS style object as props from the parent component it
    is added to. For example, in the MERN Marketplace, it is added to a Product view
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `AddToCart` component, when rendered, displays a cart icon button depending
    on whether the passed item is in stock or not, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f65b6d5b-f1d7-48bb-bdb1-16936df0a3b7.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, if the item quantity is more than `0`, `AddCartIcon` is displayed;
    otherwise, `DisabledCartIcon` is rendered. The appearance of the icon depends
    on the CSS style object that's passed in the props. The code to render these variations
    of the `AddToCart` button is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `AddCartIcon` button calls an `addToCart` method when it is clicked. The `addToCart` method
    is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `addToCart` method invokes the `addItem` helper method defined in `cart-helper.js`. This `addItem` method takes
    the `product` item and a state-updating `callback` function as parameters and
    stores the updated cart details in `localStorage` and executes the callback that
    was passed, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The cart data stored in `localStorage` contains an array of cart item objects,
    each containing product details, the quantity of the product that was added to
    the cart (which is set to `1` by default), and the ID of the shop the product
    belongs to. As products get added to the cart and stored in `localStorage`, we
    will also display the updated item count on the navigation menu, as discussed
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Cart icon in the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the menu, we will add a link to the cart view, as well as a badge that displays
    the length of the cart array stored in `localStorage` in order to visually inform
    the user of how many items are currently in their cart. The rendered link and
    badge will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/597c8a98-0d51-4457-a6ae-a77fd414a97d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The link for the cart will be similar to the other links in the menu, with
    the exception of the Material-UI `Badge` component, which displays the cart length.
    It will be added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The cart length is returned by the `itemTotal` helper method in `cart-helper.js`,
    which reads the `cart` array stored in `localStorage` and returns the length of
    the array. The `itemTotal` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Clicking on this cart link, with the item total displayed on the menu, will
    take the user to the cart view and reveal details of the items that have already
    been added to the cart. In the next section, we will discuss the implementation
    of this cart view.
  prefs: []
  type: TYPE_NORMAL
- en: The cart view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The cart view will contain the cart items and checkout details. But initially,
    only the cart details will be displayed until the user is ready to check out.
    The code to render this cart view will be added as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `CartItems` component, which displays the items in the cart, is passed a
    `checkout` Boolean value and a state update method for this checkout value so
    that the `Checkout` component and its options can be rendered conditionally based
    on user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: The `showCheckout` method to update the `checkout` value is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Cart` component will be accessed at the `/cart` route, so we need to add
    a `Route` to the `MainRouter` component as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is the link we use on the Menu to redirect the user to the cart view, which
    contains cart details. In the next section, we will look at the implementation
    of the `CartItems` component, which will render details of each item in the cart
    and allow modifications.
  prefs: []
  type: TYPE_NORMAL
- en: The CartItems component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CartItems` component will allow the user to view and update the items
    currently in their cart. It will also give them the option to start the checkout
    process if they are signed in, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8167e3f4-f85d-4fab-8224-314d9b507a28.png)'
  prefs: []
  type: TYPE_IMG
- en: If the cart contains items, the `CartItems` component iterates over the items
    and renders the products in the cart. If no items have been added, the cart view
    just displays a message stating that the cart is empty. The code for this implementation
    is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For each product item, we show the details of the product and an editable quantity
    text field, along with a remove item option. Finally, we show the total price
    of the items in the cart and the option to start the checkout operation. In the
    following sections, we will look into the implementations of these cart item display
    and modification options.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving cart details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the cart item details can be displayed, we need to retrieve the cart
    details stored in `localStorage`. For this purpose, we implement the `getCart`
    helper method in `cart-helper.js`, which retrieves and returns the cart details
    from `localStorage`, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the `CartItems` component, we will retrieve the cart items using the `getCart`
    helper method and set it to the state of the initial value of `cartItems`, as
    shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Then, this `cartItems` array that was retrieved from `localStorage` is iterated
    over using the `map` function to render the details of each item, as shown in
    the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For each rendered cart item, we will also give the user the option to change
    the quantity, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying quantity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each cart item displayed in the cart view will contain an editable `TextField` that
    will allow the user to update the quantity for each product they are buying, with
    a minimum allowed value of `1`, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When the user updates this value, the `handleChange` method is called to enforce
    the minimum value validation, update the `cartItems` in the state, and update
    the cart in `localStorage` using a helper method. The `handleChange` method is
    defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `updateCart` helper method takes the index of the product being updated
    in the cart array and the new quantity value as parameters and updates the details
    stored in `localStorage`. This `updateCart` helper method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Besides updating the item quantity in the cart, users will also have the option
    to remove the item from the cart, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Removing items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each item in the cart will have a remove option next to it. This remove item
    option is a button that, when clicked, passes the array index of the item to the
    `removeItem` method so that it can be removed from the array. This button is rendered
    with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `removeItem` click handler method uses the `removeItem` helper method to
    remove the item from the cart in `localStorage`, then updates the `cartItems`
    in the state. This method also checks whether the cart has been emptied so that
    checkout can be hidden by using the `setCheckout` function passed as a prop from
    the `Cart` component. The `removeItem` click handler method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `removeItem` helper method in `cart-helper.js` takes the index of the product
    to be removed from the array, splices it out, and updates `localStorage` before
    returning the updated `cart` array. This `removeItem` helper method is defined
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As users modify the items in their cart by either changing the quantity or removing
    an item, they will also see the updated total price of all the items currently
    in the cart, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the total price
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the bottom of the `CartItems` component, we will display the total price
    of the items in the cart. It will be rendered with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `getTotal` method will calculate the total price while taking the unit price
    and quantity of each item in the `cartItems` array into consideration. This method
    is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: With this, the users will have an overview of what they are buying and how much
    it will cost before they are ready to check out and place the order. In the next
    section, we will look at how to render the checkout option conditionally, depending
    on the state of the cart and whether the user is signed in.
  prefs: []
  type: TYPE_NORMAL
- en: Option to check out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user will see the option to perform the checkout depending on whether they
    are signed in and whether the checkout has already been opened, as implemented
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When the checkout button is clicked, the `openCheckout` method will use the
    `setCheckout` method passed as a prop to set the checkout value to `true` in the
    `Cart` component. The `openCheckout` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once the checkout value is set to `true` in the Cart view, the `Checkout` component
    will be rendered to allow the user to enter the checkout details and place an
    order.
  prefs: []
  type: TYPE_NORMAL
- en: This will complete the buying process for a user, who is now able to add items
    to their shopping cart and modify each item until they are ready to checkout.
    But before getting into the implementation of the checkout functionality, which
    will involve gathering and processing payment information, in the next section,
    we will discuss how to use Stripe in our application to add the intended payment-related
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Using Stripe for payments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Payment processing is required across implementations of the checkout, order
    creation, and order management processes. It also involves making updates to both
    the buyer's and seller's user data. Before we delve into the implementations of
    the checkout and order features, we will briefly discuss payment processing options
    and considerations using Stripe and learn how to integrate it in the MERN Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe provides an extensive set of tools that are necessary to integrate payments
    in any web application. These tools can be selected and used in different ways,
    depending on the specific type of application and the payment use case being implemented.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the MERN Marketplace setup, the application itself will have
    a platform on Stripe and will expect sellers to have connected Stripe accounts
    on the platform so that the application can charge users who enter their credit
    card details at checkout on behalf of the sellers. In the MERN Marketplace, a
    user can add products from different shops to their shopping cart so that charges
    on their cards will only be created by the application for the specific product
    that was ordered when it is processed by the seller. Additionally, sellers will
    have complete control over the charges that are created on their behalf from their
    own Stripe dashboards. We will demonstrate how to use the tools provided by Stripe
    to get this payment setup working.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe provides a complete set of documentation and guidelines for each tool
    and also exposes testing data for accounts and platforms that are set up on Stripe.
    For the purpose of implementing payments in the MERN Marketplace, we will be using
    testing keys and leave it up to you to extend the implementation for live payments.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will discuss how to connect a Stripe account for
    each seller, collect credit card details from the user with Stripe Card Elements,
    use Stripe Customer to record the user's payment information securely, and create a
    charge with Stripe for processing a payment.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe-connected account for each seller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create charges on behalf of sellers, the application will let a user, who
    is a seller, connect their Stripe account to their MERN Marketplace user account.
    In the following sections, we will implement this functionality by updating the
    user model so that it can store Stripe credentials, add the view components to
    allow users to connect to Stripe, and add a backend API to complete Stripe OAuth
    before updating the database with the retrieved credentials from Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a seller connects their Stripe account to the marketplace, we will need
    to store their Stripe credentials with their other user details so that they can
    be used later for payment processing when they sell products. To store the Stripe
    OAuth credentials after a user's Stripe account is successfully connected, we
    will update the user model that we developed in [Chapter 3](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml), *Building
    a Backend with MongoDB, Express, and Node*, with the following field.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This `stripe_seller` field will store the seller's Stripe account credentials
    that were received from Stripe on authentication. This will be used when a charge
    needs to be processed via Stripe for a product they sold from their shop. Next,
    we will look at the frontend component that will allow the user to connect to
    Stripe from our application.
  prefs: []
  type: TYPE_NORMAL
- en: Button to connect with Stripe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the user profile page of a seller, if the user has not connected their Stripe
    account yet, we will show a button that will take the user to Stripe to authenticate
    and connect their Stripe account. The Connect with Stripe button will be rendered
    in the Profile view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1039f7b-256e-4a54-abc2-b38fd6c4aa5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user has successfully connected their Stripe account already, we will
    show a disabled STRIPE CONNECTED button instead, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fba75a1-42fe-436d-991d-a4c9ed08471d.png)'
  prefs: []
  type: TYPE_IMG
- en: The code that's added to the `Profile` component will check whether the user
    is a seller before rendering the Stripe-related button. Then, a second check will
    confirm whether Stripe credentials already exist in the `stripe_seller` field
    for the given user. If Stripe credentials already exist for the user, then the
    disabled `STRIPE CONNECTED` button is shown; otherwise, a link to connect to Stripe
    using their OAuth link is displayed instead, as implemented in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The OAuth link takes the platform's client ID, which we will set in a `config`
    variable, and other option values as query parameters. This link takes the user
    to Stripe and allows the user to connect an existing Stripe account or create
    a new one. Once Stripe's auth process has completed, it returns to our application
    using a redirect URL set in the platform's Connect settings in the dashboard on
    Stripe. Stripe attaches either an auth code or an error message as query parameters
    to the redirect URL.
  prefs: []
  type: TYPE_NORMAL
- en: The MERN Marketplace redirect URI is set to `/seller/stripe/connect`, which
    will render the `StripeConnect` component. We will declare this route as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When Stripe redirects the user to this URL, we will render the `StripeConnect`
    component so that it handles Stripe's response to authentication, as discussed
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The StripeConnect component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `StripeConnect` component will basically complete the remaining auth process
    steps with Stripe and render the relevant messages based on whether the Stripe
    connection was successful, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3eb9b2b-f1ee-4978-bd5e-601c479c23d7.png)'
  prefs: []
  type: TYPE_IMG
- en: When the `StripeConnect` component loads, we will use a `useEffect` hook to
    parse the query parameters attached to the URL from the Stripe redirect, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/StripeConnect.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: For parsing, we use the same `query-string` node module that we used previously
    to implement a product search. Then, if the URL `query` parameter contains an
    auth `code` and not an `error`, we make an API call in order to complete the Stripe
    OAuth from our server with the `stripeUpdate` fetch method.
  prefs: []
  type: TYPE_NORMAL
- en: The `stripeUpdate` fetch method is defined in `api-user.js` and passes the auth
    code retrieved from Stripe to an API we will set up in our server at `'/api/stripe_auth/:userId'`. This `stripeUpdate` fetch
    method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This fetch method is calling a backend API that we have to add on our server
    to complete the OAuth process and save the retrieved credentials to the database.
    We will implement this API in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The stripe auth update API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Stripe account has been connected, to complete the OAuth process, we
    need to make a POST API call to Stripe OAuth from our server. We need to send
    the previously retrieved auth code to Stripe OAuth with the POST API call and
    receive the credentials to be stored in the seller's user account for processing
    charges. We will achieve this Stripe auth update by implementing an update API
    in the backend.  This Stripe auth update API will receive a PUT request at `/api/stripe_auth/:userId`
    and initiate the POST API call to retrieve the credentials from Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: The route for this Stripe auth update API will be declared on the server in
    user routes, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: A request to this route uses the `stripe_auth` controller method to retrieve
    the credentials from Stripe and passes it to the existing user update method so
    that it can be stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make a POST request to the Stripe API from our server, we will use the `request`
    node module, which needs to be installed with the following command from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `stripe_auth` controller method in the user controller will be defined as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The POST API call to Stripe takes the platform's secret key and the retrieved
    auth code to complete the authorization. Then, it returns the credentials for
    the connected account in `body`, which is then appended to the request body so
    that the user's details can be updated in the `next()` call to the `update` controller
    method.
  prefs: []
  type: TYPE_NORMAL
- en: These auth credentials retrieved from Stripe can be used in our application
    to create charges on customer credit cards on behalf of the seller when they sell
    products from their shops. In the next section, we will learn how to collect the
    customer credit card details during checkout using Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe Card Elements for checkout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During checkout, to collect credit card details from the user, we will use
    Stripe''s `Card Elements` to add the credit card field to the checkout form. To
    integrate `Card Elements` with our React interface, we will utilize the `react-stripe-elements` node
    module, which can be installed by running the following command from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We will also need to inject the `Stripe.js` code into `template.js` to access
    Stripe in the frontend code, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/template.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: For the MERN Marketplace, Stripe will be required in the Cart view, where the
    `Checkout` component needs it to render `Card Elements` and process card detail
    input. We will wrap the `Checkout` component we added to `Cart.js` with the `StripeProvider`
    component from `react-stripe-elements` so that the `Elements` component in `Checkout`
    has access to the Stripe instance.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Then, within the `Checkout` component, we will use Stripe's `Elements` component.
    Using Stripe's `Card Elements` will enable the application to collect the user's
    credit card details and use the Stripe instance to tokenize card information rather
    than handle it on our own servers. The implementation details for this part of
    collecting the card details and generating the card token during the checkout
    process will be discussed in the *Integrating the* *checkout process* and *Creating
    a new order* sections. In the next section, we will discuss how to use Stripe
    to securely record the card details that will be received from a user with `Card
    Elements`.
  prefs: []
  type: TYPE_NORMAL
- en: Stripe Customer for recording card details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an order is being placed at the end of the checkout process, the generated
    card token will be used to create or update a Stripe Customer ([https://stripe.com/docs/api#customers](https://stripe.com/docs/api#customers))
    representing our user. This is a good way to store credit card information ([https://stripe.com/docs/saving-cards](https://stripe.com/docs/saving-cards))
    with Stripe for further use, such as for creating charges against specific products
    in the cart when a seller processes the ordered product from their shop. This
    eliminates the complications of having to store user credit card details securely
    on your own server. To integrate Stripe Customer with our application, in the
    following sections, we will update the user model so that it stores Stripe Customer
    details and update the user controller methods so that we can create or update
    Stripe Customer information using the Stripe node module in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use Stripe Customer to securely store the credit card information of each
    user and process payments as needed in the application, we need to store details
    of the Stripe Customer associated with each user. To keep track of the corresponding
    Stripe Customer information for a user in our database, we will update the user
    model with the following field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This field will store a Stripe Customer object that will allow us to create
    recurring charges and track multiple charges associated with the same user in
    our platform. To be able to create or update a Stripe Customer, we need to utilize
    Stripe's Customer API. In the next section, we will update the user controller
    so that we can integrate and use this Customer API from Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a new, or update an existing, Stripe Customer when the user places
    an order after entering their credit card details. To implement this, we will
    update the user controllers with a `stripeCustomer` method that will be called
    before the order is created when our server receives a request to the create order
    API (as discussed in the *Creating a new order* section).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `stripeCustomer` controller method, we will need to use the `stripe`
    node module, which can be installed with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: After installing the `stripe` module, it needs to be imported into the user
    controller file. Then, the `stripe` instance needs to be initialized with the
    application's Stripe secret key.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `stripeCustomer` controller method will check whether the current user already
    has a corresponding Stripe Customer stored in the database, and then use the card
    token received from the frontend to either create a new Stripe Customer or update
    the existing one, as discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Stripe Customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the current user does not have a corresponding Stripe Customer – in other
    words, a value is not stored for the `stripe_customer` field – we will use the
    create a customer API ([https://stripe.com/docs/api#create_customer](https://stripe.com/docs/api#create_customer))
    from Stripe, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If the Stripe Customer is successfully created, we will update the current user's
    data by storing the Stripe Customer ID reference in the `stripe_customer` field.
    We will also add this Customer ID to the order being placed so that it is simpler
    to create a charge related to the order. Once a Stripe Customer has been created,
    we can update the Stripe Customer the next time a user enters credit card details
    for a new order, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating an existing Stripe Customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For an existing Stripe Customer – in other words, where the current user already
    has a value stored for the `stripe_customer` field – we will use the Stripe API
    to update a Stripe Customer, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Once the Stripe Customer has been successfully updated, we will add the Customer
    ID to the order being created in the `next()` call. Though not covered here, the
    Stripe Customer feature can be used to allow users to store and update their credit
    card information from the application. With the user's payment information securely
    stored and accessible, we can look into how to use this information to process
    a payment when an ordered product is processed by the seller.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a charge for each product that's processed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a seller updates an order by processing the product that was ordered in
    their shop, the application will create a charge on behalf of the seller on the
    customer's credit card for the cost of the product ordered.
  prefs: []
  type: TYPE_NORMAL
- en: To implement this, we will update the `user.controller.js` file with a `createCharge`
    controller method that will use Stripe's create a charge API and needs the seller's
    Stripe account ID, along with the buyer's Stripe Customer ID. The `createCharge` controller
    method will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: If the seller has not connected their Stripe account yet, the `createCharge`
    method will return a 400 error response to indicate that a connected Stripe account
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to charge the Stripe Customer on behalf of the seller's Stripe account,
    we need to generate a Stripe token with the Customer ID and the seller's Stripe
    account ID and then use that token to create a charge.
  prefs: []
  type: TYPE_NORMAL
- en: The `createCharge` controller method will be called when the server receives
    a request to update an order with a product status change to **Processing** (the
    API implementation for this order update request will be discussed in the *Listing
    orders by shop* section).
  prefs: []
  type: TYPE_NORMAL
- en: This covers all the Stripe-related concepts that are relevant to the implementation
    of payment processing for the specific use cases of the MERN Marketplace. Now,
    we will continue with our implementations in order to allow a user to complete
    the checkout process and place their order from their shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the checkout process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users who are signed in and have items added to their cart will be able to
    start the checkout process. We will add a Checkout form to collect customer details,
    delivery address information, and credit card information, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b4cc738-154a-4a02-89a4-7f19e310b9a7.png)'
  prefs: []
  type: TYPE_IMG
- en: This checkout view will consist of two parts, with the first part for collecting
    buyer details including name, email, and delivery address, and the second part
    for entering credit card details and placing the order. In the following sections,
    we will complete the implementation of the checkout process by initializing the
    checkout form details and adding the fields for collecting buyer details. Then,
    we will collect the buyer's credit card details to allow them to place the order
    and finish the checkout process.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing checkout details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create the checkout view, which contains the form fields
    and the place order option in a `Checkout` component. In this component, we will
    initialize the `checkoutDetails` object in the state before collecting the details
    from the form. We will prepopulate the customer details based on the current user's
    details and add the current cart items to `checkoutDetails`, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: These customer information values, which are initialized in `checkoutDetails`,
    will be updated when the user interacts with the form fields. In the following
    sections, we will add the form fields and the change-handling functions for the
    customer information and delivery address details to be collected in this checkout
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Customer information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the checkout form, we will have fields for collecting the customer's name
    and email address. To add these text fields to the `Checkout` component, we will
    use the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: When the user updates the values in these two fields, the `handleCustomerChange` method
    will update the relevant details in the state. The `handleCustomerChange` method is
    defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This will allow the user to update the name and email of the customer that this
    order is associated with. Next, we will look at the implementation for collecting
    the delivery address details for this order.
  prefs: []
  type: TYPE_NORMAL
- en: Delivery address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To collect the delivery address from the user, we will add fields to collect
    address details such as the street address, city, state, zip code, and country
    name to the checkout form. We will use the following code to add the text fields
    to allow a user to enter these address details.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: When the user updates these address fields, the `handleAddressChange` method
    will update the relevant details in the state, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: With these text fields and handle change functions in place, the `checkoutDetails`
    object in the state will contain the customer information and delivery address
    that was entered by the user. In the next section, we will collect payment information
    from the buyer and use it with the other checkout details to complete the checkout
    process and place the order.
  prefs: []
  type: TYPE_NORMAL
- en: Placing an order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The remaining steps of the checkout process will involve collecting the user's
    credit card details securely, thus allowing the user to place the order, emptying
    the cart from storage, and redirecting the user to a view with the order details.
    We will implement these steps by building a `PlaceOrder` component that consists of
    the remaining elements in the checkout view, which are the credit card field and
    the place order button. In the following sections, as we develop this component,
    we will use Stripe Card Elements to collect credit card details, add a place order
    button for the user to complete the checkout process, utilize a cart helper method
    to empty the cart, and redirect the user to an order view.
  prefs: []
  type: TYPE_NORMAL
- en: Using Stripe Card Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use Stripe's `CardElement` component from `react-stripe-elements` to
    add the credit card field to the `PlaceOrder` component, we need to wrap the `PlaceOrder`
    component using the `injectStripe` **higher-order component** (**HOC**) from Stripe.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the `CardElement` component needs to be part of a payment form
    component that is built with `injectStripe` and also wrapped with the `Elements`
    component. So, when we create a component called `PlaceOrder`, we will wrap it
    with `injectStripe` before exporting it, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will add this `PlaceOrder` component in the Checkout form, pass it
    the `checkoutDetails` object as a prop, and wrap it with the `Elements` component
    from `react-stripe-elements`, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The `injectStripe` HOC provides the `props.stripe` property that manages the
    `Elements` group. This will allow us to call `props.stripe.createToken` within
    `PlaceOrder` to submit card details to Stripe and get back the card token. Next,
    we will learn how to use the Stripe `CardElement` component to collect credit
    card details from within the `PlaceOrder` component.
  prefs: []
  type: TYPE_NORMAL
- en: The CardElement component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stripe's `CardElement` is self-contained, so we can just add it to the `PlaceOrder`
    component, then incorporate styles as desired, and the card detail input will
    be taken care of. We will add the `CardElement` component to `PlaceOrder` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This will render the credit card details field in the checkout form view. In
    the next section, we will learn how to securely validate and store the credit
    card details that are entered in this field when the user clicks on a button to
    place an order and complete the checkout process.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to place an order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final element in the checkout view is the Place Order button, which will
    complete the checkout process if all the details are entered correctly. We will
    add this button to the `PlaceOrder` component after `CardElement`, as shown in
    the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Clicking on the Place Order button will call the `placeOrder` method, which
    will attempt to tokenize the card details using `stripe.createToken`. If this
    is unsuccessful, the user will be informed of the error, but if this is successful,
    then the checkout details and generated card token will be sent to our server's
    create order API (covered in the next section). The `placeOrder` method is defined
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `create` fetch method that we invoked here to make a POST request to the
    create order API in the backend is defined in `client/order/api-order.js`. It
    takes the checkout details, the card token, and user credentials as parameters
    and sends them to the API, as seen in previous API implementations. When the new
    order is successfully created, we will also empty the cart in `localStorage`,
    as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Empty cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the request to the create order API is successful, we will empty the cart
    in `localStorage` so that the user can add new items to the cart and place a new
    order if desired. To empty the cart in browser storage, we will use the `emptyCart`
    helper method in `cart-helper.js`, which is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The `emptyCart` method removes the cart object from `localStorage` and updates
    the state of the view by executing the callback passed to it from the `placeOrder`
    method, where it is invoked. With the checkout process completed, we can now redirect
    the user out of the cart and checkout view, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting to the order view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the order placed and the cart emptied, we can redirect the user to the
    order view, which will show them the details of the order that was just placed.
    To implement this redirect, we can use the Redirect component from React Router,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This redirection also works as an indication to the user that the checkout process
    has been completed. A completed checkout process will also result in a new order
    being created in the application's backend. In the next section, we will look
    into the implementation of creating and storing these new orders in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user places an order, the details of the order that were confirmed at
    checkout will be used to create a new order record in the database, update or
    create a Stripe Customer for the user, and decrease the stock quantities of products
    ordered. In the following sections, we will add an order model to define the details
    of the orders to be stored in the database and discuss the implementation of the
    backend API that will be called from the frontend to create the new order record.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an Order model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To store the orders in the backend, we will define a Schema for the order model
    that will record order details including the customer details, payment information, and
    an array of the products ordered. The structure of each product in this array
    of products ordered will be defined in a separate subschema called `CartItemSchema`. In
    the following sections, we will define these schemas so that we can store orders
    and cart items in the database.
  prefs: []
  type: TYPE_NORMAL
- en: The Order schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Order schema defined in `server/models/course.model.js` will contain fields
    for storing the customer''s name and email, along with their user account reference,
    delivery address information, payment reference, created and updated-at timestamps,
    and an array of products ordered. The pieces of code for defining the order fields
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer name and email**: To record the details of the customer who the
    order is meant for, we will add the `customer_name` and `customer_email` fields
    to the `Order` schema:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '**User who placed the order**: To reference the signed-in user who placed the
    order, we will add an `ordered_by` field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '**Delivery address**: The delivery address information for the order will be
    stored in the delivery address subdocument with the `street`, `city`, `state`,
    `zipcode`, and `country` fields:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '**Payment reference**: The payment information will be relevant when the order
    is updated and a charge needs to be created after an ordered product has been
    processed by the seller. We will record the Stripe Customer ID that''s relevant
    to the credit card details in a `payment_id` field as a reference to the payment
    information for this order:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '**Products ordered**: The main content of the order will be the list of products
    ordered, along with details such as the quantity of each. We will record this
    list in a field called `products` in the `Order` schema. The structure of each
    product will be defined separately in `CartItemSchema`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The fields in this schema definition will enable us to store the necessary details
    for each order. `CartItemSchema`, which is used to record the details of each
    product that was ordered, will be discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The CartItem schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CartItem` schema will represent each product that was ordered when an order
    was placed. It will contain a reference to the product, the quantity of the product
    that was ordered by the user, a reference to the shop the product belongs to,
    and its status, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/order.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `status` of the product can only have the values defined in the `enums`,
    with the default value set to "Not Processed". This represents the current state
    of the product order, as updated by the seller.
  prefs: []
  type: TYPE_NORMAL
- en: The `Order` schema and `CartItem` schema defined here will allow us to record
    details about the customer and products that were ordered as required to complete
    the purchase steps for the products that were bought by a user. Next, we will
    discuss the backend API implementation that allows the frontend to create an order
    document in the Orders collection in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Create order API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The create order API in the backend will take a POST request from the frontend
    to create the order in the database. The API route will be declared in `server/routes/order.routes.js`,
    along with the other order routes. These order routes will be very similar to
    the user routes. To load the order routes in the Express app, we need to mount
    the routes in `express.js`, just like we did for the auth and user routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'A number of actions, in the following sequence, take place when the create
    order API receives a POST request at `/api/orders/:userId`:'
  prefs: []
  type: TYPE_NORMAL
- en: It is ensured that the current user is signed in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Stripe `Customer` is either created or updated using the `stripeCustomer`
    user controller method, which we discussed earlier in the *Stripe Customer to
    record card details* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The stock quantities are updated for all the ordered products using the `decreaseQuanity`
    product controller method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The order is created in the Order collection with the `create` order controller
    method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The route for this create order API is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the user associated with the `:userId` parameter in the route, we
    will use the `userByID` user controller method. We will write the code to handle
    this parameter in the route URL, along with the other order route declaration.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `userByID` method gets the user from the User collection and attaches it
    to the request object so that it can be accessed by the next few methods. Among
    the next few methods that are invoked when this API receives a request includes
    the product controller method to decrease stock quantities and the order controller
    method to save a new order to the database. We will discuss the implementation
    of these two methods in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Decrease product stock quantity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an order is placed, we will decrease the stock quantity of each product
    ordered according to the quantity ordered by the user. This will automatically
    reflect the updated quantities of the products in the associated shops after an
    order is placed. We will implement this decrease product quantity update in the `decreaseQuantity` controller
    method, which will be added with the other product controller methods, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Since the update operation, in this case, involves a bulk update of multiple
    products in the collection after matching with an array of products ordered, we
    use the `bulkWrite` method in MongoDB to send multiple `updateOne` operations
    to the MongoDB server with one command. The multiple `updateOne` operations that
    are required are listed in `bulkOps` using the `map` function. This will be faster
    than sending multiple independent save or update operations because with `bulkWrite()`,
    there is only one round trip to MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Once the product quantities have been updated by this method, the next method
    is invoked to save the new order in the database. In the next section, we will
    see the implementation of this method, which creates this new order.
  prefs: []
  type: TYPE_NORMAL
- en: Create controller method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `create` controller method, defined in the order controllers, is the last
    method that's invoked when the create order API receives a request. This method
    takes the order details, creates a new order, and saves it to the Order collection
    in MongoDB. The `create` controller method is implemented as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: With this implemented, orders can be created and stored in the backend by any
    signed-in user on the MERN Marketplace. Now, we can set up APIs to fetch lists
    of orders by user, orders by shop, or read an individual order and display the
    fetched data to views in the frontend. In the next section, we will learn how
    to list the orders per shop so that shop owners can process and manage the orders
    they receive for their products.
  prefs: []
  type: TYPE_NORMAL
- en: Listing orders by shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important feature of the marketplace is allowing sellers to see and update
    the status of orders they've received for products in their shops. To implement
    this, we will set up backend APIs to list orders by shop and update an order as
    a seller changes the status of a purchased product. Then, we will add some frontend
    views that will display the orders and allow the seller to interact with each
    order.
  prefs: []
  type: TYPE_NORMAL
- en: The list by shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will implement an API to get orders for a specific shop
    so that authenticated sellers can view the orders for each of their shops in one
    place. The request for this API will be received at `/api/orders/shop/:shopId`,
    with the route defined in `order.routes.js`, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the shop associated with the `:shopId` parameter in the route, we
    will use the `shopByID` shop controller method, which gets the shop from the Shop
    collection and attaches it to the request object so that it can be accessed by
    the next methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `listByShop` controller method will retrieve the orders that have products
    purchased with the matching shop ID, then populate the ID, name, and price fields
    for each product, with orders sorted by date from most recent to oldest. The `listByShop` controller
    method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: To fetch this API in the frontend, we will add a corresponding `listByShop`
    method in `api-order.js`, similar to our other API implementations. This fetch
    method will be used in the `ShopOrders` component to show the orders for each
    shop. We will look at the implementation of the `ShopOrders` component in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: The ShopOrders component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ShopOrders` component will be the view where sellers will be able to see
    the list of orders that have been received for a given shop. In this view, each
    order will only show the purchased products that are relevant to the shop and
    allow the seller to change the status of the ordered product with a dropdown of
    possible status values, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4ba0b05-968e-43a5-9d43-cc9184572afb.png)'
  prefs: []
  type: TYPE_IMG
- en: To render this view at a frontend route, we will update `MainRouter` with a `PrivateRoute` in
    order to load the `ShopOrders` component at the `/seller/orders/:shop/:shopId`
    route, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Going to this link will load the `ShopOrders` component in the view. In the
    `ShopOrders` component, we will fetch and list the orders for the given shop,
    and for each order, we'll render the order details along with the list of products
    that were ordered in a React component named `ProductOrderEdit`. In the following
    sections, we will learn how to load the list of orders and discuss the implementation
    of the `ProductOrderEdit` component.
  prefs: []
  type: TYPE_NORMAL
- en: List orders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the `ShopOrders` component mounts in the view, we will retrieve the list
    of orders for the provided shop ID from the database and set it to the state to
    be rendered in the view. We will make a request to the backend API to list orders
    by shop using the `listByShop` fetch method and set the retrieved orders to the
    state in a `useEffect` hook, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: In the view, we will iterate through the list of orders and render each order
    in a collapsible list from `Material-UI`, which will expand when it's clicked.
    The code for this view will be added as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Each expanded order will show the order details and the `ProductOrderEdit` component.
    The `ProductOrderEdit` component will display the purchased products and allow
    the seller to edit the status of each product. The `updateOrders` method is passed
    as a prop to the `ProductOrderEdit` component so that the status can be updated
    when a product status is changed. The `updateOrders` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: In the `ProductOrderEdit` component, we will invoke this `updateOrders` method
    when the seller interacts with the status update dropdown for any product that
    will be rendered in the `ProductOrderEdit` component. In the next section, we
    will look into the implementation of this `ProductOrderEdit` component.
  prefs: []
  type: TYPE_NORMAL
- en: The ProductOrderEdit component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will implement a `ProductOrderEdit` component to render
    all the products in the order with an edit status option. This `ProductOrderEdit`
    component will take an order object as a prop and iterate through the order's
    `products` array to display only the products that have been purchased from the
    current shop, along with a dropdown to change the status value of each product.
    The code for this view, which renders the products for each order, will be added
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: To be able to list the valid status values in the dropdown option for updating
    an ordered product's status, we will retrieve the list of possible status values
    from the server in a `useEffect` hook in the `ProductOrderEdit` component, as
    shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The status values that are retrieved from the server are set to state and rendered
    in the dropdown as a `MenuItem`. When an option is selected from the possible
    status values in the dropdown, the `handleStatusChange` method is called to update
    the orders in the state, as well as to send a request to the appropriate backend
    API based on the value that's selected. The `handleStatusChange` method will be
    structured as follows, with a different backend API invoked, depending on the
    selected status value.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Updating the status of an ordered product will have different implications,
    depending on the value that's selected from the dropdown. Selecting to cancel
    or process a product order will invoke separate APIs in the backend rather than
    the API called when selecting any of the other status values. In the following
    sections, we will learn how each of these actions is handled in the `handleStatusChange` method when
    a user interacts with the dropdown and selects a status value.
  prefs: []
  type: TYPE_NORMAL
- en: Handling actions to cancel a product order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the seller wishes to cancel the order for a product and selects Cancelled
    from the status values dropdown for a specific product in the order, we will call
    the `cancelProduct` fetch method inside the `handleStatusChange` method, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The `cancelProduct` fetch method will take the corresponding shop ID, product
    ID, cartItem ID, selected status value, ordered quantity for the product, and
    user credentials to send, along with the request to the cancel product API in
    the backend. On a successful response from the backend, we will update the orders
    in the view.
  prefs: []
  type: TYPE_NORMAL
- en: This cancel product API will update the database for the order and the product
    affected by this action. Before getting into the implementation for this cancel
    product order API, next, we will look at how the process charge API is invoked
    if the seller chooses to process a product order instead of canceling it.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the action to process charge for a product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a seller chooses to process the order for a product, we will need to invoke
    an API that will charge the customer for the total cost of the product ordered.
    So, when a seller selects Processing from the status values dropdown for a specific
    product in the order, we will call the `processCharge` fetch method inside the `handleStatusChange` method, as
    shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The `processCharge` fetch method will take the corresponding order ID, shop
    ID, customer's user ID, cartItem ID, selected status value, total cost for the
    ordered product, and user credentials to send, along with the request to the process
    charge API in the backend. On a successful response from the backend, we will
    update the orders in the view accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: This process charge API will update the database for the order and the user
    affected by this action. Before getting into the implementation for this API,
    next, we will look at how the update order API is invoked if the seller chooses
    to update the status of a product that's been ordered to any value other than
    Cancelled or Processing.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the action to update the status of a product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a seller chooses to update the status of an ordered product so that it has
    a value other than Cancelled or Processing, we will need to invoke an API that
    will update the order in the database with this changed product status. So, when
    a seller selects other status values from the dropdown for a specific product
    in the order, we will call the `update` fetch method inside the `handleStatusChange` method, as
    shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The `update` fetch method will take the corresponding shop ID, cartItem ID,
    selected status value, and user credentials to send, along with the request to
    the update order API in the backend. On a successful response from the backend,
    we will update the orders in the view.
  prefs: []
  type: TYPE_NORMAL
- en: The `cancelProduct`, `processCharge`, and `update` fetch methods are defined
    in `api-order.js` so that they can call the corresponding APIs in the backend
    to update a canceled product's stock quantity, to create a charge on the customer's
    credit card when the order for a product is processing, and to update the order
    with the product status change, respectively. We will look at the implementation
    of these APIs in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: APIs for products ordered
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allowing sellers to update the status of a product will require having to set
    up four different APIs, including an API to retrieve the possible status values.
    Then, the actual status update actions will need APIs to handle updates to the
    order itself as the status is changed in order to initiate related actions, such
    as increasing the stock quantity of a canceled product, and to create a charge
    on the customer's credit card when a product is being processed. In the following
    sections, we will look at the API implementations for retrieving possible status
    values, updating an order status, canceling a product order, and processing a
    charge for an ordered product.
  prefs: []
  type: TYPE_NORMAL
- en: Get status values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The possible status values of an ordered product are set as enums in the `CartItem`
    schema. To show these values as options in the dropdown view, we will set up a
    GET API route at `/api/order/status_values` that retrieves these values. This
    API route will be declared as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The `getStatusValues` controller method will return the enum values for the
    `status` field from the `CartItem` schema. The `getStatusValues` controller method
    is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: We will also need to set up a corresponding `fetch` method in `api-order.js`,
    which is used in the view, in the `ProductOrderEdit` component, to make a request
    to this API, retrieve the status values, and render these as options in the dropdown.
    In the next section, we will look at the update order API endpoint, which needs
    to be called when the seller selects a relevant status value from the dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: Update order status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a product's status is changed to any value other than **Processing** or **Cancelled**,
    a PUT request to `'/api/order/status/:shopId'` will directly update the order
    in the database, given that the current user is the verified owner of the shop
    with the ordered product. We will declare the route for this update API like so.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The `update` controller method will query the Order collection and find the
    order with the `CartItem` object that matches the updated product and set the
    `status` value of this matched `CartItem` in the `products` array of the order.
    The `update` controller method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: To access this API from the frontend, we will add an `update` fetch method in `api-order.js` to
    make a call to this update API with the required parameters passed from the view.
    The `update` fetch method will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: This `update` fetch method is called in the `ProductOrderEdit` view when the
    seller selects any value other than Processing or Cancelled from the options in
    the dropdown for an ordered product. In the next section, we will look at the
    cancel product order API, which is invoked if the seller selects Cancelled as
    a value instead.
  prefs: []
  type: TYPE_NORMAL
- en: Cancel product order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a seller decides to cancel the order for a product, a PUT request will
    be sent to `/api/order/:shopId/cancel/:productId` so that the product's stock
    quantity can be increased and the order can be updated in the database. To implement
    this cancel product order API, we will declare the API route as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the product associated with the `productId` parameter in the route,
    we will also use the `productByID` product controller method. This will retrieve
    the product and attach it to the request object for the `next` methods.
  prefs: []
  type: TYPE_NORMAL
- en: To update the product's stock quantity when this API receives a request, we
    will use the `increaseQuantity` controller method, which is added to `product.controller.js`,
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The `increaseQuantity` controller method finds the product by the matching ID
    in the Product collection and increases the quantity value by the quantity that
    was ordered by the customer. It does this now that the order for this product
    has been canceled.
  prefs: []
  type: TYPE_NORMAL
- en: From the view, we will use the corresponding fetch method, which is added in
    `api-order.js`, to call this cancel product order API. The `cancelProduct` fetch
    method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: This `cancelProduct` fetch method is called in the `ProductOrderEdit` view when
    the seller selects Cancelled from the dropdown for an ordered product. In the
    next section, we will look at the process charge API, which is invoked if the
    seller selects Processing as a status value instead.
  prefs: []
  type: TYPE_NORMAL
- en: Process charge for a product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a seller changes the status of an ordered product to **Processing**, we
    will set up a backend API to not only update the order but to also create a charge
    on the customer's credit card for the price of the product multiplied by the quantity
    ordered. The route for this API will be declared as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: To retrieve the order associated with the `orderId` parameter in the route,
    we will use the `orderByID` order controller method, which gets the order from
    the Order collection and attaches it to the request object so that it can be accessed
    by the `next` methods. This `orderByID` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/order.controller.js:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The process charge API will receive a PUT request at `/api/order/:orderId/charge/:userId/:shopId`.
    After successfully authenticating the user, it will create the charge by calling
    the `createCharge` user controller, as we discussed in the *Using Stripe for payments*
    section. Finally, the corresponding order will be updated with the `update` controller
    method, as discussed in the *Update order status* section.
  prefs: []
  type: TYPE_NORMAL
- en: From the view, we will use the `processCharge` fetch method in `api-order.js` and
    provide the required route parameter values, credentials, and product details,
    including the amount to charge. The `processCharge` fetch method is defined as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/order/api-order.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This `processCharge` fetch method is called in the `ProductOrderEdit` view when
    the seller selects Processing from the dropdown for an ordered product.
  prefs: []
  type: TYPE_NORMAL
- en: With these implementations in place, sellers can view orders that have been
    received for their products in each of their shops and easily update the status
    of each product ordered while the application takes care of additional tasks,
    such as updating stock quantity and initiating payment. This covers the basic
    order management features for the MERN Marketplace application, which can be extended
    further as required. In the next section, we will discuss how the current implementations
    can be easily extended to implement other views for displaying order details.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing single-order details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the Order collection and the database access all set up, moving forward,
    it is easy to add the features of listing orders for each user and showing details
    of a single order in a separate view where the user can track the status of each
    ordered product. A view to render the details of a single order to the customer
    can be designed and implemented to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3884bce0-19cf-4591-9af9-24ebd2f47884.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following the steps that have been repeated throughout this book to set up
    backend APIs to retrieve data and use it in the frontend to construct frontend
    views, you can develop order-related views as desired. For example, a view to
    display the orders that have been placed by a single user can be rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bd10d42-8a7e-4d4a-94b2-281cc8e207a8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can apply the lessons you learned while building out the full-stack features
    of the MERN Marketplace application to implement these order detail views, taking
    inspiration from the snapshots of these sample views from the MERN Marketplace
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The MERN Marketplace application that we developed in this chapter and [Chapter
    7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising MERN Skills with an
    Online Marketplace*, by building on the MERN skeleton application covered the
    crucial features for a standard online marketplace application. This, in turn,
    demonstrated how the MERN stack can be extended to incorporate complex features.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we extended the MERN Marketplace application and explored how
    to add a shopping cart for buyers, a checkout process with credit card payments,
    and order management for the sellers in an online marketplace application.
  prefs: []
  type: TYPE_NORMAL
- en: We discovered how the MERN stack technologies can work well with third-party
    integrations as we implemented the cart checkout flow and processed credit card
    charges on ordered products using the tools provided by Stripe for managing online
    payments.
  prefs: []
  type: TYPE_NORMAL
- en: We also unlocked more of what is possible with MERN, such as optimized bulk
    write operations in MongoDB for updating multiple documents in response to a single
    API call. This allowed us to decrease the stock quantities of multiple products
    in one go, such as when a user placed an order for multiple products from different
    stores.
  prefs: []
  type: TYPE_NORMAL
- en: With these new approaches and implementations that we explored, you can easily
    integrate payment processing, use offline storage in browsers, and perform bulk database operations
    for any MERN-based application you choose to build.
  prefs: []
  type: TYPE_NORMAL
- en: The marketplace features that you developed in the MERN Marketplace application
    revealed how this stack and structure can be utilized to design and build growing
    applications by adding features that may be simple or more complex in nature.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take the lessons we've learned so far in this book
    and explore more advanced possibilities with this stack by extending this MERN
    Marketplace application so that it incorporates real-time bidding capabilities.
  prefs: []
  type: TYPE_NORMAL
