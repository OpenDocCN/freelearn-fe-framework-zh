- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying to Production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have completed your first React application, it is time to learn
    how to deploy it to the world. For this purpose, we will use the cloud service
    called **DigitalOcean**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to deploy your React application using
    Node.js and `nginx` on an Ubuntu server from DigitalOcean. In a nutshell, we will
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a DigitalOcean Droplet and configuring it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring nginx, PM2, and a domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing CircleCI for continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 19+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first DigitalOcean Droplet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have used DigitalOcean for the last seven years, and I can say that it is
    one of the best cloud services I have tried, not just because of the affordable
    costs but also because it is super easy and fast to configure, and the community
    has a lot of updated documentation to fix most of the common issues related to
    server configuration.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you will need to invest some money to get this service. I will
    show you the cheapest way to do this, and if in the future you want to increase
    the power of your Droplets, you will be able to increase the capacity without
    redoing the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The lowest price for a very basic Droplet is $6.00 per month ($0.009 per hour).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use Ubuntu 20.04 (but feel free to use the latest version, 21.04);
    you will need to know some basic Linux commands to be able to configure your Droplet.
    If you’re a beginner using Linux, don’t worry—I’ll try to show you each step in
    a very easy way.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up to DigitalOcean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don’t have a DigitalOcean account, you can sign up at [https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can sign up with your Google account or by registering manually. Once you
    register with Google, you will see the **Billing Info** view, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: Billing Info'
  prefs: []
  type: TYPE_NORMAL
- en: You can pay with your credit card or by using PayPal. Once you have configured
    your payment information, DigitalOcean will ask you for some information about
    your project so that it can configure your Droplet faster.
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: First application'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go on to create our first Droplet.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first Droplet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a new Droplet from scratch. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **New Droplet** option, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: New Droplet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Ubuntu 20.04 (LTS) x64**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Word  Description automatically generated](img/B18414_17_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.4: Choose an image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, choose the **Basic** plan, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated with medium confidence](img/B18414_17_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: Choose a plan'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then choose **$6/mo** from the payment plan options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18414_17_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: CPU options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a region. In this case, we will select the **San Francisco** region:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18414_17_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 17.7: Choose Region'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a root password, add the name of your Droplet, and then click on the
    **Create Droplet** button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 17.8: Authentication'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It will take around 30 seconds to create your Droplet. Once it has been created,
    you will be able to see it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18414_17_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: My first Droplet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in your Terminal, you can access the Droplet by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first time you access it, you will be asked for a fingerprint. You just
    need to type *Yes*, and then it will require your password (the one you defined
    when you created your Droplet).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This serves as a security feature specifically designed to prevent *man-in-the-middle*
    attacks. The server’s “fingerprint” acts as a distinctive digital signature that
    is unique to the server itself. When you observe a fingerprint that matches the
    expected one, you can proceed by typing `yes` and pressing *Enter* to continue.
    Subsequently, the server will prompt you to enter your password. Provide the password
    you defined when you created your Droplet, and press *Enter*. Please note that,
    for security purposes, no characters will be displayed on the screen as you enter
    your password. Upon successful authentication, you will be logged in to your server,
    ready to initiate commands.
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.10: Connecting to Droplet'
  prefs: []
  type: TYPE_NORMAL
- en: Now we are all set to install Node.js, which we will cover in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you’re connected to your Droplet, let’s configure it. First, we need
    to install the latest version of Node.js using a Personal Package Archive. The
    current version of Node at the time of writing this book is 19.9.x. Follow these
    steps to install Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If, when you are reading this paragraph, Node has a new version, change the
    version in the `setup_19.x` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you get the `nodesource_setup.sh` file, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, install Node by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If everything works fine, verify the installed version of Node and `npm` with
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you need a newer version of Node.js, you can always upgrade it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Git and GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I created a special repository to help you to deploy your first React application
    to production ([https://github.com/FoggDev/production](https://github.com/FoggDev/production)).
  prefs: []
  type: TYPE_NORMAL
- en: In your Droplet, you need to clone this Git repository (or your own repository
    if you have your React application ready to be deployed). The production repository
    is public, but normally you will use a private repository; in this case, you need
    to add the SSH key of your Droplet to your GitHub account.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create this key, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `ssh-keygen` command and then press *Enter* three times without entering
    any passphrase:![Text  Description automatically generated](img/B18414_17_11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 17.11: ssh-keygen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you leave your Terminal inactive for more than five minutes, your Droplet
    connection will probably be closed, and you will need to connect again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you have created your Droplet SSH key, you can see it by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 17.12: ssh-rsa'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy your SSH key and then visit your GitHub account. Go to **Settings** |
    **SSH and GPG Keys** ([https://github.com/settings/ssh/new](https://github.com/settings/ssh/new)).
    Then, paste your key in to the text area and add your title to the key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.13: Adding a new SSH key to GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on the **Add SSH key** button, you will see your SSH key, like
    so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.14: SSH'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can clone our repository (or yours) using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you clone it for the first time, you will get a message asking you to
    allow the RSA key fingerprint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.15: Cloning repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have to type `Yes` and then hit *Enter* to be able to clone it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.16: Known hosts'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you have to go to the production directory and install the `npm` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to test the application, just run the `start` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then open your browser and go to your Droplet IP and add the port number. In
    my case, it is `http://144.126.222.17:3000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A picture containing logo  Description automatically generated](img/B18414_17_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.17: Project running in development mode'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will run the project in development mode. If you want to run it in production
    mode, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see **Production Process Manager** (**PM2**) running, as shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_18.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 17.18: PM2'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you run it and view the **Network** tab in your Chrome DevTools, you will
    see the bundles being loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B18414_17_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.19: The Network tab'
  prefs: []
  type: TYPE_NORMAL
- en: We now have our React application working in production, but let’s see what
    else we can do with DigitalOcean in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Turning off our Droplet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To turn off the Droplet, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to turn off your Droplet, you can go to the **Power** section,
    or you can use the **ON/OFF** switch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.20: Turning off the Droplet'
  prefs: []
  type: TYPE_NORMAL
- en: 'DigitalOcean will charge you only when your Droplet is **ON**. If you click
    on the **ON** switch to turn it off, then you will get the following confirmation
    message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.21: Turn off Droplet'
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can control your Droplet and avoid paying unnecessarily when
    you’re not using your Droplet.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring nginx, PM2, and a domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Droplet is ready to be used for production, but as you can see, we are still
    using port `3000`. We need to configure nginx and implement a proxy to redirect
    the traffic from port `80` to `3000`; this means we won’t need to specify the
    port directly anymore.
  prefs: []
  type: TYPE_NORMAL
- en: '**Node PM2** will help us run the Node server in production securely. Generally,
    if we run Node directly with the `node` or `babel-node` commands, and there is
    an error in the app, then it will crash and will stop working. PM2 restarts the
    node server if an error occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in your Droplet, you need to install PM2 globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: PM2 will help us to run our React app in a very easy way.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring nginx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install nginx, you need to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have installed nginx, you can start the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to adjust the firewall to allow the traffic for port `80`. To list
    the available application configurations, you need to run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Nginx Full` means that it will allow the traffic from port `80` (HTTP) and
    port `443` (HTTPS). We haven’t configured any domain with SSL, so, for now, we
    should restrict the traffic to be sent just through port `80` (HTTP):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you try to access the Droplet IP, you should see nginx working:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_22.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 17.22: Welcome to nginx'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can manage the nginx process with these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Nginx is an amazing web server that is getting very popular nowadays.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a reverse proxy server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As I mentioned previously, we need to set up a reverse proxy server to send
    the traffic from port `80` (HTTP) to port `3000` (the React app). To do this,
    you need to open the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The steps to set up the reverse proxy server are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `location /` block, you need to replace the code in the file with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have saved the file, you can verify whether there is a syntax error
    in the nginx configuration with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If everything is fine, then you should see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.23: sudo ngnix-t'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you need to restart the nginx server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you should be able to access the React application without the port, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing text  Description automatically generated](img/B18414_17_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.24: The React application without the port'
  prefs: []
  type: TYPE_NORMAL
- en: We are almost done! In the next section, we are going to add a domain to our
    Droplet.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a domain to our Droplet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using an IP to access a website is not nice; we always need to use a domain
    to help users find our website more easily. If you want to use a domain with your
    Droplet, you need to change the nameservers of your domain to point to the DigitalOcean
    DNS. I normally use GoDaddy to register my domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so using GoDaddy, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://dcc.godaddy.com/manage/YOURDOMAIN.COM/dns](https://dcc.godaddy.com/manage/YOURDOMAIN.COM/dns),
    and then go to the **Nameservers** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.25: Nameservers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Change** button, select **Custom**, and then specify the DigitalOcean
    DNS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.26: DigitalOcean Nameservers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally, it takes between 15 and 30 minutes for the DNS changes to be reflected;
    for now, after you have updated your nameservers, go to your **Droplet** dashboard
    and then choose the **Add a domain** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.27: Add a domain'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, write your domain name, select your Droplet, and click on the **Add Domain**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Chart, radar chart  Description automatically generated](img/B18414_17_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.28: Networking'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you must create a new record for **CNAME**. Select the **CNAME** tab,
    and in **HOSTNAME**, type `www`; in the alias field, write `@;` by default, the
    TTL is `43200`. All of this is to enable access to your domain using the `www`
    prefix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.29: Create new record'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you did everything correctly, you should be able to access your domain and
    see the React application working. As I said before, this process can take up
    to 30 minutes, but in some cases, it can take up to 24 hours, depending on the
    DNS propagation speed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.30: React application running on domain'
  prefs: []
  type: TYPE_NORMAL
- en: Amazing. Now you have officially deployed your first React application to production!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing CircleCI for continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I’ve been using CircleCI for a while, and I can tell you that it is one of
    the best CI solutions: it is free for personal use, giving you unlimited repositories
    and users; you have 1,000 build minutes per month, one container, and one concurrent
    job; if you need more, you can upgrade the plan with an initial price of $50 per
    month.'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you need to do is sign up on the site using your GitHub account
    (or Bitbucket, if you prefer).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you choose to use GitHub, you need to authorize CircleCI in your account,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.31: Authorize CircleCI'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to add our SSH key to CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an SSH key to CircleCI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have created your account, CircleCI needs a way to log in to your
    DigitalOcean Droplet to run the deploy script. Follow these steps to complete
    this task:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new SSH key inside your Droplet using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, let’s add the key to our `authorized_keys`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you need to download the private key. To verify that you can log in with
    the new key, you need to copy it to your local machine, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you did everything correctly, you should be able to log in to your Droplet
    without a password, and that means CircleCI can access our Droplet too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Copy the content of your `id_rsa_droplet.pub` key and then go to your repository
    settings ([https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY](https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.32: Project Settings'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **SSH Keys**, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.33: SSH Keys'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also access the URL [https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY/ssh](https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY/ssh),
    and then click on the **Add SSH Key** button at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, email  Description automatically generated](img/B18414_17_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.34: Add an SSH key'
  prefs: []
  type: TYPE_NORMAL
- en: Paste your private key, and then provide a name for the **Hostname** field;
    we will name it `DigitalOcean`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let’s configure our CircleCI instance in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CircleCI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have configured access for CircleCI to your Droplet, you need to
    add a `config` file to your project to specify the jobs you want to execute for
    the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process is shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, you need to create the `.circleci` directory and add the following
    inside the `config.yml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you have a `.yml` file, you need to be careful with the indentation; it
    is similar to Python in that if you don’t use indents correctly, you will get
    an error. Let’s see how this file is structured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the CircleCI version we will use. In this instance, you are using version
    `2.1` (the latest one at the time of writing this book):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside `jobs`, we will specify that it needs to configure the container; we
    will create it using Docker and also outline the steps to follow for the deployment
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`working_directory` will be the temporal directory we will use to install the
    npm packages and run our deploy scripts. In this case, I decided to use the `tmp`
    directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As I said before, we will create a Docker container, and in this instance,
    I selected an existing image that includes `node: 18.12.1`. If you want to know
    about all the available images, you can visit [https://circleci.com/docs/2.0/circleci-images](https://circleci.com/docs/2.0/circleci-images):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the code case, first do a `git checkout` to `master`, then in each `run`
    sentence, you need to specify the scripts you want to run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an explanation of the previous steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to install the npm packages using `npm install` to be able to
    perform the next tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the ESLint validation using `npm run lint`. If it fails, it will break
    the deployment process; otherwise, it continues with the next run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the Jest validations using `npm run test`; if it fails, it will break
    the deployment process. Otherwise, it continues with the next run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last step, we connect to our DigitalOcean Droplet, passing the `StrictHostKeyChecking=no`
    flag to disable the strict host key checking. We then use the `$DROPLET_USER`
    and `$DROPLET_IP` `ENV` variables to connect to it (we will create those in the
    next step), and finally, we will specify all the commands we will perform inside
    our Droplet using single quotes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These commands are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cd production:** Grants access to the production (or your Git repository
    name).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**git checkout master:** This will check out the master branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**git pull:** Pulls the latest changes from our repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**npm run start:production:** This is the final step, which runs our project
    in production mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, let’s add some environment variables to our CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating environment variables variables in CircleCI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you saw previously, we are using the **$DROPLET_USER** and **$DROPLET_IP**
    variables, but how do we define those? Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to go to your project settings again and select the **Environment
    Variables** option. Then, you need to create the `DROPLET_USER` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.35: Add Environment Variable'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you need to create the **DROPLET_IP** variable using your Droplet IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.36: DROPLET_IP'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you need to push the config file to your repository, and you will be ready
    for the magic. Now that CircleCI is connected to your repository, every time you
    push changes to master, it will fire a build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Normally, the first two or three builds can fail due to syntax errors, indent
    errors in our config, or maybe because we have linter errors or unit test errors.
    If you have a failure, you will see something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated with medium confidence](img/B18414_17_37.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 17.37: Build error'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, the first build failures at the
    bottom say **Build Error**, and the second one says `build-deploy` under WORKFLOW,
    as shown in *Figure 17.38*. This basically means that in the first build, I had
    a syntax error in the `config.yml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you fix all the syntax errors in the `config.yml` file and all the issues
    with the linter or the unit tests, you should see a **Success** build like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18414_17_38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.38: SUCCESS build'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on the build number, you can see all the steps that CircleCI executed
    before publishing the new changes in your Droplet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.39: Steps executed by CircleCI'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the order of the steps is the same as we specified in our `config.yml`
    file; you can even see the output of each step by clicking on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text  Description automatically generated](img/B18414_17_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.40: Lint and test steps'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s suppose you have an error on your linter validation or in some unit
    tests. Let’s see what happens in that case, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18414_17_41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.41: Linter error'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, once an error is detected, it will exit with code `1`. This
    means it will abort the deployment and mark it as a failure. Notice that none
    of the steps after `npm run lint` are executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another cool thing is that if you now go to your GitHub repository and check
    your commits, you will see all the commits that had a successful build and all
    the commits that had a failed build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.42: GitHub successful build'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is amazing: now you have your project configured to do deployments automatically,
    and it is connected to your GitHub repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! We’ve reached the end of our journey through the deployment
    process, and you now have the knowledge and skills needed to deploy your React
    application to the world (production). You’ve also learned how to implement CircleCI
    for continuous integration, streamlining your development process and ensuring
    that your application remains performant and reliable.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging the strategies and best practices outlined in this chapter, you
    can confidently launch your application to a global audience, secure in the knowledge
    that it has been optimized for speed, scalability, and resilience. Thank you for
    joining me on this journey. I hope you’ve enjoyed reading my book.
  prefs: []
  type: TYPE_NORMAL
