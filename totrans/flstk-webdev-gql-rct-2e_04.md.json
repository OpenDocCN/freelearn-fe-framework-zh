["```js\n    sudo apt-get update && sudo apt-get upgrade -y\n    ```", "```js\n    sudo apt-get install apache2 mysql-server php php-pear php-mysql\n    ```", "```js\n    su -\n    ```", "```js\n    mysql_secure_installation\n    ```", "```js\n    mysql -u root\n    ```", "```js\n    PASSWORD string with the password that you want. This is the password that you will use for the database connection in your application, but also when logging into phpMyAdmin. This command creates a user called devuser, with root privileges that are acceptable for local development.NoteIf you are already using MySQL8, the command that you need execute is a little different. Just run the following lines:**CREATE USER 'devuser'@'%' IDENTIFIED BY 'PASSWORD';****GRANT ALL PRIVILEGES ON *.* TO 'devuser'@'%' WITH GRANT OPTION;****FLUSH PRIVILEGES;**The above commands will create a new user with the same permissions on your MySQL server.\n    ```", "```js\n    sudo apt-get install phpmyadmin\n    ```", "```js\n    cd /var/www/html/\n    sudo ln -s /usr/share/phpmyadmin\n    ```", "```js\nCREATE DATABASE graphbook_dev CHARACTER SET utf8 COLLATE utf8_general_ci;\n```", "```js\nnpm install --save sequelize mysql2\n```", "```js\nmkdir src/server/database\ntouch src/server/database/index.js\n```", "```js\nimport Sequelize from 'sequelize';\nconst sequelize = new Sequelize('graphbook_dev', 'devuser', 'PASSWORD', {\n  host: 'localhost',\n  dialect: 'mysql', \n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n});\nexport default sequelize;\n```", "```js\nmkdir src/server/config\ntouch src/server/config/index.js\n```", "```js\nmodule.exports = {\n  \"development\": {\n    \"username\": \"devuser\",\n    \"password\": \"PASSWORD\",\n    \"database\": \"graphbook_dev\",\n    \"host\": \"localhost\",\n    \"dialect\": \"mysql\",\n    \"pool\": {\n      \"max\": 5,\n      \"min\": 0,\n      \"acquire\": 30000,\n      \"idle\": 10000\n    }\n  },\n  \"production\": {\n    \"host\": process.env.host,\n    \"username\": process.env.username,\n    \"password\": process.env.password,\n    \"database\": process.env.database,\n    \"logging\": false,\n    \"dialect\": \"mysql\",\n    \"pool\": {\n      \"max\": 5,\n      \"min\": 0,\n      \"acquire\": 30000,\n      \"idle\": 10000\n    }\n  }\n}\n```", "```js\nimport Sequelize from 'sequelize';\nimport configFile from '../config/';\nconst env = process.env.NODE_ENV || 'development';\nconst config = configFile[env];\nconst sequelize = new Sequelize(config.database,\n  config.username, config.password, config);\nconst db = {\n  sequelize,\n};\nexport default db;\n```", "```js\nmkdir src/server/models\nmkdir src/server/migrations\n```", "```js\nnpm install -g sequelize-cli\n```", "```js\nsequelize model:generate --models-path src/server/models --migrations-path src/server/migrations --name Post --attributes text:text\n```", "```js\n'use strict';\nconst {\n  Model\n} = require('sequelize');\nmodule.exports = (sequelize, DataTypes) => {\n  class Post extends Model {\n    /**\n     * Helper method for defining associations.\n     * This method is not a part of Sequelize lifecycle.\n     * The 'models/index' file will call this method \n       automatically.\n     */\n    static associate(models) {\n      // define association here\n    }\n  };\n  Post.init({\n    text: DataTypes.TEXT\n  }, {\n    sequelize,\n    modelName: 'Post',\n  });\n  return Post;\n};\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    await queryInterface.createTable('Posts', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      text: {\n        type: Sequelize.TEXT\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: async (queryInterface, Sequelize) => {\n    await queryInterface.dropTable('Posts');\n  }\n};\n```", "```js\nsequelize db:migrate --migrations-path src/server/migrations --config src/server/config/index.js\n```", "```js\nimport Sequelize from 'sequelize';\nif (process.env.NODE_ENV === 'development') {\n  require('babel-plugin-require-context-hook/register')()\n}\nexport default (sequelize) => {\n  let db = {};\n  const context = require.context('.', true,\n    /^\\.\\/(?!index\\.js).*\\.js$/, 'sync')\n  context.keys().map(context).forEach(module => {\n    const model = module(sequelize, Sequelize);\n    db[model.name] = model;\n  });\n  Object.keys(db).forEach((modelName) => {\n    if (db[modelName].associate) {\n      db[modelName].associate(db);\n    }\n  });\n  return db;\n};\n```", "```js\nnpm install --save-dev babel-plugin-require-context-hook\n```", "```js\nnodemon --exec babel-node --plugins require-context-hook --watch src/server src/server/index.js\n```", "```js\nimport models from '../models';\n```", "```js\nconst db = {\n  models: models(sequelize),\n  sequelize,\n};\n```", "```js\nimport db from './database';\n```", "```js\nmkdir src/server/seeders\n```", "```js\nsequelize seed:generate --name fake-posts --seeders-path src/server/seeders\n```", "```js\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.bulkInsert('Person', [{\n        name: 'John Doe',\n        isBetaMember: false\n      }], {});\n    */\n  },\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.bulkDelete('Person', null, {});\n    */\n  }\n};\n```", "```js\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.bulkInsert('Posts', [{\n      text: 'Lorem ipsum 1',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    },\n    {\n      text: 'Lorem ipsum 2',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }],\n    {});\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Posts', null, {});\n  }\n};\n```", "```js\nsequelize db:seed:all --seeders-path src/server/seeders --config src/server/config/index.js\n```", "```js\nimport db from './database';\nconst utils = {\n  db,\n};\n```", "```js\nimport servicesLoader from './services';\nconst services = servicesLoader(utils);\n```", "```js\nimport graphql from './graphql';\nexport default utils => ({\n  graphql: graphql(utils),\n});\n```", "```js\nexport default (utils) => {\n    const server = new ApolloServer({\n        typeDefs: Schema,\n        resolvers: Resolvers.call(utils),\n        context: ({ req }) => req\n    });\n    return server;\n};\n```", "```js\nexport default function resolver() { \n  ...\n  return resolvers;\n}\n```", "```js\nconst { db } = this;\nconst { Post } = db.models;\n```", "```js\nposts(root, args, context) {\n  return Post.findAll({order: [['createdAt', 'DESC']]});\n},\n```", "```js\n{\n  \"data\": {\n    \"posts\": [{\n      \"id\": 1,\n      \"text\": \"Lorem ipsum 1\",\n      \"user\": null\n    },\n    {\n      \"id\": 2,\n      \"text\": \"Lorem ipsum 2\",\n      \"user\": null\n    }]\n  }\n}\n```", "```js\nsequelize model:generate --models-path src/server/models --migrations-path src/server/migrations --name User --attributes avatar:string,username:string\n```", "```js\nsequelize migration:create --migrations-path src/server/migrations --name add-userId-to-post\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    return Promise.all([\n      queryInterface.addColumn('Posts',\n        'userId',\n        {\n          type: Sequelize.INTEGER, \n        }),\n      queryInterface.addConstraint('Posts', {\n        fields: ['userId'],\n        type: 'foreign key',\n        name: 'fk_user_id',\n        references: {\n          table: 'Users',\n          field: 'id',\n        },\n        onDelete: 'cascade',\n        onUpdate: 'cascade',\n      }),\n    ]);\n  },\n  down: async (queryInterface, Sequelize) => {\n    return Promise.all([\n      queryInterface.removeColumn('Posts', 'userId'),\n    ]);\n  }\n};\n```", "```js\nsequelize db:migrate --migrations-path src/server/migrations --config src/server/config/index.js\n```", "```js\nsequelize db:migrate:undo --migrations-path src/server/migrations --config src/server/config/index.js\n```", "```js\nsequelize db:migrate:undo:all --to XXXXXXXXXXXXXX-create-posts.js --migrations-path src/server/migrations --config src/server/config/index.js\n```", "```js\nstatic associate(models) {\n  this.belongsTo(models.User);\n}\n```", "```js\nuserId: DataTypes.INTEGER,\n```", "```js\nstatic associate(models) {\n  this.hasMany(models.Post);\n}\n```", "```js\nPost: {\n  user(post, args, context) {\n    return post.getUser();\n  },\n},\n```", "```js\n    sequelize seed:generate --name fake-users --seeders-path src/server/seeders\n    ```", "```js\n    'use strict';\n    module.exports = {\n      up: async (queryInterface, Sequelize) => {\n        return queryInterface.bulkInsert('Users', [{\n          avatar: '/uploads/avatar1.png',\n          username: 'TestUser',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        {\n          avatar: '/uploads/avatar2.png',\n          username: 'TestUser2',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }],\n        {});\n      },\n      down: async (queryInterface, Sequelize) => {\n        return queryInterface.bulkDelete('Users', null,\n          {});\n      }\n    };\n    ```", "```js\n    up: (queryInterface, Sequelize) => {\n      // Get all existing users\n      return queryInterface.sequelize.query(\n        'SELECT id from Users;',\n      ).then((users) => {\n        const usersRows = users[0];  \n        return queryInterface.bulkInsert('Posts', [{\n          text: 'Lorem ipsum 1',\n          userId: usersRows[0].id,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        {\n          text: 'Lorem ipsum 2',\n          userId: usersRows[1].id,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }],\n        {});\n      });\n    },\n    ```", "```js\nsequelize db:seed:undo:all --seeders-path src/server/seeders --config src/server/config/index.js\n```", "```js\nsequelize db:seed:all --seeders-path src/server/seeders --config src/server/config/index.js\n```", "```js\nconst { Post, User } = db.models;\n```", "```js\naddPost(root, { post }, context) { \n  return User.findAll().then((users) => {\n    const usersRow = users[0];\n\n    return Post.create({\n      ...post,\n    }).then((newPost) => {\n      return Promise.all([\n        newPost.setUser(usersRow.id),\n      ]).then(() => {\n        logger.log({\n          level: 'info',\n          message: 'Post was created',\n        });\n        return newPost;\n      });\n    });\n  });\n},\n```", "```js\n{\n  \"operationName\": null,\n  \"query\": \"mutation addPost($post : PostInput!) { \n    addPost(post : $post) { \n    id text user { username avatar }}}\",\n  \"variables\":{\n    \"post\": {\n      \"text\": \"You just added a post.\"\n    }\n  }\n}\n```", "```js\naddPost (\n  post: PostInput!\n): Post\n```", "```js\nsequelize model:generate --models-path src/server/models --migrations-path src/server/migrations --name Chat --attributes firstName:string,lastName:string,email:string\n```", "```js\nsequelize migration:create --migrations-path src/server/migrations --name create-user-chats\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    return queryInterface.createTable('users_chats', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      userId: {\n        type: Sequelize.INTEGER,\n        references: {\n          model: 'Users',\n          key: 'id'\n        },\n        onDelete: 'cascade',\n        onUpdate: 'cascade',\n      },\n      chatId: {\n        type: Sequelize.INTEGER,\n        references: {\n          model: 'Chats',\n          key: 'id'\n        },\n        onDelete: 'cascade',\n        onUpdate: 'cascade',\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: async (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('users_chats');\n  }\n};\n```", "```js\nthis.belongsToMany(models.Chat, { through: 'users_chats' });\n```", "```js\nthis.belongsToMany(models.User, { through: 'users_chats' });\n```", "```js\nsequelize db:migrate --migrations-path src/server/migrations --config src/server/config/index.js\n```", "```js\nsequelize model:generate --models-path src/server/models --migrations-path src/server/migrations --name Message --attributes text:string,userId:integer,chatId:integer\n```", "```js\nuserId: {\n  type: Sequelize.INTEGER,\n  references: {\n    model: 'Users',\n    key: 'id'\n  },\n  onDelete: 'SET NULL',\n  onUpdate: 'cascade',\n},\nchatId: {\n  type: Sequelize.INTEGER,\n  references: {\n    model: 'Chats',\n    key: 'id'\n  },\n  onDelete: 'cascade',\n  onUpdate: 'cascade',\n},\n```", "```js\nstatic associate(models) {\n  this.belongsTo(models.User);\n  this.belongsTo(models.Chat);    \n}\n```", "```js\nthis.hasMany(models.Message);\n```", "```js\ntype User {\n  id: Int\n  avatar: String\n  username: String\n}\ntype Post {\n  id: Int\n  text: String\n  user: User\n}\ntype Message {\n  id: Int\n  text: String\n  chat: Chat\n  user: User\n}\ntype Chat {\n  id: Int\n  messages: [Message]\n  users: [User]\n}\ntype RootQuery {\n  posts: [Post]\n  chats: [Chat]\n}\n```", "```js\nMessage: {\n  user(message, args, context) {\n    return message.getUser();\n  },\n  chat(message, args, context) {\n    return message.getChat();\n  },\n},\nChat: {\n  messages(chat, args, context) {\n    return chat.getMessages({ order: [['id', 'ASC']] });\n  },\n  users(chat, args, context) {\n    return chat.getUsers();\n  },\n},\nRootQuery: {\n  posts(root, args, context) {\n    return Post.findAll({order: [['createdAt', 'DESC']]});\n  },\n  chats(root, args, context) {\n    return User.findAll().then((users) => {\n      if (!users.length) {\n        return [];\n      }\n      const usersRow = users[0];\n\n      return Chat.findAll({\n        include: [{\n          model: User,\n          required: true,\n          through: { where: { userId: usersRow.id } },\n        },\n        {\n          model: Message,\n        }],\n      });\n    });\n  },\n},\n```", "```js\nconst { Post, User, Chat, Message } = db.models;\n```", "```js\n{\n  \"operationName\":null,\n  \"query\": \"{ chats { id users { id } messages { id text\n    user { id username } } } }\",\n  \"variables\":{}\n}\n```", "```js\n{\n  \"data\": {\n    \"chats\": []\n  }\n}\n```", "```js\nsequelize seed:generate --name fake-chats --seeders-path src/server/seeders\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    return queryInterface.bulkInsert('Chats', [{\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }],\n    {});\n  },\n  down: async (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Chats', null, {});\n  }\n};\n```", "```js\nsequelize seed:generate --name fake-chats-users-relations --seeders-path src/server/seeders\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    const usersAndChats = Promise.all([\n      queryInterface.sequelize.query(\n        'SELECT id from Users;',\n      ),\n      queryInterface.sequelize.query(\n        'SELECT id from Chats;',\n      ),\n    ]);\n\n    return usersAndChats.then((rows) => {\n      const users = rows[0][0];\n      const chats = rows[1][0];\n\n      return queryInterface.bulkInsert('users_chats', [{\n        userId: users[0].id,\n        chatId: chats[0].id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        userId: users[1].id,\n        chatId: chats[0].id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }],\n      {});\n    });\n  },\n  down: async (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('users_chats', null, {});\n  }\n};\n```", "```js\nsequelize seed:generate --name fake-messages --seeders-path src/server/seeders\n```", "```js\n'use strict';\nmodule.exports = {\n  up: async (queryInterface, Sequelize) => {\n    const usersAndChats = Promise.all([\n      queryInterface.sequelize.query(\n        'SELECT id from Users;',\n      ),\n      queryInterface.sequelize.query(\n        'SELECT id from Chats;',\n      ),\n    ]);\n\n    return usersAndChats.then((rows) => {\n      const users = rows[0][0];\n      const chats = rows[1][0];\n\n      return queryInterface.bulkInsert('Messages', [{\n        userId: users[0].id,\n        chatId: chats[0].id,\n        text: 'This is a test message.',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        userId: users[1].id,\n        chatId: chats[0].id,\n        text: 'This is a second test message.',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }],\n      {});\n    });\n  },\n  down: async (queryInterface, Sequelize) => {\n    return queryInterface.bulkDelete('Messages', null, {});\n  }\n};\n```", "```js\n{\n  \"data\": {\n    \"chats\": [{\n      \"id\": 1,\n      \"users\": [\n        {\n          \"id\": 1\n        },\n        {\n          \"id\": 2\n        }\n      ],\n      \"messages\": [\n        {\n          \"id\": 1,\n          \"text\": \"This is a test message.\",\n          \"user\": {\n            \"id\": 1,\n            \"username\": \"Test User\"\n          }\n        },\n        {\n          \"id\": 2,\n          \"text\": \"This is a second test message.\",\n          \"user\": {\n            \"id\": 2,\n            \"username\": \"Test User 2\"\n          }\n        }\n      ]}\n    ]\n  }\n}\n```", "```js\n    chat(root, { chatId }, context) {\n      return Chat.findByPk(chatId, {\n        include: [{\n          model: User,\n          required: true,\n        },\n        {\n          model: Message,\n        }],\n      });\n    },\n    ```", "```js\n    chat(chatId: Int): Chat\n    ```", "```js\n    {\n      \"operationName\":null,\n      \"query\": \"query($chatId: Int!){ chat(chatId:\n        $chatId) { \n        id users { id } messages { id text user { id\n          username } } } }\",\n      \"variables\":{ \"chatId\": 1 }\n    }\n    ```", "```js\n    addChat(root, { chat }, context) {\n      return Chat.create().then((newChat) => {\n        return Promise.all([\n          newChat.setUsers(chat.users),\n        ]).then(() => {\n          logger.log({\n            level: 'info',\n            message: 'Message was created',\n          });\n          return newChat;\n        });\n      });\n    },\n    ```", "```js\n    input ChatInput {\n      users: [Int]\n    }\n    type RootMutation {\n      addPost (\n        post: PostInput!\n      ): Post\n      addChat (\n        chat: ChatInput!\n      ): Chat\n    }\n    ```", "```js\n    {\n      \"operationName\":null,\n      \"query\": \"mutation addChat($chat: ChatInput!) { \n        addChat(chat: $chat) { id users { id } }}\",\n      \"variables\":{\n        \"chat\": {\n          \"users\": [1, 2]\n        }\n      }\n    }\n    ```", "```js\n    addMessage(root, { message }, context) {\n      return User.findAll().then((users) => {\n        const usersRow = users[0];\n\n        return Message.create({\n          ...message,\n        }).then((newMessage) => {\n          return Promise.all([\n            newMessage.setUser(usersRow.id),\n            newMessage.setChat(message.chatId),\n          ]).then(() => {\n            logger.log({\n              level: 'info',\n              message: 'Message was created',\n            });\n            return newMessage;\n          });\n        });\n      });\n    },\n    ```", "```js\n    input MessageInput {\n      text: String!\n      chatId: Int!\n    }\n    type RootMutation {\n      addPost (\n        post: PostInput!\n      ): Post\n      addChat (\n        chat: ChatInput!\n      ): Chat\n      addMessage (\n        message: MessageInput!\n      ): Message\n    }\n    ```", "```js\n    {\n       \"operationName\":null,\n       \"query\": \"mutation addMessage($message :\n         MessageInput!) { \n         addMessage(message : $message) { id text }}\",\n       \"variables\":{\n         \"message\": {\n           \"text\": \"You just added a message.\",\n           \"chatId\": 1\n         }\n       }\n    }\n    ```"]