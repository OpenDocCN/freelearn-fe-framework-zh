- en: 10\. Working with Vuex – Fetching Remote Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to work with remote APIs using the `Axios`
    library. You will make network calls and store results using Vuex. You will also
    see an example of how to store authentication tokens with Vuex and use it for
    further API calls.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a good idea of how Vuex can help abstract
    and create a wrapper for remote APIs, and ease their integration into a Vue application.
    This abstraction makes it easier to migrate to other APIs in the future, ensuring
    that the rest of your applications continue to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 9*, *Working with Vuex – State, Getters, Actions, and Mutations*,
    you were introduced to Vuex and saw multiple examples of how to work with it to
    both read data from and write data to a store. We saw how multiple components
    could work with the store and all be kept in sync with little to no work at our
    end. In this chapter, we are going to expand our Vuex usage by integrating it
    with remote data by using `Axios`, a popular open source library that makes it
    easy to use network resources. Let's start off with a deeper look at `Axios`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Axios` ([https://github.com/axios/axios](https://github.com/axios/axios))
    is a JavaScript library with both `async` and `await` if you wish. Other features
    include supporting default parameters (handy for APIs that require a key for every
    call) and the ability to transform your input and output data. We will not be
    covering every use case in this chapter, but you will get a good idea of how to
    work with `Axios` for your future projects.'
  prefs: []
  type: TYPE_NORMAL
- en: To be clear, you need not use `Axios` if you do not like it. You can use any
    other library or no library at all. The Fetch API ([https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API))
    is a modern browser API for working with network requests that, while not as powerful
    as `Axios`, doesn't require an additional library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how to install `Axios`.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of Axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Much like Vuex, you have multiple ways of including `Axios` in your project.
    The simplest is pasting in a `<script>` tag pointing to the **Content Delivery
    Network** (**CDN**) for the library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The other option is to use the `npm`. Within an existing Vue application, you
    can install `Axios` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have done this, your Vue components can then import the library as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'How you use `Axios` will depend on the API you are interacting with. Here is
    a simple example of hitting an imaginary API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are performing a `GET` request (`GET` is the default)
    against an imaginary API, *https://www.raymondcamden.com/api/cats*. `Axios` returns
    promises, which means we can chain results and errors with `then` and `catch`.
    The resulting JSON (again, this is an imaginary API) is automatically parsed so
    all that is left is to assign the result to a value, in this case, a value named
    `cats` used in my Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at a step-by-step process of using `Axios` to load the data from
    an API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 10.01: Using Axios to Load Data from an API'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at a complex example using `Axios`. This example will make two different
    API calls against the Star Wars API and return two lists of information. For now,
    we will skip using Vuex to make this introduction a bit simpler.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/3kbn1x1](https://packt.live/3kbn1x1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a new Vue application and, after the CLI has completed, add `Axios`
    as an `npm` dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `App.vue` page and add the import for `axios`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `App.vue` page and add the data values for the `films` and `ships` arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `App.vue` and use the created method to load in `films` and `starships`
    from the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, edit the template to iterate over the values and display them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Error handling is done using the catch handler but is just sent to the browser
    console. It would be better to tell the user something if the remote data did
    not load, but for now, this is acceptable. Another suggestion would be to handle
    a **loading** state, which you will see an example of later in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the application with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Opening the URL in your browser will generate the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.1: Results of the API calls rendered in the browser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_10_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.1: Results of the API calls rendered in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: This simple example shows how easy it is to add `Axios` to a Vue application.
    Remember that `Axios` is not required for Vue and you're welcome to use any library
    you want, or simply use the browser's native Fetch API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have seen how to get `Axios` into a project, let''s look at one
    of the cooler features of `Axios`: specifying default values.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Defaults with Axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While the code in *Exercise 10.01*, *Using Axios to Load Data from an API*
    works well, let''s consider a slightly more advanced example. One of the features
    of `Axios` is the ability to set up defaults that are used in future calls. If
    you look at the two calls made in the preceding code, you can see they are similar.
    You can update the `created` method to make use of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this updated version, we switch to an instance of `Axios`. A default `baseURL`
    value is specified that saves on typing later. Next, the `transformResponse` feature
    is used to, well, transform the response. This lets us modify data before it is
    sent to the handler of our calls later. Since all the API calls return a results
    value and that is the only thing we are concerned with, we simplify things a bit
    by returning that instead of the rest of the result. Note that `Axios` lets you
    use an array of functions in `transformResponse` if you want to build a complex
    set of transformations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to use `Axios` with Vuex.
  prefs: []
  type: TYPE_NORMAL
- en: Using Axios with Vuex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have seen the basics of working with `Axios`, it is time to consider
    how you could use it with Vuex. One way to do this simply is to just use Vuex
    to handle wrapping calls to the API, using `Axios` to perform the HTTP calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 10.02: Working with Axios in Vuex'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to take the previous functionality (loading the `films` and `ships`
    arrays) and rebuild it within the context of a Vuex store instead. As before,
    you will need to use the CLI to scaffold a new application and ensure you ask
    for Vuex to be included. When the CLI is done, you can then use the `npm` command
    to add `Axios` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'This exercise will be pretty much like the first application that we built
    in *Exercise 10.01,* *Using Axios to Load Data from an API*, but with some slight
    differences. Let''s look at the UI first. On the initial load, both `Films` and
    `Ships` are empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2: Initial application UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_10_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.2: Initial application UI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the `Films` portion has a loading message. As soon as the application
    loads, we will fire off a request to get that data. For `Ships`, though, we wait
    for the user to specifically request they want that data. Here is how it looks
    after the `films` array loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3: The application''s rendered films'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_10_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.3: The application''s rendered films'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, after clicking the `Load Ships` button, the button will disable (to
    prevent the user from requesting the data multiple times) and then the entire
    button is removed after the data is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4: The final view after everything is loaded'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_10_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.4: The final view after everything is loaded'
  prefs: []
  type: TYPE_NORMAL
- en: To access the code files for this exercise, refer to [https://packt.live/32pUsWy](https://packt.live/32pUsWy).
  prefs: []
  type: TYPE_NORMAL
- en: 'Start with the first component, `App.vue`. Write the HTML. Remember that the
    `films` are displayed in the component, but `ships` will be in their own component.
    Make use of `v-else` to add a loading message that will be shown while `Axios`
    makes the HTTP request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the code necessary to load and register the `Ships` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import `mapState` as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add code to map the `films` array from our store to a local computed
    value. Remember to import `mapState`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `created` method is used to fire off an action in our store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, build the `Ships` component in `components/Ship.vue`. The `Ships` component
    also contains a list of data but uses a button so that the user can request the
    data to be loaded. The button should automatically be dismissed when done and
    be disabled during the loading process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the code to handle mapping the `ships` state and fire off the action to
    Vuex to load the `ships`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, build the store. First, define the `state` to hold both the `films` and
    `ships` arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the actions to load `ships` and `films` data. They should both use
    `mutations` to assign values to the `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run your application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.5: The final output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_10_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.5: The final output'
  prefs: []
  type: TYPE_NORMAL
- en: All in all, this is not a huge change from the initial version without Vuex
    (if we ignore the UI changes), but now all our API usage is handled by the store.
    If for some reason we decide to stop using `Axios` and switch to Fetch, it can
    be done here. Whether we decide to add a caching system or store the data for
    offline use, it can all be done in the store. Test this version yourself by running
    `npm run serve` and opening the URL in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to put what you have learned into action with the next activity!
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 10.01: Using Axios and Vuex with Authentication'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the more interesting things you can do with Vuex is manage authentication.
    What do we mean by that? In many APIs, authentication is required before the service
    can be used. After the user authenticates, they are given a token. On future calls
    to the API, the token is passed along, typically as a header, which lets the remote
    service know this is an authorized user. Vuex can handle all of this for you,
    and `Axios` makes it easy to work with headers, so let's consider an example of
    this in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building a server with authentication and authorization is way outside the
    scope of this book, so instead, we are going to *fake* it. We will have two `JSONBin.io`,
    a service we used in *Chapter 9, Working with Vuex – State, Getters, Actions,
    and Mutations*. The first endpoint will return a token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The second endpoint will return an array of `cats`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this activity, we will use Vue Router to handle representing two **views**
    of the application, the login screen and the cat display screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps**:'
  prefs: []
  type: TYPE_NORMAL
- en: Present a login screen for the initial view of the application. It should prompt
    for a username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the login credentials to an endpoint and get a token. This part will be
    faked as we are not building a full, real authentication system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the cats from a remote endpoint and pass the token as an authentication header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should get the following output initially:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6: Initial login screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_10_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.6: Initial login screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in, you will then see the data, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7: Successfully displaying the data after login'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_10_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.7: Successfully displaying the data after login'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor401).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned a pretty important use case for Vuex—working with
    remote APIs. Remote APIs can provide an incredible amount of additional functionality
    to your applications, sometimes for little to no additional cost to the developer.
    You saw how to use `Axios` to make network calls easier and how to combine that
    with the state management features of Vuex. Finally, you put it together with
    Vue Router to create a simple login/authorization demo.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to discuss how to build more complex Vuex
    stores using modules.
  prefs: []
  type: TYPE_NORMAL
