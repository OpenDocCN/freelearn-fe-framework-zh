- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing with React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will build a simple app implementing the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: A home page that welcomes the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A products list page that lists all the products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A product page that provides details about a particular product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An admin page for privileged users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will all be managed using a library called **React Router**.
  prefs: []
  type: TYPE_NORMAL
- en: Through this, we will learn how to implement static links from the products
    list to the product page and implement route parameters on the product page for
    the product ID. We will also learn about form navigation and query parameters
    when it comes to the search feature of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the chapter will end with how to lazily load code for a page to improve
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using nested routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using route parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an error page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using index routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using search parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using form navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing lazy loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the following technologies in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser**: A modern browser such as Google Chrome'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code snippets in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter6](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter6).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we start by creating a new React project for the app before
    understanding what React Router is and how to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will develop the app locally using Visual Studio Code, which requires a new
    Create React App-based project setup. We have covered this several times, so we
    will not cover the steps in this chapter – instead, see [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072),
    *Setting Up React and TypeScript*. Create the project for the app with a name
    of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: We will style the app with Tailwind CSS. We covered how to install and configure
    Tailwind in Create React App in [*Chapter 5*](B19051_05.xhtml#_idTextAnchor127),
    *Approaches to Styling Frontends*, so after you have created the React and TypeScript
    project for the app, install and configure Tailwind.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name suggests, React Router is a routing library for React apps. A router
    is responsible for selecting what to show in the app for a requested path. For
    example, React Router is responsible for determining what components to render
    when a path of `/products/6` is requested. For any app containing multiple pages,
    a router is essential, and React Router has been a popular router library for
    React for many years.
  prefs: []
  type: TYPE_NORMAL
- en: Installing React Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'React Router is in a package called `react-router-dom`. Install this in the
    project using the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: TypeScript types are included in `react-router-dom`, so there is no need for
    a separate installation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a page in the app and declare a route that shows it.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start this section by creating a page component that lists the app’s
    products. We will then learn how to create a router and declare routes using React
    Router’s `createBrowserRouter` function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the products list page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The products list page component will contain the list of the React tools in
    the app. Carry out the following steps to create this:'
  prefs: []
  type: TYPE_NORMAL
- en: We will start by creating the data source for the page. First, create a folder
    called `data` in the `src` folder and then a file called `products.ts` within
    `data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content into `products.ts` (you can copy and paste it from
    the GitHub repository at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter6/src/data/products.ts](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter6/src/data/products.ts)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a list of all the React tools in the app held in a JavaScript array.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Usually, this kind of data is on a server somewhere, but this adds complexity
    beyond the scope of this chapter. We cover how to interact with server data in
    detail in [*Chapter 9*](B19051_09.xhtml#_idTextAnchor220), *Interacting with RESTful
    APIs*, including how to do this efficiently with React Router.
  prefs: []
  type: TYPE_NORMAL
- en: We will create the products list page component now. First, create a folder
    for all the page components in the `src` folder called `pages`. Next, create a
    file called `ProductsPage.tsx` in the `pages` folder for the products list page
    component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `import` statement into `ProductsPage.tsx` to import the
    products we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, start to create the `ProductsPage` component by outputting a heading
    for the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This uses Tailwind classes to make the heading large, bold, gray, and horizontally
    centered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the list of the products in the JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Tailwind classes remove the bullet points, margin, and padding from the
    unordered list element, and make the list items gray.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we use the products array `map` function to iterate over each product
    and return a `li` element. Using `Array.map` is common practice for JSX looping
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Notice the `key` prop on the list item elements. React requires this on elements
    in a loop to update the corresponding DOM elements efficiently. The value of the
    `key` prop must be unique and stable within the array, so we have used the product
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the product page for now. This page won’t show in the app yet
    because it isn’t part of its component tree – we need to declare it as a page
    using React Router, which we’ll do next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React Router’s router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A router in React Router is a component that tracks the browser’s URL and performs
    navigation. Several routers are available in React Router, and the one recommended
    for web applications is called a `createBrowserRouter` function creates a browser
    router.
  prefs: []
  type: TYPE_NORMAL
- en: '`createBrowserRouter` requires an argument containing all the **routes** in
    the application. A route contains a path and what component to render when the
    app’s browser address matches that path. The following code snippet creates a
    router with two routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: When the path is `/some-page`, the `SomePage` component will be rendered. When
    the path is `/another-page`, the `AnotherPage` component will be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The router returned by `createBrowserRouter` is passed to a `RouterProvider`
    component and placed high up in the React component tree, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are starting to understand React Router’s router, we will use it
    in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring the products route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will declare the products list page in the app using `createBrowserRouter`
    and `RouterProvider`. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create our own component to hold all the route definitions. Create
    a file called `Routes.tsx` in the `src` folder containing the following `import`
    statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported `createBrowserRouter` and `RouterProvider` from React Router.
    We have also imported `ProductsPage`, which we’ll render in a `products` route
    next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following component underneath the `import` statements to define the
    router with a `products` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, the `ProductsPage` component will be rendered when the path is `/products`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still in `Routes.tsx`, create a component called `Routes` under the router
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This component wraps `RouterProvider` with the router passed into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.tsx` file and add an `import` statement for the `Routes` component
    we just created beneath the other `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render `Routes` instead of `App` as the top-level component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This causes the `products` route we defined to be part of the component tree.
    This means the products list page will be rendered in the app when the path is
    `/products`.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `import` statement for the `App` component, as this is not needed
    at the moment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app using `npm start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An error screen appears explaining that the current route isn’t found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – React Router’s standard error page](img/B19051_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – React Router’s standard error page
  prefs: []
  type: TYPE_NORMAL
- en: The error page is from React Router. As the error message suggests, we can provide
    our own error screen, which we will do later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Change the browser URL to `http://localhost:3000/products`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the products list page component rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Products list page](img/B19051_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Products list page
  prefs: []
  type: TYPE_NORMAL
- en: This confirms that the `products` route is working nicely. Keep the app running
    as we recap and move to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a recap of what we have learned in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: In a web app, routes in React Router are defined using `createBrowserRouter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each route has a path and a component to render when the browser’s URL matches
    that path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The router returned from `createBrowserRouter` is passed into a `RouterProvider`
    component, which should be placed high up in the component tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on `createBrowserRouter`, see the following link in the
    React Router documentation: [https://reactrouter.com/en/main/routers/create-browser-router](https://reactrouter.com/en/main/routers/create-browser-router).
    For more information on `RouterProvider`, see the following link in the React
    Router documentation: [https://reactrouter.com/en/main/routers/router-provider](https://reactrouter.com/en/main/routers/router-provider).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about React Router components that can perform navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Router comes with components called `Link` and `NavLink`, which provide
    navigation. In this section, we will create a navigation bar at the top of the
    app containing the `Link` component from React Router. We will then swap `Link`
    for the `NavLink` component and understand the difference between the two components.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Link component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create an app header containing React Router’s
    `Link` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a file for the app header called `Header.tsx` in the `src`
    folder containing the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported the `Link` component from React Router.
  prefs: []
  type: TYPE_NORMAL
- en: We have also imported the React logo because we will include this in the app
    header with the navigation options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Header` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component contains a `header` element containing the React logo, the app
    title, and an empty `nav` element. We have used Tailwind classes to make the header
    gray with the logo and title horizontally centered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a link inside the `nav` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Link` component has a `to` prop that defines the path to navigate to. The
    text to display can be specified in the `Link` content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Routes.tsx` and add an import statement for the `Header` component we
    just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `router` definition, add a root path that renders the `Header` component
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we have just done isn’t ideal because the `Header` component needs to show
    on all routes and not just the root route. However, it will allow us to explore
    React Router’s `Link` component. We will tidy this up in the *Using nested* *routes*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the running app, change the browser address to the root of the app. The
    new app header appears, containing the **Products** link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – App header](img/B19051_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – App header
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, inspect the app header elements using the browser’s DevTools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Header component inspection](img/B19051_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Header component inspection
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the `Link` component is rendered as an HTML anchor element.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Network** tab in DevTools and clear any existing requests that
    are shown. Click on the **Products** link in the app header. The browser will
    navigate to the products list page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that a network request wasn’t made for the products list page. This
    is because React Router overrides the anchor element’s default behavior with client-side
    navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Client-side navigation](img/B19051_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Client-side navigation
  prefs: []
  type: TYPE_NORMAL
- en: Finally, notice that the app header disappears on the products list page, which
    is not what we want. We will resolve this in the *Using nested* *routes* section.
  prefs: []
  type: TYPE_NORMAL
- en: Keep the app running as we move to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The navigation is working well but it would be nice if the **Products** link
    had a different style when the products list page was active. We will make this
    improvement next.
  prefs: []
  type: TYPE_NORMAL
- en: Using the NavLink component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React Router’s `NavLink` is like a `Link` element but allows it to be styled
    differently when active. This is really handy for a navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to replace `Link` with `NavLink` in the app header:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Header.tsx` and change the `Link` references to `NavLink`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The app header will look and behave exactly the same at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `className` prop on the `NavLink` component accepts a function that can
    be used to conditionally style it, depending on whether its page is active. Update
    the `className` attribute to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function takes in a parameter, `isActive`, for defining whether the link’s
    page is active. We’ve added a bottom border to the link if it is active.
  prefs: []
  type: TYPE_NORMAL
- en: We can’t see the impact of this change just yet, because the **Products** link
    doesn’t appear on the products list page yet. We will resolve this in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: That completes the app header and our exploration of the `NavLink` component.
  prefs: []
  type: TYPE_NORMAL
- en: To recap, `NavLink` is great for main app navigation when we want to highlight
    an active link, and `Link` is great for all the other links in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the `Link` component, see the following link: [https://reactrouter.com/en/main/components/link](https://reactrouter.com/en/main/components/link).
    For more information on the `NavLink` component, see the following link: [https://reactrouter.com/en/main/components/nav-link](https://reactrouter.com/en/main/components/nav-link).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about nested routes.
  prefs: []
  type: TYPE_NORMAL
- en: Using nested routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover **nested routes** and the situations in which
    they are useful, before using a nested route in our app. The nested route will
    also resolve the disappearing app header problem we experienced in the previous
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding nested routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A nested route allows a segment of a route to render a component. For example,
    the following mock-up is commonly implemented using nested routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Use case for nested routes](img/B19051_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Use case for nested routes
  prefs: []
  type: TYPE_NORMAL
- en: The mock-up displays information about a customer. The path determines the active
    tab – in the mockup, `/customers/1234/history`.
  prefs: []
  type: TYPE_NORMAL
- en: A `Customer` component could render the shell of this screen, including the
    customer’s name, picture, and tab headings. The component that renders the tab
    contents could be decoupled from the `Customer` component and coupled to the path
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature is referred to as *nested routes* because `Route` components are
    nested inside each other. Here’s what the routes for the mock-up could be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: This nested approach to defining routes makes them easy to read and understand,
    as you can see in the preceding code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'A critical part of nested routes is where child components are rendered in
    their parent. In the preceding code snippet, where would the `CustomerProfile`
    component be rendered in the `Customer` component? The solution is React Router’s
    `Outlet` component. Here’s an example of `Outlet` in the `Customer` component
    from the mock-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: So, in this example, the `CustomerProfile` component would be rendered after
    the navigation options in the `Customer` component. Notice that the `Customer`
    component is decoupled from the nested content. This means new tabs can be added
    to the customer page without changing the `Customer` component. This is another
    benefit of nested routes.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will use a nested route within our app.
  prefs: []
  type: TYPE_NORMAL
- en: Using nested routes in the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our app, we will use the `App` component for the app’s shell, which renders
    the root path. We will then nest the products list page within this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `App.tsx` and replace all the existing content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component renders the app header with nested content underneath it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The empty JSX elements, `<>` and `</>`, are **React fragments**. React fragments
    are not added to the DOM and are used as a workaround to React components only
    being able to return a single element, so they are a way of returning multiple
    elements in a React component that keeps React happy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Routes.tsx`, import the `App` component we just modified, and remove
    the `import` component for `Header`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `router` definition as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The products list page is now nested inside the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you return to the running app, you will see that the app header now appears
    on the products list page. You will also see the **Products** link underlined
    because it is an active link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – App header on the products list page](img/B19051_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – App header on the products list page
  prefs: []
  type: TYPE_NORMAL
- en: To recap, nested routes allow components to be rendered for different path segments.
    An `Outlet` component is to render nested content within a parent component.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the `Outlet` component, see the following link: [https://reactrouter.com/en/main/components/outlet](https://reactrouter.com/en/main/components/outlet).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about route parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Using route parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will understand **route parameters** and how they are useful
    before using a route parameter in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding route parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A route parameter is a segment in the path that varies. The value of the variable
    segment is available to components so that they can render something conditionally.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following path, `1234` is the ID of a customer: `/customers/1234/`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be defined as a route parameter in a route as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: A colon (`:`) followed by a name defines a route parameter. It is up to us to
    choose a parameter name that makes sense, so the `:id` segment in the path is
    the route parameter definition in the preceding route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple route parameters can be used in a path as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Route parameter names obviously have to be unique within a path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Route parameters are available to components using React Router’s `useParams`
    hook. The following code snippet is an example of how the `customerId` and `taskId`
    route parameter values could be obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see from the code snippet, `useParams` has a generic argument that
    defines the type for the parameters. The `type` definition for the preceding code
    snippet is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that the route parameter values are always strings because
    they are extracted from paths, which are strings.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand route parameters, we will use a route parameter in our
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Using route parameters in the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a product page to our app to show the description and price of
    each product. The path to the page will have a route parameter for the product
    ID. Carry out the following steps to implement the product page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by creating the product page. In the `src/pages` folder, create
    a file called `ProductPage.tsx` with the following `import` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have imported the `useParams` hook from React Router, which will allow us
    to get the value of an `id` route parameter – the product’s ID. We have also imported
    the `products` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start creating the `ProductPage` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `useParams` hook to obtain the `id` route parameter and turn it into
    an integer if it has a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a variable that is assigned to the product with the ID from the route
    parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the product information from the `product` variable in the JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Unknown product` is returned if the product can’t be found. Its name, description,
    and price are returned if the product is found. We use JavaScript’s `Intl.NumberFormat`
    function to nicely format the price.'
  prefs: []
  type: TYPE_NORMAL
- en: That completes the product page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task is to add the route for the product page. Open `Routes.tsx` and
    add an `import` statement for the product page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following highlighted route for the product page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, the `/products/2` path should return a product page for React Redux.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the running app, change the browser URL to [http://localhost:3000/products/2](http://localhost:3000/products/2).
    The React Redux product should show up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – The product page](img/B19051_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – The product page
  prefs: []
  type: TYPE_NORMAL
- en: 'The last task in this section is to turn the products list on the products
    list page into links that open the relevant product page. Open `ProductsPage.tsx`
    and import the `Link` component from React Router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Link` component around the product name in the JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Link paths are relative to the component’s path. Given that the component path
    is `/products`, we set the link path to the product ID, which should match the
    `product` route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the running app and go to the products list page. Hover over the
    products and you will now see that they are links:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Product list links](img/B19051_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Product list links
  prefs: []
  type: TYPE_NORMAL
- en: Click one of the products and the relevant product page will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That completes this section on route parameters. Here’s a quick recap:'
  prefs: []
  type: TYPE_NORMAL
- en: A route parameter is a varying segment in a path defined using a colon followed
    by the parameter name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route parameters can be accessed using React Router’s `useParams` hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on the `useParams` hook, see the following link in the
    React Router documentation: [https://reactrouter.com/en/main/hooks/use-params](https://reactrouter.com/en/main/hooks/use-params).'
  prefs: []
  type: TYPE_NORMAL
- en: Remember React Router’s error page we experienced in the *Declaring routes*
    section? Next, we will learn how to customize that error page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an error page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will understand how error pages work in React Router before
    implementing one in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding error pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, a React Router built-in error page is shown when an error occurs.
    We can check this by entering an invalid path in the running app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Standard React Router error page](img/B19051_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Standard React Router error page
  prefs: []
  type: TYPE_NORMAL
- en: An error is raised because no matching routes are found in the router. The *404
    Not Found* message on the error page confirms this.
  prefs: []
  type: TYPE_NORMAL
- en: This standard error page isn’t ideal because the information is targeted at
    a developer rather than a real user. Also, the app header isn’t shown, so users
    can’t easily navigate to a page that does exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the error message suggests, an `errorElement` prop can be used on a route
    to override the standard error page. The following is an example of a custom error
    page defined for a customer’s route; if any error occurs on this route, the `CustomersErrorPage`
    component will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have started understanding error pages in React Router, we will
    implement one in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an error page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the steps below to create an error page in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new page called `ErrorPage.tsx` in the `src/pages` folder with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component simply returns the app header with a *Sorry, an error has occurred*
    message underneath.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Routes.tsx` and add an `import` statement for the error page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the error page on the root route as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Specifying the error page on the root route means that it will show if any routes
    have errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch back to the running app and change the browser URL to [http://localhost:3000/invalid](http://localhost:3000/invalid).
    The error page will be shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Error page](img/B19051_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Error page
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a good start, but we can improve it by providing the user with more
    information, which we can get from React Router’s `useRouteError` hook. Open `ErrorPage.tsx`
    again and add an `import` statement for `useRouteError`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign the error to an `error` variable before the component’s `return` statement
    using `useRouteError`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `error` variable is of the `unknown` type – you can verify this by hovering
    over it. We can use a type predicate function to allow TypeScript to narrow it
    to something we can work with. Add the following type predicate function beneath
    the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function checks whether the error object has a `statusText` property and
    if so, gives it a type with this property.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use this function to render the information in the `statusText`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the running app, the information about the error appears on the error page
    as an invalid path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Error page containing information about the error](img/B19051_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Error page containing information about the error
  prefs: []
  type: TYPE_NORMAL
- en: That completes this section on error pages. The key point is to use an `errorElement`
    prop on a route to catch and display errors. Specific error information can be
    obtained using the `useRouteError` hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on `errorElement`, see the following link: [https://reactrouter.com/en/main/route/error-element](https://reactrouter.com/en/main/route/error-element).
    For more information on the `useRouteError` hook, see the following link: [https://reactrouter.com/en/main/hooks/use-route-error](https://reactrouter.com/en/main/hooks/use-route-error).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about index routes.
  prefs: []
  type: TYPE_NORMAL
- en: Using index routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, the app’s root path displays nothing other than the header. In this
    section, we will learn about index routes to display a nice welcome message in
    the root path.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding index routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An `index` Boolean property, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add a home page using an index route in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Using an index route in the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to add a home page using an index route in our
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file in the `src/pages` folder called `HomePage.tsx` with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The page displays a welcome message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Routes.tsx` and import the home page we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the home page as an index page for the root path as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will add links to the logo and app title in the header to go to the home
    page. Open `Header.tsx` and import the `Link` component from React Router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wrap links to the root page around the logo and title as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the running app, click the app title to go to the root page, and you will
    see the welcome message displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Welcome page](img/B19051_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Welcome page
  prefs: []
  type: TYPE_NORMAL
- en: That completes this section on index routes.
  prefs: []
  type: TYPE_NORMAL
- en: To recap, an index route is a default child route and is defined using an `index`
    Boolean property.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on index routes, see the following link: [https://reactrouter.com/en/main/route/route#index](https://reactrouter.com/en/main/route/route#index).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about search parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Using search parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about search parameters in React Router and use
    them to implement a search feature in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding search parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`?` character and separated by the `&` character. Search parameters are sometimes
    referred to as `type` and `when` are search parameters: `https://somewhere.com/?type=sometype&when=recent`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'React Router has a hook that returns functions for getting and setting search
    parameters called `useSearchParams`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '`searchParams` is a JavaScript `URLSearchParams` object. There is a `get` method
    on `URLSearchParams`, which can be used to get the value of a search parameter.
    The following example gets the value of a search parameter called `type`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '`setSearchParams` is a function used to set search parameter values. The function
    parameter is an object as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add search functionality to our app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding search functionality to the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a search box to the header of the app. Submitting a search will
    take the user to the products list page and list a filtered set of products matching
    the search criteria. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Header.tsx` and add `useSearchParams` to the React Router import. Also,
    add an `import` statement for the `FormEvent` type from React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `useSearchParams` hook to destructure functions to get and set search
    parameters before the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following search form above the logo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The form contains a search box with its default value as the value of a `search`
    parameter. `searchParams.get` returns `null` if the parameter doesn’t exist, so
    a `??`) is used to set the search box’s default value to an empty string in this
    case.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The `??`) returns the right operand if the left operand is `null` or `undefined`;
    otherwise, it returns the left operand. For more information, see the following
    link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing).'
  prefs: []
  type: TYPE_NORMAL
- en: The form submission calls a `handleSearchSubmit` function, which we’ll implement
    in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `handleSearchSubmit` function as follows, just above the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The submit handler parameter is typed using `FormEvent`. `FormEvent` is a generic
    type that takes in the type of the element, which is `HTMLFormElement` for a form
    submit handler.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `preventDefault` method on submit handler parameters to prevent the
    form from being submitted to the server because we handle all the logic in this
    function.
  prefs: []
  type: TYPE_NORMAL
- en: We use the JavaScript `FormData` interface to get the value of the search field.
    Then, we use a type assertion to set the type of the search field value to a string.
  prefs: []
  type: TYPE_NORMAL
- en: The last line of code in the submit handler sets the value of the search parameter.
    This will update the browser’s URL to have this search parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will learn a lot more about forms in React in [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188),
    *Working* *with Forms*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to filter the products list with the value of the search parameter.
    Open `ProductsPage.tsx` and add `useSearchParams` to the `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the top of the `ProductsPage` component, destructure `searchParams` from
    `useSearchParams` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following function just before the `return` statement to filter the
    products list by the search value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The function starts by getting the value of the `search` parameter. The full
    product list is returned if there is no search parameter or if the value is an
    empty string. Otherwise, the product list is filtered using the array’s `filter`
    function, checking that the search value is contained within the product name
    irrespective of the case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the function we just created in the JSX to output the filtered products.
    Replace the reference to `products` with a call to `getFilteredProducts` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the running app, whilst on the home page, enter some search criteria in the
    search box and press *Enter* to submit the search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The search parameter is added to the URL in the browser. However, it doesn’t
    navigate to the products list page. Don’t worry about this because we’ll address
    this issue in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – The search parameter added to the URL](img/B19051_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – The search parameter added to the URL
  prefs: []
  type: TYPE_NORMAL
- en: The key point in this section is that the `useSearchParams` hook from React
    Router allows you to set and get URL search parameters. The parameters are also
    structured in a JavaScript `URLSearchParams` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the `useSearchParams` hook, see the following link
    in the React Router documentation: [https://reactrouter.com/en/main/hooks/use-search-params](https://reactrouter.com/en/main/hooks/use-search-params).
    More information on `URLSearchParams` is available at [https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will explore another React Router hook that enables programmatic navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React Router’s `Link` and `NavLink` components allow declarative navigation.
    However, sometimes we must navigate imperatively – in fact, this would be useful
    for the search feature in our app to navigate to the products list page. In this
    section, we will learn how to programmatically navigate with React Router and
    use this to complete the app’s search feature. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Header.tsx` and add import the `useNavigate` hook from React Router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `useNavigate` hook returns a function we can use to perform programmatic
    navigation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Invoke `useNavigate` after the call to the `useSearchParams` hook. Assign the
    result to a variable called `navigate`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `navigate` variable is a function that can be used to navigate. It takes
    in an argument for the path to navigate to.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `handleSearchSubmit`, replace the `setSearchParams` call with a call to
    `navigate` to go to the products list page with the relevant search parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We no longer need `setSearchParams` because the setting of the search parameter
    is included in the navigation path, so remove this from the `useSearchParams`
    call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the running app, enter some search criteria in the search box and press *Enter*
    to submit the search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The search parameter is used to navigate to the products list page. When the
    products list page appears, the correctly filtered products are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Products list page with filter products](img/B19051_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Products list page with filter products
  prefs: []
  type: TYPE_NORMAL
- en: So, programmatic navigation is achieved using the `useNavigate` hook. This returns
    a function that can navigate to the path passed into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the `useNavigate` hook, see the following link in the
    React Router documentation: [https://reactrouter.com/en/main/hooks/use-navigate](https://reactrouter.com/en/main/hooks/use-navigate).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will refactor the search form’s navigation to use React Router’s `Form`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Using form navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will use React Router’s `Form` component to navigate to
    the products list page when the search criteria are submitted. `Form` is a wrapper
    around the HTML `form` element that handles the form submission on the client
    side. This will replace the use of `useNavigate` and simplify the code. Carry
    out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Header.tsx`, start by removing `useNavigate` from `import` for the React
    Router and replace it with the `Form` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSX, replace the `form` element with React Router’s `Form` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Form` element in the JSX, remove the `onSubmit` handler. Replace this
    with the following `action` attribute so that the form is sent to the `products`
    route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: React Router’s form submission mimics how a native `form` element submits to
    a server path. However, React Router submits the form to a client-side route instead.
    In addition, `Form` mimics an HTTP `GET` request by default, so a `search` parameter
    will automatically be added to the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The remaining tasks are to remove the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the React import statement because `FormEvent` is redundant now
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the call to `useNavigate` because this is no longer required
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the `handleSearchSubmit` function because this is no longer required
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the running app, enter some search criteria in the search box and press *Enter*
    to submit the search. This will work as it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That has simplified the code quite a bit!
  prefs: []
  type: TYPE_NORMAL
- en: We will learn more about React Router’s `Form` component in [*Chapter 7*](B19051_07.xhtml#_idTextAnchor188)
    and [*Chapter 9*](B19051_09.xhtml#_idTextAnchor220). The key takeaway from this
    section is that `Form` wraps the HTML `form` element, handling form submission
    on the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on `Form`, see the following link in the React Router
    documentation: [https://reactrouter.com/en/main/components/form](https://reactrouter.com/en/main/components/form).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn about a type of performance optimization that can be applied
    to large pages in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing lazy loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, all the JavaScript for our app is loaded when the app first loads.
    This can be problematic in large apps. In this section, we will learn how to only
    load the JavaScript for components when their route becomes active. This pattern
    is often referred to as **lazy loading**. In our app, we will create a lazily
    loaded admin page.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React lazy loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, all React components are bundled together and loaded when the app
    first loads. This is inefficient for large apps – particularly when a user does
    not use many components. Lazily loading React components addresses this issue
    because lazy components aren’t included in the initial bundle that is loaded;
    instead, their JavaScript is fetched and loaded when rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main steps to lazy loading React components. First, the component
    must be dynamically imported as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: In the code block, `lazy` is a function from React that enables the imported
    component to be lazily loaded. Note that the lazy page must be a default export
    – lazy loading doesn’t work with named exports.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack can then split the JavaScript for `LazyPage` into a separate bundle.
    Note that this separate bundle will include any child components of `LazyPage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second step is to render the lazy component inside React’s `Suspense` component
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: The `Suspense` component’s `fallback` prop can be set to an element to render
    while the lazy page is being fetched.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a lazy admin page in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a lazy admin page to the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps to add a lazy admin page to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `AdminPage.tsx` in the `src/pages` folder with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The page is very small, so it is not a great use case for lazy loading. However,
    its simplicity will allow us to focus on how to implement lazy loading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Routes.tsx` and import `lazy` and `Suspense` from React:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the admin page as follows (it is important that this comes after all
    the other `import` statements):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `admin` route as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The path to the admin page is `/admin`. A loading indicator will render as the
    admin page’s JavaScript is fetched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Header.tsx` and add a link to the admin page after the `Products` link
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the running app, open the browser DevTools and go to the **Network** tab
    and clear out any existing requests. Slow down the connection by selecting **Slow
    3G** from the **No** **throttling** menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Setting a slow connection](img/B19051_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Setting a slow connection
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the **Admin** link in the header. The loading indicator appears
    because the JavaScript for the admin page is being downloaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.17 – The loading indicator](img/B19051_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – The loading indicator
  prefs: []
  type: TYPE_NORMAL
- en: 'After the admin page has been downloaded, it will render in the browser. If
    you look at the **Network** tab in DevTools, you will see confirmation of the
    admin page bundle being lazily loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Admin page download](img/B19051_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – Admin page download
  prefs: []
  type: TYPE_NORMAL
- en: That completes this section on lazily loading React components. In summary,
    lazily loading React components is achieved by dynamically importing the component
    file and rendering the component inside a `Suspense` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on lazily loading React components, see the following
    link in the React documentation: [https://reactjs.org/docs/code-splitting.html](https://reactjs.org/docs/code-splitting.html).'
  prefs: []
  type: TYPE_NORMAL
- en: That also completes this chapter. Next, we will recap what we have learned about
    React Router.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Router gives us a comprehensive set of components and hooks for managing
    the navigation between pages in our app. We used `createBrowserRouter` to define
    all our web app’s routes. A route contains a path and a component to render when
    the path matches the browser URL. We used an `errorElement` prop for a route to
    render a custom error page in our app.
  prefs: []
  type: TYPE_NORMAL
- en: We used nested routes to allow the `App` component to render the app shell and
    page components within it. We used React Router’s `Outlet` component inside the
    `App` component to render page content. We also used an index route on the root
    route to render a welcome message.
  prefs: []
  type: TYPE_NORMAL
- en: We used React Router’s `NavLink` component to render navigation links that are
    highlighted when their route is active. The `Link` component is great for other
    links that have static styling requirements – we used this for product links on
    the product list. We used React Router’s `Form` component to navigate to the products
    list page when the search form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: Route parameters and search parameters allow parameters to be passed into components
    so that they can render dynamic content. `useParams` gives access to route parameters,
    and `useSearchParams` provides access to search parameters.
  prefs: []
  type: TYPE_NORMAL
- en: React components can be lazily loaded to increase startup performance. This
    is achieved by dynamically importing the component file and rendering the component
    inside a `Suspense` component.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn all about forms in React.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s test our knowledge of React Router with the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have declared the following routes in an app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE503]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE504]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE505]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE506]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE507]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE508]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE509]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What component will render when the path is `/customers`?
  prefs: []
  type: TYPE_NORMAL
- en: What component will render when the path is `/products`?
  prefs: []
  type: TYPE_NORMAL
- en: What would the path be in a route that could handle a `/customers/37` path?
    `37` is a customer ID and could vary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The routes for a `settings` page are defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE511]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE512]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE513]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE514]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE515]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The settings page has `/settings/general` and `/settings/dangerous`, respectively.
    However, when these paths are requested, no tab content is shown on the settings
    page – so, what could we have forgotten to add in the `SettingsPage` component?
  prefs: []
  type: TYPE_NORMAL
- en: We are implementing a navigation bar in an app. When clicking on a navigation
    item, the app should navigate to the relevant page. Which React Router component
    should we use to render the navigational items? `Link` or `NavLink`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A route is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `UserPage` component, the following code is used to get the user
    `id` information from the browser URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: However, `id` is always `undefined`. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following URL contains an example of a search parameter on a `customers`
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/``customers/?search=cool company`'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, an error occurs in the following implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: 'A React component is lazily loaded as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: However, React throws an error. What is the problem?
  prefs: []
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`CustomersPage` will render when the path is `/customers`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ErrorPage` will render when the path is `/products`.'
  prefs: []
  type: TYPE_NORMAL
- en: The path could be `path="customers/:customerId"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is likely that the `Outlet` component has not been added to `SettingsPage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both will work, but `NavLink` is better because it enables items to be styled
    when active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The route parameter referenced should be `userId`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Hooks must be called at the top level of function components. Also, the `useSearchParams`
    hook doesn’t directly have a `get` method. Here’s the corrected code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE533]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE534]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE535]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE536]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The lazy component must be nested inside a `Suspense` component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE537]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE539]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE540]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE541]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE542]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE543]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE544]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
