["```js\nimport type { HeadersFunction } from '@remix-run/node';export const headers: HeadersFunction = () => {\n  return {\n    'Cache-Control': 'public, max-age=3600',\n  };\n};\n```", "```js\nimport type { HeadersFunction, LoaderFunctionArgs, MetaFunction, SerializeFrom } from '@remix-run/node';export const headers: HeadersFunction = () => {\n  return {\n    'Cache-Control': 'no-cache, private',\n  };\n};\n```", "```js\n    export function buildFileResponse(fileName: string, headers object to be passed in so that HTTP headers can be added to the file response object.\n    ```", "```js\n    export async function loader({ request, params }: LoaderFunctionArgs) {  const userId = await requireUserId(request);  const { id } = params;  const slug = params['*'];  if (!id || !slug) throw Error('id and slug route parameters must be defined');  const expense = await db.expense.findUnique({ where: { id_userId: { id, userId } } });  if (!expense || !expense.attachment) throw new Response('Not found', { status: 404 });  if (slug !== expense.attachment) return redirect(`/dashboard/expenses/${id}/attachments/${expense.attachment}`);  buildFileResponse function, which returns the file download response.Since we know that the attachment never changes – a new attachment would create a new filename – we apply the `immutable` directive and cache the asset for a year. Because the attachments contain sensitive user information, we set the cache to `private` to avoid shared caching.\n    ```", "```js\nexport async function loader({ request, params }: LoaderFunctionArgs) {  const userId = await requireUserId(request);\n  const { id } = params;\n  const slug = params['*'];\n  if (!id || !slug) throw Error('id and slug route parameters must be defined');\n  const expense = await db.expense.findUnique({ where: { id_userId: { id, userId } } });\n  if (!expense || !expense.attachment) throw new Response('Not found', { status: 404 });\n  if (slug !== expense.attachment) return redirect(`/dashboard/expenses/${id}/attachments/${expense.attachment}`);\n  const headers = new Headers();\n  headers.set('ETag', expense.attachment);\n  if (request.headers.get('If-None-Match') === expense.attachment) {\n    return new Response(null, { status: 304, headers });\n  }\n  return buildFileResponse(expense.attachment, headers);\n}\n```"]