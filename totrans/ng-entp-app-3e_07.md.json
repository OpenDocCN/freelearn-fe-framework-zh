["```js\n    git clone --recurse-submodules https://github.com/duluca/lemon-mart-server \n    ```", "```js\n    projects/stage8 \n    ```", "```js\n    projects/stage10 \n    ```", "```js\n    npx ng build stage10 \n    ```", "```js\n$ npx @nestjs/cli new your-app-name --strict \n```", "```js\n$ npx nest g resource users \n```", "```js\n? What transport layer do you use?\n> REST API \n  GraphQL (code first)\n  GraphQL (schema first)\n  Microservice (non-HTTP)\n  WebSockets \n```", "```js\n$ npx create-nx-workspace@latest \n```", "```js\n$ npx nx@latest init \n```", "```js\n$ npm i -D @nrwl/nest\n$ npx nx g @nrwl/nest:application apps/your-api \n```", "```js\nlemon-mart-server\n├───bin\n├───web-app (snapshot of lemon-mart)\n├───server\n│   package.json\n│   README.md \n```", "```js\n    $ npm run webapp:init \n    ```", "```js\n**.circleci/config.yml**\n...\nworkflows:\n  build-and-test-compose:\n    jobs:\n      - build_server\n      - build_webapp \n```", "```js\n    **server/swagger.yaml**\n    openapi: 3.1.0\n    info:\n      title: lemon-mart-server\n      description: LemonMart API\n      version: \"3.0.0**\"**\n    **servers**:\n      - url: http://localhost:3000\n        description: Local environment\n      - url: https://mystagingserver.com\n        description: Staging environment\n      - url: https://myprodserver.com\n        description: Production environment \n    ```", "```js\n    **server/swagger.yaml**\n    **...**\n    **components:**\n      **securitySchemes:**\n        bearerAuth:\n          type: http\n          scheme: bearer\n          bearerFormat: JWT\n      **responses:**\n        UnauthorizedError:\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerMessage\"\n              type: string \n    ```", "```js\n    **server/swagger.yaml**\n    ...\n      **schemas:**\n        ServerMessage:\n          type: object\n          properties:\n            message:\n              type: string\n        Role:\n          type: string\n          enum: [none, clerk, cashier, manager]\n        ... \n    ```", "```js\n    **server/swagger.yaml**\n    ...\n      **parameters:**\n        filterParam:\n          in: query\n          name: filter\n          required: false\n          schema:\n            type: string\n          description: Search text to filter the result set by\n    ... \n    ```", "```js\n    **server/swagger.yaml**\n    ...\n    **paths:**\n      /v1/login:\n        post:\n          description: |\n            Generates a JWT, given the correct credentials.\n          requestBody:\n            required: true\n            content:\n              application/json:\n                schema:\n                  type: object\n                  properties:\n                    email:\n                      type: string\n                    password:\n                      type: string\n                  required:\n                    - email\n                    - password\n          responses:\n            '200': # Response\n              description: OK\n              content:\n                application/json:\n                  schema:\n                    type: object\n                    properties:\n                      accessToken:\n                        type: string\n                    description: JWT token that contains userId as subject, email and role as data payload.\n            '401':\n              $ref: '#/components/responses/UnauthorizedError' \n    ```", "```js\n    **server/swagger.yaml**\n    ...\n    **paths:**\n      /v1/auth/me:\n        get: ...\n      /v2/users:\n        get: ...\n        post: ...\n      /v2/users/{id}:\n        get: ...\n        put: ... \n    ```", "```js\n**server/src/v1/routes/authRouter.****ts**\n/**\n * @openapi\n * /v1/auth/me:\n *   get:\n *     description: Gets the `User` object of the logged in user\n *     responses:\n *       '200':\n *         description: OK\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       '401':\n *         $ref: '#/components/responses/UnauthorizedError'\n */\nrouter.get('/me', authenticate(), async (_req: Request, res: Response) => {\n  if (res.locals.currentUser) {\n    return res.send(res.locals.currentUser)\n  }\n  return res.status(401).send({ message: AuthenticationRequiredMessage })\n}) \n```", "```js\n    $ npm i swagger-jsdoc swagger-ui-express\n    $ npm i -D @types/swagger-jsdoc @types/swagger-ui-express \n    ```", "```js\n    **server/src/docs-config.****ts**\n    import * as swaggerJsdoc from 'swagger-jsdoc'\n    import { Options } from 'swagger-jsdoc'\n    import * as packageJson from '../package.json'\n    const options: Options = {\n      swaggerDefinition: {\n        openapi: '3.1.0',\n        components: {},\n        info: {\n          title: packageJson.name,\n          version: packageJson.version,\n          description: packageJson.description,\n        },\n        servers: [\n          {\n            url: 'http://localhost:3000',\n            description: 'Local environment',\n          },\n          {\n            url: 'https://mystagingserver.com',\n            description: 'Staging environment',\n          },\n          {\n            url: 'https://myprodserver.com',\n            description: 'Production environment',\n          },\n        ],\n      },\n      apis: [\n        '**/models/*.js', \n        '**/v1/routes/*.js', \n        '**/v2/routes/*. js'\n      ],\n    }\n    export const specs = swaggerJsdoc(options) \n    ```", "```js\n    **server/src/app.****ts**\n    import * as swaggerUi from 'swagger-ui-express'\n    import { specs } from './docs-config'\n    const app = express()\n    app.use(cors())\n    ...\n    **app.****use****(****'/api-docs'****, swaggerUi.****serve****, swaggerUi.****setup****(specs))**\n    **app.****get****(****'/swagger'****,** **function** **(****_req, res****) {**\n     **res.****json****(specs)**\n    **})**\n    ...\n    export default app \n    ```", "```js\n    **server/graphql/graphql.schema**\n    type User {\n      address: Address\n      dateOfBirth: String\n      email: String!\n      id: ID!\n      level: Float\n      name: Name!\n      phones: [Phone]\n      picture: String\n      role: Role!\n      userStatus: Boolean!\n      fullName: String\n    } \n    ```", "```js\n    **server****/****graphql****/****graphql.schema**\n    enum Role {\n      None\n      Clerk\n      Cashier\n      Manager\n    } \n    ```", "```js\n    **server****/****graphql****/****graphql.schema**\n    type Query {\n      # Gets a `User` object by id\n      # Equivalent to GET /v2/users/{id}\n      user(id: ID!): User \n    } \n    ```", "```js\n    **server/graphql/graphql.schema**\n    type Mutation {\n      # Generates a JWT, given correct credentials.\n      # Equivalent to POST /v1/auth/login\n      login(email: String!, password: String!): JWT\n      # Create a new `User`\n      # Equivalent to POST /v2/users\n      createUser(userInput: UserInput!): User\n    } \n    ```", "```js\n    **server/graphql/graphql.schema**\n    input UserInput {\n      address: AddressInput\n      dateOfBirth: String\n      email: String!\n      level: Float\n      name: NameInput!\n      phones: [PhoneInput]\n      picture: String\n      role: Role!\n      userStatus: Boolean!\n    } \n    ```", "```js\n    $ @apollo/server \n    ```", "```js\n    **server/src/graphql/api.****graphql****.****ts**\n    ...\n    import { resolvers } from './resolvers'\n    const typeDefs = readFileSync('./src/graphql/schema.graphql', \n    ...\n    export async function useGraphQL(app: Express) {\n      const server = new ApolloServer<AuthContext>({\n        typeDefs,\n        resolvers,\n      })\n      await server.start()\n      ...\n      )\n    } \n    ```", "```js\n    **server/src/index.****ts**\n    import app from './app'\n    ...\n    **async****function****start****() {**\n      **...**\n      **Instance** **= http.****createServer****(app)**\n      **await****useGraphQL****(app)**\n            ...\n          }\n          start() \n    ```", "```js\nserver/src\n├── api.ts\n├── app.ts\n├── config.ts\n├── docs-config.ts\n├── graphql\n│   ├── api.graphql.ts\n│   ├── helpers.ts\n│   └── resolvers.ts\n├── index.ts\n├── models\n│   ├── enums.ts\n│   ├── phone.ts\n│   └── user.ts\n├── public\n├── services\n│   ├── authService.ts\n│   └── userService.ts\n├── v1\n│   ├── index.ts\n│   └── routes\n│       └── authRouter.ts\n└── v2\n    ├── index.ts\n    └── routes\n        └── userRouter.ts \n```", "```js\n**server/src/index.****ts**\n...\nexport let server: http.Server\nasync function start() {\n  await document.connect(config.MongoUri, config.IsProd)\n  server = http.createServer(app)\n  await useGraphQL(app)\n  server.listen(config.Port, async () => {\n    console.log(`Server listening on port ${config.Port}...`)\n  })\n}\nstart() \n```", "```js\n**server/src/app.****ts**\nimport api from './api'\nconst app = express()\napp.use(cors())\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\napp.use(logger('dev'))\napp.use(compression())\napp.use('/', express.static(path.join(__dirname, '../public'), { redirect: false }))\napp.use(api)\nexport default app \n```", "```js\n**server/src/api.****ts**\nimport { Router } from 'express'\nimport api_v1 from './v1'\nimport api_v2 from './v2'\nconst api = Router()\n// Configure all routes here\napi.use('/v1', api_v1)\napi.use('/v2', api_v2)\nexport default api \n```", "```js\n**server/src/v2/index.****ts**\nimport { Router } from 'express'\nimport userRouter from './routes/userRouter'\nconst router = Router()\n// Configure all v2 routers here\nrouter.use('/users?', userRouter)\nexport default router \n```", "```js\n**server/src/v2/routes/userRouter.****ts**\nconst router = Router()\nrouter.get('/', async (req: Request, res: Response) => {})\nrouter.post('/', async (req: Request, res: Response) => {})\nrouter.get('/:userId', async (req: Request, res: Response) => {})\nrouter.put('/:userId', async (req: Request, res: Response) => {})\nexport default router \n```", "```js\n**server/src/graphql/resolvers.****ts**\nexport const resolvers = {\n  Query: {\n    me: () => ...,\n    user: () => ...,\n    users: () => ...,\n  },\n  Mutation: {\n    login: () => ...,\n    },\n    createUser: () => ...,\n    updateUser: () => ...,\n  }, \n a resolver function for each query and mutation implemented in the scheme. Each resolver takes in four arguments (parent, args, contextValue, info): parent can be used to access a parent resolver, args contains any input arguments passed in, contextValue stores session data useful for auth, and info contains metadata about the query itself. Next, let’s look at the type resolvers:\n```", "```js\n**server/src/graphql/resolvers.****ts**\n  User: {\n    id: (obj: User) => obj._id.toString(),\n    role: (obj: User) => EnumValues.getNameFromValue(Role, obj.role),\n    phones: (obj: User) => (obj.phones ? wrapAsArray(obj.phones) : []),\n    dateOfBirth: (obj: User) => obj.dateOfBirth?.toISOString(),\n  },\n  Phone: {\n    type: (obj: { type: string }) =>\n      EnumValues.getNameFromValue(PhoneType, obj.type),\n  },\n  Users: {\n    data: (obj: Users) => (obj.data ? wrapAsArray(obj.data) : []),\n  },\n} \n```", "```js\n**server/src/services/userService.****ts**\nimport { IUser, User } from '../models/user'\nexport async function createNewUser(userData: IUser):\n  Promise<User | boolean> {\n  // create user\n} \n```", "```js\n**server/src/v2/routes/userRouter.****ts**\nimport { createNewUser } from '../../services/userService'\nrouter.post('/', async (req: Request, res: Response) => {\n  const userData = req.body as IUser\n  const success = await createNewUser(userData)\n  if (success instanceof User) {\n    res.send(success)\n  } else {\n    res.status(400).send({ message: 'Failed to create user.' })\n  }\n}) \n```", "```js\n// Example of hashing and salting password\nuser.setPassword = async (password) => {\n  const salt = await bcrypt.genSalt(10);\n  return await bcrypt.hash(password, salt); \n} \n```", "```js\n// Example of JWT-based login\nrouter.post('/login', async (req, res) => {\n  const user = await User.findByEmail(req.body.email);\n  if (user && user.comparePassword(req.body.password)) {\n    const accessToken = createJwt(user);\n    return res.send({accessToken});\n  }\n  return res.status(401).send('Invalid credentials');\n}) \n```", "```js\nauthenticate(**{** **requiredRole****:** **Role****.****Manager** **}**) \n```", "```js\nauthenticate({\n    requiredRole: Role.Manager,\n    **permitIfSelf****: {**\n      **idGetter****:** **(****req: Request****) =>** **req.****body****.****_id****,**\n      **requiredRoleCanOverride****:** **true****,**\n    **},**\n  }), \n```", "```js\n// Authenticate middleware\nfunction authenticate(options) {\n  return async (req, res, next) => {\n    const user = await decodeAndFindUser(req.headers.authorization);\n    if (user) {\n      // Check role if required\n      if (options.requiredRole && user.role !== options.requiredRole) {\n        return res.status(403).send(\"Forbidden\");\n      }\n\n      // Attach user to response \n      res.locals.user = user;\n\n      return next();\n    } else {\n      return res.status(401).send('Unauthenticated');\n    }\n  }\n}\n// Usage in RESTful route\nrouter.get('/me', authenticate(), (req, res) \n  => res.send(res.locals.user)\n) \n```", "```js\n// GraphQL authentication\napp.use('/graphql', authenticate({ \n    authOverridingOperations: ['Login'] \n  })\n)\n// Usage in GraphQL resolver\nme: (parent, args, contextValue) => authorize(contextValue), \n```", "```js\n    **web-app/src/environments/environment.****ts**\n    **web-app/src/environments/environment.****prod****.****ts**\n    export const environment = {\n      ...\n      baseUrl: 'http://localhost:3000',\n      authMode: AuthMode.CustomServer, \n    ```", "```js\n    $ npm i ts-enum-util \n    ```", "```js\n    **web-app/src/app/auth/auth.****custom****.****service****.****ts**\n    import { $enum } from 'ts-enum-util'\n    ...\n    @Injectable(@Injectable({ providedIn: 'root' }))\n    export class CustomAuthService extends AuthService {\n      private httpClient: HttpClient = inject(HttpClient)\n      protected authProvider(\n        email: string,\n        password: string\n      ): Observable<IServerAuthResponse> {\n        return this.httpClient.post<IServerAuthResponse>\n          (`${environment.baseUrl}/v1/auth/login`, {\n            email,\n            password,\n          })\n          .pipe(first())\n      }\n      protected transformJwtToken(token: IJwtToken): IAuthStatus {\n        return {\n          isAuthenticated: token.email ? true : false,\n          userId: token.sub,\n          userRole: $enum(Role)\n            .asValueOrDefault(token.role, Role.None),\n          userEmail: token.email,\n          userPicture: token.picture,\n        } as IAuthStatus\n      }\n      protected getCurrentUser(): Observable<User> {\n        return this.httpClient\n          .get<IUser>(`${environment.baseUrl}/v1/auth/me`)\n            .pipe(\n            first(),\n            map((user) => User.Build(user)),\n              catchError(transformError)\n            )\n      }\n    } \n    ```", "```js\n    **web-app/src/app/auth/auth.****graphql****.****custom****.****service****.****ts**\n    import { GET_ME, LOGIN } from './auth.graphql.queries'\n    ...\n    @Injectable({ providedIn: 'root' })\n    export class CustomGraphQLAuthService extends AuthService {\n      private apollo: Apollo = inject(Apollo)\n      protected authProvider(\n        email: string,\n        password: string\n      ): Observable<IServerAuthResponse> {\n        return this.apollo\n          .mutate<{ login: IServerAuthResponse }>({\n            mutation: LOGIN,\n            variables: {\n              email,\n              password,\n            },\n          })\n          .pipe(\n            first(),\n            map((result) => \n              result.data?.login as IServerAuthResponse\n            )\n          )\n        }\n      protected transformJwtToken(token: IJwtToken): IAuthStatus {\n        return {\n          isAuthenticated: token.email ? true : false,\n          userId: token.sub,\n          userRole: $enum(Role).asValueOrDefault(\n            token.role,\n            Role.None\n          ),\n          userEmail: token.email,\n          userPicture: token.picture,\n        } as IAuthStatus\n      }\n      protected getCurrentUser(): Observable<User> {\n        return this.apollo\n          .watchQuery<{ me: IUser }>({\n            query: GET_ME,\n          })\n          .valueChanges.pipe(\n            first(),\n            map((result) => User.Build(result.data.me))\n          )\n      }\n    } \n    ```", "```js\n    **web-app/src/app/auth/auth.****factory****.****ts**\n    export function authFactory() {\n      ...\n      case AuthMode.CustomServer:\n        return new CustomAuthService()\n      case AuthMode.CustomGraphQL:\n        return new CustomGraphQLAuthService()\n    } \n    ```"]