["```js\n// AdditionalComponents/index.ios.js \n\nimport App from './app'; \nimport { AppRegistry } from 'react-native'; \nAppRegistry.registerComponent('AdditionalComponents', () => App); \n\n```", "```js\n// AdditionalComponents/app/index.js \n\nimport React, { Component } from 'react'; \n import { \n  Text, \n  View \n} from 'react-native'; \nimport styles from './styles'; \nexport default class App extends Component { \n  render () { \n    return ( \n      <View style={ styles.container }> \n        <Text style={ styles.text }> \n          Hello from React Native! \n        </Text> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// AdditionalComponents/app/styles.js \n\nimport { StyleSheet } from 'react-native'; \nexport const styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    backgroundColor: '#fafafa' \n  }, \n  text: { \n    alignSelf: 'center', \n    color: '#365899', \n    marginTop: 50 \n  } \n}); \nexport default styles; \n\n```", "```js\nfetch(endpoint, object) \n  .then((response) => { \n    return response.json(); \n  }) \n  .then((result) => { \n    return result; \n  }) \n\n```", "```js\nasync fetchAndReturnData (endpoint, object) { \n  const response = await fetch(endpoint, object); \n  const data = await response.json(); \n  return data; \n} \n\n```", "```js\nconst obj = { \n  method: 'POST', \n  headers: { \n    'Accept': 'application/json', \n    'Content-Type': 'application/json', \n    'Origin': '', \n    'Host': 'api.test.com' \n  }, \n  body: JSON.stringify({ \n    'client_id': apiKey, \n    'client_secret': apiSecret, \n    'grant_type': grantType \n  }) \n}  \n\n```", "```js\nhttps://jsonplaceholder.typicode.com/json\n\n```", "```js\n// AdditionalComponents/app/index.js \n\n... \nexport default class App extends Component { \n  constructor (props) { \n    super (props); \n    this.state = { \n      data: [] \n    } \n  } \n async componentDidMount () { \n    const endpoint = 'https://jsonplaceholder.typicode.com/users'; \n    const response = await fetch(endpoint); \n    const data = await response.json(); \n\n    this.setState({ \n      data \n    }); \n console.log(this.state.data); \n  } \n  ... \n} \n\n```", "```js\n<uses-permission android:name=\"android.permission.VIBRATE\"/> \n\n```", "```js\n// AdditionalComponents/app/index.js \n\n... \nimport { \n  ... \n  Vibration \n} from 'react-native'; \n... \nexport default class App extends Component { \n  ... \n  async componentDidMount () { \n    const endpoint = 'https://jsonplaceholder.typicode.com/users'; \n    const response = await fetch(endpoint); \n    const data = await response.json(); \n\n    this.setState({ \n      data \n    }); \n\n    this._onDataAvailable(); \n     } \n  ... \n\n  _onDataAvailable () { \n    Vibration.vibrate([1000, 2000, 1000, 2000], false); \n  } \n} \n\n```", "```js\n// AdditionalComponents/app/index.js \n\n... \nimport { \n  Button, \n  Linking, \n  ... \n} from 'react-native'; \n... \nexport default class App extends Component { \n  ... \n  render () { \n    return ( \n      <View style={ styles.container }> \n        ... \n        <Button \n          color={ '#365899' } \n          onPress={ () => this._onButtonPress() } \n          title={ 'Open Link' } \n        /> \n      </View> \n    ) \n  } \n\n  async _onButtonPress () { \n    const facebookURL = 'fb://notifications'; \n    const canOpenLink = await Linking.canOpenURL(facebookURL); \n\n    if (canOpenLink) { \n      Linking.openURL(facebookURL); \n      return; \n    } \n\n    Linking.openURL('https://facebook.github.io/react-native'); \n  } \n  ... \n} \n\n```", "```js\n// AdditionalComponents/app/index.js \n\n... \nimport { \n  ... \n  Slider, \n} from 'react-native'; \n... \nexport default class App extends Component { \n  ... \n  constructor (props) { \n    ... \n    this.state = { \n      ... \n      sliderValue: undefined \n    } \n  } \n  ... \n  render () { \n    return ( \n      <View style={ styles.container }> \n        ... \n        <Text style={ styles.sliderSelectionText } > \n          Your Slider Value is: { this.state.sliderValue } \n        </Text> \n        <Slider \n          maximumValue={ 100 } \n          minimumValue={ 0 } \n          onSlidingComplete={ (value) => \n          this._onSliderValueChange(value) } \n          onValueChange={ (value) => this._onSliderValueChange(value) } \n          step={ 3 }  \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  ... \n  _onSliderValueChange (sliderValue) { \n    this.setState({ \n      sliderValue \n    }); \n  } \n} \n\n// AdditionalComponents/app/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  sliderSelectionText: { \n    alignSelf: 'center', \n    color: '#365899', \n    marginTop: 20 \n  }, \n  ... \n}); \n... \n\n```", "```js\n// AdditionalComponents/app/index.js \n\n... \nimport { \n  ActionSheetIOS, \n  ... \n} from 'react-native'; \n... \nexport default class App extends Component { \n  ... \n  render () { \n    return ( \n      <View style={ styles.container }> \n        ... \n        { this._renderActionAndShareSheets() } \n      </View> \n    ) \n  } \n\n```", "```js\n  _onActionSheetOptionSelected (index) { \n    alert('The index you selected is: ' + index) \n  } \n\n```", "```js\n  ... \n  _openActionSheet () { \n    const options = ['One', 'Two', 'Three', 'Cancel', 'Destroy']; \n    ActionSheetIOS.showActionSheetWithOptions({ \n      options: options, \n      cancelButtonIndex: 3, \n      destructiveButtonIndex: 4, \n      title: 'Action Sheet Options', \n      message: 'Please select from the following options' \n    }, (index) => this._onActionSheetOptionSelected(index)) \n  } \n\n```", "```js\n  _renderActionAndShareSheets () { \n    if (Platform.OS === 'android') { \n      return; \n    } \n\n```", "```js\n    return ( \n      <View> \n        <Button \n          color={ '#365899' } \n          onPress={ () => this._openActionSheet() } \n          title={ 'Open Action Sheet' }  \n        /> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// AdditionalComponents/app/index.js \n\n... \nexport default class App extends Component { \n  ... \n  _openShareSheet () { \n    ActionSheetIOS.showShareActionSheetWithOptions({ \n      url: 'https://facebook.github.io/react-native', \n      message: 'Check out the React Native documentation here,\n      it's really helpful!', \n      subject: 'Link to React Native docs' \n    }, (error) => alert(error), \n    (success) => { \n      alert(success); \n    }) \n  } \n\n```", "```js\n  _renderActionAndShareSheets () { \n    ... \n    return ( \n      <View> \n        ... \n        <Button \n          color={ '#365899' } \n          onPress={ () => this._openShareSheet() } \n          title={ 'Open Share Sheet' } \n        /> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n<uses-permission android:name=\n\"android.permission.ACCESS_FINE_LOCATION\" /> \n\n```", "```js\n{ \n  coords: { \n    accuracy: 5, \n    altitude: 0, \n    altitudeAccuracy: -1, \n    heading: -1, \n    latitude: 37.785834, \n    longitude: -122.406417, \n    speed: -1 \n  }, \n  timestamp: 1483251248689.033 \n} \n\n```", "```js\n// AdditionalComponents/app/index.js \n\n... \nexport default class App extends Component { \n  ... \n  async componentDidMount () { \n    ... \n    navigator.geolocation.getCurrentPosition((location) => { \n      this.setState({ \n        location \n      }); \n    }); \n  } \n\n```", "```js\n  render () { \n    return ( \n      <View style={ styles.container }> \n        ... \n        <Text style={ styles.latLongText }> \n          Your Latitude is: { this.state.location ? \n          this.state.location.coords.latitude : 'undefiend' } \n        </Text> \n        <Text style={ styles.latLongText }> \n          Your Longitude is: { this.state.location ? \n          this.state.location.coords.longitude : 'undefined' } \n        </Text> \n\n```", "```js\n        <Button \n          color={ '#80B546' } \n          onPress={ () => this._onBeginWatchPositionButtonPress() } \n          title={ 'Start Watching Position' } \n        /> \n        <Button \n          color={ '#80B546' } \n          disabled={ this.state.watchID !== undefined ? false : true } \n          onPress={ () => this._onCancelWatchPositionButtonPress() } \n          title={ 'Cancel Watching Position' } \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  ... \n  _onBeginWatchPositionButtonPress () { \n    const watchID = navigator.geolocation.watchPosition((watchSuccess)   \n    => { \n      this.setState({ \n        location: watchSuccess \n      }); \n    }); \n\n```", "```js\n    this.setState({ \n      watchID \n    }); \n  }\n\n```", "```js\n   _onCancelWatchPositionButtonPress () { \n    navigator.geolocation.clearWatch(this.state.watchID); \n\n    this.setState({ \n      watchID: undefined \n    }); \n  } \n  ... \n} \n\n```", "```js\n<Icon.ToolbarAndroid \n  title={ 'Expense' } \n  titleColor={ '#7D878D' } \n  navIconName={ 'menu' } \n  height={ 56 } \n  backgroundColor={ '#4E92B5' } \n  onIconClicked={ () => this._openDrawer(); } \n/> \n\n```", "```js\n<DrawerLayoutAndroid \n  drawerLockMode={ 'unlocked' } \n  ref={ 'drawer' } \n  renderNavigationView={ () => this._renderDrawerLayout() } \n> \n  // Insert Toolbar here \n  <Navigator \n  initialRoute={{ index: 0 }} \n  ref={ 'navigator' } \n  renderScene={ (routes, navigator) => this._renderScene(routes, navigator) } \n  /> \n</DrawerLayoutAndroid> \n\n```", "```js\n// Expenses/index.android.js \n\nimport React, { Component } from 'react'; \nimport { \n  AppRegistry, \n  DrawerLayoutAndroid, \n  Navigator, \n  StyleSheet, \n  View \n} from 'react-native'; \n\nimport App from './app/App'; \nimport CurrentMonthExpenses from './app/components/CurrentMonthExpenses';\nimport Drawer from './app/components/Drawer'; \nimport EnterBudget from './app/components/EnterBudget'; \nimport PreviousMonthsList from './app/components/PreviousMonthsList'; \n\n```", "```js\nimport Icon from 'react-native-vector-icons/MaterialIcons'; \n\n```", "```js\nclass Expense extends Component { \n  constructor (props) { \n    super (props); \n    this.state = { \n      expenses: undefined, \n      visibleRoutes: [ \n        { title: 'This Month', index: 0 }, \n        { title: 'Past Months', index: 2 } \n      ] \n    } \n  } \n\n  componentWillMount () { \n    this._updateExpenses(); \n  } \n\n  render() { \n    const routes = [ \n      { title: 'Expense', index: 0 }, \n      { title: 'Enter Your Budget', index: 1 }, \n      { title: 'Previous Month List', index: 2 }, \n      { title: 'Past Expenses', index: 3}\n    ]; \n    return ( \n      <View style={ styles.container }> \n        <DrawerLayoutAndroid \n          drawerLockMode={ 'unlocked' } \n          ref={ 'drawer' } \n          renderNavigationView={ () => this._renderDrawerLayout()        \n            } \n        > \n\n```", "```js\n          <Icon.ToolbarAndroid \n\n            titleColor=\"white\" \n            navIconName=\"menu\" \n            height={ 56 } \n            backgroundColor=\"blue\" \n            onIconClicked={ () => this._openDrawer() } \n          /> \n          <Navigator \n            initialRoute={{ index: 0 }} \n            ref={ 'navigator' } \n            renderScene={ (routes, navigator) =>  \n              this._renderScene(routes, navigator) } \n          /> \n        </DrawerLayoutAndroid> \n      </View> \n    ); \n  } \n\n  _openDrawer () { \n    this.refs['drawer'].openDrawer(); \n  } \n\n```", "```js\n  _navigateTo (index) { \n    this.refs['navigator'].push({ \n      index: index \n    }); \n    this.refs['drawer'].closeDrawer(); \n  } \n\n  _renderDrawerLayout () { \n    return ( \n      <Drawer \n        navigateTo={ (index) => this._navigateTo(index) } \n        routes={ this.state.visibleRoutes } \n      /> \n    ) \n  } \n\n```", "```js\n  _renderScene (route, navigator) { \n    if (route.index === 0) { \n      return ( \n        <App \n          title={ route.title } \n          navigator={ navigator } \n        /> \n      ) \n    } \n\n    if (route.index === 1) { \n      return ( \n        <EnterBudget \n          title={ route.title } \n          navigator={ navigator } \n          { ...route.passProps } \n        /> \n      ) \n    } \n\n    if (route.index === 2) { \n      return ( \n        <PreviousMonthsList \n          title={ route.title } \n          navigator={ navigator } \n          expenses={ this.state.expenses } \n          updateExpenses={ () => this._updateExpenses() } \n        /> \n      ) \n    } \n    if (route.index === 3) { \n      return ( \n        <CurrentMonthExpenses \n          title={ route.title } \n          navigator={ navigator } \n          { ...route.passProps } \n        /> \n      ) \n    } \n  }\n\n```", "```js\n  async _updateExpenses () { \n\n    let response = await storageMethods.getAsyncStorage(); \n\n    if (response) { \n      this.setState({ \n        expenses: response \n      }); \n    } \n  } \n} \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1 \n  } \n}) \n\nAppRegistry.registerComponent('Expense', () => Expense); \n\n```", "```js\n// Expenses/app/components/Drawer/index.android.js \n\nimport React, { Component, PropTypes } from 'react'; \n\nimport { \n  ListView, \n  Text, \n  TouchableHighlight, \n  View \n} from 'react-native'; \n\nimport DrawerRow from '../DrawerRow'; \nimport styles from './styles'; \n\n```", "```js\nexport default class Drawer extends Component { \n  static propTypes = { \n    navigateTo: PropTypes.func.isRequired, \n    routes: PropTypes.array.isRequired \n  } \n\n  constructor (props) { \n    super (props); \n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2 \n      }) \n    } \n  } \n\n  render () { \n    const dataSource = this.state.ds.cloneWithRows(this.props.routes); \n\n    return ( \n      <View style={ styles.container }> \n        <ListView \n          automaticallyAdjustContentInsets={ false } \n          dataSource={ dataSource } \n          enableEmptySections={ true } \n          renderRow={ (rowData, sectionID, rowID) => \n          this._renderDrawerRow(rowData, sectionID, rowID) } \n          renderSeparator={ (sectionID, rowID) => \n            <View \n              key={ rowID } \n              style={ styles.separator } \n            /> \n          } \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n_renderDrawerRow (rowData, sectionID, rowID) { \n    return ( \n      <View> \n        <TouchableHighlight \n          style={ styles.row } \n          onPress={ () => this.props.navigateTo(rowData.index) } \n        > \n          <DrawerRow routeName={ rowData.title } /> \n          </TouchableHighlight> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// Expenses/App/components/Drawer/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1 \n  }, \n  separator: { \n    height: StyleSheet.hairlineWidth, \n    marginLeft: 10, \n    marginRight: 10, \n    backgroundColor: '#E5F2FD' \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/DrawerRow/index.android.js  \n\nimport React, { Component } from 'react'; \n\nimport { \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nexport default class DrawerRow extends Component { \n\n  setNativeProps (props) { \n    this._root.setNativeProps(props) \n  } \n\n```", "```js\n  render () { \n    return ( \n      <View \n        style={ styles.container } \n        ref={ component => this._root = component } \n        { ...this.props } \n      > \n        <Text style={ styles.rowTitle }> \n          { this.props.routeName } \n        </Text> \n      </View> \n    ) \n  } \n} \n\n```", "```js\n// Expenses/app/components/DrawerRow/styles.js \n\nimport { StyleSheet } from 'react-native'; \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    height: 40, \n    padding: 10 \n  }, \n  rowTitle: { \n    fontSize: 20, \n    textAlign: 'left' \n  } \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/App.android.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  Text, \n  View \n} from 'react-native'; \n\nimport styles from './styles'; \n\nimport * as dateMethods from './utils/dateMethods'; \nimport * as storageMethods from './utils/storageMethods'; \n\nimport AddExpenses from './components/AddExpenses'; \nimport CurrentMonthExpenses from './components/CurrentMonthExpenses'; \n\n```", "```js\nexport default class App extends Component { \n  constructor (props) { \n    super(); \n\n    this.state = { \n      budget: '', \n      expenses: {}, \n    } \n  } \n\n```", "```js\n  componentWillMount () { \n    ... \n  } \n\n```", "```js\n  render () { \n    return ( \n      <View style={ styles.androidContainer }> \n        { this._renderCurrentMonthExpenses() } \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderCurrentMonthExpenses () { \n    return ( \n      <View style={ styles.androidContainer }> \n        <CurrentMonthExpenses \n          ... \n        /> \n        <AddExpenses \n          ... \n        /> \n      </View> \n    ) \n  } \n\n```", "```js\n  _renderEnterBudgetComponent () { \n    this.props.navigator.push({ \n      index: 1, \n      passProps: { \n        monthString: dateMethods.getMonthString(this.state.month), \n        saveAndUpdateBudget: (budget) => this._saveAndUpdateBudget(budget), \n        updateExpenses: () => this._updateExpenses() \n      } \n    }); \n  } \n\n```", "```js\n  async _saveAndUpdateBudget (budget) { \n    ... \n  } \n\n  async _updateBudget () { \n    ... \n  } \n\n  async _updateExpenses () { \n    ... \n  } \n} \n\n```", "```js\n// Expenses/app/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  androidContainer: { \n    flex: 1 \n  }, \n  ... \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/EnterBudget/index.js \n\n... \nimport { \n  Platform, \n  ... \n} from 'react-native'; \n... \nexport default class EnterBudget extends Component { \n  ... \n  render () { \n    ... \n    return ( \n      <View style={ styles.enterBudgetContainer }> \n        ... \n        <TextInput \n          style={ Platform.OS === 'ios' ? styles.textInput :\n          styles.androidTextInput } \n          ... \n        /> \n        ... \n      </View> \n    ) \n  } \n  ... \n} \n\n```", "```js\n// Expenses/app/components/EnterBudget/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  androidTextInput: { \n    color: '#3D4A53', \n    margin: 10, \n    padding: 10, \n    textAlign: 'center' \n  }, \n  ... \n}); \n\nexport default styles; \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/index.js \n\n... \nimport { \n  ... \n  BackAndroid, \n  Platform, \n  ... \n} from 'react-native'; \n... \nexport default class CurrentMonthExpenses extends Component { \n  ... \n  componentWillMount () { \n    BackAndroid.addEventListener('hardwareButtonPress', () =>\n    this._backButtonPress()); \n  } \n\n  componentWillUnmount () { \n    BackAndroid.removeEventListener('hardwareButtonPress', () => \n    this._backButtonPress()) \n  } \n\n  render () { \n    ... \n    return ( \n      <View style={ ... }> \n        <View style={ styles.currentMonthExpensesHeader }> \n          ... \n          { this._renderProgressIndicator() } \n        </View> \n        <View style={ styles.listViewContainer }> \n          <ListView \n          ... \n          /> \n        </View> \n      </View> \n    ) \n  } \n\n```", "```js\n  _backButtonPress () { \n    if (this.props.isPreviousMonth) { \n      this.props.navigator.pop(); \n      return true; \n    } \n  } \n\n```", "```js\n  ... \n  _renderProgressIndicator () { \n    if (Platform.OS === 'ios') { \n      return ( \n        <ProgressViewIOS \n          progress={ this._getProgressViewAmount() } \n          progressTintColor={ '#A3E75A' } \n          style={ styles.progressView } \n        /> \n      ) \n    } \n\n```", "```js\n    return ( \n      <View style={ styles.progressView }> \n        <ProgressBarAndroid \n          color={ '#A3E75A' } \n          indeterminate={ false } \n          progress={ this._getProgressViewAmount() } \n          styleAttr={ 'Horizontal' } \n        /> \n      </View> \n    ) \n  } \n  ... \n}; \n\n```", "```js\n// Expenses/app/components/CurrentMonthExpenses/styles.js \n\n... \nconst styles = StyleSheet.create({ \n  ... \n  listViewContainer: { \n    flex: 1, \n    marginTop: 20 \n  }, \n  ... \n}); \n\nexport default styles; \n\n```", "```js\n// .../app/components/AddExpensesModal/index.android.js  \n\n... \nimport { \n  DatePickerAndroid, \n  ... \n} from 'react-native'; \n... \nexport default class AddExpensesModal extends Component { \n  ... \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      amount: '', \n      category: undefined, \n      date: new Date(), \n      description: '', \n    } \n  } \n\n```", "```js\n  render () { \n    const datePickerButtonTitle = ... \n    const categoryPickerButtonTitle = ... \n\n```", "```js\n    return ( \n      <Modal \n        ... \n        onRequestClose={ () => this._clearFieldsAndCloseModal() }\n      > \n\n```", "```js\n        <ScrollView style={ styles.modalContainer }> \n          <View style={ styles.amountRow }> \n            ... \n            <TextInput \n              ... \n              style={ styles.androidAmountInput } \n            /> \n          </View> \n          <Text style={ styles.descriptionText }> \n            ... \n          </Text> \n\n```", "```js\n          <TextInput \n            ... \n            style={ styles.androidDescriptionInput } \n          /> \n          <View style={ styles.androidPickerContainers }> \n            <Button \n              color={ '#86B2CA' } \n              onPress={ () => this._renderDatePicker() } \n              title={ datePickerButtonTitle } \n            /> \n          </View> \n\n```", "```js\n          <View style={ styles.androidPickerContainers }> \n            <View style={ styles.categoryIcon }> \n              { this.state.category && \n              iconMethods.getIconComponent(this.state.category) } \n            </View> \n              <Picker \n                ... \n                prompt={ categoryPickerButtonTitle } \n              > \n              { this._renderCategoryPicker() } \n            </Picker> \n          </View> \n          ... \n        </ScrollView> \n      </Modal> \n    ) \n  } \n\n```", "```js\n... \n_clearFieldsAndCloseModal () { \n    this.setState({ \n      amount: '', \n      category: undefined, \n      date: new Date(), \n      description: '' \n    }); \n\n    this.props.toggleModal() \n  } \n... \n\n```", "```js\n  async _renderDatePicker () { \n    const options = { \n      date: this.state.date \n    }; \n\n    const { action, year, month, day } = await \n    DatePickerAndroid.open(options); \n\n    if (action === DatePickerAndroid.dismissedAction) { \n      return; \n    } \n\n    this.setState({ \n      day, \n      month, \n      year \n    }); \n\n    this._onDateChange(); \n  } \n  ... \n} \n\n```", "```js\n// Expenses/app/components/PreviousMonthsList/index.js \n\n... \nimport { \n  Platform, \n  ... \n} from 'react-native'; \n... \nexport default class PreviousMonthsList extends Component { \n  ... \n  render () { \n   <View style={ Platform.OS === 'ios' ? styles.previousMonthsListContainer : {}    }>\n...\n   </View> \n  } \n  ... \n\n```", "```js\n  _renderSelectedMonth (rowData, sectionID, rowID) { \n    if (Platform.OS === 'ios') { \n      ... \n    } \n\n```", "```js\n    if (Platform.OS === 'android') { \n      this.props.navigator.push({ \n        index: 3, \n        passProps: { \n          ... \n        } \n      }); \n    } \n  } \n} \n\n```"]