- en: 3\. Vue CLI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. Vue CLI
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter introduces Vue CLI, including the Vue-UI and Vue.js DevTools, which
    are used when developing Vue applications for production. The Vue-UI allows you
    to create, develop, and manage Vue projects through an accompanying graphical
    user interface. Vue.js DevTools is a standalone app and browser extension for
    debugging Vue.js applications. We go into the details of the use cases and benefits
    of using Vue CLI features, which will teach you how to utilize these Vue commands.
    In addition to the command-line controls, we will set up and run Vue projects
    utilizing the new Vue GUI. We will combine the knowledge accrued in previous chapters
    to create new Vue applications that use v-model directives and two-way binding
    concepts. We will then dive into how to prototype Vue components. We will also
    learn how to build a Vue prototype for production and serve it locally. As we
    proceed, you will see how to set up and debug your Vue app and showcase its features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Vue CLI，包括Vue-UI和Vue.js DevTools，这些工具在开发用于生产的Vue应用程序时会被使用。Vue-UI允许你通过一个伴随的图形用户界面来创建、开发和管理工作室Vue项目。Vue.js
    DevTools是一个独立的应用程序和浏览器扩展，用于调试Vue.js应用程序。我们将详细介绍使用Vue CLI功能的使用案例和好处，这将教会你如何使用这些Vue命令。除了命令行控制之外，我们还将设置并运行Vue项目，利用新的Vue
    GUI。我们将结合前几章积累的知识来创建新的Vue应用程序，这些应用程序使用v-model指令和双向绑定概念。然后我们将深入探讨如何原型化Vue组件。我们还将学习如何构建用于生产的Vue原型并在本地提供服务。随着我们的进展，你将看到如何设置和调试你的Vue应用程序并展示其功能。
- en: By the end of this chapter, you will have a firm grasp of how to use Vue CLI's
    features, prototype Vue components, and utilize Vue.js DevTools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将牢固掌握如何使用Vue CLI的功能、原型化Vue组件以及利用Vue.js DevTools。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, we covered how to manage and manipulate data reactively
    in our component templates using Vue.js. In this chapter, we will be looking at
    how to support the development of such templates using Vue CLI. Vue.js takes advantage
    of the `npm` and webpack ecosystem, as seen in *Chapter 1*, *Starting Your First
    Vue Project*, in the *The Vue Instance in a Simple Vue Application* example. These
    tools help developers to quickly scaffold and build great web applications. Notable
    patterns inside of Vue.js are **vue.config** (which allows you to add webpack
    rules without directly editing the webpack file itself), **two-way data binding**,
    and **single file components (SFCs)**, as seen in *Chapter 1*, *Starting Your
    First Vue Project*, in the *Two-Way Binding Using V-Model* example.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了如何使用Vue.js在组件模板中反应性地管理和操作数据。在本章中，我们将探讨如何使用Vue CLI支持此类模板的开发。Vue.js利用了`npm`和webpack生态系统，正如在*第一章*，*开始你的第一个Vue项目*，*在简单的Vue应用程序中的Vue实例*示例中看到的那样。这些工具帮助开发者快速搭建和构建出色的Web应用程序。Vue.js内部的一些显著模式包括**vue.config**（允许你添加webpack规则，而无需直接编辑webpack文件本身）、**双向数据绑定**和**单文件组件（SFCs）**，正如在*第一章*，*开始你的第一个Vue项目*，*使用V-Model进行双向绑定*示例中看到的那样。
- en: Webpack projects instantiated using the **Vue command-line interface (Vue CLI)**
    will come with hot reloading already installed. Hot reloading is a frontend development
    pattern where your app in the browser will automatically update when code changes
    are detected. The reason you want this is so that you do not lose any of your
    browser state and changes made in your code are immediately reflected in the browser,
    which is useful when working on a **user interface (UI)**. Occasionally, a full-page
    reload will be necessary because JavaScript is a very stateful language.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Vue命令行界面（Vue CLI）**实例化的Webpack项目将自带热重载功能。热重载是一种前端开发模式，当检测到代码更改时，浏览器中的应用程序将自动更新。你想要这个功能的原因是，这样你不会丢失任何浏览器状态，你代码中的更改将立即反映在浏览器中，这在处理**用户界面（UI）**时非常有用。偶尔，可能需要进行完整的页面重载，因为JavaScript是一种非常状态化的语言。
- en: Vue CLI is a core tool for Vue development, as it allows programmers to maintain
    their projects much more comfortably with a set of descriptive and pre-configured
    commands. An often-overlooked process in development projects is code linting,
    which is a process where a program will flag potential errors or problems in your
    code, which can be quite difficult to add to an existing project. When using Vue
    CLI, your webpack project will come with linting so long as you choose it as an
    option when you create a Vue CLI project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vue CLI 是 Vue 开发的核心工具，因为它允许程序员通过一组描述性和预配置的命令更舒适地维护他们的项目。在开发项目中，一个经常被忽视的过程是代码检查，这是一个程序将标记你代码中潜在的错误或问题的过程，这可能在现有项目中相当困难。当使用
    Vue CLI 时，如果你的 webpack 项目在创建 Vue CLI 项目时选择了代码检查选项，它将自带代码检查功能。
- en: We are going to configure a Vue project using Vue CLI and run each basic command
    so that you can understand the tool you need to build your Vue applications. Out
    of the box, Vue CLI has support for **Babel**, **TypeScript**, **ESLint**, **PostCSS**,
    **PWAs**, **testing**, and more.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Vue CLI 配置一个 Vue 项目，并运行每个基本命令，以便你了解构建 Vue 应用程序所需的工具。默认情况下，Vue CLI 支持 **Babel**、**TypeScript**、**ESLint**、**PostCSS**、**PWAs**、**测试**等。
- en: Using Vue CLI
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue CLI
- en: 'Projects created using the Vue CLI tool have access to common tasks that will
    help you **serve** (run a project in your browser locally), **build** (compile
    files for production), and **lint** (examine code for errors) your project. The
    Vue CLI service development dependency packages are installed automatically with
    a new project and allow you to run the following commands:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vue CLI 工具创建的项目可以访问一些常用任务，这些任务将帮助你在本地浏览器中**运行**（运行项目）、**构建**（为生产编译文件）和**检查**（检查代码中的错误）你的项目。Vue
    CLI 服务开发依赖包会自动与新的项目一起安装，并允许你运行以下命令：
- en: '`npm run serve` or `yarn serve` – Runs your project code on `localhost:8080`
    with hot reloading. The port number `8080` is arbitrarily assigned, as it is above
    the well-known port numbers `1-1023` used in other areas of computing. If you
    have multiple Vue projects running at the same time, they will have incremental
    port numbers such as `:8080`, `:8081`, and so on.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run serve` 或 `yarn serve` – 在 `localhost:8080` 上运行项目代码，并具有热重载功能。端口号 `8080`
    是任意指定的，因为它高于其他计算领域使用的知名端口号 `1-1023`。如果你同时运行多个 Vue 项目，它们将具有递增的端口号，例如 `:8080`、`:8081`
    等。'
- en: '`npm run build` or `yarn build` – Runs a production build that reduces the
    file size of your project and can be served from a host.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build` 或 `yarn build` – 运行生产构建，减小项目文件大小，并可以从主机提供服务。'
- en: '`npm run lint` or `yarn lint` – Runs the process of linting, which will highlight
    code errors or warnings, making your code more consistent.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint` 或 `yarn lint` – 运行代码检查过程，这将突出显示代码错误或警告，使你的代码更加一致。'
- en: Now that you understand what Vue CLI is, and the commands available to you,
    we will learn how to set up Vue.js projects from scratch using Vue CLI.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Vue CLI 是什么，以及可用的命令，我们将学习如何使用 Vue CLI 从零开始设置 Vue.js 项目。
- en: 'Exercise 3.01: Setting up a Project Using Vue CLI'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.01：使用 Vue CLI 设置项目
- en: In this exercise, you will create your first Vue.js webpack project using the
    Vue CLI commands. But, first, ensure you have followed the *Preface* guide to
    install `Node` and `Vue CLI 4`. It is recommended that you use `iTerm2` on OS
    X as it is very customizable for your development flow. If you are using Windows,
    it is recommended that you use **PowerShell** as it can be more performant than
    the default Command Prompt and GIT bash.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用 Vue CLI 命令创建你的第一个 Vue.js webpack 项目。但是，首先，请确保你已经遵循了**前言**指南安装了 `Node`
    和 `Vue CLI 4`。建议在 OS X 上使用 `iTerm2`，因为它非常适合你的开发流程。如果你使用 Windows，建议使用 **PowerShell**，因为它可能比默认的命令提示符和
    GIT bash 更高效。
- en: To access the code files for this exercise, refer to [https://packt.live/3ph2xXt](https://packt.live/3ph2xXt).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://packt.live/3ph2xXt](https://packt.live/3ph2xXt)。
- en: 'Open Command Prompt. Your window should look as follows:![Figure 3.1: A blank
    Command Prompt window'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。你的窗口应该看起来如下：![图 3.1：一个空的命令提示符窗口
- en: '](img/B15218_03_01.jpg)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_01.jpg)'
- en: 'Figure 3.1: A blank Command Prompt window'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.1：一个空的命令提示符窗口
- en: Run the command `vue --version`. Ensure you are on the latest version of Vue
    CLI, as the following instructions will not work in versions of Vue CLI 2 or below.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令 `vue --version`。确保你使用的是 Vue CLI 的最新版本，因为以下说明在 Vue CLI 2 或更早版本中可能无法正常工作。
- en: 'After the preceding command, your screen should look as follows:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的命令之后，你的屏幕应该看起来如下：
- en: '![Figure 3.2: Command Prompt when checking the Vue version'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.2：检查Vue版本时的命令提示符'
- en: '](img/B15218_03_02.jpg)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_02.jpg)'
- en: 'Figure 3.2: Command Prompt when checking the Vue version'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.2：检查Vue版本时的命令提示符
- en: Your `@vue/cli` version should be at least 4.1.2.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的`@vue/cli`版本至少应该是4.1.2。
- en: 'Run the following Vue CLI command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Vue CLI命令：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Upon running the preceding command, you should see a list of saved presets,
    as shown in the following screenshot:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的命令后，您应该会看到一个已保存预设的列表，如下面的截图所示：
- en: '![Figure 3.3: Displaying the list of saved presets'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.3：显示已保存预设的列表'
- en: '](img/B15218_03_03.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_03.jpg)'
- en: 'Figure 3.3: Displaying the list of saved presets'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.3：显示已保存预设的列表
- en: 'Choose the last selection `Manually select features` by pressing the *Down
    arrow key* once and then pressing *Enter* to select:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按一次*向下箭头键*然后按*Enter*键来选择最后一个选项`Manually select features`：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will notice features with an asterisk in brackets. Each feature represents
    a preset that you can enable in your app. It does not matter if you do not know
    what each of these represents. For now, we will choose `Babel`, `CSS Pre-processors`,
    and `Linter/Formatter` by navigating with the arrow keys, pressing the spacebar
    on each option, then pressing *Enter* to proceed:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到带有括号内星号的功能。每个功能代表一个您可以在您的应用程序中启用的预设。您不必知道这些代表什么。现在，我们将通过使用箭头键导航，在每个选项上按空格键，然后按*Enter*键来选择`Babel`、`CSS
    Pre-processors`和`Linter/Formatter`：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Because you chose to enable a preprocessor, you now have a choice of which
    CSS preprocessor you prefer. In this exercise, we will use `Sass/SCSS (with dart-scss)`:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于您选择启用预处理器，您现在可以选择您偏好的CSS预处理器。在本练习中，我们将使用`Sass/SCSS (with dart-scss)`：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '`dart-scss` is a pure JavaScript compilation of the `Sass` library, making
    it a much smaller dependency compared to `node-sass` (which is a wrapper on the
    C++ implementation of SCSS), and it does not require rebuilding between Node upgrade
    versions.'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`dart-scss`是`Sass`库的纯JavaScript编译版本，与`node-sass`（它是SCSS的C++实现包装器）相比，它是一个更小的依赖项，并且不需要在Node升级版本之间重新构建。'
- en: 'We will now choose the `Eslint + Prettier` option, which automatically formats
    the code in a consistent manner:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将选择`Eslint + Prettier`选项，它将以一致的方式自动格式化代码：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To automatically format your code when you save your work, choose the option
    to `Lint on Save`:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在保存工作自动格式化代码，请选择`Lint on Save`选项：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '`Lint on save` is a useful tool to format your code as you go. Choose both
    linting options in *Step 8* to make sure that all your work is linted as you go,
    in turn making your code more readable and consistent.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Lint on save`是一个有用的工具，可以在编写代码时对其进行格式化。在*步骤8*中选择两个linting选项，以确保您的工作在编写过程中都经过linting，从而使代码更易于阅读和一致。'
- en: 'Next, we will choose the `In dedicated config files` option to place the configurations
    as per our preference:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将选择`In dedicated config files`选项，以根据我们的偏好放置配置：
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: An argument for `package.json` is to keep all configurations consistently formatted
    in JSON and in one file. For smaller projects, this would be acceptable, however,
    large projects will tend to produce a very long `package.json` file. This is where
    file splitting would be preferable. Splitting configurations into separate files
    both reduces the amount of cognitive load when editing these options and places
    greater emphasis on what is being changed in your commit logs. For example, when
    you edit the `babelrc` file, you know the changes relate to the Babel config,
    as opposed to `package.json` changes, where it could be anything.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`package.json`的一个论点是保持所有配置以JSON格式和在一个文件中保持一致格式。对于较小的项目，这可能是可接受的，但是大型项目往往会生成一个非常长的`package.json`文件。这就是文件拆分更可取的地方。将配置拆分到单独的文件中，在编辑这些选项时减少了认知负荷，并在提交日志中更强调正在更改的内容。例如，当您编辑`babelrc`文件时，您知道更改与Babel配置有关，而不是`package.json`更改，后者可能涉及任何内容。'
- en: Choose the `Save preset (y)` option to save your preset.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Save preset (y)`选项以保存您的预设。
- en: You can call the preset by any name. In the example, it will be called `My preset`.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以用任何名称调用预设。在示例中，它将被命名为`My preset`。
- en: 'Next time you want to install this preset, try running `vue create favourite
    -p "My preset"` (using the general command-line syntax of `vue create [project-name]
    -p [preset-name]`):'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下次您想要安装此预设时，尝试运行`vue create favourite -p "My preset"`（使用`vue create [project-name]
    -p [preset-name]`的一般命令行语法）：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the package installer. If the installer does not start automatically, run
    the `yarn install` command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行包安装器。如果安装器没有自动启动，请运行`yarn install`命令：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the package installer has completed, `serve` your project to compile your
    code and serve it on `http://localhost:8080`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦包安装器完成，`serve` 您的项目以编译您的代码并在 `http://localhost:8080` 上提供服务：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If port `8080` is taken already by another application, use the `--port` flag
    to specify another port, such as `9000`:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果端口 `8080` 已经被另一个应用程序占用，请使用 `--port` 标志指定另一个端口，例如 `9000`：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running the preceding command, we''ll see a default Vue project screen, as
    shown in *Figure 3.4*:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行前面的命令，我们将看到一个默认的 Vue 项目屏幕，如图 3.4 所示：
- en: '![Figure 3.4: The default Vue project screen will appear on your localhost:8080'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.4：默认 Vue 项目屏幕将出现在您的 localhost:8080 上'
- en: '](img/B15218_03_04.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_04.jpg)'
- en: 'Figure 3.4: The default Vue project screen will appear on your localhost:8080'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：默认的 Vue 项目屏幕将出现在您的 localhost:8080 上
- en: In this exercise, we saw how to create a Vue.js webpack project using the Vue
    CLI commands using Command Prompt. Next, we will look at how to prototype a Vue.js
    component without creating a webpack project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们看到了如何使用命令提示符中的 Vue CLI 命令创建一个 Vue.js webpack 项目。接下来，我们将探讨如何在不创建 webpack
    项目的情况下原型化一个 Vue.js 组件。
- en: Vue Prototyping
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue 原型化
- en: Let's say, one day you wake up with a great idea for a component or are involved
    in a large project and you want to debug components without the complex interdependencies
    of the existing project. Vue prototyping can help you create new components or
    debug existing ones, even for large projects. This is done by running `.vue` files
    in a separate and isolated compiler directly, without the need for any local dependencies.
    Running `.vue` files in this way may save time because you do not need to install
    a full Vue project as described in *Exercise 3.01*. Instead, all you need to do
    is install the `npm install -g @vue/cli-service-global` or `yarn global add @vue/cli-service-global`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，有一天你醒来，有一个关于组件的绝佳想法，或者你参与了一个大型项目，并且你想要在不复杂的现有项目依赖关系下调试组件。Vue 原型化可以帮助你创建新的组件或调试现有的组件，即使是大型项目。这是通过直接在单独且隔离的编译器中运行
    `.vue` 文件来完成的，无需任何本地依赖。以这种方式运行 `.vue` 文件可能会节省时间，因为你不需要安装如 *练习 3.01* 中描述的完整 Vue
    项目。相反，您只需要安装 `npm install -g @vue/cli-service-global` 或 `yarn global add @vue/cli-service-global`。
- en: 'Once this has been installed, you will have access to the following two commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，您将能够访问以下两个命令：
- en: '`vue serve` – This command compiles Vue.js code and runs in a localhost environment
    in your browser.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vue serve` – 此命令编译 Vue.js 代码并在浏览器中的本地主机环境中运行。'
- en: '`vue build` – This command compiles Vue.js code into a distributable package.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vue build` – 此命令将 Vue.js 代码编译成可分发包。'
- en: Getting Started with Prototyping
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型化入门
- en: 'To get started, you will first need to install the global package by opening
    your command terminal and running the following `install` command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您首先需要通过打开命令终端并运行以下 `install` 命令来安装全局包：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will generate the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下截图：
- en: '![Figure 3.5: Installing global dependencies required for Vue prototyping'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5：安装 Vue 原型化所需的全球依赖'
- en: '](img/B15218_03_05.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_05.jpg)'
- en: 'Figure 3.5: Installing global dependencies required for Vue prototyping'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：安装 Vue 原型化所需的全局依赖
- en: The install can take a couple of minutes depending on your internet connection.
    You will know when it is complete as you will be able to write other commands
    in the terminal. If the install fails for whatever reason, simply reopen the terminal
    and run the same command.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装可能需要几分钟，具体取决于您的互联网连接速度。您将知道安装何时完成，因为您将能够在终端中编写其他命令。如果安装失败，请简单地重新打开终端并运行相同的命令。
- en: 'To start using prototyping, create an example component called `helloWorld.vue`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用原型化，创建一个名为 `helloWorld.vue` 的示例组件：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In your terminal window (in the same directory as your new `.vue` file), use
    the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端窗口中（与您的新的 `.vue` 文件相同的目录），使用以下命令：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding command will display as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令将显示如下：
- en: '![Figure 3.6: The vue serve command is running on a file in the D:\ directory'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6：vue serve 命令正在 D:\ 目录下的文件上运行'
- en: '](img/B15218_03_06.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_06.jpg)'
- en: 'Figure 3.6: The vue serve command is running on a file in the D:\ directory'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：vue serve 命令正在 D:\ 目录下的文件上运行
- en: 'After running the `serve` command, there will be a brief period where the component
    will compile in the terminal window before being accessible in your browser as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `serve` 命令后，组件将在终端窗口中编译一段时间，然后才能在浏览器中访问，如下所示：
- en: '![Figure 3.7: The vue serve command will serve your Vue files in the localhost
    environment'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7：vue serve命令将在本地主机环境中提供您的Vue文件]'
- en: '](img/B15218_03_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_03_07.jpg](img/B15218_03_07.jpg)'
- en: 'Figure 3.7: The vue serve command will serve your Vue files in the localhost
    environment'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7：vue serve命令将在本地主机环境中提供您的Vue文件]'
- en: 'After the compilation is complete, navigate to the localhost URL specified
    in the command window using the browser. Here, it is `http://localhost:8080/`.
    In your browser, you should see the text `Hello World!`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，使用浏览器导航到命令窗口中指定的本地主机URL。这里，它是`http://localhost:8080/`。在您的浏览器中，您应该看到文本`Hello
    World!`：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have now learned how to prototype a Vue component on the fly without needing
    to create a full webpack project. Let's see how we can import fonts or libraries
    for use in a prototype.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何在不创建完整的webpack项目的情况下即时原型化Vue组件。让我们看看我们如何导入字体或库以在原型中使用。
- en: Defining Your Own Entry Point
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义您的入口点
- en: In your prototype, you may require the use of external libraries such as fonts
    or scripts to complete your prototype component. The `index.html` file is the
    entry point for a Vue.js HTML template. If you do not define an `index.html` file,
    a global default file is used.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的原型中，您可能需要使用外部库，如字体或脚本，以完成您的原型组件。`index.html`文件是Vue.js HTML模板的入口点。如果您没有定义`index.html`文件，将使用全局默认文件。
- en: 'To define a custom entry point, create an `index.html` file in the same directory.
    Using the following code derived from the default index page, you will see that
    a Google font has been added to the `<head>` tag:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义自定义入口点，在相同目录下创建一个`index.html`文件。使用以下从默认索引页面派生的代码，您将看到已向`<head>`标签添加了Google字体：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To use this font in your prototyped component, create a `helloWorld.vue` component
    in the same directory as the `index.html` file and then apply some `css` styling
    to the component:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的原型组件中使用此字体，在`index.html`文件所在的同一目录下创建一个`helloWorld.vue`组件，然后对该组件应用一些`css`样式：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To view the changes made to these files, run the following command in your
    terminal:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看对这些文件所做的更改，请在您的终端中运行以下命令：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will generate the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下截图：
- en: '![Figure 3.8: Run the vue serve command on the file you want to prototype'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8：在您想要原型化的文件上运行vue serve命令]'
- en: '](img/B15218_03_08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_03_08.jpg](img/B15218_03_08.jpg)'
- en: 'Figure 3.8: Run the vue serve command on the file you want to prototype'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8：在您想要原型化的文件上运行vue serve命令]'
- en: 'After running the `serve` command, there will be a brief period where the component
    will compile in the terminal window before being accessible in your browser, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`serve`命令后，组件将在浏览器可访问之前在终端窗口中进行编译，具体如下：
- en: '![Figure 3.9: The vue serve command will serve your Vue files in the localhost
    environment'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9：vue serve命令将在本地主机环境中提供您的Vue文件]'
- en: '](img/B15218_03_09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_03_09.jpg](img/B15218_03_09.jpg)'
- en: 'Figure 3.9: The vue serve command will serve your Vue files in the localhost
    environment'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9：vue serve命令将在本地主机环境中提供您的Vue文件]'
- en: 'Open the localhost URL in your browser. You should see the formatted text using
    a new font in your preview. The output will be as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开本地主机URL。您应该会看到使用新字体格式化的文本。输出将如下所示：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We have now learned how to include external libraries in a Vue component prototype
    without needing to create a full webpack project. Next, we will see how to build
    a prototype ready to be hosted on a website or previewed by your team externally.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何在Vue组件原型中包含外部库，而无需创建完整的webpack项目。接下来，我们将看到如何构建一个可以托管在网站上或由您的团队外部预览的原型。
- en: Building a Prototype for Production
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建用于生产的原型
- en: When you have finished making a prototype and want to share it with others on
    your team or submit it for review by a tech lead, you can export your code as
    distributable files.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成原型制作并希望与团队中的其他人分享或提交给技术负责人进行审查时，您可以导出您的代码作为可分发文件。
- en: This means that your code can run on other machines or be hosted on an external
    server without requiring Vue CLI to run it (aka the `vue serve` command).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您的代码可以在其他机器上运行或在外部服务器上托管，而无需Vue CLI运行它（即`vue serve`命令）。
- en: 'Using the previous example file to do this, open your command terminal, navigate
    to the folder that contains your Vue prototype, and run the `vue build helloWorld.vue`
    command. This will generate an output as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的示例文件进行此操作，打开您的命令终端，导航到包含您的Vue原型的文件夹，并运行`vue build helloWorld.vue`命令。这将生成以下输出：
- en: '![Figure 3.10: Output in the terminal after running the build command'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.10：运行build命令后的终端输出]'
- en: '](img/B15218_03_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_10.jpg)'
- en: 'Figure 3.10: Output in the terminal after running the build command'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10：运行构建命令后的终端输出
- en: 'A `dist` folder will be created that contains a compiled version of your prototype
    that you can upload to a web host. Inside of the `dist` folder, you can expect
    to see the following files:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个包含你的原型编译版本的`dist`文件夹，你可以将其上传到网络主机。在`dist`文件夹内，你可以期待看到以下文件：
- en: An `index.html` file
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`index.html`文件
- en: The `/css` folder
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/css`文件夹'
- en: The `/js` folder
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/js`文件夹'
- en: All these files will be necessary to properly run your compiled prototype. If
    you double-click on the `index.html` file, it does not load your app. To view
    or serve the distributable files on your local machine, you will need the help
    of a library that can serve a static site or single-page application. An `npm`
    package called `serve` is built for this purpose.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些文件都是正确运行你的编译原型所必需的。如果你双击`index.html`文件，它不会加载你的应用。要在本地机器上查看或服务可分发文件，你需要一个可以服务静态网站或单页应用的库。一个名为`serve`的`npm`包就是为了这个目的而构建的。
- en: 'To serve your `dist` folder, globally install the `serve` package by opening
    your command terminal and using the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要服务你的`dist`文件夹，通过打开命令行终端并使用以下命令全局安装`serve`包：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `serve` command works by allowing you to specify a directory or file to
    serve:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`serve`命令通过允许你指定要服务的目录或文件来工作：'
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In your command terminal, make sure you are in the root directory where your
    Vue prototype `dist` folder is located. To serve your `dist` folder located in
    this folder directory, run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的命令行终端中，确保你位于你的Vue原型`dist`文件夹所在的根目录。要服务此文件夹目录中的`dist`文件夹，请运行以下命令：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding command will display output as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将显示如下输出：
- en: '![Figure 3.11: Output in the terminal after running the serve command'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.11：运行serve命令后的终端输出]'
- en: '](img/B15218_03_11.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_11.jpg)'
- en: 'Figure 3.11: Output in the terminal after running the serve command'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11：运行serve命令后的终端输出
- en: 'Navigate to `http://localhost:5000` and you will see your prototyped project
    as displayed in the following output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:5000`，你将看到以下输出中显示的原型项目：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We have now learned how to build a Vue component prototype that can be hosted
    on a website, and how to preview the built files locally. Now, we will see these
    Vue prototyping concepts used in the next exercise.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何构建一个可以托管在网站上的Vue组件原型，以及如何在本地预览构建的文件。现在，我们将看到这些Vue原型概念在下一个练习中的应用。
- en: 'Exercise 3.02: Instant Prototyping Using Vue CLI'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.02：使用Vue CLI进行即时原型设计
- en: In this exercise, you will be creating a Vue component that uses Vue's two-way
    data binding on the fly. Using instant prototyping makes it possible to utilize
    Vue syntax quickly, with the added benefits of hot reloading.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将创建一个使用Vue的即时双向数据绑定的Vue组件。使用即时原型设计可以使你快速利用Vue语法，并附加热重载等好处。
- en: To access the code files for this exercise, refer to [https://packt.live/35kZrd3](https://packt.live/35kZrd3).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://packt.live/35kZrd3](https://packt.live/35kZrd3)。
- en: In the `Exercise 3.02` folder, create a file called `prototype.vue`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Exercise 3.02`文件夹中，创建一个名为`prototype.vue`的文件。
- en: Open a command-line terminal inside of this folder and use the `vue serve prototype.vue`
    command.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件夹内打开一个命令行终端，并使用`vue serve prototype.vue`命令。
- en: 'Using `vue`, and hit the *Tab* button to instantly create the Vue component
    structure:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`vue`，然后按*Tab*键以即时创建Vue组件结构：
- en: '[PRE23]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a data prop called `heading` with the string value `Prototype Vue Component`,
    then wrap it around `h1` tags in the template. View the result in `localhost:8080`
    in your browser:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`heading`的数据属性，其字符串值为`Prototype Vue Component`，然后在模板中将它包裹在`h1`标签中。在浏览器中的`localhost:8080`查看结果：
- en: '[PRE24]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding code will display as shown in the following output:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码将显示如下输出：
- en: '[PRE25]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To build this component for production, run the `vue build prototype.vue` command.
    After running this command, you will have a generated `dist` folder in the same
    directory as your prototyped component, as shown in *Figure 3.12*:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要为生产构建此组件，请运行`vue build prototype.vue`命令。运行此命令后，你将在原型组件所在的同一目录中生成一个`dist`文件夹，如图*图3.12*所示：
- en: '![Figure 3.12: The final output for this exercise contains a /dist folder'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.12：此练习的最终输出包含一个/dist文件夹]'
- en: '](img/B15218_03_12.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_12.jpg)'
- en: 'Figure 3.12: The final output for this exercise contains a /dist folder'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.12：本练习的最终输出包含一个/dist文件夹
- en: 'After building your distributable file, run `serve dist` in your command terminal.
    Then, in your browser, navigate to the localhost URL specified in the terminal.
    You will be able to view your built prototype as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建你的可分发文件后，在你的命令行终端中运行`serve dist`。然后，在你的浏览器中导航到终端中指定的localhost URL。你将能够以以下方式查看你构建的原型：
- en: '[PRE26]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this exercise, you saw how to run a prototyped Vue component via the command
    line without installing a full brand-new project. You also saw how to build the
    new prototype into a distributable file and then serve it. Next, we will look
    at how you can use the Vue-UI to start and run Vue applications.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你看到了如何通过命令行运行原型化的Vue组件，而无需安装全新的项目。你还看到了如何将新原型构建成可分发文件，然后提供服务。接下来，我们将探讨如何使用Vue-UI启动和运行Vue应用程序。
- en: The Vue-UI
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue-UI
- en: The Vue-UI is a graphical interface that allows you to control Vue properties
    without requiring too much of an understanding of how the command line works or
    how individual files such as the `package.json` or webpack files are configured.
    The Vue-UI provides easy access to information such as `vue ui` command. At the
    time of writing, the Vue-UI is still in beta. If you run into any issues using
    this tool, stop the command, and run `vue ui` again.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Vue-UI是一个图形界面，允许你控制Vue属性，而无需过多了解命令行的工作方式或如何配置单个文件，如`package.json`或webpack文件。Vue-UI提供了对诸如`vue
    ui`命令等信息轻松访问。在撰写本文时，Vue-UI仍在测试版。如果你在使用此工具时遇到任何问题，请停止命令，然后再次运行`vue ui`。
- en: 'The Vue-UI can be used on new and existing projects. Generally, you would opt
    for presets using Vue CLI at the start of the project, such as which `SCSS` compiler,
    testing framework, or `lint` method to use. Using the Vue-UI, even new Vue developers
    can easily configure Vue presets at any time, including obscure webpack settings
    such as the output directory or turning on `sourcemaps`. The following screenshot
    displays the `General settings` page:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Vue-UI可用于新项目和现有项目。通常，你会在项目开始时选择使用Vue CLI的预设，例如使用哪个`SCSS`编译器、测试框架或`lint`方法。使用Vue-UI，即使是新的Vue开发者也可以轻松地在任何时间配置Vue预设，包括诸如输出目录或开启`sourcemaps`这样的晦涩的webpack设置。以下截图显示了`常规设置`页面：
- en: '![Figure 3.13: Easily configured project settings within the Vue-UI'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.13：在Vue-UI中轻松配置的项目设置](img/B15218_03_13.jpg)'
- en: '](img/B15218_03_13.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_13.jpg)'
- en: 'Figure 3.13: Easily configured project settings within the Vue-UI'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13：在Vue-UI中轻松配置的项目设置
- en: The `npm` package system is massive. However, it is quite easy for experienced
    users to navigate. Generally, an experienced developer will install a package
    via the command line, which will then automatically update the `package.json`
    file and lock the file with the new package. The locked file is a generated record
    keeper of interdependencies required for your `npm` packages that you commit with
    your project. Vue has specific packages called plugins that are special `npm`
    packages for Vue that not only install a dependency but will usually augment your
    project for you in helpful ways. For example, if you install the `vue router cli`
    plugin, it will automatically generate a `route.js` file in your project to get
    you off the ground faster.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`包系统非常庞大。然而，对于有经验的用户来说，导航起来相当容易。通常，有经验的开发者会通过命令行安装一个包，然后它会自动更新`package.json`文件并锁定新包。锁定的文件是记录你与项目一起提交的`npm`包所需相互依赖关系的生成记录器。Vue有一些特定的包称为插件，这些是Vue的特别`npm`包，不仅会安装依赖项，通常还会以有用的方式增强你的项目。例如，如果你安装了`vue
    router cli`插件，它将自动在你的项目中生成一个`route.js`文件，让你更快地上手。'
- en: '`Vuetify` is a useful framework when trying to quickly scaffold a more complex
    component or project, it contains a lot of common UI elements and components such
    as buttons and input fields so you can focus on the interface rather than building
    out individual components themselves. If you install `Vuetify` using a Vue CLI
    plugin package, it will automatically set up Vuetify for you.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vuetify`是一个在尝试快速搭建更复杂组件或项目时非常有用的框架，它包含了许多常见的UI元素和组件，如按钮和输入字段，这样你就可以专注于界面而不是构建单个组件本身。如果你使用Vue
    CLI插件包安装`Vuetify`，它将自动为你设置Vuetify。'
- en: We have now learned about the Vue-UI, and how new and experienced developers
    can use this tool to manage projects and dependencies. Next, we will use the Vue-UI
    to create and run Vue.js projects.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了Vue-UI，以及新和有经验的开发者如何使用这个工具来管理和依赖项。接下来，我们将使用Vue-UI来创建和运行Vue.js项目。
- en: 'Exercise 3.03: Creating and Building a New Project from the Vue-UI'
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.03：从Vue-UI创建和构建新项目
- en: In this exercise, you will learn step by step how to use the Vue-UI to set up
    and install a Vue.js project. You will also be required to install and use the
    `Vuetify` library as a dependency. Once installed, you will run this project using
    the Vue-UI and see Vuetify elements running on a page.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将逐步学习如何使用Vue-UI设置和安装Vue.js项目。你还将被要求安装并使用`Vuetify`库作为依赖项。安装后，你将使用Vue-UI运行此项目，并看到Vuetify元素在页面上运行。
- en: To access the code files for this exercise, refer to [https://packt.live/35jOsAH](https://packt.live/35jOsAH).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://packt.live/35jOsAH](https://packt.live/35jOsAH)。
- en: 'Open a command-line terminal and run the `vue ui` command. You will see the
    following screen:![Figure 3.14: The Vue-UI without any projects in it'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端并运行`vue ui`命令。你会看到以下屏幕：![图3.14：Vue-UI中没有项目
- en: '](img/B15218_03_14.jpg)'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_14.jpg)'
- en: 'Figure 3.14: The Vue-UI without any projects in it'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.14：Vue-UI中没有项目
- en: 'Click `Create` to start a new project. Navigate to the folder in which you
    wish to install the project:![Figure 3.15: Installing the project'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”以启动新项目。导航到你希望安装项目的文件夹：![图3.15：安装项目
- en: '](img/B15218_03_15.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_15.jpg)'
- en: 'Figure 3.15: Installing the project'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.15：安装项目
- en: 'In the `Project folder` field, write `demo-ui`, choose `yarn` as your package
    manager and click `Next`, as shown in the following screenshot:![Figure 3.16:
    Vue-UI''s project creation interface'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“项目文件夹”字段中，输入`demo-ui`，选择`yarn`作为你的包管理器，然后点击“下一步”，如图所示：![图3.16：Vue-UI的项目创建界面
- en: '](img/B15218_03_16.jpg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_16.jpg)'
- en: 'Figure 3.16: Vue-UI''s project creation interface'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.16：Vue-UI的项目创建界面
- en: 'Choose `Manual` and you will be taken to the `Features` screen. On this screen,
    select `Babel`, `CSS` `Preprocessors`, `Linter/Formatter`, and `Use config files`.
    *Figure 3.22* displays a screenshot with these options selected:![Figure 3.17:
    Enable features for your new project in the Vue-UI'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“手动”，你将被带到“功能”屏幕。在此屏幕上，选择“Babel”、“CSS预处理器”、“Linter/Formatter”和“使用配置文件”。*图3.22*显示了选择这些选项的截图：![图3.17：在Vue-UI中为你的新项目启用功能
- en: '](img/B15218_03_17.jpg)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_17.jpg)'
- en: 'Figure 3.17: Enable features for your new project in the Vue-UI'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.17：在Vue-UI中为你的新项目启用功能
- en: 'Choose the `Sass/SCSS (with dart-sass)` preprocessor and `ESLint + Prettier`
    config, and enable the additional lint features shown in the following screenshot:![Figure
    3.18: Enable configuration options for your new project in the Vue-UI'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“Sass/SCSS（使用dart-sass）”预处理器和“ESLint + Prettier”配置，并启用以下截图所示的附加lint功能：![图3.18：在Vue-UI中为新项目启用配置选项
- en: '](img/B15218_03_18.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_18.jpg)'
- en: 'Figure 3.18: Enable configuration options for your new project in the Vue-UI'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.18：在Vue-UI中为新项目启用配置选项
- en: 'When prompted, select `Continue without saving the preset`, and wait for the
    project to install. You should see a screen like *Figure 3.19*:![Figure 3.19:
    Be patient as Vue creates and installs your project dependencies'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提示时，选择“继续不保存预设”，并等待项目安装。你应该会看到一个类似*图3.19*的屏幕：![图3.19：Vue创建和安装项目依赖时请耐心等待
- en: '](img/B15218_03_19.jpg)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_19.jpg)'
- en: 'Figure 3.19: Be patient as Vue creates and installs your project dependencies'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.19：Vue创建和安装项目依赖时请耐心等待
- en: 'Navigate to the plugins page, click on `Install dependency`, search for `vuetify`,
    and install `vue-cli-plugin-vuetify`. You can observe on the `Dependencies` page
    that `vuetify` has been added automatically to the project dependencies list,
    as follows:![Figure 3.20: Clean interface for dependency search and installation'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到插件页面，点击“安装依赖”，搜索“vuetify”，并安装`vue-cli-plugin-vuetify`。你可以在“依赖”页面上观察到“vuetify”已自动添加到项目依赖列表中，如下所示：![图3.20：依赖搜索和安装的干净界面
- en: '](img/B15218_03_20.jpg)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_20.jpg)'
- en: 'Figure 3.20: Clean interface for dependency search and installation'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.20：依赖搜索和安装的干净界面
- en: 'Navigate to the `Project tasks` page and click on the `serve` task. Then, click
    the `Run task` icon as shown in the following screenshot:![Figure 3.21: The serve
    task dashboard contains the Run task button'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到“项目任务”页面，点击“serve”任务。然后，点击以下截图所示的“运行任务”图标：![图3.21：serve任务仪表板包含运行任务按钮
- en: '](img/B15218_03_21.jpg)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_03_21.jpg)'
- en: 'Figure 3.21: The serve task dashboard contains the Run task button'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.21：serve任务仪表板包含运行任务按钮
- en: 'Wait for Vue to compile the app. Click on the `Open app` button as shown in
    *Figure 3.22* when it is ready:![Figure 3.22: The Open app button will take you
    straight to your app in the browser'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待 Vue 编译应用。当应用准备就绪时，点击如图 3.22 所示的“打开应用”按钮：![图 3.22：打开应用按钮将直接带你到浏览器中的应用
- en: '](img/B15218_03_22.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_22.jpg)'
- en: 'Figure 3.22: The Open app button will take you straight to your app in the
    browser'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.22：打开应用按钮将直接带你到浏览器中的应用
- en: 'You should see your app in the browser as shown in the following screenshot:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在浏览器中看到你的应用，如下截图所示：
- en: '![Figure 3.23: On http://localhost:8080, you should see a Vuetify styled page'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.23：在 http://localhost:8080 上，你应该看到一个 Vuetify 风格的页面'
- en: '](img/B15218_03_23.jpg)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_23.jpg)'
- en: 'Figure 3.23: On http://localhost:8080, you should see a Vuetify styled page'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.23：在 http://localhost:8080 上，你应该看到一个 Vuetify 风格的页面
- en: 'To prepare this project for production, go back into the Vue-UI browser tab
    and click on the `build` tab in `Project tasks`. Click on the `Parameters` button
    next to the `Start Task` button. Turn on `Modern mode` and make sure `Output directory`
    is set to `dist`. `Modern mode` transpiles your code into two versions, one that
    is lightweight and targeted to modern browsers, and another that is verbose and
    used to support older browsers. This will be where you find your files after compilation.
    Your screen should display something like the following screenshot:![Figure 3.24:
    Vue-UI build parameters'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将此项目准备用于生产，请回到 Vue-UI 浏览器标签页，并在“项目任务”中点击“构建”标签。点击“开始任务”按钮旁边的“参数”按钮。开启“现代模式”并确保“输出目录”设置为“dist”。“现代模式”将你的代码转换为两个版本，一个轻量级且针对现代浏览器，另一个详细且用于支持旧浏览器。这将是你编译后找到文件的地方。你的屏幕应该显示如下截图：![图
    3.24：Vue-UI 构建参数
- en: '](img/B15218_03_24.jpg)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_24.jpg)'
- en: 'Figure 3.24: Vue-UI build parameters'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.24：Vue-UI 构建参数
- en: To build this project for production, click on the `Start Task` button and let
    it run.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为生产构建此项目，请点击“开始任务”按钮并让它运行。
- en: Note
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: You do not need to stop the `serve` task to complete this.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你不需要停止 `serve` 任务来完成此操作。
- en: 'When the task is complete, your screen will display as follows:'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任务完成后，你的屏幕将显示如下：
- en: '![Figure 3.25: When a build is complete, you have a dashboard of useful analytics'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.25：当构建完成后，你将看到一个包含有用分析仪表板的控制台'
- en: '](img/B15218_03_25.jpg)'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_25.jpg)'
- en: 'Figure 3.25: When a build is complete, you have a dashboard of useful analytics'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25：构建完成后，你将看到一个包含有用分析仪表板的控制台
- en: In this exercise, you saw how to create a brand-new project, configure presets,
    use the `serve` task to run an application, and how to build a project for production
    through the Vue-UI. You should feel comfortable enough to add new Vue CLI plugins
    and manage npm package dependencies.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你看到了如何创建一个全新的项目，配置预设，使用 `serve` 任务运行一个应用，以及如何通过 Vue-UI 构建用于生产的项目。你应该足够熟悉，可以添加新的
    Vue CLI 插件并管理 npm 包依赖。
- en: Vue.js DevTools
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue.js DevTools
- en: 'Vue.js DevTools is a browser extension for Chrome and Firefox, and an Electron
    desktop app that can be run from your computer to help you debug locally run Vue.js
    projects. These tools do not work in production or remotely run projects (for
    example, if you serve a production-built project or view a website online). You
    can download the Vue.js DevTools extension from the Chrome extension page, as
    seen in the following screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js DevTools 是一个适用于 Chrome 和 Firefox 的浏览器扩展，以及一个可以从你的电脑上运行的 Electron 桌面应用，可以帮助你调试本地运行的
    Vue.js 项目。这些工具在生产和远程运行的项目中不起作用（例如，如果你提供了一个生产构建的项目或在线查看网站）。你可以从 Chrome 扩展页面下载 Vue.js
    DevTools 扩展，如下截图所示：
- en: '![Figure 3.26: The Vue.js DevTools Chrome extension page'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.26：Vue.js DevTools Chrome 扩展页面'
- en: '](img/B15218_03_26.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15218_03_26.jpg)'
- en: 'Figure 3.26: The Vue.js DevTools Chrome extension page'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.26：Vue.js DevTools Chrome 扩展页面
- en: 'You can also download the Vue.js DevTools extension from Firefox ([https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/](https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/)):'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从 Firefox 下载 Vue.js DevTools 扩展（[https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/](https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/))：
- en: '![Figure 3.27: The Vue.js DevTools Firefox extension page'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.27：Vue.js DevTools Firefox 扩展页面'
- en: '](img/B15218_03_27.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15218_03_27.jpg)'
- en: 'Figure 3.27: The Vue.js DevTools Firefox extension page'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27：Vue.js DevTools Firefox 扩展页面
- en: The DevTools are a Vue developer's best friend as they will reveal useful information
    inside of the browser's developer console that you normally would not see. This
    includes Vue component loading performance and tracking various events that are
    triggered while your Vue application runs. There are several tabs, which we'll
    look at now.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The `Components` tab helps you navigate the virtual `< > Inspect DOM`, which
    will take you directly to the location of this component in the Chrome or Firefox
    DOM tree. Select the Vue element directly from within the browser UI using the
    `Select` target icon, highlighted in the following *Figure 3.28* (the top-right
    corner of the left panel).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Your screen should look as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28: The Components tab in Vue.js DevTools'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_28.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.28: The Components tab in Vue.js DevTools'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '`Vuex` - Using this tab, you can navigate the Vuex global state. You will see
    a transcript of mutations that occur within your Vuex store, as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29: The Vuex tab in Vue.js DevTools'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_29.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.29: The Vuex tab in Vue.js DevTools'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: There will be more on this in future chapters.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '`Events` – Using this tab, you can navigate custom events that are emitted
    from your components. More on this in future chapters. By default, events will
    be recorded as seen in the following screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30: The Events tab in Vue.js DevTools'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_30.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.30: The Events tab in Vue.js DevTools'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '`Routing` – Using this tab, you can observe routing history and events within
    this pane. There will be more on this in future chapters. When routing events
    occur, they will be recorded as shown in the following screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31: The Routing tab in Vue.js DevTools'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_31.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.31: The Routing tab in Vue.js DevTools'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '`Performance` – Using this tab, you can navigate to the performance area that
    records the frame rate and render time of your components as your app is running
    to optimize your end user experience. When you click the `Start` button to collect
    performance metrics, they will be shown as blue bars, as seen in the following screenshot:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.32: The Performance tab in Vue.js DevTools'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_32.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.32: The Performance tab in Vue.js DevTools'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: The blue bar chart in *Figure 3.32* represents the load time in milliseconds.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '`Settings` – Using this tab, you can customize your Vue.js DevTools experience
    as shown in the following screenshot. For new developers, the default settings
    do not need to be changed:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.33: The Settings tab in Vue.js DevTools'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_03_33.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.33: The Settings tab in Vue.js DevTools'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '`Refresh` – Clicking this button will refresh your Vue.js DevTools instance
    in the browser.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned about the Vue.js DevTools, which will help you when developing
    components in your next Vue application. Next, we will build a Vue component and
    use the Vue.js DevTools to inspect the code and manipulate the local state of
    data inside the component.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了Vue.js DevTools，这将帮助你在开发下一个Vue应用程序的组件时。接下来，我们将构建一个Vue组件，并使用Vue.js DevTools来检查代码并操作组件内部的数据本地状态。
- en: 'Exercise 3.04: Debugging a Vue Application Using DevTools'
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.04：使用DevTools调试Vue应用程序
- en: In this exercise, you will build a basic component that uses several Vue.js
    patterns you have explored in previous chapters, and you will explore these patterns
    using DevTools. Ensure you are using either Chrome or Firefox and have DevTools
    installed. You will use Vue.js DevTools to inspect the code and manipulate the
    local state of data inside the component.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将构建一个使用你在前几章中探索的几个Vue.js模式的组件，并且你将使用DevTools来探索这些模式。确保你正在使用Chrome或Firefox，并且已安装DevTools。你将使用Vue.js
    DevTools来检查代码并操作组件内部的数据本地状态。
- en: To access the code files for this exercise, refer to [https://packt.live/3eLIcVe](https://packt.live/3eLIcVe).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅[https://packt.live/3eLIcVe](https://packt.live/3eLIcVe)。
- en: Navigate to the `Exercise3.04` project folder and open it up in VS Code. In
    your command prompt, install the required scripts by running the `yarn` command.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Exercise3.04`项目文件夹，并在VS Code中打开它。在你的命令提示符中，通过运行`yarn`命令安装所需的脚本。
- en: In the same command prompt that `yarn` used, run the project using `yarn serve`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`yarn`使用的相同命令提示符中，运行项目使用`yarn serve`。
- en: Navigate to `localhost:8080` in your browser so you can view the changes made
    in the following steps.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的浏览器中导航到`localhost:8080`，以便你可以查看以下步骤中做出的更改。
- en: 'Create reactive data in `App.vue` by adding a data prop, `frameworkList`, filled
    with an array of strings, and an `input` prop with a value of an empty string:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.vue`中创建响应式数据，通过添加一个数据属性`frameworkList`，填充一个字符串数组，以及一个值为空字符串的`input`属性：
- en: '[PRE27]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, create a computed property called `computedList` to filter the `frameworkList`
    prop using the `input` prop value:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`computedList`的计算属性，用于使用`input`属性值筛选`frameworkList`属性：
- en: '[PRE28]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the Vue `template` block, add an `input` field that is bound using v-model
    to the `input` data prop and loop out `computedList` in a list. Add some styling (optional):'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Vue的`template`块中，添加一个使用v-model绑定到`input`数据属性并循环`computedList`的`input`字段。添加一些样式（可选）：
- en: '[PRE29]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The preceding code will generate the following screenshot:'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将生成以下截图：
- en: '![Figure 3.34: Checkpoint – your list is filterable'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图3.34：检查点 – 你的列表是可筛选的'
- en: '](img/B15218_03_34.jpg)'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_34.jpg)'
- en: 'Figure 3.34: Checkpoint – your list is filterable'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.34：检查点 – 你的列表是可筛选的
- en: 'In your browser, where you can view your app, *right-click* and choose `Inspect`
    to open the developer console or use the shortcut *Ctrl* + *Shift* + *J* (Mac
    users: *Cmd* + *Shift* + *J*) and navigate to the `Vue` tab. This should generate
    a screenshot as follows:![Figure 3.35: Chrome extension for Vue.js DevTools'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的浏览器中，你可以查看你的应用，*右键点击*并选择`Inspect`以打开开发者控制台或使用快捷键 *Ctrl* + *Shift* + *J*（Mac用户：*Cmd*
    + *Shift* + *J*）并导航到`Vue`标签。这将生成以下截图：![图3.35：Vue.js DevTools的Chrome扩展
- en: '](img/B15218_03_35.jpg)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_35.jpg)'
- en: 'Figure 3.35: Chrome extension for Vue.js DevTools'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.35：Vue.js DevTools的Chrome扩展
- en: 'By default, you will be in the `Components` tab. Select `Anonymous Component`
    to inspect the data associated with that component. Click into the `Filter list`
    input field and type `V`. You will observe two things occurring: in the right-hand
    panel, the data prop `input` now has the value of `V` and the computed list. `computedList`
    now only contains the string `Vue`. In the browser, this data will be reflected
    in the UI, as seen in *Figure 3.36*:![Figure 3.36: Chrome extension for Vue.js
    DevTools'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，你将在`Components`标签中。选择`Anonymous Component`以检查与该组件关联的数据。点击到`Filter list`输入字段并输入`V`。你会观察到两个事情发生：在右侧面板中，数据属性`input`现在具有值`V`和计算列表。`computedList`现在只包含字符串`Vue`。在浏览器中，这些数据将在UI中反映出来，如*图3.36*所示：![图3.36：Vue.js
    DevTools的Chrome扩展
- en: '](img/B15218_03_36.jpg)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_03_36.jpg)'
- en: 'Figure 3.36: Chrome extension for Vue.js DevTools'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.36：Vue.js DevTools的Chrome扩展
- en: 'Edit the data directly in the right-hand panel by clicking on the `Pencil`
    icon next to the `input` prop, and type `R`. The DOM will reactively update for
    the direct change made to the input prop from the DevTools as shown in the following screenshot:![Figure
    3.37: Editing live values in your Vue project is easy'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_37.jpg)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.37: Editing live values in your Vue project is easy'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After changing the value in the Vue.js DevTools, the value will reactively
    change in the UI, where the input value in this example is now `R`, which then
    triggers the reactive `computedList` array to only show values containing the
    letter `r`, as displayed in *Figure 3.38*:'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.38: Computed list update to the value written inside of DevTools'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_38.jpg)'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.38: Computed list update to the value written inside of DevTools'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to the `Performance` tab, click on the `Component render` toggle, and click
    the `Start` button. While this is running, search for several items by writing
    in the input box `A`, then `B`, then `V`. As you type text into the input box,
    you will see the performance metrics as blue bars, as seen in the following screenshot:![Figure
    3.39: Computed list update to the value written inside of DevTools'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_03_39.jpg)'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.39: Computed list update to the value written inside of DevTools'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click `Stop` and observe the `millisecond` timing in the `Component render`
    tab, which reflects how long it took your component to load, as shown in the following
    screenshot:![Figure 3.40: Selecting the component in the right-hand panel will
    open'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the lifecycle hooks on the left
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_03_40.jpg)'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.40: Selecting the component in the right-hand panel will open the
    lifecycle hooks on the left'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Repeating the test will allow you to compare benchmarks, however, if you refresh
    the page you will lose them.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this exercise, you have seen how to use Vue.js DevTools to navigate
    a basic component in a Vue application through the `Components` tab. You know
    how to observe and edit data in DevTools, having seen that computed properties
    will react to your data prop changes. You know where the `Performance` tab is
    and how to use it when creating a Vue application.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.01: Building a Vue Application Using the Vue-UI and the Vuetify
    Component Library'
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, you will build a Vue project using the command line, then
    import it into the Vue-UI and compare the build size before and after Vuetify
    installation. This will test your ability to control the various Vue tools at
    your disposal and highlight the real-world scenarios where you would use these
    tools.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Use Vue CLI to create a new project using the Babel presets.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Vue-UI to import your newly created project.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the VueUI to install the `Vuetify` plugin and use Vuetify's Vue components
    in the project.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy a premade layout from the Vuetify website or build your own using their
    components: [https://vuetifyjs.com/en/getting-started/pre-made-layouts](https://vuetifyjs.com/en/getting-started/pre-made-layouts).'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Vuetify网站复制一个预制的布局，或者使用他们的组件构建自己的布局：[https://vuetifyjs.com/en/getting-started/pre-made-layouts](https://vuetifyjs.com/en/getting-started/pre-made-layouts)。
- en: 'The expected outcome is as follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果如下：
- en: '![Figure 3.41: The final outcome'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.41：最终结果'
- en: '](img/B15218_03_41.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.41](img/B15218_03_41.jpg)'
- en: 'Figure 3.41: The final outcome'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.41：最终结果
- en: 'This activity also has a toggleable menu, as displayed in *Figure 3.42*:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动还有一个可切换的菜单，如图3.42所示：
- en: '![Figure 3.42: Output displaying a toggleable menu'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.42：显示可切换菜单的输出'
- en: '](img/B15218_03_42.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.42](img/B15218_03_42.jpg)'
- en: 'Figure 3.42: Output displaying a toggleable menu'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.42：显示可切换菜单的输出
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor385).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的解决方案可以通过[这个链接](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor385)找到。
- en: After the activity has been completed, you should be able to use Vue CLI and
    the Vue-UI to manage your future Vue projects. You will find that there are situations
    where both tools can be used interchangeably or in conjunction with each other,
    depending on what you are more comfortable with.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 活动完成后，你应该能够使用Vue CLI和Vue-UI来管理你未来的Vue项目。你会发现，在某些情况下，这两个工具可以互换使用，或者根据你更舒适的方式结合使用。
- en: Summary
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the multiple Vue.js tools available
    to help you maintain and manage your Vue applications. You created Vue.js projects
    from both the command line and the new Vue-UI, installed new dependencies, and
    served and built your projects from both those interfaces. You can use these tools
    together or separately – whichever you feel more comfortable with. Vue.js DevTools
    has a lot of quality-of-life features that will assist you on your journey through
    the more advanced portions of this book and as you begin to pass props between
    your components and route pages together.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你被介绍了多种Vue.js工具，这些工具可以帮助你维护和管理你的Vue应用程序。你从命令行和新的Vue-UI创建了Vue.js项目，安装了新的依赖项，并从这两个界面中提供了服务和构建了你的项目。你可以一起使用这些工具或单独使用——
    whichever you feel more comfortable with。Vue.js DevTools拥有许多提高生活质量的特性，这些特性将帮助你通过本书的高级部分，并在你开始在组件和路由页面之间传递props时提供帮助。
- en: In the next chapter, you will learn about more advanced Vue component concepts
    such as passing and validating information between different components by using
    data props and template slots.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习更多高级的Vue组件概念，例如通过使用数据props和模板插槽在不同组件之间传递和验证信息。
