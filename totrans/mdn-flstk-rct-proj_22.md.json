["```js\n    $ cp -R ch16 ch17\n    ```", "```js\n    $ npm install server-only@0.0.1\n    ```", "```js\n    $ npm install mongoose@8.0.2\n    ```", "```js\n    import 'server-only'\n    ```", "```js\n    import mongoose from 'mongoose'\n    ```", "```js\n    export async function initDatabase() {\n      const connection = await mongoose.connect(process.env.DATABASE_URL)\n      return connection\n    }\n    ```", "```js\n    DATABASE_URL=mongodb://localhost:27017/blog\n    ```", "```js\n    import 'server-only'\n    import mongoose, { Schema } from 'mongoose'\n    ```", "```js\n    const userSchema = new Schema({\n      username: { type: String, required: true, unique: true },\n      password: { type: String, required: true },\n    })\n    ```", "```js\n    export const User = mongoose.models.user ?? mongoose.model('user', userSchema)\n    ```", "```js\n    import 'server-only'\n    import mongoose, { Schema } from 'mongoose'\n    ```", "```js\n    const postSchema = new Schema(\n      {\n        title: { type: String, required: true },\n        author: { type: Schema.Types.ObjectId, ref: 'user', required: true },\n        contents: String,\n      },\n      { timestamps: true },\n    )\n    ```", "```js\n    export const Post = mongoose.models.post ?? mongoose.model('post', postSchema)\n    ```", "```js\n    import 'server-only'\n    export * from './user'\n    export * from './post'\n    ```", "```js\n    import 'server-only'\n    import { Post } from '@/db/models'\n    ```", "```js\n    export async function createPost(userId, { title, contents }) {\n      const post = new Post({ author: userId, title, contents })\n      return await post.save()\n    }\n    ```", "```js\n    export async function listAllPosts() {\n      return await Post.find({})\n        .sort({ createdAt: 'descending' })\n    ```", "```js\n        .populate('author', 'username')\n    ```", "```js\n        .lean()\n    }\n    ```", "```js\n    export async function getPostById(postId) {\n      return await Post.findById(postId)\n        .populate('author', 'username')\n        .lean()\n    }\n    ```", "```js\n    $ npm install bcrypt@5.1.1 jsonwebtoken@9.0.2\n    ```", "```js\n    import 'server-only'\n    import bcrypt from 'bcrypt'\n    import jwt from 'jsonwebtoken'\n    import { User } from '@/db/models'\n    ```", "```js\n    export async function createUser({ username, password }) {\n      const hashedPassword = await bcrypt.hash(password, 10)\n      const user = new User({ username, password: hashedPassword })\n      return await user.save()\n    }\n    ```", "```js\n    export async function loginUser({ username, password }) {\n      const user = await User.findOne({ username })\n      if (!user) {\n        throw new Error('invalid username!')\n      }\n    ```", "```js\n      const isPasswordCorrect = await bcrypt.compare(password, user.password)\n      if (!isPasswordCorrect) {\n        throw new Error('invalid password!')\n      }\n    ```", "```js\n      const token = jwt.sign({ sub: user._id }, process.env.JWT_SECRET, {\n        expiresIn: '24h',\n      })\n      return token\n    }\n    ```", "```js\n    export async function getUserInfoById(userId) {\n      const user = await User.findById(userId)\n      if (!user) throw new Error('user not found!')\n      return { username: user.username }\n    }\n    ```", "```js\n    export function getUserIdByToken(token) {\n      if (!token) return null\n      const decodedToken = jwt.verify(token, process.env.JWT_SECRET)\n      return decodedToken.sub\n    }\n    ```", "```js\n    export async function getUserInfoByToken(token) {\n      const userId = getUserIdByToken(token)\n      if (!userId) return null\n      const user = await getUserInfoById(userId)\n      return user\n    }\n    ```", "```js\n    JWT_SECRET=replace-with-random-secret\n    ```", "```js\n    import { initDatabase } from '@/db/init'\n    import { listAllPosts } from '@/data/posts'\n    ```", "```js\n    export default async function HomePage() {\n    ```", "```js\n      await initDatabase()\n      const posts = await listAllPosts()\n    ```", "```js\n    import { notFound } from 'next/navigation'\n    import { getPostById } from '@/data/posts'\n    import { initDatabase } from '@/db/init'\n    ```", "```js\n    export default async function ViewPostPage({ params }) {\n    ```", "```js\n      await initDatabase()\n      const post = await getPostById(params.id)\n      if (!post) notFound()\n    ```", "```js\n    export default function ViewPostError() {\n      return <strong>Post not found!</strong>\n    }\n    ```", "```js\n    'use client'\n    export default function ViewPostError() {\n      return <strong>Error while loading the post!</strong>\n    }\n    ```", "```js\n    Post.propTypes = {\n      _id: PropTypes.object.isRequired,\n    ```", "```js\n    $ npm run dev\n    ```", "```js\nconst [state, formAction] = useFormState(fn, initialState)\n```", "```js\nfunction exampleServerAction(previousState, formData) {\n  \"use server\"\n  // …do something…\n}\n```", "```js\n    'use client'\n    import { useFormState } from 'react-dom'\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function Signup({ signupAction }) {\n    ```", "```js\n      const [state, formAction] = useFormState(signupAction, {})\n    ```", "```js\n      return (\n        <form await formAction() inside an onClick handler function.\n    ```", "```js\n          <input type='submit' value='Sign Up' />\n          {state.error ? <strong> Error signing up: {state.error}</strong> : null}\n        </form>\n      )\n    }\n    ```", "```js\n    Signup.propTypes = {\n      signupAction: PropTypes.func.isRequired,\n    }\n    ```", "```js\n    import { redirect } from 'next/navigation'\n    import { createUser } from '@/data/users'\n    import { initDatabase } from '@/db/init'\n    import { Signup } from '@/components/Signup'\n    ```", "```js\n    async function signupAction(prevState, formData) {\n    ```", "```js\n      'use server'\n    ```", "```js\n      try {\n        await initDatabase()\n        await createUser({\n          username: formData.get('username'),\n          password: formData.get('password'),\n        })\n    ```", "```js\n      } catch (err) {\n        return { error: err.message }\n      }\n    ```", "```js\n      redirect('/login')\n    }\n    ```", "```js\n    export default function SignupPage() {\n      return <Signup signupAction={signupAction} />\n    }\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    'use client'\n    ```", "```js\n    import { useFormState } from 'react-dom'\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function Login({ loginAction }) {\n      const [state, formAction] = useFormState(loginAction, {})\n    ```", "```js\n      return (\n        <form action={formAction}>\n    ```", "```js\n          <input type='submit' value='Log In' />\n          {state.error ? <strong> Error logging in: {state.error}</strong> : null}\n        </form>\n      )\n    }\n    ```", "```js\n    Login.propTypes = {\n      loginAction: PropTypes.func.isRequired,\n    }\n    ```", "```js\n    import { cookies } from 'next/headers'\n    import { redirect } from 'next/navigation'\n    import { loginUser } from '@/data/users'\n    import { initDatabase } from '@/db/init'\n    import { Login } from '@/components/Login'\n    ```", "```js\n    async function loginAction(prevState, formData) {\n      'use server'\n      let token\n      try {\n        await initDatabase()\n        token = await loginUser({\n          username: formData.get('username'),\n          password: formData.get('password'),\n        })\n    ```", "```js\n      } catch (err) {\n        return { error: err.message }\n      }\n    ```", "```js\n      cookies().set({\n        name: 'AUTH_TOKEN',\n        value: token,\n        path: '/',\n        maxAge: 60 * 60 * 24,\n        secure: true,\n        httpOnly: true,\n      })\n    ```", "```js\n      redirect('/')\n    }\n    ```", "```js\n    export default function LoginPage() {\n      return <Login loginAction={loginAction} />\n    }\n    ```", "```js\n    import { cookies } from 'next/headers'\n    import { getUserInfoByToken } from '@/data/users'\n    import { Navigation } from '@/components/Navigation'\n    ```", "```js\n    export default async function RootLayout({ children }) {\n    ```", "```js\n      const token = cookies().get('AUTH_TOKEN')\n      const user = await getUserInfoByToken(token?.value)\n    ```", "```js\n    async function logoutAction() {\n      'use server'\n    ```", "```js\n      cookies().delete('AUTH_TOKEN')\n    }\n    ```", "```js\n              <Navigation\n                username={user?.username}\n                logoutAction={logoutAction}\n              />\n    ```", "```js\n    export function UserBar({ username, logoutAction }) {\n      return (\n        <form action={logoutAction}>\n    ```", "```js\n    UserBar.propTypes = {\n      username: PropTypes.string.isRequired,\n      logoutAction: PropTypes.func.isRequired,\n    }\n    ```", "```js\n    export function Navigation({ username, logoutAction }) {\n      return (\n        <>\n          <Link href='/'>Home</Link>\n          {username ? (\n            <UserBar\n              username={username}\n              logoutAction={logoutAction}\n            />\n          ) : (\n            <LoginSignupLinks />\n          )}\n        </>\n      )\n    }\n    ```", "```js\n    Navigation.propTypes = {\n      username: PropTypes.string,\n      logoutAction: PropTypes.func.isRequired,\n    }\n    ```", "```js\n    import { cookies } from 'next/headers'\n    import { redirect } from 'next/navigation'\n    import { createPost } from '@/data/posts'\n    import { getUserIdByToken } from '@/data/users'\n    import { initDatabase } from '@/db/init'\n    import { CreatePost } from '@/components/CreatePost'\n    ```", "```js\n    export default function CreatePostPage() {\n      const token = cookies().get('AUTH_TOKEN')\n    ```", "```js\n      async function createPostAction(formData) {\n        'use server'\n    ```", "```js\n        const userId = getUserIdByToken(token?.value)\n        await initDatabase()\n        const post = await createPost(userId, {\n          title: formData.get('title'),\n          contents: formData.get('contents'),\n        })\n    ```", "```js\n        redirect(`/posts/${post._id}`)\n      }\n    ```", "```js\n      if (!token?.value) {\n        return <strong>You need to be logged in to create posts!</strong>\n      }\n    ```", "```js\n      return <CreatePost createPostAction={createPostAction} />\n    }\n    ```", "```js\n    import PropTypes from 'prop-types'\n    ```", "```js\n    export function CreatePost({ createPostAction }) {\n      return (\n        <form action={createPostAction}>\n    ```", "```js\n    CreatePost.propTypes = {\n      createPostAction: PropTypes.func.isRequired,\n    }\n    ```"]