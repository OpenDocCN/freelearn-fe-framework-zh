- en: Writing Modules, Directives, and Pipes with TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TypeScript编写模块、指令和管道
- en: Modularity is essential for building large software systems, and Angular projects
    are not an exception to this. When our app starts growing, managing its different
    members in one entry module starts becoming really difficult and confusing. It
    becomes more challenging when you have a lot of services, directives, and pipes.
    Speaking of directives and pipes, we will take some time to discuss their use
    cases and examples in this chapter, while taking a journey in managing our application
    better with modules.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化对于构建大型软件系统至关重要，Angular项目也不例外。当我们的应用开始增长时，在一个入口模块中管理其不同成员变得非常困难和混乱。当你有很多服务、指令和管道时，情况变得更具挑战性。说到指令和管道，我们将花一些时间在本章讨论它们的用例和示例，同时在模块中更好地管理我们的应用程序。
- en: Directives
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指令
- en: DOM manipulation is not always best handled in components. Components should
    be as lean as possible; this way, things are kept simple and your code can easily
    be moved around and reused. So, where should we handle DOM manipulation then?
    The answer is directives. Just like you should take data manipulation tasks to
    services, best practices suggest you take heavy DOM manipulations to directives.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: DOM操作并不总是最好在组件中处理。组件应该尽可能精简；这样，事情就会变得简单，你的代码可以轻松地移动和重用。那么，我们应该在哪里处理DOM操作呢？答案是指令。就像你应该将数据操作任务交给服务一样，最佳实践建议你将繁重的DOM操作交给指令。
- en: 'There are three types of directives in Angular:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Angular中有三种指令类型：
- en: Components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: Attribute directives
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性指令
- en: Structural directives
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构指令
- en: Yes, components! Components are qualified directives. They are directives with
    a direct access to the template being manipulated. We have already seen components
    enough in this book; let's focus on the attribute and structural directives.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，组件！组件是合格的指令。它们是具有直接访问被操作的模板的指令。我们在本书中已经看到了足够多的组件；让我们专注于属性和结构指令。
- en: Attribute directives
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性指令
- en: This category of directives is known for adding behavioral features to the DOM
    but not removing or adding any DOM content. Things such as changing appearance,
    showing or hiding elements, manipulating elements' attributes, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这类指令以为DOM添加行为特性而闻名，但不会删除或添加任何DOM内容。诸如改变外观、显示或隐藏元素、操作元素属性等等。
- en: To better understand attribute directives, let's build some UI directives that
    are applied to component templates. These directives will change the behavior
    of the DOM when they are applied.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解属性指令，让我们构建一些应用于组件模板的UI指令。这些指令将在应用时改变DOM的行为。
- en: 'Create a new directive in a fresh project with the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新项目中使用以下命令创建一个新的指令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create an empty directive in the app folder with the following content:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在应用程序文件夹中创建一个空指令，内容如下：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Directive` decorator is first imported from the`@angular/core` module.
    The decorator is used on any class that is expected to act as a directive. Just
    like decorators on components, the directive decorator takes an object with a
    selector property. When this selector is applied to the DOM, the behavior of the
    directive is exhibited.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Directive`装饰器首先从`@angular/core`模块中导入。该装饰器用于任何预期充当指令的类。就像组件上的装饰器一样，指令装饰器接受一个具有选择器属性的对象。当这个选择器应用到DOM时，指令的行为就会展现出来。'
- en: 'The behavior we are trying to achieve in this example entails styling a completely
    unstyled button with just a single attribute. Let''s assume that we have the following
    button in our app component:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们试图实现的行为是用一个属性来为一个完全未经样式处理的按钮添加样式。假设我们在我们的应用组件中有以下按钮：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is just a simple boring button on the screen:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是屏幕上的一个简单无聊的按钮：
- en: '![](assets/4c27b9ac-8bbe-47d1-8d4c-fc4668eefec0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c27b9ac-8bbe-47d1-8d4c-fc4668eefec0.png)'
- en: 'To use the attribute directive we just created, add it as a *value-less* attribute
    to the button:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我们刚刚创建的属性指令，将其作为*无值*属性添加到按钮中：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, find a way to access the button element from the `directive` class. We
    need this access to be able to apply styles to the button, right from the class.
    Thanks to the `ElementRef` class, which, when injected to the directive via the
    constructor, gives us access to the native element, which is where the button
    element can be accessed:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，找到一种方法来从`directive`类中访问按钮元素。我们需要这种访问权限来能够直接从类中应用样式到按钮上。感谢`ElementRef`类，通过构造函数注入到指令中，它给了我们访问原生元素的权限，这就是按钮元素可以被访问的地方：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is injected and resolved into the `el` property. We can access the button
    element from the property:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它被注入并解析为`el`属性。我们可以从该属性访问按钮元素：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `nativeElement` property gives you access to the element that the attribute
    directive was applied to. You can then treat the value like a DOM API, which is
    why we can access the `style`and `backgroundColor` properties:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`nativeElement`属性让你可以访问应用属性指令的元素。然后你可以像处理DOM API一样处理这个值，这就是为什么我们可以访问`style`和`backgroundColor`属性：'
- en: '![](assets/7cd2e5f0-0729-4fff-968a-b6968f9e5506.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7cd2e5f0-0729-4fff-968a-b6968f9e5506.png)'
- en: 'You can see that the pink background was applied effectively. Let''s make the
    button more interesting with more styles, right from the directive:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到粉色背景已经有效应用。让我们通过指令为按钮添加更多样式，使其更有趣：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Instead of setting the values using several dots, we just use the `Object.assign`
    method to reduce the amount of code we have to write. Now, we have a prettier
    button in the browser, completely styled with a directive:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再使用多个点来设置值，而是使用`Object.assign`方法来减少我们需要编写的代码量。现在，我们在浏览器中有一个更漂亮的按钮，完全由指令进行样式设置：
- en: '![](assets/fef31767-c6f0-4eb3-ae1b-ab8a2f6942bd.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fef31767-c6f0-4eb3-ae1b-ab8a2f6942bd.png)'
- en: Handling events in directives
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在指令中处理事件
- en: 'Directives are so flexible that they allow you to apply different states, based
    on events triggered by the user. For instance, we can add a hover behavior to
    the button where a different color (say black) is applied to the button when the
    mouse cursor moves over the button:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 指令非常灵活，可以根据用户触发的事件应用不同的状态。例如，我们可以为按钮添加一个悬停行为，当鼠标光标移动到按钮上时，按钮会应用不同的颜色（比如黑色）：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We introduced a few members to this file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个文件中引入了一些成员：
- en: We import `HostListener`, a decorator that extends a method in the class. It
    turns the method into an event listener attached to the native element. The decorator
    takes an argument of the event type.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们导入了`HostListener`，这是一个装饰器，可以扩展类中的方法。它将方法转换为附加到原生元素的事件监听器。装饰器接受事件类型的参数。
- en: We define two methods on `onMouseEnter` and `onMouseLeave`and then decorate
    the methods with `HostListener`. These methods change the background colors of
    the button when a hover occurs.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在`onMouseEnter`和`onMouseLeave`上定义了两种方法，然后用`HostListener`装饰这些方法。这些方法在悬停发生时改变按钮的背景颜色。
- en: 'Here is what the behavior looks like when we hover the mouse over the button:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将鼠标悬停在按钮上时，行为看起来像这样：
- en: '![](assets/8495e131-6c3b-4e47-8bf6-619d6415048c.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8495e131-6c3b-4e47-8bf6-619d6415048c.png)'
- en: Dynamic attribute directives
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态属性指令
- en: What if we, the authors of this directive, are the final consumers? What if
    another developer is reusing the directive as an API? How do we make it flexible
    enough with dynamic values? When you ask yourself these questions while writing
    directives, then it's time to make it dynamic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们，作为这个指令的作者，是最终的使用者呢？如果另一个开发人员将指令作为API进行重用呢？我们如何使它具有足够的灵活性来处理动态值？当你在编写指令时问自己这些问题时，就是使其动态化的时候了。
- en: 'All this while, we have been using the directive without any value. We can
    actually use attribute values to receive inputs into the directive:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一直以来，我们一直在使用指令而没有任何值。实际上，我们可以使用属性值将输入传递到指令中：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We added a new attribute, `bgColor`, which is not a directive but an input
    property. The property is used to send dynamic values to the directive, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个新属性`bgColor`，它不是一个指令，而是一个输入属性。该属性用于将动态值发送到指令，如下所示：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here are the changes we introduced:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们引入的更改：
- en: Two `Input` decorated properties--`bgColor` and `bgHoverColor`--are introduced
    to serve as the flow of dynamic values from the template to the directive.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入了两个`Input`装饰的属性--`bgColor`和`bgHoverColor`--用作从模板到指令的动态值流。
- en: The setup of this directive is moved from the constructor to the `ngOnInit`
    method. This is because the input decorator is set by Angular's change detection,
    which doesn't happen in a constructor, thereby making `bgColor` and `bgHoverColor`
    undefined when we try to access them from the constructor.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该指令的设置从构造函数移至`ngOnInit`方法。这是因为Angular的变更检测设置了输入装饰器，构造函数中不会发生这种情况，因此当我们尝试从构造函数中访问它们时，`bgColor`和`bgHoverColor`是未定义的。
- en: When setting up the styles, rather than hardcoding the value of `backgroundColor`,
    we use the value received via `bgColor`. We also have a fallback value just in
    case the developer forgets to include the attribute.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置样式时，我们不是硬编码`backgroundColor`的值，而是使用通过`bgColor`接收到的值。我们还设置了一个备用值，以防开发人员忘记包含属性。
- en: The same thing happens to the mouse-enter and mouse-leave events.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标进入和鼠标离开事件也会发生同样的事情。
- en: 'Now, the button visuals are affected by dynamic values:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按钮的外观受到动态值的影响：
- en: '![](assets/95a00373-e877-40f1-8669-cb1b1bd41e35.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/95a00373-e877-40f1-8669-cb1b1bd41e35.png)'
- en: Structural directives
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构指令
- en: Structural directives have a lot in common with attribute directives, in terms
    of how they are created, but they are very different in how they are expected
    to behave. A structural directive, unlike an attribute directive, is expected
    to create or remove a DOM element. This is different from using a CSS display
    property to show or hide an element. In this case, the element is still in the
    DOM tree but is not visible to the end user when hidden.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 结构指令与属性指令有很多共同之处，但它们在预期行为上有很大不同。与属性指令不同，结构指令预期创建或删除DOM元素。这与使用CSS显示属性来显示或隐藏元素不同。在这种情况下，元素仍然在DOM树中，但在隐藏时对最终用户不可见。
- en: A good example is `*ngIf`. When an element is removed from the DOM using an
    `*ngIf` structural directive, the directive both disappears from the screen and
    gets deleted from the DOM tree.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是`*ngIf`。当使用`*ngIf`结构指令从DOM中移除元素时，该指令会从屏幕上消失，并从DOM树中删除。
- en: Why the difference?
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么会有这样的差异？
- en: The way you control the visibility of DOM elements could have a great impact
    on the performance of your applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您控制DOM元素的可见性的方式可能会对应用程序的性能产生重大影响。
- en: Take for instance, you have an accordion that is expected to be clicked by the
    user to show more information. The user might decide to hide the accordion's content
    after viewing the content and, at a later time, come back to reopen it for references.
    It starts becoming obvious that the accordion's content has the tendency of being
    displayed and hidden at any time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，您可能有一个手风琴，用户预期点击以显示更多信息。用户在查看内容后可能决定隐藏手风琴的内容，并在以后的某个时间再次打开以供参考。很明显，手风琴的内容有可能随时显示和隐藏。
- en: When this is the case, it is best that we use an attribute directive that doesn't
    hide/remove the accordion content but rather just hides it. This makes it really
    fast to show and hide again when needed. Using a structural directive such as `*ngIf`
    keeps creating and destroying a part of the DOM tree, which can be very expensive
    if the DOM content being controlled is huge.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最好使用一个不隐藏/移除手风琴内容，而只是隐藏它的属性指令。这样在需要时显示和隐藏会非常快速。使用`*ngIf`这样的结构指令会不断地创建和销毁DOM树的一部分，如果被控制的DOM内容很庞大，这样做会非常昂贵。
- en: On the other hand, when you have some content you're sure the user will view
    only once or a maximum of two times, it is better to make use of a structural
    directive such as `*ngIf`. This way, your DOM is not littered with lots of unused
    HTML contents.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当你有一些内容，你确信用户只会查看一次或最多两次时，最好使用`*ngIf`这样的结构指令。这样，你的DOM就不会被大量未使用的HTML内容所淹没。
- en: The deal with asterisks
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星号的作用
- en: 'The asterisks that precede all the structural directives are very important.
    The `*ngIf` and `*ngFor`directives refuse to work when you remove the asterisks
    from them, implying that the asterisks are required. The question, therefore,
    is this: why do the asterisks have to be there?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 星号在所有结构指令之前都非常重要。如果你从它们中移除星号，`*ngIf`和`*ngFor`指令将拒绝工作，这意味着星号是必需的。因此，问题是：为什么星号必须在那里呢？
- en: 'They are syntactic sugar in Angular, meaning that they don''t have to be written
    this way. This is how they actually look:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在Angular中是语法糖，意味着不必以这种方式编写。这才是它们实际上的样子：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This template attribute is, in turn, translated into the following by Angular:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板属性转换成了Angular中的以下内容：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'See how `ngIf` has now become a normal Angular property but is injected into
    a template. When the value is `false`, the template is removed (not hidden) from
    the DOM tree. Writing such directives this way is just a lot of code to write,
    so Angular added the syntactic sugar to simplify how we write the `ngIf` directive:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 看看`ngIf`现在已经成为了一个普通的Angular属性，但被注入到了模板中。当值为`false`时，模板会从DOM树中被移除（而不是隐藏）。以这种方式编写这样的指令只是一大堆代码，所以Angular添加了语法糖来简化我们编写`ngIf`指令的方式：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating structural directives
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建结构指令
- en: 'We have already seen how to use structural directives from our previous examples.
    How do we create them? We create them in the same way we created the attribute
    directive, by running the following command in your terminal:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从之前的例子中看到了如何使用结构指令。我们如何创建它们呢？我们通过在终端中运行以下命令来创建它们：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Yes, we are naming the directive `when`. This directive does exactly what `*ngIf` does,
    so, hopefully, it will help you better understand the internals of the directive
    you've already used.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们将指令命名为`when`。这个指令确实做了`*ngIf`做的事情，所以希望这样做能帮助你更好地理解你已经使用过的指令的内部工作原理。
- en: 'Update the directive with the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容更新指令：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We introduced a few members you're not familiar with yet. `TemplateRef` is a
    reference to the `ng-template` template that we saw earlier, in which the DOM
    content we are controlling is contained. `ViewContainerRef` is a reference to
    the view itself.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了一些你还不熟悉的成员。`TemplateRef`是对我们之前看到的`ng-template`模板的引用，其中包含了我们正在控制的DOM内容。`ViewContainerRef`是对视图本身的引用。
- en: 'When using the `appWhen` directive in the view, it''s expected to take a condition
    such as`ngIf`. To receive such a condition, we need to create a decorated `Input` setter
    method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中使用`appWhen`指令时，它预期接受一个条件，比如`ngIf`。为了接收这样的条件，我们需要创建一个装饰过的`Input` setter方法：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The setter method in the directive checks whether the value resolves to `true`and
    then displays the content and creates the view if it's yet to be created. The
    reverse becomes the case when the value resolves to `false`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 指令中的setter方法检查值是否解析为“true”，然后显示内容并创建视图（如果尚未创建）。当值解析为“false”时，情况将发生变化。
- en: Let's test the directive by clicking the button we were to toiling within the
    attribute directives section. When the button is clicked, it toggles a property
    to `true` or `false`. This property is bound to the value of the directive we
    created.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过单击我们在属性指令部分劳累的按钮来测试指令。单击按钮时，它会将属性切换为“true”或“false”。此属性绑定到我们创建的指令的值。
- en: 'Update the app component class with the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容更新应用程序组件类：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `updateToggle`method is bound to the button in order to flip the value
    of `toggle` when clicked by the user. Here is what the app component HTML looks
    like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateToggle`方法绑定到按钮，以便在用户单击时翻转`toggle`的值。以下是应用程序组件HTML的样子：'
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once you click the button, it shows or hides the text by adding or removing
    it from the screen:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮后，它通过将文本添加或从屏幕中移除来显示或隐藏文本：
- en: '![](assets/3ba02da5-84b0-4609-ac7e-631d82b634c4.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ba02da5-84b0-4609-ac7e-631d82b634c4.png)'
- en: Pipes
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: 'Another interesting template feature that we have not discussed yet are pipes.
    Pipes allow you to format the template content in-place, right in the template.
    Instead of formatting content in the component, you could just write a pipe to
    do so for you right in the template. Here is a perfect example for a pipe:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有讨论的另一个有趣的模板功能是管道。管道允许您在模板中就地格式化模板内容。您可以在模板中编写管道来代替在组件中格式化内容。这是一个管道的完美示例：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Adding the `| percent` after a decimal figure changes the value to a percentage
    representation, as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在小数后添加`| percent`会将值更改为百分比表示，如下面的屏幕截图所示：
- en: '![](assets/8ccef630-dbac-4d8d-982b-1a1e67e5ad0e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8ccef630-dbac-4d8d-982b-1a1e67e5ad0e.png)'
- en: 'Here is another example with one of the case pipes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用一个案例管道的另一个示例：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `uppercase` pipe transforms a text string to uppercase. Here is the output
    of the preceding code sample:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`uppercase`管道将文本字符串转换为大写。以下是前面代码示例的输出：'
- en: '![](assets/1655112a-fdf8-404c-9a96-d6063cffaf9b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1655112a-fdf8-404c-9a96-d6063cffaf9b.png)'
- en: 'Some pipes take arguments, which help fine-tune the behavior of the pipe when
    applied to some content. An example of such pipes is the currency pipe, which
    takes an argument to define which currency a content will be formatted with:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '一些管道接受参数，这些参数有助于微调应用于某些内容的管道的行为。这样的管道的一个例子是货币管道，它接受一个参数来定义要使用哪种货币格式化内容： '
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following screenshot shows a nicely formatted value:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个格式良好的值：
- en: '![](assets/41576b5a-4a7a-48cc-92e8-ef5f2995ebb4.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/41576b5a-4a7a-48cc-92e8-ef5f2995ebb4.png)'
- en: 'The pipe takes two arguments separated by a colon (`:`). The first argument
    is the currency that we set to Euro. The second argument is a Boolean value that
    indicates the kind of currency symbol shown. Because the value is `true`, the
    Euro symbol is shown. Here is the output when the value is `false`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 管道采用由冒号（`:`）分隔的两个参数。第一个参数是我们设置为欧元的货币。第二个参数是一个布尔值，表示显示的货币符号的类型。因为值为“true”，所以显示欧元符号。当值为“false”时，输出如下：
- en: '![](assets/10f6ee42-d0fd-4ed7-a6cd-2d9f1dd96ae2.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/10f6ee42-d0fd-4ed7-a6cd-2d9f1dd96ae2.png)'
- en: Instead of using the symbol, it just precedes the value with the currency code
    (EUR).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用符号，而是用货币代码（EUR）在值之前。
- en: Creating pipes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管道
- en: 'We have seen what we can use pipes for and where we can use them. The next
    thing we need to understand is how to create our own custom pipes using TypeScript
    classes. First, run the following command to generate an empty pipe:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了管道的用途和使用场景。接下来，我们需要了解如何使用TypeScript类来创建自定义管道。首先，运行以下命令生成一个空管道：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, update the generated class file with the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下内容更新生成的类文件：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This example takes a string and returns the reversed version of the string.
    The `ReversePipe` class implements a `PipeTransform` interface, which defines
    a `transform` method that must be created with a certain signature, as seen previously.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例接受一个字符串并返回字符串的颠倒版本。`ReversePipe`类实现了`PipeTransform`接口，该接口定义了必须以特定签名创建的`transform`方法，如前所述。
- en: The class is decorated with a `Pipe` decorator, which takes a config object
    as an argument. The object must define a `name` property, which serves as the
    identifier for the pipe when applied to a template. In our case, the name of the
    pipe is `reverse`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 该类使用`Pipe`装饰器进行装饰，该装饰器以配置对象作为参数。该对象必须定义一个`name`属性，该属性用作应用到模板时管道的标识符。在我们的情况下，管道的名称是`reverse`。
- en: 'You can now apply your custom pipe to the template:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以将自定义管道应用到模板中：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When you view the example, the text is reversed, so it now starts with p and
    ends with w:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看示例时，文本被颠倒，现在以p开头，以w结尾：
- en: '![](assets/70355d3c-9e20-42dd-815a-7797aafa89d7.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/70355d3c-9e20-42dd-815a-7797aafa89d7.png)'
- en: Passing arguments to pipes
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向管道传递参数
- en: We saw how to create pipes, but we also have it at the back of our minds that
    pipes take arguments. How do we add these arguments to our custom pipes?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何创建管道，但我们也知道管道需要参数。我们如何将这些参数添加到我们的自定义管道中？
- en: 'The generated pipe could already be giving you hints from the previous example
    because of the optional `args` parameter passed to the transform method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于传递给transform方法的可选`args`参数，生成的管道可能已经给出了上一个示例的提示：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Assuming that we want to define whether the reverse of the string is applied
    letter-to-letter or word-to-word, the best way to give the pipe user this control
    is through arguments. Here is an updated example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要定义字符串的颠倒是按字母还是按单词应用，向管道用户提供这种控制的最佳方式是通过参数。以下是更新后的示例：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When the argument supplied is `true`, we reverse the string by words, not letters.
    This is done by splitting the string in places where there are white spaces, not
    empty strings. When it's `false`, we split at empty strings, which reverses the
    string based on letters.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供的参数为`true`时，我们按单词而不是字母颠倒字符串。这是通过在存在空格的地方拆分字符串来实现的，而不是空字符串。当为`false`时，我们在空字符串处拆分，这样就可以根据字母颠倒字符串。
- en: 'We can now use the pipe while passing it an argument:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在传递参数的同时使用管道：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is the resulting output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的输出：
- en: '![](assets/bab69d1f-d381-4538-827e-1b9d38be6c4d.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bab69d1f-d381-4538-827e-1b9d38be6c4d.png)'
- en: Modules
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: 'We mentioned modules at the beginning of this article and how they help us
    organize our project. With that in mind, take a look at this app module:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本文开头提到了模块以及它们如何帮助我们组织项目。考虑到这一点，看一下这个应用模块：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here is a module from the directive:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自指令的一个模块：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you paid so much attention to details, you may have noticed that we never
    added `UiButtonDirective` or `WhenDirective` in the directive. Neither did we
    add `ReversePipe` in the pipe example. These additions are automated for all the
    members when your run the `generate` command, except for services.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对细节如此关注，您可能已经注意到我们在指令中从未添加`UiButtonDirective`或`WhenDirective`。在管道示例中也没有添加`ReversePipe`。这些添加是在运行`generate`命令时为所有成员自动完成的，除了服务。
- en: For all the members you create, that is, components, directives, pipes, and
    services, you need to include them where they belong in a module.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您创建的所有成员，即组件、指令、管道和服务，您需要将它们包含在其所属的模块中。
- en: A module (usually referred to as `NgModule`) is a class that is decorated with
    the `NgModule` decorator. This decorator takes a config object that tells Angular
    about the members created in the app and where they belong to.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 模块（通常称为 `NgModule`）是一个用 `NgModule` 装饰器装饰的类。这个装饰器接受一个配置对象，告诉 Angular 应用中创建的成员以及它们所属的位置。
- en: 'Here are the different properties:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不同的属性：
- en: '`declarations`: Components, directives, and pipes must be defined in the `declarations`
    array for them to be exposed to the app. Failure to do so will log errors to your
    console, telling you that the omitted member is not recognized.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`declarations`：组件、指令和管道必须在 `declarations` 数组中定义，以便向应用程序公开它们。如果未这样做，将在控制台中记录错误，告诉您省略的成员未被识别。'
- en: '`imports`: The app module is not the only module that exists. You can have
    smaller and simpler modules that group related task members together. In this
    case, you still need to import the smaller modules to the app module. The `imports`
    array is where you do that. These smaller modules are usually referred to as feature
    modules. A feature module can also be imported to another feature module.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imports`：应用程序模块并不是唯一存在的模块。您可以拥有更小、更简单的模块，将相关任务成员组合在一起。在这种情况下，您仍然需要将较小的模块导入到应用程序模块中。这就是
    `imports` 数组的作用。这些较小的模块通常被称为特性模块。特性模块也可以被导入到另一个特性模块中。'
- en: '`providers`: If you have services that abstract specific tasks and need to
    be injected via dependency injection into the app, you need to specify such services
    in the `providers` array.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providers`：如果您有抽象特定任务并需要通过依赖注入注入到应用程序中的服务，您需要在 `providers` 数组中指定这些服务。'
- en: '`bootstrap`: The `bootstrap` array is only declared in the entry module, which
    is usually the app module. This array defines which component should be launched
    first or which component serves as the entry point of your app. The value is always
    `AppComponent` because that is the entry point.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap`：`bootstrap` 数组只在入口模块中声明，通常是应用程序模块。这个数组定义了应该首先启动哪个组件，或者哪个组件作为应用程序的入口点。该值始终为
    `AppComponent`，因为这是入口点。'
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You learned a lot of concepts, ranging from directives and pipes to modules.
    You learned the different types of directives (attribute and structural) and how
    to create each of them. We also discussed how arguments are passed to pipes while
    creating them. In the next chapter, we will talk about routing in Angular applications
    and how TypeScript plays a significant role.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您学到了许多概念，从指令和管道到模块。您学到了不同类型的指令（属性和结构性），以及如何创建每种指令。我们还讨论了在创建管道时如何传递参数。在下一章中，我们将讨论
    Angular 应用程序中的路由以及 TypeScript 扮演的重要角色。
