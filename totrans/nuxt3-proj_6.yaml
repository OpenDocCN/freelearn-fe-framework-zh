- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Enhancing a Recipe-Sharing Site While Optimizing SEO Using Nuxt 3
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在使用 Nuxt 3 优化 SEO 的同时增强食谱分享网站
- en: In this chapter, we’ll enrich a recipe-sharing site with Nuxt 3, focusing on
    SEO (Search Engine Optimization) for better online visibility. We’ll start with
    Nuxt SEO, a powerful collection of handcrafted Nuxt modules designed to enhance
    a website’s appeal to both search engines and audiences. It simplifies complex
    SEO tasks, ensuring our recipe-sharing site ranks high in search results.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Nuxt 3 丰富食谱分享网站，重点关注 SEO（搜索引擎优化）以获得更好的在线可见性。我们将从 Nuxt SEO 开始，这是一个强大的手工制作的
    Nuxt 模块集合，旨在增强网站对搜索引擎和受众的吸引力。它简化了复杂的 SEO 任务，确保我们的食谱分享网站在搜索结果中排名靠前。
- en: Then, we’ll learn about metadata, such as **Open Graph** (**OG**) tags, and
    how to customize them for each page. We will also examine the crucial role of
    schema markup. This structured data approach helps clarify our content for search
    engines, aiding in accurate and enhanced search result presentation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将了解元数据，如 **Open Graph** (**OG**) 标签，以及如何为每个页面自定义它们。我们还将检查 schema 标记的关键作用。这种结构化数据方法有助于为搜索引擎澄清我们的内容，有助于准确和增强的搜索结果展示。
- en: We’ll also introduce a unique feature – creating a custom `og:image` for each
    recipe using a Nuxt component, making each shared recipe visually distinctive.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍一个独特功能——使用 Nuxt 组件为每个食谱创建自定义的 `og:image`，使每个分享的食谱在视觉上具有独特性。
- en: Additionally, we’ll cover dynamically generating XML site maps, which guide
    search engines efficiently through our site’s content.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将涵盖动态生成 XML 网站地图，这些地图可以引导搜索引擎高效地遍历我们网站的内容。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Defining metadata for each page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每一页定义元数据
- en: Implementing structured data for improved search engine rankings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施结构化数据以改善搜索引擎排名
- en: Optimizing recipe images to load pages faster
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化食谱图片以加快页面加载速度
- en: Creating a custom `og:image` for the recipe page
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为食谱页面创建自定义的 `og:image`
- en: Generating dynamic site maps for the recipe-sharing site
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为食谱分享网站生成动态网站地图
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter06](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter06).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在 [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter06](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter06)
    找到。
- en: The CiA video for this chapter can be found on [https://packt.link/YQ8As](https://packt.link/YQ8As)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CiA 视频可在 [https://packt.link/YQ8As](https://packt.link/YQ8As) 找到
- en: Essential background – Understanding Search Engine Optimization (SEO)
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景知识——理解搜索引擎优化（SEO）
- en: 'As we prepare to start enhancing our recipe-sharing site with SEO using Nuxt
    3, it’s crucial to first get acquainted with the key concepts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们准备开始使用 Nuxt 3 增强我们的食谱分享网站并优化 SEO 时，首先了解关键概念至关重要：
- en: '**SEO basics**: **SEO** involves techniques to improve a website’s visibility
    on search engines. It’s about making your site easily understandable to search
    engines, which helps in making it rank higher in search results.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SEO 基础**：**SEO** 涉及提高网站在搜索引擎中可见性的技术。它关乎使你的网站易于搜索引擎理解，这有助于使其在搜索结果中排名更高。'
- en: '**The OG protocol**: This protocol enhances the way web content is represented
    on social media platforms. By using specific tags, you can control how your content
    appears when shared.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原始协议**：此协议增强了社交媒体平台上网络内容的表现方式。通过使用特定的标签，您可以控制内容分享时的显示方式。'
- en: '**Schema markup**: Schema markup is like a detailed label for your website’s
    content, helping search engines understand what your site is about. For instance,
    using recipe schema on a recipe-sharing site can dramatically improve its appearance
    in search results, displaying rich snippets such as ingredients and cooking time
    directly in the search listings.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Schema 标记**：Schema 标记就像是你网站内容的详细标签，帮助搜索引擎理解你的网站是关于什么的。例如，在食谱分享网站上使用食谱 schema
    可以显著改善其在搜索结果中的外观，直接在搜索列表中显示如成分和烹饪时间等丰富片段。'
- en: '**Site map generation**: A site map is a roadmap of your website that guides
    search engines to all your important pages. In just a couple of lines of code,
    Nuxt 3 can generate dynamic site maps.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站地图生成**：网站地图是您网站的路线图，引导搜索引擎到达所有重要页面。只需几行代码，Nuxt 3 就可以生成动态网站地图。'
- en: This background prepares you to effectively utilize Nuxt 3’s SEO capabilities
    on our recipe-sharing website. Armed with this knowledge, we’re ready to use Nuxt
    3’s SEO tools effectively. Let’s proceed to the practical application and exploration
    of our repository.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个背景知识将使你能够有效地利用我们的食谱分享网站上的 Nuxt 3 SEO 功能。有了这些知识，我们就可以有效地使用 Nuxt 3 的 SEO 工具了。让我们继续进行我们仓库的实际应用和探索。
- en: Exploring the repository
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索仓库
- en: Let’s take a moment to familiarize ourselves with the `chapter06/starter` folder
    in the root folder of our repository. This folder is designed to give you a head
    start, containing pre-defined components, basic page structures, data, and TypeScript
    interfaces. These elements are crafted to provide a solid foundation for our recipe-sharing
    site, allowing us to focus primarily on enhancing its SEO.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间熟悉一下我们仓库根目录下的 `chapter06/starter` 文件夹。这个文件夹旨在为你提供一个良好的起点，其中包含预定义的组件、基本的页面结构、数据和
    TypeScript 接口。这些元素旨在为我们食谱分享网站提供一个坚实的基础，使我们能够主要关注增强其 SEO。
- en: Note that we won’t delve into every detail of these resources here, as our primary
    focus is to learn about the SEO concepts and practices needed to optimize our
    recipe-sharing site effectively.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不会深入探讨这些资源的每个细节，因为我们的主要重点是了解优化我们食谱分享网站所需的 SEO 概念和实践。
- en: Defining metadata for each page
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个页面定义元数据
- en: Let’s start by setting up our new website as we’ve done in previous chapters.
    Add the Tailwind CSS and Google Fonts modules to the website to enhance styling.
    Once you’ve completed these steps, run the website and take a moment to ensure
    that everything works fine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们像前几章所做的那样设置我们的新网站。将 Tailwind CSS 和 Google Fonts 模块添加到网站中以增强样式。完成这些步骤后，运行网站并花点时间确保一切正常工作。
- en: Setting up the project structure
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置项目结构
- en: 'To set up the project, we’ll be using predefined files and components from
    the repository `starter` folder. Clone the repository, and then copy the entire
    contents of the `starter` folder into our new project’s root directory. If there
    are any existing files in your project that match the names of those in the `starter`
    folder, overwrite them with the `starter` files. Here’s a breakdown of the starter
    content:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置项目，我们将使用来自仓库 `starter` 文件夹的预定义文件和组件。克隆仓库，然后将 `starter` 文件夹的整个内容复制到我们新项目的根目录中。如果你的项目中存在与
    `starter` 文件夹中文件名称匹配的现有文件，请用 `starter` 文件覆盖它们。以下是启动内容的分解：
- en: '`pages/index.vue`: This file sets up the homepage layout, including sections
    such as hero images and featured recipes'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pages/index.vue`：此文件设置主页布局，包括英雄图片和特色食谱等部分'
- en: '`components/RecipeCard.vue` and `components/RecipeInfo.vue`: These Vue components
    are used to display recipes and their details as cards on the home page'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`components/RecipeCard.vue` 和 `components/RecipeInfo.vue`：这些 Vue 组件用于在主页上以卡片的形式显示食谱及其详情'
- en: '`data/recipes.ts`: Contains the data structure for the recipes, which will
    be used to populate the content on your site'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data/recipes.ts`：包含食谱的数据结构，将用于填充你网站上的内容'
- en: '`types/index.ts`: Provides TypeScript definitions for the data structures used
    in the project'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`types/index.ts`：为项目中使用的结构提供 TypeScript 定义'
- en: '`pages/recipe/[slug].vue`: A dynamic route that creates individual pages for
    each recipe, based on its slug'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pages/recipe/[slug].vue`：一个动态路由，根据其 slug 为每个食谱创建单独的页面'
- en: By copying the `starter` folder’s contents into your project, you can quickly
    set up the foundational elements of your recipe-sharing site and focus more on
    the SEO aspects, as outlined in this chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `starter` 文件夹的内容复制到你的项目中，你可以快速设置食谱分享网站的基础元素，并更多地关注本章概述的 SEO 方面。
- en: 'Start your project to test the progress. You should see the home page of your
    recipe-sharing site, similar to the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开始你的项目以测试进度。你应该能看到你食谱分享网站的主页，类似于以下截图：
- en: '![Figure 6.1: The home page](img/B19760_06_1.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1：主页](img/B19760_06_1.jpg)'
- en: 'Figure 6.1: The home page'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：主页
- en: Click on any recipe listed on the home page. This should take you to the detailed
    page of the selected recipe, thanks to the dynamic routing implemented in Nuxt.
    The detailed page will show more information about the recipe, as defined in `pages/recipe/[slug].vue`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击主页上列出的任何食谱。由于 Nuxt 实现了动态路由，这应该会带你到所选食谱的详细页面。详细页面将显示有关食谱的更多信息，如 `pages/recipe/[slug].vue`
    中定义的那样。
- en: '![Figure 6.2: The recipe details page](img/B19760_06_2.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2：食谱详情页面](img/B19760_06_2.jpg)'
- en: 'Figure 6.2: The recipe details page'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2：食谱详情页面
- en: Having tested our project and seen our home page and recipe details come to
    life, let’s turn our attention to SEO.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试了我们的项目并看到我们的主页和食谱详情页面变得生动之后，让我们将注意力转向 SEO。
- en: Setting up site configuration with nuxt SEO
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 nuxt SEO 设置网站配置
- en: Nuxt SEO is a powerful module that enhances your Nuxt site’s SEO capabilities.
    It simplifies the configuration process and ensures compatibility across various
    SEO modules. The module offers streamlined management of meta tags and best practices
    for metadata, including automatically generated canonical URLs and open-graph
    meta tags. This setup is essential for optimizing your site’s search engine presence
    and user engagement.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt SEO 是一个强大的模块，它增强了 Nuxt 网站的 SEO 功能。它简化了配置过程，并确保与各种 SEO 模块兼容。该模块提供了元标签的简化管理以及元数据的最佳实践，包括自动生成的规范
    URL 和开放图元标签。这种设置对于优化你的网站搜索引擎存在感和用户参与度至关重要。
- en: 'To add the module to your project run, run the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要将模块添加到你的项目中，请运行以下命令：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In your `nuxt.config.js`, add `@nuxtjs/seo` to the modules array, and then
    add a `site` property. Here’s an example configuration based on your setup:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `nuxt.config.js` 文件中，将 `@nuxtjs/seo` 添加到模块数组中，然后添加一个 `site` 属性。以下是基于你的配置的示例配置：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you open the browser Devtools, you’ll notice a couple of automatically generated
    tags in the document’s `head` element:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开浏览器开发者工具，你会注意到文档的 `head` 元素中自动生成的一些标签：
- en: '`UTF-8`: Ensures your website uses `UTF-8` character encoding for universal
    character representation.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UTF-8`：确保你的网站使用 `UTF-8` 字符编码以实现通用字符表示。'
- en: '`Viewport`: Sets up the viewport to control how your site displays on different
    devices, which is crucial for responsive design.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Viewport`：设置视口以控制你的网站在不同设备上的显示方式，这对于响应式设计至关重要。'
- en: '`Favicon`: Utilizes `favicon.ico` from your `public` folder to display your
    site’s icon in browser tabs.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Favicon`：使用 `public` 文件夹中的 `favicon.ico` 来在浏览器标签中显示你网站的图标。'
- en: '`Robots`: Instructs search engine robots on how to index your site, impacting
    SEO and site visibility.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Robots`：指导搜索引擎机器人如何索引你的网站，影响 SEO 和网站可见性。'
- en: '`og:type`: Defines the type of content for OG. The default value is website.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`og:type`：定义 OG 的内容类型。默认值是网站。'
- en: '`url canonical`: Matches the `site.url` configuration. Helps prevent duplicate
    content issues.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url canonical`：与 `site.url` 配置匹配。有助于防止重复内容问题。'
- en: '`og:canonical`: The OG version of the canonical URL, which is important for
    social media platforms.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`og:canonical`：规范 URL 的 OG 版本，这对于社交媒体平台非常重要。'
- en: '`title / og:title / og:site_name`: Sets the page title to `site.name` and is
    used in browser tabs, search results, and social media.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title / og:title / og:site_name`：将页面标题设置为 `site.name`，并在浏览器标签、搜索结果和社交媒体中使用。'
- en: '`meta description / og:description`: Provides a brief description of your site.
    Used in search engine listings and social shares.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta description / og:description`：提供你网站的简要描述。用于搜索引擎列表和社交媒体分享。'
- en: '`og:locale`: Sets the locale to `site.defaultLocale`, indicating the language
    and regional settings for OG.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`og:locale`：将区域设置为 `site.defaultLocale`，指示 OG 的语言和区域设置。'
- en: Imagine enhancing your website’s SEO with just four lines of code! Moreover,
    `nuxt/seo` features an enhanced page title functionality for internal pages. If
    you don’t set a title for a page, the module automatically generates one from
    the last slug segment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，只需用四行代码就能增强你网站的 SEO！此外，`nuxt/seo` 为内部页面提供了一个增强的页面标题功能。如果你没有为页面设置标题，该模块会自动从最后一个
    slug 段落生成一个。
- en: 'For example, if we open our steak recipe page in the browser, the page title
    automatically becomes the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们在我们的大蒜食谱页面在浏览器中打开，页面标题会自动变为以下内容：
- en: '![Figure 6.3: The recipe details page title](img/B19760_06_3.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3：食谱详情页面标题](img/B19760_06_3.jpg)'
- en: 'Figure 6.3: The recipe details page title'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3：食谱详情页面标题
- en: Note that the URL is http://localhost:3000/recipe/steak-with-vegetables and
    the title is a combination of the capitalized version of the last slug and the
    main site title. Isn’t this awesome? This feature is especially handy for managing
    numerous pages, ensuring that each one has a descriptive, SEO-friendly title without
    manual input for each page. Now, let’s shift our focus to overriding metadata
    in custom pages.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，URL 是 http://localhost:3000/recipe/steak-with-vegetables，标题是最后一个 slug 的首字母大写版本和主要网站标题的组合。这不是很酷吗？这个功能特别方便于管理众多页面，确保每个页面都有一个描述性、SEO
    友好的标题，而无需为每个页面手动输入。现在，让我们将注意力转向自定义页面中覆盖元数据。
- en: Overriding metadata
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖元数据
- en: If you inspect the meta description of the recipe details page, you’ll notice
    that it’s similar to the home page description. Ideally, we should tailor this
    to match the content of each specific page. To achieve this customization, we
    can utilize the `useSeoMeta` composable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查食谱详情页面的元描述，你会注意到它与主页描述相似。理想情况下，我们应该根据每个特定页面的内容来定制它。为了实现这种定制，我们可以利用`useSeoMeta`组合式。
- en: '`useSeoMeta` allows you to define your site’s SEO meta tags as a flat object
    with full TypeScript support. It helps you avoid common errors and ensures your
    meta tags are accurate and effective.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`useSeoMeta`允许你使用完整的TypeScript支持将网站的SEO元标签定义为扁平对象。它帮助你避免常见的错误，并确保你的元标签准确有效。'
- en: 'Now, let’s apply this to our `pages/recipe/[slug].vue` component:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这个方法应用到我们的`pages/recipe/[slug].vue`组件中：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After refreshing the page, the updated description should appear in the head
    tag, reflecting the specific content of each recipe page.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新页面后，更新的描述应该出现在head标签中，反映每个食谱页面的具体内容。
- en: '![Figure 6.4: Overriding the meta description](img/B19760_06_4.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4：覆盖元描述](img/B19760_06_4.jpg)'
- en: 'Figure 6.4: Overriding the meta description'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：覆盖元描述
- en: With our metadata now dynamically ready and customized for each recipe page,
    let’s progress to learn about the structured data from [Schema.org](http://Schema.org)
    in order to further boost our site’s search engine rankings.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在随着我们的元数据已经为每个食谱页面动态准备并定制，让我们继续学习如何从[Schema.org](http://Schema.org)获取结构化数据，以进一步提高我们网站的搜索引擎排名。
- en: Implementing structured data for improved search engine rankings
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施结构化数据以改善搜索引擎排名
- en: '[Schema.org](http://Schema.org) plays a pivotal role in enhancing your site’s
    visibility to search engines. It provides a shared vocabulary for structured data
    on the internet, allowing search engines to better understand and display your
    content. To check the pre-defined structured data for our website, click on the
    `nuxt-devtools` icon on the website, press *Ctrl* + *K*, or *Command* + *K*, and
    then type the word `Schema`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[Schema.org](http://Schema.org)在增强搜索引擎对网站可见性方面发挥着关键作用。它为互联网上的结构化数据提供了一个共享的词汇表，使搜索引擎能够更好地理解和显示你的内容。要检查我们网站的预定义结构化数据，请点击网站上的`nuxt-devtools`图标，按*Ctrl*
    + *K*或*Command* + *K*，然后输入单词`Schema`。'
- en: '![Figure 6.5: Nuxt Devtools](img/B19760_06_5.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5：Nuxt Devtools](img/B19760_06_5.jpg)'
- en: 'Figure 6.5: Nuxt Devtools'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：Nuxt Devtools
- en: 'It should reveal two key objects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该揭示两个关键对象：
- en: '**WebSite Object**: Represents the overall website, providing search engines
    with high-level information such as the site’s nature, its focus, and general
    details'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站对象**：代表整个网站，向搜索引擎提供有关网站性质、重点和一般详细信息的高级信息'
- en: '**WebPage Object**: Describes individual pages on your site, offering more
    specific data such as the content of a particular page'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网页对象**：描述你网站上的单个页面，提供更具体的数据，如特定页面的内容'
- en: These objects are automatically generated from the site configuration, leveraging
    the power of the `nuxt/seo` module. Taking our SEO strategy a step further, let’s
    learn how to create a recipe node.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对象自动从网站配置中生成，利用了`nuxt/seo`模块的力量。进一步推进我们的SEO策略，让我们学习如何创建一个食谱节点。
- en: Creating a recipe node
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个食谱节点
- en: In the context of SEO and structured data, a “node” refers to a set of information
    that represents a specific type of content on a web page, structured in a way
    that search engines can easily understand and index. In our case, a recipe node
    is a collection of structured data that specifically describes a recipe, including
    elements such as ingredients, cooking time, and nutritional information.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在SEO和结构化数据的情况下，“节点”指的是在网页上表示特定类型内容的一组信息，以搜索引擎可以轻松理解和索引的方式结构化。在我们的案例中，食谱节点是一组特定描述食谱的结构化数据，包括如成分、烹饪时间和营养信息等元素。
- en: 'If you open Google and search for the term `fettuccine alfredo recipe`, you’ll
    get a similar result to this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开谷歌并搜索“fettuccine alfredo食谱”这个术语，你会得到与这个类似的结果：
- en: '![Figure 6.6: The recipe node in the search result](img/B19760_06_6.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6：搜索结果中的食谱节点](img/B19760_06_6.jpg)'
- en: 'Figure 6.6: The recipe node in the search result'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：搜索结果中的食谱节点
- en: Note that the result includes a list of recipes with images, preparation times,
    ingredients, ratings, and so on. This card in this search result refers to a recipe
    node.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，结果包括带有图片、准备时间、成分、评分等的食谱列表。这个搜索结果中的卡片指的是一个食谱节点。
- en: The `nuxt/seo` module supports the creation of various types of nodes, such
    as `defineRecipe` for recipes. You can learn more about the recipe node at https://unhead.unjs.io/schema-org/schema/recipe.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the recipe node, navigate to `pages/recipe/[slug].vue` and add
    the following to the script:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is a breakdown of the preceding code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '`cookTime` and `prepTime`: Specify the cooking and preparation times, respectively.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nutrition`: Details the nutritional information of the recipe.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeYield`: Indicates the quantity or servings the recipe makes, such as
    “four servings” or “three cups.”'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeCategory` and `recipeCuisine`: Classify the recipe into a specific category
    and cuisine, respectively, helping users find relevant dishes based on their preferences.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aggregateRating`: Shows the average rating value of the recipe.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeIngredient`: An array of a string that lists the ingredients required.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recipeInstructions`: An array where each element is an object detailing a
    specific step of the recipe. Each object can contain the following:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The title or a brief description of the step (optional)'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`: The detailed instructions for that step'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image`: An optional image URL for the step, providing a visual guide'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After implementing the `defineRecipe` function in your `pages/recipe/[slug].vue`
    file, you can verify its effect by revisiting the Nuxt development tools:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Open your Nuxt project in the browser.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the `Schema` section within the Nuxt Devtools.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you should now see a new object labeled `Recipe`, representing the structured
    data for the specific recipe page you are viewing.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This `Recipe` object will contain all the structured data you’ve defined using
    `defineRecipe`, such as the recipe’s name, description, cooking and preparation
    times, ingredients, and instructions. This visualization in the Nuxt Devtools
    is a great way to confirm that your structured data is correctly implemented and
    recognized by Nuxt. You can also validate the object using the [shcema.org](http://shcema.org)
    validator: https://validator.schema.org/.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: With our recipe node successfully implemented and visible in the Nuxt Devtools,
    let’s now turn our attention to optimizing recipe images for faster page-loading
    speeds.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing recipe images to load pages faster
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To optimize recipe images and enhance page-loading speed, we will focus on the
    importance of image optimization in web performance. Large, unoptimized images
    can significantly slow down page load times, negatively impacting the user experience
    and SEO.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: To optimize images in Nuxt, we can use `nuxt-img`, a component from Nuxt Image,
    designed to optimize and transform images efficiently. It provides features such
    as on-the-fly image resizing, modern format conversion, and lazy loading, a placeholder
    while the image is loading, all crucial for speed and performance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing `nuxt-img` in our project is a key step toward optimizing our
    images. Let’s start by installing the package:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we add it to the `nuxt.config.ts` modules:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将它添加到 `nuxt.config.ts` 模块中：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we go to the `pages/recipe/[slug].vue` file. There, replace the standard
    `<img>` tags with the `<nuxt-img>` tag to take advantage of Nuxt Image’s features:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们转到 `pages/recipe/[slug].vue` 文件。在那里，将标准的 `<img>` 标签替换为 `<nuxt-img>` 标签，以利用Nuxt
    Image的功能：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before implementing this change, let’s assess the current image size. Open
    your browser’s developer tools, navigate to the image tag, and open the image
    source in a new tab:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施此更改之前，让我们评估当前图像的大小。打开浏览器开发者工具，导航到图像标签，并在新标签页中打开图像源：
- en: '![Figure 6.7: The image size before optimization](img/B19760_06_7.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7：优化前的图像大小](img/B19760_06_7.jpg)'
- en: 'Figure 6.7: The image size before optimization'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：优化前的图像大小
- en: 'If you download the image, you might find it’s sizeable, perhaps around 4 MB,
    which is quite large for a web image. Now, let’s add the `format="webp"` property
    to the `nuxt-img` component:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你下载图像，你可能会发现它的大小相当可观，可能大约有4 MB，这对于网络图像来说相当大。现在，让我们将 `format="webp"` 属性添加到
    `nuxt-img` 组件中：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After making this change, redo the test. You’ll likely notice that the image
    size is now significantly reduced, by around 400 KB, which means we’ve achieved
    a 90% reduction in size while maintaining quality.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行此更改后，重新进行测试。你可能会注意到图像大小现在显著减小，大约减少了400 KB，这意味着我们在保持质量的同时实现了90%的大小缩减。
- en: '![Figure 6.8: The Nuxt image after optimization](img/B19760_06_8.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8：优化后的Nuxt图像](img/B19760_06_8.jpg)'
- en: 'Figure 6.8: The Nuxt image after optimization'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：优化后的Nuxt图像
- en: Another important feature in the Nuxt image is `placeholder`. This significantly
    enhances the user experience by displaying a blurry placeholder image while the
    full-size image loads. This approach is much more visually appealing compared
    to the traditional method of loading an image line by line.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt图像中的另一个重要功能是 `placeholder`。通过在完整大小的图像加载时显示模糊的占位符图像，这显著提高了用户体验。与传统的逐行加载图像的方法相比，这种方法在视觉上更具吸引力。
- en: 'To utilize this feature, simply add the `placeholder` prop to the `nuxt-img`
    component – for instance, in the `pages/recipe/[slug].vue` image:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用此功能，只需将 `placeholder` 属性添加到 `nuxt-img` 组件中——例如，在 `pages/recipe/[slug].vue`
    中的图像：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After adding this prop, when you visit the page, you’ll initially see a blurred
    version of the image, which gradually sharpens into the full image, resulting
    in a smoother visual experience.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此属性后，当你访问页面时，你最初会看到图像的模糊版本，它逐渐变得清晰，最终呈现完整的图像，从而实现更平滑的视觉体验。
- en: '![Figure 6.9: The Nuxt image placeholder](img/B19760_06_9.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9：Nuxt图像占位符](img/B19760_06_9.jpg)'
- en: 'Figure 6.9: The Nuxt image placeholder'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9：Nuxt图像占位符
- en: Now, let’s discuss optimizing images further by specifying their width and height,
    which is especially useful when displaying images in smaller sizes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进一步讨论通过指定它们的宽度和高度来优化图像，这在显示较小尺寸的图像时特别有用。
- en: '`nuxt-img` allows you to define the width and height attributes, ensuring that
    images are served in the most appropriate size for their intended display area.
    This will create a smaller image based on the specified size, reducing unnecessary
    data transfer and improving image optimization. For example, in the `components/RecipeCard.vue`
    file, let’s replace the `img` tag with `nuxt-img` and add webp format, placeholder,
    and a height of `250px`, as we specified in the TailwindCSS classes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`nuxt-img` 允许你定义宽度和高度属性，确保图像以最适合其显示区域的大小提供服务。这将根据指定的大小创建一个较小的图像，减少不必要的数据传输并提高图像优化。例如，在
    `components/RecipeCard.vue` 文件中，让我们将 `img` 标签替换为 `nuxt-img` 并添加 webp 格式、占位符以及
    `250px` 的高度，正如我们在 TailwindCSS 类中指定的：'
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By setting the height to `250` px, `nuxt-img` resizes the image to these dimensions.
    This resize operation, performed under the hood by Nuxt Image, dramatically reduces
    the file size.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将高度设置为 `250` 像素，`nuxt-img` 将图像调整到这些尺寸。这个调整大小操作由Nuxt Image在幕后执行，大大减少了文件大小。
- en: In this case, the original image size, which was around 4 MB, is first reduced
    to about 400 KB by converting to WebP. Then, with the specified height, it’s further
    reduced to an astonishingly small size of approximately 18 KB! This significant
    reduction demonstrates the effectiveness of specifying dimensions in combination
    with the WebP format, showcasing how `nuxt-img` optimizes images to enhance the
    page-loading speed while maintaining image quality.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，原始图片大小约为 4 MB，首先通过转换为 WebP 格式减小到大约 400 KB，然后，通过指定的高度进一步减小到惊人的约 18 KB
    的大小！这种显著减小展示了指定尺寸与 WebP 格式结合使用的效果，展示了 `nuxt-img` 如何优化图片以增强页面加载速度同时保持图片质量。
- en: '![Figure 6.10: The Nuxt image after specifying a size](img/B19760_06_10.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10：指定大小后的 Nuxt 图片](img/B19760_06_10.jpg)'
- en: 'Figure 6.10: The Nuxt image after specifying a size'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10：指定大小后的 Nuxt 图片
- en: Having optimized our recipe images, we now turn to a creative approach – using
    a custom Nuxt component to automatically generate unique OG images for each recipe
    page, improving their visual impact on social media.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在优化了我们的食谱图片后，我们现在转向一种创新的方法——使用自定义 Nuxt 组件为每个食谱页面自动生成独特的 OG 图像，从而提高它们在社交媒体上的视觉影响力。
- en: Creating a custom og:image for the recipe page
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为食谱页面创建自定义 og:image
- en: OG images (`og:image`) play a crucial role in how content is visually presented
    when shared on social media. For instance, when someone shares a recipe link from
    your site, `og:image` is what typically appears as the visual highlight of the
    post, drawing attention and potentially driving more traffic to your site.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: OG 图像（`og:image`）在社交媒体上分享内容时的视觉呈现中起着至关重要的作用。例如，当有人从你的网站分享食谱链接时，`og:image` 通常会作为帖子的视觉亮点出现，吸引注意力并可能为你的网站带来更多流量。
- en: 'The `useSeoMeta` composable from Nuxt allows you to append an `og:image` link
    to each page, as explained in more detail in the Nuxt documentation: [https://nuxt.com/docs/api/composables/use-seo-meta#usage](https://nuxt.com/docs/api/composables/use-seo-meta#usage).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt 的 `useSeoMeta` 可组合函数允许你为每个页面添加一个 `og:image` 链接，如 Nuxt 文档中更详细地解释：[https://nuxt.com/docs/api/composables/use-seo-meta#usage](https://nuxt.com/docs/api/composables/use-seo-meta#usage)。
- en: However, in this section, we’re going to explore a more dynamic and creative
    solution. Instead of manually designing an image for each recipe, we’ll create
    a Nuxt component that automatically generates an OG image. This feature from the
    `nuxt/seo` module is useful to dynamically convert our component into an `og:image`,
    saving much time and effort in creating custom graphic design.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本节中，我们将探索一个更动态和创造性的解决方案。我们不会为每个食谱手动设计图片，而是创建一个 Nuxt 组件来自动生成 OG 图片。`nuxt/seo`
    模块的这个功能非常有用，可以动态地将我们的组件转换为 `og:image`，在创建自定义图形设计时节省大量时间和精力。
- en: 'We’ll start by creating a new component in `components/OgImage/CustomTemplate.vue`
    inside the template, by adding the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在模板内的 `components/OgImage/CustomTemplate.vue` 中创建一个新的组件，通过添加以下内容：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The template creates a recipe card. It features a combination of the site’s
    logo, the recipe’s title and description, the website URL, and the recipe’s image.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 模板创建了一个食谱卡片。它结合了网站的标志、食谱的标题和描述、网站 URL 和食谱的图片。
- en: 'In the same component, add this script:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的组件中，添加以下脚本：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `<script>` section, we’re utilizing Nuxt composables to dynamically
    set up the component’s properties:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<script>` 部分，我们正在使用 Nuxt 可组合函数动态设置组件的属性：
- en: '`useSiteConfig`: This composable from the `nuxt/seo` module retrieves the site
    configuration defined in `nuxt.config.ts`, allowing us to access global site settings
    such as the URL.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useSiteConfig`: 来自 `nuxt/seo` 模块的这个可组合函数检索在 `nuxt.config.ts` 中定义的网站配置，使我们能够访问全局网站设置，如
    URL。'
- en: '`withDefaults`: This function from Vue is used to assign default values to
    the component’s props. Specifically, it sets a default image (`''/images/hero.png''`)
    for scenarios where a specific recipe image isn’t provided, such as when creating
    an OG image for the home page.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`withDefaults`: 这个 Vue 函数用于为组件的 props 分配默认值。具体来说，它为没有提供特定食谱图片的场景设置了一个默认图片（`''/images/hero.png''`），例如在创建主页的
    OG 图像时。'
- en: 'To use our custom component in the home page, we first need to modify the script
    in our `pages/index.vue`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的主页中使用我们的自定义组件，我们首先需要修改 `pages/index.vue` 中的脚本：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By doing this, we set a custom title for the OG image. Since we haven’t specified
    a description, the default site description, defined globally in the `nuxt.config.ts`
    `site` object, will be used. Similarly, in the absence of a specified recipe image,
    our default hero image is automatically selected.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们为 OG 图片设置了一个自定义标题。由于我们没有指定描述，将使用全局定义在 `nuxt.config.ts` `site` 对象中的默认网站描述。同样，在没有指定菜谱图片的情况下，我们的默认英雄图片将自动选择。
- en: 'To debug and view the results of these changes, follow these steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试并查看这些更改的结果，请按照以下步骤操作：
- en: Navigate to http://localhost:3000/.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 http://localhost:3000/。
- en: Click on the Nuxt Devtools icon.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Nuxt Devtools 图标。
- en: Open the search bar (using *Ctrl* + *K* or *Command* + *K* on a Mac) and search
    for `og Image`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开搜索栏（在 Mac 上使用 *Ctrl* + *K* 或 *Command* + *K*），搜索 `og Image`。
- en: 'You should now see a preview of the OG image, which will look something like
    *Figure 6**.11*:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该可以看到 OG 图片的预览，它看起来类似于 *图 6.11*：
- en: '![Figure 6.11: The Nuxt Devtools – og:image debugging](img/B19760_06_11.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11：Nuxt Devtools – og:image 调试](img/B19760_06_11.jpg)'
- en: 'Figure 6.11: The Nuxt Devtools – og:image debugging'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11：Nuxt Devtools – og:image 调试
- en: This process confirms that our custom OG image was successfully implemented
    for the home page. Next, let’s apply a similar approach to create one for each
    recipe.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程确认我们的自定义 OG 图片已成功应用于主页。接下来，让我们采用类似的方法为每个菜谱创建一个。
- en: 'Open the `/pages/recipe/[slug].vue` file and append this to the script:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `/pages/recipe/[slug].vue` 文件，并将其附加到脚本中：
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This code dynamically sets the title, description, and image for the OG image
    based on the specific recipe details. When you visit a recipe page and check the
    **OG Image** section in the Nuxt Devtools, you’ll see the custom image reflecting
    the recipe’s unique attributes:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码根据特定的菜谱细节动态设置 OG 图片的标题、描述和图片。当您访问菜谱页面并检查 Nuxt Devtools 中的 **OG Image** 部分，您将看到反映菜谱独特属性的定制图片：
- en: '![Figure 6.12: The recipe’s OG image](img/B19760_06_12.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12：菜谱的 OG 图片](img/B19760_06_12.jpg)'
- en: 'Figure 6.12: The recipe’s OG image'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12：菜谱的 OG 图片
- en: Having personalized our OG images for each recipe, let’s now move on to our
    final task – generating dynamic site maps for the recipe-sharing site.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在为每个菜谱个性化 OG 图片后，我们现在继续进行我们的最终任务——为菜谱分享网站生成动态网站地图。
- en: Generating dynamic site maps for the recipe-sharing site
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为菜谱分享网站生成动态网站地图
- en: As we’ve customized our OG images for each recipe, our next and final step is
    to generate dynamic site maps for our recipe-sharing site. Site maps are crucial,
    as they guide search engines in discovering and indexing all the pages on your
    site, thereby enhancing SEO.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经为每个菜谱定制了 OG 图片，我们的下一步和最后一步是为我们的菜谱分享网站生成动态网站地图。网站地图至关重要，因为它们指导搜索引擎发现和索引您网站上所有页面，从而增强
    SEO。
- en: 'While the `nuxt/seo` module automatically creates site maps for static pages
    such as the Homepage and About page, it doesn’t automatically detect dynamic pages
    such as individual recipes. To see the current site map, visit [http://localhost:3000/sitemap.xml](http://localhost:3000/sitemap.xml).
    You’ll notice that it includes only static pages:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `nuxt/seo` 模块会自动为静态页面（如主页和关于页面）创建网站地图，但它不会自动检测动态页面（如单个菜谱）。要查看当前网站地图，请访问 [http://localhost:3000/sitemap.xml](http://localhost:3000/sitemap.xml)。您会注意到它只包含静态页面：
- en: '![Figure 6.13: The default Sitemap.xml](img/B19760_06_13.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13：默认的 Sitemap.xml](img/B19760_06_13.jpg)'
- en: 'Figure 6.13: The default Sitemap.xml'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13：默认的 Sitemap.xml
- en: However, our site also features dynamic recipe pages that are not automatically
    included in this site map. To remedy this, we need to provide `nuxt/seo` with
    a way to identify these dynamic pages. We’ll achieve this by setting up an API
    endpoint that fetches a list of recipes. This list can then be fed into `nuxt/seo`
    to dynamically generate a comprehensive site map that includes both static and
    dynamic pages, ensuring complete visibility of our site to search engines.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的网站还特色动态菜谱页面，这些页面不会自动包含在此网站地图中。为了解决这个问题，我们需要为 `nuxt/seo` 提供一种识别这些动态页面的方法。我们将通过设置一个
    API 端点来获取菜谱列表来实现这一点。然后，此列表可以输入到 `nuxt/seo` 中，以动态生成一个包含静态和动态页面的综合网站地图，确保我们的网站对搜索引擎的完全可见性。
- en: In a typical project, the backend’s responsibility includes creating an external
    API to list dynamic pages. However, Nuxt offers a more integrated approach – using
    its `server` directory, we can create an internal API within our project. This
    method is particularly beneficial for scenarios such as ours, where we need to
    generate a dynamic site map.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The Nuxt server directory is a powerful feature that enables us to write server-side
    logic directly in our Nuxt application. It’s an ideal solution for internal APIs
    and server-side functionalities without needing a separate backend service.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this in our recipe-sharing site, we’ll create a file named `server/api/__sitemap__/urls.ts`.
    In this file, we’ll define a site map handler using `defineSitemapEventHandler`,
    which will dynamically generate URLs from our recipe data:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In Nuxt’s server directory, the `api` folder is specially designed to create
    APIs, with each file path corresponding to an API route. This feature allows for
    easy integration of server-side APIs directly within the Nuxt project. In our
    case, the `server/api/__sitemap__/urls.ts` file will automatically be converted
    into an accessible API route. To test and see the output of this newly created
    API, you can navigate to http://localhost:3000/api/__sitemap__/urls. When you
    visit this URL, it will display the list of URLs generated for our dynamic recipe
    pages:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14: Testing the internal API](img/B19760_06_14.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: Testing the internal API'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'To include our dynamically generated recipe URLs in the site map, we’ll adjust
    `nuxt.config.ts` by adding the following object:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This line directs Nuxt to use the URLs from our internal API as a source for
    the site map, combining them with all the static pages that are automatically
    generated.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, revisit [http://localhost:3000/sitemap.xml](http://localhost:3000/sitemap.xml)
    in your browser. You should see that all the recipes, along with the static pages,
    are now correctly listed in the site map, ensuring they are discoverable by search
    engines:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15: The final sitemap.xml result](img/B19760_06_15.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: The final sitemap.xml result'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: With this final step, we’ve successfully completed our project, enhancing our
    recipe-sharing site with optimized SEO, dynamic OG images, and an effective site
    map. This achievement marks a significant milestone in our journey to create real-world
    Nuxt projects!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19760_06.xhtml#_idTextAnchor124) focused on elevating a recipe-sharing
    site using Nuxt 3, with a focus on SEO. We kickstarted with `nuxt/seo` for site
    configuration, efficiently adding key SEO elements such as meta tags and OG protocols,
    enhancing the site’s search engine visibility.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Our journey included implementing `defineRecipe` for structured data, improving
    the recipe visibility in search results. The use of `nuxt-img` was crucial in
    optimizing images, significantly enhancing page loading speed. A highlight was
    creating dynamic OG images via a custom Nuxt component, automatically generating
    unique images for each recipe shared and enriching our social media engagement.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: We overcame the challenge of dynamic site map generation by utilizing Nuxt’s
    server directory to create an internal API, ensuring complete site visibility
    for search engines.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: As we close this chapter, we gear up for [*Chapter 7*](B19760_07.xhtml#_idTextAnchor141),
    Building a Quiz Game Application to Learn and Testing. This next adventure will
    dive into creating an interactive quiz game app, which will introduce Nuxt 3’s
    testing capabilities to build a scalable, error-free application. We’ll explore
    unit testing, Pinia store testing, end-to-end testing, further enhancing our Nuxt
    3 development skills.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do you set up a canonical URL using `nuxt/seo`?
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you convert images to the WebP format in Nuxt 3?
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain how to implement a blurred placeholder for images.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you customize OG images for social media sharing?
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you test the implementation of a recipe node in Nuxt Devtools?
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the importance of specifying width and height in `nuxt-img`?
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you include dynamic page URLs in a sitemap?
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the importance of `useSeoMeta`?
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you verify the contents of a dynamically generated site map?
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you add structured data or a schema to a Nuxt page?
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nuxt SEO: [https://nuxtseo.com/](https://nuxtseo.com/%20)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useSeoMeta`: [https://nuxt.com/docs/api/composables/use-seo-meta](https://nuxt.com/docs/api/composables/use-seo-meta%0D)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt SEO supported nodes: [https://nuxtseo.com/schema-org/guides/nodes](https://nuxtseo.com/schema-org/guides/nodes)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nuxt Image: [https://image.nuxt.com/](https://image.nuxt.com/)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OG: [https://www.semrush.com/blog/open-graph](https://www.semrush.com/blog/open-graph)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dynamic site map URLs from an external API: [https://nuxtseo.com/sitemap/guides/dynamic-urls#dynamic-urls-from-an-external-api](https://nuxtseo.com/sitemap/guides/dynamic-urls#dynamic-urls-from-an-external-api)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
