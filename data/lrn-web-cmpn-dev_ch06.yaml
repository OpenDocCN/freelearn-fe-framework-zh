- en: Chapter 6. Building Web Components with ReactJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章 使用 ReactJS 构建 Web 组件
- en: In this chapter, we will learn about the "react way" for web component development
    offered by the Facebook team. We will also learn to develop a web component using
    the ReactJS library. We will explore the flux architecture of a web application
    and understand how the data flows in it. Finally, we will develop a custom component
    using the ReactJS library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解 Facebook 团队提供的用于 Web 组件开发的“React 方式”。我们还将学习使用 ReactJS 库开发 Web 组件。我们将探索
    Web 应用的 Flux 架构，并了解其中的数据流。最后，我们将使用 ReactJS 库开发一个自定义组件。
- en: The reactive approach
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反应式方法
- en: Before understanding the ReactJS framework in detail, we should know some of
    the applications that have been developed. The comment section of Facebook, LiveFyre,
    and Disqus are developed using ReactJS. These applications are developed by following
    the flux architecture.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细了解 ReactJS 框架之前，我们应该了解一些已经开发的应用程序。Facebook 的评论区、LiveFyre 和 Disqus 都是用 ReactJS
    开发的。这些应用程序是按照 Flux 架构开发的。
- en: The flux architecture
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flux 架构
- en: 'A flux application has three important parts—**dispatcher**, **store**, and
    **views**. These parts are connected by **action**. The following diagram shows
    the three building blocks and action data flow in the flux architecture:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Flux 应用有三个重要的部分——**调度器**、**存储**和**视图**。这些部分通过**动作**连接。以下图表显示了 Flux 架构中的三个构建块和动作数据流：
- en: '![The flux architecture](img/image00330.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Flux 架构](img/image00330.jpeg)'
- en: 'The details of these three parts of flux architecture are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 架构这三个部分的详细信息如下：
- en: '**View**: This represents the UI components that are rendered in the browser
    to be used by the end users.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这代表在浏览器中渲染的 UI 组件，供最终用户使用。'
- en: '**Store**: This holds the application data and business logic. It is similar
    to the model of the MVC framework. **Store** represents a collection of data objects,
    whereas model represents a single object.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：它包含应用程序数据和业务逻辑。它与 MVC 框架中的模型类似。**存储**代表数据对象的集合，而模型代表单个对象。'
- en: '**Dispatcher**: This is the central hub through which all actions have to pass.
    It contains all the callback registered by the stores.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度器**：这是所有动作必须通过的中央枢纽。它包含存储注册的所有回调。'
- en: 'Applications developed in flux architecture work as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flux 架构中开发的应用程序工作如下：
- en: Generally, actions are generated by the user, interacting with the views. These
    actions are asynchronous in nature.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，动作是由用户生成的，与视图进行交互。这些动作本质上是异步的。
- en: These actions are then passed to the dispatcher for processing. The dispatcher
    then invokes the callback method registered in the store.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些动作随后被传递到调度器进行处理。调度器然后调用存储中注册的回调方法。
- en: The execution of the callback method may change the state of the data. The store
    then emits the change event with the updated data. The view listens to the change
    event and accesses the modified data from the store using event handler. The view
    then calls their own `setState` method, which causes the re-rendering of itself
    and its children element.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回调方法的执行可能会改变数据的状态。然后存储发出带有更新数据的更改事件。视图监听更改事件，并使用事件处理程序从存储中访问修改后的数据。然后视图调用它们自己的
    `setState` 方法，这会导致自身及其子元素的重渲染。
- en: The data flow is unidirectional. Flux architecture does not allow two-way data
    binding, which can cause more cascading updates.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据流是单向的。Flux 架构不允许双向数据绑定，这可能导致更多的级联更新。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The data flow in flux-based application is unidirectional.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于 Flux 的应用程序中的数据流是单向的。
- en: Flux key features
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flux 关键特性
- en: 'The flux architecture provides some key features that a flux-based web application
    must follow. These key features are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 架构为基于 Flux 的 Web 应用程序提供了一些关键特性，这些特性如下：
- en: '**Synchrony**: All the callback methods registered for each action are synchronous
    in execution, but the action is triggered asynchronously from the source.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同步性**：为每个动作注册的所有回调方法在执行上是同步的，但动作是从源异步触发的。'
- en: '**Inversion of control**: The flow of control is transferred to the appropriate
    store object and targeted callback.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制反转**：控制流被转移到适当的存储对象和目标回调函数。'
- en: '**Semantic actions**: The action triggered from the source contains some sematic
    information, which helps the store object decide the appropriate method execution.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语义动作**：从源触发的动作包含一些语义信息，这有助于存储对象决定执行适当的方法。'
- en: '**No cascading actions**: Flux disallows cascading actions that generate multiple
    updates.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无级联动作**：Flux 不允许生成多个更新的级联动作。'
- en: Note
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about flux architecture use the following link:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于 flux 架构的信息，请使用以下链接：
- en: '[http://fluxxor.com/what-is-flux.html](http://fluxxor.com/what-is-flux.html)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://fluxxor.com/what-is-flux.html](http://fluxxor.com/what-is-flux.html)'
- en: Installing ReactJS
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 ReactJS
- en: 'The ReactJS library can be installed using Bower. Assuming that Bower is already
    present in your machine, use the following command to install the ReactJS library:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 Bower 安装 ReactJS 库。假设 Bower 已经存在于您的机器上，请使用以下命令安装 ReactJS 库：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the terminal with ReactJS installation in progress
    using Bower:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用 Bower 进行 ReactJS 安装过程中的终端：
- en: '![Installing ReactJS](img/image00331.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![安装 ReactJS](img/image00331.jpeg)'
- en: 'After successful execution of the Bower command, the system loads the ReactJS
    library file inside the `react` subdirectory present inside the `bower_components`
    directory. The following screenshot shows the files present inside the ReactJS
    library:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 Bower 命令成功后，系统将加载位于 `bower_components` 目录中 `react` 子目录内的 ReactJS 库文件。以下截图显示了
    ReactJS 库中的文件：
- en: '![Installing ReactJS](img/image00332.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![安装 ReactJS](img/image00332.jpeg)'
- en: 'The ReactJS library has three different parts:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 库有三个不同的部分：
- en: '**ReactJS core library**: This is the core ReactJS library. The name of this
    file is `ReactJS` and the minified version of this library is `react.min.js`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ReactJS 核心库**：这是 ReactJS 的核心库。该文件的名称为 `ReactJS`，该库的压缩版本为 `react.min.js`。'
- en: '**ReactJS addon**: This represents the additional utility packages that can
    be used with ReactJS. The name of this file is `react-with-addons.js` and the
    minified version of this library is `react-with-addons.min.js`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ReactJS 插件**：这表示可以与 ReactJS 一起使用的附加实用程序包。该文件的名称为 `react-with-addons.js`，该库的压缩版本为
    `react-with-addons.min.js`。'
- en: '**JSX transformer library**: This library can be used in the browser to transfer
    the JSX code to JavaScript. The name of this file is `JSXTransformer.js`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSX 转换器库**：这个库可以在浏览器中使用，将 JSX 代码转换为 JavaScript。该文件的名称为 `JSXTransformer.js`。'
- en: Configuring ReactJS
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 ReactJS
- en: 'The ReactJS library can be used as a standalone or with the JSX transformer
    file. We will find out more about JSX in the coming section. For now, we can include
    the following `<script>` tag to start using the ReactJS library:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 库可以作为独立库或与 JSX 转换器文件一起使用。我们将在下一节中了解更多关于 JSX 的信息。现在，我们可以包含以下 `<script>`
    标签以开始使用 ReactJS 库：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The ReactJS library can also be used directly from the Facebook CDN to increase
    the performance of the page load. The `<script>` code to load the ReactJS library
    from the CDN is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 库也可以直接从 Facebook CDN 使用，以提高页面加载性能。从 CDN 加载 ReactJS 库的 `<script>` 代码如下：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: During the writing of this book, the ReactJS library has the 0.12.2 version.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书编写过程中，ReactJS 库的版本为 0.12.2。
- en: Using ReactJS
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ReactJS
- en: 'We can use the ReactJS library by including the `ReactJS` or `rect.min.js`
    file using the `<script>` element. We can create a DOM element using the `React.createElement`
    method. The syntax for the `createElement` method is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过包含 `ReactJS` 或 `rect.min.js` 文件来使用 ReactJS 库，使用 `<script>` 元素创建 DOM 元素。`createElement`
    方法的语法如下：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The details of the preceding syntax are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法的详细信息如下：
- en: '`type`: This represents the HTML element name in a string format'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：这表示字符串格式的 HTML 元素名称'
- en: '`properties`: This represents an object with the key-value pair for attribute
    name and values'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`properties`：这表示一个具有属性名称和值的键值对的对象'
- en: '`children`: This represents the child nodes that an element can have'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`children`：这表示一个元素可以拥有的子节点'
- en: 'A `React` element can be rendered in the browser using the `React.render` method.
    The syntax for the `render` method is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `React.render` 方法可以在浏览器中渲染 `React` 元素。`render` 方法的语法如下：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The details of the preceding syntax are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法的详细信息如下：
- en: '`reactElement`: It represents the ReactJS element which need to be rendered
    in the browser.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reactElement`：它表示需要在浏览器中渲染的 ReactJS 元素。'
- en: '`targetDOMNode`: It represent the DOM node where the ReactJS element needs
    to be appended for displaying in browser.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`targetDOMNode`：它表示需要将 ReactJS 元素附加到其中以在浏览器中显示的 DOM 节点。'
- en: 'Now, let''s checkout an example for displaying the `React` element using the
    `createElement` and `render` method. The following code shows the use of these
    methods:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用 `createElement` 和 `render` 方法显示 `React` 元素的示例。以下代码展示了这些方法的使用：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细信息如下：
- en: A header element `h1` is created using the `React.createElement` method. This
    header element has a `headerStyle` class and a child node of type `TEXT` with
    a `Hello ReactJS` value. Reference of this header element is saved in the `helloMessage`
    variable.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `React.createElement` 方法创建了一个 `h1` 头部元素。此头部元素具有 `headerStyle` 类和一个类型为 `TEXT`
    的子节点，其值为 `Hello ReactJS`。此头部元素的引用被保存在 `helloMessage` 变量中。
- en: The `React.render` method is used to display the header element `helloMessage`
    in the `document.body` position.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`React.render` 方法用于在 `document.body` 位置显示头部元素 `helloMessage`。'
- en: 'The output of the preceding code is rendered in the following screenshot containing
    the **Hello ReactJS** string message in the color red:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出在以下屏幕截图中被渲染，其中包含红色的 **Hello ReactJS** 字符串信息：
- en: '![Using ReactJS](img/image00333.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ReactJS](img/image00333.jpeg)'
- en: What is JSX
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 JSX
- en: 'ReactJS comes with another flavor named JSX. **JSX** stands for **JavaScript
    XML**. It follows XML type element declaration for web component development.
    There are many benefits of using JSX:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 还有一个名为 JSX 的变种。**JSX** 代表 **JavaScript XML**。它遵循 XML 类型的元素声明用于网络组件开发。使用
    JSX 有许多好处：
- en: '**Familiarity**: Developers are familiar with XML, and JSX provides a similar
    type of element declaration.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**熟悉度**：开发者熟悉 XML，JSX 提供了类似类型的元素声明。'
- en: '**Semantics**: JSX is easier to understand as it follows a declarative type
    of programming.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语义**：JSX 更易于理解，因为它遵循声明式编程类型。'
- en: '**Separation of concern**: JSX provides a clean way to encapsulate all the
    logic and markup in one definition.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注点分离**：JSX 提供了一种干净的方式来封装所有逻辑和标记在一个定义中。'
- en: Custom components with JSX
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义组件与 JSX
- en: 'ReactJS provides the `JSXTransformer.js` script file for transpiling of the
    JSX code in the browser. A JSX code block is defined using the following syntax:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 提供了 `JSXTransformer.js` 脚本文件，用于在浏览器中转换 JSX 代码。JSX 代码块使用以下语法定义：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A custom element can be created using the `React.createClass` method. The syntax
    for the `createClass` method is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `React.createClass` 方法创建自定义元素。`createClass` 方法的语法如下：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding syntax, the `objectSpecification` class takes a `render` method
    and other optional lifecycle methods and properties. We will learn more about
    the lifecycle method and properties in the coming sections. For now, let''s check
    out an example of developing a custom element using JSX. The following code contains
    the use of the `createClass` method to develop a custom element:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语法中，`objectSpecification` 类接受一个 `render` 方法和其他可选的生命周期方法和属性。我们将在接下来的章节中了解更多关于生命周期方法和属性的内容。现在，让我们看看使用
    JSX 开发自定义元素的示例。以下代码展示了如何使用 `createClass` 方法开发自定义元素：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的详细信息如下：
- en: A custom element named `HelloMessage` is created using the `React.createClass`
    method inside a `<script>` block with `type` set to `text/jsx`.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `React.createClass` 方法在 `<script>` 块内（`type` 设置为 `text/jsx`）创建了一个名为 `HelloMessage`
    的自定义元素。
- en: The specification object contains the `render` method, which has a JSX element.
    The `h1` element has a `className` attribute. The `className` attribute is a JSX
    attribute, but looks familiar to an HTML element attribute.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范对象包含一个 `render` 方法，该方法包含一个 JSX 元素。`h1` 元素有一个 `className` 属性。`className` 属性是一个
    JSX 属性，但它看起来与 HTML 元素属性很相似。
- en: The specification object for `HelloMessage` contains a `render` method which
    returns a JSX element.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HelloMessage` 的规范对象包含一个 `render` 方法，该方法返回一个 JSX 元素。'
- en: The `<HelloMessage>` element is then rendered using the `React.render` method
    inside the `<body>` tag.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，使用 `<body>` 标签内的 `React.render` 方法渲染 `<HelloMessage>` 元素。
- en: 'The output of the preceding code is rendered as the following screenshot. We
    can find a similar result that the **Hello ReactJS** message is rendered in red
    color:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出如下屏幕截图所示。我们可以找到一个类似的结果，即 **Hello ReactJS** 信息以红色渲染：
- en: '![Custom components with JSX](img/image00334.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用 JSX 的自定义组件](img/image00334.jpeg)'
- en: ReactJS inline style
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReactJS 内联样式
- en: 'In ReactJS, we can add an inline style using the `style` attribute and ReactJS
    expression. ReactJS takes inline style as a JavaScript *anonymous object* containing
    a key/value pair representing properties and their values separated with a *colon*
    (`:`). The following syntax shows the JavaScript object for inline style:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在ReactJS中，我们可以使用`style`属性和ReactJS表达式添加内联样式。ReactJS将内联样式视为一个JavaScript **匿名对象**，其中包含一个键/值对，表示属性及其值，用冒号（`:`）分隔。以下语法显示了内联样式的JavaScript对象：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The details of the preceding syntax are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法的详细信息如下：
- en: '`styleAttribute`: This represents the CSS property name as key. The name should
    follow **camelCase** representation. For example, the `box-shadow` style attribute
    becomes `boxShadow`. The vendor prefix attribute starts with a capital letter
    except `ms`(Microsoft Internet Explorer).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleAttribute`：这代表CSS属性名作为键。名称应遵循**驼峰命名法**。例如，`box-shadow`样式属性变为`boxShadow`。除了`ms`（Microsoft
    Internet Explorer）之外，供应商前缀属性以大写字母开头。'
- en: '`styleValue`: This represents a value for the CSS property, and it is in string
    format. For example, `1px solid grey` should be wrapped in double quotes like
    `"1px solid grey"`.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleValue`：这代表CSS属性的值，并且是字符串格式。例如，`1px solid grey`应该用双引号括起来，如`"1px solid
    grey"`。'
- en: 'Let''s check out an example for using inline style in a ReactJS element. The
    code for the ReactJS element is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个在ReactJS元素中使用内联样式的例子。ReactJS元素的代码如下：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: The `messageStyle` object contains an anonymous object containing the CSS attribute's
    name as `key` and the styles as a string `value`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`messageStyle`对象包含一个匿名对象，其中CSS属性的名称作为`key`，样式作为字符串`value`。'
- en: This `messageStyle` object is then bound with the `style` attribute of the `div`
    element using curly braces
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个`messageStyle`对象随后使用花括号与`div`元素的`style`属性绑定
- en: 'The output of the preceding code is shown in the following screenshot, with
    the `style` attributes applied to the `div` element:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下截图所示，其中`style`属性应用于`div`元素：
- en: '![ReactJS inline style](img/image00335.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS内联样式](img/image00335.jpeg)'
- en: ReactJS event handling
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReactJS事件处理
- en: 'The event handling in ReactJS is similar to DOM events, with a difference in
    naming the handler. For example, an `onclick` handler is renamed to `onClick`
    in ReactJS. This follows the camelCase syntax to name the handler. Let''s check
    out an example of event handling. The following code shows a simple example of
    event handling in ReactJS:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS中的事件处理与DOM事件类似，但在处理器的命名上有所不同。例如，`onclick`处理器在ReactJS中重命名为`onClick`。这遵循了驼峰命名法来命名处理器。让我们来看一个事件处理的例子。以下代码展示了ReactJS中事件处理的一个简单示例：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The details of the code are listed as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的详细信息如下：
- en: The `<SayHello>` element is created using the `React.createClass` method. The
    `render` method contains the `<button>` element with an `onClick` event handler,
    which is bound to the `helloHandler` method using `this` keyword. The `this` keyword
    refers to the `<SayHello>` custom element.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<SayHello>`元素使用`React.createClass`方法创建。`render`方法包含带有`onClick`事件处理器的`<button>`元素，该事件处理器通过`this`关键字绑定到`helloHandler`方法。`this`关键字指的是`<SayHello>`自定义元素。'
- en: The `helloHandler` method definition is present inside the specification object.
    This method contains an `alert` method with a string message.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helloHandler`方法定义位于规范对象内部。该方法包含一个带有字符串消息的`alert`方法。'
- en: 'The output of the preceding code contains a button with the **Click Me** text
    and is rendered as the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出包含一个带有**点击我**文本的按钮，并按以下截图所示渲染：
- en: '![ReactJS event handling](img/image00336.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS事件处理](img/image00336.jpeg)'
- en: 'When the user clicks on this button, the `helloHandler` method gets called
    and an alert window appears, containing the **Hello Developers** message. The
    output of the preceding code is rendered in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击此按钮时，`helloHandler`方法被调用，并弹出一个包含**Hello Developers**消息的警告窗口。上述代码的输出按以下截图所示：
- en: '![ReactJS event handling](img/image00337.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS事件处理](img/image00337.jpeg)'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the event handling system in ReactJS library use the
    following link: [http://facebook.github.io/react/docs/events.html](http://facebook.github.io/react/docs/events.html)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于ReactJS库中事件处理系统的信息，请使用以下链接：[http://facebook.github.io/react/docs/events.html](http://facebook.github.io/react/docs/events.html)
- en: Useful non-DOM attributes
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的非DOM属性
- en: 'In this section, we will learn some non-DOM attributes that can be used with
    the JSX element. The following list contains some of the non-DOM attributes:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一些可以与JSX元素一起使用的非DOM属性。以下列表包含了一些非DOM属性：
- en: '`key`: This is an optional attribute that can be used to uniquely identify
    each component in the page'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`：这是一个可选属性，可以用于在页面上唯一标识每个组件'
- en: '`ref`: This is an optional attribute that can be used to access the child element
    from outside the `render` method'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`：这是一个可选属性，可以用于从`render`方法外部访问子元素'
- en: '`dangerouslySetInnerHTML`: This attribute can be used inside the JSX element
    to set HTML content inside the component'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dangerouslySetInnerHTML`：此属性可以在JSX元素内部使用，以在组件内设置HTML内容'
- en: 'Let'' check out a simple example with the use of these three attributes. The
    code for this example is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的例子来检查这三个属性的使用。此例子的代码如下：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: The `<StudentsReport>` element contains the `render` method, which has the `studentDetails`
    object containing `headerHTML`, `subject`, and `list` properties.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<StudentsReport>`元素包含一个`render`方法，该方法包含一个包含`headerHTML`、`subject`和`list`属性的`studentDetails`对象。'
- en: 'The `headerHTML` properties contain another object with the `__html` property,
    which has HTML content wrapped in an `<i>` element. The `headerHTML` property
    is used with the `dangerouslySetInnerHTML` attribute of a `React` element present
    inside the `render` block. The `dangerouslySetInnerHTML` attribute is used to
    bind the HTML content in runtime. The code to bind HTML is as follows:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`headerHTML`属性包含另一个具有`__html`属性的对象，该属性包含被`<i>`元素包裹的HTML内容。`headerHTML`属性与`render`块内存在的`React`元素的`dangerouslySetInnerHTML`属性一起使用。`dangerouslySetInnerHTML`属性用于在运行时绑定HTML内容。绑定HTML的代码如下：'
- en: '[PRE13]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `list` property contains an array of student objects with the `roll` and
    `name` properties. A `map` function is used to iterate over the list array. While
    iterating `<li>` elements, the `key` attribute takes its value from `roll` property
    and the inner text takes its value from `name` property. The `key` attribute is
    used for uniquely identifying the `<li>` student element. The code to bind student
    details is as follows:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`属性包含一个具有`roll`和`name`属性的学生的对象数组。使用`map`函数遍历列表数组。在迭代`<li>`元素时，`key`属性从`roll`属性获取其值，而内部文本从`name`属性获取其值。`key`属性用于唯一标识`<li>`学生元素。绑定学生详情的代码如下：'
- en: '[PRE14]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `subject` property contains the name of the course taken by all the students.
    In the `render` block, `subject` is bound with the `h1` element and with a `ref`
    attribute named `subjectName`. The `render` block also contains the `<button>`
    element which is attached with an `onClick` handler referring to the `logSubject`
    method. The `logSubject` method does the following two things:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subject`属性包含所有学生所选修课程的名称。在`render`块中，`subject`与`h1`元素以及一个名为`subjectName`的`ref`属性绑定。`render`块还包含一个`<button>`元素，该元素连接到一个指向`logSubject`方法的`onClick`处理程序。`logSubject`方法执行以下两个操作：'
- en: 'It retrieves the entire referred element using the `this.refs` property and
    finds `studentName` and prints it in the console. It returns a ReactJS element.
    The code to access `studentName` is as follows:'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用`this.refs`属性检索整个引用元素，找到`studentName`并在控制台打印出来。它返回一个ReactJS元素。访问`studentName`的代码如下：
- en: '[PRE15]'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It retrieves the DOM version of the `React` element using the `getDOMNode`
    method. The code to access the DOM version of `studentName` is as follows:'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用`getDOMNode`方法检索`React`元素的DOM版本。访问`studentName`的DOM版本的代码如下：
- en: '[PRE16]'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of the preceding code is rendered as the following screenshot, where
    the `dangerouslySetInnerHTML` attribute renders the HTML content:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出渲染如下截图，其中`dangerouslySetInnerHTML`属性渲染了HTML内容：
- en: '![Useful non-DOM attributes](img/image00338.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![有用的非DOM属性](img/image00338.jpeg)'
- en: 'When the user clicks on the **Log Subject** button, it prints the ReactJS and
    DOM element for the `this.refs.subjectName` value in the console. The following
    screenshot shows the Chrome developer console with two printed messages:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**日志主题**按钮时，它会在控制台打印出`this.refs.subjectName`值的ReactJS和DOM元素。以下截图显示了包含两个打印信息的Chrome开发者控制台：
- en: '![Useful non-DOM attributes](img/image00339.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![有用的非DOM属性](img/image00339.jpeg)'
- en: ReactJS component lifecycle
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReactJS组件生命周期
- en: 'Every object in the word has a lifecycle and passes through different states
    during its lifetime. We can categorize these states into three different phases.
    The following diagram shows these three common phases that an element goes through
    in its lifetime:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上每个对象在其生命周期中都有生命周期，并会经历不同的状态。我们可以将这些状态分为三个不同的阶段。以下图表显示了元素在其生命周期中经历的这三个常见阶段：
- en: '![ReactJS component lifecycle](img/image00340.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS组件生命周期](img/image00340.jpeg)'
- en: 'The details of these phases are listed as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这些阶段的详细信息如下：
- en: '**Initialization**: This is the phase when the instance for the element is
    created for the first time. Subsequent instances during the lifetime have slight
    changes.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始化**: 这是为元素创建实例的第一个阶段。在生命周期中的后续实例有轻微的变化。'
- en: '**Lifetime**: This is the phase when an element lives and changes its states
    and properties.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期**: 这是元素存在并改变其状态和属性的阶段。'
- en: '**Teardown**: This is the phase when an element finishes its execution and
    cleanup takes place.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拆解**: 这是元素完成执行并进行清理的阶段。'
- en: Similarly, each ReactJS element has a lifecycle and has different callback methods
    to handle each state. We will now learn how the ReactJS element goes through each
    of these phases.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，每个ReactJS元素都有一个生命周期，并且有不同的回调方法来处理每个状态。我们现在将学习ReactJS元素如何经历这些阶段。
- en: ReactJS initialization phase
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReactJS初始化阶段
- en: 'In this phase, a ReactJS element instance is created for the first time and
    rendered in the browser. ReactJS provides a set of methods for the setup and preprocessing
    during this phase. During initialization of an element, the methods are called
    in a specific order. The following diagram shows the order in which the callback
    methods are called during the initialization phase:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，ReactJS元素实例在浏览器中首次创建并渲染。ReactJS提供了一组方法用于这个阶段的设置和预处理。在元素的初始化过程中，方法以特定的顺序被调用。以下图表显示了初始化阶段中回调方法的调用顺序：
- en: '![ReactJS initialization phase](img/image00341.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS初始化阶段](img/image00341.jpeg)'
- en: 'The details of these methods are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的详细信息如下：
- en: '`getDefaultProps`: This method is used to create default properties for a ReactJS
    element. This method must return an object or NULL.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDefaultProps`: 这个方法用于为ReactJS元素创建默认属性。此方法必须返回一个对象或NULL。'
- en: '`getInitialState`: This method is used to create states for the component.
    This method must return an object or NULL.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getInitialState`: 这个方法用于为组件创建状态。此方法必须返回一个对象或NULL。'
- en: '`componentWillMount`: This method gets executed just before the component is
    mounted to the page.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillMount`: 这个方法在组件挂载到页面之前执行。'
- en: '`render`: This method returns the ReactJS component tree for rendering in the
    browser.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render`: 这个方法返回用于在浏览器中渲染的ReactJS组件树。'
- en: '`componentDidMount`: This method gets executed just after the initial rendering
    of the component in the browser.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidMount`: 这个方法在组件在浏览器中完成初始渲染后执行。'
- en: ReactJS lifetime phase
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReactJS生命周期阶段
- en: 'Once the ReactJS component is instantiated successfully, the lifetime phase
    starts. In this phase, the component can go through many changes. These changes
    include a change in the current state, or a change in any property value. ReactJS
    provides a set of callback methods for overriding and implementing our own logic
    for these states .The following diagram shows the order in which the callback
    methods are called during lifetime phase:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦ReactJS组件成功实例化，生命周期阶段就开始了。在这个阶段，组件可以经历许多变化。这些变化包括当前状态的变化或任何属性值的变化。ReactJS提供了一组回调方法来覆盖和实现我们自己的逻辑来处理这些状态。以下图表显示了生命周期阶段中回调方法的调用顺序：
- en: '![ReactJS lifetime phase](img/image00342.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS生命周期阶段](img/image00342.jpeg)'
- en: 'The details of these methods are as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的详细信息如下：
- en: '`componentWillRecieveProps`: This method gets executed whenever a new property
    is created for the component.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillRecieveProps`: 这个方法会在组件创建新的属性时执行。'
- en: '`shouldComponentUpdate`: This method returns a Boolean value `true` or `false`.
    The `true` flag indicates that the `render` method will be called when a new property
    is received.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shouldComponentUpdate`: 这个方法返回一个布尔值`true`或`false`。`true`标志表示在接收到新属性时将调用`render`方法。'
- en: '`componentWillUpdate`: This method get executed just before the new property
    is received by the component. It provides an opportunity for preprocessing before
    the `render` method is called.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUpdate`: 这个方法在组件接收到新属性之前执行。它提供了在调用`render`方法之前进行预处理的机遇。'
- en: '`render`: This method returns the updated component tree for rendering in the
    browser.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render`：此方法返回用于在浏览器中渲染的更新后的组件树。'
- en: '`componentDidUpdate`: This method gets executed just after the modified changes
    are rendered in the browser.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidUpdate`：此方法在修改后的更改在浏览器中渲染后立即执行。'
- en: ReactJS teardown phase
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReactJS 拆解阶段
- en: 'This phase is the last state of a ReactJS component. The instance of the component
    is removed and memory cleanups take place. The following diagram shows the callback
    method that gets executed during this period:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段是 ReactJS 组件的最后一个状态。组件的实例被移除，并进行内存清理。以下图表显示了在此期间执行的回调方法：
- en: '![ReactJS teardown phase](img/image00343.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS 拆解阶段](img/image00343.jpeg)'
- en: The `componentWillUnmount` method gets executed immediately before a component
    is unmounted from the DOM.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentWillUnmount` 方法在组件从 DOM 中卸载之前立即执行。'
- en: ReactJS lifecycle example
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReactJS 生命周期示例
- en: 'In this section, we will develop a simple ReactJS component to demonstrate
    the order of the lifecycle methods in which they are executed. The following code
    contains the definition of the `<Welcome>` element with all of its lifecycle callback
    method:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发一个简单的 ReactJS 组件来演示生命周期方法的执行顺序。以下代码包含了 `<Welcome>` 元素的定义及其所有的生命周期回调方法：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshot shows the output of the `<Welcome>` element when it
    is initialized and rendered for the first time:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `<Welcome>` 元素在初始化和首次渲染时的输出：
- en: '![ReactJS lifecycle example](img/image00344.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS 生命周期示例](img/image00344.jpeg)'
- en: 'When the user presses the first button to change the `myName` property to `John`,
    the lifetime callback method gets executed. The following screenshot shows the
    output of the `<Welcome>` element for the change in the `myName` property:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下第一个按钮将 `myName` 属性更改为 `John` 时，生命周期回调方法会被执行。以下截图显示了 `<Welcome>` 元素在 `myName`
    属性更改时的输出：
- en: '![ReactJS lifecycle example](img/image00345.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS 生命周期示例](img/image00345.jpeg)'
- en: 'When the user presses the second button to remove the `<Welcome>` element,
    the method of the teardown phase gets called. The following screenshot shows the
    output of the preceding code for the `<Welcome>` element, when it is removed from
    the DOM:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下第二个按钮以移除 `<Welcome>` 元素时，会调用拆解阶段的相应方法。以下截图显示了移除 `<Welcome>` 元素时，前述代码的输出：
- en: '![ReactJS lifecycle example](img/image00346.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![ReactJS 生命周期示例](img/image00346.jpeg)'
- en: Note
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the ReactJS component lifecycle methods, use the following
    link:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 ReactJS 组件生命周期方法的信息，请使用以下链接：
- en: '[http://facebook.github.io/react/docs/component-specs.html](http://facebook.github.io/react/docs/component-specs.html)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://facebook.github.io/react/docs/component-specs.html](http://facebook.github.io/react/docs/component-specs.html)'
- en: Stateful custom component
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有状态的定制组件
- en: ReactJS provides features to create and programmatically update the state during
    the creation of a ReactJS element. This increases the interaction of the application.
    The states are private and mutable to the component and referred to using `this.states`.
    The React component provides the `this.setState` method to update the values of
    the state.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS 提供了在创建 ReactJS 元素时创建和程序化更新状态的功能。这增加了应用程序的交互性。状态是私有的，并且对组件是可变的，使用 `this.states`
    来引用。React 组件提供了 `this.setState` 方法来更新状态的值。
- en: 'Let''s check out an example of using the state in the ReactJS element. The
    following code contains the definition of the `<StudentResult>` element:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在 ReactJS 元素中使用状态的示例。以下代码包含了 `<StudentResult>` 元素的定义：
- en: '[PRE18]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The details of the code are as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码的详细信息：
- en: The `<StudentResult>` element has an initial state name `result` with a value
    empty string.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<StudentResult>` 元素有一个初始状态 `result`，其值为空字符串。'
- en: The `render` method contains an `<input>` type `number` to enter a student score.
    This element has the `ref` attribute with `studentScore` for accessing it inside
    the component. A callback method `calculateResult` is bound with the `onChange`
    event.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render` 方法包含一个 `<input>` 类型为 `number` 的输入框，用于输入学生分数。此元素具有 `ref` 属性，其值为 `studentScore`，以便在组件内部访问它。一个回调方法
    `calculateResult` 被绑定到 `onChange` 事件。'
- en: The `calculateResult` method gets the entered score by the user and decides
    **PASS** or **FAIL**. If the score is more than `30`, the result is shown as **PASS**.
    If it is less than `30`, the result is classes as a `FAIL` or else an empty string.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`calculateResult` 方法获取用户输入的分数并决定是 **通过** 还是 **失败**。如果分数超过 `30`，则结果显示为 **通过**。如果分数低于
    `30`，则结果被分类为 `失败` 或者为空字符串。'
- en: The `render` method displays the result using the `{this.state.result}` expression.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render`方法使用`{this.state.result}`表达式显示结果。'
- en: 'The following screenshot shows the output of the `<StudentResult>` component:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`<StudentResult>`组件的输出：
- en: '![Stateful custom component](img/image00347.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![有状态的自定义组件](img/image00347.jpeg)'
- en: 'When the user enters a score the change handler gets executed, and **PASS**
    or **FAIL** gets printed in the browser. The following screenshot shows the output
    of the `<StudentResult>` component when the user enters `45` in the `<input>`
    element:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入分数时，更改处理程序会被执行，并在浏览器中打印出**PASS**或**FAIL**。以下截图显示了当用户在`<input>`元素中输入`45`时`<StudentResult>`组件的输出：
- en: '![Stateful custom component](img/image00348.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![有状态的自定义组件](img/image00348.jpeg)'
- en: Precompiled JSX for production
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境预编译的JSX
- en: 'In ReactJS, the `JSXTranformer.js` file provides the in-browser JSX compilation
    to vanilla JavaScript format. The in-browser compilation is not recommended for
    production due to the following reasons:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在ReactJS中，`JSXTranformer.js`文件提供了浏览器内的JSX编译为纯JavaScript格式。由于以下原因，不建议在生产环境中使用浏览器内编译：
- en: '**Additional computation**: It slows down the rendering speed due to the overhead
    of JSX compilation on the client''s side at runtime.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外计算**：由于JSX在客户端运行时的编译开销，这会减慢渲染速度。'
- en: '**File size**: The `JSXTransformer.js` file size is big. This increases the
    additional load to the client side.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件大小**：`JSXTransformer.js`文件的大小很大。这增加了对客户端的额外负载。'
- en: 'ReactJS comes with a precompiled JSX process to resolve the in-browser compilation
    issue. Using this approach, the developer can compile the JSX to vanilla JavaScript
    in offline mode. We can achieve this offline JSX compilation by installing the
    `react-tool` with the npm package. Assuming that npm is present in the system,
    use the following command to install `react-tool` in the system:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS自带预编译JSX过程，用于解决浏览器中的编译问题。使用这种方法，开发者可以在离线模式下将JSX编译为纯JavaScript。我们可以通过安装带有npm包的`react-tool`来实现离线JSX编译。假设系统中存在npm，请使用以下命令在系统中安装`react-tool`：
- en: '[PRE19]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows the terminal with the `react-tool` package installation
    in progress:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了正在安装`react-tool`包的终端：
- en: '![Precompiled JSX for production](img/image00349.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![生产环境预编译的JSX](img/image00349.jpeg)'
- en: 'To demonstrate the JSX precompilation, we created two subdirectories `dev`
    and `production` under the `precompile` directory. A new ReactJS component `<ShowDate>`
    is defined inside the `react-date.js` file under the `dev` directory. The following
    screenshot shows the terminal with new directory structure:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示JSX预编译，我们在`precompile`目录下创建了两个子目录`dev`和`production`。在`dev`目录下的`react-date.js`文件中定义了一个新的ReactJS组件`<ShowDate>`。以下截图显示了具有新目录结构的终端：
- en: '![Precompiled JSX for production](img/image00350.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![生产环境预编译的JSX](img/image00350.jpeg)'
- en: 'The JSX codes for the `<ShowDate>` element in the `react-date.js` file are
    as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-date.js`文件中`<ShowDate>`元素的JSX代码如下：'
- en: '[PRE20]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: The `<ShowDate>` element definition contains the `getDefaultProps` method that
    returns an object with the `key` name as `today` and the value as `new Date().toDateString()`
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ShowDate>`元素定义包含返回具有`key`名称为`today`和值为`new Date().toDateString()`的对象的`getDefaultProps`方法'
- en: The `<ShowDate>` element definition contains the `render` method returning an
    `h1` element with the `this.props.today` expression for display
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ShowDate>`元素定义包含返回带有`this.props.today`表达式的`h1`元素的`render`方法以进行显示'
- en: 'Now, we can precompile the JSX code present in the `dev/react-date.js` file
    to the vanilla JavaScript. The command for JSX compilation to vanilla JavaScript
    is as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将`dev/react-date.js`文件中存在的JSX代码预编译为纯JavaScript。JSX编译为纯JavaScript的命令如下：
- en: '[PRE21]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows a terminal with JSX precompilation, which converts
    the `react-date.js` file to vanilla JavaScript and moves it to the `production`
    directory:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了进行JSX预编译的终端，它将`react-date.js`文件转换为纯JavaScript并将其移动到`production`目录：
- en: '![Precompiled JSX for production](img/image00351.jpeg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![生产环境预编译的JSX](img/image00351.jpeg)'
- en: 'The compiled vanilla JavaScript code produced by JSX precompiler is as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: JSX预编译器产生的编译后的纯JavaScript代码如下：
- en: '[PRE22]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: It contains a `displayName` property, which has the string value `ShowDate`
    as the name of the ReactJS element
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含一个`displayName`属性，其字符串值为`ShowDate`，作为ReactJS元素的名称
- en: The `render` method creates an `h1` element using the `React.createElement`
    method, the text content `Today` and the `this.props.today` value
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render` 方法使用 `React.createElement` 方法创建一个 `h1` 元素，文本内容为 `Today` 和 `this.props.today`
    的值。'
- en: 'The vanilla JavaScript code present inside the `production\react-date.js` file
    is precompiled and can be used directly in an HTML page without the in-browser
    compilation provided by the `JSXTranformer.js` file. The code for using the `<ShowDate>`
    element is as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `production\react-date.js` 文件中存在的原生 JavaScript 代码已经预编译，可以直接在 HTML 页面中使用，无需
    `JSXTranformer.js` 文件提供的浏览器内编译。使用 `<ShowDate>` 元素的代码如下：
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following screenshot shows the output of the preceding code, where the
    `<ShowDate>` element is displaying the current date:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，其中 `<ShowDate>` 元素正在显示当前日期：
- en: '![Precompiled JSX for production](img/image00352.jpeg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![用于生产的预编译 JSX](img/image00352.jpeg)'
- en: JSX file watcher
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSX 文件监视器
- en: 'The `react-tools` package comes with a file watcher, which can be used to observe
    the code changes in the JSX file and automatically generates the vanilla JavaScript
    code. The following command is used to startup the file watcher:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-tools` 包附带一个文件监视器，可以用来监视 JSX 文件中的代码更改，并自动生成原生 JavaScript 代码。以下命令用于启动文件监视器：'
- en: '[PRE24]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following screenshot shows the terminal with the JSX file watcher, which
    observes the `dev` directory for any JSX code change in the `react-date.js` file.
    Any changes in the JSX code can be logged by the file watcher in the terminal:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有 JSX 文件监视器的终端，该监视器监视 `dev` 目录中 `react-date.js` 文件中的任何 JSX 代码更改。任何 JSX
    代码的更改都可以通过终端中的文件监视器进行记录：
- en: '![JSX file watcher](img/image00353.jpeg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![JSX 文件监视器](img/image00353.jpeg)'
- en: Developing a digital clock using ReactJS
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ReactJS 开发数字时钟
- en: 'In this section, we will develop a digital clock element `<TsClock>` using
    the ReactJS library. The steps to develop a digital clock are as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 ReactJS 库开发一个数字时钟元素 `<TsClock>`。开发数字时钟的步骤如下：
- en: Step1 – defining the digital clock lifecycle script
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1 – 定义数字时钟的生命周期脚本
- en: 'The following code contains the lifecycle callback method definition for a
    `<TsClock>` digital clock element developed in the ReactJS library:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码包含在 ReactJS 库中开发的 `<TsClock>` 数字时钟元素的生命周期回调方法定义：
- en: '[PRE25]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The details of the preceding code are as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的详细信息如下：
- en: This block defines the `<TsClock>` element using the `React.createElement` method.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此块使用 `React.createElement` 方法定义 `<TsClock>` 元素。
- en: It has three default properties named `hour`, `minute`, and `second` with values
    `HH`, `MM`, and `SS` inside the `getDefaultProps` method.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有三个默认属性，名为 `hour`、`minute` 和 `second`，在 `getDefaultProps` 方法中具有 `HH`、`MM` 和
    `SS` 的值。
- en: The `render` method returns the ReactJS component tree with the digital clock
    template. The template displays the values of `hour`, `minute`, and `second` inside
    a ReactJS expression `{}` using the `this.props` object.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render` 方法返回包含数字时钟模板的 ReactJS 组件树。模板使用 `this.props` 对象在 ReactJS 表达式 `{}` 中显示
    `hour`、`minute` 和 `second` 的值。'
- en: The `componentDidMount` lifecycle callback method gets fired when the `<TsClock>`
    element is mounted on the DOM for the first time. This method has the `setInterval`
    method bound with the `updateClock` method, with a duration of 1 second.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 `<TsClock>` 元素首次在 DOM 上挂载时，会触发 `componentDidMount` 生命周期回调方法。该方法将 `setInterval`
    方法与 `updateClock` 方法绑定，持续时间为 1 秒。
- en: The `updateClock` method creates a new date object and modifies the value of
    `hour`, `minute`, and `second` properties by calling the `setProps` method provided
    by ReactJS. After updating the value of `hour`, `minute`, and `second`, the `setProps`
    method calls the `render` method in the background. This updates the DOM in the
    browser displaying the latest time.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateClock` 方法创建一个新的日期对象，并通过调用 ReactJS 提供的 `setProps` 方法修改 `hour`、`minute`
    和 `second` 属性的值。在更新 `hour`、`minute` 和 `second` 的值之后，`setProps` 方法在后台调用 `render`
    方法。这会更新浏览器中的 DOM，显示最新时间。'
- en: Step2 – defining CSS styles for the digital clock
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤2 – 定义数字时钟的 CSS 样式
- en: 'The following CSS code is used to apply styles to a digital clock:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 CSS 代码用于应用数字时钟的样式：
- en: '[PRE26]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following screenshot shows the output of the preceding code with the digital
    clock containing `hour`, `minute`, and `second` properties:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出，其中包含具有 `hour`、`minute` 和 `second` 属性的数字时钟：
- en: '![Step2 – defining CSS styles for the digital clock](img/image00354.jpeg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![步骤2 – 定义数字时钟的 CSS 样式](img/image00354.jpeg)'
- en: Debugging ReactJS
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 ReactJS
- en: 'ReactJS provides a debugging tool for the Chrome browser. It can be installed
    to the Chrome browser using the following link:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS为Chrome浏览器提供了一个调试工具。您可以使用以下链接将其安装到Chrome浏览器中：
- en: '[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)'
- en: 'The following screenshot shows the Chrome store with the ReactJS debugging
    tool:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有ReactJS调试工具的Chrome商店：
- en: '![Debugging ReactJS](img/image00355.jpeg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![调试ReactJS](img/image00355.jpeg)'
- en: 'After successful installation of **React Developer Tools**, we can see a new
    tab name **React** added to the Chrome developer console. The **React Developer
    Tools** tab contains the following five different windows for debugging:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装**React开发者工具**后，我们可以在Chrome开发者控制台中看到一个名为**React**的新标签页。**React开发者工具**标签页包含以下五个不同的调试窗口：
- en: '**Elements**: This window shows the ReactJS element markup for the rendered
    page.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元素**：此窗口显示了渲染页面的ReactJS元素标记。'
- en: '**Props**: This window lists all the properties used by the `React` element.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：此窗口列出了`React`元素使用的所有属性。'
- en: '**State**: This window lists all the states used by the `React` element.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：此窗口列出了`React`元素使用的所有状态。'
- en: '**Component**: This window lists all the properties and methods used by the
    `React` element.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：此窗口列出了`React`元素使用的所有属性和方法。'
- en: '**Event Listeners**: This window lists all the event listeners used by the
    `React` element.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件监听器**：此窗口列出了`React`元素使用的所有事件监听器。'
- en: 'The following screenshot shows the React developer tool for the digital clock
    `<TsClock>` element:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了数字时钟`<TsClock>`元素的React开发者工具：
- en: '![Debugging ReactJS](img/image00356.jpeg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![调试ReactJS](img/image00356.jpeg)'
- en: Note
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To find out more about the React developer tool for debugging use the following
    link:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于React开发者工具的调试信息，请使用以下链接：
- en: '[http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html](http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html](http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html)'
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the ReactJS library and its different features,
    such as JSX, virtual DOM, and custom component development. We understood the
    flux architecture and how data flows in a ReactJS-based application. With this
    chapter, we have come to the end of this book. I hope you now understand the web
    component specification concepts. Happy coding!
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了ReactJS库及其不同的功能，例如JSX、虚拟DOM和自定义组件开发。我们了解了Flux架构以及数据在基于ReactJS的应用程序中的流动方式。随着本章的结束，我们这本书也告一段落。希望你现在已经理解了Web组件规范的概念。祝您编码愉快！
