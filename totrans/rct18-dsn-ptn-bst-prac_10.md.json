["```js\nimport React, { useState } from 'react'\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  function handleClick() {\n    setCount(count + 1)\n  } \n  return (\n    <button onClick={handleClick}>\n      {count}\n    </button>\n  )\n}\nfunction App() {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Counter />\n    </React.Suspense>\n  )\n}\nReactDOM.createRoot(document.getElementById('root')).render(<App />) \n```", "```js\nfunction MyComponent() {\n  const [count, setCount] = useState(0)\n  function handleClick() {\n    setCount(count + 1)\n    setCount(count + 1)\n    setCount(count + 1)\n  }\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleClick}>Increment</button>\n    </div>\n  )\n} \n```", "```js\nimport { useState } from 'react'\nimport { Transition } from 'react-transition-group'\nfunction MyComponent() {\n  const [show, setShow] = useState(false)\n  function handleClick() {\n    setShow(!show)\n  }\n  return (\n    <div>\n      <button onClick={handleClick}>\n        {show ? 'Hide' : 'Show'}\n      </button>\n      <Transition in={show} timeout={300}>\n        {(state) => (\n          <div\n            style={{\n              transition: 'opacity 300ms ease-out',\n              opacity: state === 'entered' ? 1 : 0,\n            }}\n          >\n            {show && <p>Hello, world!</p>}\n          </div>\n        )}\n      </Transition>\n    </div>\n  )\n} \n```", "```js\nimport { Suspense } from 'react'\nimport { fetchUserData } from './api'\nfunction MyComponent() {\n  const userData = fetchUserData();\n  return (\n    <div>\n      <p>Name: {userData.name}</p>\n      <Suspense fallback={<p>Loading...</p>}>\n        <UserProfile userId={userData.id} />\n      </Suspense>\n    </div>\n  )\n} \n```", "```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nconst App = () => {\n  return <div>Hello, world!</div>\n}\nReactDOM.render(<App />, document.getElementById('root')) \n```", "```js\nconst App = () => {\n  return <div>Hello, world!</div>\n}\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(<App />) \n```", "```js\nconst root = ReactDOM.createRoot(document.getElementById('root'), { mode: 'concurrent' })\nroot.render(<App />) \n```", "```js\nimport React from 'react'\nimport { createRoot, hydrateRoot } from 'react-dom'\nconst App = () => {\n  return <div>Hello, world!</div>\n}\nconst root = createRoot(document.getElementById('root'))\nif (root.isMounted()) {\n  hydrateRoot(document.getElementById('root'), <App />)\n} else {\n  root.render(<App />)\n} \n```", "```js\nimport React from 'react'\nimport { renderToPipeableStream } from 'react-dom/server'\nimport { createServer } from 'http'\nconst App = () => {\n  return <div>Hello, world!</div>\n}\nconst server = createServer((req, res) => {\n  const stream = renderToPipeableStream(<App />)\n  stream.pipe(res)\n})\nserver.listen(3000) \n```", "```js\nimport { useId } from 'react'\nconst MyComponent = () => {\n  const id = useId()\n  return <div id={id}>Hello, world!</div>\n} \n```", "```js\nimport { useId } from 'react'\nconst MyComponent = () => {\n  const id = useId('my-prefix')\n  return <div id={id}>Hello, world!</div>\n} \n```", "```js\nimport React, { useState, useTransition } from 'react'\nconst MyComponent = () => {\n  const [data, setData] = useState(null)\n  const [startTransition, isPending] = useTransition({ timeoutMs: 3000 })\n  const handleClick = () => {\n    startTransition(() => {\n      const newData = fetchData()\n      setData(newData)\n    })\n  }\n  return (\n    <div>\n      {isPending && <LoadingSpinner />}\n      <button onClick={handleClick}>Fetch Data</button>\n      {data && <DataDisplay data={data} />}\n    </div>\n  )\n} \n```", "```js\nimport { useState, useDeferredValue } from 'react'\nfunction MyComponent() {\n  const [x, setX] = useState(0)\n  const deferredX = useDeferredValue(x, { timeoutMs: 100 })\n  function handleClick() {\n    setX(x => x + 100)\n  }\n  return (\n    <div style={{ transform: `translateX(${deferredX}px)` }} onClick={handleClick}>\n      Click me!\n    </div>\n  )\n} \n```", "```js\nimport { useInsertionEffect } from 'react'\nfunction MyComponent() {\n  useInsertionEffect(() => {\n    const canvas = document.createElement('canvas')\n    canvas.width = 300\n    canvas.height = 200\n    canvas.style.backgroundColor = 'red'\n    document.body.appendChild(canvas)\n    return () => {\n      document.body.removeChild(canvas)\n    }\n  }, [])\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <p>This is my React component.</p>\n    </div>\n  )\n} \n```", "```js\nimport React from 'react'\nfunction MyComponent() {\n  return (\n    <React.StrictMode>\n      <div>\n        <h1>Hello, world!</h1>\n        <p>This is my React component.</p>\n      </div>\n    </React.StrictMode>\n  )\n} \n```", "```js\nconst getPokemons = async () => {\n  const response = await fetch('https://pokeapi.co/api/v2/pokemon')\n  if (response.ok) {\n    const pokemons = await response.json()\n    console.log(pokemons)\n  } else {\n    console.error(`${response.status} ${response.statusText}`)\n  }\n}\ngetPokemons() \n```", "```js\nimport test from 'node:test'\nimport assert from 'node:assert' \n```", "```js\nimport test from 'node:test'\nimport assert from 'node:assert'\ntest('Math tests', async (t) => {\n  await t.test('Multiply test', (t) => {\n    const n = 2 * 2\n    assert.equal(n, 4)\n  })\n  await t.test('Sum test', (t) => {\n    const n = 5 + 3\n    assert.equal(n, 8)\n  })\n}) \n```", "```js\nnode --watch <file or directory to observe> \n```"]