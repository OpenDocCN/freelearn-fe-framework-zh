- en: Chapter 5. Component Life cycle and Newer ECMAScript in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have explored React component properties and how we need to initialize,
    update, and change the component's state(s) for interactive applications. Let's
    now explore the lifecycle of such a React component in this chapter. We will also
    dig into future ECMAScript syntax and a few changes that the React community also
    used from version 0.13.0\. For this, we will review some ES6 and ES7 features
    within the React library.
  prefs: []
  type: TYPE_NORMAL
- en: While creating any React component by calling `React.createClass()`, we need
    to always have a render method. This render method returns a description of the
    DOM. React has a performance edge in our applications because React maintains
    a fast in-memory representation of the DOM and never directly interacts with the
    actual DOM. Thus, when the render method returns the description of the DOM, React
    can compare the difference between the actual DOM and the in-memory representation,
    and, based on the difference(s), re-renders the view accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: React component lifecycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using React with ECMAScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React component lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per Facebook''s React documentation from [http://facebook.github.io/react/docs/working-with-the-browser.html](http://facebook.github.io/react/docs/working-with-the-browser.html),
    the React component lifecycle can be broadly classified into three categories
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"**Mounting****:** A component is being inserted into the DOM.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Updating****:** A component is being re-rendered to determine if the DOM
    should be updated.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Unmounting:** A component is being removed from the DOM.**"***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: React provides lifecycle methods that you can specify to hook into this process.
    We provide `will` methods, which are called right before something happens, and
    `did` methods which are called right after something happens.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Mounting** is the process of publishing the virtual representation of a component
    into the final UI representation (for example, DOM or native components). In a
    browser, it would mean publishing a React element into an actual DOM element in
    the DOM tree.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method Name | Method Function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `getInitialState()` | This method is invoked before the component is mounted.In
    the case of stateful components, this method returns the initial state data. |'
  prefs: []
  type: TYPE_TB
- en: '| `componentWillMount()` | This method is called just before React mounts the
    component in the DOM. |'
  prefs: []
  type: TYPE_TB
- en: '| `componentDidMount()` | This method is called immediately after mounting
    occurs. The initialization process that DOM nodes requires should go within this
    method. |'
  prefs: []
  type: TYPE_TB
- en: Like in the previous chapters, most of the code in the `index.html` is the same.
    We will only be replacing the contents of the JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of `index.html` will become as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Initially, we can see the value of `myButton` set to **11**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mounting category](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The value of `myButton` increases by two when the `onClick(addOnClick)` event
    occurs. Thus, the value of state changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mounting category](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Value of `myButton` increases by two when the `onClick` event occurs
  prefs: []
  type: TYPE_NORMAL
- en: If we add the `componentWillMount` method to the preceding code, we will be
    able to see that the React component is only mounted in the DOM once, but is rendered
    each time we click on the button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The screenshot of the app component mounting on the DOM shows in the console,
    **MyButton component is mounting**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mounting category](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of app component mounting on the DOM
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the last mounting method, `componentDidMount`, which is called
    after the component is mounted. As you can see in the next screenshot, the console
    shows the component has been mounted once but the component is rendered the number
    of times we click on the button, four times in this case: `11 + (2*4) =19`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The screenshot shows methods where mounting and mounted on the DOM is called
    once, though rendering happens. Thus, after the `componentDidMount` method is
    executed, in the console we can see the output **MyButton component is mounted**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mounting category](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of methods where mounting and mounted on the DOM is called once,
    though rendering happens
  prefs: []
  type: TYPE_NORMAL
- en: Updating category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The React component lifecycle allows updating components at runtime. This can
    be done using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method Name | Method Function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `componentWillReceiveProps(object nextProps)` | This method is invoked when
    a mounted React component receives new properties (props). This means you can
    use it to compare between `this.props`, the current set of properties, and `nextProps`,
    the new property values. There is no similar method like `componentWillReceiveState`.
    Thus, an incoming property transition may cause a state change, but an incoming
    state may not cause a property change. If we want to perform some operation in
    response to a state change, we would need to use the method `componentWillUpdate`.Thus,
    the component''s property changes will be rendered in the updated view without
    re-rendering the view. |'
  prefs: []
  type: TYPE_TB
- en: '| `shouldComponentUpdate(object nextProps, object nextState)` | This method
    is invoked when a component requires an update in the DOM.The return type is boolean
    (`true`/`false`).It returns `false` when there is no change in the props and/or
    state, which will prevent `componentWillUpdate` and `componentDidUpdate` from
    being called. |'
  prefs: []
  type: TYPE_TB
- en: '| `componentWillUpdate(object nextProps, object nextState)` | As the name suggests,
    this method is invoked immediately before updating occurs, but not in the first
    render call.`this.setState()` cannot be called within this lifecycle method. To
    update a state in response to a property change, use `componentWillReceiveProps`
    instead. |'
  prefs: []
  type: TYPE_TB
- en: '| `componentDidUpdate(object prevProps, object prevState)` | This is invoked
    immediately after updating occurs in the DOM and not during the initial `render()`
    call. |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s add the preceding methods in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Execute the preceding code to see the following output. We can see the various
    lifecycle events of the React component and the corresponding output they give
    in the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating category](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of component being updated
  prefs: []
  type: TYPE_NORMAL
- en: Unmounting category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`componentWillUnmount()` is invoked immediately before a component is unmounted
    and destroyed. You should perform any necessary cleanup here.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here's the complete example encompassing all the lifecycle methods of a React
    component. The `index.html` is the same as the preceding.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the corresponding `index.js` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following:'
  prefs: []
  type: TYPE_NORMAL
- en: After executing the preceding code, we will be able to see two buttons as **Mount**
    and **Unmount**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial value of the component is set to **11**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onClick` on the React component; its value is increased by a value of two'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While clicking on the **Mount**, the lifecycle methods of the React component
    is called
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each of these lifecycle methods, we can see an output in the console![Unmounting
    category](img/00028.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screenshot of unmouting the component from the DOM
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: Mounted composite components support the method `component.forceUpdate()`.
    This method can be invoked on any mounted component, in case of some changes in
    the deeper aspect of the component, without using `this.setState()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our React component''s lifecycles are shown next. The lifecycles are highlighted
    in the right portion of the developer tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Unmounting category](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot showing the React component's lifecycle, as highlighted in the right
    portion of the developer tool
  prefs: []
  type: TYPE_NORMAL
- en: Other ES (ECMAScript) versions in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the second half of this chapter, we will explore how React supports newer
    versions of ECMAScript. Until now, we have explored the different lifecycle methods
    in a React component. In this section of the chapter, we will dig into something
    different: how changes in the new version of ECMAScript have been adopted by React.'
  prefs: []
  type: TYPE_NORMAL
- en: ES6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ES6** is the current version of the ECMAScript Language Specification Standard.
    Further details about the changes and the new things incorporated can be found
    on the Mozilla Development Network site: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla)'
  prefs: []
  type: TYPE_NORMAL
- en: Complete documentation for ES6 is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the Facebook documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with React 0.13.0 a transpiler allows us to use ES6 classes. JavaScript
    originally didn''t have a built-in class system. The developer team wanted class
    creation using the idiomatic JavaScript style. Therefore instead of `React.createClass`
    the developer team has introduced a component. You can use the transpiler they
    ship with `react-tools` by making use of the harmony option and setting it to
    `true` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By looking through [https://www.npmjs.com/package/react-tools](https://www.npmjs.com/package/react-tools),
    you can find details of the different options you can pass with the JSX Transformer.
    `--harmony` turns on JS transformations such as ES6 classes and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, ES6 syntax will be transformed into ES5 compatible syntaxes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Transpiling** is a method for taking source code written in one language
    and transforming it into another language that has a similar level of abstraction.'
  prefs: []
  type: TYPE_NORMAL
- en: When TypeScript is compiled and is transformed by the compiler into JavaScript,
    it has very similar levels of abstraction. Hence, it is called transpiling.
  prefs: []
  type: TYPE_NORMAL
- en: Here, React classes are defined as a plain JavaScript class. Let's go through
    the following code from their documentation with some modifications and explanations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code within `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted line with the argument as `harmony=true` ensures that the jsx
    syntax with ES6 code should be transpiled into JavaScript using ES5 syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code within `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Line 1: Declaring the React component `ES6Component`, which extends from `React.Component`
    instead of `React.createClass`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 2: The render function call syntax is different. Before, it was'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is a screenshot demonstrating it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ES6](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the React component using ES6
  prefs: []
  type: TYPE_NORMAL
- en: Instead of `getInitialState` in `React.createClass`, using ES6 the new constructor
    has the new own state property in `React.Component`, which is exported.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![ES6](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the React component using ES6
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of React using ES6 is No Autobinding.
  prefs: []
  type: TYPE_NORMAL
- en: As with ES6 classes, which do not automatically bind to the instance, we need
    to use bind.(this) **OR** use the arrow sign (`=>`) explicitly in ES6.
  prefs: []
  type: TYPE_NORMAL
- en: Following these ES6 syntaxes, we can rewrite our sample app from Chapter XX,
    which lists the user's likes in Facebook. Just as before, if the user clicks on
    the liked-page name, the string **I Liked it** will be updated on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes as per the new ES6 syntaxes are highlighted next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`let` is used instead of `var` to declare a variable in a local scope.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output remains the same, as per the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ES6](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the React app, fetching the user's liked pages, using ES6 syntaxes
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: ES6 does not support mixins. Mixins will be covered later in this book
    in [Chapter 7](part0044_split_000.html#page "Chapter 7. Making Your Component
    Reusable"), *Making your Component Reusable*, in more detail. Mixins are used
    to write reusable codes in React applications.'
  prefs: []
  type: TYPE_NORMAL
- en: ES7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ECMAScript7 is one step beyond ES6\. Even before ES6 was finalized, new features
    started to be proposed. Please view the experimental and stabilized feature list
    at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_7_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_7_support_in_Mozilla)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping ES7 in mind, the React developer community presented us with some syntactic
    sugar to the existing React class code. In the future version of JavaScript (ES7),
    there can be more declarative syntax for property initialization, as this would
    be a more idiomatic way of expressing. Here''s a quick example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through the lifecycle of a typical React component,
    the various phases it undergoes, and how React renders the view based on the diff-ing
    algorithm (that is, calculating the deltas between the virtual DOM and the actual
    DOM).
  prefs: []
  type: TYPE_NORMAL
- en: In the second part of the chapter, we explored the future of ECMAScript and
    how React.js already supports it. For this, we have used sample code examples
    from Facebook's documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss React's reusable components known as mixins.
    We will also explore how we can add validations in a React-based application.
    Validations are required for apps that accept user input. User inputs should be
    validated before being sent to the server, to prevent malicious or invalid content
    from being sent.
  prefs: []
  type: TYPE_NORMAL
