- en: Chapter 6. Building Web Components with ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about the "react way" for web component development
    offered by the Facebook team. We will also learn to develop a web component using
    the ReactJS library. We will explore the flux architecture of a web application
    and understand how the data flows in it. Finally, we will develop a custom component
    using the ReactJS library.
  prefs: []
  type: TYPE_NORMAL
- en: The reactive approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before understanding the ReactJS framework in detail, we should know some of
    the applications that have been developed. The comment section of Facebook, LiveFyre,
    and Disqus are developed using ReactJS. These applications are developed by following
    the flux architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The flux architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A flux application has three important parts—**dispatcher**, **store**, and
    **views**. These parts are connected by **action**. The following diagram shows
    the three building blocks and action data flow in the flux architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The flux architecture](img/image00330.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The details of these three parts of flux architecture are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**View**: This represents the UI components that are rendered in the browser
    to be used by the end users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store**: This holds the application data and business logic. It is similar
    to the model of the MVC framework. **Store** represents a collection of data objects,
    whereas model represents a single object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dispatcher**: This is the central hub through which all actions have to pass.
    It contains all the callback registered by the stores.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Applications developed in flux architecture work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Generally, actions are generated by the user, interacting with the views. These
    actions are asynchronous in nature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These actions are then passed to the dispatcher for processing. The dispatcher
    then invokes the callback method registered in the store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The execution of the callback method may change the state of the data. The store
    then emits the change event with the updated data. The view listens to the change
    event and accesses the modified data from the store using event handler. The view
    then calls their own `setState` method, which causes the re-rendering of itself
    and its children element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data flow is unidirectional. Flux architecture does not allow two-way data
    binding, which can cause more cascading updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The data flow in flux-based application is unidirectional.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Flux key features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The flux architecture provides some key features that a flux-based web application
    must follow. These key features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Synchrony**: All the callback methods registered for each action are synchronous
    in execution, but the action is triggered asynchronously from the source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inversion of control**: The flow of control is transferred to the appropriate
    store object and targeted callback.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Semantic actions**: The action triggered from the source contains some sematic
    information, which helps the store object decide the appropriate method execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No cascading actions**: Flux disallows cascading actions that generate multiple
    updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out more about flux architecture use the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://fluxxor.com/what-is-flux.html](http://fluxxor.com/what-is-flux.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Installing ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ReactJS library can be installed using Bower. Assuming that Bower is already
    present in your machine, use the following command to install the ReactJS library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the terminal with ReactJS installation in progress
    using Bower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing ReactJS](img/image00331.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After successful execution of the Bower command, the system loads the ReactJS
    library file inside the `react` subdirectory present inside the `bower_components`
    directory. The following screenshot shows the files present inside the ReactJS
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing ReactJS](img/image00332.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The ReactJS library has three different parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ReactJS core library**: This is the core ReactJS library. The name of this
    file is `ReactJS` and the minified version of this library is `react.min.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReactJS addon**: This represents the additional utility packages that can
    be used with ReactJS. The name of this file is `react-with-addons.js` and the
    minified version of this library is `react-with-addons.min.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSX transformer library**: This library can be used in the browser to transfer
    the JSX code to JavaScript. The name of this file is `JSXTransformer.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ReactJS library can be used as a standalone or with the JSX transformer
    file. We will find out more about JSX in the coming section. For now, we can include
    the following `<script>` tag to start using the ReactJS library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The ReactJS library can also be used directly from the Facebook CDN to increase
    the performance of the page load. The `<script>` code to load the ReactJS library
    from the CDN is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the writing of this book, the ReactJS library has the 0.12.2 version.
  prefs: []
  type: TYPE_NORMAL
- en: Using ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the ReactJS library by including the `ReactJS` or `rect.min.js`
    file using the `<script>` element. We can create a DOM element using the `React.createElement`
    method. The syntax for the `createElement` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding syntax are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type`: This represents the HTML element name in a string format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`properties`: This represents an object with the key-value pair for attribute
    name and values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`children`: This represents the child nodes that an element can have'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `React` element can be rendered in the browser using the `React.render` method.
    The syntax for the `render` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding syntax are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`reactElement`: It represents the ReactJS element which need to be rendered
    in the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`targetDOMNode`: It represent the DOM node where the ReactJS element needs
    to be appended for displaying in browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s checkout an example for displaying the `React` element using the
    `createElement` and `render` method. The following code shows the use of these
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A header element `h1` is created using the `React.createElement` method. This
    header element has a `headerStyle` class and a child node of type `TEXT` with
    a `Hello ReactJS` value. Reference of this header element is saved in the `helloMessage`
    variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `React.render` method is used to display the header element `helloMessage`
    in the `document.body` position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the preceding code is rendered in the following screenshot containing
    the **Hello ReactJS** string message in the color red:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using ReactJS](img/image00333.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: What is JSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ReactJS comes with another flavor named JSX. **JSX** stands for **JavaScript
    XML**. It follows XML type element declaration for web component development.
    There are many benefits of using JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Familiarity**: Developers are familiar with XML, and JSX provides a similar
    type of element declaration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Semantics**: JSX is easier to understand as it follows a declarative type
    of programming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Separation of concern**: JSX provides a clean way to encapsulate all the
    logic and markup in one definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom components with JSX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ReactJS provides the `JSXTransformer.js` script file for transpiling of the
    JSX code in the browser. A JSX code block is defined using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A custom element can be created using the `React.createClass` method. The syntax
    for the `createClass` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding syntax, the `objectSpecification` class takes a `render` method
    and other optional lifecycle methods and properties. We will learn more about
    the lifecycle method and properties in the coming sections. For now, let''s check
    out an example of developing a custom element using JSX. The following code contains
    the use of the `createClass` method to develop a custom element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A custom element named `HelloMessage` is created using the `React.createClass`
    method inside a `<script>` block with `type` set to `text/jsx`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The specification object contains the `render` method, which has a JSX element.
    The `h1` element has a `className` attribute. The `className` attribute is a JSX
    attribute, but looks familiar to an HTML element attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The specification object for `HelloMessage` contains a `render` method which
    returns a JSX element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<HelloMessage>` element is then rendered using the `React.render` method
    inside the `<body>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the preceding code is rendered as the following screenshot. We
    can find a similar result that the **Hello ReactJS** message is rendered in red
    color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom components with JSX](img/image00334.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: ReactJS inline style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In ReactJS, we can add an inline style using the `style` attribute and ReactJS
    expression. ReactJS takes inline style as a JavaScript *anonymous object* containing
    a key/value pair representing properties and their values separated with a *colon*
    (`:`). The following syntax shows the JavaScript object for inline style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding syntax are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`styleAttribute`: This represents the CSS property name as key. The name should
    follow **camelCase** representation. For example, the `box-shadow` style attribute
    becomes `boxShadow`. The vendor prefix attribute starts with a capital letter
    except `ms`(Microsoft Internet Explorer).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styleValue`: This represents a value for the CSS property, and it is in string
    format. For example, `1px solid grey` should be wrapped in double quotes like
    `"1px solid grey"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s check out an example for using inline style in a ReactJS element. The
    code for the ReactJS element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `messageStyle` object contains an anonymous object containing the CSS attribute's
    name as `key` and the styles as a string `value`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This `messageStyle` object is then bound with the `style` attribute of the `div`
    element using curly braces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the preceding code is shown in the following screenshot, with
    the `style` attributes applied to the `div` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS inline style](img/image00335.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: ReactJS event handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The event handling in ReactJS is similar to DOM events, with a difference in
    naming the handler. For example, an `onclick` handler is renamed to `onClick`
    in ReactJS. This follows the camelCase syntax to name the handler. Let''s check
    out an example of event handling. The following code shows a simple example of
    event handling in ReactJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the code are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<SayHello>` element is created using the `React.createClass` method. The
    `render` method contains the `<button>` element with an `onClick` event handler,
    which is bound to the `helloHandler` method using `this` keyword. The `this` keyword
    refers to the `<SayHello>` custom element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `helloHandler` method definition is present inside the specification object.
    This method contains an `alert` method with a string message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the preceding code contains a button with the **Click Me** text
    and is rendered as the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS event handling](img/image00336.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on this button, the `helloHandler` method gets called
    and an alert window appears, containing the **Hello Developers** message. The
    output of the preceding code is rendered in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS event handling](img/image00337.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out more about the event handling system in ReactJS library use the
    following link: [http://facebook.github.io/react/docs/events.html](http://facebook.github.io/react/docs/events.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Useful non-DOM attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will learn some non-DOM attributes that can be used with
    the JSX element. The following list contains some of the non-DOM attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key`: This is an optional attribute that can be used to uniquely identify
    each component in the page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ref`: This is an optional attribute that can be used to access the child element
    from outside the `render` method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dangerouslySetInnerHTML`: This attribute can be used inside the JSX element
    to set HTML content inside the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let'' check out a simple example with the use of these three attributes. The
    code for this example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<StudentsReport>` element contains the `render` method, which has the `studentDetails`
    object containing `headerHTML`, `subject`, and `list` properties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `headerHTML` properties contain another object with the `__html` property,
    which has HTML content wrapped in an `<i>` element. The `headerHTML` property
    is used with the `dangerouslySetInnerHTML` attribute of a `React` element present
    inside the `render` block. The `dangerouslySetInnerHTML` attribute is used to
    bind the HTML content in runtime. The code to bind HTML is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `list` property contains an array of student objects with the `roll` and
    `name` properties. A `map` function is used to iterate over the list array. While
    iterating `<li>` elements, the `key` attribute takes its value from `roll` property
    and the inner text takes its value from `name` property. The `key` attribute is
    used for uniquely identifying the `<li>` student element. The code to bind student
    details is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `subject` property contains the name of the course taken by all the students.
    In the `render` block, `subject` is bound with the `h1` element and with a `ref`
    attribute named `subjectName`. The `render` block also contains the `<button>`
    element which is attached with an `onClick` handler referring to the `logSubject`
    method. The `logSubject` method does the following two things:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It retrieves the entire referred element using the `this.refs` property and
    finds `studentName` and prints it in the console. It returns a ReactJS element.
    The code to access `studentName` is as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'It retrieves the DOM version of the `React` element using the `getDOMNode`
    method. The code to access the DOM version of `studentName` is as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code is rendered as the following screenshot, where
    the `dangerouslySetInnerHTML` attribute renders the HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Useful non-DOM attributes](img/image00338.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the **Log Subject** button, it prints the ReactJS and
    DOM element for the `this.refs.subjectName` value in the console. The following
    screenshot shows the Chrome developer console with two printed messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Useful non-DOM attributes](img/image00339.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: ReactJS component lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every object in the word has a lifecycle and passes through different states
    during its lifetime. We can categorize these states into three different phases.
    The following diagram shows these three common phases that an element goes through
    in its lifetime:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS component lifecycle](img/image00340.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The details of these phases are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initialization**: This is the phase when the instance for the element is
    created for the first time. Subsequent instances during the lifetime have slight
    changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lifetime**: This is the phase when an element lives and changes its states
    and properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Teardown**: This is the phase when an element finishes its execution and
    cleanup takes place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, each ReactJS element has a lifecycle and has different callback methods
    to handle each state. We will now learn how the ReactJS element goes through each
    of these phases.
  prefs: []
  type: TYPE_NORMAL
- en: ReactJS initialization phase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this phase, a ReactJS element instance is created for the first time and
    rendered in the browser. ReactJS provides a set of methods for the setup and preprocessing
    during this phase. During initialization of an element, the methods are called
    in a specific order. The following diagram shows the order in which the callback
    methods are called during the initialization phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS initialization phase](img/image00341.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The details of these methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getDefaultProps`: This method is used to create default properties for a ReactJS
    element. This method must return an object or NULL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getInitialState`: This method is used to create states for the component.
    This method must return an object or NULL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillMount`: This method gets executed just before the component is
    mounted to the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render`: This method returns the ReactJS component tree for rendering in the
    browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidMount`: This method gets executed just after the initial rendering
    of the component in the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS lifetime phase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the ReactJS component is instantiated successfully, the lifetime phase
    starts. In this phase, the component can go through many changes. These changes
    include a change in the current state, or a change in any property value. ReactJS
    provides a set of callback methods for overriding and implementing our own logic
    for these states .The following diagram shows the order in which the callback
    methods are called during lifetime phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS lifetime phase](img/image00342.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The details of these methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentWillRecieveProps`: This method gets executed whenever a new property
    is created for the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shouldComponentUpdate`: This method returns a Boolean value `true` or `false`.
    The `true` flag indicates that the `render` method will be called when a new property
    is received.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUpdate`: This method get executed just before the new property
    is received by the component. It provides an opportunity for preprocessing before
    the `render` method is called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render`: This method returns the updated component tree for rendering in the
    browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidUpdate`: This method gets executed just after the modified changes
    are rendered in the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReactJS teardown phase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This phase is the last state of a ReactJS component. The instance of the component
    is removed and memory cleanups take place. The following diagram shows the callback
    method that gets executed during this period:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS teardown phase](img/image00343.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `componentWillUnmount` method gets executed immediately before a component
    is unmounted from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: ReactJS lifecycle example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will develop a simple ReactJS component to demonstrate
    the order of the lifecycle methods in which they are executed. The following code
    contains the definition of the `<Welcome>` element with all of its lifecycle callback
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the `<Welcome>` element when it
    is initialized and rendered for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS lifecycle example](img/image00344.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user presses the first button to change the `myName` property to `John`,
    the lifetime callback method gets executed. The following screenshot shows the
    output of the `<Welcome>` element for the change in the `myName` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS lifecycle example](img/image00345.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user presses the second button to remove the `<Welcome>` element,
    the method of the teardown phase gets called. The following screenshot shows the
    output of the preceding code for the `<Welcome>` element, when it is removed from
    the DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ReactJS lifecycle example](img/image00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out more about the ReactJS component lifecycle methods, use the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://facebook.github.io/react/docs/component-specs.html](http://facebook.github.io/react/docs/component-specs.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Stateful custom component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReactJS provides features to create and programmatically update the state during
    the creation of a ReactJS element. This increases the interaction of the application.
    The states are private and mutable to the component and referred to using `this.states`.
    The React component provides the `this.setState` method to update the values of
    the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check out an example of using the state in the ReactJS element. The
    following code contains the definition of the `<StudentResult>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<StudentResult>` element has an initial state name `result` with a value
    empty string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `render` method contains an `<input>` type `number` to enter a student score.
    This element has the `ref` attribute with `studentScore` for accessing it inside
    the component. A callback method `calculateResult` is bound with the `onChange`
    event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `calculateResult` method gets the entered score by the user and decides
    **PASS** or **FAIL**. If the score is more than `30`, the result is shown as **PASS**.
    If it is less than `30`, the result is classes as a `FAIL` or else an empty string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `render` method displays the result using the `{this.state.result}` expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the `<StudentResult>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stateful custom component](img/image00347.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user enters a score the change handler gets executed, and **PASS**
    or **FAIL** gets printed in the browser. The following screenshot shows the output
    of the `<StudentResult>` component when the user enters `45` in the `<input>`
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stateful custom component](img/image00348.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Precompiled JSX for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In ReactJS, the `JSXTranformer.js` file provides the in-browser JSX compilation
    to vanilla JavaScript format. The in-browser compilation is not recommended for
    production due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Additional computation**: It slows down the rendering speed due to the overhead
    of JSX compilation on the client''s side at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File size**: The `JSXTransformer.js` file size is big. This increases the
    additional load to the client side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ReactJS comes with a precompiled JSX process to resolve the in-browser compilation
    issue. Using this approach, the developer can compile the JSX to vanilla JavaScript
    in offline mode. We can achieve this offline JSX compilation by installing the
    `react-tool` with the npm package. Assuming that npm is present in the system,
    use the following command to install `react-tool` in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the terminal with the `react-tool` package installation
    in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Precompiled JSX for production](img/image00349.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To demonstrate the JSX precompilation, we created two subdirectories `dev`
    and `production` under the `precompile` directory. A new ReactJS component `<ShowDate>`
    is defined inside the `react-date.js` file under the `dev` directory. The following
    screenshot shows the terminal with new directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Precompiled JSX for production](img/image00350.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The JSX codes for the `<ShowDate>` element in the `react-date.js` file are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<ShowDate>` element definition contains the `getDefaultProps` method that
    returns an object with the `key` name as `today` and the value as `new Date().toDateString()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ShowDate>` element definition contains the `render` method returning an
    `h1` element with the `this.props.today` expression for display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we can precompile the JSX code present in the `dev/react-date.js` file
    to the vanilla JavaScript. The command for JSX compilation to vanilla JavaScript
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a terminal with JSX precompilation, which converts
    the `react-date.js` file to vanilla JavaScript and moves it to the `production`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Precompiled JSX for production](img/image00351.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The compiled vanilla JavaScript code produced by JSX precompiler is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It contains a `displayName` property, which has the string value `ShowDate`
    as the name of the ReactJS element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `render` method creates an `h1` element using the `React.createElement`
    method, the text content `Today` and the `this.props.today` value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The vanilla JavaScript code present inside the `production\react-date.js` file
    is precompiled and can be used directly in an HTML page without the in-browser
    compilation provided by the `JSXTranformer.js` file. The code for using the `<ShowDate>`
    element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding code, where the
    `<ShowDate>` element is displaying the current date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Precompiled JSX for production](img/image00352.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: JSX file watcher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `react-tools` package comes with a file watcher, which can be used to observe
    the code changes in the JSX file and automatically generates the vanilla JavaScript
    code. The following command is used to startup the file watcher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the terminal with the JSX file watcher, which
    observes the `dev` directory for any JSX code change in the `react-date.js` file.
    Any changes in the JSX code can be logged by the file watcher in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JSX file watcher](img/image00353.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Developing a digital clock using ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will develop a digital clock element `<TsClock>` using
    the ReactJS library. The steps to develop a digital clock are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Step1 – defining the digital clock lifecycle script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code contains the lifecycle callback method definition for a
    `<TsClock>` digital clock element developed in the ReactJS library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: This block defines the `<TsClock>` element using the `React.createElement` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has three default properties named `hour`, `minute`, and `second` with values
    `HH`, `MM`, and `SS` inside the `getDefaultProps` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `render` method returns the ReactJS component tree with the digital clock
    template. The template displays the values of `hour`, `minute`, and `second` inside
    a ReactJS expression `{}` using the `this.props` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `componentDidMount` lifecycle callback method gets fired when the `<TsClock>`
    element is mounted on the DOM for the first time. This method has the `setInterval`
    method bound with the `updateClock` method, with a duration of 1 second.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `updateClock` method creates a new date object and modifies the value of
    `hour`, `minute`, and `second` properties by calling the `setProps` method provided
    by ReactJS. After updating the value of `hour`, `minute`, and `second`, the `setProps`
    method calls the `render` method in the background. This updates the DOM in the
    browser displaying the latest time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step2 – defining CSS styles for the digital clock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following CSS code is used to apply styles to a digital clock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding code with the digital
    clock containing `hour`, `minute`, and `second` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step2 – defining CSS styles for the digital clock](img/image00354.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Debugging ReactJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ReactJS provides a debugging tool for the Chrome browser. It can be installed
    to the Chrome browser using the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Chrome store with the ReactJS debugging
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging ReactJS](img/image00355.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After successful installation of **React Developer Tools**, we can see a new
    tab name **React** added to the Chrome developer console. The **React Developer
    Tools** tab contains the following five different windows for debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Elements**: This window shows the ReactJS element markup for the rendered
    page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Props**: This window lists all the properties used by the `React` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State**: This window lists all the states used by the `React` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Component**: This window lists all the properties and methods used by the
    `React` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Listeners**: This window lists all the event listeners used by the
    `React` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the React developer tool for the digital clock
    `<TsClock>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging ReactJS](img/image00356.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find out more about the React developer tool for debugging use the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html](http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the ReactJS library and its different features,
    such as JSX, virtual DOM, and custom component development. We understood the
    flux architecture and how data flows in a ReactJS-based application. With this
    chapter, we have come to the end of this book. I hope you now understand the web
    component specification concepts. Happy coding!
  prefs: []
  type: TYPE_NORMAL
