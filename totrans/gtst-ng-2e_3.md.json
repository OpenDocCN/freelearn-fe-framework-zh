["```js\n$ npm -v \n\n```", "```js\n$ npm install -g typescript@^2.1.0 \n\n```", "```js\n$ tsc -v\nVersion 2.1.1 \n\n```", "```js\n// ch3/hello-world/hello-world.ts\n\nconsole.log('Hello world!'); \n\n```", "```js\n$ tsc hello.ts \n\n```", "```js\n$ node hello.js \n\n```", "```js\n$ npm install -g ts-node \n\n```", "```js\n$ ts-node hello.ts \n\n```", "```js\n// ch3/arrow-functions/simple-reduce.ts\n\nvar result = [1, 2, 3].reduce(function (total, current) { \n  return total + current; \n}, 0); // 6 \n\n```", "```js\n// ch3/arrow-functions/arrow-functions.ts \n\n// example 1 \nvar result = [1, 2, 3] \n  .reduce((total, current) => total + current, 0); \n\nconsole.log(result); // 6\n\n// example 2 \nvar even = [3, 1, 56, 7].filter(el => !(el % 2)); \n\nconsole.log(even); // [56]\n\n// example 3 \nvar sorted = data.sort((a, b) => { \n  var diff = a.price - b.price; \n  if (diff !== 0) { \n    return diff; \n  } \n  return a.total - b.total; \n}); \n\n```", "```js\n// ch3/arrow-functions/context-demo.ts\n\nfunction MyComponent() { \n  this.age = 42; \n  setTimeout(() => { \n    this.age += 1; \n    console.log(this.age); \n  }, 100); \n}\n\nnew MyComponent(); // 43 in 100ms. \n\n```", "```js\n// ch3/es6-classes/sample-classes.ts \n\nclass Human { \n  static totalPeople = 0; \n  _name; // ES2016 property declaration syntax\n\n  constructor(name) { \n    this._name = name; \n    Human.totalPeople += 1; \n  }\n\n  get name() { \n    return this._name; \n  }\n\n  set name(val) { \n    this._name = val; \n  }\n\n  talk() { \n    return `Hi, I'm ${this.name}!`; \n  } \n} \n\nclass Developer extends Human { \n  _languages; // ES2016 property declaration syntax\n\n  constructor(name, languages) { \n    super(name); \n    this._languages = languages; \n  }\n\n  get languages() { \n    return this._languages; \n  }\n\n  talk() { \n    return `${super.talk()} And I know ${this.languages.join(',')}.`; \n  } \n} \n\n```", "```js\nvar human = new Human('foobar'); \nvar dev = new Developer('bar', ['JavaScript']); \nconsole.log(dev.talk()); \n\n```", "```js\n$ ts-node sample-classes.ts \n\n```", "```js\n// ch3/let/var.ts \n\nvar fns = []; \nfor (var i = 0; i < 5; i += 1) { \n  fns.push(function() { \n    console.log(i); \n  });\n} \nfns.forEach(fn => fn()); \n\n```", "```js\n// ch3/let/let.ts \n\nvar fns = []; \nfor (let i = 0; i < 5; i += 1) { \n  fns.push(function() { \n    console.log(i); \n  });\n} \nfns.forEach(fn => fn()); \n\n```", "```js\n// ch3/decorators/nonenumerable.ts \n\nclass Person { \n  @nonenumerable \n  get kidCount() { \n    return 42; \n  } \n} \n\nfunction nonenumerable(target, name, descriptor) { \n  descriptor.enumerable = false; \n  return descriptor; \n} \n\nvar person = new Person(); \n\nfor (let prop in person) { \n  console.log(prop); \n} \n\n```", "```js\ndescriptor = nonenumerable(Person.prototype, 'kidCount', descriptor) || descriptor; \nObject.defineProperty(Person.prototype, 'kidCount', descriptor); \n\n```", "```js\n@Component({ \n  selector: 'app', \n  providers: [NamesList], \n  templateUrl: './app.html', \n}) \nexport class App {} \n\n```", "```js\nfunction Component(config) { \n  // validate properties \n  return (componentCtrl) => { \n    // apply decorator \n  }; \n} \n\n```", "```js\n// ch3/modules/math.ts \n\nexport function square(x) { \n  return Math.pow(x, 2); \n};\n\nexport function log10(x) { \n  return Math.log10(x); \n};\n\nexport const PI = Math.PI; \n\n```", "```js\n// ch3/modules/math2.ts \n\nfunction square(x) { \n  return Math.pow(x, 2); \n};\n\nfunction log10(x) { \n  return Math.log10(x); \n};\n\nconst PI = Math.PI;\n\nexport { square, log10, PI }; \n\n```", "```js\n// ch3/modules/app.ts \n\nimport {square, log10} from './math';\n\nconsole.log(square(2)); // 4 \nconsole.log(log10(10)); // 1 \n\n```", "```js\nimport {\n  platformBrowserDynamic as platform\n} from '@angular/platform-browser-dynamic';\n```", "```js\n// ch3/modules/app2.ts \n\nimport * as math from './math';\n\nconsole.log(math.square(2)); // 4 \nconsole.log(math.log10(10)); // 1 \nconsole.log(math.PI); // 3.141592653589793 \n\n```", "```js\n// ch3/modules/math3.ts \n\nexport default function cube(x) { \n  return Math.pow(x, 3); \n};\n\nexport function square(x) { \n  return Math.pow(x, 2); \n}; \n\n```", "```js\n// ch3/modules/app3.ts \n\nimport cube from './math3';\n\nconsole.log(cube(3)); // 27 \n\n```", "```js\n// ch3/modules/app4.ts \n\nimport cube, { square } from './math3';\n\nconsole.log(square(2)); // 4 \nconsole.log(cube(3)); // 27 \n\n```", "```js\n// ch3/modules/app5.ts \n\nimport { default as cube } from './math3';\n\nconsole.log(cube(3)); // 27 \n\n```", "```js\nimport { square } from './math';\n\nexport function main() { \n  console.log(square(2)); // 4 \n} \n\n```", "```js\nSystem.import('./app') \n  .then(app => { \n    app.main(); \n  }) \n  .catch(error => { \n    console.log('Terrible error happened', error); \n  }); \n\n```", "```js\nlet foo: number = 42; \n\n```", "```js\nlet foo: number = 42; \nfoo = '42'; \n\n```", "```js\n$ tsc basic.ts \nbasic.ts(2,1): error TS2322: Type 'string' is not assignable to type 'number'.\n\n```", "```js\nlet foo = 42; \nfoo = '42'; \n\n```", "```js\nlet foo: any; \nfoo = {}; \nfoo = 'bar '; \nfoo += 42; \nconsole.log(foo); // \"bar 42\" \n\n```", "```js\nenum STATES { \n  CONNECTING, \n  CONNECTED, \n  DISCONNECTING, \n  WAITING, \n  DISCONNECTED  \n}; \n\n```", "```js\nvar STATES; \n(function (STATES) { \n    STATES[STATES[\"CONNECTING\"] = 0] = \"CONNECTING\"; \n    STATES[STATES[\"CONNECTED\"] = 1] = \"CONNECTED\"; \n    STATES[STATES[\"DISCONNECTING\"] = 2] = \"DISCONNECTING\"; \n    STATES[STATES[\"WAITING\"] = 3] = \"WAITING\"; \n    STATES[STATES[\"DISCONNECTED\"] = 4] = \"DISCONNECTED\"; \n})(STATES || (STATES = {})); \n\n```", "```js\nif (this.state === STATES.CONNECTING) { \n  console.log('The system is connecting'); \n} \n\n```", "```js\nlet primes: number[] = []; \nprimes.push(2); \nprimes.push(3); \n\n```", "```js\nlet randomItems: any[] = []; \nrandomItems.push(1); \nrandomItems.push('foo'); \nrandomItems.push([]); \nrandomItems.push({}); \n\n```", "```js\nlet randomItems: any[] = []; \nrandomItems.push('foo'); \nrandomItems.push('bar'); \nrandomItems.join(''); // foobar \nrandomItems.splice(1, 0, 'baz'); \nrandomItems.join(''); // foobazbar \n\n```", "```js\nlet randomItems: any[] = []; \nrandomItems.push('foo'); \nrandomItems.push('bar'); \nrandomItems[0] === 'foo' \nrandomItems[1] === 'bar' \n\n```", "```js\n// function expression \nvar isPrime = function (n) { \n  // body \n};\n\n// function declaration \nfunction isPrime(n) { \n  // body \n}; \n\n```", "```js\nvar isPrime = n => { \n  // body \n}; \n\n```", "```js\nlet variable: (arg1: type1, arg2: type2, ..., argn: typen) => returnType \n\n```", "```js\nlet isPrime: (n: number) => boolean = n => { \n  // body \n}; \n\n```", "```js\nlet math = { \n  squareRoot(n: number): number { \n    // ... \n  } \n}; \n\n```", "```js\nlet person = { \n  _name: null, \n  setName(name: string): void { \n    this._name = name; \n  } \n}; \n\n```", "```js\nclass Human { \n  static totalPeople = 0; \n  _name: string;\n\n  constructor(name) { \n    this._name = name; \n    Human.totalPeople += 1; \n  }\n\n  get name() { \n    return this._name; \n  }\n\n  set name(val) { \n    this._name = val; \n  }\n\n  talk() { \n    return `Hi, I'm ${this.name}!`; \n  } \n} \n\n```", "```js\nlet human = new Human('foo'); \nconsole.log(human._name); \n\n```", "```js\nclass Human { \n  static totalPeople = 0; \n  private _name: string; \n  // ... \n} \n\n```", "```js\nclass Human { \n  static totalPeople = 0;\n\n  constructor(protected name: string, private age: number) { \n    Human.totalPeople += 1; \n  }\n\n  talk() { \n    return `Hi, I'm ${this.name}!`; \n  } \n} \n\nclass Developer extends Human { \n  constructor(name: string, private languages: string[], age: number) { \n    super(name, age); \n  }\n\n  talk() { \n    return `${super.talk()} And I know ${this.languages.join(', ')}.`; \n  } \n} \n\n```", "```js\nlet dev = new Developer('foo', ['JavaScript', 'Go'], 42); \ndev.languages = ['Java']; \n\n```", "```js\nlet human = new Human('foo', 42); \nhuman.age = 42; \nhuman.name = 'bar'; \n\n```", "```js\nclass Human { \n  constructor(private name: string) {} \n} \n\n```", "```js\nvar Human = (function () { \n    function Human(name) { \n        this.name = name; \n    } \n    return Human; \n})(); \n\n```", "```js\ninterface Accountable { \n  getIncome(): number; \n} \n\n```", "```js\nclass Firm implements Accountable { \n  getIncome(): number { \n    // ... \n  } \n}\n\nclass Individual implements Accountable { \n  getIncome(): number { \n    // ... \n  } \n} \n\n```", "```js\ninterface Accountable { \n  accountNumber: string; \n  getIncome(): number; \n} \n\n```", "```js\ninterface Accountable { \n  accountNumber: string; \n  getIncome(): number; \n}\n\ninterface Individual extends Accountable { \n  ssn: string; \n} \n\n```", "```js\ninterface Accountable { \n  accountNumber: string; \n  getIncome(): number; \n}\n\ninterface Human { \n  age: number; \n  name: number; \n}\n\ninterface Individual extends Accountable, Human { \n  ssn: string; \n} \n\n```", "```js\nclass Person implements Human, Accountable { \n  age: number; \n  name: string; \n  accountNumber: string;\n\n  getIncome(): number { \n    // ... \n  } \n} \n\n```", "```js\nclass Http { \n  // ... \n}\n\nclass GitHubApi { \n  constructor(@Inject(Http) http) { \n    // ... \n  } \n} \n\n```", "```js\nclass Node { \n  value: any; \n  left: Node; \n  right: Node; \n} \n\nclass BinarySearchTree { \n  private root: Node; \n  insert(any: value): void { /* ... */ } \n  remove(any: value): void { /* ... */ } \n  exists(any: value): boolean { /* ... */ } \n  inorder(callback: {(value: any): void}): void { /* ... */ } \n} \n\n```", "```js\nclass Node<T> { \n  value: T; \n  left: Node<T>; \n  right: Node<T>; \n} \n\n```", "```js\nlet numberNode = new Node<number>(); \nlet stringNode = new Node<string>(); \nnumberNode.right = new Node<number>(); \nnumberNode.value = 42; \nnumberNode.value = '42'; // Type \"string\" is not assignable to type \"number\" \nnumberNode.left = stringNode; // Type Node<string> is not assignable to type Node<number> \n\n```", "```js\nfunction identity<T>(arg: T) { \n  return arg; \n} \n\n```", "```js\ninterface Comparable { \n  compare(a: Comparable): number; \n}\n\nfunction sort<T extends Comparable>(arr: Comparable[]): Comparable[] { \n  // ... \n} \n\n```", "```js\nclass Pair<K, V> { \n  key: K; \n  value: V; \n} \n\n```", "```js\nlet pair = new Pair<string, number>(); \npair.key = 'foo'; \npair.value = 42; \n\n```", "```js\nlet answer = 42; \nanswer = '42'; // Type \"string\" is not assignable to type \"number\" \n\n```", "```js\nlet answer; \nanswer = 42; \nanswer = '42'; \n\n```", "```js\nlet x = ['42', 42]; \n\n```", "```js\nlet x = [42, null, 32]; \n\n```", "```js\ndocument.body.addEventListener('mousedown', e => { \n  e.foo(); // Property \"foo\" does not exists on a type \"MouseEvent\" \n}, false); \n\n```", "```js\n$ mkdir types-test && cd types-test && npm init\n\n```", "```js\n{\n  \"name\": \"types-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \"Error: no test specified\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```", "```js\n$ npm install @types/angular --save-dev\n\n```", "```js\n{\n  \"name\": \"types-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \"Error: no test specified\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/angular\": \"^1.5.20\"\n  }\n}\n\n```", "```js\n/// <reference path=\"./node_modules/@types/angular/index.d.ts\"/> \n\nvar module = angular.module('module', []); \nmodule.controller('MainCtrl', \n  function MainCtrl($scope: angular.IScope) { \n\n  }); \n\n```", "```js\n$ tsc app.ts\n\n```", "```js\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"experimentalDecorators\": true,\n    \"outDir\": \"./dist\"\n  },\n  \"files\": [\n    \"./app.ts\"\n  ]\n}\n```", "```js\nvar module = angular.module('module', []); \nmodule.controller('MainCtrl', \n  function MainCtrl($scope: angular.IScope) { \n const set = new Set<any>();\n  });\n```", "```js\n$ tsc\n\n```", "```js\n{\n \"compilerOptions\": {\n   \"target\": \"es5\",\n   \"module\": \"commonjs\",\n   \"experimentalDecorators\": true,\n   \"outDir\": \"./dist\",\n \"lib\": [\"es2015\", \"dom\"]\n },\n \"files\": [\n   \"./demo.ts\"\n ]\n}\n```", "```js\nvar DOM = { \n  // Returns a set of elements which match the passed selector \n  selectElements: function (selector) { \n    // ... \n  }, \n  hide: function (element) { \n    // ... \n  }, \n  show: function (element) { \n    // ... \n  } \n}; \n\n```", "```js\nvar DOM = { \n  // Returns a set of elements which match the passed selector \n  selectElements: function (selector: string): HTMLElement[] { \n    //...\n    return []; \n  }, \n  hide: function (element: HTMLElement): void { \n    element.hidden = true; \n  }, \n  show: function (element: HTMLElement): void { \n    element.hidden = false; \n  } \n}; \n\n```", "```js\ninterface LibraryInterface { \n  selectElements(selector: string): HTMLElement[] \n  hide(element: HTMLElement): void \n  show(element: HTMLElement): void \n} \n\n```", "```js\n// inside \"dom.d.ts\" \n\ninterface DOMLibraryInterface { \n  selectElements(selector: string): HTMLElement[] \n  hide(element: HTMLElement): void \n  show(element: HTMLElement): void \n} \n\ndeclare var DOM: DOMLibraryInterface; \n\n```", "```js\n/// <reference path=\"dom.d.ts\"/> \n\n```"]