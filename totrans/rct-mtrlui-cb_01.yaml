- en: Grids - Placing Components on the Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding breakpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filling space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting containers and items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed column layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column direction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI grids are used to control the layout of screens in your app. Rather
    then implement your own styles to manage the layout of your Material-UI components,
    you can leverage the `Grid` component. Behind the scenes, it uses CSS flexbox
    properties to handle flexible layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Applying breakpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **breakpoint** is used by Material-UI to determine at what point to break the
    flow of content on the screen and continue it on the next line. Understanding
    how to apply breakpoints with `Grid` components is fundamental to implementing
    layouts in Material-UI applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have four elements that you want to lay out on the screen
    so that they''re evenly spaced and occupy all available horizontal space. The
    code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This renders four `Paper` components. The labels indicate the values used for
    the `xs`, `sm`, and `md` properties. Here''s what the result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4166f31b-0b88-4774-af95-babd5cc17fe1.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each of the breakpoint properties that you can pass to `Grid` components correspond
    to screen widths, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xs >= 0px`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sm >= 600px`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md >= 960px`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lg >= 1280px`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xl >= 1920px`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The screen shown previously had a pixel width of 725, which means that the `Grid`
    components used the `sm` breakpoint. The value passed to this property was `6`.
    This can be a number from `1` to `12` and defines how many items will fit into
    the grid. This can be confusing, so it's helpful to think of these numbers in
    terms of percentages. For example, `6` would be 50% and, as the preceding screenshot
    shows, the `Grid` items take up 50% of the width.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s say that you want the width of each `Grid` item to take
    up 75% of the screen width when the small breakpoint is active. You could set
    the `sm` value to `9` (9/12 = 0.75), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result when the screen width is still at 725 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89aa03ef-cb04-4303-9ed6-4216bcacd3ec.png)'
  prefs: []
  type: TYPE_IMG
- en: This combination of screen width and breakpoint value isn't optimal – there's
    a lot of wasted space to the right. By experimenting, you could make the `sm`
    value greater so that there's less wasted space, or you could make the value smaller
    so that more items fit on the row. For example, `6` looked better because exactly
    2 items fit on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the screen width down to 575 pixels. This will activate the `xs`
    breakpoint with a value of `12` (100%):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79154e2a-360c-4e92-b737-da8c73bf1667.png)'
  prefs: []
  type: TYPE_IMG
- en: This layout works on smaller screens, because it doesn't try to fit too many
    grid items on one row.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `auto` value for every breakpoint value if you''re unsure of
    which value to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will try to fit as many items as possible on each row. As the screen size
    changes, items are rearranged so that they fit on the screen accordingly. Here''s
    what this looks like at a screen width of 725 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/986c227b-d321-4c86-8596-2245a15d1ff1.png)'
  prefs: []
  type: TYPE_IMG
- en: I would recommend replacing `auto` with a value from `1`–`12` at some point.
    The `auto` value is good enough that you can get started on other things without
    worrying too much about layout, but it's far from perfect for your production
    app. At least by setting up `auto` this way, you have all of your `Grid` components
    and breakpoint properties in place. You just need to play with the numbers until
    everything looks good.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breakpoint documentation: [https://material-ui.com/layout/breakpoints/](https://material-ui.com/layout/breakpoints/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filling space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With some layouts, it is impossible to have your grid items occupy the entire
    width of the screen. Using the `justify` property, you can control how grid items
    fill the available space in the row.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that you have four `Paper` components to render in a grid. Inside
    each of these `Paper` components, you have three `Chip` components, which are
    **nested grid items**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `justify` property is specified on `container Grid` components. In this
    example, it''s the `container` that contains the `Chip` components as items. Each
    `container` is using the flex-start value, which will align the `Grid` items at
    the start of the `container`. The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa417c9a-0f7e-4925-8507-2944ccc9453d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The flex-start value of the `justify` property aligns all of the `Grid` items
    at the start of the `container`. In this case, the three `Chip` components in
    each of the four containers are all crammed to the left of the row. None of the
    space to the left of the items is filled. Instead of changing the breakpoint property
    values of these items, which results in changed widths, you can change the `justify`
    property value to tell the `Grid` container how to fill empty spaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you could use the `center` value to align `Grid` items in the
    `center` of the `container` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what this change to the `justify` property value
    results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59e234b3-9ebd-443b-8c2b-fa95eaac2d4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This does a good job of evenly distributing the empty space to the left and
    right of the `Grid` items. But the items still feel crowded because there''s no
    space in between them. Here''s what it looks like if you use the `space-around`
    value of the `justify` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1aa41ca1-2bcb-48fc-ae77-35888c221572.png)'
  prefs: []
  type: TYPE_IMG
- en: This value does the best job of filling all the available space in the `Grid
    container`, without having to change the width of the `Grid` items.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A variation on the `space-around` value is the `space-between` value. The two
    are similar in that they''re effective at filling all of the space in the row.
    Here''s what the example in the preceding section looks like using `space-between`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdf33225-b0c3-49df-84c5-36ec90787630.png)'
  prefs: []
  type: TYPE_IMG
- en: All of the excess space in the row goes in between the `Grid` items instead
    of around them. In other words, use this value when you want to make sure that
    there's no empty space to the left and right of each row.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting containers and items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have lots of screens in your app, each with lots of `Grid` components, used
    to create complex layouts. Trying to read source code that has a ton of `<Grid>`
    elements in it can be daunting. Especially when a `Grid` component is used for
    both containers and for items.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `container` or the `item` property of `Grid` components determines the
    role of the element. You can create two components that use these properties and
    create an element name that''s easier to read when you have lots of layout components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the resulting layout looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/302cc8cd-072f-40af-8b58-9d59d6558d1a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `Container` and `Item` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `Container` component renders a `Grid` component with the `container` property
    set to true, and the `Item` component does the same, except with the `item` property
    set to true. Each component passes any additional properties to the `Grid` component,
    such as `xs` and `sm` breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: When you have lots of `Grid` containers and items that make up your layout,
    being able to see the difference between `<Container>` and `<Item>` elements makes
    your code that much easier to read. Contrast this with having `<Grid>` elements
    everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you find that you''re using the same breakpoints over and over in your layouts,
    you can include them in in your higher-order `Item` component. Let''s rewrite
    the example so that, in addition to the `Item` property, the `xs`, `sm`, and `md`
    properties are included as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, instead of four instances of `<Item xs={12} sm={6} md={3}>`, you have four
    instances of `<Item>`. Component abstractions are a great tool for removing excess
    syntax from your **JavaScript XML** (**JSX**) markup.
  prefs: []
  type: TYPE_NORMAL
- en: Any time you need to override any of the breakpoint properties that you've set
    in the `Item` component, you just need to pass the property to `Item`. For example,
    if you have a specific case where you need `md` to be `6`, you can just write
    `<Item md={6}>`. This works because, in the `Item` component, `{...props}` is
    passed after the default values, meaning that they override any properties with
    the same name.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed column layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you use `Grid` components to build your layout, they often result in changes
    to your layout, depending on your breakpoint settings and the width of the screen.
    For example, if the user makes the browser window smaller, your layout might change
    from two columns to three. There might be times, however, when you would prefer
    a fixed number of columns, and that the width of each column changes in response
    to the screen size.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have eight `Paper` components that you want to render,
    but you also want to make sure that there are no more than four columns. Use the
    following code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the result looks like with a pixel width of 725:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1336ef23-2c32-431e-b075-ee5d19fdf17d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the result looks like with a pixel width of 350:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a441903d-bb1f-43b2-ab95-e591f9d05dcd.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want a fixed number of columns, you should only specify the `xs` breakpoint
    property. In this example, `3` is 25% of the screen width – or 4 columns. This
    will never change because `xs` is the smallest breakpoint there is. Anything larger
    is applied to `xs` as well, unless you specify a larger breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that you want two columns. You can set the `xs` value to `6` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the result looks like at a pixel screen width of 960:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1b1ba9a-072d-49a2-ae51-55260c5a6523.png)'
  prefs: []
  type: TYPE_IMG
- en: Because you've set the `xs` value to `6` (50%), these `Grid` items will only
    ever use two columns. The items themselves will change their width to accommodate
    the screen width, rather than changing the number of items per row.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can combine different widths in a fixed way. For example, you could have
    header and footer `Grid` items that use a full-width layout, while the `Grid`
    items in between use two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The first and last `Grid` components have an `xs` value of `12` (100%), while
    the other `Grid` items have `xs` values of `6` (50%) for a two-column layout.
    Here''s what the result looks like at a pixel width of 725:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa8f6e9e-1b0c-44a4-8bcb-56ca6b6ef0d8.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing column direction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using a fixed number of columns for your layout, content flows from left
    to right. The first grid item goes in the first column, the second item in the
    second column, and so on. There could be times when you need better control over
    which grid items go into which columns.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have a four-column layout, but you want the first and second
    items to go in the first column, the third and fourth items in the second, and
    so on. This involves using nested `Grid` containers, and changing the `direction`
    property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the result looks like at a pixel width of 725:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ca3a21a-b31e-4078-8d8d-f5da126ce7a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Instead of values flowing from left to right, you have complete control over
    which column the item is placed in.
  prefs: []
  type: TYPE_NORMAL
- en: You might have noticed that the font looks different, compared to other examples
    in this chapter. This is because of the `Typography` component used to style the
    text and apply Material-UI theme styles. Most Material-UI components that display
    text don't require you to use `Typography`, but `Paper` does.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s a lot going on with this example, so let''s start by taking a look
    at just the first item in the `Grid` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `Grid` item is using an `xs` value of `4`, to create the four-column layout.
    Essentially, these items are columns. Next, you have a nested `Grid` `container`.
    This `container` has a `direction` property value of `column`. This is where you
    can place the `Grid` items that belong in this `column`, and they'll flow from
    top to bottom, instead of from left to right. Each column in this grid follows
    this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There might be times when hiding the rightmost column makes more sense than
    trying to accommodate it with the screen width. You can use the `Hidden` component
    for this. It''s already imported in the example, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To use it, you wrap the last `column` with it. For example, here''s what the
    last `column` looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to hide this `column` at a certain breakpoint, you can wrap the
    `column` with `Hidden`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `smDown` property tells the `Hidden` component to hide its children when
    the `sm` breakpoint or lower is reached. Here''s what the result looks like at
    a pixel width of 1000:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac6cfb19-c2f1-415b-b07a-545dd145cce0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last column is displayed because the `sm` breakpoint is smaller than the
    screen size. Here''s the result at a pixel screen width of 550, without the last
    column displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d81b5f0-af8b-4bfd-88eb-9833b391ec2b.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Grid` demos: [https://material-ui.com/layout/grid/](https://material-ui.com/layout/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Grid` API documentation: [https://material-ui.com/api/grid/](https://material-ui.com/api/grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Hidden` API documentation: [https://material-ui.com/api/hidden/](https://material-ui.com/api/hidden/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
