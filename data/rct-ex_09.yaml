- en: Chapter 9. React Router and Data Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：React Router和数据模型
- en: In the previous chapter, we took a look at the React performance tools that
    can improve performance of our React apps. We explored using the PERF add-on,
    PureRenderMixin, and so on and took a look at some of the gotchas related to the
    performance tools provided by React.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了可以提高React应用性能的React性能工具。我们探讨了使用PERF插件、PureRenderMixin等，并查看了一些与React提供的性能工具相关的问题。
- en: In this chapter, we will take a closer look at react-router and perform routing
    at different levels. We will take a look at nested routing and passing around
    parameters, as well as see how react-router maintains history when performing
    routing tasks. We will also take a look at passing and using context to render
    React Components. Finally, we will explore data-models and mix and match them
    with other frameworks to use as data models in React, Backbone in this case.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地了解react-router，并在不同级别执行路由。我们将探讨嵌套路由和传递参数，以及react-router在执行路由任务时如何维护历史记录。我们还将探讨传递和使用上下文来渲染React组件。最后，我们将探索数据模型，并将它们与其他框架混合匹配，用作React中的数据模型，例如Backbone。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: React in your apps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用中使用React
- en: Routing with react-router
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用react-router进行路由
- en: Different routing mechanism
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的路由机制
- en: Setting up routing and passing around the routing context
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置路由和传递路由上下文
- en: React and data stores/models
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React和数据存储/模型
- en: Using Backbone models/collections as data stores
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Backbone模型/集合作为数据存储
- en: At the end of chapter, we will be able to start using the react-router and different
    routing patterns and start passing around context data in routing. We will also
    be able to replace parts of plain data models with the likes of Backbone.js.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将能够开始使用react-router和不同的路由模式，并在路由中传递上下文数据。我们还将能够用Backbone.js等类似的东西替换纯数据模型的部分。
- en: A new adventure
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的冒险
- en: '"Hi Shawn and Mike!" exclaimed Carla.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '"嗨，Shawn和Mike！"Carla大声说道。'
- en: Shawn and Mike were startled. They had just got in and were about to start their
    day. The past few days had been a lot of React exploration for them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Shawn和Mike吃了一惊。他们刚刚到达，正准备开始新的一天。过去几天他们一直在探索React。
- en: '"I have some good news for you guys. We got a new project, where we need to
    build a cat-based interest site. Something like say – Pinterest? Users can like
    images and profiles of cats. They can then see and like related articles for sale,
    as well," continued Carla.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '"我有一些好消息要告诉你们。我们得到了一个新的项目，我们需要构建一个基于猫的兴趣网站。就像说——Pinterest？用户可以喜欢猫的图片和资料。然后他们可以看到并喜欢相关的销售文章，”Carla继续说。'
- en: '"Oh, nice," replied Shawn.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '"哦，不错，”Shawn回应道。'
- en: Shawn and Mike regrouped and started a conversation about the new project that
    they just heard from Carla.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Shawn和Mike重新集结，开始讨论他们刚刚从Carla那里听说的新项目。
- en: '"This is nice. So, I guess, we want to display a small Pinterest-style gallery
    of images in panel shapes?" inquired Shawn.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"这很好。所以，我想，我们想在面板形状中显示一个小型的Pinterest风格的图片画廊吗？"Shawn询问道。'
- en: '"Correct," continued Mike. "We also want to display the images in large scale,
    maybe in a modal after a user clicks on the image. Carla said she wants random
    cats to be featured in the footer, which should take us to a full-fledged cat
    display page."'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '"正确，”Mike接着说，“我们还想以大尺寸显示图片，也许在用户点击图片后显示模态窗口。Carla说她想在页脚中展示随机的猫，这将带我们到一个完整的猫展示页面。”'
- en: '"You know what, I know the perfect thing that we are going use. Let''s take
    a look at react-router today! I also know the perfect example to start with. We
    are going to look at the Pinterest example from react-router at [https://github.com/rackt/react-router/tree/master/examples/pinterest](https://github.com/rackt/react-router/tree/master/examples/pinterest).
    We will then build our app on top of it."'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '"你知道什么，我知道我们将要使用的完美东西。让我们今天看看react-router！我也知道一个完美的示例开始。我们将查看react-router中的Pinterest示例，[https://github.com/rackt/react-router/tree/master/examples/pinterest](https://github.com/rackt/react-router/tree/master/examples/pinterest)。然后我们将在其基础上构建我们的应用。”'
- en: '"Nice," said Shawn. "I can see the existing example has some of the things
    that we discussed, such as the modal display. Let me see how the example looks."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '"不错，”Shawn说，“我可以看到现有的示例中包含了一些我们讨论过的事情，比如模态显示。让我看看这个示例的样子。”'
- en: 'Shawn looked at the example, which was as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Shawn看了以下示例：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '"Looks interesting," said Shawn.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '"看起来很有趣，”Shawn说。'
- en: '"Yeah, let''s go through the components that we need to create one by one.
    To begin with, let''s see how we are going to store our data and display the cat
    data across the system. Currently, the images are stored in the `PICTURES` constant.
    We would like to store more than that."'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，让我们逐一查看我们需要创建的组件。首先，让我们看看我们将如何存储我们的数据并在整个系统中显示猫的数据。目前，图片存储在 `PICTURES`
    常量中。我们希望存储更多内容。"'
- en: Creating Backbone models
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Backbone 模型
- en: '"So, Shawn, let''s go ahead and build out our cats'' collection that we want
    to display. For the purpose of development, we are going to use cat images from
    lorempixel service, for example, [http://lorempixel.com/600/600/cats/](http://lorempixel.com/600/600/cats/).
    This will give us a random cat image of 600 x 600 pixels."'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '"所以，肖恩，让我们继续构建我们想要展示的猫的收藏。为了开发目的，我们将使用 lorempixel 服务提供的猫图片，例如，[http://lorempixel.com/600/600/cats/](http://lorempixel.com/600/600/cats/)。这将给我们一个
    600 x 600 像素的随机猫图片。"'
- en: '"Next, we are going to create a store of data using different-than-normal objects.
    We want to explore how to embed different model flows with our React app here.
    In our case, let''s make use of Backbone models, instead of the PICTURES constant.
    I know that you have already used Backbone."'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，我们将创建一个使用不同于常规对象的数据存储。我们想探索如何将不同的模型流程嵌入到我们的 React 应用中。在我们的例子中，让我们使用 Backbone
    模型，而不是 PICTURES 常量。我知道你已经使用过 Backbone。"'
- en: '"Yup, I have used it in my previous projects."'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，我在我的前一个项目中使用过它。"'
- en: '"Alright then, let''s define our `Cat` model."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '"那么，让我们定义我们的 `Cat` 模型。"'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '"Here we store the `src` for the image of a cat, its name, and some details
    about it. As you can see, we have provided some default values for these attributes."'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们存储猫图片的 `src`、它的名字以及一些关于它的细节。正如你所见，我们为这些属性提供了一些默认值。"'
- en: '"Next, let''s define our `Cats` collection to all the `Cat` records."'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，让我们定义我们的 `Cats` 集合，包含所有的 `Cat` 记录。"'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '"Here, we making use of the `Faker` module to create random names for the cats
    using `Faker.Name.findName()`, adding random description using `Faker.Lorem.paragraph()`
    and passing the source as needed."'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们使用 `Faker` 模块通过 `Faker.Name.findName()` 创建猫的随机名字，使用 `Faker.Lorem.paragraph()`
    添加随机描述，并按需传递源信息。"'
- en: '"Cool," said Shawn. "Let me see how this looks now."'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '"酷，肖恩说。让我看看现在看起来怎么样。"'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Incorporating defined Backbone models
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成定义的 Backbone 模型
- en: '"Next, let''s define our index with how we need the routing to be and what
    paths should the routing respond to. From there, we will go ahead with building
    our components."'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，让我们定义我们的索引，以及我们需要路由如何工作以及路由应该响应哪些路径。从那里，我们将继续构建我们的组件。"'
- en: '"Got it."'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。"'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '"So, the first thing I see is that we are creating a session history?"'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"所以，我看到的第一件事是我们正在创建一个会话历史记录？"'
- en: '"Correct, we are creating a session history over here. We will use it for our
    router."'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '"正确，我们在这里创建了一个会话历史记录。我们将使用它作为我们的路由器。"'
- en: '"Here, we are using the history module''s `useBasename` method, which provides
    support for running an app under a `base` URL, which in our case is `/pinterest`."'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们使用历史模块的 `useBasename` 方法，它提供了在 `base` URL 下运行应用的支撑，在我们的例子中是 `/pinterest`。"'
- en: '"Got it."'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。"'
- en: '"Next, we are laying out how we actually want the routing to be. We wrap our
    router into the `<Router/>` component and specify different `<Route/>` as paths."'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，我们将展示我们实际上希望路由如何工作。我们将我们的路由器包装进 `<Router/>` 组件中，并指定不同的 `<Route/>` 作为路径。"'
- en: '"This is called the **Route Configuration**, which is basically a set of rules
    or instructions on how to match the URLs to some React Component in order to be
    displayed."'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '"这被称为**路由配置**，它基本上是一组规则或指令，用于将 URL 匹配到某些 React 组件以便显示。"'
- en: '"Oh, can we discuss more about this configuration, it looks intriguing."'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '"哦，我们可以讨论一下这个配置吗？它看起来很有趣。"'
- en: '"It sure is. First, let''s see what `<IndexRoute component={Home}/>` does.
    When we land on the `/` page for the application, which in our case would be `/pinterest`,
    the component defined by `IndexRoute` gets rendered. As you might have guessed,
    the component to be rendered is passed in the component argument of the route.
    Note that this is displayed in the `App` component that is the base component
    for all."'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '"确实如此。首先，让我们看看 `<IndexRoute component={Home}/>` 做了什么。当我们到达应用的 `/` 页面时，在我们的例子中将是
    `/pinterest`，由 `IndexRoute` 定义的组件将被渲染。正如你可能猜到的，要渲染的组件是通过路由的组件参数传递的。请注意，这是在 `App`
    组件中显示的，它是所有基础组件。"'
- en: Similar to the `IndexRoute`, we have different `<Route/>` definitions. In our
    example, if you see `<Route path="/pictures/:id" component={Picture}/>`, it shows
    how route is getting used, and how we are passing attributes for the same. "Here,
    the path attribute is a matcher expression and component attribute specifies the
    component that is to be displayed after the route is matched."
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `IndexRoute` 类似，我们有不同的 `<Route/>` 定义。在我们的示例中，如果你看到 `<Route path="/pictures/:id"
    component={Picture}/>`，它显示了路由是如何被使用的，以及我们是如何传递相同属性的。在这里，路径属性是一个匹配表达式，组件属性指定了在匹配路由后要显示的组件。
- en: '"Notice how the path is defined over here, it is specified as an expression."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"注意这里的路径是如何定义的，它被指定为一个表达式。"'
- en: 'The matching for a route based on a URL is done on the basis of three components:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 基于URL对路由进行匹配是基于三个组件：
- en: Nesting of route
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由嵌套
- en: Path attribute
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径属性
- en: Precedence of the route
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由优先级
- en: Shawn began, "I got the nesting part. I see that we have arranged our routes
    in a nested fashion, like a tree. The route matching and building is being done
    on the basis of this tree-like matching structure."
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 肖恩开始说，“我明白了嵌套的部分。我看到我们已经以嵌套的方式安排了我们的路由，就像一棵树。路由匹配和构建是基于这个树状匹配结构的。"
- en: '"Right. Secondly, we have the path attribute. We can see examples for these:"'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"对。其次，我们有路径属性。我们可以看到这些示例："'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '"The path value is a string that acts as a regex, which can consist of the
    following parts:"'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '"路径值是一个字符串，它作为一个正则表达式，可以由以下部分组成："'
- en: '`:paramName`: For example, ID, which is the param passed in the URL such as
    `/pictures/12`. `12` gets parsed as `param id`.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:paramName`: 例如，ID，这是在 URL 中传递的参数，如 `/pictures/12`。`12` 被解析为 `param id`。'
- en: '`()`: This can be used to specify an optional path, such as `/pictures(/:id)`,
    this will match `/pictures` as well as `/pictures/12`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`()`: 这可以用来指定一个可选的路径，例如 `/pictures(/:id)`，这将匹配 `/pictures` 以及 `/pictures/12`。'
- en: '`*`: As in case of regular expressions, `*` can be used to match any part of
    the expression, until the next `/`, `?`, or `#` occurs. For example, to match
    all the JPEG images, we can use `/pictures/*.jpg`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`: 就像正则表达式的情况一样，`*` 可以用来匹配表达式的任何部分，直到下一个 `/`、`?` 或 `#` 出现。例如，为了匹配所有 JPEG
    图像，我们可以使用 `/pictures/*.jpg`。'
- en: '`**`: Greedy matching, similar to *, but it matches greedily. For example,
    `/**/*.jpg` will match `/pictures/8.jpg` as well as `/photos/10.jpg`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**`: 贪婪匹配，类似于 `*`，但它贪婪地匹配。例如，`/**/*.jpg` 将匹配 `/pictures/8.jpg` 以及 `/photos/10.jpg`。'
- en: '"Got it. Finally, what remains is the precedence? Most probably, it should
    use the first route that is defined in the file and satisfy the condition used
    to match the path?"'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。最后，什么是优先级？最可能的是，它应该使用文件中定义的第一个路由，并满足用于匹配路径的条件？"'
- en: '"Exactly," Mike exclaimed.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错，" 迈克大声说道。'
- en: '"Oh, before I forget, we also have a `<Redirect>` route. This can be used to
    match some routes to other route actions. For example, we want `/photos/12` to
    match `/pictures/12` instead, we can define it as code."'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '"哦，在我忘记之前，我们还有一个 `<Redirect>` 路由。这可以用来将一些路由匹配到其他路由操作。例如，我们希望 `/photos/12` 匹配
    `/pictures/12` 而不是，我们可以将其定义为代码。"'
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '"Awesome."'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了。"'
- en: '"Next, let''s take a look at all the things that we are importing and using,
    which we will define as components."'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，让我们看看我们正在导入和使用的一切，我们将它们定义为组件。"'
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '"Let''s define our `App` component first, which is going to act as the container:"'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '"让我们首先定义我们的 `App` 组件，它将作为容器："'
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '"We aren''t going to change much here, this is from the example that we have
    already seen."'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们这里不会改变太多，这是从我们已经看到的示例中来的。"'
- en: '"I see the use of location here. Is this from react-router?"'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '"我看到了这里的位置使用。这是来自 react-router 吗？"'
- en: '"As we saw, our `App` is wrapped into the router. The router passes in the
    location object from the props. The location object is actually similar to `window.location`
    and it is something the history module that we use defines. The `Location` object
    has various special attributes defined on top of it, which we are going to make
    use of, as follows:"'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '"正如我们所看到的，我们的 `App` 被包裹在路由器中。路由器通过 props 传递位置对象。位置对象实际上类似于 `window.location`，这是我们使用的
    history 模块定义的。`Location` 对象在其上定义了各种特殊属性，我们将利用这些属性，如下所示："'
- en: '`pathname`: The actual pathname of the URL'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathname`: URL 的实际路径名'
- en: '`search`: The query string'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search`: 查询字符串'
- en: '`state`: A state passed on from the react-router and tied as an object to the
    location'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`: 从 react-router 传递并绑定到位置的对象'
- en: '`action`: One of the `PUSH`, `REPLACE`, or `POP` operations'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`: `PUSH`、`REPLACE` 或 `POP` 操作之一'
- en: '`key`: The unique identifier for the location'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`: 位置的唯一标识符'
- en: '"Got it. I can see that we are making use of `props.children` we had seen before."'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。我看到我们正在使用之前看到的`props.children`。"'
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '"We are storing the children and the previous screen onto the `App` object
    when the Modal is displayed, I guess," queried Shawn.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '"我想，当Modal显示时，我们将子元素和上一个屏幕存储到`App`对象上。"'
- en: '"Yup. We are first checking whether we are displaying a different Component
    by matching the key attribute of location. We then check whether the state attribute
    was passed on the location and whether the modal was set to true on state. We
    will be doing that in case of Modal display. Here''s how we will pass the state
    onto a link:"'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的。我们首先检查是否显示了一个不同的组件，通过匹配location的key属性。然后我们检查是否在location上传递了状态属性，以及状态中的modal是否设置为true。我们将在Modal显示的情况下做这件事。这是我们将状态传递给链接的方式："'
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '" We will take a look at the `Link` object when we use it for the images."'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '"当我们使用它来显示图片时，我们将查看`Link`对象。"'
- en: '"Got it," said Shawn.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了，肖恩说。"'
- en: '"Then I see that we are passing around the children props or rendering the
    previous layout, and then, displaying `Modal` on top of it if modal is clicked:"'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '"然后我看到我们正在传递子props或渲染上一个布局，然后，如果点击modal，就在其上方显示`Modal`："'
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '"Exactly! You are getting pretty good at this," Mike exclaimed.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错！你在这一方面做得越来越好了，迈克兴奋地说。"'
- en: '"Now, let''s see our main index page component, shall we?"'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在，让我们看看我们的主要索引页面组件，好吗？"'
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '"So Shawn, we are first importing all the data that we generate in the `Cats`
    collection. We are going to loop over them and display the images with links to
    Modals. You can see this happening here:"'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '"所以肖恩，我们首先导入在`Cats`集合中生成的所有数据。我们将遍历它们并显示带有链接到Modals的图片。你可以在这里看到这个过程："'
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"Yup, I see that we are setting the key using `cat` object''s `cid` from the
    backbone object. We had to attribute for the link, which is path to where it should
    be linked, I guess?"'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，我看到我们正在使用`cat`对象的`cid`从backbone对象设置键。我们必须为链接指定路径，即它应该链接到的位置，我想？"'
- en: '"That''s right. For every cat displayed, we have a unique dynamic route generated,
    such as `/pictures/121` and so on. Now, as we want to display the enlarged cat
    when we click on it, we are passing `modal: true` to state on `<Link/>`."'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错。对于每只显示的猫，我们都生成一个唯一的动态路由，例如`/pictures/121`等等。现在，当我们点击它以显示放大后的猫时，我们正在将`modal:
    true`传递到`<Link/>`的状态中。"'
- en: '"We are also passing a `returnTo` attribute that is related to the current
    path that we obtain from the current `location.pathname`. We will be using this
    `returnTo` attribute from state to set up back links on components. We will display
    one on the Modal so that we can get back to the home page when it''s clicked and
    the Modal will be closed."'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们还传递了一个`returnTo`属性，它与从当前`location.pathname`获取的当前路径相关。我们将使用这个`returnTo`属性从状态中设置组件上的回链。我们将在Modal上显示一个，这样当点击时我们可以回到主页，并且Modal将被关闭。"'
- en: '"Got it. I see we are also defining a link for the sample cat display page
    here:"'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"明白了。我看到我们还在这里定义了一个用于样本猫展示页面的链接："'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '"Yup, we are going to randomly feature a cat here. We will display the details
    about the cat on the sample page. Now, I want to show you how we are creating
    the link here:"'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，我们打算在这里随机展示一只猫。我们将在样本页面上显示关于猫的详细信息。现在，我想向你展示我们是如何在这里创建链接的："'
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '"Here, we are creating a nested random route, for example, this can match a
    URL, as follows:"'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '"在这里，我们正在创建一个嵌套的随机路由，例如，这可以匹配以下URL："'
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '"The `123` and `456` act as params for the location."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"`123`和`456`作为位置的参数。"'
- en: '"Nice," followed Shawn. "Let me define the Modal? Let me reuse the one from
    the example."'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '"很好，肖恩接着说。让我定义Modal？让我重用示例中的那个。"'
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '"That''s simple and straightforward, Shawn. We also need to define how we display
    the pictures. Let''s define that."'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '"很简单，肖恩。我们还需要定义如何显示图片。让我们定义一下。"'
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"To display the cat and fetch details about it, we are using the ID that we
    receive from params. These are sent to us on the params prop. We are then fetching
    the ID from the `Cats` collection."'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '"为了显示猫并获取它的详细信息，我们使用从params接收到的ID。这些是通过`params`属性发送给我们的。然后我们从`Cats`集合中获取ID。"'
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '"Using the `id` prop, recall how we were sending the ID on the cat link that
    we defined as follows"'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '"使用`id`属性，回忆一下我们是如何在定义如下链接时发送ID的："'
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '"Finally, let''s take a look at how the sample component is used to display
    the cat information from the example:"'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，让我们看看如何使用示例组件来显示猫的信息："'
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '"With this, it looks like we are done! Let''s see how it looks, shall we?"'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '"有了这个，看起来我们已经完成了！让我们看看它看起来怎么样，好吗？"'
- en: '"The index page looks neat."'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '"首页看起来很整洁。"'
- en: '![Incorporating defined Backbone models](img/4730_09_01.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![将定义的 Backbone 模型整合](img/4730_09_01.jpg)'
- en: '"Next, let''s see how the Modal and the links look with the URL."'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '"接下来，让我们看看 Modal 和链接与 URL 的样子。"'
- en: '"The cat sure looks nice," chuckled Shawn.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '"这只猫看起来真不错。" 肖恩笑着说。'
- en: '![Incorporating defined Backbone models](img/4730_09_02.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![将定义的 Backbone 模型整合](img/4730_09_02.jpg)'
- en: '"Haha, yes."'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '"哈哈，是的。"'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice the URL. On clicking, the modal link changed to the one on the anchor
    tag. We are on the same page and the modal is displayed.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 URL。点击时，模态链接变成了锚标签上的链接。我们处于同一页面，并且模态被显示。
- en: '"Finally, we have the sample page, where we display details of the cat. Let''s
    see how it looks:"'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '"最后，我们有样本页面，在这里我们显示猫的详细信息。让我们看看它的样子："'
- en: '![Incorporating defined Backbone models](img/4730_09_03.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![将定义的 Backbone 模型整合](img/4730_09_03.jpg)'
- en: '"Awesome!"'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '"太棒了！"'
- en: Data models and Backbone
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据模型和 Backbone
- en: '"Shawn, I wanted to discuss how we used Backbone models here or how we are
    storing the data. We moved from the following code to make use of Backbone collections.
    This helped us to define our data in a better way:"'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '"肖恩，我想讨论一下我们在这里如何使用 Backbone 模型，或者我们如何存储数据。我们从以下代码迁移到使用 Backbone 集合。这帮助我们更好地定义我们的数据："'
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '"However, if you notice, we ended up defining a static collection of objects.
    Along with that, this collection was global and required to be passed around."'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '"然而，如果你注意到，我们最终定义了一个静态的对象集合。此外，这个集合是全局的，需要传递给其他部分。"'
- en: '"That is true. I also noticed that we had a fixed `state` in a global fashion
    for the data. I believe, we could have not done much there. If we updated, the
    `Views` would still remain the same?"'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '"这是真的。我也注意到我们为数据在全局范围内有一个固定的 `state`。我相信，我们在这里可能没有做什么。如果我们更新了，`Views` 仍然会保持不变吗？"'
- en: '"Exactly! What''s happening in our case is that we are sending and using/modifying
    the data in a fixed fashion, globally. Any updates to this data in a different
    part of the application would not affect how our views were displayed or even
    the data that was already being accessed in different components would not change.
    For example, consider that the `Home` component changed the `Cats` constant. First
    of all, it would not sync the changes with Sample, Modal, or other components."'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错！在我们这个案例中，我们以固定的方式发送、使用/修改数据，全局范围内。对这部分应用中的数据进行的任何更新都不会影响我们视图的显示方式，甚至不同组件中已经访问的数据也不会改变。例如，考虑一下
    `Home` 组件改变了 `Cats` 常量。首先，它不会与 Sample、Modal 或其他组件同步更改。"'
- en: '"Secondly, the change in the `Home` component to the `Cats` collection would
    not even change the `Home` component''s display!"'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '"其次，`Home` 组件对 `Cats` 集合的更改甚至不会改变 `Home` 组件的显示！"'
- en: '"Ah, this is pretty tricky. I guess, we would end up storing all of this collection
    state in a global component state, such as the `App` component, which is rendered
    only once," followed Shawn.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '"啊，这相当棘手。我想，我们最终会将所有这些集合状态存储在一个全局组件状态中，比如 `App` 组件，它只渲染一次。" 肖恩接着说。'
- en: '"Yes, we could do that. The problem in that case would be that we would need
    to manually maintain the state and update the state from the children components
    to the `App` components, and so forth. Imagine having to change the state for
    a cat on click, for example, someone faves an image of a cat. The event would
    take place on the `Picture` component and we would need to manually propagate
    the event to `Home` or `Modal` first and then to `App` in order to actually update
    the global collection."'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的，我们可以这样做。但问题在于，在这种情况下，我们需要手动维护状态，并将子组件的状态更新到 `App` 组件，等等。想象一下，比如有人点击了一个猫的图片，需要改变猫的状态。事件会在
    `Picture` 组件上发生，我们需要手动将事件传播到 `Home` 或 `Modal` 组件，然后再传播到 `App` 组件，以便真正更新全局集合。"'
- en: '"That would not be good. I believe this would be hard to track and debug as
    well."'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '"这不会很好。我相信这将很难跟踪和调试。"'
- en: '"That''s right. In our next refactoring, we will try to change this approach
    and limit it to, say, the `App`. In the longer run, we would try out Flux."'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '"没错。在我们接下来的重构中，我们将尝试改变这种做法，将其限制在 `App` 中。从长远来看，我们将尝试使用 Flux。"'
- en: '"Oh, right, I have heard about it. It''s for passing around or accessing data
    and managing changes in data via events or something?"'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '"哦，对了，我听说过它。它是用于传递或访问数据，以及通过事件或其他方式管理数据变化的吗？"'
- en: '"Umm, not exactly, it helps us to streamline the data flow in a unidirectional
    flow. The state maintained is propagated to the components and they update as
    required. Events, such as having a cat, may change the data store, which in turn
    changes the components."'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，不是完全如此，它帮助我们简化了单向数据流中的数据流。维护的状态会传播到组件中，并按需更新。例如，拥有一只猫的事件可能会改变数据存储，进而改变组件。”
- en: '"Anyway, I just wanted to give you an idea about this and why we will explore
    Flux later. For now, our solution works as expected."'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: “无论如何，我只是想给你一个关于这个的想法，以及为什么我们稍后会探索Flux。现在，我们的解决方案按预期工作。”
- en: The day was coming to an end. It has been another interesting day at Adequate
    LLC. Shawn and Mike had collaborated and build a simple app using react-router
    and mixing Backbone models with it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 天色渐晚。在Adequate LLC公司又度过了一个有趣的一天。肖恩和迈克合作，使用react-router并与之混合Backbone模型构建了一个简单的应用程序。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a simple Pinterest-like app, making use of react-router
    and taking a closer look at it while performing routing at different levels. We
    also took a look at nested routing, passing around parameters, how the react-router
    maintains history, and so on, when performing the routing tasks. We took a look
    at how to pass and use the context to render the React components and mix Backbone
    models to maintain the Cats display data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个简单的类似Pinterest的应用程序，利用react-router并对其在不同级别的路由执行时进行了更深入的研究。我们还探讨了嵌套路由、传递参数、react-router如何维护历史记录等问题，在执行路由任务时。我们还研究了如何传递和使用上下文来渲染React组件，以及如何将Backbone模型与它混合以维护Cats显示数据。
- en: In the next chapter, we will explore adding animation to content and some other
    display goodies on top of the existing app.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在现有应用程序的基础上添加动画和一些其他显示功能。
