- en: Organizing Your Angular Project Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create project structure using the `@angular/cli` command.
    We will download all the necessary libraries using **npm** (**node package manager**).
    Then, we will start the project to take a look at our first Angular application
    running on the browser. We will go through all the important files that are required
    to develop a high-quality Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: npm is a package manager for JavaScript. It also helps in installing packages
    required to develop an application.
  prefs: []
  type: TYPE_NORMAL
- en: We will also run through setting up a testing framework setup and write test
    cases for some of the important components of our social application. Our aim
    is to develop a production-ready application through testing, development, and
    analytics.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we will go through the recommended guidelines for coding styles,
    as this is the most ignored part in development. We feel this is required when
    we develop any application in the team so that common terms and terminologies
    are followed across the development team.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project outline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular terminologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding standard guidelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a project outline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Angular CLI** (**command-line interface**) makes it easy to create a project.
    It also helps in creating component, routes, services, and pipes with a simple-to-use
    command. We will use Angular CLI to create a sample project outline. This provides
    all the necessary files to start building your application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We require the following four steps to run our first Angular application without
    any coding and get our first welcome page. We also need npm to install important
    libraries; you can download npm from [https://nodejs.org/en/download/](https://nodejs.org/en/download/):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install Angular CLI using `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Please note that the `-g` flag installs the angular CLI globally so that it
    can be accessed in any project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the friends project structure using the `ng new` command. Since we are
    using SASS to create our style sheets, we will provide the `--style=sass` option
    as well, and this configures SASS in our application. Take a look at the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to give your project name at the end, otherwise it will create
    a default project name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the newly created `friends` folder and execute `npm install`. This installs
    all the packages required to build our application, and it also creates the `node_modules`
    folder. Take a look at the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, deploy the newly created friends project using `npm start` and take
    a look at your first Angular application running in a browser. Refer to the following
    command. The default port is 4200, and you can type `http://localhost:4200` to
    see your sample application in a browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations on your first Angular application!
  prefs: []
  type: TYPE_NORMAL
- en: Project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to map the newly created project to an editor. We use WebStorm
    as our editor, which is a paid version. You can use Visual Studio Code or Sublime
    as your editor, which are free versions, and you can download them from the following
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code: [https://code.visualstudio.com/download](https://code.visualstudio.com/download)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text: [https://www.sublimetext.com/download](https://www.sublimetext.com/download)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We mapped the project to our WebStorm editor and installed the dependent libraries
    using `npm install`, and it creates a `node_modules` folder. This folder contains
    all the dependent libraries. Our project structures in the editor looks like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Overview of package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `package.json` file specifies the starter packages for running the application.
    We can also add packages in this file as our application evolves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `package.json` file contains the following two sets of dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dependencies`**: **The packages in "dependencies" contain all essential libraries
    for running the Angular application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Dependencies consist of the following libraries. We have explained only the
    important libraries in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@angular/common`: It provides commonly used functionalities, such as pipes,
    services, and directives.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/compiler`: It understands templates and converts them into a format
    that the browser understands so that our application can run and render. We don''t
    interact directly with this library.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/core`: It provides all common metadata, such as component, directive,
    dependency injection, and component life cycle hooks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/forms`: It provides a basic layout for inputs. This is used in login,
    signup, or feedback.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/http`: It is an Angular service that provides a utility function
    for HTTP rest calls.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/platform-browser`: It provides the `bootstrapStatic()` method for
    bootstrapping applications for production builds.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/platform-browser-dynamic`***:*** It is mainly used in bootstrapping
    during development.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@angular/router`: It provides a component router for navigation between components.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core-js`: It patches the global context window with essential features of
    ES2015 (ES6).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rxjs`: It is a library for reactive programming using observables that help
    in writing asynchronous code for HTTP.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zone.js`: It provides an execution context that persists across asynchronous
    tasks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`devDependencies`**:** The packages in `devDependencies` contain libraries
    that are mostly required during the development process. You can exclude `devDependencies`
    during production builds using the following `npm` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our project, we use Firebase as a backend service, a mobile and web application
    platform. It provides complete suites of products integrated into one platform
    and makes the development process much faster with the major part handled by the
    platform. Its products are segregated around two major themes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Develop and test your application**: These suites provide all the services
    required to develop a scalable application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grow and engage your audience**: This is mostly required to grow our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can refer to the following link for more information on Firebase: [https://firebase.google.com/](https://firebase.google.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an account for Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in creating a new Firebase project is to create your new Google
    account or work with the current account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the Firebase portal and follow four steps to start your Firebase
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on GO TO CONSOLE on the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add Project with plus (+) sign.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window, enter Project name and Country/region. Project ID is an
    optional field, and this will take a default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on CREATE PROJECT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the friends project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you get your configuration details on the welcome page of Firebase
    and then click on Add Firebase to your web app. You can copy this configuration
    into `environments.ts`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Angular terminologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss important terminologies in Angular. You may
    be familiar with most of them, but this will refresh your knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Module**: Angular supports modularity using modules. All Angular projects
    have at least one module known as `AppModule`. When we build large applications,
    we can divide our application into multiple feature modules with common related
    capabilities. We can create module using the `@NgModule` annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Component**: Component is a controller, which has views and logic to manage
    view events and navigation between components. It interacts with the view through
    various data binding techniques. You can generate `component` using the following
    CLI command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Templates**: A template represents the view of the web page and it is created
    using HTML tags. It also has many custom tags such as angular directives along
    with native HTML tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metadata**: It assigns a behavior to any class. It is the metadata on top
    of the class that tells Angular the behavior of the class. For example, the component
    is created using the `@Component` annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Binding**: It is a process by which a template interacts with the component.
    The data is passed to and fro using various data binding techniques. Angular supports
    the following three types of data binding:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interpolation*:*** In this binding, we use two curly braces to access the
    property value of component members. For example, if we have `name` as a class
    member property in a component, then we can define `{{name}}` in the template
    to access the name value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Property Binding*:*** This data binding technique helps in passing a value
    from a parent component to a child component. For example, if we have `name` as
    a class member property in a parent component and `userName` in a child component,
    then we can assign a value from parent to child using `[userName] = "name"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Binding*:*** This event-driven data binding helps to pass a value from
    template to component. For example, we display a name from the list; when the
    user clicks on the list item, we pass a click value using event binding `(click)="clickName(name)"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directives**: It is a behavior injected into the templates, which modifies
    the way the **DOM **(**document object model**) is rendered. There are basically
    two kinds of directive:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structural**: It alters the DOM layout by adding, removing, or replacing
    DOM elements. Examples for this kind of directive are `ngFor` and `ngIf`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attribute:** It alters the appearance and behavior of the existing DOM element.
    The `ngModel` directive is an example of attributes directives, which change the
    behavior of the existing element by responding to achange event.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service**: It is a usable entity, that consumed by any Angular components
    and helps to separate the view logic from  the business logic. We normally write
    HTTP-specific call for a particular module in a service, as it helps readability
    and maintainability of the code. Popular examples of services are logging service
    or data service. You can create `service` using the following CLI command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Pipe**: It is one of the simplest but most useful features in Angular. It
    provides a way to write a utility functionality, which can be reused across applications.
    Angular provides built-in pipe, such as date and currency. You can create `pipe`
    using the following CLI command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The application's project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we browse our sample friends application, we will come across the `src`
    folder, which contains all the application core files that have view, business
    logic, and navigation functionalities. A developer spends most of their time in
    this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The main idea we followed in organizing our folder is feature module. Each similar
    functionality is organized into features module. In order to understand it better,
    we will take a look at an example of an authentication feature in our friends
    application and a few of the file references comes in later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, all the authentication-related functionalities, such as
    login and signup, are grouped into a module named `authentication`. This same
    pattern will be applied to all the features in our application. This makes our
    application more modular and testable. We have taken an example of an authentication
    feature module and explained it in more detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our authentication feature module looks the following screenshot; authentication
    features have login and signup functionalities, and all the components are declared
    in modules—it also has its own routes module for internal navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: App module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'App module is the root module of our entire project. All Angular projects have
    at least one app module, which is mandatory, and it is used for bootstrapping
    our project to launch the application. The app module is declared with the `@NgModule`
    decorator. The metadata in the `NgModule` annotation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`imports`: In the `imports` tag, we declare all dependent feature modules.
    In the following code example, we declare `BrowserModule`, `AuthenticationModule`,
    and `AppRouting` modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`declarations`: In the `declarations` tag, we declare all the components for
    this root module. In the following example, we declare `AppComponent` in `AppModule`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`providers`: In the `providers` tag, we declare all the services or pipes.
    In the following example, we declare `AngularFireAuth` and `AngularFireDatabase`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap`: In the `bootstrap` tag, we declare the root component, which is
    required in `index.html`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This sample `app.module.ts` is created using the `ng new` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: App routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The root routing module is used to navigate between different feature modules.
    We will create a route containing the navigation flow for the main application.
    The following example contains the sample of routes, which shows the navigation
    between common components in applications, such as `AboutComponent` and `PageNotFoundComponent`.
    The wildcard `'**'` in the path specifies that any wrong URL will be redirected
    to  the page not found component. App routing is created with the `@NgModule`
    decorator and the routes are configured using `RouterModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample `app.routing.ts` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Authentication module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `authentication` module is a feature module, which contains login and signup
    feature set. All the features related to authentication are contained in this
    folder. We included `LoginComponent` and `SignupComponent`  in the declarations
    metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Authentication routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This routing helps in the navigation within the child component, so we create
    routes for login and signup components. This will evolve as we start implementing
    our login and a signup component in upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample `authentication.routing.ts` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Login component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A component is the basic building block of an UI (user interface) in an Angular
    application. The `@Component` decorator is used to mark a class as a Angular component.
    The following example shows the Login component, which is defined using `@Component`
    and contains **SCSS** (**Sassy CSS**) and template files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Login component HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Login component HTML is a view and contains the form data for login. The following
    example shows a simple HTML with two tags; a template in Angular follows the same
    syntax as HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Login component scss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our project, we use **SASS** (**syntactically awesome stylesheet**), which
    is a preprocessor, to convert our SCSS file to a CSS file. This helps organize
    our CSS element in a simple and readable format. It provides many features, such
    as variables, nesting, mixins, and inheritance, which help in writing complex
    CSS in a reusable way. We will cover these features when we create our feature
    module. The following SCSS file is a simple example where a black variable is
    externalized to a variable: `$black`. This variable can be used with other CSS
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Login component spec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use the **Jasmine** test framework to write our unit test cases. It is a
    very good habit to write test cases from the start of our development. Test cases
    should be part of our development process. Unfortunately, we normally write test
    cases after our application is in production or when we see lot of issues during
    production. We know writing test cases takes time during the initial phase of
    development, but it saves a lot of time later on. Earlier, the software industries
    basis for delivering a new product was *time to market*, but now the focus has
    shifted to *time to market with a quality product*. So, when writing test cases
    becomes a part of development, then we write test cases faster and deliver quality
    products on time. We hope this explains the importance of this process during
    development.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once our test cases are ready, we can execute the test case using `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Authentication service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to separate UI logic from business logic in Angular is service.
    It provides a well-defined class to perform specific logic. In our project, we
    interact with a Firebase database using HTTP  in service so that heavy load goes
    to service. In Authentication service, we perform actions such as login, signup,
    and sign-out.
  prefs: []
  type: TYPE_NORMAL
- en: When we clearly separate responsibility in a well-defined class, we adhere to
    the **SRP** (**single responsibility principle**). SRP is explained in more detail
    in the following section. We use the `Injectable` decorator on top of service
    so that this service is injected in any component or service by Angular framework,
    and we don't have to create the object. This pattern is known as dependency injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample `authentication.service.ts`,is  as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Date pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pipes help to write utility functions in an Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a pipe by extending `PipeTransform` and override the `transform`
    method from the super class to provide our functionality. Our application's date
    pipe is decorated with pipe metadata. We will provide a name for our pipe using
    a `name` tag, which is used to transform data in a template.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample `friendsdate.pipe.ts` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how you will use the pipe in a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Common principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Principles help us to design our application in a better way, and these principles
    are not specific to any programming languages or platform. In this section, we
    will cover some of the most used principles in an Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single responsibility principle**:  This principle states that a class should
    have only one reason to change and that the responsibility should be encapsulated
    in the class. We apply this principle to all our component, services, or routers.
    This helps code maintainability and testability. For example, a component is responsible
    for managing the logic related to view. Other complex server logic is delegated
    to services. We mostly implement the utility functions in pipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single file**: It is a good practice to define components or services per
    file. This makes our code easier to read, maintain, and export across module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Small functions**: It is always good to write small functions with a well-defined
    purpose. This really makes the life of other developers—who use your code—easier,
    as the new developer can read and easily understand the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LIFT**: Always follow the *lift* principle so that you can *locate* code
    quickly, *identify* the code, keep the structure *flat*, and *try* to be dry.
    This ensures consistent structures across your application. This tremendously
    increases developer efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Folders-by-feature**: During the development of our application, we followed
    this principle and all the features are grouped into feature modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared feature**: We create a shared folder to declare all reusable components,
    directives, and pipes, and these are shared among other folders. `SharedModules`
    are created so that they are referenced in the entire application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding standard guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Coding standard are common patterns we follow while writing our application.
    This makes our code consistent across application. This is quite useful when multiple
    developers are working on the same application. A few coding standards are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Naming Conventions**: It is extremely important to have consistent naming
    conventions for our filename, class name, and so on. This is essential from the maintainability
    and readability point of view.  This also helps in understanding the code faster,
    and debugging becomes easier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filename**: The recommended pattern for a filename in Angular is feature.type.ts.
    For example, the name of the authentication component file is `authentication.component.ts`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class name**: The class name follows the camel case and takes the name from
    the filename. For example, the class name for the authentication component file
    is `AuthenticationComponent`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method and properties name**: We follow camel case to name our class method
    and properties. We don''t prefix private variables with an underscore.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selector name**: The selector name in a component is hyphenated, and all
    characters are in lowercase. The name of our login component is shown here:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Pipe name**:  Pipes are named after their features. For example, the currency
    pipe name is `''currency''`, as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Constant**:  The constant is the final variable that is declared using the 
    const keyword, and the constant value is assigned once. Constant variables are
    declared in uppercase, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Members sequence**:  All member variables are declared first, followed by
    the method. Private members are named after public members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created our first Angular application using the Angular
    CLI command. We went through all the important files in our Angular application.
    We learned common Angular terminologies and then went through our application
    project structure and internals. Finally, we covered common principles and coding
    guidelines, which we will follow as part of our development process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create our first signup page. We will apply many
    concepts from this chapter to create our signup component.
  prefs: []
  type: TYPE_NORMAL
