["```js\n@Component({\n  selector: 'mac-b',\n  templateUrl: './b.component.html'\n})\nexport class BComponent {\n  constructor(route: ActivatedRoute) {\n route.params.subscribe(params => console.log(params.id));\n }\n}\n```", "```js\nimport {Route} from '@angular/router';\nimport {ProjectContainerComponent} from './container/project-container/project-container.component';\n\nexport const routes: Route[] = [{\n  path: 'projects/:projectId',\n  component: ProjectContainerComponent\n}, {\n  path: '',\n  pathMatch: 'full',\n  redirectTo: '/projects/1'\n}];\n```", "```js\n…\nimport {RouterModule} from '@angular/router';\nimport {routes} from './routes';\n\n@NgModule({\n  declarations: [\n    …\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    HttpClientInMemoryWebApiModule.forRoot(Database, {\n      delay: 0\n    }),\n    RouterModule.forRoot(routes)\n  ],\n  providers: [TaskService, UserService, ProjectService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n```", "```js\n…\n<main class=\"main\">\n  <router-outlet></router-outlet>\n</main>\n```", "```js\n…\n<mac-navigation-section title=\"Projects\">\n  <mac-navigation-item *ngFor=\"let project of projects | async\"\n                       [navId]=\"project.id\"\n                       [title]=\"project.title\"\n routerLinkActive=\"active\"\n [routerLink]=\"['/projects', project.id]\">\n  </mac-navigation-item>\n</mac-navigation-section>\n…\n```", "```js\n…\n@Component({\n  selector: 'mac-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  openTasksCount: Observable<number>;\n  user: Observable<User>;\n  projects: Observable<Project[]>;\n\n  constructor(taskListService: TaskService,\n              userService: UserService,\n              private projectService: ProjectService) {\n    this.openTasksCount = taskListService.getTasks()\n      .pipe(\n        map((tasks: Task[]) => {\n          return tasks\n            .filter((task) => !task.done)\n            .length;\n        })\n      );\n    this.projects = projectService.getProjects();\n    this.user = userService.getCurrentUser();\n  }\n}\n\n```", "```js\n…\nimport {ActivatedRoute} from '@angular/router';\nimport {combineLatest} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  selector: 'mac-project-container',\n  templateUrl: './project-container.component.html',\n  styleUrls: ['./project-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectContainerComponent {\n  …\n\n  constructor(private projectService: ProjectService,\n private route: ActivatedRoute) {\n    this.selectedProject = combineLatest(\n projectService.getProjects(),\n route.params\n ).pipe(\n map(([projects, routeParams]) =>\n projects.find((project) => project.id === +routeParams.projectId)\n )\n );\n  }\n\n  …\n}\n```", "```js\nimport {Route} from '@angular/router';\nimport {ProjectContainerComponent} from './container/project-container/project-container.component';\nimport {TaskListContainerComponent} from './container/task-list-container/task-list-container.component';\nimport {ProjectCommentsContainerComponent} from './container/project-comments-container/project-comments-container.component';\n\nexport const routes: Route[] = [{\n  path: 'projects/:projectId',\n  component: ProjectContainerComponent,\n children: [{\n path: 'tasks',\n component: TaskListContainerComponent\n }, {\n path: 'comments',\n component: ProjectCommentsContainerComponent\n }, {\n path: '**',\n redirectTo: 'tasks'\n }]\n}, {\n  path: '',\n  pathMatch: 'full',\n  redirectTo: '/projects/1'\n}];\n```", "```js\n<header class=\"header\">\n  <h2 class=\"title\">\n    <mac-editor [content]=\"project.title\"\n                [showControls]=\"true\"\n                (outSaveEdit)=\"updateTitle($event)\"></mac-editor>\n  </h2>\n  <mac-editor [content]=\"project.description\"\n              [showControls]=\"true\"\n              (outSaveEdit)=\"updateDescription($event)\"></mac-editor>\n</header>\n<mac-tabs [tabs]=\"tabs\"\n          [activeTab]=\"activeTab\"\n          (outActivateTab)=\"activateTab($event)\">\n</mac-tabs>\n<router-outlet></router-outlet>\n```", "```js\n…\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {combineLatest} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  selector: 'mac-project-container',\n  templateUrl: './project-container.component.html',\n  styleUrls: ['./project-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectContainerComponent {\n  selectedProject: Observable<Project>;\n  tabs: Tab[] = [\n    {id: 'tasks', title: 'Tasks'},\n    {id: 'comments', title: 'Comments'},\n    {id: 'activities', title: 'Activities'}\n  ];\n  activeTab: Observable<Tab>;\n\n  constructor(private projectService: ProjectService,\n              private route: ActivatedRoute,\n private router: Router) {\n    this.selectedProject = combineLatest(\n      projectService.getProjects(),\n      route.params\n    ).pipe(\n      map(([projects, routeParams]) =>\n        projects.find((project) => project.id === +routeParams.projectId)\n      )\n    );\n\n this.activeTab = combineLatest(\n this.selectedProject,\n route.url\n ).pipe(\n map(([project]) =>\n this.tabs.find((tab) =>\n router.isActive(\n `/projects/${project.id}/${tab.id}`,\n false\n )\n )\n )\n );\n  }\n\n  …\n}\n```", "```js\n…\nimport {map, take} from 'rxjs/operators';\n\n@Component({\n  selector: 'mac-project-container',\n  templateUrl: './project-container.component.html',\n  styleUrls: ['./project-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectContainerComponent {\n  …\n\n  activateTab(tab: Tab) {\n    this.selectedProject\n .pipe(take(1))\n .subscribe((project: Project) => {\n this.router.navigate([\n '/projects',\n project.id,\n tab.id\n ]);\n });\n  }\n\n  …\n}\n```", "```js\n<mac-project [project]=\"selectedProject | async\"\n             [tabs]=\"tabs\"\n             [activeTab]=\"activeTab | async\"\n             (outActivateTab)=\"activateTab($event)\"\n             (outUpdateProject)=\"updateProject($event)\">\n</mac-project>\n```", "```js\n…\nimport {combineLatest} from 'rxjs';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'mac-task-list-container',\n  templateUrl: './task-list-container.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TaskListContainerComponent {\n  …\n\n  constructor(private taskService: TaskService,\n              private projectService: ProjectService,\n private route: ActivatedRoute) {\n    this.selectedProject = combineLatest(\n projectService.getProjects(),\n route.parent.params\n ).pipe(\n map(([projects, routeParams]) =>\n projects.find((project) => project.id === +routeParams.projectId)\n )\n );\n\n    …\n  }\n\n …\n}\n```", "```js\n…\nimport {combineLatest} from 'rxjs';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'mac-project-comments-container',\n  templateUrl: './project-comments-container.component.html',\n  styleUrls: ['./project-comments-container.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectCommentsContainerComponent {\n  …\n\n  constructor(private projectService: ProjectService,\n              private userService: UserService,\n private route: ActivatedRoute) {\n    this.user = userService.getCurrentUser();\n    this.selectedProject = combineLatest(\n projectService.getProjects(),\n route.parent.params\n ).pipe(\n map(([projects, routeParams]) =>\n projects.find((project) => project.id === +routeParams.projectId)\n )\n );\n    this.projectComments = this.selectedProject\n      .pipe(\n        map((project) => project.comments)\n      );\n  }\n  …\n\n}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {BehaviorSubject} from 'rxjs';\nimport {Project} from '../model';\n\n@Injectable()\nexport class ProjectService {\n  private projects = new BehaviorSubject<Project[]>([]);\n\n  constructor(private http: HttpClient) {\n    this.loadProjects();\n  }\n\n  private loadProjects() {\n    this.http.get<Project[]>('/api/projects')\n      .subscribe((projects) => this.projects.next(projects));\n  }\n\n  getProjects() {\n    return this.projects.asObservable();\n  }\n\n  updateProject(project: Project) {\n    this.http.post(`/api/projects/${project.id}`, project)\n      .subscribe(() => this.loadProjects());\n  }\n}\n```", "```js\nng generate guard --spec=false --module=app guards/project-container\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, Router} from '@angular/router';\nimport {ProjectService} from '../project/project.service';\nimport {map} from 'rxjs/operators';\n\n@Injectable()\nexport class ProjectContainerGuard implements CanActivate {\n  constructor(private projectService: ProjectService,\n              private router: Router) {}\n\n  canActivate(next: ActivatedRouteSnapshot) {\n    return this.projectService.getProjects()\n      .pipe(\n        map(projects => {\n          const projectExists = !!projects.find(project => project.id === +next.params.projectId);\n          if (!projectExists) {\n            this.router.navigate(['/projects', projects[0].id]);\n          }\n          return projectExists;\n        })\n      );\n  }\n}\n```", "```js\n…\nimport {ProjectContainerGuard} from './guards/project-container.guard';\n\nexport const routes: Route[] = [{\n  path: 'projects/:projectId',\n  component: ProjectContainerComponent,\n  canActivate: [ProjectContainerGuard],\n  children: [{\n    path: 'tasks',\n    component: TaskListContainerComponent\n  }, {\n    path: 'comments',\n    component: ProjectCommentsContainerComponent\n  }, {\n    path: '**',\n    redirectTo: 'tasks'\n  }]\n}, {\n  path: '',\n  pathMatch: 'full',\n  redirectTo: '/projects/1'\n}];\n```"]