- en: Selection - Make Selections from Choices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Abstracting checkbox groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing checkbox items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting radio button groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using radio button types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing checkboxes with switches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling selects with state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting multiple items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any application that includes user interactions involves user making selections.
    This could range from a simple on/off switch to selection with several items that
    allow more than one item to be selected. Material-UI has different selection components
    that best fit a given user scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Abstracting checkbox groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Checkboxes often provide the user with a group of related options that can be
    checked or unchecked. The Material-UI `Checkbox` component provides the base functionality,
    but you might want something a little more high level that can be reused throughout
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create an abstraction for groups of checkbox options. Here''s the code
    for a `CheckboxGroup` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you first load the screen, here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e019328e-fb1b-4907-b67e-b6c6b21d657f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what it looks like when you select the first two choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd3e84d4-3786-4698-aae3-f15afacd21b2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `CheckboxGroup` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is the abstraction that allows you to render groups of checkbox options
    on the various screens throughout your app. There are several Material-UI components
    involved with rendering a group of checkboxes—`CheckboxGroup` takes care of this
    for you so that you just need to worry about passing it an array of `values`, `label`,
    and an `onChange` handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s look at how `CheckboxGroup` is rendered by your application component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You only need to worry about structuring the values array and passing it to
    the `CheckboxGroup` component whenever your application needs to render a group
    of related checkbox options. Lastly, let''s look at `state` and the `onChange()`
    handler used to toggle the checked state of the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `checked` property is changed based on the index argument and the `target.checked`
    value.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a `List` component to this example so that you can better visualize
    the state changes that happen when checkboxes are checked/unchecked. Here''s the
    additional Material-UI components that you''ll need to import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The idea is to have this list render the labels of checked items. Let''s render
    this list right below the `CheckboxGroup` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `filter()` call on `values` will only include values where the `checked`
    property is `true`. When the screen first loads, you''ll see an empty list because
    nothing is checked by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c33f75d5-2efb-4776-862d-312cb6b183a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you start making selections, you''ll see the selection list change as a
    reflection of the application state changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62fab76a-0a5a-4deb-8d8a-7a475bb8f7ed.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selection demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Checkbox` API documentation: [https://material-ui.com/api/checkbox/](https://material-ui.com/api/checkbox/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormHelperText` API documentation: [https://material-ui.com/api/form-helper-text/](https://material-ui.com/api/form-helper-text/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormGroup` API documentation: [https://material-ui.com/api/form-group/](https://material-ui.com/api/form-group/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormLabel` API documentation: [https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing checkbox items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default appearance of Material-UI `Checkbox` components tries to resemble
    the native browser checkbox input element. You can change the icon that's used
    for both the checked and the unchecked state of the component. Even after you
    change the icons used by `Checkbox`, any color changes are still honored.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s some code that imports several Material-UI icons and uses them to configure
    the icons used by the `Checkbox` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the checkboxes look like when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4694fa3e-cc13-405c-bf70-25c90b627ee9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These checkboxes are unchecked. Here''s what they look like when they''re checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30e1f3be-b683-45e2-8d41-b566ea64ba0e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s walk through what''s happening here. The `initialItems` array is the
    starting point for the construction of the checkboxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Each item has a `name` component to identify the checkbox, as well as checked/unchecked
    `Icon` components. Next, let''s take a look at how the state of the `CustomizingCheckboxItems`
    component is initialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The state is initialized to an object by reducing the `initialItems` array.
    For each item in the array, the state of this component will have a property that''s
    initialized to false. The name of the property is based on the `name` property
    of the item. So, for example, the component state will look something like this
    after it''s reduced:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'These properties are used to store the checked state of each checkbox. Next,
    let''s look at how each `Checkbox` component is rendered based on the `initialItems`
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The key properties that customize each of the checkboxes are `icon` and `checkedIcon`.
    These properties use the `Icon` and `CheckIcon` properties from the items array,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because the icons that you''re using to customize the `Checkbox` component
    are Material-UI components, you can change the color of the checkbox and have
    it work the same as would without custom icons. For example, you could set the
    color of the checkboxes in this example to default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how this would look with every checkbox checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7f52c0f-6241-434d-bd06-d7abab6bcc94.png)'
  prefs: []
  type: TYPE_IMG
- en: With the color set to the default, the color doesn't change when a checkbox
    goes from unchecked to checked. This doesn't matter much, though, because the
    icons go from an outline theme to a filled theme. Just the shape change is enough
    to indicate that the item is checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try it out with `primary`, just for fun:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how this looks with everything checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fd53663-430e-45c2-9998-adb43440ee40.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Selection` demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Checkbox` API documentation: [https://material-ui.com/api/checkbox/](https://material-ui.com/api/checkbox/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormGroup` API documentation: [https://material-ui.com/api/form-group/](https://material-ui.com/api/form-group/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Abstracting radio button groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Radio button groups** are similar to checkbox groups. The key difference
    is that radios are used when only one value should be selected. Also, like checkbox
    groups, radio button groups require several Material-UI components that can be
    encapsulated and reused throughout an application.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s some code that captures all of the pieces required to put together
    a radio button group into a single component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when you first load the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6eb97438-c896-4b6e-ad43-554dfcebf63a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the component looks like if you were to click on the third option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/694b1a38-364d-473c-9c8c-c78806312760.png)'
  prefs: []
  type: TYPE_IMG
- en: Because these options all belong to the same radio group, only one option can
    be checked at a time.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `RadioGroup` component in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `options` property should have an array value, which is then mapped to the `FormControlLabel`
    components. The `control` property uses the `Radio` component to render each radio
    control. Unlike checkbox groups, the `onChange` property is on the `MaterialRadioGroup`
    component instead of on each individual `Radio`. This is because there's only
    ever a single active value, which is managed by `MaterialRadioGroup`.
  prefs: []
  type: TYPE_NORMAL
- en: The Material-UI `RadioGroup` component is imported with the `MaterialRadioGroup`
    alias because we're creating a component of the same name. This is fine, as long
    as you're clear about which packages own which components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s see how the `RadioGroup` component is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `name` property is what ties everything together. It''s important that
    radio buttons that are part of the same group have the same name. This abstraction
    takes care of this for you by only requiring the name in one place. Here''s what
    the `options` array looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The idea with radio groups is that they only ever have one value. The value
    properties in the `options` array are the allowed values—but only one is active.
    The last thing worth looking at with this example is the `onChange` handler and
    the state structure of the application component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This is how the initial radio selection is set. When it changes, the value state
    is updated to the value of the selected radio.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can disable the entire radio button group by setting the `disabled` property
    on the `FormControl` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When you disable the control, you can''t interact with it at all. Here''s what
    this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac2f3af5-43ae-434f-83c5-da027a70bba0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In other scenarios, you will only want to disable one of the options. You can
    support this in the `RadioGroup` component by checking for a `disabled` property
    in the `options` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how you would disable an option in the `options` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how the radio group looks with the Second option disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/905790cf-1e91-4f7f-bd38-11fc9ad4165e.png)'
  prefs: []
  type: TYPE_IMG
- en: While the Second option is disabled, there's no way to activate it because the
    user cannot interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful about disabling the option that's active by default. There's no way
    for this to not cause confusion for the user. You can activate another option
    in the group, but then you can't activate the option that was active to begin
    with.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Selection` demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Radio` API documentation: [https://material-ui.com/api/radio/](https://material-ui.com/api/radio/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RadioGroup` API documentation: [https://material-ui.com/api/radio-group/](https://material-ui.com/api/radio-group/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormLabel` API documentation: [https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radio button types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of radio button aspects that you can customize to create
    your own type of radio button group. While the underlying principle of selecting
    a single value from several options doesn't change, you can make the radio button
    group design fit any application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that, based on the layout of your screen, and in order to stay consistent
    with other screens in your app, you need to create a radio group with the following
    design traits:'
  prefs: []
  type: TYPE_NORMAL
- en: A single row is used to present options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are icons and text for each option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary theme color is used for selected options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s some code that does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the radio group looks like when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1952a618-c8f4-4ecb-8c2e-efa2c162d6f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can change the default selection by clicking on any of the other icons
    or labels. The icon state is updated to reflect the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9ab9c12-7df6-49e1-8ed0-8405add19cbb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It seems that we were able to meet the criteria set forth for the radio button
    group. Let''s walk through the code to see how each requirement was met. First,
    the group is rendered horizontally with each radio button on the same row. This
    is done by passing the `row` property to the `RadioGroup` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The label of each radio is displayed underneath each radio button because this
    works better with the row layout of the group. This is done by setting the `labelPlacement`
    property value of `FormControlLabel`. The radio color uses the primary color from
    the Material-UI theme when selected. It''s also using custom icons for checked
    and unchecked states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Both of these enhancements are handled by the `Radio` component.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Selection` demos:[ https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Radio` API documentation: [https://material-ui.com/api/radio/](https://material-ui.com/api/radio/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RadioGroup` API documentation: [https://material-ui.com/api/radio-group/](https://material-ui.com/api/radio-group/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControlLabel` API documentation: [https://material-ui.com/api/form-control-label/](https://material-ui.com/api/form-control-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormLabel` API documentation: [https://material-ui.com/api/form-label/](https://material-ui.com/api/form-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing checkboxes with switches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI has a control which is very similar to a checkbox, called a switch.
    The main visual distinction between the two components is that a switch has more
    emphasis on the toggling on/off action. In a mobile environment, users might feel
    more accustomed to the `Switch` component. In any other environment, you're probably
    best sticking with regular `Checkbox` components.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that, instead of creating a component that abstracts a group of
    `Checkbox` components, you you want want to do the same thing with the `Switch`
    components. Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the switch group looks like when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a9987eb-9c23-4ed2-944f-1c247d253394.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the switch group looks like with every switch turned on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f5ce315-7af3-4094-b189-e3fc546c6491.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anywhere that you can use a `Checkbox` component, you can also use a `Switch`
    component. This code was taken from the *Abstracting checkbox groups* section
    from earlier in this chapter. The `Checkbox` components were replaced with `Switch`
    components.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rather than having divergent code paths for handling `Checkbox` versus `Switch`
    components, you could enhance the `SwitchGroup` component to accept a `checkbox`
    Boolean property that, when `true`, uses `Checkbox` as the control instead of
    `Switch`. Here''s what the new `SwitchGroup` looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s an example that shows both versions of the control being rendered
    side by side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The second `SwitchGroup` component uses the `checkbox` property to render the `Checkbox`
    components instead of the `Switch` components. Here''s what the result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5928fd7-6726-4739-98b0-0cc282996c08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what you''ll see if you select the first option in either the switch
    choices or the checkbox choices group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f8f7080-57a8-4d2e-9fd6-d77c7fd52e7a.png)'
  prefs: []
  type: TYPE_IMG
- en: They are both updated because both fields share the same application state.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Selection` demos: [https://material-ui.com/demos/selection-controls/](https://material-ui.com/demos/selection-controls/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling selects with state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some forms involve making selections from a list of values. This is kind of
    like choosing a radio button option from a radio button group. With the Material-UI
    `Select` component, you get something that looks more like a traditional HTML
    select element. Often, web application forms have several selects that depend
    on one another. In React/Material-UI applications, these selects are controlled
    through the `state` component.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your screen has two selects—a category select and a product
    select. Initially, only the category select is populated and enabled. The product
    select depends on the category select—once a category is selected, the product
    select is enabled and populated with the appropriate products. Here''s the code
    to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea78f539-5991-4e16-9bea-952b7e22f1b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The category select is populated with options for you to choose from. The product
    select is disabled because no category has been selected. Here''s what the category
    select looks like when it''s open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4243d9dd-76be-4508-8d75-aa6fa4fcfec4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you select a category, you should be able to open the product select and
    make a product selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42c98998-0e50-4d1c-8c4f-345571ea0834.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The two `Select` components in this example have state dependencies. That is,
    the state of the product select depends on the state of the category select. This
    is because the options displayed in the product select are filtered based on the
    chosen category. Let''s take a closer look at the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `categories` and `products` arrays represent the options of the two selects
    on the screen. The selected option is marked with a `selected` Boolean property
    value of `true`. No options are selected by default. Both selects use the same
    `onChange()` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The array to use depends on the value of `e.target.name`—which will be either
    categories or products. Once the collection value is initialized with the appropriate
    array, the `selected` property is set to `false` for every value. Then, the selected
    value is looked up based on `e.target.value`, and the `selected` property is set
    to `true` for this value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s break down what''s happening in the rest of the `ControllingSelectsWithState`
    component. First, the `category` and `product` selections are looked up from the
    component state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You have to make sure that an object with an `id` property is always assigned
    to these constants, because this is expected later on. The empty string will match
    the empty value option, so that it is selected by default. Next, let''s see how
    the category options are rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a straightforward mapping of values in the `categories` array to the `MenuItem`
    components. The options in the select `category` never change; in other words,
    the product options change based on the selected category—let''s see how this
    is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Before each product is mapped to a `MenuItem` component, the `products` array
    is filtered based on the selected category using `filter()`.
  prefs: []
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Selection` demos: [https://material-ui.com/demos/selects/](https://material-ui.com/demos/selects/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InputLabel` API documentation: [https://material-ui.com/api/input-label/](https://material-ui.com/api/input-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation:  [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormHelperText` API documentation: [https://material-ui.com/api/form-helper-text/](https://material-ui.com/api/form-helper-text/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Select` API documentation: [https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting multiple items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users can select multiple values from the `Select` components. This involves
    using an array as the selected value state.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s some code that renders `Select` with several values. You can select
    as many values as you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the selection looks like when it''s first opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af8ee671-a857-4834-8ce9-3136f50ea6c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the select looks like with the first, third, and fifth options
    selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef081767-4f01-4a97-96d1-b8a05f81d9ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you''ve made your selections, you can click somewhere on the screen
    outside the menu to close it, or you can hit the *E**sc* key. You''ll be able
    to see your selections in the text input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6683a7c-20e3-4b6d-b18e-ab4900bfc80f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by taking a look at how the `Select` component is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `options` array values are mapped to `MenuItem` components, just like any
    other `Select`. The `multiple` property tells the component to allow the user
    to make multiple selections. The `selected` state of the `SelectingMultipleItems`
    component is an array, which holds the selected values. This array is populated
    by the `onChange` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Because the `multiple` property was used, `e.target.value` is an array of selected
    values—you can just update the selected state using this value as is.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rather than having the selected items show up as a comma-separated list of
    `test`, you can make the items stand out by mapping the selected values to `Chip`
    components. Let''s make a component that will handle this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block shows how you can use this component in the `renderValue` property
    of the `Select` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you make multiple selections, they''ll render as `Chip` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba85cb59-fb07-40ee-802c-5a4aae6215fb.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Selection` demos: [https://material-ui.com/demos/selects/](https://material-ui.com/demos/selects/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Select` API documentation: [https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Input` API documentation: [https://material-ui.com/api/input/](https://material-ui.com/api/input/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InputLabel` API documentation: [https://material-ui.com/api/input-label/](https://material-ui.com/api/input-label/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FormControl` API documentation: [https://material-ui.com/api/form-control/](https://material-ui.com/api/form-control/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
