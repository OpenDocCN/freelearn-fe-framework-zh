- en: 'Chapter 2: Creating User Interfaces with Ant Design'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：使用 Ant Design 创建用户界面
- en: Following the principles of `antd` library, which offers a variety of React
    components you can use to accelerate user interface development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循 `antd` 库的原则，该库提供了一系列 React 组件，您可以使用它们来加速用户界面开发。
- en: In this chapter, we'll study the `antd` library and create user interfaces using
    it. The first section will introduce you to the project we will develop, a **Customer
    Relationship Management** (**CRM**) application. Then, we'll configure the layout
    plugin and theme. We'll create the home page and configure internationalization
    support (also known as **i18n**). Finally, we'll make the **Opportunities** page,
    **Customers** page, and **Reports** page.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究 `antd` 库并使用它创建用户界面。第一部分将向您介绍我们将要开发的项目，一个 **客户关系管理**（CRM）应用程序。然后，我们将配置布局插件和主题。我们将创建主页并配置国际化支持（也称为
    **i18n**）。最后，我们将创建 **机会** 页面、**客户** 页面和 **报告** 页面。
- en: 'In this chapter, we''ll cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Introduction to the project and Ant Design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目和 Ant Design 介绍
- en: Setting up the layout and theme
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置布局和主题
- en: Creating the home page and setting up i18n
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建主页和设置国际化
- en: Creating the Opportunities and Customers pages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建机会和客户页面
- en: Creating the **Reports** page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 **报告** 页面
- en: By the end of this chapter, you'll have learned how to search and find the right
    component to meet your needs in the `antd` library. You'll have learned how to
    configure `plugin-layout`, customize your application's default theme, and define
    global styles. You'll also know how to set up support for internationalization
    using `plugin-locale`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学会如何在 `antd` 库中搜索和找到满足您需求的正确组件。您将学会如何配置 `plugin-layout`，自定义应用程序的默认主题，并定义全局样式。您还将了解如何使用
    `plugin-locale` 设置国际化支持。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*,
    Environment Setup and Introduction to UmiJS* (VScode, Node.js, and Yarn).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，您只需要一台安装了任何操作系统（我推荐 Ubuntu 20.04 或更高版本）的电脑以及 [*第 1 章*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*
    环境设置和 UmiJS 介绍*（VScode、Node.js 和 Yarn）的软件。
- en: 'You can find the complete project in the `Chapter02` folder on the GitHub repository
    available at:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 仓库的 `Chapter02` 文件夹中找到完整的项目，该仓库可在以下链接找到：
- en: '[https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)'
- en: Introduction to the project and Ant Design
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目和 Ant Design 介绍
- en: This section will introduce you to the project we'll develop and the Ant Design
    React library.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您介绍我们将要开发的项目以及 Ant Design React 库。
- en: To illustrate the real-world use of UmiJS and Ant Design, we'll develop a frontend
    application for a CRM system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 UmiJS 和 Ant Design 的实际应用，我们将为 CRM 系统开发一个前端应用程序。
- en: A CRM system is a business application that allows a company to approach a customer,
    offer a solution, and develop a relationship with various strategic contacts to
    sell the right solution to the customer and guarantee their satisfaction.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CRM 系统是一种商业应用程序，它允许公司接触客户，提供解决方案，并与各种战略联系人建立关系，以向客户销售正确的解决方案并保证他们的满意度。
- en: 'In our example, the application has three main features: a dashboard with various
    reports, a registry tracking opportunities, and a registry of customers.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，该应用程序有三个主要功能：带有各种报告的仪表板、跟踪机会的注册和客户注册。
- en: We'll also guarantee that our application is easy to be extended and modified
    in the face of business requirements, has a clean code style, and supports internationalization.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将保证我们的应用程序在面对业务需求时易于扩展和修改，拥有清晰的代码风格，并支持国际化。
- en: To build the interfaces of our frontend application, we'll use the Ant Design
    React library. Let's learn more about the `antd` library and the Pro components.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建我们前端应用程序的接口，我们将使用 Ant Design React 库。让我们更深入地了解 `antd` 库和 Pro 组件。
- en: Introduction to Ant Design components
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ant Design 组件介绍
- en: The Ant Design library is a React components library created following the design
    principles of the Ant Design system. The Ant Design library was written in TypeScript
    and offers predictable static types, internationalization support, and theme customization.
    The library is also deeply integrated with UmiJS, so it's easy to customize the
    theme and set internationalization support using it with UmiJS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Ant Design库是一个遵循Ant Design系统设计原则的React组件库。Ant Design库是用TypeScript编写的，提供可预测的静态类型、国际化支持和主题定制。该库还与UmiJS深度集成，因此使用UmiJS可以轻松定制主题和设置国际化支持。
- en: You can browse the library and look for components at [https://ant.design/components/overview/](https://ant.design/components/overview/).
    On this documentation page, you will find detailed descriptions of every library
    component and use case examples followed by their respective code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以浏览库并查找组件，请访问[https://ant.design/components/overview/](https://ant.design/components/overview/)。在此文档页面上，您将找到每个库组件的详细描述以及相应的代码示例。
- en: We'll also use some components from **Pro components**, a set of components
    derived from Ant Design, to provide a high level of abstraction, making the task
    of building complex interfaces easier. You can look for Pro components at [https://procomponents.ant.design/en-US/components](https://procomponents.ant.design/en-US/components).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用来自**Pro components**的一些组件，这是一个由Ant Design派生出的组件集，以提供高级别的抽象，使构建复杂界面的任务更加容易。您可以在[https://procomponents.ant.design/en-US/components](https://procomponents.ant.design/en-US/components)查找Pro
    components。
- en: In this section, you learned about the Ant Design React library and were introduced
    to the project we will build. Let's start building the interfaces by setting the
    default layout and theme.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了Ant Design React库，并介绍了我们将要构建的项目。让我们通过设置默认布局和主题来开始构建界面。
- en: Setting up the layout and theme
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置布局和主题
- en: 'In this section, we''ll set up a default layout using `plugin-layout` and customize
    our application theme, changing the default LESS variables used by `antd`. To
    do that, follow these steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`plugin-layout`设置默认布局，并自定义我们的应用程序主题，更改`antd`使用的默认LESS变量。为此，请按照以下步骤操作：
- en: 'We''ll use the project we created in the previous chapter. Add the `plugin-layout`
    configuration to the `config.ts` file as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用上一章中创建的项目。将`plugin-layout`配置添加到`config.ts`文件中，如下所示：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This configuration adds a page header and a menu for all pages, defines the
    application name and logo, and enables `plugin-locale` in layout components.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置为所有页面添加了页头和菜单，定义了应用程序名称和标志，并在布局组件中启用了`plugin-locale`。
- en: You can also change the layout as you need. For example, you can set the menu
    to appear in the header instead of a side menu, changing the `layout` property
    to `top`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以根据需要更改布局。例如，您可以将菜单设置为在页眉中显示而不是侧菜单，将`layout`属性更改为`top`。
- en: 'Let''s also change the primary color that all interfaces and components use.
    Add this configuration to the `config.ts` file:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们还将更改所有接口和组件使用的主题主色。将此配置添加到`config.ts`文件中：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The theme configuration changes the default values of LESS variables used by
    Ant Design components.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 主题配置更改了Ant Design组件使用的默认LESS变量值。
- en: Important Information
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can find all the default LESS variables at [https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less](https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less](https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less)找到所有默认的LESS变量。
- en: 'Next, we need to add some configurations for `plugin-layout` in the `app.tsx`
    file. Add the following to the `app.tsx` file:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`app.tsx`文件中添加一些`plugin-layout`的配置。将以下内容添加到`app.tsx`文件中：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this configuration, we set the routes `plugin-layou`t that will render
    on the side menu.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置，我们设置了将在侧菜单上渲染的`plugin-layou`t路由。
- en: 'To display menu items correctly in the side menu, adjust the route configuration
    as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了正确显示侧菜单中的菜单项，调整路由配置如下：
- en: routes.ts
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: routes.ts
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We defined the routes to the login page and the home page. The `layout: false`
    property will make the default layout not appear on the login page. The `name`
    and `icon` properties define how the `Home` page will appear on the side menu.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '我们定义了登录页面和主页的路由。`layout: false`属性将使默认布局不在登录页面上显示。`name`和`icon`属性定义了`Home`页面在侧菜单中的显示方式。'
- en: Ant Design provides the icon, and you can look for other icons at [https://ant.design/components/icon/](https://ant.design/components/icon/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Ant Design 提供了图标，你可以在[https://ant.design/components/icon/](https://ant.design/components/icon/)查找其他图标。
- en: Now let's finish our default layout by adding a quick menu, a language selector,
    and changing its style to use our primary color.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过添加快速菜单、语言选择器并将其样式更改为使用我们的主色调来完成默认布局。
- en: Adding right-side content to the layout header
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向布局头部添加右侧内容
- en: 'First, let''s create two new components: `HeaderMenu`, which will contain the
    user''s avatar, the user''s name, and the logout menu item; and the `HeaderOptions`
    component, which will include the `HeaderMenu` and the `SelectLang` components.
    `SelectLang` is a component provided by UmiJS to change between languages supported
    by the application through `plugin-locale`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建两个新的组件：`HeaderMenu`，它将包含用户的头像、用户名和登出菜单项；以及`HeaderOptions`组件，它将包括`HeaderMenu`和`SelectLang`组件。`SelectLang`是UmiJS提供的一个组件，可以通过`plugin-locale`在应用程序支持的语言之间切换。
- en: 'Follow these steps to create the `HeaderMenu` component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建`HeaderMenu`组件：
- en: Create a new folder named `components` in the `src` folder and inside it, create
    a new folder named `HeaderMenu`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹中创建一个名为`components`的新文件夹，并在其中创建一个名为`HeaderMenu`的新文件夹。
- en: 'In the `HeaderMenu` folder, create two files: `index.tsx` and `index.less`.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HeaderMenu`文件夹中，创建两个文件：`index.tsx`和`index.less`。
- en: 'In the `index.tsx` file, create the component as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.tsx`文件中，创建组件如下：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this component, we use the `antd` library `Menu` component to render the
    logout menu item and the `Dropdown` and `Avatar` components to render the user's
    avatar and the user's name. The logout option will appear when you mouse over
    the username or avatar.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们使用`antd`库的`Menu`组件来渲染登出菜单项，以及`Dropdown`和`Avatar`组件来渲染用户的头像和用户名。当鼠标悬停在用户名或头像上时，将显示登出选项。
- en: 'Create the CSS classes for the `Avatar` and `Dropdown` components in the `index.less`
    file as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.less`文件中创建`Avatar`和`Dropdown`组件的CSS类，如下所示：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now follow these steps to create the `HeaderOptions` component:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下步骤创建`HeaderOptions`组件：
- en: In the `components` folder, create a new folder named `HeaderOptions`. Inside
    it, create a file called `index.tsx`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`components`文件夹中，创建一个名为`HeaderOptions`的新文件夹。在其内部，创建一个名为`index.tsx`的文件。
- en: 'In the `index.tsx` file, create the component as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.tsx`文件中，创建组件如下：
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this component, we use the `Space` component of `antd` and the recently created
    `HeaderMenu` component with the `SelectLang` component from UmiJS to render the
    layout header options.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们使用`antd`的`Space`组件和最近创建的`HeaderMenu`组件以及来自UmiJS的`SelectLang`组件来渲染布局头部选项。
- en: '![Figure 2.1 – The language selector (SelectLang component)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.1 – The language selector (SelectLang component)]'
- en: '](img/Figure_2.01_B18503.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.01_B18503.jpg]'
- en: Figure 2.1 – The language selector (SelectLang component)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.1 – The language selector (SelectLang component)
- en: 'Now, to add the `HeaderOptions` component to the layout, follow these steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要将`HeaderOptions`组件添加到布局中，请按照以下步骤操作：
- en: 'Import the `HeaderOptions` component, adding this line to the `app.tsx` file:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`HeaderOptions`组件，将以下行添加到`app.tsx`文件中：
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the `HeaderOptions` component to the `rightContentRender configuration`
    as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`HeaderOptions`组件添加到`rightContentRender配置`中，如下所示：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now the `HeaderOptions` component should appear in the layout header as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`HeaderOptions`组件应该如下显示在布局头部：
- en: '![Figure 2.2 – Layout right content'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.2 – Layout right content]'
- en: '](img/Figure_2.02_B18503.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.02_B18503.jpg]'
- en: Figure 2.2 – Layout right content
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.2 – Layout right content
- en: You may have noticed that the language selector did not appear. It will appear
    once we add language support to the project.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到语言选择器没有出现。一旦我们向项目中添加语言支持，它就会出现。
- en: To finish setting up our layout, let's add the primary color. We can customize
    the CSS class applied to the layout header using the `global.less` file to add
    the primary color.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成布局的设置，让我们添加主色调。我们可以通过使用`global.less`文件来自定义应用于布局头部的CSS类来添加主色调。
- en: UmiJS will apply the `global.less` file before all other style sheets, so when
    you need to customize some style or apply it across all interfaces, you can do
    that using this file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: UmiJS将在所有其他样式表之前应用`global.less`文件，因此当你需要自定义某些样式或跨所有界面应用它时，你可以使用此文件。
- en: 'Follow these steps to customize the CSS class applied to the layout header:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤自定义应用于布局头部的CSS类：
- en: Create a new file under the `src` folder named `global.less`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`文件夹下创建一个名为`global.less`的新文件。
- en: 'Add this style to the `global.less` file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此样式添加到`global.less`文件中：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We added a background gradient using our primary color to the CSS class and
    applied that to the global header.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用主色调添加了背景渐变到CSS类中，并将其应用于全局页眉。
- en: Tip
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You can find CSS classes applied to HTML elements by inspecting the page with
    your browser dev tools. Usually, you need to press *F12* and look for the **Elements**
    tab.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用浏览器开发者工具检查页面来找到应用于HTML元素的CSS类。通常，您需要按*F12*并查找**元素**选项卡。
- en: 'Now the layout header should look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在布局页眉应该看起来像这样：
- en: '![Figure 2.3 – Layout header with primary color applied'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.3 – 应用了主色调的布局页眉'
- en: '](img/Figure_2.03_B18503.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.03_B18503.jpg](img/Figure_2.03_B18503.jpg)'
- en: Figure 2.3 – Layout header with primary color applied
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.3 – 应用了主色调的布局页眉'
- en: In this section, we set up the default layout for all pages by configuring `plugin-layout`
    and customizing the layout using the `global.less` file. We also created the components
    to render the user's avatar, the user's name, and the language selector. Now let's
    build the home page and set up internationalization.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过配置`plugin-layout`和自定义`global.less`文件来设置所有页面的默认布局。我们还创建了渲染用户头像、用户名和语言选择器的组件。现在让我们构建主页并设置国际化。
- en: Creating the home page and setting up i18n
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主页和设置i18n
- en: In this section, we'll create the home page and set up the application's internationalization
    for Portuguese and English.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建主页并设置应用程序的葡萄牙语和英语国际化。
- en: 'Our home page will be composed of two main components: `PageContainer` and
    `ProTable`. When users log in to the application, we want them to see some information
    such as the user''s name, role, and a list of recently opened opportunities. To
    do that, follow these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主页将由两个主要组件组成：`PageContainer`和`ProTable`。当用户登录应用程序时，我们希望他们看到一些信息，例如用户名、角色和最近打开的机会列表。为此，请按照以下步骤操作：
- en: 'Let''s start by adding the `PageContainer` component to the `index.tsx` file
    under the `src/pages/Home` folder as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从向`src/pages/Home`文件夹下的`index.tsx`文件添加`PageContainer`组件开始，如下所示：
- en: '[PRE10]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By default, the `PageContainer` component will render the page title you defined
    as the route name in the `routes.ts` file, but we set it to `undefined` as we
    don't want to display the title on this page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`PageContainer`组件将渲染您在`routes.ts`文件中定义的路由名称作为页面标题，但我们将它设置为`undefined`，因为我们不想在这个页面上显示标题。
- en: 'Now we''ll add some basic information to the content of `PageContainer`. We
    want it so that when the user logs into the application, they see a greeting followed
    by their name, role, and avatar, so go ahead and add the following information
    to the `content` property of `PageContainer` as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在`PageContainer`的内容中添加一些基本信息。我们希望当用户登录应用程序时，他们能看到问候语，然后是他们的名字、角色和头像，所以请将以下信息添加到`PageContainer`的`content`属性中，如下所示：
- en: '[PRE11]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we added the `Avatar` component from `antd` followed by the greeting,
    the user's name, and role.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了来自`antd`的`Avatar`组件，然后是问候语、用户名和角色。
- en: 'We also need to define the styles in the file `index.less`. Add these styles
    to the `index.less` file under the `src/pages/Home` folder as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要在文件`index.less`中定义样式。将以下样式添加到`src/pages/Home`文件夹下的`index.less`文件中，如下所示：
- en: '[PRE12]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that we imported a file called `default.less` from `antd`. This file
    contains the default LESS variables used by Ant Design components to define the
    styles. We are using some of these variables in our CSS classes too.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已从`antd`导入了一个名为`default.less`的文件。此文件包含Ant Design组件用于定义样式的默认LESS变量。我们也在我们的CSS类中使用了一些这些变量。
- en: I highly recommend you familiarize yourself with these variables; this will
    help you maintain a consistent style with the Ant Design specification. You can
    access the `default.less` file by pressing *Ctrl* and clicking on its import path,
    or you can see the file on GitHub at [https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less](https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议您熟悉这些变量；这将帮助您与Ant Design规范保持一致的风格。您可以通过按*Ctrl*并单击其导入路径来访问`default.less`文件，或者您可以在GitHub上查看该文件：[https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less](https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less)。
- en: The next component we'll add to our page is `ProTable`; this is a Pro components
    component that abstracts the logic for manipulating a batch of data in a table.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的页面上添加的下一个组件是`ProTable`；这是一个抽象了在表格中操作一批数据逻辑的Pro组件组件。
- en: 'To add the component, we need to install its package, so run this command to
    do so:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加组件，我们需要安装其包，因此运行以下命令来完成：
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, add the `ProTable` component inside the `PageContainer` component in
    the `index.tsx` file under `src/pages/Home` as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `src/pages/Home` 文件夹下的 `index.tsx` 文件中，在 `PageContainer` 组件内部添加 `ProTable`
    组件，如下所示：
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At this point, your home page should look like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您的首页应该看起来像这样：
- en: '![Figure 2.4 – Home page interface'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – 主页界面'
- en: '](img/Figure_2.04_B18503.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.04_B18503.jpg)'
- en: Figure 2.4 – Home page interface
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 主页界面
- en: Now it's time to add support for **internationalization** (**i18n**) to our
    application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为我们的应用程序添加对 **国际化**（**i18n**）的支持了。
- en: Setting up internationalization
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置国际化
- en: 'To add support to i18n using `plugin-locale`, first, we must move all the text
    we want to translate to multi-language files under the `src/locales` folder. I''ll
    build the entire application in English and Portuguese to demonstrate this feature,
    but you don''t need to worry about it; you can download the Portuguese files available
    at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
    Follow these steps to create our language files:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `plugin-locale` 添加对 i18n 的支持，首先，我们必须将所有要翻译的文本移动到 `src/locales` 文件夹下的多语言文件中。我将使用英语和葡萄牙语构建整个应用程序来演示此功能，但您不必担心这一点；您可以下载在
    [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)
    上可用的葡萄牙语文件。按照以下步骤创建我们的语言文件：
- en: Create a file named `en-US.ts` under the `src/locales` folder, download the
    file `pt-BR.ts`, and place it under the same folder.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/locales` 文件夹下创建一个名为 `en-US.ts` 的文件，下载 `pt-BR.ts` 文件，并将其放置在相同的文件夹中。
- en: 'Type the texts for the home page in the `en-US.ts` file as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `en-US.ts` 文件中按照以下方式输入主页的文本：
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We need to change the texts on the home page with the `FormattedMessage` component.
    Import the component in the `index.ts` file under the `src/pages` folder, adding
    this line:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用 `FormattedMessage` 组件更改主页上的文本。在 `src/pages` 文件夹下的 `index.ts` 文件中导入组件，添加以下行：
- en: '[PRE16]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And change the text of the component as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且按照以下方式更改组件的文本：
- en: '[PRE17]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Also change the `ProTable` `headerTitle` property as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要按照以下方式更改 `ProTable` 的 `headerTitle` 属性：
- en: '[PRE18]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `FormattedMessage` component property `id` must match the same key in the
    `en-US.ts` and the `pt-BR.ts` files. As you select the language, the component
    will render the corresponding text.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormattedMessage` 组件的属性 `id` 必须与 `en-US.ts` 和 `pt-BR.ts` 文件中的相同键匹配。当你选择语言时，组件将渲染相应的文本。'
- en: 'We want the menu titles translated, so let''s add files to translate menu items.
    Follow these steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要翻译菜单标题，所以让我们添加要翻译的菜单项文件。按照以下步骤操作：
- en: Create a new folder named `en-US` under the `src/locales` folder. Under the
    `en-US` folder, create a new file named `menu.ts`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/locales` 文件夹下创建一个名为 `en-US` 的新文件夹。在 `en-US` 文件夹下，创建一个名为 `menu.ts` 的新文件。
- en: 'Add the text to render in the menu item to the `menu.ts` file as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将要渲染在菜单项中的文本添加到 `menu.ts` 文件中，如下所示：
- en: '[PRE19]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The key for the text needs to match the `name` property in the `routes.ts` file.
    `plugin-locale` will render the correct text as you change between languages.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 文本的键需要与 `routes.ts` 文件中的 `name` 属性匹配。`plugin-locale` 将在您在语言之间切换时渲染正确的文本。
- en: 'Import the `menu.ts` file into the `en-US.ts` file as follows:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式将 `menu.ts` 文件导入到 `en-US.ts` 文件中：
- en: '[PRE20]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We also need to add the `menu.ts` file to the Portuguese language, so create
    a new folder named `pt-BR`, under the `src/locales` folder, download the `menu.ts`
    file available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs),
    and place it under the `pt-BR` folder.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要将 `menu.ts` 文件添加到葡萄牙语中，所以在 `src/locales` 文件夹下创建一个名为 `pt-BR` 的新文件夹，从 [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)
    下载可用的 `menu.ts` 文件，并将其放置在 `pt-BR` 文件夹下。
- en: 'Now you can change the application''s language using the language selector
    at the top of the page, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用页面顶部的语言选择器更改应用程序的语言，如下面的截图所示：
- en: '![Figure 2.5 – Home page with the Portuguese language selected'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – 选择葡萄牙语的主页'
- en: '](img/Figure_2.05_B18503.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.05_B18503.jpg)'
- en: Figure 2.5 – Home page with the Portuguese language selected
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 选择葡萄牙语的主页
- en: In this section, we created the home page using the `PageContainer` and `ProTable`
    components. We also set up internationalization by creating multi-language files
    under the `src/locales` folder and using the `FormattedMessage` component to replace
    the texts with their corresponding translations.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用 `PageContainer` 和 `ProTable` 组件创建了主页。我们还通过在 `src/locales` 文件夹下创建多语言文件并使用
    `FormattedMessage` 组件替换文本为相应的翻译来设置国际化。
- en: Now, you'll use what you learned to create the **Opportunities** and **Customers**
    pages.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将使用所学知识来创建 **机会** 和 **客户** 页面。
- en: Creating the Opportunities and Customers pages
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建机会和客户页面
- en: In this section, we'll build the **Opportunities** and **Customers** pages.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建 **机会** 和 **客户** 页面。
- en: The **Opportunities** page allows users to browse and register a new sale opportunity.
    A sale opportunity occurs when a customer seems interested in buying a product
    or service. On the **Opportunities** page, we track all activities performed until
    the opportunity is won, when the customer buys the product or service, or until
    the opportunity is lost, when the customer buys a competitor's product or withdraws
    from the purchase.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**机会** 页面允许用户浏览和注册新的销售机会。当客户似乎对购买产品或服务感兴趣时，就会发生销售机会。在 **机会** 页面上，我们跟踪所有活动，直到机会被赢得（客户购买产品或服务），或者直到机会丢失（客户购买竞争对手的产品或取消购买）。'
- en: The **Customers** page allows users to register and search for customers' contact
    information.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**客户** 页面允许用户注册和搜索客户的联系信息。'
- en: 'These two pages are similar; they use the `ProTable` component to list the
    opportunities and customers registered. Run the following commands to generate
    the two pages:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个页面相似；它们使用 `ProTable` 组件列出注册的机会和客户。运行以下命令生成两个页面：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let''s start with the **Customers** page. Follow these steps to build
    the **Customers** page interface:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从 **客户** 页面开始。按照以下步骤构建 **客户** 页面界面：
- en: 'Add the `PageContainer` and the `ProTable` components to the `index.tsx` file
    under the `src/pages/Customer` folder as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `PageContainer` 和 `ProTable` 组件添加到 `src/pages/Customer` 文件夹下的 `index.tsx`
    文件中，如下所示：
- en: '[PRE22]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that we use the `FormattedMessage` component to render the texts on this
    page, so we need to add these texts to multi-language files in the `src/locales`
    folder.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用 `FormattedMessage` 组件在此页面上渲染文本，因此我们需要将这些文本添加到 `src/locales` 文件夹中的多语言文件中。
- en: 'Add the text present on the `en-US.ts` file as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式将 `en-US.ts` 文件中的文本添加：
- en: '[PRE23]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, to access the `routes.ts` file as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要访问 `routes.ts` 文件，请按照以下方式：
- en: '[PRE24]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the customer menu item title to the `menu.ts` file under the `src/locales/en-US`
    folder as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将客户菜单项标题添加到 `src/locales/en-US` 文件夹下的 `menu.ts` 文件中，如下所示：
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let''s build the **Opportunities** page following the steps demonstrated
    previously:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照之前演示的步骤构建 **机会** 页面：
- en: 'For the `headerTitle` property of `ProTable`, type the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `ProTable` 的 `headerTitle` 属性，请输入以下内容：
- en: '[PRE26]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define the **Opportunities** page route as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 **机会** 页面的路由如下：
- en: '[PRE27]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Don't forget to add the texts to the `en-US.ts` and `menu.ts` files.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记将文本添加到 `en-US.ts` 和 `menu.ts` 文件中。
- en: 'The result should look like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该看起来像这样：
- en: '![Figure 2.6 – Opportunities page layout and menu items'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6 – 机会页面布局和菜单项'
- en: '](img/Figure_2.06_B18503.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.06_B18503.jpg]'
- en: Figure 2.6 – Opportunities page layout and menu items
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 机会页面布局和菜单项
- en: In this section, we created the `ProTable` component with support for internationalization.
    Next, we'll build the **Reports** page.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了支持国际化的 `ProTable` 组件。接下来，我们将构建 **报告** 页面。
- en: Creating the Reports page
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建报告页面
- en: Now, we'll build the **Reports** page. Users can access helpful information
    on this page to get insights into the sales life cycle. We'll add three charts
    to this page using the chart component library bizcharts.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将构建 **报告** 页面。用户可以在此页面上获取有用的信息，以深入了解销售生命周期。我们将使用 bizcharts 组件库在此页面上添加三个图表。
- en: 'The bizcharts library is focused on business scenarios and dedicated to creating
    professional data visualization solutions. It''s also an open source project licensed
    under the MIT license. You can learn more about bizcharts at [https://bizcharts.taobao.com/](https://bizcharts.taobao.com/):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: bizcharts 库专注于商业场景，致力于创建专业的数据可视化解决方案。它也是一个开源项目，遵循 MIT 许可协议。您可以在 [https://bizcharts.taobao.com/](https://bizcharts.taobao.com/)
    了解更多关于 bizcharts 的信息：
- en: 'First, run this command to install the bizcharts package:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，运行以下命令来安装 bizcharts 包：
- en: '[PRE28]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, run this command to generate the **Reports** page:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令以生成**报告**页面：
- en: '[PRE29]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, follow these steps to create the **Reports** page interface:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤创建**报告**页面界面：
- en: 'Let''s define the page layout with `antd` components. Add the following components
    to the `index.tsx` file under the `src/pages/Reports` folder:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`antd`组件定义页面布局。将以下组件添加到`src/pages/Reports`文件夹下的`index.tsx`文件：
- en: '[PRE30]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We defined the layout with two responsive rows, and the first row has two responsive
    columns. The `colProps` variable sets how the columns should adjust their size
    at different breakpoints.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用两个响应式行定义了布局，第一行有两个响应式列。`colProps`变量设置列在不同断点处如何调整其大小。
- en: 'Now, let''s add the first chart. This chart will show the four most important
    opportunities classified by the CRM analytics service. Add the `Chart` component
    from bizcharts inside the first column of the first row as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加第一个图表。这个图表将显示由CRM分析服务分类的前四个最重要的机会。如下将bizcharts中的`Chart`组件添加到第一行的第一列：
- en: '[PRE31]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We can configure the `Chart` component with its children components. We set
    the chart to invert the *x* and *y* axis with the `Coordinate` component. With
    the `Axis` component, we defined a new axis called `revenue`. The `Interval` component
    described the chart type and the keys that will populate the axis using the `position`
    property.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用其子组件配置`Chart`组件。我们使用`Coordinate`组件将图表设置为反转*x*和*y*轴。使用`Axis`组件，我们定义了一个名为`revenue`的新轴。`Interval`组件描述了图表类型和将使用`position`属性填充轴的键。
- en: Notice that we set an empty array in the `data` property. We'll put the information
    we want to display in the `data` property in the future.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在`data`属性中设置了一个空数组。我们将在未来将想要显示的信息放入`data`属性中。
- en: 'Let''s add the second chart. This chart will show where the customers come
    from and in what proportion. Add the `Chart` component to the second column of
    the first row as follows:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加第二个图表。这个图表将显示客户来源及其比例。如下将`Chart`组件添加到第一行的第二列：
- en: '[PRE32]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this chart, we set the `Coordinate` component to cylindrical coordinates
    to generate a pie chart. With the `Interaction` component, we set the chart to
    react when it is moused over or clicked.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在此图表中，我们将`Coordinate`组件设置为圆柱坐标以生成饼图。使用`Interaction`组件，我们将图表设置为在鼠标悬停或点击时做出反应。
- en: 'The last chart shows the opportunities gained and lost by month. Add the `Chart`
    component to the second row as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个图表显示了按月获得和失去的机会。如下将`Chart`组件添加到第二行：
- en: '[PRE33]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To finish the `en-US.ts` file under the `src/locales` folder:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成`src/locales`文件夹下的`en-US.ts`文件：
- en: '[PRE34]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And add the following text to the `menu.ts` file under the `src/locales/en-US`
    folder:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并将以下文本添加到`src/locales/en-US`文件夹下的`menu.ts`文件：
- en: '[PRE35]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, configure the `routes.ts` file as follows:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按照以下方式配置`routes.ts`文件：
- en: '[PRE36]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, the **Reports** page is finished and should look like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，**报告**页面已完成，应该看起来像这样：
- en: '![Figure 2.7 – Reports page layout'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7 – 报告页面布局'
- en: '](img/Figure_2.07_B18503.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.07_B18503.jpg)'
- en: Figure 2.7 – Reports page layout
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 报告页面布局
- en: Notice that all chart cards are empty because we defined empty arrays in all
    chart `data` properties. We'll generate the data required to show the charts in
    the next chapter.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，所有图表卡片都是空的，因为我们定义了所有图表`data`属性中的空数组。我们将在下一章生成显示图表所需的数据。
- en: 'In this section, we created the **Reports** page using the bizcharts library.
    We added three charts to our page: a bar chart called **Top opportunities**, a
    pie chart called **Leads by source**, and a bar chart called **Opportunities Won/Lost
    by month**.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用bizcharts库创建了**报告**页面。我们在页面上添加了三个图表：一个名为**顶级机会**的柱状图，一个名为**来源线索**的饼图，以及一个名为**按月赢得/失去的机会**的柱状图。
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the project we'll build, the Ant Design
    React library, and Pro components. You also learned how to configure the layout
    using the UmiJS layout plugin and define and customize the global layout using
    the `global.less` file. You learned how to customize the application theme by
    changing the default LESS variables used by Ant Design components.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你被介绍到我们将要构建的项目，Ant Design React库和Pro组件。你还学习了如何使用UmiJS布局插件配置布局，并使用`global.less`文件定义和自定义全局布局。你学习了如何通过更改Ant
    Design组件使用的默认LESS变量来自定义应用程序主题。
- en: We also created and defined our application layout's right-side content to show
    the user's name, avatar, and a language selector. You learned how to set up internationalization
    using the UmiJS locale plugin and created the home page. Next, we made the `ProTable`
    component.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建并定义了应用布局右侧内容，以显示用户的姓名、头像和语言选择器。你学习了如何使用 UmiJS 本地化插件来设置国际化，并创建了主页。接下来，我们制作了
    `ProTable` 组件。
- en: Finally, we built the **Reports** page using **antd** library components to
    define the layout and the bizcharts library to render three charts.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 **antd** 库组件来定义布局，并使用 bizcharts 库来渲染三个图表来构建了 **报告** 页面。
- en: In the next chapter, we'll generate a mock API, make requests to the backend,
    and learn how to use services and models.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将生成模拟 API，向后端发送请求，并学习如何使用服务和模型。
