["```js\nng new Angular-test\n```", "```js\nnpm install -g karma-cli\n```", "```js\n// ./app/sampletest.spec.ts\ndescribe('Sample Test', () => {\n it('true is true', () => expect(true).toBe(true));\n });\n\n import {AppComponent} from './app.component';\n\n describe('AppComponent', () => {\n beforeEach(function() {\n this.app = new AppComponent();\n });\n\n it('should have hello property', function() {\n expect(this.app.hello).toBe('Hello, World!');\n });\n });\n```", "```js\nprivate hello: string = 'Hello, World!';\n```", "```js\n// ./karma.conf.js.\nmodule.exports = function (config) {\n config.set({\n basePath: '',\n frameworks: ['jasmine', 'angular-cli'],\n plugins: [\n require('karma-jasmine'),\n require('karma-chrome-launcher'),\n require('karma-remap-istanbul'),\n require('angular-cli/plugins/karma')\n ],\n files: [\n { pattern: './src/test.ts', watched: false }\n ],\n preprocessors: {\n './src/test.ts': ['angular-cli']\n },\n remapIstanbulReporter: {\n reports: {\n html: 'coverage',\n lcovonly: './coverage/coverage.lcov'\n }\n },\n angularCli: {\n config: './angular-cli.json',\n environment: 'dev'\n },\n reporters: ['progress', 'karma-remap-istanbul'],\n port: 9876,\n colors: true,\n logLevel: config.LOG_INFO,\n autoWatch: true,\n browsers: ['PhantomJS'],\n singleRun: false\n });\n };\n```", "```js\nng generate component sample\n```", "```js\n//sample.component.ts\nimport { Component, OnInit } from '@angular/core';\n\n @Component({\n selector: 'app-sample',\n templateUrl: './sample.component.html',\n styleUrls: ['./sample.component.css']\n })\n export class SampleComponent implements OnInit {\n title = 'Test Sample Component';\n constructor() { }\n ngOnInit() {\n }\n }\n```", "```js\n//sample.component.spec.ts\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { DebugElement } from '@angular/core';\nimport { SampleComponent } from './sample.component';\ndescribe('SampleComponent (inline template)', () => {\nlet component: SampleComponent;\nlet fixture: ComponentFixture<SampleComponent>;\n// For Debugging HTML Elements\nlet debug: DebugElement;\nlet htmlElem: HTMLElement;\nbeforeEach(() => {\nTestBed.configureTestingModule({\ndeclarations: [ SampleComponent ], // Our Test sample component\n});\n// Get the ComponentFixture\nfixture = TestBed.createComponent(SampleComponent);\ncomponent = fixture.componentInstance; // SampleComponent test instance\n// CSS Element selector\ndebug = fixture.debugElement.query(By.css('h1'));\nhtmlElem = debug.nativeElement;\n});\nit('don't show any title on DOM until we call `detectChanges`', () => {\nexpect(htmlElem.textContent).toEqual('');\n});\nit('should display original title', () => {\nfixture.detectChanges();\nexpect(htmlElem.textContent).toContain(component.title);\n});\nit('should display a different test title', () => {\ncomponent.title = Different Test Title';\nfixture.detectChanges();\nexpect(htmlElem.textContent).toContain('Different Test Title');\n});\n});\n```", "```js\nTestBed.configureTestingModule({\n declarations: [ SampleComponent ],\n providers: [\n { provide: ComponentFixtureAutoDetect, useValue: true }\n ]\n })\n```", "```js\n//a simple service\nexport class UsersService {\nget() {\nreturn ['Ken', 'Mark', 'Chris'];\n}\n}\n```", "```js\ndescribe('Service: UsersService', () => {\nlet service;\nbeforeEach(() => TestBed.configureTestingModule({\nproviders: [ UsersService ]\n}));\nbeforeEach(inject([UsersService], s => {\nservice = s;\n}));\nit('should return available users', () => {\nlet users = service.get();\nexpect(users).toContain('en');\nexpect(users).toContain('es');\nexpect(users).toContain('fr');\nexpect(users.length).toEqual(3);\n});\n});\n```", "```js\n// users.serviceHttp.ts\nexport class UsersServiceHttp {\nconstructor(private http:Http) { }\nget(){\nreturn this.http.get('api/users.json')\n.map(response => response.json());\n}\n}\n```", "```js\n//users.serviceHttp.spec.ts\ndescribe('Service: UsersServiceHttp', () => {\nlet service;\n//setup\nbeforeEach(() => TestBed.configureTestingModule({\nimports: [ HttpModule ],\nproviders: [ UsersServiceHttp ]\n}));\nbeforeEach(inject([UsersServiceHttp], s => {\nservice = s;\n}));\n//specs\nit('should return available users', async(() => {\nservice.get().subscribe(x => {\nexpect(x).toContain('en');\nexpect(x).toContain('es');\nexpect(x).toContain('fr');\nexpect(x.length).toEqual(3);\n});\n}));\n})\n```", "```js\n//users.serviceHttp.spec.ts\ndescribe('MockBackend: UsersServiceHttp', () => {\nlet mockbackend, service;\n//setup\nbeforeEach(() => {\nTestBed.configureTestingModule({\nimports: [ HttpModule ],\nproviders: [\nUsersServiceHttp,\n{ provide: XHRBackend, useClass: MockBackend }\n]\n})\n});\nbeforeEach(inject([UsersServiceHttp, XHRBackend], (_service, _mockbackend) => {\nservice = _service;\nmockbackend = _mockbackend;\n}));\n//specs\nit('should return mocked response (sync)', () => {     \n  let response = [\"ru\", \"es\"];     \n  mockbackend.connections.subscribe(connection => {         \n    connection.mockRespond(new Response(new ResponseOptions({             \n     body: JSON.stringify(response)         \n    })));         \n   service.get().subscribe(users => {             \n     expect(users).toContain('ru');             \n     expect(users).toContain('es');             \n     expect(users.length).toBe(2);         \n   });     \n }); \n}); \n```", "```js\nimport { Directive, HostBinding, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appBackgroundChanger]'\n})\nexport class BackgroundChangerDirective {\n\n  @HostBinding('style.background-color') backgroundColor: string;\n\n  @HostListener('mouseover') onHover() {\n    this.backgroundColor = 'red';\n  }\n\n  @HostListener('mouseout') onLeave() {\n    this.backgroundColor = 'inherit';\n  }\n\n}\n```", "```js\n@Component({\n selector: 'container',\n template: `<div log-clicks (changes)=\"changed($event)\"></div>`,\n directives: [logClicks]\n })\n export class Container {\n @Output() changes = new EventEmitter();\n changed(value){\n this.changes.emit(value);\n }\n }\n```", "```js\ndescribe('Directive: logClicks', () => {\nlet fixture;\nlet container;\nlet element;\n//setup\nbeforeEach(() => {\nTestBed.configureTestingModule({\ndeclarations: [ Container, logClicks ]\n});\nfixture = TestBed.createComponent(Container);\ncontainer = fixture.componentInstance; // to access properties and methods\nelement = fixture.nativeElement; // to access DOM element\n});\n//specs\nit('should increment counter', fakeAsync(() => {\nlet div = element.querySelector('div');\n//set up subscriber\ncontainer.changes.subscribe(x => {\nexpect(x).toBe(1);\n});\n//trigger click on container\ndiv.click();\n//execute all pending asynchronous calls\ntick();\n}));\n})\n```", "```js\n//capitalise.pipe.ts\nimport {Pipe, PipeTransform} from '@angular/core';\n@Pipe({\nname: 'capitalise'\n})\nexport class CapitalisePipe implements PipeTransform {\ntransform(value: string): string {\nif (typeof value !== 'string') {\nthrow new Error('Requires a String as input');\n}\nreturn value.toUpperCase();\n}\n}\n```", "```js\ndescribe('Pipe: CapitalisePipe', () => {\nlet pipe;\n//setup\nbeforeEach(() => TestBed.configureTestingModule({\nproviders: [ CapitalisePipe ]\n}));\nbeforeEach(inject([CapitalisePipe], p => {\npipe = p;\n}));\n//specs\nit('should work with empty string', () => {\nexpect(pipe.transform('')).toEqual('');\n});\nit('should capitalise', () => {\nexpect(pipe.transform('wow')).toEqual('WOW');\n});\nit('should throw with invalid values', () => {\n//must use arrow function for expect to capture exception\nexpect(()=>pipe.transform(undefined)).toThrow();\nexpect(()=>pipe.transform()).toThrow();\nexpect(()=>pipe.transform()).toThrowError('Requires a String as input');\n});\n})\n```"]