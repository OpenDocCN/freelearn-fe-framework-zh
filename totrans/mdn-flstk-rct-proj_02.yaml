- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Preparing for Full-Stack Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备进行全栈开发
- en: In this chapter, I am first going to give a brief overview of the contents of
    the book and explain why the skills taught in this book are important in a modern
    development environment. Then, we will jump into action and set up a project that
    will be used as a basis for the development of our full-stack projects. At the
    end of this chapter, you will have an **integrated development environment** (**IDE**)
    and project set up and ready for full-stack development and will understand which
    tools can be used for setting up such projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我首先将简要概述本书的内容，并解释为什么本书中教授的技能在现代开发环境中很重要。然后，我们将开始行动，设置一个将作为我们全栈项目开发基础的项目。在本章结束时，你将拥有一个**集成开发环境**（**IDE**）和项目，它们已设置好并准备好进行全栈开发，并且将了解哪些工具可以用于设置此类项目。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Motivation to become a full-stack developer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为全栈开发者的动机
- en: What is new in the third edition?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三版的新内容是什么？
- en: Getting the most out of this book
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用本书
- en: Setting up the development environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will guide you through setting up all the necessary technologies
    needed for developing full-stack web applications throughout this book. Before
    we start, please install the following, if you do not already have them installed:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导你设置本书中开发全栈网络应用程序所需的所有必要技术。在我们开始之前，如果你还没有安装以下内容，请安装它们：
- en: Node.js v20.10.0
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js v20.10.0
- en: Git v2.43.0
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git v2.43.0
- en: Visual Studio Code v1.84.2
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code v1.84.2
- en: Those versions are the ones used in the book. While installing a newer version
    should not be an issue, please note that certain steps might work differently
    on a newer version. If you are having an issue with the code and steps provided
    in this book, please try using the mentioned versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些版本是书中使用的版本。虽然安装较新版本通常不会有问题，但请注意，某些步骤在较新版本上可能有所不同。如果你在使用本书中提供的代码和步骤时遇到问题，请尝试使用提到的版本。
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章的代码：[https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1](https://github.com/PacktPublishing/Modern-Full-Stack-React-Projects/tree/main/ch1)。
- en: 'The CiA video for this chapter can be found at: [https://youtu.be/dyf3nECvKAE](https://youtu.be/dyf3nECvKAE).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CiA 视频可以在以下网址找到：[https://youtu.be/dyf3nECvKAE](https://youtu.be/dyf3nECvKAE)。
- en: Important
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: If you cloned the full repository for the book, Husky may not find the **.git**
    directory when running **npm install**. In that case, just run **git init** in
    the root of the corresponding chapter folder.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你克隆了本书的完整仓库，当运行 **npm install** 时，Husky 可能找不到 **.git** 目录。在这种情况下，只需在相应章节文件夹的根目录下运行
    **git init**。
- en: Motivation to become a full-stack developer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为全栈开发者的动机
- en: Understanding full-stack development is becoming increasingly important, as
    companies seek to increase the cooperation – and reduce the gap – between the
    frontend and the backend. The frontend is becoming more deeply integrated with
    the backend, using technologies such as server-side rendering. Throughout this
    book, we are going to learn about the development, integration, testing, and deployment
    of full-stack projects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随着公司寻求增加前端和后端之间的合作并缩小差距，理解全栈开发变得越来越重要。前端正越来越深入地与后端集成，使用如服务器端渲染等技术。在本书中，我们将学习全栈项目的开发、集成、测试和部署。
- en: What is new in this release of Full-Stack React Projects?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Full-Stack React Projects 本次发布的新内容是什么？
- en: Unlike previous releases of Full-Stack React Projects, this new release focuses
    more on the integration of the frontend with the backend than the previous two
    editions, and thus intentionally does not focus so much on creating a **user interface**
    (**UI**) or using UI libraries, such as **Material UI** (**MUI**), on the frontend.
    This edition gives the essential knowledge for integrating and deploying full-stack
    web applications. The deployment of apps was missing completely from previous
    editions, and testing was only briefly introduced. This edition focuses more on
    these essential parts of full-stack development such that, after reading this
    book, you will be able to develop, integrate, test, and deploy a full-stack web
    application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与Full-Stack React Projects的先前版本相比，这个新版本更注重前端与后端的集成，而不是前两个版本，因此故意不太多关注创建**用户界面**（**UI**）或在前端使用UI库，如**Material
    UI**（**MUI**）。本版提供了集成和部署全栈Web应用程序的基本知识。应用程序的部署在先前版本中完全缺失，测试也仅简要介绍。本版更注重全栈开发的这些基本部分，这样，在阅读本书后，您将能够开发、集成、测试和部署全栈Web应用程序。
- en: Getting the most out of this book
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用本书
- en: To keep the book short and to the point, we are going to use specific technologies
    and tools. The concepts, however, apply to other technologies as well. We will
    attempt to briefly introduce alternatives so that if something is not a good fit
    for your project, you can pick and choose different tools. I recommend first trying
    out the technologies introduced in this book to be able to follow the instructions,
    but do not hesitate to try out the alternatives on your own later.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使本书简短而直接，我们将使用特定的技术和工具。然而，这些概念也适用于其他技术。我们将尝试简要介绍替代方案，以便如果某些方案不适合您的项目，您可以挑选和选择不同的工具。我建议首先尝试本书中介绍的技术，以便能够遵循说明，但请不要犹豫，以后可以自己尝试替代方案。
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided. It is important to write the code yourself
    in order to learn and understand it properly. However, if you run into any issues,
    you can always refer to the code examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您亲自编写代码。不要简单地运行提供的代码示例。为了正确学习和理解，亲自编写代码非常重要。然而，如果您遇到任何问题，您始终可以参考代码示例。
- en: With that said, let’s start with setting up our development environment in the
    next section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们在下一节中开始设置我们的开发环境。
- en: Setting up the development environment
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: In this book, we are going to use **Visual Studio Code** (**VS Code**) as our
    code editor. Feel free to use whichever editor you prefer, but keep in mind that
    the extensions used and settings configured may be slightly different in the editor
    of your choice.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用**Visual Studio Code**（**VS Code**）作为我们的代码编辑器。请随意使用您偏好的任何编辑器，但请记住，您选择的编辑器中使用的扩展和配置的设置可能略有不同。
- en: Let’s now install VS Code and useful extensions, and then continue setting up
    all the tools needed for our development environment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将安装VS Code和有用的扩展，然后继续设置我们开发环境所需的所有工具。
- en: Installing VS Code and extensions
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装VS Code和扩展
- en: 'Before we can get started developing and setting up the other tools, we need
    to set up our code editor by following these steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始开发并设置其他工具之前，我们需要按照以下步骤设置我们的代码编辑器：
- en: Download VS Code for your operating system from the official website (at the
    time of writing, the URL is [https://code.visualstudio.com/](https://code.visualstudio.com/)).
    We are going to use version *1.84.2* in this book.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方网站（撰写本文时，网址为[https://code.visualstudio.com/](https://code.visualstudio.com/))下载适用于您操作系统的VS
    Code。本书中将使用版本*1.84.2*。
- en: 'After downloading and installing the application, open it, and you should see
    the following window:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装应用程序后，打开它，您应该会看到以下窗口：
- en: '![Figure 1.1 – A fresh installation of VS Code (on macOS)](img/B19385_01_1.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – VS Code的新安装（在macOS上）](img/B19385_01_1.jpg)'
- en: Figure 1.1 – A fresh installation of VS Code (on macOS)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – VS Code的新安装（在macOS上）
- en: 'To make things easier later, we are going to install some extensions, so click
    on the **Extensions** icon, which is the fifth icon from the top on the left in
    the screenshot. A sidebar should open, where you will see **Search Extensions
    in Marketplace** at the top. Enter an extension name here and click on **Install**
    to install it. Let’s start by installing the **Docker** extension:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让事情变得简单，我们将安装一些扩展，因此点击截图左侧顶部第五个图标上的 **扩展** 图标。应该会打开一个侧边栏，您将在顶部看到 **在市场搜索扩展**。在此处输入扩展名称并点击
    **安装** 以安装它。让我们先安装 **Docker** 扩展：
- en: '![Figure 1.2 – Installing the Docker extension in VS Code](img/B19385_01_2.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 在 VS Code 中安装 Docker 扩展](img/B19385_01_2.jpg)'
- en: Figure 1.2 – Installing the Docker extension in VS Code
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 在 VS Code 中安装 Docker 扩展
- en: 'Install the following extensions:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装以下扩展：
- en: Docker (by Microsoft)
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker（由 Microsoft 提供）
- en: ESLint (by Microsoft)
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESLint（由 Microsoft 提供）
- en: Prettier – Code formatter (by Prettier)
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prettier – 代码格式化工具（由 Prettier 提供）
- en: MongoDB for VS Code (by MongoDB)
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB for VS Code（由 MongoDB 提供）
- en: Support for JavaScript and Node.js already comes built-in with VS Code.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: VS Code 已经内置了对 JavaScript 和 Node.js 的支持。
- en: Create a folder for the projects made in this book (for example, you can call
    it **Full-Stack-React-Projects**). Inside this folder, create a new folder called
    **ch1**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为本书中制作的项目创建一个文件夹（例如，您可以将其命名为 **Full-Stack-React-Projects**）。在这个文件夹内部，创建一个名为
    **ch1** 的新文件夹。
- en: Go to the **Files** tab (first icon from top) and click the **Open Folder**
    button to open the empty **ch1** folder.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **文件** 选项卡（从顶部开始的第一个图标）并点击 **打开文件夹** 按钮以打开空的 **ch1** 文件夹。
- en: If you get a dialog asking **Do you trust the authors of the files in this folder?**,
    check **Trust the authors of all files in the parent folder ‘Full-Stack-React-Projects’**
    and then click on the **Yes, I trust the** **authors** button.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您收到一个对话框询问 **您信任此文件夹中文件的作者吗？**，请选择 **信任父文件夹‘Full-Stack-React-Projects’中的所有文件作者**，然后点击
    **是的，我信任** **作者** 按钮。
- en: '![Figure 1.3 – Allowing VS Code to execute files in our project folder](img/B19385_01_3.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 允许 VS Code 在我们的项目文件夹中执行文件](img/B19385_01_3.jpg)'
- en: Figure 1.3 – Allowing VS Code to execute files in our project folder
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 允许 VS Code 在我们的项目文件夹中执行文件
- en: Tip
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can safely ignore this warning in your own projects, as you can be sure
    that those do not contain malicious code. When opening folders from untrusted
    sources, you can press **No, I don’t trust the authors**, and still browse the
    code. However, when doing so, some features of VS Code will be disabled.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在您自己的项目中，您可以安全地忽略此警告，因为您可以确信这些项目中不包含恶意代码。当从不受信任的来源打开文件夹时，您可以按 **不，我不信任作者**，并且仍然浏览代码。然而，这样做时，VS
    Code 的一些功能将被禁用。
- en: We have now successfully set up VS Code and are ready to start setting up our
    project! If you have cloned the folder from the GitHub code examples provided,
    a notification telling you that a Git repository was found will also pop up. You
    can simply close this one, as we only want to open the `ch1` folder.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功设置了 VS Code，并准备好开始设置我们的项目！如果您已从 GitHub 代码示例中克隆了文件夹，也会弹出一个通知，告诉您找到了 Git
    仓库。您可以简单地关闭它，因为我们只想打开 `ch1` 文件夹。
- en: Now that VS Code is ready, let’s continue by setting up a new project with Vite.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 VS Code 已经准备好了，让我们继续通过使用 Vite 设置一个新的项目。
- en: Setting up a project with Vite
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Vite 设置项目
- en: 'For this book, we are going to use **Vite** to set up our project, as it is
    the most popular and liked according to *The State of JS 2022* survey ([https://2022.stateofjs.com/](https://2022.stateofjs.com/)).
    Vite also makes it easy to set up a modern frontend project, while still making
    it possible to extend the configuration later if needed. Follow these steps to
    set up your project with Vite:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将使用 **Vite** 来设置我们的项目，因为根据 *The State of JS 2022* 调查（[https://2022.stateofjs.com/](https://2022.stateofjs.com/)），它是最受欢迎和最受欢迎的。Vite
    还使得设置现代前端项目变得容易，同时如果需要，还可以稍后扩展配置。按照以下步骤使用 Vite 设置您的项目：
- en: In the VS Code menu bar, go to **Terminal** | **New Terminal** to open a new
    Terminal.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 菜单栏中，转到 **终端** | **新建终端** 以打开一个新的终端。
- en: 'Inside the Terminal, run the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端内部，运行以下命令：
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure there is a period at the end of the command to create the project
    in the current folder instead of creating a new folder.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保命令末尾有一个句号，以便在当前文件夹中创建项目，而不是创建一个新的文件夹。
- en: Note
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To keep the instructions in this book working even when new versions are released,
    we pin all packages to a fixed version. Please follow the instructions with the
    given versions. After finishing this book, when starting new projects on your
    own, you should always try using the latest versions but keep in mind that changes
    might be needed to get them working. Consult the documentation of the respective
    packages and follow the migration path from the book version to the latest version.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保即使新版本发布，本书中的说明仍然有效，我们将所有包固定到特定版本。请按照给定的版本进行操作。完成本书后，当您自己开始新项目时，应始终尝试使用最新版本，但请注意，可能需要进行一些更改才能使其正常工作。请查阅相应包的文档，并遵循从本书版本到最新版本的迁移路径。
- en: When asked if **create-vite** should be installed, simply type **y** and press
    the *Return/Enter* key to proceed.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及是否安装 **create-vite** 时，只需键入 **y** 并按 *Return/Enter* 键继续。
- en: When asked about the framework, use the arrow keys to select **React** and press
    *Return*. If you are being asked for a project name, press *Ctrl* + *C* to cancel,
    then run the command again, making sure there is a period at the end to select
    the current folder.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及框架时，使用箭头键选择 **React** 并按 *Return* 键。如果您被要求输入项目名称，按 *Ctrl* + *C* 取消，然后再次运行命令，确保在末尾有一个句点以选择当前文件夹。
- en: When asked about the variant, select **JavaScript**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及变体时，选择 **JavaScript**。
- en: Now, our project is set up and we can run **npm install** to install the dependencies.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的项目已经搭建完成，我们可以运行 **npm install** 来安装依赖。
- en: 'Afterward, run **npm run dev** to start the dev server, as shown in the following
    screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，运行 **npm run dev** 来启动开发服务器，如下截图所示：
- en: "![Figure 1.4 – The \uFEFFTerminal after setting up a project with Vite and\
    \ before starting the dev server](img/B19385_01_4.jpg)"
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 使用 Vite 搭建项目后和启动开发服务器前的终端](img/B19385_01_4.jpg)'
- en: Figure 1.4 – The Terminal after setting up a project with Vite and before starting
    the dev server
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 使用 Vite 搭建项目后和启动开发服务器前的终端
- en: Note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For simplicity in setting up, we just used **npm** directly. If you prefer **yarn**
    or **pnpm**, you can instead run **yarn create vite** or **pnpm create** **vite**,
    respectively.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化设置过程，我们直接使用了 **npm**。如果您更喜欢 **yarn** 或 **pnpm**，可以分别运行 **yarn create vite**
    或 **pnpm create vite**。
- en: In the Terminal, you will see a URL telling you where your app is running. You
    can either hold *Ctrl* (*Cmd* on macOS) and click on the link to open it in your
    browser, or manually enter the URL in a browser.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，您将看到一个 URL，告诉您应用正在运行的位置。您可以选择按住 *Ctrl* (*Cmd* 在 macOS 上) 并点击链接在浏览器中打开，或者手动在浏览器中输入
    URL。
- en: To test whether your app is interactive, click the button with the text **count
    is 0**, and it should increase the count every time it is pressed.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试您的应用是否交互式，点击带有文本 **count is 0** 的按钮，每次按下它都应该增加计数。
- en: '![Figure 1.5 – Our first React app running with Vite](img/B19385_01_5.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 使用 Vite 运行的第一个 React 应用](img/B19385_01_5.jpg)'
- en: Figure 1.5 – Our first React app running with Vite
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 使用 Vite 运行的第一个 React 应用
- en: Alternatives to Vite
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Vite 的替代方案
- en: Alternatives to Vite are bundlers, such as webpack, Rollup, and Parcel. These
    are highly configurable but often do not offer a great experience for dev servers.
    They first must bundle all our code together before serving it to the browser.
    Instead, Vite natively supports the **ECMAScript module** (**ESM**) standard.
    Furthermore, Vite requires very little configuration to get started. A downside
    of Vite is that it can be hard to configure certain more complex scenarios with
    it. An upcoming bundler that is promising is Turbopack; however, it is still very
    new at the time of writing. For full-stack development with server-side rendering,
    we will later get to know Next.js, which is a React framework that also provides
    a dev server out of the box.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Vite 的替代方案包括打包器，如 webpack、Rollup 和 Parcel。这些打包器配置高度灵活，但通常在开发服务器方面并不提供很好的体验。它们必须首先将所有我们的代码打包在一起，然后再将其提供给浏览器。相反，Vite
    本地支持 **ECMAScript 模块**（**ESM**）标准。此外，Vite 起步时配置需求非常少。Vite 的一个缺点是，它可能难以配置某些更复杂的场景。一个有希望的即将到来的打包器是
    Turbopack；然而，在撰写本文时，它仍然非常新。对于全栈开发，我们将稍后了解 Next.js，这是一个提供开箱即用开发服务器的 React 框架。
- en: Now that our boilerplate project is up and running, let’s spend some time setting
    up tools that will enforce best practices and a consistent code style.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经搭建好了样板项目，让我们花些时间设置一些工具，这些工具将强制执行最佳实践并保持一致的代码风格。
- en: Setting up ESLint and Prettier to enforce best practices and code style
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 ESLint 和 Prettier 以强制执行最佳实践和代码风格
- en: Now that our React app is set up, we are going to set up **ESLint** to enforce
    coding best practices with JavaScript and React. We are also going to set up **Prettier**
    to enforce a code style and automatically format our code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了React应用，我们将设置**ESLint**来强制执行JavaScript和React的编码最佳实践。我们还将设置**Prettier**来强制执行代码风格并自动格式化我们的代码。
- en: Installing the necessary dependencies
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装必要的依赖项
- en: 'First, we are going to install all the necessary dependencies:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将安装所有必要的依赖项：
- en: In the Terminal, click on the **Split Terminal** icon at the top right of the
    **Terminal** pane to create a new **Terminal** pane. This will keep our app running
    while we run other commands.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，单击**终端**窗格右上角的**分割终端**图标以创建一个新的**终端**窗格。这将保持我们的应用运行，同时我们可以运行其他命令。
- en: 'Click on this newly opened pane to focus it. Then, enter the following command
    to install ESLint, Prettier, and the relevant plugins:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击这个新打开的窗格以将其聚焦。然后，输入以下命令来安装ESLint、Prettier和相关插件：
- en: '[PRE1]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The packages installed are the following:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装的包如下：
- en: '**prettier**: Formats our code automatically according to a defined code style'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**prettier**：根据定义的代码风格自动格式化我们的代码'
- en: '**eslint**: Analyzes our code and enforces best practices'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**eslint**：分析我们的代码并强制执行最佳实践'
- en: '**eslint-config-react:** Enables rules in ESLint relevant to React projects'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**eslint-config-react**：启用与React项目相关的ESLint规则'
- en: '**eslint-config-prettier:** Disables rules relating to code style in ESLint
    so that Prettier can handle them instead'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**eslint-config-prettier**：禁用与代码风格相关的ESLint规则，以便Prettier可以处理它们'
- en: '**eslint-plugin-jsx-a11y**: Allows ESLint to check for accessibility (**a11y**)
    issues in our JSX code'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**eslint-plugin-jsx-a11y**：允许ESLint检查我们的JSX代码中的可访问性（**a11y**）问题'
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The **--save-dev** flag in **npm** saves those dependencies as **dev** dependencies,
    which means that they will only be installed for development. They will not be
    installed and included in a deployed app. This is important in order to keep the
    size of our containers as small as possible later.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**npm**中的**--save-dev**标志将那些依赖项保存为**dev**依赖项，这意味着它们只会在开发时安装。它们不会被安装并包含在部署的应用中。这对于保持我们容器的大小尽可能小非常重要。'
- en: After the dependencies are installed, we need to configure Prettier and ESLint.
    We will start with configuring Prettier.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了依赖项之后，我们需要配置Prettier和ESLint。我们将从配置Prettier开始。
- en: Configuring Prettier
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Prettier
- en: 'Prettier will format the code for us and replace the default code formatter
    for JavaScript in VS Code. It will allow us to spend more time writing code, automatically
    formatting it for us properly when we save the file. Follow these steps to configure
    Prettier:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Prettier将为我们格式化代码，并替换VS Code中JavaScript的默认代码格式化器。它将允许我们花更多的时间编写代码，在保存文件时自动为我们正确地格式化。按照以下步骤配置Prettier：
- en: Right-click below the files list in the left sidebar of VS Code (if it is not
    opened, click the **Files** icon) and press **New file...** to create a new file.
    Call it **.prettierrc.json** (do not forget the period at the beginning of the
    file name!).
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code左侧侧边栏的文件列表下方右键单击（如果未打开，请单击**文件**图标）并按**新建文件...**来创建一个新文件。命名为**.prettierrc.json**（不要忘记文件名开头的点！）。
- en: 'The newly created file should open automatically, so we can start writing the
    following configuration into it. We first create a new object and set the **trailingComma**
    option to **all** to make sure objects and arrays that span over multiple lines
    always have a comma at the end, even for the last element. This reduces the number
    of touched lines when committing a change via Git:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新创建的文件应自动打开，因此我们可以开始将以下配置写入其中。我们首先创建一个新的对象，并将**trailingComma**选项设置为**all**，以确保跨越多行的对象和数组始终在末尾有逗号，即使是最后一个元素。这减少了通过Git提交更改时需要修改的行数：
- en: '[PRE2]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we set the **tabWidth** option to **2** spaces:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将**tabWidth**选项设置为**2**个空格：
- en: '[PRE3]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Set the **printWidth** to **80** characters per line to avoid long lines in
    our code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**printWidth**设置为每行**80**个字符，以避免代码中出现长行：
- en: '[PRE4]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set the **semi** option to **false** to avoid semicolons where not necessary:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**semi**选项设置为**false**以避免在不必要的地方使用分号：
- en: '[PRE5]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we enforce the use of single quotes instead of double quotes:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们强制使用单引号而不是双引号：
- en: '[PRE6]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These settings for Prettier are just an example of a coding style convention.
    Of course, you are free to adjust these to your own preferences. There are many
    more options, all of which can be found in the Prettier docs ([https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html)).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Prettier 设置只是编码风格约定的一个示例。当然，你可以根据自己的喜好进行调整。还有更多选项，所有这些都可以在 Prettier 文档中找到（[https://prettier.io/docs/en/options.html](https://prettier.io/docs/en/options.html)）。
- en: Configuring the Prettier extension
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Prettier 扩展
- en: 'Now that we have a configuration file for Prettier, we need to make sure the
    VS Code extension is properly configured to format the code for us:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了 Prettier 的配置文件，我们需要确保 VS Code 扩展正确配置，以便为我们格式化代码：
- en: Open the VS Code settings by going to **File** | **Preferences...** | **Settings**
    on Windows/Linux, or **Code** | **Settings...** | **Settings** on macOS.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows/Linux 上，通过**文件** | **首选项...** | **设置**打开 VS Code 设置，或在 macOS 上通过**代码**
    | **设置...** | **设置**。
- en: In the newly opened settings editor, click on the **Workspace** tab. This ensures
    that we save all our settings in a **.vscode/settings.json** file in our project
    folder. When other developers open our project, they will automatically be using
    those settings as well.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新打开的设置编辑器中，点击**工作区**选项卡。这确保我们将所有设置保存在项目文件夹中的**.vscode/settings.json**文件中。当其他开发者打开我们的项目时，他们也会自动使用这些设置。
- en: Search for **editor format on save** and check the checkbox to enable formatting
    code on save.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中搜索**保存时格式化编辑器**，并勾选复选框以启用保存时格式化代码。
- en: Search for **editor default formatter** and select **Prettier - Code formatter**
    from the list.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中搜索**编辑器默认格式化程序**，并从列表中选择**Prettier - 代码格式化程序**。
- en: To verify that Prettier works, open the **.prettierrc.json** file, add some
    extra spaces to the beginning of a line, and save the file. You should notice
    that Prettier reformatted the code to adhere to the defined code style. It will
    reduce the number of spaces for indentation to two.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证 Prettier 是否正常工作，打开**.prettierrc.json**文件，在行首添加一些额外的空格，并保存文件。你应该会注意到 Prettier
    已经重新格式化了代码以符合定义的代码风格。它将缩进空格的数量减少到两个。
- en: Now that Prettier is set up properly, we do not need to worry about formatting
    our code manually anymore. Feel free to just type in code as you go and save the
    file to get it formatted for you!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Prettier已经正确设置，我们不再需要手动格式化代码了。请随意输入代码，并在保存文件时自动获得格式化！
- en: Creating a Prettier ignore file
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Prettier 忽略文件
- en: 'To improve performance and avoid running Prettier on files that should not
    be automatically formatted, we can ignore certain files and folders by creating
    a Prettier ignore file. Follow these steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高性能并避免在应该自动格式化的文件上运行 Prettier，我们可以通过创建 Prettier 忽略文件来忽略某些文件和文件夹。按照以下步骤操作：
- en: Create a new file called **.prettierignore** in the root of our project, similar
    to how we created the **.****prettierrc.json** file.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们项目的根目录下创建一个名为**.prettierignore**的新文件，类似于我们创建**.prettierrc.json**文件的方式。
- en: 'Add the following contents to it to ignore the transpiled source code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加以下内容以忽略转译的源代码：
- en: '[PRE7]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `node_modules/` folder is automatically ignored by Prettier.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`node_modules/`文件夹会自动被 Prettier 忽略。'
- en: Now that we have successfully set up Prettier, we are going to configure ESLint
    to enforce coding best practices.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功设置了 Prettier，我们将配置 ESLint 以强制执行编码最佳实践。
- en: Configuring ESLint
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 ESLint
- en: 'While Prettier focuses on the style and formatting of our code, ESLint focuses
    on the actual code, avoiding common mistakes or unnecessary code. Let’s configure
    it now:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Prettier 专注于我们代码的样式和格式，但 ESLint 专注于实际代码，避免常见的错误或不必要的代码。现在让我们来配置它：
- en: Delete the automatically created **.****eslintrc.cjs** file.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除自动创建的**.eslintrc.cjs**文件。
- en: 'Create a new **.eslintrc.json** file and start writing the following configuration
    into it. First, we set **root** to **true** to make sure ESLint does not look
    at parent folders for more configuration:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**.eslintrc.json**文件，并开始将其配置写入其中。首先，我们将**root**设置为**true**，以确保 ESLint
    不会查看父文件夹以获取更多配置：
- en: '[PRE8]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Define an **env** object, in which we set the browser environment to **true**
    so that ESLint understands browser-specific globals such as **document** and **window**:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个**env**对象，在其中我们将浏览器环境设置为**true**，以便 ESLint 能够理解浏览器特定的全局变量，如**document**和**window**：
- en: '[PRE9]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Define a **parserOptions** object, where we specify that we are using the latest
    ECMAScript version and ESM:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个**parserOptions**对象，其中我们指定我们正在使用最新的 ECMAScript 版本和 ESM：
- en: '[PRE10]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define an **extends** array to extend from recommended configurations. Specifically,
    we extend from ESLint’s recommended rules and the recommended rules for the plugins
    we installed:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 **extends** 数组以扩展到推荐配置。具体来说，我们扩展到ESLint的推荐规则和我们安装的插件的推荐规则：
- en: '[PRE11]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As the last element of the array, we use **prettier** to disable all code style-related
    rules in ESLint and let Prettier handle it:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为数组的最后一个元素，我们使用 **prettier** 来禁用ESLint中所有与代码风格相关的规则，并让Prettier来处理：
- en: '[PRE12]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we define settings for the plugins. First, we tell the **react** plugin
    to detect our installed React version automatically:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们为插件定义设置。首先，我们告诉 **react** 插件自动检测我们安装的React版本：
- en: '[PRE13]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, outside of the **settings** section, we define an **overrides** array,
    in which we specify that ESLint should only lint **.js** and **.****jsx** files:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 **settings** 部分之外，我们定义一个 **overrides** 数组，在其中指定ESLint应该只检查 **.js** 和 **.****jsx**
    文件：
- en: '[PRE14]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a new **.eslintignore** file, with the following contents:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 **.eslintignore** 文件，内容如下：
- en: '[PRE15]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `node_modules/` folder is automatically ignored by ESLint.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: The `node_modules/` folder is automatically ignored by ESLint.
- en: 'Save the files and run **npx eslint src** in the Terminal to run the linter.
    You will see that there are some errors already due to our configured rules not
    matching the source provided by the default project in Vite:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并在终端中运行 **npx eslint src** 来运行代码检查器。你会看到由于我们配置的规则与Vite默认项目中提供的源不匹配，已经存在一些错误：
- en: '![Figure 1.6 – When running ESLint for the first time, we get some errors about
    rule violations](img/B19385_01_6.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6 – 当第一次运行ESLint时，我们会得到一些关于规则违反的错误](img/B19385_01_6.jpg)'
- en: Figure 1.6 – When running ESLint for the first time, we get some errors about
    rule violations
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – 当第一次运行ESLint时，我们会得到一些关于规则违反的错误
- en: Fortunately, all these issues are automatically fixable by ESLint. Run **npx
    eslint src --fix** to fix the issues automatically. Now, when you run **npx eslint
    src** again, you will not get any output. This means that there were no linter
    errors!
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 幸运的是，所有这些问题都可以通过ESLint自动修复。运行 **npx eslint src --fix** 来自动修复问题。现在，当你再次运行 **npx
    eslint src** 时，你将不会得到任何输出。这意味着没有代码检查器错误！
- en: Tip
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The **npx** command allows us to execute commands provided by **npm** packages,
    in a similar context as running them in **package.json** scripts would do. It
    can also run remote packages without installing them permanently. If the package
    is not installed yet, it will ask you whether it should do this.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**npx** 命令允许我们在类似于在 **package.json** 脚本中运行它们的环境中执行由 **npm** 包提供的命令。它还可以运行远程包而无需永久安装。如果包尚未安装，它将询问你是否应该这样做。'
- en: Adding a new script to run our linter
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个新的脚本来运行我们的代码检查器
- en: 'In the previous section, we have been calling the linter by running `npx eslint
    src` manually. We are now going to add a `lint` script to `package.json`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们通过手动运行 `npx eslint src` 来调用代码检查器。我们现在要将一个 `lint` 脚本添加到 `package.json`
    中：
- en: 'In the Terminal, run the following command to define a **lint** script in the
    **package.json** file:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令来在 **package.json** 文件中定义一个 **lint** 脚本：
- en: '[PRE16]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, run **npm run lint** in the Terminal. This should execute **eslint src**
    successfully, just like **npx eslint** **src** did:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在终端中运行 **npm run lint**。这应该像 **npx eslint src** 一样成功执行 **eslint src**：
- en: "![Figure 1.7 – \uFEFFThe linter running successfully, with no errors](img/B19385_01_7.jpg)"
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – 代码检查器成功运行，没有错误](img/B19385_01_7.jpg)'
- en: Figure 1.7 – The linter running successfully, with no errors
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 代码检查器成功运行，没有错误
- en: After setting up ESLint and Prettier, we still need to make sure that they run
    before we commit code. Let’s set up Husky to make sure we commit proper code now.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好ESLint和Prettier之后，我们仍需要确保在提交代码之前它们已经运行。让我们设置Husky来确保我们现在提交的代码是正确的。
- en: Setting up Husky to make sure we commit proper code
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Husky以确保我们提交的代码正确
- en: After setting up Prettier and ESLint, we will now get our code automatically
    formatted on save by Prettier and see errors from ESLint in VS Code when we make
    mistakes or ignore best practices. However, we might miss some of these errors
    and accidentally commit code that is invalid. To avoid this, we can set up **Husky**
    and **lint-staged**, which run before we commit our code to Git and ensure that
    Prettier and ESLint are executed successfully on the source code before it is
    committed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好Prettier和ESLint之后，我们现在将自动通过Prettier在保存时格式化代码，并在VS Code中看到ESLint的错误，当我们犯错或忽略最佳实践时。然而，我们可能会错过一些这些错误，并意外提交无效的代码。为了避免这种情况，我们可以设置
    **Husky** 和 **lint-staged**，它们在我们将代码提交到Git之前运行，并确保在提交之前Prettier和ESLint已成功在源代码上执行。
- en: Important
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: If you cloned the full repository for the book, Husky may not find the **.git**
    directory when running **npm install**. In that case, just run **git init** in
    the root of the corresponding chapter folder.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你克隆了本书的完整仓库，Husky在运行**npm install**时可能找不到**.git**目录。在这种情况下，只需在相应章节文件夹的根目录下运行**git
    init**。
- en: 'Let’s set Husky and lint-staged up by following these steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤设置Husky和lint-staged：
- en: 'Run the following command to install Husky and lint-staged as **dev** dependencies:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令将Husky和lint-staged作为**dev**依赖项安装：
- en: '[PRE17]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the **package.json** file and add the following **lint-staged** configuration
    to it in a new object after **devDependencies**, then save the file. This will
    run Prettier and ESlint on all committed **.js** and **.jsx** files and attempt
    to automatically fix code style and linter errors, if possible:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**package.json**文件，并在**devDependencies**之后添加以下**lint-staged**配置，然后保存文件。这将运行Prettier和ESLint对所有提交的**.js**和**.jsx**文件，并尝试自动修复代码风格和lint错误，如果可能的话：
- en: '[PRE18]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Initialize a Git repository in the **ch1** folder and make an initial commit
    with just the **package.json** file, as lint-staged does not get executed on the
    initial commit:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**ch1**文件夹中初始化一个Git仓库，并仅使用**package.json**文件进行初始提交，因为lint-staged在初始提交中不会执行：
- en: '[PRE19]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the **husky install** script to a **prepare** script in **package.json**,
    so that Husky gets installed automatically when the project is cloned and **npm
    install** is executed:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**husky install**脚本添加到**package.json**中的**prepare**脚本中，以便在项目克隆和执行**npm install**时自动安装Husky：
- en: '[PRE20]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Since we do not need to run **npm install** again right now, we need to manually
    run the **prepare** script this time:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们现在不需要再次运行**npm install**，我们需要这次手动运行**prepare**脚本：
- en: '[PRE21]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add a **pre-commit** hook for lint-staged, so that ESLint and Prettier run
    every time we do **git commit**:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为lint-staged添加一个**pre-commit**钩子，以便每次我们执行**git commit**时，ESLint和Prettier都会运行：
- en: '[PRE22]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, add all files to Git and attempt to make a commit:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将所有文件添加到Git中，并尝试进行提交：
- en: '[PRE23]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If everything worked successfully, you should see `husky` running `lint-staged`,
    which, in turn, runs `prettier` and `eslint`, after you run `git commit`. If you
    are getting a configuration error, ensure that all files are saved properly and
    then run `git` `commit` again.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该在运行`git commit`后看到`husky`运行`lint-staged`，它反过来运行`prettier`和`eslint`。如果你遇到配置错误，请确保所有文件都已正确保存，然后再次运行`git
    commit`。
- en: '![Figure 1.8 – Husky and lint-staged successfully enforcing code style and
    best practices before we commit](img/B19385_01_8.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – Husky和lint-staged在我们提交之前成功执行代码风格和最佳实践](img/B19385_01_8.jpg)'
- en: Figure 1.8 – Husky and lint-staged successfully enforcing code style and best
    practices before we commit
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.8 – Husky和lint-staged在我们提交之前成功执行代码风格和最佳实践](img/B19385_01_8.jpg)'
- en: Setting up commitlint to enforce a standard for our commit messages
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置commitlint以强制我们的提交信息遵循标准
- en: 'In addition to linting our code, we can also lint our commit messages. You
    may have noticed that we were prefixing our commit messages with a type already
    (the `chore` type). Types make it easier to follow what was changed in a commit.
    To enforce the use of types, we can set up **commitlint**. Follow these steps
    to set it up:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检查我们的代码，我们还可以检查我们的提交信息。你可能已经注意到，我们已经在提交信息前加了类型（例如`chore`类型）。类型使得跟踪提交中发生了什么变得更加容易。为了强制使用类型，我们可以设置**commitlint**。按照以下步骤进行设置：
- en: 'Install commitlint and a conventional config for commitlint:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装commitlint和commitlint的常规配置：
- en: '[PRE24]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a new **.commitlintrc.json** file in the root of our project and add
    the following contents:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们项目的根目录下创建一个新的**.commitlintrc.json**文件，并添加以下内容：
- en: '[PRE25]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add a **commit-msg** hook to Husky:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向Husky添加一个**commit-msg**钩子：
- en: '[PRE26]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, if we try adding our changed files and committing without a type or a
    wrong type, we will get an error from commitlint and will not be able to make
    such a commit. If we add the correct type, it will succeed:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试添加更改的文件并提交而没有类型或错误的类型，我们将从commitlint收到错误，并且无法进行此类提交。如果我们添加正确的类型，它将成功：
- en: '[PRE27]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following figure shows Husky in action. If we write an incorrect commit
    message, it will reject it and not let us commit the code. Only if we enter a
    properly formatted commit message will the commit go through:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了Husky的作用。如果我们写了一个错误的提交信息，它将拒绝它，并阻止我们提交代码。只有当我们输入一个格式正确的提交信息时，提交才会通过：
- en: '![Figure 1.9 – commitlint working successfully and preventing commits without
    a type and with wrong types](img/B19385_01_9.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – commitlint成功运行并阻止提交没有类型和错误类型的提交](img/B19385_01_9.jpg)'
- en: Figure 1.9 – commitlint working successfully and preventing commits without
    a type and with wrong types
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – commitlint成功运行并防止没有类型和类型错误的提交
- en: 'Commit messages in the commitlint conventional config ([https://www.conventionalcommits.org/](https://www.conventionalcommits.org/))
    are structured in a way where a type must be listed first, then an optional scope
    follows, and then the description follows, such as `type(scope): description`.
    Possible types are as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '在commitlint约定配置（[https://www.conventionalcommits.org/](https://www.conventionalcommits.org/））中的提交信息结构是，必须首先列出类型，然后可选的范围，接着是描述，例如`type(scope):
    description`。可能类型如下：'
- en: '**fix**: For bug fixes'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fix**: 用于错误修复'
- en: '**feat**: For new features'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**feat**: 用于新功能'
- en: '**refactor**: For restructuring the code without adding features or fixing
    bugs'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**refactor**: 用于重构代码而不添加功能或修复错误'
- en: '**build**: For changes in the build system or dependencies'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**build**: 用于构建系统或依赖项的更改'
- en: '**ci**: For changes in the CI/CD configuration'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ci**: 用于CI/CD配置的更改'
- en: '**docs**: For changes in the documentation only'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**docs**: 仅用于文档的更改'
- en: '**perf**: For performance optimizations'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**perf**: 用于性能优化'
- en: '**style**: For fixing code formatting'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**style**: 用于修复代码格式'
- en: '**test**: For adding or adjusting tests'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**test**: 用于添加或调整测试'
- en: The scope is optional and best used in a monorepo to specify that changes were
    made to a certain app or library within it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 范围是可选的，最好在monorepo中使用，以指定对其中某个应用程序或库进行了更改。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now that we have successfully set up our project and started enforcing standards,
    we can continue working on our project without worrying about a consistent code
    style, consistent commit messages, or making small mistakes. ESLint, Prettier,
    Husky, and commitlint have got us covered.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功设置了我们的项目并开始实施标准，我们可以在不担心代码风格一致、提交信息一致或犯小错误的情况下继续我们的项目工作。ESLint、Prettier、Husky和commitlint已经为我们解决了这些问题。
- en: In the next chapter, [*Chapter 2*](B19385_02.xhtml#_idTextAnchor028), *Getting
    to Know Node.js and MongoDB*, we are going to learn how to write and run small
    Node.js scripts and how MongoDB, a database system, works.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[*第二章*](B19385_02.xhtml#_idTextAnchor028)，*了解Node.js和MongoDB*，我们将学习如何编写和运行小的Node.js脚本以及数据库系统MongoDB是如何工作的。
