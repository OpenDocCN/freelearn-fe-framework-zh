- en: Enhance Angular App with Angular Material
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular Material增强Angular应用
- en: In [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml)*, Prepare Angular
    App for Production Release*, we mentioned the need to deliver a high-quality application.
    Currently, the app has a terrible look and feel to it, which is only fit for a
    website created in the late 1990s. The first impression a user or a client will
    get about your product or your work is very important, so we must be able to create
    a great looking application that also delivers a great user experience across
    mobile and desktop browsers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](4e68114e-68b7-4fe6-a853-81347e981667.xhtml)*，为生产发布准备Angular应用*中，我们提到了提供高质量应用程序的需求。目前，该应用程序的外观和感觉非常糟糕，只适用于上世纪90年代创建的网站。用户或客户对您的产品或工作的第一印象非常重要，因此我们必须能够创建一个外观出色且在移动和桌面浏览器上提供出色用户体验的应用程序。
- en: As full-stack developers, it is difficult to focus on the polish of your application.
    This gets worse, as the feature set of an application rapidly grows. It is no
    fun to write great and modular code backing your views, but then revert to CSS
    hacks and inline styles in a rush to improve your application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为全栈开发人员，很难专注于应用程序的完善。随着应用程序功能集的迅速增长，情况会变得更糟。编写支持视图的优秀且模块化的代码很有趣，但在匆忙中退回到CSS
    hack和内联样式来改进应用程序是没有乐趣的。
- en: Angular Material is an amazing library that is developed in close coordination
    with Angular. If you learn how to leverage Angular Material effectively, the features
    you create will look and work great from the get go, whether you're working on
    small or large applications. Angular Material will make you a far more effective
    web developer, because it ships with a wide variety of user controls that you
    can leverage, and you won't have to worry about browser compatibility. As an added
    bonus, writing custom CSS will become a rarity.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material是一个与Angular密切协调开发的令人惊叹的库。如果您学会如何有效地利用Angular Material，您创建的功能将从一开始就看起来和运行得很好，无论您是在小型还是大型应用程序上工作。Angular
    Material将使您成为一个更有效的Web开发人员，因为它附带了各种您可以利用的用户控件，并且您不必担心浏览器兼容性。作为额外的奖励，编写自定义CSS将变得罕见。
- en: 'In this chapter, you will learn the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: How to configure Angular Material
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置Angular Material
- en: Upgrade the UX with Angular Material
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular Material升级UX
- en: Angular Material
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Material
- en: 'The goal of the Angular Material project is to provide a collection of useful
    and standard-setting high-quality **user interface** (**UI**) components. The
    library implements Google''s Material Design specification, which is pervasive
    in Google''s mobile apps, web properties, and Android operating system. Material
    Design does has a particular digital and boxy look and feel, but it is not just
    another CSS library, like Bootstrap is. Consider the login experience coded using
    Bootstrap here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material项目的目标是提供一系列有用且标准的高质量用户界面（UI）组件。该库实现了谷歌的Material Design规范，在谷歌的移动应用程序、网络属性和Android操作系统中普遍存在。Material
    Design确实具有特定的数字和盒状外观和感觉，但它不仅仅是另一个CSS库，就像Bootstrap一样。考虑在此处使用Bootstrap编码的登录体验：
- en: '![](Images/56b5efb4-a4c0-433e-ab0d-604e0831e7cf.png)Bootstrap Login Experience'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/56b5efb4-a4c0-433e-ab0d-604e0831e7cf.png)Bootstrap登录体验'
- en: 'Note that input fields and their labels are on separate lines, the checkbox
    is a small target to hit, the error messages are displayed as an ephemeral toast
    notification, and the submit button just sits in the corner. Now consider the
    given Angular Material sample:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，输入字段及其标签位于不同的行上，复选框是一个小目标，错误消息显示为短暂的弹出通知，提交按钮只是坐落在角落里。现在考虑给定的Angular Material示例：
- en: '![](Images/f4d79a7f-aaed-4d65-9f60-dd05562e57cb.png)Angular Material Login
    Experience'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/f4d79a7f-aaed-4d65-9f60-dd05562e57cb.png)Angular Material登录体验'
- en: 'The input fields and their labels are initially combined, grabbing the user''s
    attention in a compact form factor. The checkbox is touch friendly and the Submit
    button stretches to take up the available space for a better default responsive
    UX. Once a user clicks on a field, the label tucks away to the top-left corner
    of the input field, as shown:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段及其标签最初是组合在一起的，以紧凑的形式吸引用户的注意力。复选框对触摸友好，提交按钮会拉伸以占用可用空间，以获得更好的默认响应式用户体验。一旦用户点击字段，标签就会收起到输入字段的左上角，如图所示：
- en: '![](Images/7ef987fd-ae5d-4b4e-8f48-13fdfd8062ac.png)Angular Material Animations
    and Error'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/7ef987fd-ae5d-4b4e-8f48-13fdfd8062ac.png)Angular Material动画和错误'
- en: In addition, the validation error messages are shown inline, combined with a
    color change in the label, keeping the user's attention on the input field.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，验证错误消息会内联显示，并与标签颜色变化结合，使用户注意力集中在输入字段上。
- en: Material Design helps you design a modular UI with your own branding and styling,
    while also defining animations that allow for a user to have a better **user experience**
    (**UX**) when using your application. The human brain subconsciously keeps track
    of objects and their locations. Any kind of animation that aids in transitions
    or reactions that result from human input results in reduced cognitive load on
    the user, therefore allowing the user to focus on processing the content instead
    of trying to figure out the quirks of your particular app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design帮助您设计具有自己品牌和样式的模块化UI，同时定义动画，使用户在使用您的应用程序时拥有更好的用户体验（UX）。人类大脑下意识地跟踪对象及其位置。任何帮助过渡或由人类输入引起的反应的动画都会减少用户的认知负担，因此允许用户专注于处理内容，而不是试图弄清您特定应用程序的怪癖。
- en: A combination of modular UI design and fluid motion creates a great UX. Look
    at how Angular material implements a simple button.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化UI设计和流畅的动作的结合创造了出色的用户体验。看看Angular Material如何实现一个简单的按钮。
- en: '![](Images/7e0b60a1-4d7b-4fcb-be2d-53029100d40e.png)Angular Material Button
    Animation'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/7e0b60a1-4d7b-4fcb-be2d-53029100d40e.png)Angular Material按钮动画'
- en: In the preceding screenshot, note how the click animation on the button originates
    from the actual location that the user has clicked on. However subtle, this creates
    a continuity motion ,resulting in an appropriate reaction from a given action.
    This particular effect becomes more pronounced when the button is used on a mobile
    device, leading to an even more natural human computer interaction. Most users
    can't articulate what makes an intuitive UX actually intuitive, and these subtle
    yet crucial cues in design and experience make tremendous progress in allowing
    you to design such an experience for your users.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，请注意按钮上的点击动画是从用户实际点击的位置开始的。然而微妙，这创造了一种连续的动作，导致了对给定动作的适当反应。当按钮在移动设备上使用时，这种特效变得更加明显，从而导致更加自然的人机交互。大多数用户无法表达什么使直观的用户体验实际上直观，设计和体验中的这些微妙但至关重要的线索在允许您为用户设计这样的体验方面取得了巨大进步。
- en: Angular Material also aims to become the reference implementation for high-quality
    UI components for Angular. If you intend to develop your own custom controls,
    the source code for Angular Material should be your first and foremost resource.
    The term high-quality is used often, and it's really important to quantify what
    that means. The Angular Material team puts it aptly on their website.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material还旨在成为Angular高质量UI组件的参考实现。如果您打算开发自定义控件，Angular Material的源代码应该是您首要的资源。术语“高质量”经常被使用，量化其含义非常重要。Angular
    Material团队在他们的网站上恰当地表达了这一点。
- en: '**What do we mean by "high-quality"?**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们所说的“高质量”是什么意思？**'
- en: Internationalized and accessible so that all users can use them. Straightforward
    APIs that don't confuse developers and behave as expected across a wide variety
    of use cases without bugs. Behavior is well-tested with both unit and integration
    tests. Customizable within the bounds of the Material Design specification. Performance
    cost is minimized. Code is clean and well-documented to serve as an example for
    Angular devs. Browser and screen reader support.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化和可访问性，以便所有用户都可以使用它们。简单直观的API，不会让开发人员困惑，并且在各种用例中表现如预期，没有错误。行为经过充分的单元测试和集成测试。在Material
    Design规范的范围内可定制。性能成本最小化。代码清晰，有文档，可以作为Angular开发人员的示例。浏览器和屏幕阅读器支持。
- en: 'Angular Material supports the most recent two versions of all major browsers:
    Chrome (including Android), Firefox, Safari (including iOS), and IE11 / Edge.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material支持所有主要浏览器的最近两个版本：Chrome（包括Android）、Firefox、Safari（包括iOS）和IE11
    / Edge。
- en: Building web applications, especially ones that are also mobile-compatible,
    is really difficult. There are a lot of nuances that you must be aware of. Angular
    Material abstracts away these nuances, including supporting all major browsers,
    so that you can focus on creating your application. Angular Material is no fad,
    and it's not to be taken lightly. If used correctly, you can greatly increase
    your productivity and the perceived quality of your work.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建Web应用程序，特别是那些也兼容移动设备的应用程序，确实很困难。有很多细微之处需要注意。Angular Material将这些细微之处抽象出来，包括支持所有主要浏览器，这样您就可以专注于创建您的应用程序。Angular
    Material不是一时的潮流，也不应轻视。如果使用正确，您可以大大提高生产率和工作质量的感知。
- en: It won't always be possible to use Angular Material in your projects. I would
    recommend either PrimeNG, found at [https://www.primefaces.org/primeng](https://www.primefaces.org/primeng),
    or Clarity, found at [https://vmware.github.io/clarity](https://vmware.github.io/clarity),
    as component toolkits that can satisfy your most, if not all, user control needs.
    The one thing to avoid here would be to pull dozens of user controls from different
    sources and end up with a hodgepodge library with hundreds of quirks and bugs
    to learn, maintain, or work around.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的项目中，不一定总是能够使用Angular Material。我建议使用PrimeNG（[https://www.primefaces.org/primeng](https://www.primefaces.org/primeng)）或Clarity（[https://vmware.github.io/clarity](https://vmware.github.io/clarity)）作为组件工具包，可以满足您大部分，如果不是全部，用户控制需求。要避免的一件事是从不同来源获取大量用户控件，最终得到一个杂乱的库，其中有数百个怪癖和错误需要学习、维护或解决。
- en: Angular Material setup and performance
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Material的设置和性能
- en: Angular Material is configured by default to optimize the package size of your
    final deliverable. In Angular.JS and Angular Material 1.x, the entire dependent
    library would be loaded. However, with Angular Material 6, we are able to specify
    only the components that we intend to use, resulting in dramatic performance improvements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material默认配置为优化最终交付的包大小。在Angular.JS和Angular Material 1.x中，将加载整个依赖库。然而，在Angular
    Material 6中，我们能够指定我们打算使用的组件，从而实现显著的性能改进。
- en: 'In the following table, you can see improvement of the performance characteristics
    of a typical Angular 1.x + Angular Material 1.x vs Angular 6 + Material 6 application
    over a fiber connection with high speed and low latency:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以看到典型的Angular 1.x + Angular Material 1.x与Angular 6 + Material 6应用程序在高速低延迟的光纤连接下性能特征的改进：
- en: '| **Fiber Network** | **Angular 6 + Material 6** | **Angular 1.5 + Material
    1.1.5** | **    % Diff** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **光纤网络** | **Angular 6 + Material 6** | **Angular 1.5 + Material 1.1.5**
    | **% 差异** |'
- en: '| Time to first page render* |                                0.61 s |                                     
    1.69 s** |   ~2.8x faster |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 首页渲染时间* | 0.61秒 | 1.69秒** | ~2.8倍更快 |'
- en: '| Base-level assets delivered* |                              113 KB |                                   
    1,425 KB | 12.6x smaller |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 基本级别资产交付* | 113 KB | 1,425 KB | 缩小12.6倍 |'
- en: '**Images or other media content has not been included in the results for a
    fair comparison'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像或其他媒体内容未包含在结果中，以进行公平比较*'
- en: '**Average value: Lower quality infrastructure leads to 0.9 to 2.5s in initial
    render times*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**平均值：较低质量的基础设施导致初始渲染时间为0.9到2.5秒*'
- en: 'Under the ideal conditions of a high-speed and low-latency connection, Angular
    6 + Material 6 apps load under a second. However, when we switch over to a more
    common moderate-speed and high-latency Fast 3G mobile network, the differences
    become more pronounced, as in the following table:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在高速低延迟连接的理想条件下，Angular 6 + Material 6应用程序在一秒内加载。然而，当我们切换到更常见的中等速度和高延迟的快速3G移动网络时，差异变得更加明显，如下表所示：
- en: '| **Fast 3G Mobile Network** | **Angular 6 + Material 6** | **Angular 1.5 +
    Material 1.1.5** | **    % Diff** |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **快速3G移动网络** | **Angular 6 + Material 6** | **Angular 1.5 + Material 1.1.5**
    | **    % 差异** |'
- en: '| Time to first page render* |                                1.94 s |                                     
    11.02 s |   5.7x faster |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 首页渲染时间* | 1.94秒 | 11.02秒 | 5.7倍更快 |'
- en: '| Base-level assets delivered* |                              113 KB |                                 
    1,425 KB | 12.6x smaller |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 基本级别资产交付* | 113 KB | 1,425 KB | 缩小12.6倍 |'
- en: '**Images or other media content has not been included in the results for a
    fair comparison*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像或其他媒体内容未包含在结果中，以进行公平比较*'
- en: Even though the size differences of the apps remain consistent, you can see
    that the additional latency introduced by a mobile network results in a dramatic
    slowdown of the legacy Angular application to an unacceptable level.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管应用程序的大小差异保持一致，但您可以看到移动网络引入的额外延迟导致传统的Angular应用程序速度显着下降到不可接受的水平。
- en: Adding all components to Material 6 will result in about ~1.3 MB of additional
    payload that will need to be delivered to the user. As you can see from the earlier
    comparison, this must be avoided at all costs. To deliver the smallest possible
    app possible, crucially in mobile and sales related scenarios, where every 100
    ms of load time has an impact on user retention, you may load and include modules
    individually. Webpack's tree-shaking process will divide modules in to different
    files trimming down the initial download size. In future builds, Angular is expected
    to shrink further in size, potentially halving the sizes mentioned in the above
    table.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有组件添加到Material 6将导致约1.3 MB的额外负载需要传递给用户。正如您可以从之前的比较中看到的，这必须以任何代价避免。为了提供可能最小的应用程序，尤其是在移动和与销售相关的场景中，每100毫秒的加载时间对用户保留都有影响，您可以逐个加载和包含模块。Webpack的摇树过程将模块分成不同的文件，从而减少初始下载大小。在未来的构建中，预计Angular的大小将进一步缩小，可能会减少上表中提到的大小一半。
- en: Installing Angular Material
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Angular Material
- en: 'Let''s get started with the task and improve the UX of the weather app with
    Angular Material. Let''s move the Improve the UX of the app task to In Progress
    on our Waffle.io Kanban board. Here, you can see the status of my Kanban board:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始任务，并使用Angular Material改进天气应用程序的用户体验。让我们将改进应用程序用户体验的任务移动到我们的Waffle.io看板上的进行中。在这里，您可以看到我的看板的状态：
- en: '![](Images/da9a69e9-5ce9-4e8a-bcb1-1efedc94f194.png)Waffle.io Kanban Board'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/da9a69e9-5ce9-4e8a-bcb1-1efedc94f194.png)Waffle.io看板'
- en: Automatically
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动
- en: 'In Angular 6, you can automatically add Angular Material to your project, saving
    a lot of time in the process:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 6中，您可以自动将Angular Material添加到您的项目中，从而在过程中节省大量时间：
- en: 'Execute the `add` command, as shown:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`add`命令，如下所示：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that the `index.html` file has been modified to add the icons library
    and the default font, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`index.html`文件已经被修改以添加图标库和默认字体，如下所示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Also note that `app.module.ts` has been updated to import `BrowserAnimationsModule`,
    as demonstrated:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意`app.module.ts`已更新以导入`BrowserAnimationsModule`，如下所示：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start your app and ensure that it works correctly:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的应用程序并确保它能正常工作：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With that, you're done. Your app should be configured with Angular Material.
    It is still important to understand all the various components that make up Angular
    Material; in the next sections, we will go over the manual installation and configuration
    steps. You may skip to the *Angular Flex Layout* section, but I strongly recommend
    skimming over the manual steps, because I introduce the concept of creating an
    Angular module to organize your Material modules.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，你就完成了。您的应用程序应该已配置为使用Angular Material。重要的是要了解组成Angular Material的各种组件；在接下来的章节中，我们将介绍手动安装和配置步骤。您可以跳到*Angular
    Flex Layout*部分，但我强烈建议浏览一下手动步骤，因为我介绍了创建一个Angular模块来组织您的Material模块的概念。
- en: Manually
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动
- en: 'We will begin by installing all required libraries. As of Angular 5, the major
    version of Angular Material should match the version of your Angular installation
    and with Angular 6, the versions should be synced:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装所有必需的库开始。从Angular 5开始，Angular Material的主要版本应该与您的Angular安装版本匹配，而在Angular
    6中，版本应该同步：
- en: In the terminal, execute  `npm install @angular/material @angular/cdk @angular/animations hammerjs`
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，执行`npm install @angular/material @angular/cdk @angular/animations hammerjs`
- en: 'Observe `package.json` versions:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察`package.json`版本：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this case, all libraries have the same major and minor version at 5.0\.
    If your major and minor versions don''t match, you can rerun the `npm install`
    command to install a specific version or choose to upgrade your version of Angular
    by appending the semver version of the package to the install command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，所有库的主要和次要版本都是5.0。如果您的主要和次要版本不匹配，您可以重新运行`npm install`命令以安装特定版本，或者选择通过将包的semver版本附加到安装命令来升级您的Angular版本：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you are working on a Bash-like shell, you can save some typing by using the
    bracket syntax to avoid having to repeat portions of the command, like `npm install
    @angular/{material,cdk,animations}@6.0.0`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用类似Bash的shell，可以使用括号语法来节省一些输入，以避免重复命令的部分，比如`npm install @angular/{material,cdk,animations}@6.0.0`。
- en: If you need to update your version of Angular, refer to the *Updating Angular*
    section in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml), *Staying Up
    to Date with Angular* *Updates*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要更新Angular的版本，请参考[第4章](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml)中的*更新Angular*部分，*保持与Angular更新同步*。
- en: Understanding Material's components
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Material的组件
- en: 'Let''s look at what we are exactly installing:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们究竟安装了什么：
- en: '`@angular/material` is the official Material 2 library.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/material`是官方的Material 2库。'
- en: '`@angular/cdk` is a peer-dependency, not something you directly use unless
    you intend to build your own components.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/cdk`是一个对等依赖项，除非您打算构建自己的组件，否则不会直接使用它。'
- en: '`@angular/animations` enables some of the animations for some Material 2 modules.
    It can be omitted to keep app size minimal. You may use `NoopAnimationsModule`
    to disable animations in the modules that require this dependency. As a result,
    you will lose some of the UX benefits of Angular Material.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@angular/animations` 启用了一些Material 2模块的动画。可以省略它以保持应用程序的大小最小。您可以使用`NoopAnimationsModule`来禁用需要此依赖项的模块中的动画。结果，您将失去一些Angular
    Material的UX优势。'
- en: '`hammerjs` enables gesture support; it''s critical if you''re targeting any
    touch-enabled device, not just phones and tablets, but also hybrid-laptops.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hammerjs`启用了手势支持；如果您的目标是任何触摸设备，不仅仅是手机和平板电脑，还包括混合式笔记本电脑，这一点非常重要。'
- en: Manually configuring Angular Material
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动配置Angular Material
- en: Now that the dependencies are installed, let's configure Angular Material in
    our Angular app. Note that if you used `ng add @angular/material` to install Angular
    Material, some of this work will be done for you.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在依赖项已安装，让我们在Angular应用中配置Angular Material。请注意，如果您使用`ng add @angular/material`来安装Angular
    Material，则其中一些工作将由系统自动完成。
- en: Importing modules
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入模块
- en: 'We will start by creating a separate module file to house all our Material
    module imports:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个单独的模块文件，用于存放所有我们的Material模块导入：
- en: 'Execute the following command in the terminal to generate `material.module.ts`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令以生成`material.module.ts`：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note the use of the `--flat` flag, which indicates that an additional directory
    shouldn't be created for `material.module.ts`. Also, note that `-m`, an alias
    for `--module`, is specified so that our new module is automatically imported
    into `app.module.ts`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`--flat`标志的使用，它表示不应为`material.module.ts`创建额外的目录。另外，请注意，指定了`-m`，它是`--module`的别名，以便我们的新模块自动导入到`app.module.ts`中。
- en: 'Observe the newly created file `material.module.ts`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察新创建的文件`material.module.ts`：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Ensure that the module has been imported into `app.module.ts`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保该模块已被导入到`app.module.ts`中：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add animations and gesture support (optional, but necessary for mobile device
    support):'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加动画和手势支持（可选，但对移动设备支持必要）：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Modify `material.module.ts` to import basic components for Button, Toolbar,
    and Icon
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`material.module.ts`以导入按钮、工具栏和图标的基本组件
- en: 'Remove  `CommonModule`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除`CommonModule`：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Material is now imported into the app, let's now configure a theme and add the
    necessary CSS to our app.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Material现在已导入到应用程序中，现在让我们配置一个主题并将必要的CSS添加到我们的应用程序中。
- en: Importing theme
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入主题
- en: 'A base theme is necessary in order to use Material components. We can define
    or change the default theme in `angular.json`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Material组件，需要一个基本主题。我们可以在`angular.json`中定义或更改默认主题：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Choose a new option from here:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里选择一个新选项：
- en: '`deeppurple-amber.css`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deeppurple-amber.css`'
- en: '`indigo-pink.css`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indigo-pink.css`'
- en: '`pink-bluegrey.css`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pink-bluegrey.css`'
- en: '`purple-green.css`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`purple-green.css`'
- en: Update `angular.json` to use the new Material theme
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`angular.json`以使用新的Material主题
- en: You may create your own themes as well, which is covered in the Custom Themes
    section of this chapter. For more information, visit [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以创建自己的主题，这在本章的自定义主题部分有介绍。有关更多信息，请访问[https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)。
- en: Note that any CSS implemented in `styles.css` will be globally available throughout
    the application. That said, do not include view-specific CSS in this file. Every
    component has their own CSS file for this purpose.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`styles.css`中实现的任何CSS将在整个应用程序中全局可用。也就是说，不要在此文件中包含特定于视图的CSS。每个组件都有自己的CSS文件用于此目的。
- en: Adding Material Icon font
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Material图标字体
- en: You can get access to a good default set of iconography by adding the Material
    Icon web font to your application. Clocking in at 48 kb in size, this is a very
    lightweight library.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将Material图标Web字体添加到应用程序中，您可以访问一个很好的默认图标集。这个库大小为48 kb，非常轻量级。
- en: 'For icon support, import the font in `index.html`:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于图标支持，请在`index.html`中导入字体：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Discover and search through the icons on [https://www.google.com/design/icons/](https://www.google.com/design/icons/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.google.com/design/icons/](https://www.google.com/design/icons/)上发现并搜索图标。
- en: For a richer set of icons, check out [MaterialDesignIcons.com](https://materialdesignicons.com/).
    This icon set contains the base set of Material icons, plus a rich set of third-party
    icons that contains useful imagery from social media sites to a rich set of actions
    that cover a lot of ground. This font is 118 kb in size.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得更丰富的图标集，请访问[MaterialDesignIcons.com](https://materialdesignicons.com/)。这个图标集包含了Material图标的基本集，以及丰富的第三方图标，包括来自社交媒体网站的有用图像，以及涵盖了很多领域的丰富的操作。这个字体大小为118
    kb。
- en: Angular Flex Layout
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Flex Layout
- en: 'Before you can make effective use of Material, you must be aware of its layout
    engine. If you have been doing web development for a while, you may have encountered
    Bootstrap''s 12-column layout system. A mathematical barrier to my brain wired
    to divvy things up as parts of a 100%. Bootstrap also demands a strict adherence
    to a div column, div row hierarchy that must be precisely managed from your top-level
    HTML all the way to the bottom. This can make for a very frustrating development
    experience. In the following screenshot, you see can see how Bootstrap''s 12-column
    scheme looks:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以有效使用Material之前，您必须了解其布局引擎。如果您已经做了一段时间的Web开发，您可能遇到过Bootstrap的12列布局系统。这对我大脑以100%的方式分配事物的数学障碍。Bootstrap还要求严格遵守div列、div行的层次结构，必须从顶层HTML精确管理到底部。这可能会导致非常沮丧的开发体验。在下面的截图中，您可以看到Bootstrap的12列方案是什么样子的：
- en: '![](Images/8256e1d7-bda6-48d1-a3d7-5367a0865298.png)Bootstrap''s 12 Column
    Layout Scheme'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/8256e1d7-bda6-48d1-a3d7-5367a0865298.png)Bootstrap的12列布局方案'
- en: Bootstrap's custom grid-layout system was revolutionary for its time, but then
    CSS3 Flexbox arrived at the scene. In combination with Media Queries, these two
    technologies allow for creation of responsive user interfaces. However, it is
    very laborious to effectively leverage these technologies. As of Angular v4.1,
    the Angular team introduced its Flex Layout system that just works.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的自定义网格布局系统在当时是革命性的，但随后CSS3 Flexbox出现了。结合媒体查询，这两种技术允许创建响应式用户界面。然而，有效地利用这些技术是非常费力的。从Angular
    v4.1开始，Angular团队推出了其Flex布局系统，它可以正常工作。
- en: 'Angular Flex Layout documentation on GitHub aptly explains as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的Angular Flex Layout文档恰如其分地解释了如下内容：
- en: Angular Flex Layout provides a sophisticated layout API using FlexBox CSS +
    mediaQuery. This module provides Angular (v4.1 and higher) developers with component
    layout features using a custom Layout API, mediaQuery observables,and injected
    DOM flexbox-2016 css stylings.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Flex Layout提供了一个复杂的布局API，使用FlexBox CSS + mediaQuery。这个模块为Angular（v4.1及更高版本）开发人员提供了使用自定义布局API、mediaQuery
    observables和注入的DOM flexbox-2016 CSS样式的组件布局功能。
- en: 'Angular''s excellent implementation makes it very easy to use FlexBox. As the
    documentation further explains:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的出色实现使得使用FlexBox非常容易。正如文档进一步解释的那样：
- en: The Layout engine intelligently automates the process of applying appropriate
    FlexBox CSS to browser view hierarchies. This automation also addresses many of
    the complexities and workarounds encountered with the traditional, manual, CSS-only
    application of Flexbox CSS.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 布局引擎智能地自动应用适当的FlexBox CSS到浏览器视图层次结构。这种自动化还解决了许多传统的、手动的、仅使用Flexbox CSS的应用程序所遇到的复杂性和解决方法。
- en: 'The library is highly capable and can accommodate any kind of grid layout you
    can imagine, including integration with all CSS features you may expect, such
    as the `calc()` function. In the next illustration, you can see how columns can
    be described using CSS Flexbox:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 该库非常强大，可以容纳您能想象到的任何类型的网格布局，包括与您可能期望的所有CSS功能的集成，比如`calc()`函数。在下图中，您可以看到如何使用CSS
    Flexbox描述列：
- en: '![](Images/63d95278-15b4-4cc3-af6b-2abf80f6ef36.png)Angular Flex Layout Scheme'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/63d95278-15b4-4cc3-af6b-2abf80f6ef36.png)Angular Flex Layout方案'
- en: The great news is that Angular Flex Layout is no way coupled with Angular Material
    and can be used independently of it. This is very important decoupling that resolves
    one of the major pain points of using AngularJS with Material v1, where version
    updates to Material would often result in bugs in layout.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 令人振奋的消息是，Angular Flex布局与Angular Material没有任何耦合，并且可以独立使用。这是非常重要的解耦，解决了使用AngularJS与Material
    v1时的一个主要痛点，其中Material的版本更新经常会导致布局中的错误。
- en: For more details, check out: [https://github.com/angular/flex-layout/wiki](https://github.com/angular/flex-layout/wiki).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情，请查看：[https://github.com/angular/flex-layout/wiki](https://github.com/angular/flex-layout/wiki)。
- en: At the time of publication, `@angular/flex-layout` hasn't delivered a stable
    release. The GitHub activity on the project suggests a stable release synchronized
    with the launch of Angular 6\. Further, CSS Grid is poised to supersede CSS Flexbox
    and as a result, the underlying technology that this library uses may change.
    My wish is that this library acts as an abstraction layer to the layout engine
    underneath.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布时，`@angular/flex-layout`还没有发布稳定版本。该项目的GitHub活动表明，稳定版本将与Angular 6的发布同步。此外，CSS
    Grid有望取代CSS Flexbox，因此，该库使用的基础技术可能会发生变化。我希望这个库作为布局引擎的抽象层。
- en: Responsive layouts
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式布局
- en: All UIs you design and build should be mobile-first UIs. This is not just to
    serve mobile phone browsers, but also cases where a laptop user may use your application
    side by side with another one. There are many nuances to getting mobile-first
    design right.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您设计和构建的所有UI都应该是面向移动设备的UI。这不仅仅是为了服务于手机浏览器，还包括笔记本电脑用户可能会将您的应用与其他应用并排使用的情况。要正确实现移动设备优先设计有许多微妙之处。
- en: The following is the *Mozilla Holy Grail Layout,* which demonstrates "the ability
    to dynamically change the layout for different screen resolutions" while optimizing
    the display content for mobile devices.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是*Mozilla圣杯布局*，它演示了“根据不同屏幕分辨率动态更改布局的能力”，同时优化移动设备的显示内容。
- en: You can read more about Basic concepts of Flexbox at [https://mzl.la/2vvxj25](https://mzl.la/2vvxj25).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://mzl.la/2vvxj25](https://mzl.la/2vvxj25)了解有关Flexbox基本概念的更多信息。
- en: 'This is a representation of how the UI looks on a large screen:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是大屏幕上UI外观的表示：
- en: '![](Images/65decbe5-c598-4b0c-86df-2583ed0dfcd1.png)Mozilla Holy Grail Layout
    on Large Screen'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/65decbe5-c598-4b0c-86df-2583ed0dfcd1.png)Mozilla大屏幕上的圣杯布局'
- en: 'The same layout is represented on a small screen as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的布局在小屏幕上表示如下：
- en: '![](Images/0ec3a455-4250-41c3-a5b0-caf6a25c787c.png)Mozilla Holy Grail Layout
    on Small Screen'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/0ec3a455-4250-41c3-a5b0-caf6a25c787c.png)Mozilla小屏幕上的圣杯布局'
- en: Mozilla's reference implementation takes 85 lines of code to accomplish this
    kind of responsive UI. Angular Flex Layout accomplishes the same task with only
    half the code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla的参考实现需要85行代码来完成这种响应式UI。Angular Flex布局只需一半的代码就能完成同样的任务。
- en: Installing Angular Flex Layout
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Angular Flex布局
- en: 'Let''s install and add Angular Flex layout to our project:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装并将Angular Flex布局添加到我们的项目中：
- en: In the terminal, execute `npm i @angular/flex-layout`
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，执行`npm i @angular/flex-layout`
- en: At the time of publishing, the current release of `@angular/flex-layout` is
    version `5.0.0-beta.14`, which causes numerous peer dependency errors. To get
    around these errors, execute `npm i @angular/flex-layout@next` to install version `6.0.0-beta.15`,
    as mentioned in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml),* Staying
    Up to Date with Angular Updates*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布时，`@angular/flex-layout`的当前版本是`5.0.0-beta.14`，这会导致许多对等依赖错误。为了避免这些错误，请执行`npm
    i @angular/flex-layout@next`来安装版本`6.0.0-beta.15`，如[第4章](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml)中所述，*与Angular更新保持最新*。
- en: 'Update `app.module.ts`, as shown:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`app.module.ts`，如下所示：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Layout basics
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局基础
- en: Bootstrap and CSS FlexBox are different beasts than Angular Flex Layout. If
    you learn Angular Flex Layout, you will code a lot less layout code, because Angular
    Material automatically does the right thing most of the time, but you'll be in
    for a disappointment once you realize how much more code you have to write to
    get things working once you leave the protective cocoon of Angular Flex Layout.
    However, your skills will still translate over, since the concepts are largely
    the same.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap和CSS FlexBox与Angular Flex布局是不同的东西。如果你学会了Angular Flex布局，你将编写更少的布局代码，因为Angular
    Material大多数时候会自动做正确的事情，但是一旦你意识到一旦你离开Angular Flex布局的保护茧，你将不得不写更多的代码来让事情运转起来，你会感到失望。然而，你的技能仍然会转化，因为概念基本上是相同的。
- en: Let's review the Flex Layout APIs in the coming sections.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的部分中回顾一下Flex布局API。
- en: Flex Layout APIs for DOM containers
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM容器的Flex布局API
- en: 'These directives can be used on DOM containers such as `<div>` or `<span>`,
    like `<div fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="15px">...</div>`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令可以用在诸如`<div>`或`<span>`之类的DOM容器上，比如`<div fxLayout="row" fxLayoutAlign="start
    center" fxLayoutGap="15px">...</div>`：
- en: '| HTML API     | Allowed values |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| HTML API     | 允许的值 |'
- en: '| --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `fxLayout` | <direction> &#124; <direction> <wrap>  Use: row &#124; column
    &#124; row-reverse &#124; column-reverse |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `fxLayout` | <direction> &#124; <direction> <wrap>  Use: row &#124; column
    &#124; row-reverse &#124; column-reverse |'
- en: '| `fxLayoutAlign` | <main-axis> <cross-axis>  main-axis: start &#124;center
    &#124; end &#124; space-around &#124; space-between'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '| `fxLayoutAlign` | <main-axis> <cross-axis>  main-axis: start &#124;center
    &#124; end &#124; space-around &#124; space-between'
- en: cross-axis: start &#124; center &#124; end &#124; stretch |
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: cross-axis: start &#124; center &#124; end &#124; stretch |
- en: '| `fxLayoutGap` | % &#124; px &#124; vw &#124; vh |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `fxLayoutGap` | % &#124; px &#124; vw &#124; vh |'
- en: Flex Layout APIs for DOM elements
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM元素的Flex布局API
- en: 'These directives influence how DOM elements acts within their container, like
    `<div fxLayout="column"><input fxFlex /></div>`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指令影响DOM元素在其容器中的行为，比如`<div fxLayout="column"><input fxFlex /></div>`：
- en: '| HTML API | Allowed values |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| HTML API | 允许的值 |'
- en: '| --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `fxFlex` | "" &#124; px &#124; % &#124; vw &#124; vh &#124; <grow> <shrink>
    <basis> |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlex` | "" &#124; px &#124; % &#124; vw &#124; vh &#124; <grow> <shrink>
    <basis> |'
- en: '| `fxFlexOrder` | int |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexOrder` | int |'
- en: '| `fxFlexOffset` | % &#124; px &#124; vw &#124; vh |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexOffset` | % &#124; px &#124; vw &#124; vh |'
- en: '| `fxFlexAlign` | start &#124; baseline &#124; center &#124; end |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexAlign` | start &#124; baseline &#124; center &#124; end |'
- en: '| `fxFlexFill` | *none* |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `fxFlexFill` | *none* |'
- en: Flex Layout APIs for any element
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任何元素的Flex布局API
- en: 'The following directives can be applied to any HTML element to show, hide,
    or change the look and feel of the said elements, such as `<div fxShow fxHide.lt-sm></div>`,
    which will show an element unless the screen size is less than small:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指令可以应用于任何HTML元素，以显示、隐藏或更改所述元素的外观和感觉，比如`<div fxShow fxHide.lt-sm></div>`，它会显示一个元素，除非屏幕尺寸小于小屏幕：
- en: '| HTML API | Allowed values |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| HTML API | 允许的值 |'
- en: '| --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `fxHide` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `fxHide` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
- en: '| `fxShow` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `fxShow` | TRUE &#124; FALSE &#124; 0 &#124; "" |'
- en: '| `ngClass` | @extends ngClass core |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `ngClass` | @extends ngClass core |'
- en: '| `ngStyle` | @extends ngStyle core |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `ngStyle` | @extends ngStyle core |'
- en: This section covers the basics for Static Layouts. You can read more about the
    Static APIs at [https://github.com/angular/flex-layout/wiki/Declarative-API-Overview](https://github.com/angular/flex-layout/wiki/Declarative-API-Overview).
    We'll cover the Responsive API in *Chapter 10, Angular App Design and Recipes*.
    You can read more about the Responsive APIs at [https://github.com/angular/flex-layout/wiki/Responsive-API](https://github.com/angular/flex-layout/wiki/Responsive-API).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了静态布局的基础知识。您可以在[https://github.com/angular/flex-layout/wiki/Declarative-API-Overview](https://github.com/angular/flex-layout/wiki/Declarative-API-Overview)上阅读更多关于静态API的信息。我们将在*第10章，Angular应用程序设计和技巧*中介绍响应式API。您可以在[https://github.com/angular/flex-layout/wiki/Responsive-API](https://github.com/angular/flex-layout/wiki/Responsive-API)上阅读更多关于响应式API的信息。
- en: Adding Material Components to your app
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向您的应用程序添加Material组件
- en: Now that we have all the various dependencies installed, we can start modifying
    our Angular app to add Material components. We will add a toolbar, material design
    card element, and cover accessibility and typography concerns alongside basic
    layout techniques.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了各种依赖项，我们可以开始修改我们的Angular应用程序以添加Material组件。我们将添加一个工具栏，Material设计卡片元素，并涵盖基本布局技术以及辅助功能和排版方面的问题。
- en: Angular Material schematics
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Material原理图
- en: With Angular 6 and the introduction of schematics, libraries like Material can
    provide their own code generators. At time of publication, Angular Material ships
    with three rudimentary generators to create Angular components with a side navigation,
    a dashboard layout, or a data table. You can read more about generator schematics
    at [https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Angular 6和引入原理图，像Material这样的库可以提供自己的代码生成器。在出版时，Angular Material附带了三个基本的生成器，用于创建具有侧边导航、仪表板布局或数据表的Angular组件。您可以在[https://material.angular.io/guide/schematics](https://material.angular.io/guide/schematics)上阅读更多关于生成器原理图的信息。
- en: 'For example, you can create a side navigation layout by executing this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以通过执行以下操作创建一个侧边导航布局：
- en: '[PRE14]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This command updates `app.module.ts`, directly importing Material modules into
    that file, breaking my suggested `material.module.ts` pattern from earlier. Further,
    a new `SideNavComponent` is added to the app as a separate component, but as mentioned
    in the *Side Navigation* section in [Chapter 9](55413e2b-68e2-4dd0-9018-133008fc3321.xhtml),
    *Design Authentication and Authorization*, such a navigation experience needs
    to be implemented at the very root of your application.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令更新了`app.module.ts`，直接将Material模块导入到该文件中，打破了我之前建议的`material.module.ts`模式。此外，一个新的`SideNavComponent`被添加到应用程序作为一个单独的组件，但正如在[第9章](55413e2b-68e2-4dd0-9018-133008fc3321.xhtml)中的*侧边导航*部分所提到的，*设计认证和授权*，这样的导航体验需要在应用程序的根部实现。
- en: In short, Angular Material Schematics hold a promise of making it a lot less
    cumbersome to add various Material modules and components to your Angular app;
    however, as provided, these schematics are not suitable for the purposes of creating
    a flexible, scalable, and well-architected code base, as pursued by this book.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Angular Material原理图承诺使向您的Angular应用程序添加各种Material模块和组件变得不那么繁琐；然而，如提供的那样，这些原理图并不适用于创建灵活、可扩展和良好架构的代码库，正如本书所追求的那样。
- en: For the time being, I would recommend using these schematics for rapid prototyping
    or experimentation purposes.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我建议将这些原理图用于快速原型设计或实验目的。
- en: Now, let's start manually adding some components to LocalCast Weather.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始手动向LocalCast Weather添加一些组件。
- en: Modifying landing page with Material Toolbar
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Material工具栏修改着陆页面
- en: Before we start making further changes to `app.component.ts`, let's switch the
    component to use inline templates and inline styles, so we don't have to switch
    back and forth between file for a relatively simple component.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始对 `app.component.ts` 进行进一步更改之前，让我们将组件切换为使用内联模板和内联样式，这样我们就不必在相对简单的组件中来回切换文件。
- en: Update `app.component.ts` to use an inline template
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `app.component.ts` 以使用内联模板
- en: Remove `app.component.html` and `app.component.css`
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `app.component.html` 和 `app.component.css`
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s start improving our app by implementing an app-wide toolbar:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过实现一个全局工具栏来改进我们的应用：
- en: 'Observe the `h1` tag in `app.component.ts`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察 `app.component.ts` 中的 `h1` 标签：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the `h1` tag with `mat-toolbar`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mat-toolbar` 更新 `h1` 标签：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Observe the result; you should see a toolbar, as illustrated:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果；您应该看到一个工具栏，如图所示：
- en: '![](Images/42f5f573-2884-440c-9540-770ed02f0388.png)LocalCast Weather Toolbar'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/42f5f573-2884-440c-9540-770ed02f0388.png) 本地天气工具栏'
- en: 'Update `mat-toolbar` with a more attention-grabbing color:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用更引人注目的颜色更新 `mat-toolbar`：
- en: '[PRE18]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For a more native feeling, it is important that the toolbar touches the edges
    of the browser. This works well both on large- and small-screen formats. In addition,
    when you place clickable elements such as a hamburger menu or a help button on
    the far-left or far-right side of the toolbar, you''ll avoid the potential that
    the user will click on empty space. This is why Material buttons actually have
    a larger hit-area than visually represented. This makes a big difference in crafting
    frustration-free user experiences:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更加原生的感觉，工具栏与浏览器的边缘接触是很重要的。这在大屏和小屏格式上都很有效。此外，当您将可点击的元素（如汉堡菜单或帮助按钮）放在工具栏的最左侧或最右侧时，您将避免用户点击空白空间的可能性。这就是为什么
    Material 按钮实际上具有比视觉表示更大的点击区域。这在打造无挫折的用户体验方面有很大的不同：
- en: '[PRE19]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This won''t be applicable to this app, however, if you''re building a dense
    application; you''ll note that your content will go all the way to the edges of
    the application, which is not a desirable outcome. Consider wrapping your content
    area in a div and apply the appropriate margins using css, as shown:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于这个应用来说并不适用，但是，如果您正在构建一个密集的应用程序，您会注意到您的内容将一直延伸到应用程序的边缘，这并不是一个理想的结果。考虑将您的内容区域包裹在一个
    div 中，并使用 css 应用适当的边距，如下所示：
- en: '[PRE20]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the next screenshot, you can see the edge-to-edge toolbar with the primary
    color applied to it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，您可以看到应用了主色的边到边工具栏：
- en: '![](Images/7e54cf2f-2240-4a22-866f-b7654818ba92.png)LocalCast Weather with
    Improved Toolbar'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/7e54cf2f-2240-4a22-866f-b7654818ba92.png) 带有改进工具栏的本地天气'
- en: Representing weather in Material Card
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Material Card 中表示天气
- en: 'Material card is a great container to represent the current weather information.
    The card element is surrounded by a drop-shadow that delineates the content from
    its surroundings:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Material 卡片是一个很好的容器，用来表示当前的天气信息。卡片元素被一个投影阴影所包围，将内容与周围区域分隔开来：
- en: 'Import `MatCardModule` in `material.module`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `material.module` 中导入 `MatCardModule`：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `app.component`, surround `<app-current-weather>` with `<mat-card>`:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app.component` 中用 `<mat-card>` 包围 `<app-current-weather>`：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Observe the barely distinguishable card element, as shown:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察如图所示的几乎无法区分的卡片元素：
- en: '![](Images/ad16e3d4-58ff-43d4-8988-a1676f40c863.png)LocalCast Weather with
    Indistinguishable Card'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/ad16e3d4-58ff-43d4-8988-a1676f40c863.png) 带有不可区分卡片的本地天气'
- en: 'In order to lay out the screen better, we need to switch to the Flex Layout
    engine. Start by removing the training-wheels from the component template:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地布局屏幕，我们需要切换到 Flex 布局引擎。首先从组件模板中移除训练轮：
- en: 'Remove `style="text-align:center"` from the surrounding `<div>`:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从周围的 `<div>` 中移除 `style="text-align:center"`：
- en: 'To center an element in a page, we need to create row, assign a width to the
    center element, and create two additional columns on either side that can flex
    to take the empty space, such as this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要在页面中心放置一个元素，我们需要创建一行，为中心元素分配一个宽度，并在两侧创建两个额外的列，这些列可以灵活地占据空白空间，如下所示：
- en: '[PRE23]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Surround `<mat-card>` with the preceding HTML
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用前面的HTML包围`<mat-card>`
- en: 'Observe that the card element is properly centered, as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意卡片元素已正确居中，如下所示：
- en: '![](Images/7bf7efe3-f04f-4bea-a665-6e685e8f8c65.png)LocalCast Weather with
    Centered Card'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/7bf7efe3-f04f-4bea-a665-6e685e8f8c65.png)带居中卡片的LocalCast天气'
- en: Reading through the Card documentation and looking through the examples on Material's
    documentation site at [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview),
    you'll note that `mat-card` provides elements to house title and content. We will
    implement this in the upcoming sections.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读卡片文档，并查看Material文档站点上的示例，您会注意到`mat-card`提供了容纳标题和内容的元素。我们将在接下来的部分中实现这一点。
- en: On [material.angular.io](https://material.angular.io), you can view the source
    code of any example by clicking on  the brackets icons or launch a working example
    in Plunker by clicking on the arrow icon.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在[material.angular.io](https://material.angular.io)上，您可以通过单击括号图标查看任何示例的源代码，或者通过单击箭头图标在Plunker中启动一个可工作的示例。
- en: Accessibility
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可访问性
- en: Leveraging such Material features may feel unnecessary; however, you must consider
    responsiveness, styling, spacing, and accessibility concerns when designing your
    app. The Material team has put in a lot of effort so that your code works correctly
    under most circumstances and can serve the largest possible user base with a high-quality
    user experience. This can include visually-impaired or keyboard-primary users,
    who must rely on specialized software or keyboard features such as tabs to navigate
    your app. Leveraging Material elements provides crucial metadata for these users
    to be able to navigate your app.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这样的Material特性可能会感觉不必要；然而，在设计应用程序时，您必须考虑响应性、样式、间距和可访问性问题。Material团队已经付出了很多努力，以便您的代码在大多数情况下能够正确运行，并为尽可能多的用户群提供高质量的用户体验。这可能包括视力受损或键盘主导用户，他们必须依赖专门的软件或键盘功能（如标签）来浏览您的应用程序。利用Material元素为这些用户提供了关键的元数据，使他们能够浏览您的应用程序。
- en: 'Material claims support for the following screen reader software:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Material声称支持以下屏幕阅读器软件：
- en: NVDA and JAWS with IE / FF / Chrome (on Windows)
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows上的IE / FF / Chrome上的NVDA和JAWS
- en: VoiceOver with Safari on iOS and Safari / Chrome on OSX
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS上的Safari和Safari / Chrome上的VoiceOver
- en: TalkBack with Chrome on Android
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android上的Chrome TalkBack
- en: Card header and content
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡头和内容
- en: 'Now, let''s implement the title and content elements of `mat-card`, as shown:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现`mat-card`的标题和内容元素，如下所示：
- en: '[PRE24]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With Material, less is always more. You'll note that we were able to remove
    the center `div` and directly apply the `fxFlex` on the center card. All material
    elements have native support for the Flex Layout engine, and this has tremendous
    positive maintainability implications in complicated UIs.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在Material中，少即是多。您会注意到我们能够删除中心的`div`，并直接在中心卡上应用`fxFlex`。所有Material元素都原生支持Flex布局引擎，这在复杂的UI中具有巨大的积极维护影响。
- en: 'After we apply `mat-card-header`, you can see this result:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 应用`mat-card-header`后，您可以看到这个结果：
- en: '![](Images/28ccc742-6469-4e94-b138-269bd94daefd.png)LocalCast Weather Card
    with Title and Content'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/28ccc742-6469-4e94-b138-269bd94daefd.png)带标题和内容的LocalCast天气卡'
- en: Note that fonts within the card now match Material's Roboto font. However, Current
    Weather is no longer attention grabbing, like before. If you add back in the `h2`
    tag inside `mat-card-title`, Current Weather will visually look bigger; however,
    the font won't match the rest of your application. To fix this issue, you must
    understand Material's typography features.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，卡片内的字体现在与 Material 的 Roboto 字体匹配。然而，Current Weather 不再像以前那样引人注目。如果你在 `mat-card-title`
    内部添加回 `h2` 标签，Current Weather 在视觉上会显得更大；然而，字体将不再与你的应用程序的其余部分匹配。要解决这个问题，你必须了解 Material
    的排版特性。
- en: Material typography
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Material 排版
- en: 'Material''s documentation aptly puts it as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Material 的文档恰如其分地将其表述如下：
- en: Typography is a way of arranging type to make text legible, readable, and appealing
    when displayed.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 排版是一种排列字体的方式，使文本在显示时易于辨认、可读和吸引人。
- en: Material offers a different level of typography that has different font-size,
    line-height, and font-weight characteristics that you can apply to any HTML element,
    not just the components provided out of the box.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Material 提供了不同级别的排版，具有不同的字体大小、行高和字重特性，你可以应用到任何 HTML 元素上，而不仅仅是提供的组件。
- en: 'In the following table are CSS classes that you can use to apply Material''s
    typography, such as `<div class="mat-display-4">Hello, Material world!</div>`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中是你可以使用的 CSS 类，用于应用 Material 的排版，比如 `<div class="mat-display-4">Hello, Material
    world!</div>`：
- en: '| **Class Name** | **Usage** |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| **类名** | **用法** |'
- en: '| `display-4`, `display-3`, `display-2` and `display-1` | Large, one-off headers,
    usually at the top of the page (for example, a hero header) |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `display-4`, `display-3`, `display-2` 和 `display-1` | 大的、一次性的标题，通常位于页面顶部（例如，主标题）
    |'
- en: '| `headline ` | Section heading corresponding to the `<h1>` tag |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `headline ` | 对应 `<h1>` 标签的章节标题 |'
- en: '| `title ` | Section heading corresponding to the `<h2>` tag |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `title ` | 对应 `<h2>` 标签的章节标题 |'
- en: '| `subheading-2` | Section heading corresponding to the `<h3>` tag |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `subheading-2` | 对应 `<h3>` 标签的章节标题 |'
- en: '| `subheading-1` | Section heading corresponding to the `<h4>` tag |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `subheading-1` | 对应 `<h4>` 标签的章节标题 |'
- en: '| `body-1` | Base body text |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `body-1` | 基本正文文本 |'
- en: '| `body-2` | Bolder body text |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `body-2` | 更粗的正文文本 |'
- en: '| `caption ` | Smaller body and hint text |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `caption ` | 较小的正文和提示文本 |'
- en: '| `button` | Buttons and anchors |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `button` | 按钮和锚点 |'
- en: You can read more about Material Typography at [https://material.angular.io/guide/typography](https://material.angular.io/guide/typography).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://material.angular.io/guide/typography](https://material.angular.io/guide/typography)
    阅读更多关于 Material 排版的信息。
- en: Applying typography
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用排版
- en: 'There are multiple ways to apply typography. One way is to leverage the `mat-typography`
    class and use the corresponding HTML tag like `<h2>`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以应用排版。一种方式是利用 `mat-typography` 类，并使用相应的 HTML 标签如 `<h2>`：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Another way is to apply the specific typography directly on an element, like
    `class="mat-title"`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式是直接在元素上应用特定的排版，比如 `class="mat-title"`：
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that `class="mat-title"` can be applied to `div`, `span` or an `h2` with
    the same results.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`class="mat-title"` 可以应用到 `div`、`span` 或带有相同结果的 `h2` 上。
- en: As a general rule of thumb, it is usually a better idea to implement the more
    specific and localized option, which is the second implementation.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个一般的经验法则，通常更好的做法是实现更具体和局部化的选项，即第二种实现方式。
- en: Updating the tagline as center-aligned caption
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新标语为居中对齐的标题
- en: 'We can center the tagline of the application using `fxLayoutAlign` and give
    it a subdued `mat-caption` typography, as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `fxLayoutAlign` 居中应用程序的标语，并给它一个柔和的 `mat-caption` 排版，如下所示：
- en: 'Implement the layout changes and caption typography:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现布局更改和标题排版：
- en: '[PRE27]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Observe the results, as shown:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果，如下所示：
- en: '![](Images/6d9d2f32-1481-4e39-a7ae-4438c97290ce.png)LocalCast Weather Centered
    Tagline'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/6d9d2f32-1481-4e39-a7ae-4438c97290ce.png)LocalCast 天气中心标语居中'
- en: Updating Current Weather card layout
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新当前天气卡片布局
- en: 'There''s still more work to do to make the UI look like the design, particularly
    the contents of the Current Weather card, which looks like this:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有更多工作要做，以使UI看起来像设计，特别是当前天气卡片的内容，如下所示：
- en: '![](Images/c7872ffe-c0e2-4cba-8afc-206e4eaaec03.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c7872ffe-c0e2-4cba-8afc-206e4eaaec03.png)'
- en: To design the layout, we'll leverage Angular Flex.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设计布局，我们将利用Angular Flex。
- en: You'll be editing `current-weather.component.html`, which uses the `<div>` and
    `<span>` tags to establish elements that live on separate lines or on the same
    line, respectively. With the switch over to Angular Flex, we need switch all elements
    to `<div>` and specify rows and columns using `fxLayout`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您将编辑`current-weather.component.html`，该文件使用`<div>`和`<span>`标签来建立分别位于不同行或同一行上的元素。随着切换到Angular
    Flex，我们需要将所有元素切换为`<div>`，并使用`fxLayout`指定行和列。
- en: Implementing Layout Scaffolding
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施布局脚手架
- en: We need to start by implementing the rough scaffolding.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先实现粗糙的脚手架。
- en: 'Consider the current state of the template:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑模板的当前状态：
- en: '[PRE28]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s go through the file step by step and update it:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步通过文件并更新它：
- en: Update `<span>` elements to `<div>` on lines 3, 4, and 8
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第3、4和8行的`<span>`元素更新为`<div>`
- en: Wrap the `<img>` element with a `<div>`
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`<div>`包装`<img>`元素
- en: Add the `fxLayout="row"` property to the `<div>` element that has multiple child
    elements on lines 2 and 6
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第2行和第6行有多个子元素的`<div>`元素上添加`fxLayout="row"`属性
- en: The City and Country column takes roughly 2/3rds of the screen, so add `fxFlex="66%"`
    to the `<div>` element on line 3
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 城市和国家列大约占据了屏幕的2/3，因此在第3行的`<div>`元素上添加`fxFlex="66%"`
- en: Add `fxFlex` to the next `<div>` element on line 4 to ensure that it takes up
    the rest of the horizontal space
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第4行的下一个`<div>`元素上添加`fxFlex`，以确保它占据其余的水平空间
- en: Add `fxFlex="66%"` to the new `<div>` element, surrounding the `<img>` element
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的`<div>`元素周围添加`fxFlex="66%"`，以包围`<img>`元素
- en: Add `fxFlex` to the next `<div>` element on line 4
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第4行的下一个`<div>`元素上添加`fxFlex`
- en: 'The final state of the template should look like this:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的最终状态应该如下所示：
- en: '[PRE29]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can be more verbose in adding Angular Flex attributes; however, the more
    code you write, the more you'll need to maintain, making future changes more difficult.
    For example, the `<div>` element on line 12 doesn't need `fxLayout="row"`, since
    a `<div>` implicitly gets a new line. Similarly, on line 4 and line 7, the right-hand
    side column doesn't need an explicit `fxFlex` attribute, since it'll automatically
    be squeezed by the left-hand side element.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在添加Angular Flex属性时更详细; 但是，您写的代码越多，将来需要维护的内容就越多，这会使未来的更改变得更加困难。例如，第12行的`<div>`元素不需要`fxLayout="row"`，因为`<div>`隐式地换行。同样，在第4行和第7行，右侧列不需要显式的`fxFlex`属性，因为它将自动被左侧元素挤压。
- en: 'From a grid placement perspective, all your elements are now in the correct *cell,* as
    shown:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 从网格放置的角度来看，所有元素现在都在正确的*单元格*中，如下所示：
- en: '![](Images/55cad2dd-c7cf-40c2-a1c3-b6fb224128f5.png)LocalCast Weather with
    layout scaffolding'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/55cad2dd-c7cf-40c2-a1c3-b6fb224128f5.png)带有布局脚手架的LocalCast天气'
- en: Aligning elements
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对齐元素
- en: 'Now, we need to align and style each individual cell to match the design. The
    date and temperature needs to be right aligned and the description centered:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要对齐和样式化每个单独的单元格以匹配设计。日期和温度需要右对齐，描述需要居中：
- en: 'To right align the date and temperature, create a new css class named `.right`
    in `current-weather.component.css`:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要右对齐日期和温度，请在`current-weather.component.css`中创建一个名为`.right`的新css类：
- en: '[PRE30]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Add `class="right"` to the `<div>` elements on lines 4 and 10
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第4行和第10行的`<div>`元素中添加`class="right"`
- en: Center the `<div>` element for description in the same way you centered the
    app's tagline earlier in the chapter
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与之前章节中应用标语居中的方式居中`<div>`元素的描述
- en: 'Observe that the elements are aligned correctly, as follows:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察元素是否正确对齐，如下所示：
- en: '![](Images/4d1dc5c5-d03b-42cc-a401-a78812906c9e.png)LocalCast Weather with
    correct alignments'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/4d1dc5c5-d03b-42cc-a401-a78812906c9e.png)具有正确对齐的LocalCast天气'
- en: Styling elements
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式元素
- en: 'Finalizing the styling of elements is usually the most time-consuming part
    of frontend development. I recommend doing multiple passes to achieve a close
    enough version of the design with minimal effort first and then have your client
    or team decide whether it''s worth the extra resources to spend more time to polish
    the design:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 最终确定元素的样式通常是前端开发中最耗时的部分。我建议进行多次尝试，首先以最小的努力实现设计的足够接近版本，然后让您的客户或团队决定是否值得额外投入更多时间来完善设计：
- en: 'Add a new css property:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的css属性：
- en: '[PRE31]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: For the city name, on line 3, add `class="mat-title no-margin"`
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于城市名称，在第3行，添加'class="mat-title no-margin"'
- en: For the date, on line 4, add `"mat-subheading-2 no-margin"` to `class="right"`
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于日期，在第4行，添加"mat-subheading-2 no-margin"到'class="right"'
- en: Change the format of the date from `'fullDate'` to `'EEEE MMM d'` to match the
    design
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将日期格式从'fullDate'更改为'EEEE MMM d'以匹配设计
- en: 'Modify `<img>,` on line 8 to add `style="zoom: 175%"`'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '修改`<img>,`在第8行添加`style="zoom: 175%"`'
- en: For the temperature, on line 10, append `"mat-display-3 no-margin"`
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于温度，在第10行，追加"mat-display-3 no-margin"
- en: For the description, on line 12, add `class="mat-caption"`
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于描述，在第12行，添加'class="mat-caption"'
- en: 'This is the final state of the template:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模板的最终状态：
- en: '[PRE32]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Observe that the styled output of your code changes, as illustrated:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察您的代码的样式化输出如何改变，如图所示：
- en: '![](Images/a48e4e8a-d448-438b-b6a4-b0da85fc268e.png)LocalCast Weather with
    styling'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/a48e4e8a-d448-438b-b6a4-b0da85fc268e.png)带有样式的LocalCast天气'
- en: Fine-tuning styles
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调样式
- en: 'The tagline can benefit from some top and bottom margins. This is common CSS
    that we''re likely to use across the application, so let''s put it in `styles.css`:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 标语可以从顶部和底部边距中受益。这是我们可能会在整个应用程序中使用的常见CSS，所以让我们把它放在'styles.css'中：
- en: 'Implement `vertical-margin`:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现'vertical-margin'：
- en: '[PRE33]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Apply `vertical-margin`:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用'vertical-margin'：
- en: '[PRE34]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Current Weather has the same style as the City Name; we need to distinguish
    between the two.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当前天气与城市名称具有相同的样式；我们需要区分这两者。
- en: 'In `app.component.ts`, update Current Weather with a `mat-headline` typography:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在'app.component.ts'中，使用'mat-headline'排版更新当前天气：
- en: '[PRE35]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The image and the temperature aren''t centered, so add `fxLayoutAlign="center
    center"` to the row surrounding those elements on line 6:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '图像和温度没有居中，因此在第6行的围绕这些元素的行中添加''fxLayoutAlign="center center"'':'
- en: '[PRE36]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Observe the final design of your app, which should look like this:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察您的应用程序的最终设计，应该是这样的：
- en: '![](Images/bf49f665-4779-4c99-93f5-5f5a2a176a0c.png)LocalCast Weather final
    design'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/bf49f665-4779-4c99-93f5-5f5a2a176a0c.png)LocalCast天气最终设计'
- en: Tweaking to match design
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微调以匹配设计
- en: 'This is an area where you may spend a significant amount of time. If we were
    following the 80-20 principal, pixel-perfect tweaks usually end up being the last
    20% that takes 80% of the time to complete. Let''s examine the differences between
    our implementation and the design and what it would take to bridge the gap:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个你可能会花费大量时间的领域。如果我们遵循80-20原则，像素完美的微调通常最终成为需要花费80%的时间来完成的最后20%。让我们来看看我们的实现与设计之间的差异以及弥合差距需要付出的努力：
- en: '![](Images/77565e77-0a6a-4088-8dab-f487cc8133d3.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/77565e77-0a6a-4088-8dab-f487cc8133d3.png)'
- en: 'The date needs further customization. The numeric ordinal *th* is missing;
    to accomplish this, we will need to bring in a third-party library such as moment
    or implement our own solution and bind it next to the date on the template:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 日期需要进一步定制。缺少数字序数*th*; 为了实现这一点，我们需要引入第三方库，如moment，或者实现我们自己的解决方案，并将其绑定到模板上的日期旁边：
- en: 'Update `current.date` to append an ordinal to it:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新'current.date'以附加序数：
- en: '[PRE37]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Implement a `getOrdinal` function:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`getOrdinal`函数：
- en: '[PRE38]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note that the implementation of `getOrdinal` boils down to a complicated one-liner
    that isn't very readable and is very difficult to maintain. Such functions, if
    critical to your business logic, should be heavily unit tested.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`getOrdinal`的实现归结为一个复杂的一行代码，不太可读，很难维护。如果这样的函数对您的业务逻辑至关重要，应该进行大量的单元测试。
- en: Angular 6, at the time of writing, doesn't support new line breaks in the date
    template; ideally, we should be able to specify the date format as `'EEEE\nMMM
    d'` to ensure that the line break is always consistent.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Angular 6不支持日期模板中的新行换行；理想情况下，我们应该能够将日期格式指定为`'EEEE\nMMM d'`，以确保换行始终保持一致。
- en: The temperature implementation needs to separate the digits from the unit with
    a `<span>` element, surrounded with a `<p>`, so the superscript style can be applied
    to the unit, such as `<span class="unit">℉</span>`, where unit is a CSS class
    to make it look like a superscript element.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 温度的实现需要使用`<span>`元素将数字与单位分开，用`<p>`包围，以便可以将上标样式应用到单位，例如`<span class="unit">℉</span>`，其中unit是一个CSS类，使其看起来像一个上标元素。
- en: 'Implement a `unit` CSS class:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`unit` CSS类：
- en: '[PRE39]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Apply `unit`:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`unit`：
- en: '[PRE40]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We need to experiment with how much of space the forecast image should have,
    by tweaking the `fxFlex` value on line 7\. Otherwise, the temperature overflows
    to the next line and your setting can further be affected by the size of your
    browser window. For example, `60%` works well with a small browser window, but
    when maximized, it forces an overflow. However, `55%` seems to satisfy both conditions:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过调整第7行的`fxFlex`值来实验预报图像应该有多少空间。否则，温度会溢出到下一行，并且您的设置还会受到浏览器窗口大小的影响。例如，`60%`在小浏览器窗口下效果很好，但当最大化时会导致溢出。然而，`55%`似乎满足了两个条件：
- en: '![](Images/4e0df4b3-6917-409e-8d70-2ce2fd05e3c3.png)LocalCast Weather after
    tweaks'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/4e0df4b3-6917-409e-8d70-2ce2fd05e3c3.png)调整后的LocalCast天气'
- en: As always, it is possible to further tweak margins and paddings to further customize
    the design. However, each deviation from the library will have maintainability
    consequences down the line. Unless you're truly building a business around displaying
    weather data, you should defer any further optimizations to the end of the project,
    as time permits, and if experience is any guide, you will not be making this optimization.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，可以进一步调整边距和填充以进一步定制设计。然而，每一次偏离库都会在以后产生可维护性后果。除非您真的要围绕显示天气数据构建业务，否则应该在项目结束时推迟任何进一步的优化，如果时间允许，如果经验是任何指导，您将不会进行这种优化。
- en: 'With two negative margin-bottom hacks, you can attain a design fairly close
    to the original, but I will not include those hacks here and leave it as an exercise
    for the reader to discover on the GitHub repository. Such hacks are sometimes
    necessary evils, but in general, they point to a disconnect between design and
    implementation realities. The solution leading up to the tweaks section is the
    sweet spot, where Angular Material thrives:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 通过两个负的margin-bottom hack，你可以获得一个与原始设计非常接近的设计，但我不会在这里包含这些hack，而是留给读者在GitHub存储库中发现。这些hack有时是必要的恶，但总的来说，它们指向设计和实现现实之间的脱节。在调整部分之前的解决方案是甜蜜点，Angular
    Material在这里蓬勃发展：
- en: '![](Images/414f1e2e-7bb5-48c9-a6f6-3c1326a1c882.png)LocalCast Weather after
    tweaks and hacks'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/414f1e2e-7bb5-48c9-a6f6-3c1326a1c882.png)调整和hack后的LocalCast天气'
- en: Updating unit tests
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新单元测试
- en: 'In order to keep your unit tests running, you will need to import `MaterialModule`
    to any component''s `spec` file that uses Angular material:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持您的单元测试运行，您需要将`MaterialModule`导入到任何使用Angular Material的组件的`spec`文件中：
- en: '[PRE41]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You will also need to update any test, including e2e tests, that search for
    a particular HTML element.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要更新任何测试，包括e2e测试，以搜索特定的HTML元素。
- en: 'For example, since the app''s title, LocalCast Weather, is not in an `h1` tag
    anymore, you must update the `spec` file to look for it in a `span` element:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由于应用程序的标题LocalCast Weather不再在`h1`标签中，你必须更新`spec`文件，以在`span`元素中查找它：
- en: '[PRE42]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Similarly, in e2e tests, you will need to update your page object function
    to retrieve the text from the correct location:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在e2e测试中，你需要更新你的页面对象函数，以从正确的位置检索文本：
- en: '[PRE43]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Custom themes
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义主题
- en: As we previously discussed, Material ships with some default themes like deeppurple-amber,
    indigo-pink, pink-bluegrey, and purple-green. However, your company or product
    may have its own color scheme. For this, you can create a custom theme that change
    the look of your application.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，Material默认提供了一些默认主题，如深紫色-琥珀色、蓝紫色-粉色、粉色-蓝灰色和紫色-绿色。然而，你的公司或产品可能有自己的配色方案。为此，你可以创建一个自定义主题，改变你的应用程序的外观。
- en: 'In order to create a new theme, you must implement a new scss file:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个新的主题，你必须实现一个新的scss文件：
- en: Create a new file under `src` called `localcast-theme.scss`
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`下创建一个名为`localcast-theme.scss`的新文件
- en: Material theme guide, located at [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming),
    includes an up-to-date starting file. I'll break down the contents of the file
    further
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Material主题指南，位于[https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)，包括一个最新的起始文件。我将进一步解释文件的内容
- en: 'Start by including the base theming library:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先包含基础主题库：
- en: '[PRE44]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Import the `mat-core()` mixin, which includes all common styles used by various
    Material components:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`mat-core()` mixin，其中包括各种Material组件使用的所有通用样式：
- en: '[PRE45]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`mat-core()` should only be included once in your application; otherwise, you''ll
    introduce unnecessary and duplicated css payload in your application.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-core()`应该只在你的应用程序中包含一次；否则，你将在应用程序中引入不必要和重复的css负载。'
- en: '`mat-core()` contains the necessary scss functions to be able to inject your
    custom colors into Material, such as mat-palette, mat-light-theme, and mat-dark-theme.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-core()`包含必要的scss函数，可以将自定义颜色注入到Material中，例如mat-palette、mat-light-theme和mat-dark-theme。'
- en: At a minimum, we must define a new primary and an accent color. Defining new
    colors, however, is not a straightforward process. Material requires a palette
    to be defined, mat-palette, which needs to be seeded by a complicated color object
    that can't just be overridden by a simple hex value such as `#BFB900`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，我们必须定义一个新的主色和一个强调色。然而，定义新的颜色并不是一个简单的过程。Material需要定义一个调色板，mat-palette，它需要由一个复杂的颜色对象种子化，不能简单地被一个简单的十六进制值如`#BFB900`所覆盖。
- en: 'To pick your colors, you may use the Material Design Color Tool, located at
    [https://material.io/color](https://material.io/color). Here''s a screenshot of
    the tool:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择你的颜色，可以使用位于[https://material.io/color](https://material.io/color)的Material
    Design Color Tool。这是工具的截图：
- en: '![](Images/8f3bf1d1-8b8c-4e8c-9c48-b4d4f2a2c6ff.png)Material.io Color Tool'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/8f3bf1d1-8b8c-4e8c-9c48-b4d4f2a2c6ff.png)Material.io颜色工具'
- en: 'Using Material Palette, select a Primary and a Secondary color:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Material Palette，选择一个主色和一个次要颜色：
- en: My primary selection is red with a hue value of `500`
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的主要选择是红色，色调值为`500`
- en: My secondary selection is indigo with a hue value of `A400`
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的次要选择是蓝紫色，色调值为`A400`
- en: Observe how your selections would apply to a material design app by going through
    the 6 prebuilt screen on the left
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览左侧的6个预构建屏幕，观察你的选择如何应用到Material设计应用程序
- en: 'Evaluate the accessibility implications of your selections, as shown:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估你的选择对可访问性的影响，如下所示：
- en: '![](Images/12c7fbf2-e1ea-4800-ae75-87bc62b30a05.png)Material.io Color Tool
    Accessibility tabThe tool is warning us that our selections result in ineligible
    text, when white text is used over the primary color. You should either take care
    to avoid displaying white text over your primary color or change your selection.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/12c7fbf2-e1ea-4800-ae75-87bc62b30a05.png)Material.io 颜色工具可访问性选项卡该工具警告我们，我们的选择导致不合格的文本，当白色文本用于主要颜色时。您应该注意避免在主要颜色上显示白色文本，或更改您的选择。'
- en: 'The interface for `mat-palette` looks like this:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-palette`的接口如下所示：'
- en: '[PRE46]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Define the primary and secondary `mat-palette` objects using the default hue
    from the tool:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用工具的默认色调定义主要和次要的`mat-palette`对象：
- en: '[PRE47]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a new theme and apply it:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新主题并应用它：
- en: '[PRE48]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In `angular.json`, locate the `apps.styles` attribute
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`angular.json`中，找到`apps.styles`属性
- en: Prepend the list with `localcast-theme.scss` while removing the `styles.input`
    attribute
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在删除`styles.input`属性的同时，在列表前加上`localcast-theme.scss`
- en: '[PRE49]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Even though your theme is in scss, you may continue using css in the rest of
    your application. Angular CLI supports compiling both scss and css. If you would
    like to change the default behavior, you may switch to scss altogether by changing
    the `defaults.styleExt` property in the `angular.json` file from css to scss.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您的主题是scss，您仍然可以在应用程序的其余部分使用css。Angular CLI支持编译scss和css。如果您想更改默认行为，可以通过将`angular.json`文件中的`defaults.styleExt`属性从css更改为scss来完全切换到scss。
- en: You may also choose to eliminate `styles.css` and merge its contents with `localcast-theme.scss`
    or convert `styles.css` to a sass file by simply renaming it to `styles.scss`.
    If you do this, don't forget to update `angular.json`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择消除`styles.css`并将其内容与`localcast-theme.scss`合并，或者通过简单将其重命名为`styles.scss`将`styles.css`转换为sass文件。如果这样做，不要忘记更新`angular.json`。
- en: 'Your application should now look like this:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序现在应该是这样的：
- en: '![](Images/43caf8be-eb2d-49ea-ba98-27770c9852e5.png)LocalCast Weather with
    custom theme'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/43caf8be-eb2d-49ea-ba98-27770c9852e5.png)带有自定义主题的LocalCast天气'
- en: 'We can now move the UX task to the done column:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将UX任务移动到已完成的列中：
- en: '![](Images/a334c98f-f445-4c4a-81cb-97ecf78285ac.png)Waffle.io Kanban Board
    Status'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/a334c98f-f445-4c4a-81cb-97ecf78285ac.png)Waffle.io 看板状态'
- en: Advanced themes
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级主题
- en: In order to create further customized themes, you should consider using the
    Material Design Theme Palette Generator at [http://mcg.mbitson.com](http://mcg.mbitson.com).
    This will generate the necessary code to define your custom color palette to create
    truly unique themes.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建更多定制的主题，您应该考虑使用Material Design主题调色板生成器[http://mcg.mbitson.com](http://mcg.mbitson.com)。这将生成定义自定义颜色调色板以创建真正独特主题所需的代码。
- en: You may also find the Color Blender at [https://meyerweb.com/eric/tools/color-blend](https://meyerweb.com/eric/tools/color-blend) to
    find midway points between two colors.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在[https://meyerweb.com/eric/tools/color-blend](https://meyerweb.com/eric/tools/color-blend)找到颜色混合器，以找到两种颜色之间的中间点。
- en: Updating Angular Material
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Angular Material
- en: In [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml), *Staying Up to Date
    with Angular Updates*, we leveraged `ng update` for an automated upgrade experience
    and also went over a manual and methodical approach to updating packages. We will
    follow a similar strategy when updating Angular Material.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml)中，*与Angular更新保持最新*，我们利用了`ng
    update`进行自动升级体验，并介绍了手动和系统化的更新包方法。我们将在更新Angular Material时采用类似的策略。
- en: 'You can use `ng update` for a quick and painless upgrade experience, which
    should look like below:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`ng update`来快速且无痛的升级体验，应该如下所示：
- en: '[PRE50]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In addition, I have discovered the `material-update-tool` published by the
    Angular team at [https://github.com/angular/material-update-tool](https://github.com/angular/material-update-tool).
    In it''s current form this tool is advertised as a specific Angular Material 5.x
    to 6.0 updater tool, so it may perhaps become part of `ng update` like the `rxjs-tslint`
    tool in the future. You may run the tool as shown below:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我发现了 Angular 团队在 [https://github.com/angular/material-update-tool](https://github.com/angular/material-update-tool) 发布的
    `material-update-tool`。目前这个工具被宣传为一个特定的 Angular Material 5.x 到 6.0 的更新工具，因此它可能在未来成为
    `ng update` 的一部分，就像 `rxjs-tslint` 工具一样。您可以按照下面的示例运行该工具：
- en: '[PRE51]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If you're lucky and everything goes well, feel free to skip the rest of this
    section. For the rest of the section I will go over a specific scenario involving
    release candidates and beta versions that I ran into during the development of
    this example, which highlights the need for a manual update. First, we will establish
    awareness of the current versions, then discover latest available versions, and,
    finally, update and test the upgrade, like we did while updating Angular manually.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您幸运并且一切顺利，可以随意跳过本节的其余部分。在本节的其余部分中，我将介绍我在开发此示例时遇到的涉及发布候选版本和 Beta 版本的特定情况，这突显了手动更新的必要性。首先，我们将了解当前版本，然后发现最新可用版本，最后，更新和测试升级，就像我们手动更新
    Angular 时所做的那样。
- en: Take stock of your current versions
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对您当前的版本进行盘点
- en: 'Observe Angular Material package versions in `package.json`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 观察 `package.json` 中的 Angular Material 包版本：
- en: '[PRE52]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this particular case, I had installed Material 5.0.0 during its RC phase.
    It is advisable to not ship Beta or RC libraries. Since our `@angular/core` package
    indicated that we're on Angular version 5.0.0, we will aim to upgrade to the latest
    5.x.x release of Angular Material.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，我在 RC 阶段安装了 Material 5.0.0。建议不要发布 Beta 或 RC 库。由于我们的 `@angular/core`
    包指示我们使用的是 Angular 版本 5.0.0，我们将目标升级到最新的 Angular Material 5.x.x 版本。
- en: Check on the latest available versions
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查最新可用版本
- en: 'We will leverage npm CLI tool to discover the latest available versions of
    Angular Material:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用 npm CLI 工具来发现 Angular Material 的最新可用版本：
- en: 'Execute `npm info @angular/material` and observe the output:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `npm info @angular/material` 并观察输出：
- en: '[PRE53]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You can observe that, combined with the time information found deeper in the
    output, since the `5.0.0-rc0` release 5 new releases have been pushed, the final
    version is the major 5.0.0 release of the library.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观察到，结合输出中更深层的时间信息，自 `5.0.0-rc0` 发布以来已经推出了 5 个新版本，最终版本是库的主要版本 5.0.0 发布。
- en: If there are other major versions of the Material library available, such as
    6.0.0, you should still stick to the 5.x.x version, since our `@angular/core`
    version is at 5.x.x. As rule of thumb, you should aim to keep Angular and Material
    on the same major versions.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Material 库有其他主要版本可用，比如 6.0.0，您仍应坚持使用 5.x.x 版本，因为我们的 `@angular/core` 版本是 5.x.x。一般来说，您应该保持
    Angular 和 Material 的主要版本相同。
- en: Research the latest available versions of `@angular/core`,  `@angular/animations`, `@angular/cdk`,
    `@angular/flex-layout`, `@angular/material`, and `hammerjs`
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究 `@angular/core`、`@angular/animations`、`@angular/cdk`、`@angular/flex-layout`、`@angular/material`
    和 `hammerjs` 的最新可用版本。
- en: To reduce the amount of information you need to weed through, execute `npm info
    <package-name>` versions for each package
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了减少您需要筛选的信息量，对每个包执行 `npm info <package-name>` versions
- en: 'Document your findings in a table similar to the following; we''ll discuss
    how to determine your target version here:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的发现记录在类似以下的表中；我们将讨论如何确定您的目标版本：
- en: '| **Package** | **Current** | **Latest** | **Target** |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| **包** | **当前** | **最新** | **目标** |'
- en: '| @angular/core | 5.0.0 | 5.1.0 | 5.0.0 |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| @angular/core | 5.0.0 | 5.1.0 | 5.0.0 |'
- en: '| @angular/animations | 5.0.0 | 5.1.0 | 5.0.0 |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| @angular/animations | 5.0.0 | 5.1.0 | 5.0.0 |'
- en: '| @angular/cdk | 5.0.0-rc0 | 5.0.0 | 5.0.0 |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| @angular/cdk | 5.0.0-rc0 | 5.0.0 | 5.0.0 |'
- en: '| @angular/flex-layout | 2.0.0-beta.10-4905443 | 2.0.0-rc.1 | 2.x.x |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| @angular/flex-layout | 2.0.0-beta.10-4905443 | 2.0.0-rc.1 | 2.x.x |'
- en: '| @angular/material | 5.0.0-rc0 | 5.0.0 | 5.0.0 |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| @angular/material | 5.0.0-rc0 | 5.0.0 | 5.0.0 |'
- en: '| hammerjs | 2.0.8 | 2.0.8 | 2.x.x |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| hammerjs | 2.0.8 | 2.0.8 | 2.x.x |'
- en: 'Research results reveal that a new minor version of Angular was released, which
    is useful information to have. In determining your target version, stay conservative.
    Follow the following guidance:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 研究结果表明，发布了新的Angular小版本，这是有用的信息。在确定目标版本时，要保守。遵循以下指导：
- en: Do not update Angular components while updating Material
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更新Material时不要更新Angular组件
- en: If you intended to also update Angular components, do it in separate phases
    and ensure that you execute your tests after each individual phase
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您打算同时更新Angular组件，请分阶段进行，并确保在每个单独阶段之后执行测试
- en: Update any Beta or RC package to its latest available version
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任何Beta或RC软件包更新到其最新可用版本
- en: When new versions of packages are available, stay within the same Major release
    of the package
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当软件包的新版本可用时，保持在软件包的相同主要版本中
- en: Adhere to these guidelines, unless the documentation suggests otherwise
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非文档另有建议，否则遵循这些指南
- en: Updating Angular Material
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Angular Material
- en: 'Now that we know what version to upgrade to, let''s go ahead and do it:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道要升级到哪个版本，让我们继续进行：
- en: 'Execute the following command to update Material and its related components
    to their target versions:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以将Material及其相关组件更新到其目标版本：
- en: '[PRE54]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Verify your `package.json` to ensure that the versions match the expected version
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的`package.json`以确保版本与预期版本匹配
- en: Address any NPM Warnings (as detailed in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml),
    *Staying Up to Date with Angular Updates*, in the *Updating Angular* section)
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决任何NPM警告（详见[第4章](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml)，*与Angular更新保持最新*，*更新Angular*部分）
- en: In this specific instance, I receive impossible-to-meet peer dependency warnings
    by the `@angular/flex-layout` package. Further investigation on GitHub ([https://github.com/angular/flex-layout/issues/508](https://github.com/angular/flex-layout/issues/508))
    reveals that this is a known issue and in general to be expected from a Beta or
    RC package. This means it is safe to ignore these warnings.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特定情况下，我收到了无法满足的`@angular/flex-layout`包的对等依赖警告。在GitHub上进一步调查（[https://github.com/angular/flex-layout/issues/508](https://github.com/angular/flex-layout/issues/508)）显示这是一个已知问题，通常可以从Beta或RC包中预期到。这意味着可以安全地忽略这些警告。
- en: After your upgrade is complete, ensure that you execute the Post Update Checklist, as
    detailed in [Chapter 4](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml),*Staying Up
    to Date with Angular Updates.*
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 升级完成后，请确保执行“后续更新清单”，详见[第4章](374c123d-2621-42e2-b301-ed67c9c7d708.xhtml)，*与Angular更新保持最新*。
- en: Summary
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned what Angular Material is, how to use the Angular
    Flex layout engine, the impact of UI libraries on performance, and how to apply
    specific Angular Material components to your application. You became aware of
    pitfalls of overly-optimizing UI design and how to add a custom theme to your
    application. We also went over how you can keep Angular Material up-to-date.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了什么是Angular Material，如何使用Angular Flex布局引擎，UI库对性能的影响，以及如何将特定的Angular
    Material组件应用于您的应用程序。您意识到了过度优化UI设计的陷阱，以及如何向应用程序添加自定义主题。我们还讨论了如何保持Angular Material的最新状态。
- en: In the next chapter, we will update the weather app to respond to user input
    with reactive forms and keep our components decoupled, while also enabling data
    exchange between them using `BehaviorSubject`. After the next chapter, we will
    be done with the weather app and shift our focus on building larger, line-of-business
    applications.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更新天气应用程序，以响应用户输入使用响应式表单，并保持我们的组件解耦，同时还使用`BehaviorSubject`在它们之间实现数据交换。在下一章之后，我们将完成天气应用程序，并将重点转移到构建更大的业务应用程序。
