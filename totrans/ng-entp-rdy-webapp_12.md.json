["```js\n    projects/ch12 \n    ```", "```js\n    npx ng serve ch12 \n    ```", "```js\n    npx ng test ch12 --watch=false \n    ```", "```js\n    npx ng e2e ch12 \n    ```", "```js\n    npx ng build ch12 --prod \n    ```", "```js\n    projects/ch12 \n    ```", "```js\n    npx ng serve ch12 \n    ```", "```js\n    npx ng test ch12 --watch=false \n    ```", "```js\n    npx ng e2e ch12 \n    ```", "```js\n    npx ng build ch12 --prod \n    ```", "```js\n    **src/app/user/user/user.resolve.ts**\n    import { Injectable } from '@angular/core'\n    import { ActivatedRouteSnapshot, Resolve } from '@angular/router'\n    import { catchError, map } from 'rxjs/operators'\n    import { transformError } from '../../common/common'\n    import { IUser, User } from './user'\n    import { UserService } from './user.service'\n    @Injectable()\n    export class UserResolve implements Resolve<IUser> { constructor(private userService: UserService) {}\n      resolve(route: ActivatedRouteSnapshot) {\n        return this.userService\n          .getUser(route.paramMap.get('userId'))\n          .pipe(map(User.Build), catchError(transformError))\n      }\n    } \n    ```", "```js\n    **src/app/user/user-routing.module.ts**\n    ...\n    {\n        path: 'profile/:userId',\n        component: ProfileComponent,\n        resolve: {\n          user: UserResolve,\n        },\n        canActivate: [AuthGuard],\n      },\n      ... \n    ```", "```js\n    **src/app/user/profile/profile.component.ts**\n    ...\n      constructor(\n        ...\n        **private route: ActivatedRoute**\n      ) {\n        super()\n      }\n      ngOnInit() {\n        this.formGroup = this.buildForm()\n        if (**this.route.snapshot.data.user**) {\n          **this.patchUser(this.route.snapshot.data.user)**\n        } else {\n          this.subs.sink = combineLatest(\n            [this.loadFromCache(), \n             this.authService.currentUser$]\n           )\n          .pipe(\n            filter(\n              ([cachedUser, me]) => \n                cachedUser != null || me != null\n            ),\n            tap(\n              ([cachedUser, me]) => \n               this.patchUser(cachedUser || me)\n            )\n          )\n          .subscribe()\n        }\n      } \n    ```", "```js\n    **src/app/user/view-user/view-user.component.ts**\n    ...\n    import { ActivatedRoute } from '@angular/router'\n    export class ViewUserComponent implements OnChanges, OnInit {\n      ...\n      constructor(\n        private route: ActivatedRoute, private router: Router\n        ) {} \n      ngOnInit() {\n        if (this.route.snapshot.data.user) { \n          this.currentUser$.next(this.route.snapshot.data.user)\n        }\n      }\n      ...\n    } \n    ```", "```js\n    **src/app/shared-components.module.ts**\n    import { CommonModule } from '@angular/common'\n    import { NgModule } from '@angular/core'\n    import { FlexLayoutModule } from '@angular/flex-layout'\n    import { ReactiveFormsModule } from '@angular/forms'\n    import { AppMaterialModule } from './app-material.module'\n    import { \n      ViewUserComponent \n    } from './user/view-user/view-user.component'\n    @NgModule({\n      imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FlexLayoutModule,\n        AppMaterialModule,\n      ],\n      declarations: [ViewUserComponent],\n      exports: [ViewUserComponent],\n    })\n    export class SharedComponentsModule {} \n    ```", "```js\n    **src/app/manager/user-management/user-management.component.ts**\n      template: `\n        <div class=\"horizontal-padding\">\n          <router-outlet name=\"master\"></router-outlet>\n          <div style=\"min-height: 10px\"></div>\n          <router-outlet name=\"detail\"></router-outlet>\n        </div>\n      ` \n    ```", "```js\n    **src/app/manager/manager-routing.module.ts**\n      ...\n        {\n          path: 'users',\n          component: UserManagementComponent,\n          children: [\n            { \n              path: '', component: UserTableComponent, \n               outlet: 'master' \n            },\n            {\n              path: 'user',\n              component: ViewUserComponent,\n              outlet: 'detail',\n              resolve: {\n                user: UserResolve,\n              },\n            },\n          ],\n          canActivate: [AuthGuard],\n          canActivateChild: [AuthGuard],\n          data: {\n            expectedRole: Role.Manager,\n          },\n        },\n    ... \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.html**\n    <a mat-button mat-icon-button [routerLink]=\"['/manager/users', \n        { outlets: { detail: ['user', { userId: row._id}] } }]\"\n        skipLocationChange>\n      <mat-icon>visibility</mat-icon>\n    </a> \n    ```", "```js\n    **src/app/user/user/user.service.ts**\n    ...\n    export interface IUsers {\n      data: IUser[]\n      total: number\n    } \n    ```", "```js\n    **src/app/user/user/user.service.ts**\n    ...\n    export interface IUserService {\n      getUser(id: string): Observable<IUser>\n      updateUser(id: string, user: IUser): Observable<IUser>\n      **getUsers(pageSize: number, searchText: string,** \n     **pagesToSkip: number): Observable<IUsers>**\n    }\n    export class UserService extends CacheService implements IUserService {\n    ... \n    ```", "```js\n    **src/app/user/user/user.service.ts**\n    ...\n    getUsers(\n        pageSize: number,\n        searchText = '',\n        pagesToSkip = 0,\n        sortColumn = '',\n        sortDirection: '' | 'asc' | 'desc' = 'asc'\n      ): Observable<IUsers> {\n        const recordsToSkip = pageSize * pagesToSkip\n        if (sortColumn) {\n          sortColumn =\n            sortDirection === 'desc' ? `-${sortColumn}` : sortColumn\n        }\n        return this.httpClient.get<IUsers>(\n          `${environment.baseUrl}/v2/users`, { \n            params: {\n              filter: searchText,\n              skip: recordsToSkip.toString(),\n              limit: pageSize.toString(),\n              sortKey: sortColumn,\n            },\n          })\n        }\n    ... \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.ts**\n    ...\n    @Component({\n      selector: 'app-user-table',\n      templateUrl: './user-table.component.html',\n      styleUrls: ['./user-table.component.css'],\n    })\n    export class UserTableComponent implements OnDestroy, AfterViewInit {\n      displayedColumns = ['name', 'email', 'role', '_id']\n      items$: Observable<IUser[]>\n      resultsLength = 0\n      hasError = false\n      errorText = ''\n      private skipLoading = false\n      private subs = new SubSink()\n      readonly isLoadingResults$ = new BehaviorSubject(true)\n      loading$: Observable<boolean>\n      refresh$ = new Subject()\n      search = new FormControl('', OptionalTextValidation)\n      @ViewChild(MatPaginator, { static: false })\n        paginator: MatPaginator \n      @ViewChild(MatSort, { static: false }) sort: MatSort\n      constructor(\n        private userService: UserService\n      ) {\n        this.loading$ = this.isLoadingResults$\n      }\n      getUsers(\n        pageSize: number,\n        searchText: string,\n        pagesToSkip: number,\n        sortColumn: string,\n        sortDirection: SortDirection\n      ): Observable<IUsers> {\n        return this.userService.getUsers(\n          pageSize,\n          searchText,\n          pagesToSkip,\n          sortColumn,\n          sortDirection\n        )\n      }\n      ngOnDestroy(): void {\n        this.subs.unsubscribe()\n      }\n      ngAfterViewInit() {\n        this.subs.sink = this.sort.sortChange\n          .subscribe(() => this.paginator.firstPage()) \n        if (this.skipLoading) {\n          return\n        }\n        **this.items$ = merge(**\n     **this.refresh$,**\n     **this.sort.sortChange,**\n     **this.paginator.page,**\n     **this.search.valueChanges.pipe(debounceTime(1000))**\n     **).pipe(**\n     **startWith({}),**\n     **switchMap(() => {**\n     **this.isLoadingResults$.next(true)**\n     **return this.getUsers(**\n     **this.paginator.pageSize,**\n     **this.search.value,**\n     **this.paginator.pageIndex,**\n     **this.sort.active,**\n     **this.sort.direction**\n     **)**\n     **}),**\n     **map((results: { total: number; data: IUser[] }) => {**\n     **this.isLoadingResults$.next(false)**\n     **this.hasError = false**\n     **this.resultsLength = results.total**\n     **return results.data**\n     **}),**\n     **catchError((err) => {**\n     **this.isLoadingResults$.next(false)**\n     **this.hasError = true**\n     **this.errorText = err**\n     **return of([])**\n     **})**\n     **)**\n     **this.items$.subscribe()**\n      }\n    } \n    ```", "```js\n    in pagination, sorting, and filter properties. If one property changes, the whole pipeline is triggered. This is similar to how we implemented the login routine in AuthService. The pipeline contains a call to this.userService.getUsers, which will retrieve users based on the pagination, sorting, and filter preferences passed in. Results are then piped into the this.items$ observable, which the data tableÂ subscribes to with an async pipe, so it can display the data.\n    ```", "```js\n    **src/app/manager/manager-material.module.ts**\n        MatTableModule,\n        MatSortModule,\n        MatPaginatorModule,\n        MatProgressSpinnerModule,\n        MatSlideToggleModule, \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.css**\n    .loading-shade {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 56px;\n      right: 0;\n      background: rgba(0, 0, 0, 0.15);\n      z-index: 1;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    .filter-row {\n      min-height: 64px;\n      padding: 8px 24px 0;\n    }\n    .full-width {\n      width: 100%;\n    }\n    .mat-paginator {\n      background: transparent;\n    } \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.html**\n    <div class=\"filter-row\">\n      <form style=\"margin-bottom: 32px\">\n        <div fxLayout=\"row\">\n          <mat-form-field class=\"full-width\">\n            <mat-icon matPrefix>search</mat-icon>\n            <input matInput placeholder=\"Search\" aria-label=\"Search\" [formControl]=\"search\" />\n            <mat-hint>Search by e-mail or name</mat-hint>\n            <mat-error *ngIf=\"search.invalid\">\n              Type more than one character to search\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </form>\n    </div>\n    <div class=\"mat-elevation-z8\">\n      <div class=\"loading-shade\" *ngIf=\"loading$ | async as loading\">\n        <mat-spinner *ngIf=\"loading\"></mat-spinner>\n        <div class=\"error\" *ngIf=\"hasError\">\n          {{ errorText }}\n        </div>\n      </div>\n      <table mat-table class=\"full-width\" [dataSource]=\"items$ | async\" matSort\n        matSortActive=\"name\" matSortDirection=\"asc\" matSortDisableClear>\n        <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n          <td mat-cell *matCellDef=\"let row\">\n            {{ row.fullName }}\n          </td>\n        </ng-container>\n        <ng-container matColumnDef=\"email\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> E-mail </th>\n          <td mat-cell *matCellDef=\"let row\"> {{ row.email }} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"role\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Role </th>\n          <td mat-cell *matCellDef=\"let row\"> {{ row.role }} </td>\n        </ng-container>\n        <ng-container matColumnDef=\"_id\">\n          <th mat-header-cell *matHeaderCellDef>View Details\n          </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"margin-right: 8px\">\n            <a mat-button mat-icon-button [routerLink]=\"[\n                '/manager/users',\n                { outlets: { detail: ['user', { userId: row._id }] } }\n              ]\" skipLocationChange>\n              <mat-icon>visibility</mat-icon>\n            </a>\n          </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"> </tr>\n      </table>\n      <mat-toolbar>\n        <mat-toolbar-row>\n          <button mat-icon-button (click)=\"refresh$.next()\">\n            <mat-icon title=\"Refresh\">refresh</mat-icon>\n          </button>\n          <span class=\"flex-spacer\"></span>\n          <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"\n                         [length]=\"resultsLength\">\n          </mat-paginator>\n        </mat-toolbar-row>\n      </mat-toolbar>\n    </div> \n    ```", "```js\n    **src/app/user/profile/profile.component.spec.ts**\n    describe('ProfileComponent', () => {\n      let component: ProfileComponent\n      let fixture: ComponentFixture<ProfileComponent>\n      let authServiceMock: jasmine.SpyObj<AuthService>\n      beforeEach(async(() => {\n        const authServiceSpy = autoSpyObj(\n          AuthService,\n          ['currentUser$', 'authStatus$'],\n          ObservablePropertyStrategy.BehaviorSubject\n        )\n        TestBed.configureTestingModule({\n          providers: commonTestingProviders.concat({\n            provide: AuthService,\n            useValue: authServiceSpy,\n          }),\n          imports: commonTestingModules.concat([\n            UserMaterialModule,\n            FieldErrorModule,\n            LemonRaterModule,\n          ]),\n          declarations: [ProfileComponent, NameInputComponent, ViewUserComponent],\n        }).compileComponents()\n        authServiceMock = injectSpy(AuthService)\n        fixture = TestBed.createComponent(ProfileComponent)\n        component = fixture.debugElement.componentInstance\n      }))\n      it('should create', () => {\n        authServiceMock.currentUser$.next(new User())\n        authServiceMock.authStatus$.next(defaultAuthStatus)\n        fixture.detectChanges()\n        expect(component).toBeTruthy()\n      })\n    }) \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.spec.ts**\n    ...\n    beforeEach(() => {\n        fixture = TestBed.createComponent(UserTableComponent)\n        component = fixture.componentInstance\n        **component.items$ = of([new User()])**\n     **Object.assign(component, { skipLoading: true })**\n        fixture.detectChanges()\n    })\n    ... \n    ```", "```js\n    **src/app/manager/user-management/user-management.component.spec.ts**\n    providers: commonTestingProviders,\n    imports: commonTestingModules.concat([ManagerMaterialModule]), \n    ```", "```js\n    **src/app/city-search/city-search.component.ts**\n    doSearch(searchValue: string) {\n      const userInput = searchValue.split(',').map((s) => s.trim())\n      const searchText = userInput[0]\n      const country = userInput.length > 1 ? userInput[1] : undefined\n      **if (this.useNgRx) {**\n     **this.ngRxBasedSearch(searchText, country)**\n     **} else {**\n     **this.behaviorSubjectBasedSearch(searchText, country)**\n     **}**\n    } \n    ```", "```js\n$ npx ng add @ngrx/store \n```", "```js\n$ npx ng add @ngrx/effects --minimal \n```", "```js\n$ npm i -D @ngrx/schematics \n```", "```js\n$ npx ng generate @ngrx/schematics:action search --group --creators \n```", "```js\n**src/app/action/search.actions.ts**\nimport { createAction, props, union } from '@ngrx/store'\nimport { ICurrentWeather } from '../interfaces'\nexport const SearchActions = {\n  search: createAction(\n    '[Search] Search',\n    props<{ searchText: string; country?: string }>()\n  ),\n  weatherLoaded: createAction( \n    '[Search] CurrentWeather loaded',\n    props<{ current: ICurrentWeather }>()\n  ),\n}\nconst all = union(SearchActions)\nexport type SearchActions = typeof all \n```", "```js\n$ npx ng generate @ngrx/schematics:effect currentWeather --module=app.module.ts --root --group --creators \n```", "```js\n**src/app/effects/current-weather.effects.ts**\nprivate doSearch(action: { searchText: string; country?: string }) {\n  return this.weatherService.getCurrentWeather(\n    action.searchText,\n    action.country\n  ).pipe(\n    map((weather) =>\n      SearchActions.weatherLoaded({ current: weather })\n    ),\n    catchError(() => EMPTY)\n  )\n} \n```", "```js\n**src/app/effects/current-weather.effects.ts**\ngetCurrentWeather$ = createEffect(() =>\n  this.actions$.pipe(\n    ofType(SearchActions.search), \n    exhaustMap((action) => this.doSearch(action))\n  )\n) \n```", "```js\n$ npx ng generate @ngrx/schematics:reducer search \n    --reducers=reducers/index.ts --group --creators \n```", "```js\n**src/app/reducers/search.reducer.ts**\nexport interface State {\n  current: ICurrentWeather\n} \n```", "```js\n**src/app/reducers/search.reducer.ts**\nexport const initialState: \n  State = { current:\n  defaultWeather,\n} \n```", "```js\n**src/app/reducers/search.reducer.ts**\nconst searchReducer = createReducer(\n  initialState,\n  on(SearchActions.weatherLoaded, (state, action) => {\n    return {\n      ...state,\n    current: action.current,\n    }\n  })\n) \n```", "```js\n**src/app/current-weather/current-weather.component.ts**\n**import * as appStore from '../reducers'**\nexport class CurrentWeatherComponent {\n  current$: Observable<ICurrentWeather>\n  constructor(**private store: Store<appStore.State**>) {\n    this.current$ =\n      **this.store.pipe(select((state: State) => state.search.current))**\n  } \n  ...\n} \n```", "```js\n**src/app/reducers/index.ts**\nexport const selectCurrentWeather = createSelector(\n  (state: State) => state.search.current,\n  current => current\n) \n```", "```js\n**src/app/current-weather/current-weather.component.ts**\nimport * as appStore from '../reducers'\n  constructor(\n    private weatherService: WeatherService,\n    private store: Store<appStore.State>\n  ) {\n    this.current$ = merge(\n      **this.store.pipe(select(appStore.selectCurrentWeather)),**\n      this.weatherService.currentWeather$\n    )\n  } \n```", "```js\n**src/app/city-search/city-search.component.ts**\nngRxBasedSearch(searchText: string, country?: string) {\n  this.store.dispatch(SearchActions.search({ searchText, country }))\n} \n```", "```js\n**src/app/reducers/search.reducer.spec.ts**\nimport { SearchActions } from '../actions/search.actions'\nimport { defaultWeather } from '../weather/weather.service'\nimport { fakeWeather } from '../weather/weather.service.fake'\nimport { selectCurrentWeather } from './index'\nimport { initialState, reducer } from './search.reducer'\ndescribe('Search Reducer', () => {\n  describe('weatherLoaded', () => {\n    it('should return current weather', () => {\n      const action = SearchActions.weatherLoaded({ current: fakeWeather })\n      const result = reducer(initialState, action)\n      expect(result).toEqual({ current: fakeWeather })\n    })\n  })\n})\ndescribe('Search Selectors', () => { \n  it('should selectCurrentWeather', () => {\n    const expectedWeather = defaultWeather\n    expect(selectCurrentWeather({ search: { current: defaultWeather }\n})).toEqual(\n      expectedWeather\n    )\n  })\n}) \n```", "```js\n**src/app/current-weather/current-weather.component.spec.ts**\nimport { MockStore, provideMockStore } from '@ngrx/store/testing'\ndescribe('CurrentWeatherComponent', () => {\n  ...\n  let store: MockStore<{ search: { current: ICurrentWeather } }>\n  const initialState = { search: { current: defaultWeather } }\n  beforeEach(async(() => {\n    ...\n    TestBed.configureTestingModule({\n      imports: [AppMaterialModule],\n      providers: [\n        ...\n        **provideMockStore({ initialState }),**\n      ],\n    }).compileComponents()\n    ...\n    **store = TestBed.inject(Store) as any**\n  }))\n...\n}) \n```", "```js\n**src/app/current-weather/current-weather.component.spec.ts**\nit('should get currentWeather from weatherService', (done) => {\n  // Arrange\n  store.setState({ search: { current: fakeWeather } })\n  weatherServiceMock.currentWeather$.next(fakeWeather)\n  // Act\n  fixture.detectChanges() // triggers ngOnInit()\n  // Assert\n  expect(component.current$).toBeDefined()\n  component.current$.subscribe(current => { \n    expect(current.city).toEqual('Bethesda')\n    expect(current.temperature).toEqual(280.32)\n    // Assert on DOM\n    const debugEl = fixture.debugElement\n    const titleEl: HTMLElement =\n      debugEl.query(By.css('.mat-title')).nativeElement\n    expect(titleEl.textContent).toContain('Bethesda')\n    done()\n  })\n}) \n```", "```js\n$ npx ng add @ngrx/store --minimal\n$ npx ng add @ngrx/effects --minimal\n$ npx ng add @ngrx/entity\n$ npx ng add @ngrx/data \n```", "```js\n    **src/app/entity-metadata.ts**\n    import { EntityMetadataMap } from '@ngrx/data'\n    const entityMetadata: EntityMetadataMap = {\n      User: {},\n    }\n    export const entityConfig = {\n      entityMetadata,\n    } \n    ```", "```js\n    **src/app/app.module.ts**\n    imports: [\n      ...\n      StoreModule.forRoot({}),\n      EffectsModule.forRoot([]),\n      EntityDataModule.forRoot(entityConfig),\n    ] \n    ```", "```js\n    **src/app/user/user/user.entity.service.ts**\n    import { Injectable } from '@angular/core' \n    import {\n      EntityCollectionServiceBase,\n      EntityCollectionServiceElementsFactory,\n    } from '@ngrx/data'\n    import { User } from './user'\n    @Injectable({ providedIn: 'root' })\n    export class UserEntityService\n      extends EntityCollectionServiceBase<User> {\n      constructor(\n        serviceElementsFactory: EntityCollectionServiceElementsFactory\n      ) {\n        super('User', serviceElementsFactory)\n      }\n    } \n    ```", "```js\n    **proxy.conf.json**\n    {\n      \"/api\": {\n        \"target\": \"http://localhost:3000\",\n        \"secure\": false,\n        \"pathRewrite\": {\n           \"^/api\": \"\"\n        }\n      }\n    } \n    ```", "```js\n    **angular.json**\n    ...\n    \"serve\": {\n      \"builder\": \"@angular-devkit/build-angular:dev-server\",\n      \"options\": {\n        \"browserTarget\": \"lemon-mart:build\",\n        \"proxyConfig\": \"proxy.conf.json\"\n      },\n      ...\n    } \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.ts**\n    useNgRxData = true\n    readonly isLoadingResults$ = new BehaviorSubject(true) loading$: Observable<boolean>\n    constructor(\n      private userService: UserService,\n      **private userEntityService: UserEntityService**\n    **) {**\n      this.loading$ = merge(\n        **this.userEntityService.loading$,** \n        this.isLoadingResults$\n      )\n    } \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.ts**\n    **getUsers() {**\n     **return this.userEntityService.getAll().pipe(**\n     **map((value) => {**\n     **return { total: value.length, data: value }**\n     **})**\n     **)**\n    **}**\n    add(user: User) { \n      this.userEntityService.add(user)\n    }\n    delete(user: User) { \n      this.userEntityService.delete(user._id)\n    }\n    update(user: User) { \n      this.userEntityService.update(user)\n    } \n    ```", "```js\n    **src/app/manager/user-table/user-table.component.ts**\n    ...\n      getUsers(pageSize: number, searchText = '', pagesToSkip = 0)\n        : Observable<IUsers> {\n          if (this.useNgRxData) {\n            return this.userEntityService.getAll().pipe(   \n              map((value) => {\n                return { total: value.length, data: value }\n              })\n            )\n          } else {\n            return this.userService.getUsers(\n              pageSize,\n              searchText,\n              pagesToSkip,\n              sortColumn,\n              sortDirection\n            )\n          } \n    ```", "```js\n**src/app/user/user/user.entity.service.ts**\n...\ngetAll(options?: EntityActionOptions): Observable<User[]> {\n  return this.userService\n    .getUsers(10)\n    .pipe(map((users) => users.data.map(User.Build)))\n}\n... \n```"]