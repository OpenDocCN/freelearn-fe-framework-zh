- en: Autocomplete and Chips - Text Input Suggestions for Multiple Items
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动完成和芯片 - 多个项目的文本输入建议
- en: 'In this chapter, you will learn the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Building an Autocomplete component
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自动完成组件
- en: Selecting Autocomplete suggestions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择自动完成建议
- en: API-driven Autocomplete
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 驱动的自动完成
- en: Highlighting search results
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示搜索结果
- en: Standalone chip input
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立芯片输入
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Web applications typically provide autocomplete input fields when there are
    too many choices to select from. Autocomplete fields are like text input fields—as
    users starts typing, they are given a smaller list of choices based on what they've
    typed. Once the user is ready to make a selection, the actual input is filled
    with components called `Chips`—especially relevant when the user needs to be able
    to make multiple selections.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当有太多选择时，Web 应用程序通常会提供自动完成输入字段。自动完成字段类似于文本输入字段——当用户开始输入时，他们会根据输入的内容得到一个更小的选择列表。一旦用户准备好进行选择，实际的输入将被称为
    `Chips` 的组件填充——特别是当用户需要能够进行多项选择时。
- en: Building an Autocomplete component
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自动完成组件
- en: Material-UI doesn't actually come with an `Autocomplete` component. The reason
    is that, since there are so many different implementations of autocomplete selection
    components in the React ecosystem already, it doesn't make sense to provide another
    one. Instead, you can pick an existing implementation and augment it with Material-UI
    components so that it can integrate nicely with your Material-UI application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI 并不实际包含一个 `Autocomplete` 组件。原因是，在 React 生态系统中已经存在许多不同的自动完成选择组件的实现，因此再提供一个没有意义。相反，你可以选择现有的实现，并用
    Material-UI 组件增强它，以便它可以很好地与你的 Material-UI 应用程序集成。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's say that you have a selector for a hockey team. But there are too many
    teams to reasonably fit in a simple select component—you need autocomplete capabilities.
    You can use the `Select` component from the `react-select` package to provide
    the autocomplete functionality that you need. You can use `Select` properties
    to replace key autocomplete components with Material-UI components so that the
    autocomplete matches the look and feel of the rest of your app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个用于选择曲棍球队的选择器。但是，由于球队太多，无法合理地放入简单的选择组件中——你需要自动完成功能。你可以使用来自 `react-select`
    包的 `Select` 组件来提供所需的自动完成功能。你可以使用 `Select` 属性来替换关键自动完成组件，以便自动完成与你的应用程序的其他部分保持一致的外观和感觉。
- en: 'Let''s make a reusable `Autocomplete` component. The `Select` component allows
    you to replace certain aspects of the autocomplete experience. In particular, following
    are the components that you''ll be replacing:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个可重用的 `Autocomplete` 组件。`Select` 组件允许你替换自动完成体验的某些方面。特别是，以下是你将替换的组件：
- en: '`Control`: The text input component to use'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`控制`：要使用的文本输入组件'
- en: '`Menu`: A menu with suggestions, displayed when the user starts typing'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`菜单`：当用户开始输入时显示带有建议的菜单'
- en: '`NoOptionsMessage`: The message that''s displayed when there aren''t any suggestions
    to display'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoOptionsMessage`：当没有建议显示时显示的消息'
- en: '`Option`: The component used for each suggestion in `Menu`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Option`：用于 `菜单` 中每个建议的组件'
- en: '`Placeholder`: The placeholder text component for the text input'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Placeholder`：文本输入的占位文本组件'
- en: '`SingleValue`: The component for showing a value once it''s selected'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SingleValue`：用于显示已选择的值的组件'
- en: '`ValueContainer`: The component that wraps `SingleValue`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ValueContainer`：包装 `SingleValue` 的组件'
- en: '`IndicatorSeparator`: Separates buttons on the right side of the autocomplete'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IndicatorSeparator`：分隔自动完成右侧的按钮'
- en: '`ClearIndicator`: The component used for the button that clears the current
    value'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClearIndicator`：用于清除当前值的按钮的组件'
- en: '`DropdownIndicator`: The component used for the button that shows `Menu`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DropdownIndicator`：用于显示 `菜单` 的按钮的组件'
- en: Each of these components is replaced with Material-UI components that change
    the look and feel of the autocomplete. Moreover, you'll have all of this as new
    `Autocomplete` components that you can reuse throughout your app.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件中的每一个都将被替换为改变自动完成外观和感觉的 Material-UI 组件。此外，你将拥有所有这些作为新的 `Autocomplete` 组件，你可以在整个应用程序中重用它们。
- en: 'Let''s look at the result before diving into the implementation of each replacement
    component. Following is what you''ll see when the screen first loads:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究每个替换组件的实现之前，让我们看看结果。以下是在屏幕首次加载时你会看到的内容：
- en: '![](img/e8652835-9527-4e14-a21c-a86aaa9c6758.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8652835-9527-4e14-a21c-a86aaa9c6758.png)'
- en: 'If you click on the down arrow, you''ll see a menu with all the values, as
    follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击向下箭头，你会看到一个包含所有值的菜单，如下所示：
- en: '![](img/cc087afe-8b45-47d1-b055-0674ad9bc621.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc087afe-8b45-47d1-b055-0674ad9bc621.png)'
- en: 'Try typing tor into the autocomplete text field, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在自动完成文本字段中输入 tor，如下所示：
- en: '![](img/13533835-14d8-4a30-8bf4-ed22eefce653.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13533835-14d8-4a30-8bf4-ed22eefce653.png)'
- en: 'If you make a selection, the menu is closed and the text field is populated
    with the selected value, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进行选择，菜单将关闭，文本字段将填充所选值，如下所示：
- en: '![](img/3ab8e42a-a338-42a3-85b8-40854fce22f6.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ab8e42a-a338-42a3-85b8-40854fce22f6.png)'
- en: You can change your selection by opening the menu and selecting another value,
    or you can clear the selection by clicking on the clear button to the right of
    the text.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过打开菜单并选择另一个值来更改你的选择，或者你可以通过点击文本右侧的清除按钮来清除选择。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's break down the source by looking at the individual components that make
    up the `Autocomplete` component and replacing pieces of the `Select` component.
    Then, we'll look at the final `Autocomplete` component.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看组成 `Autocomplete` 组件的各个组件以及替换 `Select` 组件的部分来分解源代码。然后，我们将查看最终的 `Autocomplete`
    组件。
- en: Text input control
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本输入控件
- en: 'Here''s the source for the `Control` component:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Control` 组件的源代码：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `inputComponent()` function is a component that passes the `inputRef` value—a
    reference to the underlying input element—to the `ref` prop. Then, `inputComponent`
    is passed to `InputProps` to set the input component used by `TextField`. This
    component is a little bit confusing because it's passing references around and
    it uses a `helper` component for this purpose. The important thing to remember
    is that the job of `Control` is to set up the `Select` component to use a Material-UI`TextField`
    component.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputComponent()` 函数是一个组件，它将 `inputRef` 值（对底层输入元素的引用）传递给 `ref` 属性。然后，`inputComponent`
    传递给 `InputProps` 以设置 `TextField` 使用的输入组件。这个组件有点令人困惑，因为它在传递引用并使用一个 `helper` 组件来完成这个目的。重要的是要记住，`Control`
    的任务是设置 `Select` 组件以使用 Material-UI `TextField` 组件。'
- en: Options menu
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项菜单
- en: 'Here''s the component that displays the autocomplete options when the user
    starts typing or clicks on the down arrow:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当用户开始输入或点击向下箭头时显示自动完成选项的组件：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Menu` component renders a Material-UI `Paper` component so that the element
    surrounding the options is themed accordingly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Menu` 组件渲染一个 Material-UI `Paper` 组件，以便围绕选项的元素相应地主题化。'
- en: No options available
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有可用的选项
- en: 'Here''s the `NoOptionsMessage` component. It is rendered when there aren''t
    any autocomplete options to display, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `NoOptionsMessage` 组件。当没有自动完成选项可以显示时，它会被渲染，如下所示：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This renders a `Typography` component with `textSecondary` as the `color` property
    value.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这会渲染一个具有 `textSecondary` 作为 `color` 属性值的 `Typography` 组件。
- en: Individual option
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单个选项
- en: 'Individual options that are displayed in the autocomplete menu are rendered
    using the `MenuItem` component, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动完成菜单中显示的单独选项使用 `MenuItem` 组件渲染，如下所示：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `selected` and `style` properties alter the way that the item is displayed,
    based on the `isSelected` and `isFocused` properties. The `children` property
    sets the value of the item.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`selected` 和 `style` 属性根据 `isSelected` 和 `isFocused` 属性改变项目显示的方式。`children`
    属性设置项目的值。'
- en: Placeholder text
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 占位文本
- en: 'The `Placeholder` text of the `Autocomplete` component is shown before the
    user types anything or makes a selection, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Autocomplete` 组件的 `Placeholder` 文本在用户输入任何内容或进行选择之前显示，如下所示：'
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Material-UI `Typography` component is used to theme the `Placeholder` text.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI `Typography` 组件用于主题化 `Placeholder` 文本。
- en: SingleValue
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SingleValue
- en: 'Once again, the Material-UI `Typography` component is used to render the selected
    value from the menu within the autocomplete input, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，Material-UI `Typography` 组件用于在自动完成输入中渲染来自菜单的选中值，如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ValueContainer
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ValueContainer
- en: 'The `ValueContainer` component is used to wrap the `SingleValue` component
    with a `div` and the `valueContainer` CSS class, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ValueContainer` 组件将 `SingleValue` 组件包裹在一个 `div` 元素和 `valueContainer` CSS
    类中，如下所示：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: IndicatorSeparator
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IndicatorSeparator
- en: 'By default, the `Select` component uses a pipe character as a separator between
    the buttons on the right side of the autocomplete menu. Since they''re going to
    be replaced by Material-UI button components, this separator is no longer necessary,
    as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Select` 组件使用管道字符作为自动完成菜单右侧按钮之间的分隔符。由于它们将被 Material-UI 按钮组件替换，因此这个分隔符不再必要，如下所示：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By having the component return `null`, nothing is rendered.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过让组件返回 `null`，不渲染任何内容。
- en: Clear option indicator
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清除选项指示器
- en: 'This button is used to clear any selection made previously by the user, as
    follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮用于清除用户之前所做的任何选择，如下所示：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The purpose of this component is to use the Material-UI `IconButton` component
    and to render a Material-UI icon. The click handler is passed in through `innerProps`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件的目的是使用 Material-UI 的 `IconButton` 组件并渲染 Material-UI 图标。点击处理程序通过 `innerProps`
    传入。
- en: Show menu indicator
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示菜单指示器
- en: 'Just like the `ClearIndicator` component, the `DropdownIndicator` component
    replaces the button used to show the autocomplete menu with an icon from Material-UI,
    as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `ClearIndicator` 组件一样，`DropdownIndicator` 组件用 Material-UI 的图标替换了显示自动完成菜单的按钮，如下所示：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Styles
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式
- en: 'Here are the styles used by the various sub-components of the autocomplete:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是自动完成各个子组件使用的样式：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Autocomplete
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动完成
- en: 'Finally, following is the `Autocomplete` component that you can reuse throughout
    your application:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是在整个应用程序中可以重用的 `Autocomplete` 组件：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The piece that ties all of the previous components together is the `components`
    property that's passed to `Select`. This is actually set as a `default` property
    in `Autocomplete`, so it can be further overridden. The value passed to `components`
    is a simple object that maps the component name to its implementation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有上述组件联系在一起的是传递给 `Select` 的 `components` 属性。实际上，它在 `Autocomplete` 中被设置为 `default`
    属性，因此可以进一步覆盖。传递给 `components` 的值是一个简单的对象，将组件名称映射到其实例。
- en: See also
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Select` components for React: [https://react-select.com/](https://react-select.com/)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 的 `Select` 组件：[https://react-select.com/](https://react-select.com/)
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Autocomplete` 示例：[https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API 文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Typography` API 文档：[https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Paper` API 文档：[https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IconButton` API 文档：[https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
- en: Selecting autocomplete suggestions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择自动完成建议
- en: In the previous section, you built an `Autocomplete` component capable of selecting
    a single value. Sometimes, you need the ability to select multiple values from
    an `Autocomplete` component. The good news is that, with a few small additions,
    the component that you created in the previous section already does most of the
    work.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你构建了一个能够选择单个值的 `Autocomplete` 组件。有时，你需要从 `Autocomplete` 组件中选择多个值。好消息是，通过一些小的添加，上一节中创建的组件已经完成了大部分工作。
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s walk through the additions that need to be made in order to support
    multi-value selection in the `Autocomplete` component, starting with the new `MultiValue`
    component, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看需要添加以支持 `Autocomplete` 组件中多值选择的修改，从新的 `MultiValue` 组件开始，如下所示：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `MultiValue` component uses the Material-UI `Chip` component to render
    a selected value. In order to pass `MultiValue` to `Select`, add it to the `components`
    object that''s passed to `Select`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultiValue` 组件使用 Material-UI 的 `Chip` 组件来渲染选定的值。为了将 `MultiValue` 传递给 `Select`，请将其添加到传递给
    `Select` 的 `components` 对象中：'
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now you can use your `Autocomplete` component for single value selection, or
    for multi-value selection. You can add the `isMulti` property with a default value
    of `true` to `defaultProps`, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用你的 `Autocomplete` 组件进行单值选择，或者进行多值选择。你可以在 `defaultProps` 中添加 `isMulti`
    属性，默认值为 `true`，如下所示：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, you should be able to select multiple values from the autocomplete.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够从自动完成中选择多个值。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Nothing looks different about the autocomplete when it's first rendered, or
    when you show the menu. When you make a selection, the `Chip` component is used
    to display the value. Chips are ideal for displaying small pieces of information
    like this. Furthermore, the close button integrates nicely with it, making it
    easy for the user to remove individual selections after they've been made.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次渲染或显示菜单时，自动完成看起来并没有什么不同。当你做出选择时，`Chip` 组件用于显示值。Chips非常适合显示此类小块信息。此外，关闭按钮与它很好地集成，使用户在做出选择后很容易移除单个选择。
- en: 'Here''s what the autocomplete looks like after multiple selections have been
    made:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是多次选择后自动完成的样子：
- en: '![](img/1fc802a1-8a20-4800-a893-31e726536ce7.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1fc802a1-8a20-4800-a893-31e726536ce7.png)'
- en: Values that have been selected are removed from the menu.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 已选择的价值将从菜单中移除。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Select components for React: [https://react-select.com/](https://react-select.com/)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 的选择组件：[https://react-select.com/](https://react-select.com/)
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Autocomplete` 演示：[https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API 文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Typography` API 文档：[https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Paper` API 文档：[https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IconButton` API 文档：[https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chip` API 文档：[https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
- en: API-driven Autocomplete
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 驱动的自动完成
- en: You can't always have your autocomplete data ready to render on the initial
    page load. Imagine trying to load hundreds or thousands of items before the user
    can interact with anything. The better approach is to keep the data on the server
    and supply an API endpoint with the autocomplete text as the user types. Then
    you only need to load a smaller set of data returned by the API.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不总是能在页面初始加载时准备好自动完成的数据。想象一下在用户能够与任何东西交互之前尝试加载数百或数千个项目。更好的方法是保持数据在服务器上，并提供一个带有自动完成文本的
    API 端点。然后你只需要加载 API 返回的较小数据集。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s rework the example from the previous section. We''ll keep all of the
    same autocomplete functionality, except that, instead of passing an array to the
    `options` property, we''ll pass in an API function that returns a `Promise`. Here''s
    the API function that mocks an API call that resolves a `Promise`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新整理前一个示例。我们将保留所有相同的自动完成功能，除了，我们不会将数组传递给 `options` 属性，而是传递一个返回 `Promise`
    的 API 函数。以下是一个模拟 API 调用并解决 `Promise` 的 API 函数：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This function takes a search string argument and returns a `Promise`. The same
    data that would otherwise be passed to the `Select` component in the `options`
    property is filtered here instead. Think of anything that happens in this function
    as happening behind an API in a real app. The returned `Promise` is then resolved
    with an array of matching items following a simulated latency of one second.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受一个搜索字符串参数，并返回一个 `Promise`。这里过滤的是本应传递给 `Select` 组件 `options` 属性的相同数据。将此函数中发生的任何操作视为在真实应用程序中的
    API 后面发生。然后，返回的 `Promise` 在模拟的1秒延迟后解决为匹配项的数组。
- en: 'You also need to add a couple of components to the composition of the `Select`
    component (we''re up to 13 now!), as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要将几个组件添加到 `Select` 组件的组成中（现在我们有13个了），如下所示：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `LoadingIndicator` component is shown on the right the autocomplete text
    input. It's using the `CircularProgress` component from Material-UI to indicate
    that the autocomplete is doing something. The `LoadingMessage` component follows
    the same pattern as the other text replacement components used with `Select` in
    this example. The loading text is displayed when the menu is shown, but the `Promise`
    that resolves the `options` is still pending.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadingIndicator`组件显示在自动完成文本输入的右侧。它使用Material-UI中的`CircularProgress`组件来指示自动完成正在执行某些操作。`LoadingMessage`组件与示例中用于`Select`的其他文本替换组件遵循相同的模式。当菜单显示时，会显示加载文本，但解析`options`的`Promise`仍然挂起。'
- en: 'Lastly, there''s the `Select` component. Instead of using `Select`, you need
    to use the `AsyncSelect` version, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有`Select`组件。您需要使用`AsyncSelect`版本而不是`Select`，如下所示：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Otherwise, `AsyncSelect` works the same as `Select`, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，`AsyncSelect`与`Select`的工作方式相同，如下所示：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The only difference between a `Select` autocomplete and an `AsyncSelect` autocomplete
    is what happens while the request to the API is pending. Here is what the autocomplete
    looks like while this is happening:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Select`自动完成和`AsyncSelect`自动完成的唯一区别在于API请求挂起时发生的情况。以下是发生这种情况时自动完成的外观：'
- en: '![](img/b6333f07-5b9f-48f4-9661-1e50aebdfc32.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b6333f07-5b9f-48f4-9661-1e50aebdfc32.png)'
- en: As the user types the `CircularProgress` component is rendered to the right,
    while the loading message is rendered in the menu using a `Typography` component.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 随着用户输入，`CircularProgress`组件将在右侧渲染，同时使用`Typography`组件在菜单中渲染加载消息。
- en: See also
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Select components for React: [https://react-select.com/](https://react-select.com/)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React的Select组件：[https://react-select.com/](https://react-select.com/)
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Autocomplete`演示：[https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Typography` API文档：[https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Paper` API文档：[https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IconButton` API文档：[https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chip` API文档：[https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
- en: Highlighting search results
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 突出显示搜索结果
- en: When the user starts typing in an autocomplete and the results are displayed
    in the dropdown, it isn't always obvious how a given item matches the search criteria.
    You can help your users better understand the results by highlighting the matched
    portion of the string value.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在自动完成中开始输入并在下拉菜单中显示结果时，并不总是明显地知道某个项目是如何与搜索条件匹配的。您可以通过突出显示字符串值的匹配部分来帮助用户更好地理解结果。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'You''ll want to use two functions from the `autosuggest-highlight` package
    to help `highlight` the text presented in the autocomplete dropdown, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要使用`autosuggest-highlight`包中的两个函数来帮助`突出显示`自动完成下拉菜单中呈现的文本，如下所示：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, you can build a new component that will render the item text, highlighting
    as and when necessary, as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以构建一个新的组件，该组件将渲染项目文本，并在必要时进行突出显示，如下所示：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The end result is that `ValueLabel` renders an array of `span` elements, determined
    by the `parse()` and `match()` functions. One of the spans will be bolded if `part.highlight`
    is true. Now, you can use `ValueLabel` in the `Option` component, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是`ValueLabel`渲染一个由`parse()`和`match()`函数确定的`span`元素数组。如果`part.highlight`为true，则其中一个span将被加粗。现在，您可以在`Option`组件中使用`ValueLabel`，如下所示：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now, when you search for values in the autocomplete text input, the results
    will highlight the search criteria in each item, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您在自动完成的文本输入中搜索值时，结果将突出显示每个项目中的搜索条件，如下所示：
- en: '![](img/ca6b27c7-d31c-478a-9580-f6b27935e5e3.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ca6b27c7-d31c-478a-9580-f6b27935e5e3.png)'
- en: See also
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Autosuggest for React: [https://github.com/moroshko/autosuggest-highlight](https://github.com/moroshko/autosuggest-highlight)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 的自动建议：[https://github.com/moroshko/autosuggest-highlight](https://github.com/moroshko/autosuggest-highlight)
- en: '`Select` components for React: [https://react-select.com/](https://react-select.com/)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 的 `Select` 组件：[https://react-select.com/](https://react-select.com/)
- en: '`Autocomplete` demos: [https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Autocomplete` 示例：[https://material-ui.com/demos/autocomplete/](https://material-ui.com/demos/autocomplete/)'
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextField` API 文档：[https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Typography` API 文档：[https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
- en: '`Paper` API documentation: [https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Paper` API 文档：[https://material-ui.com/api/paper/](https://material-ui.com/api/paper/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IconButton` API 文档：[https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
- en: '`Chip` API documentation: [https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chip` API 文档：[https://material-ui.com/api/chip/](https://material-ui.com/api/chip/)'
- en: Standalone chip input
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立的芯片输入
- en: Some applications require multi-value inputs but don't have a predefined list
    for the user to choose from. This rules out the possibility of using an autocomplete
    or a `select` component, for example, if you're asking the user for a list of
    names.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序需要多值输入但没有为用户预定义选择列表。这排除了使用自动完成或 `select` 组件的可能性，例如，如果您要求用户提供姓名列表。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'You can install the `material-ui-chip-input` package and use the `ChipInput`
    component, which brings together the `Chip` and `TextInput` components from Material-UI.
    The code is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安装 `material-ui-chip-input` 包并使用 `ChipInput` 组件，该组件将 Material-UI 中的 `Chip`
    和 `TextInput` 组件结合在一起。代码如下：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When the screen first loads, the field looks like a regular text field that
    you can type in, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，字段看起来像一个普通的文本字段，您可以在其中输入，如下所示：
- en: '![](img/ec82a6ad-fbb5-4c78-94ee-c754191aef69.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec82a6ad-fbb5-4c78-94ee-c754191aef69.png)'
- en: 'As the helper text indicates, you can hit *Enter* to add the item and enter
    more text, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如辅助文本所示，您可以按 *Enter* 添加项目并输入更多文本，如下所示：
- en: '![](img/0127adc0-2486-4c7a-bed5-b6c5ff5804a9.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0127adc0-2486-4c7a-bed5-b6c5ff5804a9.png)'
- en: 'You can keep adding items to the field as you please, as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随意向字段中添加项目，如下所示：
- en: '![](img/f3edb601-f8e7-42bf-9d75-0d789d5dca3c.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f3edb601-f8e7-42bf-9d75-0d789d5dca3c.png)'
- en: It's important that the helper text mentions the enter key. Otherwise, the user
    might not be able to figure out that they can enter multiple values.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 确保辅助文本提到了回车键。否则，用户可能无法弄清楚他们可以输入多个值。
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The state that holds the value of the `chip` input field is an array—because
    there are multiple values. The two actions involved with the `chip` input state
    are adding and removing strings from this array. Let''s take a closer look at
    the `onAdd()` and `onDelete()` functions, as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 保存 `chip` 输入字段值的 `state` 是一个数组——因为存在多个值。与 `chip` 输入状态相关的两个操作是从该数组中添加和删除字符串。让我们更详细地看看
    `onAdd()` 和 `onDelete()` 函数，如下所示：
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `onAdd()` function adds the `chip` to the array, while the `onDelete()`
    function deletes the `chip` at the given `index`. The chips are deleted when the
    `Delete` icon in the chip is clicked on by the user. Lastly, let''s look at the
    `ChipInput` component itself, as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`onAdd()` 函数将 `chip` 添加到数组中，而 `onDelete()` 函数删除给定 `index` 的 `chip`。当用户点击芯片中的
    `Delete` 图标时，芯片将被删除。最后，让我们看看 `ChipInput` 组件本身，如下所示：'
- en: '[PRE24]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: It's very similar to a `TextInput` component. It actually takes the same properties,
    such as `helperText`. It also takes additional properties not found in `TextInput`,
    such as `onAdd` and `onDelete`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 它非常类似于 `TextInput` 组件。它实际上接受相同的属性，例如 `helperText`。它还接受在 `TextInput` 中找不到的附加属性，例如
    `onAdd` 和 `onDelete`。
- en: See also
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: A Material-UI `ChipInput` component:[ https://www.npmjs.com/package/material-ui-chip-input](https://www.npmjs.com/package/material-ui-chip-input)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Material-UI `ChipInput` 组件：[https://www.npmjs.com/package/material-ui-chip-input](https://www.npmjs.com/package/material-ui-chip-input)
