["```js\n// hot-cold-warm/promise.js\n\nfunction getData() {\n  return new Promise(resolve => {\n    console.log(\"this will be printed straight away\");\n    setTimeout(() => resolve(\"some data\"), 3000); \n  });\n}\n\n// emits 'some data' after 3 seconds\ngetData().then(data => console.log(\"3 seconds later\", data));\n```", "```js\n// hot-cold-warm/observer.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nfunction getData() {\n  return Rx.Observable(observer => {\n    console.log(\"this won't be printed until a subscriber exists\");\n    setTimeout(() => {\n      observer.next(\"some data\");\n      observer.complete();\n    }, 3000);\n  });\n}\n\n// nothing happens\ngetData();\n```", "```js\n// hot-cold-warm/observer-with-subscriber\n\nconst Rx = require(\"rxjs/Rx\");\n\nfunction getData() {\n  return Rx.Observable.create(observer => {\n    console.log(\"this won't be printed until a subscriber exists\");\n\n    setTimeout(() => {\n      observer.next(\"some data\");\n      observer.complete();\n    }, 3000);\n  });\n}\n\nconst stream$ = getData();\nstream$.subscribe(data => console.log(\"data from observer\", data));\n```", "```js\n// hot-cold-warm/cold-observable.js\nconst Rx = require(\"rxjs/Rx\");\n\nconst stream$ = Rx.Observable.interval(1000).take(3);\n\n// subscriber 1 emits 0, 1, 2\nstream$.subscribe(data => console.log(data));\n\n// subscriber 2, emits 0, 1, 2\nstream$.subscribe(data => console.log(data));\n\n// subscriber 3, emits 0, 1, 2, after 2 seconds\nsetTimeout(() => {\n  stream$.subscribe(data => console.log(data)); \n}, 3000);\n```", "```js\n// hot observable scenario\n\n// subscriber 1 emits 0, 1, 2\nhotStream$.subscribe(data => console.log(data));\n\n// subscriber 2, emits 0, 1, 2\nhotStream$.subscribe(data => console.log(data));\n\n// subscriber 3, emits 2, after 2 seconds\nsetTimeout(() => {\n  hotStream$.subscribe(data => console.log(data)); \n}, 3000);\n```", "```js\n// hot-cold-warm/hot-observable.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet start = new Date();\nlet stream = Rx.Observable\n  .interval(1000)\n  .take(5)\n  .publish();\n\nsetTimeout(() => {\n  stream.subscribe(data => {\n    console.log(`subscriber 1 ${new Date() - start}`, data);\n  });\n}, 2000);\n\nsetTimeout(() => {\n  stream.subscribe(data => {\n    console.log(`subscriber 2 ${new Date() - start}`, data)\n  });\n}, 3000);\n\nstream.connect();\nstream.subscribe(\n  data => console.log(\n    `subscriber 0 - I was here first ${new Date() - start}`, \n    data\n  )\n);\n```", "```js\n// hot-cold-warm/warm-observer.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet warmStream = Rx.Observable.interval(1000).take(3).publish().refCount();\nlet start = new Date();\n\nsetTimeout(() => {\n  warmStream.subscribe(data => {\n    console.log(`subscriber 1 - ${new Date() - start}`,data);\n  });\n}, 2000);\n```", "```js\n// hot-cold-warm/warm-observable-subscribers.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet warmStream = Rx.Observable.interval(1000).take(3).publish().refCount();\nlet start = new Date();\n\nsetTimeout(() => {\n  warmStream.subscribe(data => {\n    console.log(`subscriber 1 - ${new Date() - start}`,data);\n  });\n}, 1000);\n\nsetTimeout(() => {\n  warmStream.subscribe(data => {\n    console.log(`subscriber 2 - ${new Date() - start}`,data);\n  });\n}, 3000);\n```", "```js\n// hot-cold-warm/warm-observable-share.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet stream$ = Rx.Observable.create((observer) => {\n  let i = 0;\n  let id = setInterval(() => {\n    observer.next(i++);\n  }, 400);\n\n  return () => {\n    clearInterval(id);\n  };\n}).share();\n\nlet sub0, sub;\n\n// first subscription happens immediately\nsub0 = stream$.subscribe(\n  (data) => console.log(\"subscriber 0\", data),\n  err => console.error(err),\n  () => console.log(\"completed\"));\n\n// second subscription happens after 1 second\nsetTimeout(() => {\n  sub = stream$.subscribe(\n  (data) => console.log(\"subscriber 1\", data),\n  err => console.error(err),\n  () => console.log(\"completed\"));\n}, 1000);\n\n// everything is unscubscribed after 2 seconds\nsetTimeout(() => {\n  sub0.unsubscribe();\n  sub.unsubscribe();\n}, 2000);\n```", "```js\nlet stream$ = Rx.Observable.create(observer => {\n  observer.next(1);\n  observer.next(2);\n});\n\nstream$.subscribe(data => console.log(data));\n```", "```js\n// subjects/subject.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet subject = new Rx.Subject();\n\n// emits 1\nsubject.subscribe(data => console.log(data));\n\nsubject.next(1);\n```", "```js\n// subjects/subjectII.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet subject = new Rx.Subject();\n\n// emits 10 and 100 2 seconds after\nsubject.subscribe(data => console.log(data));\nsubject.next(10);\n\nsetTimeout(() => {\n  subject.next(100);\n}, 2000);\n```", "```js\n// subjects/cascading.html\n\n<html>\n<body>\n  <select id=\"countries\"></select>\n  <select id=\"cities\"></select>\n  <select id=\"restaurants\"></select>\n\n  <script src=\"img/Rx.min.js\"></script>\n  <script src=\"img/cascadingIV.js\"></script>\n</body>\n</html>\n\n```", "```js\n// subjects/cascadingI.js\n\nlet countriesElem = document.getElementById(\"countries\");\nlet citiesElem = document.getElementBtyId(\"cities\");\nlet restaurantsElem = document.getElementById(\"restaurants\");\n\n// talk to /cities/country/:country, get us cities by selected country\nlet countriesStream = Rx.Observable.fromEvent(countriesElem, \"select\");\n\n// talk to /restaurants/city/:city, get us restaurants by selected restaurant\nlet citiesStream = Rx.Observable.fromEvent(citiesElem, \"select\");\n\n// talk to /book/restaurant/:restaurant, book selected restaurant\nlet restaurantsElem = Rx.Observable.fromEvent(restaurantsElem, \"select\");\n\n```", "```js\n// subjects/cascadingII.js\n\nlet countriesElem = document.getElementById(\"countries\");\nlet citiesElem = document.getElementBtyId(\"cities\");\nlet restaurantsElem = document.getElementById(\"restaurants\");\n\nfetchCountries();\n\nfunction buildList(list, items) {\n  list.innerHTML =\"\";\n  items.forEach(item => {\n    let elem = document.createElement(\"option\");\n    elem.innerHTML = item;\n    list.appendChild(elem);\n  });\n}\n\nfunction fetchCountries() {\n  return Rx.Observable.ajax(\"countries.json\")\n    .map(r => r.response)\n    .subscribe(countries => buildList(countriesElem, countries.data));\n}\n\nfunction populateCountries() {\n  fetchCountries()\n    .map(r => r.response)\n    .subscribe(countries => buildDropList(countriesElem, countries));\n}\n\nlet cities$ = new Subject();\ncities$.subscribe(cities => buildList(citiesElem, cities));\n\nRx.Observable.fromEvent(countriesElem, \"change\")\n  .map(ev => ev.target.value)\n  .do(val => clearSelections())\n  .switchMap(selectedCountry => fetchBy(selectedCountry))\n  .subscribe( cities => cities$.next(cities.data));\n\nRx.Observable.from(citiesElem, \"select\");\n\nRx.Observable.from(restaurantsElem, \"select\");\n```", "```js\n// subjects/cascadingIII.js\n\nlet countriesElem = document.getElementById(\"countries\");\nlet citiesElem = document.getElementBtyId(\"cities\");\nlet restaurantsElem = document.getElementById(\"restaurants\");\n\nfetchCountries();\n\nfunction buildList(list, items) {\n  list.innerHTML = \"\";\n  items.forEach(item => {\n    let elem = document.createElement(\"option\");\n    elem.innerHTML = item;\n    list.appendChild(elem);\n  });\n}\n\nfunction fetchCountries() {\n  return Rx.Observable.ajax(\"countries.json\")\n    .map(r => r.response)\n    .subscribe(countries => buildList(countriesElem, countries.data));\n}\n\nfunction populateCountries() {\n  fetchCountries()\n    .map(r => r.response)\n    .subscribe(countries => buildDropList(countriesElem, countries));\n}\n\nlet cities$ = new Subject();\ncities$.subscribe(cities => buildList(citiesElem, cities));\n\nlet restaurants$ = new Rx.Subject();\nrestaurants$.subscribe(restaurants => buildList(restaurantsElem, restaurants));\n\nRx.Observable.fromEvent(countriesElem, \"change\")\n  .map(ev => ev.target.value)\n  .do( val => clearSelections())\n  .switchMap(selectedCountry => fetchBy(selectedCountry))\n  .subscribe( cities => cities$.next(cities.data));\n\nRx.Observable.from(citiesElem, \"select\")\n .map(ev => ev.target.value)\n  .switchMap(selectedCity => fetchBy(selectedCity))\n  .subscribe( restaurants => restaurants$.next(restaurants.data)); // talk to /book/restaurant/:restaurant, book selected restaurant\nRx.Observable.from(restaurantsElem, \"select\");\n```", "```js\n// subjects/cascadingIV.js\n\nlet cities$ = new Rx.Subject();\ncities$.subscribe(cities => buildList(citiesElem, cities));\n\nlet restaurants$ = new Rx.Subject();\nrestaurants$.subscribe(restaurants => buildList(restaurantsElem, restaurants));\n\nfunction buildList(list, items) {\n  list.innerHTML = \"\";\n  items.forEach(item => {\n    let elem = document.createElement(\"option\");\n    elem.innerHTML = item;\n    list.appendChild(elem);\n  });\n}\n\nfunction fetchCountries() {\n  return Rx.Observable.ajax(\"countries.json\")\n    .map(r => r.response)\n    .subscribe(countries => buildList(countriesElem, countries.data));\n}\n\nfunction fetchBy(by) {\n  return Rx.Observable.ajax(`${by}.json`)\n  .map(r=> r.response);\n}\n\nfunction clearSelections() {\n  citiesElem.innerHTML = \"\";\n  restaurantsElem.innerHTML = \"\";\n}\n\nlet countriesElem = document.getElementById(\"countries\");\nlet citiesElem = document.getElementById(\"cities\");\nlet restaurantsElem = document.getElementById(\"restaurants\");\n\nfetchCountries();\n\nRx.Observable.fromEvent(countriesElem, \"change\")\n  .map(ev => ev.target.value)\n  .do(val => clearSelections())\n  .switchMap(selectedCountry => fetchBy(selectedCountry))\n  .subscribe(cities => cities$.next(cities.data));\n\nRx.Observable.fromEvent(citiesElem, \"change\")\n  .map(ev => ev.target.value)\n  .switchMap(selectedCity => fetchBy(selectedCity))\n  .subscribe(restaurants => restaurants$.next(restaurants.data));\n\nRx.Observable.fromEvent(restaurantsElem, \"change\")\n  .map(ev => ev.target.value)\n  .subscribe(selectedRestaurant => console.log(\"selected restaurant\", selectedRestaurant));\n```", "```js\n// subjects/behavior-subject.js\n\nlet behaviorSubject = new Rx.BehaviorSubject(\"default value\");\n\n// will emit 'default value'\nbehaviorSubject.subscribe(data => console.log(data));\n\n// long running AJAX scenario\nsetTimeout(() => {\n  return Rx.Observable.ajax(\"data.json\")\n    .map(r => r.response)\n    .subscribe(data => behaviorSubject.next(data));\n}, 12000);\n```", "```js\n// example of emitting values before subscription\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet subject = new Rx.Subject();\nsubject.next(\"subject first value\");\n\n// emits 'subject second value'\nsubject.subscribe(data => console.log(\"subscribe - subject\", data));\nsubject.next(\"subject second value\");\n\nlet behaviourSubject = new Rx.BehaviorSubject(\"behaviorsubject initial value\");\nbehaviourSubject.next(\"behaviorsubject first value\");\nbehaviourSubject.next(\"behaviorsubject second value\");\n\n// emits 'behaviorsubject second value', 'behaviorsubject third value' \nbehaviourSubject.subscribe(data =>\n  console.log(\"subscribe - behaviorsubject\", data)\n);\n\nbehaviourSubject.next(\"behaviorsubject third value\");\n```", "```js\n// subjects/replay-subject.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet replaySubject = new Rx.ReplaySubject(2);\n\nreplaySubject.next(1);\nreplaySubject.next(2);\nreplaySubject.next(3);\n\n// emitting 2 and 3\nreplaySubject.subscribe(data => console.log(data));\n```", "```js\n// subjects/replay-subject-window-size.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet replaySubjectWithWindow = new Rx.ReplaySubject(2, 2000);\nreplaySubjectWithWindow.next(1);\nreplaySubjectWithWindow.next(2);\nreplaySubjectWithWindow.next(3);\n\nsetTimeout(() => {\n  replaySubjectWithWindow.subscribe(data =>\n    console.log(\"replay with buffer and window size\", data));\n  }, \n2010);\n```", "```js\n// subjects/async-subject.js\n\nlet asyncSubject = new Rx.AsyncSubject();\nasyncSubject.next(1);\nasyncSubject.next(2);\nasyncSubject.next(3);\nasyncSubject.next(4);\n\nasyncSubject.subscribe(data => console.log(data), err => console.error(err));\n\n```", "```js\n// subjects/async-subject-complete.js\n\nlet asyncSubject = new Rx.AsyncSubject();\nasyncSubject.next(1);\nasyncSubject.next(2);\nasyncSubject.next(3);\nasyncSubject.next(4);\n\n// emits 4\nasyncSubject.subscribe(data => console.log(data), err => console.error(err));\nasyncSubject.complete();\n\n```", "```js\n// example of a stream with an error\n\nlet stream$ = Rx.Observable.create(observer => {\n  observer.next(1);\n  observer.error('an error is thrown');  \n  observer.next(2);\n});\n\nstream$.subscribe(\n  data => console.log(data), // 1 \n  error => console.error(error) // 'error is thrown'\n);\n```", "```js\n// error-handling/error-catch.js\nconst Rx = require(\"rxjs/Rx\");\n\nlet stream$ = Rx.Observable.create(observer => {\n  observer.next(1);\n  observer.error(\"an error is thrown\");\n  observer.next(2);\n}).catch(err => Rx.Observable.of(err));\n\nstream$.subscribe(\n  data => console.log(data), // emits 1 and 'error is thrown'\n  error => console.error(error)\n);\n\n```", "```js\n// example of merging several streams\n\nlet merged$ = Rx.Observable.merge(\n  Rx.Observable.of(1),\n  Rx.Observable.throw(\"err\"),\n  Rx.Observable.of(2)\n);\n\nmerged$.subscribe(data => console.log(\"merged\", data));\n```", "```js\n// error-handling/error-merge-catch.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet merged$ = Rx.Observable.merge(\n  Rx.Observable.of(1),\n  Rx.Observable.throw(\"err\").catch(err => Rx.Observable.of(err)),\n  Rx.Observable.of(2)\n);\n\nmerged$.subscribe(data => console.log(\"merged\", data));\n```", "```js\n// error-handling/error-ignore.js\nconst Rx = require(\"rxjs/Rx\");\n\nlet mergedIgnore$ = Rx.Observable.onErrorResumeNext(\n  Rx.Observable.of(1),\n  Rx.Observable.throw(\"err\"),\n  Rx.Observable.of(2)\n);\n\nmergedIgnore$.subscribe(data => console.log(\"merge ignore\", data));\n```", "```js\n// error-handling/error-retry.js\nconst Rx = require(\"rxjs/Rx\");\n\nlet stream$ = Rx.Observable.create(observer => {\n  observer.next(1);\n  observer.error(\"err\");\n})\n.retry(3);\n\n// emits 1 1 1 1 err\nstream$\n  .subscribe(data => console.log(data));\n```", "```js\n// example of using a retry with AJAX\n\nlet ajaxStream$ = Rx.Observable.ajax(\"UK1.json\")\n  .map(r => r.response)\n  .retry(3);\n\najaxStream$.subscribe(\n  data => console.log(\"ajax result\", data),\n  err => console.error(\"ajax error\", err)\n);\n```", "```js\n// retry with a delay\n\nlet ajaxStream$ = Rx.Observable.ajax(\"UK1.json\")\n  .do(r => console.log(\"emitted\"))\n  .map(r => r.response)\n  .retryWhen(err => {\n    return err.delay(3000);\n  });\n```", "```js\n// error-handling/error-retry-advanced.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nlet ajaxStream$ = Rx.Observable.ajax(\"UK1.json\")\n  .do(r => console.log(\"emitted\"))\n  .map(r => r.response)\n  .retryWhen(err => {\n    return err\n    .delay(3000)\n    .take(3);\n});\n\n```", "```js\n// error-handling/error-retry-advanced-fail.js\n\nlet ajaxStream$ = Rx.Observable.ajax(\"UK1.json\")\n  .do(r => console.log(\"emitted\"))\n  .map(r => r.response)\n  .retryWhen(err => {\n    return err\n    .delay(3000)\n    .take(3)\n    .concat(Rx.Observable.throw(\"giving up\"));\n});\n```", "```js\n// error-handling/error-retry-errorcodes.js\n\nconst Rx = require(\"rxjs/Rx\");\n\nfunction isOkError(errorCode) {\n  return errorCode >= 400 && errorCode < 500;\n}\n\nlet ajaxStream$ = Rx.Observable.ajax(\"UK1.json\")\n  .do(r => console.log(\"emitted\"))\n  .map(r => r.response)\n  .retryWhen(err => {\n    return err\n      .do(val => {\n        if (!isOkError(val.status) || timesToRetry === 0) {\n          throw \"give up\";\n        }\n      })\n      .delay(3000);\n  });\n```", "```js\nng new MarbleTesting\n```", "```js\ncd MarbleTesting\nnpm install jasmine-marbles --save\n```", "```js\n// marble-testing\\MarbleTesting\\src\\app\\marble-testing.spec.ts\n\nimport { cold } from \"jasmine-marbles\";\nimport \"rxjs/add/operator/map\";\n\ndescribe(\"marble tests\", () => {\n  it(\"map - should increase by 1\", () => {\n    const one$ = cold(\"x-x|\", { x: 1 });\n    expect(one$.map(x => x + 1)).toBeObservable(cold(\"x-x|\", { x: 2 }));\n  });\n});\n```", "```js\nconst stream$ = cold(\"x-x|\", { x: 1 });\n```", "```js\nexpect(stream$.map(x => x + 1)).toBeObservable(cold(\"x-x|\", { x: 2 }));\n```", "```js\ncold(\"x-x|\", { x: 2 })\n```", "```js\nimport { cold } from \"jasmine-marbles\";\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/filter\";\n\ndescribe(\"marble testing\", () => {\n  it(\"map - should increase by 1\", () => {\n    const one$ = cold(\"x-x|\", { x: 1 });\n    expect(one$.map(x => x + 1)).toBeObservable(cold(\"x-x|\", { x: 2 }));\n  });\n\n  it(\"filter - should remove values\", () => {\n    const stream$ = cold(\"x-y|\", { x: 1, y: 2 });\n    expect(stream$.filter(x => x > 1)).toBeObservable(cold(\"--y|\", { y: 2 }));\n  });\n});\n```", "```js\ncold(\"--y|\", { y: 2 })\n```", "```js\nimport Rx from \"rxjs/Rx\";\n```", "```js\nimport { Observable } from 'rxjs/Observable';\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/take\";\n\nlet stream = Observable.interval(1000)\n  .map(x => x +1)\n  .take(2)\n```", "```js\nimport \"rxjs/add/operator/map\";\n```", "```js\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\n\nObservable_1.Observable.prototype.map = map_1.map;\n```", "```js\nimport { operator } from 'some/path';\n\noperator();\n```", "```js\nimport Rx from \"rxjs/Rx\";\n\nlet stream = Rx.Observable.of(0,1,2);\nlet addAndFilter = obs => obs.map( x => x * 10).filter(x => x % 10 === 0);\nlet sub3 = obs => obs.map(x => x - 3);\n\nstream\n  .let(addAndFilter)\n  .let(sub3)\n  .subscribe(x => console.log('let', x));\n\n```", "```js\nimport { map } from \"rxjs/operators/map\";\nimport { filter } from \"rxjs/operators/filter\";\n```", "```js\nimport { map } from \"rxjs/operators/map\";\nimport { filter } from \"rxjs/operators\";\nimport { of } from \"rxjs/observable/of\";\nimport { Observable } from \"rxjs/Observable\";\n\nlet stream = of(1,2);\nstream.pipe(\n  map(x => x + 1),\n  filter(x => x > 1)\n)\n.subscribe(x => console.log(\"piped\", x)); // emits 2 and 3\n```"]