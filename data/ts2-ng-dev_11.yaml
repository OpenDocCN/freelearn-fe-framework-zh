- en: Working with Real Hosted Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用真实托管的数据
- en: Modern web applications are usually data-driven. More often than not, we need
    to CRUD (create, read, update, and delete) data from various resources, or consume
    APIs. Angular makes it easy for us to work with data from external sources for
    use in our components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web应用程序通常是数据驱动的。我们经常需要从各种资源中创建、读取、更新和删除数据，或者消费API。Angular让我们能够轻松地从外部资源中获取数据，以供我们的组件使用。
- en: 'Angular provides a simple HTTP API that grants our applications HTTP functionality.
    It is built on the native XMLHttpRequest interface exposed by modern browsers,
    and with it, we can carry out any of these HTTP operations:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular提供了一个简单的HTTP API，为我们的应用程序提供了HTTP功能。它建立在现代浏览器暴露的原生XMLHttpRequest接口之上，我们可以执行任何这些HTTP操作：
- en: 'Get: Requests data from a resource'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Get：从资源中请求数据
- en: 'Post: Submits data to a resource'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Post：提交数据到资源
- en: 'Put: Modifies data in a resource'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Put：修改资源中的数据
- en: 'Delete: Deletes a specified resource'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Delete：删除指定的资源
- en: In this chapter, we will learn how to work with Angular to consume APIs and
    make our applications data-driven.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Angular来消费API，并使我们的应用程序成为数据驱动的。
- en: Observables
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Observables
- en: '**Observables**, similar to promises, help handle asynchronous events in an
    application. The key differences between Observables and promises are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Observables**，类似于promises，帮助处理应用程序中的异步事件。Observables和promises之间的关键区别在于：'
- en: Observables can handle multiple values over time, while promises are called
    once and return one value
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Observables可以处理多个值，而promises只能调用一次并返回一个值
- en: Observables are cancellable, while promises are not
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Observables是可取消的，而promises不是
- en: To make use of Observables, Angular utilizes the **Reactive Extensions for JavaScript** (**RxJs**)
    Observables library. Angular makes extensive use of Observables in handling HTTP
    requests and responses; we will learn more about them in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Observables，Angular利用了**JavaScript的响应式扩展**（**RxJs**）Observables库。Angular在处理HTTP请求和响应时广泛使用Observables；我们将在本章中更多地了解它们。
- en: The HTTP module
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP模块
- en: 'To get started with using HTTP in your components, you need to install the
    `HttpModule` that provides it in your application module. First, import the module:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在组件中使用HTTP，你需要在应用程序模块中安装提供它的`HttpModule`。首先，导入这个模块：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you include the module in the array of imports registered in your application,
    right after `BrowserModule`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要在应用程序模块中的导入数组中包含这个模块，就在`BrowserModule`之后：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building a simple todo demo app
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的todo演示应用
- en: Let us build a simple `todo` app to better understand how to work with data
    in an Angular app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单的“todo”应用程序，以更好地理解如何在Angular应用程序中处理数据。
- en: Angular-CLI will be used to quickly scaffold the application. The API for the
    application will be built with Express.js, and our Angular app will connect to
    this API to CRUD todo data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Angular-CLI将被用来快速搭建应用程序。应用程序的API将使用Express.js构建，我们的Angular应用程序将连接到这个API来CRUD
    todo数据。
- en: Project setup
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目设置
- en: 'To create a new project using the CLI:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CLI创建一个新项目：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ng new` command creates a new angular application
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng new`命令创建一个新的angular应用程序'
- en: Building the API
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建API
- en: 'From the command line, install express, body-parser, and cors as dependencies
    via npm:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行通过npm安装express、body-parser和cors作为依赖项：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you use npm 5, you don't need to specify the `-S` or `--save` flag to save
    as a dependency in your `package.json` file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用npm 5，你不需要在`package.json`文件中指定`-S`或`--save`标志来保存为依赖项。
- en: 'Next, we will create a `server.js` file in the root folder of the Angular project
    which will hold all our API logic:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在Angular项目的根文件夹中创建一个`server.js`文件，其中将包含我们所有的API逻辑：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This file uses new versions of ES6 so you should watch in cases where your code
    editors don't recognize it immediately.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件使用了ES6的新版本，所以你应该注意一些情况，你的代码编辑器可能不会立即识别它。
- en: 'The `/api` routes point to the `./routes/index.js`file, but we do not have
    it yet. In this next step, we will create it. Still in the `root` directory, create
    a folder named `routes` and in it a file called `index.js`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api` 路由指向 `./routes/index.js` 文件，但我们还没有它。在下一步中，我们将创建它。仍然在 `root` 目录中，创建一个名为
    `routes` 的文件夹，在其中创建一个名为 `index.js` 的文件：'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To start the server, enter the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务器，请输入以下命令：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the output when the server starts running:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器开始运行时，这是输出：
- en: '![](assets/7d5e1721-fed9-4540-80ce-6dc1f3e6d69b.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7d5e1721-fed9-4540-80ce-6dc1f3e6d69b.jpg)'
- en: Here we can see that the server is running and it listens on port 3000.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到服务器正在运行，并且监听在3000端口上。
- en: 'Open up your browser and visit `localhost:3000/api/`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 `localhost:3000/api/`：
- en: '![](assets/2c0f4bae-65a6-4d08-ac67-7d710127414e.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c0f4bae-65a6-4d08-ac67-7d710127414e.jpg)'
- en: If you can see the response in the preceding image, then the API works. Now
    we can introduce more complex logic so we have actual data to work with.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以在前面的图像中看到响应，那么API是有效的。现在我们可以引入更复杂的逻辑，这样我们就有实际的数据可以使用了。
- en: Installing diskdb
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 diskdb
- en: '**Diskdb** is a lightweight disk-based JSON database with a MongoDB-like API
    for Node. We can install diskdb with this command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Diskdb** 是一个轻量级的基于磁盘的JSON数据库，具有类似于Node的MongoDB API。我们可以使用以下命令安装diskdb：'
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a `todos.json` file at the root of the directory. This file will serve
    as our database collection where we have our todo items. You can learn more about
    diskdb here [https://www.npmjs.com/package/diskdb](https://www.npmjs.com/package/diskdb).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录的根目录创建一个 `todos.json` 文件。这个文件将作为我们的数据库集合，其中包含我们的待办事项。您可以在这里了解更多关于diskdb的信息
    [https://www.npmjs.com/package/diskdb](https://www.npmjs.com/package/diskdb)。
- en: Updating API endpoints
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新API端点
- en: 'Let us update the `routes/index.js` file with the new logic for working with
    our todos:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新 `routes/index.js` 文件，使用新的逻辑来处理我们的todos：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we were able to update our API with `get`, `post`, `put`,
    and `delete` endpoints.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们能够使用 `get`、`post`、`put` 和 `delete` 端点更新我们的API。
- en: 'Next, we will seed our database with some data. Updating the `todos.json` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将用一些数据填充我们的数据库。更新 `todos.json` 文件：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we can restart our server and visit `localhost:3000/api/todos` to see our
    API in action:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以重新启动服务器并访问 `localhost:3000/api/todos` 来查看我们的API在运行中：
- en: '![](assets/981a9500-2ef5-416f-80dd-793714c333e2.jpg)List of Todos from the
    database.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/981a9500-2ef5-416f-80dd-793714c333e2.jpg)从数据库中获取的待办事项列表。'
- en: Creating an Angular component
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Angular组件
- en: 'Next, we will create a `todo` component. We can easily do that with the Angular-CLI,
    with this command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 `todo` 组件。我们可以使用 Angular-CLI 轻松完成这个命令：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This generates the following files: `todos.component.ts`, `todos.component.html`,
    and `todos.component.ts`. The todos component is also automatically imported into
    `app.module.ts`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下文件：`todos.component.ts`、`todos.component.html` 和 `todos.component.ts`。todos组件也会自动导入到
    `app.module.ts` 中。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We should be sure to add a `<base href="/">` within the `src/index.html` head
    tag. This is to tell the router how to compose navigation URLs. The `index.html`
    file was created automatically when we used Angular-CLI to generate the angular
    project:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该确保在 `src/index.html` 的头标签中添加 `<base href="/">`。这是为了告诉路由器如何组合导航URL。当我们使用Angular-CLI生成angular项目时，`index.html`
    文件会自动创建：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating application routes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序路由
- en: Next, we will create a `/todos` route and have our app redirect to it by default.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 `/todos` 路由，并让我们的应用程序默认重定向到它。
- en: 'First, import `RouterModule` from `@angular/router` and add it to the `AppModule`
    imports array:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 `@angular/router` 导入 `RouterModule` 并将其添加到 `AppModule` 的导入数组中：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `ROUTES`array just above `ngModule` declarations and add the following
    route definitions to it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ngModule` 声明的上方创建一个 `ROUTES` 数组，并将以下路由定义添加到其中：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `app.component.html` file, let''s add a router-outlet where we want
    to render the route:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.component.html`文件中，让我们在想要渲染路由的地方添加一个router-outlet：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating a todos service
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个todos服务
- en: 'Next, we will create a service which will handle the calls and connect our
    component to the express API. To generate the service with Angular-CLI:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个服务，用于处理调用并将我们的组件连接到express API。使用Angular-CLI生成服务：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The service is created but not registered—to register it in our app, we need
    to add it to the providers section of the main application module.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 服务已经创建但未注册——要在我们的应用中注册它，我们需要将它添加到主应用模块的providers部分。
- en: Angular-CLI does not automatically register services.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Angular-CLI不会自动注册服务。
- en: 'Add the TodosService to the providers array:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将TodosService添加到providers数组中：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, within our service, we will make HTTP calls to the express server to execute
    our CRUD operations. First, we will import `HTTP`, `Headers`, and `rxjs/add/operator/map`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的服务中，我们将发起HTTP调用到express服务器来执行我们的CRUD操作。首先，我们将导入`HTTP`、`Headers`和`rxjs/add/operator/map`：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define a constructor and inject the HTTP service:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个构造函数并注入HTTP服务：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we make use of the `HttpModule` to make a simple `get`
    request to our API to retrieve a list of Todos. The response from the request
    is then returned in JSON format.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们利用`HttpModule`发起了一个简单的`get`请求到我们的API以检索Todos列表。然后将请求的响应以JSON格式返回。
- en: Next, we will write a method to store todo items, named `addTodos()`. This method
    will be used to make post requests for storing todos.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个存储todo项目的方法，名为`addTodos()`。这个方法将用于发起存储todos的post请求。
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code, we set up new headers and also set `Content-Type` to
    tell the server what type of content it will receive (`'application/json'`).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们设置了新的头部，并将`Content-Type`设置为告诉服务器它将接收什么类型的内容（`'application/json'`）。
- en: We made use of the `http.post()` method to make a post request. The parameter,
    `JSON.stringify(todo)` indicates that we want to send the new todo as a JSON encoded
    string. Finally, we can return the response from the API in JSON format.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用`http.post()`方法发起了一个post请求。参数`JSON.stringify(todo)`表示我们要将新的todo以JSON编码的字符串形式发送。最后，我们可以以JSON格式返回API的响应。
- en: 'Next, we will define a delete method called `deleteTodo()`. This method will
    be used to make delete requests. This enables us to delete todos from the todos
    list. Once again, update `todos.service.ts`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义一个名为`deleteTodo()`的删除方法。这个方法将用于发起删除请求。这使我们能够从todos列表中删除todos。再次更新`todos.service.ts`：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code, we defined the `deleteTodo()`method which takes the `id`of
    the post to be deleted as its only parameter. This method makes a delete request
    to the API to remove the specified todo from the database. The response from the
    API is also returned as JSON.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们定义了`deleteTodo()`方法，它以要删除的帖子的`id`作为唯一参数。这个方法发起了一个删除请求到API，从数据库中移除指定的todo。API的响应也以JSON格式返回。
- en: Finally, we will define a method called `updateStatus()`. This method will be
    used to make a `put` request to change the state of a todos item.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将定义一个名为`updateStatus()`的方法。这个方法将用于发起一个`put`请求来改变todos项目的状态。
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, we created an `updateStatus()`method which is similar
    to `addTodos()` method. The difference here is that the `updateStatus()` method
    makes a `put` request. We also concatenated `todo._id` to the API endpoint being
    called. This enables us to modify the state of a single item from the todos list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了一个`updateStatus()`方法，它类似于`addTodos()`方法。不同之处在于`updateStatus()`方法发起了一个`put`请求。我们还将`todo._id`连接到被调用的API端点上。这使我们能够修改todos列表中单个项目的状态。
- en: 'Remember, we are making use of the HTTP API in our service, hence, we should
    import `HttpModule` in `app.module.ts` and include it in the imports array:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们在我们的服务中使用了HTTP API，因此，我们应该在`app.module.ts`中导入`HttpModule`并将其包含在导入数组中：
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Connecting the service with our todos component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将服务与我们的todos组件连接起来
- en: 'First, we have to import todos service in todos component:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须在todos组件中导入todos服务：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then add the `TodosService` class in the component''s constructor:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在组件的构造函数中添加`TodosService`类：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, we will make use of the todo service to `get`, `create`, `delete`, and
    `update` todos.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用todo服务来`获取`、`创建`、`删除`和`更新`todos。
- en: 'This is what our todos component should look like:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的todos组件应该看起来的样子：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We just enabled communication between the service and the component. The `component.ts`
    file can now make use of the service and the methods in it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚启用了服务和组件之间的通信。`component.ts`文件现在可以使用服务和其中的方法。
- en: Now that we have connected the service and component, we have to display the
    todos operations in the browser, and this will be done in `todos.component.html`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经连接了服务和组件，我们必须在`todos.component.html`中在浏览器中显示todos操作。
- en: Implementing the view
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现视图
- en: 'To display todos, we shall make use of:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示todos，我们将使用：
- en: Angular's `*ngFor` directive, which iterates over the todos array and renders
    an instance of this template for each todo in that array
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular的`*ngFor`指令，它遍历todos数组，并为该数组中的每个todo呈现此模板的一个实例
- en: Angular's interpolation binding syntax, `{{}}`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular的插值绑定语法，`{{}}`
- en: 'Update `todos.component.html`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`todos.component.html`：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To make our app look better, we will make use of bootstrap. **Bootstrap** is
    a powerful front-end framework for creating web and user interface components
    like forms, modals, accordions, carousels, and tabs:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的应用看起来更好，我们将使用bootstrap。**Bootstrap**是一个强大的前端框架，用于创建网页和用户界面组件，如表单、模态框、手风琴、轮播和选项卡：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update `todos.component.html`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`todos.component.html`：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Open up a command line/terminal and navigate to the project folder. Run node
    `server.js` to start the server. Open another terminal window in the `project`
    folder and run `ng serve` to serve the Angular app.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令行/终端并导航到项目文件夹。运行`node server.js`启动服务器。在`project`文件夹中打开另一个终端窗口，并运行`ng serve`来提供Angular应用。
- en: 'Open up the browser and visit `localhost:4200`. This is what the result should
    look like the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问`localhost:4200`。这就是结果应该看起来像以下截图：
- en: '![](assets/06388fbe-6640-4e52-a8a6-d751eca2cb6c.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/06388fbe-6640-4e52-a8a6-d751eca2cb6c.jpg)'
- en: We have succeeded in creating a todo app by making HTTP requests to the node
    server through the service and then rendering the result to the DOM through the
    component. You can add a todo, delete a todo, get all todos and when you click
    on a todo, the boolean value changes and a strikethrough appears across that particular
    todo. When you reload the browser, you can see that the changes made to the todo
    list persist.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功创建了一个todo应用，通过服务向node服务器发出HTTP请求，然后通过组件将结果呈现到DOM中。您可以添加一个todo，删除一个todo，获取所有todos，当您点击一个todo时，布尔值会改变，并且在特定的todo上出现删除线。当您重新加载浏览器时，您可以看到对todo列表所做的更改是持久的。
- en: 'Let us take a brief recap of all that we have done:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下我们所做的一切：
- en: First, we created an Angular application using the Angular-CLI
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们使用Angular-CLI创建了一个Angular应用
- en: Then we created a server file, where we required our dependencies, created an
    express app, set our API routes, declared a port for our server to listen to,
    added parsers for post data, and so on
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们创建了一个服务器文件，在那里我们需要我们的依赖项，创建了一个express应用程序，设置了我们的API路由，声明了一个端口供我们的服务器监听，添加了用于post数据的解析器，等等
- en: We then defined our source of data which was a `.json` file of todos communicating
    with **diskdb**
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们定义了我们的数据源，这是一个与**diskdb**通信的todos的`.json`文件
- en: Created an Angular component
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Angular组件
- en: Created a service with `get`, `post`, `put`, and `delete` methods that communicate
    with the REST API
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个具有`get`、`post`、`put`和`delete`方法的服务，用于与REST API通信
- en: Let us look at another example. We'll create a simple app to display a list
    of users together with their emails, and phone numbers. The users will also have
    a true or false state, indicating whether they are available or unavailable.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子。我们将创建一个简单的应用程序，显示用户列表以及他们的电子邮件和电话号码。用户还将具有一个真假状态，指示他们是否可用或不可用。
- en: Build a user directory with Angular
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular构建用户目录
- en: The application we are about to build will have a REST API which will be created
    during the course of this example. In this simple example, we'll be creating a
    `users` app which will be quite simple. The app will basically be a table which
    contains a list of users together with their email addresses and phone numbers.
    Each user in the table will have an *active*state whose value is a boolean. We
    will be able to change the *active* state of a particular user from false to true
    and vice versa. The app will give us the ability to add new users and also delete
    users from the table. Just like the previous example, diskDB will be used as the
    database for this example. We will have an Angular service which contains methods
    that will be responsible for communicating with the REST end points. These methods
    will be responsible for making `get`, `post`, `put`, and `delete` requests to
    the REST API. The first method in the service will be responsible for making a
    `get` request to the API. This will enable us to retrieve all the users from the
    back end. Next, we will have another method that makes a `post` request to the
    API. This will enable us to add new users to the array of existing users.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将构建的应用程序将具有一个REST API，在本示例的过程中将创建该API。在这个简单的例子中，我们将创建一个“用户”应用程序，这将是非常简单的。该应用程序基本上将是一个包含用户列表及其电子邮件地址和电话号码的表格。表中的每个用户都将具有一个*active*状态，其值为布尔值。我们将能够将特定用户的*active*状态从false更改为true，反之亦然。该应用程序将使我们能够添加新用户，还可以从表中删除用户。与上一个例子一样，diskDB将用作此示例的数据库。我们将有一个Angular服务，其中包含负责与REST端点通信的方法。这些方法将负责向REST
    API发出“get”、“post”、“put”和“delete”请求。服务中的第一个方法将负责向API发出“get”请求。这将使我们能够从后端检索所有用户。接下来，我们将有另一个方法，该方法将向API发出“post”请求。这将使我们能够将新用户添加到现有用户数组中。
- en: The next method we shall have will be responsible for making a `delete` request
    to the API in order to enable the deletion of a user. Finally, we shall have a
    method that makes a `put` request to the API. This will be the method that gives
    us the ability to edit/modify the state of a user. In order to make these requests
    to the REST API, we will have to make use of the HttpModule. The aim of this section
    is to solidify your knowledge of HTTP. As a JavaScript and, in fact, an Angular
    developer, you are bound to make interactions with APIs and web servers almost
    all the time. So much data used by developers today is in form of APIs and in
    order to make interactions with these APIs, we need to constantly make use of
    HTTP requests. As a matter of fact, HTTP is the foundation of data communication
    for the web.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的方法将负责向API发出“删除”请求，以便删除用户。最后，我们将有一个方法，该方法将向API发出“put”请求。这将是赋予我们编辑/修改用户状态的能力的方法。为了向REST
    API发出这些请求，我们将不得不使用HttpModule。本节的目的是巩固您对HTTP的知识。作为JavaScript和实际上是Angular开发人员，您几乎总是需要与API和Web服务器进行交互。今天开发人员使用的许多数据都是以API的形式存在的，为了与这些API进行交互，我们需要不断地使用HTTP请求。事实上，HTTP是Web数据通信的基础。
- en: Create a new Angular app
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Angular应用程序
- en: 'As shown previously, to start a new Angular app, run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，要启动一个新的Angular应用程序，请运行以下命令：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This creates the Angular 2 user app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了Angular 2用户应用程序。
- en: 'Install the following dependencies:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 安装以下依赖项：
- en: Express
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达
- en: Body-parser
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Body-parser
- en: Cors
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cors
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Create a Node server
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Node服务器
- en: Create a file called `server.js` at the root of the project directory. This
    will be our node server.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目目录的根目录创建一个名为`server.js`的文件。这将是我们的node服务器。
- en: 'Populate `server.js` with the following block of code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码块填充`server.js`：
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'What''s going on here is pretty simple:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里正在发生的事情非常简单：
- en: We required and made use of the dependencies
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要并使用了依赖项
- en: We defined and set the API routes
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义并设置了API路由
- en: We set a port for our server to listen to
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的服务器设置一个端口
- en: The API routes are being required from `./route`, but this path does not exist
    yet. Let's quickly create it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: API路由正在从`./route`中被引用，但这个路径还不存在。让我们快速创建它。
- en: At the root of the project directory, create a file called `route.js`. This
    is where the API routes will be made. We need to have a form of a database from
    where we can fetch, post, delete, and modify data.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目目录的根目录，创建一个名为`route.js`的文件。这是API路由将被创建的地方。我们需要有一个数据库形式，从中我们可以获取、发布、删除和修改数据。
- en: Just as in the previous example, we will make use of diskdb. The route will
    pretty much have the same pattern as in the first example.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在之前的例子中一样，我们将使用diskdb。路由将基本上与第一个例子中的模式相同。
- en: Install diskDB
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装diskDB
- en: 'Run the following in the project folder to install diskdb:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹中运行以下命令以安装diskdb：
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create a `users.json` file at the root of the project directory to serve as
    our database collection where we have our users' details.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目目录的根目录创建一个名为`users.json`的文件，作为我们的数据库集合，其中包含我们用户的详细信息。
- en: 'Populate `users.json` with the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容填充`users.json`：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now, update `route.js`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新`route.js`。
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We've created a REST API with the API routes, using diskDB as the database.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个REST API，使用diskDB作为数据库的API路由。
- en: 'Start the server using the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动服务器：
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The server is running and it is listening to the assigned port. Now, open up
    the browser and go to `http://localhost:3000/api/users`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器正在运行，并且正在监听分配的端口。现在，打开浏览器并转到`http://localhost:3000/api/users`。
- en: Here, we can see the data that we imputed to the `users.json` file. This shows
    that our routes are working and we are getting data from the database.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们输入到`users.json`文件中的数据。这表明我们的路由正在工作，并且我们正在从数据库中获取数据。
- en: Create a new component
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新组件
- en: 'Run the following command to create a new component:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令创建一个新组件：
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This creates `user.component.ts`, `user.component.html`, `user.component.css`
    and `user.component.spec.ts` files. `User.component.spec.ts` is used for testing,
    therefore we will not be making use of it in this chapter. The newly created component
    is automatically imported into `app.module.ts`. We have to tell the root component
    about the user component. We''ll do this by importing the selector from `user.component.ts`
    into the root template component (`app.component.html`):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了`user.component.ts`、`user.component.html`、`user.component.css`和`user.component.spec.ts`文件。`User.component.spec.ts`用于测试，因此我们在本章中不会使用它。新创建的组件会自动导入到`app.module.ts`中。我们必须告诉根组件有关用户组件。我们将通过将选择器从`user.component.ts`导入到根模板组件（`app.component.html`）来实现这一点：
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Create a service
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个服务
- en: 'The next step is to create a service that interacts with the API that we created
    earlier:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个与我们之前创建的API交互的服务：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This creates a user service called the `user.service.ts`. Next, import `UserService`
    class into `app.module.ts` and include it to the providers array:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个名为`user.service.ts`的用户服务。接下来，将`UserService`类导入`app.module.ts`并将其包含在providers数组中：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Within the service class, write a method that makes a `get` request to fetch
    all users and their details from the API:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务类中，编写一个发出 `get` 请求以从 API 获取所有用户及其详细信息的方法：
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Write the method that makes a `post` request and creates a new todo:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个发出 `post` 请求并创建新待办事项的方法：
- en: '[PRE43]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Write another method that makes a `delete` request. This will enable us to
    delete a user from the collection of users:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 编写另一个发出 `delete` 请求的方法。这将使我们能够从用户集合中删除用户：
- en: '[PRE44]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, write a method that makes a `put` request. This method will enable
    us to modify the state of a user:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编写一个发出 `put` 请求的方法。这个方法将使我们能够修改用户的状态：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Update `app.module.ts` to import `HttpModule` and `FormsModule` and include
    them to the imports array:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `app.module.ts` 以导入 `HttpModule` 和 `FormsModule` 并将它们包含到导入数组中：
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The next thing to do is to teach the user component to use the service:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是教会用户组件使用服务：
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now, we can make use of the methods from the user service in the user component.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在用户组件中使用用户服务的方法。
- en: Updating user.component.ts
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 user.component.ts
- en: 'Within the `ngOnInit` method, make use of the user service to `get` all users
    from the API:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ngOnInit` 方法中，使用用户服务从 API 中获取所有用户：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Below the `ngOnInit` method, write a method that makes use of the `post` method
    in the user service to add new users:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ngOnInit` 方法下面，编写一个使用用户服务中的 `post` 方法添加新用户的方法：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s make use of the `delete` method from the user service to enable us to delete
    users:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用用户服务中的 `delete` 方法来使我们能够删除用户：
- en: '[PRE50]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally, we''ll make use of user service to make `put` requests to the API:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用用户服务向 API 发出 `put` 请求：
- en: '[PRE51]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We have all our communication with the API, service, and component. We have
    to update `user.component.html` in order to illustrate all that we have done in
    the browser.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与 API、服务和组件之间的所有通信都已经完成。我们必须更新 `user.component.html`，以便在浏览器中说明我们所做的一切。
- en: 'We''ll be making use of bootstrap for styling. So, we have to import the bootstrap
    CDN in `index.html`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 bootstrap 进行样式设置。因此，我们必须在 `index.html` 中导入 bootstrap CDN：
- en: '[PRE52]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Updating user.component.html
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 user.component.html
- en: 'Here is the component template for the user component:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用户组件的组件模板：
- en: '[PRE53]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'A lot is going on in the preceding code, let''s drill down into the code block:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中发生了很多事情，让我们深入了解代码块：
- en: We have a form which takes in three inputs and a submit button which triggers
    the `addUser()` method when clicked
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个表单，其中包含三个输入和一个提交按钮，当点击时会触发 `addUser()` 方法
- en: There is a delete button which triggers the `delete` method when it is clicked
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个删除按钮，当点击时会触发 `delete` 方法
- en: There is also an update status input element that triggers the `updateUser()`
    method when clicked
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个更新状态输入元素，当点击时会触发 `updateUser()` 方法
- en: We created a table in which our users' details will be displayed utilizing Angular's
    `*ngFor` directive and Angular's interpolation binding syntax, `{{}}`
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个表格，其中将使用 Angular 的 `*ngFor` 指令和 Angular 的插值绑定语法 `{{}}` 来显示用户的详细信息
- en: 'Some extra styling will be added to the project. Go to `user.component.css`
    and add the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 项目将添加一些额外的样式。转到 `user.component.css` 并添加以下内容：
- en: '[PRE54]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Running the app
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: Open up two command line interfaces/terminals. In both of them, navigate to
    the project directory. Run node `server.js` to start the server in one. Run `ng
    serve` in the other to serve the Angular 2 app.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 打开两个命令行界面/终端。在两者中都导航到项目目录。在其中一个中运行 `node server.js` 启动服务器。在另一个中运行 `ng serve`
    来提供 Angular 2 应用程序。
- en: Open up the browser and go to `localhost:4200`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并转到 `localhost:4200`。
- en: In this simple users app, we can perform all CRUD operations. We can create
    new users, get users, delete users, and update the state of users.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的用户应用程序中，我们可以执行所有的 CRUD 操作。我们可以创建新用户，获取用户，删除用户，并更新用户的状态。
- en: By default, a newly added user's active state is false. That can be changed
    by clicking on the change state button.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新添加用户的活动状态为false。可以通过点击更改状态按钮来更改。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Working with actual data from a database or from an API is quite important when
    developing any application. HTTP along with observables and Rxjs made it possible
    to work with the desired set of data from an API, and also perform all CRUD operations.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何应用程序时，使用来自数据库或API的实际数据非常重要。HTTP与可观察对象和Rxjs使得可以从API中使用所需的数据集，并执行所有CRUD操作。
- en: In the next chapter, we'll be taking a look at writing unit tests and debugging.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下编写单元测试和调试。
