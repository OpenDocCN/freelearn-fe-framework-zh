- en: Chapter 11. React Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to use Animation add-on and CSS transition.
    We have also explored different events and studied how to easily enhance our application
    in order to create stunning effects using animations.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at various tools in the React ecosystem, which
    are useful in the whole lifetime of an application—the development, debugging,
    and build tools. We will see how these tools make developing React applications
    a beautiful experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will study the following tools in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Babel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot reloading using Webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mike and Shawn had some free time before starting their next project. They decided
    to spend this time in learning more about various tools that they had used so
    far in their React projects for development, testing, and bundling the apps.
  prefs: []
  type: TYPE_NORMAL
- en: Development tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, today I would like to discuss about the tools that we have used until
    now while building our React apps today. React is a very small library, which
    does one thing right—rendering the UI. However, we had to use a lot of other tools
    with React throughout our journey until now. Today is the day to discuss everything
    about them." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Awesome, Mike! I am ready as always. Let''s get rolling." exclaimed Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Babel for ES6 and JSX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Shawn, we have used ES6 or ES2015 code since the beginning. We are also very
    bullish about using JSX. Sometimes, we have also used ES7 code, such as the function
    `bind` operator in our latest Cats Pinterest project."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"Yes, Mike. I loved the conciseness of these new features." said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"However, current browsers still don''t understand the ES6 or ES7 code that
    we have written. We use Babel to transform this code in ES5 JavaScript, which
    current browsers can run. It allows us to use the JavaScript syntax from the future
    today. Babel also has JSX support, therefore, it is very handy to use with React."
    explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Babel is very modular and comes with a plugin architecture. It has plugins
    for different ES6/ES7 syntaxes. Generally, we want to use React specific and ES6
    specific plugins. Babel groups such common plugins into something called **presets**.
    Babel has various plugins for ES6, React, as well as different stages of future
    language proposals."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We are mostly interested in using the ES2015 and React presets, which comprise
    of all the plugins related to ES6 and React. Occasionally, we do need some of
    the advanced features, such as the ES7 function bind syntax, so we need to configure
    it separately. In such cases, we use the individual plugins directly, as we used
    `transform-function-bind` for the function `bind` syntax."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of these presets and plugins come in their own npm packages. Babel is built
    this way—a small core and a giant plugin architecture with a lot of configuration
    options around it.
  prefs: []
  type: TYPE_NORMAL
- en: '"Therefore, we will have to install all of these packages separately."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"Got it. I have also seen some Babel related configuration in our Webpack configuration."
    said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. Though Babel allows us to convert files from the command line, we do
    not want to convert each and every file manually. Therefore, we have configured
    Webpack in such a way that it will convert our ES6/ES7 code using Babel before
    starting the app. It uses babel-loader package. Let''s discuss it in detail when
    we discuss webpack later today," said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are using Babel version 6 throughout this book. Check out more details about
    Babel at [http://babeljs.io/](http://babeljs.io/).
  prefs: []
  type: TYPE_NORMAL
- en: ESLint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Shawn, you have seen my commits related to linting in our projects, right?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. I used to get annoyed at these small little changes initially, but then
    I got used to them." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"**Linting** is very important, especially if we want to maintain the code
    quality across different projects. Fortunately, linting React projects is very
    easy with ESLint. It also supports ES6 syntax and JSX so that we can also lint
    our next generation code." informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We are using eslint-plugin-react and babel-eslint npm packages to lint ES6
    and React code. We have also globally installed the ESLint npm package."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check [http://eslint.org/docs/user-guide/getting-started](http://eslint.org/docs/user-guide/getting-started)
    for details about getting started with ESLint.
  prefs: []
  type: TYPE_NORMAL
- en: '"Mike, I also see that you have added lint command under scripts in `package.json`."
    added Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"Yes, Shawn. It is common to miss a few things here and there in a big project.
    Having a command to lint the project helps us in finding such things. We need
    the eslint, eslint-babel, and eslint-plugin-react packages to use ESLint within
    our code. Therefore, we need to install it before trying to run this command."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"We are also using some standard configuration options for ESLint. These options
    are present in the `.eslintrc` file of our project. We define the rules that we
    want to check with ESLint in this file. We also enable ES6 feature that we want
    ESLint to whitelist. Otherwise, it will raise linting errors for such code as
    it natively only supports ES5\. We also specify that ESLint should use babel-eslint
    as parser so that ES6 code will be parsed by ESLint properly."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"We are all set now. Go ahead and run it on our Pinterest project and fix remaining
    linting issues." informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"Ah, it complained about a missing space. Let me fix it quickly."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Perfect, Shawn!"'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ESLint can also be integrated with your text editor. Check [http://eslint.org/docs/user-guide/integrations.html](http://eslint.org/docs/user-guide/integrations.html)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: React Dev Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, React is excellent at improving the developer experience. They have
    released react-dev-tools to help us in debugging our apps. React developer tools
    are Chrome and Firefox add-ons, which make debugging React apps fun."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Once you install the add-on, you will then see a **React** tab in the browser
    console while running a React app. An interesting thing is that this tab is also
    shown for websites that use React in production too, for example, Facebook."'
  prefs: []
  type: TYPE_NORMAL
- en: '![React Dev Tools](img/4730_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Once we click on the **React** tab, it shows all the components in our app."'
  prefs: []
  type: TYPE_NORMAL
- en: '![React Dev Tools](img/4730_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Shawn, as you may have noticed, we can see all our components on the left-hand
    side pane. On the right-hand side, we see props and state of the component selected
    in the left pane. Therefore, we can inspect UI state at any point of time. We
    don''t need to add `console.log` statements to see what is happening with our
    components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"More than this, it provides us with a temporary variable—**$r**. The selected
    component from the console is available as **$r** in the console."'
  prefs: []
  type: TYPE_NORMAL
- en: '![React Dev Tools](img/4730_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Let''s try to see what **$r** gives us in the console so that we can debug
    the selected component directly in console."'
  prefs: []
  type: TYPE_NORMAL
- en: '![React Dev Tools](img/4730_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"It also allows us to scroll to the selected component in the UI to see the
    actual source code of the component. It can also show all components of a specific
    type."'
  prefs: []
  type: TYPE_NORMAL
- en: '![React Dev Tools](img/4730_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"So Shawn, what do you think about these dev tools?" asked Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I am very impressed. This is really nice! I will use them in each and every
    React project from now onwards." Shawn was very excited on seeing the power of
    React dev tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check [https://github.com/facebook/react-devtools](https://github.com/facebook/react-devtools)
    for more details on React dev tools.
  prefs: []
  type: TYPE_NORMAL
- en: Build tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, the build system is arguably the first thing that we should care about
    when creating a new web application. It is not only a tool for running scripts,
    but in the JavaScript world, it usually shapes the basic structure of our application."'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following responsibilities should be performed by a build system:'
  prefs: []
  type: TYPE_NORMAL
- en: External dependencies as well internal dependencies should be managed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should run compilers/preprocessors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should optimize assets for production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development web server, browser reloader, and file watcher should be run
    by it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"There are a lot of different tools such as Grunt, Gulp, and Browserify, which
    can be used as part of our build system. Each tool has its own advantages and
    disadvantages. However, we have decided to go with Webpack in our projects." said
    Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: What is Webpack?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Webpack is a module bundler. It bundles our JavaScript with its dependencies
    into a single package."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Unlike Browserify and other tools, Webpack also bundles other assets such
    as CSS, fonts, and images. It supports CommonJS module syntax, which is very common
    in node.js and npm packages. Therefore, it makes things easier as we don''t need
    to use another package managers for frontend assets. We can just use npm and share
    the dependencies between server-side code and front-end code. It is also smart
    enough to load dependencies in the correct order so that we don''t need to worry
    about ordering explicit and implicit dependencies."'
  prefs: []
  type: TYPE_NORMAL
- en: '"As a result, Webpack alone can perform the task of Browserify as well as other
    build tools such as Grunt and Gulp."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section will not cover every aspect of Webpack. However, we will discuss
    how to use Webpack effectively with React.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '"Shawn, in a typical React app, we use ES6 code and JSX in our components.
    We also use frontend assets within the same component to make it more portable.
    Therefore, our Webpack configuration must handle the all these aspects correctly."
    explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s take an example of our Pinterest app and see how Webpack is configured
    to run it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"First of all, we need to inform Webpack about the entry point of our app.
    In our case, it is the `index.js` file, which mounts the `App` component in the
    DOM."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"Therefore, we mention the entry point as `src/index.js` in the `webpack.config.js`.
    file."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '"Secondly, we need to inform Webpack where to put the generated bundled code
    from our source. This is done by adding a config for output."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"The output option tells Webpack to write the complied files in the current
    directory''s dist folder. The name of the file will be `bundle.js`. We can see
    the output of `bundle.js` by running the `webpack` command."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"This will create a `dist/bundle.js` file with all the compiled code."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The `publicPath` specifies the public URL address of the output files, when
    referenced in a browser. This is the path that we use in our `index.html` file,
    which will be served by the web server to the users."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Loaders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"After this, we have to specify different loaders to transform our JSX, ES6
    code, and other assets properly. Loaders are transformations that are applied
    to a resource file of your app. They are functions (running in node.js) that take
    the source of a resource file as the parameter and return the new source. We use
    `babel-loader` for our ES6 and JSX code."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"We have installed the `babel-loader` package via npm and included it in `package.json`.
    After this, we have specified it in our Webpack configuration. The test option
    matches the files with the given regex. The given loader parses these files. Therefore,
    `babel-loader` will compile `.jsx` and `.js` files from our source files in the
    `src` directory specified by the `include` option. We also specify that `babel-loader`
    should use es2015 and react presets as well as function-bind transformer plugin
    so that Babel will be able to parse all of our code properly."'
  prefs: []
  type: TYPE_NORMAL
- en: '"For other type of assets such as CSS, fonts, and images, we use their own
    loaders."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"All of these loaders come in their own npm packages. We have to install npm
    packages for `style-loader`, `css-loader`, `url-loader`, and `file-loader` and
    update `package.json`."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check [https://webpack.github.io/docs/using-loaders.html](https://webpack.github.io/docs/using-loaders.html)
    for more details about using and configuring loaders.
  prefs: []
  type: TYPE_NORMAL
- en: Hot module replacement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '"Shawn, one of the coolest features of Webpack is **Hot Module Replacement**
    (**HMR**). This means that whenever we modify a component and save the file, Webpack
    will replace the module on the page without reloading the browser and losing component
    state." informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Wow! That sounds very impressive." exclaimed Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"To get hot reloading working, we have to use the excellent react-hot-loader
    package and webpack-dev-server. The webpack-dev-server package saves us from running
    Webpack repeatedly for every file change before starting the server. It will run
    the app for us using the `config` options provided in `webpack.config.js`. The
    key point in setting up webpack-dev-server is configuring it for hot reloading.
    It can be done by adding a `hot: true config` option."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"This will make sure that webpack-dev-server will start on localhost port `9000`,
    with hot reloading enabled. It will also use all the configuration that we defined
    in `webpack.config.js`." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will have to modify our `package.json` to run the `server.js` script."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"This will make sure that the `npm start` command will run the `webpack-dev-server`.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We also have to make some changes in our Webpack configuration in order to
    make hot reloading work. We have to configure the entry option to include dev
    server and hot reloading server."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"Next up, we need to inform Webpack to use hot-loader with other loaders that
    we have already added."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, the hot module replacement plugin from Webpack has to be included
    in the plugins section of the config."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"The final Webpack configuration looks like this"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"Now if we start the app using `npm start`, then it will use hot-reloader with
    webpack-dev-server. Shawn, try changing some code and check whether the code gets
    updated in the browser without refreshing the page. Magic!!" explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Great, Mike. Yeah, it really works. All hail Webpack and hot reloading!"'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about various tools from the React ecosystem—development,
    testing, and production tools that we have used in various stages of our app development.
    We discussed Babel, the JavaScript transpiler, to convert our next generation
    JavaScript code to ES5\. We also saw how to use ESLint and React dev tools that
    make React development easy. In the end, we saw how Webpack can be used with React
    with its powerful loaders and configuration options. We saw how these tools can
    make developing React apps a beautiful experience.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to dive deep into Flux as an architecture.
    We have seen how problems arise during data sharing across components. We will
    see how to overcome them using Flux.
  prefs: []
  type: TYPE_NORMAL
