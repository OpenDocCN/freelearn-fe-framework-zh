- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting Your First Vue Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the key concepts and benefits of **Vue.js**
    (**Vue**), how to set up the project architecture using the terminal (or command
    line), and how to create a simple Vue component with local data following the
    component fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue as a framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Vite-powered Vue application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring `data` properties as a local state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing components with `<``script setup>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Vue directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling two-way binding using `v-model`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding data iteration with `v-for`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding component lifecycle hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding CSS modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to describe the fundamentals of
    Vue lifecycle hooks and expressions and use various styling approaches and HTML
    syntax flavors to control the HTML template competently.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue as a framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers in the industry must resolve frontend development problems quickly
    with minimal impact on existing workflows or backend architecture. In many cases,
    developers tend to overlook the UI until the end of a project, which can happen
    because of a lack of resources, ever-evolving product requirements, or the existing
    attitude that the frontend is the easy bit.
  prefs: []
  type: TYPE_NORMAL
- en: However, companies such as Apple and Google have proven that thinking through
    the design of the frontend is key to a solid product or platform that will excite
    and engage users, leading to a higher return on investment and a more successful
    business.
  prefs: []
  type: TYPE_NORMAL
- en: If you know Vue, you may have also come across other frontend frameworks that,
    at face value, solve the same problems, such as Ember, Angular, or React. At a
    surface level, they attempt to make reactive frontend development more reliable
    and introduce patterns that make it easier. However, there are significant differences
    in how a Vue project might play out compared to an Angular or React project. Let’s
    investigate them.
  prefs: []
  type: TYPE_NORMAL
- en: Angular versus Vue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular is a **Model-View-ViewModel** (**MVVM**) framework built by Google and
    has built-in support for TypeScript. The Angular ecosystem includes **Ahead-of-Time**
    (**AoT**) rendering, a router, and a CLI tool. However, it fails to deliver a
    simplified system for global state management; developers would need to learn
    how to use Flux or adopt NgRx.
  prefs: []
  type: TYPE_NORMAL
- en: Vue takes Angular’s core robustness and provides a better development experience
    by removing the restriction of an enforced code style for developers. Vue also
    simplifies common Angular patterns, such as HTML directives, and eliminates a
    variety of Angular’s project structures, such as injectables, components, pipes,
    modules, and so on. From Vue 3.0 onward, it provides excellent support for TypeScript
    and typing without the drawbacks of Angular-enforced coding styles.
  prefs: []
  type: TYPE_NORMAL
- en: Vue is more flexible, developer-friendly, efficient, and straightforward to
    set up and learn to use than Angular in many cases.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s look at how Vue and React differ.
  prefs: []
  type: TYPE_NORMAL
- en: React versus Vue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First released in 2013 and backed by Meta (previously known as Facebook), React
    rapidly gained popularity in the developer community. React introduces the **JSX
    pattern** to write HTML syntax directly with JavaScript. With JSX, React increases
    the amount that new developers are required to learn about both JavaScript and
    component-based architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both React and Vue share the same component-driven development approach, allowing
    developers to build applications in a modular way. Each component contains its
    functionalities and lifecycle. Vue takes these core concepts of modular coding
    and offers flexibility to developers in choosing which approach to use to write
    their components: JSX or the traditional style, in which HTML, CSS, and JavaScript
    are separated.'
  prefs: []
  type: TYPE_NORMAL
- en: Vue uses the **Single-File Component** (**SFC**) approach to leverage this modular
    structure into a single file while keeping the separation readable and understandable
    for developers.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of using Vue for your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vue has a gentler learning curve and a vibrant ecosystem. This gentle learning
    curve helps reduce overhead and cost for any team onboarding developers to a new
    Vue project.
  prefs: []
  type: TYPE_NORMAL
- en: 'One key benefit of Vue is its approachability for both new and veteran developers:'
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, developers can use a well-optimized and performant framework
    on which to build scalable, dynamic frontend applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SFC format pattern offers a modular and flexible blueprint that provides
    an enjoyable experience to developers. SFCs allow Vue to be genuinely versatile.
    You can implement basic functionalities and incrementally adopt pieces of a static
    site into Vue rather than overhaul your entire website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As powerful as Redux and NgRx, Vuex (and lately Pinia) proves to be an outstanding
    official global state management tool that is flexible enough to meet most development
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to its stable performance; well-defined tools such as Vue Router, Pinia,
    Vuex, and so on; and a supportive community, developers can save time and money
    by choosing Vue for their development stack.
  prefs: []
  type: TYPE_NORMAL
- en: The following section explores the essential Vue architecture before deep-diving
    into the SFC pattern and template syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Vue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn about the Vue architecture, we will start by importing the Vue package
    into our coding playground. One straightforward way is to import the Vue package
    through the official `index.html` file and adding a `<script>` tag to load the
    Vue CDN within the `<head>` section of the HTML template, as demonstrated in the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The browser will also load the Vue package using the CDN defined in the `script`
    tag when loading the page. Once completed, you can utilize the Vue functions and
    start writing Vue code.
  prefs: []
  type: TYPE_NORMAL
- en: But first, let’s look at the Vue instance.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Vue instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, each Vue application consists of *only one* root Vue instance,
    which can be created using the `Vue.createApp` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `Vue` class constructor accepts an `options` object for the configurations
    and behavior of components. We call this approach Options API and we can use it
    for all corresponding Vue components. However, all of them are considered nested
    Vue instances, with their own options and properties.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`vm` is a term commonly used to refer to a `vm` helps you to keep track of
    your Vue instance in a block of code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Vue engine to render the application instance, in our `index.html`
    file, we declare an `<div>` element within the `<body>` tag using a unique class
    name, ID, or data attribute as the main entry point for the application accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To render the Vue application in the browser, we need to trigger `vm.mount()`
    to mount the root component to the targeted HTML element using a unique selector.
    In this example, it is an `id` with a value of `vue-app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, you bind the `<div>` element with `id="vue-app"` to the new Vue instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s define text with a value of `"Start using Vue.js today!"` and add
    it as a property of the `return` value for the `data` method in the application
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code example, `data` is a function that returns an Object instance
    containing the local state (or local variables) of a component. We will discuss
    this further in an upcoming section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To render the content of `text` to the DOM, we use Vue template syntax, represented
    by double curly braces (`{{}}`) wrapped around the reactive content. In this case,
    we use `{{ text }}`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The Vue engine will replace the data property labeled `text` and the curly brace
    placeholder with the `Start using Vue.js` `today!` string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Displaying “Start using Vue.js today!” using a local data property](img/B18645_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Displaying “Start using Vue.js today!” using a local data property
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `<head>` tag, we can also use the DOM API to construct a Vue application
    instance and bound it to our target element (with the ID selector as `#vue-app`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The output is the same for both approaches. However, we strongly recommend *not*
    using `DOMContentLoaded`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While working with a CDN is very portable, we recommend using package managers
    as the installation method for Vue. From Vue 3 and above, Vue projects use Vite
    (or Vite.js) to initialize and bundle the code. You can access it here: [https://vuejs.org/guide/quick-start.html#creating-a-vue-application](https://vuejs.org/guide/quick-start.html#creating-a-vue-application).'
  prefs: []
  type: TYPE_NORMAL
- en: Using a bundling management tool is very helpful for managing other third-party
    libraries and building an optimized code package for production. In the next section,
    we will explore a package-controlled example.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Vite-powered Vue application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Vue project is structured similarly to a lot of modern node-based apps and
    contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A `package.json` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `node_modules` folder in the root of your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various other configuration files are usually contained at the root level, such
    as `vite.config.js` and `.eslintrc.js`, since they will generally have an effect
    across your whole project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot displays a default Vue app folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Default Vue application folder structure](img/B18645_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Default Vue application folder structure
  prefs: []
  type: TYPE_NORMAL
- en: By default, there is an `index.html` file at the root level that serves as a
    placeholder for loading the Vue application. You can modify this file to include
    `header` and `footer` scripts, such as Google Fonts or third-party JavaScript
    libraries that are not included as a part of your bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vue project structure follows a pattern where you manage most of your source
    code within the `/src` directory. You can subdivide your Vue files into various
    folders, for example, using a `components` folder to store reusable Vue components.
    By default, Vite will create `assets` and `components` folders to code-split the
    default files. For beginners, it is good to follow this pattern until you get
    more comfortable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Default Vue application src folder structure](img/B18645_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Default Vue application src folder structure
  prefs: []
  type: TYPE_NORMAL
- en: 'The `public` folder is a special directory containing files that need to be
    transferred directly to the output location. The following screenshot displays
    how this folder will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Default Vue application public folder](img/B18645_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Default Vue application public folder
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should be somewhat familiar with how a Vue project structure
    looks. Next, we discuss Vue’s unique pattern – the SFC architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Vue’s SFC architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Components are the building blocks of most modern frameworks. In general, splitting
    your code into component-specific chunks ensures code readability and facilitates
    the **Don’t Repeat Yourself** (**DRY**) principle. Vue’s SFC pattern follows this
    approach closely.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SFC architecture centralizes the responsibility of both appearance and
    behavior into a single file, thus simplifying the architecture of your project.
    You now can refer to your HTML, CSS, and JavaScript logic without switching files.
    Your default `.vue` file structure will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.5 – Default .\uFEFF\uFEFFvue file structure](img/B18645_01_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Default .vue file structure
  prefs: []
  type: TYPE_NORMAL
- en: 'A general good practice is to ensure your `components` file doesn’t contain
    more than 500 lines of code. If you encounter this situation, it’s recommended
    to split them into smaller reusable components. For example, in the header of
    your application, you may have a logo element that is reused on other pages. You
    would create a component such as `logo.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In `header.vue`, you import the `logo` component into the `script` section
    and then include it as a nested component of the `header` component. You can achieve
    this by declaring it as a property of the `components` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `template` section, you can use the logo as a normal HTML element, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The output will be a header with the logo image rendered – and you can reuse
    the `logo` component in any other component when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Very soon, you will have lots of these semantically structured files, which
    use small chunks of a reusable syntax that your team can implement across various
    application areas.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, you will practice creating your first Vue component and
    displaying it in another component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.01 – building your first component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to build our first component, `Exercise1.01`, inside of a Vue project
    and import it to use it in the `App.vue` component using ES6 module syntax.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.01](https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.01).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Your app will hot-reload when you save new changes, so you can see them instantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.01`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to `https://localhost:3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `src/App.vue` file, delete everything in that file, and save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your browser, everything should be a blank, clean state to start working
    from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The three primary components that make up a single-file component are the `<template>`,
    `<script>`, and `<style>` blocks. Add the following code blocks as our scaffolding
    for a Vue component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another file in the `components` folder called `Exercise1-01.vue` and
    repeat the same step for scaffolding the Vue component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within our `Exercise1-01.vue` component, compose a set of `<div>` tags, with
    an `<h1>` element and a heading inside the `<``template>` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `<style>` block, add some styling as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import our component into `App.vue` by using the ES6 `import` method and defining
    the component inside the `components` object in the `<script>` block. We can now
    reference this component inside the HTML by using its name in camelCase or kebab-case
    (both will work):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you press *Ctrl* + *S* (or *Cmd* + *S* on macOS), `https://localhost:3000`
    should reload and look amazing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – localhost output for Exercise 1.01](img/B18645_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – localhost output for Exercise 1.01
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we saw how to structure Vue components using template tags,
    and scaffold basic Vue components using Vetur. We also created a new Vue component
    and reuse it in `App.vue` using ES6 syntax and property field `components`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will gain an understanding of how to define the local
    state data of a component using `data` properties.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring data properties as a local state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most used terms and reactive elements used when constructing Vue
    components is `data` properties. These manifest themselves within the `data()`
    function of a Vue instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `data()` function to create a local data object to essentially
    store any information you want to use within your Vue templates. This local object
    is bound to the component and we call it the local state data of the component.
    When any property of this local object is updated or changed, it will reactively
    update in the corresponding template.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have defined our local data, we need to bind it to the `template` section
    to display its values in the UI, which is called **data interpolation**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Interpolation** is the insertion of something of a different nature into
    something else. In the Vue context, this is where you would use *mustache* syntax
    (double curly braces) to define an area in which you can inject data into a component’s
    HTML template.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `data` property of `red` is bound to Vue.js reactive data and will update
    during runtime, depending on state changes between the UI and its data.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we should look at how to define and bind local data in the most
    classical Vue way. With Vue 3.0, we enjoy a shorter and simpler approach to writing
    and importing components. Let’s explore it next.
  prefs: []
  type: TYPE_NORMAL
- en: Writing components with script setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from Vue 3.0, Vue introduces a new syntactic sugar `setup` attribute
    for the `<script>` tag. This attribute allows you to write code using Composition
    API (which we will discuss further in [*Chapter 5*](B18645_05.xhtml#_idTextAnchor193),
    *The Composition API*) in SFCs and shorten the amount of code needed for writing
    simple components.
  prefs: []
  type: TYPE_NORMAL
- en: The code block residing within the `<script setup>` tag will then be compiled
    into a `render()` function before being deployed to the browser, providing better
    runtime performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using this syntax, we take the following example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we replace `<script>` with `<script setup>`, and remove all the code
    blocks of `export default…`. The example code now becomes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'In `<template>`, we use `logo` as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'To define and use local data, instead of using `data()`, we can declare regular
    variables as local data and functions as local methods for that component directly.
    For example, to declare and render a local data property of `color`, we use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code outputs the same result as the example in the previous section
    –`red`.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned at the beginning of this section, `<script setup>` is the most
    useful when you need to use Composition API within SFCs. Still, we can always
    take advantage of its simplicity for simple components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: From this point onward, we will combine both approaches and use `<script setup>`
    whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, we will go into more detail about how to use interpolation
    and data.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.02 – interpolation with conditionals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you want to output data into your template or make elements on a page reactive,
    interpolate data into the template by using curly braces. Vue can understand and
    replace that placeholder with data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.02):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.02`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-02.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `Exercise1-02.vue` component, let’s add data within the `<script
    setup>` tags by adding a function called `data()`, and return a key called `title`
    with your heading string as the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reference `title` by replacing your `<h1>` text with the interpolated value
    of `{{` `title }}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you save this document, the data title will now appear inside your `h1`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Vue, interpolation will resolve any JavaScript that’s inside curly braces.
    For example, you can transform the text inside your curly braces using the `toUpperCase()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to [https://localhost](https://localhost)`:3000`. You should see an output
    like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Display of an uppercase title](img/B18645_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Display of an uppercase title
  prefs: []
  type: TYPE_NORMAL
- en: 'Interpolation can also handle conditional logic. Inside the data object, add
    a Boolean key-value pair, `isUppercase: false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Exercise 1.02 output after including the inline conditional
    statement](img/B18645_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Exercise 1.02 output after including the inline conditional statement
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this condition to the curly braces and when you save, you should see the
    title in sentence case. Play around with this value by changing `isUppercase`
    to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot displays the final output generated upon running the
    preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Displaying the uppercase title](img/B18645_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – Displaying the uppercase title
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s replace `<script>` with `<script setup>` and move all the local
    data declared within the `data()` function to its own variable names respectively,
    such as `title` and `isUpperCase`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output should remain the same as in *Figure 1**.9*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, we were able to apply inline conditions within the interpolated
    tags (`{{}}`) by using a Boolean variable. The feature allows us to modify what
    data to display without overly complicated situations, which can be helpful in
    certain use cases. We also learned how to write a more concise version of the
    component using `<script setup>` in the end.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are now familiar with using interpolation to bind local data, we will
    move on to our next topic – how to attach data and methods to HTML element events
    and attributes using Vue attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All Vue-based directives start with a `v-*` prefix as a Vue-specific attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-text`: The `v-text` directive has the same reactivity as with interpolation.
    Interpolation with `{{ }}` is more performant than the `v-text` directive. However,
    you may find yourself in situations where you have pre-rendered text from a server
    and want to override it once your Vue application has finished loading. For example,
    you can pre-define a static placeholder text while waiting for the Vue engine
    to eventually replace it with the dynamic value received from `v-text`, as shown
    in the following code block:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`v-once`: When used, it indicates the starting point of static content. The
    Vue engine will render the component with this attribute and its children exactly
    once. It also ignores all data updates for this component or element after the
    initial render. This attribute is handy for scenarios with no reactivity needed
    for certain parts. You can combine `v-once` with `v-text`, interpolation, and
    any Vue directive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`V-html`: Vue will parse the value passed to this directive and render your
    text data as a valid HTML code into the target element. We don’t recommend using
    this directive, especially on the client side, due to its performance impact and
    the potential security leak. The `script` tag can be embedded and triggered using
    this directive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-bind`: This directive is one of the most popular Vue features. You can use
    this directive to enable one-way binding for a data variable or an expression
    to an HTML attribute, as shown in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code demonstrates how to bind the `logo` data variable to image’s
    `src`. The `img` component now takes the source value from the `logo` variable
    and renders the image accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use it to pass a local data variable as props to another component.
    A shorter way is using the `:attr` syntax instead of `v-bind:attr`. Take the preceding
    example, for instance. We can rewrite the template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '`v-if`: This is a powerful directive you can use to conditionally control how
    elements render inside a component. This directive operates like the `if…else`
    and `if…else if…` conditions. It comes with supporting directives, such as `v-else`,
    standing for the `else` case, and `v-else-if`, standing for the `else if` case.
    For example, we want to render different text when `count` is `2`, `4`, and `6`.
    The following code will demonstrate how to do so:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`v-show`: You can also control the visible state of HTML elements by using
    `v-show`. Unlike `v-if`, with `v-show`, the Vue engine still mounts the element
    to the DOM tree but hides it using the `display: none` CSS style. You can still
    see the content of the hidden element visible in the DOM tree upon inspecting
    it, but it is not visible on the UI to end users. This directive does not work
    with `v-else` or `v-else-if`. If `v-show` results in a `true` Boolean, it will
    leave the DOM element as is. If it resolves as `false`, it will apply the `display:
    none` style to the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-for`: We use the `v-for` directive to accomplish the goal of list rendering
    based on a data source. The data source is an iterative data collection, such
    as an `array` or `object`. We will dive deeper into different use cases for this
    directive in a separate section within this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have gone over the most common directives in Vue. Let’s review and experiment
    with how to use these directives with the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.03 – exploring basic directives (v-text, v-once, v-html, v-bind,
    v-if, v-show)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More complicated components will use multiple directives to achieve the desired
    outcome. In this exercise, we will construct a component that uses several directives
    to bind, manipulate, and output data to a template view.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.03).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start the exercise by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.03`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using `code .` command within the project
    directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-03.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-03.vue`, compose the following code to display the `text`
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `{{}}` interpolation with the `v-text` attribute. The output should
    not change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Figure 1**.10* displays the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Same output for v-text and the interpolation method](img/B18645_01_10_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Same output for v-text and the interpolation method
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `v-once` directive to the same element. This will force this DOM element
    to only load the `v-text` data once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Underneath the `h1` element, include a new `h2` element that uses the `v-html`
    attribute. Add a new local data called `html` that contains a string with HTML
    formatting in it, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the preceding code will generate an output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Rendering HTML elements from a string using v-html](img/B18645_01_11_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Rendering HTML elements from a string using v-html
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new local `link` object that contains a bunch of information such as
    the URL, target, title, and tab index. Inside the template, add a new anchor HTML
    element and bind the `link` object to the HTML element using the `v-bind` short
    syntax – for example, `:href="link.url"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot displays the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Output on binding the reactive data from the Vue instance to
    any HTML attribute](img/B18645_01_12_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Output on binding the reactive data from the Vue instance to any
    HTML attribute
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply `v-if="false"` to the `h1` element, `v-else-if="false"` to `h2`, and
    `v-else` to the `a` tag like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should only see the `<a>` tag on the page since we have set the main conditional
    statements to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `v-else` condition will display the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – false v-if statements hiding the whole HTML element from the
    DOM](img/B18645_01_13_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – false v-if statements hiding the whole HTML element from the DOM
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the template to use `v-show` instead of the `v-if` statements, remove
    `v-else` from the `<a>` element, and change the value of `v-show` in `h1` to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Changing v-show to true will display the main directive text](img/B18645_01_14_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Changing v-show to true will display the main directive text
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open the `Elements` tab of your browser Devtools, you should be able
    to observe that the `h2` display state is set to `none` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.15 \uFEFF– h2 has “display: none” for the false condition](img/B18645_01_15_.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.15 – h2 has “display: none” for the false condition'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned about the core Vue directives to control, bind,
    show, and hide HTML template elements without requiring any JavaScript outside
    of adding new data objects to your local state.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to achieve two-way binding with the help
    of Vue’s `v-model`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling two-way binding using v-model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue achieves two-way data binding by creating a dedicated directive that watches
    a data property within your Vue component. The `v-model` directive triggers data
    updates when the target data property is modified on the UI. This directive is
    usually useful for HTML form elements that need to both display the data and modify
    it reactively – for example, `input`, `textarea`, radio buttons, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can enable two-way binding by adding the `v-model` directive to the target
    element and binding it to our desired data props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: 'In *Figure 1**.16*, the output generated by running the preceding code will
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Output for the v-model example](img/B18645_01_16_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – Output for the v-model example
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Binding a huge amount of data using `v-model` can affect the performance of
    your application. Consider your UI and split the data into different Vue components
    or views. Vue data in the local state is not immutable and can be redefined anywhere
    in the template.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we are going to build a component using Vue’s two-way
    data binding and experiment with what it means to bind data in two ways.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.04 – experimenting with two-way binding using v-model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The context for this type of data model is usually forms or wherever you expect
    both input and output data. By the end of the exercise, we should be able to utilize
    the `v-model` attribute in the context of a form.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.04).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start the exercise by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise
    1.04` folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-04.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-04.vue`, start by composing an HTML `label` and bind an `input`
    element to the `name` data prop using `v-model` inside the `template` area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Complete the binding of the `text` input by returning a reactive data prop
    called `name` in the `<``script>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, compose a `label` and selectable HTML `select` tied to the `language`
    data prop using `v-model` inside of the `template` area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finish binding the `select` input by returning a reactive data prop called
    `language` in the `<``script>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Below the `form` fields, output the name and language inside of an unordered
    list structure (`<ul>` and `<li>`) by using curly braces such as `{{` `name }}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your code should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: 'Add styling inside the `<style>` tag at the bottom of the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `https://localhost:3000`. Your output should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Displaying the final form after the data is updated](img/B18645_01_17_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – Displaying the final form after the data is updated
  prefs: []
  type: TYPE_NORMAL
- en: When you update the data in the form, it should also update the overview area
    synchronously.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we used the `v-model` directive to bind the name and JavaScript-style
    drop-down selection to our local state’s data. When you modify the data, it will
    reactively update the DOM elements to which we output its value.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss our `v-for` directive further and different approaches
    to handling iterative data collection in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding data iteration with v-for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To loop over HTML elements in Vue, you use the `v-for` loop directive directly
    on the target elements. When Vue renders the component, it will iterate the target
    to use and render the data being parsed into the directive, with the same concept
    as a normal JavaScript `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Basic iteration using v-for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic syntax of `v-for` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: The preceding syntax example indicates that we are iterating through a list
    of `items`. We have access to a single `item` and its appearance `index` in the
    list in each iteration. `:key` is a required attribute, acting as the unique identifier
    of each iterating element rendered for the Vue engine to keep track.
  prefs: []
  type: TYPE_NORMAL
- en: When the `key` or `item` content changes, either programmatically or due to
    user interactions, the Vue engine triggers an update of the changed item on the
    UI. If you have multiple loops in one component, you should randomize the `key`
    attribute with extra characters or context-related strings to avoid `key` duplication
    conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: There are various use cases for this direction. One straightforward use case
    is to perform **anonymous loops**, in which you can define a number, *X*, as a
    symbolic list, and the loop will iterate that *X* times. This can be handy in
    situations in which you strictly control the number of iterations you want or
    render some placeholder content.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we see an anonymous loop in which the total iterations
    are `2` and we define `key` with a `loop-1` prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use template literals (with [PRE286] backticks) to compute strings
    without `+`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: The output of the preceding code in both approaches should look as follows
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Output of anonymous loops example](img/B18645_01_18_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – Output of anonymous loops example
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered how to handle basic loops by using `v-for`, we will
    utilize this function in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.05 – using v-for to iterate through an array of strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we are going to create an anonymous loop using Vue’s `v-for`
    directive. This will be familiar to those who have used `for` or `forEach` loops
    in JavaScript before.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.05](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.05).
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.05`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using `code .` command within the project
    directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-05.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-05.vue`, we compose a new component with an `<h1>` element
    to render the static title of `Looping through arrays`, and an `<ul>` element
    containing an empty `<``li>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `script` section, let’s add a `setup` attribute to the `script` tag.
    Then, let’s declare an array of `interests` containing some strings as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s go back to the `template` section and add the `v-for` directive
    on the `<li>` tag to iterate through `interests`. For each iteration, we get a
    combination of `(item, index)` from the interests, in which `item` outputs the
    string of the array, and `index` is the loop index. We map the `key` attribute
    to `index`, and display the value of `item` as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `https://localhost:3000`. The following output is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Output of iterating through an array of strings](img/B18645_01_19_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – Output of iterating through an array of strings
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned how to iterate through a specific array of strings,
    outputting the string value or index of an array. We also learned that the key
    attribute needs to be unique to avoid DOM conflicts and forces the DOM to re-render
    the component properly.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s experiment with iterating a collection of objects.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through an array of objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most practical scenarios, we work with data as objects, especially when
    iterating through an array of objects. Vue makes it easy to control various data
    states through its directive syntax. Like iterating through an array of strings,
    the directive syntax remains the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: 'The `item` you receive is now an Object, with various properties. You can bind
    each property using what you have learned so far to display its value. For example,
    assume in `item`, we will have `id`, `title`, `description`, and another array,
    `characteristics`, containing some strings. We can display the `title` and `description`
    information for each `item` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: Note here we don’t use an `index` as the `key`; instead, we use `id` as the
    unique identifier for `key`. It is considered a more secure approach to use `id`
    or any other unique identifier and we also don’t need to include `index` in the
    syntax in this case since we don’t use it.
  prefs: []
  type: TYPE_NORMAL
- en: Since `characteristics` is an array, we display its values by using a `v-for`
    directive again for `characteristics`. You don’t have to use the same name, `item`,
    that the syntax example shows. Instead, you can give it a different name depending
    on how you want your variable to be.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we use `str` for each element in the `item.characteristics`
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the `script` section, we define `items` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will output as shown in *Figure 1**.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.20 – Output of iterating through an \uFEFFarray of object items](img/B18645_01_20_.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – Output of iterating through an array of object items
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how to loop through collections of objects with `v-for` is essential
    and useful for handling data, especially with external data. In the next exercise,
    you will combine `v-for` and `v-if` to display a list of objects conditionally.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.06 – using v-for to iterate through an array of objects and using
    their properties in v-if conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will be controlling a Vue data array and iterating through
    the objects inside of it.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.06](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.06).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start the exercise by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.06`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-06.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-06.vue`, create an array of data objects, `interests`, as
    local data. Each interest contains a `title` string and a `favorites` array of
    strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `template`, we loop over `interests` and display the `title` for each `item`
    in the `interests` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `https://localhost:3000` and the output of the preceding code will be
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.21 – You should now see a list of titles in the browser](img/B18645_01_21_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – You should now see a list of titles in the browser
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a second `v-for` loop to iterate through a `favorites` list for
    each `item`. Note that we use different names – `fav` and `m` – for our nested
    loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Figure 1**.22* displays an output where looping is performed through an array
    of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Nested ordered list detailing your favorites](img/B18645_01_22_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Nested ordered list detailing your favorites
  prefs: []
  type: TYPE_NORMAL
- en: 'When inspecting the DOM elements (press *Ctrl* + *F12* or open `<ol>` element
    even though `favorites` is an empty array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Displaying empty DOM elements in your virtual DOM](img/B18645_01_23_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – Displaying empty DOM elements in your virtual DOM
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to hide that empty `<ol>` element after applying it. We will check
    whether the `favorites` array is empty (`length > 0`) and then display the ordered
    list HTML element. Let’s add a `v-if` directive to `<ol>` with the `item.favorites.length
    >` `0` condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This won’t make a difference to the visuals of your page, but when you inspect
    the DOM tree in your browser, you’ll notice an HTML comment in dev mode that allows
    you to understand where a `v-if` statement might be `false`. When you build for
    production, these HTML comments won’t be visible in your DOM tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24 – Output displaying no HTML comment in production builds](img/B18645_01_24_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – Output displaying no HTML comment in production builds
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we have iterated through complex arrays of objects, outputting
    the nested keys for these objects and controlling the view state of DOM elements
    based on length conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s experiment with iterating through a keyed collection (or Object).
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through a keyed collection (Object)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can generally use `v-for` for looping through any iterative data collection
    type. Object in JavaScript is a key-value data collection, and we can iterate
    through its properties using `v-for`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax example is like the previous syntax example for arrays of objects
    and strings, with a tiny difference. Here, we change the naming convention from
    `(item, index)` to `(value, key)`, in which `key` is the object’s property, and
    `value` is that `key` property’s value. Vue also exposes one more parameter –
    `index` – to indicate that property’s appearance index in the target object. Thus,
    the syntax now becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: Here, `obj` is our target object to iterate.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, assume we have the following object named `course`, which contains
    a title, a description, and the name of the lecturer(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: 'In our template, we iterate through the `course`’s properties and output their
    value in the `<index>.< key > : <value>` format as shown in the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in *Figure 1**.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Iterating and displaying values of the course’s properties](img/B18645_01_25_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.25 – Iterating and displaying values of the course’s properties
  prefs: []
  type: TYPE_NORMAL
- en: Looping through the properties of an object is also a joint development practice.
    It is the same concept as winding through any keyed collection type, such as a
    hash-map (mapping according to key), lookup dictionary (it is also an object),
    and so on. Since the syntax stays consistent between both array and object iteration,
    it helps reduce the need for refactoring or data conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will practice how to write basic looping for Object properties.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.07 – using v-for to loop through the properties of Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will be controlling a Vue data object and iterating through
    the properties inside of it.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.07](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.07).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start the exercise by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.07`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-07.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-07.vue`, let’s compose `information` for the local data within
    `<script setup>` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `<template>` section, we will loop through `information` and display
    the values of its properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE380]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE381]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `https://localhost:3000` and the output will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.26 – Output using v-for on the information object](img/B18645_01_26_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.26 – Output using v-for on the information object
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that Vue renders the value for items, which is an array of strings, the
    same as how we declared using JavaScript. To render it in a better format, we
    use the built-in JavaScript `toString()` function to export all the elements’
    values into a string with comma separation automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE383]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE384]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE385]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE386]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE387]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE388]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final output will render the list as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.27 – Output using v-for and toString() on values](img/B18645_01_27_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.27 – Output using v-for and toString() on values
  prefs: []
  type: TYPE_NORMAL
- en: Understanding iterations (or loops) is key to not only working with Vue but
    also with JavaScript in general. Now that we have covered how to handle loops
    by using the `v-for` directive and the importance of the `key` property for proper
    reactivity enhancement, we will explore how to use, write, and trigger methods
    in a component.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Vue 2.0, Vue defines component methods inside the `methods` object as part
    of a Vue instance. You compose each component method as a normal JavaScript function.
    The Vue method is scoped to your Vue component and can be run from anywhere inside
    the component it belongs to. It also has access to the `this` instance, which
    indicates the instance of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: 'From Vue 3.0 onward, with `<script setup>`, as with local data, you can define
    a method as a regular function and it will work the same way as with the traditional
    approach. Hence, we can rewrite the preceding code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: 'You then can bind the methods to HTML events of an element as its event listeners
    in the `template` section. When binding events to HTML elements in Vue, you would
    use the `@` symbol. For example, `v-on:click` is equivalent to `@click`, as shown
    in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: Clicking on both buttons triggers the same `myMethod()` method and generates
    the same result.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build a component with some methods.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.08 – triggering methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we are going to build a component that uses Vue’s methods
    API. Consider how similarly these Vue methods can be written to your own named
    functions in JavaScript, as they behave in a very similar way. By the end of the
    exercise, we should be able to use methods and trigger them from the HTML template.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.08](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.08)
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build a list of different elements. For each element, we bind an `onClick`
    event with a `component` method, and alert users about the index of the clicked
    element by performing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.08`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE394]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-08.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-08.vue`, within the `<script setup>` section, let’s define
    a method, `triggerAlert`, that receives an index and displays an alert informing
    users which index has been clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE398]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE399]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE400]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `template` section, set up an anonymous `v-for` loop on an HTML list
    and add a `button` element inside the list element. Set the loop to iterate `5`
    times, and display the `index` value as each button’s label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE402]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE403]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE404]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE405]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE406]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE407]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE408]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE409]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE410]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `@click` directive, referencing the `triggerAlert` method, and pass
    the value of `index` as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE412]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE413]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE416]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE417]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE418]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE419]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE420]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE421]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a margin between each button for readability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE423]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE424]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE425]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE426]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your page should feature a list of buttons that when clicked, trigger an alert
    with a message that contains the button number you clicked, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.28 – Outputting a list of triggers](img/B18645_01_28_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.28 – Outputting a list of triggers
  prefs: []
  type: TYPE_NORMAL
- en: 'The following prompt is displayed when a trigger is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29 – Displaying a browser alert with the index number in it](img/B18645_01_29_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.29 – Displaying a browser alert with the index number in it
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While you can add an event listener to any HTML element, we suggest applying
    them to native HTML interactive elements such as anchor tags, form input, or buttons
    to help with browser accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you can utilize the Vue methods API to define and trigger methods
    from the HTML template, and parse arguments into each method dynamically. In the
    next exercise, we will explore how to return data with Vue methods within a Vue
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.09 – returning data using Vue methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, in a web application, we want elements to appear on the page depending
    on whether a condition is met or not. For instance, if our product is not in stock,
    our page should display the fact that it is out of stock.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s figure out how we conditionally render these elements depending on
    whether our product is in stock or not.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.09](https://github.com/PacktPublishing/Front-End-Development-Projects-with-Vue.js/tree/v2-edition/Chapter01/Exercise1.09).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build a list of different elements and demonstrate adding different
    quantities to a cart. Then, we will display the updated cart’s total value in
    a currency format by performing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.09`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in your VS Code (by using the `code .` command within
    the project directory), or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-09.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-09.vue`, within the `<script>` section, we set up two data
    objects, `totalItems` and `totalCost`, which will be updated when a user clicks
    on our shop’s buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE433]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE434]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE435]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE436]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE437]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE438]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE439]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `template` section, we display the value of `totalItems` and `totalCost`
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE441]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE442]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE443]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE444]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE445]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `script` section, let’s create an `addToCart` method, which will
    update `totalCost` and `totalItems` for the current component based on the received
    number, `n`, by using `this.totalCost` and `this.totalItems`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE447]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE448]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE449]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE450]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE451]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE452]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE453]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE454]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE455]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE456]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE457]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE458]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s iterate through a random amount to create buttons for adding a quantity
    to the cart. The quantity is the button’s index. Then, we bind the `addToCart`
    method to each button, with its index as the function’s input argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE460]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE461]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE462]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE463]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE464]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE465]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE466]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE467]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE468]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE469]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE470]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `10px` margin to the `button` element for readability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE472]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE473]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE474]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE475]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `https://localhost:3000` and the output is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.30 – Pressing any of the buttons will demonstrate the cart logic](img/B18645_01_30_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.30 – Pressing any of the buttons will demonstrate the cart logic
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the buttons, the `totalItems` counter should increment by
    `1`, but `totalCost` will increment by the `n` value, which should demonstrate
    a normal cart functionality. For example, when clicking `Add 2`, then `Add 5`,
    the output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31 – Output displaying Returning Methods after increments of 2 and
    5](img/B18645_01_31_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.31 – Output displaying Returning Methods after increments of 2 and
    5
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s format `totalCost`. Create a method called `formatCurrency`, which
    accepts one argument. We will return the same value after giving it two decimal
    points and a `$` symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE477]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE478]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE479]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE480]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE481]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE482]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE483]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE484]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE485]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE486]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE487]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE488]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use this method in the template, add it to the interpolated curly braces
    and pass the value that was there as an argument inside the method instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE490]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE491]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE492]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE493]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE494]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE495]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE496]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE497]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE498]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE499]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE500]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE501]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE502]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot displays the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.32 – All the values now are in currency format while retaining the
    cart counter](img/B18645_01_32_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.32 – All the values now are in currency format while retaining the
    cart counter
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we were able to utilize Vue’s methods API to parse arguments
    into methods, return modified values, and use methods to update the local data
    state in a life-like scenario.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore a significant part of a component – the
    lifecycle and available component hooks in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding component lifecycle hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vue component lifecycle events happen during a component’s lifecycle, from
    creation to deletion. They allow us to add callbacks and side effects at each
    stage of the component’s life when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue executes the events in order, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setup`: This event runs before all other hooks, including `beforeCreate`.
    It doesn’t have access to this instance since the instance has not yet been created
    at this point. It is mainly for using Composition API and is treated in the same
    way Vue treats `script setup`. We will discuss this event more in [*Chapter 5*](B18645_05.xhtml#_idTextAnchor193),
    *The* *Composition API*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeCreate`: This runs when your component has been initialized. `data`
    has not been made reactive and events are not set up in your DOM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created`: You will be able to access reactive data and events, but the templates
    and DOM are not mounted or rendered. This hook is generally good to use when requesting
    asynchronous data from a server since you will more than likely want this information
    as early as possible before the virtual DOM is mounted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeMount`: A very uncommon hook, as it runs directly before the first render
    of your component and is not called **Server-Side Rendering**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mounted`: Mounting hooks are among the most common hooks you will use since
    they allow you to access your DOM elements so that non-Vue libraries can be integrated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeUpdate`: This runs immediately after a change to your component occurs
    and before it has been re-rendered. It’s useful for acquiring the state of reactive
    data before it has been rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updated`: It runs immediately after the `beforeUpdate` hook and re-renders
    your component with new data changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beforeUnMount`: This is fired directly before unmounting your component instance.
    The component will still be functional until the `unmounted` hook is called, allowing
    you to stop event listeners and subscriptions to data to avoid memory leaks. Note
    this event is called `beforeDestroy` in Vue 2.x.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unmounted`: All the virtual DOM elements and event listeners have been cleaned
    up from your Vue instance. This hook allows you to communicate that to anyone
    or any element that needs to know this has been done. This event in Vue 2.x is
    called `destroyed`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s do a small exercise to learn how and when to use Vue’s lifecycle hooks,
    and when they trigger.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.10 – using a Vue lifecycle to control data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will be learning how and when to use Vue’s lifecycle hooks,
    and when they are triggered by using JavaScript alerts. By the end of the exercise,
    we will be able to understand and use multiple Vue lifecycle hooks.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.10](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.10).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build a list of different elements demonstrating adding different quantities
    to a cart. Then, we will display the updated cart’s total value in a currency
    format by performing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.10`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE504]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-10.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-10.vue`, we start by creating an array of data to iterate
    through in a list element, set the key to `n`, and output the `{{item}}` value
    inside of the `<li>` element using curly braces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE507]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE508]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE509]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE510]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE511]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE512]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE513]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE514]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE515]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE519]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE520]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE521]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE522]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE523]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE524]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE525]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE526]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE532]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE533]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `beforeCreated()` and `created()` as properties below the `data()` function.
    Set an alert or console log inside these hooks so that you can see when they are
    being triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE535]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE536]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE537]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE539]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE540]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE541]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE542]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE543]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE544]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE545]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you refresh your browser, you should see both alerts before you see your
    list load on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.33 – Observing the beforeCreate() hook alert first](img/B18645_01_33_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.33 – Observing the beforeCreate() hook alert first
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the `created()` hook alert after the `beforeCreate()`
    hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.34 – Observing the before() hook alert after the beforeCreate()
    hook](img/B18645_01_34_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.34 – Observing the before() hook alert after the beforeCreate() hook
  prefs: []
  type: TYPE_NORMAL
- en: 'Define `beforeMount()` and `mounted()` in the same way as in *step 6*. Set
    an alert or console log inside of these hooks so that you can see when they are
    being triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE547]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE548]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE549]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE550]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE551]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE552]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE553]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE554]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE555]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE556]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE557]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you refresh your browser, you should also see these alerts before you
    can see your list load on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.35 – Observing the beforeMount() hook alert after the create() hook](img/B18645_01_35_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.35 – Observing the beforeMount() hook alert after the create() hook
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the `mounted()` hook alert after the `beforeMount()`
    hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.36 – Observing the mounted() hook alert after the beforeMount()
    hook](img/B18645_01_36_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.36 – Observing the mounted() hook alert after the beforeMount() hook
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new `button` element inside your `<li>` element that renders the `item`
    output. Use a `@click` directive to bind this button to a method called `deleteItem`
    and pass the `item` value as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE559]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE560]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE561]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE562]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE563]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE564]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE565]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE566]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE567]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE568]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method called `deleteItem` into a `methods` object above your hooks but
    below the `data()` function. Inside this function, pass `value` as an argument
    and filter out items from the `list` array based on this value. Then, replace
    the existing list with the new list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE570]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE571]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE572]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE573]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE574]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE575]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE576]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE577]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE578]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE579]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE580]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `beforeUpdate()` and `updated()` as functions same as in *step 9* and set
    an alert or console log inside them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE581]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE582]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE583]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE584]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE585]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE586]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE587]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE588]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE589]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE590]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE591]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE592]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE593]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you delete a list item by clicking on the `beforeUpdated` will trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.37 – BeforeCreated is called first after clicking on any delete
    button](img/B18645_01_37_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.37 – BeforeCreated is called first after clicking on any delete button
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, `updated` triggers, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.38 – updated is called when the Vue engine finishes updating the
    component before rendering to the DOM](img/B18645_01_38_.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.38 – updated is called when the Vue engine finishes updating the component
    before rendering to the DOM
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue adding `beforeUnmount()` and `unmounted()` to the component options
    as function properties. Set an alert or console log inside these hooks so that
    you can see when they are being triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE594]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE595]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE596]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE597]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE598]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE599]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE600]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE601]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE602]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE603]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE604]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE605]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE606]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new string to your `list` array – for example, `testing` `unmounted hooks`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE607]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE608]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE609]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE610]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE611]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE612]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE613]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE614]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE615]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE616]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE617]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE618]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE619]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE620]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE621]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE622]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE623]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the unmount alerts according to this order: `beforeUnmount`
    – `beforeCreated` – `created` – `beforeMount` – `unmounted` – `mounted`. An example
    output screen displaying the alert for `beforeUnmount` is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.39 – Alert displays when a component is about to be unmounted](img/B18645_01_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.39 – Alert displays when a component is about to be unmounted
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`mounted` and `created` lifecycle hooks will run every time a component is
    initialized. If this is not the desired effect, consider running the code you
    want to run once from the parent component or view, such as the `App.vue` file.'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned what Vue lifecycle hooks are, when they trigger,
    and in what order they trigger. This will be useful in combination with triggering
    methods and controlling data within your Vue components.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss how we style our Vue components using the `<``style>`
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Styling components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using Vue components, the Vite compiler allows you to use almost any frontend
    templating language style. The easiest way to enable these expressive library
    plugins in your Vue templates is to install them when you initialize your project,
    or by using `npm install` (or `yarn add`) for the package.
  prefs: []
  type: TYPE_NORMAL
- en: When using the `style` tag inside of a Vue component, you can specify a language
    using the `lang` attribute, provided that you have installed that specific language
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you chose to install the Stylus preprocessor, first you need
    to install the `stylus` package in your project as a dependency by performing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can add the `lang="stylus"` attribute to the `style` tag to begin
    using Stylus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: Another benefit of using Vue is scoping the style with the `scoped` attribute.
    This is a useful way to create isolated and component-specific CSS stylings. It
    also overrides any other CSS global rules, according to the CSS rule of specificity.
  prefs: []
  type: TYPE_NORMAL
- en: It is not recommended to scope global styles. A common method for defining global
    styling is to separate these styles into another style sheet and import them into
    your `App.vue` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s practice importing SCSS, a pre-processor plugin for CSS, to use in
    your application, and write some scoped stylings with the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.11 – importing SCSS into a scoped component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will be utilizing the `style` tag to add SCSS preprocessed
    styles to a component and importing external stylesheets.
  prefs: []
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.11](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.11).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.11`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE626]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE627]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE628]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-11.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-11.vue`, let’s write some HTML that can be styled using SCSS.
    Let’s keep practicing the interpolation method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE629]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE630]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE631]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE632]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE633]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE634]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE635]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE636]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE637]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE638]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE639]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE640]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE641]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE642]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE643]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE644]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE645]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE646]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE647]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE648]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE649]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE650]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `sass` SCSS package as a project dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `lang` attribute to the `style` tag and add the `scss` value to enable
    SCSS syntax inside the `style` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE652]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a folder inside the `src/` directory called `styles`. Inside this new
    folder, create a file called `typography.scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE653]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside `typography.scss`, add some styling for the template you composed in
    your component, such as defining color variables (`green`, `grey`, and `blue`)
    to reuse in different areas of related CSS rules, and some CSS styles for `h1`,
    `h2`, and the list elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE655]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE656]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE657]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE658]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE659]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE660]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE661]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE662]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE663]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE664]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE665]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE666]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE667]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE668]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE669]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE670]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE671]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE672]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE673]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE674]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE675]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE676]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE677]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In SCSS, you can use standard CSS selectors to select elements in your component.
  prefs: []
  type: TYPE_NORMAL
- en: '`ul > li` will select every `<li>` element inside of an `<ul>` element for
    styling. Similarly, using the addition symbol (`+`) means that the elements placed
    after the first element will be styled if they match the condition. For example,
    `h1 + h2` will dictate that all `h2` elements after `h1` will be styled in a certain
    way, but `h3` will not. You can understand this better through the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In CSS, you would present this code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: 'In SCSS, the same code can be represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: 'In your component, import these styles by using the SCSS `@``import` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE681]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE682]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will generate an output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.40 – When you save and reload, your project should have the style
    imported](img/B18645_01_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.40 – When you save and reload, your project should have the style imported
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `scoped` attribute to your `<style>` tag to only apply these styles
    to this component instance. Use the variable from the `$color-blue` imported stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE683]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE684]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE685]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE686]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE687]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE688]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE689]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.41 – The outcome of scoping styles](img/B18645_01_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.41 – The outcome of scoping styles
  prefs: []
  type: TYPE_NORMAL
- en: Inspect the DOM and you will notice that at runtime, that scoping has applied
    `v-data-*` attributes to your DOM elements specifying these specific rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `<head>` and `<``style>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.42 – How the virtual DOM uses data attributes to assign scoped styles](img/B18645_01_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.42 – How the virtual DOM uses data attributes to assign scoped styles
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new style sheet called `global.scss` in the `styles` folder, containing
    only stylings for the main `body` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE690]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE691]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE692]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE693]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE694]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE695]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import this stylesheet into your `App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE696]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE697]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE698]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our app should render the same as before; only the font family for all elements
    should change to Avenir and there should be no margin for the main `body`, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.43 – Properly scoped styles for Exercise 1.03](img/B18645_01_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.43 – Properly scoped styles for Exercise 1.03
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we interpolated data that originated from an array and learned
    about some basic SCSS syntax. Then, we styled our component using forms of `scoped`
    SCSS, which can either exist inside the `<style>` tag or be imported from another
    directory into our project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to experiment with how to write dynamic CSS
    for a component using Vue 3 features.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up state-driven dynamic CSS in Vue 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vue 3.x introduces a new CSS function, `v-bind()`, to use within the `style`
    section of a Vue SFC. We use this function to create a one-way link between local
    data and a CSS value.
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, the Vue engine uses CSS custom properties (or CSS variables)
    to compute the dynamic stylings received from `v-bind()`. For each `v-bind()`,
    it generates a hashed custom property (with the `--` prefix) and adds it to the
    component’s root element. All the custom properties are added as inline static
    styles and will be updated whenever the linked local data’s value changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s have a component that prints out a `title` and contains
    a local data property, `headingStyles`. The `headingStyles` data object contains
    several fields such as `marginTop`, `textAlign`, and `color`, indicating the relevant
    CSS properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, the output does not have a custom style and will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.44 – Displaying the title without using v-bind() and custom CSS](img/B18645_01_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.44 – Displaying the title without using v-bind() and custom CSS
  prefs: []
  type: TYPE_NORMAL
- en: 'We now can bind `headingStyles` to the CSS stylings of `h1` in the `<style>`
    section, by applying `v-bind()` accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will now have custom CSS enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.45 – Output with v-bind() and custom CSS applied](img/B18645_01_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.45 – Output with v-bind() and custom CSS applied
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open `h1` element in the **Elements** tab, you will see it has inline
    styles, as shown in *Figure 1**.47*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.46 – Devtools inspection shows the inline styles with hashed custom
    properties generated](img/B18645_01_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.46 – Devtools inspection shows the inline styles with hashed custom
    properties generated
  prefs: []
  type: TYPE_NORMAL
- en: Since `v-bind()` is a Vue 3.x feature, it also supports local variables defined
    using `script setup` out of the box. You can re-write the code in the `script
    setup` standards, and the outputs stay the same.
  prefs: []
  type: TYPE_NORMAL
- en: '`v-bind()` also support JavaScript expressions. To use JavaScript expressions,
    you need to wrap them in quotes. For example, we can take `headingStyles` from
    the previous example and re-define `marginTop` as a number only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<style>` section, let’s compute `margin-top` for the `h1` selector
    with the addition of `5px` and add the `px` suffix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: 'The output now has a margin top of `15px` as shown in *Figure 1**.48*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.47 – Generated custom property for margin-top is 15px](img/B18645_01_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.47 – Generated custom property for margin-top is 15px
  prefs: []
  type: TYPE_NORMAL
- en: Using `v-bind(`) is very beneficial for defining theming dynamically and programmatically.
    However, it provides only one-way binding from the local data to the styling,
    not vice versa. In the next section, we will explore the opposite binding direction
    using CSS modules.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CSS modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A recent pattern that has become popular in the reactive framework world is
    CSS modules. Frontend development always faces the issue of conflicting CSS class
    names, ill-structured BEM code, and confusing CSS file structures. Vue components
    help to solve this by being modular and allowing you to compose CSS that will
    generate unique class names for the specific component at compile time.
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS modules in Vue exports CSS styles from the `style` section into JavaScript
    modules and uses those styles in the template and logic computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this feature in Vue, you will need to add the `module` attribute
    to the `style` block, and reference as classes using the `:class` and `$style.<class
    name>` syntax, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: Once you have enabled the CSS module, the Vue engine exposes the `$style` object
    containing all the defined selectors as objects for use within the `template`
    section, and `this.$style` to use within the component’s JavaScript logic. In
    the preceding example, you are binding the CSS stylings defined for the`.container`
    class selector to `div` using `$style.container`.
  prefs: []
  type: TYPE_NORMAL
- en: If you inspected the DOM tree, that class would be called something such as
    `.container_ABC123`. If you were to create multiple components that had a semantic
    class name such as `.container` but used CSS modules, you would never run into
    style conflicts again.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s practice using CSS modules to style a Vue component.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.12 – styling Vue components using CSS modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.12](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Exercise1.12).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter01/Exercise1.12`
    folder by using the following commands in order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE704]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE705]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE706]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the exercise project in VS Code (by using the `code .` command within the
    project directory) or your preferred IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Vue component file named `Exercise1-12.vue` in the `src/components`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Exercise1-12.vue`, compose the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE707]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE708]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE709]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE710]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE711]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE712]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE713]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE714]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE715]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE716]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE717]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE718]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE719]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE720]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE721]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE722]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `<style>` block and add `module` as an attribute instead of `scoped`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE724]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE725]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE726]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE727]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE728]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE729]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE730]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE731]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE732]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE733]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE734]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE735]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE736]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE737]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE738]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use CSS modules in your template, you need to bind them to your HTML elements
    by using the `:class` syntax, which is the same as the `v-bind:class` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE739]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE740]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you save it, your project should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.48 – Output using CSS modules](img/B18645_01_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.48 – Output using CSS modules
  prefs: []
  type: TYPE_NORMAL
- en: 'If you inspect the virtual DOM, you will see how it has applied unique class
    names to the bound elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.49 – Generated CSS module class](img/B18645_01_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.49 – Generated CSS module class
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we saw how to use CSS modules in your Vue components and how
    it works differently from CSS scoping.
  prefs: []
  type: TYPE_NORMAL
- en: In combination with file splitting and importing SCSS, using CSS modules is
    the preferred method for scoping component styling here. This safely ensures that
    individual component styles and business rules do not risk overriding each other
    and do not pollute global styling and variables with component-specific styling
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Readability is important. The class name also hints at the component name as
    opposed to the `v-data` attribute, which can be good when debugging large projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will apply what you have learned in this chapter to
    build a dynamic shopping list app by combining directives, loops, two-way data,
    and method declaration for a Vue component together, with scoped CSS styling.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 1.01 – building a dynamic shopping list app using Vue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Activity1.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter01/Activity1.01)
  prefs: []
  type: TYPE_NORMAL
- en: This activity aims to leverage your knowledge thus far about the basic features
    of an SFC, such as expressions, loops, two-way binding, and event handling.
  prefs: []
  type: TYPE_NORMAL
- en: This application should let users create and delete individual list items and
    clear the total list in one click.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Build an interactive form in one component using an input bound to `v-model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add one input field to which you can add shopping list items. Allow users to
    add items by using the *Enter* key by binding a method to the `@``keyup.enter`
    event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Users can expect to clear the list by deleting all the items or removing them
    one at a time. To facilitate this, you can use a `delete` method, which can pass
    the array position as an argument, or simply overwrite the whole shopping list
    data prop with an empty array, `[]`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected outcome is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 1.5\uFEFF0 – Expected output of Activity 1.01](img/B18645_01_50.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.50 – Expected output of Activity 1.01
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create and run a Vue project using the command
    prompt with Vite. You also learned how to create basic Vue components. Within
    these Vue components, you can scaffold templates that use Vue’s unique directives
    and HTML syntax sugar to loop over data or control DOM states with conditional
    statements. The key concepts of reactive data using data props and the `v-model`
    binding were explored and demonstrated as useful through real-life examples that
    utilized Vue methods and lifecycles.e
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will learn about more advanced reactive data concepts
    that will build upon this first chapter: using computed props and watchers and
    fetching asynchronous data from an external source.sssssse'
  prefs: []
  type: TYPE_NORMAL
