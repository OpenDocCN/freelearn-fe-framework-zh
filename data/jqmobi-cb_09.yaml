- en: Chapter 9. Methods and Utilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 方法和实用工具
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下食谱：
- en: Using `loadPage()` to load a page
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`loadPage()`加载页面
- en: Using `changePage()` to change a page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`changePage()`来更改页面
- en: Using `jqmData()` and `jqmRemoveData()`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`jqmData()`和`jqmRemoveData()`
- en: Using `jqmEnhanceable()`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`jqmEnhanceable()`
- en: Using `jqmHijackable()`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`jqmHijackable()`
- en: Using `$.mobile.base`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`$.mobile.base`
- en: Parsing an URL
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析URL
- en: Using `$.mobile.path` utility methods
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`$.mobile.path` 实用方法
- en: Using silent scrolling
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静默滚动
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The jQuery Mobile framework provides numerous methods and utilities that work
    on the `$.mobile` object. This chapter shows you how to use these methods and
    utilities.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery Mobile框架提供了许多在`$.mobile`对象上工作的方法和实用工具。 本章向您展示如何使用这些方法和实用工具。
- en: The source files for all the recipes in this chapter are available under the
    `code/09` folder of the archive. Each recipe is listed in its own sub-folder,
    which is named accordingly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所有食谱的源文件都在存档的`code/09`文件夹下。 每个食谱都在自己的子文件夹中列出，其名称相应命名。
- en: Using loadPage() to load a page
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用loadPage()加载页面
- en: Using the `$.mobile.loadPage()` method, you can load an external page in the
    background into the DOM and enhance its contents without affecting the current
    page. This recipe shows you how to do the same.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`$.mobile.loadPage()`方法，您可以将外部页面在后台加载到DOM中并增强其内容，而不影响当前页面。 本食谱向您展示如何执行此操作。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/09/loadpage` source folder.
    You can launch this code by using the URL: `http://localhost:8080/09/loadpage/main.html`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/09/loadpage`源文件夹中复制此食谱的完整代码。 您可以通过URL:`http://localhost:8080/09/loadpage/main.html`来启动此代码。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'Create `main.html` with the page `id="main"`, and add an empty `div` tag and
    a link to `#page1`, shown as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`main.html`，带有页面`id="main"`，并添加一个空的`div`标签和一个指向`#page1`的链接，如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add an event handler for the `pagebeforeshow` event of `#main`, and load `#page1`
    using the `loadPage()` method:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`#main`的`pagebeforeshow`事件添加事件处理程序，并使用`loadPage()`方法加载`#page1`：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add an event handler for the `pagebeforeshow` event of `#page1` to update the
    displayed message:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`#page1`的`pagebeforeshow`事件添加事件处理程序，以更新显示的消息：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, create `page1.html`, shown as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建`page1.html`，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Create main.html with `#main` page, and add an empty `div` with `id="msgdiv"`
    and a link to open `#page1` in it. The `#page1` reference is not yet available
    during `pageinit`, as it comes from the external `page1.html` file. Add the event
    handler for the `pagebeforeshow` event on the `#main` page. Here, obtain the current
    active page using the `$.mobile.activePage()` method, and display its `data-url`
    attribute in `#msgdiv` using the jQuery `attr()` method. Next, load `page1.html`
    using the `$.mobile.loadPage()` call. Also, set the `loadPage()` options, and
    set the `role` attribute to `dialog`. The page now gets loaded in the background.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建具有`#main`页面的`main.html`，并添加一个空的`div`，其中`id="msgdiv"`和一个打开其中`#page1`链接的链接。
    在`pageinit`期间，`#page1`引用尚不可用，因为它来自外部的`page1.html`文件。 在`#main`页面上添加`pagebeforeshow`事件处理程序。
    在这里，使用`$.mobile.activePage()`方法获取当前活动页面，并使用jQuery的`attr()`方法将其`data-url`属性显示在`#msgdiv`中。
    接下来，使用`$.mobile.loadPage()`调用加载`page1.html`。 同时，设置`loadPage()`选项，并将`role`属性设置为`dialog`。
    页面现在在后台加载。
- en: Add an event handler for the `pagebeforeshow` event of `#page1`. Obtain `data-url`
    of the active page, as done previously, and display it in the `#page1content`
    div container. Finally, create `page1.html` with an empty div with `id="page1content"`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为`#page1`的`pagebeforeshow`事件添加事件处理程序。 获取之前完成的活动页面的`data-url`并在`#page1content`
    div容器中显示它。 最后，创建一个带有`id="page1content"`的空div的`page1.html`页面。
- en: When `main.html` loads, you will see the **Show Page 1** button. Click on it,
    and `page1.html` will be shown as a dialog box using the default pop transition.
    Also, the active page data URL will be correctly shown in both the pages.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当`main.html`加载时，您将看到**显示页面1**按钮。 点击它，`page1.html`将以默认弹出过渡方式显示为对话框。 另外，活动页面的数据URL将在这两个页面中正确显示。
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`$.mobile.loadPage()` returns a deferred `promise` object, which automatically
    gets resolved once the page is enhanced and loaded into the DOM.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.mobile.loadPage()`返回一个延迟的`promise`对象，一旦页面被增强并加载到DOM中，它就会自动解决。'
- en: The loadPage() options
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: loadPage()选项
- en: 'The `loadPage()` method takes in an optional `options` object as the second
    argument. The following properties can be set on the `options` object:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadPage()`方法将一个可选的`options`对象作为第二个参数。 可在`options`对象上设置以下属性：'
- en: '`data`: This is the data for the Ajax page request'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：这是 Ajax 页面请求的数据'
- en: '`loadMsgDelay` (50 seconds by default): This is the delay before the page load
    message is shown'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loadMsgDelay`（默认为 50 秒）：这是显示页面加载消息之前的延迟时间'
- en: '`pageContainer`: This is the element that contains the loaded page'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pageContainer`：这是包含加载页面的元素'
- en: '`reloadPage` (`false` by default): This forces the page to be reloaded'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reloadPage`（默认为 `false`）：这将强制重新加载页面'
- en: '`role`: This is the `data-role` value for the page load'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`role`：这是页面加载的 `data-role` 值'
- en: '`showLoadMsg` (`false` by default): This decides whether to display the page
    load message or not'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showLoadMsg`（默认为 `false`）：这决定是否显示页面加载消息'
- en: '`type` (`get` by default): This specifies the type of Ajax request (`get` or
    `post`)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`（默认为 `get`）：这指定了 Ajax 请求的类型（`get` 或 `post`）'
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using changePage() to change a page* recipe
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 changePage() 更改页面* 小节'
- en: The *Using page load and remove events* recipe in [Chapter 8](ch08.html "Chapter 8. Events"),
    *Events*
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 8 章](ch08.html "第 8 章. 事件")的 *Events* 中的 *使用页面加载和删除事件* 小节
- en: Using changePage() to change a page
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 changePage() 更改页面
- en: This recipe shows you how to use the `$.mobile.changePage()` method to change
    from one page to another using JavaScript. This recipe extends the *Using a split
    button list* recipe from [Chapter 6](ch06.html "Chapter 6. List Views"), *List
    Views*, and displays the selected image from the list item in a new page.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此小节向您展示如何使用 `$.mobile.changePage()` 方法使用 JavaScript 从一个页面切换到另一个页面。此小节扩展了[第 6
    章](ch06.html "第 6 章. 列表视图")的 *使用分割按钮列表* 小节，*列表视图*，并在新页面中显示所选列表项中的图像。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/09/changepage` source folder.
    Also, revisit the *Using a split button list* recipe from [Chapter 6](ch06.html
    "Chapter 6. List Views"). You can launch this code by using the URL: `http://localhost:8080/09/changepage/main.html`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `code/09/changepage` 源文件夹中复制此小节的完整代码。还要重新查看[第 6 章](ch06.html "第 6 章. 列表视图")的
    *使用分割按钮列表* 小节。您可以通过以下 URL 启动此代码：`http://localhost:8080/09/changepage/main.html`。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create `main.html` with a split button list, with the `href` attribute for
    the `<img>` tag having a `file` parameter, with the path for the image file in
    the left button, as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `main.html`，其中包含一个分割按钮列表，`<img>` 标签的 `href` 属性具有一个 `file` 参数，在左按钮中有图像文件的路径，如下所示：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the `#viewphoto` page, and open it when the left part of the split button
    is clicked:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `#viewphoto` 页面，并在点击分割按钮的左部时打开它：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following script to the `<head>` section, and call `$.mobile.changePage()`
    in the `pagebeforechange` event handler:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<head>` 部分添加以下脚本，并在 `pagebeforechange` 事件处理程序中调用 `$.mobile.changePage()`：
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Display the image in the `pagebeforeshow` event handler of the `#viewphoto`
    page:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `#viewphoto` 页面的 `pagebeforeshow` 事件处理程序中显示图像：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Add the split button list and the `#viewphoto` page in `main.html`, as shown
    in the code. Add an empty `#imgid` attribute to the `div` tag in the `#viewphoto`
    page, to show the full image. The split button list and the `#viewphoto` page
    code are already explained in [Chapter 6](ch06.html "Chapter 6. List Views").
    The `href` attribute of the right button just points to `#`, as it is not used
    in this recipe. Change the list item `href` attribute in the left buttons to include
    the file parameter; for example, `href="#viewphoto&file=img1.png"`. When the app
    is launched, the following screen is displayed with thumbnails, as shown in the
    split button list.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main.html` 中添加分割按钮列表和 `#viewphoto` 页面，如代码所示。在 `#viewphoto` 页面的 `div` 标签中添加一个空的
    `#imgid` 属性，以显示完整的图像。分割按钮列表和 `#viewphoto` 页面的代码已在[第 6 章](ch06.html "第 6 章. 列表视图")中解释过。右按钮的
    `href` 属性只是指向 `#`，因为在此小节中未使用。将左按钮中列表项的 `href` 属性更改为包括文件参数；例如，`href="#viewphoto&file=img1.png"`。启动应用程序时，将显示如下屏幕，其中显示了缩略图，如分割按钮列表所示。
- en: '![How it works...](img/7225_09_01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_09_01.jpg)'
- en: But, nothing happens when you click on the split list buttons, as the framework
    does not understand the file parameter with the `href` attribute. To open and
    display the image, you will have to manually handle the page change. To manually
    invoke `pageChange()`, add an event handler for the `pagebeforechange` event.
    Here, check if the target page (`data.toPage`) is an URL string, and obtain the
    URL components using the `$.mobile.path.parseUrl()`method. Now, search for the
    file parameter in the URL hash using the regular expression—`#viewphoto&file`.
    If it is found, then it is a request to view the image. You must now handle the
    page change.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当你点击分割列表按钮时，没有任何反应，因为框架不理解带有 `href` 属性的文件参数。要打开并显示图像，您将需要手动处理页面更改。要手动调用 `pageChange()`，请为
    `pagebeforechange` 事件添加事件处理程序。在这里，检查目标页面（`data.toPage`）是否是 URL 字符串，并使用 `$.mobile.path.parseUrl()`
    方法获取URL组件。现在，使用正则表达式搜索 URL 哈希中的文件参数 — `#viewphoto&file`。如果找到，则是查看图像的请求。现在，你必须处理页面更改。
- en: Call the `pageChange()` method and pass it the `main.html#viewphoto` URL. Also,
    set the `options` argument with custom values for `transition`, `type`, and `dataUrl`.
    You can store the filename information in `dataUrl` by splitting the URL hash
    as shown. Finally, prevent the default `pagebeforechange` event handling, as you
    are already handling the page change here.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `pageChange()` 方法并传递 `main.html#viewphoto` URL。另外，用自定义值设置 `options` 参数的`transition`、`type`
    和 `dataUrl`。你可以按照示例将文件名信息存储在 `dataUrl` 中，通过分割URL哈希来实现。最后，防止默认的 `pagebeforechange`
    事件处理，因为你已经在这里处理页面更改。
- en: 'Next, you will have to query the URL string provided to `pageChange()` for
    the `file` parameter, and display the image. To do this, add an event handler
    for the `pagebeforeshow` event of the #`viewphoto` page. Get the URL components
    using the `$.mobile.path.parseUrl()` method. Search for the `img` expression;
    if found, get the filename from the URL hash and display the image in the `#imgid`
    div container, as shown in the code. Now, if you click on any list item, the corresponding
    image is displayed in a larger size in the `#viewphoto` page, as shown in the
    following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将需要查询提供给 `pageChange()` 的URL字符串，以获取 `file` 参数，并显示图像。要做到这一点，请为 `#viewphoto`
    页面的 `pagebeforeshow` 事件添加事件处理程序。使用 `$.mobile.path.parseUrl()` 方法获取URL组件。搜索 `img`
    表达式；如果找到，从URL哈希中获取文件名，并在代码中显示在 `#imgid` div 容器中。现在，如果你点击任何列表项，相应的图像将在 `#viewphoto`
    页面中以较大尺寸显示，如下面的截图所示：
- en: '![How it works...](img/7225_09_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_09_02.jpg)'
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `$.mobile.changePage()` method uses the `$.mobile.loadPage()` method internally
    to fetch the new page during the page change.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.mobile.changePage()` 方法在页面更改期间内部使用 `$.mobile.loadPage()` 方法来获取新页面。'
- en: The changePage() options
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: changePage() 选项
- en: 'The `changePage()` method takes in an optional `options` object as the second
    argument. The following properties can be set on the `options` object:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`changePage()` 方法接受可选的 `options` 对象作为第二个参数。可以在 `options` 对象上设置以下属性：'
- en: '`allowSamePageTransition` (`false` by default): Transitions to the current
    active page are ignored by default, but can be enabled by using the `allowSamePageTransition`
    option'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowSamePageTransition`（默认为`false`）：默认情况下忽略对当前活动页面的转换，但可以通过使用 `allowSamePageTransition`
    选项启用'
- en: '`changeHash` (`true` by default): This updates hash in the location bar'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`changeHash`（默认为`true`）：这会更新位置栏中的哈希'
- en: '`data`: This is the data for the Ajax page request'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：这是Ajax页面请求的数据'
- en: '`dataUrl`: This is the URL to update the browser location after page change'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataUrl`：这是页面更改后更新浏览器位置的URL'
- en: '`pageContainer`: This is the element that contains the loaded page'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pageContainer`：这是包含加载的页面的元素'
- en: '`reloadPage` (`false` by default): This forces the page to be reloaded'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reloadPage`（默认为`false`）：这会强制重新加载页面'
- en: '`reverse` (`false` by default): This is the direction of transition for page
    show'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse`（默认为`false`）：这是页面显示过渡方向'
- en: '`role`: This provides the `data-role` value for showing the page'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`role`：为页面显示提供 `data-role` 值'
- en: '`showLoadMsg` (`false` by default): This decides whether or not to display
    the page load message'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showLoadMsg`（默认为`false`）：决定是否显示页面加载消息'
- en: '`transition`: This is the transition to be used for page change'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition`：这是用于页面更改的过渡效果'
- en: '`type` (`get` by default): This specifies the type of Ajax request (`get` or
    `post`)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`（默认为`get`）：指定 Ajax 请求的类型（`get` 或 `post`）'
- en: See also
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Using loadPage() to load a page* and *Parsing a URL* recipes
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `loadPage()` 加载页面 和 解析 URL 的示例
- en: The *Using a split button list* recipe, in [Chapter 6](ch06.html "Chapter 6. List
    Views"), *List Views*
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章.列表视图") *列表视图*下的*使用分隔按钮列表*示例'
- en: The *Using page load and remove events* recipe in [Chapter 8](ch08.html "Chapter 8. Events"),
    *Events*
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章.事件") *事件*下的*使用页面加载和移除事件*示例'
- en: Using jqmData() and jqmRemoveData()
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jqmData()和jqmRemoveData()
- en: The `jqmData()` and `jqmRemoveData()` methods are available to add or remove
    data attributes to the elements of a jQuery mobile app. They automatically handle
    custom namespaces. This recipe shows you how to use these methods.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`jqmData()`和`jqmRemoveData()`方法可用于向jQuery移动应用程序的元素添加或移除数据属性。它们会自动处理自定义命名空间。本节介绍了如何使用这些方法。'
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Copy the full code of this recipe from the `code/09/jqmdata` source folder.
    You can launch this code by using the URL: `http://localhost:8080/09/jqmdata/main.html`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/09/jqmdata`源文件夹复制此示例的完整代码。你可以通过URL访问此代码：`http://localhost:8080/09/jqmdata/main.html`。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Add the following script to `main.html` before including `jquery.``mobile.js`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含`jquery.``mobile.js`之前，将以下脚本添加到`main.html`中：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add two text inputs and a button to the page, as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面中添加两个文本输入和一个按钮，如下所示：
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following script to the `<head>` section to invoke the `jqmData()`
    and `jqmRemoveData(``)` methods:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到`<head>`部分以调用`jqmData()`和`jqmRemoveData(``)`方法：
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In `main.html`, add an event handler for the `mobileinit` event, before including
    the reference to `jquery.mobile.js`. This is invoked at the start of the app.
    Here, set the `$.mobile.ns="my-"` namespace configuration.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，在包含对`jquery.mobile.js`的引用之前，为`mobileinit`事件添加事件处理程序。这会在应用程序启动时调用。在这里，设置`$.mobile.ns="my-"`命名空间配置。
- en: Add two text inputs with `id="pgtheme"` and `id="customdata"` to display the
    page theme and custom data, respectively. Add a button with `id="clearbtn"`. Next,
    bind the `pageinit` event to a callback function. In this function, get the `page`
    element using the `div:jqmData(role='page')` custom selector. Using `jqmData()`
    ensures that the lookup of the data attribute (`data-my-role`) with a custom namespace
    is automatically handled.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 添加两个文本输入，分别为`id="pgtheme"`和`id="customdata"`，用于显示页面主题和自定义数据。添加一个`id="clearbtn"`的按钮。接下来，将`pageinit`事件绑定到回调函数。在此函数中，使用`div:jqmData(role='page')`自定义选择器获取`page`元素。使用`jqmData()`确保自动处理带有自定义命名空间的数据属性（`data-my-role`）的查找。
- en: 'Set a **Custom Data** attribute on the page with the value **Custom data text**
    using the `jqmData()` method, as shown in the following screenshot. Finally, display
    the **Page Theme** and **Custom Data** attributes in the two text inputs. The
    page is displayed as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`jqmData()`方法在页面上设置值为**自定义数据文本**的**自定义数据**属性，如下截图所示。最后，在两个文本输入框中显示**页面主题**和**自定义数据**属性。页面显示如下：
- en: '![How it works...](img/7225_09_03.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_09_03.jpg)'
- en: Next, add a `click` event handler for `#clearbtn` to remove the custom data
    attribute set on the page using the `jqmRemoveData()` method, and update the value
    of the **Custom Data** text field. Now, when you click on the **Clear Custom Data**
    button, the text input will display **undefined**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为`#clearbtn`添加一个`click`事件处理程序，使用`jqmRemoveData()`方法移除页面上设置的自定义数据属性，并更新**自定义数据**文本字段的值。现在，当你点击**清除自定义数据**按钮时，文本框将显示**未定义**。
- en: There's more...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多信息...
- en: The jQuery methods `data()`, `hasData()` , and `removeData()`, do not take the
    namespace of the `data-` attributes into consideration. You will have to write
    a custom code to handle it. Instead, use the `jqmData()` and `jqmRemoveData()`
    methods, as shown in this recipe. You can inspect the code using a DOM inspector
    to verify the use of a custom namespace.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery方法`data()`、`hasData()`和`removeData()`不考虑`data-`属性的命名空间。你将需要编写自定义代码来处理它。相反，使用本节中所示的`jqmData()`和`jqmRemoveData()`方法。你可以使用DOM检查器来检查代码，以验证对自定义命名空间的使用。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Configuring the default namespace* recipe in [Chapter 7](ch07.html "Chapter 7. Configurations"),
    *Configurations*
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章.配置") *配置*下的*配置默认命名空间*示例'
- en: Using jqmEnhanceable()
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jqmEnhanceable()
- en: When `data-enhance="false"` is set on a parent element, it is inherited by all
    the child elements. To search for elements that can use manual enhancements or
    for custom plugin authoring, the jQuery Mobile framework provides a filter method
    called `jqmEnhanceable()`. This recipe shows you how to use it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当在父元素上设置了`data-enhance="false"`时，它会被所有子元素继承。为了搜索可以使用手动增强或用于自定义插件编写的元素，jQuery
    Mobile框架提供了一个名为`jqmEnhanceable()`的过滤方法。本配方向您展示如何使用它。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Copy the full code of this recipe from the `code/09/jqmenhance` source folder.
    You can launch this code using the URL `http://localhost:8080/09/jqmenhance/main.html`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/09/jqmenhance`源文件夹复制此配方的完整代码。你可以使用URL `http://localhost:8080/09/jqmenhance/main.html`来启动此代码。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: 'Add the following script to `main.html` before including `j``query.mobile.js`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含`j``query.mobile.js`之前，将以下脚本添加到`main.html`中：
- en: '[PRE11]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add two anchor buttons to the page as shown. The second button is within a `div`
    tag which has `data-``enhance="false"`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如所示，在页面中添加两个锚按钮。第二个按钮位于一个具有`data-enhance="false"`的`div`标签内。
- en: '[PRE12]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following script to the `<head>` section to invoke the `jqmEnha``nceable()`
    method:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`部分添加以下脚本来调用`jqmEnha``nceable()`方法：
- en: '[PRE13]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: In `main.html`, add an event handler for the `mobileinit` event before including
    the reference to `jquery.mobile.js`, which is invoked at the start of the app.
    Set the `$.mobile.ignoreContentEnabled=true` configuration.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，在包含对`jquery.mobile.js`的引用之前为`mobileinit`事件添加一个事件处理程序，该事件在应用程序启动时被调用。设置`$.mobile.ignoreContentEnabled=true`配置。
- en: Add two `div` tags to the content of `#main`. Add a `#` link to both these `div`
    tags. Do not set the `data-role="button"` attribute on either of the links. The
    second `div` tag has the `data-enhance="false"` attribute set. Next, bind the
    `pagecreate` event to an event handler. At this point, the page is already `initialzied`,
    but the widgets are yet to be enhanced. Now invoke the `jqmEnhanceable()` method
    on the anchor element, as shown. This filters and provides only those anchor elements
    that do not have `data-enhance="false"` inherited from its parent. So, in the
    code, `Link 1` is made available. Set its `data-role` attribute to `button` using
    the jQuery `attr()` call, as shown in the code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`#main`的内容中添加两个`div`标签。将一个`#`链接添加到这两个`div`标签中。不要在任何一个链接上设置`data-role="button"`属性。第二个`div`标签设置了`data-enhance="false"`属性。接下来，将`pagecreate`事件绑定到事件处理程序上。此时，页面已经被`initialized`，但是小部件还没有被增强。现在按照所示在锚元素上调用`jqmEnhanceable()`方法。此方法会过滤并提供仅仅不从父级继承`data-enhance="false"`的那些锚元素。所以在代码中，`Link
    1`被提供了。使用jQuery的`attr()`调用将其`data-role`属性设置为`button`，如代码所示。
- en: 'Now, when you open the app, only **Link 1** is enhanced to a button and **Link
    2** is not enhanced, as shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你打开应用程序时，只有**Link 1**被增强为按钮，而**Link 2**没有被增强，如下截图所示：
- en: '![How it works...](img/7225_09_04.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_09_04.jpg)'
- en: There's more...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `jqmEnhanceable()` method works only when the `$.mobile.ignoreContentEnabled=true`
    configuration is set. The parent node of each element is visited and checked for
    the `data-enhance` value, and any parent that has a `false` setting is removed
    with its child elements from the filtered set.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置了`$.mobile.ignoreContentEnabled=true`配置时，`jqmEnhanceable()`方法才能工作。将访问每个元素的父节点并检查`data-enhance`值，任何设置为`false`的父节点都将被从过滤集中移除。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using `jqmEnhanceable()` on even a small set of elements is costly, as all the
    parent elements are checked for the `data-enhance` value.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对一小组元素使用`jqmEnhanceable()`也很耗费资源，因为所有父元素都会被检查`data-enhance`的值。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using jqmHijackable()* recipe
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用jqmHijackable()* 配方'
- en: Using jqmHijackable
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jqmHijackable
- en: When `data-ajax="false"` is set on a parent element, this is inherited by all
    the child elements. A filter method called `jqmHijackable()` is available to search
    for child elements that can use custom forms and link binding. This recipe shows
    you how to use this method.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当在父元素上设置`data-ajax="false"`时，这会被所有子元素继承。有一个名为`jqmHijackable()`的过滤方法可用于搜索可以使用自定义表单和链接绑定的子元素。本配方向您展示如何使用此方法。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/09/jqmhijack` source folder.
    You can launch this code by using the URL: `http://localhost:8080/09/jqmhijack/main.html`.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '从`code/09/jqmhijack`源文件夹复制此配方的完整代码。你可以使用URL: `http://localhost:8080/09/jqmhijack/main.html`来启动此代码。'
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: 'Add the following script to `main.html` before including `jquery.mobile.js`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含`jquery.mobile.js`之前，将以下脚本添加到`main.html`中：
- en: '[PRE14]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add two anchor buttons to the page, as shown. The second button is within a
    `div` tag, which has `data-ajax="false"`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向页面添加两个锚按钮，如下所示。第二个按钮位于具有`data-ajax="false"`属性的`div`标签内：
- en: '[PRE15]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following script to the `<head>` section to invoke the `jqmHijackable()`
    method:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到`<head>`部分以调用`jqmHijackable()`方法：
- en: '[PRE16]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, create `page1.html`, as shown in the following code snippet:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按下面的代码片段创建`page1.html`：
- en: '[PRE17]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In `main.html`, add an event handler for the `mobileinit` event before including
    the reference to `jquery.mobile.js`. This is invoked at the start of the app.
    Set the `$.mobile.ignoreContentEnabled=true` configuration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中，在包含对`jquery.mobile.js`的引用之前，为`mobileinit`事件添加一个事件处理程序。这在应用程序开始时被调用。设置`$.mobile.ignoreContentEnabled=true`配置。
- en: Add two `div` tags to the content of `#main`. Add a link to the external `page1.html`
    file in both these `div` tags. The second `div` tag has the `data-ajax="false"`
    attribute set. Next, bind the `pageinit` event to an event handler, and invoke
    the `jqmHijackable()` method on the anchor element, as shown. This filters and
    provides only those anchor elements that do not have `data-ajax="false"` inherited
    from their parent. So, in the code, `Link 1` is made available. Set its `data-transition`
    attribute to `flip` using the jQuery `attr()` call, as shown in the code. Finally,
    create `page1.html`, and add the **Go Back** link to return to the `#main` page.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`#main`的内容中添加两个`div`标签。在这些`div`标签中都添加一个链接到外部的`page1.html`文件。第二个`div`标签设置了`data-ajax="false"`属性。接下来，将`pageinit`事件绑定到事件处理程序，并在锚元素上调用`jqmHijackable()`方法，如代码所示。这将筛选并提供那些没有继承自父元素的`data-ajax="false"`的锚元素。所以，代码中，`Link
    1`被使可用。使用jQuery的`attr()`调用，将其`data-transition`属性设置为`flip`，如代码所示。最后，创建`page1.html`，并在**Go
    Back**链接返回到`#main`页面。
- en: Now, when you click on **Link 1**, `page1.html` opens with the flip transition.
    But, if you click on **Link 2**, `page1.html` is opened without the flip.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您点击**Link 1**时，`page1.html`将以翻转转场打开。但是，如果您点击**Link 2**，`page1.html`将以无翻转打开。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, **Link 2** opens `page1.html` using `data-ajax="false"`. This
    will clear `main.html` from the DOM. Returning back to `main.html` will load `main.html`
    into the DOM, but will not trigger the `mobileinit` event. This will cause **Link
    1** to not use the flip transition when opening `page1.html`. To work around this
    issue, add the `data-ajax="false"` attribute to return the link in `page1.html`.
    This will reload `main.html` into DOM freshly and trigger the `mobileinit` event.
    Now, moving from `main.html` to `page1.html` via both links works smoothly any
    number of times.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在该教程中，**Link 2**使用`data-ajax="false"`打开`page1.html`。这将从DOM中清除`main.html`。返回到`main.html`将把`main.html`重新加载到DOM中，但不会触发`mobileinit`事件。这将导致**Link
    1**在打开`page1.html`时不使用翻转转场。为了解决这个问题，在`page1.html`中添加`data-ajax="false"`属性以返回链接。这将重新加载`main.html`到全新的DOM中，并触发`mobileinit`事件。现在，通过两个链接从`main.html`到`page1.html`的移动可以顺利进行任意次数。
- en: $.mobile.ignoreContentEnabled configuration
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: $.mobile.ignoreContentEnabled配置
- en: The `jqmHijackable()` method works only when the `$.mobile.ignoreContentEnabled=true`
    configuration is set. The parent node of each element is visited and checked for
    the `data-ajax` value, and any parent that has a `false` setting is removed with
    its child elements from the filtered set.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置`$.mobile.ignoreContentEnabled=true`配置时，`jqmHijackable()`方法只能工作。访问每个元素的父节点并检查`data-ajax`值，任何具有`false`设置的父节点及其子元素将从过滤集中删除。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using `jqmHijackable()` on even a small set of elements is costly, as all the
    parent elements are checked for the `data-ajax` value.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对一小部分元素使用`jqmHijackable()`也很昂贵，因为要检查所有父元素的`data-ajax`值。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using jqmEnhanceable()* recipe
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用jqmEnhanceable()*教程'
- en: Using $.mobile.base
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用$.mobile.base
- en: The `$.mobile.base` object provides the reference to the original document base.
    You can set a custom value on the base object using the `set()` method. You can
    use the `reset()` method to revert to the original value. This recipe shows you
    how to use these utility methods.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.mobile.base`对象提供对原始文档基础的引用。可以使用`set()`方法在基础对象上设置自定义值。可以使用`reset()`方法恢复原始值。本教程展示了如何使用这些实用方法。'
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/09/base` source folder. You
    can launch this code by using the URL: `http://localhost:8080/09/base/main.html`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/09/base`源文件夹中复制此教程的完整代码。可以通过以下网址启动此代码：`http://localhost:8080/09/base/main.html`。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create `main.html` with two buttons, as shown in the following code snippet:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码片段在`main.html`中创建两个按钮：
- en: '[PRE18]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following script to display the document base object values:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下脚本以显示文档基础对象的各个值：
- en: '[PRE19]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Invoke the `$.mobile.base` utility methods in the `pageinit` event handler:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pageinit`事件处理程序中调用`$.mobile.base`实用方法：
- en: '[PRE20]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Add an empty `div` tag with `id="dispdiv"`, and add two buttons (`#changebtn`
    and `#resetbtn`) to `main.html`, as shown. Add a `disp()`function to display the
    current document base and the original document base values in the `#dispdiv`
    div container. You can get the original document base using the `$.mobile.getDocumentBase()`
    method. Invoke the `disp()` function on the `pageinit` event. On first load, the
    base values are displayed as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中添加一个空的`div`标签，`id="dispdiv"`，并添加两个按钮(`#changebtn`和`#resetbtn`)，如所示。添加一个`disp()`函数来显示`#dispdiv`
    div 容器中的当前文档基础和原始文档基础值。您可以使用`$.mobile.getDocumentBase()`方法获取原始文档基础。在`pageinit`事件上调用`disp()`函数。首次加载时，基础值显示如下：
- en: '![How it works...](img/7225_09_05.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_09_05.jpg)'
- en: 'Now, bind the click event of the `#changebtn` to an event handler, and set
    the document base to a custom value using the `$.mobile.base.set()` method. Click
    on the **Set Document Base** button now, and the custom base is displayed, as
    shown in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将`#changebtn`的点击事件绑定到事件处理程序，并使用`$.mobile.base.set()`方法将文档基础设置为自定义值。现在单击**设置文档基础**按钮，自定义基础值将显示，如以下截图所示：
- en: '![How it works...](img/7225_09_06.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_09_06.jpg)'
- en: Bind `#resetbtn` to an event handler, and reset the document base by calling
    the `$.mobile.base.reset()` method. Click on the **Reset Document Base** button
    and you will see that the base value has been reverted.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 将`#resetbtn`绑定到事件处理程序，并通过调用`$.mobile.base.reset()`方法重置文档基础。单击**重置文档基础**按钮，您将看到基础值已恢复。
- en: Parsing an URL
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析URL
- en: The `$.mobile.path` object provides properties and methods that you can use
    to work with URLs. This recipe shows you how to fetch the components of a URL
    using the `$.mobile.path.parseUrl()` method.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.mobile.path`对象提供了您可以使用的属性和方法来处理URL。本配方向您展示了如何使用`$.mobile.path.parseUrl()`方法获取URL的各个组件。'
- en: Getting ready
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/09/parseurl` source folder.
    You can launch this code by using the URL: `http://localhost:8080/09/parseurl/main.html`.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/09/parseurl`源文件夹复制此配方的完整代码。您可以使用以下URL启动此代码：`http://localhost:8080/09/parseurl/main.html`。
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: 'Create `main.html` with an empty `div` tag and an anchor link, as shown in
    the following code snippet:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空的`div`标签和一个锚链接创建`main.html`，如下面的代码片段所示：
- en: '[PRE21]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following script to the `<head>` section to fetch the URL of the anchor
    button when it is clicked:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本添加到`<head>`部分以在单击时获取锚点按钮的URL：
- en: '[PRE22]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following method to display the various components of the URL:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以显示URL的各个组件：
- en: '[PRE23]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Add an empty `div` tag with `id="msgdiv"` to `main.html`. Add a link with a
    complex `href` string, as shown in the code. Create a `dispPath` function that
    takes in a URL string. Here, call the `$.mobile.path.parseUrl` method to obtain
    an object (`#urlcomp`) that contains the various components of the URL. Display
    these URL components in the `#msgdiv` div container. When the app is first loaded,
    call the `dispPath()` method in the `pageinit` event handler, and pass it to the
    document URL parameter `got`, by calling the `$.mobile.getDocumentUrl()` method.
    The following screenshot is displayed on first load:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 向`main.html`添加一个空的`div`标签，`id="msgdiv"`。添加一个带有复杂`href`字符串的链接，如代码所示。创建一个`dispPath`函数，接受一个URL字符串。在这里，调用`$.mobile.path.parseUrl`方法来获取包含URL各个组件的对象(`#urlcomp`)。在`#msgdiv`
    div容器中显示这些URL组件。当应用程序首次加载时，在`pageinit`事件处理程序中调用`dispPath()`方法，并将其传递给文档URL参数`got`，通过调用`$.mobile.getDocumentUrl()`方法。首次加载时显示以下截图：
- en: '![How it works...](img/7225_09_07.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7225_09_07.jpg)'
- en: 'Next, add an event handler for the `click` event of the anchor link. Invoke
    the `dispPath()` function, and pass it the `href` attribute as the parameter.
    Get the `href` attribute by calling the jQuery `attr("href")` method on the anchor
    object. Finally, call the `event.preventDefault()` and `event.stopPropagation()`
    methods to prevent the default action of the click event. Now, when you click
    on **Link 1**, the URL components of the complex `href` attribute are displayed
    as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为锚链接的`click`事件添加一个事件处理程序。调用`dispPath()`函数，并将`href`属性作为参数传递给它。通过在锚对象上调用jQuery的`attr("href")`方法来获取`href`属性。最后，调用`event.preventDefault()`和`event.stopPropagation()`方法来阻止点击事件的默认操作。现在，当你点击**Link
    1**时，复杂`href`属性的URL组件将显示如下：
- en: '![How it works...](img/7225_09_08.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_09_08.jpg)'
- en: There's more...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `$.mobile.parseUrl()` method returns an object that contains the string
    values of the various URL components as follows; empty strings are stored when
    a particular URL component is not used:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.mobile.parseUrl()`方法返回一个包含各种URL组件的字符串值的对象，如下所示；当特定的URL组件未被使用时，存储空字符串：'
- en: '`href`: This is the original URL that was parsed'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`href`：这是被解析的原始URL'
- en: '`hrefNoHash`: This is the `href` attribute without the hash component'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hrefNoHash`：这是没有哈希组件的`href`属性'
- en: '`hrefNoSearch`: This is the `href` attribute without the search query and hash'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hrefNoSearch`：这是没有查询字符串和哈希的`href`属性'
- en: '`domain`: This has the protocol and authority components'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`：这包含协议和主机部分'
- en: '`protocol`: This is the protocol (includes the `:` character)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protocol`：这是协议（包括`:`字符）'
- en: '`authority`: This has the username, password, and host components'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authority`：这包含用户名、密码和主机部分'
- en: '`username`: This is the username'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`：这是用户名'
- en: '`password`: This is the password'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`：这是密码'
- en: '`host`: This is the host and port'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host`：这是主机和端口'
- en: '`hostname`: This is the name of the host'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname`：这是主机名'
- en: '`port`: This is the port (can be empty if the protocol uses its default port)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：这是端口（如果协议使用其默认端口，则可能为空）'
- en: '`pathname`: This is the path of the file or directory referenced'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathname`：这是所引用文件或目录的路径'
- en: '`directory`: This is the directory part of the pathname without filename'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`directory`：这是不带文件名的路径名的目录部分'
- en: '`filename`: This is the filename part of the pathname without directory'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filename`：这是不带目录的路径名的文件名部分'
- en: '`hash`: This is the hash component (includes the `#` character)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hash`：这是哈希组件（包括`#`字符）'
- en: '`search`: This is the query component (includes the `?` character)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search`：这是查询组件（包括`?`字符）'
- en: See also
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using $.mobile.path utility methods* recipe
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用$.mobile.path实用方法*教程'
- en: Using $.mobile.path utility methods
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`$.mobile.path`实用方法
- en: This recipe shows you how to use the utility methods provided by the `$.mobile.path`
    object in your app.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程向你展示如何在你的应用程序中使用`$.mobile.path`对象提供的实用方法。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/09/path` source folder. You
    can launch this code by using the URL: `http://localhost:8080/09/path/main.html`.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/09/path`源文件夹中复制本教程的完整代码。你可以使用URL`http://localhost:8080/09/path/main.html`来启动此代码。
- en: How to do it...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the `main.html` page with four anchor links, as shown in the following
    code snippet:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码片段在`main.html`页面上创建四个锚链接：
- en: '[PRE24]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Add the following script to the `<head>` section to get the URL of the link
    clicked.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<head>`部分添加以下脚本以获取点击链接的URL。
- en: '[PRE25]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the `disppath()` function to display the output of the `$.mobile.path`
    utility methods:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`disppath()`函数以显示`$.mobile.path`实用方法的输出：
- en: '[PRE26]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Add an empty div tag with `id="msgdiv"` to `main.html`. Add four links with
    different URLs, as shown in the code. Add script to the `<head>` section to obtain
    the original document URL (`#docurl`) of the page using the `$.mobile.getDocumentUrl()`
    method in the `pageinit` event handler. Use this URL as the reference point for
    comparison in this recipe.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.html`中添加一个带有`id="msgdiv"`的空div标签。添加四个不同URL的链接，如代码所示。在`<head>`部分添加脚本，以在`pageinit`事件处理程序中使用`$.mobile.getDocumentUrl()`方法获取页面的原始文档URL（`#docurl`）。使用此URL作为本教程中的比较参考点。
- en: Next, add an event handler for the `click` event of the four anchor links. Invoke
    the `dispPath()` function, and pass it the `link` href attribute as the parameter.
    You can obtain the `href` attribute by calling the jQuery `attr("href")` method
    on the anchor object. Also call the `event.preventDefault()` and `event.stopPropagation()`
    methods in this event handler to prevent any further action on the `click` event.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为四个锚链接的`click`事件添加事件处理程序。调用`dispPath()`函数，并将`link`的href属性作为参数传递给它。你可以通过调用锚对象上的jQuery`attr("href")`方法来获取`href`属性。还要在此事件处理程序中调用`event.preventDefault()`和`event.stopPropagation()`方法，以防止`click`事件上的任何进一步操作。
- en: In the `dispPath` function, call the `$.mobile.path.parseUrl` method to obtain
    the `href` component of the URL passed in. Now, invoke the various `$.mobile.path`
    utility methods, and display their outputs in the `#msgdiv` div container, as
    shown in the code. Call the `isRelativeUrl()` method to check if the URL passed
    in is relative. Convert it to an absolute value using the `makePathAbsolute()`
    and `makeUrlAbsolute()` methods. The original document URL is used as reference
    for these conversions.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dispPath`函数中，调用`$.mobile.path.parseUrl`方法来获取传入URL的`href`组件。现在，调用各种`$.mobile.path`实用方法，并在代码中显示它们的输出在`#msgdiv`
    div容器中。使用`isRelativeUrl()`方法检查传入的URL是否是相对的。使用`makePathAbsolute()`和`makeUrlAbsolute()`方法将其转换为绝对值。原始文档URL用作这些转换的参考。
- en: When the page loads, you will see four link buttons. Click on the first link
    `http://localhost:8080/09/path/main.html`, and an output similar to the following
    screenshot will be shown. The URL is in the same domain as the reference URL,
    and the URL is also absolute.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时，你将看到四个链接按钮。点击第一个链接`http://localhost:8080/09/path/main.html`，将显示类似以下截图的输出。该URL与参考URL处于同一域中，并且该URL也是绝对的。
- en: '![How it works...](img/7225_09_09.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_09_09.jpg)'
- en: 'The second link, `http://localhost:8080/09/base/`, points to a folder. The
    following output is seen; the domain is same and the URL is absolute:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '第二个链接，`http://localhost:8080/09/base/`，指向一个文件夹。见下输出；域名相同且URL为绝对： '
- en: '![How it works...](img/7225_09_10.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_09_10.jpg)'
- en: The third link, `page1.html`, is a relative URL. The absolute path and the absolute
    URL are computed using the reference URL and displayed, as shown in the following
    screenshot; the **Same Domain** value is **false** here.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个链接，`page1.html`，是一个相对URL。使用参考URL计算并显示绝对路径和绝对URL，如下截图所示；这里的**Same Domain**值为**false**。
- en: '![How it works...](img/7225_09_11.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_09_11.jpg)'
- en: 'The final link points to the parent directory, `../`, and is again a relative
    URL. The absolute path and URL is computed using the reference URL, and is displayed
    as shown in the following screenshot; the **Same Domain** value is **false** again:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个链接指向父目录，`../`，再次是一个相对URL。使用参考URL计算绝对路径和URL，并如下截图所示显示；**Same Domain**值再次为**false**：
- en: '![How it works...](img/7225_09_12.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7225_09_12.jpg)'
- en: There's more...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `$.mobile.path` utility methods used in this recipe are as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中使用的`$.mobile.path`实用方法如下：
- en: '`isAbsoluteUrl`: Checks if a given URL is absolute'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isAbsoluteUrl`：检查给定的URL是否为绝对'
- en: '`isRelativeUrl`: Checks if a given URL is relative'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isRelativeUrl`：检查给定的URL是否为相对的'
- en: '`makePathAbsolute`: Converts a relative path to absolute; the method uses a
    reference path argument for the conversion'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`makePathAbsolute`：将相对路径转换为绝对路径；该方法使用参考路径参数进行转换'
- en: '`makeUrlAbsolute`: Converts a relative URL to absolute; the method uses a reference
    URL argument for the conversion'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`makeUrlAbsolute`：将相对URL转换为绝对URL；该方法使用参考URL参数进行转换'
- en: '`isSameDomain`: Checks if two URLs belong to the same domain'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSameDomain`：检查两个URL是否属于同一个域'
- en: See also
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Parsing an URL* recipe
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*解析URL*配方'
- en: Using silent scrolling
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静默滚动
- en: You can use the `$.mobile.silentScroll` method to scroll to any vertical position
    on your page, without triggering the scroll event listeners. This recipe shows
    you how to use silent scrolling.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`$.mobile.silentScroll`方法滚动到页面上的任何垂直位置，而不触发滚动事件监听器。此配方向你展示了如何使用静默滚动。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Copy the full code of this recipe from the `code/09/silentscroll` source folder.
    You can launch this code by using the URL: `http://localhost:8080/09/silentscroll/main.html`.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 从`code/09/silentscroll`源文件夹中复制此配方的完整代码。你可以使用URL`http://localhost:8080/09/silentscroll/main.html`启动此代码。
- en: How to do it...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create `main.html` with an empty `div` tag and two buttons that will be used
    to scroll to the top and bottom of the page:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建带有空的 `div` 标签和两个按钮的 `main.html`，这些按钮将用于滚动到页面的顶部和底部：
- en: '[PRE27]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following script to the `<head>` section to create a lengthy page:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<head>` 部分添加以下脚本以创建一个长度较长的页面：
- en: '[PRE28]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, based on the button clicked, scroll to the top or bottom of the page:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，根据点击的按钮，滚动到页面的顶部或底部：
- en: '[PRE29]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: 'Add two buttons with IDs `bottombtn` and `topbtn` to `main.html`. Create an
    empty `div` tag with `id="dispdiv"`, and populate it with some lengthy content.
    Here, a script is used on the `pageinit` event to add 100 lines of text in a loop
    to `#dispdiv`. The page is initially displayed as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个 ID 分别为 `bottombtn` 和 `topbtn` 的按钮添加到 `main.html`。创建一个空的带有 `id="dispdiv"`
    的 `div` 标签，并用一些长度较长的内容填充它。这里，使用 `pageinit` 事件上的脚本在循环中添加 100 行文本到 `#dispdiv`。页面最初显示如下：
- en: '![How it works...](img/7225_09_13.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_09_13.jpg)'
- en: 'Bind the `click` event of the `#bottombtn` button to call `$.mobile.silentScroll`
    with a large value (2000px here) as the Y parameter. Now, when you click on the
    **Page Bottom** button, the page scrolls to the Y position (2000px) which is at
    the bottom of the document, as shown in the following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `#bottombtn` 按钮的 `click` 事件绑定到调用 `$.mobile.silentScroll`，并将一个大值（此处为 2000px）作为
    Y 参数。现在，当您点击 **页面底部** 按钮时，页面将滚动到 Y 位置（2000px），该位置位于文档底部，如下面的屏幕截图所示：
- en: '![How it works...](img/7225_09_14.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/7225_09_14.jpg)'
- en: Next, bind the `click` event of the `#topbtn` button, and pass the `$.mobile.defaultHomeScroll`
    property as a parameter to `$.mobile.silentScroll`. Now, click on the **Page Top**
    button, and the page scrolls back to the top.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，绑定 `#topbtn` 按钮的 `click` 事件，并将 `$.mobile.defaultHomeScroll` 属性作为参数传递给 `$.mobile.silentScroll`。现在，点击
    **页面顶部** 按钮，页面将滚动回顶部。
- en: There's more...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `silentScroll` method does not invoke the scroll event listeners. Add the
    following code to verify that the alert is not shown when you click on any of
    the buttons. But the alert is shown when you use the scrollbar.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`silentScroll` 方法不会触发滚动事件监听器。添加以下代码以验证点击任何按钮时不显示警报。但是使用滚动条时会显示警报。'
- en: '[PRE30]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The $.mobile.defaultHomeScroll Property
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`$.mobile.defaultHomeScroll` 属性'
- en: The `$.mobile.defaultHomeScroll` property used in this recipe is internally
    used by the jQuery Mobile framework to scroll to the top of the page. This value
    is obtained from the browser using the `$.support.scrollTop` property. If this
    value is not `0`, the framework sets it to `0`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中使用的 `$.mobile.defaultHomeScroll` 属性是 jQuery Mobile 框架内部使用的，用于滚动到页面顶部。此值是使用
    `$.support.scrollTop` 属性从浏览器获取的。如果此值不为 `0`，框架会将其设置为 `0`。
- en: See also
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using Scroll Events* recipe in [Chapter 8](ch08.html "Chapter 8. Events"),
    *Events*
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 8 章](ch08.html "第 8 章. 事件") 的 *使用滚动事件* 示例，*事件*'
