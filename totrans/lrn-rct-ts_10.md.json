["```js\n    query {\n    ```", "```js\n      viewer {\n    ```", "```js\n        name\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    query {\n    ```", "```js\n      viewer {\n    ```", "```js\n        name\n    ```", "```js\n        avatarUrl\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    query {\n    ```", "```js\n      repository (owner:\"facebook\", name:\"react\") {\n    ```", "```js\n        id\n    ```", "```js\n        name\n    ```", "```js\n        description\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    query {\n    ```", "```js\n      repository (owner:\"facebook\", name:\"react\") {\n    ```", "```js\n        id\n    ```", "```js\n        name\n    ```", "```js\n        description\n    ```", "```js\n        stargazers {\n    ```", "```js\n          totalCount\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    {\n    ```", "```js\n      \"owner\": \"facebook\",\n    ```", "```js\n      \"name\": \"react\"\n    ```", "```js\n    }\n    ```", "```js\n    query ($owner: String!, $name: String!) {\n    ```", "```js\n      repository (owner:$owner, name:$name) {\n    ```", "```js\n        ...\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    \"MDEwOlJlcG9zaXRvcnkyMDkyOTAyNQ==\"\n    ```", "```js\n    {\n    ```", "```js\n      \"repoId\": \"MDEwOlJlcG9zaXRvcnkyMDkyOTAyNQ==\"\n    ```", "```js\n    }\n    ```", "```js\n    mutation ($repoId: ID!) {\n    ```", "```js\n      addStar(input: { starrableId: $repoId }) {\n    ```", "```js\n        starrable {\n    ```", "```js\n          stargazers {\n    ```", "```js\n            totalCount\n    ```", "```js\n          }\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    REACT_APP_GITHUB_URL = https://api.github.com/graphql\n    ```", "```js\n    REACT_APP_GITHUB_PAT = your-token\n    ```", "```js\n    export type ViewerData = {\n    ```", "```js\n      name: string;\n    ```", "```js\n      avatarUrl: string;\n    ```", "```js\n    };\n    ```", "```js\n    import { ViewerData } from './types';\n    ```", "```js\n    export const GET_VIEWER_QUERY = `\n    ```", "```js\n      query {\n    ```", "```js\n        viewer {\n    ```", "```js\n          name\n    ```", "```js\n          avatarUrl\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    `;\n    ```", "```js\n    type GetViewerResponse = {\n    ```", "```js\n      data: {\n    ```", "```js\n        viewer: ViewerData;\n    ```", "```js\n      };\n    ```", "```js\n    };\n    ```", "```js\n    export async function getViewer() {\n    ```", "```js\n      const response = await fetch(\n    ```", "```js\n        process.env.REACT_APP_GITHUB_URL!\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export async function getViewer() {\n    ```", "```js\n      const response = await fetch(\n    ```", "```js\n        process.env.REACT_APP_GITHUB_URL!,\n    ```", "```js\n        {\n    ```", "```js\n          body: JSON.stringify({\n    ```", "```js\n            query: GET_VIEWER_QUERY\n    ```", "```js\n          }),\n    ```", "```js\n          headers: {\n    ```", "```js\n            'Content-Type': 'application/json'\n    ```", "```js\n          }\n    ```", "```js\n        }\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export async function getViewer() {\n    ```", "```js\n      const response = await fetch(\n    ```", "```js\n        process.env.REACT_APP_GITHUB_URL!,\n    ```", "```js\n        {\n    ```", "```js\n          method: 'POST',\n    ```", "```js\n          body: ...,\n    ```", "```js\n          headers: ...,\n    ```", "```js\n        }\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export async function getViewer() {\n    ```", "```js\n      const response = await fetch(\n    ```", "```js\n        process.env.REACT_APP_GITHUB_URL!,\n    ```", "```js\n        {\n    ```", "```js\n          ...,\n    ```", "```js\n          headers: {\n    ```", "```js\n            'Content-Type': 'application/json',\n    ```", "```js\n            Authorization: `bearer ${process.env.REACT_APP_          GITHUB_PAT}`\n    ```", "```js\n          },\n    ```", "```js\n        }\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export async function getViewer() {\n    ```", "```js\n      const response = await fetch(\n    ```", "```js\n        ...\n    ```", "```js\n      );\n    ```", "```js\n      const body = (await response.json()) as unknown;\n    ```", "```js\n      assertIsGetViewerResponse(body);\n    ```", "```js\n      return body.data;\n    ```", "```js\n    }\n    ```", "```js\n    npm i @tanstack/react-query\n    ```", "```js\n    import { useQuery } from '@tanstack/react-query';\n    ```", "```js\n    import { getViewer } from './api/getViewer';\n    ```", "```js\n    export function Header() {\n    ```", "```js\n      const { isLoading, data } = useQuery(['viewer'],     getViewer);\n    ```", "```js\n    }\n    ```", "```js\n    export function Header() {\n    ```", "```js\n      const { isLoading, data } = useQuery(['viewer'],     getViewer);\n    ```", "```js\n      if (isLoading || data === undefined) {\n    ```", "```js\n        return <div>...</div>;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    export function Header() {\n    ```", "```js\n      ...\n    ```", "```js\n      return (\n    ```", "```js\n        <header className=\"flex flex-col items-center text-      slate-50 bg-slate-900 h-40 p-5\">\n    ```", "```js\n          <img\n    ```", "```js\n            src={data.viewer.avatarUrl}\n    ```", "```js\n            alt=\"Viewer\"\n    ```", "```js\n            className=\"rounded-full w-16 h-16\"\n    ```", "```js\n          />\n    ```", "```js\n          <div>{data.viewer.name}</div>\n    ```", "```js\n          <h1 className=\"text-xl font-bold\">GitHub Search</        h1>\n    ```", "```js\n        </header>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    import {\n    ```", "```js\n      QueryClient,\n    ```", "```js\n      QueryClientProvider,\n    ```", "```js\n    } from '@tanstack/react-query';\n    ```", "```js\n    import { Header } from './Header';\n    ```", "```js\n    const queryClient = new QueryClient();\n    ```", "```js\n    function App() {\n    ```", "```js\n      return (\n    ```", "```js\n        <QueryClientProvider client={queryClient}>\n    ```", "```js\n          <Header />\n    ```", "```js\n        </QueryClientProvider>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export default App;\n    ```", "```js\n    export type SearchCriteria = {\n    ```", "```js\n      org: string,\n    ```", "```js\n      repo: string,\n    ```", "```js\n    };\n    ```", "```js\n    export type RepoData = {\n    ```", "```js\n      repository: {\n    ```", "```js\n        id: string,\n    ```", "```js\n        name: string,\n    ```", "```js\n        description: string,\n    ```", "```js\n        viewerHasStarred: boolean,\n    ```", "```js\n        stargazers: {\n    ```", "```js\n          totalCount: number,\n    ```", "```js\n        },\n    ```", "```js\n      },\n    ```", "```js\n    };\n    ```", "```js\n    import { RepoData, SearchCriteria } from './types';\n    ```", "```js\n    export const GET_REPO = `\n    ```", "```js\n      query GetRepo($org: String!, $repo: String!) {\n    ```", "```js\n        repository(owner: $org, name: $repo) {\n    ```", "```js\n          id\n    ```", "```js\n          name\n    ```", "```js\n          description\n    ```", "```js\n          viewerHasStarred\n    ```", "```js\n          stargazers {\n    ```", "```js\n            totalCount\n    ```", "```js\n          }\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    `;\n    ```", "```js\n    type GetRepoResponse = {\n    ```", "```js\n      data: RepoData;\n    ```", "```js\n    };\n    ```", "```js\n    export async function getRepo(searchCriteria: SearchCriteria) {\n    ```", "```js\n      const response = await fetch(process.env.REACT_APP_    GITHUB_URL!, {\n    ```", "```js\n        method: 'POST',\n    ```", "```js\n        body: JSON.stringify({\n    ```", "```js\n          query: GET_REPO,\n    ```", "```js\n          variables: {\n    ```", "```js\n            org: searchCriteria.org,\n    ```", "```js\n            repo: searchCriteria.repo,\n    ```", "```js\n          },\n    ```", "```js\n        }),\n    ```", "```js\n        headers: {\n    ```", "```js\n          'Content-Type': 'application/json',\n    ```", "```js\n          Authorization: `bearer ${process.env.REACT_APP_        GITHUB_PAT}`,\n    ```", "```js\n        },\n    ```", "```js\n      });\n    ```", "```js\n      const body = (await response.json()) as unknown;\n    ```", "```js\n      assertIsGetRepoResponse(body);\n    ```", "```js\n      return body.data;\n    ```", "```js\n    }\n    ```", "```js\n    type Props = {\n    ```", "```js\n      name: string;\n    ```", "```js\n      description: string;\n    ```", "```js\n      stars: number;\n    ```", "```js\n    };\n    ```", "```js\n    export function FoundRepo({ name, description, stars }: Props) {\n    ```", "```js\n      return (\n    ```", "```js\n        <div className=\"py-4\">\n    ```", "```js\n          <div className=\"flex flex-row items-center justify-        between mb-2\">\n    ```", "```js\n            <h2 className=\"text-xl font-bold\">{name}</h2>\n    ```", "```js\n            <div className=\"px-4 py-2 rounded-xl text-          gray-800 bg-gray-200 font-semibold text-sm flex           align-center w-max\">\n    ```", "```js\n              {stars} Stars\n    ```", "```js\n            </div>\n    ```", "```js\n          </div>\n    ```", "```js\n          <p>{description}</p>\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export const STAR_REPO = `\n    ```", "```js\n      mutation ($repoId: ID!) {\n    ```", "```js\n        addStar(input: { starrableId: $repoId }) {\n    ```", "```js\n          starrable {\n    ```", "```js\n            stargazers {\n    ```", "```js\n              totalCount\n    ```", "```js\n            }\n    ```", "```js\n          }\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    `;\n    ```", "```js\n    export async function starRepo(repoId: string) {\n    ```", "```js\n      const response = await fetch(process.env.REACT_APP_    GITHUB_URL!, {\n    ```", "```js\n        method: 'POST',\n    ```", "```js\n        body: JSON.stringify({\n    ```", "```js\n          query: STAR_REPO,\n    ```", "```js\n          variables: {\n    ```", "```js\n            repoId,\n    ```", "```js\n          },\n    ```", "```js\n        }),\n    ```", "```js\n        headers: {\n    ```", "```js\n          'Content-Type': 'application/json',\n    ```", "```js\n          Authorization: `bearer ${process.env.REACT_APP_        GITHUB_PAT}`,\n    ```", "```js\n        },\n    ```", "```js\n      });\n    ```", "```js\n      await response.json();\n    ```", "```js\n    }\n    ```", "```js\ntype Props = {\n  onClick: () => void;\n};\nexport function StarRepoButton({ onClick }: Props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"mt-2 h-10 px-6 font-semibold bg-black text-        white\"\n      onClick={onClick}\n    >\n      Star\n    </button>\n  );\n}\n```", "```js\n    import { useState } from 'react';\n    ```", "```js\n    import {\n    ```", "```js\n      useQuery,\n    ```", "```js\n      useMutation,\n    ```", "```js\n      useQueryClient,\n    ```", "```js\n    } from '@tanstack/react-query';\n    ```", "```js\n    import { getRepo } from '../api/getRepo';\n    ```", "```js\n    import { starRepo } from '../api/starRepo';\n    ```", "```js\n    import { RepoData, SearchCriteria } from '../api/types';\n    ```", "```js\n    import { SearchRepoForm } from './SearchRepoForm';\n    ```", "```js\n    import { FoundRepo } from './FoundRepo';\n    ```", "```js\n    import { StarRepoButton } from './StarRepoButton';\n    ```", "```js\n    export function RepoPage() {\n    ```", "```js\n      const [searchCriteria, setSearchCriteria] = useState<\n    ```", "```js\n        SearchCriteria | undefined\n    ```", "```js\n      >();\n    ```", "```js\n    }\n    ```", "```js\n    export function RepoPage() {\n    ```", "```js\n      const [searchCriteria, setSearchCriteria] = ...\n    ```", "```js\n      const { data } = useQuery(\n    ```", "```js\n        ['repo', searchCriteria],\n    ```", "```js\n        () => getRepo(searchCriteria as SearchCriteria),\n    ```", "```js\n        {\n    ```", "```js\n          enabled: searchCriteria !== undefined,\n    ```", "```js\n        }\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function RepoPage() {\n    ```", "```js\n      const [searchCriteria, setSearchCriteria] = ...\n    ```", "```js\n      const { data } = useQuery(...);\n    ```", "```js\n      const queryClient = useQueryClient();\n    ```", "```js\n      const { mutate } = useMutation(starRepo, {\n    ```", "```js\n        onSuccess: () => {\n    ```", "```js\n          queryClient.setQueryData<RepoData>(\n    ```", "```js\n            ['repo', searchCriteria],\n    ```", "```js\n            (repo) => {\n    ```", "```js\n              if (repo === undefined) {\n    ```", "```js\n                return undefined;\n    ```", "```js\n              }\n    ```", "```js\n              return {\n    ```", "```js\n                ...repo,\n    ```", "```js\n                viewerHasStarred: true,\n    ```", "```js\n              };\n    ```", "```js\n            }\n    ```", "```js\n          );\n    ```", "```js\n        }\n    ```", "```js\n      });\n    ```", "```js\n    }\n    ```", "```js\n    export function RepoPage() {\n    ```", "```js\n      ...\n    ```", "```js\n      return (\n    ```", "```js\n        <main className=\"max-w-xs ml-auto mr-auto\">\n    ```", "```js\n          <SearchRepoForm onSearch={handleSearch} />\n    ```", "```js\n          {data && (\n    ```", "```js\n            <>\n    ```", "```js\n              <FoundRepo\n    ```", "```js\n                name={data.repository.name}\n    ```", "```js\n                description={data.repository.description}\n    ```", "```js\n                stars={data.repository.stargazers.totalCount}\n    ```", "```js\n              />\n    ```", "```js\n              {!data.repository.viewerHasStarred && (\n    ```", "```js\n                <StarRepoButton onClick={handleStarClick} />\n    ```", "```js\n              )}\n    ```", "```js\n            </>\n    ```", "```js\n          )}\n    ```", "```js\n        </main>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function RepoPage() {\n    ```", "```js\n      ...\n    ```", "```js\n      function handleSearch(search: SearchCriteria) {\n    ```", "```js\n        setSearchCriteria(search);\n    ```", "```js\n      }\n    ```", "```js\n      return ...\n    ```", "```js\n    }\n    ```", "```js\n    export function RepoPage() {\n    ```", "```js\n      ...\n    ```", "```js\n      function handleStarClick() {\n    ```", "```js\n        if (data) {\n    ```", "```js\n          mutate(data.repository.id);\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n      return ...\n    ```", "```js\n    }\n    ```", "```js\n    ...\n    ```", "```js\n    import { RepoPage } from './repoPage/RepoPage';\n    ```", "```js\n    ...\n    ```", "```js\n    function App() {\n    ```", "```js\n      return (\n    ```", "```js\n        <QueryClientProvider client={queryClient}>\n    ```", "```js\n          <Header />\n    ```", "```js\n          <RepoPage />\n    ```", "```js\n        </QueryClientProvider>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\nnpm i @apollo/client graphql\n```", "```js\n    import {\n    ```", "```js\n      ApolloClient,\n    ```", "```js\n      InMemoryCache,\n    ```", "```js\n      ApolloProvider,\n    ```", "```js\n    } from '@apollo/client';\n    ```", "```js\n    const queryClient = new ApolloClient({\n    ```", "```js\n      uri: process.env.REACT_APP_GITHUB_URL!,\n    ```", "```js\n      cache: new InMemoryCache(),\n    ```", "```js\n      headers: {\n    ```", "```js\n        Authorization: `bearer ${process.env.REACT_APP_GITHUB_PAT}`,\n    ```", "```js\n      }\n    ```", "```js\n    });\n    ```", "```js\n    <ApolloProvider client={queryClient}>\n    ```", "```js\n      <Header />\n    ```", "```js\n      <RepoPage />\n    ```", "```js\n    </ApolloProvider>\n    ```", "```js\n    import { gql } from '@apollo/client';\n    ```", "```js\n    export const GET_VIEWER_QUERY = gql`\n    ```", "```js\n      query {\n    ```", "```js\n        viewer {\n    ```", "```js\n          name\n    ```", "```js\n          avatarUrl\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    `;\n    ```", "```js\n    import { useQuery } from '@apollo/client';\n    ```", "```js\n    import { GET_VIEWER_QUERY } from './api/getViewer';\n    ```", "```js\n    const { loading: isLoading, data } = useQuery(\n    ```", "```js\n      GET_VIEWER_QUERY\n    ```", "```js\n    );\n    ```", "```js\n    import { gql } from '@apollo/client';\n    ```", "```js\n    export const GET_REPO = gql`\n    ```", "```js\n      query ...\n    ```", "```js\n    `;\n    ```", "```js\n    import { gql } from '@apollo/client';\n    ```", "```js\n    export const STAR_REPO = gql`\n    ```", "```js\n      mutation ...\n    ```", "```js\n    `;\n    ```", "```js\n    import {\n    ```", "```js\n      useLazyQuery,\n    ```", "```js\n      useMutation,\n    ```", "```js\n      useApolloClient,\n    ```", "```js\n    } from '@apollo/client';\n    ```", "```js\n    import { GET_REPO } from '../api/getRepo';\n    ```", "```js\n    import { STAR_REPO } from '../api/starRepo';\n    ```", "```js\n    const [getRepo, { data }] = useLazyQuery(GET_REPO);\n    ```", "```js\n    const queryClient = useApolloClient();\n    ```", "```js\n    const [starRepo] = useMutation(STAR_REPO, {\n    ```", "```js\n      onCompleted: () => {\n    ```", "```js\n        queryClient.cache.writeQuery({\n    ```", "```js\n          query: GET_REPO,\n    ```", "```js\n          data: {\n    ```", "```js\n            repository: {\n    ```", "```js\n              ...data.repository,\n    ```", "```js\n              viewerHasStarred: true,\n    ```", "```js\n            },\n    ```", "```js\n          },\n    ```", "```js\n          variables: searchCriteria,\n    ```", "```js\n        });\n    ```", "```js\n      },\n    ```", "```js\n    });\n    ```", "```js\n    function handleSearch(search: SearchCriteria) {\n    ```", "```js\n      getRepo({\n    ```", "```js\n        variables: { ...search },\n    ```", "```js\n      });\n    ```", "```js\n      setSearchCriteria(search);\n    ```", "```js\n    }\n    ```", "```js\n    async function handleStarClick() {\n    ```", "```js\n      if (data) {\n    ```", "```js\n        starRepo({ variables: { repoId: data.repository.id } });\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    viewer: {\n    ```", "```js\n      name,\n    ```", "```js\n      email\n    ```", "```js\n    }\n    ```", "```js\n    const response = await fetch(process.env.REACT_APP_API_URL!, {\n    ```", "```js\n      body: JSON.stringify({\n    ```", "```js\n        query: GET_DATA_QUERY,\n    ```", "```js\n      }),\n    ```", "```js\n    });\n    ```", "```js\n    const { loading, data } = useQuery(`query {\n    ```", "```js\n      contact {\n    ```", "```js\n        name\n    ```", "```js\n        email\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    `);\n    ```", "```js\n    query {\n    ```", "```js\n      viewer {\n    ```", "```js\n        name\n    ```", "```js\n        email\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    mutation ($repoId: ID!) {\n    ```", "```js\n      removeStar(input: { starrableId: $repoId }) {\n    ```", "```js\n        starrable {\n    ```", "```js\n          stargazers {\n    ```", "```js\n            totalCount\n    ```", "```js\n          }\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    const response = await fetch(process.env.REACT_APP_API_URL!, {\n    ```", "```js\n      method: 'POST',\n    ```", "```js\n      body: JSON.stringify({\n    ```", "```js\n        query: GET_DATA_QUERY,\n    ```", "```js\n      }),\n    ```", "```js\n    });\n    ```", "```js\n    const queryClient = new ApolloClient({\n    ```", "```js\n      ...,\n    ```", "```js\n      headers: {\n    ```", "```js\n        Authorization: `bearer ${process.env.REACT_APP_ACCESS_TOKEN}`,\n    ```", "```js\n      },\n    ```", "```js\n    });\n    ```", "```js\n    function App() {\n    ```", "```js\n      return (\n    ```", "```js\n        <ApolloProvider\n    ```", "```js\n          client={queryClient}\n    ```", "```js\n        >\n    ```", "```js\n          ...\n    ```", "```js\n        </ApolloProvider>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    const { loading, data } = useQuery(gql`\n    ```", "```js\n      query {\n    ```", "```js\n        viewer {\n    ```", "```js\n          name\n    ```", "```js\n          email\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    `);\n    ```"]