["```js\nimport { useState } from 'react' \n```", "```js\nconst Counter = () => { \n  const [counter, setCounter] = useState<number>(0) \n} \n```", "```js\ntype Operation = 'add' | 'substract'\nconst Counter = () => {\n  const [counter, setCounter] = useState<number>(0)\n  const handleCounter = (operation: Operation) => {\n    if (operation === 'add') {\n      return setCounter(counter + 1)\n    }\n\n    setCounter(counter - 1)\n  }\n} \n```", "```js\nreturn (\n  <p>\n    Counter: {counter} <br />\n    <button onClick={() => handleCounter('add')}>+ Add</button>\n    <button onClick={() => handleCounter('subtract')}>- Subtract</button>\n  </p>\n) \n```", "```js\nnpm install --save-dev eslint-plugin-react-hooks \n```", "```js\nnpm install axios \n```", "```js\nimport axios from 'axios'\nimport { Component } from 'react'\ntype Issue = {\n  number: number\n  title: string\n  state: string\n}\ntype Props = {}\ntype State = { issues: Issue[] }\nclass Issues extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      issues: []\n    }\n  }\n  componentDidMount() {\n    axios.get('https://api.github.com/repos/ContentPI/ContentPI/issues')\n      .then((response: any) => {\n        this.setState({\n          issues: response.data\n        })\n      })\n  }\n  render() {\n    const { issues = [] } = this.state\n    return (\n      <>\n        <h1>ContentPI Issues</h1>\n        {issues.map((issue: Issue) => (\n          <p key={issue.title}>\n            <strong>#{issue.number}</strong>{' '}\n            <a\n              href={`https://github.com/ContentPI/ContentPI/issues/${issue.number}`}\n              target=\"_blank\"\n            >\n              {issue.title}\n            </a>{' '}\n            {issue.state}\n          </p>\n        ))}\n      </>\n    )\n  }\n}\nexport default Issues \n```", "```js\nimport { FC, useState, useEffect } from 'react'\nimport axios from 'axios' \n```", "```js\ntype Issue = {\n  number: number\n  title: string\n  state: string\n} \n```", "```js\nconst Issues: FC = () => {...} \n```", "```js\ntype Props = {\n  propX: string\n  propY: number\n  propZ: boolean \n}\nconst Issues: FC<Props> = () => {...} \n```", "```js\n// The useState hook replace the this.setState method\nconst [issues, setIssues] = useState<Issue[]>([]) \n```", "```js\n// When we use the useEffect hook with an empty array [] on the\n// dependencies (second parameter)\n// this represents the componentDidMount method (will be executed when the\n// component is mounted).\nuseEffect(() => {\n  axios\n    .get('https://api.github.com/repos/ContentPI/ContentPI/issues')\n    .then((response: any) => {\n       // Here we update directly our issue state\n        setIssues(response.data)\n    })\n}, []) \n```", "```js\nreturn (\n  <>\n    <h1>ContentPI Issues</h1>\n    {issues.map((issue: Issue) => (\n        <p key={issue.title}>\n        <strong>#{issue.number}</strong> {' '}\n            <a \n          href={`https://github.com/ContentPI/ContentPI/issues/${issue.number}`}      \n          target=\"_blank\">{issue.title}\n        </a> {' '}\n            {issue.state}\n        </p>\n    ))}\n  </>\n) \n```", "```js\nuseEffect(() => {\n  // Here you perform your side effect\n}, []) \n```", "```js\nuseEffect(() => {\n// When you pass an array of dependencies the useEffect hook will only\n// run if one of the dependencies changes.\n}, [dependencyA, dependencyB]) \n```", "```js\nnpx create-react-app todo --template typescript \n```", "```js\nimport { FC, useState, useEffect, useMemo, useCallback, ChangeEvent } from 'react'\nimport List, { Todo } from './List'\nconst initialTodos: Todo[] = [\n  { id: 1, task: 'Go shopping' },\n  { id: 2, task: 'Pay the electricity bill'}\n]\nconst App: FC = () => {\n  const [todoList, setTodoList] = useState<Todo[]>(initialTodos)\n  const [task, setTask] = useState<string>('')\n  useEffect(() => {\n    console.log('Rendering <App />')\n  })\n  const handleCreate = () => {\n    const newTodo = {\n        id: Date.now(),\n        task\n    }\n\n    // Pushing the new todo to the list\n    setTodoList([...todoList, newTodo])\n\n    // Resetting input value\n    setTask('')\n  }\n  return (\n    <>\n        <input\n            type=\"text\"\n            value={task}\n            onChange={(e: ChangeEvent<HTMLInputElement>) => setTask(e.target.value)}\n        />\n        <button onClick={handleCreate}>Create</button>\n        <List todoList={todoList} />\n    </>\n  )\n}\nexport default App \n```", "```js\nimport { FC, useEffect } from 'react'\nimport Task from './Task'\nexport type Todo = {\n  id: number\n  task: string\n}\ninterface Props {\n  todoList: Todo[]\n}\nconst List: FC<Props> = ({ todoList }) => {\n  useEffect(() => {\n    // This effect is executed every new render\n    console.log('Rendering <List />')\n  })\n  return (\n    <ul>\n        {todoList.map((todo: Todo) => (\n            <Task key={todo.id} id={todo.id} task={todo.task} />\n        ))}\n    </ul>\n  )\n}\nexport default List \n```", "```js\nimport { FC, useEffect } from 'react'\ninterface Props {\n  id: number\n  task: string\n}\nconst Task: FC<Props> = ({ task }) => {\n  useEffect(() => {\n    console.log('Rendering <Task />', task)\n  })\n  return (\n    <li>{task}</li>\n  )\n}\nexport default Task \n```", "```js\nimport { FC, useEffect, memo } from 'react'\n...\nexport default memo(List) \n```", "```js\nimport { FC, useEffect, memo } from 'react'\n...\nexport default memo(Task) \n```", "```js\nconst [term, setTerm] = useState('') \n```", "```js\nconst handleSearch = () => {\n  setTerm(task)\n} \n```", "```js\nconst filteredTodoList = todoList.filter((todo: Todo) => {\n  console.log('Filtering...')\n  return todo.task.toLowerCase().includes(term.toLowerCase())\n}) \n```", "```js\n<button onClick={handleSearch}>Search</button> \n```", "```js\nconst filteredTodoList = useMemo(() => SomeProcessHere, []) \n```", "```js\nconst filteredTodoList = useMemo(() => todoList.filter((todo: Todo) => {\n  console.log('Filtering...')\n  return todo.task.toLowerCase().includes(term.toLowerCase())\n}), []) \n```", "```js\nconst filteredTodoList = useMemo(() => todoList.filter((todo: Todo) => {\n  console.log('Filtering...')\n  return todo.task.toLowerCase().includes(term.toLowerCase())\n}), [term, todoList]) \n```", "```js\nconst handleDelete = (taskId: number) => {\n  const newTodoList = todoList.filter((todo: Todo) => todo.id !== taskId)\n  setTodoList(newTodoList)\n} \n```", "```js\n<List todoList={filteredTodoList} handleDelete={handleDelete} /> \n```", "```js\ninterface Props {\n  todoList: Todo[]\n  handleDelete: any\n} \n```", "```js\nconst List: FC<Props> = ({ todoList, handleDelete }) => {\n  useEffect(() => {\n    // This effect is executed every new render\n    console.log('Rendering <List />')\n  })\n  return (\n    <ul>\n        {todoList.map((todo: Todo) => (\n        <Task\n          key={todo.id}\n          id={todo.id}\n          task={todo.task}\n          handleDelete={handleDelete}\n            />\n        ))}\n    </ul>\n  )\n} \n```", "```js\ninterface Props {\n  id: number\n  task: string\n  handleDelete: any\n}\nconst Task: FC<Props> = ({ id, task, handleDelete }) => {\n  useEffect(() => {\n    console.log('Rendering <Task />', task)\n  })\n  return (\n    <li>{task} <button onClick={() => handleDelete(id)}>X</button></li>\n  )\n} \n```", "```js\nconst handleDelete = useCallback(() => SomeFunctionDefinition, []) \n```", "```js\nconst handleDelete = useCallback((taskId: number) => {\n  const newTodoList = todoList.filter((todo: Todo) => todo.id !== taskId)\n  setTodoList(newTodoList)\n}, [todoList]) \n```", "```js\nconst printTodoList = () => {\n  console.log('Changing todoList')\n}\nuseEffect(() => {\n  printTodoList()\n}, [todoList]) \n```", "```js\nconst printTodoList = () => {\n  console.log('Changing todoList', todoList)\n} \n```", "```js\nuseEffect(() => {\n  printTodoList()\n}, [todoList, printTodoList]) \n```", "```js\nconst printTodoList = useCallback(() => {\n  console.log('Changing todoList', todoList)\n}, [todoList]) \n```", "```js\n npx create-react-app reducer --template typescript \n```", "```js\nimport Notes from './Notes'\nfunction App() {\n  return (\n    <Notes />\n  )\n}\nexport default App \n```", "```js\nImport { useReducer, useState, ChangeEvent } from 'react' \n```", "```js\ntype Note = {\n  id: number\n  note: string\n}\ntype Action = {\n  type: string\n  payload?: any\n}\ntype ActionTypes = {\n  ADD: 'ADD'\n  UPDATE: 'UPDATE'\n  DELETE: 'DELETE'\n}\nconst actionType: ActionTypes = {\n  ADD: 'ADD',\n  DELETE: 'DELETE',\n  UPDATE: 'UPDATE'\n} \n```", "```js\nconst initialNotes: Note[] = [\n  {\n    id: 1,\n    note: 'Note 1'\n  },\n  {\n    id: 2,\n    note: 'Note 2'\n  }\n] \n```", "```js\nconst reducer = (state: Note[], action: Action) => {\n  switch (action.type) {\n    case actionType.ADD:\n        return [...state, action.payload]\n    case actionType.DELETE:\n        return state.filter(note => note.id !== action.payload)\n\n    case actionType.UPDATE:\n        const updatedNote = action.payload\n        return state.map((n: Note) => n.id === updatedNote.id ? updatedNote : n)\n\n    default:\n          return state\n  }\n} \n```", "```js\nconst Notes = () => {\n  const [notes, dispatch] = useReducer(reducer, initialNotes)\n  const [note, setNote] = useState<string>('')\n  ...\n} \n```", "```js\nconst handleSubmit = (e: ChangeEvent<HTMLInputElement>) => {\n  e.preventDefault()\n  const newNote = {\n    id: Date.now(),\n    note\n  }\n  dispatch({ type: actionType.ADD, payload: newNote })\n} \n```", "```js\nreturn (\n  <div>\n    <h2>Notes</h2>\n    <ul>\n        {notes.map((n: Note) => (\n            <li key={n.id}>\n               {n.note} {' '}\n\n            <button onClick={() => dispatch({ type: actionType.DELETE, payload: n.id })}>\n           X\n         </button>\n         <button \n                 onClick={() => dispatch({ type: actionType.UPDATE, payload: {...n, note} })}\n         >\n            Update\n         </button>\n           </li>\n        ))}\n    </ul>\n\n    <form onSubmit={handleSubmit}>\n        <input \n            placeholder=\"New note\"\n            value={note}\n            onChange={e => setNote(e.target.value)}\n        />\n    </form>\n  </div>\n)\nexport default Notes \n```"]