["```js\nexport const getStaticPaths = async () => {\n  const jobs = await getJobs();\n  const paths = jobs.map((job) => ({\n     params: { jobId: job.id }\n  }));\n  return { paths, fallback: true };\n}\n```", "```js\nexport const getStaticProps = async ({\n  params,\n}: GetStaticPropsContext) => {\n  const jobId = params?.jobId as string;\n  const job = await getJob({ jobId });\n  return {\n    props: {\n      job\n    },\n    revalidate: 60,\n  };\n};\n```", "```js\nimport { Hydrate, QueryClient, QueryClientProvider }\n  from '@tanstack/react-query'\nexport const App = ({ Component, pageProps }) => {\n  const [queryClient] = React.useState(() => new\n    QueryClient())\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Hydrate state={pageProps.dehydratedState}>\n        <Component {...pageProps} />\n      </Hydrate>\n    </QueryClientProvider>\n  )\n}\n```", "```js\nexport const getServerSideProps = async () => {\n     const queryClient = new QueryClient()\n  await queryClient.prefetchQuery(['jobs'], getJobs)\n  return {\n    props: {\n      dehydratedState: dehydrate(queryClient),\n    },\n  }\n}\n```", "```js\nconst JobsPage = () => {\n     const jobs = useJobs();\n     // ...\n}\n```", "```js\nconst getQueryKeys = (baseKey: string) => {\n  return {\n    all: [baseKey],\n    many: (params: Record<string, unknown>) => [baseKey,\n      params],\n    one: (id: string) => [baseKey, id],\n  };\n};\n```", "```js\nexport const queryKeys = {\n  auth: {\n    authUser: ['auth-user'],\n  },\n  jobs: getQueryKeys('jobs'),\n  organizations: {\n    one: getQueryKeys('organizations').one,\n  },\n};\n```", "```js\nconst useJobs = () => {\n     const { data, isLoading } = useQuery({\n    queryKey: queryKeys.jobs.many(params),\n    queryFn: () => getJobs({ params }),\n    enabled: !!params.organizationId,\n    initialData: [],\n  });\n  //...\n}\n```", "```js\n- my-component\n     - index.ts\n     - my-component.tsx\n```", "```js\nimport { z } from 'zod';\nimport { yupResolver } from '@hookform/resolvers/yup';\nconst schema = z.object({\n  email: z.string().min(1, 'Required'),\n  password: z.string().min(1, 'Required'),\n});\nconst LoginForm  = () => {\n     const { register, handleSubmit } = useForm({\n          resolver: yupResolver(schema);\n     })\n     // ...\n     return (\n          <Stack\n      as=\"form\"\n      onSubmit={handleSubmit(onSubmit)}\n      spacing=\"5\"\n      w=\"full\"\n    >\n      <InputField\n        label=\"Email\"\n        type=\"email\"\n        {...register('email')}\n        error={formState.errors['email']}\n      />\n      <InputField\n        label=\"Password\"\n        type=\"password\"\n        {...register('password')}\n        error={formState.errors['password']}\n      />\n      <Button\n        isLoading={login.isLoading}\n        isDisabled={login.isLoading}\n        type=\"submit\"\n      >\n        Log in\n      </Button>\n    </Stack>\n     )\n}\n```", "```js\nimport { z } from 'zod';\nconst JobSchema = z.object({\n     position: z.string(),\n     info: z.string(),\n     location: z.string()\n});\n```", "```js\ntype Job = z.infer<typeof JobSchema>\n```", "```js\nconst getJob = async () => {\n     const jobResponse = await apiClient.get('/jobs/123');\n     const job = JobSchema.parse(jobResponse);\n     return job;\n}\n```", "```js\nimport { request, gql } from \"graphql-request\";\nimport { useQuery } from '@tanstack/react-query';\nconst jobsQuery = gql`\n     query {\n          jobs {\n               data {\n                    position\n                    department\n                    location\n               }\n          }\n     }\n`;\nconst getJobs = () => {\n     return request('/api/graphql', jobsQuery);\n};\nconst useJobs = () => {\n     const { data, isLoading } = useQuery({\n          queryKey: ['jobs'],\n          queryFn: getJobs\n     })\n     // ...\n};\n```"]