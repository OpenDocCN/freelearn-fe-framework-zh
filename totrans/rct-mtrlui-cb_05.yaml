- en: Expansion Panels - Group Content into Panel Sections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展开面板 - 将内容分组到面板部分
- en: 'In this chapter, you''ll learn about the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Stateful expansion panels
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态化展开面板
- en: Formatting panel headers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化面板标题
- en: Scrollable panel content
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可滚动面板内容
- en: Lazy loading panel content
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 懒加载面板内容
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Expansion panels are containers for your content. Usually, screens in your Material-UI
    applications are divided into sections so that users can mentally organize the
    information that they're looking at. The `ExpansionPanel` component is one way
    that you can create these sections. You can even combine expansion panels with
    other organizational components, such as tabs, to provide a consistent organizational
    layout for your users.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 展开面板是内容的容器。通常，你的 Material-UI 应用程序中的屏幕被分成几个部分，以便用户可以心理上组织他们正在查看的信息。`ExpansionPanel`
    组件是创建这些部分的一种方式。你甚至可以将展开面板与其他组织组件（如标签页）结合使用，为用户提供一致的组织布局。
- en: Stateful expansion panels
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态化展开面板
- en: You can use component the state to control every aspect of your expansion panels.
    For example, each panel could be represented as an object in an array, where each
    object has panel title and panel content properties. There are other aspects you
    can control, such as visibility and disabled panels.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用组件状态来控制展开面板的各个方面。例如，每个面板可以表示为数组中的一个对象，其中每个对象都有面板标题和面板内容属性。你还可以控制其他方面，如可见性和禁用面板。
- en: How to do it...
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that your component has a state for rendering expansion panels.
    The panels themselves are objects in an array. Here''s the code to do this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的组件有一个用于渲染展开面板的状态。面板本身是数组中的对象。以下是实现这一功能的代码：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you load the screen, here''s what you''ll see:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你加载屏幕时，你会看到以下内容：
- en: '![](img/619e9f53-4ea0-41f9-9a12-4124bb23069d.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/619e9f53-4ea0-41f9-9a12-4124bb23069d.png)'
- en: 'Here''s what the first two panels look like when they''re expanded:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当前两个面板展开时，它们看起来是这样的：
- en: '![](img/1db1e8bd-1595-434f-af97-4080b3364142.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1db1e8bd-1595-434f-af97-4080b3364142.png)'
- en: The third panel cannot be expanded because it's disabled.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第三面板无法展开，因为它已被禁用。
- en: How it works...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The state defines everything about expansion panels. This includes the panel
    `title`, the panel `content` that''s displayed when the panel is expanded, the
    `disabled` property, and whether or not the panel is `hidden`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 状态定义了展开面板的所有内容。这包括面板 `标题`、当面板展开时显示的 `内容`、`disabled` 属性以及面板是否 `隐藏`：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `disabled` property marks the panel as disabled. This means that the user
    can see the panel `title`, but it cannot be expanded. It's also visually marked
    as not being expandable. The `hidden` property ensures that the panel isn't rendered
    at all. This is useful for cases when you don't want the user to know about it
    at all.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`disabled` 属性将面板标记为禁用。这意味着用户可以看到面板 `标题`，但不能展开它。它也被视觉上标记为不可展开。`hidden` 属性确保面板根本不会被渲染。这在你不希望用户知道它的情况下非常有用。'
- en: 'Next, let''s look at the code that renders each panel based on the component
    state:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看根据组件状态渲染每个面板的代码：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `filter()` call removes panels from the array that have the `hidden` property
    set to true.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter()` 调用从数组中移除了设置 `hidden` 属性为 true 的面板。'
- en: An alternative to using a `hidden` property to hide panels is removing them
    completely from the array. It really depends on personal preference—toggling a
    property value versus adding and removing values from an array.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `hidden` 属性隐藏面板的替代方法是完全从数组中移除它们。这完全取决于个人喜好——切换属性值与从数组中添加和移除值。
- en: Each panel is mapped to `ExpansionPanel` components using `map()`. The expansion
    panel uses an `ExpansionPanelSummary` component for the title and the content
    goes into the `ExpansionPanelDetails` component.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个面板都使用 `map()` 函数映射到 `ExpansionPanel` 组件。展开面板使用 `ExpansionPanelSummary` 组件作为标题，内容则放入
    `ExpansionPanelDetails` 组件中。
- en: There's more...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can also use state to control whether or not a panel is expanded. For example,
    you can use `ExpansionPanel` components to create an *accordion* widget—there's
    always one panel open, and opening another panel closes anything that's open.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用状态来控制面板是否展开。例如，你可以使用 `ExpansionPanel` 组件创建一个 *手风琴* 小部件——始终有一个面板是打开的，打开另一个面板会关闭任何打开的内容。
- en: 'The first step is to add an `expanded` state to determine which panel is open
    at any given time:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是添加一个 `expanded` 状态来确定在任何给定时间哪个面板是打开的：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `expanded` state defaults to `0`, meaning that the first panel is expanded
    by default. As the expanded panels change, the `expanded` state changes to reflect
    the index of the expanded panel. Next, you''ll add an `onChange` handler for the
    `ExpansionPanel` component:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`expanded` 状态默认为 `0`，这意味着第一个面板默认展开。随着展开的面板发生变化，`expanded` 状态也会改变以反映展开面板的索引。接下来，你将为
    `ExpansionPanel` 组件添加一个 `onChange` 处理器：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is a higher-order function—it takes the index of the panel you want to
    expand and returns a function that sets the expanded state when the given panel
    is clicked on. Finally, you can add the new `expanded` state and the `onChange`
    handler to the `ExpansionPanel` component:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个高阶函数——它接受你想要展开的面板的索引，并返回一个在给定面板被点击时设置展开状态的函数。最后，你可以将新的 `expanded` 状态和 `onChange`
    处理器添加到 `ExpansionPanel` 组件中：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `expanded` property is based on the index of the current panel, equaling
    the expanded state of your component. If they're equal, the panel is expanded.
    The `onChange` handler is also assigned to `ExpansionPanel`, which changes the
    expanded state when the panel is clicked on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`expanded` 属性基于当前面板的索引，等于组件的展开状态。如果它们相等，则面板已展开。`onChange` 处理器也被分配给 `ExpansionPanel`，当面板被点击时，它会更改展开状态。'
- en: See also
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` 演示：[https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` API 文档：[https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelSummary` API 文档：[https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelDetails` API 文档：[https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
- en: Formatting panel headers
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化面板标题
- en: Headers in `ExpansionPanel` components can be formatted. Typically, the `Typography`
    component is used to render text within an expansion panel header. This means
    that you can use properties of `Typography` to customize the way that your expansion
    panel headers appear.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` 组件中的标题可以格式化。通常，`Typography` 组件用于渲染面板标题内的文本。这意味着你可以使用 `Typography`
    的属性来自定义你的面板标题的外观。'
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you want the text within your `ExpansionPanel` headers to stand
    out relative to the text in the content section of each panel. You can change
    the `variant` property of the `Typography` component in the `ExpansionPanelSummary`
    component. Here''s the code to do it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要你的 `ExpansionPanel` 标题中的文本相对于每个面板内容部分的文本更加突出。你可以在 `ExpansionPanelSummary`
    组件中更改 `Typography` 组件的 `variant` 属性。以下是实现此功能的代码：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s what the panels look like when the screen loads:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是屏幕加载时面板的外观：
- en: '![](img/7614234f-27ac-4805-8210-fee9bd82f5a2.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7614234f-27ac-4805-8210-fee9bd82f5a2.png)'
- en: 'Here''s what the panels look like when they''re expanded:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是面板展开时的外观：
- en: '![](img/d6aa6746-8f14-4781-94de-356b7f0bfe99.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6aa6746-8f14-4781-94de-356b7f0bfe99.png)'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To make the heading text stand out relative to the text in the `ExpansionPanelDetails`
    component, you only had to change the `variant` property of the `Typography` component
    used in the header. In this case, you're using the `subtitle1` variant, but there
    are a number of other variants that you can use here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要使标题文本相对于 `ExpansionPanelDetails` 组件中的文本更加突出，你只需更改用于标题的 `Typography` 组件的 `variant`
    属性。在这种情况下，你正在使用 `subtitle1` 变体，但这里还有许多其他变体可供选择。
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In addition to formatting header text, you can add other components, such as
    icons. Let''s modify the example to include icons for each panel header. First,
    you''ll import the icons that you need:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了格式化标题文本外，你还可以添加其他组件，例如图标。让我们修改示例以包含每个面板标题的图标。首先，你需要导入所需的图标：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, you''ll add a new icon style that adds space between the icon and text
    in the panel header:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将在面板标题中添加一个新的图标样式，该样式在图标和文本之间添加空间：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lastly, here''s the markup to include the icons that you''ve imported in the
    appropriate panel header:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里提供了包含您已导入的图标在适当的面板标题中的标记：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The icon comes before the `Typography` component in the `ExpansionPanelSummary`
    component. Here''s what the panels look like now:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图标在 `ExpansionPanelSummary` 组件中位于 `Typography` 组件之前。现在面板看起来是这样的：
- en: '![](img/ab4905c1-6cd5-4451-ac16-2255f5424ab6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab4905c1-6cd5-4451-ac16-2255f5424ab6.png)'
- en: 'Here''s what they look like when they''re expanded:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们展开时，它们看起来是这样的：
- en: '![](img/651286e0-c162-4e64-8a73-5ebd5facb047.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/651286e0-c162-4e64-8a73-5ebd5facb047.png)'
- en: By combining iconography and typography, you can make the headers of your expansion
    panels stand out, making your content easier to navigate.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合图标和排版，你可以让你的展开面板的标题更加突出，使你的内容更容易导航。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` 示例：[https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` API 文档：[https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelSummary` API 文档：[https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelDetails` API 文档：[https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
- en: Scrollable panel content
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可滚动面板内容
- en: The height of an `ExpansionPanel` component, when expanded, changes so that
    all of the content is visible on the screen. In cases where you have a lot of
    content in your panels, this isn't ideal because the panel headers aren't visible
    to the user. Instead of having to scroll down the entire page, you can make the
    content within the panel scrollable.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当展开时，`ExpansionPanel` 组件的高度会改变，以便所有内容都能在屏幕上显示。在你面板中有大量内容的情况下，这并不理想，因为面板标题对用户不可见。你不必滚动整个页面，可以使得面板内的内容可滚动。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you have three panels, each with several paragraphs of text.
    Rather than having each panel adjust its height to accommodate the content, you
    can make the panels a fixed height and scrollable. Here''s the code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有三个面板，每个面板都有几段文字。而不是让每个面板调整其高度以适应内容，你可以使面板具有固定高度并可滚动。以下是代码：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The paragraph content in the `Typography` components has been truncated for
    brevity—you can view the full text in the GitHub repository for this book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，`Typography` 组件中的段落内容已被截断——你可以在本书的 GitHub 仓库中查看完整文本。
- en: 'Here''s what it looks like when the first panel is expanded:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一个面板展开时，它看起来是这样的：
- en: '![](img/01b21a70-7e83-4ace-9bb3-029d6f0377d4.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01b21a70-7e83-4ace-9bb3-029d6f0377d4.png)'
- en: 'If you move your mouse pointer over the content of the expanded panel, you
    can now scroll the content to the bottom of the paragraph, within the panel. Here''s
    what it looks like when the content has been scrolled to the bottom:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标指针移至展开面板的内容上，你现在可以滚动内容到段落的底部，在面板内。以下是内容已滚动到底部时的样子：
- en: '![](img/976b6714-e69e-4fc6-87a9-93d3bffe55e7.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/976b6714-e69e-4fc6-87a9-93d3bffe55e7.png)'
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `IpsumContent` component is just a convenience component that holds paragraphs
    of content so that you don''t have to repeat it in every panel. Let''s start by
    looking at the styles used in this example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`IpsumContent` 组件只是一个方便的组件，它包含段落内容，这样你就不必在每一个面板中重复它。让我们先看看这个例子中使用的样式：'
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Panel content uses flex box styles to lay out its content. It flows according
    to row direction by default, so you have to set the `flexDirection` style to `column`
    if you want the content to flow in a top-down direction. Next, you can set a fixed
    height for your panel content—in this case, it's `150px`. Finally, the `overflow`
    style set to `auto` will enable vertical scrolling for the panel content.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 面板内容使用弹性盒模型样式来布局其内容。默认情况下，它根据行方向流动，所以如果你想内容从上到下流动，你必须将 `flexDirection` 样式设置为
    `column`。接下来，你可以为你的面板内容设置一个固定高度——在这个例子中，它是 `150px`。最后，将 `overflow` 样式设置为 `auto`
    将启用面板内容的垂直滚动。
- en: 'You can then apply the `panelDetails` class to each of your `ExpansionPanelContent`
    components:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以将 `panelDetails` 类应用到每个 `ExpansionPanelContent` 组件上：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` 示例：[https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` API文档：[https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelSummary` API文档：[https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelDetails` API文档：[https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
- en: Lazy loading panel content
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒加载面板内容
- en: If you're rendering expansion panels that are all collapsed by default, you
    don't have to populate the `ExpansionPanelDetails` component up front. Instead,
    you can wait for the user to expand the panel—then you can make whatever API calls
    you need in order to render the content.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在渲染默认全部折叠的展开面板，你不需要预先填充`ExpansionPanelDetails`组件。相反，你可以等待用户展开面板——然后你可以进行任何必要的API调用以渲染内容。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you have an API function that fetches content based on an index
    value. For example, if the first panel is expanded, the `index` value will be
    `0`. You need to be able to call this function when the panel is expanded, supplying
    the corresponding `index` value. Here''s what the code looks like:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个根据索引值获取内容的API函数。例如，如果第一个面板被展开，`index`值将是`0`。你需要能够在面板展开时调用这个函数，提供相应的`index`值。下面是代码的样子：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s what the four panels look like when the screen first loads:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，四个面板看起来是这样的：
- en: '![](img/e4addc49-e236-4575-a1e9-a115afeeb1b2.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4addc49-e236-4575-a1e9-a115afeeb1b2.png)'
- en: 'Try expanding the first panel. It expands right away but, for about one second,
    there''s nothing there. Then the content appears:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试展开第一个面板。它立即展开，但大约一秒钟内没有任何内容。然后内容出现：
- en: '![](img/bb74f9d2-2343-4079-a179-753c052f5083.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb74f9d2-2343-4079-a179-753c052f5083.png)'
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start with the `fetchPanelContent()` API function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`fetchPanelContent()` API函数开始：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since this is just a mock, it returns a promise directly. It uses `setTimeout()`
    to simulate latency, similar to what you would experience using a real API. The
    promise resolves with the string value that's looked up from an array, based on
    the `index` argument.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这只是一个模拟，它直接返回一个promise。它使用`setTimeout()`来模拟延迟，类似于使用真实API时的体验。promise解析为从数组中查找的字符串值，基于`index`参数。
- en: 'Next, let''s look at the `onChange` handler function that''s called when `ExpansionPanel`
    expands:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看当`ExpansionPanel`展开时被调用的`onChange`处理函数：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: First, this function checks if the panel that's expanded has any `content` in
    its state. If not, you know that you have to fetch it by calling `fetchPanelContent()`.
    When the returned promise resolves, you can call `setPanels()` to update the panels
    array and set the content at the appropriate index.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这个函数检查展开的面板在其状态中是否有任何`content`。如果没有，你知道你必须通过调用`fetchPanelContent()`来获取它。当返回的promise解析时，你可以调用`setPanels()`来更新面板数组并在适当的索引处设置内容。
- en: The rest of your component just renders the `ExpansionPanel` components based
    on the panels array, using the `content` state as the panel content. When content
    is updated, it is reflected in the rendered content.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你组件的其余部分只是根据面板数组渲染`ExpansionPanel`组件，使用`content`状态作为面板内容。当内容更新时，它会在渲染的内容中反映出来。
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a couple of improvements that you could make with this example. First,
    you could show a progress indicator within the panel while the content is loading
    so that the user knows that something is happening. The second improvement can
    be made both when the panel expands and when it collapses—this should be avoided.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这个示例进行一些改进。首先，你可以在内容加载时在面板内显示进度指示器，这样用户就会知道有事情在进行中。第二个改进可以在面板展开和折叠时进行——这应该避免。
- en: 'Let''s start with the progress indicator. For this, you''ll need a utility
    component and a style for the `ExpansionPanelDetails` component:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从进度指示器开始。为此，你需要一个实用组件以及为`ExpansionPanelDetails`组件设置的样式：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `MaybeProgress` component takes a `loading` property that, when true, results
    in a `LinearProgress` component. Otherwise, nothing is rendered. The `flexDirection`
    style is set to `column`; otherwise, the `LinearProgress` component won''t display.
    Now let''s modify the markup rendered by `LazyLoadingPanelContent` so it uses
    these two additions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`MaybeProgress` 组件接受一个 `loading` 属性，当该属性为 true 时，将生成一个 `LinearProgress` 组件。否则，不会渲染任何内容。`flexDirection`
    样式设置为 `column`；否则，`LinearProgress` 组件将不会显示。现在让我们修改 `LazyLoadingPanelContent` 生成的标记，使其使用这两个新增功能：'
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `panelDetails` class is now used by the `ExpansionPanelDetails` component.
    The first child of this component is now `MaybeProgress`. The loading property
    is true until the API call populates the content state for the given panel. This
    means that the progress indicator will be visible until the content loads.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`panelDetails` 类现在被 `ExpansionPanelDetails` 组件使用。此组件的第一个子元素现在是 `MaybeProgress`。加载属性为
    true，直到 API 调用填充给定面板的内容状态。这意味着进度指示器将在内容加载前可见。'
- en: 'Here''s what the first panel looks like when expanded, before the content has
    loaded:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在内容加载之前，展开的第一个面板看起来是这样的：
- en: '![](img/ba206350-90d2-44a5-a6b9-e8bdef4a4b5a.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba206350-90d2-44a5-a6b9-e8bdef4a4b5a.png)'
- en: 'Once loaded, the content is rendered in place of the progress indicator. Finally,
    let''s make sure that the API call to load content isn''t made when the panel
    is collapsing. This requires an adjustment to the `onChange()` handler:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载完成，内容将替换进度指示器进行渲染。最后，确保在面板折叠时不会发起加载内容的 API 调用。这需要对 `onChange()` 处理器进行调整：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The second argument passed to this function, `expanded`, tells you whether or
    not the panel is expanding. If this value is false, you know that the panel is
    collapsed and that the API call shouldn't be made. This condition has been added
    to look for content that has already been loaded for the panel.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给此函数的第二个参数 `expanded` 告诉你面板是否正在展开。如果此值为 false，则表示面板已折叠，不应发起 API 调用。此条件已添加以查找已为该面板加载的内容。
- en: See also
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`ExpansionPanel` demos: [https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` 示例：[https://material-ui.com/demos/expansion-panels/](https://material-ui.com/demos/expansion-panels/)'
- en: '`ExpansionPanel` API documentation: [https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanel` API 文档：[https://material-ui.com/api/expansion-panel/](https://material-ui.com/api/expansion-panel/)'
- en: '`ExpansionPanelSummary` API documentation: [https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelSummary` API 文档：[https://material-ui.com/api/expansion-panel-summary/](https://material-ui.com/api/expansion-panel-summary/)'
- en: '`ExpansionPanelDetails` API documentation: [https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpansionPanelDetails` API 文档：[https://material-ui.com/api/expansion-panel-details/](https://material-ui.com/api/expansion-panel-details/)'
