["```js\nconst store = create(() => ({\n  count: 0,\n  text: \"hello\",\n}));\n```", "```js\nstore.setState((prev) => ({\n  count: prev.count + 1,\n}))\n```", "```js\nmoduleState = Object.assign({}, moduleState, {\n  count: moduleState.count + 1\n});\n```", "```js\n++moduleState.count;\n```", "```js\nconst proxyObject = new Proxy({\n  count: 0,\n  text: \"hello\",\n}, {\n  set: (target, prop, value) => {\n    console.log(\"start setting\", prop);\n    target[prop] = value;\n    console.log(\"end setting\", prop);\n  },\n});\n```", "```js\n> ++proxyObject.count\nstart setting count\nend setting count\n1\n```", "```js\nimport { proxy } from \"valtio\";\nconst state = proxy({ count: 0 });\n```", "```js\nimport { snapshot } from \"valtio\";\nconst snap1 = snapshot(state);\n```", "```js\n++state.count;\nconst snap2 = snapshot(state);\n```", "```js\nconst state2 = proxy({\n  obj1: { c: 0 },\n  obj2: { c: 0 },\n});\nconst snap21 = snapshot(state2)\n++state2.obj.c;\nconst snap22 = snapshot(state2)\n```", "```js\nimport { proxy, useSnapshot } from \"valtio\";\n```", "```js\nconst state = proxy({\n  count1: 0,\n  count2: 0,\n});\n```", "```js\nconst Counter1 = () => {\n  const snap = useSnapshot(state);\n  const inc = () => ++state.count1;\n  return (\n    <>\n      {snap.count1} <button onClick={inc}>+1</button>\n    </>\n  );\n};\n```", "```js\nconst Counter2 = () => {\n  const snap = useSnapshot(state);\n  const inc = () => ++state.count2;\n  return (\n    <>\n      {snap.count2} <button onClick={inc}>+1</button>\n    </>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <div><Counter1 /></div>\n    <div><Counter2 /></div>\n  </>\n);\n```", "```js\nconst contrivedState = proxy({\n  num: 123,\n  str: \"hello\",\n  arr: [1, 2, 3],\n  nestedObject: { foo: \"bar\" },\n  objectArray: [{ a: 1 }, { b: 2 }],\n});\n```", "```js\ntype Todo = {\n  id: string;\n  title: string;\n  done: boolean;\n};\n```", "```js\nconst state = proxy<{ todos: Todo[] }>({\n  todos: [],\n});\n```", "```js\nconst createTodo = (title: string) => {\n  state.todos.push({\n    id: nanoid(),\n    title,\n    done: false,\n  });\n};\nconst removeTodo = (id: string) => {\n  const index = state.todos.findIndex(\n    (item) => item.id === id\n  );\n  state.todos.splice(index, 1);\n};\nconst toggleTodo = (id: string) => {\n  const index = state.todos.findIndex(\n    (item) => item.id === id\n  );\n  state.todos[index].done = !state.todos[index].done;\n};\n```", "```js\nconst TodoItem = ({\n  id,\n  title,\n  done,\n}: {\n  id: string;\n  title: string;\n  done: boolean;\n}) => {\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        checked={done}\n        onChange={() => toggleTodo(id)}\n      />\n      <span\n        style={{\n          textDecoration: done ? \"line-through\" : \"none\",\n        }}\n      >\n        {title}\n      </span>\n      <button onClick={() => removeTodo(id)}>\n        Delete\n      </button>\n    </div>\n  );\n};\nconst MemoedTodoItem = memo(TodoItem);\n```", "```js\nconst TodoList = () => {\n  const { todos } = useSnapshot(state);\n  return (\n    <div>\n      {todos.map((todo) => (\n        <MemoedTodoItem\n          key={todo.id}\n          id={todo.id}\n          title={todo.title}\n          done={todo.done}\n        />\n      ))}\n    </div>\n  );\n};\n```", "```js\nconst NewTodo = () => {\n  const [text, setText] = useState(\"\");\n  const onClick = () => {\n    createTodo(text);\n    setText(\"\");\n  };\n  return (\n    <div>\n      <input\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={onClick} disabled={!text}>\n        Add\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <TodoList />\n    <NewTodo />\n  </>\n);\n```", "```js\nconst TodoItem = ({ id }: { id: string }) => {\n  const todoState = state.todos.find(\n    (todo) => todo.id === id\n  );\n  if (!todoState) {\n    throw new Error(\"invalid todo id\");\n  }\n  const { title, done } = useSnapshot(todoState);\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        checked={done}\n        onChange={() => toggleTodo(id)}\n      />\n      <span\n        style={{\n          textDecoration: done ? \"line-through\" : \"none\",\n        }}\n      >\n        {title}\n      </span>\n      <button onClick={() => removeTodo(id)}>\n        Delete\n      </button>\n    </div>\n  );\n};\nconst MemoedTodoItem = memo(TodoItem);\n```", "```js\nconst TodoList = () => {\n  const { todos } = useSnapshot(state);\n  const todoIds = todos.map((todo) => todo.id);\n  return (\n    <div>\n      {todoIds.map((todoId) => (\n        <MemoedTodoItem key={todoId} id={todoId} />\n      ))}\n    </div>\n  );\n};\n```", "```js\narray.splice(index, 1)\n```", "```js\n[...array.slice(0, index), ...array.slice(index + 1)]\n```", "```js\nstate.a.b.c.text = \"hello\";\n```", "```js\n{\n  ...state,\n  a: {\n    ...state.a,\n    b: {\n      ...state.a.b,\n      c: {\n        ...state.a.b.c,\n        text: \"hello\",\n      },\n    },\n  },\n}\n```", "```js\nconst state = proxy({ count: 0, text: \"hello\" });\n```", "```js\nconst Component = () => {\n  const { count } = useSnapshot(state);\n  return <>{count}</>;\n};\n```", "```js\nconst Component = () => {\n  const count = useStore((state) => state.count);\n  return <>{count}</>;\n};\n```", "```js\nconst Component = ({ showText }) => {\n  const snap = useSnapshot(state);\n  return <>{snap.count} {showText ? snap.text : \"\"}</>;\n};\n```", "```js\nconst Component = ({ showText }) => {\n  const count = useStore((state) => state.count);\n  const text = useStore(\n    (state) => showText ? state.text : \"\"\n  );\n  return <>{count} {text}</>;\n};\n```"]