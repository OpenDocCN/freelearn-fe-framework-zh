- en: Deploying to Google Play
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到Google Play
- en: Although deploying an app to Google Play can be slightly simpler when compared
    to the Apple App Store, there's still a few key steps that we need to pay attention
    to. We covered some preparation steps in [Chapter 14](part0154.html#4IRMK0-289fe2426d594f99a90e4363b2c9c34d),
    *Deployment Preparation with webpack Bundling*, and [Chapter 15](part0163.html#4REBM0-289fe2426d594f99a90e4363b2c9c34d),
    *Deploying to the Apple App Store*, such as using webpack to bundle the app and
    preparing app icons and splash screens, so we will jump right into building a
    releasable APK.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与苹果App Store相比，将应用部署到Google Play可能稍微简单一些，但仍有一些关键步骤需要我们注意。我们在第14章（[https://part0154.html#4IRMK0-289fe2426d594f99a90e4363b2c9c34d](part0154.html#4IRMK0-289fe2426d594f99a90e4363b2c9c34d)）*使用webpack捆绑的部署准备*和第15章（[https://part0163.html#4REBM0-289fe2426d594f99a90e4363b2c9c34d](part0163.html#4REBM0-289fe2426d594f99a90e4363b2c9c34d)）*部署到苹果App
    Store*中介绍了一些准备工作，例如使用webpack捆绑应用和准备应用图标和启动画面，因此我们将直接进入构建可发布的APK。
- en: We express our gratitude to TJ VanToll for an excellent eight-step article to
    deploy NativeScript apps ([https://www.nativescript.org/blog/steps-to-publish-your-nativescript-app-to-the-app-stores](https://www.nativescript.org/blog/steps-to-publish-your-nativescript-app-to-the-app-stores))
    from which we will insert excerpts from and expand wherever possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对TJ VanToll表示感激，他撰写了一篇优秀的八步文章，介绍了如何部署NativeScript应用（[https://www.nativescript.org/blog/steps-to-publish-your-nativescript-app-to-the-app-stores](https://www.nativescript.org/blog/steps-to-publish-your-nativescript-app-to-the-app-stores)），我们将从中摘录并尽可能进行扩展。
- en: 'The following topics are covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Generating a keystore to build your APK with
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用生成密钥库来构建你的APK
- en: Building a releasable APK with the NativeScript CLI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NativeScript CLI构建可发布的APK
- en: Uploading the APK to Google Play for publication
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将APK上传到Google Play进行发布
- en: Building an APK for Google Play
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Google Play构建APK
- en: Before you open Google Play to register and publish this app (which is the next
    step), let's double-check a couple of things to ensure that our metadata is correct.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在你打开Google Play进行注册和发布此应用（这是下一步）之前，让我们再次检查一些事情，以确保我们的元数据是正确的。
- en: 'Open `app/App_Resources/Android/app.gradle` and ensure that the `applicationId`
    is correct for your package name:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app/App_Resources/Android/app.gradle`并确保`applicationId`对于你的包名是正确的：
- en: '![](img/00075.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00075.jpeg)'
- en: 'Also, open `package.json` at the root of the project and double-check the `nativescript.id`
    there as well for good measure:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在项目根目录打开`package.json`，也仔细检查那里的`nativescript.id`：
- en: '![](img/00076.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00076.jpeg)'
- en: Now, you will need to generate an executable Android file for your application.
    On Android, this file has a `.apk` extension, and you can generate this file using
    the NativeScript CLI.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要为你的应用程序生成一个可执行的Android文件。在Android上，此文件具有`.apk`扩展名，你可以使用NativeScript CLI生成此文件。
- en: 'The `tns run` command you were using during NativeScript development actually
    generates a `.apk` file for you and installs that file on an Android emulator
    or device. However, for a Google Play release, the build you create must also
    be code signed. You can refer to Android''s documentation ([https://developer.android.com/studio/publish/app-signing.html](https://developer.android.com/studio/publish/app-signing.html))
    on code signing if you want to dive into the cryptographic details, but at a high
    level, you will need to do the following two things to create a release version
    of your Android app:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你在NativeScript开发期间使用的`tns run`命令实际上为你生成了一个`.apk`文件，并将其安装到Android模拟器或设备上。然而，对于Google
    Play的发布，你创建的构建也必须进行代码签名。如果你想深入了解代码签名的加密细节，可以参考Android的文档（[https://developer.android.com/studio/publish/app-signing.html](https://developer.android.com/studio/publish/app-signing.html)），但总的来说，你需要完成以下两个步骤来创建Android应用的发布版本：
- en: Create a `.keystore` or `.jks` (Java keystore) file
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`.keystore`或`.jks`（Java密钥库）文件
- en: Use that `.keystore` or `.jks` file to sign in to your app during a build
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用那个`.keystore`或`.jks`文件在构建过程中对你的应用进行签名
- en: The Android documentation provides you a few options on how you can create your
    keystore file ([https://developer.android.com/studio/publish/app-signing.html#release-mode](https://developer.android.com/studio/publish/app-signing.html#release-mode)).
    Our preferred approach is the `keytool` command-line utility, which is included
    in the Java JDK that NativeScript installs for you, so it should already be available
    on your development machine's command line.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Android文档为你提供了一些创建密钥库文件的方法（[https://developer.android.com/studio/publish/app-signing.html#release-mode](https://developer.android.com/studio/publish/app-signing.html#release-mode)）。我们首选的方法是`keytool`命令行工具，它包含在NativeScript为你安装的Java
    JDK中，因此它应该已经存在于你的开发机器的命令行中。
- en: 'To use `keytool` to generate a keystore for code signing our app, we will use
    the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `keytool` 生成用于代码签名的密钥库，我们将使用以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `keytool` utility will ask you a number of questions, several of which
    are optional (name of organization and the names of your city, state, and country),
    but the most important ones are the passwords for both the keystore and the alias
    (more on that later on). Here''s what the `keytool` process looks like when we
    generate the keystore:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`keytool` 工具会问你一些问题，其中一些是可选的（组织名称以及你所在的城市、州和国家名称），但最重要的一个是密钥库和别名（稍后详细说明）的密码。以下是当我们生成密钥库时
    `keytool` 处理过程的样子：'
- en: '![](img/00077.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00077.jpeg)'
- en: Before we move on to how to use this `.jks` file, there's one important thing
    you need to know. Place this `.jks` file somewhere safe, and do not forget the
    password for the keystore or for the alias. (Personally, I like using the same
    password for my keystore and my aliases to simplify my life.) Android requires
    you to use this exact same `.jks` file to sign in to any and all updates to your
    app. This means that if you lose this `.jks` file, or its password, you will not
    be able to update your Android app. You'll have to create a brand new entry in
    Google Play, and your existing users will not be able to upgrade—so take care
    not to lose it!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续介绍如何使用这个 `.jks` 文件之前，有一件重要的事情你需要知道。将这个 `.jks` 文件放在一个安全的地方，并且不要忘记密钥库或别名的密码。（我个人喜欢为我的密钥库和别名使用相同的密码，以简化我的生活。）Android
    要求你必须使用这个确切的 `.jks` 文件来为任何和所有应用的更新签名。这意味着如果你丢失了这个 `.jks` 文件或其密码，你将无法更新你的 Android
    应用。你将不得不在 Google Play 中创建一个新的条目，并且你的现有用户将无法升级——所以请务必不要丢失它！
- en: Oh, and one more thing to note in most cases is that you'll want to use a single
    keystore file to sign in to all of your personal or company's Android applications.
    Remember how you had to pass a -alias flag to the keytool utility, and how that
    alias had its own password? It turns out that one keystore can have many aliases,
    and you'll want to create one for each Android app that you build.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '哦，还有一点需要注意，在大多数情况下，你希望使用单个密钥库文件来为所有个人或公司的 Android 应用程序签名。还记得你不得不向 `keytool`
    工具传递 `-alias` 标志，以及那个别名有自己的密码吗？实际上，一个密钥库可以有多个别名，你将为每个构建的 Android 应用程序创建一个。 '
- en: Okay, so now that you have this `.jks` file, and you have it stored in a nice
    and secure location, the rest of the process is quite easy.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在你有了这个 `.jks` 文件，并且将它存储在一个安全的地方，接下来的过程就相当简单了。
- en: 'Build our Android app using webpack and pass it the information you just used
    to create the `.jks` file. For example, the following command is used to create
    a release build of `nStudio`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 webpack 构建我们的 Android 应用，并传递你刚刚用来创建 `.jks` 文件的信息。例如，以下命令用于创建 `nStudio` 的发布版本：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the command finishes running, you''ll have a releasable `.apk` file in
    your app''s `platforms/android/build/outputs/apk` folder; note the location of
    that file, as you''ll need it in the next step—deploying your app on Google Play:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令运行完成，你将在应用的 `platforms/android/build/outputs/apk` 文件夹中有一个可发布的 `.apk` 文件；注意该文件的位置，因为你将在下一步——在
    Google Play 上部署你的应用时需要它。
- en: '![](img/00078.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00078.jpeg)'
- en: Uploading to Google Play
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传到 Google Play
- en: Google Play is where Android users find and install apps, and the Google Play
    Developer Console ([https://play.google.com/apps/publish/](https://play.google.com/apps/publish/))
    is where developers register and upload apps for users.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play 是 Android 用户寻找和安装应用的地方，Google Play 开发者控制台（[https://play.google.com/apps/publish/](https://play.google.com/apps/publish/））是开发者注册和上传应用给用户的地方。
- en: 'You will first create a new application by its name and then see it listed:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先将根据名称创建一个新的应用程序，然后你会看到它被列出：
- en: '![](img/00079.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00079.jpeg)'
- en: Android's documentation on uploading apps and setting up your store listing
    is quite good, so we will not recreate all that information here. Instead, a few
    tips will be provided that you might find helpful when uploading your own NativeScript
    apps to Google Play.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Android 关于上传应用和设置商店列表的文档相当不错，所以我们不会在这里重新创建所有这些信息。相反，我们将提供一些你可能在上传自己的 NativeScript
    应用到 Google Play 时觉得有用的提示。
- en: 'On the Store Listing tab in the Google Play Developer Console, you''ll have
    to provide at least two screenshots of your app in action, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Play 开发者控制台的“商店列表”标签页，你必须至少提供两张你的应用运行时的截图，如下所示：
- en: '![](img/00080.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00080.jpeg)'
- en: Launch your app in an Android **Android Virtual Device** (**AVD**) using the
    `tns run android --emulator` command. The Android AVDs have a built-in way of
    taking screenshots using the little camera icon in the emulator's sidebar.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `tns run android --emulator` 命令在 Android **Android 虚拟设备**（**AVD**）中启动您的应用。Android
    AVD 内置了使用模拟器侧边栏中的小相机图标来截图的方式。
- en: 'Use this button to take a few screenshots of the most important screens in
    your app, and the image files themselves will appear on your desktop. From there,
    you could take those files and upload them directly into the Google Play Developer
    Console. A 1024 x 500 Feature Graphic image file is also required, which will
    appear at the top of your store listing, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此按钮来获取您应用中最重要屏幕的几张截图，图像文件将出现在您的桌面上。从那里，您可以取出这些文件并直接上传到谷歌应用开发者控制台。还需要一个 1024
    x 500 的特色图形图像文件，它将出现在您的商店列表顶部，如下面的截图所示：
- en: '![](img/00081.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: Although not shown in the preceding screenshot, we recommend that you use a
    service like DaVinci ([https://www.davinciapps.com](https://www.davinciapps.com))
    to add a little flair to your screenshots, and turn them into a little tutorial
    of what your app does.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前一个截图中没有显示，但我们建议您使用像 DaVinci ([https://www.davinciapps.com](https://www.davinciapps.com))
    这样的服务来为您的截图增添一些风采，并将它们变成展示您的应用功能的简短教程。
- en: APK
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: APK
- en: The App Releases section of the Google Play Developer Console is where you upload
    the `.apk` file you generated in the preceding step of this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面的步骤中，Google Play 开发者控制台的“应用发布”部分是您上传生成的 `.apk` 文件的地方。
- en: 'You may see mention of opting into Google Play App Signing when you view the
    App Releases section. It''s best to opt in now rather than later. Once you''ve
    opted in, it will show Enabled:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看“应用发布”部分时，可能会提到选择加入谷歌应用签名。最好是现在就加入，而不是以后。一旦您加入，它将显示为“已启用”：
- en: '![](img/00082.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: You can then proceed to upload the apk in your app's `platforms/android/build/outputs/apk` folder.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以继续上传位于您的应用 `platforms/android/build/outputs/apk` 文件夹中的 apk 文件。
- en: 'Once you have your APK uploaded, you should see it listed on that same page
    where you can type out release notes for the uploaded version in multiple languages
    of your choice:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您上传了 APK，您应该会在同一页面上看到它列出，您可以在该页面上用您选择的多种语言编写上传版本的发布说明：
- en: '![](img/00083.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: After you click on Save on that page, you will probably want to return to the
    Store listing section to finish filling out all of your app's information. Once
    you have everything set, you're ready to submit your app. Android app reviews
    generally take a few hours, and unless Google flags any problems, your app should
    be available in Google Play within half a day or so.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在该页面上点击“保存”后，您可能想返回商店列表部分，以完成填写您应用的所有信息。一旦一切就绪，您就可以提交您的应用了。Android 应用审核通常需要几个小时，除非谷歌标记出任何问题，否则您的应用应在半天左右的时间内出现在谷歌应用商店中。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Woohoo! We built an app from *zero to published* in both stores, Apple App Store
    and Google Play. This has been quite an adventure with many twists and turns.
    We sincerely hope that this has given you deep insight into NativeScript for Angular
    app development as well as demystified any areas of this exciting tech stack for
    those who have been curious.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 哇哦！我们在苹果应用商店和谷歌应用商店都从**零**开始发布了应用，这是一次充满曲折和转折的冒险。我们真诚地希望这能让您对 NativeScript for
    Angular 应用程序开发有更深的了解，同时也为那些对此技术栈好奇的人解开了神秘的面纱。
- en: Both NativeScript and Angular have thriving global communities, and we encourage
    you to get involved, speak about your experiences, and share your excitement with
    others with all the exhilarating projects you and your teams may be working on.
    Never hesitate to reach out and ask for help, as we all take responsibility in
    our love and admiration for these two technologies.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: NativeScript 和 Angular 都拥有蓬勃发展的全球社区，我们鼓励您参与其中，分享您的经验，并与其他人分享您和您的团队可能正在进行的所有激动人心的项目中的兴奋。永远不要犹豫去寻求帮助，因为我们都对这两种技术充满热爱和钦佩。
- en: 'There are some additional helpful resources that you can check out:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一些额外的有用资源您可以查看：
- en: '[http://forum.nativescript.org](http://forum.nativescript.org)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://forum.nativescript.org](http://forum.nativescript.org)'
- en: '[http://nativescript.rocks](http://nativescript.rocks)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://nativescript.rocks](http://nativescript.rocks)'
- en: And of course get to know the docs!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，了解文档也是非常重要的！
- en: '[http://docs.nativescript.org/angular/start/introduction.html](http://docs.nativescript.org/angular/start/introduction.html)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.nativescript.org/angular/start/introduction.html](http://docs.nativescript.org/angular/start/introduction.html)'
- en: Cheers!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 干杯！
