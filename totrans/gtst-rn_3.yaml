- en: Chapter 3. Beginning with the Example Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have an idea about how React Native works and how to create components,
    let's create your first React Native application. Throughout this book, we will
    be developing a note-taking application which we'll call **ReactNotes**. By the
    end of the book, you'll have a fully featured application that allows you to create
    notes, save them to a device, view the list of the notes you've saved, take pictures
    with the device and attach them to your notes, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll build the skeleton of the application, create a `HomeScreen`
    and `NoteScreen`. We'll also add navigation that allows you to switch between
    the screens, and along the way you'll learn about creating your own components
    and handling events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that we will cover in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: How to generate iOS and Android project files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining the React Native starter template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the first component, `SimpleButton`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with Chrome Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring navigation and transitioning between screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing the UI to create notes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating the projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start building our note taking application for iOS, we are going to need
    a couple of command-line tools.
  prefs: []
  type: TYPE_NORMAL
- en: React Native 0.14.2 requires **Node.js v4+**, we are going to use v5.0.0; visit
    [https://nodejs.org](https://nodejs.org) for more information (we recommend managing
    different node versions with NVM [https://github.com/creationix/nvm](https://github.com/creationix/nvm))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the latest version of NPM from [https://www.npmjs.com/](https://www.npmjs.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Great, now that we have these tools we can install the `react-native-cli`.
    The `react-native-cli` exposes an interface that does all the work of setting
    up a new React Native project for us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `react-native-cli`, use the `npm` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we are going to generate a new React Native project called `ReactNotes`
    using the `cli` and the `react-native init` command. The output of the command
    looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will walk you through the creation of a new React Native project in `/Users/ethanholmes/ReactNotes`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set up a new React Native app in `/Users/ethanholmes/ReactNotes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run your app on iOS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run your app on Android:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `root` directory of the `Xcode` project is generated in the `ReactNotes`
    folder, with the same name as we gave `react-native-cli` when we ran the command.
    Follow the steps at the end of the React Native set up to see what it produces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Xcode and the iOS simulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to start by running the starter template in the iOS simulator
    through Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, select `File` | `Open` and navigate to the `ReactNotes` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ReactNotes.xcodeproj` file, as shown in the following figure:![Xcode
    and the iOS simulator](img/B05162_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Run** (or *Cmd* + *R*) to run the application in the iOS simulator,
    the following screenshot will be shown:![Xcode and the iOS simulator](img/B05162_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just like that, we already have the React Native template up and running on
    the iOS simulator!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Android SDK and emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Facebook has a detailed step by step guide set up on Android SDK and emulator.
    You can access the React Native Docs at [https://facebook.github.io/react-native/docs/android-setup.html](https://facebook.github.io/react-native/docs/android-setup.html).
    In this section, we will only cover the basics of running the application on the
    Android emulator.
  prefs: []
  type: TYPE_NORMAL
- en: When running the project in the iOS simulator, we can run it from the Xcode
    IDE. Android, on the other hand, doesn't require any particular IDE and can be
    launched directly from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the `android apk` to the emulator, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot will be generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android SDK and emulator](img/B05162_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's start by modifying the contents of the starter template and display a
    different message.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the React Native starter template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `index.ios.js`, located in the root directory, in the text editor of your
    choice. Here is the code that `react-native-cli` generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although `react-native-cli` generates the starter template using the ES5 `createClass`,
    we will be creating our components using ES6 classes.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of things are included in here, but bear with us as we break it down for
    you. If we take a closer look at the render method, we can see the familiar `View`
    and `Text` components that we encountered in the previous chapter. Note how the
    index file is a component itself (`ReactNotes`). Change the value in line `30`
    to `Welcome to React Notes!`. Save it and then press *Cmd* + *R* from the simulator
    or, in the top menu, navigate to **Hardware** | **Shake Gesture** and select **Reload**
    from the pop-up action sheet. The text on screen re-renders to show the text value
    we just modified! We are no longer constrained to wait for the Xcode to recompile
    in order to see our changes as we can reload straight from the simulator. Continue
    making changes and reload it in the simulator to get a feel for the work flow.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to add a little interactivity to our application. You can begin by
    adding a simple button component to the screen that is touchable. In the root
    directory, create a folder called `App` and another folder inside the `App` folder
    called `Components`. In the `Components` directory, add a file named `SimpleButton.js`.
    This will be the directory in which we store and reference the components we create.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the React Native code created in this chapter will work for both iOS
    and Android. Simply replace `index.ios.js` with `index.android.js` if you are
    interested in android only. The screenshots and instructions will be mainly for
    the iOS simulator.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SimpleButton component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by rendering some text to the screen and importing it into our
    `index.ios.js` file. In `SimpleButton.js,` add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ES6 de-structuring assignment `var [a, b] = [1, 2];` is used to extract `Text`
    and `View` from the React Native module.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to include our newly created component in `index.ios.js` and simplify
    it to ES6 syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the SimpleButton component](img/B05162_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re off to a good start; it''s time to add some interactivity to our button.
    In `SimpleButton.js`, add the `TouchableOpacity` component to the destructuring
    assignment. `TouchableHighlight`, `TouchableOpacity`, and `TouchableWithoutFeedback`
    are similar components that respond to touches, and it takes an `onPress` prop
    for a function to react to the touch. Wrap the existing code in the render function
    with the `TouchableOpacity` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and try tapping (or clicking) on the text now, you should be able
    to see that the opacity of the text decreases as you press it. But where has our
    `console.log(…)` output gone? Open the **Developer** menu (**Hardware** | **Shake
    Gesture**) and select **Debug** in Chrome. This opens a Chrome Window at `localhost:8081/debugger-ui`
    for debugging, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the SimpleButton component](img/B05162_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lo and behold, here is the console log that we specified in our `SimpleButton`
    component. Behind the scenes, the JavaScript code is being run from inside the
    Chrome tab and loaded onto the mobile device on startup or reload. From here,
    you have access to all the Chrome Developer Tools you will normally use, including
    the addition of break points.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, its time to make our application more actionable. Let''s begin by transforming
    our `SimpleButton` into a **Create Note** button. When the user clicks on the
    **Create Note** button, it transitions them to another screen to create notes.
    To do this, we need our button to be able to accept a function via props from
    `index.ios.js` to activate the transition. We will add some custom text as well
    for extra flair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have extended our `SimpleButton` component to be reusable with minimal
    changes. We can always pass different functions through the `onPress` prop and
    add custom text if we choose. This is all that we need to modify our `SimpleButton`;
    now to include the transition functionality to our `index.io.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the validating props revisited page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/B05162_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember `propTypes` from the previous chapter? If we forget to pass the `onPress`
    prop, the console will log a warning reminding us to pass it. Note that there
    is no warning for `customText` since it was not set to `isRequired`.
  prefs: []
  type: TYPE_NORMAL
- en: The Navigator component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Navigator** component is a reimplementation of the `UINavigationController`
    provided by React Native to manage various screens. Similar to a stack, you can
    push, pop, and replace routes onto the Navigator. It is fully customizable on
    both iOS and Android, which we will cover in the next chapter. Import the Navigator
    into index.ios.js and replace the contents of the render method with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigator receives a prop called `initialRoute` that accepts an object to be
    the first route to be put on the stack. The route object can contain any attribute
    that you need to pass to the screen components. All we need for now is the name
    of the screen we want to transition to. Next, we need to create the `function`
    to pass to the `renderScene` prop. In the `ReactNotes` component, we are going
    to create a `function` that takes `route` and `navigator` as parameters, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When we first load our application, the parameter `route` will be the object
    we pass into `initialRoute`. Using a switch statement and looking at the values
    of `route.name` allows us to choose the component we want to render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, under the `home` case, you can see our slightly modified code from the
    original `render` method in `ReactNotes`; we have included the `onPress` and `customText`
    props we created earlier. You can add another component to `App/Componets/ named
    NoteScreen.js`; this screen will contain the functionality to create a new note:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, we are only going to use this screen when we press the **Create Note**
    button. In the `onPress` prop arrow function, we are going to push a new route
    onto the stack using `navigator.push`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that push also takes a regular JavaScript object, so we need to include
    the name attribute for our `NoteScreen`; reload the application in the simulator
    and press on the **Create Note** button. A smooth animated transition between
    the two screens will occur without adding any extra code.
  prefs: []
  type: TYPE_NORMAL
- en: Navigator.NavigationBar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point you must be thinking *A button is OK, but is there a better,
    more native way to do navigation?* Of course, as a part of the Navigator component,
    you can pass a `navigationBar` prop to add a persistent top navigation bar across
    every screen. The `Navigator.NavigationBar` is a subcomponent that accepts an
    object that defines the left and right buttons, a title, and styles (although
    we are going to leave it `unstyled` until the next chapter). Modify the `ReactNotes`
    render function to include the `navigationBar`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `routeMapper` prop accepts an object containing functions for the `LeftButton`,
    `RightButton`, and `Title` attributes. Let''s insert this object after the imports
    at the top of `index.ios.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Advancing the flow of our application to the `CreateNote` screen will require
    displaying a right-hand button in the navigator bar. Luckily, we already have
    our simple button set up to push the state onto the navigator. In the `RightButton`
    function, add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Similar to our previous `renderScene` method, we can switch on the value of
    `route.name`. The default expression in the `switch` statement is there to ensure
    that different screens do not return a button unless we include them. Let's also
    go ahead and add a `LeftButton` to the `NavigationBar` when it's on the `NoteScreen`
    to return to the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `navigator.pop()` will remove the route on the top of the stack; thus,
    returning us to our original view. Finally, to add a title, we do the exact same
    thing in the `Title` attributes function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s update the original `renderScene` function to get rid of the button
    and include the home screen as a component. Create a new component called `HomeScreen`;
    the contents of this screen won''t matter much, as we will come back to it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then import it into `index.ios.js` or `index.android.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see how the navigation bar persists across each route:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigator.NavigationBar](img/B05162_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s it! Reload and take a look at how the static navigation bar persists
    across each route:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigator.NavigationBar](img/B05162_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For a more detailed guide on Navigator, check out the React Native documentation
    at [https://facebook.github.io/react-native/docs/navigator.html](https://facebook.github.io/react-native/docs/navigator.html).
    We now have the proper infrastructure to go ahead and start adding the create
    note functionality to our application.
  prefs: []
  type: TYPE_NORMAL
- en: The NoteScreen – first pass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a `NoteScreen` and can navigate to it, let's start making it
    useful. We'll need to add some `TextInput` components, one for the title of the
    note and one to capture the body. We'll want to automatically set focus on the
    `TextInput` for the title, so the user can start typing right away. We'll need
    to listen to events on the `TextInput` components, so we can keep a track of what
    the user has typed by updating the state. We'd also like to know when the user
    has finished editing the title of the note, so that we can automatically set focus
    on the `TextInput` for the body.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add the `TextInput` component to our list of dependencies and
    remove the `Text` component since we no longer need it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we add the `TextInput` components to the `View`, let''s get a few style
    updates out of the way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we''ve added a `marginTop: 64` to the container. This is important
    because we want to make sure that the `NavigationBar` doesn''t accidentally intercept
    the `onPress` events we want our `TextInput` to receive. We''ve also added styles
    for each of the `TextInputs` we''re about to add. We''ll talk more about styles
    in detail in [Chapter 4](ch04.html "Chapter 4. Working with Styles and Layout"),
    *Working with Styles and Layout*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in our render function, let''s replace the `Text` component with two `TextInput`
    components, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Before we try this out, notice that the `TextInput` component has a placeholder
    property that allows us to tell the user what the `TextInput` is for without having
    to take up additional screen real estate by labeling our form fields. I've also
    specified `multiline={true}` on the second `TextInput` so the user can add as
    much text as they want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s refresh the application in the simulator and you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The NoteScreen – first pass](img/B05162_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should be able to click into `TextInput` and start typing. If you'd like
    to use the on-screen keyboard available in the simulator, you can press *Cmd*+*K*
    / *Ctrl*+*K*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s improve the user experience a little bit by making the title `TextInput`
    focus automatically and show the keyboard when the user navigates to the `NoteScreen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To be even more user friendly, let''s listen for the event that tells us the
    user has finished editing the title and automatically set focus on the body `TextInput`.
    To do that we''ll need to make a slight change to the body `TextInput` so that
    we can refer to it in our event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the `ref="body"`. Any React component can be given a `ref` so that it
    can be referenced in your `javascript` code. Now, in the title `TextInput`, we
    can add an `onEndEditing` event handler that sets focus on the `TextInput` body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Avoid using refs to set and get values on your components! That's what `state`
    is for and we'll learn all about state in [Chapter 5](ch05.html "Chapter 5. Displaying
    and Saving Data"), *Displaying and Saving Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Now when you refresh the application in the simulator and navigate to the `NoteScreen`,
    you will see that the title `TextInput` has focus and you should be able to type
    something. Press *Enter* and see the focus automatically switch to the body and
    start typing there as well. If you're not seeing the on-screen keyboard when you
    try this, press *Cmd* + *K* / *Ctrl* + *K* and try again.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have created the skeleton of our `ReactNotes` application,
    walked you through how to create a new project, created `Views` and custom components,
    navigated between the `HomeScreen` and `NoteScreen`, and debugged your application.
  prefs: []
  type: TYPE_NORMAL
- en: You now have a solid foundation for all of the topics we'll introduce throughout
    the rest of the book. However, there are two big problems with this application,
    it's not pretty and it doesn't do anything! In the next two chapters, we'll solve
    both of those problems and you'll be well on your way to master React Native!
  prefs: []
  type: TYPE_NORMAL
