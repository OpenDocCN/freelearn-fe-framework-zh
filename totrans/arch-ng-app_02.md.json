["```js\n{\n  type: 'SELECT_ITEM',\n  data: 3 // selected index\n}\n```", "```js\ndispatcher.dispatch(message);\n```", "```js\ndispatcher.register(function(message){});\n```", "```js\ndispatcher.register((message) => {\n  switch(message.type) {\n    case 'SELECT_ITEM':\n      // do something\n  }\n});\n```", "```js\n// store.js\n\nlet store = {};\n\nfunction selectIndex(index) {\n  store[\"selectedIndex\"] = index;\n}\n\ndispatcher.register(message => {\n  switch (message.type) {\n    case \"SELECT_INDEX\":\n      selectIndex(message.data);\n      break;\n  }\n});\n```", "```js\n// store-with-pubsub.js\n\nfunction selectIndex(index) {\n  store[\"selectedIndex\"] = index;\n}\n\n// registering with the dispatcher\ndispatcher.register(message => {\n  switch (message.type) {\n    case \"SELECT_INDEX\":\n      selectIndex(message.data);\n\n      // signals to the listener that a change has happened\n      store.emitChange();\n break;\n }\n});\n\nclass Store {\n  constructor() {\n    this.listeners = [];\n  }\n\n  addListener(listener) {\n if (!this.listeners[\"change\"]) {\n      this.listeners[\"change\"] = [];\n    }\n this.listeners[\"change\"].push(listener);\n  }\n\n  emitChange() {\n    if (this.listeners[\"change\"]) {\n      this.listeners[\"change\"].forEach(cb => cb());\n    }\n  }\n\n  getSelectedItem() {\n    return store[\"selectedIndex\"];\n  }\n}\n\nconst store = new Store();\nexport default store;\n```", "```js\n// view.js\n\nimport store from \"./store-with-pubsub\";\n\nclass View {\n  constructor(store) {\n    this.index = 0;\n    store.addListener(this.notifyChanged);\n  }\n\n  // invoked from the store\n  notifyChanged() {\n    // rereads data from the store\n this.index = store.getSelectedItem();\n\n    // reloading the data\n    render();\n  }\n  render() {\n    const elem = document.getElementById('view');\n    elem.innerHTML = `Your selected index is: ${this.index}`;\n  }\n}\n\nlet view = new View();\n\n// view.html\n<html>\n  <body>\n    <div id=\"view\"></div>\n  </body>\n</html>\n```", "```js\n// demo/selectionView.js\n\nimport dispatcher from \"./dispatcher\";\n\nconsole.log('selection view loaded');\n\nclass SelectionView {\n  selectIndex(index) {\n console.log('selected index ', index);\n    dispatcher.dispatch({\n type: \"SELECT_INDEX\",\n      data: index\n });\n }\n}\n\nconst view = new SelectionView();\nexport default view;\n```", "```js\n// demo/dispatcher.js\n\nclass Dispatcher {\n  constructor() {\n    this.listeners = [];\n  }\n\n  dispatch(message) {\n    this.listeners.forEach(listener => listener(message));\n  }\n\n  register(listener) {\n    this.listeners.push(listener);\n  }\n}\n\nconst dispatcher = new Dispatcher();\nexport default dispatcher;\n```", "```js\n// demo/store.js\n\nimport dispatcher from './dispatcher';\n\nfunction selectIndex(index) {\n  store[\"selectedIndex\"] = index;\n}\n\n// 1) store registers with dispatcher\ndispatcher.register(message => {\n  switch (message.type) {\n    // 3) message is sent by dispatcher ( that originated from the first view)\n    case \"SELECT_INDEX\":\n      selectIndex(message.data);\n      // 4) listener, a view, is being notified of the change\n      store.emitChange();\n      break;\n    }\n});\n\nclass Store {\n  constructor() {\n    this.listeners = [];\n  }\n\n  // 2) listener is added by a view\n  addListener(listener) {\n    if (!this.listeners[\"change\"]) {\n      this.listeners[\"change\"] = [];\n    }\n\n    this.listeners[\"change\"].push(listener);\n  }\n\n  emitChange() {\n    if (this.listeners[\"change\"]) {\n      this.listeners[\"change\"].forEach(cb => cb());\n    }\n  }\n\n  getSelectedItem() {\n    return store[\"selectedIndex\"];\n  }\n}\n\nconst store = new Store();\nexport default store;\n```", "```js\n// demo/selectedView.js\n\nimport store from \"./store\";\n\nconsole.log('selected view loaded');\n\nclass SelectedView {\n  constructor() {\n    this.index = 0;\n    store.addListener(this.notifyChanged.bind(this));\n  }\n\n  notifyChanged() {\n    this.index = store.getSelectedItem();\n    console.log('new index is ', this.index);\n  }\n}\n\nconst view = new SelectedView();\nexport default SelectedView;\n```", "```js\n// demo/app.js\n\nimport selectionView from './selectionView';\nimport selectedView from './selectedView';\n\n// carry out the selection\nselectionView.selectIndex(1);\n\n```", "```js\nnpm install webpack webpack-cli --save-dev\n```", "```js\n// webpack.config.js\n\nmodule.exports = {\n  entry: \"./app.js\",\n  output: { \n    filename: \"bundle.js\"\n  },\n  watch: false\n};\n```", "```js\n// demo/dist/index.html\n\n<html>\n  <body>\n    <script src=\"img/bundle.js\"></script>\n  </body>\n</html>\n\n```", "```js\nwebpack && cd dist && http-server -p 5000\n```", "```js\n// first.view.js\n\nimport dispatcher from \"./dispatcher\";\n\nclass FirstView {\n  selectIndex(index) {\n    dispatcher.dispatch({\n      type: \"SELECT_INDEX\",\n      data: index\n    });\n  }\n}\n\nlet view = new FirstView();\n```", "```js\n// first.viewII.js\n\nimport dispatcher from \"./dispatcher\";\n\nclass View {\n  selectIndex(data) {\n    dispatcher.dispatch({\n      type: \"SELECT_INDEX\",\n      data\n    });\n  }\n\n  createProduct(data) {\n    dispatcher.dispatch({\n      type: \"CREATE_PRODUCT\",\n      data\n    });\n  }\n\n  removeProduct(data) {\n    dispatcher.dispatch({\n      type: \"REMOVE_PRODUCT\",\n      data\n    });\n  }\n}\n\nlet view = new View(); \n```", "```js\n// product.constants.js\n\nexport const SELECT_INDEX = \"SELECT_INDEX\",\nexport const CREATE_PRODUCT = \"CREATE_PRODUCT\",\nexport const REMOVE_PRODUCT = \"REMOVE_PRODUCT\"\n```", "```js\n// product.actions.js\n\nimport {\n  SELECT_INDEX,\n  CREATE_PRODUCT,\n  REMOVE_PRODUCT\n} from \"./product-constants\";\nimport dispatcher from \"./dispatcher\";\nimport ProductConstants from \"./product.constants\";\n\nexport const selectIndex = data =>\n  dispatcher.dispatch({\n    type: SELECT_INDEX,\n    data\n  });\n\nexport const createProduct = data =>\n  dispatcher.dispatch({\n    type: CREATE_PRODUCT,\n    data\n  });\n\nexport const removeProduct = data =>\n  dispatcher.dispatch({\n    type: REMOVE_PRODUCT,\n    data\n  });\n```", "```js\n// first.viewIII.js\n\nimport { \n  selectIndex, \n  createProduct, \n  removeProduct \n} from 'product.actions';\n\nfunction View() {\n  this.selectIndex = index => {\n    selectIndex(index);\n  };\n\n  this.createProduct = product => {\n    createProduct(product);\n  };\n\n  this.removeProduct = product => {\n    removeProduct(product)\n  };\n}\n\nvar view = new View();\n```", "```js\n// store-event-emitter.js\n\nexport const Store = (() => {\n  const eventEmitter = new EventEmitter();\n  return {\n    addListener: listener => {\n      eventEmitter.on(\"changed\", listener);\n    },\n    emitChange: () => {\n      eventEmitter.emit(\"changed\");\n    },\n    getSelectedItem: () => store[\"selectedItem\"]\n  };\n})();\n```", "```js\n// store.js\n\nlet store = {};\n\nfunction selectIndex(index) {\n  store[\"selectedIndex\"] = index;\n}\n\ndispatcher.register(message => {\n  switch (message.type) {\n    case \"SELECT_INDEX\":\n      selectIndex(message.data);\n      break;\n  }\n});\n```", "```js\n// store-actions.js\n\nimport dispatcher from \"./dispatcher\";\nimport {\n  SELECT_INDEX,\n  CREATE_PRODUCT,\n  REMOVE_PRODUCT\n} from \"./product.constants\";\n\nlet store = {};\n\nfunction selectIndex(index) {\n  store[\"selectedIndex\"] = index;\n}\n\nexport const Store = (() => {\n  var eventEmitter = new EventEmitter();\n  return {\n    addListener: listener => {\n      eventEmitter.on(\"changed\", listener);\n    },\n    emitChange: () => {\n      eventEmitter.emit(\"changed\");\n    },\n    getSelectedItem: () => store[\"selectedItem\"]\n  };\n})();\n\ndispatcher.register(message => {\n  switch (message.type) {\n    case \"SELECT_INDEX\":\n      selectIndex(message.data);\n      break;\n  }\n});\n\nconst createProduct = product => {\n  if (!store[\"products\"]) {\n    store[\"products\"] = [];\n  }\n store[\"products\"].push(product);\n};\n\nconst removeProduct = product => {\n  var index = store[\"products\"].indexOf(product);\n  if (index !== -1) {\n    store[\"products\"].splice(index, 1);\n  }\n};\n\ndispatcher.register(({ type, data }) => {\n  switch (type) {\n    case SELECT_INDEX:\n      selectIndex(data);\n      break;\n    case CREATE_PRODUCT:\n      createProduct(data);\n break;\n    case REMOVE_PRODUCT:\n      removeProduct(data);\n }\n});\n```", "```js\n// store-event-emitter.js\n\nvar Store = (function(){\n  const eventEmitter = new EventEmitter();\n\n  return {\n    addListener: listener => {\n      eventEmitter.on(\"changed\", listener);\n    },\n    emitChange: () => {\n      eventEmitter.emit(\"changed\");\n    },\n    getSelectedItem: () => store[\"selectedItem\"]\n  };\n})();\n```", "```js\n// store-es2015.js\n\nimport { EventEmitter } from \"events\";\nimport {\nSELECT_INDEX,\nCREATE_PRODUCT,\nREMOVE_PRODUCT\n} from \"./product.constants\";\n\nlet store = {};\n\nclass Store extends EventEmitter {\n  constructor() {}\n    addListener(listener) {\n this.on(\"changed\", listener);\n  }\n\n emitChange() {\n this.emit(\"changed\");\n  }\n\n getSelectedItem() {\n return store[\"selectedItem\"];\n  }\n}\n\nconst storeInstance = new Store();\n\nfunction createProduct(product) {\n  if (!store[\"products\"]) {\n    store[\"products\"] = [];\n  }\n  store[\"products\"].push(product);\n}\n\nfunction removeProduct(product) {\n  var index = store[\"products\"].indexOf(product);\n  if (index !== -1) {\n    store[\"products\"].splice(index, 1);\n  }\n}\n\ndispatcher.register(({ type, data }) => {\n  switch (type) {\n    case SELECT_INDEX:\n      selectIndex(data);\n      storeInstance.emitChange();\n      break;\n    case CREATE_PRODUCT:\n      createProduct(data);\n      storeInstance.emitChange();\n      break;\n    case REMOVE_PRODUCT:\n      removeProduct(data);\n      storeInstance.emitChange();\n  }\n});\n```", "```js\nvar oldState = 3;\nvar newState = oldState + 2\n```", "```js\n// excerpt from store-actions.js\n\nconst createProduct = product => {\n  if (!store[\"products\"]){ \n    store[\"products\"] = [];\n  }\n  store[\"products\"].push(product);\n};\n\nconst removeProduct = product => {\n  var index = store[\"products\"].indexOf(product);\n  if (index !== -1) {\n    store[\"products\"].splice(index, 1);\n  }\n};\n```", "```js\n// excerpt from our new store-actions-immutable.js\n\nconst createProduct = product => {\n  if (!store[\"products\"]) {\n    store[\"products\"] = [];\n  }\n  store.products = [...store.products, Object.assign(product)];\n};\n\nconst removeProduct = product => {\n  if (!store[\"products\"]) return;\n\n  store[\"products\"] = products.filter(p => p.id !== product.id);\n};\n```", "```js\n// excerpt from store-actions-immutable.js\n\nconst createProduct = (product) => {\n  if (!store[\"products\"]) {\n    store[\"products\"] = [];\n  }\n\n  store.products = [...store.products, Object.assign(product)];\n}\n\ndispatcher.register(({ type, data }) => {\n  switch (type) {\n    case CREATE_PRODUCT:\n      createProduct(data);\n      store.emitChange();\n      break;\n      /* other cases below */\n  }\n})\n```", "```js\n// example use of fetch()\n\nfetch(\n  '/products' ,\n  { method : 'POST', body: product })\n  .then(response => {\n   // send a message to the dispatcher that the list of products should be reread\n}, err => {  \n  // report error\n});\n```", "```js\n// contrasting example of 'fetch() with promise' vs 'fetch with async/await'\n\nfetch('url')\n .then(data => console.log(data))\n .catch(error => console.error(error));\n\n // using async/await\n try {\n   const data = await fetch('url');\n   console.log(data);\n } catch (error) {\n   console.error(error);\n }\n```", "```js\n// api.js \n\nexport class Api {\n  createProduct(product) {\n    return fetch(\"/products\", { method: \"POST\", body: product });\n  }\n}\n```", "```js\n// excerpt from store-actions-api.js\n\nimport { Api } from \"./api\";\n\nconst api = new Api();\n\ncreateProduct() {\n  api.createProduct();\n}\n```", "```js\n// product.constants.js\n\nexport const SELECT_INDEX = \"SELECT_INDEX\";\nexport const CREATE_PRODUCT = \"CREATE_PRODUCT\";\nexport const REMOVE_PRODUCT = \"REMOVE_PRODUCT\";\nexport const GET_PRODUCTS = \"GET_PRODUCTS\";\n```", "```js\n// excerpt from store-actions-api.js\n\nimport { Api } from \"./api\";\nimport {\n  // other actions per usual\n  GET_PRODUCTS,\n} from \"./product.constants\";\n\nconst setProducts = (products) => {\n store[\"products\"] = products;\n}\n\nconst setError = (error) => {\n  store[\"error\"] = error;\n}\n\ndispatcher.register( async ({ type, data }) => {\n  switch (type) {\n    case CREATE_PRODUCT:\n      try {\n        await api.createProduct(data);\n        dispatcher.dispatch(getProducts());\n      } catch (error) {\n        setError(error);\n        storeInstance.emitError();\n      }\n      break;\n    case GET_PRODUCTS:\n try {\n const products = await api.getProducts();\n setProducts(products);\n storeInstance.emitChange();\n }\n catch (error) {\n setError(error);\n storeInstance.emitError();\n }\n break;\n  }\n});\n```", "```js\n// store-actions-api.js\n\nimport dispatcher from \"./dispatcher\";\nimport { Action } from \"./api\";\nimport { Api } from \"./api\";\nimport {\n  CREATE_PRODUCT,\n  GET_PRODUCTS,\n  REMOVE_PRODUCT,\n  SELECT_INDEX\n} from \"./product.constants\";\n\nlet store = {};\n\nclass Store extends EventEmitter {\n  constructor() {}\n  addListener(listener) {\n    this.on(\"changed\", listener);\n  }\n\n  emitChange() {\n    this.emit(\"changed\");\n  }\n\n  emitError() {\n    this.emit(\"error\");\n  }\n\n  getSelectedItem() {\n    return store[\"selectedItem\"];\n  }\n}\n\nconst api = new Api();\nconst storeInstance = new Store();\n\nconst selectIndex = index => {\n  store[\"selectedIndex\"] = index;\n};\n\nconst createProduct = product => {\n  if (!store[\"products\"]) {\n    store[\"products\"] = [];\n  }\n  store.products = [...store.products, Object.assign(product)];\n};\n\nconst removeProduct = product => {\n  if (!store[\"products\"]) return;\n  store[\"products\"] = products.filter(p => p.id !== product.id);\n};\n\nconst setProducts = products => {\n  store[\"products\"] = products;\n};\n\nconst setError = error => {\n  store[\"error\"] = error;\n};\n\ndispatcher.register(async ({ type, data }) => {\n  switch (type) {\n    case \"SELECT_INDEX\":\n      selectIndex(message.data);\n      storeInstance.emitChange();\n      break;\n    case CREATE_PRODUCT:\n      try {\n        await api.createProduct(data);\n        storeInstance.emitChange();\n      } catch (error) {\n        setError(error);\n        storeInstance.emitError();\n      }\n      break;\n    case GET_PRODUCTS:\n      try {\n        const products = await api.getProducts();\n        setProducts(products);\n        storeInstance.emitChange();\n      } catch (error) {\n        setError(error);\n        storeInstance.emitError();\n      }\n      break;\n   }\n});\n```", "```js\n/customers \n  constants.js\n  customer-actions.js\n  customer-store.js\n  customer-api.js\n/orders\n  constants.js\n  orders-actions.js\n  orders-store.js\n  orders-api.js\n/messages\n  constants.js\n  messages-actions.js\n  messages-store.js\n  messages-api.js\n/friends\n  constants.js\n  friends-actions.js\n  friends-store.js\n  friends-api.js\n/common\n  dispatcher.js\n```"]