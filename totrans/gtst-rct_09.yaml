- en: Chapter 9. Preparing Your Code for Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章.为部署准备代码
- en: Going through the ReactJS fundamentals and flux, we have almost approached the
    end of this book. After developing any application, we are left with the most
    crucial part of making the application available to the outside world, thus deploying
    your application. It's a good practice to keep the code in a source control repository
    such as GitHub or Bitbucket and to version control the code using Git. These help
    while working in a group and retrieval of any code as and when necessary. The
    explanation of how to set up the earlier-mentioned things is beyond the scope
    of this book, but there are a plenty of resources available for the same.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习ReactJS基础和flux之后，我们几乎接近了这本书的结尾。在开发任何应用程序后，我们面临的最关键部分是将应用程序提供给外部世界，即部署应用程序。将代码保存在源代码控制仓库（如GitHub或Bitbucket）中，并使用Git进行代码版本控制是一个好习惯。这些在团队合作和必要时检索任何代码时都有帮助。如何设置前面提到的内容的解释超出了本书的范围，但有许多资源可供参考。
- en: 'In this chapter, we will be exploring the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: An introduction to Webpack
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack简介
- en: The ways of deploying a React application using Webpack and Gulp
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Webpack和Gulp部署React应用程序的方法
- en: The configuration options used for browserify
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于browserify的配置选项
- en: Installing a simple web server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装简单的Web服务器
- en: An introduction to Webpack
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack简介
- en: '**Webpack** is a module bundler, which is used to deploy JavaScript-based applications.
    It takes the input as modules with dependencies and then outputs these into static
    assets.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Webpack**是一个模块打包器，用于部署基于JavaScript的应用程序。它将输入作为具有依赖关系的模块，然后将其输出为静态资源。'
- en: From the Webpack documentation site ([https://webpack.github.io/docs/what-is-webpack.html#how-is-webpack-different](https://webpack.github.io/docs/what-is-webpack.html#how-is-webpack-different)),
    the following image explains the same.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从Webpack文档网站([https://webpack.github.io/docs/what-is-webpack.html#how-is-webpack-different](https://webpack.github.io/docs/what-is-webpack.html#how-is-webpack-different))，以下图像解释了相同的内容。
- en: '![An introduction to Webpack](img/00054.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Webpack简介](img/00054.jpeg)'
- en: Building a simple React application
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建简单的React应用程序
- en: As in the earlier chapters, let's build a simple React-based application with
    which we will be integrating the Webpack and deploy thereafter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，让我们构建一个简单的基于React的应用程序，我们将集成Webpack并在之后部署它。
- en: 'Install the packages `vis npm` from a terminal as:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端安装`vis npm`包，如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`httpster`: It is a simple http server to run the static content. In chrome
    browser, the `index.html` file sometimes doesn''t render due to the X-origin error.
    Hence, running this webserver from your application directory will be easier to
    test your application in Chrome. Just run the command `httpster`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`httpster`: 这是一个简单的http服务器，用于运行静态内容。在Chrome浏览器中，由于X-origin错误，`index.html`文件有时无法渲染。因此，从您的应用程序目录运行此Web服务器将更容易测试您的应用程序。只需运行命令`httpster`。'
- en: By default, the server runs in port `3333`, thus `localhost:3333` in the browsers
    should render the `index.html` page of your application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，服务器在端口`3333`上运行，因此浏览器中的`localhost:3333`应该渲染您的应用程序的`index.html`页面。
- en: 'We have created the following files:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了以下文件：
- en: '`src/bundle.js`: This is where Webpack writes its output to, after transpiling
    the code and performing any other transformations of the file to plain JS. The
    details of this file are discussed in the latter section.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/bundle.js`: 这是在Webpack将代码转换为普通JS并执行任何其他文件转换后，Webpack将其输出到的地方。该文件的详细信息将在后面的部分讨论。'
- en: '`index.html`: Application landing page.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`: 应用程序着陆页。'
- en: '`index.js`: React-based components.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.js`: 基于React的组件。'
- en: '.`babelrc`: presets and environments of babel are declared here.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.babelrc`: 在这里声明了babel的预设和环境。'
- en: '`node_modules`: Installed `npm` packages are present.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules`: 存储已安装的`npm`包。'
- en: '`Webpack.config.js`: Webpack-related configurations are present here.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Webpack.config.js`: 在这里存在Webpack相关的配置。'
- en: 'The following is a console screenshot, showing app directory structure using
    Webpack:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个控制台截图，显示了使用Webpack的应用程序目录结构：
- en: '![Building a simple React application](img/00055.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![构建简单的React应用程序](img/00055.jpeg)'
- en: 'Take a look at the simple React app code example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 查看简单的React应用代码示例：
- en: '**index.html:**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**index.html:**'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**index.js:**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**index.js:**'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting up Webpack
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Webpack
- en: Now that we got an overview of what Webpack is, let's install and configure
    it so that we can use it in our React application, as mentioned later.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Webpack是什么，让我们安装和配置它，以便我们可以在React应用程序中使用它，如后面所述。
- en: 'In you terminal, type the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端中，输入以下内容：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `-g` option installs the Webpack library globally in your computer.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`-g` 选项将 Webpack 库全局安装到你的计算机上。'
- en: 'As you can see, in the following screenshot, there are many dependent packages,
    which also gets installed while installing Webpack:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在下面的截图中，有许多依赖包，这些包在安装 Webpack 时也会被安装：
- en: '![Setting up Webpack](img/00056.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Webpack](img/00056.jpeg)'
- en: A console screenshot, showing webpack package installation with all the dependencies
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 webpack 包安装及其所有依赖项的控制台截图
- en: 'After Webpack''s installation, we will be creating the `webpack-config.js`
    file, with entries given as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Webpack 之后，我们将创建一个 `webpack-config.js` 文件，其中包含以下条目：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Let''s explain the preceding code.**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们解释前面的代码。**'
- en: We start off with the entry point of our application. As React-based applications
    generally have many components, having a common entry point for all of these components
    will be easier to manage and important for well-structured modular applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从应用程序的入口点开始。由于基于 React 的应用程序通常有很多组件，为所有这些组件有一个共同的入口点将更容易管理，并且对于结构良好的模块化应用来说很重要。
- en: We then direct the output to a file `bundle.js` and combine all components and
    its children.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将输出指向一个名为 `bundle.js` 的文件，并将所有组件及其子组件合并。
- en: After loading the test loader, we mention which packages are to be excluded
    within the `node_modules` directory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载测试加载器后，我们说明在 `node_modules` 目录中要排除哪些包。
- en: We then use the loaders, specifying which one of them to use. The presets loader
    does all the transformations that Babel does while transpiling the ES6 code into
    the current browser-compatible code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用加载器，指定使用哪一个。预设加载器在将 ES6 代码转换为当前浏览器兼容代码时执行 Babel 所做的所有转换。
- en: Let's run the Webpack command in our terminal now,
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在我们的终端中运行 Webpack 命令，
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`sudo` is used as we need the sudo/root permission in order to execute the
    Webpack commands or we need to change the ownership/permissions of the specific
    directory.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `sudo`，因为我们需要 sudo/root 权限来执行 Webpack 命令，或者我们需要更改特定目录的所有权/权限。
- en: 'The `-w` option ensures to watch any file that changes. It''ll watch the source
    files for changes, and when changes are made, the bundle will be recompiled. (Source:
    [https://webpack.github.io/docs/webpack-dev-server.html](https://webpack.github.io/docs/webpack-dev-server.html)).'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`-w` 选项确保监视任何发生变化的文件。它将监视源文件的变化，当发生变化时，捆绑包将被重新编译。（来源：[https://webpack.github.io/docs/webpack-dev-server.html](https://webpack.github.io/docs/webpack-dev-server.html)）。'
- en: The `-v` option gives the verbose output.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`-v` 选项给出详细输出。'
- en: '`webpack --help`: This command gives the output of all the options and their
    corresponding meanings, which can be passed as arguments.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack --help`：此命令给出所有选项及其对应含义的输出，这些选项可以作为参数传递。'
- en: '![Setting up Webpack](img/00057.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Webpack](img/00057.jpeg)'
- en: A console screenshot, after the webpack execution on the terminal
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端上执行 Webpack 后的控制台截图
- en: Thus, all the transformations and transpirations of the code is there in the
    `src/bundle.js` output file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有代码的转换和转换都在 `src/bundle.js` 输出文件中。
- en: 'Typical out of the `bundle.js` file from the app mentioned earlier:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面提到的应用中典型的 `bundle.js` 文件输出：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Refer to the Webpack documentation at [https://webpack.github.io/docs/webpack-dev-server.html](https://webpack.github.io/docs/webpack-dev-server.html).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 Webpack 文档[https://webpack.github.io/docs/webpack-dev-server.html](https://webpack.github.io/docs/webpack-dev-server.html)。
- en: The newly generated `bundle.js` is stored in the memory in a location, which
    is the relative path specified in publicPath.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 新生成的 `bundle.js` 存储在内存中，位置是 publicPath 中指定的相对路径。
- en: For example, with the preceding configuration, the bundle will be available
    at `localhost:8080/assets/bundle.js`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用前面的配置，捆绑包将在 `localhost:8080/assets/bundle.js` 可用。
- en: 'In order to load the bundled files, we create the html file (mostly named as
    the `index.html` file) in the `build` folder from which static files are served:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加载捆绑文件，我们在 `build` 文件夹中创建一个 html 文件（通常命名为 `index.html` 文件），从该文件夹提供静态文件：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By default, the application runs in `localhost:8080/` to launch your app. For
    example, with the configuration mentioned earlier (with publicPath), go to `localhost:8080/assets/`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，应用程序在 `localhost:8080/` 运行以启动你的应用。例如，使用前面提到的配置（带有 publicPath），访问 `localhost:8080/assets/`。
- en: Advantages of Webpack
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 的优势
- en: 'Along the various advantages of using Webpack, as yet another bundler, these
    are the most important ones:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Webpack 作为另一个打包器时，以下是一些重要的优势：
- en: '**Code splitting**: Based on the code size, it helps modularize the code chunks
    of code and loads these modules as and when needed. You can define the split points
    on your code, based on which the code chunks will be used. Thus, it helps in faster
    page load and performance improvement.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码拆分**：基于代码大小，它有助于模块化代码块，并在需要时加载这些模块。你可以在你的代码中定义拆分点，根据这些拆分点，将使用代码块。因此，它有助于加快页面加载速度和性能提升。'
- en: '**Loaders**: As in the earlier-mentioned image, in the left-hand side, you
    can see that there are various other formats such as `coffescripts`/`jsx` instead
    of JavaScript and .less instead of `.css`. Thus, these loaders (`npm` packages)
    are used to convert these other formats into the accepted standardized formats,
    which makes the life of the developers much easy to code into any format they
    want. In React-based applications that we were seeing earlier, JSX formats are
    widely used. Hence, these loaders will come handy.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加载器**：如前所述的图片所示，在左侧，你可以看到除了JavaScript和`.less`代替`.css`之外，还有各种其他格式，如`coffescripts`/`jsx`。因此，这些加载器（`npm`包）被用来将这些其他格式转换为接受的标准化格式，这使得开发者能够更容易地将代码编码成他们想要的任何格式。在我们之前看到的基于React的应用程序中，JSX格式被广泛使用。因此，这些加载器将非常有用。'
- en: '**Clever parsing**: It helps to parse most of the third-party library and handles
    the widely used styles in CommonJS and AMD.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**聪明的解析**：它有助于解析大多数第三方库，并处理CommonJS和AMD中广泛使用的样式。'
- en: '**Plugin system**: In case you want to extend Webpack to create a step within
    the build process, you can create a plugin that uses a callback to the Webpack
    reference point, where you want to call it.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**插件系统**：如果你想扩展Webpack以在构建过程中创建一个步骤，你可以创建一个使用回调到Webpack引用点的插件，在那里你想调用它。'
- en: Introduction to Gulp
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gulp简介
- en: Now that we have seen a module bundler, let's see what Gulp will do for us.
    Gulp is a build tool for compiling and compressing JS/assets, and it does live
    reload on the browsers. Gulp file is basically a file with the set of instructions,
    which Gulp should do. The file can have a default task or several other tasks
    to be called from one another.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一个模块打包器，让我们看看Gulp能为我们做什么。Gulp是一个用于编译和压缩JS/资源的构建工具，并且它可以在浏览器上执行实时重新加载。Gulp文件基本上是一个包含Gulp应该执行的一组指令的文件。该文件可以有一个默认任务或几个其他任务，可以从一个任务调用另一个任务。
- en: Installing Gulp and creating Gulp file
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Gulp和创建Gulp文件
- en: 'Let''s install `gulp` and configure it with our existing application:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装`gulp`并配置它与我们的现有应用程序：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, create a simple `gulpfile.js` file at the root of your app directory:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在应用程序目录的根目录下创建一个简单的`gulpfile.js`文件：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s execute the command from terminal:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从终端执行命令：
- en: '![Installing Gulp and creating Gulp file](img/00058.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![安装Gulp和创建Gulp文件](img/00058.jpeg)'
- en: A console screenshot, after the gulp command is executed
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行gulp命令后的控制台截图
- en: 'Then, we are installing some other packages for Gulp-related tasks. We are
    adding these in our `package.json` file and running `npm` install, in order to
    install these:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们为Gulp相关的任务安装了一些其他包。我们在`package.json`文件中添加这些包，并运行`npm install`来安装这些包：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'A few of the key things in gulp:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Gulp中的一些关键事项：
- en: Initially, we need to require all the gulp and related gulp plugins/packages,
    which are required while executing the tasks
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始时，我们需要引入所有在执行任务时所需的gulp和相关gulp插件/包。
- en: The gulp tasks are declared with `gulp.task`.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`gulp.task`声明gulp任务。
- en: The .`pipe` command is used to stream data that needs to be processed. This
    command is used concatenated, which results in getting the output together.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.pipe`命令用于流式传输需要处理的数据。这个命令用于连接，结果是得到输出。'
- en: 'Now if we add some tasks in the Gulp file, it will look like the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们向Gulp文件添加一些任务，它将看起来像以下这样：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Let''s go** **through** **the preceding code:**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们分析** **前面的代码**：'
- en: Four Gulp tasks are declared earlier and are highlighted. The **default** mandatory
    task is calling three tasks internally, as in the last highlighted line. In Gulp
    terms, any task calling other tasks are mentioned as array elements of the parent
    task.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前声明了四个gulp任务，并已突出显示。**默认**强制任务在最后一行突出显示时内部调用三个任务。在Gulp术语中，调用其他任务的任何任务都被提及为父任务的数组元素。
- en: '`gulp.task (''eslinting'', function)`: This task is used to check any issue
    with the code in the `js` & `jsx` files. In order to check the `jsx` with `gulp-eslint`
    plugin, the `ecmaFeature: {"jsx": true}` option is set.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulp.task (''eslinting'', function)`: 这个任务用于检查`js` & `jsx`文件中的任何代码问题。为了使用`gulp-eslint`插件检查`jsx`，设置了`ecmaFeature:
    {"jsx": true}`选项。'
- en: '`gulp.watch`: As the name suggests, this task watches any change in the JS
    files, and recompiles the files thereafter. In case it''s not required to watch
    any files, we need to pass `read: false` to the `options` object. After the change
    in the `js`/`jsx` files, we can call `browserSync.reload` or add tasks in order
    to reload your html page.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulp.watch`：正如其名所示，这个任务会监视 JS 文件中的任何变化，并在之后重新编译这些文件。如果不需要监视任何文件，我们需要将 `read:
    false` 传递给 `options` 对象。在 `js`/`jsx` 文件发生变化后，我们可以调用 `browserSync.reload` 或添加任务以重新加载您的
    HTML 页面。'
- en: '`browsersync`: This plugin is not officially for gulp; though it can work with
    any gulp task. Any change in the `js`/`jsx` files will be synced to the browser.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`browsersync`：这个插件不是官方为 gulp 设计的；尽管它可以与任何 gulp 任务一起工作。`js`/`jsx` 文件中的任何变化都会同步到浏览器。'
- en: 'After executing the gulp command from app''s root directory in the terminal,
    we should be able to see such an output in the terminal. See the following image:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中从应用程序的根目录执行 gulp 命令后，我们应该能够在终端中看到这样的输出。请参阅以下图片：
- en: '![Installing Gulp and creating Gulp file](img/00059.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Gulp 和创建 Gulp 文件](img/00059.jpeg)'
- en: A console screenshot, after the gulp command with tasks been executed
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 执行带有任务 gulp 命令后的控制台截图
- en: Let's check once how the `gulp-eslint` works. Add a line such as require 'react',
    at the beginning of the `index.js` file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下 `gulp-eslint` 的工作方式。在 `index.js` 文件的开始处添加一行，例如 `require 'react'`。
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Installing Gulp and creating Gulp file](img/00060.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Gulp 和创建 Gulp 文件](img/00060.jpeg)'
- en: A console screenshot, after the gulp command with an eslint task with error
    been executed
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 执行带有包含错误 eslint 任务的 gulp 命令后的控制台截图
- en: As we know, it should be `var React = require("react")`; is the correct way
    of requiring the React package.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，`var React = require("react")` 应该是正确引入 React 包的方式。
- en: There are many for Gulp plugins, which are helpful in our day-to-day application
    development apart from the ones mentioned in the earlier-mentioned example. Please
    feel free to see the Gulp documentation and related plugins from their website
    [http://gulpjs.com/](http://gulpjs.com/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Gulp 插件来说，有很多，除了在前面提到的示例中提到的那些，它们在我们的日常应用开发中也非常有帮助。请随意查看 Gulp 文档以及他们网站上的相关插件
    [http://gulpjs.com/](http://gulpjs.com/)。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we came to know how we can deploy our React applications using
    Webpack and the way Gulp eases our life by automating tasks, minifying our assets
    (JS, JSX, CSS, SASS, images, and so on), watching any changes on these files and
    live-reload built in the browser. In [Chapter 10](part0057_split_000.html#page
    "Chapter 10. What's Next"), *What's Next*, we will be exploring some advanced
    concepts of ReactJS.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到如何使用 Webpack 部署我们的 React 应用程序，以及 Gulp 如何通过自动化任务、压缩我们的资源（JS、JSX、CSS、SASS、图片等）、监视这些文件的变化以及内置在浏览器中的实时重新加载来简化我们的生活。在
    [第 10 章](part0057_split_000.html#page "第 10 章。接下来是什么")，*接下来是什么*，我们将探讨一些 ReactJS
    的高级概念。
