- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building and Configuring Pages
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have configured the base of our application, including
    the setup of the application, and shared UI components that will serve as the
    foundation of our UI.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we can proceed by creating our application pages. We will learn
    how routing in Next.js works and what rendering methods we can use to get the
    most out of Next.js. Then, we will learn about configuring per-page layouts, making
    our application look and feel like a single-page application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Next.js routing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next.js rendering strategies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next.js SEO
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layouts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the pages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will learn how to create pages in Next.js and
    get a better understanding of selecting different rendering strategies depending
    on the needs of the application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get started, we need to set up the project. To be able to develop
    the project, you will need the following things installed on your computer:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** version 16 or above and **npm** version 8 or above.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are multiple ways to install Node.js and npm. Here is a great article
    that goes into more detail:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**VSCode** (optional) is currently the most popular editor/IDE for JavaScript/TypeScript,
    so we will be using it. It is open source, has great integration with TypeScript,
    and you can extend its features via extensions. It can be downloaded from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository can be cloned locally with the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the repository is cloned, we need to install the application’s dependencies:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to provide the environment variables:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the dependencies have been installed, we need to select the right stage
    of the code base that matches this chapter. We can do that by executing the following
    command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will prompt us with a list of stages for each chapter:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the fourth chapter, so you can select `chapter-04-start` if you want
    to follow along, or `chapter-04` to see the final results of the chapter. Once
    the chapter has been selected, all files required to follow along with the chapter
    will appear.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: To follow along with this chapter, you don’t need to make any changes to the
    code. You can use it as a reference to help get a better overview of the code
    base.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the setup details, check out the `README.md` file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Next.js routing
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next.js has a filesystem-based router where every page file represents a page.
    The pages are special files that exist in the `pages` folder, and they have the
    following structure:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, only exporting the `page` component as a default export is required;
    this is the minimum requirement for a page to be defined. We will see what else
    can be exported from a page in a few moments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，只需将`page`组件作为默认导出即可；这是定义页面所需的最小要求。我们将在稍后看到还可以从页面导出什么。
- en: Since the routing is filesystem-based, routes are determined by how the page
    files are named. For example, the page pointing to the root route should be defined
    in the `src/pages/index.tsx` file. If we want the about page, we can define it
    in `src/pages/about.tsx`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于路由是基于文件系统的，路由由页面文件的命名方式确定。例如，指向根路由的页面应在`src/pages/index.tsx`文件中定义。如果我们想定义关于页面，我们可以在`src/pages/about.tsx`中定义它。
- en: 'For any complex application with dynamic data, it is not enough to only create
    predefined pages. For example, let’s say we have a social network application
    where we can visit user profiles. The profiles should be loaded by the user’s
    ID. Since it would be too repetitive to create a page file for every user, we
    need to make the page dynamic as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何具有动态数据的复杂应用程序，仅创建预定义页面是不够的。例如，假设我们有一个社交网络应用程序，我们可以访问用户个人资料。个人资料应该通过用户的ID加载。由于为每个用户创建页面文件会过于重复，我们需要使页面动态化，如下所示：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To get the ID and load the data dynamically, we can define a generic user profile
    page in `pages/users/[userId].tsx`, where `userId` will be injected into the page
    dynamically. For example, going to `/users/123` will show the user profile page
    and pass the value of `123` as `userId` via the `query` property of the router.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取ID并动态加载数据，我们可以在`pages/users/[userId].tsx`中定义一个通用的用户个人资料页面，其中`userId`将动态注入到页面中。例如，访问`/users/123`将显示用户个人资料页面，并通过路由器的`query`属性将`123`的值作为`userId`传递。
- en: Next.js rendering strategies
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Next.js渲染策略
- en: 'Next.js supports four different rendering strategies:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js支持四种不同的渲染策略：
- en: '**Client-side rendering**: Where we can load the initial content on the server
    and then fetch additional data from the client.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端渲染**：在这里，我们可以在服务器上加载初始内容，然后从客户端获取附加数据。'
- en: '**Server-side rendering**: Where we can fetch the data on the server, inject
    it on the page, and return the page to the client with the provided data.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器端渲染**：在这里，我们可以在服务器上获取数据，将其注入到页面中，并带有提供的数据将页面返回给客户端。'
- en: '**Static site generation**: Where static data is injected on the page and returned
    in the markup to the client.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态站点生成**：在这里，静态数据被注入到页面中，并以标记的形式返回给客户端。'
- en: '**Incremental static regeneration**: The middle ground between server-side
    rendering and static site generation. We can generate *x* number of pages statically,
    and then if a page that hasn’t been rendered and cached yet is requested, Next.js
    can render it on the server and cache it for future requests.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量静态再生**：服务器端渲染和静态站点生成之间的折中方案。我们可以静态生成*x*个页面，然后如果请求尚未渲染和缓存的页面，Next.js可以在服务器上渲染它并为其未来的请求缓存它。'
- en: For our application, we will mainly focus on the first two methods, so let’s
    see how they work in the following examples.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们将主要关注前两种方法，让我们看看以下示例中它们是如何工作的。
- en: Client-side rendering
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端渲染
- en: 'Considering the user profile page example, we can perform client-side rendering
    by writing the pages as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到用户个人资料页面示例，我们可以通过以下方式执行客户端渲染：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we can see, we are using `userId` to fetch the user data. In this example,
    we are doing this on the client side, which means that the server will initially
    render the following markup:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们正在使用`userId`来获取用户数据。在这个例子中，我们在客户端执行此操作，这意味着服务器最初将渲染以下标记：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Only after the data is fetched on the client will the user data be displayed:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在客户端获取数据后，用户数据才会显示：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is fine unless we care about SEO and the performance of the initial page
    load. Here we have to wait for the initial page to load and then for the user
    data to be fetched. This approach is perfectly valid for data that is not supposed
    to be public, such as admin dashboards.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这在关注SEO和初始页面加载性能的情况下是可行的。这里我们必须等待初始页面加载，然后获取用户数据。这种方法对于不应公开的数据，如管理仪表板，是完全有效的。
- en: However, for public pages, it is a good idea to enable the server to return
    the actual markup to the client to make it easier for search engines to crawl
    and index our pages. We can do that by server-side rendering the pages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于公共页面，让服务器返回实际的标记给客户端是一个好主意，这样可以使搜索引擎更容易爬取和索引我们的页面。我们可以通过服务器端渲染页面来实现这一点。
- en: Server-side rendering
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: 'Let’s revisit the user profile page example, this time by rendering it on the
    server:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see here, besides the page component, the `page` file exports the
    `getServerSideProps` function, which is executed on the server. Its return value
    can contain `props`, which is passed to the component’s props.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The server will render the following markup:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The complete markup with the user data will be available on the initial render.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Let’s keep in mind that there is no perfect rendering strategy for all use cases;
    therefore, we must balance the pros and cons and choose which one to use based
    on our needs. The great thing with Next.js is that it allows us to use different
    rendering strategies per page so we can combine them to fit the application’s
    needs in the best way.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Next.js SEO
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To improve the SEO of our pages, we should add some meta tags and the title
    of the page and inject them into the page. This can be done via the `Head` component
    provided by Next.js.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'For the application, we want to have a dedicated component where we can add
    the title of the pages. Let’s open the `src/components/seo/seo.tsx` file and add
    the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Head` component will inject its content into the `head` of the page. For
    now, the title will suffice, but it can be extended to add different meta tags
    if needed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add the `Seo` component to our landing page at `src/pages/index.tsx`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s import the component:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then, we can add it at the top of the component:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Layouts
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing an application with multiple views or pages, we need to consider
    layout reusability.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Layouts example ](img/B17297_04_01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Layouts example
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the navbar and the footer are the same on both pages and the
    main content comes between, so it is a good idea to make it reusable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to add the `layout` component to pages:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Wrap the returned JSX of every page with the layout component
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach the layout to the page component and use it to wrap the entire component
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping JSX of every page with the layout component
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say we have a layout component that can wrap the content of each page:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can add the `Layout` component to the page like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This way of handling layouts in Next.js applications is OK for some simple
    cases. However, it comes with some drawbacks, as described in the following list:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: If the `Layout` component tracks some internal state, it will lose it when the
    page changes
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page will lose its scroll position
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything we want to return before the final return, we also need to wrap with
    `Layout`
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our application, we will use a better way to handle per-page layouts by
    attaching them to the page component. Let’s see it in action in the following
    section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Attaching the layout to the page component and using it to wrap the entire component
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make this work, we need to first update the `src/pages/_app.tsx` file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The page component expects the `getLayout` static property to be attached, which
    will be used to wrap the entire component when it is rendered in `_app.tsx`. Thanks
    to the reconciliation in React, all of the layout component states will persist
    when navigating between pages with the same layout.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: We already have the layout components built and will just add them to our pages.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have everything prepared, let’s build out our pages.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Building the pages
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are acquainted with how Next.js pages work and have prepared the
    `Seo` component and the layout setup, let’s implement the pages for the application.
    We will be implementing the following pages:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: The public organization details page
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public job details page
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The jobs page in the dashboard
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The job details page in the dashboard
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The create job page
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 404 page
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public organization details page
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The public organization details page is the page where any user can see all
    details about a given organization and a list of its jobs. Since it is a public
    page, we want to render it on the server for better SEO.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: To create the page, let’s create the `src/pages/organizations/[organizationId]/index.tsx`
    file, where `organizationId` refers to the dynamic ID of the organization, which
    will be used to retrieve the given organization.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let’s import all dependencies:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, let’s implement the page component:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The page component accepts `organization` and `jobs` as props. The props are
    passed to the page automatically by Next.js. What gets passed as props to a page
    component is determined by the return value of the `getServerSideProps` function,
    which is executed on the server and enables server-side rendering. We will see
    the implementation of it in a moment, but for now, let’s wire up the layout:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is how we will use layouts for our pages based on the setup we just configured.
    The `getLayout` function will wrap the page component, and the layouts will be
    applied. We can also nest multiple layouts if required, so this approach is very
    flexible.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s export our page, which must be exported as `default`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And then, let’s implement the `getServerSideProps` function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We are extracting the organization’s ID from `params` and using this to fetch
    the organization and its jobs, and then we return it as props, which will be passed
    to the page component. The `getServerSideProps` function must be exported as a
    named export.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: One more thing to note is that currently, we are loading data using the utility
    functions that load our testing data since we don’t have our API ready. In the
    following chapters, we will see how to create an actual API integration, but for
    now, this will allow us to build most of the UI for our pages.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now open `http://localhost:3000/organizations/amYXmIyT9mD9GyO6CCr`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The public organization details page ](img/B17297_04_02.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – The public organization details page
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: And there is our organization details page! Organizations can use this link
    to share info about their organizations and the list of their job postings.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: The page is rendered on the server, meaning the page’s content will be immediately
    available to the user.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: To verify that, disable JavaScript in your browser and refresh the page.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that there is no difference. All the content is available even
    if JavaScript is disabled because all the markup is generated on the server and
    returned to the client.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: The public job details page
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The public job details page is the page that shows all details about a given
    job and allows users to apply for it. It should also be available to all users,
    so we want to make it search-engine friendly. Therefore, we want to render its
    content on the server, just as we did with the organization page.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating `src/pages/organizations/[organizationId]/jobs/[jobId].tsx`,
    where `jobId` refers to the ID of the job.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let’s import all required dependencies:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, let’s define our job page component:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As we did with the organization page, we are loading the job and the organization
    via `getServerSideProps` and rendering the content on the server.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can attach the layout of the page and export it:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And finally, let’s create the `getServerSideProps` function and export it:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We are fetching the job and organization data, and we pass that as props to
    the page. The content is rendered on the server, so it will be available to the
    client immediately, just as it was on the organization details page.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that everything works, let’s open `http://localhost:3000/organizations/amYXmIyT9mD9GyO6CCr/jobs/2LJ_sgmy_880G9WivH5Hf`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The public job details page ](img/B17297_04_03.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – The public job details page
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: It’s nice to have the content immediately available on the client, so why wouldn’t
    we render everything on the server?
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Server-side rendering has a couple of drawbacks:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: More computing power for the server is required, which can affect server cost
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long `getServerSideProps` execution time can block the entire application
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That’s why we want to use it only where it makes sense, such as public pages
    that should be search-engine friendly, and where their content might change more
    frequently.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: For the dashboard pages, we will render the initial loading state on the server
    and then load and render data on the client.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: The jobs page in the dashboard
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s create the `src/pages/dashboard/jobs/index.tsx` file.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can import all required dependencies:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we can define and export the page component:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Notice how all data fetching happens in the component because we are doing it
    on the client.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that everything works as expected, let’s open `http://localhost:3000/dashboard/jobs`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The dashboard jobs page ](img/B17297_04_04.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – The dashboard jobs page
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: And there it is! This page allows organization admins to have an overview of
    their organization’s jobs.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: The job details page in the dashboard
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dashboard job details page will show all details about a given job in the
    dashboard.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: To get started, let’s create `src/pages/dashboard/jobs/[jobId].tsx`, where `jobId`
    refers to the dynamic ID of the job.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we can import all dependencies:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then let’s define and export our page component:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To verify that everything works as expected, let’s open `http://localhost:3000/dashboard/jobs/wS6UeppUQoiXGTzAI6XrM`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – The dashboard job details page ](img/B17297_04_05.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – The dashboard job details page
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: And this is our dashboard job details page. We can see basic details about a
    given job here.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: The create job page
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The create job page is the page where we will render the form for creating jobs.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: To get started, let’s create `src/pages/dashboard/jobs/create.tsx`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let’s import the required dependencies:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we can create and export the page component:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To verify that everything works as expected, let’s open `http://localhost:3000/dashboard/jobs/create`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – The dashboard create job page ](img/B17297_04_06.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – The dashboard create job page
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: And there it is! For this chapter, we have just created the pages and will handle
    the data submission in the upcoming chapters.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 404 page
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you tried to visit a page before we implemented it, you might have noticed
    a blank page. To let users know when they visit a non-existent page, we should
    create a custom 404 page.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating `src/pages/404.tsx` and add the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `404.tsx` file in the `pages` folder is a special page that will be displayed
    whenever a user visits an unknown page.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that everything works as expected, let’s visit `http://localhost:3000/non-existing-page`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – 404 page ](img/B17297_04_07.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – 404 page
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: And there it is! We have a nice interface to return to the application if we
    end up on a missing page.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, our focus has been on building the pages of our application.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: We started by looking at how routing works in Next.js. Then we covered the rendering
    strategies we will be using. After that, we built the SEO component, which injects
    content into the head of the page.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: We then configured the layout system for our pages. At the end of the chapter,
    we built the pages for our application. To build the content for our pages, we
    used test data that was predefined. We used test data to render content on the
    pages, but we still need to make real API calls.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to mock the API endpoints, which we can
    use during development to make HTTP requests and fetch data as if we were consuming
    the real API.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
