["```js\nfunction TermsOfUse() {\n  return (\n    <section>\n      <button>Show Terms of Use Summary</button>\n      <p>By continuing, you accept that we will not indemnify you for any\n      damage or harm caused by our products.</p>\n    </section>\n  );\n} \n```", "```js\nimport { useState } from 'react';\n\nfunction TermsOfUse() {\n  const [showTerms, setShowTerms] = useState(false);\n  function handleShowTermsSummary() {\n    setShowTerms(true);\n  }\n  let paragraphText = '';\n  if (showTerms) {\n    paragraphText = 'By continuing, you accept that we will not indemnify you for any damage or harm caused by our products.';\n  }\n  return (\n    <section>\n      <button onClick={handleShowTermsSummary}>\n         Show Terms of Use Summary\n      </button>\n      <p>{paragraphText}</p>\n    </section>\n  );\n} \n```", "```js\nimport { useState } from 'react';\nfunction TermsOfUse() {\n  const [showTerms, setShowTerms] = useState(false);\n  function handleShowTermsSummary() {\n    setShowTerms(true);\n  }\n  let paragraph;\n  if (showTerms) {\n    paragraph = <p>By continuing, you accept that we will not indemnify you for any damage or harm caused by our products.</p>;\n  }\n  return (\n    <section>\n      <button onClick={handleShowTermsSummary}>\n         Show Terms of Use Summary\n      </button>\n      {paragraph}\n    </section>\n  );\n} \n```", "```js\nlet a = 1;\nif (someCondition) {\n  a = 2;\n} \n```", "```js\nconst a = someCondition ? 2 : 1; \n```", "```js\nimport { useState } from 'react';\nfunction TermsOfUse() {\n  const [showTerms, setShowTerms] = useState(false);\n  function handleShowTermsSummary() {\n    setShowTerms(true);\n  }\n  const paragraph = showTerms ? <p>By continuing, you accept that we will not indemnify you for any damage or harm caused by our products.</p> : null;\n  return (\n    <section>\n      <button onClick={handleShowTermsSummary}>\n         Show Terms of Use Summary\n      </button>\n      {paragraph}\n    </section>\n  );\n} \n```", "```js\nconst paragraph = !showTerms ? null : someOtherCondition ? <p>By continuing, you accept that we will not indemnify you for any damage or harm caused by our products.</p> : null; \n```", "```js\nimport { useState } from 'react';\nfunction TermsOfUse() {\n  const [showTerms, setShowTerms] = useState(false);\n  function handleShowTermsSummary() {\n    setShowTerms(true);\n  }\n  return (\n    <section>\n      <button onClick={handleShowTermsSummary}>\n        Show Terms of Use Summary\n      </button>\n      {showTerms ? <p>By continuing, you accept that we will not indemnify you for any damage or harm caused by our products.</p> : null}\n    </section>\n  );\n} \n```", "```js\n<div>\n  {showDetails ? <h1>Product Details</h1> : null}\n</div> \n```", "```js\n<div>\n  {showTerms ? <p>Our terms of use …</p> : null}\n</div> \n```", "```js\n<div>\n  {showDetails && <h1>Product Details</h1>}\n</div> \n```", "```js\nconsole.log(1 === 1 && 'Hello'); \n```", "```js\nconst languages = {\n  de: 'de-DE',\n  us: 'en-US',\n  uk: 'en-GB'\n};\nfunction LanguageSelector({country}) {\n  return <p>Selected Language: {languages[country]}</p>\n} \n```", "```js\nfunction Button({isButton, config, children}) {\n  if (isButton) {\n    return <button {...config}>{children}</button>;\n  }\n  return <a {...config}>{children}</a>;\n}; \n```", "```js\nfunction Button({isButton, config, children}) {\n  const Tag = isButton ? 'button' : 'a';\n  return <Tag {...config}>{children}</Tag>;\n}; \n```", "```js\nimport MyComponent from './my-component.jsx';\nimport MyOtherComponent from './my-other-component.jsx';\nconst Tag = someCondition ? MyComponent : MyOtherComponent; \n```", "```js\nfunction ProductsList({products}) {\n  // … todo!\n}; \n```", "```js\nconst products = [\n  {id: 'p1', title: 'A Book', price: 59.99},\n  {id: 'p2', title: 'A Carpet', price: 129.49},\n  {id: 'p3', title: 'Another Book', price: 39.99},\n]; \n```", "```js\n<ul>\n  <li>\n    <h2>A Book</h2>\n    <p>$59.99</p>\n  </li>\n  <li>\n    <h2>A Carpet</h2>\n    <p>$129.49</p>\n  </li>\n  <li>\n    <h2>Another Book</h2>\n    <p>$39.99</p>\n  </li>\n</ul> \n```", "```js\nconst transformedProducts = [];\nfor (const product of products) {\n  transformedProducts.push(product.title);\n} \n```", "```js\nconst productElements = [];\nfor (const product of products) {\n  productElements.push((\n    <li>\n      <h2>{product.title}</h2>\n      <p>${product.price}</p>\n    </li>\n  ));\n} \n```", "```js\nreturn (\n  <ul>\n    {productElements}\n  </ul>\n); \n```", "```js\nreturn (\n  <div>\n    {[<p>Hi there</p>, <p>Another item</p>]}\n  </div>\n);\nreturn (\n  <div>\n    <p>Hi there</p>\n    <p>Another item</p>\n  </div>\n); \n```", "```js\nfunction ProductsList({products}) {\n  const productElements = [];\n  for (const product of products) {\n    productElements.push((\n      <li>\n        <h2>{product.title}</h2>\n        <p>${product.price}</p>\n      </li>\n    ));\n  }\n  return (\n    <ul>\n      {productElements}\n    </ul>\n  );\n}; \n```", "```js\nconst users = [\n  {id: 'u1', name: 'Max', age: 35},\n  {id: 'u2', name: 'Anna', age: 32}\n];\nconst userNames = users.map(user => user.name);\n// userNames = ['Max', 'Anna'] \n```", "```js\nfunction ProductsList({products}) {\n  const productElements = products.map(product => (\n      <li>\n        <h2>{product.title}</h2>\n        <p>${product.price}</p>\n      </li>\n    )\n  );\n  return (\n    <ul>\n      {productElements}\n    </ul>\n  );\n}; \n```", "```js\nfunction ProductsList({products}) {\n  return (\n    <ul>\n      {products.map(product => (\n          <li>\n            <h2>{product.title}</h2>\n            <p>${product.price}</p>\n          </li>\n        )\n      )}\n    </ul>\n  );\n}; \n```", "```js\nimport { useState } from 'react';\nfunction Todos() {\n  const [todos, setTodos] = useState(['Learn React', 'Recommend this book']);\n  function handleAddTodo() {\n    todos.push('A new todo');\n  };\n  return (\n    <div>\n      <button onClick={handleAddTodo}>Add Todo</button>\n      <ul>\n        {todos.map(todo => <li>{todo}</li>)}\n      </ul>\n    </div>\n  );\n}; \n```", "```js\nfunction handleAddTodo() {\n  setTodos(todos.push('A new todo'));\n}; \n```", "```js\nfunction handleAddTodo() {\n  setTodos(curTodos => [...curTodos, 'A new todo']);\n  // alternative: Use concat() instead of the spread operator:\n  // concat(), unlike push(), returns a new array\n  // setTodos(curTodos => curTodos.concat('A new todo'));\n}; \n```", "```js\n<li key={todo.id}>{todo.text}</li> \n```", "```js\nconst hobbies = ['Sports', 'Cooking'];\nconst reversed = hobbies.reverse(); // ['Cooking', 'Sports'] \n```", "```js\nconst hobbies = ['Sports', 'Cooking']; \n```", "```js\nhobbies.map(hobby => <li key={hobby}>{hobby}</li>); \n```"]