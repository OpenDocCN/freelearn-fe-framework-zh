- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Vite and Vue Devtools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vite 和 Vue Devtools
- en: In the previous chapter, you learned how to utilize the Vue component’s data
    reactivity and query the external data into the component’s data system using
    methods, computed properties, and watch properties. This chapter introduces **Vite**
    and shows you how to debug these computed properties and events using Vue Devtools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何利用 Vue 组件的数据响应性，并使用方法、计算属性和观察属性将外部数据查询到组件的数据系统中。本章介绍了 **Vite** 并展示了如何使用
    Vue Devtools 调试这些计算属性和事件。
- en: 'We will cover the following topics in the chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using Vite
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vite
- en: Using Vue Devtools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vue Devtools
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'It would be best to have your Node.js version at least 14.18+ or 16+ and above.
    To check your Node version, run the following command in Command Prompt (or PowerShell):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将你的 Node.js 版本至少设置为 14.18+ 或 16+ 以上。要检查你的 Node 版本，请在命令提示符（或 PowerShell）中运行以下命令：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should have your npm version to 7.x and above since all our commands in
    the chapter are compatible with npm 7.x, and there is a slight difference with
    6.x. And finally, you should install Yarn as our primary package management tool
    throughout the chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该将 npm 版本设置为 7.x 以上，因为本章中的所有命令都与 npm 7.x 兼容，并且与 6.x 有细微差别。最后，你应该在本章中安装 Yarn
    作为我们的主要包管理工具。
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可在 GitHub 上找到：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03)
- en: Using Vite
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vite
- en: 'Vite.js is the build management tool aiming to do the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Vite.js 是一个构建管理工具，旨在完成以下任务：
- en: Help you develop faster (locally develop your project with a more time-saving
    approach)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助你更快地开发（使用更节省时间的方法在本地开发你的项目）
- en: Build with optimization (bundle files for production with better performance)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建优化（为生产环境打包文件以获得更好的性能）
- en: Manage other aspects of your web project effectively (testing, linting, and
    so on)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效地管理你 Web 项目的其他方面（测试、代码检查等）
- en: It uses a Rollup bundler under the hood to perform chunk bundling and packaging
    of JavaScript projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它在内部使用 Rollup 打包器来执行 JavaScript 项目的块打包和打包。
- en: Starting from Vue 3, Vite has replaced Vue CLI and become the default build
    tool for managing your Vue applications. Vite also supports TypeScript and provides
    a leaner developer experience when working on current web projects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Vue 3 开始，Vite 取代了 Vue CLI 并成为管理你的 Vue 应用程序的默认构建工具。Vite 还支持 TypeScript，并在处理当前
    Web 项目时提供更精简的开发者体验。
- en: 'To initialize a new Vue project with Vite, you can use the following specific
    command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Vite 初始化新的 Vue 项目，你可以使用以下特定命令：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this case, you will need to provide additional configurations for Vite to
    proceed, as shown in *Figure 3**.1*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你需要为 Vite 提供额外的配置，如图 3.1 所示：
- en: '![Figure 3.1 – Configuration prompt for a new Vue project](img/B18645_03_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 新 Vue 项目的配置提示](img/B18645_03_01.jpg)'
- en: Figure 3.1 – Configuration prompt for a new Vue project
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 新 Vue 项目的配置提示
- en: '*Figure 3**.1* demonstrates configurations for a new Vue project with the name
    `chapter-3-vue-app`, including the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.1* 展示了名为 `chapter-3-vue-app` 的新 Vue 项目的配置，包括以下内容：'
- en: Vue Router for routing management (which we will discuss further in [*Chapter
    7*](B18645_07.xhtml#_idTextAnchor248), *Routing*), and Pinia for state management
    (which we will discuss further in [*Chapter 9*](B18645_09.xhtml#_idTextAnchor407),
    *The State of Vue* *State Management*)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue Router 用于路由管理（我们将在 [*第 7 章*](B18645_07.xhtml#_idTextAnchor248)，*路由*）和 Pinia
    用于状态管理（我们将在 [*第 9 章*](B18645_09.xhtml#_idTextAnchor407)，*Vue 的状态管理*）进行讨论）
- en: Vitest for enabling unit testing coverage for the project
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vitest 用于为项目启用单元测试覆盖率
- en: ESLint for linting and Prettier for organizing the project code
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESLint 用于代码检查和 Prettier 用于组织项目代码
- en: 'Based on these configurations, Vite will scaffold the desired project with
    the following file structure:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些配置，Vite 将使用以下文件结构来搭建所需的项目：
- en: '![Figure 3.2 – File structure for a new Vue project created by Vite](img/B18645_03_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 由 Vite 创建的新 Vue 项目的文件结构](img/B18645_03_02.jpg)'
- en: Figure 3.2 – File structure for a new Vue project created by Vite
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 由 Vite 创建的新 Vue 项目的文件结构
- en: 'Once done, the Vite package is also part of the dependency packages for the
    project. You now can run the following commands:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，Vite 包也将成为项目的依赖包之一。现在您可以运行以下命令：
- en: '`npm run dev` or `yarn dev`: Runs your project locally on `localhost:3000`
    with `3000` is arbitrarily assigned, as it is above the well-known port numbers
    `1`-`1023` used in other areas of computing. If multiple Vue projects run simultaneously,
    the port number will differ between projects.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run dev` 或 `yarn dev`：在 `localhost:3000` 上本地运行您的项目，其中 `3000` 是任意分配的，因为它高于其他计算领域中使用的知名端口号
    `1`-`1023`。如果同时运行多个 Vue 项目，端口号将在项目之间有所不同。'
- en: '`npm run build` or `yarn build`: Runs a production build that bundles your
    code into a single small file or several minimized small files, ready for deploying
    to production.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build` 或 `yarn build`：运行生产构建，将您的代码打包成一个或几个小型文件，以便部署到生产环境。'
- en: '`npm run lint` or `yarn lint`: Runs the process of linting, which will highlight
    code errors or warnings, making your code more consistent.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run lint` 或 `yarn lint`：运行代码检查过程，这将突出显示代码错误或警告，使您的代码更加一致。'
- en: '`npm run preview` or `yarn preview`: Runs a preview version of the project
    in a specific port, simulating the production mode.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run preview` 或 `yarn preview`：在特定端口上运行项目的预览版本，模拟生产模式。'
- en: '`npm run test:unit` or `yarn test:unit`: Runs the project’s unit tests using
    Vitest.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run test:unit` 或 `yarn test:unit`：使用 Vitest 运行项目的单元测试。'
- en: Now that you understand what Vite is and how to set up and manage Vue.js projects
    from scratch with it, we will next practice creating a Vue.js project using Vite.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了 Vite 是什么以及如何使用它从头开始设置和管理 Vue.js 项目，我们将接下来练习使用 Vite 创建 Vue.js 项目。
- en: Exercise 3.01 – setting up a Vue project
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.01 – 设置 Vue 项目
- en: In this exercise, you will create your first Vue.js project using Vite commands.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用 Vite 命令创建您的第一个 Vue.js 项目。
- en: To access the code file for this exercise, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.01).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.01)。
- en: 'You can create a Vue.js project by performing the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下步骤创建一个 Vue.js 项目：
- en: 'Open Command Prompt (Terminal) or PowerShell for Windows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上打开命令提示符（终端）或 PowerShell：
- en: '![Figure 3.3 – A blank Command Prompt window](img/B18645_03_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 一个空的命令提示符窗口](img/B18645_03_03.jpg)'
- en: Figure 3.3 – A blank Command Prompt window
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 一个空的命令提示符窗口
- en: Run the `npm init` `vue@3` command.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `npm init` `vue@3` 命令。
- en: Upon running the preceding command, you will be asked to install the latest
    version of Vite. After confirming the action, the Terminal will install Vite and
    prompt a set of questions to configure the Vue.js app.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的命令后，您将被要求安装 Vite 的最新版本。确认操作后，终端将安装 Vite 并提示一系列问题以配置 Vue.js 应用程序。
- en: 'Provide the configurations as shown in the following screenshot using the navigation
    keyboard:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用导航键盘提供以下截图所示的配置：
- en: '![Figure 3.4 – Displaying a list of saved presets](img/B18645_03_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 显示已保存的预设列表](img/B18645_03_04.jpg)'
- en: Figure 3.4 – Displaying a list of saved presets
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 显示已保存的预设列表
- en: For now, we will use Vue Router, Pinia, and Vitest for our application, with
    ESLint and Prettier to keep our code clean and organized.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将使用 Vue Router、Pinia 和 Vitest 为我们的应用程序提供支持，同时使用 ESLint 和 Prettier 来保持我们的代码整洁和有序。
- en: 'Once finished, Vite will display a list of instructions for running the project,
    as seen in *Figure 3**.5*:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，Vite 将显示运行项目的指令列表，如图 *图 3.5* 所示：
- en: '![Figure 3.5 – Instructions generated by Vite](img/B18645_03_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – Vite 生成的说明](img/B18645_03_05.jpg)'
- en: Figure 3.5 – Instructions generated by Vite
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – Vite 生成的说明
- en: Navigate to your created project directory.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您创建的项目目录。
- en: 'Run the `yarn` command. The output should look like this:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `yarn` 命令。输出应如下所示：
- en: '[PRE2]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the package installer has completed, run your project locally using the
    following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装包程序完成，请使用以下命令在本地运行您的项目：
- en: '[PRE5]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running the preceding command, you can see the local server in the Terminal,
    as shown in *Figure 3**.6*:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行前面的命令后，您可以在终端中看到本地服务器，如图 *图 3.6* 所示：
- en: '![Figure 3.6 – Local dev server is up and running](img/B18645_03_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 本地开发服务器正在运行](img/B18645_03_06.jpg)'
- en: Figure 3.6 – Local dev server is up and running
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 本地开发服务器正在运行
- en: 'Click on the URL displayed in the `Local:` section, and you’ll see a default
    Vue project screen in the browser, as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Local:` 部分显示的 URL，您将在浏览器中看到一个默认的 Vue 项目屏幕，如下所示：
- en: "![Figure 3.7 – The default Vue project screen will appear on your brows\uFEFF\
    er](img/B18645_03_07.jpg)"
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 默认 Vue 项目屏幕将在您的浏览器中显示](img/B18645_03_07.jpg)'
- en: Figure 3.7 – The default Vue project screen will appear on your browser
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 默认 Vue 项目屏幕将在您的浏览器中显示
- en: We have now learned to set up a Vue.js project using Vite and Yarn via command
    prompts. Next, we will explore using Vue Devtools to debug your application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何通过命令提示符使用 Vite 和 Yarn 设置 Vue.js 项目。接下来，我们将探索使用 Vue Devtools 来调试您的应用程序。
- en: Using Vue Devtools
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue Devtools
- en: '**Vue Devtools** is a browser extension for Chrome and Firefox and an Electron
    desktop app. You can install and run it from your browser to debug your Vue.js
    projects during development. This extension does not work in production or remotely
    run projects. You can download the Vue Devtools extension from the Chrome extension
    page, as seen in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vue Devtools** 是一个适用于 Chrome 和 Firefox 的浏览器扩展程序，以及一个 Electron 桌面应用程序。您可以从浏览器中安装并运行它，以在开发过程中调试您的
    Vue.js 项目。此扩展程序在生产环境中或远程运行的项目中不起作用。您可以从 Chrome 扩展程序页面下载 Vue Devtools 扩展程序，如下截图所示：'
- en: '![Figure 3.8 – Vue.js Devtools Chrome extension page](img/B18645_03_08.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – Vue.js Devtools Chrome 扩展程序页面](img/B18645_03_08.jpg)'
- en: Figure 3.8 – Vue.js Devtools Chrome extension page
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – Vue.js Devtools Chrome 扩展程序页面
- en: 'You can also download the Vue Devtools extension from Firefox ([https://addons.mozilla.org/en-US/firefox/addon/vue-js-Devtools/](https://addons.mozilla.org/en-US/firefox/addon/vue-js-Devtools/)):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从 Firefox ([https://addons.mozilla.org/en-US/firefox/addon/vue-js-Devtools/](https://addons.mozilla.org/en-US/firefox/addon/vue-js-Devtools/))
    下载 Vue Devtools 扩展程序：
- en: '![Figure 3.9 – Vue.js Devtools Firefox extension page](img/B18645_03_09.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – Vue.js Devtools Firefox 扩展程序页面](img/B18645_03_09.jpg)'
- en: Figure 3.9 – Vue.js Devtools Firefox extension page
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – Vue.js Devtools Firefox 扩展程序页面
- en: The Devtools extension reveals useful information within the browser’s developer,
    including performance and event tracking for any Vue component in your application
    during running. Once enabled, the extension will add a **Vue** tab to the developer’s
    console. The **Vue** tab displays a view with several tabs, which we will look
    at next.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Devtools 扩展程序在浏览器开发者工具中揭示有用的信息，包括性能和事件跟踪，这些信息在您的应用程序运行期间针对任何 Vue 组件。一旦启用，扩展程序将在开发者控制台中添加一个
    **Vue** 选项卡。**Vue** 选项卡显示一个带有多个选项卡的视图，我们将在下面查看。
- en: 'There are two main tabs within the **Vue Devtools** view: **Components** and
    **Timeline**.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Vue Devtools** 视图中，有两个主要选项卡：**Components** 和 **Timeline**。
- en: Components tab
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件选项卡
- en: The **Components** tab (previously Inspector) will by default be visible once
    you open the **Vue Devtools** tab. Once active, additional tabs appear, as detailed
    next.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开 **Vue Devtools** 选项卡时，**Components** 选项卡（以前称为 Inspector）默认可见。一旦激活，将出现其他选项卡，具体如下。
- en: Side actions (top-right corner)
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 侧边操作（右上角）
- en: You can select the Vue element from the browser UI using the **Select** component
    in a page icon (top-right corner), highlighted in *Figure 3**.10*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用页面图标（右上角）中的 **Select** 组件从浏览器 UI 中选择 Vue 元素，如图 3.10* 所示。
- en: '![Figure 3.10 – Select component action icon](img/B18645_03_10.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 选择组件操作图标](img/B18645_03_10.jpg)'
- en: Figure 3.10 – Select component action icon
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 选择组件操作图标
- en: 'The second shortcut action is **Refresh**, which allows you to refresh the
    Devtools instance in the browser:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个快捷操作是 **Refresh**，它允许您刷新浏览器中的 Devtools 实例：
- en: '![Figure 3.11 – Refresh action icon](img/B18645_03_11.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – 刷新操作图标](img/B18645_03_11.jpg)'
- en: Figure 3.11 – Refresh action icon
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 刷新操作图标
- en: 'Lastly, you can customize how the tab should look and feel by clicking on the
    three-dot icon representing **Settings**:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过单击表示 **Settings** 的三个点图标来自定义选项卡的外观和感觉：
- en: '![Figure 3.12 – Settings tab in Vue.js Devtools](img/B18645_03_12.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – Vue.js Devtools 中的设置选项卡](img/B18645_03_12.jpg)'
- en: Figure 3.12 – Settings tab in Vue.js Devtools
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – Vue.js Devtools 中的设置选项卡
- en: When the **Components** tab is active, a tree of components within the app will
    be available on the left-side panel. The right-side panel will display the local
    state and details of any selected component from the tree.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当 **Components** 选项卡处于活动状态时，应用中的组件树将在左侧面板中可用。右侧面板将显示从树中选择的任何组件的本地状态和详细信息。
- en: 'There are small shortcut actions such as **Inspect DOM**, which takes you directly
    to the location of the highlighted component in the browser’s DOM tree, and **Scroll
    to component**, which will auto-scroll to the component on the UI with highlights:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些小快捷操作，例如**检查 DOM**，它会直接带你到浏览器 DOM 树中突出显示的组件位置，以及**滚动到组件**，它会自动滚动到 UI 上的组件并突出显示：
- en: '![Figure 3.13 – Shortcut actions for a component](img/B18645_03_13.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 组件的快捷操作](img/B18645_03_13.jpg)'
- en: Figure 3.13 – Shortcut actions for a component
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 组件的快捷操作
- en: Next, let’s look at the other tab of Vue.js Devtools—the **Timeline** tab.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 Vue.js Devtools 的另一个选项卡——**时间线**选项卡。
- en: Timeline tab
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间线选项卡
- en: 'This tab records all events that happened in the app, divided into four main
    sections: **Mouse** events, **Keyboard** events, **Component**-specific events,
    and **Performance** events, as shown in *Figure 3**.16*. You can use this tab
    to navigate and monitor the custom events emitted from your components:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项卡记录了应用中发生的所有事件，分为四个主要部分：**鼠标**事件、**键盘**事件、**组件**特定事件和**性能**事件，如*图 3*所示。你可以使用此选项卡导航和监控组件发出的自定义事件：
- en: '![Figure 3.14 – Timeline tab in Vue.js Devtools](img/B18645_03_14.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – Vue.js Devtools 中的时间线选项卡](img/B18645_03_14.jpg)'
- en: Figure 3.14 – Timeline tab in Vue.js Devtools
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – Vue.js Devtools 中的时间线选项卡
- en: Other plugins (Pinia, Vue Router)
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他插件（Pinia，Vue Router）
- en: 'If you install additional Vue plugins such as Pinia or Vue Router and they
    support Vue Devtools, additional tabs will appear next to the **Component** tab,
    containing the relevant information for each plugin. *Figure 3**.15* demonstrates
    an example of what the **Vue Router** tab looks like when it is enabled:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装了额外的 Vue 插件，如 Pinia 或 Vue Router，并且它们支持 Vue Devtools，那么在 **组件** 选项卡旁边将出现额外的选项卡，包含每个插件的相应信息。*图
    3*展示了当启用时 **Vue Router** 选项卡的样子：
- en: '![Figure 3.15 – Routes tab for Vue Router if selected](img/B18645_03_15.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 如果选择，Vue Router 的路由选项卡](img/B18645_03_15.jpg)'
- en: Figure 3.15 – Routes tab for Vue Router if selected
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 如果选择，Vue Router 的路由选项卡
- en: Vue Devtools helps you debug and monitor your Vue application during development.
    Next, we will build a Vue component and use the Vue Devtools extension to inspect
    the code and manipulate the local data state inside the component.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Vue Devtools 帮助你在开发过程中调试和监控你的 Vue 应用程序。接下来，我们将构建一个 Vue 组件，并使用 Vue Devtools 扩展来检查代码和操作组件内部的本地数据状态。
- en: Exercise 3.02 – debugging a Vue application using Devtools
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.02 – 使用 Devtools 调试 Vue 应用程序
- en: In this exercise, you will build a Vue component based on the knowledge gained
    in previous chapters and then debug it using Devtools. You will need to have Chrome,
    Firefox, or Edge installed with the Vue Devtools extension enabled.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将基于前几章学到的知识构建一个 Vue 组件，然后使用 Devtools 进行调试。你需要安装 Chrome、Firefox 或 Edge
    浏览器，并启用 Vue Devtools 扩展。
- en: You will use the **Vue** tab in the browser’s developer console to inspect the
    code and manipulate the local data state of the component.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用浏览器开发者控制台中的 **Vue** 选项卡来检查代码和操作组件的本地数据状态。
- en: You can find the complete code for this exercise at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.02).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Exercise3.02)找到这个练习的完整代码。
- en: 'Use the application generated with `npm init vue@3` as a starting point, or
    within the root folder of the code repository, navigate into the `Chapter03/Exercise3.02`
    folder by using the following commands in order:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `npm init vue@3` 生成的应用程序作为起点，或者在你的代码仓库的根目录下，使用以下命令按顺序导航到 `Chapter03/Exercise3.02`
    文件夹：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Open the exercise project in your VS Code editor (by using the `code .` command
    within the project directory) or your preferred IDE.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 VS Code 编辑器中打开练习项目（在项目目录中使用 `code .` 命令）或你喜欢的 IDE。
- en: 'Create a new `Exercise3-02.vue` component in the `src/components` directory,
    and then proceed as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/components` 目录下创建一个新的 `Exercise3-02.vue` 组件，然后按照以下步骤进行：
- en: 'Name the component `Exercise` and create a local data state using the `data()`
    field within the `<script>` section. The local data state has an array list of
    strings—`frameworks`—each representing a framework, and an empty `input` data
    prop:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组件命名为 `Exercise`，并在 `<script>` 部分使用 `data()` 字段创建一个本地数据状态。本地数据状态有一个字符串数组列表—`frameworks`—每个元素代表一个框架，以及一个空的
    `input` 数据属性：
- en: '[PRE7]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, create a `computed` property called `computedList` to filter the `frameworks`
    list based on the `input` prop value:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `computedList` 的计算属性，根据 `input` 属性值过滤 `frameworks` 列表：
- en: '[PRE26]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the Vue `template` block, add an `input` element and bound the `input` data
    prop to it using `v-model`. Then, add an `<ul>` element and display the values
    of `computedList` using the `v-for` loop attribute and `<``li>` element:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Vue `template` 块中，添加一个 `input` 元素，并使用 `v-model` 将 `input` 数据属性绑定到它。然后，添加一个
    `<ul>` 元素，并使用 `v-for` 循环属性和 `<li>` 元素显示 `computedList` 的值：
- en: '[PRE40]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The full working code is shown here:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码如下所示：
- en: '[PRE53]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In `App.vue`, replace the default code with the following code to have our
    component rendered in the app:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.vue` 中，用以下代码替换默认代码，以便在我们的应用中渲染组件：
- en: '[PRE54]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Run the application using the following command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE65]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Upon visiting `http://localhost:3000` in the browser, the preceding code will
    generate a component that will display a filter input field and a list of filtered
    frameworks, as shown in *Figure 3**.17*:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问 `http://localhost:3000`，前面的代码将生成一个组件，该组件将显示一个过滤器输入字段和过滤后的框架列表，如图 *图
    3**.17* 所示：
- en: '![Figure  3.16 – The app should display a list and filter input](img/B18645_03_16.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 应用应显示列表和过滤器输入](img/B18645_03_16.jpg)'
- en: Figure 3.16 – The app should display a list and filter input
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 应用应显示列表和过滤器输入
- en: 'On the displayed page, right-click and choose **Inspect** to open the developer
    console or use the *Ctrl* + *Shift* + *J* shortcut (macOS users: *Cmd* + *Shift*
    + *J*). Then, navigate to the **Vue** tab. You should see the tab opened, as in
    the following screenshot:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示的页面上，右键单击并选择 **Inspect** 以打开开发者控制台或使用 *Ctrl* + *Shift* + *J* 快捷键（macOS 用户：*Cmd*
    + *Shift* + *J*）。然后，导航到 **Vue** 选项卡。你应该看到选项卡已打开，如下面的截图所示：
- en: '![](img/B18645_03_17.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18645_03_17.jpg)'
- en: Figure 3.17 – Vue tab in the developer console
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 开发者控制台中的 Vue 选项卡
- en: 'By default, you will be in the `V`. Two things will occur: in the right-hand
    panel, the `input` data prop now has the value of `v` and the computed list. `computedList`
    now only contains one element with the value `Vue`.'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，你将处于 `V` 状态。将发生两件事：在右侧面板中，`input` 数据属性现在具有 `v` 和计算列表的值。`computedList`
    现在只包含一个值为 `Vue` 的元素。
- en: 'In the browser, this data will be reflected in the UI, as seen in *Figure 3**.19*:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，这些数据将在 UI 中反映出来，如图 *图 3**.19* 所示：
- en: '![Figure 3.18 – How the app’s options look in the Vue tab](img/B18645_03_18.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – 应用选项在 Vue 选项卡中的外观](img/B18645_03_18.jpg)'
- en: Figure 3.18 – How the app’s options look in the Vue tab
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – 应用选项在 Vue 选项卡中的外观
- en: 'Edit the data directly in the right-hand panel by clicking on the pencil icon
    next to the `input` prop:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击 `input` 属性旁边的铅笔图标直接在右侧面板中编辑数据：
- en: '![Figure 3.19 – Edit button appears on hover](img/B18645_03_19.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – 鼠标悬停时出现编辑按钮](img/B18645_03_19.jpg)'
- en: Figure 3.19 – Edit button appears on hover
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 鼠标悬停时出现编辑按钮
- en: 'Type `R` as the new value of the `input` prop and hit *Enter*. The DOM will
    reactively update for the direct change made to the `input` prop from the Devtools
    extension, as shown in the following screenshot:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `input` 属性的新值输入为 `R` 并按 *Enter*。DOM 将对来自 Devtools 扩展的直接更改做出反应性更新，如下面的截图所示：
- en: '![Figure 3.20 – Live editing your local data value](img/B18645_03_20.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.20 – 实时编辑本地数据值](img/B18645_03_20.jpg)'
- en: Figure 3.20 – Live editing your local data value
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – 实时编辑本地数据值
- en: After changing the value in Vue.js Devtools, the value will reactively change
    in the UI, where the input value in this example is now `R`, which then triggers
    the reactive `computedList` array to only show values containing the letter *R*,
    as displayed in *Figure 3**.21*.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vue.js Devtools 中更改值后，UI 中的值将反应性地更改，在这个例子中，输入值现在是 `R`，这随后触发反应性的 `computedList`
    数组，只显示包含字母 *R* 的值，如图 *图 3**.21* 所示。
- en: 'Switch to the `A`, then `B`, then `V`. As you type text into the input box,
    you will see the performance metrics as blue bars, as seen in the following screenshot:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `A`，然后 `B`，然后 `V`。当你将文本输入到输入框中时，你将看到性能指标以蓝色条形显示，如下面的截图所示：
- en: '![Figure 3.21 – The render performance metrics on each input change](img/B18645_03_21.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.21 – 每次输入变化时的渲染性能指标](img/B18645_03_21.jpg)'
- en: Figure 3.21 – The render performance metrics on each input change
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 每次输入更改时的渲染性能指标
- en: 'Select one of the rows representing the recorded events for `Exercise` listed
    in the middle pane. You can observe the information, including the duration in
    seconds of that specific event in the right-side panel. This number reflects how
    long it took your component to render/update, as shown in the following screenshot:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择中间面板中列出的 `Exercise` 记录事件之一。你可以在右侧面板中观察到信息，包括该特定事件的持续时间（以秒为单位）。这个数字反映了你的组件渲染/更新的时间，如下面的截图所示：
- en: '![Figure 3.22 – Selecting a performance record and seeing the details](img/B18645_03_22.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – 选择性能记录并查看详细信息](img/B18645_03_22.jpg)'
- en: Figure 3.22 – Selecting a performance record and seeing the details
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 选择性能记录并查看详细信息
- en: Note
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Repeating the test will allow you to compare benchmarks. However, if you refresh
    the page, you will lose them.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 重复测试将允许你比较基准。然而，如果你刷新页面，你将丢失它们。
- en: At the end of this exercise, you know how to use Vue Devtools to debug a component
    with the **Components** tab. You also experienced how to observe and edit data
    with the available functionalities of the Vue Devtools extension. Finally, you
    know how to use the **Performance** tab to monitor the performance of your component
    over lifecycle hooks during the life of the application.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习的结尾，你将知道如何使用 Vue Devtools 的 **组件** 选项卡来调试组件。你还体验了如何使用 Vue Devtools 扩展的可用功能来观察和编辑数据。最后，你知道如何使用
    **性能** 选项卡来监控组件在应用程序生命周期钩子中的性能。
- en: Activity 3.01 – creating a Vue application with Pinia and Router using Vite
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 3.01 – 使用 Vite、Pinia 和 Router 创建 Vue 应用程序
- en: To access the code file for this activity, refer to [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Activity3.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Activity3.01)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此活动的代码文件，请参阅 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Activity3.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter03/Activity3.01)
- en: In this activity, you will build a Vue project using the command line with Vite,
    with Vue Router and Pinia installed. This activity will test your ability to control
    the various Vue tools for your development.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，你将使用命令行和 Vite 构建 Vue 项目，并安装 Vue Router 和 Pinia。此活动将测试你控制各种 Vue 工具进行开发的能力。
- en: 'The following steps will help you complete the activity:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成活动：
- en: Use Vite to create a new Vue project with Pinia and Vue Router enabled.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Vite 创建一个启用 Pinia 和 Vue Router 的新 Vue 项目。
- en: Create a component to render two string input fields that receive the first
    and last names and display the full name received.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个组件来渲染两个字符串输入字段，接收姓氏和名字，并显示接收到的全名。
- en: Open the Devtools extension and observe that Pinia and Vue Router are available
    for debugging.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Devtools 扩展并观察 Pinia 和 Vue Router 是否可用于调试。
- en: Add some text and observe how the component renders in **Performance**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些文本并观察组件在 **性能** 中的渲染情况。
- en: 'The expected outcome is as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果如下：
- en: '![Figure 3.23 – The final output](img/B18645_03_23.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.23 – 选择性能记录并查看详细信息](img/B18645_03_23.jpg)'
- en: Figure 3.23 – The final output
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – 最终输出
- en: 'This activity also has the **Pinia** and **Routes** tabs available, as displayed
    in *Figure 3**.25*:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动还提供了 **Pinia** 和 **Routes** 选项卡，如 *图 3*.25* 所示：
- en: '![Figure 3.24 – Devtools tab displays Pinia, Routes, and other info](img/B18645_03_24.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.24 – Devtools 选项卡显示 Pinia、Routes 和其他信息](img/B18645_03_24.jpg)'
- en: Figure 3.24 – Devtools tab displays Pinia, Routes, and other info
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24 – Devtools 选项卡显示 Pinia、Routes 和其他信息
- en: After the activity has been completed, you should be able to use Vite and Vue
    Devtools to manage your future Vue projects. You will find that there are situations
    where you use both tools to enhance your development experience and make your
    applications more optimized.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 活动完成后，你应该能够使用 Vite 和 Vue Devtools 来管理你的未来 Vue 项目。你会发现，在某些情况下，你需要使用这两个工具来增强你的开发体验并使你的应用程序更加优化。
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about Vite and how to create a Vue project managed
    by Vite through the command-line Terminal. You also learned about Vue Devtools
    and how to use its features, which will assist you on this book’s journey to more
    advanced topics.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Vite 以及如何通过命令行终端创建由 Vite 管理的 Vue 项目。你还学习了 Vue Devtools 以及如何使用其功能，这些功能将帮助你在这本书的旅程中探索更高级的主题。
- en: The next chapter focuses more on advanced Vue component features, such as passing
    data from one component to its nested components, validating data received from
    outside of the element, customizing the layout of a component with slots, and
    keeping the references of components for external control.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将更多地关注高级Vue组件功能，例如从一个组件向其嵌套组件传递数据，验证从元素外部接收到的数据，使用插槽自定义组件布局，以及保持组件引用以进行外部控制。
- en: 'Part 2: Building Your First Vue App'
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：构建你的第一个Vue应用程序
- en: In this part, we will learn how to pass data from parent to children components
    using props and custom events, and how to create reusable component logic with
    the Composition API. We will also learn how to build a complex app structure with
    routing and animations. We will go through every essential topic and get to know
    how Vue handles it and how to use it effectively with hands-on exercises.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将学习如何使用props和自定义事件从父组件传递数据到子组件，以及如何使用Composition API创建可重用组件逻辑。我们还将学习如何使用路由和动画构建复杂的应用程序结构。我们将逐一讲解每个基本主题，并了解Vue如何处理这些主题以及如何通过实际练习有效地使用Vue。
- en: 'We will cover the following chapters in this section:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中将涵盖以下章节：
- en: '[*Chapter 4*](B18645_04.xhtml#_idTextAnchor128), *Nesting Components (Modularity)*'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B18645_04.xhtml#_idTextAnchor128)，*组件嵌套（模块化）*'
- en: '[*Chapter 5*](B18645_05.xhtml#_idTextAnchor193), *The Composition API*'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B18645_05.xhtml#_idTextAnchor193)，*Composition API*'
- en: '[*Chapter 6*](B18645_06.xhtml#_idTextAnchor216), *Global Component Composition*'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18645_06.xhtml#_idTextAnchor216)，*全局组件组合*'
- en: '[*Chapter 7*](B18645_07.xhtml#_idTextAnchor248), *Routing*'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18645_07.xhtml#_idTextAnchor248)，*路由*'
- en: '[*Chapter 8*](B18645_08.xhtml#_idTextAnchor353), *Animations and Transitions*'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B18645_08.xhtml#_idTextAnchor353)，*动画和过渡*'
