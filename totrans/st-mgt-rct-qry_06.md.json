["```js\nimport { useMutation } from '@tanstack/react-query';\n```", "```js\nconst mutation = useMutation({\n    mutationFn: <InsertMutationFunction>\n})\n```", "```js\nimport { useMutation } from \"@tanstack/react-query\";\nimport { gql, GraphQLClient } from \"graphql-request\";\nconst customMutation = gql`\nmutation AddUser($user: String!, $age: Int!) {\n  insert_user(object: { user: $user, age: $age }) {\n    user\n    age\n  }\n}\n`\nconst createUserGQL = async (user) => {\n  const endpoint = <add_endpoint_here>;\n  const client = new GraphQLClient(endpoint)\n  return client.request(customMutation, user);\n  return data;\n};\n ...\nconst mutation = useMutation({\n    mutationFn: createUserGQL\n  });\n```", "```js\nimport axios from \"axios\";\nimport {useMutation} from \"@tanstack/react-query\";\nconst createUser = async (user) => {\n  return axios.post\n    (`https://danieljcafonso.builtwithdark.com/name-api`,\n      user);\n};\n …\nconst mutation = useMutation({\n    mutationFn: createUser\n  });\n```", "```js\nconst createUserFetch = async (user) => {\n  return fetch\n    (`https://danieljcafonso.builtwithdark.com/name-api`, {\n    method: \"POST\",\n    body: JSON.stringify(user),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    },\n  });\n};\nconst mutation = useMutation({\n    mutationFn: createUserFetch\n});\n```", "```js\nconst { mutate } = useMutation({\n    mutationFn: createUser\n  });\nmutate({ name: \"username\", age: 25 })\n```", "```js\nimport axios from \"axios\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nconst createUser = async (user) => {\n  return axios.post\n    (`https://danieljcafonso.builtwithdark.com/name-api`,\n      user);\n};\nconst SimpleMutation = () => {\n  const [name, setName] = useState(\"\");\n  const { mutate } = useMutation({\n    mutationFn: createUser,\n  });\n  const submitForm = (e) => {\n    e.preventDefault()\n    mutate({ name })\n  }\n  return (\n    <div>\n      <form>\n        <input\n          name=\"name\"\n          type={\"text\"}\n          onChange={(e) => setName(e.target.value)}\n          value={name}\n        />\n        <button onClick={submitForm}>Add</button>\n      </form>\n    </div>\n  );\n};\n```", "```js\nconst { mutateAsync } = useMutation({\n  mutationFn: createUser,\n});\ntry {\n  const user = await mutateAsync({ name: \"username\", age:\n    25 });\n} catch (error) {\n  console.error(error);\n}\n```", "```js\nconst ConcurrentMutations = () => {\n  const [name, setName] = useState(\"\");\n  const { mutateAsync: mutateAsyncOne } = useMutation({\n    mutationFn: createUser,\n  });\n  const { mutateAsync: mutateAsyncTwo } = useMutation({\n    mutationFn: registerUser,\n  });\n  const submitForm = async (e) => {\n    e.preventDefault()\n    const mutationOne = mutateAsyncOne({ name })\n    const mutationTwo = mutateAsyncTwo({ name })\n     try {\n      const data = await Promise.all([mutationOne,\n        mutationTwo]);\n      // do something with data\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return (\n    <div>\n      <form>\n        <input\n          name=\"name\"\n          type={\"text\"}\n          onChange={(e) => setName(e.target.value)}\n          value={name}\n        />\n        <button onClick={submitForm}>Add</button>\n      </form>\n    </div>\n  );\n};\n```", "```js\nconst SimpleMutation = () => {\n  const { mutate, data } = useMutation({\n    mutationFn: createUser,\n  });\n  return (\n    <div>\n        {data && <p>{data.data.user}</p>}\n      ...\n    </div>\n  );\n}\n```", "```js\nconst SimpleMutation = () => {\n  const { mutate, error } = useMutation({\n    mutationFn: createUser,\n  });\n  return (\n    <div>\n        {error && <p>{error.message}</p>}\n  ...\n    </div>\n  );\n};\n```", "```js\nconst SimpleMutation = () => {\n  const { mutate, data, error, reset } = useMutation({\n    mutationFn: createUser,\n  });\n  return (\n    <div>\n        {error && <p>{error.message}</p>}\n        {data && <p>{data.data.user}</p>}\n        <button onClick={() => reset()}>Clear errors and\n          data</button>\n        ...\n   </div>\n  );\n};\n```", "```js\n const SimpleMutation = () => {\n  const [name, setName] = useState(\"\");\n  const { mutate, status, error, data } = useMutation({\n    mutationFn: createUser,\n  });\n  const submitForm = (e) => {\n    e.preventDefault()\n    mutate({ name })\n  }\n  return (\n    <div>\n      {status === \"idle\" && <p> Mutation hasn't run </p>}\n      {status === \"error\" && <p> There was an error:\n        {error.message} </p>}\n      {status === \"success\" && <p> Mutation was successful:\n        {data.name} </p>}\n      <form>\n        <input\n          name=\"name\"\n          type={\"text\"}\n          onChange={(e) => setName(e.target.value)}\n          value={name}\n        />\n        <button disabled={status === \"loading\"}\n          onClick={submitForm}>Add</button>\n      </form>\n    </div>\n  );\n};\n```", "```js\n const SimpleMutation = () => {\n  const [name, setName] = useState(\"\");\n  const { mutate, isIdle, isError, isSuccess, isLoading,\n    error, data } = useMutation({\n    mutationFn: createUser,\n  });\n  const submitForm = (e) => {\n    e.preventDefault()\n    mutate({ name })\n  }\n  return (\n    <div>\n      {isIdle && <p> Mutation hasn't run </p>}\n      {isError && <p> There was an error: {error.message}\n        </p>}\n      {isSuccess && <p> Mutation was successful:\n        {data.name} </p>}\n      <form>\n        <input\n          name=\"name\"\n          type={\"text\"}\n          onChange={€ => setName(e.target.value)}\n          value={name}\n        />\n        <button disabled={isLoading} onClick={submitForm}>\n          Add</button>\n      </form>\n    </div>\n  );\n};\n```", "```js\nconst SimpleMutation = () => {\n  const [name, setName] = useState(\"\");\n  const { mutate, isPaused } = useMutation({\n    mutationFn: createUser,\n  });\n  const submitForm = € => {\n    e.preventDefault()\n    mutate({ name })\n  }\n  return (\n    <div>\n      {isPaused && <p> Waiting for network to come back </p>}\n      <form>\n        <input\n          na\"e=\"n\"me\"\n          typ\"={\"t\"xt\"}\n          onChang€(e) => setName(e.target.value)}\n          value={name}\n        />\n        <button disabled={isPaused} onClick={submitForm}>\n          Add</button>\n      </form>\n    </div>\n  );\n};\n```", "```js\nuseMutation({\n  cacheTime: 60000,\n});\n```", "```js\nuseMutation({\n  mutationKey: [\"myUserMutation\"],\n});\n```", "```js\nuseMutation({\n  retry: 2,\n});\n```", "```js\nuseMutation({\n  retryDelay: (attempt) => attempt * 2000,\n});\n```", "```js\nuseMutation({\n  onMutate: (variables) => showNotification(\"Updating the\n    following data:\", variables),\n});\n```", "```js\nuseMutation({\n  onSuccess: (data) => console.log(\"mutation was\n    successful\", data),\n});\n```", "```js\nuseMutation({\n  onError: (error) => console.log(\"mutation was\n    unsuccessful\", error.message),\n});\n```", "```js\nuseMutation({\n  onSettled : (data, error) => console.log(\"mutation has\n    settled\"),\n});\n```", "```js\n const { mutate } = useMutation({\n    mutationFn: createUser,\n    onSuccess: (data) => {\n      showToast(`${data.data.name} was created\n        successfuly`)\n    }\n  });\n  const submitForm = (e) => {\n    e.preventDefault()\n    mutate({ name }, {\n      onSuccess: (data) => {\n        const userId = data.data.userID\n        goToRoute(`/user/${userId}`)\n      }\n    })\n  }\n  ...\n```", "```js\n  const queryClient = useQueryClient()\n  const { data } = useQuery({\n    queryKey: [\"allUsers\"],\n    queryFn: fetchAllData,\n  });\n  const { mutate } = useMutation({\n    mutationFn: createUser,\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"allUsers\"],\n      })\n    }\n  });\n```", "```js\n const queryClient = useQueryClient()\n  const { data } = useQuery({\n    queryKey: [\"allUsers\"],\n    queryFn: fetchAllData,\n  });\n  const { mutate } = useMutation({\n    mutationFn: createUser,\n    onSuccess: (data) => {\n      const user = data.data\n      queryClient.setQueryData([\"allUsers\"], (prevData) =>\n        [user, ...prevData]);\n    }\n  });\n```", "```js\nimport axios from \"axios\";\nimport { useQuery, useMutation, useQueryClient } from\n  \"@tanstack/react-query\";\nimport { useState } from \"react\";\nconst fetchAllData = async () => {\n  const { data } = await axios.get(\n    `https://danieljcafonso.builtwithdark.com/name-api`\n  );\n  return data;\n};\nconst createUser = async (user) => {\n  return axios.post\n    (`https://danieljcafonso.builtwithdark.com/name-api`,\n      user);\n};\nconst Mutation = () => {\n  const queryClient = useQueryClient();\n  const [name, setName] = useState(\"\");\n  const [age, setAge] = useState(0);\n  const { data } = useQuery({\n    queryKey: [\"allUsers\"],\n    queryFn: fetchAllData,\n  });\n  const mutation = useMutation({\n    mutationFn: createUser,\n    onMutate: async (user) => {\n      await queryClient.cancelQueries({\n        queryKey: [\"allUsers\"],\n      });\n      const previousUsers = queryClient.getQueryData({\n        queryKey: [\"allUsers\"],\n      });\n      queryClient.setQueryData([\"allUsers\"], (prevData) =>\n        [user, ...prevData]);\n      return { previousUsers };\n    },\n    onError: (error, user, context) => {\n      showToast(\"Something went wrong...\")\n      queryClient.setQueryData([\"allUsers\"], context.\n        previousUsers);\n    },\n    onSettled: () =>\n      queryClient.invalidateQueries({\n        queryKey: [\"allUsers\"],\n      }),\n  });\n  return (\n    <div>\n     {data?.map((user) => (\n        <div key={user.userID}>\n          Name: {user.name} Age: {user.age}\n        </div>\n      ))}\n      <form>\n        <input\n          name=\"name\"\n          type={\"text\"}\n          onChange={(e) => setName(e.target.value)}\n          value={name}\n        />\n        <input\n          name=\"number\"\n          type={\"number\"}\n          onChange={(e) => setAge(Number(e.target.value))}\n          value={age}\n        />\n        <button\n          type=\"button\"\n          onClick={(e) => {\n            e.preventDefault()\n            mutation.mutate({ name, age })\n          }}\n        >\n          Add\n        </button>\n      </form>\n    </div>\n  );\n};\n```"]