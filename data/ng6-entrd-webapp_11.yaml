- en: Highly-Available Cloud Infrastructure on AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上实现高可用云基础设施
- en: The web is a hostile environment. There are good and bad actors. Bad actors
    can try to poke holes in your security or try to bring down your website with
    a **Distributed Denial of Service** (**DDoS**) attack. Good actors, if you're
    lucky, will love your website and won't stop using it. They'll shower you with
    recommendations to improve your site, but also, they may run into bugs and they
    may be so enthusiastic that your site may slow down to a crawl due to high traffic.
    Real-world deployments on the web require a lot of expertise to get it right. As
    a full-stack developer, you can only know about so many nuances of hardware, software,
    and networking. Luckily, with the advent of cloud service providers, a lot of
    this expertise has been translated into software configurations, with the difficult
    hardware and networking concerns taken care of by the provider.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是一个充满敌意的环境。有好人和坏人。坏人可能会试图找到您安全漏洞，或者试图通过**分布式拒绝服务**（**DDoS**）攻击来使您的网站崩溃。如果幸运的话，好人会喜欢您的网站并且不会停止使用它。他们会给您提出改进网站的建议，但也可能遇到错误，并且可能因为高流量而使您的网站变得非常缓慢。在网络上进行真实部署需要大量的专业知识才能做到正确。作为全栈开发人员，您只能了解硬件、软件和网络的许多微妙之处。幸运的是，随着云服务提供商的出现，许多这些专业知识已经被转化为软件配置，由提供商来处理困难的硬件和网络问题。
- en: One of the best features of a cloud service provider is cloud scalability, which
    refers to your server automatically scaling out to respond to high volumes of
    unexpected traffic and scaling down to save costs when the traffic returns back
    to normal levels. **Amazon Web Services** (**AWS**) goes beyond basic cloud scalability
    and introduces high-availability and fault tolerant concepts, allowing for resilient
    local and global deployments. I have chosen to introduce you to AWS, because of
    its vast capabilities that go way beyond what I will touch in this book. With
    Route 53, you can get free DDoS protection; with API Gateway, you create API keys,
    with AWS Lambda you can handle millions of transactions for only a few dollars
    a month and with CloudFront you can cache your content at secret edge-locations
    that are scattered around major cities of the world. In addition, Blue-Green deployments
    will allow you to achieve no-downtime deployments of your software.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商最好的特性之一是云可伸缩性，这指的是您的服务器在面对意外高流量时自动扩展，而在流量恢复到正常水平时自动缩减成本。**亚马逊网络服务**（**AWS**）不仅具备基本的云可伸缩性，还引入了高可用性和容错概念，允许弹性的本地和全球部署。我选择介绍AWS，是因为它的广泛功能远远超出了我在本书中所涉及的范围。通过Route
    53，您可以获得免费的DDoS防护；通过API Gateway，您可以创建API密钥；通过AWS Lambda，您可以以每月仅几美元的成本处理数百万次的交易；通过CloudFront，您可以在世界主要城市周围的秘密边缘位置缓存您的内容。此外，蓝绿部署将允许您实现无停机部署您的软件。
- en: 'Overall, the tools and techniques you will be learning in this chapter are
    adaptable to any cloud provider and is fast becoming critical knowledge for any
    full-stack developer. We will be going over the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，你将在本章学习的工具和技术适用于任何云服务提供商，并且正在迅速成为任何全栈开发人员的关键知识。我们将讨论以下主题：
- en: Creating and protecting AWS accounts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和保护AWS账户
- en: Right-sizing infrastructure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合适的基础设施规模
- en: Simple load testing to optimize instance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的负载测试以优化实例
- en: Configuring and deploying to AWS ECS Fargate
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和部署到AWS ECS Fargate
- en: Scripted Blue-Green deployments
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本化的蓝绿部署
- en: Billing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计费
- en: Creating a secure AWS account
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建安全的AWS账户
- en: Account access and control is of paramount importance in any cloud service,
    and this includes AWS as well. After initial account creation, you will have your
    root credentials, which is your email and password combination.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 帐户访问和控制在任何云服务中都至关重要，AWS也不例外。在初始帐户创建后，您将拥有您的根凭据，即您的电子邮件和密码组合。
- en: 'Let''s start by creating an AWS account:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建AWS帐户开始：
- en: Start by navigating to `https://console.aws.amazon.com`
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先导航到`https://console.aws.amazon.com`
- en: If you don't have one, create a new account
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有帐户，请创建一个新帐户
- en: 'If you are new to AWS, you can get 12 months of free tier access to various
    services, as shown on the sign-up screen here:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是AWS的新用户，您可以在此注册屏幕上获得12个月的免费服务访问权限：
- en: '![](Images/9e286392-91c9-4518-ae4f-7215ac2426db.png)AWS Account Sign Up'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/9e286392-91c9-4518-ae4f-7215ac2426db.png)AWS帐户注册'
- en: Your AWS billing is tied to your root credentials. If compromised, a lot of
    damage can be done on your account before you can gain back access.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您的AWS计费与您的根凭据相关联。如果遭到破坏，您的帐户可能会受到很大的损害，而在您重新获得访问权限之前可能会发生很多损害。
- en: 'Ensure that you enable 2FA on your root credentials:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您在根凭据上启用了双因素认证：
- en: To add another layer of security, going forward, you need to stop logging in
    to your AWS account using your root credentials. You can create user accounts
    using the AWS **Identity and Access Management** (**IAM**) module. If these accounts
    get compromised, unlike your root account, you can easily and quickly delete or
    replace them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加安全层，从现在开始，您需要停止使用根凭据登录到您的AWS帐户。您可以使用AWS身份和访问管理（IAM）模块创建用户帐户。如果这些帐户遭到破坏，与您的根帐户不同，您可以轻松快速地删除或替换它们。
- en: Navigate to the `IAM` module
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`IAM`模块
- en: Create a new user account with global admin rights
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有全局管理员权限的新用户帐户
- en: Log in to the AWS console using these credentials
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些凭据登录到AWS控制台
- en: You should enable 2FA for these credentials as well
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还应该为这些凭据启用双因素认证
- en: 'A secure account setup looks as follows, with every status reported as green:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全的帐户设置如下，每个状态都报告为绿色：
- en: '![](Images/a42157c6-6389-42d0-be5a-d9295095a7da.png)AWS IAM Module After Secure
    Setup'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/a42157c6-6389-42d0-be5a-d9295095a7da.png)安全设置后的AWS IAM模块'
- en: The major benefit of working with user accounts is programmatic access. For
    each user account, you can create a public access ID and private access key pair.
    When you're working with third parties, such as hosted continuous integration
    services, your own application code or CLI tools, you use your programmatic access
    keys to connect to your AWS resources. When, inevitably, the access keys leak,
    it is quick and convenient to disable access to the old keys and create new ones.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与用户帐户一起工作的主要好处是程序化访问。对于每个用户帐户，您可以创建一个公共访问ID和私有访问密钥对。当您与第三方合作，例如托管的持续集成服务、您自己的应用程序代码或CLI工具时，您使用您的程序化访问密钥连接到您的AWS资源。当访问密钥不可避免地泄漏时，快速方便地禁用对旧密钥的访问并创建新密钥。
- en: Furthermore, user account access can be tightly controlled by very granular
    permissions. You can also create roles with a group of permissions and further
    control communication between AWS services and some external services.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用户帐户访问可以通过非常细粒度的权限进行严格控制。您还可以创建具有一组权限的角色，并进一步控制AWS服务和一些外部服务之间的通信。
- en: When creating user accounts and roles, always err on the side of minimal permissions.
    This can be an exercise in frustration, when working with clients, contractors,
    or colleagues who are unfamiliar with AWS; however, it is a worthwhile exercise.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建用户帐户和角色时，始终要在最小权限方面犯错误。当与不熟悉AWS的客户、承包商或同事合作时，这可能是一种令人沮丧的练习，但这是一种值得的练习。
- en: You're only as secure and reliable as your weakest link, so you must plan for
    failures and, most importantly, practice recovery plans on a regular basis.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你的安全性和可靠性取决于最薄弱的环节，因此你必须计划应对故障，并且最重要的是，定期实践恢复计划。
- en: Securing secrets
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护秘密
- en: Password and private key leaks occur more commonly than you may think. Your
    keys may be compromised in unsecured public Wi-Fi networks; you may accidentally
    check them in to your code repository or use the superbly insecure communication
    methods like email. Accidental code check-ins, however, are the biggest issue,
    since most junior developers don't realize that deletion isn't an option in source
    control systems.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 密码和私钥泄漏比你想象的更常见。你的密钥可能会在不安全的公共Wi-Fi网络中被泄露；你可能会意外地将它们提交到你的代码仓库中，或者使用极不安全的通信方法，比如电子邮件。然而，意外的代码提交是最大的问题，因为大多数初级开发者并不意识到在源代码控制系统中删除并不是一个选项。
- en: 'As a developer, there are a few noteworthy best practices to follow to safeguard
    your secrets:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，有一些值得注意的最佳实践可以遵循以保护你的秘密：
- en: Always use a VPN service on public Wi-Fi, such as [tunnelbear.com](https://www.tunnelbear.com/)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终在公共Wi-Fi上使用VPN服务，比如[tunnelbear.com](https://www.tunnelbear.com/)
- en: Leverage the `.aws/credentials` file located under your user's `home` folder,
    to create profiles and store access keys
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用位于用户“home”文件夹下的`.aws/credentials`文件，创建配置文件并存储访问密钥
- en: Create a `.env` file in the root of your project that is in `.gitignore` to
    store any secrets that your CI server may later inject as a team norm
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中创建一个`.env`文件，并将其列入`.gitignore`，以存储你的CI服务器可能会后续注入的任何秘密作为团队规范
- en: Always review commits before pushing them
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终在推送之前审查提交
- en: Following these conventions every single time will get you in the good habit
    of never checking in your secrets to a code repository. In the next section, we
    will delve into resource considerations for your cloud environment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每次遵循这些惯例都会养成一个好习惯，永远不要将你的秘密提交到代码仓库中。在下一节中，我们将深入探讨云环境的资源考虑。
- en: Right-sizing infrastructure
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合适的基础设施规模
- en: The point of optimizing your infrastructure is to protect your companies revenue,
    while minimizing the cost of operating your infrastructure. Your goal should be
    to ensure that users don't encounter high-latency, otherwise known as bad performance
    or worse, unfulfilled or dropped requests, all the while making your venture remains
    a sustainable endeavor.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 优化基础设施的目的是保护公司的收入，同时最大限度地减少基础设施的运营成本。你的目标应该是确保用户不会遇到高延迟，也就是不良性能，或者更糟糕的是未完成或丢弃的请求，同时使你的企业保持可持续的努力。
- en: 'The three pillars of web application performance are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序性能的三大支柱如下：
- en: CPU utilization
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPU利用率
- en: Memory usage
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存使用量
- en: Network bandwidth
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络带宽
- en: I have intentionally left disk access out of the key consideration metrics,
    since only particular workloads executed on an application server or data store are
    affected by it. Disk access would rarely ever impact the performance of serving
    a web application as long as application assets are delivered by a **Content Delivery
    Network** (**CDN**). That said, still keep an eye on any unexpected runaway disk
    access, such as high frequency creation of temp and log files. Docker, for example,
    can spit out logs that can easily fill up a drive.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意将磁盘访问排除在关键考虑指标之外，因为只有在应用服务器或数据存储上执行特定工作负载时才会受到影响。只要应用程序资产由内容交付网络（CDN）提供，磁盘访问很少会影响提供Web应用程序的性能。也就是说，仍然要注意任何意外的磁盘访问，比如高频率创建临时和日志文件。例如，Docker可能会输出日志，这些日志很容易填满驱动器。
- en: In an ideal scenario, CPU, memory, and network bandwidth use should be utilized
    evenly around 60-80% of available capacity. If you encounter performance issues
    due to various other factors such as disk I/O, a slow third-party service, or
    inefficient code, most likely one of your metrics will peek at or near maximum
    capacity, while the other two are idling or severely underutilized. This is an
    opportunity to use more CPU, memory, or bandwidth to compensate for the performance
    issue and also evenly utilize available resources.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的情况下，CPU、内存和网络带宽的使用应该均匀地在可用容量的60-80%左右。如果您遇到性能问题，由于诸如磁盘I/O、慢的第三方服务或低效的代码等各种其他因素，很可能您的某个指标会接近或达到最大容量，而另外两个指标则处于空闲或严重未被充分利用的状态。这是一个利用更多CPU、内存或带宽来补偿性能问题并均匀利用可用资源的机会。
- en: The reason behind targeting 60-80% utilization is to allow for some time for
    a new instance (server or container) to be provisioned and ready to serve users.
    After your predefined threshold has been crossed, while a new instance is provisioned,
    you can continue serving the increasing number of users, thus minimizing unfulfilled
    requests.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将60-80%的利用率作为目标的原因是为了为新实例（服务器或容器）提供一些时间来进行配置，并准备好为用户提供服务。在您预定义的阈值被突破后，当新实例被配置时，您可以继续为日益增长的用户提供服务，从而最小化未满足的请求。
- en: Throughout this book, I have discouraged over-engineering or perfect solutions.
    In today's complicated IT landscape, it is nearly impossible to predict where
    you will encounter performance bottlenecks. Your engineering may, very easily,
    spend $100,000+ worth of engineering hours, where the solution to your problem
    may be a few hundred dollars of new hardware, whether it be a network switch,
    solid state drive, CPU, and more memory.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我已经反对过度设计或完美的解决方案。在当今复杂的IT环境中，几乎不可能预测您将遇到性能瓶颈的地方。您的工程师很容易花费10万美元以上的工程时间，而解决您的问题可能只需要几百美元的新硬件，无论是网络交换机、固态硬盘、CPU还是更多内存。
- en: If your CPU is too busy, you may want to introduce more bookkeeping logic to
    your code, via index, hash tables, or dictionaries, that you can cache in memory
    to speed up subsequent or intermediary steps of your logic. For example, if you
    are constantly running array lookup operations to locate particular properties
    of a record, you can perform an operation on that record, saving the ID and/or
    the property of the record in a hash table that you keep in memory will reduce
    your runtime cost from *O(n)* down to *O(1)*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的CPU太忙，您可能希望在您的代码中引入更多的记账逻辑，通过索引、哈希表或字典，您可以将其缓存在内存中，以加快逻辑的后续或中间步骤。例如，如果您不断地运行数组查找操作来定位记录的特定属性，您可以对该记录执行一个操作，将记录的ID和/或属性保存在内存中的哈希表中，将您的运行成本从*O(n)*降低到*O(1)*。
- en: Following the preceding example, you may end up using too much memory with hash
    tables. In this case, you may want to more aggressively offload or transfer caches
    to slower, but more plentiful data stores using your spare network bandwidth,
    such as a Redis instance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的例子，您可能会在哈希表中使用过多的内存。在这种情况下，您可能希望更积极地将缓存卸载或转移到速度较慢但更丰富的数据存储中，利用您多余的网络带宽，比如一个Redis实例。
- en: If your network utilization is too high, you may want to investigate usage of
    CDNs with expiring links, client-side caching, throttling requests, API access
    limits for customers abusing their quotas, or optimize your instances to have
    disproportionately more network capacity compared to its CPU or Memory capacity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网络利用率过高，您可能希望调查使用具有过期链接的CDN、客户端缓存、限制请求速度、滥用配额的客户的API访问限制，或者优化您的实例，使其具有与其CPU或内存容量相比不成比例的更多网络容量。
- en: Optimizing instance
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化实例
- en: In an earlier example, I demonstrated the use of my `duluca/minimal-node-web-server` Docker
    image to host our Angular apps. Even though Node.js is a very lightweight server,
    it is simply not optimized to just be a web server. In addition, Node.js has single-threaded
    execution environment, making it a poor choice for serving static content to many
    concurrent users at once.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我演示了使用我的 `duluca/minimal-node-web-server` Docker 镜像来托管我们的 Angular 应用程序。尽管
    Node.js 是一个非常轻量级的服务器，但它并不仅仅是一个优化的 Web 服务器。此外，Node.js 具有单线程执行环境，这使得它不适合同时为许多并发用户提供静态内容。
- en: 'You can observe the resource that a Docker image is utilizing by executing
    `docker stats`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行 `docker stats` 来观察 Docker 镜像正在使用的资源：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here are comparative results of the system resources that a Node and NGINX-based
    servers utilize at rest:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Node 和基于 NGINX 的服务器在空闲时利用的系统资源的比较结果：
- en: '| **Server** | **              Image Size** | **             Memory Usage**
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **服务器** | **              镜像大小** | **             内存使用** |'
- en: '| `duluca/minimal-nginx-web-server` |                                     16.8
    MB |                                         1.8 MB |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-nginx-web-server` |                                     16.8
    MB |                                         1.8 MB |'
- en: '| `duluca/minimal-node-web-server` |                                     71.8
    MB |                                       37.0 MB |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-node-web-server` |                                     71.8
    MB |                                       37.0 MB |'
- en: However, at rest values only tell a portion of the story. To get a better understanding,
    we must perform a simple load test to see memory and CPU utilization under load.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，空闲时的值只能讲述故事的一部分。为了更好地了解情况，我们必须进行简单的负载测试，以查看在负载下的内存和 CPU 利用率。
- en: Simple load testing
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的负载测试
- en: 'To get a better understanding of the performance characteristics of our server,
    let''s put them under some load and stress them:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解我们服务器的性能特征，让我们对它们施加一些负载和压力：
- en: 'Start your container using `docker run`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `docker run` 来启动您的容器：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you''re using `npm Scripts for Docker`, execute the following command to
    start your container:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 `npm Scripts for Docker`，执行以下命令来启动您的容器：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Execute the following bash script to start the load test:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 bash 脚本来开始负载测试：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This script will send 100requests/second to the server until you terminate it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本将向服务器发送 100 个请求/秒，直到您终止它。
- en: Execute `docker stats` to observe the performance characteristics.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `docker stats` 来观察性能特征。
- en: 'Here are high-level observations of CPU and memory utilization:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 CPU 和内存利用的高级观察：
- en: '| **CPU Utilization Statistics** | **        Low** | **         Mid** | **          High**
    | **   Max Memory** |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **CPU 利用率统计** | **        低** | **         中** | **          高** | **   最大内存**
    |'
- en: '| `duluca/minimal-nginx-web-server` |                   2% |                    15%
    |                       60% |                   2.4 MB |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-nginx-web-server` |                   2% |                    15%
    |                       60% |                   2.4 MB |'
- en: '| `duluca/minimal-node-web-server` |                 20% |                    45%
    |                     130% |                    75 MB |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `duluca/minimal-node-web-server` |                 20% |                    45%
    |                     130% |                    75 MB |'
- en: As you can see, there's a significant performance difference between the two
    servers serving the exact same content. Note that this kind of testing based on
    requests/second is good for a comparative analysis and does not necessarily reflect
    real-world usage.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，两个服务器提供完全相同内容之间存在显著的性能差异。请注意，基于每秒请求的这种测试适用于比较分析，并不一定反映实际使用情况。
- en: It is clear that our NGINX server will give us the best bang for our buck. Armed
    with an optimal solution, let's deploy the application on AWS.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们的 NGINX 服务器将为我们带来最佳性价比。有了最佳解决方案，让我们在 AWS 上部署应用程序。
- en: Deploy to AWS ECS Fargate
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到 AWS ECS Fargate
- en: AWS **Elastic Container Service** (**ECS**) Fargate is a cost effective and
    an easy-to-configure way to deploy your container in the cloud.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **弹性容器服务**（**ECS**）Fargate是一种在云中部署容器的成本效益高且易于配置的方式。
- en: 'ECS consists of four major parts:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ECS由四个主要部分组成：
- en: Container Repository, **Elastic Container Registry** (**ECR**), where you publish
    your Docker images
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器仓库，**弹性容器注册表**（**ECR**），您可以在其中发布Docker镜像
- en: Services, Tasks and Task Definitions, where you define runtime parameters and
    port mappings for your container as a task definition that a service runs as tasks
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务、任务和任务定义，您可以在其中定义容器的运行时参数和端口映射，作为服务运行的任务定义。
- en: Cluster, a collection of EC2 instances, where tasks can be provisioned and scaled
    out or in
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群，一个包含EC2实例的集合，可以在其中配置和扩展任务
- en: Fargate, a managed cluster service, that abstracts away EC2 instances, load
    balancer, and security group concerns
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fargate是一个托管的集群服务，它抽象了EC2实例、负载均衡器和安全组的问题
- en: At the time of publishing, Fargate is only available in the AWS `us-east-1`
    region.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布时，Fargate仅在AWS“us-east-1”地区可用。
- en: Our goal is to create a highly-available blue-green deployment, meaning that
    at least one instance of our application will be up and running in the event of
    a server failure or even during a deployment. These concepts are explored in detail
    in [Chapter 12](7e85d2ce-9a69-481e-9945-40e59195414c.xhtml), *Google Analytics
    and Advanced Cloud Ops*, in the *Cost Per User in a Scalable Environment* section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是创建一个高可用的蓝绿部署，这意味着在服务器故障甚至部署期间，我们的应用程序至少会有一个实例在运行。这些概念在[第12章](7e85d2ce-9a69-481e-9945-40e59195414c.xhtml)中进行了详细探讨，*Google
    Analytics和高级云运维*，在*可扩展环境中的每用户成本*部分。
- en: Configuring ECS Fargate
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS Fargate
- en: You can access ECS functions under the AWS Services menu, selecting the Elastic
    Container Service link.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在AWS服务菜单下访问ECS功能，选择弹性容器服务链接。
- en: If this is your first time logging in, you must go through a tutorial, where
    you will be forced to create a sample app. I would recommend going through the
    tutorial and deleting your sample app afterward. In order to delete a service,
    you'll need to update your service's number of tasks to 0\. In addition, delete
    the default cluster to avoid any unforeseen charges.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次登录，您必须通过教程，其中您将被强制创建一个示例应用程序。我建议您完成教程后删除示例应用程序。为了删除服务，您需要将服务的任务数量更新为0。此外，删除默认集群以避免任何意外费用。
- en: Creating a Fargate Cluster
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Fargate集群
- en: Let's start by configuring the Fargate Cluster, which act as a point of anchor
    when configuring other AWS services. Our cluster will eventually run a cluster
    service, which we will gradually build up in the following sections.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从配置Fargate集群开始，这将在配置其他AWS服务时充当锚点。我们的集群最终将运行一个集群服务，在接下来的章节中我们将逐渐构建起来。
- en: At the time of publishing, AWS Fargate is only available in AWS US East region,
    with support for more regions and Amazon Elastic Container Service for Kubernetes
    (Amazon EKS) coming soon. Kubernetes is a widely preferred open source alternative
    to AWS ECS with richer capabilities for container orchestration with on-premises,
    cloud, and cloud-hybrid deployments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布时，AWS Fargate仅在AWS美国东部地区可用，支持更多地区和即将推出对Amazon弹性容器服务Kubernetes（Amazon EKS）的支持。Kubernetes是AWS
    ECS的广泛首选开源替代方案，具有更丰富的容器编排能力，可用于本地、云和混合云部署。
- en: 'Let''s create the cluster:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建集群：
- en: Navigate to Elastic Container Service
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到弹性容器服务
- en: Click on Clusters | Create Cluster
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击集群|创建集群
- en: Select the Networking only... powered by AWS Fargate template
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择仅网络...由AWS Fargate提供支持的模板
- en: 'Click on the Next step and you see the Create Cluster step, as shown:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“下一步”，您将看到创建集群步骤，如下所示：
- en: '![](Images/d610cb50-7264-4010-9ba0-abab9bddc018.png)AWS ECS Create Cluster'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/d610cb50-7264-4010-9ba0-abab9bddc018.png)AWS ECS创建集群'
- en: Enter Cluster name as `fargate-cluster`
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将集群名称输入为`fargate-cluster`
- en: Create a VPC to isolate your resources from other AWS resources
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个VPC来将您的资源与其他AWS资源隔离开来
- en: Click on Create Cluster to finish the setup
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击创建集群以完成设置
- en: 'You will see the summary of your actions, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您的操作摘要，如下所示：
- en: '![](Images/63465452-62ae-46e0-bd8b-e841b681dcdc.png)AWS ECS Fargate Cluster'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/63465452-62ae-46e0-bd8b-e841b681dcdc.png)AWS ECS Fargate Cluster'
- en: Now that you have created a cluster within it's own **Virtual Private Cloud**
    (**VPC**), you can view it under Elastic Container Service | Clusters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经在其自己的**虚拟私有云**（**VPC**）中创建了一个集群，您可以在弹性容器服务 | 集群下查看它。
- en: Creating container repository
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建容器存储库
- en: 'Next, we need to set up a repository where we can publish the container images
    we build in our local or CI environment:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置一个存储库，我们可以在其中发布我们在本地或CI环境中构建的容器映像：
- en: Navigate to Elastic Container Service
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到弹性容器服务
- en: Click on Repositories | Create Repository
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Repositories | Create Repository
- en: Enter repository name as `lemon-mart`
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将存储库名称输入为`lemon-mart`
- en: Copy the Repository URI generated on the screen
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制屏幕上生成的存储库URI
- en: 'Paste the URI in `package.json` of your application as the new `imageRepo`
    variable:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将URI粘贴到您的应用程序的`package.json`中作为新的`imageRepo`变量：
- en: '[PRE4]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Click on Create Repository
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击创建存储库
- en: Click on Next step and then on Done to finish setup
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击下一步，然后单击完成以完成设置
- en: In the summary screen, you will get further instructions on how to use your
    repository with Docker. Later in the chapter, we will go over scripts that will
    take care of this for us.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在摘要屏幕上，您将获得有关如何在Docker中使用存储库的进一步说明。在本章的后面，我们将介绍将为我们处理此事的脚本。
- en: '![](Images/45094246-8522-48b8-a9b0-84c8bcbfd782.png)AWS ECS Repository'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/45094246-8522-48b8-a9b0-84c8bcbfd782.png)AWS ECS存储库'
- en: You can view your new repository under Elastic Container Service | Repositories.
    We will go over how to publish your image in the upcoming `npm Scripts for AWS`
    section.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在弹性容器服务 | 存储库下查看您的新存储库。我们将在即将到来的`npm Scripts for AWS`部分介绍如何发布您的镜像。
- en: Creating task definition
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建任务定义
- en: 'With a container target defined in our repository, we can define a task definition,
    which contains the necessary metadata to run our container, such as port mappings,
    reserved CPU, and memory allocations:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的存储库中定义了一个容器目标后，我们可以定义一个任务定义，其中包含运行容器所需的元数据，例如端口映射、保留的CPU和内存分配：
- en: Navigate to Elastic Container Service
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到弹性容器服务
- en: Click on Task Definitions | Create new Task Definition
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击任务定义 | 创建新任务定义
- en: Select Fargate launch type compatibility
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Fargate启动类型兼容性
- en: Enter Task Definition Name as `lemon-mart-task`
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任务定义名称输入为`lemon-mart-task`
- en: Select Task role `none` (you can add one later to enable access other AWS services)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择任务角色`none`（您可以稍后添加一个以启用访问其他AWS服务）
- en: Enter Task Size `0.5 GB`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入任务大小`0.5 GB`
- en: Enter Task CPU `0.25 CPU`
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入任务CPU `0.25 CPU`
- en: 'Click on Add Container:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击添加容器：
- en: Enter Container name as `lemon-mart`
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器名称输入为`lemon-mart`
- en: For Image, paste the image repo URI from earlier, but append the `:latest` tag
    to it so that it always pulls the latest image in the repository, such as `000000000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart:latest`
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Image，粘贴之前的镜像存储库URI，但是在末尾添加`:latest`标签，以便它始终拉取存储库中的最新镜像，例如`000000000000.dkr.ecr.us-east-1.amazonaws.com/lemon-mart:latest`
- en: Set a Soft limit of `128 MB` for NGINX and `256 MB` for Node.js
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为NGINX设置`128 MB`的软限制，为Node.js设置`256 MB`
- en: Under Port mappings, specify Container port as `80` for NGINX and `3000` for
    Node.js
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在端口映射下，指定NGINX的容器端口为`80`，Node.js的端口为`3000`
- en: Accept the remaining defaults
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受其余默认值
- en: 'Click on Add; this is how your task definition will look before creating it:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击添加；这是在创建之前查看任务定义的方式：
- en: '![](Images/19d28a70-feb5-4322-972c-4b458cba7888.jpg)AWS ECS Task Definition'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/19d28a70-feb5-4322-972c-4b458cba7888.jpg)AWS ECS 任务定义'
- en: Click on Create to finish setup
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”完成设置
- en: View your new Task Definition under Elastic Container Service | Task Definitions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在Elastic Container Service | 任务定义下查看您的新任务定义。
- en: Note that the default settings will enable AWS CloudWatch logging, which is
    a way you can retroactively access console logs of your container instance. In
    this example, a CloudWatch Log Group named `/ecs/lemon-mart-task` will be created.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认设置将启用AWS CloudWatch日志记录，这是您可以追溯访问容器实例控制台日志的一种方式。在这个例子中，将创建一个名为“/ecs/lemon-mart-task”的CloudWatch日志组。
- en: View your new Log Group under Cloud Watch | Logs.If you're adding a container
    that needs to persist data, the task definition allows you to define a volume
    and mount a folder to your Docker container. I've published a guide a for configuring
    AWS **Elastic File System** (**EFS**) with your ECS Container at [bit.ly/mount-aws-efs-ecs-container](http://bit.ly/mount-aws-efs-ecs-container).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cloud Watch | 日志下查看您的新日志组。如果要添加需要持久数据的容器，任务定义允许您定义一个卷并挂载一个文件夹到您的Docker容器。我已经发布了一个指南，用于在ECS容器中配置AWS弹性文件系统（EFS）[bit.ly/mount-aws-efs-ecs-container](http://bit.ly/mount-aws-efs-ecs-container)。
- en: Creating elastic load balancer
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建弹性负载均衡器
- en: 'In a highly-available deployment, we will want to be running two instances
    of your container, as defined by the task definition we just created, across two
    different **Availability Zones** (**AZs**). For this kind of dynamically scaling
    out and scaling in, we need to configure an **Application Load Balancer** (**ALB**)
    to handle request routing and draining:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在高可用部署中，我们希望根据刚刚创建的任务定义在两个不同的可用区（AZs）上运行两个容器实例。为了实现这种动态扩展和收缩，我们需要配置一个应用负载均衡器（ALB）来处理请求路由和排空：
- en: On a seperate tab, navigate to EC2 | Load Balancers | Create Load Balancer
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个单独的标签页上，导航到EC2 | 负载均衡器 | 创建负载均衡器
- en: Create an Application Load Balancer
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个应用负载均衡器
- en: 'Enter Name `lemon-mart-alb`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称“lemon-mart-alb”：
- en: In order to support SSL traffic under listeners, you can add a new listener
    for HTTPS on port `443`. An SSL setup can be achieved conveniently via AWS services
    and wizards. During the ALB configuration process, AWS offers links to these wizards
    to create your certificates. However, it is an involved process and one that can
    vary depending on your existing domain hosting and SSL certification setup. I
    will be skipping over SSL-related configuration in this book. You can find SSL
    related steps, published on the guide I've published at [bit.ly/setupAWSECSCluster](http://bit.ly/setupAWSECSCluster).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持监听器下的SSL流量，您可以在端口“443”上添加一个新的HTTPS监听器。通过AWS服务和向导，可以方便地实现SSL设置。在ALB配置过程中，AWS提供了链接到这些向导以创建您的证书。然而，这是一个复杂的过程，可以根据您现有的域托管和SSL证书设置而有所不同。在本书中，我将跳过与SSL相关的配置。您可以在我发布的指南中找到与SSL相关的步骤[bit.ly/setupAWSECSCluster](http://bit.ly/setupAWSECSCluster)。
- en: Under Availability Zones, select the VPC that was created for your fargate-cluster
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可用区中，选择为您的fargate-cluster创建的VPC
- en: Select all AZs listed
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有列出的可用区
- en: 'Expand Tags and add a key/value pair to be able to identify the ALB, like ``"App":
    " LemonMart"``'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '展开标签并添加一个键/值对，以便能够识别ALB，比如`"App": "LemonMart"`'
- en: Click on Next
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”
- en: Select Default ELB security policy
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认ELB安全策略
- en: Click on Next
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”
- en: Create a new cluster specific security group, `lemon-mart-sg`, only allowing
    port `80` inbound or `443` if using HTTPS
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的集群特定安全组，“lemon-mart-sg”，只允许端口“80”入站，如果使用HTTPS，则允许端口“443”
- en: When creating your Cluster Service in the next section, ensure that the security
    group created here is the one selected during service creation. Otherwise, your
    ALB won't be able to connect to your instances.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节创建集群服务时，请确保此处创建的安全组是在服务创建期间选择的安全组。否则，您的ALB将无法连接到您的实例。
- en: Click on Next
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步
- en: Name a new Target group as `lemon-mart-target-group`
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的目标组命名为`lemon-mart-target-group`
- en: Change protocol type from `instance` to `ip`
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将协议类型从`instance`更改为`ip`
- en: Under Health check, keep the default route `/`, if serving a website on HTTP
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在健康检查下，保持默认路由`/`，如果在HTTP上提供网站
- en: Health checks are critical for scaling and deployment operations to work. This
    is the mechanism that AWS can use to check whether an instance has been created
    successfully or not.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 健康检查对于扩展和部署操作至关重要。这是AWS用来检查实例是否已成功创建的机制。
- en: If deploying an API and/or redirecting all HTTP calls to HTTPS, ensure that
    your app defines a custom route that is not redirected to HTTPS. On HTTP server
    GET `/healthCheck` return simple 200 message saying `I'm healthy` and verify that
    this does not redirect to HTTPS. Otherwise, you will go through a lot of pain
    and suffering trying to figure out what's wrong, as all health checks fail and
    deployments inexplicably fail. `duluca/minimal-node-web-server` provides HTTPS
    redirection, along with an HTTP-only `/healthCheck` endpoint out of the box. With
    `duluca/minimal-nginx-web-server`, you will need to provide your own configuration.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果部署API和/或将所有HTTP调用重定向到HTTPS，请确保您的应用程序定义了一个不会被重定向到HTTPS的自定义路由。在HTTP服务器GET `/healthCheck`返回简单的200消息，说`我很健康`，并验证这不会重定向到HTTPS。否则，您将经历很多痛苦和苦难，试图弄清楚问题出在何处，因为所有健康检查都失败，部署也莫名其妙地失败。`duluca/minimal-node-web-server`提供了HTTPS重定向，以及一个开箱即用的仅HTTP的`/healthCheck`端点。使用`duluca/minimal-nginx-web-server`，您将需要提供自己的配置。
- en: Click on Next
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步
- en: Do *not* register any Targets or IP Ranges. ECS Fargate will magically manage
    this for you, if you do so yourself, you will provision a semi broken infrastructure
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*不要*注册任何目标或IP范围。ECS Fargate将神奇地为您管理这一切，如果您自己这样做，您将提供一个半破碎的基础设施。'
- en: 'Click on Next:Review; your ALB settings should look similar to the one shown:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步：审查；您的ALB设置应该与所示的类似：
- en: '![](Images/a2c2bb37-74c7-4c43-b071-da94aa7448c2.png)AWS Application Load Balancer
    Settings'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/a2c2bb37-74c7-4c43-b071-da94aa7448c2.png)AWS应用负载均衡器设置'
- en: Click on Create to finish setup
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建完成设置
- en: You will be using the lemon-mart-alb when creating your Cluster Service in the
    next section.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节创建集群服务时，您将使用lemon-mart-alb。
- en: Creating cluster service
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群服务
- en: 'Now, we will bring it all together by creating a service in our cluster using
    the task definition and the ALB we created:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过使用任务定义和我们创建的ALB在我们的集群中创建一个服务来将所有内容整合在一起：
- en: Navigate to Elastic Container Service
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到弹性容器服务
- en: Click on Clusters | fargate-cluster
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击集群| fargate-cluster
- en: Under Services tab, click on Create
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务选项卡下，点击创建
- en: Select Launch type `Fargate`
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择启动类型`Fargate`
- en: Select the task definition you created earlier
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您之前创建的任务定义
- en: Note that task definitions are versioned, such as `lemon-mart-task:1`. If you
    were to make a change to the task definition, AWS will create `lemon-mart-task:2`.
    You will need to update the service with this new version for your changes to
    take effect.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，任务定义是有版本的，比如`lemon-mart-task:1`。如果您对任务定义进行更改，AWS将创建`lemon-mart-task:2`。您需要使用这个新版本更新服务，以使更改生效。
- en: Enter Service name `lemon-mart-service`
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入服务名称`lemon-mart-service`
- en: Number of tasks `2`
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务数量`2`
- en: Minimum healthy percent `50`
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最小健康百分比`50`
- en: Maximum percent `200`
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最大百分比`200`
- en: Click on Next
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步
- en: Set minimum health percent to 100 for high-availability even during deployment.
    Fargate pricing is based on usage per second, so while deploying your application,
    you will be charged extra for the additional instances, while the old ones are
    being deprovisioned.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 将最小健康百分比设置为100，以确保在部署期间保持高可用性。Fargate的定价是基于每秒的使用量，因此在部署应用程序时，您将额外收费用于额外实例，而旧实例正在被取消配置。
- en: Under Configure network, select the same VPC as your cluster from earlier
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置网络下，选择与之前相同的VPC作为您的集群
- en: Select all subnets that are available; there should be at least two for high-availability
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有可用的子网；至少应该有两个以实现高可用性
- en: Select the security group you created in the previous section—`lemon-mart-sg`
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一节中创建的安全组中选择`lemon-mart-sg`
- en: Select Load Balancer type as Application Load Balancer
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择负载均衡器类型为应用程序负载均衡器
- en: Select the lemon-mart-alb option
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择lemon-mart-alb选项
- en: Add Container port to the ALB, such as `80` or `3000`, by clicking on the Add
    to Load Balancer button
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“添加到负载均衡器”按钮，将容器端口添加到ALB，例如`80`或`3000`
- en: Select the Listener port that you had already defined
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您已经定义的侦听器端口
- en: Select the Target group you had already defined
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您已经定义的目标组
- en: Uncheck Enable service discovery integration
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中“启用服务发现集成”
- en: Click on Next
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“下一步”
- en: If you'd like your instances to scale out and in automatically, when their capacities
    are reach a certain limit, then set Auto Scaling
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您希望您的实例在达到一定限制时自动扩展和缩减，则设置自动扩展
- en: I would recommend skipping the set up of auto scaling during the initial setup
    of your service to make it easier to troubleshoot any potential configuration
    issues. You can come back and set it up later. Automatic task scaling policies
    rely on alarms, such as CPU Utilization. In [Chapter 12](7e85d2ce-9a69-481e-9945-40e59195414c.xhtml),
    *Google Analytics and Advanced Cloud Ops,* in the *Cost Per User in Scalable Environment*
    section, you can read about calculating your optimum target server utilization
    and set your alarms based on this number.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在服务的初始设置期间跳过自动扩展的设置，以便更容易排除任何潜在的配置问题。您可以随后返回并进行设置。自动任务扩展策略依赖于警报，例如CPU利用率。在[第12章](7e85d2ce-9a69-481e-9945-40e59195414c.xhtml)
    *Google Analytics and Advanced Cloud Ops,* 中的*可扩展环境中的每用户成本*部分，您可以了解如何计算您的最佳目标服务器利用率，并根据此数字设置您的警报。
- en: 'Click on Next and review your changes, as illustrated:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“下一步”并审查您的更改，如图所示：
- en: '![](Images/6ebcff07-5980-4e80-9362-66a39efc8715.png)AWS Fargate cluster service
    settings'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/6ebcff07-5980-4e80-9362-66a39efc8715.png)AWS Fargate集群服务设置'
- en: Finally, click on Save to finish setup
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击“保存”完成设置
- en: Observe your new service under Elastic Container Service | Clusters | fargate-cluster
    | lemon-mart-service. Until you publish an image to your container repository,
    your AWS service won't be able to provision an instance, since the health check
    will continually fail. After you publish an image, you will want to ensure that
    there are no errors present in the Events tab for your service.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在Elastic Container Service | Clusters | fargate-cluster | lemon-mart-service下观察您的新服务。在将图像发布到容器存储库之前，您的AWS服务将无法配置实例，因为健康检查将不断失败。发布图像后，您需要确保服务的事件选项卡中没有错误。
- en: AWS is a complicated beast and with Fargate, you can avoid a lot of complexity.
    However, if you're interested in setting up your own ECS cluster using your own
    Ec2 instances, you can get significant discounts with 1-3 year reserved instances.
    I have a 75+ setup guide available at [bit.ly/setupAWSECSCluster](http://bit.ly/setupAWSECSCluster).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: AWS是一个复杂的系统，使用Fargate可以避免很多复杂性。但是，如果您有兴趣使用自己的Ec2实例设置自己的ECS集群，您可以获得1-3年预留实例的重大折扣。我有一个75+设置指南可在[bit.ly/setupAWSECSCluster](http://bit.ly/setupAWSECSCluster)上获得。
- en: We have executed a lot of steps manually to create our Cluster. AWS CloudFormation
    resolves this issue by offering configuration templates that you can customize
    to your needs or script your own templates from scratch. If you would like to
    get serious about AWS, this kind of code-as-infrastructure setup is definitely
    the way to go.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经手动执行了很多步骤来创建我们的集群。AWS CloudFormation通过提供配置模板来解决这个问题，您可以根据自己的需求进行自定义，或者从头开始编写自己的模板脚本。如果您想认真对待AWS，这种代码即基础架构设置绝对是正确的方式。
- en: For production deployments, ensure that your configuration is defined by a CloudFormation
    template, so it can be easily reprovisioned, not if, but when a deployment related
    faux pas occurs.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产部署，请确保您的配置由CloudFormation模板定义，这样它就可以很容易地重新配置，而不是在部署相关的失误发生时。
- en: Configuring the DNS
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置DNS
- en: 'If you use AWS Route 53 to manage your domain, it is easy to assign a domain
    or a subdomain to an ALB:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用AWS Route 53来管理您的域名，很容易将域名或子域分配给ALB：
- en: Navigate to Route 53 | Hosted Zones
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Route 53 | 托管区域
- en: Select your domain, like `thejavascriptpromise.com`
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的域名，如`thejavascriptpromise.com`
- en: Click on Create record set
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建记录集”
- en: Enter Name as `lemonmart`
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名称输入为“lemonmart”
- en: Set Alias to `yes`
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将别名设置为“是”
- en: Select the lemon-mart-alb from the load balancer list
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从负载均衡器列表中选择lemon-mart-alb
- en: Click on Create to finish setup
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”完成设置
- en: '![](Images/f1b4f3fc-7f27-4687-ab90-4e641b544aa1.png)Route 53 - Create record
    set'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/f1b4f3fc-7f27-4687-ab90-4e641b544aa1.png)Route 53 - 创建记录集'
- en: Now, your site will be reachable on the subdomain you just defined, for example `http://lemonmart.thejavascriptpromise.com`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的站点将可以通过您刚刚定义的子域访问，例如`http://lemonmart.thejavascriptpromise.com`。
- en: If don't use Route 53, don't panic. On your domain provider's website, edit
    the `Zone` file to create an `A` record to the ELB's DNS address and you're done.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用Route 53，请不要惊慌。在您的域名提供商的网站上，编辑“区域”文件以创建一个“A”记录到ELB的DNS地址，然后您就完成了。
- en: Getting the DNS Name
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取DNS名称
- en: 'In order to get your load balancers'' DNS address, perform these steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取负载均衡器的DNS地址，请执行以下步骤：
- en: Navigate to EC2 | Load Balancers
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到EC2 | 负载均衡器
- en: Select the lemon-mart-alb
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择lemon-mart-alb
- en: 'In the Description tab note the DNS name; consider this example:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“描述”选项卡中注意DNS名称；请参考以下示例：
- en: '[PRE5]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Prep Angular app
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备Angular应用
- en: This section presumes that you have set up Docker and `npm Scripts for Docker`as
    detailed in [Chapter 3](4e68114e-68b7-4fe6-a853-81347e981667.xhtml)*, Prepare
    Angular App for Production Release*. You can get the latest version of these scripts
    at [bit.ly/npmScriptsForDocker](http://bit.ly/npmScriptsForDocker).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假定您已经按照[第3章](4e68114e-68b7-4fe6-a853-81347e981667.xhtml)中详细介绍的设置了Docker和“用于Docker的npm脚本”。您可以在[bit.ly/npmScriptsForDocker](http://bit.ly/npmScriptsForDocker)获取这些脚本的最新版本。
- en: 'Implement an optimized `Dockerfile`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 实现优化的“Dockerfile”：
- en: '[PRE6]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that if you''re using `npm Scripts for Docker`, update the internal image
    port from `3000` to `80`, as shown:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您正在使用“用于Docker的npm脚本”，请将内部镜像端口从“3000”更新为“80”，如下所示：
- en: '[PRE7]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding npm Scripts for AWS
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用于AWS的npm脚本
- en: 'Just like `npm Scripts for Docker`, I have developed a set of scripts, called `npm
    Scripts for AWS`, that work on Windows 10 and macOS. These scripts will allow
    you to upload and release your Docker images in spectacular, no-downtime, blue-green
    fashion. You can get the latest version of these scripts at [bit.ly/npmScriptsForAWS](http://bit.ly/npmScriptsForAWS):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 就像“用于Docker的npm脚本”一样，我开发了一组脚本，称为“用于AWS的npm脚本”，可以在Windows 10和macOS上运行。这些脚本将允许您以惊人的、无停机的蓝绿色方式上传和发布您的Docker镜像。您可以在[bit.ly/npmScriptsForAWS](http://bit.ly/npmScriptsForAWS)获取这些脚本的最新版本：
- en: Ensure that [bit.ly/npmScriptsForDocker](http://bit.ly/npmScriptsForDocker)
    are set up on your project
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在您的项目上设置了[bit.ly/npmScriptsForDocker](http://bit.ly/npmScriptsForDocker)
- en: 'Create a `.env` file and set `AWS_ACCESS_KEY_ID` and  `AWS_SECRET_ACCESS_KEY`:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.env`文件并设置`AWS_ACCESS_KEY_ID`和`AWS_SECRET_ACCESS_KEY`：
- en: '[PRE8]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Ensure that your `.env` file is in your `.gitignore` file to protect your secrets
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的`.env`文件在您的`.gitignore`文件中，以保护您的秘密信息。
- en: 'Install or upgrade to latest AWS CLI:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装或升级到最新的AWS CLI：
- en: On macOS `brew install awscli`
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上`brew install awscli`
- en: On Windows ``choco install awscli``
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上``choco install awscli``
- en: 'Log in to AWS CLI with your credentials:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的凭据登录到AWS CLI：
- en: Run `aws configure`
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`aws configure`
- en: You'll need your Access Key ID and Secret Access Key from when you configured
    your IAM account
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从配置IAM帐户时获取您的访问密钥ID和秘密访问密钥
- en: Set Default region name like `us-east-1`
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置默认区域名称为`us-east-1`
- en: 'Update `package.json` to add a new `config` property with the following configuration
    properties:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`package.json`，添加一个新的`config`属性，具有以下配置属性：
- en: '[PRE9]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ensure that you update `package.json` from when you configured `npm Scripts
    for Docker` so that the `imageRepo` property has the address of your new ECS repository.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您更新了`package.json`，从您配置`npm Scripts for Docker`时，`imageRepo`属性中有您新的ECS存储库的地址。
- en: 'Add AWS `scripts` to `package.json`, as illustrated:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`中添加AWS `scripts`，如下所示：
- en: '[PRE10]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`npm run aws:login` calls platform-specific commands that automate an otherwise
    multi-step action to get a Docker login command from the AWS CLI tool, as shown:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run aws:login`调用特定于平台的命令，自动执行从AWS CLI工具获取Docker登录命令的多步操作，如下所示：'
- en: '[PRE11]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You would first execute `aws ecr get-login` and then copy-paste the resulting `docker
    login` command and execute it so that your local Docker instance is pointed to
    AWS ECR:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先要执行`aws ecr get-login`，然后复制粘贴生成的`docker login`命令并执行它，以便您的本地Docker实例指向AWS
    ECR：
- en: '[PRE12]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`npm run aws:deploy` pulls a Docker container that itself executes blue-green
    deployment, using the parameters you have provided using the `aws ecr` commands.
    The details of how this works are beyond the scope of this book. To see more examples
    using native `aws ecr` commands, refer to the `aws-samples` repository at [github.com/aws-samples/ecs-blue-green-deployment](https://github.com/aws-samples/ecs-blue-green-deployment).'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run aws:deploy`拉取一个Docker容器，它本身执行蓝绿部署，使用您使用`aws ecr`命令提供的参数。这个工作原理的细节超出了本书的范围。要查看更多使用原生`aws
    ecr`命令的示例，请参考`aws-samples`存储库，网址为[github.com/aws-samples/ecs-blue-green-deployment](https://github.com/aws-samples/ecs-blue-green-deployment)。'
- en: 'Note that the `duluca/ecs-deploy-fargate` blue-green deployment script is a
    fork of the original `silintl/ecs-deploy` image modified to support AWS ECS Fargate
    using PR `https://github.com/silinternational/ecs-deploy/pull/129`. Once `silintl/ecs-deploy`
    merges this change, I recommend using `silintl/ecs-deploy` for your blue-green
    deployments:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`duluca/ecs-deploy-fargate`蓝绿部署脚本是原始`silintl/ecs-deploy`镜像的一个分支，经过修改以支持使用PR
    `https://github.com/silinternational/ecs-deploy/pull/129`进行AWS ECS Fargate。一旦`silintl/ecs-deploy`合并了这一更改，我建议您在蓝绿部署中使用`silintl/ecs-deploy`：
- en: '[PRE13]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, `npm run aws:release` simply runs `aws:login`, `docker:publish` from
    `npm Scripts for Docker` and `aws:deploy` commands in the right order.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`npm run aws:release`简单地按正确顺序运行`aws:login`，`docker:publish`从`npm Scripts
    for Docker`和`aws:deploy`命令。
- en: Publish
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布
- en: 'Your project is configured to be deployed on AWS. You mostly need to use two
    of the commands we created to build and publish an image:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目已配置为在AWS上部署。您主要需要使用我们创建的两个命令来构建和发布图像：
- en: 'Execute `docker:debug` to test, build, tag, run, tail, and launch your app
    in a browser to test the image:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`docker:debug`来测试、构建、标记、运行、跟踪并在浏览器中启动您的应用程序以测试图像：
- en: '[PRE14]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Execute `aws:release` to configure Docker login with AWS, publish your latest
    image build, and release it on ECS:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`aws:release`以配置Docker登录到AWS，发布您的最新图像构建，并在ECS上发布它：
- en: '[PRE15]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Verify that your tasks are up and running at the Service level:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的任务是否在服务级别上运行：
- en: '![](Images/0a2d364f-6765-47de-ae97-71986360135a.png)AWS ECS ServiceEnsure that
    running count and desired count are the same.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/0a2d364f-6765-47de-ae97-71986360135a.png)AWS ECS服务确保运行计数和期望计数相同。'
- en: 'Verify that your instances are running at the Task level:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您的实例是否在任务级别上运行：
- en: '![](Images/e562d999-718c-45a3-9e2d-cbf41f192aab.png)AWS ECS task instance'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/e562d999-718c-45a3-9e2d-cbf41f192aab.png)AWS ECS任务实例'
- en: Note the Public IP address and navigate to it; for example, `http://54.164.92.137` and
    you should see your application or LemonMart running.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意公共IP地址并导航到它；例如，`http://54.164.92.137`，您应该看到您的应用程序或LemonMart正在运行。
- en: Verify that the Load Balancer setup is correct at the DNS level.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证负载均衡器设置在DNS级别上是否正确。
- en: 'Navigate to the ALB DNS address, for example `http://lemon-mart-alb-1871778644.us-east-1.elb.amazonaws.com`,
    and confirm that the app renders, as follows:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到ALB DNS地址，例如`http://lemon-mart-alb-1871778644.us-east-1.elb.amazonaws.com`，并确认应用程序呈现如下：
- en: '![](Images/490c9bc1-8041-4500-a606-eab6e8ce98fe.png)LemonMart running on AWS
    Fargate'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/490c9bc1-8041-4500-a606-eab6e8ce98fe.png)在AWS Fargate上运行的LemonMart'
- en: Et voilà! Your site should be up and running.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Et voilà！您的网站应该已经上线并运行。
- en: 'In subsequent releases, following your first, you will be able to observe blue-green
    deployment in action, as shown:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的发布中，您将能够观察蓝绿部署的实际操作，如下所示：
- en: '![](Images/cf3d456c-09af-4193-94a8-a38efc501f23.png)AWS Service during Blue-Green
    Deployment'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/cf3d456c-09af-4193-94a8-a38efc501f23.png)蓝绿部署期间的AWS服务'
- en: There are two tasks running, with two new ones being provisioned. While the
    new tasks are being verified, running count will rise up to four tasks. After
    the new tasks are verified and the connections from old ones drained, the running
    count will return to two.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个正在运行的任务，正在提供两个新任务。在验证新任务的同时，运行计数将上升到四个任务。在验证新任务并且从旧任务中排出连接之后，运行计数将返回到两个。
- en: You can automate your deployments by configuring CircleCI with your AWS credentials,
    using a container that has the `awscli` tool installed and running `npm Scripts
    for AWS`. With this technique, you can achieve Continuous Deployment to a staging
    environment or Continuous Delivery to a production environment.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过配置CircleCI与您的AWS凭据，使用安装了`awscli`工具并运行`npm Scripts for AWS`的容器，来自动化您的部署。通过这种技术，您可以实现对暂存环境的持续部署或对生产环境的持续交付。
- en: This is all great, but how much does a basic highly-available configuration
    cost? Let's examine that in the next section.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很好，但是一个基本的高可用配置会花费多少？让我们在下一节中进行检查。
- en: AWS Billing
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS计费
- en: 'My highly-available deployment of LemonMart on AWS Fargate cost roughly $45
    a month. Here''s the breakdown:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我的在AWS Fargate上高可用的LemonMart部署大约每月花费大约45美元。以下是详细信息：
- en: '| **Description** | **     Cost** |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **     成本** |'
- en: '| Amazon Simple Storage Service (S3) |          $0.01 |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊简单存储服务（S3） |          $0.01 |'
- en: '| AWS Data Transfer |          $0.02 |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| AWS数据传输 |          $0.02 |'
- en: '| Amazon CloudWatch |          $0.00 |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊云监控 |          $0.00 |'
- en: '| Amazon EC2 Container Service (ECS Fargate) |        $27.35 |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊EC2容器服务（ECS Fargate） |        $27.35 |'
- en: '| Amazon Elastic Compute Cloud(EC2 Load Balancer instances) |        $16.21
    |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊弹性计算云（EC2负载均衡器实例） |        $16.21 |'
- en: '| Amazon EC2 Container Registry (ECR) |          $0.01 |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊EC2容器注册表（ECR） |          $0.01 |'
- en: '| Amazon Route 53 |          $0.50 |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 亚马逊路由53 |          $0.50 |'
- en: '| **Total** | **       $44.10** |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| **总计** | **       $44.10** |'
- en: Note that the bill is very detailed, but it does accurate all the AWS services
    we end up using. The major costs are running two instances of our web server on
    **EC2 Container Service** (**ECS**) and running load balances on **Elastic Compute
    Cloud** (**EC2**). Objectively speaking, $45/month may seem like a lot of money
    to host one web application. It is possible to get a lot more for your money if
    you're willing to set up your own cluster with dedicated EC2 servers where you
    can pay in 1 or 3-year increments and get cost savings of up to 50%. A similar,
    highly available deployment with two-instances on Heroku starts at $50/month with
    other rich features you can get access to. Similarly, two-instances on Zeit Now
    will cost $30/month. Note that both Heroku and Zeit Now don't give you access
    to physically diverse availability zones. Digital Ocean, on the other hands, allows
    you to provision servers in different data centers; however, you must code your
    own infrastructure. For $15/month, you can set up your own highly-available cluster
    across three servers and be able to host multiple sites on it.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，账单非常详细，但确实准确列出了我们最终使用的所有AWS服务。主要成本是在**EC2容器服务**（**ECS**）上运行我们的Web服务器的两个实例，以及在**弹性计算云**（**EC2**）上运行负载均衡器。客观地说，每月45美元似乎是托管一个Web应用程序的很多钱。如果愿意自己设置专用EC2服务器的集群，并且可以选择1年或3年的付款周期，最多可以节省50%的费用。在Heroku上，类似的高可用部署以每月50美元起步，并提供其他丰富的功能。同样，在Zeit
    Now上，两个实例的成本为每月30美元。请注意，Heroku和Zeit Now都不提供对物理上不同可用区的访问。另一方面，Digital Ocean允许您在不同的数据中心中设置服务器；但是，您必须编写自己的基础设施。每月15美元，您可以在三台服务器上设置自己的高可用集群，并能够在上面托管多个站点。
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the nuances and various security considerations
    in properly protecting your AWS account. We went over the concepts of right-sizing
    your infrastructure. You conducted simple load testing in an isolated manner to
    find out relative differences in performance between two web servers. Armed with
    an optimized web server, you configured an AWS ECS Fargate cluster to achieve
    a highly-available cloud infrastructure. Using npm Scripts for AWS, you learned
    how to script repeatable and reliable no-downtime Blue-Green deployments. Finally,
    you became aware of the basic costs of running your infrastructure on AWS and
    other cloud providers such as Heroku, Zeit Now, and Digital Ocean.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了在正确保护您的AWS账户时的微妙之处和各种安全考虑因素。我们讨论了调整基础设施的概念。您以隔离的方式进行了简单的负载测试，以找出两个Web服务器之间性能的相对差异。拥有优化的Web服务器后，您配置了AWS
    ECS Fargate集群，以实现高可用的云基础设施。使用AWS的npm脚本，您学会了如何编写可重复且可靠的无停机蓝绿部署。最后，您了解了在AWS和其他云提供商（如Heroku、Zeit
    Now和Digital Ocean）上运行基础设施的基本成本。
- en: In the next and final chapter, we will complete our coverage of the breadth
    of topics that a full-stack web developer should know about when deploying applications
    on the web. We will add Google Analytics to LemonMart to measure user behavior,
    leverage advanced load testing to understand the financial impact of deploying
    a well-configured scalable infrastructure, and measure actual use of important
    application features with custom analytics events.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将完成对全栈Web开发人员在部署Web应用程序时应该了解的各种主题的广度的覆盖。我们将向LemonMart添加Google Analytics以测量用户行为，利用高级负载测试来了解部署良好配置的可扩展基础设施的财务影响，并使用自定义分析事件来测量重要应用程序功能的实际使用情况。
