- en: Extending the Marketplace for Orders and Payments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展MERN Marketplace以支持订单和支付
- en: Processing payments from customers when they place orders and allowing sellers
    to manage these orders are key aspects of e-commerce applications. In this chapter,
    we'll extend the online marketplace we built in the previous chapter by implementing
    capabilities for buyers to add products to a shopping cart, a checkout, and place
    orders, and for sellers to manage these orders and have payments processed from
    the marketplace application. Once you've gone through this chapter and added these
    features, besides extending the marketplace application with advanced features,
    you will be able to utilize browser storage, process payments using Stripe, and integrate
    other technologies into this stack.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户下单时处理客户支付，并允许卖家管理这些订单是电子商务应用的关键方面。在本章中，我们将通过实现买家将产品添加到购物车、结账和下单的能力，以及卖家管理这些订单和通过市场应用处理支付的能力，扩展我们在上一章中构建的在线市场。一旦你完成本章并添加了这些功能，除了扩展市场应用的高级功能外，你还将能够利用浏览器存储、使用Stripe处理支付，并将其他技术集成到这个堆栈中。
- en: 'In this chapter, we will extend the online marketplace by covering the following
    topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题扩展在线市场：
- en: Introducing a cart, payments, and orders in the MERN Marketplace
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中引入购物车、支付和订单
- en: Implementing a shopping cart
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现购物车
- en: Using Stripe for payments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Stripe进行支付
- en: Integrating the checkout process
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成结账流程
- en: Creating a new order
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新订单
- en: Listing orders for each shop
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出每个商店的订单
- en: Viewing single-order details
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看单个订单详情
- en: Introducing cart, payments, and orders in the MERN Marketplace
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中引入购物车、支付和订单
- en: The MERN Marketplace application we developed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*, has very simple features and is missing
    core e-commerce functionality. In this chapter, we will extend this marketplace
    application so that it includes a shopping cart feature for the buyer, Stripe
    integration for processing credit card payments, and a basic order-management
    flow for the seller. The implementations that follow are kept simple to serve
    as starting points for developing more complex versions of these features for
    your own applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第7章](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml)，《使用在线市场锻炼MERN技能》中开发的MERN
    Marketplace应用具有非常简单的功能，缺少核心的电子商务功能。在本章中，我们将扩展这个市场应用，使其包括买家的购物车功能、处理信用卡支付的Stripe集成以及卖家的基本订单管理流程。以下实现保持简单，作为开发您自己应用中这些功能的更复杂版本的起点。
- en: The code for the complete MERN Marketplace application is available on GitHub
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter. To get the code for Stripe payments working, you
    will need to create your own Stripe account and update the `config/config.js` file
    with your testing values for the Stripe API key, secret key, and Stripe Connect
    client ID.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的MERN Marketplace应用程序代码可在GitHub上找到：[https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace)。你可以克隆此代码，并在阅读本章其余部分的代码解释时运行应用程序。要使Stripe支付代码工作，你需要创建自己的Stripe账户，并将`config/config.js`文件中的Stripe
    API密钥、密钥和Stripe Connect客户端ID更新为你的测试值。
- en: 'The following component tree diagram shows the custom components that make
    up the MERN Marketplace frontend, including the components for the shopping cart,
    payments, and order-related features that will be implemented in the rest of this
    chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的组件树图显示了构成MERN Marketplace前端的自定义组件，包括本章其余部分将实现的购物车、支付和与订单相关的功能：
- en: '![](img/385630b6-003e-4ee0-97a9-b4d535d18400.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/385630b6-003e-4ee0-97a9-b4d535d18400.png)'
- en: The features that will be discussed in this chapter modify some of the existing
    components, such as `Profile`, `MyShops`, `Products`, and `Suggestions`, and also
    add new components, such as `AddToCart`, `MyOrders`, `Cart`, and `ShopOrders`.
    In the next section, we will begin extending the online marketplace with the implementation
    of the shopping cart.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的功能将修改一些现有组件，例如`Profile`、`MyShops`、`Products`和`Suggestions`，并添加新的组件，例如`AddToCart`、`MyOrders`、`Cart`和`ShopOrders`。在下一节中，我们将开始通过实现购物车来扩展在线市场。
- en: Implementing a shopping cart
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现购物车
- en: Visitors to the MERN Marketplace can add products they wish to buy to a shopping
    cart by clicking the add to cart button on each product. A cart icon on the menu
    will indicate the number of products that have already been added to their cart
    as the user continues to browse through the marketplace. They can also update
    the cart's contents and begin the checkout process by opening the cart view. But
    to complete the checkout process and place an order, users will be required to
    sign in.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MERN市场的访客可以通过点击每个产品的“添加到购物车”按钮将他们想要购买的产品添加到购物车中。菜单上的购物车图标将指示用户在浏览市场时已添加到购物车中的产品数量。他们还可以通过打开购物车视图来更新购物车的内容并开始结账过程。但为了完成结账过程并下订单，用户将需要登录。
- en: The shopping cart is mainly a frontend feature, so the cart details will be
    stored locally on the client side until the user places the order at checkout.
    To implement the shopping cart features, we will set up helper methods in `client/cart/cart-helper.js`
    that will help manipulate the cart details from relevant React components.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车主要是前端功能，因此购物车详情将存储在客户端本地，直到用户在结账时下订单。为了实现购物车功能，我们将在`client/cart/cart-helper.js`中设置辅助方法，这将帮助从相关的React组件中操作购物车详情。
- en: In the following sections, we will look at how to add products to the cart,
    update the menu to indicate the status of the cart, and implement the cart view
    where users can see and modify all the items that have already been added to their
    cart before checking out.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下几节中，我们将探讨如何将产品添加到购物车，更新菜单以显示购物车的状态，并实现购物车视图，用户可以在结账前查看和修改已添加到购物车中的所有项目。
- en: Adding to the cart
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加到购物车
- en: 'While browsing the products in the marketplace, users will see the option on
    each product to add it to their cart. This option will be implemented with a React
    component named `AddToCart`. This `AddToCart` component in `client/Cart/AddToCart.js` takes
    a `product` object and a CSS style object as props from the parent component it
    is added to. For example, in the MERN Marketplace, it is added to a Product view
    as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当在市场上浏览产品时，用户将看到在每个产品上添加到他们购物车的选项。这个选项将通过名为`AddToCart`的React组件实现。这个`AddToCart`组件在`client/Cart/AddToCart.js`中从它添加到的父组件接收`product`对象和CSS样式对象作为props。例如，在MERN市场中，它被添加到产品视图如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `AddToCart` component, when rendered, displays a cart icon button depending
    on whether the passed item is in stock or not, as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当`AddToCart`组件渲染时，会根据传递的项目是否有库存显示购物车图标按钮，如下面的截图所示：
- en: '![](img/f65b6d5b-f1d7-48bb-bdb1-16936df0a3b7.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f65b6d5b-f1d7-48bb-bdb1-16936df0a3b7.png)'
- en: For example, if the item quantity is more than `0`, `AddCartIcon` is displayed;
    otherwise, `DisabledCartIcon` is rendered. The appearance of the icon depends
    on the CSS style object that's passed in the props. The code to render these variations
    of the `AddToCart` button is as follows.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果项目数量大于`0`，则显示`AddCartIcon`；否则，渲染`DisabledCartIcon`。图标的显示取决于传递给props的CSS样式对象。渲染`AddToCart`按钮这些变体的代码如下。
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/AddToCart.js`:'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `AddCartIcon` button calls an `addToCart` method when it is clicked. The `addToCart` method
    is defined as follows.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击`AddCartIcon`按钮时，会调用`addToCart`方法。`addToCart`方法定义如下。
- en: '`mern-marketplace/client/cart/AddToCart.js`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/AddToCart.js`:'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `addToCart` method invokes the `addItem` helper method defined in `cart-helper.js`. This `addItem` method takes
    the `product` item and a state-updating `callback` function as parameters and
    stores the updated cart details in `localStorage` and executes the callback that
    was passed, as shown in the following code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`addToCart`方法调用在`cart-helper.js`中定义的`addItem`辅助方法。这个`addItem`方法接受`product`项目和状态更新`callback`函数作为参数，并将更新后的购物车详情存储在`localStorage`中，并执行传递的回调，如下面的代码所示。'
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`:'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The cart data stored in `localStorage` contains an array of cart item objects,
    each containing product details, the quantity of the product that was added to
    the cart (which is set to `1` by default), and the ID of the shop the product
    belongs to. As products get added to the cart and stored in `localStorage`, we
    will also display the updated item count on the navigation menu, as discussed
    in the next section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在`localStorage`中的购物车数据包含一个购物车项目对象数组，每个对象包含产品详情、添加到购物车中的产品数量（默认设置为`1`）以及产品所属商店的ID。当产品被添加到购物车并存储在`localStorage`中时，我们还将如下一节所述在导航菜单上显示更新的项目计数。
- en: Cart icon in the menu
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单中的购物车图标
- en: 'In the menu, we will add a link to the cart view, as well as a badge that displays
    the length of the cart array stored in `localStorage` in order to visually inform
    the user of how many items are currently in their cart. The rendered link and
    badge will look as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单中，我们将添加一个链接到购物车视图，以及一个显示存储在`localStorage`中的购物车数组长度的徽章，以便视觉上告知用户当前购物车中有多少个项目。渲染的链接和徽章将如下所示：
- en: '![](img/597c8a98-0d51-4457-a6ae-a77fd414a97d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/597c8a98-0d51-4457-a6ae-a77fd414a97d.png)'
- en: 'The link for the cart will be similar to the other links in the menu, with
    the exception of the Material-UI `Badge` component, which displays the cart length.
    It will be added as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车链接将与菜单中的其他链接类似，但有一个例外，即Material-UI `Badge`组件，它显示购物车长度。它将按如下方式添加：
- en: '`mern-marketplace/client/core/Menu.js`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/core/Menu.js`:'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The cart length is returned by the `itemTotal` helper method in `cart-helper.js`,
    which reads the `cart` array stored in `localStorage` and returns the length of
    the array. The `itemTotal` method is defined as follows.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车长度由`cart-helper.js`中的`itemTotal`辅助方法返回，该方法读取存储在`localStorage`中的`cart`数组并返回数组的长度。`itemTotal`方法定义如下。
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`:'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Clicking on this cart link, with the item total displayed on the menu, will
    take the user to the cart view and reveal details of the items that have already
    been added to the cart. In the next section, we will discuss the implementation
    of this cart view.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此购物车链接，菜单上显示项目总数，将用户带到购物车视图并显示已添加到购物车的项目详情。在下一节中，我们将讨论此购物车视图的实现。
- en: The cart view
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车视图
- en: The cart view will contain the cart items and checkout details. But initially,
    only the cart details will be displayed until the user is ready to check out.
    The code to render this cart view will be added as follows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车视图将包含购物车项目和结账详情。但最初，只有购物车详情将被显示，直到用户准备好结账。渲染此购物车视图的代码将按如下方式添加。
- en: '`mern-marketplace/client/cart/Cart.js`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Cart.js`:'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `CartItems` component, which displays the items in the cart, is passed a
    `checkout` Boolean value and a state update method for this checkout value so
    that the `Checkout` component and its options can be rendered conditionally based
    on user interaction.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 显示购物车项目的`CartItems`组件，它传递一个`checkout`布尔值和用于此结账值的州更新方法，以便根据用户交互有条件地渲染`Checkout`组件及其选项。
- en: The `showCheckout` method to update the `checkout` value is defined as follows.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 用于更新`checkout`值的`showCheckout`方法定义如下。
- en: '`mern-marketplace/client/cart/Cart.js`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Cart.js`:'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Cart` component will be accessed at the `/cart` route, so we need to add
    a `Route` to the `MainRouter` component as follows.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cart`组件将在`/cart`路由下访问，因此我们需要将`Route`添加到`MainRouter`组件中，如下所示。'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is the link we use on the Menu to redirect the user to the cart view, which
    contains cart details. In the next section, we will look at the implementation
    of the `CartItems` component, which will render details of each item in the cart
    and allow modifications.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在菜单中使用的链接，用于将用户重定向到包含购物车详情的购物车视图。在下一节中，我们将查看`CartItems`组件的实现，该组件将渲染购物车中每个项目的详情并允许修改。
- en: The CartItems component
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`CartItems`组件'
- en: 'The `CartItems` component will allow the user to view and update the items
    currently in their cart. It will also give them the option to start the checkout
    process if they are signed in, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`CartItems`组件将允许用户查看和更新他们购物车中的项目。它还将给他们提供选项，如果他们已登录，则可以开始结账过程，如下面的截图所示：'
- en: '![](img/8167e3f4-f85d-4fab-8224-314d9b507a28.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8167e3f4-f85d-4fab-8224-314d9b507a28.png)'
- en: If the cart contains items, the `CartItems` component iterates over the items
    and renders the products in the cart. If no items have been added, the cart view
    just displays a message stating that the cart is empty. The code for this implementation
    is as follows.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果购物车包含项目，`CartItems` 组件将遍历项目并在购物车中渲染产品。如果没有添加任何项目，购物车视图将只显示一条消息，说明购物车为空。此实现的代码如下。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For each product item, we show the details of the product and an editable quantity
    text field, along with a remove item option. Finally, we show the total price
    of the items in the cart and the option to start the checkout operation. In the
    following sections, we will look into the implementations of these cart item display
    and modification options.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个产品项目，我们显示产品的详情和一个可编辑的数量文本字段，以及一个移除项目的选项。最后，我们显示购物车中项目的总价以及开始结账操作的选项。在接下来的章节中，我们将探讨这些购物车项目显示和修改选项的实现。
- en: Retrieving cart details
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索购物车详情
- en: Before the cart item details can be displayed, we need to retrieve the cart
    details stored in `localStorage`. For this purpose, we implement the `getCart`
    helper method in `cart-helper.js`, which retrieves and returns the cart details
    from `localStorage`, as shown in the following code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示购物车项目详情之前，我们需要检索存储在 `localStorage` 中的购物车详情。为此，我们在 `cart-helper.js` 中实现了 `getCart`
    辅助方法，该方法从 `localStorage` 中检索并返回购物车详情，如下面的代码所示。
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`:'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the `CartItems` component, we will retrieve the cart items using the `getCart`
    helper method and set it to the state of the initial value of `cartItems`, as
    shown in the following code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `CartItems` 组件中，我们将使用 `getCart` 辅助方法检索购物车项目，并将其设置为 `cartItems` 的初始状态，如下面的代码所示。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, this `cartItems` array that was retrieved from `localStorage` is iterated
    over using the `map` function to render the details of each item, as shown in
    the following code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `map` 函数遍历从 `localStorage` 中检索到的 `cartItems` 数组，以显示每个项目的详情，如下面的代码所示。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For each rendered cart item, we will also give the user the option to change
    the quantity, as discussed in the next section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个渲染的购物车项目，我们还将提供用户更改数量的选项，如下一节所述。
- en: Modifying quantity
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改数量
- en: Each cart item displayed in the cart view will contain an editable `TextField` that
    will allow the user to update the quantity for each product they are buying, with
    a minimum allowed value of `1`, as shown in the following code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在购物车视图中显示的每个购物车项目都将包含一个可编辑的 `TextField`，允许用户更新他们购买的每个产品的数量，最小允许值为 `1`，如下面的代码所示。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the user updates this value, the `handleChange` method is called to enforce
    the minimum value validation, update the `cartItems` in the state, and update
    the cart in `localStorage` using a helper method. The `handleChange` method is
    defined as follows.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更新此值时，将调用 `handleChange` 方法以执行最小值验证，更新状态中的 `cartItems`，并使用辅助方法更新 `localStorage`
    中的购物车。`handleChange` 方法定义如下。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `updateCart` helper method takes the index of the product being updated
    in the cart array and the new quantity value as parameters and updates the details
    stored in `localStorage`. This `updateCart` helper method is defined as follows.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateCart` 辅助方法接受购物车数组中正在更新的产品的索引和新数量值作为参数，并更新存储在 `localStorage` 中的详情。此 `updateCart`
    辅助方法定义如下。'
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`:'
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Besides updating the item quantity in the cart, users will also have the option
    to remove the item from the cart, as discussed in the next section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在购物车中更新项目数量外，用户还可以选择从购物车中移除项目，如下一节所述。
- en: Removing items
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除项目
- en: Each item in the cart will have a remove option next to it. This remove item
    option is a button that, when clicked, passes the array index of the item to the
    `removeItem` method so that it can be removed from the array. This button is rendered
    with the following code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车中的每个项目旁边都将有一个移除选项。这个移除项目选项是一个按钮，当点击时，将传递项目的数组索引到 `removeItem` 方法，以便可以从数组中移除。此按钮的渲染代码如下。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `removeItem` click handler method uses the `removeItem` helper method to
    remove the item from the cart in `localStorage`, then updates the `cartItems`
    in the state. This method also checks whether the cart has been emptied so that
    checkout can be hidden by using the `setCheckout` function passed as a prop from
    the `Cart` component. The `removeItem` click handler method is defined as follows.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeItem`点击处理方法使用`removeItem`辅助方法从`localStorage`中的购物车移除项目，然后更新状态中的`cartItems`。此方法还检查购物车是否已清空，以便可以使用从`Cart`组件传递的属性作为`setCheckout`函数隐藏结账。`removeItem`点击处理方法定义如下。'
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `removeItem` helper method in `cart-helper.js` takes the index of the product
    to be removed from the array, splices it out, and updates `localStorage` before
    returning the updated `cart` array. This `removeItem` helper method is defined
    as follows.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`cart-helper.js`中的`removeItem`辅助方法接受要从中移除的产品索引，将其从数组中移除，并在返回更新后的`cart`数组之前更新`localStorage`。此`removeItem`辅助方法定义如下。'
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`:'
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As users modify the items in their cart by either changing the quantity or removing
    an item, they will also see the updated total price of all the items currently
    in the cart, as discussed in the next section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过更改数量或移除项目来修改购物车中的项目时，他们也将看到当前购物车中所有项目的更新总价，如下一节所述。
- en: Showing the total price
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示总价
- en: At the bottom of the `CartItems` component, we will display the total price
    of the items in the cart. It will be rendered with the following code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CartItems`组件的底部，我们将显示购物车中项目的总价。它将使用以下代码渲染。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `getTotal` method will calculate the total price while taking the unit price
    and quantity of each item in the `cartItems` array into consideration. This method
    is defined as follows.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTotal`方法将在考虑`cartItems`数组中每个项目的单价和数量时计算总价。此方法定义如下。'
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With this, the users will have an overview of what they are buying and how much
    it will cost before they are ready to check out and place the order. In the next
    section, we will look at how to render the checkout option conditionally, depending
    on the state of the cart and whether the user is signed in.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，用户在准备结账并下订单之前，将能够了解他们要购买的内容及其费用概览。在下一节中，我们将探讨如何根据购物车状态和用户是否已登录有条件地渲染结账选项。
- en: Option to check out
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结账选项
- en: The user will see the option to perform the checkout depending on whether they
    are signed in and whether the checkout has already been opened, as implemented
    in the following code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将根据他们是否已登录以及结账是否已被打开，看到执行结账的选项，如以下代码所示。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When the checkout button is clicked, the `openCheckout` method will use the
    `setCheckout` method passed as a prop to set the checkout value to `true` in the
    `Cart` component. The `openCheckout` method is defined as follows.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击结账按钮时，`openCheckout`方法将使用作为属性传递的`setCheckout`方法将`Cart`组件中的结账值设置为`true`。`openCheckout`方法定义如下。
- en: '`mern-marketplace/client/cart/CartItems.js`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/CartItems.js`:'
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once the checkout value is set to `true` in the Cart view, the `Checkout` component
    will be rendered to allow the user to enter the checkout details and place an
    order.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在购物车视图中将结账值设置为`true`，`Checkout`组件将被渲染，以允许用户输入结账详情并下订单。
- en: This will complete the buying process for a user, who is now able to add items
    to their shopping cart and modify each item until they are ready to checkout.
    But before getting into the implementation of the checkout functionality, which
    will involve gathering and processing payment information, in the next section,
    we will discuss how to use Stripe in our application to add the intended payment-related
    features.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为用户完成购买过程，现在他们能够将项目添加到购物车并修改每个项目，直到他们准备结账。但在讨论结账功能的实现之前，该功能将涉及收集和处理支付信息，在下一节中，我们将讨论如何在我们的应用程序中使用Stripe添加预期的支付相关功能。
- en: Using Stripe for payments
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Stripe进行支付
- en: Payment processing is required across implementations of the checkout, order
    creation, and order management processes. It also involves making updates to both
    the buyer's and seller's user data. Before we delve into the implementations of
    the checkout and order features, we will briefly discuss payment processing options
    and considerations using Stripe and learn how to integrate it in the MERN Marketplace.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在结账、订单创建和订单管理流程的实现中都需要支付处理。这还涉及到对买家和卖家用户数据的更新。在我们深入探讨结账和订单功能的实现之前，我们将简要讨论使用Stripe的支付处理选项和考虑因素，并学习如何在MERN市场中集成它。
- en: Stripe provides an extensive set of tools that are necessary to integrate payments
    in any web application. These tools can be selected and used in different ways,
    depending on the specific type of application and the payment use case being implemented.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Stripe提供了一套广泛的工具，这些工具对于在任何Web应用程序中集成支付都是必要的。这些工具可以根据具体的应用类型和正在实施的支付用例以不同的方式选择和使用。
- en: In the case of the MERN Marketplace setup, the application itself will have
    a platform on Stripe and will expect sellers to have connected Stripe accounts
    on the platform so that the application can charge users who enter their credit
    card details at checkout on behalf of the sellers. In the MERN Marketplace, a
    user can add products from different shops to their shopping cart so that charges
    on their cards will only be created by the application for the specific product
    that was ordered when it is processed by the seller. Additionally, sellers will
    have complete control over the charges that are created on their behalf from their
    own Stripe dashboards. We will demonstrate how to use the tools provided by Stripe
    to get this payment setup working.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN市场设置的情况下，应用程序本身将在Stripe上拥有一个平台，并期望卖家在平台上连接Stripe账户，以便应用程序可以代表卖家向在结账时输入信用卡详情的用户收费。在MERN市场中，用户可以将不同商店的产品添加到购物车中，这样只有在卖家处理订单时，应用程序才会为所订购的具体产品创建卡片上的费用。此外，卖家将能够通过自己的Stripe仪表板完全控制代表他们创建的费用。我们将演示如何使用Stripe提供的工具来使这个支付设置生效。
- en: Stripe provides a complete set of documentation and guidelines for each tool
    and also exposes testing data for accounts and platforms that are set up on Stripe.
    For the purpose of implementing payments in the MERN Marketplace, we will be using
    testing keys and leave it up to you to extend the implementation for live payments.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Stripe为每个工具提供了一套完整的文档和指南，同时也为在Stripe上设置的账户和平台提供了测试数据。为了在MERN市场中实现支付，我们将使用测试密钥，并将其留给您来扩展实现以支持实时支付。
- en: In the following sections, we will discuss how to connect a Stripe account for
    each seller, collect credit card details from the user with Stripe Card Elements,
    use Stripe Customer to record the user's payment information securely, and create a
    charge with Stripe for processing a payment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将讨论如何为每个卖家连接Stripe账户，使用Stripe卡元素从用户那里收集信用卡详情，使用Stripe客户记录用户的支付信息以安全的方式，以及使用Stripe创建费用以处理支付。
- en: Stripe-connected account for each seller
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个卖家提供Stripe连接的账户
- en: To create charges on behalf of sellers, the application will let a user, who
    is a seller, connect their Stripe account to their MERN Marketplace user account.
    In the following sections, we will implement this functionality by updating the
    user model so that it can store Stripe credentials, add the view components to
    allow users to connect to Stripe, and add a backend API to complete Stripe OAuth
    before updating the database with the retrieved credentials from Stripe.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了代表卖家创建费用，应用程序将允许一个卖家用户将他们的Stripe账户连接到他们的MERN市场用户账户。在以下章节中，我们将通过更新用户模型以存储Stripe凭证，添加视图组件以允许用户连接到Stripe，以及添加后端API以在更新数据库之前完成Stripe
    OAuth来实现这一功能。
- en: Updating the user model
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: When a seller connects their Stripe account to the marketplace, we will need
    to store their Stripe credentials with their other user details so that they can
    be used later for payment processing when they sell products. To store the Stripe
    OAuth credentials after a user's Stripe account is successfully connected, we
    will update the user model that we developed in [Chapter 3](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml), *Building
    a Backend with MongoDB, Express, and Node*, with the following field.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家将他们的Stripe账户连接到市场时，我们需要将他们的Stripe凭证与他们其他用户详情一起存储，以便他们在销售产品时可以用于支付处理。为了在用户成功连接他们的Stripe账户后存储Stripe
    OAuth凭证，我们将更新我们在[第3章](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml)，*使用MongoDB、Express和Node构建后端*中开发的用户模型，如下所示的字段。
- en: '`mern-marketplace/server/models/user.model.js`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/user.model.js`:'
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This `stripe_seller` field will store the seller's Stripe account credentials
    that were received from Stripe on authentication. This will be used when a charge
    needs to be processed via Stripe for a product they sold from their shop. Next,
    we will look at the frontend component that will allow the user to connect to
    Stripe from our application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`stripe_seller`字段将存储从Stripe在认证过程中收到的卖家Stripe账户凭证。当需要通过Stripe处理他们从商店销售的产品时的费用时，将使用这些凭证。接下来，我们将查看前端组件，该组件将允许用户从我们的应用程序连接到Stripe。
- en: Button to connect with Stripe
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Stripe的按钮
- en: 'In the user profile page of a seller, if the user has not connected their Stripe
    account yet, we will show a button that will take the user to Stripe to authenticate
    and connect their Stripe account. The Connect with Stripe button will be rendered
    in the Profile view as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在卖家的用户资料页面中，如果用户尚未连接他们的Stripe账户，我们将显示一个按钮，该按钮将用户带到Stripe进行认证并连接他们的Stripe账户。连接到Stripe的按钮将在“资料”视图中如下渲染：
- en: '![](img/c1039f7b-256e-4a54-abc2-b38fd6c4aa5a.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c1039f7b-256e-4a54-abc2-b38fd6c4aa5a.png)'
- en: 'If the user has successfully connected their Stripe account already, we will
    show a disabled STRIPE CONNECTED button instead, as shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已经成功连接了他们的Stripe账户，我们将显示一个禁用的STRIPE CONNECTED按钮，如下面的截图所示：
- en: '![](img/0fba75a1-42fe-436d-991d-a4c9ed08471d.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0fba75a1-42fe-436d-991d-a4c9ed08471d.png)'
- en: The code that's added to the `Profile` component will check whether the user
    is a seller before rendering the Stripe-related button. Then, a second check will
    confirm whether Stripe credentials already exist in the `stripe_seller` field
    for the given user. If Stripe credentials already exist for the user, then the
    disabled `STRIPE CONNECTED` button is shown; otherwise, a link to connect to Stripe
    using their OAuth link is displayed instead, as implemented in the following code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到`Profile`组件中的代码将检查用户是否为卖家，然后再渲染与Stripe相关的按钮。然后，第二个检查将确认给定用户的`stripe_seller`字段中是否已经存在Stripe凭证。如果用户已经存在Stripe凭证，则显示禁用的`STRIPE
    CONNECTED`按钮；否则，将显示一个使用他们的OAuth链接连接到Stripe的链接，如以下代码所示。
- en: '`mern-marketplace/client/user/Profile.js`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/Profile.js`:'
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The OAuth link takes the platform's client ID, which we will set in a `config`
    variable, and other option values as query parameters. This link takes the user
    to Stripe and allows the user to connect an existing Stripe account or create
    a new one. Once Stripe's auth process has completed, it returns to our application
    using a redirect URL set in the platform's Connect settings in the dashboard on
    Stripe. Stripe attaches either an auth code or an error message as query parameters
    to the redirect URL.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth链接包含平台的客户端ID，我们将将其设置在`config`变量中，以及其他选项值作为查询参数。此链接将用户带到Stripe，并允许用户连接现有的Stripe账户或创建一个新的账户。一旦Stripe的认证过程完成，它将使用在Stripe仪表板上的平台连接设置中设置的重定向URL返回到我们的应用程序。Stripe将认证代码或错误消息附加为查询参数到重定向URL。
- en: The MERN Marketplace redirect URI is set to `/seller/stripe/connect`, which
    will render the `StripeConnect` component. We will declare this route as follows.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: MERN Marketplace的重定向URI设置为`/seller/stripe/connect`，这将渲染`StripeConnect`组件。我们将如下声明此路由。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When Stripe redirects the user to this URL, we will render the `StripeConnect`
    component so that it handles Stripe's response to authentication, as discussed
    in the next section.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当Stripe将用户重定向到这个URL时，我们将渲染`StripeConnect`组件，以便它处理Stripe对认证的响应，如下一节所述。
- en: The StripeConnect component
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StripeConnect组件
- en: 'The `StripeConnect` component will basically complete the remaining auth process
    steps with Stripe and render the relevant messages based on whether the Stripe
    connection was successful, as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`StripeConnect` 组件将基本上完成与 Stripe 的剩余授权流程步骤，并根据 Stripe 连接是否成功渲染相关消息，如下面的截图所示：'
- en: '![](img/f3eb9b2b-f1ee-4978-bd5e-601c479c23d7.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3eb9b2b-f1ee-4978-bd5e-601c479c23d7.png)'
- en: When the `StripeConnect` component loads, we will use a `useEffect` hook to
    parse the query parameters attached to the URL from the Stripe redirect, as shown
    in the following code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `StripeConnect` 组件加载时，我们将使用 `useEffect` 钩子解析从 Stripe 重定向附加到 URL 的查询参数，如下面的代码所示。
- en: '`mern-marketplace/client/user/StripeConnect.js`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/StripeConnect.js`:'
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: For parsing, we use the same `query-string` node module that we used previously
    to implement a product search. Then, if the URL `query` parameter contains an
    auth `code` and not an `error`, we make an API call in order to complete the Stripe
    OAuth from our server with the `stripeUpdate` fetch method.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于解析，我们使用之前用于实现产品搜索的相同 `query-string` 节点模块。然后，如果 URL 的 `query` 参数包含授权 `code`
    而不是 `error`，我们将通过 `stripeUpdate` 获取方法在我们的服务器上发起 API 调用来完成 Stripe OAuth。
- en: The `stripeUpdate` fetch method is defined in `api-user.js` and passes the auth
    code retrieved from Stripe to an API we will set up in our server at `'/api/stripe_auth/:userId'`. This `stripeUpdate` fetch
    method is defined as follows.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`stripeUpdate` 获取方法在 `api-user.js` 中定义，并将从 Stripe 检索到的授权码传递到我们将在服务器上设置的 `''/api/stripe_auth/:userId''`
    的 API。此 `stripeUpdate` 获取方法定义如下。'
- en: '`mern-marketplace/client/user/api-user.js`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/api-user.js`:'
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This fetch method is calling a backend API that we have to add on our server
    to complete the OAuth process and save the retrieved credentials to the database.
    We will implement this API in the next section.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此获取方法正在调用我们必须在我们的服务器上添加的后端 API，以完成 OAuth 流程并将检索到的凭证保存到数据库中。我们将在下一节中实现此 API。
- en: The stripe auth update API
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stripe 授权更新 API
- en: Once the Stripe account has been connected, to complete the OAuth process, we
    need to make a POST API call to Stripe OAuth from our server. We need to send
    the previously retrieved auth code to Stripe OAuth with the POST API call and
    receive the credentials to be stored in the seller's user account for processing
    charges. We will achieve this Stripe auth update by implementing an update API
    in the backend.  This Stripe auth update API will receive a PUT request at `/api/stripe_auth/:userId`
    and initiate the POST API call to retrieve the credentials from Stripe.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接了 Stripe 账户，为了完成 OAuth 流程，我们需要从我们的服务器向 Stripe OAuth 发起 POST API 调用。我们需要通过
    POST API 调用将之前检索到的授权码发送给 Stripe OAuth，并接收要存储在卖家用户账户中以处理费用的凭证。我们将通过在后端实现更新 API
    来实现此 Stripe 授权更新。此 Stripe 授权更新 API 将在 `/api/stripe_auth/:userId` 接收 PUT 请求并启动
    POST API 调用来从 Stripe 获取凭证。
- en: The route for this Stripe auth update API will be declared on the server in
    user routes, as follows.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Stripe 授权更新 API 的路由将在服务器上的用户路由中声明，如下所示。
- en: '`mern-marketplace/server/routes/user.routes.js`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/user.routes.js`:'
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A request to this route uses the `stripe_auth` controller method to retrieve
    the credentials from Stripe and passes it to the existing user update method so
    that it can be stored in the database.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对此路由的请求使用 `stripe_auth` 控制器方法从 Stripe 获取凭证，并将其传递给现有的用户更新方法，以便它可以存储在数据库中。
- en: 'To make a POST request to the Stripe API from our server, we will use the `request`
    node module, which needs to be installed with the following command from the command
    line:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从我们的服务器向 Stripe API 发起 POST 请求，我们将使用 `request` 节点模块，需要从命令行使用以下命令安装：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `stripe_auth` controller method in the user controller will be defined as
    follows.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 用户控制器中的 `stripe_auth` 控制器方法将定义如下。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The POST API call to Stripe takes the platform's secret key and the retrieved
    auth code to complete the authorization. Then, it returns the credentials for
    the connected account in `body`, which is then appended to the request body so
    that the user's details can be updated in the `next()` call to the `update` controller
    method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Stripe 的 POST API 调用需要平台的密钥和检索到的授权码来完成授权。然后，它将在 `body` 中返回连接账户的凭证，这些凭证随后被附加到请求体中，以便在
    `next()` 调用 `update` 控制器方法时更新用户的详细信息。
- en: These auth credentials retrieved from Stripe can be used in our application
    to create charges on customer credit cards on behalf of the seller when they sell
    products from their shops. In the next section, we will learn how to collect the
    customer credit card details during checkout using Stripe.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Stripe 获取的这些认证凭据可以在我们的应用程序中使用，代表卖家在他们的商店销售产品时，在客户信用卡上创建费用。在下一节中，我们将学习如何使用
    Stripe 在结账过程中收集客户信用卡详情。
- en: Stripe Card Elements for checkout
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stripe Card Elements 用于结账
- en: 'During checkout, to collect credit card details from the user, we will use
    Stripe''s `Card Elements` to add the credit card field to the checkout form. To
    integrate `Card Elements` with our React interface, we will utilize the `react-stripe-elements` node
    module, which can be installed by running the following command from the command
    line:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在结账过程中，为了从用户那里收集信用卡详情，我们将使用 Stripe 的 `Card Elements` 将信用卡字段添加到结账表单中。为了将 `Card
    Elements` 集成到我们的 React 接口中，我们将利用 `react-stripe-elements` 节点模块，可以通过在命令行中运行以下命令来安装：
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We will also need to inject the `Stripe.js` code into `template.js` to access
    Stripe in the frontend code, as shown here.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将 `Stripe.js` 代码注入到 `template.js` 中，以便在前端代码中访问 Stripe，如下所示。
- en: '`mern-marketplace/template.js`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/template.js`:'
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: For the MERN Marketplace, Stripe will be required in the Cart view, where the
    `Checkout` component needs it to render `Card Elements` and process card detail
    input. We will wrap the `Checkout` component we added to `Cart.js` with the `StripeProvider`
    component from `react-stripe-elements` so that the `Elements` component in `Checkout`
    has access to the Stripe instance.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 MERN Marketplace，Stripe 将在购物车视图中需要，其中 `Checkout` 组件需要它来渲染 `Card Elements`
    并处理卡详情输入。我们将使用来自 `react-stripe-elements` 的 `StripeProvider` 组件包装我们在 `Cart.js`
    中添加的 `Checkout` 组件，以便 `Checkout` 中的 `Elements` 组件可以访问 Stripe 实例。
- en: '`mern-marketplace/client/cart/Cart.js`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Cart.js`:'
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Then, within the `Checkout` component, we will use Stripe's `Elements` component.
    Using Stripe's `Card Elements` will enable the application to collect the user's
    credit card details and use the Stripe instance to tokenize card information rather
    than handle it on our own servers. The implementation details for this part of
    collecting the card details and generating the card token during the checkout
    process will be discussed in the *Integrating the* *checkout process* and *Creating
    a new order* sections. In the next section, we will discuss how to use Stripe
    to securely record the card details that will be received from a user with `Card
    Elements`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `Checkout` 组件中，我们将使用 Stripe 的 `Elements` 组件。使用 Stripe 的 `Card Elements`
    将使应用程序能够收集用户的信用卡详情，并使用 Stripe 实例来标记卡信息，而不是在我们的服务器上处理。在结账过程中收集卡详情和生成卡令牌的实现细节将在
    *整合结账过程* 和 *创建新订单* 部分中讨论。在下一节中，我们将讨论如何使用 Stripe 安全地记录从用户那里通过 `Card Elements` 收到的卡详情。
- en: Stripe Customer for recording card details
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stripe 客户用于记录卡详情
- en: When an order is being placed at the end of the checkout process, the generated
    card token will be used to create or update a Stripe Customer ([https://stripe.com/docs/api#customers](https://stripe.com/docs/api#customers))
    representing our user. This is a good way to store credit card information ([https://stripe.com/docs/saving-cards](https://stripe.com/docs/saving-cards))
    with Stripe for further use, such as for creating charges against specific products
    in the cart when a seller processes the ordered product from their shop. This
    eliminates the complications of having to store user credit card details securely
    on your own server. To integrate Stripe Customer with our application, in the
    following sections, we will update the user model so that it stores Stripe Customer
    details and update the user controller methods so that we can create or update
    Stripe Customer information using the Stripe node module in the backend.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当在结账过程的最后放置订单时，生成的卡令牌将被用来创建或更新代表我们的用户的 Stripe 客户（[https://stripe.com/docs/api#customers](https://stripe.com/docs/api#customers)）。这是将信用卡信息（[https://stripe.com/docs/saving-cards](https://stripe.com/docs/saving-cards)）存储在
    Stripe 中以供进一步使用的好方法，例如，当卖家从他们的商店处理已订购的产品时，在购物车中对特定产品创建费用。这消除了需要在自己的服务器上安全存储用户信用卡详情的复杂性。为了将
    Stripe 客户集成到我们的应用程序中，在接下来的章节中，我们将更新用户模型以便它存储 Stripe 客户详情，并更新用户控制器方法，以便我们可以使用后端的
    Stripe 节点模块创建或更新 Stripe 客户信息。
- en: Updating the user model
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: 'To use Stripe Customer to securely store the credit card information of each
    user and process payments as needed in the application, we need to store details
    of the Stripe Customer associated with each user. To keep track of the corresponding
    Stripe Customer information for a user in our database, we will update the user
    model with the following field:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Stripe 客户端安全地存储每个用户的信用卡信息并在应用中按需处理支付，我们需要存储与每个用户关联的 Stripe 客户端详情。为了跟踪我们数据库中用户的相应
    Stripe 客户端信息，我们将更新用户模型，如下所示的字段：
- en: '[PRE34]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This field will store a Stripe Customer object that will allow us to create
    recurring charges and track multiple charges associated with the same user in
    our platform. To be able to create or update a Stripe Customer, we need to utilize
    Stripe's Customer API. In the next section, we will update the user controller
    so that we can integrate and use this Customer API from Stripe.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此字段将存储一个 Stripe 客户端对象，这将允许我们创建周期性费用并跟踪与我们平台中同一用户关联的多个费用。为了能够创建或更新 Stripe 客户端，我们需要利用
    Stripe 的客户 API。在下一节中，我们将更新用户控制器，以便我们可以集成和使用来自 Stripe 的此客户 API。
- en: Updating the user controller
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户控制器
- en: We will create a new, or update an existing, Stripe Customer when the user places
    an order after entering their credit card details. To implement this, we will
    update the user controllers with a `stripeCustomer` method that will be called
    before the order is created when our server receives a request to the create order
    API (as discussed in the *Creating a new order* section).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在输入信用卡详情后下订单时，我们将创建一个新的或更新现有的 Stripe 客户端。为了实现这一点，我们将更新用户控制器，以便在服务器接收到创建订单
    API 请求（如“创建新订单”部分所述）之前调用 `stripeCustomer` 方法。
- en: 'In the `stripeCustomer` controller method, we will need to use the `stripe`
    node module, which can be installed with the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `stripeCustomer` 控制器方法中，我们需要使用 `stripe` 节点模块，可以使用以下命令安装：
- en: '[PRE35]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: After installing the `stripe` module, it needs to be imported into the user
    controller file. Then, the `stripe` instance needs to be initialized with the
    application's Stripe secret key.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了 `stripe` 模块后，需要将其导入到用户控制器文件中。然后，需要使用应用程序的 Stripe 秘密密钥初始化 `stripe` 实例。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE36]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `stripeCustomer` controller method will check whether the current user already
    has a corresponding Stripe Customer stored in the database, and then use the card
    token received from the frontend to either create a new Stripe Customer or update
    the existing one, as discussed in the following sections.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`stripeCustomer` 控制器方法将检查当前用户是否已经在数据库中存储了相应的 Stripe 客户端，然后使用从前端接收到的卡令牌来创建一个新的
    Stripe 客户端或更新现有的一个，如下文所述。'
- en: Creating a new Stripe Customer
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的 Stripe 客户端
- en: If the current user does not have a corresponding Stripe Customer – in other
    words, a value is not stored for the `stripe_customer` field – we will use the
    create a customer API ([https://stripe.com/docs/api#create_customer](https://stripe.com/docs/api#create_customer))
    from Stripe, as follows.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前用户没有对应的 Stripe 客户端 - 也就是说，`stripe_customer` 字段没有存储值 - 我们将使用 Stripe 的创建客户
    API ([https://stripe.com/docs/api#create_customer](https://stripe.com/docs/api#create_customer))，如下所示。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If the Stripe Customer is successfully created, we will update the current user's
    data by storing the Stripe Customer ID reference in the `stripe_customer` field.
    We will also add this Customer ID to the order being placed so that it is simpler
    to create a charge related to the order. Once a Stripe Customer has been created,
    we can update the Stripe Customer the next time a user enters credit card details
    for a new order, as discussed in the next section.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Stripe 客户端创建成功，我们将通过在 `stripe_customer` 字段中存储 Stripe 客户端 ID 引用来更新当前用户的数据。我们还将把此客户
    ID 添加到正在下订单中，以便更容易创建与订单相关的费用。一旦创建了 Stripe 客户端，我们就可以在用户为新的订单输入信用卡详情时更新 Stripe 客户端，如下一节所述。
- en: Updating an existing Stripe Customer
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新现有的 Stripe 客户端
- en: For an existing Stripe Customer – in other words, where the current user already
    has a value stored for the `stripe_customer` field – we will use the Stripe API
    to update a Stripe Customer, as follows.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现有的 Stripe 客户端 - 也就是说，当前用户已经在 `stripe_customer` 字段中存储了值 - 我们将使用 Stripe API
    来更新一个 Stripe 客户端，如下所示。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Once the Stripe Customer has been successfully updated, we will add the Customer
    ID to the order being created in the `next()` call. Though not covered here, the
    Stripe Customer feature can be used to allow users to store and update their credit
    card information from the application. With the user's payment information securely
    stored and accessible, we can look into how to use this information to process
    a payment when an ordered product is processed by the seller.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功更新Stripe客户，我们将在`next()`调用中将客户ID添加到正在创建的订单中。虽然这里没有涉及，但Stripe客户功能可以用来允许用户从应用程序中存储和更新他们的信用卡信息。随着用户的支付信息被安全存储并可供访问，我们可以探讨如何使用这些信息在卖家处理订购产品时处理支付。
- en: Creating a charge for each product that's processed
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个处理的产品创建费用
- en: When a seller updates an order by processing the product that was ordered in
    their shop, the application will create a charge on behalf of the seller on the
    customer's credit card for the cost of the product ordered.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家通过处理他们在商店中订购的产品来更新订单时，应用程序将代表卖家在客户的信用卡上创建一个费用，费用为订购产品的成本。
- en: To implement this, we will update the `user.controller.js` file with a `createCharge`
    controller method that will use Stripe's create a charge API and needs the seller's
    Stripe account ID, along with the buyer's Stripe Customer ID. The `createCharge` controller
    method will be defined as follows.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将更新`user.controller.js`文件，添加一个`createCharge`控制器方法，该方法将使用Stripe的创建费用API，并需要卖家的Stripe账户ID以及买家的Stripe客户ID。`createCharge`控制器方法将定义如下。
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE39]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If the seller has not connected their Stripe account yet, the `createCharge`
    method will return a 400 error response to indicate that a connected Stripe account
    is required.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果卖家尚未连接他们的Stripe账户，`createCharge`方法将返回一个400错误响应，以指示需要连接的Stripe账户。
- en: To be able to charge the Stripe Customer on behalf of the seller's Stripe account,
    we need to generate a Stripe token with the Customer ID and the seller's Stripe
    account ID and then use that token to create a charge.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够代表卖家的Stripe账户向Stripe客户收费，我们需要使用客户ID和卖家的Stripe账户ID生成一个Stripe令牌，然后使用该令牌创建费用。
- en: The `createCharge` controller method will be called when the server receives
    a request to update an order with a product status change to **Processing** (the
    API implementation for this order update request will be discussed in the *Listing
    orders by shop* section).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器接收到更新订单的请求，并将产品状态更改为**处理中**时（此订单更新请求的API实现将在*按商店列出订单*部分讨论），将调用`createCharge`控制器方法。
- en: This covers all the Stripe-related concepts that are relevant to the implementation
    of payment processing for the specific use cases of the MERN Marketplace. Now,
    we will continue with our implementations in order to allow a user to complete
    the checkout process and place their order from their shopping cart.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了所有与MERN Marketplace特定用例的支付处理相关的Stripe相关概念。现在，我们将继续我们的实现，以便允许用户完成结账过程并从购物车中下单。
- en: Integrating the checkout process
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成结账过程
- en: 'Users who are signed in and have items added to their cart will be able to
    start the checkout process. We will add a Checkout form to collect customer details,
    delivery address information, and credit card information, as shown in the following
    screenshot:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录并已将商品添加到购物车的用户将能够开始结账过程。我们将添加一个结账表单来收集客户详情、送货地址信息和信用卡信息，如下面的截图所示：
- en: '![](img/3b4cc738-154a-4a02-89a4-7f19e310b9a7.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b4cc738-154a-4a02-89a4-7f19e310b9a7.png)'
- en: This checkout view will consist of two parts, with the first part for collecting
    buyer details including name, email, and delivery address, and the second part
    for entering credit card details and placing the order. In the following sections,
    we will complete the implementation of the checkout process by initializing the
    checkout form details and adding the fields for collecting buyer details. Then,
    we will collect the buyer's credit card details to allow them to place the order
    and finish the checkout process.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此结账视图将包括两部分，第一部分用于收集买家的详细信息，包括姓名、电子邮件和送货地址，第二部分用于输入信用卡详情并下单。在以下章节中，我们将通过初始化结账表单详情并添加收集买家详情的字段来完成结账过程的实现。然后，我们将收集买家的信用卡详情，以便他们可以下单并完成结账过程。
- en: Initializing checkout details
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化结账详情
- en: In this section, we will create the checkout view, which contains the form fields
    and the place order option in a `Checkout` component. In this component, we will
    initialize the `checkoutDetails` object in the state before collecting the details
    from the form. We will prepopulate the customer details based on the current user's
    details and add the current cart items to `checkoutDetails`, as shown in the following
    code.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建结算视图，该视图包含表单字段和“下单”选项，位于“结算”组件中。在这个组件中，我们将在从表单收集详细信息之前在状态中初始化`checkoutDetails`对象。我们将根据当前用户的详细信息预先填充客户信息，并将当前购物车商品添加到`checkoutDetails`中，如下面的代码所示。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`:'
- en: '[PRE40]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: These customer information values, which are initialized in `checkoutDetails`,
    will be updated when the user interacts with the form fields. In the following
    sections, we will add the form fields and the change-handling functions for the
    customer information and delivery address details to be collected in this checkout
    view.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这些客户信息值，在`checkoutDetails`中初始化，将在用户与表单字段交互时更新。在以下章节中，我们将添加收集在此结算视图中要收集的客户信息和送货地址详细信息的表单字段和更改处理函数。
- en: Customer information
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户信息
- en: In the checkout form, we will have fields for collecting the customer's name
    and email address. To add these text fields to the `Checkout` component, we will
    use the following code.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在结算表单中，我们将有收集客户姓名和电子邮件地址的字段。为了将这些文本字段添加到`Checkout`组件中，我们将使用以下代码。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`:'
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When the user updates the values in these two fields, the `handleCustomerChange` method
    will update the relevant details in the state. The `handleCustomerChange` method is
    defined as follows.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更新这两个字段的值时，`handleCustomerChange`方法将更新状态中的相关详细信息。`handleCustomerChange`方法定义如下。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`:'
- en: '[PRE42]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This will allow the user to update the name and email of the customer that this
    order is associated with. Next, we will look at the implementation for collecting
    the delivery address details for this order.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用户能够更新与该订单关联的客户的姓名和电子邮件。接下来，我们将查看收集此订单送货地址详细信息实现的示例。
- en: Delivery address
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 送货地址
- en: To collect the delivery address from the user, we will add fields to collect
    address details such as the street address, city, state, zip code, and country
    name to the checkout form. We will use the following code to add the text fields
    to allow a user to enter these address details.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从用户那里收集送货地址，我们将在结算表单中添加收集地址详细信息（如街道地址、城市、州、邮政编码和国家名称）的字段。我们将使用以下代码添加文本字段，以便用户输入这些地址详细信息。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`:'
- en: '[PRE43]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: When the user updates these address fields, the `handleAddressChange` method
    will update the relevant details in the state, as follows.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更新这些地址字段时，`handleAddressChange`方法将更新状态中的相关详细信息，如下所示。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`:'
- en: '[PRE44]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: With these text fields and handle change functions in place, the `checkoutDetails`
    object in the state will contain the customer information and delivery address
    that was entered by the user. In the next section, we will collect payment information
    from the buyer and use it with the other checkout details to complete the checkout
    process and place the order.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些文本字段和处理更改函数就绪后，状态中的`checkoutDetails`对象将包含用户输入的客户信息和送货地址。在下一节中，我们将从买家那里收集支付信息，并将其与其他结算详细信息一起使用，以完成结算过程并下单。
- en: Placing an order
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下单
- en: The remaining steps of the checkout process will involve collecting the user's
    credit card details securely, thus allowing the user to place the order, emptying
    the cart from storage, and redirecting the user to a view with the order details.
    We will implement these steps by building a `PlaceOrder` component that consists of
    the remaining elements in the checkout view, which are the credit card field and
    the place order button. In the following sections, as we develop this component,
    we will use Stripe Card Elements to collect credit card details, add a place order
    button for the user to complete the checkout process, utilize a cart helper method
    to empty the cart, and redirect the user to an order view.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 结账过程的剩余步骤将涉及安全地收集用户的信用卡详细信息，从而使用户能够下订单，从存储中清空购物车，并将用户重定向到包含订单详情的视图。我们将通过构建一个
    `PlaceOrder` 组件来实现这些步骤，该组件由结账视图中的剩余元素组成，即信用卡字段和下订单按钮。在接下来的章节中，当我们开发这个组件时，我们将使用
    Stripe 卡元素来收集信用卡详细信息，为用户添加一个完成结账过程的下订单按钮，利用购物车辅助方法清空购物车，并将用户重定向到订单视图。
- en: Using Stripe Card Elements
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Stripe 卡元素
- en: In order to use Stripe's `CardElement` component from `react-stripe-elements` to
    add the credit card field to the `PlaceOrder` component, we need to wrap the `PlaceOrder`
    component using the `injectStripe` **higher-order component** (**HOC**) from Stripe.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用来自 `react-stripe-elements` 的 Stripe 的 `CardElement` 组件将信用卡字段添加到 `PlaceOrder`
    组件中，我们需要使用 Stripe 的 `injectStripe` **高阶组件**（**HOC**）来包装 `PlaceOrder` 组件。
- en: This is because the `CardElement` component needs to be part of a payment form
    component that is built with `injectStripe` and also wrapped with the `Elements`
    component. So, when we create a component called `PlaceOrder`, we will wrap it
    with `injectStripe` before exporting it, as shown in the following code.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 `CardElement` 组件需要成为由 `injectStripe` 构建，并用 `Elements` 组件包装的支付表单组件的一部分。因此，当我们创建一个名为
    `PlaceOrder` 的组件时，我们将在导出之前用 `injectStripe` 包装它，如下面的代码所示。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`:'
- en: '[PRE45]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Then, we will add this `PlaceOrder` component in the Checkout form, pass it
    the `checkoutDetails` object as a prop, and wrap it with the `Elements` component
    from `react-stripe-elements`, as shown here.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将此 `PlaceOrder` 组件添加到结账表单中，将其 `checkoutDetails` 对象作为属性传递，并用来自 `react-stripe-elements`
    的 `Elements` 组件包装，如下所示。
- en: '`mern-marketplace/client/cart/Checkout.js`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/Checkout.js`:'
- en: '[PRE46]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `injectStripe` HOC provides the `props.stripe` property that manages the
    `Elements` group. This will allow us to call `props.stripe.createToken` within
    `PlaceOrder` to submit card details to Stripe and get back the card token. Next,
    we will learn how to use the Stripe `CardElement` component to collect credit
    card details from within the `PlaceOrder` component.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`injectStripe` HOC 提供了 `props.stripe` 属性，该属性管理 `Elements` 组。这将允许我们在 `PlaceOrder`
    中调用 `props.stripe.createToken`，将卡详细信息提交给 Stripe 并获取卡令牌。接下来，我们将学习如何使用 Stripe `CardElement`
    组件在 `PlaceOrder` 组件内部收集信用卡详细信息。'
- en: The CardElement component
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The CardElement component
- en: Stripe's `CardElement` is self-contained, so we can just add it to the `PlaceOrder`
    component, then incorporate styles as desired, and the card detail input will
    be taken care of. We will add the `CardElement` component to `PlaceOrder` as follows.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Stripe 的 `CardElement` 是自包含的，因此我们只需将其添加到 `PlaceOrder` 组件中，然后根据需要添加样式，信用卡详细信息输入将由它处理。我们将按照以下方式将
    `CardElement` 组件添加到 `PlaceOrder` 中。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`:'
- en: '[PRE47]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will render the credit card details field in the checkout form view. In
    the next section, we will learn how to securely validate and store the credit
    card details that are entered in this field when the user clicks on a button to
    place an order and complete the checkout process.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在结账表单视图中渲染信用卡详细信息字段。在下一节中，我们将学习如何安全地验证和存储用户在点击按钮下订单并完成结账过程时在此字段中输入的信用卡详细信息。
- en: Adding a button to place an order
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个下订单按钮
- en: The final element in the checkout view is the Place Order button, which will
    complete the checkout process if all the details are entered correctly. We will
    add this button to the `PlaceOrder` component after `CardElement`, as shown in
    the following code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在结账视图中的最后一个元素是“下订单”按钮，如果所有详细信息都正确输入，它将完成结账过程。我们将在 `CardElement` 之后将此按钮添加到 `PlaceOrder`
    组件中，如下面的代码所示。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`:'
- en: '[PRE48]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Clicking on the Place Order button will call the `placeOrder` method, which
    will attempt to tokenize the card details using `stripe.createToken`. If this
    is unsuccessful, the user will be informed of the error, but if this is successful,
    then the checkout details and generated card token will be sent to our server's
    create order API (covered in the next section). The `placeOrder` method is defined
    as follows.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下单”按钮将调用`placeOrder`方法，该方法将尝试使用`stripe.createToken`对卡详情进行标记化。如果这失败，用户将被告知错误，但如果成功，则结账详情和生成的卡标记将被发送到我们的服务器创建订单API（下一节将介绍）。`placeOrder`方法定义如下。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`:'
- en: '[PRE49]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `create` fetch method that we invoked here to make a POST request to the
    create order API in the backend is defined in `client/order/api-order.js`. It
    takes the checkout details, the card token, and user credentials as parameters
    and sends them to the API, as seen in previous API implementations. When the new
    order is successfully created, we will also empty the cart in `localStorage`,
    as discussed in the next section.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里调用的`create` fetch方法用于向后端创建订单API发起POST请求，定义在`client/order/api-order.js`中。它接受结账详情、卡标记和用户凭证作为参数，并将它们发送到API，如前述API实现中所示。当新订单成功创建时，我们将在`localStorage`中清空购物车，如下一节所述。
- en: Empty cart
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清空购物车
- en: If the request to the create order API is successful, we will empty the cart
    in `localStorage` so that the user can add new items to the cart and place a new
    order if desired. To empty the cart in browser storage, we will use the `emptyCart`
    helper method in `cart-helper.js`, which is defined as follows.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果向创建订单API的请求成功，我们将清空`localStorage`中的购物车，以便用户可以添加新项目到购物车，并在需要的情况下下单。为了在浏览器存储中清空购物车，我们将使用`cart-helper.js`中的`emptyCart`辅助方法，其定义如下。
- en: '`mern-marketplace/client/cart/cart-helper.js`:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/cart-helper.js`:'
- en: '[PRE50]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `emptyCart` method removes the cart object from `localStorage` and updates
    the state of the view by executing the callback passed to it from the `placeOrder`
    method, where it is invoked. With the checkout process completed, we can now redirect
    the user out of the cart and checkout view, as discussed in the next section.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`emptyCart`方法从`localStorage`中移除购物车对象，并通过执行从`placeOrder`方法传递给它的回调来更新视图的状态，其中它被调用。在结账过程完成后，我们现在可以将用户从购物车和结账视图中重定向出去，如下一节所述。'
- en: Redirecting to the order view
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向到订单视图
- en: With the order placed and the cart emptied, we can redirect the user to the
    order view, which will show them the details of the order that was just placed.
    To implement this redirect, we can use the Redirect component from React Router,
    as shown in the following code.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 下单完成后，购物车清空，我们可以将用户重定向到订单查看页面，该页面将显示他们刚刚下单的订单详情。为了实现这个重定向，我们可以使用React Router中的Redirect组件，如下面的代码所示。
- en: '`mern-marketplace/client/cart/PlaceOrder.js`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/cart/PlaceOrder.js`:'
- en: '[PRE51]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This redirection also works as an indication to the user that the checkout process
    has been completed. A completed checkout process will also result in a new order
    being created in the application's backend. In the next section, we will look
    into the implementation of creating and storing these new orders in the database.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这种重定向也作为用户结账过程完成的指示。完成的结账过程还会在应用程序的后端创建一个新的订单。在下一节中，我们将探讨创建和存储这些新订单到数据库的实现。
- en: Creating a new order
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新订单
- en: When a user places an order, the details of the order that were confirmed at
    checkout will be used to create a new order record in the database, update or
    create a Stripe Customer for the user, and decrease the stock quantities of products
    ordered. In the following sections, we will add an order model to define the details
    of the orders to be stored in the database and discuss the implementation of the
    backend API that will be called from the frontend to create the new order record.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户下单时，结账时确认的订单详情将被用于在数据库中创建一个新的订单记录，更新或为用户创建Stripe客户，并减少已订购产品的库存数量。在接下来的几节中，我们将添加一个订单模型来定义要存储在数据库中的订单详情，并讨论从前端调用以创建新订单记录的后端API的实现。
- en: Defining an Order model
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义订单模型
- en: To store the orders in the backend, we will define a Schema for the order model
    that will record order details including the customer details, payment information, and
    an array of the products ordered. The structure of each product in this array
    of products ordered will be defined in a separate subschema called `CartItemSchema`. In
    the following sections, we will define these schemas so that we can store orders
    and cart items in the database.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在后端存储订单，我们将为订单模型定义一个架构，该架构将记录订单详情，包括客户详情、支付信息以及所订购产品的数组。这个数组中每个产品的结构将在一个单独的子架构
    `CartItemSchema` 中定义。在接下来的章节中，我们将定义这些架构，以便我们可以在数据库中存储订单和购物车项目。
- en: The Order schema
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Order 架构
- en: 'The Order schema defined in `server/models/course.model.js` will contain fields
    for storing the customer''s name and email, along with their user account reference,
    delivery address information, payment reference, created and updated-at timestamps,
    and an array of products ordered. The pieces of code for defining the order fields
    are as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `server/models/course.model.js` 中定义的 Order 架构将包含用于存储客户姓名和电子邮件、用户账户引用、送货地址信息、支付引用、创建和更新时间戳以及所订购产品数组的字段。定义订单字段的相关代码如下：
- en: '**Customer name and email**: To record the details of the customer who the
    order is meant for, we will add the `customer_name` and `customer_email` fields
    to the `Order` schema:'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户姓名和电子邮件**：为了记录订单的目标客户的详细信息，我们将向 `Order` 架构添加 `customer_name` 和 `customer_email`
    字段：'
- en: '[PRE52]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '**User who placed the order**: To reference the signed-in user who placed the
    order, we will add an `ordered_by` field:'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下单用户**：为了引用下单的已登录用户，我们将添加一个 `ordered_by` 字段：'
- en: '[PRE53]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '**Delivery address**: The delivery address information for the order will be
    stored in the delivery address subdocument with the `street`, `city`, `state`,
    `zipcode`, and `country` fields:'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**送货地址**：订单的送货地址信息将存储在具有 `street`、`city`、`state`、`zipcode` 和 `country` 字段的送货地址子文档中：'
- en: '[PRE54]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '**Payment reference**: The payment information will be relevant when the order
    is updated and a charge needs to be created after an ordered product has been
    processed by the seller. We will record the Stripe Customer ID that''s relevant
    to the credit card details in a `payment_id` field as a reference to the payment
    information for this order:'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支付引用**：当订单更新并且卖家处理完所订购的产品后需要创建费用时，支付信息将是相关的。我们将记录与信用卡详情相关的 Stripe 客户 ID，并将其作为
    `payment_id` 字段中的引用，以记录此订单的支付信息：'
- en: '[PRE55]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '**Products ordered**: The main content of the order will be the list of products
    ordered, along with details such as the quantity of each. We will record this
    list in a field called `products` in the `Order` schema. The structure of each
    product will be defined separately in `CartItemSchema`.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所订购的产品**：订单的主要内容将是所订购产品的列表，以及如每个产品的数量等详细信息。我们将在 `Order` 架构中的 `products` 字段中记录此列表。每个产品的结构将在
    `CartItemSchema` 中单独定义。'
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE56]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The fields in this schema definition will enable us to store the necessary details
    for each order. `CartItemSchema`, which is used to record the details of each
    product that was ordered, will be discussed in the next section.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 该架构定义中的字段将使我们能够存储每个订单所需的详细信息。用于记录所订购的每个产品详情的 `CartItemSchema` 将在下一节中讨论。
- en: The CartItem schema
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CartItem 架构
- en: The `CartItem` schema will represent each product that was ordered when an order
    was placed. It will contain a reference to the product, the quantity of the product
    that was ordered by the user, a reference to the shop the product belongs to,
    and its status, as shown in the following code.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当下单时，`CartItem` 架构将代表所订购的每个产品。它将包含对产品的引用、用户所订购的产品数量、对产品所属商店的引用以及其状态，如下面的代码所示。
- en: '`mern-marketplace/server/models/order.model.js`:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/order.model.js`：'
- en: '[PRE57]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The `status` of the product can only have the values defined in the `enums`,
    with the default value set to "Not Processed". This represents the current state
    of the product order, as updated by the seller.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 产品的 `status` 只能具有在 `enums` 中定义的值，默认值设置为 "未处理"。这代表产品订单的当前状态，由卖家更新。
- en: The `Order` schema and `CartItem` schema defined here will allow us to record
    details about the customer and products that were ordered as required to complete
    the purchase steps for the products that were bought by a user. Next, we will
    discuss the backend API implementation that allows the frontend to create an order
    document in the Orders collection in the database.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义的 `Order` 架构和 `CartItem` 架构将允许我们记录有关客户和已订购产品的详细信息，以便完成用户购买产品的购买步骤。接下来，我们将讨论允许前端在数据库的
    Orders 集合中创建订单文档的后端 API 实现。
- en: Create order API
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建订单 API
- en: The create order API in the backend will take a POST request from the frontend
    to create the order in the database. The API route will be declared in `server/routes/order.routes.js`,
    along with the other order routes. These order routes will be very similar to
    the user routes. To load the order routes in the Express app, we need to mount
    the routes in `express.js`, just like we did for the auth and user routes.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 后端创建订单 API 将从前端接收 POST 请求以在数据库中创建订单。API 路由将在 `server/routes/order.routes.js`
    中声明，以及其他订单路由。这些订单路由将与用户路由非常相似。为了在 Express 应用中加载订单路由，我们需要在 `express.js` 中挂载路由，就像我们为
    auth 和用户路由所做的那样。
- en: '`mern-marketplace/server/express.js`:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/express.js`:'
- en: '[PRE58]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'A number of actions, in the following sequence, take place when the create
    order API receives a POST request at `/api/orders/:userId`:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建订单 API 在 `/api/orders/:userId` 接收到 POST 请求时，以下一系列动作发生：
- en: It is ensured that the current user is signed in.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保当前用户已登录。
- en: A Stripe `Customer` is either created or updated using the `stripeCustomer`
    user controller method, which we discussed earlier in the *Stripe Customer to
    record card details* section.
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stripe `Customer` 是通过我们之前在 *Stripe Customer to record card details* 部分讨论过的 `stripeCustomer`
    用户控制器方法创建或更新的。
- en: The stock quantities are updated for all the ordered products using the `decreaseQuanity`
    product controller method.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `decreaseQuanity` 产品控制器方法更新所有已订购产品的库存数量。
- en: The order is created in the Order collection with the `create` order controller
    method.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `create` 订单控制器方法在订单集合中创建订单。
- en: The route for this create order API is defined as follows.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 此创建订单 API 的路由定义如下。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`:'
- en: '[PRE59]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: To retrieve the user associated with the `:userId` parameter in the route, we
    will use the `userByID` user controller method. We will write the code to handle
    this parameter in the route URL, along with the other order route declaration.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索与路由中的 `:userId` 参数关联的用户，我们将使用 `userByID` 用户控制器方法。我们将编写处理此参数的代码，包括其他订单路由声明。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`:'
- en: '[PRE60]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `userByID` method gets the user from the User collection and attaches it
    to the request object so that it can be accessed by the next few methods. Among
    the next few methods that are invoked when this API receives a request includes
    the product controller method to decrease stock quantities and the order controller
    method to save a new order to the database. We will discuss the implementation
    of these two methods in the following sections.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`userByID` 方法从 User 集合中获取用户并将其附加到请求对象中，以便后续几个方法可以访问。当此 API 收到请求时，将调用包括产品控制器方法以减少库存数量和订单控制器方法将新订单保存到数据库在内的几个后续方法。我们将在以下几节中讨论这两个方法的实现。'
- en: Decrease product stock quantity
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少产品库存数量
- en: When an order is placed, we will decrease the stock quantity of each product
    ordered according to the quantity ordered by the user. This will automatically
    reflect the updated quantities of the products in the associated shops after an
    order is placed. We will implement this decrease product quantity update in the `decreaseQuantity` controller
    method, which will be added with the other product controller methods, as follows.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 当下单时，我们将根据用户订购的数量减少每个产品的库存数量。订单下单后，这将自动反映相关商店中产品的更新数量。我们将在 `decreaseQuantity`
    控制器方法中实现此产品数量减少更新，该方法将与其他产品控制器方法一起添加，如下所示。
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE61]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Since the update operation, in this case, involves a bulk update of multiple
    products in the collection after matching with an array of products ordered, we
    use the `bulkWrite` method in MongoDB to send multiple `updateOne` operations
    to the MongoDB server with one command. The multiple `updateOne` operations that
    are required are listed in `bulkOps` using the `map` function. This will be faster
    than sending multiple independent save or update operations because with `bulkWrite()`,
    there is only one round trip to MongoDB.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在此情况下，更新操作涉及在匹配到已订购的产品数组后对集合中的多个产品进行批量更新，因此我们使用MongoDB的`bulkWrite`方法通过一个命令向MongoDB服务器发送多个`updateOne`操作。所需的多个`updateOne`操作使用`map`函数列在`bulkOps`中。这将比发送多个独立的保存或更新操作更快，因为使用`bulkWrite()`，只有一个往返MongoDB。
- en: Once the product quantities have been updated by this method, the next method
    is invoked to save the new order in the database. In the next section, we will
    see the implementation of this method, which creates this new order.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法更新产品数量后，将调用下一个方法以将新订单保存到数据库中。在下一节中，我们将看到此方法的实现，它创建这个新订单。
- en: Create controller method
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器方法
- en: The `create` controller method, defined in the order controllers, is the last
    method that's invoked when the create order API receives a request. This method
    takes the order details, creates a new order, and saves it to the Order collection
    in MongoDB. The `create` controller method is implemented as follows.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在订单控制器中定义的`create`控制器方法是在创建订单API收到请求时调用的最后一个方法。此方法接受订单详情，创建一个新订单并将其保存到MongoDB的订单集合中。`create`控制器方法实现如下。
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`:'
- en: '[PRE62]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: With this implemented, orders can be created and stored in the backend by any
    signed-in user on the MERN Marketplace. Now, we can set up APIs to fetch lists
    of orders by user, orders by shop, or read an individual order and display the
    fetched data to views in the frontend. In the next section, we will learn how
    to list the orders per shop so that shop owners can process and manage the orders
    they receive for their products.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点后，任何在MERN Marketplace上注册的用户都可以在后台创建和存储订单。现在，我们可以设置API来获取用户订单列表、商店订单列表或读取单个订单，并将获取的数据显示在前端视图中。在下一节中，我们将学习如何按商店列出订单，以便店主可以处理和管理他们收到的产品订单。
- en: Listing orders by shop
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按商店列出订单
- en: An important feature of the marketplace is allowing sellers to see and update
    the status of orders they've received for products in their shops. To implement
    this, we will set up backend APIs to list orders by shop and update an order as
    a seller changes the status of a purchased product. Then, we will add some frontend
    views that will display the orders and allow the seller to interact with each
    order.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 市场的一个重要功能是允许卖家查看和更新他们商店中收到的产品订单的状态。为了实现这一点，我们将设置后端API来按商店列出订单并更新订单，当卖家更改已购买产品的状态时。然后，我们将添加一些前端视图来显示订单并允许卖家与每个订单进行交互。
- en: The list by shop API
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按商店列表API
- en: In this section, we will implement an API to get orders for a specific shop
    so that authenticated sellers can view the orders for each of their shops in one
    place. The request for this API will be received at `/api/orders/shop/:shopId`,
    with the route defined in `order.routes.js`, as follows.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现一个API来获取特定商店的订单，以便认证的卖家可以在一个地方查看他们每个商店的订单。这个API的请求将在`/api/orders/shop/:shopId`接收，路由在`order.routes.js`中定义，如下所示。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`:'
- en: '[PRE63]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: To retrieve the shop associated with the `:shopId` parameter in the route, we
    will use the `shopByID` shop controller method, which gets the shop from the Shop
    collection and attaches it to the request object so that it can be accessed by
    the next methods.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索与路由中的`:shopId`参数关联的商店，我们将使用`shopByID`商店控制器方法，该方法从商店集合中获取商店并将其附加到请求对象中，以便后续方法可以访问。
- en: The `listByShop` controller method will retrieve the orders that have products
    purchased with the matching shop ID, then populate the ID, name, and price fields
    for each product, with orders sorted by date from most recent to oldest. The `listByShop` controller
    method is defined as follows.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`listByShop`控制器方法将检索使用匹配的商店ID购买的产品订单，然后为每个产品填充ID、名称和价格字段，按日期从最近到最远排序订单。`listByShop`控制器方法定义如下。'
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`:'
- en: '[PRE64]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: To fetch this API in the frontend, we will add a corresponding `listByShop`
    method in `api-order.js`, similar to our other API implementations. This fetch
    method will be used in the `ShopOrders` component to show the orders for each
    shop. We will look at the implementation of the `ShopOrders` component in the
    next section.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端获取此API，我们将在`api-order.js`中添加相应的`listByShop`方法，类似于我们的其他API实现。此获取方法将在`ShopOrders`组件中使用，以显示每个商店的订单。我们将在下一节中查看`ShopOrders`组件的实现。
- en: The ShopOrders component
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ShopOrders组件
- en: 'The `ShopOrders` component will be the view where sellers will be able to see
    the list of orders that have been received for a given shop. In this view, each
    order will only show the purchased products that are relevant to the shop and
    allow the seller to change the status of the ordered product with a dropdown of
    possible status values, as shown in the following screenshot:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`ShopOrders`组件将是卖家可以看到给定商店收到的订单列表的视图。在此视图中，每个订单将仅显示与商店相关的购买产品，并允许卖家使用可能的状'
- en: '![](img/c4ba0b05-968e-43a5-9d43-cc9184572afb.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4ba0b05-968e-43a5-9d43-cc9184572afb.png)'
- en: To render this view at a frontend route, we will update `MainRouter` with a `PrivateRoute` in
    order to load the `ShopOrders` component at the `/seller/orders/:shop/:shopId`
    route, as shown in the following code.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端路由中渲染此视图，我们将使用`PrivateRoute`更新`MainRouter`，以便在`/seller/orders/:shop/:shopId`路由中加载`ShopOrders`组件，如下面的代码所示。
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE65]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Going to this link will load the `ShopOrders` component in the view. In the
    `ShopOrders` component, we will fetch and list the orders for the given shop,
    and for each order, we'll render the order details along with the list of products
    that were ordered in a React component named `ProductOrderEdit`. In the following
    sections, we will learn how to load the list of orders and discuss the implementation
    of the `ProductOrderEdit` component.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 访问此链接将加载视图中的`ShopOrders`组件。在`ShopOrders`组件中，我们将获取并列出给定商店的订单，并为每个订单，我们将使用名为`ProductOrderEdit`的React组件渲染订单详情以及已订购的产品列表。在接下来的章节中，我们将学习如何加载订单列表并讨论`ProductOrderEdit`组件的实现。
- en: List orders
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出订单
- en: When the `ShopOrders` component mounts in the view, we will retrieve the list
    of orders for the provided shop ID from the database and set it to the state to
    be rendered in the view. We will make a request to the backend API to list orders
    by shop using the `listByShop` fetch method and set the retrieved orders to the
    state in a `useEffect` hook, as shown in the following code.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 当`ShopOrders`组件在视图中挂载时，我们将从数据库中检索提供的商店ID的订单列表，并将其设置为要在视图中渲染的状态。我们将通过使用`listByShop`获取方法向后端API请求按商店列出订单，并在`useEffect`钩子中将检索到的订单设置到状态中，如下面的代码所示。
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ShopOrders.js`:'
- en: '[PRE66]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In the view, we will iterate through the list of orders and render each order
    in a collapsible list from `Material-UI`, which will expand when it's clicked.
    The code for this view will be added as follows.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，我们将遍历订单列表，并将每个订单渲染为`Material-UI`的可折叠列表，点击时展开。此视图的代码将如下添加。
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ShopOrders.js`:'
- en: '[PRE67]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Each expanded order will show the order details and the `ProductOrderEdit` component.
    The `ProductOrderEdit` component will display the purchased products and allow
    the seller to edit the status of each product. The `updateOrders` method is passed
    as a prop to the `ProductOrderEdit` component so that the status can be updated
    when a product status is changed. The `updateOrders` method is defined as follows.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 每个展开的订单将显示订单详情和`ProductOrderEdit`组件。`ProductOrderEdit`组件将显示购买的产品，并允许卖家编辑每个产品的状态。`updateOrders`方法作为prop传递给`ProductOrderEdit`组件，以便在产品状态更改时更新状态。`updateOrders`方法定义如下。
- en: '`mern-marketplace/client/order/ShopOrders.js`:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ShopOrders.js`:'
- en: '[PRE68]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In the `ProductOrderEdit` component, we will invoke this `updateOrders` method
    when the seller interacts with the status update dropdown for any product that
    will be rendered in the `ProductOrderEdit` component. In the next section, we
    will look into the implementation of this `ProductOrderEdit` component.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ProductOrderEdit`组件中，当卖家与`ProductOrderEdit`组件中将要渲染的任何产品的状态更新下拉菜单交互时，我们将调用此`updateOrders`方法。在下一节中，我们将探讨`ProductOrderEdit`组件的实现。
- en: The ProductOrderEdit component
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ProductOrderEdit组件
- en: In this section, we will implement a `ProductOrderEdit` component to render
    all the products in the order with an edit status option. This `ProductOrderEdit`
    component will take an order object as a prop and iterate through the order's
    `products` array to display only the products that have been purchased from the
    current shop, along with a dropdown to change the status value of each product.
    The code for this view, which renders the products for each order, will be added
    as follows.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现一个`ProductOrderEdit`组件来渲染订单中的所有产品，并带有编辑状态选项。这个`ProductOrderEdit`组件将接受一个订单对象作为属性，遍历订单的`products`数组以显示仅从当前商店购买的产品，以及一个下拉菜单来更改每个产品的状态值。渲染每个订单产品的代码如下所示。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
- en: '[PRE69]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: To be able to list the valid status values in the dropdown option for updating
    an ordered product's status, we will retrieve the list of possible status values
    from the server in a `useEffect` hook in the `ProductOrderEdit` component, as
    shown in the following code.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在下拉菜单选项中列出有效的状态值以更新已订购产品的状态，我们将在`ProductOrderEdit`组件的`useEffect`钩子中从服务器检索可能的州值列表，如下面的代码所示。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
- en: '[PRE70]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The status values that are retrieved from the server are set to state and rendered
    in the dropdown as a `MenuItem`. When an option is selected from the possible
    status values in the dropdown, the `handleStatusChange` method is called to update
    the orders in the state, as well as to send a request to the appropriate backend
    API based on the value that's selected. The `handleStatusChange` method will be
    structured as follows, with a different backend API invoked, depending on the
    selected status value.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器检索的状态值被设置为状态并作为`MenuItem`渲染在下拉菜单中。当从下拉菜单中选择可能的州值时，将调用`handleStatusChange`方法来更新状态中的订单，以及根据所选值向适当的后端API发送请求。`handleStatusChange`方法的结构如下，根据所选的状态值调用不同的后端API。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
- en: '[PRE71]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Updating the status of an ordered product will have different implications,
    depending on the value that's selected from the dropdown. Selecting to cancel
    or process a product order will invoke separate APIs in the backend rather than
    the API called when selecting any of the other status values. In the following
    sections, we will learn how each of these actions is handled in the `handleStatusChange` method when
    a user interacts with the dropdown and selects a status value.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 更新已订购产品的状态将根据从下拉菜单中选择的值产生不同的影响。选择取消或处理产品订单将调用后端中的单独API，而不是选择其他任何状态值时调用的API。在以下章节中，我们将学习当用户与下拉菜单交互并选择状态值时，如何在`handleStatusChange`方法中处理这些操作。
- en: Handling actions to cancel a product order
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理取消产品订单的操作
- en: If the seller wishes to cancel the order for a product and selects Cancelled
    from the status values dropdown for a specific product in the order, we will call
    the `cancelProduct` fetch method inside the `handleStatusChange` method, as shown
    in the following code.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果卖家希望取消产品的订单，并在订单中特定产品的状态值下拉菜单中选择已取消，我们将在`handleStatusChange`方法中调用`cancelProduct`获取方法，如下面的代码所示。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
- en: '[PRE72]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The `cancelProduct` fetch method will take the corresponding shop ID, product
    ID, cartItem ID, selected status value, ordered quantity for the product, and
    user credentials to send, along with the request to the cancel product API in
    the backend. On a successful response from the backend, we will update the orders
    in the view.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancelProduct`获取方法将接受相应的商店ID、产品ID、购物车项目ID、所选状态值、产品的订购数量以及要发送的用户凭据，以及向后端取消产品API发送请求。在从后端收到成功响应后，我们将更新视图中的订单。'
- en: This cancel product API will update the database for the order and the product
    affected by this action. Before getting into the implementation for this cancel
    product order API, next, we will look at how the process charge API is invoked
    if the seller chooses to process a product order instead of canceling it.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 此取消产品API将更新受此操作影响的订单和产品的数据库。在深入实现此取消产品订单API之前，接下来，我们将看看如果卖家选择处理产品订单而不是取消它，将如何调用处理收费API。
- en: Handling the action to process charge for a product
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理对产品进行收费的操作
- en: If a seller chooses to process the order for a product, we will need to invoke
    an API that will charge the customer for the total cost of the product ordered.
    So, when a seller selects Processing from the status values dropdown for a specific
    product in the order, we will call the `processCharge` fetch method inside the `handleStatusChange` method, as
    shown in the following code.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如果卖家选择处理产品的订单，我们需要调用一个API来向客户收取订购产品的总费用。因此，当卖家在订单中为特定产品选择状态值下拉菜单中的“处理”时，我们将在`handleStatusChange`方法内部调用`processCharge`fetch方法，如下面的代码所示。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
- en: '[PRE73]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The `processCharge` fetch method will take the corresponding order ID, shop
    ID, customer's user ID, cartItem ID, selected status value, total cost for the
    ordered product, and user credentials to send, along with the request to the process
    charge API in the backend. On a successful response from the backend, we will
    update the orders in the view accordingly.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`processCharge`fetch方法将获取相应的订单ID、商店ID、客户的用户ID、购物车项目ID、选定的状态值、订购产品的总费用和用户凭据，以及发送到后端处理费用API的请求。在收到后端成功的响应后，我们将相应地更新视图中的订单。'
- en: This process charge API will update the database for the order and the user
    affected by this action. Before getting into the implementation for this API,
    next, we will look at how the update order API is invoked if the seller chooses
    to update the status of a product that's been ordered to any value other than
    Cancelled or Processing.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程费用API将更新受此操作影响的订单和用户的数据库。在深入了解此API的实现之前，接下来，我们将查看如果卖家选择将已订购产品的状态更新为除已取消或处理之外的其他值时，如何调用更新订单API。
- en: Handling the action to update the status of a product
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理更新产品状态的操作
- en: If a seller chooses to update the status of an ordered product so that it has
    a value other than Cancelled or Processing, we will need to invoke an API that
    will update the order in the database with this changed product status. So, when
    a seller selects other status values from the dropdown for a specific product
    in the order, we will call the `update` fetch method inside the `handleStatusChange` method, as
    shown in the following code.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 如果卖家选择更新已订购产品的状态，使其具有除已取消或处理之外的其他值，我们需要调用一个API来更新数据库中订单的更改产品状态。因此，当卖家在订单中为特定产品选择下拉菜单中的其他状态值时，我们将在`handleStatusChange`方法内部调用`update`fetch方法，如下面的代码所示。
- en: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/ProductOrderEdit.js`:'
- en: '[PRE74]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `update` fetch method will take the corresponding shop ID, cartItem ID,
    selected status value, and user credentials to send, along with the request to
    the update order API in the backend. On a successful response from the backend,
    we will update the orders in the view.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`fetch方法将获取相应的商店ID、购物车项目ID、选定的状态值和用户凭据，以及发送到后端更新订单API的请求。在收到后端成功的响应后，我们将更新视图中的订单。'
- en: The `cancelProduct`, `processCharge`, and `update` fetch methods are defined
    in `api-order.js` so that they can call the corresponding APIs in the backend
    to update a canceled product's stock quantity, to create a charge on the customer's
    credit card when the order for a product is processing, and to update the order
    with the product status change, respectively. We will look at the implementation
    of these APIs in the following section.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancelProduct`、`processCharge`和`update`fetch方法定义在`api-order.js`中，以便它们可以调用后端中相应的API来更新已取消产品的库存数量，在处理产品订单时在客户的信用卡上创建费用，以及分别更新订单的产品状态更改。接下来，我们将查看这些API的实现。'
- en: APIs for products ordered
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订购产品的API
- en: Allowing sellers to update the status of a product will require having to set
    up four different APIs, including an API to retrieve the possible status values.
    Then, the actual status update actions will need APIs to handle updates to the
    order itself as the status is changed in order to initiate related actions, such
    as increasing the stock quantity of a canceled product, and to create a charge
    on the customer's credit card when a product is being processed. In the following
    sections, we will look at the API implementations for retrieving possible status
    values, updating an order status, canceling a product order, and processing a
    charge for an ordered product.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 允许卖家更新产品的状态将需要设置四个不同的API，包括一个用于检索可能状态值的API。然后，实际的状态更新操作将需要API来处理订单本身的状态更新，以便启动相关操作，例如增加已取消产品的库存数量，以及在处理产品时在客户的信用卡上创建费用。在以下部分，我们将查看检索可能状态值、更新订单状态、取消产品订单和处理已订购产品费用的API实现。
- en: Get status values
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取状态值
- en: The possible status values of an ordered product are set as enums in the `CartItem`
    schema. To show these values as options in the dropdown view, we will set up a
    GET API route at `/api/order/status_values` that retrieves these values. This
    API route will be declared as follows.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 订单产品的可能状态值在`CartItem`模式中设置为枚举。为了将这些值作为选项显示在下拉视图中，我们将在`/api/order/status_values`上设置一个GET
    API路由，以检索这些值。此API路由将声明如下。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`:'
- en: '[PRE75]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `getStatusValues` controller method will return the enum values for the
    `status` field from the `CartItem` schema. The `getStatusValues` controller method
    is defined as follows.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`getStatusValues`控制器方法将返回`CartItem`模式中`status`字段的枚举值。`getStatusValues`控制器方法定义如下。'
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`:'
- en: '[PRE76]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: We will also need to set up a corresponding `fetch` method in `api-order.js`,
    which is used in the view, in the `ProductOrderEdit` component, to make a request
    to this API, retrieve the status values, and render these as options in the dropdown.
    In the next section, we will look at the update order API endpoint, which needs
    to be called when the seller selects a relevant status value from the dropdown.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`api-order.js`中设置一个相应的`fetch`方法，该方法用于视图中的`ProductOrderEdit`组件，以便向此API发出请求，检索状态值，并在下拉菜单中渲染这些值。在下一节中，我们将查看更新订单API端点，当卖家从下拉菜单中选择相关状态值时需要调用此端点。
- en: Update order status
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新订单状态
- en: When a product's status is changed to any value other than **Processing** or **Cancelled**,
    a PUT request to `'/api/order/status/:shopId'` will directly update the order
    in the database, given that the current user is the verified owner of the shop
    with the ordered product. We will declare the route for this update API like so.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 当产品的状态更改为除**处理中**或**已取消**之外的任何值时，将对`'/api/order/status/:shopId'`发出PUT请求，直接在数据库中更新订单，前提是当前用户是订购产品的商店的验证所有者。我们将如此声明此更新API的路由。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`:'
- en: '[PRE77]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The `update` controller method will query the Order collection and find the
    order with the `CartItem` object that matches the updated product and set the
    `status` value of this matched `CartItem` in the `products` array of the order.
    The `update` controller method is defined as follows.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`控制器方法将查询订单集合，找到与更新产品匹配的`CartItem`对象，并在订单的`products`数组中设置此匹配的`CartItem`的`status`值。`update`控制器方法定义如下。'
- en: '`mern-marketplace/server/controllers/order.controller.js`:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`:'
- en: '[PRE78]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: To access this API from the frontend, we will add an `update` fetch method in `api-order.js` to
    make a call to this update API with the required parameters passed from the view.
    The `update` fetch method will be defined as follows.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 要从前端访问此API，我们将在`api-order.js`中添加一个`update`获取方法，以便调用此更新API，并传递从视图传递的所需参数。`update`获取方法将定义如下。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`:'
- en: '[PRE79]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: This `update` fetch method is called in the `ProductOrderEdit` view when the
    seller selects any value other than Processing or Cancelled from the options in
    the dropdown for an ordered product. In the next section, we will look at the
    cancel product order API, which is invoked if the seller selects Cancelled as
    a value instead.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家从订单产品下拉菜单中选择除“处理”或“已取消”之外的任何值时，会调用`update`获取方法，该方法在`ProductOrderEdit`视图中被调用。在下一节中，我们将查看取消产品订单API，如果卖家选择“已取消”作为值，则会调用此API。
- en: Cancel product order
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消产品订单
- en: When a seller decides to cancel the order for a product, a PUT request will
    be sent to `/api/order/:shopId/cancel/:productId` so that the product's stock
    quantity can be increased and the order can be updated in the database. To implement
    this cancel product order API, we will declare the API route as follows.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家决定取消产品的订单时，将向`/api/order/:shopId/cancel/:productId`发送PUT请求，以便增加产品的库存数量并在数据库中更新订单。为了实现此取消产品订单API，我们将声明API路由如下。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`:'
- en: '[PRE80]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: To retrieve the product associated with the `productId` parameter in the route,
    we will also use the `productByID` product controller method. This will retrieve
    the product and attach it to the request object for the `next` methods.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索与路由中`productId`参数关联的产品，我们也将使用`productByID`产品控制器方法。这将检索产品并将其附加到请求对象中，以便`next`方法可以访问。
- en: To update the product's stock quantity when this API receives a request, we
    will use the `increaseQuantity` controller method, which is added to `product.controller.js`,
    as follows.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 当此API收到请求时，要更新产品的库存数量，我们将使用添加到`product.controller.js`中的`increaseQuantity`控制器方法，如下所示。
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE81]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The `increaseQuantity` controller method finds the product by the matching ID
    in the Product collection and increases the quantity value by the quantity that
    was ordered by the customer. It does this now that the order for this product
    has been canceled.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`increaseQuantity`控制器方法通过在产品集合中找到匹配的ID来查找产品，并将数量值增加客户订购的数量。现在订单已取消，它执行此操作。'
- en: From the view, we will use the corresponding fetch method, which is added in
    `api-order.js`, to call this cancel product order API. The `cancelProduct` fetch
    method is defined as follows.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 从视图中，我们将使用添加到`api-order.js`中的相应获取方法来调用此取消产品订单API。`cancelProduct`获取方法定义如下。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`:'
- en: '[PRE82]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: This `cancelProduct` fetch method is called in the `ProductOrderEdit` view when
    the seller selects Cancelled from the dropdown for an ordered product. In the
    next section, we will look at the process charge API, which is invoked if the
    seller selects Processing as a status value instead.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家在订单产品下拉菜单中选择已取消时，会调用`cancelProduct`获取方法，该方法在`ProductOrderEdit`视图中被调用。在下一节中，我们将查看处理费用API，如果卖家选择“处理”作为状态值，则会调用此API。
- en: Process charge for a product
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为产品处理费用
- en: When a seller changes the status of an ordered product to **Processing**, we
    will set up a backend API to not only update the order but to also create a charge
    on the customer's credit card for the price of the product multiplied by the quantity
    ordered. The route for this API will be declared as follows.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家将已订购产品的状态更改为**处理**时，我们将设置后端API不仅更新订单，还要为客户信用卡创建产品价格乘以订购数量的费用。此API的路由声明如下。
- en: '`mern-marketplace/server/routes/order.routes.js`:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/order.routes.js`:'
- en: '[PRE83]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: To retrieve the order associated with the `orderId` parameter in the route,
    we will use the `orderByID` order controller method, which gets the order from
    the Order collection and attaches it to the request object so that it can be accessed
    by the `next` methods. This `orderByID` method is defined as follows.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索路由中与`orderId`参数关联的订单，我们将使用`orderByID`订单控制器方法，该方法从订单集合中获取订单并将其附加到请求对象中，以便`next`方法可以访问。此`orderByID`方法定义如下。
- en: '`mern-marketplace/server/controllers/order.controller.js:`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/order.controller.js`: '
- en: '[PRE84]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The process charge API will receive a PUT request at `/api/order/:orderId/charge/:userId/:shopId`.
    After successfully authenticating the user, it will create the charge by calling
    the `createCharge` user controller, as we discussed in the *Using Stripe for payments*
    section. Finally, the corresponding order will be updated with the `update` controller
    method, as discussed in the *Update order status* section.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 订单费用API将在`/api/order/:orderId/charge/:userId/:shopId`接收一个PUT请求。在成功验证用户后，它将通过调用我们在*使用Stripe进行支付*部分讨论的`createCharge`用户控制器来创建费用。最后，将使用我们在*更新订单状态*部分讨论的`update`控制器方法更新相应的订单。
- en: From the view, we will use the `processCharge` fetch method in `api-order.js` and
    provide the required route parameter values, credentials, and product details,
    including the amount to charge. The `processCharge` fetch method is defined as
    follows.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 从视图中，我们将使用`api-order.js`中的`processCharge`获取方法，并提供所需的路由参数值、凭证和产品详情，包括要收取的金额。`processCharge`获取方法定义如下。
- en: '`mern-marketplace/client/order/api-order.js`:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/order/api-order.js`:'
- en: '[PRE85]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This `processCharge` fetch method is called in the `ProductOrderEdit` view when
    the seller selects Processing from the dropdown for an ordered product.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 当卖家从下拉菜单中选择“处理”时，`ProductOrderEdit`视图中会调用此`processCharge`获取方法。
- en: With these implementations in place, sellers can view orders that have been
    received for their products in each of their shops and easily update the status
    of each product ordered while the application takes care of additional tasks,
    such as updating stock quantity and initiating payment. This covers the basic
    order management features for the MERN Marketplace application, which can be extended
    further as required. In the next section, we will discuss how the current implementations
    can be easily extended to implement other views for displaying order details.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些实现到位后，卖家可以查看他们每个店铺收到的产品订单，并轻松更新每个已订购产品的状态，同时应用程序处理其他任务，例如更新库存数量和启动支付。这涵盖了MERN
    Marketplace应用程序的基本订单管理功能，可以根据需要进一步扩展。在下一节中，我们将讨论如何轻松扩展当前实现以实现其他用于显示订单详情的视图。
- en: Viewing single-order details
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看单次订单详情
- en: 'With the Order collection and the database access all set up, moving forward,
    it is easy to add the features of listing orders for each user and showing details
    of a single order in a separate view where the user can track the status of each
    ordered product. A view to render the details of a single order to the customer
    can be designed and implemented to look as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置了订单集合和数据库访问之后，继续前进，很容易添加为每个用户列出订单以及在一个单独的视图中显示单个订单的详细信息的功能，用户可以在该视图中跟踪每个已订购产品的状态。可以设计并实现一个视图来向客户展示单个订单的详细信息，其外观如下所示：
- en: '![](img/3884bce0-19cf-4591-9af9-24ebd2f47884.png)'
  id: totrans-424
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3884bce0-19cf-4591-9af9-24ebd2f47884.png)'
- en: 'Following the steps that have been repeated throughout this book to set up
    backend APIs to retrieve data and use it in the frontend to construct frontend
    views, you can develop order-related views as desired. For example, a view to
    display the orders that have been placed by a single user can be rendered as follows:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本书中反复提到的步骤设置后端API以检索数据并在前端构建前端视图，你可以根据需要开发订单相关的视图。例如，可以渲染以下视图来显示单个用户已下订单：
- en: '![](img/8bd10d42-8a7e-4d4a-94b2-281cc8e207a8.png)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8bd10d42-8a7e-4d4a-94b2-281cc8e207a8.png)'
- en: You can apply the lessons you learned while building out the full-stack features
    of the MERN Marketplace application to implement these order detail views, taking
    inspiration from the snapshots of these sample views from the MERN Marketplace
    application.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将构建MERN Marketplace应用程序全栈功能时学到的经验应用到实现这些订单详情视图中，并从MERN Marketplace应用程序的这些样本视图快照中汲取灵感。
- en: The MERN Marketplace application that we developed in this chapter and [Chapter
    7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising MERN Skills with an
    Online Marketplace*, by building on the MERN skeleton application covered the
    crucial features for a standard online marketplace application. This, in turn,
    demonstrated how the MERN stack can be extended to incorporate complex features.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和第7章（03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml）中开发的MERN Marketplace应用程序，*使用在线市场锻炼MERN技能*，通过构建MERN骨架应用程序涵盖了标准在线市场应用程序的关键功能。这反过来又展示了如何扩展MERN堆栈以包含复杂功能。
- en: Summary
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we extended the MERN Marketplace application and explored how
    to add a shopping cart for buyers, a checkout process with credit card payments,
    and order management for the sellers in an online marketplace application.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们扩展了MERN Marketplace应用程序，探讨了如何在在线市场应用程序中为买家添加购物车，实现带有信用卡支付的结账流程，以及为卖家管理订单。
- en: We discovered how the MERN stack technologies can work well with third-party
    integrations as we implemented the cart checkout flow and processed credit card
    charges on ordered products using the tools provided by Stripe for managing online
    payments.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现，当我们实现购物车结账流程并使用Stripe提供的工具处理订单产品的信用卡费用时，MERN堆叠技术可以很好地与第三方集成。
- en: We also unlocked more of what is possible with MERN, such as optimized bulk
    write operations in MongoDB for updating multiple documents in response to a single
    API call. This allowed us to decrease the stock quantities of multiple products
    in one go, such as when a user placed an order for multiple products from different
    stores.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还解锁了MERN的更多可能性，例如在MongoDB中优化批量写入操作，以响应单个API调用更新多个文档。这使得我们能够一次性减少多个产品的库存数量，例如当用户从不同商店订购多个产品时。
- en: With these new approaches and implementations that we explored, you can easily
    integrate payment processing, use offline storage in browsers, and perform bulk database operations
    for any MERN-based application you choose to build.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们探索的这些新方法和实现，你可以轻松集成支付处理，在浏览器中使用离线存储，以及为任何你选择的基于MERN的应用程序执行批量数据库操作。
- en: The marketplace features that you developed in the MERN Marketplace application
    revealed how this stack and structure can be utilized to design and build growing
    applications by adding features that may be simple or more complex in nature.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 你在MERN Marketplace应用程序中开发的市场功能揭示了如何通过添加可能简单或更复杂的特性来利用这个堆叠和结构设计和构建不断增长的应用程序。
- en: In the next chapter, we will take the lessons we've learned so far in this book
    and explore more advanced possibilities with this stack by extending this MERN
    Marketplace application so that it incorporates real-time bidding capabilities.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用本书中迄今为止学到的经验，通过扩展这个MERN Marketplace应用程序，使其包含实时竞标功能，来探索这个堆叠的更多高级可能性。
