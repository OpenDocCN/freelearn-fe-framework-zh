- en: Chapter 2. Working with jQuery in WordPress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 在WordPress中使用jQuery
- en: 'Now that we understand the basics of jQuery and WordPress and have a little
    background on how they''ll interact with each other, we''re now ready to take
    a look at using jQuery to dynamically enhance a WordPress installation. We''ll
    start with getting jQuery included in WordPress and end up with our first cool
    project: Expanding and collapsing content. This is only the beginning of the jQuery
    possibilities in store for your WordPress site! Again, we''ll be using WordPress
    3.0 in this title and the new default Twenty Ten theme with jQuery 1.4.2, but
    rest assured that if your site or project is still using WordPress 2.9, these
    jQuery techniques will work just fine.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了jQuery和WordPress的基础知识，并对它们如何相互作用有了一点背景了，我们现在准备好看看如何使用jQuery动态增强WordPress安装了。我们将从在WordPress中包含jQuery开始，并以我们的第一个酷项目结束：展开和折叠内容。这只是你的WordPress站点中jQuery可能性的开始！再次强调，我们在这个标题中将使用WordPress
    3.0和新的默认Twenty Ten主题与jQuery 1.4.2，但请放心，如果你的站点或项目仍在使用WordPress 2.9，这些jQuery技术也会很好地工作。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Registering jQuery in WordPress
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在WordPress中注册jQuery
- en: Using Google's CDN to include jQuery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用谷歌的CDN来包含jQuery
- en: Reviewing all of jQuery's "secret weapons"
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾所有jQuery的“秘密武器”
- en: Our first jQuery and WordPress enhancement
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的第一个jQuery和WordPress增强
- en: Getting jQuery into WordPress
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将jQuery引入WordPress
- en: 'jQuery can be included into WordPress in three different ways as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery可以以以下三种不同的方式包含到WordPress中：
- en: You can download it from `jQuery.com`, and include it directly with a `script`
    tag into your XHTML header tags, inside your theme's `header.php` file (this method
    works, but is not really recommended for a variety of reasons)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以从`jQuery.com`下载，并直接在XHTML头标签中使用`script`标签包含它，放在你的主题的`header.php`文件中（这种方法可行，但出于各种原因并不推荐）
- en: You can register WordPress' bundled jQuery in themes and plugins
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在主题和插件中注册WordPress捆绑的jQuery
- en: You can also take advantage of Google's CDN (Code Distribution Network) to register
    and include jQuery into your theme and plugins
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以利用谷歌的CDN（代码分发网络）来注册和包含jQuery到你的主题和插件中。
- en: 'We covered the basics of the first method in [Chapter 1](ch01.html "Chapter 1. Getting
    Started: WordPress and jQuery"), *Getting Started: WordPress and jQuery*. WordPress
    is so flexible that any user with the right admin level can come along and update,
    enhance the theme, or install additional plugins which may also use a version
    of jQuery or other JavaScript libraries. Therefore, including jQuery or any JavaScripts
    directly into the theme with hardcoded script tags is not recommended as it could
    cause conflicts with other scripts and libraries included into the WordPress site
    through theme customizations or plugins added to the WordPress installation. In
    this chapter, let''s take a look at using the two remaining methods, registering
    jQuery through WordPress'' **Script** API and using Google''s CDN.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第一章](ch01.html "第一章. 开始：WordPress和jQuery")中涵盖了第一种方法的基础知识，*开始：WordPress和jQuery*。WordPress非常灵活，任何具有正确管理员级别的用户都可以更新、增强主题，或安装其他插件，这些插件可能也使用jQuery或其他JavaScript库的版本。因此，直接将jQuery或任何JavaScript直接包含到主题中，带有硬编码脚本标记，这并不推荐，因为它可能会与通过主题定制或添加到WordPress安装的插件中包含的其他脚本和库发生冲突。在本章中，让我们来看看使用剩余的两种方法，通过WordPress的**Script**
    API注册jQuery和使用谷歌的CDN。
- en: jQuery now comes bundled with WordPress
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery现在与WordPress捆绑在一起
- en: As of WordPress 2.7, jQuery and several other JavaScript libraries and plugins
    have been bundled and are available through WordPress' Script API through a handy
    function called `wp_enqueue_script`. Actually, WordPress has had jQuery and quite
    a few other JavaScript libraries (including `Script.aculo.us` with Prototype and
    many more) bundled into the `wp-includes` directory for some time, but until version
    2.7, these includes were not so easily accessible.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从WordPress 2.7开始，jQuery和其他几个JavaScript库和插件已经捆绑到WordPress的Script API中，并通过一个叫做`wp_enqueue_script`的方便函数可用。实际上，WordPress已经将jQuery和相当多的其他JavaScript库（包括与Prototype和更多其他库一起的`Script.aculo.us`）捆绑到`wp-includes`目录中一段时间了，但直到2.7版本，这些包都不那么容易访问。
- en: Registering jQuery in a WP theme
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在WP主题中注册jQuery
- en: 'You can activate WordPress'' bundled jQuery in two different ways:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以两种不同的方式激活WordPress捆绑的jQuery：
- en: 'First, you can place the following code in your `header.php` file before the
    closing `</head>` tag:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的`header.php`文件中在闭合的`</head>`标签前放置以下代码：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you can register the `wp_enqueue_script` (and any custom jQuery
    code you write) in your theme''s `functions.php` file. If your theme doesn''t
    have a `functions.php` file, simply create a new file, name it `functions.php`,
    and place it in your theme''s root directory with your other template files (`functions.php`
    is a standard template file that''s included with the default theme we''re using).
    Place the following code into your `functions.php` file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以在主题的`functions.php`文件中注册`wp_enqueue_script`（以及你编写的任何自定义jQuery代码）。如果你的主题没有`functions.php`文件，只需创建一个新文件，命名为`functions.php`，并将其放在主题的根目录中，与其他模板文件一起放置（`functions.php`是一个与我们正在使用的默认主题一起提供的标准模板文件）。将以下代码放入你的`functions.php`文件中：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Avoiding problems registering jQuery
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免注册jQuery时遇到的问题
- en: 'The first time that I ever attempted to load up jQuery using the `wp_enqueue_script`
    (both in the `functions.php` file and through the `header.php` file), I just could
    not get it to work. After some hair pulling and a few hours on the WordPress Codex,
    I finally realized the following facts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次尝试使用`wp_enqueue_script`加载jQuery时（无论是在`functions.php`文件中还是通过`header.php`文件），都无法使其工作。在WordPress
    Codex上花了一些时间和一些头发后，我终于意识到了以下事实：
- en: If you're loading directly into your `header.php` template file, make sure that
    the `wp_enqueue_script` function is above your `wp_head` function. Your custom
    jQuery code must go below the `wp_head` function.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你直接加载到你的`header.php`模板文件中，请确保`wp_enqueue_script`函数位于你的`wp_head`函数之前。你的自定义jQuery代码必须位于`wp_head`函数之后。
- en: If you're registering the `wp_enqueue_script` in the `functions.php` file, make
    sure that it comes before any custom functions that load through the `add_filter`
    function into the `wp_head`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在`functions.php`文件中注册`wp_enqueue_script`，请确保它出现在通过`add_filter`函数加载到`wp_head`中的任何自定义函数之前。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Read up on the** `wp_enqueue_script` **function!**'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**了解一下** `wp_enqueue_script` **函数！**'
- en: 'This function is part of WordPress'' Script API and it actually does a lot
    more than just load up jQuery! As I mentioned, there are many, in fact well over
    fifty, JavaScript toolkits, frameworks, user interface libraries, plugins, and
    helpers that you can load up safely using the `wp_enqueue_script` function. Check
    it out here: [http://codex.wordpress.org/Function_Reference/wp_enqueue_script](http://codex.wordpress.org/Function_Reference/wp_enqueue_script).'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数是WordPress的脚本API的一部分，实际上它做的不仅仅是加载jQuery！正如我所提到的，实际上有超过五十个JavaScript工具包、框架、用户界面库、插件和帮助程序，你可以安全地使用`wp_enqueue_script`函数进行加载。在这里查看：[http://codex.wordpress.org/Function_Reference/wp_enqueue_script](http://codex.wordpress.org/Function_Reference/wp_enqueue_script)。
- en: Using Google's CDN
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google的CDN
- en: Personally, I am a little torn about registering and referencing the copy that
    comes with WordPress. I've discovered that loading the library from **Google Code's
    Code Distribution Network** (**CDN**) is sometimes a better way to go. The CDN
    saves on bandwidth, allowing your site to do some parallel processing while downloading
    other scripts and collateral. Plus, it's easy to always get the most current version
    of jQuery. jQuery's library loads very quickly from Google's CDN and, as a bonus,
    the library will already be cached if your site's user has previously visited
    another site that delivers jQuery from Google Code's CDN.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我对注册并引用WordPress自带的副本有些犹豫。我发现，有时从**Google Code的代码分发网络**（**CDN**）加载库是一个更好的选择。CDN节省了带宽，允许您的站点在下载其他脚本和相关内容时进行一些并行处理。而且，可以很容易地始终获取最新版本的jQuery。从Google的CDN加载jQuery库非常快，作为一个额外的奖励，如果您的站点用户以前访问过另一个从Google
    Code的CDN提供jQuery的站点，该库将已经缓存。
- en: Registering and including jQuery through Google's CDN into a theme
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在主题中通过Google的CDN注册和包含jQuery
- en: 'To include jQuery from Google Code''s CDN, we''ll be sure to deregister jQuery
    then register through Google''s CDN. This is the beauty of registering and using
    the `wp_enqueue_script` function: if any other plugin or script requires jQuery,
    and doesn''t have any conflicts with the version loading up from Google, that
    script will use the already loaded Google CDN library. If a script depends on
    a specific version of jQuery, say 1.3.2 or 1.2.6, and the CDN is loading up version
    1.4.2, then that script will go ahead and load the version of jQuery it requires.
    Because (as we''ll learn) every script loaded through the Script API stays in
    `noConflict` mode, it''s OK to have the two library versions loaded as long as
    they''re registered and required.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Google Code 的 CDN 中包含 jQuery，我们将确保注销 jQuery，然后通过 Google 的 CDN 进行注册。这就是注册和使用
    `wp_enqueue_script` 函数的美妙之处：如果任何其他插件或脚本需要 jQuery，并且与从 Google 加载的版本没有冲突，那么该脚本将使用已加载的
    Google CDN 库。如果脚本依赖于特定版本的 jQuery，比如 1.3.2 或 1.2.6，并且 CDN 正在加载 1.4.2 版本，那么该脚本将继续加载它需要的
    jQuery 版本。因为（正如我们将学到的那样）通过 Script API 加载的每个脚本都保持在 `noConflict` 模式下，所以只要它们被注册和需要，同时加载两个库版本是可以的。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Google offers a great versioning system that allows you to be as precise as
    you want, or just pull the latest stable version. Consider the previous code example
    (note the highlighted number, 1.4, in the previous code example).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Google 提供了一个很棒的版本控制系统，允许你尽可能精确，或者只拉取最新的稳定版本。考虑前面的代码示例（注意前面代码示例中的突出显示的数字，1.4）。
- en: Understanding Google's versioning system
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 了解 Google 的版本控制系统
- en: That previous registration script references version 1.4.2 of jQuery (the most
    recent version as of writing this title). When jQuery's developers release a new
    version, say, 1.4.3, that version will automatically be called by that same URL
    because I did not pinpoint the version's specifics. In the same vein, I could
    choose to call `...jquery/1.3/jquery..`. that would give me `1.3.2` the highest
    version in the `1.3` release. And you guessed it, targeting a simple `...jquery/1/..`.
    would pull the most recent version of jQuery, up to version 1.9.x, until jQuery
    turns over to version 2.0!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述注册脚本引用了 jQuery 的 1.4.2 版本（在撰写本标题时是最新版本）。当 jQuery 的开发人员发布一个新版本，比如 1.4.3 时，该版本将自动由相同的
    URL 调用，因为我没有准确定位版本的具体细节。同样，我可以选择调用 `...jquery/1.3/jquery..`，这将给我 `1.3` 版本中的最高版本
    `1.3.2`。你猜对了，针对一个简单的 `...jquery/1/..` 将会拉取最新版本的 jQuery，直到 jQuery 升级到 2.0 版本！
- en: Generally, it's good practice to always have the most recent library load, but
    you never know, you may use a jQuery plugin or write some of your own code that
    doesn't work well with a newer version. You'd then want to target the last specific
    version of the library that works with your plugins or custom scripts, until you
    can fix and update them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，始终加载最新的库是一个好习惯，但你永远不知道，你可能会使用一个 jQuery 插件或编写一些自己的代码，与新版本不兼容。然后，你会想要针对与你的插件或自定义脚本兼容的库的最后一个特定版本，直到你能够修复和更新它们。
- en: Using WordPress' bundled jQuery versus including your own jQuery download or
    using Google's CDN
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 WordPress 的捆绑 jQuery 与包含自己的 jQuery 下载或使用 Google 的 CDN
- en: As I mentioned earlier, the `wp_enqueue_script` function allows for a safe load
    of jQuery (and other includes) into `noConflict` mode. As long as you deregister
    and register for jQuery from the Google CDN, the library will load into WordPress
    with the same `noConflict` mode protection. I really like to take advantage of
    Google's CDN, for the variety of performance reasons I mentioned, but for large
    projects with lots of editors and administrators making different decisions on
    how to manage the WordPress site and what WordPress plugins to use, I play it
    safe and register the bundled version into the theme. Also, for development, I
    find it nice to have jQuery already running locally on my MAMP or LAMP server,
    if I'm developing a theme and yet have disconnected from the Web due to traveling
    (or the need for enhanced productivity). Once a site is live, I'll consider switching
    it over to the Google CDN version of jQuery.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，`wp_enqueue_script` 函数允许安全地将 jQuery（和其他包含项）加载到 `noConflict` 模式中。只要你从
    Google CDN 注销并注册 jQuery，该库就会以相同的 `noConflict` 模式保护加载到 WordPress 中。我真的很喜欢利用 Google
    的 CDN，因为我提到的各种性能原因，但对于大型项目，有许多编辑和管理员对如何管理 WordPress 站点以及使用什么 WordPress 插件作出不同决策，我会保守行事并将捆绑版本注册到主题中。此外，对于开发而言，如果我正在开发一个主题，并且由于旅行（或需要提高生产力）而与网络断开连接，我会发现在我的
    MAMP 或 LAMP 服务器上已经运行 jQuery 很好。一旦网站上线，我会考虑将其切换到 Google CDN 版本的 jQuery。
- en: Keeping conflicts out!
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免冲突！
- en: 'Because WordPress and jQuery are anticipating other libraries to be loaded
    which may use the short variable, `$`. The `wp_enqueue_script` ensures jQuery
    is loaded up in `noConflict` mode. Therefore, you''ll also need to make sure to
    write your custom jQuery code in `noConflict` mode''s **syntax**. The easiest
    way to do this is to replace the `$` variable (common in many jQuery scripts)
    with the full `jQuery` variable, as I''ve discussed in [Chapter 1](ch01.html "Chapter 1. Getting
    Started: WordPress and jQuery"), *Getting Started: WordPress and jQuery*, and
    done in my two previous samples.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为WordPress和jQuery预期其他可能使用短变量`$`的库将被加载。`wp_enqueue_script`确保以`noConflict`模式加载jQuery。因此，你还需要确保使用`noConflict`模式的**语法**编写你的自定义jQuery代码。最简单的方法是将`$`变量（在许多jQuery脚本中常见）替换为完整的`jQuery`变量，正如我在[第1章](ch01.html
    "第1章。入门：WordPress和jQuery")中讨论的，*入门：WordPress和jQuery*，并在我之前的两个示例中完成的那样。
- en: Setting your own jQuery variable
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你自己的jQuery变量
- en: 'If you find the `jQuery` variable tedious to write out, yet want to remain
    in `noConflict` mode, you can replace the standard `$` variable to any variable
    you want as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得写出`jQuery`变量很麻烦，但又想保持在`noConflict`模式下，你可以将标准的`$`变量替换为你想要的任何变量，如下所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: But I really want to use the $ variable!
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但我真的想使用$变量！
- en: 'You **should not** use the `$` variable for jQuery within WordPress. OK, I
    know, you''ve got a good reason. Say for instance, you''re copying a jQuery script
    over from another non-WordPress project and it''s proving cumbersome to covert
    all the `$` variables to `jQuery` or some other custom shortcut variable. Fine.
    (Never heard of "Find and Replace"?) At any rate, here is an example of how to
    shortcut jQuery to safely use the `$` variable:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在WordPress中**不应**使用`$`变量来表示jQuery。好吧，我知道，你有一个很好的理由。比如说，你正在从另一个非WordPress项目复制一个jQuery脚本，将所有的`$`变量转换为`jQuery`或一些其他自定义快捷变量可能会很麻烦。好吧。（从未听说过“查找和替换”？）无论如何，这里是一个如何将jQuery快捷方式安全地使用`$`变量的示例：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The only drawback to the above solution is, I've found it's easy to start working
    with the `$` variable and then forget to encapsulate other scripts in the above
    jQuery function. If all my jQuery scripts use the `jQuery` variable or a custom
    variable (such as `$jq`), I'm much better at staying in `noConflict` mode.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述解决方案的唯一缺点是，我发现很容易开始使用`$`变量，然后忘记将其他脚本封装在上述jQuery函数中。如果我的所有jQuery脚本都使用`jQuery`变量或自定义变量（如`$jq`），我在`noConflict`模式下会更好地工作。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Including jQuery in a WordPress plugin**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**在WordPress插件中包含jQuery**'
- en: 'You can include jQuery in a WordPress plugin using any of the earlier mentioned
    methods. However, you''ll need some familiarity working with WordPress plugins.
    We''ll cover this topic in detail by learning more about WordPress plugins later
    in [Chapter 3](ch03.html "Chapter 3. Digging Deeper: Understanding jQuery and
    WordPress Together"), *Digging Deeper: Understanding jQuery and WordPress Together.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用前面提到的任何方法将jQuery包含到WordPress插件中。但是，你需要对使用WordPress插件有所了解。我们将在稍后的[第3章](ch03.html
    "第3章。深入挖掘：理解jQuery和WordPress")中详细介绍这个主题，*深入挖掘：理解jQuery和WordPress*。
- en: Launching a jQuery script
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动jQuery脚本
- en: 'Most of the time you''ll want your script to launch and/or be available as
    soon as the DOM is loaded and ready. For this, you can use the standard "on document
    ready" technique as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，你希望你的脚本在DOM加载和准备好后立即启动和/或可用。为此，你可以使用标准的“文档就绪”技术，如下所示：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can reduce the previous code, just a bit, by using the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用以下代码稍微简化上述代码：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the `jQuery` variable is evoked and a function immediately passed, jQuery
    assumes the `.ready` event is implied and will run the next selection and function
    as soon as the DOM is loaded.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用了`jQuery`变量并立即传递了一个函数，jQuery会假定暗示了`.ready`事件，并在DOM加载完成后立即运行下一个选择器和函数。
- en: Our first WordPress and jQuery setup
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个WordPress和jQuery设置
- en: I hear you. Enough talking already. Let's get jQuery rolling. The majority of
    this book's code and samples use WordPress 3.0 RC and the brand new default theme
    is "Twenty Ten". It's a great, clean, HTML5 valid theme. Even if you want to enhance
    an older version of WordPress, say 2.8 or 2.9, you'll be glad to know that every
    one of this title's scripts (or approximate versions of it) was originally written
    and tested in version 2.8.6 and 2.9.2 before being ported over to 3.0.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我明白了。已经说了足够多的话。让我们开始使用 jQuery 吧。本书的大部分代码和示例使用的是 WordPress 3.0 RC 和全新的默认主题“Twenty
    Ten”。这是一个很棒、干净、符合 HTML5 标准的主题。即使你想增强旧版本的 WordPress，比如 2.8 或 2.9，你也会很高兴地知道，本书的每一个脚本（或其近似版本）都是最初在
    2.8.6 和 2.9.2 版本中编写和测试的，然后才移植到 3.0 版本中。
- en: Where applicable, I'll show you alternative jQuery solutions for WordPress'
    2.9.2 default theme as well as point out differences between jQuery's 1.3.2 library,
    which comes bundled with version 2.9.2, and jQuery's 1.4.2 library, which is bundled
    with WordPress version 3.0.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当的情况下，我将向你展示 WordPress 2.9.2 默认主题的替代 jQuery 解决方案，并指出 jQuery 1.3.2 库（随版本 2.9.2
    捆绑）与 jQuery 1.4.2 库（随 WordPress 版本 3.0 捆绑）之间的区别。
- en: The point of every example is to show you not just how to enhance WordPress'
    default theme, but any theme, and I hope you get creative with the examples and
    find ways to apply them in unique ways to all sorts of WordPress versions, themes,
    and plugins!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个示例的重点不仅是向你展示如何增强 WordPress 的默认主题，而是任何主题，我希望你能发挥创造力，利用这些示例找到将它们以独特的方式应用于各种
    WordPress 版本、主题和插件的方法！
- en: Registering jQuery in our setup
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的设置中注册 jQuery
- en: 'Because the bundled version of jQuery that comes with WordPress 3.0 also happens
    to be the most current version of jQuery available, 1.4.2, I''ll simply navigate
    to `wp-content/themes/twentyten` and open up the `header.php` file and use the
    basic `wp_enqueue_script` function to evoke jQuery as shown:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因为随 WordPress 3.0 一起提供的捆绑版本的 jQuery 也恰好是可用的最新版本的 jQuery，即 1.4.2，我将简单地导航到`wp-content/themes/twentyten`并打开`header.php`文件，然后使用基本的`wp_enqueue_script`函数来调用
    jQuery，如下所示：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Registering your own custom script file
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册您自己的自定义脚本文件
- en: Next, we'll need to include a separate script file into our theme that will
    have our custom jQuery scripts. I would like to create a directory in the theme
    named `js` where I will keep all of my JavaScripts. Inside that directory, I'll
    create a file and name it as `custom-jquery.js`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将一个单独的脚本文件包含到我们的主题中，这个文件将有我们的自定义 jQuery 脚本。我想在主题中创建一个名为`js`的目录，我将在那里保存所有我的
    JavaScripts。在那个目录中，我将创建一个文件并命名为`custom-jquery.js`。
- en: 'Here''s the neat bit: you can use `wp_enqueue_script` to include any script
    that you write. You''ll do this so that you can announce that the script is dependent
    on jQuery and WordPress will therefore, load jQuery as well, if for some reason,
    jQuery isn''t loaded already! You''ll want to place your custom scripts below
    the jQuery call, yet before the `wp_head()` call.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有个很棒的东西：你可以使用`wp_enqueue_script`来包含你写的任何脚本。你将这样做是为了宣布该脚本依赖于 jQuery，因此如果出于某种原因，jQuery
    尚未加载，WordPress 将加载 jQuery！你将想把你的自定义脚本放在 jQuery 调用下面，但在`wp_head()`调用之前。
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the above function, `wp_enqueue_script`, I first registered a name for my
    script as `custom-jquery`. Then in the next parameter, I told WordPress where
    to find my script, using the `get_bloginfo` template tag to direct WordPress to
    the `twentyten` theme''s folder "`.../js/custom-jquery.js`". For the third parameter
    of the function, I set the script as dependent on `jquery`, and in the final parameter
    I simply set a version number. I usually set this number as the day''s date. If
    I update the script, I try and update this date in the function, and as a result,
    when the theme "renders" my script loads in looking like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述函数`wp_enqueue_script`中，我首先注册了我的脚本名为`custom-jquery`。然后在下一个参数中，我告诉 WordPress
    在哪里找到我的脚本，使用`get_bloginfo`模板标记将 WordPress 导向`twentyten`主题的文件夹 "`.../js/custom-jquery.js`"。对于函数的第三个参数，我将脚本设置为依赖于`jquery`，在最后一个参数中，我简单地设置了一个版本号。我通常将这个数字设置为当天的日期。如果我更新了脚本，我会尝试更新函数中的日期，因此当主题“渲染”时，我的脚本加载起来看起来像这样：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This helps a browser load the script "fresh" instead of loading it from the
    cache if I ever update it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于浏览器“新鲜”加载脚本，而不是如果我更新了脚本，则从缓存中加载脚本。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**The previous custom script include method works for the jQuery library itself
    too!**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**之前的自定义脚本包含方法也适用于 jQuery 库本身！**'
- en: Say in the near future jQuery updates to version 1.4.3 (or 1.5 and so on) but
    it's going to be a while before WordPress updates and includes that version. You
    could of course use the Google CDN to register the latest script version but if,
    for some reason, you didn't want to use the Google CDN, you could simply download
    the latest version of jQuery from the jQuery.com site and place it inside your
    theme's root folder and register it using the custom registration method we just
    used to include our `custom-jquery.js` file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，在不久的将来，jQuery 更新到版本 1.4.3（或 1.5 等等），但是在 WordPress 更新并包含该版本之前还需要一段时间。你当然可以使用
    Google CDN 注册最新的脚本版本，但是，如果出于某种原因，你不想使用 Google CDN，那么你可以直接从 jQuery.com 网站下载最新版本的
    jQuery，并将其放置在你主题的根目录中，并使用我们刚刚用来包含我们的 `custom-jquery.js` 文件的自定义注册方法进行注册。
- en: Don't forget to `deregister` the bundled jQuery first!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了首先 `deregister` 绑定的 jQuery！
- en: 'Also: Calling a script in through `wp_enqueue_script`"registers" it at the
    same time so there''s no need to call the `register` function separately if using
    `wp_enqueue_script`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还有：通过 `wp_enqueue_script` 调用脚本时，同时“注册”它，因此如果使用 `wp_enqueue_script`，就不需要单独调用
    `register` 函数。
- en: Setting up the custom-jquery file
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置自定义 jQuery 文件
- en: 'Finally, let''s open up the `custom-jquery.js` file, and using the technique
    we learned earlier, set up the shortcut for jQuery''s document ready function
    as the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们打开 `custom-jquery.js` 文件，并使用我们之前学到的技巧，设置 jQuery 的文档就绪函数的快捷方式如下：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That's it! Let's get started discovering jQuery's "secret weapons" and putting
    them to use. You can now place any code described in the following sections in
    your `custom-jquery.js` file and experiment with it!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！让我们开始探索 jQuery 的“秘密武器”并将它们投入使用吧。现在，你可以将以下各节描述的任何代码放入你的 `custom-jquery.js`
    文件中，并进行实验！
- en: 'jQuery secret weapon #1: Using selectors and filters'
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'jQuery 的秘密武器 #1：使用选择器和过滤器'
- en: 'It is time to start having some fun with jQuery! I feel jQuery can be broken
    down into three core strengths, what I deem as its "secret weapons":'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候开始享受一些 jQuery 的乐趣了！我觉得 jQuery 可以分解为三个核心优势，我称之为它的“秘密武器”：
- en: Understanding selectors and filters
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解选择器和过滤器
- en: Manipulating CSS and content
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵 CSS 和内容
- en: Working with events and effects
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理事件和效果
- en: If you get a handle on these top three strengths, you're well on your way to
    being a jQuery rockstar!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你掌握了这三个最重要的优点，那么你就已经在成为 jQuery 的巨星的路上了！
- en: This first item, understanding selectors and filters, is **essential**. You
    need to have a strong understanding of selectors and filters if you're going to
    be able do anything else with jQuery. The better you are at using selectors and
    filters, the better you'll be with jQuery period.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项，理解选择器和过滤器，是**必不可少**的。如果你想要能够使用 jQuery 做任何其他事情，你就需要对选择器和过滤器有很强的理解能力。你在使用选择器和过滤器方面越好，你在整个
    jQuery 方面就会越好。
- en: Selectors and filters give you the ability to (you guessed it!) select objects
    on your page into the jQuery wrapper object and then work with and manipulate
    them in just about any way you'd see fit. The selectors will allow you to easily
    grab an array of elements using easy CSS syntax. Filters will then further narrow
    down and refine the results of that array.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器和过滤器让你有能力（你猜对了！）将页面上的对象选择到 jQuery 包装器对象中，然后以几乎任何你认为合适的方式来使用和操作它们。选择器将允许你使用简单的
    CSS 语法轻松地抓取一个元素数组。过滤器将进一步缩小和精炼该数组的结果。
- en: Keep in mind, the objects selected into the jQuery wrapper using selectors and
    filters are not really DOM elements anymore. They are an array of objects in the
    jQuery object wrapper that have a whole set of functions and capabilities available.
    If you ever need to, you can weed down through all the jQuery added items and
    functionality in each array element to the actual DOM element, but why? The whole
    point of jQuery is to get you around that but it's good to know it's there.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，使用选择器和过滤器将对象选择到 jQuery 包装器中后，这些对象不再是真正的 DOM 元素了。它们是一个对象数组，位于 jQuery 对象包装器中，具有一整套可用的函数和功能。如果你有需要的话，你可以通过每个数组元素中添加的
    jQuery 项目和功能来逐个逐个地找到实际的 DOM 元素，但为什么呢？jQuery 的整个目的就是为了避免你这样做，但知道它在那里也是好的。
- en: Selecting anything you want from the document
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从文档中选择任何你想要的东西
- en: In the following examples, we'll be looking at selectors and filters; but to
    illustrate jQuery's selection, I'll be using a function called `css()`. I'll cover
    that function and a lot more in later sections. Right now, just focus on the selector
    and filter at the beginning of the samples.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将看看选择器和过滤器；但为了说明jQuery的选择，我将使用一个名为`css()`的函数。我将在后面的部分中介绍该函数和更多内容。现在，只需关注样本开头的选择器和过滤器。
- en: The essence of jQuery selectors is that they are CSS syntax based. This means
    that most of you are going to find you can work with jQuery very easily, as far
    as how you use CSS to target and style specific elements on your page.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery选择器的本质是它们基于CSS语法。这意味着大多数人会发现，您可以非常容易地使用jQuery，就像您如何使用CSS来定位和样式化页面上的特定元素一样。
- en: 'Selections are declared in the beginning of the main jQuery function as:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 选择在主要jQuery函数的开头声明：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also select the following elements into the jQuery wrapper based on
    CSS syntax:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以根据CSS语法将以下元素选择到jQuery包装器中：
- en: HTML **tag names** such as `body, p, h1, h2, div`, and so on
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML **标签名称**，如 `body, p, h1, h2, div` 等等
- en: The **id attribute** that is used to select instances and is denoted by a `#`
    (hash) in CSS, as in `#header` or `#sidebar`
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用在CSS中用 `#`（井号）表示的**id属性**，如`#header`或`#sidebar`。
- en: And the **class attribute**, which is denoted by a `.(dot)` in CSS as in `.body`
    or `.post`
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及**类属性**，在CSS中用`.`（点）表示，如`.body`或`.post`
- en: 'Of course, any of the combinations that you''re allowed to use in CSS to target
    an element, you can perform with jQuery. For example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以使用CSS中允许的任何组合来定位元素，您也可以使用jQuery执行。例如：
- en: '`Tag` (space, or no space) `#id` or `.className`, such as `div#sidebar li`—this
    will grab *all* `li` instances in a `div` with the ID name of `sidebar`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标签`（空格，或无空格）`#id` 或 `.className`，例如 `div#sidebar li`—这将抓取`sidebar` ID 名称中的
    `div` 中的 *所有* `li` 实例'
- en: '`Tag`,(comma) `.class` such as `p, .post`—the comma ensures this will grab
    everything that is *either* a paragraph *or* marked with the `.post` class'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标签`，（逗号）`.class` 如 `p, .post`—逗号确保这将抓取所有 *要么* 是段落 *要么* 用`.post`类标记的内容'
- en: 'To clarify, just like in CSS, you can also use **syntax** to *structure* the
    selector:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清，就像在CSS中一样，您也可以使用**语法**来*结构化*选择器：
- en: 'A **comma** means select this element, (and) this element. For example: `div,
    p` (selects all `div` tags *and* all `p` tags).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逗号表示选择此元素，（和）此元素。例如：`div, p`（选择所有`div`标签*和*所有`p`标签）。
- en: 'A **space** means select this element (which has) this element within it. For
    example: `div p .className` (selects all `div` tags that have paragraph `p` tags
    inside them *with* any other elements assigned to `.className` class *inside*
    the `p` tag).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空格表示选择此元素（其中有）此元素在内部。例如：`div p .className`（选择所有具有段落`p`标签的`div`标签，其中 *带有* 任何其他分配给`.className`类的元素
    *在* `p` 标签内）。
- en: 'Last, **no space** would indicate a class applied directly to an element not
    just held within it: `p.className` (selects all paragraph `p` tags with the `.className`
    assigned to it. This *would not* select a `div` tag that had the same `.className`
    class assigned to it).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，**没有空格** 将表示直接应用于元素而不仅仅是包含在其中的类：`p.className`（选择所有带有`.className`分配的段落 `p`
    标签。这将 *不会* 选择具有相同`.className`类分配的 `div` 标签）。
- en: 'In addition to standard CSS comma space and attached id and class names, within
    jQuery you can also use these additional symbols to clarify your selections:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的CSS逗号空格和附加的id和类名之外，在jQuery中，您还可以使用这些额外的符号来澄清您的选择：
- en: The greater than sign `>` will only find child elements of a parent that meets
    the selection.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于号 `>` 仅会查找符合选择条件的父元素的子元素。
- en: For example, `.post > p` will find paragraph p tags that are directly inside
    the `.post` class. `p` tags inside a different class, within the `.post` class
    *will not* be selected.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`.post > p` 将找到直接位于 `.post` 类中的段落 `p` 标签。在 `.post` 类内部的不同类中的 `p` 标签 *将不*
    被选择。
- en: Let's compare `".post (space) p"` to `".post> p"` and take a look at the results.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较 `".post（空格）p"` 和 `".post> p"` 并查看结果。
- en: 'In our first example, we will examine the code as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个示例中，我们将如下检查代码：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that this code produces an output similar to the next screenshot, which
    shows how all paragraphs are highlighted, even though they are nested another
    level deep with a class named `.entry-content:`
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此代码生成类似于下一个截图的输出，显示了所有段落的高亮显示，即使它们嵌套在具有名为`.entry-content`的类中：
- en: '![Selecting anything you want from the document](img/1742_02_01.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![从文档中选择任何您想要的内容](img/1742_02_01.jpg)'
- en: 'However, let''s look at this code example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们看一下这个代码示例：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And let's also look at the following screenshot. We find that no paragraphs
    are highlighted, because they are inside another `div` tag with a class named
    `.entry-content` and thus, *not* a child of the `.post`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也看一下以下截图。我们发现没有段落被突出显示，因为它们位于另一个具有名为 `.entry-content` 的 `div` 标签内，因此 *不*
    是 `.post` 的子元素。
- en: '![Selecting anything you want from the document](img/1742_02_02.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![从文档中选择任何你想要的内容](img/1742_02_02.jpg)'
- en: 'The `+` selector will find all *next* elements to the matching selector. For
    example: `li + li` will select every list `li` item within a list, *except* for
    the first item. Just the items *next* to that first item as shown:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 选择器将找到与匹配选择器相匹配的所有 *下一个* 元素。例如：`li + li` 将选择列表中每个列表项 `li`，*除了* 第一项。只有与该第一项
    *相邻* 的项目如下所示：'
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot illustrates this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了这一点：
- en: '![Selecting anything you want from the document](img/1742_02_03.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![从文档中选择任何你想要的内容](img/1742_02_03.jpg)'
- en: 'The `~` selector will find all the siblings of the selector. For example: `li
    ~ li` will select every list item within a list again, except for the first item,
    just the sibling items of that first item. The code example is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`~` 选择器将找到选择器的所有兄弟元素。例如：`li ~ li` 将选择列表中除第一项之外的每个列表项，只选择该第一项的兄弟项。代码示例如下：'
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As siblings are often next to a selected item, the `+` and `~` selectors can
    often receive similar results. Note how the following screenshot looks similar
    to the previous one:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由于兄弟元素通常紧邻被选定的项，因此 `+` 和 `~` 选择器通常会获得类似的结果。注意以下截图与上一截图相似：
- en: '![Selecting anything you want from the document](img/1742_02_04.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![从文档中选择任何你想要的内容](img/1742_02_04.jpg)'
- en: Filtering those selections
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤这些选择
- en: Many of you can probably do most of what you need with just the basic CSS style
    selectors. But wait, there's more! Filters are the part of selections that I find
    incredibly useful, especially considering that we're working with WordPress. Again,
    with a WordPress theme, a lot of your HTML elements, IDs, and class names are
    probably being generated by a theme that you're not the author of or, for various
    reasons, you don't want to edit or perhaps you're just not allowed to edit the
    theme. (What's that? Designers get a little "testy" when developers start mucking
    about with their markup? I had no idea.) But that's OK. With filters, you simply
    don't have to.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人可能只需使用基本的 CSS 样式选择器就能满足大部分需求。但是，等等，还有更多！过滤器是我发现非常有用的选择部分，特别是考虑到我们正在使用 WordPress。同样，对于
    WordPress 主题，你的许多 HTML 元素、ID 和类名可能是由你不是作者的主题生成的，或者由于各种原因，你不想编辑它们，或者你可能被禁止编辑主题。（什么？设计师在开发人员开始编辑他们的标记时有点“暴躁”？我不知道。）但没关系。有了过滤器，你根本不必担心。
- en: The thing is, starting out with jQuery, it's tempting to want to go in and change
    the HTML markup to something that is easier to select with jQuery. But with WordPress,
    this is not easy. Changing the markup means you run the risk of breaking the theme
    or worse, having to remind content editors to manually add specific markup to
    posts and pages (which in some ways, defeats the purpose of using WordPress in
    the first place). Understanding filters will allow you to have precise control
    over your selections in every case and scenario, every time.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，初学 jQuery 时，想要去更改 HTML 标记以便更容易地用 jQuery 进行选择是很诱人的。但是在 WordPress 中，这并不容易。更改标记意味着你有可能破坏主题，或者更糟糕的是，不得不提醒内容编辑者手动向帖子和页面添加特定标记（在某些方面，这有悖于使用
    WordPress 的初衷）。理解过滤器将允许你在每种情况和场景中对你的选择进行精确控制，每一次。
- en: It's very easy to refine a filter, you're just going to include these items
    that will take your selected elements and match them to specific conditions, like
    their position or index relative to other elements. Again, in keeping with spirit
    of CSS selection syntax, some of these filters look similar to **CSS pseudo classes**,
    such as `:hover` and `:first-child`. These are not all actually CSS pseudo classes;
    they won't work in a CSS stylesheet, but they'll work in jQuery.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易细化过滤器，你只需包括这些项目，它们将获取你选定的元素并将它们与特定条件匹配，例如它们相对于其他元素的位置或索引。同样，为了符合 CSS 选择语法的精神，一些这些过滤器看起来类似于
    **CSS 伪类**，例如 `:hover` 和 `:first-child`。这些实际上并不都是 CSS 伪类；它们在 CSS 样式表中不起作用，但在 jQuery
    中会起作用。
- en: 'These filters are broken down in the jQuery API in the following categories
    (listed as I find them most useful to WordPress development): Basic filters, Content
    filters, Child filters, Form filters, Attribute filters, and Visibility filters.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这些筛选器在jQuery API中分为以下类别（按我发现它们在WordPress开发中最有用的顺序列出）：基本筛选器、内容筛选器、子筛选器、表单筛选器、属性筛选器和可见性筛选器。
- en: Basic filters
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本筛选器
- en: 'As you work with WordPress, I believe you''ll find the `:not()` filter and
    the `:header` filters incredibly useful. The `:header` filter allows you to simply
    select *all* the headers in a selection, no matter what level header they are.
    Rather than having to select `h1` and `h2` and so on, adding the `:header` filter
    to your selection will grab up all the headers, `h1` through `h6` into the wrapper.
    Try it out, in your `custom-jquery.js` file, and add the following code (don''t
    worry about the `.css(...)`; part of the code; we''ll get to that later. I''m
    just using it to help us to visualize what jQuery can do):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用WordPress时，我相信你会发现`:not()`筛选器和`:header`筛选器非常有用。`:header`筛选器允许你简单地选择*所有*选择中的标题，无论它们是什么级别的标题。而不是必须选择`h1`和`h2`等等，将`:header`筛选器添加到你的选择器中将抓取所有标题，从`h1`到`h6`都包含在包装器中。在你的`custom-jquery.js`文件中试一试，并添加以下代码（不要担心`.css(...)`；代码的一部分；我们稍后会讲到这一点。我只是用它来帮助我们可视化jQuery可以做什么）：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You''ll see in the next screenshot that all headers are selected, `h1, h2`,
    and so on:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕截图中，你将看到所有标题都被选择了，`h1, h2`，等等：
- en: '![Basic filters](img/1742_02_05.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![基本筛选器](img/1742_02_05.jpg)'
- en: My favorite filter is the `:not` filter. Ever noticed on an airplane, you're
    often reminded that the "nearest exit may be located behind you"? The same principle
    holds true when you're trying to scoop up the right elements into your jQuery
    wrapper. Sometimes it's easier to tell jQuery what you *don't* want in the wrapper!
    I once worked with a theme that had some very pretty e-mail and PDF icon elements
    tucked inside the `.post` class. The theme did not have an `.entry` class. This
    was irritating as I wanted to apply a general transformation to images that were
    loaded into the WordPress posts, but these icons were affected! The theme author
    had them wrapped in a class named `.postIcons`. Using the `:not()` filter, I was
    able to transform all `img` tags that were in the `.post` class but *not* in the
    `.postIcons` class. Sweet.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的筛选器是`:not`筛选器。曾经在飞机上有没有注意到，你经常被提醒“最近的出口可能在你身后”？同样的原则适用于当你试图将正确的元素装入你的jQuery包装器时。有时候告诉jQuery你*不*想要包装器中的东西会更容易！我曾经使用一个主题，里面有一些非常漂亮的电子邮件和PDF图标元素隐藏在`.post`类中。主题没有`.entry`类。这很烦人，因为我想对加载到WordPress文章中的图像应用一般的转换，但这些图标受到了影响！主题作者将它们包装在一个名为`.postIcons`的类中。使用`:not()`筛选器，我能够转换所有在`.post`类中但*不*在`.postIcons`类中的`img`标签。太棒了。
- en: 'Take a look at what happens when you add the `:not` filter with our previous
    `:header` selection:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 加上前述的`:header`选择器后再加上`:not`筛选器，看看会发生什么：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following filters now show us all headers selected, except for headers
    in list items:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下筛选器现在显示我们已选择所有标题，除了列表项中的标题：
- en: '![Basic filters](img/1742_02_06.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![基本筛选器](img/1742_02_06.jpg)'
- en: You've probably noticed just from the previous example that you can get pretty
    clever with filters, using them multiple times within a selection.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经从前面的例子中注意到了，你可以在选择器中巧妙地使用筛选器，多次使用它们。
- en: 'What''s that, you say? Yes, you''re correct: `(":headers:not(li h2)")` achieves
    the *exact* same results as the previous example, and yes, it''s always better
    to take the most direct route to your selections. I''m just trying to illustrate
    how these two filters can be used. Eventually, you will run into more complex
    situations where they''ll come in very handy. For everything else, use plain selectors
    first, before resorting to filters.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你说什么？没错，你说得对：`(":headers:not(li h2)")`会得到与前面例子*完全相同*的结果，而且是始终更好地选择最直接的路径来进行选择。我只是试图说明这两个筛选器如何使用。最终，你会遇到更复杂的情况，它们会非常有用。对于其他情况，在使用筛选器之前，先使用普通选择器。
- en: Let's take a look at each Basic filter, what it's syntax looks like, and what
    it does in detail. Because most WordPress theme authors use the `.post` class,
    and most of the time you'll be targeting post elements to make the syntax have
    the most sense. I'll use `.post` class name often in my examples, but remember,
    your main selector can be any `tag, id` name, or `class` name used in CSS selector
    syntax!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个查看每个基本过滤器，看看它的语法是什么样的，以及它的详细功能。因为大多数 WordPress 主题作者使用`.post`类，而且大多数时候你将会以文章元素为目标，所以使语法更有意义。我在示例中经常使用`.post`类名，但请记住，您的主选择器可以是
    CSS 选择器语法中使用的任何`tag、id`名称或`class`名称！
- en: '| Example | Syntax | Description |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :not(selector) | `jQuery(".post img:not(.pIcon)").jqFn()`; | Filters out
    all elements matching the given selector. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| :not(selector) | `jQuery(".post img:not(.pIcon)").jqFn()`; | 过滤掉所有匹配给定选择器的元素。
    |'
- en: '| :header | `jQuery(".post:header").jqFn()`; | Filters down to all elements
    that are headers, such as h1, h2, h3, and so on. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| :header | `jQuery(".post:header").jqFn()`; | 过滤到所有标题元素，例如 h1、h2、h3 等。 |'
- en: '| :first | `jQuery(".post:first") .jqFn()`; | Filters down to the first selected
    element only. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| :first | `jQuery(".post:first") .jqFn()`; | 仅过滤到第一个选定的元素。 |'
- en: '| :last | `jQuery(".post:last") .jqFn()`; | Filters down to the last selected
    element only. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| :last | `jQuery(".post:last") .jqFn()`; | 仅过滤到最后一个选定的元素。 |'
- en: '| :even | `jQuery(".post:even") .jqFn()`; | Filters down to even elements only.
    Note: Arrays are zero-indexed! Zero is considered an even number so your first
    item will be selected! |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| :even | `jQuery(".post:even") .jqFn()`; | 仅过滤到偶数元素。注意：数组是从零开始索引的！零被视为偶数，因此您的第一个项目将被选中！
    |'
- en: '| :odd | `jQuery(".post:odd") .jqFn()`; | Filters down to odd elements only.
    Note: Arrays are zero-indexed! Zero is considered an even number so your second
    item will be selected! |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| :odd | `jQuery(".post:odd") .jqFn()`; | 仅过滤到奇数元素。注意：数组是从零开始索引的！零被视为偶数，因此您的第二个项目将被选中！
    |'
- en: '| :eq(number) | `jQuery(".post:eq(0)") .jqFn()`; | Filters down to a single
    element by its index, which again is zero-indexed. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| :eq(number) | `jQuery(".post:eq(0)") .jqFn()`; | 通过其索引过滤到单个元素，这再次是从零开始计数的。
    |'
- en: '| :gt(number) | `jQuery(".post:gt(0)") .jqFn()`; | Filters down to all elements
    with an index **above** the given one, again this is zero-indexed. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| :gt(number) | `jQuery(".post:gt(0)") .jqFn()`; | 过滤到所有索引**大于**给定索引的元素，再次强调，这是从零开始计数的。
    |'
- en: '| :lt(number) | `jQuery(".post:lt(2)") .jqFn()`; | Filters all elements with
    an index below the given one. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| :lt(number) | `jQuery(".post:lt(2)") .jqFn()`; | 过滤到所有索引**小于**给定索引的元素。 |'
- en: '| :animated | `jQuery(".post:animated").jqFn()`; | Filters down to all elements
    that are currently being animated (we''ll get to animation later in this chapter).
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| :animated | `jQuery(".post:animated").jqFn()`; | 过滤到当前正在进行动画的所有元素（我们将在本章后面讨论动画）。
    |'
- en: Child filters
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子过滤器
- en: Anything in the jQuery wrapper is an array, and these child filters will come
    in handy, but you'll probably find these filters come in most handy when working
    with `li` tags or definition list elements in WordPress. By default, WordPress
    splits a fair amount of its link content into `li` tag elements and galleries
    that are are created by wrapping the images and descriptions in definition lists
    (`dt dd` elements).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 包装器中的任何内容都是一个数组，这些子过滤器会派上用场，但当你使用`li`标签或在 WordPress 中使用定义列表元素时，你可能会发现这些过滤器最有用。默认情况下，WordPress
    将相当数量的链接内容拆分为 `li` 标签元素和画廊，这些画廊是通过将图像和描述包装在定义列表 (`dt dd` 元素) 中创建的。
- en: '| Example | Syntax | Description |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :nth-child(number/even/odd) | `jQuery(".linkcat li:nth-child(1)").css("background",
    "#f60")`; | Filters down to the elements that are the "nth" child of its selector.
    Note that this is **not** zero-indexed! `1` and odd selects the **first** element.
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| :nth-child(number/even/odd) | `jQuery(".linkcat li:nth-child(1)").css("background",
    "#f60")`; | 过滤到其选择器的“nth”子元素。请注意，这**不是**从零开始计数的！`1` 和 odd 选择**第一个**元素。 |'
- en: '| :first-child | `jQuery(".linkcat li:first-child").css("background", "#f60")`;
    | Filters down to the elements that are the first child of their parent. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| :first-child | `jQuery(".linkcat li:first-child").css("background", "#f60")`;
    | 过滤到其父元素的第一个子元素。 |'
- en: '| :last-child | `jQuery(".linkcat li:last-child").css("background", "#f60")`;
    | Filters down to the elements that are the last child of their parent. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| :last-child | `jQuery(".linkcat li:last-child").css("background", "#f60")`;
    | 过滤到其父元素的最后一个子元素。 |'
- en: '| :only-child | `jQuery(".pagenav li:only-child").css("background", "#f60")`;
    | Filters down to the elements that are only-children of their parent. If a parent
    has more than one child, no elements are selected. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| :only-child | `jQuery(".pagenav li:only-child").css("background", "#f60")`;
    | 筛选出只是其父元素的唯一子元素的元素。如果父元素有多个子元素，则不选中任何元素。 |'
- en: 'Here you can see the `:only-child` filter in action:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里您可以看到`only-child`过滤器的运行情况：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Child filters](img/1742_02_07.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![子过滤器](img/1742_02_07.jpg)'
- en: 'Here''s the `:nth-child` filter at work in the Meta list:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`nth-child`过滤器在Meta列表中的示例：
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Child filters](img/1742_02_08.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![子过滤器](img/1742_02_08.jpg)'
- en: Content filters
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容过滤器
- en: After the basic and child filters, the next most useful filters you'll run into
    are content filters. Content filters allow you to make selections based on **matching**
    various types of elements and content. The most useful content filter—I often
    use it in WordPress—is the `:has()` filter. I often need to select elements that
    have something *inside* them, like anchor `a` tags that have `img` image tags
    inside them, or paragraph `p` tags that have list `li` tags, or other elements
    with a particular class name inside them. It's easy to target a specific object,
    but if you find you need to target a larger, parent object, based on what kind
    of elements are inside it, the `:has()` filter will become your best friend.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本和子过滤器之后，您将遇到的下一个最有用的过滤器是内容过滤器。内容过滤器允许您基于**匹配**各种类型的元素和内容进行选择。我经常在WordPress中使用的最有用的内容过滤器是`:has()`过滤器。我经常需要选择具有*内部内容*的元素，比如内部包含`img`图像标签的锚`a`标签，或者内部包含列表`li`标签的段落`p`标签，或者内部包含特定类名的其他元素。定位特定对象很容易，但如果您发现需要基于内部包含的元素类型来定位一个更大的父对象，`:has()`过滤器将成为您的好朋友。
- en: The next most useful item is the `:contains()` element which, at first blush,
    might seem very similar to `:has()!` But this filter is very different (and really
    cool), in that it allows you to target specific *text* inside an element.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来最有用的项目是`:contains()`元素，乍看之下，可能与`:has()`非常相似！但这个过滤器非常不同（而且非常酷），因为它允许您定位元素内的特定*文本*。
- en: Be careful with these two filters and make as many "preselections" as possible.
    You want to make sure jQuery is pointed in the right direction for the elements
    and text you're trying to select. Just specifying `...(p:contains('my text'))..`.
    may be too general for a large page of content; you'll cause jQuery to lag, or
    worse, hang and timeout because it has to search every single little `p, div`,
    or `a` element on the page for your text or elements. A jQuery that specifies
    `...(#divIdName .className a:contains('my text'))...` is much better because jQuery
    only has to search through the text of every `a` element within one specific ID
    container's specified classes, as opposed to the *entire* page of content.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两种过滤器要小心，尽量做好尽可能多的“预选”。确保jQuery针对您尝试选择的元素和文本指向正确的方向。仅仅指定 `...(p:contains('my
    text'))..`. 可能对于大量内容的页面太泛，会导致jQuery延迟，或者更糟糕的是，由于它必须搜索页面上每一个小的 `p, div` 或 `a` 元素的文本或元素，而导致挂起和超时。一个明确指定了
    `...(#divIdName .className a:contains('my text'))...` 的jQuery要好得多，因为jQuery只需要搜索指定ID容器内指定类的文本中的每个
    `a` 元素，而不是整个页面的内容。
- en: 'Let''s take a look at the following content filters in more detail:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下以下内容过滤器：
- en: '| Example | Syntax | Description |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :has(selector) | `jQuery(".post:has(.entry)") .css("background", "#f60")`;
    | Filters down to elements that have at least one of the matching elements inside
    it. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| :has(selector) | `jQuery(".post:has(.entry)") .css("background", "#f60")`;
    | 筛选出至少有一个匹配元素内部的元素。 |'
- en: '| :contains(text) | `jQuery(".post:contains(''Hello world'')").css("background",
    "#f60")`; | Filters down to elements that contain the specific text. Note: This
    is **case sensitive!** |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| :contains(text) | `jQuery(".post:contains(''Hello world'')").css("background",
    "#f60")`; | 筛选出包含特定文本的元素。注意：这是**区分大小写的！** |'
- en: '| :empty | `jQuery(":empty'')") .css("background", "#f60")`; | Filters down
    to elements that have no children. This includes text nodes. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| :empty | `jQuery(":empty'')") .css("background", "#f60")`; | 筛选出没有子元素的元素。这包括文本节点。
    |'
- en: '| :parent | `jQuery(":parent'')") .css("background", "#f60")`; | Filters down
    to elements that are the parent of another element. This includes text nodes.
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| :parent | `jQuery(":parent'')") .css("background", "#f60")`; | 筛选出是另一个元素的父元素的元素。这包括了文本节点。
    |'
- en: For an in-depth example, let's look at the sidebar of the default theme. The
    sidebar has some items that are not denoted with a special `id` name or `class`.
    If I want to target the `ul` list that is only under the Meta header, I can target
    it using `:has()` and `:contains()`. Notice how I "direct" jQuery, by preselecting,
    or pointing to the `.widget-area li` tags first, so that jQuery ignores the rest
    of the page *before* I tell you to look for children elements and containing text.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 举个详细的例子，让我们看一下默认主题的侧边栏。侧边栏有一些项目，没有用特殊的`id`名称或`class`进行标注。如果我想要定位仅在 Meta 标题下的`ul`列表，我可以使用`:has()`和`:contains()`来定位它。注意我如何“直接”告诉
    jQuery，先预先选择或指向`.widget-area li`标签，这样jQuery在我告诉它查找子元素和包含的文本*之前*会忽略页面的其余部分。
- en: 'You can see the result of the following code in the next screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下一个截图中看到以下代码的结果：
- en: '[PRE20]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![Content filters](img/1742_02_09.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![内容过滤器](img/1742_02_09.jpg)'
- en: Form filters
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单过滤器
- en: As if all the previous selectors and filters weren't cool enough, you can also
    explicitly filter to several types of form elements as well as types of events
    for those elements. Using these filters, you'll be able to take control of your
    WordPress generated comment forms as well as custom and WordPress plugin forms
    and make them even more intuitive and easier to use. Later on in this book, we'll
    see how jQuery can make form use and validation dead simple.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有之前的选择器和过滤器还不够酷，你还可以明确过滤到几种类型的表单元素，以及这些元素的事件类型。使用这些过滤器，您将能够控制 WordPress 生成的评论表单以及自定义和
    WordPress 插件表单，并使它们更直观和易于使用。在本书的后面，我们将看到 jQuery 如何使表单使用和验证变得非常简单。
- en: '| Example | Syntax | Description |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :input | `jQuery("form:input").css("background", "#f60")`; | Filters to all
    input, text area, select, and button elements |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| :input | `jQuery("form:input").css("background", "#f60")`; | 过滤到所有输入、文本区域、选择和按钮元素
    |'
- en: '| :text | `jQuery("form:text").css("background", "#f60")`; | Filters to all
    input elements that are of type text |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| :text | `jQuery("form:text").css("background", "#f60")`; | 过滤到所有类型为文本的输入元素
    |'
- en: '| :password | `jQuery("form:password").css("background", "#f60")`; | Filters
    to all input elements that are of type passwords |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| :password | `jQuery("form:password").css("background", "#f60")`; | 过滤到所有类型为密码的输入元素
    |'
- en: '| :radio | `jQuery("form:radio").css("background", "#f60")`; | Filters to all
    input elements that are of type radio |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| :radio | `jQuery("form:radio").css("background", "#f60")`; | 过滤到所有类型为单选框的输入元素
    |'
- en: '| :checkbox | `jQuery("form:checkbox").css("background", "#f60")`; | Filters
    to all input elements that are of type checkbox |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| :checkbox | `jQuery("form:checkbox").css("background", "#f60")`; | 过滤到所有类型为复选框的输入元素
    |'
- en: '| :submit | `jQuery("form:submit").css("background", "#f60")`; | Filters to
    all input elements that are of type submit |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| :submit | `jQuery("form:submit").css("background", "#f60")`; | 过滤到所有类型为提交的输入元素
    |'
- en: '| :image | `jQuery("form:image").css("background", "#f60")`; | Filters to all
    image elements (classified as a form filter, but useful for regular images) |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| :image | `jQuery("form:image").css("background", "#f60")`; | 过滤到所有图像元素（分类为表单过滤器，但对常规图像也有用）
    |'
- en: '| :reset | `jQuery("form:reset").css("background", "#f60")`; | Filters to all
    input elements that are of type reset |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| :reset | `jQuery("form:reset").css("background", "#f60")`; | 过滤到所有类型为 reset
    的输入元素 |'
- en: '| :button | `jQuery("form:button") .css("background", "#f60")`; | Filters to
    all input elements that are of type button |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| :button | `jQuery("form:button") .css("background", "#f60")`; | 过滤到所有类型为按钮的输入元素
    |'
- en: '| :file | `jQuery("form:file").css("background", "#f60")`; | Filters to all
    input elements that are of type file |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| :file | `jQuery("form:file").css("background", "#f60")`; | 过滤到所有类型为文件的输入元素
    |'
- en: 'Using the following code, I''ve highlighted only the `text` input and `submit`
    buttons, as shown in the next screenshot:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码，我只突出显示了`text`输入和`submit`按钮，如下一个截图所示：
- en: '[PRE21]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Form filters](img/1742_02_10.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![表单过滤器](img/1742_02_10.jpg)'
- en: Attribute filters
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性过滤器
- en: Attributes are those additional properties found inside HTML tags that allow
    the tag to refine itself. You're probably most familiar with the `id` and `class`
    attributes as well as the `src` attributes for `img` and `script` tags and of
    course the `href` attribute for `a` tags.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 属性就是在 HTML 标签内部找到的附加属性，允许标签自我完善。你可能最熟悉`id`和`class`属性，以及`img`和`script`标签的`src`属性，当然还有`a`标签的`href`属性。
- en: Attributes are powerful properties for defining and refining HTML elements,
    so you can imagine how powerful being able to filter using them can be. Powerful
    yes, but do keep in mind the simplest and the most direct approach to selecting
    items into the jQuery wrapper is often the best. My examples will show different
    class selections because they create nice visual examples, but in reality, you're
    better off using regular selectors to target class items and saving attribute
    filters for your more refined, tricky work.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 属性是用于定义和细化 HTML 元素的强大属性，因此您可以想象使用它们进行过滤有多么强大。确实强大，但请记住，选择将项目放入 jQuery 包装器中的最简单和最直接的方法通常是最好的。我的示例将展示不同类别的选择，因为它们创建了漂亮的视觉示例，但实际上，最好使用常规选择器来定位类别项，并保留属性过滤器用于更精细、棘手的工作。
- en: 'You''ll note that these filters differ from the other filters. Instead of `:`
    (colon marks), these filters use `[]` (square brackets). This means you can easily
    see in your selector syntax if you''re filtering for an attribute. You''ll also
    note that for every attribute out there in HTML''s DOM, you can filter for it.
    There''s no standard set of "attribute filter names"; you simply use the square
    brackets to indicate whatever attribute you want to filter for. You can even structure
    your attribute filter in a few ways:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这些过滤器与其他过滤器有所不同。而不是使用`:`（冒号标记），这些过滤器使用`[]`（方括号）。这意味着您可以轻松看到在您的选择器语法中，是否在过滤属性。您还会注意到，在
    HTML 的 DOM 中的每个属性中，您都可以为其进行过滤。没有标准的“属性过滤器名称”集合；您只需使用方括号来指示您想要过滤的任何属性。您甚至可以以几种方式构建属性过滤器：
- en: '| Example | Syntax | Description |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| [attribute] | `jQuery("div [href]") .css("background", "#f60")`; | Filters
    for an attribute, regardless of its value |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [attribute] | `jQuery("div [href]").css("background", "#f60")`; | 过滤一个属性，无论其值如何
    |'
- en: '| [attribute=value] | `jQuery("div [class=''entry'']") .css("background", "#f60")`;
    | Filters for an attribute and an *exact* specified value |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [attribute=value] | `jQuery("div [class=''entry'']").css("background", "#f60")`;
    | 过滤属性和*精确*指定的值 |'
- en: '| [attribute!=value] | `jQuery("div [class!=''entry'']") .css("background",
    "#f60")`; | Filters for attributes that do not have a specified value |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [attribute!=value] | `jQuery("div [class!=''entry'']").css("background",
    "#f60")`; | 过滤不具有指定值的属性 |'
- en: '| [attribute^=value] | `jQuery("div [href^=''http://'']") .css("background",
    "#f60")`; | Filters for attributes that have a value that *begins* with a specific
    string |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [attribute^=value] | `jQuery("div [href^=''http://'']").css("background",
    "#f60")`; | 过滤具有以特定字符串*开头*的值的属性 |'
- en: '| [attribute$=value] | `jQuery("div [href$=''/'']") .css("background", "#f60")`;
    | Filters for attributes that have a value that *ends* with a specific string
    |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [attribute$=value] | `jQuery("div [href$=''/'']").css("background", "#f60")`;
    | 过滤具有以特定字符串*结尾*的值的属性 |'
- en: '| [attribute*=value] | `jQuery("div [href*=''page_id'']").css("background",
    "#f60")`; | Filters for attributes that contain a string |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [attribute*=value] | `jQuery("div [href*=''page_id'']").css("background",
    "#f60")`; | 过滤包含特定字符串的属性 |'
- en: 'Here, we can take a look at targeting only the local links in our sidebar with
    the following jQuery code:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以通过以下 jQuery 代码查看仅针对侧边栏中的本地链接进行定位：
- en: '[PRE22]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot shows the result, and only `localhost` links referencing
    the WordPress installation are highlighted:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了结果，只有指向 WordPress 安装的`localhost`链接被突出显示：
- en: '![Attribute filters](img/1742_02_11.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![属性过滤器](img/1742_02_11.jpg)'
- en: Visibility
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可见性
- en: I've saved these two filters for last, mostly because I don't use them very
    much in most of my WordPress projects, but they are part of the selector/filter
    API so I'll go ahead and cover them here.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我把这两个过滤器放在最后，主要是因为在我大多数的 WordPress 项目中我很少使用它们，但它们是选择器/过滤器 API 的一部分，所以我会在这里介绍它们。
- en: Most of the time, everything you'll need to target with jQuery is by default,
    visible. But occasionally, you may have an item that you've previously hidden
    with a jQuery transformation or a form field that is hidden and you'll want to
    run a transformation on it. For that, you can use the `:hidden` filter. This is
    a little tricky, as you've selected the item into your wrapper, but you won't
    necessarily see any transformation (unless the transformation is to make it visible).
    If you find yourself with quite a few hidden elements, you can always filter for
    what's visible, if that's easier.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，你使用 jQuery 需要操作的元素默认是可见的。但偶尔会有一些通过 jQuery 转换隐藏的项目或者隐藏的表单字段，你可能需要对它们进行转换。对于这种情况，你可以使用
    `:hidden` 过滤器。这有点棘手，因为你已经将项目选中到你的包装器中，但你不一定会看到任何转换（除非转换是使其可见的）。如果你发现自己有很多隐藏的元素，你可以随时过滤出可见的元素，如果这样更容易的话。
- en: '| Example | Syntax | Description |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| :hidden | `jQuery("form:input:hidden") .css("background", "#f60")`; | Filters
    for elements that have a display value of none or type value of hidden or have
    an explicit width and height of `0` |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| :hidden | `jQuery("form:input:hidden") .css("background", "#f60")`; | 用于选择显示值为
    none 或类型值为 hidden 或具有显式宽度和高度为 `0` 的元素的过滤器 |'
- en: '| :visible | `jQuery("div .post:visible") .css("background", "#f60")`; | Filters
    for elements that are visible |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| :visible | `jQuery("div .post:visible") .css("background", "#f60")`; | 用于选择可见元素的过滤器
    |'
- en: Note
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'I''ve covered the main selectors and filters that I get the most use of being
    a WordPress developer. Be sure to look through the jQuery documentation for all
    the selectors and filters available listed in alphabetical order: [http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经涵盖了我作为 WordPress 开发者最常使用的主要选择器和过滤器。务必查阅 jQuery 文档，了解所有按字母顺序列出的选择器和过滤器：[http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/)。
- en: 'jQuery secret weapon #2: Manipulating CSS and elements in the DOM'
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'jQuery 的秘密武器 #2：操作 CSS 和 DOM 中的元素'
- en: Now that we can reliably select any *object* our WordPress site displays on
    a page, let's start manipulating and enhancing our selections! We can manipulate
    our CSS styles which display our objects and as if that isn't cool enough, we
    can also manipulate the HTML objects themselves in the DOM. Let's get started
    with manipulating CSS.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以可靠地选择 WordPress 网站在页面上显示的任何 *对象*，让我们开始操纵和增强我们的选择！我们可以操作显示我们对象的 CSS 样式，如果这还不够酷，我们还可以在
    DOM 中操作 HTML 对象本身。让我们开始操作 CSS。
- en: Manipulating CSS
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作 CSS
- en: 'So far, everything that we''ve looked at regarding selectors and filters is
    essential for targeting the elements you want to affect. Now that you can select
    anything you want into the wrapper, let''s start making stuff happen! Thanks to
    all of my previous examples, you''re already familiar with the `css()` function.
    Mostly, you''ll use this function to assign standard CSS property values, such
    as: `background, border, padding, margins`, and so on. If you can assign the property
    in a CSS stylesheet, you can assign it using the `css()` function. You can also
    retrieve and get CSS properties with this function.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所看到的关于选择器和过滤器的所有内容都是必不可少的，用于定位你想要影响的元素。现在你可以将任何你想要的东西选入到包装器中了，让我们开始做些事情吧！多亏了之前的所有示例，你已经熟悉了
    `css()` 函数。大多数情况下，你会使用这个函数来赋予标准的 CSS 属性值，比如：`background、border、padding、margins`
    等等。如果你可以在 CSS 样式表中分配属性，你也可以使用 `css()` 函数来分配它。你还可以使用这个函数检索和获取 CSS 属性。
- en: 'Within the Attributes API of jQuery, you''ll find more CSS manipulation features
    such as the `.addClass, .removeClass`, and `.toggleClass`. These three functions
    alone will give you a lot of power in making your WordPress site dynamic. Don''t
    be confused by my continued talk of attributes! We''re not dealing with selectors
    and filters anymore. We''re dealing with functions that allow you to manipulate
    those selections. Let''s take a look at some of jQuery''s CSS and class attribute
    manipulation functions in detail:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 的属性 API 中，你会发现更多的 CSS 操作特性，比如 `.addClass、.removeClass` 和 `.toggleClass`。这三个函数单独就能给你很大的动态化你的
    WordPress 网站的能力。不要被我继续谈论属性所迷惑了！我们不再处理选择器和过滤器了。我们正在处理允许你操作这些选择的函数。让我们详细了解一下 jQuery
    的 CSS 和类属性操作函数：
- en: '| Example | Syntax | Description |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .css(''property'', ''value'') | `jQuery(".post") .css("background", "#f60");`
    | Adds or changes the CSS properties of the selected elements. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| .css(''property'', ''value'') | `jQuery(".post") .css("background", "#f60");`
    | 添加或更改所选元素的 CSS 属性。 |'
- en: '| .addClass(''className'') | `jQuery(".post") .addClass("sticky");` | Adds
    listed class(es) to each of the selected elements. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| .addClass(''className'') | `jQuery(".post") .addClass("sticky");` | 将所列类添加到每个所选元素中。
    |'
- en: '| .removeClass(''className'') | `jQuery(".post") .removeClass("sticky");` |
    Removes listed class(es) from each of the selected elements. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| .removeClass(''className'') | `jQuery(".post") .removeClass("sticky");` |
    从每个所选元素中删除所列类。 |'
- en: '| .toggleClass(''className'', switch-optional) | `jQuery(".post") .toggleClass("sticky");`
    | Toggles listed class(es) from each of the selected elements based on their current
    state. If the class is there, it''s removed, and if it''s not, it''s added. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| .toggleClass(''className'', switch-optional) | `jQuery(".post") .toggleClass("sticky");`
    | 根据它们当前的状态，从每个所选元素中切换所列类。如果类存在，则删除，如果不存在，则添加。 |'
- en: '| .hasClass(''className'') | `jQuery(".post") .hasClass("sticky");` | Returns
    true or false if listed class(es) from each of the selected elements exist. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| .hasClass(''className'') | `jQuery(".post") .hasClass("sticky");` | 如果每个所选元素中存在所列类，则返回
    true 或 false。 |'
- en: Let's check out that `addClass()` function by adding the default's theme `sticky`
    class to all posts.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向所有帖子添加默认主题的`sticky`类来检查一下`addClass()`函数。
- en: Note
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When making selections, you'll need to denote `class` names from `id` names
    from `tag` names, but in these jQuery class attribute functions, you only need
    to put in the name of the class. You don't need to denote it with a "." period.
    The function is only expecting a class name so it's not necessary. As you might
    expect, you obviously can't add an `id` name to a selection using the `addClass`
    function (and nope, sorry, there's no `addId` function!)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当进行选择时，您需要从`id`名称和`tag`名称中标注`class`名称，但在这些 jQuery 类属性函数中，您只需要输入类名。您不需要用"."来表示它。该函数只期望一个类名，因此不是必需的。正如您可能期望的那样，您显然不能使用`addClass`函数向选择添加`id`名称（不好意思，没有`addId`函数！）
- en: '[PRE23]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can now see in the next screenshot that the `.sticky` class has been added
    to all the `.post` classes through jQuery, not WordPress!
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在下一个截图中看到，通过 jQuery 而不是 WordPress，已将`.sticky`类添加到所有`.post`类中！
- en: '![Manipulating CSS](img/1742_02_12.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![操纵 CSS](img/1742_02_12.jpg)'
- en: Manipulating attributes
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操纵属性
- en: You can also affect the attributes of specific objects (this comes in handy
    for switching our image paths, and provides another way to work with `class` names
    and even `object` ID names)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以影响特定对象的属性（这对于切换我们的图像路径很方便，并提供了与`class`名称甚至`object`ID名称一起使用的另一种方法）
- en: '| Example | Syntax | Description |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .attr | `jQuery(".post") .attr();` | Retrieves the attribute''s value for
    the first element of the selected elements |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| .attr | `jQuery(".post") .attr();` | 检索所选元素的第一个元素的属性值 |'
- en: '| .removeAttr | `jQuery(".post a") .removeAttr("href");` | Removes an attribute
    from each of the selected elements |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| .removeAttr | `jQuery(".post a") .removeAttr("href");` | 从每个所选元素中移除一个属性 |'
- en: Tip
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**More power over CSS:**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS 的更多控制力：**'
- en: 'If you ever need to work with HTML objects in a nice, cross-browser friendly
    way, it''s easy to retrieve and set a host of property and height and width variables
    on any selector you target. Occasionally, these will come in handy, but you''ll
    find the brunt of your work done with the functions as listed in the previous
    table. None-the-less, you''ll want to take a look at the positioning and height
    and width functions under jQuery''s CSS API: [http://docs.jquery.com/CSS](http://docs.jquery.com/CSS).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要以友好的跨浏览器方式处理 HTML 对象，那么很容易检索并设置任何目标选择器上的一系列属性、高度和宽度变量。偶尔，这些变量会派上用场，但您会发现大部分工作都是在前一个表中列出的函数中完成的。尽管如此，您可能会想查看
    jQuery 的 CSS API 下的定位、高度和宽度函数：[http://docs.jquery.com/CSS](http://docs.jquery.com/CSS)。
- en: Manipulating elements and content
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操纵元素和内容
- en: The Manipulation section of jQuery's API is again extensive, but I find some
    of the functions useful for helping along my WordPress and jQuery enhancements.
    For example, if you make something expandable or retractable, you'll need an element
    for the user to handle that event, rather than having to go into every post and
    add control buttons (or remind your client or site editors to add control links
    or buttons to each post—yeah, they'll do that). You can add and remove content
    and HTML elements on the fly, using jQuery.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的 API 中的 Manipulation 部分再次非常广泛，但我发现其中一些函数对帮助我的 WordPress 和 jQuery 的增强非常有用。例如，如果你想要制作可展开或可收起的内容，你将需要一个元素来处理该事件，而不是每次都进入每篇文章并添加控制按钮（或提醒你的客户或站点编辑在每篇文章中添加控制链接或按钮
    —— 是的，他们会这样做）。你可以使用 jQuery 在运行时添加和删除内容和 HTML 元素。
- en: The most useful functions are the `prepend()` and `append()` functions allowing
    you to include text before or after your selection. These functions allow you
    to focus on content, or specific selectors within your selection, whichever is
    easiest for you to target.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的函数是 `prepend()` 和 `append()` 函数，允许您在选择之前或之后包含文本。这些函数允许您专注于内容，或者是选择器内的特定选择器，以便您更容易地进行目标选择。
- en: The next most useful functions are the `before()` and `after()` and `instertBefore()`
    and `instertAfter()` functions. If you find you need to wrap elements inside a
    class name or HTML element to add extra styling, that's no problem with the `wrap()`
    function. You can even remove and clone elements! Let's take a look at these manipulation
    functions in more detail.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来最有用的函数是 `before()` 和 `after()` 以及 `instertBefore()` 和 `instertAfter()` 函数。如果你发现需要在类名或
    HTML 元素内部包装元素以添加额外的样式，那么使用 `wrap()` 函数就没问题了。你甚至可以删除和克隆元素！让我们更详细地看一下这些操作函数。
- en: '| Example | Syntax | Description |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .append(html & text) | `jQuery(".post") .append("<b>post ends here</b>");`
    | Inserts content in the parameter, to the end of each selected element. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| .append(html 和 text) | `jQuery(".post") .append("<b>文章在这里结束</b>");` | 将参数中的内容插入到每个选定元素的末尾。
    |'
- en: '| .appendTo(selector) | `jQuery("<b>post ends here</b>").appendTo(".post");`
    | Does the same thing as append, just reverses the element selection and content
    parameter. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| .appendTo(selector) | `jQuery("<b>文章在这里结束</b>").appendTo(".post");` | 执行与
    append 相同的操作，只是反转了元素选择和内容参数。 |'
- en: '| .prepend(html & text) | `jQuery(".post") .prepend("<b>post starts here</b>");`
    | Inserts content in the parameter, to the beginning of each selected element.
    |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| .prepend(html 和 text) | `jQuery(".post") .prepend("<b>文章从这里开始</b>");` | 将参数中的内容插入到每个选定元素的开头。
    |'
- en: '| .prependTo(selector) | `jQuery("<b>post starts here</b>").prependTo(".post");`
    | Does the same thing as prepend, just reverses the element selection and content
    parameter. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| .prependTo(selector) | `jQuery("<b>文章从这里开始</b>").prependTo(".post");` | 执行与
    prepend 相同的操作，只是反转了元素选择和内容参数。 |'
- en: '| .after(string) | `jQuery(".post") .after("<b>This goes after</b>");` | Inserts
    content in the parameter, after and outside of each selected element. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| .after(string) | `jQuery(".post") .after("<b>这个在后面</b>");` | 将参数中的内容插入到每个选定元素之后并在外部。
    |'
- en: '| .insertAfter(selector) | `jQuery("<b>This goes after</b>").insertAfter(".post");`
    | Does the same thing as after, just reverses the element selection and content
    parameter. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| .insertAfter(selector) | `jQuery("<b>这个在后面</b>").insertAfter(".post");` |
    执行与 after 相同的操作，只是反转了元素选择和内容参数。 |'
- en: '| .before(HTML & text) | `jQuery(".post") .before("<b>This goes before</b>");`
    | Inserts content in the parameter, before and outside of each selected element.
    |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| .before(HTML 和 text) | `jQuery(".post") .before("<b>这个在前面</b>");` | 将参数中的内容插入到每个选定元素之前并在外部。
    |'
- en: '| .insertBefore(selector) | `jQuery("<b>This goes before</b>") .insertBefore("class");`
    | Does the same thing as before, just reverses the element selection and content
    parameter. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| .insertBefore(selector) | `jQuery("<b>这个在前面</b>") .insertBefore("class");`
    | 执行与 before 相同的操作，只是反转了元素选择和内容参数。 |'
- en: '| .wrap(html or functionName) | `jQuery(".post").wrap("<div class=".fun" />");`
    | Wraps an HTML structure around each selected element. You can also construct
    a function that will wrap each element in HTML. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| .wrap(html 或 functionName) | `jQuery(".post").wrap("<div class=".fun" />");`
    | 在每个选定元素周围包装一个 HTML 结构。您还可以构造一个将每个元素包装在 HTML 中的函数。 |'
- en: '| .wrapAll(HTML) | `jQuery(".post").wrapAll("<div />");` | Similar to wrap,
    but places the HTML structure around all of the elements together, not each individual
    element. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| .wrapAll(HTML) | `jQuery(".post").wrapAll("<div />");` | 类似于 wrap，但将 HTML
    结构放置在所有元素周围，而不是每个单独的元素周围。 |'
- en: '| .wrapInner(selector) | `jQuery(".post") .wrapInner("<div class=".fun" />");`
    | Similar to wrap, but it places the HTML structure inside each of the selected
    elements around any text or child elements of each selected element. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| .wrapInner(selector) | `jQuery(".post") .wrapInner("<div class=".fun" />");`
    | 类似于包装，但它将HTML结构放置在所选元素的每个文本或子元素周围。'
- en: '| .html(HTML & text) | `jQuery(".post") .html("<h2>Replacement Text</h2>");`
    | Replaces any content and child elements of selected items with the content in
    the parameter. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| .html(HTML 和文本) | `jQuery(".post") .html("<h2>替换文本</h2>");` | 用参数中的内容替换所选项的任何内容和子元素。'
- en: '| .text(text only HTML chars will be escaped) | `jQuery(".post") .text("Replacement
    Text");` | Similar to HTML, but text only. Any HTML characters will be escaped
    as ASCII codes. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| .text(仅限文本 HTML 字符将被转义) | `jQuery(".post") .text("替换文本");` | 类似于 HTML，但只限文本。任何
    HTML 字符都将被转义为 ASCII 代码。'
- en: '| .empty(selector) | `jQuery(".post").empty(".entry");` | Deletes any content
    and child elements of a selected element. Leaves the element. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| .empty(selector) | `jQuery(".post").empty(".entry");` | 删除所选元素的任何内容和子元素。保留元素。'
- en: '| .remove(selector) | `jQuery(".post").remove()`; | Similar to empty but deletes
    the entire element. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| .remove(selector) | `jQuery(".post").remove()`; | 类似于 empty 但删除整个元素。'
- en: '| .clone(selector) | `jQuery(".post").clone()`; | Duplicates the selected elements.
    |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| .clone(selector) | `jQuery(".post").clone()`; | 复制所选元素。'
- en: 'Here we can see how easy it is to use these types of functions:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到使用这些类型的函数是多么容易：
- en: '[PRE24]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The above jQuery script adds **End of Post** to the end of every post as seen
    in the following screenshot:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 jQuery 脚本将在以下截图中为每篇文章的末尾添加**文章结束**：
- en: '![Manipulating elements and content](img/1742_02_13.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![操作元素和内容](img/1742_02_13.jpg)'
- en: Working with the DOM
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作 DOM
- en: With jQuery, you can actually traverse and handle the DOM itself instead of
    just dealing with the elements that are in the jQuery wrapper set (remember, these
    are no longer pure DOM elements in the array). In order to work directly with
    the DOM, you can use a few jQuery functions and properties. jQuery's documentation
    site itself has a pretty exhaustive list of 20 or 30 functions that you can use
    to help you traverse the DOM, though again working with WordPress, you most likely
    will not need to work directly with it. The ones I use most are actually part
    of the jQuery core and not found in the Traversing API, but I use them similarly
    to help me refine and navigate DOM objects.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 jQuery，您实际上可以遍历和处理 DOM 本身，而不仅仅是处理 jQuery 包装器集中的元素（请记住，这些不再是纯粹的 DOM 元素数组）。为了直接处理
    DOM，您可以使用一些 jQuery 函数和属性。jQuery 的文档站点本身列出了大约 20 或 30 个函数，您可以使用这些函数来帮助您遍历 DOM，尽管再次强调，与
    WordPress 一起工作时，您很可能不需要直接处理它。我最常使用的是 jQuery 的核心部分，而不是遍历 API 找不到的，但我使用它们类似于帮助我细化和导航
    DOM 对象。 '
- en: '| Example | Syntax | Description |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .length or size() | `jQuery(".post") .length;` | Returns the number of elements
    in the selected set. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| .length 或 size() | `jQuery(".post") .length;` | 返回所选集合中的元素数量。'
- en: '| .get(number-optional) | `jQuery(".post") .get(3);` | This will return the
    array of native DOM elements. Comes in handy if you don''t want to deal with DOM
    directly and not the jQuery wrapped elements. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| .get(数字-可选) | `jQuery(".post") .get(3);` | 这将返回原生 DOM 元素的数组。如果您不想直接处理 DOM
    而不是 jQuery 包装元素，这将很方便。'
- en: '| .find(selector) | `jQuery(".post") .find(".entry b");` | Returns an array
    of jQuery elements inside the first selector that match the find function''s selector.
    |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| .find(selector) | `jQuery(".post") .find(".entry b");` | 返回与查找函数的选择器匹配的第一个选择器内的
    jQuery 元素的数组。'
- en: '| .each(functionName) | `jQuery(".post") .each(function(){//code});` | This
    will run a function on every element that matches the jQuery selector. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| .each(functionName) | `jQuery(".post") .each(function(){//code});` | 这将对与
    jQuery 选择器匹配的每个元素运行一个函数。'
- en: 'As these functions return numbers and arrays, you''ll find them most useful
    for troubleshooting. To easily reference one of these functions, I simply set
    up `alert()` functions with my jQuery statements as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些函数返回数字和数组，您将发现它们在故障排除时最有用。要轻松引用其中一个函数，我只需设置带有我的 jQuery 语句的 `alert()` 函数，如下所示：
- en: '[PRE25]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can see the resulting alert here in the following screenshot:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下截图中看到结果警示：
- en: '![Working with the DOM](img/1742_02_14.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![操作 DOM](img/1742_02_14.jpg)'
- en: Tip
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Be sure to take a look at the full traversing functions.**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**一定要查看完整的遍历函数。**'
- en: Again, the point of jQuery is to get you away from the details of the DOM, but
    as you get more sophisticated with your use of jQuery, you don't want to forget
    these functions are available to you at [http://docs.jquery.com/Traversing](http://docs.jquery.com/Traversing).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，jQuery的目的是让你摆脱DOM的细节，但随着你对jQuery的运用变得更加复杂，你不想忘记这些函数在[http://docs.jquery.com/Traversing](http://docs.jquery.com/Traversing)可以使用。
- en: You can also take a closer look at the jQuery core at [http://docs.jquery.com/Core](http://docs.jquery.com/Core).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以更仔细地查看jQuery核心部分在[http://docs.jquery.com/Core](http://docs.jquery.com/Core)。
- en: 'jQuery secret weapon #3: Events and effects (aka: the icing on the cake)'
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery秘密武器#3：事件和效果（又名：锦上添花）
- en: All right, you are a *selection* master; you can grab anything you want from
    anyone's CSS and WordPress theme and you can *manipulate* those selections' CSS
    properties and attributes until the cows come home. Just from these first examples,
    you've probably managed to come up with your very own impressive jQuery enhancements.
    But wait, there's more! Let's bring it all together with events and effects.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，你是*选择*大师；你可以从任何人的CSS和WordPress主题中获取任何你想要的东西，你可以*操纵*这些选择的CSS属性和属性，直到牛回到家。仅从这些第一个例子中，你可能已经设法想出了自己的令人印象深刻的jQuery增强功能。但等等，还有更多！让我们用事件和效果把它们结合起来。
- en: Working with events
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理事件
- en: There are lots of events that you can handle with jQuery. You can manually **bind**
    and **unbind** events to elements, you can reference the **unified event object**,
    and you can use event helpers. We're going to save looking at the jQuery's unified
    event object until a little later in this book and for now, take a look at the
    most direct ways to get started with events.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用jQuery处理很多事件。你可以手动**绑定**和**解绑**元素的事件，你可以引用**统一事件对象**，还可以使用事件助手。我们暂时不会深入研究jQuery的统一事件对象，现在先看一下开始处理事件的最直接方法。
- en: Helpers are so helpful!
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 助手非常有用！
- en: The helper functions, also often referred to as "shortcuts", let you easily
    set up events on a click or hover. You can also easily toggle events. We saw how
    useful the `toggleClass()` function was in the CSS Manipulation section; imagine
    being able to toggle *more* functions.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数，也经常被称为“快捷方式”，让你可以轻松地设置点击或悬停事件。你也可以轻松地切换事件。在CSS操作部分，我们看到了`toggleClass()`函数是多么有用；想象一下能够切换*更多*的函数。
- en: Most of the time, `hover()` will accomplish your needs, but if you want your
    event to be a click, then the `toggle()` function will probably work best. The
    `toggle()` function allows a bit more flexibility than `hover` because you can
    add in additional functions and not be constrained to just one or two functions.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，`hover()`函数能够满足你的需求，但如果你想要的是点击事件，那么`toggle()`函数可能是最合适的。`toggle()`函数比`hover`更灵活一些，因为你可以添加额外的函数，而不仅仅限于一个或两个函数。
- en: '| Example | Syntax | Description |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .click(functionName) | `jQuery(".post") .click(function(){//code});` | Binds
    a function to the `click` event type, executed on a single click. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| .click(functionName) | `jQuery(".post") .click(function(){//code});` | 绑定一个要在单击时执行的函数到`click`事件类型。'
- en: '| .dbclick(functionName) | `jQuery(".post") .dbclick(function(){//code});`
    | Binds a function to the `click` event type, executed on a double click. |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| .dbclick(functionName) | `jQuery(".post") .dbclick(function(){//code});`
    | 绑定一个函数到`click`事件类型，当双击时执行。'
- en: '| .hover(functionName1, functionName2) | `jQuery(".post") .hover(function(){//code});`
    | Works with the `mouseenter/mouseleave` event types and binds just two functions
    to the selected elements, to be executed on `mouseenter` and `mouseleave`. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| .hover(functionName1, functionName2) | `jQuery(".post") .hover(function(){//code});`
    | 适用于`mouseenter/mouseleave`事件类型，为所选元素绑定两个函数，分别在`mouseenter`和`mouseleave`时执行。'
- en: '| .toggle(functionName1, functionName2, functionName3, etc) | `jQuery(".post")
    .toggle(function(){//code});` | Works with the `click` event type and binds two
    or more functions to the selected elements, to be executed on alternate clicks.
    |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| .toggle(functionName1, functionName2, functionName3, etc) | `jQuery(".post")
    .toggle(function(){//code});` | 适用于`click`事件类型，为所选元素绑定两个或更多函数，交替执行。'
- en: '| .mouseenter(functionName) | `jQuery(".post") .mouseenter(function(){//code});`
    | Binds a function to be executed when the mouse enters the selected elements.
    |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| .mouseenter(functionName) | `jQuery(".post") .mouseenter(function(){//code});`
    | 绑定一个要在鼠标进入所选元素时执行的函数。'
- en: '| .mouseleave(functionName) | `jQuery(".post") .mouseleave(function(){//code});`
    | Binds a function to be executed when the mouse leaves the selected elements.
    |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| .mouseleave(functionName) | `jQuery(".post") .mouseleave(function(){//code});`
    | 绑定一个函数，在鼠标离开选定的元素时执行。 |'
- en: '| .keydown(functionName) | `jQuery(".post") .keydown(function(){//code});`
    | Binds a function to the `keydown` event type, executed only when the selected
    element has a *focus* and keys are pressed down. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| .keydown(functionName) | `jQuery(".post") .keydown(function(){//code});`
    | 将一个函数绑定到`keydown`事件类型，仅在选定的元素有 *焦点* 且按键按下时执行。 |'
- en: '| .keyup(functionName) | `jQuery(".post") .keyup(function(){//code});` | Binds
    a function to the `keyup` event type, executed only when the selected element
    has a *focus* and keys are pressed then released. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| .keyup(functionName) | `jQuery(".post") .keyup(function(){//code});` | 将一个函数绑定到`keyup`事件类型，仅在选定的元素有
    *焦点* 且按键后释放时执行。 |'
- en: 'With events comes a more live and dynamic page. Let''s set up a very simple
    hover on our sidebar navigation items:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 随着事件的发生，页面更加活跃和动态。让我们在侧边栏导航项目上设置一个非常简单的悬停效果：
- en: '[PRE26]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![Helpers are so helpful!](img/1742_02_15.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![助手非常有用！](img/1742_02_15.jpg)'
- en: Working with bind, unbind, and the event object
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 bind、unbind 和事件对象
- en: We'll just do a quick overview of these functions; using this method is a bit
    of overkill, but it might come in handy for specific uses and if nothing else,
    make you appreciate all the helper shortcut functions jQuery provides you with.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需快速概述这些函数；使用这种方法有点过火，但在特定情况下可能会派上用场，如果没有其他办法，它会让你感激 jQuery 提供的所有辅助快捷函数。
- en: Occasionally, you may need to really refine the control of your events, and
    using the `bind()` and `unbind()` functions, you may well handle this for yourself.
    You can pass parameters of event types, such as `click` or `mouseenter`; you can
    pass some data as well as an event handler (or you can call another function).
    The data is an optional parameter and it's a tad beyond the scope of this chapter
    to get into, but for those of you who have become really interested in developing
    with jQuery, it's good to know you can pass data around if need be (and we'll
    do our bit even in this chapter)!
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能需要真正细化事件的控制，并使用`bind()`和`unbind()`函数，您很可能会为自己处理这些问题。您可以传递事件类型的参数，例如`click`或`mouseenter`；您也可以传递一些数据以及事件处理程序（或者您可以调用另一个函数）。数据是一个可选参数，这超出了本章的范围，但对于那些真正对使用
    jQuery 进行开发感兴趣的人来说，知道您可以传递数据是很有用的（即使在本章中，我们也会稍微提及）！
- en: 'Let''s take a closer look and break down the parts of these functions:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看并分解这些函数的各个部分：
- en: '| Example | Syntax | Description |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .bind(event type, data, functionName) | `jQuery(".post").bind("mouseenter",
    function(){//code})`; | Attaches a function to be triggered on a type of event
    to the selected elements. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| .bind(event type, data, functionName) | `jQuery(".post").bind("mouseenter",
    function(){//code})`; | 将一个函数附加到选定元素上触发的事件类型。 |'
- en: '| .unbind(event type, functionName) | `jQuery(".post").bind("mouseenter", function(){//code})`;
    | Removes the event type from the selected elements. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| .unbind(event type, functionName) | `jQuery(".post").bind("mouseenter", function(){//code})`;
    | 从选定的元素中移除事件类型。 |'
- en: 'We can recreate what we achieved with the hover class by using `bind` and `unbind`.
    It''s a bit more cumbersome, and ultimately not the most elegant way to go for
    a simple hover effect. The advantage of bind is that you can pass data around.
    The following example demonstrates passing data, that is, the color of our background,
    to the event''s function:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`bind`和`unbind`来重新创建我们用 hover 类实现的效果。这有点麻烦，最终并不是实现简单悬停效果的最优雅方式。`bind`的优点是可以传递数据。以下示例演示了传递数据，即我们背景的颜色，到事件的函数：
- en: '[PRE27]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the previous code sample, we worked with jQuery's event object to pass the
    data. Working with the data, the unified event object returns can help you create
    refined jQuery transformations, and I often use the object's information to help
    pass event information to functions for cleaner code and to also help me with
    troubleshooting.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们使用了 jQuery 的事件对象来传递数据。使用数据，统一的事件对象返回可以帮助您创建精细的 jQuery 转换，我经常使用对象的信息来帮助传递事件信息到函数中以获得更干净的代码，并帮助我进行故障排除。
- en: '| Example | Description |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述 |'
- en: '| --- | --- |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `event.type` | Returns the type of event, such as a click or `mouseenter`
    or `keyup`. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `event.type` | 返回事件类型，例如点击或`mouseenter`或`keyup`。 |'
- en: '| `event.target` | Returns the selected element the event was triggered from.
    |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `event.target` | 返回触发事件的选定元素。 |'
- en: '| `event.data` | Returns and contains the optional data passed through the
    bind function. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `event.data` | 返回并包含通过绑定函数传递的可选数据。 |'
- en: '| `event.pageX, .pageY` | Determines the mouse position relative to the left
    edge (pageX), or top (pageY) of the document. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `event.pageX, .pageY` | 确定鼠标相对于文档左边缘（pageX）或顶部（pageY）的位置。 |'
- en: '| `event.result` | Returns the last value returned by an event handler that
    was triggered by this event. Very useful for troubleshooting. |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `event.result` | 返回由由此事件触发的事件处理程序返回的最后一个值。用于故障排除非常有用。 |'
- en: '| `event.timeStamp` | Returns the Unix timestamp of when the event was triggered.
    |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `event.timeStamp` | 返回触发事件的Unix时间戳。 |'
- en: 'The following code will track event object attributes on click:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将跟踪单击事件对象属性：
- en: '[PRE28]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here's one event object function which you may find useful—the `preventDefault()function`.
    It can stop an element's default action. The most common example would be making
    a `link` tag not executing its `href`. If you need to know if an element's default
    event has had this called on it, you can use the `isPreventDefault()` function
    to test for it.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个你可能会发现有用的事件对象函数——`preventDefault()函数`。它可以阻止元素的默认操作。最常见的例子是使`link`标签不执行其`href`。如果你需要知道一个元素的默认事件是否已经调用了这个函数，你可以使用`isPreventDefault()`函数进行测试。
- en: '| Example | Syntax | Description |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .preventDefault() | `jQuery(.post a).preventDefault()`; | Will prevent the
    selected elements from their browser-set default actions. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| .preventDefault() | `jQuery(.post a).preventDefault()`; | 将阻止所选元素执行其浏览器设置的默认操作。
    |'
- en: '| .isPreventDefault() | `jQuery(.post a).isPreventDefault()`; | Returns true
    or false if `ispreventDefault` was called on a set of selected elements. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| .isPreventDefault() | `jQuery(.post a).isPreventDefault()`; | 如果在一组选定的元素上调用了`ispreventDefault`，则返回true或false。
    |'
- en: Adding effects
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加效果
- en: So now we're ready for the fun section of this chapter—adding slick effects.
    The jQuery library provides some very basic animation and effects functions for
    us to work with. These are all visual effects such as showing and hiding, fading
    in and out, sliding up and down, or using the `animate` function to move around
    elements on the screen, more precisely. Most of you will be very happy with the
    standard shortcut animation functions, but we'll take a look at the `animate`
    function as well.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们准备好了本章的有趣部分——添加华丽的效果。jQuery库为我们提供了一些非常基本的动画和效果函数。这些都是视觉效果，如显示和隐藏，淡入淡出，向上和向下滑动，或者使用`animate`函数在屏幕上移动元素，更精确地说。大多数人都会对标准的快捷动画函数感到满意，但我们也会看一下`animate`函数。
- en: The majority of these functions also allow for a callback function which makes
    it easy to trigger additional animations or functionality that you want to have
    completed when the element's animation is complete. Let's get started with effects
    and animation.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数中的大多数也允许使用回调函数，这使得在元素动画完成时触发其他动画或功能变得容易。让我们开始使用效果和动画吧。
- en: Showing and hiding
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示和隐藏
- en: The first thing you'll want to note about showing and hiding is that the size
    and the fade of the targeted elements are affected. If you want to just fade or
    affect the size, then you'll want to look at the other animation functions. You
    can also very easily use the `toggle` event we discussed before to aid in your
    effects.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 关于显示和隐藏的第一件事情要注意的是，目标元素的大小和淡入淡出效果会受到影响。如果你只想淡化或影响大小，那么你需要查看其他动画函数。你也可以非常容易地使用我们之前讨论过的`toggle`事件来帮助你的效果。
- en: '| Example | Syntax | Description |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .show(speed-optional, functionName) | `jQuery(".post") .css("background",
    "#f60").show("slow")`; | Displays the matched elements; if a speed is set, the
    object grows in from left to right and alpha fade 0 to 1\. A function can be called
    upon completion. Speed can be "slow" or "fast" or milliseconds. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| .show(speed-optional, functionName) | `jQuery(".post") .css("background",
    "#f60").show("slow")`; | 显示匹配的元素；如果设置了速度，对象从左到右增长，alpha淡入从0到1。完成后可以调用一个函数。速度可以是"slow"或"fast"或毫秒。
    |'
- en: '| .hide(speed-optional, functionName) | `jQuery(".post") .css("background",
    "#f60").show(200)`; | Similar to show but hides. If a speed is set, the element
    shrinks from right to left and alpha fade 1 to 0\. A function can be called upon
    completion. Speed can be "slow" or "fast" or milliseconds. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| .hide(speed-optional, functionName) | `jQuery(".post") .css("background",
    "#f60").show(200)`; | 类似于show但是隐藏。如果设置了速度，元素会从右到左收缩，alpha渐隐从1到0。完成后可以调用一个函数。速度可以是"slow"或"fast"或毫秒。
    |'
- en: Sliding in and out
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滑入和滑出
- en: You'll notice that showing and hiding "grew" the object from the right to left.
    Sliding is an elegant way to handle opening and closing elements with a more direct
    up and down motion.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到显示和隐藏对象是从右到左“增长”的。滑动是一种优雅的处理打开和关闭元素的方式，带有更直接的上下运动。
- en: '| Example | Syntax | Description |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| 例子 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .slideUp(speed, functionName) | `jQuery(".post") .slideUp(''slow'', function()
    {``// code``})`; | Slides the selected element up from bottom to top until it
    is hidden. Speed can be "fast" or "slow" or milliseconds. A function can be called
    when the animation is finished. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| .slideUp(speed, 函数名称) | `jQuery(".post") .slideUp(''slow'', function() {``//
    代码``})`; | 从底部向上滑动所选元素，直到它被隐藏。速度可以是“快”或“慢”，也可以是毫秒数。动画完成时可以调用函数。|'
- en: '| .slideDown(speed, functionName) | `jQuery(".post") .slideDown(''slow'', function()
    {``// code``})`; | Slides a hidden selected element down from top to bottom until
    its size is defined. Speed can be "fast" or "slow" or milliseconds. A function
    can be called when the animation is finished. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| .slideDown(speed, 函数名称) | `jQuery(".post") .slideDown(''slow'', function()
    {``// 代码``})`; | 从顶部向下滑动隐藏的所选元素，直到其大小被定义。速度可以是“快”或“慢”，也可以是毫秒数。动画完成时可以调用函数。|'
- en: '| .slideToggle() | `jQuery(".post") .slideToggle(''slow'', function() {``//
    code``})`; | Toggles the visibility of the selected element using the slide animation.
    Speed can be "fast" or "slow" or milliseconds. A function can be called when the
    animation is finished. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| .slideToggle() | `jQuery(".post") .slideToggle(''slow'', function() {``//
    代码``})`; | 使用幻灯片动画切换所选元素的可见性。速度可以是“快”或“慢”，也可以是毫秒数。动画完成时可以调用函数。|'
- en: Fading in and out
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 淡入和淡出
- en: 'A good fade in and out is nice as well. I do want to point out that `fadeIn()`
    and `fadeOut()` only work when starting from an alpha of `0` or `1`. For example:
    `fadeOut` only works if the element''s alpha is set to `1`, and `fadeIn` only
    works if the element''s alpha is at `0`.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的淡入淡出效果也很好。我想指出的是，`fadeIn()` 和 `fadeOut()` 只有在从 alpha 为 `0` 或 `1` 开始时才有效。例如：`fadeOut`
    只有在元素的 alpha 设置为 `1` 时才有效，而 `fadeIn` 只有在元素的 alpha 设置为 `0` 时才有效。
- en: I'd also like to point out that if you've previously used the `fadeTo()` function
    to fade to a specific alpha number, and then try to `fadeOut()` all the way or
    `fadeIn()` all the way, it doesn't work. Just continue to use the `fadeTo()` function
    to smooth your transitions up and down. Also, when using `fadeOut()`, once the
    element's alpha is at `0`, it disappears completely. Any space it was taking up
    collapses in a somewhat jarring effect. Take this into consideration when deciding
    to use `fadeOut().`
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想指出，如果之前使用了 `fadeTo()` 函数来淡出到特定的 alpha 数字，然后尝试全部`fadeOut()` 或全部`fadeIn()`
    ，这是行不通的。继续使用 `fadeTo()` 函数来平滑地进行渐变效果。此外，当使用 `fadeOut()` 时，一旦元素的 alpha 为 `0`，它就会完全消失。它所占用的任何空间都会发生一种相当惊人的坍塌效果。在决定使用
    `fadeOut()` 时，请考虑此因素。
- en: '| Example | Syntax | Description |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| 例子 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .fadeOut(speed, functionName) | `jQuery(".post") .fadeOut("slow"`, | Fades
    a selected element that''s visible or alpha is `1` to `0` |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| .fadeOut(speed, 函数名称) | `jQuery(".post") .fadeOut("slow"`, | 将处于可见状态或 alpha
    为 `1` 的所选元素淡出为 `0` |'
- en: '| .fadeIn(speed, functionName) | `jQuery(".post") .fadeIn("slow"`, | Fades
    a selected element who''s visibility is hidden or alpha is set to `0` to `1` |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| .fadeIn(speed, 函数名称) | `jQuery(".post") .fadeIn("slow"`, | 将一个处于隐藏状态或 alpha
    设置为 `0` 的所选元素淡入为 `1` |'
- en: '| .fadeTo(speed, alpha, functionName) | `jQuery(".post") .fadeTo("slow"`, |
    Fades a selected element to a specific alpha from `0` to `1` |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| .fadeTo(speed, alpha, 函数名称) | `jQuery(".post") .fadeTo("slow"`, | 将所选元素淡出到特定的
    alpha 值，从 `0` 到 `1` |'
- en: Working with the animate function
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `animate` 函数
- en: The three animation functions in the previous table will do most of what you
    need. You may, however, find yourself in a situation that requires a tad more
    control. In that rare instance, you can use the `animate` function.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 上表中的三个动画函数将满足大部分需求。然而，你可能会发现自己处于需要更多控制的情况。在这种罕见的情况下，你可以使用 `animate` 函数。
- en: '| Example | Syntax | Description |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 例子 | 语法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| .animate(css properties, duration, easing, functionName) | `jQuery(".post")
    .animate({width:` | Creates a custom transition of CSS properties on the selected
    elements |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| .animate(css 属性, 持续时间, 缓动, 函数名称) | `jQuery(".post") .animate({width:` | 在所选元素上创建自定义
    CSS 属性的过渡 |'
- en: '| .stop() | `jQuery(".post").stop()`; | Stops an animation on a selected element
    |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| .stop() | `jQuery(".post").stop()`; | 停止所选元素上的动画 |'
- en: 'Here''s an example of custom animating an `img` in a post with the `animate()`
    function:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用`animate()`函数自定义动画`img`的示例：
- en: '[PRE29]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It''s tough to capture animation in a book so I haven''t tried with the other
    examples, but here you get the idea of the post''s image half way animated (the
    image height is closing and the alpha is on it''s way to 0):'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在书中捕捉动画是很困难的，所以我没有尝试其他示例，但是在这里，你可以了解到帖子图像部分动画（图像高度正在减小，透明度正在向0逼近）的想法：
- en: '![Working with the animate function](img/1742_02_16.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![使用animate函数工作](img/1742_02_16.jpg)'
- en: Making it all easy with statement chaining
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用语句链使一切变得容易
- en: 'As I''ve mentioned, one of jQuery''s many powerful features is statement chaining,
    that is, stringing multiple functions together that will be performed in the order
    they''re added to the chain (left to right) on the selected set all in one nice
    string of code. For example, we can change a CSS property, hide the selected elements,
    and fade them smoothly with one line of code:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所提到的，jQuery的众多强大功能之一是语句链，也就是说，将多个函数串在一起，这些函数将按照它们添加到链中的顺序（从左到右）在所选集合上执行，所有这些都可以在一行漂亮的代码字符串中完成。例如，我们可以用一行代码改变CSS属性，隐藏所选元素，并平滑地淡出它们：
- en: '[PRE30]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: For a more in-depth example of statement chaining, let's get to our first jQuery
    project in WordPress.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解语句链的更多示例，请开始我们的第一个WordPress jQuery项目。
- en: 'Our First Project: Expanding/collapsing WordPress posts'
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个项目：扩展/折叠WordPress帖子
- en: OK, this is a quick project, but it requires that we use a little bit of everything
    we just covered. I've always liked that WordPress had the `<!--more->` feature
    to make posts "condensable" for the main post view page, but that doesn't always
    suit my purposes for some types of posts. Let's assume that my blog will have
    relatively short posts, yet I really want a reader to be able to see as many headlines
    as possible, above the fold, without having to scroll or scan any content (we'll
    suspend reality and pretend that my post headers are just unbelievably interesting
    and compelling).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这是一个快速项目，但是需要我们使用我们刚刚讨论过的一点东西。我一直喜欢WordPress有`<!--more->`功能，可以使帖子在主帖视图页面上"可压缩"，但这并不总适用于我某些类型的帖子。让我们假设我的博客将有相对较短的帖子，但我真的希望读者能够在屏幕上方看到尽可能多的标题，而无需滚动或扫描任何内容（我们将暂时忽略现实，并假装我的帖子标题仅仅是非常有趣和引人入胜的）。
- en: I'd like the user to have the option to expand the post that interests him,
    while keeping him in the context of all the other post headlines. You've probably
    seen similar enhancements to this on many sites. This is a very popular jQuery
    enhancement for FAQ and press release posts.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望用户能够选择扩展他感兴趣的帖子，同时保持在所有其他帖子标题的上下文中。你可能在许多网站上看到过类似的增强功能。这是一个非常受欢迎的jQuery增强功能，适用于FAQ和新闻发布帖子。
- en: Let's take a look at how we'd do that. Set up a clean `custom-jquery.js` file
    in your theme and let's get started.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何做到这一点。在你的主题中设置一个干净的`custom-jquery.js`文件，然后让我们开始吧。
- en: 'First, we''ll have to hide our post content:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要隐藏我们的帖子内容：
- en: '[PRE31]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next, we'll need some sort of control for people to click on which also gives
    them some intuitive instructions. Of course, it would be very inefficient to have
    an editor add a control element to each post, so we won't do that (but sadly,
    I've seen this done on a few projects). We could add it to the theme's `post.php`
    page, but then, the control would appear even if the user had JavaScript disabled.
    We want this to degrade gracefully, it's an *enhancement* after all.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一些控件，让人们点击，并给他们一些直观的说明。当然，让编辑器为每篇文章添加一个控件元素会非常低效，所以我们不会这样做（但不幸的是，我在一些项目中看到过这样做）。我们可以将其添加到主题的`post.php`页面，但是，如果用户禁用了JavaScript，则该控件将显示出来。我们希望它可以优雅地退化，毕竟这是一种*增强*。
- en: If someone comes across this content in a mobile browser without JavaScript
    support or a text-only or text-to-speech browser, we'll want them to just view
    the content as normal without any non-functional elements distracting them. We'll
    use jQuery to add our control element. If JavaScript is disabled, it simply won't
    appear.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人在移动浏览器中遇到此内容，而没有JavaScript支持或仅支持文本或文本到语音浏览器，则我们希望他们只能查看正常的内容，而无需任何非功能性元素干扰他们。我们将使用jQuery添加我们的控制元素。如果JavaScript被禁用，它就不会出现。
- en: '[PRE32]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We now just need a nice way to show and hide the post''s content:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要一种好的方法来显示和隐藏帖子的内容：
- en: '[PRE33]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Last, let''s make sure the instructions in the `.openIt` div update:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们确保`.openIt` div中的说明更新：
- en: '[PRE34]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'That''s it! Your very first, *useful* jQuery enhancement for WordPress. Here''s
    a screenshot of what it looks like:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！这是你的第一个，*有用的*用于WordPress的jQuery增强。下面是它的屏幕截图：
- en: '![Our First Project: Expanding/collapsing WordPress posts](img/1742_02_17.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![我们的第一个项目：扩展/折叠 WordPress 文章](img/1742_02_17.jpg)'
- en: Keeping jQuery readable
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使jQuery可读
- en: In the real world this enhancement could be cleaned up and refined quite a bit.
    For example, it would be better to have an existing CSS style for `.openIt` instead
    of applying styles to the `div`.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，这种增强可以被彻底清理和优化。例如，最好为`.openIt`拥有现有的CSS样式，而不是将样式应用到`div`。
- en: 'Also, I highly recommend writing separate, named functions. For example, it''s
    much easier to read:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我强烈建议编写单独的、具有名称的函数。例如，这样更容易阅读：
- en: '[PRE35]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And then, below that see:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在下面看到：
- en: '[PRE36]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you find yourself working on a project with other developers, consider breaking
    your functions down like this rather than packing them directly into jQuery functions
    as my first example did. It makes for more maintainable code and you can reuse
    your functions with other jQuery functions and scripts.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己与其他开发人员一起在一个项目上工作，请考虑像这样将你的函数拆分开来，而不是像我的第一个例子那样直接将它们打包到jQuery函数中。这样做可以使代码更易于维护，并且你可以将你的函数与其他jQuery函数和脚本一起重用。
- en: Summary
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'To recap, we took a look at getting jQuery included into WordPress by registering
    WordPress'' bundled version and by using Google''s CDN. We also took a look at
    jQuery''s top three "secret weapons":'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们通过注册WordPress捆绑版本和使用Google的CDN来将jQuery包含到WordPress中。我们还研究了jQuery的三个“秘密武器”：
- en: Selectors and filters
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择器和过滤器
- en: Manipulating and changing content
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操纵和改变内容
- en: Events and effects
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件和效果
- en: 'After exploring the basics of jQuery within WordPress and getting a feel for
    how they work, you may feel like you''re good to go! In many ways you are, but
    we''re going to continue exploring WordPress and jQuery in more detail about the
    parts of WordPress that generate content we can enhance with jQuery: We''ll look
    deeper into WordPress themes and plugins as well as take a look at another type
    of plugin, the jQuery plugin. Themes and plugins can make our WordPress development
    work very powerfully and flexibly across multiple sites and projects.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索WordPress中的jQuery基础知识并且对它们的工作方式有所了解之后，你可能会觉得你已经准备好了！在很多方面，你确实已经准备好了，但我们将会继续深入探讨WordPress和jQuery，更详细地了解WordPress生成内容的部分，我们可以使用jQuery来增强它们：我们将更深入地研究WordPress主题和插件，以及看看另一种类型的插件，即jQuery插件。主题和插件可以使我们的WordPress开发工作在多个站点和项目中非常强大和灵活。
