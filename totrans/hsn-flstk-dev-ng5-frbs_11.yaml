- en: Debugging Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging software is considered the most important part of software development.
    This process increases the efficiency and decreases the development time. In this
    chapter, we will discuss the different methodologies and cover all the aspects
    required to debug an application. We will start with Angular and HTML debugging
    using Chrome's developer tools and also touch on Augury for debugging an Angular
    component. We will move forward with TypeScript debugging, as this will help to
    check for errors within our TypeScript code. We will cover CSS so that we can
    design many style elements from the tools themselves. Finally, we will take a
    look at network API calls using **Postman** and developer tools. As part of this
    chapter, we will cover Chrome's browser tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start with Augury for Chrome. This tool gives a very
    nice representation of various Angular components with dependencies. It provides
    an insight into the application and relationships between different building blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Augury
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The best way to install Augury is to use the web store in Chrome. Alternatively,
    you can also install it from the Augury site. Perform the following steps to install
    Augury:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `chrome://apps/` on your Chrome browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Web Store on the bottom-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the web store page, type `augury` into the search box and press *Enter*,
    and Augury appears on the right panel, as follows; in my case, this appears as
    ADDED, but for a new installation an ADD TO CHROME button appears, which you need
    to click:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, when Augury is installed, the black moon with the yellow background
    will appear on the top-right corner of the Chrome browser, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using Augury's features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Augury provides good features, which helps to preview our data and components
    at a glance. In this chapter, we cover the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Component tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Router tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NgModules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you launch the Augury console, the first view that you can see is the
    component tree. The following screenshot shows the user profile view of our friends
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding component tree shows a hierarchical view of `AppComponent` and
    `UserProfileComponent`. On the right panel, we have the Properties tab, which
    contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'View Source: This shows the actual source code of the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Change Detection: This shows whether we have used a change detection in our
    component or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'State: This shows all the instance member variables of the class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dependencies: This shows the dependencies of the component with other components
    or providers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another view is the Injector Graph, which shows where the particular component
    or provider is injected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Router tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Augury provides the routing information for an application. This helps in viewing
    all the routes used in the application. This option is available next to the Component
    Tree option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: NgModules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NgModules is another useful feature added in Augury. It is available next to
    Router Tree. It provides information about all the Imports, Exports, Providers,
    Declarations, and providesInDeclarations configured in particular application
    modules, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.gif)'
  prefs: []
  type: TYPE_IMG
- en: Debugging a web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will cover Chrome developer tools. These tools provide
    many features for analyzing our application. We cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout Preview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can open your Chrome developer tools by right-clicking on the mouse on the
    browser page and Inspect or press *F12*. The Chrome developer tool opens with
    multiple tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can click on the Elements tab, which shows the DOM elements with an `<html>`
    tag as the root. You can further expand it by a right arrow icon on each elements,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding preview helps to debug HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: Layout preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Layout preview is a nice feature to preview the layout with an actual browser
    view. This tool provides a two-way view, as you can hover over the web view on
    the browser using the mouse's arrow key, and it shows actual HTML elements on
    your developer tool. You can also hover over the HTML elements in the developer
    tool and take a look at the highlight view in the browser, as shown in the subsequent
    screenshot. As you hover over the browser, you will see the actual `<div>` tag
    with the style used as `.user-profile`, and when you click on the element, the
    elements in the developer tool open.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This layout preview helps to debug our live application.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an another important aspect of debugging the live TypeScript code.
    The Chrome tool provides a good mechanism to debug the code. In this section,
    we cover the following features of the Sources tab in the Chrome developer tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and searching the source file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting breakpoints and watching live values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding code in the console window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing and searching a source file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can see our TypeScript files on the Sources tab in the developer tool. All
    the files appear on the left panel under the `webpack://` folder. The folder will
    appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also search the files using the *Ctrl* + *P* command. The source code
    appears in the middle panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Putting in breakpoints and watching live values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Live debugging is the most interesting part of debugging and really helps in
    debugging the legacy code, as this helps to know the code flow by putting breakpoints
    in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can enable the breakpoint by just clicking on the number in the code line,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you refresh the page, the application stops at the breakpoint line. You
    can traverse the code using the panel on the top-right corner, which has a command
    to step over, step into, step out, and resume the application. You can also add
    watch values using the plus icon on the right corner of the Watch panel; as shown
    in the following screenshot, we added a user object on the Watch panel on the
    right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a quick way to debug an issue or to know the flow of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding code in the console window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The developer tool provides a feature to add code on to the deployed code and
    do real-time coding. We can open a file and just click on the line to add implementation
    on to the existing file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we added `console.log` to note the log on the
    console window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This editor also provides content assist, which is context-sensitive content
    completion upon user request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Content assist appears when we enter the following command into any line in
    the code; a window appears with an all reference option, and you can filter the
    option further by typing a specific alphabet key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the content assist for the HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This feature helps to add code to the existing file and also debugs the code
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Debugging CSS is another aspect of web development. In this section, we cover
    debugging and designing live CSS elements. The Chrome developer tool provides
    an option to change the style elements and add a new element. We will cover the
    following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the styles panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering and modifying styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the styles panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have opened Chrome''s developer tools, open the Elements tab and click on any HTML
    `<div>` tag; you should see a Styles panel appear on the right side. This panel
    consists of three tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Styles**: This shows all the styles applied to a particular HTML element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Computed**: This shows all the computed values applied to a particular HTML
    element; this also shows the box model, which contains content, padding, border,
    and margin information about the selected HTML element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Event Listeners**: This shows all the click events available for a particular
    HTML element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00051.gif)'
  prefs: []
  type: TYPE_IMG
- en: Discovering and modifying styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will modify the styles of an HTML element, and, as part
    of an exercise, we modify the existing user profile page. We perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the friends application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the user profile page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hover over the user profile page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the user profile page on the browser page; it opens the Chrome developer
    tool with highlight on the HTML element and on the right panel you can see the
    `.user-profile` style.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you hover over the style element, check boxes appear for all the style
    rules, and we can uncheck a check box to disable the particular style and see
    the effect on the user profile page. In the following example, we disabled the
    width style rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can add a new style to our existing styles rules. When we hover around the overflow
    icon, a tool tip appears with an option to add new styles, and, as we add styles,
    it also supports content assist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we can edit the existing styles by clicking on the existing item.
    In the following example we changed the width from 50% to 60%:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This option in the tool helps to debug the styles within our web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Network debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Network debugging is quite useful in understanding the API call and its response.
    In the  Firebase API call, we won''t find this of much use, as the Firebase database
    portal provides a view of the JSON response. Network debugging tools are quite
    handy when we explore live debugging of network calls. In this section, we will
    discuss the following two tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Postman**: This is similar to Augury extension; you can install the Postman
    from the Chrome extension, or you can download the OS-specific installer from
    [https://www.getpostman.com/](https://www.getpostman.com/). This tool is really
    useful in the initial phase of development, as this helps to understand the APIs
    and response and to integrate the APIs in the application accordingly. You can
    create HTTP methods, such as GET, POST, PUT, or DELETE, using Authorization, Headers, and
    Body:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**The network tab in the Chrome developer tool**: This is really useful in
    live debugging of network calls in the Chrome developer tool. This shows all the
    network calls when the page is loaded. You can also apply the filter to see a
    particular network call type:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Network debugging helps confirm the expected response from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the different aspects of debugging techniques. We
    started with browser-related debugging techniques, which helped in analyzing and
    previewing HTML elements. We covered TypeScript debugging and placed a breakpoint
    on the deployed application file. We also covered CSS debugging. We disabled and
    added the style on the CSS panel. Finally, we covered networking debugging, where
    we discussed the Postman tool and the Chrome developer network tab. Debugging
    techniques help a lot in the process of becoming an efficient web developer.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will deploy our application to the Firebase server.
    We will also enable Firebase security, as this makes our application more secure.
  prefs: []
  type: TYPE_NORMAL
