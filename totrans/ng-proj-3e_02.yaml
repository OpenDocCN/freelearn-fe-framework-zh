- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an SPA Application with Scully and Angular Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular applications follow the **Single-Page Application (SPA)** architecture,
    where different views of the web page can be activated using the URL in the browser.
    Any changes to that URL can be intercepted by the Angular router and translated
    to routes that can activate a particular Angular component.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scully** is a popular static website generator that is based on the **Jamstack**
    architecture. It can cooperate nicely with the Angular router to prerender the
    content of an Angular application according to each route.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to combine Angular and Scully to create a personal
    blog. The following topics are going to be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up routing in an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the basic layout of our blog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring routing for our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding blog capabilities with Scully
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying blog posts on the home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the old days of web development, client-side applications were highly coupled
    with the underlying server infrastructure. Much machinery was involved when we
    wanted to visit the page of a website using a URL.
  prefs: []
  type: TYPE_NORMAL
- en: The browser would send the requested URL to the server, and the server should
    respond with a matching HTML file for that URL. This was a complicated process
    that would result in delays and varying round-trip times.
  prefs: []
  type: TYPE_NORMAL
- en: Modern web applications eliminate these problems using the SPA architecture.
    A client needs to request a single HTML file only once from the server. Any subsequent
    changes to the URL of the browser are handled internally by the client infrastructure.
    In Angular, the router is responsible for intercepting in-app URL requests and
    handling them according to a defined route configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jamstack is a hot emerging technology that allows us to create fast and secure
    web applications. It can be used for any application type, ranging from an e-commerce
    website to a **Software as a Service (SaaS)** web application or even a personal
    blog. The architecture of Jamstack is based on the following pillars:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Performance**: Pages are generated and prerendered during production, eliminating
    the need to wait for content to load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scaling**: Content is static files that can be served from anywhere, even
    from a **Content Delivery Network (CDN)** provider that improves the performance
    of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: The serverless nature of server-side processes and the fact that
    content is already static eliminates potential attacks that target server infrastructures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scully is the first static website generator for Angular that embraces the Jamstack
    approach. It essentially generates pages of the Angular application during build
    time to be immediately available when requested.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will build a personal blog using the Angular framework
    and enhance it with Jamstack characteristics using the Scully site generator.
    Initially, we will scaffold a new Angular application and enable it for routing.
    We will then create the basic layout of our application by adding some barebones
    components. As soon as we have a working Angular application, we will add blog
    support to it using Scully. We will then create some blog posts using Markdown
    files and display them on the home page of our application. The following diagram
    depicts an architectural overview of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, διάγραμμα, σκίτσο/σχέδιο, γραμμή  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_02_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 1 hour.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following software tools are required to complete this project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular CLI: A command-line interface for Angular that you can find at [https://angular.io/cli](https://angular.io/cli).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub material: The related code for this chapter, which you can find in the
    `Chapter02` folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up routing in an Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will kick off our project by creating a new Angular application from scratch.
    Execute the following Angular CLI command in a terminal window to create a new
    Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `ng new` command to create a new Angular application, passing the
    following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`my-blog`: The name of the Angular application that we want to create. The
    Angular CLI will create a `my-blog` folder in the path where we execute the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every command that we run in the terminal window should be run inside this folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`--routing`: Enables routing in the Angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--style=scss`: Configures the Angular application to use the SCSS stylesheet
    format when working with CSS styles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we enable routing in an Angular application, the Angular CLI imports several
    artifacts from the **@angular/router** npm package in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It creates the `app-routing.module.ts` file, which is the main routing module
    of our application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It imports `AppRoutingModule` into the main module of our application, `app.module.ts`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We configured our application to use the SCSS stylesheet format. Instead of
    creating the styles of our application manually, we will use the **Bootstrap CSS**
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in a terminal window to install Bootstrap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding command, we use the `npm` executable to install the `bootstrap`
    package from the npm registry.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `import` statement at the top of the `styles.scss` file that
    exists in the `src` folder of our Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the following section, we will learn how to create the basic layout of our
    blog by creating components, such as the header and the footer.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the basic layout of our blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A blog typically has a header containing all the primary website links and a
    footer containing copyright information and other useful links. In the world of
    Angular, both can be represented as separate components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The header component is used only once since it is added when our application
    starts up, and it is always rendered as the main menu of the website. In Angular,
    we typically create a module, named `core` by convention, to keep such components
    or services central to our application. To create the module, we use the `generate`
    command of the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create the module in the `src\app\core` folder of
    our application. To create the header component, we will use the same command,
    passing a different set of options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create all necessary component files inside the `src\app\core\header`
    folder. It will also declare `HeaderComponent` in the `core.module.ts` file and
    add it to the `exports` property so that other modules can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The header component should display the main links of our blog. Open the `header.component.html`
    template file of the header component and replace its content with the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The footer component can be used more than once in an Angular application.
    Currently, we want to display it on the main page of our application. In the future,
    we may want to have it also on a login page that will be available for blog visitors.
    In such a case, the footer component should be reusable. When we want to group
    components that will be reused throughout our application, we typically create
    a module named **shared** by convention. Use the Angular CLI `generate` command
    to create the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create the `shared` module in the `src\app\shared`
    folder. The footer component can now be created using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create all necessary files of the footer component
    inside the `src\app\shared\footer` folder. It will also add `FooterComponent`
    in the `declarations` and `exports` properties in the `shared.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The content of the footer component should contain copyright information about
    our blog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how to add this information to our component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `footer.component.ts` file, add a `currentDate` property in the `FooterComponent`
    class, and initialize it to a new `Date` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `footer.component.html` template file of the footer component and
    replace its content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses interpolation to display the value of the `currentDate`
    property on the screen. It also uses the built-in `date` pipe to display only
    the year of the current date.
  prefs: []
  type: TYPE_NORMAL
- en: Pipes are a built-in feature of the Angular framework that apply transformations
    on the view representation of a component property. The underlying value of the
    property remains intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already created the essential components of our blog. Now it is time
    to display them on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main module of the application, the `app.module.ts` file, and add
    `CoreModule` and `SharedModule` into the `imports` property of the `@NgModule`
    decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the appropriate `import` statements at the top of the file for each module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.html` template file of the main component and replace
    its content with the following HTML snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We added the header and the footer component in the preceding snippet by using
    their CSS selectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the `serve` command of the Angular CLI to preview the application,
    we should get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Basic layout](img/B18465_02_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Basic layout
  prefs: []
  type: TYPE_NORMAL
- en: We have already completed the basic layout of our blog application, and it looks
    great! But the header contains two additional links that we have not covered yet.
    We will learn how to use routing to activate those links in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring routing for our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The header component that we created in the previous section contains two links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Articles**: Displays a list of blog articles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contact**: Displays personal information about the blog owner'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous links will also become the main features of our application. So,
    we need to create an Angular module for each one.
  prefs: []
  type: TYPE_NORMAL
- en: When you design your website and need to decide upon the Angular modules that
    you will use, check out the main menu of the website. Each link of the menu should
    be a different feature and, thus, a different Angular module.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, Angular modules that contain functionality for a specific feature
    are called **feature modules**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the contact page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s begin by creating our contact feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a module that will be the home for our contact feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a component that will be the main component of the `contact` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We pass the `--flat` option to the `generate` command so that the Angular CLI
    will not create a separate folder for our component, as in previous cases. The
    `contact` component will be the only component in our module, so there is no point
    in having it separately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `contact.component.html` file and add the following HTML content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we used the `angular.png` image, which you can find in
    the `src\assets` folder of the project from the accompanying GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The `assets` folder in an Angular CLI project is used for static content such
    as images, fonts, or JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already created our contact feature. The next step is to add it to
    the main page of our Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app-routing.module.ts` file and add a new route configuration object
    in the `routes` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code indicates that when the URL of the browser points to the
    `contact` path, our application will activate and display `ContactComponent` on
    the screen. The `routes` property of a routing module contains the routing configuration
    of the respective feature module. It is an array of route configuration objects
    where each one defines the component class and the URL path that activates it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add `ContactModule` in the `imports` array of the `@NgModule` decorator of
    `AppModule` to be able to use it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not forget to add the respective `import` statement for `ContactModule` at
    the top of the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Routed components, just like `ContactComponent`, need a place where they can
    be loaded. Open the `app.component.html` file and add the `<router-outlet>` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to wire up the route configuration that we created with the actual
    link on the header component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `header.component.html` file and add the `routerLink` directive to
    the respective anchor HTML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the value of the `routerLink` directive contains a leading `/`,
    whereas the `path` property of the route configuration object that we defined
    does not. According to the case, omitting the `/` would give a different meaning
    to the route.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `routerLink` and `routerLinkActive` directives are part of the Angular
    Router package. We need to import `RouterModule` in the `core.module.ts` file
    to use them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to preview our new contact page! If we run the application
    using `ng serve` and click on the **Contact** link, we should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, λογότυπο, γραμματοσειρά, στιγμιότυπο οθόνης  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_02_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Contact page
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will build the functionality for the **Articles**
    link of the header in our blog.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the articles page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The feature that is responsible for displaying articles in our blog will be
    the `articles` module. It will also be the module that connects the dots between
    Angular and Scully. We will use the `generate` command of the Angular CLI to create
    that module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous command, we pass some additional routing options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--route`: Defines the URL path of our feature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--module`: Indicates the routing module that will define the route configuration
    object that activates our feature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Angular CLI performs additional actions, instead of just creating the module,
    upon executing the command:'
  prefs: []
  type: TYPE_NORMAL
- en: It creates a routed component in the `src\app\articles` folder that will be
    activated by default from a route navigation object. It is the landing page of
    our feature, and it will display a list of blog posts, as we will see in the *Displaying
    blog data on the home page* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates a routing module named `articles-routing.module.ts` that contains
    the routing configuration of our module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It adds a new route configuration object in the route configuration of the main
    application module that activates our module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `articles-routing.module.ts` file contains the routing configuration for
    the `articles` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'It imports `RouterModule` using the `forChild` method to pass the routing configuration
    to the Angular router. If we take a look at the main routing module of the application,
    we will see that it follows a slightly different approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app-routing.module.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `forChild` method is used in feature modules, whereas the `forRoot` method
    should be used *only* in the main application module.
  prefs: []
  type: TYPE_NORMAL
- en: The route configuration of the `articles` module contains only one route that
    activates `ArticlesComponent`. The path of the route is set to an empty string
    to indicate that it is the default route of the routing module. It essentially
    means that `ArticlesComponent` will be activated whenever that module is loaded.
    But how is the `articles` module loaded in our application?
  prefs: []
  type: TYPE_NORMAL
- en: The second route of the main routing module contains a route configuration object
    that does not activate a component but rather a module. It uses the `loadChildren`
    method to load `ArticlesModule` dynamically when navigation triggers the `articles`
    path.
  prefs: []
  type: TYPE_NORMAL
- en: The `import` function in the `loadChildren` property accepts the relative path
    of the TypeScript module file without the extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous approach is called **lazy loading** and improves the startup and
    the overall performance of an Angular application. It creates a separate bundle
    for each lazy-loaded module, which is loaded upon request, reducing the final
    bundle size and the memory consumption of your application. Let’s wire up the
    new route to our header component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `header.component.html` file and add the following `routerLink` and
    `routerLinkActive` directives to the `Articles` anchor HTML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `ng serve` and use your favorite browser to preview your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the developer tools of your browser, click on the **Articles** link, and
    inspect the **Network** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, αριθμός, λογισμικό  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_02_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Lazy loading Angular module
  prefs: []
  type: TYPE_NORMAL
- en: Among other requests, you should see one named `src_app_articles_articles_module_ts.js`.
    It is the bundle of the lazy-loaded articles module that was loaded when you clicked
    on the **Articles** link.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to convert our amazing Angular application into a professional
    blog website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, let’s add some additional routes to the `app-routing.module.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We added a default route to automatically redirect our blog users to the `articles`
    path upon visiting the blog. Additionally, we created a new route configuration
    object with its path set to `**` that also navigates to the `articles` path. The
    `**` syntax is called the **wildcard** route, and it is triggered when the router
    cannot match a requested URL with a defined route.
  prefs: []
  type: TYPE_NORMAL
- en: Define the most specific routes first and then add any generic ones, such as
    the default and the wildcard routes. The Angular router parses the route configuration
    in the order that we define and follows a first-match-wins strategy to select
    one.
  prefs: []
  type: TYPE_NORMAL
- en: We have already enabled and configured routing in our Angular application. In
    the following section, we will establish the infrastructure needed to add blogging
    capabilities to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding blog capabilities with Scully
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application currently does not have any specific logic regarding blog posts.
    It is a typical Angular application that uses routing. However, by adding a routing
    configuration, we have established the foundation for adding blog support using
    Scully.
  prefs: []
  type: TYPE_NORMAL
- en: Scully needs at least one route defined in an Angular application to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to install Scully in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Scully library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the `install` command of the npm CLI to install Scully in our Angular
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command downloads and installs all the necessary npm packages
    for Scully to work correctly in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: The Scully library is not fully compatible with Angular 16, as of this writing.
    In the preceding command we use the `--force` option to ignore any warnings that
    come from the Angular version incompatibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.module.ts` file and import `ScullyLibModule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`ScullyLibModule` is the main module of the Scully library; it contains various
    Angular services and directives that Scully will need.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a configuration file for the Scully library in the root folder of the
    Angular CLI workspace with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scully.my-blog.config.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration file contains information about our Angular application that
    Scully will need along the way:'
  prefs: []
  type: TYPE_NORMAL
- en: '`projectRoot`: The path containing the source code of the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`projectName`: The name of the Angular application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outDir`: The output path of the Scully-generated files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Scully output path must be different from the path that the Angular CLI
    outputs for the bundle of your Angular application. The latter can be configured
    in the `angular.json` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`routes`: It contains the route configuration that will be used for accessing
    our blog posts. Scully will populate it automatically, as we will see in the following
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we have installed Scully successfully in our Angular application, we can
    now configure it to initialize our blog.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing our blog page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scully provides a specific Angular CLI schematic for initializing an Angular
    application, such as a blog, by using Markdown (.md) files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will start the configuration process of our blog by going
    through a list of questions (default values are shown inside parentheses):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `posts` as the name of the blog module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new Angular module named `posts`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Leave the slug choice empty, and press *Enter* to accept the default value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The slug is a unique identifier for each post, and it is defined in the route
    configuration object of the module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter `mdfiles` as the path that Scully will use to store our actual blog post
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create an `mdfiles` folder inside the root path of our Angular CLI
    project. By default, it will also create a blog post for our convenience. We will
    learn how to create our own in the *Displaying blog data on the home page* section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `posts` as the name of the route for accessing our blog posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The name of the route is the `path` property of the route configuration object
    that will be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scully performs various actions upon executing the preceding commands, including
    the creation of the routing configuration of the `posts` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '`posts-routing.module.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `path` property for the first route is set to `:id` and activates `PostsComponent`.
    The colon character indicates that `id` is a route parameter. The `id` parameter
    is related to the `slug` property defined earlier in the Scully configuration.
    Scully works by creating one route for each blog post that we create. It uses
    the route configuration of the `posts` module and the main application module
    to build the `routes` property in the Scully configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '`PostsComponent` is the Angular component that is used to render the details
    of each blog post. The template file of the component can be further customized
    according to your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`posts.component.html`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You can customize all content in the previous template file except the `<scully-content></scully-content>`
    line, which is used internally by Scully.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have completed the installation and configuration of Scully
    in our Angular application. It is now time for the final part of the project!
    In the next section, we will get Angular and Scully to cooperate and display blog
    posts in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying blog posts on the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We would like our users to see the list of available blog posts as soon as
    they land on our blog website. According to the default route path that we have
    defined, `ArticlesComponent` is the landing page of our blog. Scully provides
    `ScullyRoutesService`, an Angular service that we can use in our components to
    get information about the routes that it will create according to the blog posts.
    Let’s put this service into action on our landing page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `articles.component.ts` file and modify the `import` statements as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `OnInit` interface to the list of implemented interfaces of the `ArticlesComponent`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inject `ScullyRoutesService` in the `constructor` of the `ArticlesComponent`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following component property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `ngOnInit` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `articles.component.html` file and add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are many Angular techniques involved in the previous steps, so let’s break
    them down piece by piece.
  prefs: []
  type: TYPE_NORMAL
- en: When we want to use an Angular service in a component, we just need to ask for
    it from the Angular framework. How? By adding it as a property in the `constructor`
    of the component. The component does not need to know anything about how the service
    is implemented.
  prefs: []
  type: TYPE_NORMAL
- en: The `ngOnInit` method is part of the `OnInit` interface, which is implemented
    by our component. It is called by the Angular framework when a component is initialized
    and provides us with a hook to add custom logic to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Angular services that provide initialization logic to a component should be
    called inside the `ngOnInit` method and not in the `constructor` because it is
    easier to provide mocks about those services when unit testing the component.
  prefs: []
  type: TYPE_NORMAL
- en: The `available$` property of `ScullyRoutesService` is called an **observable**
    and returns all the available routes that were generated from Scully when we subscribe
    to it. To avoid displaying routes other than those related to blog posts, such
    as the `contact` route, we filter out the results from the `available$` property.
  prefs: []
  type: TYPE_NORMAL
- en: In the component template, we use the `*ngFor` Angular built-in directive and
    the `async` pipe to subscribe to the `posts$` observable inside HTML. We can then
    access each item using the `post` template reference variable and use interpolation
    to display `title` and `description`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we add a `routerLink` directive to each anchor element to navigate
    to the respective blog post when clicked. Notice that `routerLink` is surrounded
    by `[]`. The `[]` syntax is called **property binding**, and we use it when we
    want to bind the property of an HTML element to a variable. In our case, we bind
    the `routerLink` directive to the `route` property of the `post` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have finally completed all the pieces of the puzzle, we can see
    our blog website in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `build` command of the Angular CLI to build our Angular application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to build Scully and generate our blog routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create a `scully-routes.json` file inside the `src\assets`
    folder. It contains the routes of our Angular application and is needed by the
    Scully runtime.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Running the Scully executable for the first time will prompt you to collect
    anonymous errors to improve its services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command to serve our blog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will start two web servers: one that contains the static
    prerendered version of our website built using Scully and another that is the
    Angular live version of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18465_02_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Serving our application
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open our browser and navigate to `http://localhost:1668`, we will not
    see any blog posts. A blog post created with Scully is not returned in the `available$`
    property of `ScullyRoutesService` *unless* we publish it. To publish a blog post,
    we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `mdfiles` folder that Scully created and open the only `.md`
    file that you will find. The name and contents may vary for your file because
    it is based on the date Scully created it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Scully has defined a set of properties between the closing and ending `---`
    lines at the top of the file representing metadata about the blog post. You can
    also add your own as key-value pairs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Delete the `slugs` property and set the `published` property to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to force Scully to regenerate the routes of our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need to execute the previous command *every time* we make a change in our
    blog-related files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Execute the `npx scully serve --project my-blog` command and navigate to preview
    the generated website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now see one blog post, the default one that was created when we installed
    Scully. Let’s create another one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following `generate` command of the Angular CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding command, we use the `@scullyio/init:post` schematic, passing
    the name of the post that we want to create as an option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set the target folder for the new blog post to `mdfiles`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Scully will create a Markdown file named `angular-and-scully.md` inside the
    specified folder. Open that file and update its content to be the same as the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `npx scully --project my-blog` to create a route for the newly created blog
    post. Scully will also update the `scully-routes.json` file with the new route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we preview our application now, it should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά, γραμμή  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_02_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – List of blog posts
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on one of the blog items, we will navigate to the selected blog
    post. The content that is currently shown on the screen is a prerendered version
    of the blog post route:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B18465_02_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Blog post details
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that, navigate to the `dist` folder of your Angular project, where
    you will find two folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`my-blog`: This contains the Angular live version of our application. When
    we execute the `ng build` Angular CLI command, it builds our application and outputs
    bundle files in this folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static`: This contains a prerendered version of our Angular application generated
    from Scully when we run the `npx scully --project my-blog` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we navigate to the `static` folder, we will see that Scully has created one
    folder for each route of our Angular application. Each folder contains an `index.html`
    file, which represents the component that is activated from that route.
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the `index.html` file are auto-generated by Scully, and behave
    as if we run our application live and navigate to that component.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can take your Angular application, upload it to the CDN or web server
    of your choice, and you will have your blog ready in no time! All you will have
    to do then will be to exercise your writing skills to create excellent blog content.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to combine the Angular framework with the Scully
    library to create a personal blog.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how Angular uses the built-in router package to enhance web applications
    with in-app navigation. We also learned how to organize an Angular application
    into modules and how to navigate through these.
  prefs: []
  type: TYPE_NORMAL
- en: We introduced Jamstack to our Angular application using the Scully library and
    saw how easy it is to convert our application into a prerendered blog. We used
    the Scully interface to create some blog posts and display them on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will investigate another exciting feature of the
    Angular framework, forms. We are going to learn how to use them and build an issue-tracking
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a look at a few practice questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which library do we use for routing in an Angular application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we add routing capabilities in an HTML anchor element?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Angular pipe do we use for date formatting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `assets` folder in an Angular CLI application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which route property do we use for lazily loading a module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which npm CLI command do we use for installing Scully?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which service do we use for fetching Scully routes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is property binding?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Angular directive do we use for iterating over an array in HTML?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a standard Angular application and a Scully one?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some links to build upon what we learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular routing: [https://angular.io/guide/router](https://angular.io/guide/router)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular feature modules: [https://angular.io/guide/module-types](https://angular.io/guide/module-types)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lazy loading modules: [https://angular.io/guide/lazy-loading-ngmodules](https://angular.io/guide/lazy-loading-ngmodules)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular built-in pipes: [https://angular.io/api?type=pipe](https://angular.io/api?type=pipe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bootstrap CSS: [https://getbootstrap.com](https://getbootstrap.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Jamstack: [https://jamstack.org](https://jamstack.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scully: [https://scully.io](https://scully.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mastering Markdown: [https://guides.github.com/features/mastering-markdown](https://guides.github.com/features/mastering-markdown)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
