["```js\n    import React from \"react\";\n    import {\n      initializeReactContainer,\n      render,\n      field,\n      form,\n    } from \"./reactTestExtensions\";\n    import { AppointmentForm } from \"../src/AppointmentForm\";\n    describe(\"AppointmentForm\", () => {\n      beforeEach(() => {\n        initializeReactContainer();\n      });\n      it(\"renders a form\", () => {\n        render(<AppointmentForm />);\n        expect(form()).not.toBeNull();\n      });\n    });\n    ```", "```js\n    import React from \"react\";\n    export const AppointmentForm = () => <form />;\n    ```", "```js\n    describe(\"service field\", () => {\n    });\n    ```", "```js\n    it(\"renders as a select box\", () => {\n      render(<AppointmentForm />);\n      expect(field(\"service\").not.toBeNull();\n      expect(field(\"service\").tagName).toEqual(\"SELECT\");\n    });\n    ```", "```js\n    export const AppointmentForm = () => (\n      <form\n        <select name=\"service\" />\n      </form>\n    );\n    ```", "```js\nit(\"lists all salon services\", () => {\n  const selectableServices = [\n    \"Cut\",\n    \"Blow-dry\",\n    \"Cut & color\",\n    \"Beard trim\",\n    \"Cut & beard trim\",\n    \"Extensions\"\n  ];\n  ...\n});\n```", "```js\n    it(\"has a blank value as the first value\", () => {\n      render(<AppointmentForm />);\n      const firstOption = field(\"service\").childNodes[0];\n      expect(firstOption.value).toEqual(\"\");\n    });\n    ```", "```js\n    export const AppointmentForm = () => (\n      <form\n        <select name=\"service\">\n          <option />\n        </select>\n      </form>\n    );\n    ```", "```js\n    const labelsOfAllOptions = (element) =>\n      Array.from(\n        element.childNodes,\n        (node) => node.textContent\n      );\n    ```", "```js\n    it(\"lists all salon services\", () => {\n      const services = [\"Cut\", \"Blow-dry\"];\n\n      render(\n        <AppointmentForm selectableServices={services} />\n      );\n\n      expect(\n        labelsOfAllOptions(field(\"service\"))\n      ).toEqual(expect.arrayContaining(services));\n    });\n    ```", "```js\n    export const AppointmentForm = ({\n      selectableServices\n    }) => (\n      <form>\n        <select name=\"service\">\n          <option />\n          {selectableServices.map(s => (\n            <option key={s}>{s}</option>\n          ))}\n        </select>\n      </form>\n    );\n    ```", "```js\n    AppointmentForm.defaultProps = {\n      selectableServices: [\n        \"Cut\",\n        \"Blow-dry\",\n        \"Cut & color\",\n        \"Beard trim\",\n        \"Cut & beard trim\",\n        \"Extensions\",\n      ]\n    };\n    ```", "```js\n    const findOption = (selectBox, textContent) => {\n      const options = Array.from(selectBox.childNodes);\n      return options.find(\n        option => option.textContent === textContent\n      );\n    };\n    ```", "```js\n    it(\"pre-selects the existing value\", () => {\n      const services = [\"Cut\", \"Blow-dry\"];\n      const appointment = { service: \"Blow-dry\" };\n      render(\n        <AppointmentForm\n          selectableServices={services}\n          original={appointment}\n        />\n      );\n      const option = findOption(\n        field(\"service\"),\n        \"Blow-dry\"\n      );\n      expect(option.selected).toBe(true);\n    });\n    ```", "```js\n    <select\n      name=\"service\"\n      value={original.service}\n      readOnly>\n    ```", "```js\n    export const AppointmentForm = ({\n      original,\n      selectableServices\n    }) =>\n    ```", "```js\n    const blankAppointment = {\n      service: \"\",\n    };\n    ```", "```js\n    it(\"renders a form\", () => {\n      render(\n        <AppointmentForm original={blankAppointment} />\n      );\n      expect(form()).not.toBeNull();\n    });\n    ```", "```js\n    describe(\"AppointmentForm\", () => {\n      const blankAppointment = {\n        service: \"\",\n      };\n    const services = [\"Cut\", \"Blow-dry\"]; \n      ...\n    });\n    ```", "```js\n<table id=\"time-slots\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>Oct 11</th>\n      <th>Oct 12</th>\n      <th>Oct 13</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9:00</th>\n      <td>\n        <input type=\"option\" name=\"timeSlot\" value=\"...\" />\n      </td>\n    </tr>\n    <!-- ... two more cells ... -->\n  </tbody>\n</table>\n```", "```js\n    describe(\"time slot table\", () => {\n      it(\"renders a table for time slots with an id\", () => {\n        render(\n          <AppointmentForm original={blankAppointment} />\n        );\n        expect(\n          element(\"table#time-slots\")\n        ).not.toBeNull();\n      });\n    });\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      field,\n      form,\n      element,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    const TimeSlotTable = () => <table id=\"time-slots\" />;\n    ```", "```js\n    <form>\n      ...\n      <TimeSlotTable />\n    </form>;\n    ```", "```js\n    it(\"renders a time slot for every half an hour between open and close times\", () => {\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          salonOpensAt={9}\n          salonClosesAt={11}\n        />\n      );\n      const timesOfDayHeadings = elements(\"tbody >* th\");\n      expect(timesOfDayHeadings[0]).toContainText(\n        \"09:00\"\n      );\n      expect(timesOfDayHeadings[1]).toContainText(\n        \"09:30\"\n      );\n      expect(timesOfDayHeadings[3]).toContainText(\n        \"10:30\"\n      );\n    });\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      field,\n      form,\n      element,\n      elements,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    const timeIncrements = (\n      numTimes,\n      startTime,\n      increment\n    ) =>\n      Array(numTimes)\n        .fill([startTime])\n        .reduce((acc, _, i) =>\n          acc.concat([startTime + i * increment])\n        );\n    const dailyTimeSlots = (\n      salonOpensAt,\n      salonClosesAt\n    ) => {\n      const totalSlots =\n        (salonClosesAt – salonOpensAt) * 2;\n      const startTime = new Date()\n        .setHours(salonOpensAt, 0, 0, 0);\n      const increment = 30 * 60 * 1000;\n      return timeIncrements(\n        totalSlots,\n        startTime,\n        increment\n      );\n    };\n    ```", "```js\n    const toTimeValue = timestamp =>\n      new Date(timestamp).toTimeString().substring(0, 5);\n    ```", "```js\n    const TimeSlotTable = ({\n      salonOpensAt,\n      salonClosesAt\n    }) => {\n      const timeSlots = dailyTimeSlots(\n        salonOpensAt,\n        salonClosesAt);\n      return (\n        <table id=\"time-slots\">\n          <tbody>\n            {timeSlots.map(timeSlot => (\n              <tr key={timeSlot}>\n                <th>{toTimeValue(timeSlot)}</th>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n    };\n    ```", "```js\n    export const AppointmentForm = ({\n      original,\n      selectableServices,\n      service, \n      salonOpensAt,\n      salonClosesAt\n    }) => (\n      <form>\n        ...\n        <TimeSlotTable\n          salonOpensAt={salonOpensAt}\n          salonClosesAt={salonClosesAt} />\n      </form>\n    );\n    ```", "```js\n    AppointmentForm.defaultProps = {\n      salonOpensAt: 9,\n      salonClosesAt: 19,\n      selectableServices: [ ... ]\n    };\n    ```", "```js\n    it(\"renders an empty cell at the start of the header row\", () => \n      render(\n        <AppointmentForm original={blankAppointment} />\n      );\n      const headerRow = element(\"thead > tr\");\n      expect(headerRow.firstChild).toContainText(\"\");\n    });\n    ```", "```js\n    <table id=\"time-slots\">\n      <thead>\n        <tr>\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        ...\n      </tbody>\n    </table>\n    ```", "```js\n    it(\"renders a week of available dates\", () => {\n      const specificDate = new Date(2018, 11, 1);\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          today={specificDate}\n        />\n      );\n      const dates = elements(\n        \"thead >* th:not(:first-child)\"\n      );\n      expect(dates).toHaveLength(7);\n      expect(dates[0]).toContainText(\"Sat 01\");\n      expect(dates[1]).toContainText(\"Sun 02\");\n      expect(dates[6]).toContainText(\"Fri 07\");\n    });\n    ```", "```js\n    const weeklyDateValues = (startDate) => {\n      const midnight = startDate.setHours(0, 0, 0, 0);\n      const increment = 24 * 60 * 60 * 1000;\n      return timeIncrements(7, midnight, increment);\n    };\n    ```", "```js\n    const toShortDate = (timestamp) => {\n      const [day, , dayOfMonth] = new Date(timestamp)\n        .toDateString()\n        .split(\" \");\n      return `${day} ${dayOfMonth}`;\n    };\n    ```", "```js\n    const TimeSlotTable = ({\n      salonOpensAt,\n      salonClosesAt,\n      today\n    }) => {\n      const dates = weeklyDateValues(today);\n      ...\n      return (\n        <table id=\"time-slots\">\n          <thead>\n            <tr>\n              <th />\n              {dates.map(d => (\n                <th key={d}>{toShortDate(d)}</th>\n              ))}\n            </tr>\n          </thead>\n          ...\n        </table>\n      )\n    };\n    ```", "```js\n    export const AppointmentForm = ({\n      original,\n      selectableServices,\n      service,\n      salonOpensAt,\n      salonClosesAt,\n      today\n    }) => {\n      ...\n      return <form>\n        <TimeSlotTable\n          ...\n          salonOpensAt={salonOpensAt}\n          salonClosesAt={salonClosesAt}\n          today={today}\n        />\n      </form>;\n    };\n    ```", "```js\n    AppointmentForm.defaultProps = {\n      today: new Date(),\n      ...\n    }\n    ```", "```js\n    it(\"renders radio buttons in the correct table cell positions\", () => {\n      const oneDayInMs = 24 * 60 * 60 * 1000;\n      const today = new Date();\n      const tomorrow = new Date(\n        today.getTime() + oneDayInMs\n      );\n      const availableTimeSlots = [\n        { startsAt: today.setHours(9, 0, 0, 0) },\n        { startsAt: today.setHours(9, 30, 0, 0) },\n        { startsAt: tomorrow.setHours(9, 30, 0, 0) },\n      ];\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          availableTimeSlots={availableTimeSlots}\n          today={today}\n        />\n      );\n      expect(cellsWithRadioButtons()).toEqual([0, 7, 8]);\n    });\n    ```", "```js\n    const cellsWithRadioButtons = () =>\n      elements(\"input[type=radio]\").map((el) =>\n        elements(\"td\").indexOf(el.parentNode)\n      );\n    ```", "```js\n    {timeSlots.map(timeSlot =>\n      <tr key={timeSlot}>\n        <th>{toTimeValue(timeSlot)}</th>\n        {dates.map(date => (\n          <td key={date}>\n            <input type=\"radio\" />\n          </td>\n        ))}\n      </tr>\n    )}\n    ```", "```js\n    it(\"does not render radio buttons for unavailable time slots\", () => {\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          availableTimeSlots={[]}\n        />\n      );\n      expect(\n        elements(\"input[type=radio]\")\n      ).toHaveLength(0);\n    });\n    ```", "```js\n    const mergeDateAndTime = (date, timeSlot) => {\n      const time = new Date(timeSlot);\n      return new Date(date).setHours(\n        time.getHours(),\n        time.getMinutes(),\n        time.getSeconds(),\n        time.getMilliseconds()\n      );\n    };\n    ```", "```js\n    const TimeSlotTable = ({\n      salonOpensAt,\n      salonClosesAt,\n      today,\n      availableTimeSlots\n    }) => {\n      ...\n    };\n    ```", "```js\n    {dates.map(date =>\n      <td key={date}>\n        {availableTimeSlots.some(availableTimeSlot =>\n          availableTimeSlot.startsAt === mergeDateAndTime(date, timeSlot)\n        )\n    ? <input type=\"radio\" />\n         : null\n        }\n      </td>\n    )}\n    ```", "```js\n    export const AppointmentForm = ({\n      original,\n      selectableServices,\n      service,\n      salonOpensAt,\n      salonClosesAt,\n      today,\n      availableTimeSlots\n    }) => {\n      ...\n      return (\n        <form>\n          ...\n          <TimeSlotTable\n            salonOpensAt={salonOpensAt}\n            salonClosesAt={salonClosesAt}\n            today={today}\n            availableTimeSlots={availableTimeSlots} />\n        </form>\n      );\n    };\n    ```", "```js\n    describe(\"AppointmentForm\", () => {\n      const today = new Date();\n      const availableTimeSlots = [\n        { startsAt: today.setHours(9, 0, 0, 0) },\n        { startsAt: today.setHours(9, 30, 0, 0) },\n      ];\n    ```", "```js\n    render(\n      <AppointmentForm\n        original={blankAppointment}\n        availableTimeSlots={availableTimeSlots}\n      />\n    );\n    ```", "```js\n    it(\"sets radio button values to the startsAt value of the corresponding appointment\", () => {\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          availableTimeSlots={availableTimeSlots}\n          today={today}\n        />\n      );\n      const allRadioValues = elements(\n        \"input[type=radio]\"\n      ).map(({ value }) => parseInt(value));\n      const allSlotTimes = availableTimeSlots.map(\n        ({ startsAt }) => startsAt\n      );\n      expect(allRadioValues).toEqual(allSlotTimes);\n    });\n    ```", "```js\n    const RadioButtonIfAvailable = ({\n      availableTimeSlots,\n      date,\n      timeSlot,\n    }) => {\n      const startsAt = mergeDateAndTime(date, timeSlot);\n      if (\n        availableTimeSlots.some(\n          (timeSlot) => timeSlot.startsAt === startsAt\n        )\n      ) {\n        return (\n          <input\n            name=\"startsAt\"\n            type=\"radio\"\n            value={startsAt}\n          />\n        );\n      }\n      return null;\n    };\n    ```", "```js\n    {dates.map(date =>\n      <td key={date}>\n        <RadioButtonIfAvailable\n          availableTimeSlots={availableTimeSlots}\n          date={date}\n          timeSlot={timeSlot}\n        />\n      </td>\n    )}\n    ```", "```js\n    const startsAtField = (index) =>\n      elements(\"input[name=startsAt]\")[index];\n    ```", "```js\n    it(\"pre-selects the existing value\", () => {\n      const appointment = {\n        startsAt: availableTimeSlots[1].startsAt,\n      };\n      render(\n        <AppointmentForm\n          original={appointment}\n          availableTimeSlots={availableTimeSlots}\n          today={today}\n        />\n      );\n      expect(startsAtField(1).checked).toEqual(true);\n    });\n    ```", "```js\n    <TimeSlotTable\n      salonOpensAt={salonOpensAt}\n      salonClosesAt={salonClosesAt}\n      today={today\n      availableTimeSlots={availableTimeSlots}\n      checkedTimeSlot={appointment.startsAt}\n    />\n    ```", "```js\n    const TimeSlotTable = ({\n      ...,\n      checkedTimeSlot,\n    }) => {\n      ...\n        <RadioButtonIfAvailable\n          availableTimeSlots={availableTimeSlots}\n          date={date}\n          timeSlot={timeSlot}\n          checkedTimeSlot={checkedTimeSlot}\n        />\n      ...\n    };\n    ```", "```js\n    const RadioButtonIfAvailable = ({\n      ...,\n      checkedTimeSlot,\n    }) => {\n      const startsAt = mergeDateAndTime(date, timeSlot);\n      if (\n        availableTimeSlots.some(\n          (a) => a.startsAt === startsAt\n        )\n      ) {\n        const isChecked = startsAt === checkedTimeSlot;\n        return (\n          <input\n            name=\"startsAt\"\n            type=\"radio\"\n            value={startsAt}\n            checked={isChecked}\n          />\n        );\n      }\n      return null;\n    };\n    ```", "```js\n    it(\"renders a submit button\", () => {\n      render(\n        <AppointmentForm original={blankAppointment} />\n      );\n      expect(submitButton()).not.toBeNull();\n    });\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      field,\n      form,\n      element,\n      elements,\n      submitButton,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    <form>\n      ...\n      <input type=\"submit\" value=\"Add\" />  \n    </form>\n    ```", "```js\n    it(\"saves existing value when submitted\", () => {\n      expect.hasAssertions();\n      const appointment = {\n        startsAt: availableTimeSlots[1].startsAt,\n      };\n      render(\n        <AppointmentForm\n          original={appointment}\n          availableTimeSlots={availableTimeSlots}\n          today={today}\n          onSubmit={({ startsAt }) =>\n            expect(startsAt).toEqual(\n              availableTimeSlots[1].startsAt\n            )\n          }\n        />\n      );\n      click(submitButton());\n    });\n    ```", "```js\n    import {\n      initializeReactContainer,\n      render,\n      field,\n      form,\n      element,\n      elements,\n      submitButton,\n      click,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    export const AppointmentForm = ({\n      ...,\n      onSubmit,\n    }) => {\n      const handleSubmit = (event) => {\n        event.preventDefault();\n        onSubmit(original);\n      };\n      return (\n        <form onSubmit={handleSubmit}>\n          ...\n        </form>\n      );\n    };\n    ```", "```js\n    it(\"saves new value when submitted\", () => {\n      expect.hasAssertions();\n      const appointment = {\n        startsAt: availableTimeSlots[0].startsAt,\n      };\n      render(\n        <AppointmentForm\n          original={appointment}\n          availableTimeSlots={availableTimeSlots}\n          today={today}\n          onSubmit={({ startsAt }) =>\n            expect(startsAt).toEqual(\n              availableTimeSlots[1].startsAt\n            )\n          }\n        />\n      );\n      click(startsAtField(1));\n      click(submitButton());\n    });\n    ```", "```js\n    import React, { useState, useCallback } from \"react\";\n    ```", "```js\n    export const AppointmentForm = ({\n      ...\n    }) => {\n    const [appointment, setAppointment] = \n        useState(original);\n      ...\n      return (\n        <form>\n          ...\n          <TimeSlotTable\n            ...\n            checkedTimeSlot={appointment.startsAt}\n         />\n          ...\n        </form>\n      );\n    };\n    ```", "```js\n    const handleSubmit = (event) => {\n      event.preventDefault();\n      onSubmit(appointment);\n    };\n    ```", "```js\n    const handleStartsAtChange = useCallback(\n      ({ target: { value } }) =>\n        setAppointment((appointment) => ({\n          ...appointment,\n          startsAt: parseInt(value),\n        })),\n      []\n    );\n    ```", "```js\n    <TimeSlotTable\n      salonOpensAt={salonOpensAt}\n      salonClosesAt={salonClosesAt}\n      today={today}\n      availableTimeSlots={availableTimeSlots}\n      checkedTimeSlot={appointment.startsAt}\n      handleChange={handleStartsAtChange}\n    />\n    ```", "```js\n    const TimeSlotTable = ({\n      ...,\n      handleChange,\n    }) => {\n       ...,\n      <RadioButtonIfAvailable\n        availableTimeSlots={availableTimeSlots}\n        date={date}\n        timeSlot={timeSlot}\n        checkedTimeSlot={checkedTimeSlot}\n        handleChange={handleChange}\n      />\n      ...\n    };\n    ```", "```js\n    const RadioButtonIfAvailable = ({\n      availableTimeSlots,\n      date,\n      timeSlot,\n      checkedTimeSlot,\n      handleChange\n    }) => {\n      ...\n      return (\n        <input\n          name=\"startsAt\"\n          type=\"radio\"\n          value={startsAt}\n          checked={isChecked}\n          onChange={handleChange}\n        />\n      );\n      ...\n    };\n    ```", "```js\nconst today = new Date();\ntoday.setHours(9, 0, 0, 0);\n```", "```js\ntodayAt(9);\n```", "```js\n    export const today = new Date();\n    ```", "```js\n    import { today } from \"./builders/time\";\n    ```", "```js\n    export const todayAt = (\n      hours,\n      minutes = 0,\n      seconds = 0,\n      milliseconds = 0\n    ) =>\n      new Date(today).setHours(\n        hours,\n        minutes,\n        seconds,\n        milliseconds\n      );\n    ```", "```js\n    import { today, todayAt } from \"./builders/time\";\n    ```", "```js\n    today.setHours(9, 0, 0, 0)\n    ```", "```js\ntodayAt(9)\n```", "```js\n    today.setHours(9, 30, 0, 0)\n    ```", "```js\ntodayAt(9, 30)\n```", "```js\n    const oneDayInMs = 24 * 60 * 60 * 1000;\n    const tomorrow = new Date(\n      today.getTime() + oneDayInMs\n    );\n    ```", "```js\n    export const tomorrowAt = (\n      hours,\n      minutes = 0,\n      seconds = 0,\n      milliseconds = 0\n    ) =>\n      new Date(tomorrow).setHours(\n        hours,\n        minutes,\n        seconds,\n        milliseconds\n      );\n    ```", "```js\n    import {\n      today,\n      todayAt,\n      tomorrowAt\n    } from \"./builders/time\";\n    ```", "```js\n    tomorrow.setHours(9, 30, 0, 0)\n    ```", "```js\ntomorrowAt(9, 30)\n```", "```js\nrender(\n  <AppointmentForm\n    original={blankAppointment}\n    availableTimeSlots={availableTimeSlots}\n    today={today}\n  />\n);\n```", "```js\nconst testProps = {\n  original: { ... },\n  availableTimeSlots: [ ... ],\n  today: ...\n}\n```", "```js\nrender(<AppointmentForm {...testProps} />);\n```", "```js\nconst appointment = {\n  ...blankAppointment,\n  service: \"Blow-dry\"\n};\nrender(\n  <AppointmentForm {...testProps} original={appointment} />\n);\nconst option = findOption(field(\"service\"), \"Blow-dry\");\nexpect(option.selected).toBe(true);\n```", "```js\n    const testProps = {\n      today,\n      selectableServices: services,\n      availableTimeSlots,\n      original: blankAppointment,\n    };\n    ```", "```js\n    it(\"renders a form\", () => {\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          availableTimeSlots={availableTimeSlots}\n        />\n      );\n      expect(form()).not.toBeNull();\n    });\n    ```", "```js\nit(\"renders a form\", () => {\n  render(<AppointmentForm {...testProps} />);\n  expect(form()).not.toBeNull();\n});\n```", "```js\n    it(\"has a blank value as the first value\", () => {\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          availableTimeSlots={availableTimeSlots}\n        />\n      );\n      const firstOption = field(\"service\").childNodes[0];\n      expect(firstOption.value).toEqual(\"\");\n    });\n    ```", "```js\nit(\"has a blank value as the first value\", () => {\n  render(\n    <AppointmentForm\n      {...testProps}\n      original={blankAppointment}\n    />\n  );\n  const firstOption = field(\"service\").childNodes[0];\n  expect(firstOption.value).toEqual(\"\");\n});\n```", "```js\n    it(\"lists all salon services\", () => {\n      const services = [\"Cut\", \"Blow-dry\"];\n      render(\n        <AppointmentForm\n          original={blankAppointment}\n          selectableServices={services}\n          availableTimeSlots={availableTimeSlots}\n        />\n      );\n      expect(\n        labelsOfAllOptions(field(\"service\"))\n      ).toEqual(expect.arrayContaining(services));\n    });\n    ```", "```js\nit(\"lists all salon services\", () => {\n  const services = [\"Cut\", \"Blow-dry\"];\n  render(\n    <AppointmentForm\n      {...testProps}\n      selectableServices={services}\n    />\n  );\n  expect(\n    labelsOfAllOptions(field(\"service\"))\n  ).toEqual(expect.arrayContaining(services));\n});\n```", "```js\n    it(\"pre-selects the existing value\", () => {\n      const services = [\"Cut\", \"Blow-dry\"];\n      const appointment = { service: \"Blow-dry\" };\n      render(\n        <AppointmentForm\n          {...testProps}\n          original={appointment}\n          selectableServices={services}\n        />\n      );\n      const option = findOption(\n        field(\"service\"),\n        \"Blow-dry\"\n      );\n      expect(option.selected).toBe(true);\n    });\n    ```", "```js\n    expect(field(\"service\")).toBeElementWithTag(\"select\");\n    ```"]