["```js\nimport { createPortal } from 'react-dom';\nconst ModalWindow =({ description, isOpen, onClose })=> {\n  if (!isOpen) return null;\n  return createPortal(\n     <div className=\"modal\">\n      <span>{description}</span>\n      <button onClick={onClose}>Close</button>\n     </div>\n    ,document.body);\n}\n```", "```js\nfunction ParentComponent() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div className=\"container\">\n      <button onClick={() => setOpen(true)}>Open Modal</button>\n      <Modal\n        message=\"This is a portal modal!\"\n        isOpen={open}\n        onClose={() => setOpen(false)}\n      />\n    </div>\n  );\n}\n```", "```js\n<html>\n  <body>\n    <div id=\"main-root\"></div>\n    <div id=\"dialog-root\"></div>\n  </body>\n</html>\n```", "```js\nclass MyErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isErrorThrown: false };\n  }\n  static getDerivedStateFromError(error) {\n    return { isErrorThrown: true };\n  }\n  componentDidCatch(error, errorInfo) {\n    logErrorToReportingService(error, errorInfo);\n  }\n  render() {\n    if (this.state.isErrorThrown) {\n      return <h1>Oops, the application is unavaialble.</h1>;\n    }\n    return this.props.children;\n  }\n}\n```", "```js\n<MyErrorBoundary>\n  <MyComponent />\n</MyErrorBoundary>\n```", "```js\nimport { Suspense } from \"react\";\nimport Posts from \"./posts.js\";\nexport default function Author({ author }) {\n  return (\n    <>\n      <h1>{author.name}</h1>\n      <span>{author.age}</span>\n      <Suspense fallback={<Loading />}>\n        <Posts authorId={author.id} />\n      </Suspense>\n    </>\n  );\n}\nfunction Loading() {\n  return <h2>Loading...</h2>;\n}\n```", "```js\nconst deferredAuthorDetails = useDeferredValue(author);\n```", "```js\n  function navigate(url) {\n    startTransition(() => {\n      setPage(url);\n    });\n  }\n```", "```js\n<App>\n  <Profiler id=\"bio\" onRender={onRender}>\n    <AuthorBio />\n  </Profiler>\n  <Posts />\n</App>\n```", "```js\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```", "```js\n<>\n  <Navigation>\n    <Details>\n      <StrictMode>\n        <Services />\n        <Support />\n      </StrictMode>\n    </Details>\n    <Footer />\n  </Navigation>\n</>;\n```", "```js\n     npx create-next-app@latest --ts\n    ```", "```js\n    npx create-remix@latest\n    ```", "```js\n     npm init gatsby –ts\n    ```", "```js\n    npx create-expo-app -t expo-template-blank-typescript\n    ```", "```js\n    tsc compiler (that is, the TypeScript compiler) so that you can build the application.\n    ```", "```js\n    npx tsc --init\n    ```", "```js\n    //tsconfig.json\n    {\n      \"compilerOptions\": {\n        // ...\n        \"rootDir\": \"src\",\n        \"outDir\": \"dist\"\n        // ...\n      },\n    }\n    ```", "```js\nnpm install @react-navigation/native\n```", "```js\nnpm install @react-navigation/native-stack\n```", "```js\nimport * as React from \"react\";\nimport { View, Text } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport HomeScreen from \"components/HomeScreen\";\nimport ServicesScreen from \"components/ServicesScreen\";\nconst Stack = createNativeStackNavigator();\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Services\" component={ServicesScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\nexport default App;\n```", "```js\nfunction MyLogoComponent() {\n  return (\n    <View>\n      <View style={{margin: 10}} >\n        <View style={{padding: 20}}>\n          <Image {...} />\n          <Text {...}>This is a caption</Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n```"]