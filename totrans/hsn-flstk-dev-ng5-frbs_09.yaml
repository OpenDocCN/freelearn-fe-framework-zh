- en: Connecting Chat Components with Firebase Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将聊天组件与Firebase数据库连接
- en: In this chapter, we will integrate our chat components with the new messaging service.
    We will discuss a new method to pass our data to our chat module using route parameters.
    Once a friend's UID is passed from the user friend list component, then we will
    pass this friend's UID to a different chat component, as this data is required
    in the message list and message form components. We will also design a database
    for our chat application, as a proper design avoids data duplication. Once the
    database is ready, we will query the data from the message service and integrate
    the message service with the chat components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将集成我们的聊天组件与新的消息服务。我们将讨论一种新的方法，使用路由参数将我们的数据传递到聊天模块。一旦从用户朋友列表组件传递了朋友的UID，然后我们将这个朋友的UID传递给不同的聊天组件，因为消息列表和消息表单组件需要这些数据。我们还将为我们的聊天应用设计数据库，因为良好的设计可以避免数据重复。一旦数据库准备就绪，我们将从消息服务查询数据，并将消息服务与聊天组件集成。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Passing data using route parameters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路由参数传递数据
- en: Passing friend data to different chat components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将朋友数据传递到不同的聊天组件
- en: Designing a Firebase database for chat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计聊天应用的Firebase数据库
- en: Creating the messaging service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建消息服务
- en: Integrating service to chat components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将服务集成到聊天组件中
- en: Passing data using route parameters
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由参数传递数据
- en: When a user clicks on the Chat button, we pass the friend UID to the chat component
    using route parameters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“聊天”按钮时，我们使用路由参数将朋友UID传递给聊天组件。
- en: 'In the [Chapter 5](part0079.html#2BASE0-bb7c6bfbc452460584038b7864f000f7),
    *Creating a User Profile Page*, we passed the user data using `BehaviorSubject` in
    the RxJS library. In this section, we will use the route parameter of the router
    link to pass the friend''s UID. We perform the following three steps to pass the
    data using route parameters:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0079.html#2BASE0-bb7c6bfbc452460584038b7864f000f7)，“创建用户个人资料页面”中，我们使用RxJS库中的`BehaviorSubject`传递用户数据。在本节中，我们将使用路由链接的参数来传递朋友的UID。我们执行以下三个步骤来使用路由参数传递数据：
- en: Adding a route parameter ID
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加路由参数ID
- en: Linking a route to the parameter
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将路由链接到参数
- en: Reading the parameter
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取参数
- en: Adding a route parameter ID
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加路由参数ID
- en: 'In the first step mentioned in the preceding list, we need to add the friend''s
    UID parameter to the route link. We add an ID parameter to the path element as
    shown here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面列表中提到的第一步，我们需要将朋友的UID参数添加到路由链接中。我们在此处将ID参数添加到路径元素中，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When a user clicks on the Chat button, this ID is added to URL as `http://localhost:4200/friends-chat/8wcVXYmEDQdqbaJ12BPmpsCmBMB2`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“聊天”按钮时，此ID将作为`http://localhost:4200/friends-chat/8wcVXYmEDQdqbaJ12BPmpsCmBMB2`添加到URL中。
- en: Linking a route to the parameter
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将路由链接到参数
- en: 'In the second step mentioned in the preceding list, we need to link the friend''s
    UID to the router link. The following are the two methods to achieve it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面列表中提到的第二步，我们需要将朋友的UID链接到路由链接。以下是有两种方法来实现这一点：
- en: '**Router link directive**: We can directly link the parameter ID using the `routerLink`
    directive, as follows:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由链接指令**：我们可以直接使用`routerLink`指令来链接参数ID，如下所示：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Programmatically using router**: When a user clicks on the Chat button, we
    pass the UID to the method parameter and use a router to pass the data.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**程序化使用路由**：当用户点击“聊天”按钮时，我们将UID传递给方法参数，并使用路由传递数据。'
- en: 'We add a Chat button to the friends list of our user. We modify the template
    of our user''s friends, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的用户朋友列表中添加一个聊天按钮。我们修改用户朋友的模板，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When a user clicks on the Chat button, the `onChat()` method is called with
    a UID as its parameter. Finally, we call the `router` method to pass the `id`
    as the route parameter:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“聊天”按钮时，将UID作为参数调用`onChat()`方法。最后，我们调用`router`方法将`id`作为路由参数传递：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Reading the parameter
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取参数
- en: We use `ActivatedRoute` to read the parameter ID. This component provides a
    collection of parameters to read the ID. We subscribe to route parameters and
    store the subscription object in member variables and unsubscribe it in the Angular
    life cycle `ngOnDestroy()` method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ActivatedRoute`来读取参数ID。该组件提供了一组参数来读取ID。我们订阅路由参数，并将订阅对象存储在成员变量中，并在Angular的生命周期`ngOnDestroy()`方法中取消订阅。
- en: '`OnDestroy` is an Angular life cycle hook interface. It has the `ngOnDestroy()`
    method and is called for cleanup logic when the components are destroyed.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the complete `chat.component.ts` file as of now:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will cover how to pass UID data to other chat components in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Passing friend data to different chat components
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have the friend''s UID in our chat module, we can pass the friend''s
    UID to our message list and the message form component using Angular data binding.
    We perform the following two steps to pass the data to two chat components:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**Declaring the input variables**: We declare the input variables using the
    Angular `@Input` annotation in the two chat components. The following snippet
    shows the changes for the message list and message form components.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Binding the data to input**: We can bind the input variable `friendUid` with `uid`,
    which was passed from the user module:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will use this friend's UID to read or update the Firebase database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Designing a Firebase database for chat
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing the Firebase database is the most crucial part in writing the chat
    feature.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Chat involves communication between two persons. It has a sender and receiver,
    and both can see the same text messages. We have to associate two users with the
    same messages, and this involves mainly two steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a new chat ID**: The first step is to associate the unique message
    ID for both persons. We create a unique message ID and associate the two users
    using their UID. As shown in the following screenshot, we associate the "-KvMW57CNfA40GJNDF-F"
    key with both UIDs.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00031.gif)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the Chat button in their friend''s page, we will check
    for the key and freshly create the ID, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`AngularFireDatabase` has a `createPushId()` method to create the unique ID.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the sample code from `messaging.service.ts`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Associating messages with the key**: Once we create the key for the users,
    we create the new node in our Firebase database, associate this key as a node,
    and push the messages in this node so that both the users have access. In the
    database schema, we will create receiver and sender nodes with UIDs so that we
    know who has sent the message and align the messages in the chat window based
    on this condition'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00032.gif)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: We store the key in the member variable of the service so that we use this key
    to push a new message to our Firebase database.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the sample code from `messaging.service.ts`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating a messaging service
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step in creating the messaging service is to define a data model.
    We create a message model with properties; the message model consists of the following
    four properties:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '**Message**: This contains the message in a string type.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sender UID**: The sender UID is used to know the identity of the sender of
    the particular message and write logic to display the text message on the left
    panel of the chat window.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Receiver UID**: The receiver UID is used to know the identity of the receiver
    of the particular message and write logic to display the text message on the right
    panel of the chat window.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接收者UID**：接收者UID用于识别特定消息的接收者，并编写逻辑在聊天窗口的右侧面板上显示文本消息。'
- en: '**Timestamp**: This property is used to display the date and time of the message
    sent.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**：此属性用于显示发送消息的日期和时间。'
- en: 'Here''s the `message.ts` as of now:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止的`message.ts`文件如下：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As a part of the chat feature, we declare a constant to know the node of the
    Firebase database, as shown in the next code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为聊天功能的一部分，我们声明一个常量以了解Firebase数据库的节点，如下所示。
- en: 'Here''s the `database-constants.ts` file as of now:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止的`database-constants.ts`文件如下：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The core part of our messaging feature is the service. This service is responsible
    for creating the chat ID, pushing the new message, and getting messages. As part
    of this application, we have introduced the following four APIs:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们消息功能的核心部分是服务。此服务负责创建聊天ID、推送新消息和获取消息。作为此应用程序的一部分，我们引入了以下四个API：
- en: '**`isMessagePresent()`**: When a user clicks on the Chat button, we check whether
    a message key is present and store the key in the member variable in this service.
    We use this key to push any new messages in the Firebase database.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`isMessagePresent()`**：当用户点击聊天按钮时，我们检查是否存在消息键，并将键存储在此服务的成员变量中。我们使用此键将任何新消息推送到Firebase数据库。'
- en: '`freshlyCreateChatIdEntry()`: We call this API when the user starts a fresh
    communication with a friend. Then, we create the key and store it in the Firebase
    database.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freshlyCreateChatIdEntry()`：当用户开始与朋友进行新的沟通时，我们调用此API创建键并将其存储在Firebase数据库中。'
- en: '`getMessages()`: This API is used to subscribe to all the messages in the conversation,
    and we also get updates when a new message is received.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getMessages()`：此API用于订阅对话中的所有消息，并且当收到新消息时，我们也会收到更新。'
- en: '`createNewMessage()`: When the user clicks on the SEND button, we call this
    API to store the new message in the Firebase database. The new message consists
    of message text, sender UID, receiver UID, and timestamp.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createNewMessage()`：当用户点击发送按钮时，我们调用此API将新消息存储在Firebase数据库中。新消息包括消息文本、发送者UID、接收者UID和时间戳。'
- en: 'Here''s the `messaging.service.ts` file as of now:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止的`messaging.service.ts`文件如下：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the next section, we will integrate this service to our chat components.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将此服务集成到我们的聊天组件中。
- en: Integrating our service to chat components
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的服务集成到聊天组件中
- en: 'Finally, we will integrate the messaging service to the components. We will
    cover the following three use cases:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将消息服务集成到组件中。我们将涵盖以下三个用例：
- en: '**Checking the message key for a new chat**: When the user initiates a conversation
    with their friend, we call the `isMessagePresent()` API of the messaging service.
    For a fresh conversation, this chat key will not be present, and we need to create
    the new key and use the same key for subsequent communication:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查新聊天的消息键**：当用户与朋友开始对话时，我们调用消息服务的`isMessagePresent()` API。对于新的对话，此聊天键将不存在，我们需要创建新的键并使用相同的键进行后续沟通：'
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Subscribing to the message list**: We will call the `getMessages()` method
    to get a message list observable. We will then subscribe to this observable to
    get a message list and then assign it to `messages` member variables:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅消息列表**：我们将调用`getMessages()`方法来获取消息列表的可观察对象。然后我们将订阅这个可观察对象以获取消息列表，并将其分配给`messages`成员变量：'
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here''s the `chat-message-list.component.ts` file as of now:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止的`chat-message-list.component.ts`文件如下：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Sending messages to Firebase database**: When a user types the message and
    clicks on the SEND button, we create the new message object and call the `createNewMessage()` method
    in the messaging service and this takes care of sending message to Firebase database.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向Firebase数据库发送消息**：当用户输入消息并点击发送按钮时，我们创建新的消息对象，并在消息服务中调用`createNewMessage()`方法，这将负责将消息发送到Firebase数据库。'
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s the `chat-message-form.component.ts` file as of now:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止的`chat-message-form.component.ts`文件如下：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finally, we have created a fully functional chat feature for our friends application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为我们的朋友应用程序创建了一个完全功能的聊天功能。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have now come to the end of the chat feature in our friends application.
    In this chapter, we covered the route parameter and used this to pass the friend's
    UID to our chat module. We passed this UID to different chat components using
    the `@Input` binding. We then discussed how to design Firebase database for our
    chat feature. We used Firebase database API in the service and created four APIs
    to perform different operations in our chat feature. Finally, we integrated this
    service with the chat components.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经到达了朋友应用中聊天功能的结尾。在这一章中，我们涵盖了路由参数，并使用它将朋友的 UID 传递给我们的聊天模块。我们通过使用 `@Input`
    绑定将这个 UID 传递给不同的聊天组件。然后，我们讨论了如何为我们的聊天功能设计 Firebase 数据库。我们在服务中使用了 Firebase 数据库
    API，并创建了四个 API 来在我们的聊天功能中执行不同的操作。最后，我们将这个服务与聊天组件集成。
- en: In the next chapter, we will discuss unit testing in Angular. We will also discuss
    the Jasmine framework and use this framework to unit-test our application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 Angular 中的单元测试。我们还将讨论 Jasmine 框架，并使用这个框架来对我们的应用程序进行单元测试。
