["```js\n$ npm install react-addons-perf --save-dev\n\n```", "```js\n// index.js\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\nimport Perf from 'react-addons-perf';\n\nwindow.Perf = Perf;\n\nReactDOM.render(<App />, document.getElementById('rootElement'));\n```", "```js\n// src/Form.js\n\nimport React from 'react';\n\nexport default React.createClass({\n  getInitialState() {\n    return { searchTerm: '' };\n  },\n\n  _submitForm() {\n    this.props.performSearch(this.state.searchTerm);\n  },\n\n  render() {\n    return (\n      <div className=\"row\" style={this.props.style}>\n        <div>\n          <div className=\"input-group\">\n            <input type=\"text\"\n                   className=\"form-control input-lg\"\n                   placeholder=\"Search books...\"\n                   onChange={(event) => { this.setState({searchTerm: event.target.value}) }}/>\n            <span className=\"input-group-btn\">\n              <button className=\"btn btn-primary btn-lg\"\n                      type=\"button\"\n                      onClick={this._submitForm}>\n                Go!\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n})\n```", "```js\n// src/App.js\ngetInitialState() {\n    return { books: [],\n             totalBooks: 0,\n             offset: 100,\n             searching: false,\n             sorting: 'asc',\n             page: 1,\n             searchTerm: '',\n             totalPages: 1\n    };\n  }\n```", "```js\ntotalPages = response.numFound / this.state.offset + 1;\n```", "```js\n // src/App.js  \n\n // Called when user hits \"Go\" button.\n _performSearch(searchTerm) {\n    this.setState({searching: true, searchTerm: searchTerm});\n    this._searchOpenLibrary(searchTerm);\n  },\n\n  _searchOpenLibrary(searchTerm) {\n    let openlibraryURI = `https://openlibrary.org/search.json?q=${searchTerm}&page=${this.state.page}`;\n    this._fetchData(openlibraryURI).then(this._updateState);\n  },\n\n  // called with the response received from open library API\n  _updateState(response) {\n    let jsonResponse = response;\n    let newBooks = this.state.books.concat(jsonResponse.docs);\n    let totalPages = jsonResponse.numFound / this.state.offset + 1;\n    let nextPage = this.state.page + 1;\n\n    this.setState({\n      books: newBooks,\n      totalBooks: jsonResponse.numFound,\n      page: nextPage,\n      totalPages: totalPages\n    } this._searchAgain);\n  },\n\n     // Keep searching until all pages are fetched.\n  _searchAgain() {\n    if (this.state.page > this.state.totalPages) {\n      this.setState({searching: false});\n    } else {\n      this._searchOpenLibrary(this.state.searchTerm);\n    }\n  }\n```", "```js\n// src/App.js\nrender() {\n    let style = {paddingTop: '5%'};\n    return (\n      <div className='container'>\n        <Header style={style}></Header>\n        <Form style={style}\n              performSearch={this._performSearch}>\n        </Form>\n\n        {this.state.totalBooks > 0 ?\n         <BookList\n             searchCount={this.state.totalBooks}\n             _sortByTitle={this._sortByTitle}>\n           {this._renderBooks()}\n         </BookList>\n       : null }\n\n        { this.state.searching ? <Spinner /> : null }\n      </div>\n    );\n  }\n```", "```js\n// src/BookRow.js\n\nimport React from 'react';\n\nexport default React.createClass({\n  render() {\n    return(\n      <tr style={this.props.style}>\n        <td><h4>#{this.props.index}</h4></td>\n        <td><h4>{this.props.title}</h4></td>\n        <td><h4>{(this.props.author_name || []).join(', ')}</h4></td>\n        <td><h4>{this.props.edition_count}</h4></td>\n      </tr>\n    );\n  }\n});\n```", "```js\n// src/BookRow.js\n\nimport React from 'react';\n\nexport default React.createClass({\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.title !== this.props.title ||\n           nextProps.author_name !== this.props.author_name ||\n           nextProps.edition_count !== this.props.edition_count;\n  },\n\n  render() {\n    return(\n      <tr style={this.props.style}>\n        <td><h4>#{this.props.index}</h4></td>\n        <td><h4>{this.props.title}</h4></td>\n        <td><h4>{(this.props.author_name || []).join(', ')}</h4></td>\n        <td><h4>{this.props.edition_count}</h4></td>\n      </tr>\n    );\n  }\n});\n```", "```js\n// src/Header.js\n\nimport React from 'react';\n\nexport default React.createClass({\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  },\n\n  render() {\n    return (\n      <div className=\"row\" style={this.props.style}>\n        <div className=\"col-lg-8 col-lg-offset-2\">\n          <h1>Open Library | Search any book you want!</h1>\n        </div>\n      </div>\n    )\n  }\n})\n\n// src/Form.js\n\nimport React from 'react';\n\nexport default React.createClass({\n  getInitialState() {\n    return { searchTerm: '' };\n  },\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  },\n\n  _submitForm() {\n    this.props.performSearch(this.state.searchTerm);\n  },\n\n  render() {\n    return (\n      <div className=\"row\" style={this.props.style}>\n        <div>\n          <div className=\"input-group\">\n            <input type=\"text\"\n                   className=\"form-control input-lg\"\n                   placeholder=\"Search books...\"\n                   onChange={(event) => { this.setState({searchTerm: event.target.value}) }}/>\n            <span className=\"input-group-btn\">\n              <button className=\"btn btn-primary btn-lg\"\n                      type=\"button\"\n                      onClick={this._submitForm}>\n                Go!\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n})\n```", "```js\n$ npm install react-addons-pure-render-mixin\n\n// src/Header.js\n\nimport React from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nexport default React.createClass({\n mixins: [PureRenderMixin],\n ..\n ..\n})\n\n// src/Form.js\n\nimport React from 'react';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nexport default React.createClass({\n mixins: [PureRenderMixin],\n ..\n ..\n }\n})\n\n```", "```js\n// src/App.js\n\nrender() {\n    let style = {paddingTop: '5%'};\n    return (\n      <div className='container'>\n        <Header style={style}></Header>\n        <Form style={style}\n              performSearch={this._performSearch}>\n        </Form>\n         ..\n         ..\n      </div>\n)}\n```", "```js\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return shallowCompare(this, nextProps, nextState);\n  },\n};\n```", "```js\n// shallowCompare will detect correctly that props are not changed.\n{ author_name: \"Dan Brown\", \n  edition_count: \"20\", \n  title: \"Angels and Demons\" }\n```", "```js\n{ author_name: \"Dan Brown\", \n  edition_count: \"20\", \n  title: \"Angels and Demons\", \n  style: { paddingTop: '%5' } }\n```", "```js\n// src/BookRow.js\n\nexport default React.createClass({\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.title !== this.props.title ||\n           nextProps.author_name !== this.props.author_name ||\n           nextProps.edition_count !== this.props.edition_count;\n  },\n\n  render() {\n    return(\n      <tr style={this.props.style}>\n        ..\n      </tr>\n    );\n  }\n});\n```", "```js\n// custom deep comparison as per requirement\nshouldComponentUpdate(nextProps, nextState) {\n    return nextProps.book.review === props.book.review;\n}\n```", "```js\n// pseudo code \nbook_ids = [1, 2, 3]\nnew_book_ids = book_ids.push(4)\nbook_ids === new_book_ids # false\n```"]