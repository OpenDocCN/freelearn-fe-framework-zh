- en: 'Chapter 1: Environment Setup and Introduction to UmiJS'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**UmiJS** is Ant Financial''s underlying frontend framework and an open source
    project for developing enterprise-class frontend applications. It''s a robust
    framework you can combine with Ant Design to provide everything you need to build
    a modern user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to install and configure a project using
    UmiJS and **Visual Studio Code** (**VSCode**). You'll also understand the folder
    structure and main files of UmiJS. Then, you'll learn how to set fast navigation
    between pages using **u****mi history** and finally discover **Umi UI**, a visual
    option to interact with UmiJS and add components to your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our environment and configuring UmiJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the UmiJS folder structure and its main files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Umi CLI and adding pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding routing and navigation in UmiJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Umi UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned everything you need to get started
    with developing your project and you will also know about the fundamental behavior
    of an UmiJS project and its configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter's exercises, you just need a computer with any OS (I
    recommend Ubuntu 20.04 or higher).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete project in the `Chapter01` folder in the GitHub repository
    available at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our environment and configuring UmiJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll install and configure VSCode, the EditorConfig extension,
    and the Prettier extension, and create our first UmiJS project.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by installing a source code editor. You can use any editor that
    supports JavaScript and TypeScript, but I will use VSCode extensively in this
    book. It's a free editor with an integrated terminal and internal Git control
    that natively supports JavaScript, TypeScript, Node.js, and many extensions for
    other languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'VSCode is available as a Snap package, and you can install it on Ubuntu by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For Mac users, you can install it using Homebrew on macOS by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Chocolatey on Windows, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can download the installer available at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can find instructions on installing **Homebrew** on macOS at [https://brew.sh/](https://brew.sh/)
    and installing **Chocolatey** on Windows at [https://chocolatey.org/install](https://chocolatey.org/install).
    If you are a Windows user, you can install Ubuntu in **Windows Subsystem for Linux**
    (**WSL**) and set up your project using common Linux commands. You can read more
    about WSL at [https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to install the dependencies required to develop with UmiJS. First,
    let''s install Node.js by typing and running the following commands in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first command updates the mirrors, and the second command installs Node.js
    with the `-y` flag, which skips user confirmation to install.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Node.js using Homebrew on macOS by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Chocolatey on Windows, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can download the installer available at [https://nodejs.org/en/](https://nodejs.org/en/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js has a default package manager named npm, but we will extensively use
    **Yarn** instead of npm in this book, so I recommend installing it. You can do
    that by running the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This command will install Yarn globally in your system.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we are ready to get started with UmiJS. But first, let's understand
    UmiJS a bit more and what kinds of problems it can solve.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to UmiJS and creating your first project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: UmiJS is a framework for developing enterprise-class frontend applications.
    This means Umi provides a set of tools for solving everyday problems faced when
    building large business applications that need to deliver a modern user experience
    and must be easy to maintain and modify.
  prefs: []
  type: TYPE_NORMAL
- en: With Umi, you can quickly develop an application with internationalization,
    permissions, and beautiful interfaces taking advantage of Umi's deep integration
    with Ant Design.
  prefs: []
  type: TYPE_NORMAL
- en: Another significant advantage of Umi is that there are a variety of published
    plugins you can add to your project as you need. You can also extend it by developing
    your own plugins to meet specific solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know more about Umi, let''s create your first project by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder for the project and open it in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new project using the `umi-app` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the project dependencies by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the project by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now have a project set up! You can open it by typing `http://localhost:8000`
    in the browser and see the result.
  prefs: []
  type: TYPE_NORMAL
- en: Let's do the final configurations to simplify our work by adding code formatting.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the EditorConfig and Prettier extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the tools UmiJS provides by default in the `umi-app` template is **EditorConfig**,
    a file format that editors read to define the code style across IDEs and text
    editors. You''ll learn more about code style in [*Chapter 5*](B18503_05_Final_JM_ePub.xhtml#_idTextAnchor066),
    *Code Style and Formatting Tools*. Some editors and IDEs offer native support
    to EditorConfig, while in other cases, such as VSCode, you need to install a plugin,
    so let''s install it by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open VSCode and press *Ctrl* + *P*. This shortcut will open the following field
    at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – VSCode quick open'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.01_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – VSCode quick open
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command and press *Enter* to install the official extension
    for EditorConfig support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `umi-app` template comes preinstalled with Prettier, which is preconfigured
    for formatting the code. You can use it by running the `yarn prettier` command.
    Still, a better option is to let VSCode format it for you when you save changes
    or paste code blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'For that, we need to install the Prettier extension and configure it as the
    default code formatter. To install and configure the Prettier extension, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *Ctrl* + *P* and type the following command, then press *Enter* to install
    the official extension for Prettier support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, press *Ctrl* + *,* to open the VSCode preferences, and in the search field,
    type `formatter` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **Editor: Default Formatter**, select **Prettier - Code formatter**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **Editor: Format On Paste** and **Editor: Format On Save** options,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – VSCode editor configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.02_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – VSCode editor configuration
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to configure our environment, learned more about
    UmiJS, and created our first project. Now, let's take a closer look at the project
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the UmiJS folder structure and its main files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will understand the UmiJS folder structure, and you will
    add some essential configurations to files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The project we create based on the `umi-app` template generates a set of folders
    with responsibilities for different parts of the project. Let''s see what each
    one does:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mock`: In this folder, we store our simulated endpoints definitions to generate
    a mock API that we can interact with while developing the frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This is the source folder where all our components are located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/.umi`: This folder is automatically generated by UmiJS every time the
    project is compiled and contains its internal configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/pages`: The React components responsible for rendering the pages in response
    to configured routes are located in this folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the folders included with the `umi-app` template, but there are other
    essential folders in a UmiJS project, so let's add them.
  prefs: []
  type: TYPE_NORMAL
- en: The first folder we'll add is `config`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding config and locales folders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the root folder of our project, we have a file named `.umirc.ts`. This file
    contains the configuration for Umi and its plugins. When your project is compact,
    it''s a good choice, but as it grows and becomes complex, the configuration file
    can become hard to maintain. To avoid that, we can break down our configuration
    into different parts located in the `config` folder. Let''s do this now by opening
    your project in VSCode and following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the root directory of your project, create a new folder named `config`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can do that by clicking on the icon in the upper-right corner above the
    folders list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – VSCode new folder icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.03_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – VSCode new folder icon
  prefs: []
  type: TYPE_NORMAL
- en: Move the `.umirc.ts` file to the `config` folder and rename it `config.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can rename a file by selecting it and pressing *F2*.
  prefs: []
  type: TYPE_NORMAL
- en: In the `config` folder, create a new file named `routes.ts`. In this file, we'll
    configure the application's routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can do that by clicking on the icon in the top-right corner, above the folders
    list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – VSCode new file icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.04_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – VSCode new file icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste this code into the `routes.ts` file and save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code defines the root path (`'/'`) to render the component index located
    in the `pages` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can import the `routes.ts` file into `config.ts` and add this line to
    the `config.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then rewrite the route section to use it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Umi also supports `locales` in the `src` folder and add the following configuration
    to the `config.ts` file under the `config` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: config.ts
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `locale` configuration properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`default`: The default application language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`antd`: Enable Ant Design components internationalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`baseNavigator`: Enable browser language detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`baseSeparator`: The separator used in multi-language files localized under
    the `src/locales` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we can support internationalization by adding multi-language files in the
    `locales` folder. For example, to support the English language, we need to add
    a file named `en-US.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we'll add the `app.tsx` file to set configurations at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Umi uses a file named `app.tsx` to expand your application's configurations
    at runtime. This file is useful to configure the initial state using the `app.tsx`
    file needs to be located in the `src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Add a file named `app.tsx` to the `src` folder following the steps demonstrated
    previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, our project structure should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Project structure after last modifications'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.05_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Project structure after last modifications
  prefs: []
  type: TYPE_NORMAL
- en: You'll better understand all these features following the exercises in the upcoming
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand the Umi project structure and have added the missing
    folders and files, let's learn about some useful commands in the Umi **command-line
    interface** (**CLI**).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Umi CLI and adding pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll explore the Umi CLI for automating tasks and use the
    `generate` command to add some pages to your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Umi provides a CLI with commands to build, debug, list configurations, and
    so on. You can use them to automate tasks. Some of these commands are already
    configured in the `umi-app` template as scripts in the `package.json` file: `yarn
    start` will execute `umi dev`, `yarn build` will execute `umi build`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main commands available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`umi dev`: Compiles the application and starts a development server for debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`umi build`: Compiles the application bundle in the `dist` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`umi webpack`: This shows the webpack configuration file generated by Umi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`umi plugin list`: Lists all Umi plugins in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`umi generate page`: Creates a new page template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For more commands, refer to the documentation available at [https://umijs.org/docs/cli](https://umijs.org/docs/cli).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s add some pages using the `generate page` Umi CLI command. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, delete the files under the `src/pages` folder, then add two pages by
    running these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These commands generate two components under the `pages` folder, `Login` and
    `Home`, with TypeScript and Less support.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access these pages, we need to define routes, so modify your `routes.ts`
    file to define the created components for new routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: routes.ts
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: To check the result, start the project by running `yarn start`, then navigate
    to `http://localhost:8000/`; you should see the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:8000/home`; you should now see the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have pages set up, we can learn more about Umi routing and navigation
    using umi history.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding routing and navigation in UmiJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll understand the Umi routing system and options for configuring
    routes. You will also learn how to access route parameters and query strings and
    about navigating between pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Umi project is a `index.html`), and all other pages we see when accessing
    different addresses are components rendered on this same page. Umi does the job
    of parsing the route and rendering the correct component; we just need to define
    which component to render when the route matches a specific path. As you may have
    noticed, we already did that. But there are other configuration options. For example,
    we can set subroutes to define a standard layout for various pages:'
  prefs: []
  type: TYPE_NORMAL
- en: routes.ts
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example defines that all routes under `'/'` will have a default
    header, which is a component located in the `src/layouts` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The header component should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`props.children` will receive the components when you access a defined route.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option we have is to redirect routes. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: routes.ts
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration, when you access `http://localhost:8000/`, Umi will
    immediately redirect the page to `http://localhost:8000/app/login`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also define whether a path should be exact or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This configuration defines that you can access this page in any path under `/app/login`,
    such as `http://localhost:8000/app/login/user`. By default, all paths are exact.
  prefs: []
  type: TYPE_NORMAL
- en: You now understand how the routing system works and the different configuration
    options we have for routing. Now, you will learn how to access path and query
    string parameters and about conventional routing and navigating between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding path parameters and query strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes we need to identify a resource in the route path. Imagine we have
    a page in our project that only displays product information. When accessing this
    page, we need to specify what product to get information from. We can do that
    by identifying the product ID in the route path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If the parameter is not mandatory to access the page, you must add the `?`
    character, like this: `/product/:id?`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the product ID, we can use the `useParams` hook provided by Umi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also receive query string parameters after the route. Query string
    parameters are key-value pairs in the `?` character sequence in a URL, such as
    this example: `/app/home?code=eyJhbGci`. Here, `code` contains the value `eyJhbGci`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t have a specific hook to access query string parameter values, but
    we can easily do that using umi history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how you can define parameters when working with conventional
    routing.
  prefs: []
  type: TYPE_NORMAL
- en: Conventional routing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: UmiJS offers an automatic route configuration based on your project structure
    under the `pages` folder. UmiJS will rely on that if it can't find route definitions
    in the `config.ts` or `.umirc.ts` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to configure a route parameter, you can name the file enclosed
    in `[]`, like this: `[id].tsx`. If this parameter is not mandatory to access the
    page, you must add the `$` character, like this: `[id$].tsx`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Optional route parameter in conventional routing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.06_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – Optional route parameter in conventional routing
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will see how to navigate between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating between pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we need to set navigation between pages, usually, we use the DOM history
    object and anchor tag. In UmiJS, we have similar options to navigate: `Link` component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create hyperlinks between pages using the `Link` component, as in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set navigation between pages using the `push()` umi history command,
    as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In addition to the `push()` command, umi history has the `goBack()` command
    to revert one page in the history stack and `goForward()` to advance one page.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered all the essential aspects of the Umi routing system, the different
    options to configure routes, access path and query string parameters, and navigation
    between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Before finishing this chapter, I will introduce an exciting feature Umi provides
    if you prefer to interact with the project visually.
  prefs: []
  type: TYPE_NORMAL
- en: Using Umi UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Umi UI is a visual extension of Umi to interact with the project. You can run
    commands to install dependencies, verify and test code, build the project, and
    add components through a graphical user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before using Umi UI, we need to add the `@umijs/preset-ui` package. You can
    do that by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you start the project, you should see the following console log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Umi UI starting log'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.07_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – Umi UI starting log
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:8000`, and you will notice that the UmiJS logo
    appears in a bubble in the bottom-right corner. Clicking on this bubble will open
    Umi UI (you can also access Umi UI at `http://localhost:3000`).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Umi UI bubble in the bottom-right corner'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.08_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – Umi UI bubble in the bottom-right corner
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what we can do using Umi UI, beginning with **tasks**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dist` folder. You can also click on **ENVS** to select compilation options,
    such as CSS compression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lint` script to use this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TEST**: This option will test the project. You need to write tests first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INSTALL**: This option will install all project dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Umi UI Task tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Umi UI Task tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.09_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – Umi UI Task tab
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's add Ant Design components to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Ant Design components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ant Design** is a design system created by Ant Financial''s user experience
    design team to meet the high demands of enterprise application development and
    fast changes in these applications. They also created a React UI library of components
    for building interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Assets** tab, we can add Ant Design components to our pages as blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Umi UI Preview Demo button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.10_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.10 – Umi UI Preview Demo button
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The Umi UI **Assets** tab is almost entirely in Chinese at the moment. Still,
    you can always refer to the Ant Design documentation by clicking on **Preview
    Demo** and changing the website language to English.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a login form to experiment with this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:8000` and open the Umi UI **Assets** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add** in the **form-login box** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – form-login box component Add button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.11_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.11 – form-login box component Add button
  prefs: []
  type: TYPE_NORMAL
- en: Select the second area by clicking on **+ Add to here**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Selecting where to add the component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.12_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.12 – Selecting where to add the component
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the `LoginForm`, make sure the package manager client selected is **yarn**,
    and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Add Block options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.13_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.13 – Add Block options
  prefs: []
  type: TYPE_NORMAL
- en: Wait until the block is added and we are done. Umi UI will reload the page,
    and the component is already there!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want, you can add some styles to the login page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this code to the `index.less` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `container` CSS class to the login component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Login page with login form block'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.14_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.14 – Login page with login form block
  prefs: []
  type: TYPE_NORMAL
- en: And that's it! Now you know how to use Umi UI to interact with your project.
    If you like this option, I recommend experimenting with it by adding more components
    and styling them to get you used to it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to configure VSCode to work with UmiJS. You
    learned how to set up a project and organize the UmiJS folder structure. You also
    learned how to use the Umi CLI to automate tasks and quickly add pages and templates
    to your project.
  prefs: []
  type: TYPE_NORMAL
- en: You learned that an UmiJS project is a single-page application and about various
    configurations to define routes in your project. You learned how to access path
    parameters and query string parameters. You also learned how UmiJS could automatically
    configure routes based on the folder convention. You learned about navigation
    using umi history and the link component.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned how to install and use Umi UI to interact with your project.
    You then learned how to execute tasks using Umi UI and add Ant Design components
    as blocks in your project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn more about Ant Design in a Umi project and
    how to use it to develop interfaces.
  prefs: []
  type: TYPE_NORMAL
