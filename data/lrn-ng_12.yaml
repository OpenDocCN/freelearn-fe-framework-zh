- en: Animating Components with Angular
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular为组件添加动画
- en: Nowadays, animations are one of the cornerstones of modern user experience design.
    Far from just representing visual eye candy to beautify the UI, they have become
    an important part of the visual narrative. Animations pave the road to convey
    messages in a non-intrusive way, becoming a cheap but powerful tool for informing
    the user about the underlying processes and events that happen while we interact
    with our application. The moment an animation pattern becomes widespread and the
    audience embraces it as a modern standard, we gain access to a priceless tool
    for enhancing our application's user experience. Animations are language-agnostic,
    not necessarily bound to a single device or environment (web, desktop, or mobile),
    and pleasing to the eye of the beholder, when used wisely. In other words, animations
    are here to stay and Angular 2 has a strong commitment to this aspect of modern
    visual development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，动画是现代用户体验设计的基石之一。远非仅仅是用来美化UI的视觉点缀，它们已经成为视觉叙事的重要组成部分。动画为以非侵入方式传达信息铺平了道路，成为了一个廉价但强大的工具，用来告知用户在与我们的应用程序交互时发生的基础过程和事件。一旦一个动画模式变得普遍，并且受众接受它作为现代标准，我们就获得了一个无价的工具，用来增强我们应用程序的用户体验。动画是与语言无关的，不一定绑定在单一设备或环境（Web、桌面或移动），并且当明智地使用时，它们对于观看者来说是令人愉悦的。换句话说，动画是不可或缺的，而Angular
    2对现代视觉开发的这一方面有着强烈的承诺。
- en: With all modern browsers embracing the newer features of CSS3 for animation
    handling, Angular 2 offers support for implementing imperative animation scripting
    through an incredibly simple but powerful API. This chapter will cover several
    approaches to implementing animation effects, moving from leveraging plain vanilla
    CSS for applying class-based animations, to implementing script routines where
    Angular takes full responsibility for handling DOM transitions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着所有现代浏览器都支持CSS3的新特性来处理动画，Angular 2提供了支持通过一个简单但强大的API来实现命令式动画脚本。本章将涵盖几种实现动画效果的方法，从利用纯粹的CSS来应用基于类的动画，到实现脚本例程，其中Angular完全负责处理DOM转换。
- en: 'In this chapter we cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们涵盖以下主题：
- en: Creating animations with plain vanilla CSS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用纯粹的CSS创建动画
- en: Leveraging class-named animation with the `ngClass` directive to better
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用`ngClass`指令来更好地使用类命名动画
- en: handle transitions
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 处理转换
- en: Looking at Angular's built-in CSS hooks for defining styles for each
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Angular内置的CSS钩子，为每个定义样式
- en: transition state
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 转换状态
- en: Introducing animation triggers and declaratively attaching those animations
    to elements in your template
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入动画触发器，并在模板中声明性地将这些动画附加到元素上
- en: Animating components with the **AnimationBuilder** API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**AnimationBuilder** API来为组件添加动画
- en: Designing directives that handle animation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计处理动画的指令
- en: Creating animations with plain vanilla CSS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用纯粹的CSS创建动画
- en: The inception of CSS-based animation was an important milestone in modern web
    design. Before that, we used to rely on JavaScript to accommodate animations in
    our web applications by manipulating DOM elements through complex and cumbersome
    scripts based on intervals, timeouts, and loops of all sorts. Unfortunately, this
    was neither maintainable nor scalable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 基于CSS的动画的诞生是现代网页设计中的重要里程碑。在那之前，我们过去常常依赖JavaScript来通过复杂和繁琐的脚本来操作DOM元素，通过间隔、超时和各种循环来实现我们网页应用中的动画。不幸的是，这既不可维护也不可扩展。
- en: Then, modern browsers embraced the functionalities brought about by the recent
    CSS transform, transition, keyframes, and animation properties. This became a
    game changer in the context of web interaction design. While support for these
    techniques in browsers, such as **Microsoft Internet Explorer**, is far from optimal,
    the rest of the browsers that are available (including Microsoft's very own Edge)
    provide full support for these CSS APIs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，现代浏览器采用了最近引入的CSS变换、过渡、关键帧和动画属性带来的功能。这在Web交互设计的背景下成为了一个改变游戏规则的因素。虽然像**Microsoft
    Internet Explorer**这样的浏览器对这些技术的支持远非理想，但其他可用的浏览器（包括微软自己的Edge）对这些CSS API提供了全面的支持。
- en: MSIE provides support for these animation techniques only as of version 10.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MSIE仅在版本10及以上提供对这些动画技术的支持。
- en: 'We assume that you have a broad understanding of how CSS animation works with
    regard to building keyframe-driven or transition-based animations, since providing
    coverage to these techniques is obviously beyond of the scope of this book. As
    a recap, we can highlight the fact that CSS-based animation is usually implemented
    by either of these approaches, or even a combination of both:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您对CSS动画的工作原理有广泛的了解，因此本书的范围显然不包括这些技术的覆盖。总之，我们可以强调CSS动画通常是通过这些方法之一或两者的组合来实现的：
- en: Transition properties that will act as observers of either all, or just a subset,
    of the CSS properties applied to the DOM elements impacted by the selector. Whenever
    any of these CSS properties is changed, the DOM element will not take the new
    value right away, but will experience a steady transition into its new state.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡属性将作为DOM元素应用的所有或部分CSS属性的观察者。每当这些CSS属性中的任何一个发生变化时，DOM元素不会立即采用新值，而是会经历一个稳定的过渡到新状态。
- en: Named keyframe animations, where we define different steps of the evolution
    of one, or several, CSS properties under a unique name, which will populate later
    on an animation property of a given selector, being one able to set additional
    parameters, such as the delay, the duration of the animation tweening, or the
    number of iterations that the animation is meant to feature.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名关键帧动画，我们在一个唯一的名称下定义了一个或多个CSS属性演变的不同步骤，稍后将在给定选择器的动画属性中填充，能够设置额外的参数，如延迟、动画缓动的持续时间或动画的迭代次数。
- en: As we can see in the two aforementioned scenarios, the use of a CSS selector
    populated with animation settings is the starting point for all things related 
    to animation, and that is what we will do now. Let's build a fancy pulse animation
    to emulate a heartbeat-style effect in the bitmap that decorates our Pomodoro
    timer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面提到的两种情况中所看到的，使用带有动画设置的CSS选择器是与动画相关的一切的起点，这就是我们现在要做的。让我们构建一个花哨的脉冲动画，以模拟装饰我们的番茄钟的位图中的心跳样式效果。
- en: We will use a keyframe-based animation this time, so we will begin by building
    the actual CSS routine in a separate style sheet. The entire animation is based
    on a simple interpolation where we take an object, scale it up by 10 percent,
    and scale it back down again to its initial state. This keyframe-based tweening
    is then named and wrapped in a CSS class named `pulse`, which will execute the
    animation in an infinite loop where each iteration takes 1 second to complete.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将使用基于关键帧的动画，因此我们将首先在单独的样式表中构建实际的CSS例程。整个动画基于一个简单的插值，我们将一个对象放大10%，然后再缩小到初始状态。然后将这个基于关键帧的缓动命名并包装在一个名为`pulse`的CSS类中，它将在一个无限循环中执行动画，每次迭代需要1秒完成。
- en: 'All the CSS rules for implementing this animation will live in an external
    stylesheet, part of the timer widget component, within the `timer feature` folder:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用于实现此动画的CSS规则将存储在外部样式表中，作为计时器小部件组件的一部分，位于`timer feature`文件夹内：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From this point on, any DOM element annotated with this class name will visually
    beat like a heart. This visual effect is actually a good hint that the element
    is undertaking some kind of action, so applying it to the main icon bitmap in
    our timer widget when the countdown is on will help convey the feeling that an
    activity is currently taking place in a lively fashion.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，任何带有此类名称的DOM元素都将像心脏一样跳动。这种视觉效果实际上是一个很好的提示，表明元素正在进行某种操作，因此在倒计时进行时将其应用于计时器小部件中的主图标位图将有助于传达当前正在以生动的方式进行某种活动的感觉。
- en: 'Thankfully, we have a good way to apply such an effect only when the countdown
    is active. We use the `isPaused` binding in the `TimerWidgetComponent` template.
    Binding its value to the `NgClass` directive in order to render the class name
    only when the component is not paused will do the trick, so just open the timer
    widget code unit file and add a reference to the stylesheet we just created and
    apply the directive as described previously:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 谢天谢地，我们有一个很好的方法，只在倒计时活动时应用这样的效果。我们在`TimerWidgetComponent`模板中使用`isPaused`绑定。将其值绑定到`NgClass`指令，以便仅在组件暂停时渲染类名，这样就可以打开计时器小部件代码单元文件，并添加对我们刚刚创建的样式表的引用，并按照之前描述的方式应用指令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And that's it! Run our Pomodoro app and click on the `Timer` link at the top
    to reach the timer component page and check the visual effect live after starting
    the countdown. Stop it and resume it again to see the effect applied only when
    the countdown is active.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！运行我们的番茄钟应用程序，点击顶部的`Timer`链接，进入计时器组件页面，并在启动倒计时后实时检查视觉效果。停止并再次恢复，以查看效果仅在倒计时活动时应用。
- en: Introducing Angular animations
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Angular动画
- en: The idea with an animation trigger is that you can show animations when a certain
    property changes from one state to the next. To define a trigger, we first need
    to install and import the library we need, specifically, `BrowserAnimationsModule`, so
    let's do that.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 动画触发器的想法是，当某个属性从一个状态变化到另一个状态时，您可以显示动画。要定义触发器，我们首先需要安装和导入我们需要的库，具体来说是`BrowserAnimationsModule`，所以让我们这样做。
- en: 'We install the library by typing the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过输入以下命令来安装库：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s now import and set up the module with `BrowsersAnimationsModule`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们导入并设置带有`BrowsersAnimationsModule`的模块：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After this, it''s time to import a bunch of constructs that we need to set
    up the trigger itself:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，是时候导入一堆我们需要设置触发器本身的结构：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The imported constructs have the following functionality:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 导入的结构具有以下功能：
- en: '`trigger`: This defines the property in the component that the animation targets;
    it needs a name as the first argument and an array of states and transitions as
    the second argument'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trigger`：这定义了组件中动画目标的属性；它需要一个名称作为第一个参数，以及作为第二个参数的状态和转换数组'
- en: '`state`: This defines the property value and what CSS properties it should
    have; you need to define one of these for each value that the property can assume'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`：这定义了属性值以及它应该具有的CSS属性；您需要为属性可以假定的每个值定义一个这样的属性'
- en: '`transition`: This defines how the animation should play out when you go from
    one property value to another'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition`：这定义了当您从一个属性值转到另一个属性值时动画应该如何播放'
- en: '`animate`: This carries out the defined animation when we move from one state
    value to the next'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animate`：当我们从一个状态值转移到下一个状态时，执行定义的动画'
- en: Our first trigger
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个触发器
- en: 'Let''s have a quick look on what an animation trigger can look like, and then
    explain the parts:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下动画触发器可能是什么样子，然后解释各个部分：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `animations` array is something we add to the components object, such as
    template or `styleUrls`. Inside of the `animations` array are a number of trigger
    definitions. A `trigger` takes a name and an array of items, like so:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`animations`数组是我们添加到组件对象中的内容，比如模板或`styleUrls`。在`animations`数组中有许多触发器定义。`trigger`需要一个名称和一个项目数组，就像这样：'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Those items are either a state definition or a transition. With this knowledge,
    it is easier to understand what we are looking at. For now, we have chosen to
    call the trigger `animationName`. It defines two states and two transitions. A
    state says that a value has been changed to this state and we react accordingly
    by executing a style, which is why the code should be read as the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目要么是状态定义，要么是过渡。有了这个知识，更容易理解我们正在看的是什么。目前，我们选择将触发器称为`animationName`。它定义了两个状态和两个过渡。状态表示值已更改为此状态，我们相应地通过执行样式来做出反应，这就是为什么代码应该被理解为以下内容：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that style properties are camel cased and not kebab cased, for example,
    write `backgroundColor` and not `background-color`, like you might be used to
    in CSS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，样式属性是驼峰式命名，而不是短横线命名，例如，写`backgroundColor`而不是`background-color`，就像你在CSS中习惯的那样。
- en: 'Looking at our example, we are saying the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们的例子，我们是在说以下内容：
- en: 'If someone triggers `sizeAnimation` and the value is set to `small` then apply
    this transform: `scale(1)` and `backgroundColor: ''green''`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果有人触发`sizeAnimation`并且值设置为`small`，那么应用这个变换：`scale(1)`和`backgroundColor: ''green''`'
- en: 'If someone triggers `sizeAnimation`and the value is set to `large`then apply
    this transform: `scale(1.4)` and `backgroundColor: ''red''`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果有人触发`sizeAnimation`并且值设置为`large`，那么应用这个变换：`scale(1.4)`和`backgroundColor:
    ''red''`'
- en: 'The two remaining items are two calls to `transition`. This instructs the animation
    on how to apply the animation in a smooth way. You can read a transition definition
    in the following way:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的两个项目是两个`transition`调用。这指示动画如何以平滑的方式应用动画。您可以这样阅读过渡定义：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, when we go from one state to the next, we apply an easing function and
    also define for how long the animation should execute. Let''s look back at our
    code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们从一个状态转换到另一个状态时，我们应用一个缓动函数，并且还定义了动画应该执行多长时间。让我们回顾一下我们的代码：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We interpret it in the following way:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样解释它：
- en: When we go from the value `small`to `large`, carry out the animation for `100ms`
    and use the`ease-in` function
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们从值`small`到`large`时，执行`100ms`的动画并使用`ease-in`函数
- en: When we go from the value `large`to `small`, carry out the animation for `100ms`
    and use the`ease-out` function
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们从值`large`到`small`时，执行`100ms`的动画并使用`ease-out`函数
- en: Connecting the parts
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接部分
- en: 'Now that we have dissected our `trigger` statement completely, we have one
    last thing to do, and that is to connect the trigger to a property it needs to
    look at. So, let''s add a little more code to the template:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完全解析了我们的`trigger`语句，我们还有最后一件事要做，那就是将触发器连接到它需要查看的属性。所以，让我们在模板中添加一些代码：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, they key thing to look at is the `[@animationName]='state'`; this is where
    we say that the trigger should look at the component `state`property and we already
    know what values `state` should have for an animation to be triggered.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要注意的关键是`[@animationName]='state'`；这是我们说触发器应该查看组件`state`属性，我们已经知道`state`应该具有哪些值才能触发动画。
- en: The wildcard state
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通配符状态
- en: 'There can be more than just the two states that we defined for our trigger.
    In some cases, it makes more sense to apply transitions regardless of what state
    value we come from. For those cases, there is the wildcard state. Using the wildcard
    state is easy. You go to your transition definition and replace a state value
    with `*`, like so:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为触发器定义的状态不仅仅是两个。在某些情况下，无论我们来自什么状态值，应用转换都更有意义。对于这些情况，有通配符状态。使用通配符状态很容易。您只需转到转换定义并用`*`替换状态值，如下所示：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This means regardless of what state we were in before, a transition will happen
    when our `state` property assumes a `larger` value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着无论我们之前处于什么状态，当我们的`state`属性假定一个`larger`值时，转换都会发生。
- en: The void state
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空状态
- en: 'The `void` state is different from the wildcard state. Void is the same thing
    as saying that if an element didn''t exist before, then it has the `void`value.
    Upon exiting, it assumes a value. The definition of a transition call, therefore,
    looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`void`状态不同于通配符状态。Void与说如果一个元素之前不存在，那么它就有`void`值是一样的。在退出时，它假定一个值。因此，转换调用的定义如下：'
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s make this more real by adding some code to our template:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向我们的模板添加一些代码，让我们使其更真实：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, we have added one button set to call `abraCadabra()` to show the element
    and one button that calls`poof()`, which will hide the element. Let''s now add
    some code to the component:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个按钮，设置为调用`abraCadabra()`来显示元素，以及一个调用`poof()`的按钮，它将隐藏元素。现在让我们向组件添加一些代码：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This trigger definition says the following, if an element goes from not existing
    to existing, `void => *`, then animate from `-100%` to `x` position `0`. When
    going from existing to non-existing, then move it out of the picture by moving
    it to `x` position `200%`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个触发器定义如下，如果一个元素从不存在到存在，`void => *`，那么从`-100%`到`x`位置`0`进行动画。当从存在到不存在时，将其移出画面，将其移动到`x`位置`200%`。
- en: 'Now for the final bit, our component code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是最后一部分，我们的组件代码：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here we can see that calling the `abraCadabra()`method will trigger the state
    `'in'` and setting the Boolean`showMe` to`true` will trigger the transition `void
    => *`. This explains the main purpose of the `void` state, which is to be used
    when prior elements don't exist.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到调用`abraCadabra()`方法将触发状态`'in'`，并将布尔值`showMe`设置为`true`将触发转换`void =>
    *`。这解释了`void`状态的主要目的，即在先前元素不存在时使用。
- en: Animation callbacks
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画回调
- en: There are occasions when you might want to know when you are kicking off an
    animation as well as knowing when the animation finishes. There is good news to
    be had here; we can find this out and execute whatever code we need for those
    occasions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您可能想要知道何时启动动画以及动画何时完成。在这里有好消息；我们可以找出这一点，并执行我们需要的任何代码。
- en: 'What we need to do is listen to the `start` and `done` properties of our trigger,
    like so:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是监听触发器的`start`和`done`属性，如下所示：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And, of course, we need add code to our component so it looks like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要向我们的组件添加代码，使其看起来像这样：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Animating components with the AnimationBuilder
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AnimationBuilder对组件进行动画处理
- en: 'So far, we have covered how to do animations with pure CSS or by defining a
    trigger that we can hook up to our markup. There is another more programmatic
    approach to animation. This approach uses a service called `AnimationBuilder`.
    There are some key factors involved in making this approach work, namely:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了如何使用纯CSS进行动画处理，或者通过定义一个触发器来连接到我们的标记。还有另一种更程序化的动画处理方法。这种方法使用一个名为`AnimationBuilder`的服务。使这种方法起作用涉及一些关键因素，即：
- en: '`AnimationBuilder`: This is a service we inject; it has a single method, `build`,
    that when called creates an instance of an ``AnimationFactory``'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnimationBuilder`：这是一个我们注入的服务；它有一个名为`build`的方法，当调用时创建一个``AnimationFactory``的实例'
- en: '`AnimationFactory`: This is the result of calling `build()` on an `AnimationBuilder` instance;
    it has been given a number of styling transformations and one or more animations'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnimationFactory`：这是在`AnimationBuilder`实例上调用`build()`的结果；它已经被赋予了许多样式转换和一个或多个动画'
- en: '`AnimationPlayer`: The player needs an element on which to apply the animation
    instruction'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnimationPlayer`：播放器需要一个元素来应用动画指令'
- en: 'Let''s cover these bullets so we understand what happens, when, and to what
    element. First things first, we need to inject the `AnimationBuilder`to a component''s
    constructor and also inject an `elementRef` instance so we have a target for our
    animation, like so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释这些要点，这样我们就能理解发生了什么，什么时候发生，以及对哪个元素发生了什么。首先，我们需要将`AnimationBuilder`注入到组件的构造函数中，并且还需要注入一个`elementRef`实例，这样我们就有了动画的目标，就像这样：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'At this point, we have access to an instance of the `animationBuilder` and
    are ready to set up our style transformations and an animation, so let''s do that
    next:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以访问`animationBuilder`的一个实例，并准备好设置我们的样式转换和动画，所以让我们接着做：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here, we have defined a transformation that sets the width to `0px` initially,
    and an animation setting the width to `100px` over `1` second. We have also assigned
    the result of calling `animationBuilder.build()`to a variable animation that is
    of type `AnimationFactory`. The next step is to create an instance of an animation
    player and decide what element to apply this animation to:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个将宽度初始设置为`0px`的转换，以及一个将宽度在`1`秒内设置为`100px`的动画。我们还将调用`animationBuilder.build()`的结果分配给了一个名为animation的变量，它的类型是`AnimationFactory`。下一步是创建一个动画播放器的实例，并决定要将此动画应用到哪个元素：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We do two things here; first, we point out an element in our template where
    we want the animation to be applied to. Next, we create an instance of an animation
    player by calling `animation.create( elem )`with our element as input. What''s
    missing now is to create the element in the UI so our `querySelector()`can find
    it. We need to create an element with the CSS class text, which is just what we
    do in the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了两件事；首先，我们指出了模板中我们想要应用动画的元素。接下来，我们通过调用`animation.create(elem)`并将我们的元素作为输入来创建一个动画播放器的实例。现在缺少的是在UI中创建元素，这样我们的`querySelector()`才能找到它。我们需要创建一个带有CSS类文本的元素，这正是我们在下面的代码中所做的：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The very last step is to call the `play()` method on our animation player instance:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在我们的动画播放器实例上调用`play()`方法：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Enjoy the animation as it plays in the browser. You can easily extend the animation
    by adding more properties to our `style({})` method call, like so:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中播放动画。您可以通过向我们的`style({})`方法调用添加更多属性来轻松扩展动画，就像这样：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In summary, `AnimationBuilder` is a powerful way to create reusable animations
    that you can easily apply to an element of your choice.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`AnimationBuilder`是一种强大的方式，可以创建可重用的动画，您可以轻松地将其应用到您选择的元素上。
- en: Creating a reusable animation directive
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个可重用的动画指令
- en: 'So far, we have seen how we can create an `AnimationBuilder` and how we can
    use it to programmatically create and apply animations at will. One way of making
    it reusable is to wrap it inside a directive. Creating a directive is quite a
    simple feat that we have done a few times already; the thing we need to keep in
    mind is that our directive will be applied to an element and this element is the
    thing that will be animated by our animation. Let''s summarize what we need to
    do in a list:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何创建`AnimationBuilder`以及如何使用它来随意地以编程方式创建和应用动画。使其可重用的一种方法是将其包装在一个指令中。创建指令是一件相当简单的事情，我们已经做过几次了；我们需要记住的是，我们的指令将被应用到一个元素上，而这个元素就是我们的动画将要被应用到的东西。让我们总结一下我们需要在列表中做的事情：
- en: Create a directive.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个指令。
- en: Inject `AnimationBuilder`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注入`AnimationBuilder`。
- en: Create our animation.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们的动画。
- en: Create an animation player.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个动画播放器。
- en: Play the animation.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放动画。
- en: 'This list of things is very similar to when we explained how the `AnimationBuilder`
    worked, and it should be; after all, the directive is the only new thing here.
    Let''s define our directive and the animation; there really isn''t much to it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事情清单与我们解释`AnimationBuilder`的工作原理非常相似，而且应该是这样的；毕竟，指令是这里唯一的新东西。让我们定义我们的指令和动画；实际上并没有太多要做的。
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This is all we need. Now we can just apply our directive to any element, like
    so:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要的一切。现在我们可以将我们的指令应用到任何元素上，就像这样：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have only scratched the surface of dealing with animations. To read up on
    everything you can do, we suggest looking at the official documentation at [https://angular.io/guide/animations](https://angular.io/guide/animations).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是触及了处理动画的表面。要了解你可以做的一切，请阅读官方文档[https://angular.io/guide/animations](https://angular.io/guide/animations)。
- en: In this chapter, we started looking at how to define vanilla CSS animations.
    Then, we explained animation triggers and how you can declaratively attach a defined
    animation to an element. Then, we looked at how to programmatically define animations
    and attach them to an element at will. The very last thing we did was to package
    our programmatic animations in a directive. There is a lot more to learn about
    animations, but now you should have a basic understanding of what APIs exist and
    when to use them. Go out there and make your app full of life, but remember, less
    is more.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始学习如何定义原始的CSS动画。然后，我们解释了动画触发器以及如何以声明方式将定义的动画附加到元素上。然后，我们看了如何以编程方式定义动画并随意将其附加到元素上。我们最后做的事情就是将我们的程序化动画打包到一个指令中。关于动画还有很多要学习的，但现在你应该对存在的API有基本的了解以及何时使用它们。走出去，让你的应用充满生机，但记住，少即是多。
