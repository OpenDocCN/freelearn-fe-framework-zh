["```js\n    $ cp -R ch7 ch8\n    ```", "```js\n    User-agent: *\n    Allow: /\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    $ cd backend\n    $ npm run dev\n    ```", "```js\n    import { Link } from 'react-router-dom'\n    ```", "```js\n    export function Post({\n      title,\n      contents,\n      author,\n      _id,\n      fullPost = false,\n    }) {\n    ```", "```js\n          {fullPost ? (\n            <h3>{title}</h3>\n          ) : (\n            <Link to={`/posts/${_id}`}>\n              <h3>{title}</h3>\n            </Link>\n          )}\n    ```", "```js\n          {fullPost && <div>{contents}</div>}\n          {author && (\n            <em>\n              {fullPost && <br />}\n              Written by <User id={author} />\n            </em>\n          )}\n    ```", "```js\n    Post.propTypes = {\n      title: PropTypes.string.isRequired,\n      contents: PropTypes.string,\n      author: PropTypes.string,\n      _id: PropTypes.string.isRequired,\n      fullPost: PropTypes.bool,\n    }\n    ```", "```js\n    export const getPostById = async (postId) => {\n      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/posts/${postId}`)\n      return await res.json()\n    }\n    ```", "```js\n    import { Link } from 'react-router-dom'\n    import PropTypes from 'prop-types'\n    import { useQuery } from '@tanstack/react-query'\n    import { Header } from '../components/Header.jsx'\n    import { Post } from '../components/Post.jsx'\n    import { getPostById } from '../api/posts.js'\n    ```", "```js\n    export function ViewPost({ postId }) {\n    ```", "```js\n      const postQuery = useQuery({\n        queryKey: ['post', postId],\n        queryFn: () => getPostById(postId),\n      })\n      const post = postQuery.data\n    ```", "```js\n      return (\n        <div style={{ padding: 8 }}>\n          <Header />\n          <br />\n          <hr />\n          <Link to='/'>Back to main page</Link>\n          <br />\n          <hr />\n    ```", "```js\n          {post ? <Post {...post} fullPost /> : `Post with id ${postId} not found.`}\n        </div>\n      )\n    }\n    ```", "```js\n    ViewPost.propTypes = {\n      postId: PropTypes.string.isRequired,\n    }\n    ```", "```js\n    import { ViewPost } from './pages/ViewPost.jsx'\n    import { getPosts, getPostById } from './api/posts.js'\n    ```", "```js\n      {\n        path: '/posts/:postId',\n        loader: async ({ params }) => {\n          const postId = params.postId\n          const queryClient = new QueryClient()\n          const post = await getPostById(postId)\n          await queryClient.prefetchQuery({\n            queryKey: ['post', postId],\n            queryFn: () => post,\n          })\n          if (post?.author) {\n            await queryClient.prefetchQuery({\n              queryKey: ['users', post.author],\n              queryFn: () =>\n                getUserInfo(post.author),\n            })\n          }\n          return { dehydratedState: dehydrate(queryClient), postId }\n        },\n    ```", "```js\n        Component() {\n          const { dehydratedState, postId } = useLoaderData()\n          return (\n            <HydrationBoundary state={dehydratedState}>\n              <ViewPost postId={postId} />\n            </HydrationBoundary>\n          )\n        },\n      },\n    ```", "```js\n        path: '/posts/:postId/:slug?',\n    ```", "```js\n    title string ourselves.\n    ```", "```js\n    import slug from 'slug'\n    ```", "```js\n            <Link to={`/posts/${_id}/${slug(title)}`}>\n    ```", "```js\n    http://localhost:5173/posts/64a42dfd6a7b7ab47009f5e3/making-sure-customers-find-you-with-search-engine-optimization\n    ```", "```js\n        <title>Full-Stack React Blog</title>\n    ```", "```js\n    $ npm install react-helmet-async@1.3.0\n    ```", "```js\n    import { Helmet } from 'react-helmet-async'\n    ```", "```js\n      return (\n        <div style={{ padding: 8 }}>\n          {post && (\n            <Helmet>\n              <title>{post.title} | Full-Stack React Blog</title>\n            </Helmet>\n          )}\n    ```", "```js\n    import { Helmet } from 'react-helmet-async'\n    ```", "```js\n      return (\n        <div style={{ padding: 8 }}>\n          <Helmet>\n            <title>Full-Stack React Blog</title>\n          </Helmet>\n    ```", "```js\n    import { HelmetProvider } from 'react-helmet-async'\n    ```", "```js\n    export function App({ children }) {\n      return (\n        <HelmetProvider>\n          <QueryClientProvider client={queryClient}>\n            <AuthContextProvider>\n              {children}\n            </AuthContextProvider>\n          </QueryClientProvider>\n        </HelmetProvider>\n      )\n    }\n    ```", "```js\n          <Helmet>\n            <title>Full-Stack React Blog</title>\n            <meta\n              name='description'\n              content='A blog full of articles about full-stack React development.'\n            />\n          </Helmet>\n    ```", "```js\n    function truncate(str, max = 160) {\n      if (!str) return str\n      if (str.length > max) {\n        return str.slice(0, max - 3) + '...'\n      } else {\n        return str\n      }\n    }\n    ```", "```js\n          {post && (\n            <Helmet>\n              <title>{post.title} | Full-Stack React Blog</title>\n            <meta name='description' content={truncate(post.contents)} />\n    ```", "```js\n<meta name=\"robots\" content=\"index, follow\">\n```", "```js\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n```", "```js\n<meta charset=\"UTF-8\" />\n```", "```js\n<html lang=\"en\">\n```", "```js\n    FRONTEND_URL=\"http://localhost:5173\"\n    ```", "```js\n    import slug from 'slug'\n    import dotenv from 'dotenv'\n    dotenv.config()\n    ```", "```js\n    const baseUrl = process.env.FRONTEND_URL\n    ```", "```js\n    export async function generateSitemap() {\n      const postsRequest = await fetch(`${process.env.VITE_BACKEND_URL}/posts`)\n      const posts = await postsRequest.json()\n    ```", "```js\n      return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset >\n    ```", "```js\n        <url>\n            <loc>${baseUrl}</loc>\n        </url>\n        <url>\n            <loc>${baseUrl}/signup</loc>\n        </url>\n        <url>\n            <loc>${baseUrl}/login</loc>\n        </url>\n    ```", "```js\n        ${posts\n          .map(\n            (post) => `\n        <url>\n            <loc>${baseUrl}/posts/${post._id}/${slug(post.title)}</loc>\n    ```", "```js\n            <lastmod>${post.updatedAt ?? post.createdAt}</lastmod>\n    ```", "```js\n        </url>`,\n          )\n          .join('')}\n    </urlset>`\n    }\n    ```", "```js\n    import { generateSitemap } from './generateSitemap.js'\n    ```", "```js\n      app.use('*', async (req, res, next) => {\n        if (req.originalUrl === '/sitemap.xml') {\n          const sitemap = await generateSitemap()\n          return res\n            .status(200)\n            .set({ 'Content-Type': 'application/xml' })\n            .end(sitemap)\n        }\n    ```", "```js\n    Sitemap: http://localhost:5173/sitemap.xml\n    ```", "```js\n    import { getUserInfo } from '../api/users.js'\n    ```", "```js\n      const userInfoQuery = useQuery({\n        queryKey: ['users', post?.author],\n        queryFn: () => getUserInfo(post?.author),\n        enabled: Boolean(post?.author),\n      })\n      const userInfo = userInfoQuery.data ?? {}\n    ```", "```js\n          {post && (\n            <Helmet>\n              <title>{post.title} | Full-Stack React Blog</title>\n              <meta name='description' content={truncate(post.contents)} />\n              <meta property='og:type' content='article' />\n              <meta property='og:title' content={post.title} />\n              <meta property='og:article:published_time' content={post.createdAt} />\n              <meta property='og:article:modified_time' content={post.updatedAt} />\n    ```", "```js\n              <meta property='og:article:author' content={userInfo.username} />\n    ```", "```js\n              {(post.tags ?? []).map((tag) => (\n                <meta key={tag} property='og:article:tag' content={tag} />\n              ))}\n            </Helmet>\n          )}\n    ```"]