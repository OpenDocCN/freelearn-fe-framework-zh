- en: Debugging Vuex Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vuex 应用程序调试
- en: By developing your applications using test-driven development, you will reduce
    debugging time considerably. Still, there are moments when a piece of code refuses
    to work as expected or a subtle bug hides among your code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用测试驱动开发来开发你的应用程序，你可以显著减少调试时间。尽管如此，仍然会有一些代码无法按预期工作或微小的错误隐藏在你的代码中。
- en: Fortunately, browsers provide developer tools to help frontend developers debug
    their applications and Vue provides vue-devtools .
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，浏览器提供了开发者工具来帮助前端开发者调试他们的应用程序，Vue 提供了 vue-devtools。
- en: 'In the following chapter, we will learn about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习以下内容：
- en: Using vue-devtools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 vue-devtools
- en: Using the built-in logger plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置的日志插件
- en: To understand this chapter, you need to have basic knowledge of the Chrome developer
    Tools instrument.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这一章，你需要具备基本的 Chrome 开发者工具知识。
- en: Using vue-devtools
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 vue-devtools
- en: Vue.js provides the vue-devtools utility to help programmers debug Vue applications.
    Vuex enhances this tool to keep track of every mutation committed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 提供了 vue-devtools 工具，帮助程序员调试 Vue 应用程序。Vuex 通过增强此工具来跟踪每个提交的突变。
- en: You can install this utility as an extension for Chrome or FireFox, or you can
    navigate to [https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)
    for instructions on how to install it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将此实用程序作为 Chrome 或 FireFox 的扩展程序安装，或者你可以导航到 [https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools)
    以获取安装说明。
- en: Start the *EveryNote* application by typing `npm start`, open Google Chrome
    with vue-devtools installed at `http://localhost:8080/`, then press *F12*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入 `npm start` 启动 *EveryNote* 应用程序，使用已安装 vue-devtools 的 Google Chrome 打开 `http://localhost:8080/`，然后按
    *F12*。
- en: Component inspector
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件检查器
- en: 'If you select the Elements tab in Chrome Developer Tools, you will see something
    like the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择 Chrome 开发者工具中的元素标签页，你会看到如下截图所示的内容：
- en: '![](img/32680610-2418-4a97-a269-b152b8136e60.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32680610-2418-4a97-a269-b152b8136e60.png)'
- en: 'Figure 4.1: Chrome Developer Tools, Elements tab'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：Chrome 开发者工具，元素标签页
- en: Below the Elements tab, you can see the current DOM tree of the *EveryNote*
    application. The selected `div` is the element containing the second note.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在元素标签页下方，你可以看到 *EveryNote* 应用程序当前的 DOM 树。选中的 `div` 是包含第二个笔记的元素。
- en: By mapping the DOM structure back to the Vue components we've just coded, you
    can understand that the selected element is the root element of the component
    `Note`. Wouldn't it be better to see something like `<Note>` instead of the detailed
    `Note` DOM elements structure?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 DOM 结构映射回我们刚刚编写的 Vue 组件，你可以理解选中的元素是组件 `Note` 的根元素。难道不是看到 `<Note>` 而不是详细的
    `Note` DOM 元素结构更好吗？
- en: 'Now select the Vue tab, and you will see something like the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在选择 Vue 标签页，你会看到如下截图所示的内容：
- en: '![](img/57a83bdd-0259-484b-85ff-0fa6ebd320cd.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a83bdd-0259-484b-85ff-0fa6ebd320cd.png)'
- en: 'Figure 4.2: Vue tab inside Chrome Developer Tools.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：Chrome 开发者工具中的 Vue 标签页。
- en: In a glance, you can see the application structure with the components' names
    instead of the components' DOM elements. By moving the mouse over the components,
    the corresponding element will be highlighted in the HTML page. If you press the
    select button (![](img/cbb17bef-a076-403f-a362-b15ad1953cdc.png)), you can select
    an element inside the HTML page and have it highlighted in the components tree.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一眼就能看到应用程序的结构，而不是组件的 DOM 元素。通过将鼠标移到组件上，相应的元素将在 HTML 页面中突出显示。如果你按下选择按钮 (![](img/cbb17bef-a076-403f-a362-b15ad1953cdc.png))，你可以在
    HTML 页面中选择一个元素，并在组件树中突出显示。
- en: 'By selecting an element from the tree below the Filter components box, you
    will also see its properties in the `props` frame, as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在“过滤组件”框下方的树中选择一个元素，你也会在“props”框架中看到它的属性，如下截图所示：
- en: '![](img/8f9edcc6-1c91-4783-abf6-50697b9fa0a9.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f9edcc6-1c91-4783-abf6-50697b9fa0a9.png)'
- en: 'Figure 4.3: Props frame'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：道具框架
- en: 'If the selected component has a binding to Vuex, it will appear in the same
    box. This next screenshot is an example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选中的组件与 Vuex 有绑定，它将出现在同一个框中。接下来的截图是一个示例：
- en: '![](img/71bb1954-c2cd-49ae-b3d2-dfbc5a3ac78a.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71bb1954-c2cd-49ae-b3d2-dfbc5a3ac78a.png)'
- en: 'Figure 4.4: Vuex component bindings'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4：Vuex 组件绑定
- en: This way, it becomes easy to move across Vue components inside a page, and see
    their state.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，就可以轻松地在页面内的 Vue 组件之间移动，并查看它们的状态。
- en: The next feature we will see is the events inspector.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看到的下一个功能是事件检查器。
- en: Events inspector
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件检查器
- en: 'Watching the components state is useful, but wouldn''t it be great if we could
    also record the interaction between components? In fact, vue-devtools provides
    two other features: events and Vuex mutation recording.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 观察组件状态很有用，但如果我们还能记录组件之间的交互会更好。实际上，vue-devtools提供了另外两个功能：事件和Vuex变更记录。
- en: 'In the following screenshot, you can see the Filter events section of vue-devtools:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，您可以看到vue-devtools的过滤事件部分：
- en: '![](img/173462fc-fc41-420d-b07c-06f0d4d0aa22.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/173462fc-fc41-420d-b07c-06f0d4d0aa22.png)'
- en: 'Figure 4.5: Filter events section'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5：过滤事件部分
- en: As an example, I added a note and, because of this action, the Filter events
    tab recorded that an `editDone` event has been fired inside `NoteEditor`. It also
    shows the event payload.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我添加了一个笔记，因为这个动作，过滤事件标签页记录了在`NoteEditor`内部触发了`editDone`事件。它还显示了事件有效载荷。
- en: Finally, we will explore a Vuex dedicated tab.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探索一个Vuex专用标签页。
- en: Vuex time travel
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vuex时间旅行
- en: 'By moving to the Vuex section by pressing the Vue button ![](img/00343d22-729f-4de2-91e6-9b061686d342.png),
    you will be able to record all the Vuex mutations committed. The following screenshot
    shows this feature:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按Vue按钮进入Vuex部分 ![](img/00343d22-729f-4de2-91e6-9b061686d342.png)，您将能够记录所有提交的Vuex变更。以下截图显示了此功能：
- en: '![](img/fefc1aae-c780-405e-894a-7b82ce341061.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fefc1aae-c780-405e-894a-7b82ce341061.png)'
- en: 'Figure 4.6: Vuex time travel tab'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：Vuex时间旅行标签页
- en: As you can see, after the application has been loaded, two notes have been added.
    Those are the notes that get added because of the fake call to a hypothetical
    server, triggered by the action `loadNotesFromServer`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，应用程序加载后，已添加了两个笔记。这些笔记是由于由`loadNotesFromServer`动作触发的对假设服务器的虚假调用而添加的。
- en: 'After that, I clicked the Delete button of the second note. In fact, the third
    mutation recorded is `DELETE_NOTE`. You can see the state and the mutation payload
    for each mutation, and even undo a commit, as demonstrated in the following screenshot,
    where I am about to undo the `DELETE_NOTE` mutation:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我点击了第二个笔记的删除按钮。实际上，记录的第三个变更是`DELETE_NOTE`。您可以看到每个变更的状态和变更有效载荷，甚至可以撤销提交，如下面的截图所示，我正准备撤销`DELETE_NOTE`变更：
- en: '![](img/0d9d9f07-ac3a-406e-83e4-5e6a5e07cbbc.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d9d9f07-ac3a-406e-83e4-5e6a5e07cbbc.png)'
- en: 'Figure 4.7: Undoing the DELETE_NOTE mutation'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：撤销DELETE_NOTE变更
- en: 'As a result of the undo, the application state reverts to the previous mutation,
    and the application shows the second note again, as shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于撤销操作，应用程序状态恢复到之前的变更，应用程序再次显示第二个笔记，如下面的截图所示：
- en: '![](img/f65780c8-471e-4ea6-9aba-00833695922e.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f65780c8-471e-4ea6-9aba-00833695922e.png)'
- en: 'Figure 4.8: Application state after undoing the DELETE_NOTE mutation.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：撤销DELETE_NOTE变更后的应用程序状态。
- en: 'The ability of undo mutations comes in handy when you want to debug an action
    and the corresponding mutation: you can put a breakpoint in the action code using
    the Sources tab in Chrome Developer Tools, and then execute and rollback the mutation
    as many times as you need. Note that, if you use Chrome debugger to restart the
    Action code after a mutation has been committed, then the application state has
    already been changed, and the second execution is influenced by the new state.
    On the contrary, if you undo a commit, you can safely re-execute a piece of code
    without the need to reload the entire page.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要调试一个动作及其对应的变更时，撤销变更的能力非常有用：您可以使用Chrome开发者工具中的源代码标签页在动作代码中设置断点，然后执行和回滚变更，直到满足需求。请注意，如果您在提交变更后使用Chrome调试器重新启动动作代码，则应用程序状态已经更改，第二次执行会受到新状态的影响。相反，如果您撤销提交，则可以安全地重新执行一段代码，而无需重新加载整个页面。
- en: Finally, the two buttons above the state frame let you export and import the
    application state from and to the clipboard.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，状态框架上方的两个按钮让您可以从剪贴板导出和导入应用程序状态。
- en: Enabling the Vuex built-in logger plugin
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用Vuex内置的日志插件
- en: 'Vuex provides a built-in plugin to log every mutation. It can be added to the
    application store as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Vuex提供了一个内置插件来记录每个变更。它可以按如下方式添加到应用程序存储中：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The resulting output for the *EveryNote* app is:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*EveryNote*应用程序的结果输出如下：
- en: '![](img/be72e543-fe03-4f32-ae75-ddaf340b6981.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be72e543-fe03-4f32-ae75-ddaf340b6981.png)'
- en: 'Figure 4.8: Vuex built-in logger plugin'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：Vuex内置日志插件
- en: As you can see in the preceding screenshot, it logs not only the mutation name
    but also the previous and next state.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在先前的截图中所见，它不仅记录了变更名称，还记录了前一个和下一个状态。
- en: 'You can download the code at this stage by typing:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这一阶段通过输入以下命令来下载代码：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went through vue-devtools features, and we introduced the
    Vuex built-in logger plugin. But what exactly is a Vuex plugin?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 vue-devtools 的功能，并引入了 Vuex 内置的日志插件。但 Vuex 插件究竟是什么呢？
- en: Well, that is the topic of [Chapter 5](51bea87a-c56f-4f3f-8d2b-79ca84cc2de1.xhtml),
    *Using the Vuex Plugin System*; in the next few pages, we will learn what a Vuex
    plugin is, and how we can write a custom one.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这就是[第5章](51bea87a-c56f-4f3f-8d2b-79ca84cc2de1.xhtml)的主题，*使用 Vuex 插件系统*；在接下来的几页中，我们将学习
    Vuex 插件是什么，以及我们如何编写一个自定义插件。
