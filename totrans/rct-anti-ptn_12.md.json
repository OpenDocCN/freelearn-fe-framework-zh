["```js\nnpx create-react-app weather-app --template typescript\ncd weather-app\nyarn add cypress jest-fetch-mock -D\nyarn install\n```", "```js\nyarn start\n```", "```js\ndescribe('weather application', () => {\n  it('displays the application title', () => {\n    cy.visit('http://localhost:3000/');\n    cy.contains('Weather Application');\n  });\n});\n```", "```js\n  1) weather application\n       displays the application title:\n     AssertionError: Timed out retrying after 4000ms: Expected to find \n      content: 'Weather Application' but never did.\n      at Context.eval (webpack://tdd-weather/./cypress/e2e/weather.\n       spec.cy.ts:4:7)\n```", "```js\nimport React from 'react';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Weather Application</h1>\n    </div>\n  );\n}\n```", "```js\nhttp https://api.openweathermap.org/geo/1.0/direct?q=\"Melbourne\"&limit=5&appid=<your-app-key>\n```", "```js\n[\n    {\n        \"country\": \"AU\",\n        \"lat\": -37.8142176,\n        \"local_names\": {},\n        \"lon\": 144.9631608,\n        \"name\": \"Melbourne\",\n        \"state\": \"Victoria\"\n    },\n    {\n        \"country\": \"US\",\n        \"lat\": 28.106471,\n        \"local_names\": {\n        },\n        \"lon\": -80.6371513,\n        \"name\": \"Melbourne\",\n        \"state\": \"Florida\"\n    }\n]\n```", "```js\nimport searchResults from '../fixtures/search-result.json';\ndescribe('weather application', () => {\n  //...\n  it('searches for a city', () => {\n    cy.intercept(\"GET\", \"https://api.openweathermap.org/geo/1.0/\n     direct?q=*\", {\n      statusCode: 200,\n      body: searchResults,\n    });\n    cy.visit('http://localhost:3000/');\n    cy.get('[data-testid=\"search-input\"]').type('Melbourne');\n    cy.get('[data-testid=\"search-input\"]').type('{enter}');\n    cy.get('[data-testid=\"search-results\"] .search-result')\n      .should('have.length', 5);\n  });\n});\n```", "```js\nfunction App() {\n  const [query, setQuery] = useState<string>(\"\");\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      fetchCities();\n    }\n  };\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n  const fetchCities = () => {\n    fetch(\n      `https://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=\n       5&appid=<app-key>`\n    )\n      .then((r) => r.json())\n      .then((cities) => {\n        setSearchResults(\n          cities.map((city: any) => ({\n            name: city.name,\n          }))\n        );\n      });\n  };\n  return (\n    <div className=\"app\">\n      <h1>Weather Application</h1>\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          data-testid=\"search-input\"\n          onKeyDown={handleKeyDown}\n          onChange={handleChange}\n          placeholder=\"Enter city name (e.g. Melbourne, New York)\"\n        />\n      </div>\n      <div className=\"search-results-popup\">\n        {searchResults.length > 0 && (\n          <ul data-testid=\"search-results\">\n            {searchResults.map((city, index) => (\n              <li key={index} className=\"search-result\">\n                {city.name}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n```", "```js\nit(\"shows a city name\", () => {\n  render(<SearchResultItem item={{ city: \"Melbourne\" }} />);\n  expect(screen.getByText(\"Melbourne\")).toBeInTheDocument();\n});\n```", "```js\nexport const SearchResultItem = ({ item }: { item: { city: string } }) => {\n  return <li className=\"search-result\">{item.city}</li>;\n};\n```", "```js\nfunction App() {\n  //...\n  <div className=\"search-results-popup\">\n    {searchResults.length > 0 && (\n      <ul data-testid=\"search-results\" className=\"search-results\">\n        {searchResults.map((city, index) => (\n          <SearchResultItem key={index} item={{ city }} />\n        ))}\n      </ul>\n    )}\n  </div>\n  //...\n}\n```", "```js\nit(\"shows a city name, the state, and the country\", () => {\n  render(\n    <SearchResultItem\n      item={{ city: \"Melbourne\", state: \"Victoria\", country: \n       \"Australia\" }}\n    />\n  );\n  expect(screen.getByText(\"Melbourne\")).toBeInTheDocument();\n  expect(screen.getByText(\"Victoria\")).toBeInTheDocument();\n  expect(screen.getByText(\"Australia\")).toBeInTheDocument();\n});\n```", "```js\ntype SearchResultItemProps = {\n  city: string;\n  state: string;\n  country: string;\n};\nexport const SearchResultItem = ({ item }: { item: SearchResultItemProps }) => {\n  return (\n    <li className=\"search-result\">\n      <span>{item.city}</span>\n      <span>{item.state}</span>\n      <span>{item.country}</span>\n    </li>\n  );\n};\n```", "```js\n[\n    {\n    \"country\": \"US\",\n    \"lat\": 28.106471,\n    \"local_names\": {\n      \"en\": \"Melbourne\",\n      \"ja\": \"メルボーン\",\n      \"ru\": \"Мельбурн\",\n      \"uk\": \"Мелборн\"\n    },\n    \"lon\": -80.6371513,\n    \"name\": \"Melbourne\",\n    \"state\": \"Florida\"\n  }\n]\n```", "```js\ninterface RemoteSearchResultItem {\n  city: string;\n  state: string;\n  country: string;\n  lon: number;\n  lat: number;\n  local_names: {\n    [key: string]: string\n  }\n}\n```", "```js\nconst countryMap = {\n  \"AU\": \"Australia\",\n  \"US\": \"United States\",\n  \"GB\": \"United Kingdom\"\n  //...\n}\nclass SearchResultItemType {\n  private readonly _city: string;\n  private readonly _state: string;\n  private readonly _country: string;\n  constructor(item: RemoteSearchResultItem) {\n    this._city = item.city;\n    this._state = item.state;\n    this._country = item.country\n  }\n  get city() {\n    return this._city\n  }\n  get state() {\n    return this._state\n  }\n  get country() {\n    return countryMap[this._country] || this._country;\n  }\n}\n```", "```js\nimport React from \"react\";\nimport { SearchResultItemType } from \"./models/SearchResultItemType\";\nexport const SearchResultItem = ({ item }: { item: SearchResultItemType }) => {\n  return (\n    <li className=\"search-result\">\n      <span>{item.city}</span>\n      <span>{item.state}</span>\n      <span>{item.country}</span>\n    </li>\n  );\n};\n```", "```js\nit(\"converts the remote type to local\", () => {\n  const remote = {\n    country: \"US\",\n    lat: 28.106471,\n    local_names: {\n      en: \"Melbourne\",\n      ja: \"メルボーン\",\n      ru: \"Мельбурн\",\n      uk: \"Мелборн\",\n    },\n    lon: -80.6371513,\n    name: \"Melbourne\",\n    state: \"Florida\",\n  };\n  const model = new SearchResultItemType(remote);\n  expect(model.city).toEqual('Melbourne');\n  expect(model.state).toEqual('Florida');\n  expect(model.country).toEqual('United States');\n});\n```", "```js\nconst fetchCities = () => {\n  fetch(\n    `https://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=5&\n     appid=<api-key>`\n  )\n    .then((r) => r.json())\n    .then((cities) => {\n      setSearchResults(\n        cities.map(\n          (item: RemoteSearchResultItem) => new \n           SearchResultItemType(item)\n        )\n      );\n    });\n};\n```", "```js\nit('adds city to favorite list', () => {\n  cy.intercept(\"GET\", \"https://api.openweathermap.org/geo/1.0/direct?q=*\", {\n    statusCode: 200,\n    body: searchResults,\n  });\n  cy.visit('http://localhost:3000/');\n  cy.get('[data-testid=\"search-input\"]').type('Melbourne');\n  cy.get('[data-testid=\"search-input\"]').type('{enter}');\n  cy.get('[data-testid=\"search-results\"] .search-result')\n    .first()\n    .click();\n  cy.get('[data-testid=\"favorite-cities\"] .city')\n    .should('have.length', 1);\n  cy.get('[data-testid=\"favorite-cities\"] \n   .city:contains(\"Melbourne\")').should('exist');\n  cy.get('[data-testid=\"favorite-cities\"] .city:contains(\"20°C\")').\n   should('exist');\n})\n```", "```js\nhttp https://api.openweathermap.org/data/2.5/weather?lat=-37.8142176&lon=144.9631608&appid=<api-key>&units=metric\n```", "```js\n{\n  //...\n  \"main\": {\n      \"feels_like\": 20.75,\n      \"humidity\": 56,\n      \"pressure\": 1009,\n      \"temp\": 20.00,\n      \"temp_max\": 23.46,\n      \"temp_min\": 18.71\n  },\n  \"name\": \"Melbourne\",\n  \"timezone\": 39600,\n  \"visibility\": 10000,\n  \"weather\": [\n      {\n          \"description\": \"clear sky\",\n          \"icon\": \"01d\",\n          \"id\": 800,\n          \"main\": \"Clear\"\n      }\n  ],\n  //...\n}\n```", "```js\ncy.intercept('GET', 'https://api.openweathermap.org/data/2.5/weather*', {\n  fixture: 'melbourne.json'\n}).as('getWeather')\n```", "```js\nexport const SearchResultItem = ({\n  item,\n  onItemClick,\n}: {\n  item: SearchResultItemType;\n  onItemClick: (item: SearchResultItemType) => void;\n}) => {\n  return (\n    <li className=\"search-result\" onClick={() => onItemClick(item)}>\n    { /* JSX for rendering the item details */ }\n    </li>\n  );\n};\n```", "```js\nconst onItemClick = (item: SearchResultItemType) => {\n  fetch(\n    `http https://api.openweathermap.org/data/2.5/weather?lat=${item.latitude}&lon=${item.longitude}&appid=<api-key>&units=metric`\n  )\n    .then((r) => r.json())\n    .then((cityWeather) => {\n      setCity({\n        name: cityWeather.name,\n        degree: cityWeather.main.temp,\n      });\n    });\n};\n```", "```js\nclass SearchResultItemType {\n  //... the city, state, country as before\n  private readonly _lat: number;\n  private readonly _long: number;\n  constructor(item: RemoteSearchResultItem) {\n    //... the city, state, country as before\n    this._lat = item.lat;\n    this._long = item.lon;\n  }\n  get latitude() {\n    return this._lat;\n  }\n  get longitude() {\n    return this._long;\n  }\n}\n```", "```js\nfunction App() {\n  const [city, setCity] = useState(undefined);\n  const onItemClick = (item: SearchResultItemType) => {\n    //...\n  }\n  return(\n      <div className=\"search-results-popup\">\n        {searchResults.length > 0 && (\n          <ul data-testid=\"search-results\">\n            {searchResults.map((item, index) => (\n              <SearchResultItem\n                key={index}\n                item={item}\n                onItemClick={onItemClick}\n              />\n            ))}\n          </ul>\n        )}\n      </div>\n      <div data-testid=\"favorite-cities\">\n        {city && (\n          <div className=\"city\">\n            <span>{city.name}</span>\n            <span>{city.degree}°C</span>\n          </div>\n        )}\n      </div>\n  );\n}\n```", "```js\ninterface RemoteCityWeather {\n  name: string;\n  main: {\n    temp: number;\n    humidity: number;\n  };\n  weather: [{\n    main: string;\n    description: string;\n  }];\n  wind: {\n    deg: number;\n    speed: number;\n  };\n}\nexport type { RemoteCityWeather };\n```", "```js\nimport { RemoteCityWeather } from \"./RemoteCityWeather\";\nexport class CityWeather {\n  private readonly _name: string;\n  private readonly _main: string;\n  private readonly _temp: number;\n  constructor(weather: RemoteCityWeather) {\n    this._name = weather.name;\n    this._temp = weather.main.temp;\n    this._main = weather.weather[0].main;\n  }\n  get name() {\n    return this._name;\n  }\n  get degree() {\n    return Math.ceil(this._temp);\n  }\n  get temperature() {\n    if (this._temp == null) {\n      return \"-/-\";\n    }\n    return `${Math.ceil(this._temp)}°C`;\n  }\n  get main() {\n    return this._main.toLowerCase();\n  }\n}\n```", "```js\nconst onItemClick = (item: SearchResultItemType) => {\n  fetch(\n    `https://api.openweathermap.org/data/2.5/weather?lat=${item.latitude}&lon=${item.longitude}&appid=<api-key>&units=metric`\n  )\n    .then((r) => r.json())\n    .then((cityWeather: RemoteCityWeather) => {\n      setCity(new CityWeather(cityWeather));\n      setDropdownOpen(false);\n    });\n};\n```", "```js\n<div data-testid=\"favorite-cities\">\n  {city && (\n    <div className=\"city\">\n      <span>{city.name}</span>\n      <span>{city.temperature}</span>\n    </div>\n  )}\n</div>\n```", "```js\nconst useSearchCity = () => {\n  const [query, setQuery] = useState<string>(\"\");\n  const [searchResults, setSearchResults] = \n   useState<SearchResultItemType[]>(\n    []\n  );\n  const [isDropdownOpen, setDropdownOpen] = useState<boolean>(false);\n  const fetchCities = () => {\n    fetch(\n      `https://api.openweathermap.org/geo/1.0/direct?q=${query}&limit=\n       5&appid=<api-key>`\n    )\n      .then((r) => r.json())\n      .then((cities) => {\n        setSearchResults(\n          cities.map(\n            (item: RemoteSearchResultItem) => new \n             SearchResultItemType(item)\n          )\n        );\n        openDropdownList();\n      });\n  };\n  const openDropdownList = () => setDropdownOpen(true);\n  const closeDropdownList = () => setDropdownOpen(false);\n  return {\n    fetchCities,\n    setQuery,\n    searchResults,\n    isDropdownOpen,\n    openDropdownList,\n    closeDropdownList,\n  };\n};\nexport { useSearchCity };\n```", "```js\nexport const SearchCityInput = ({\n  onItemClick,\n}: {\n  onItemClick: (item: SearchResultItemType) => void;\n}) => {\n  const {\n    fetchCities,\n    setQuery,\n    isDropdownOpen,\n    closeDropdownList,\n    searchResults,\n  } = useSearchCity();\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      fetchCities();\n    }\n  };\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) =>\n    setQuery(e.target.value);\n  const handleItemClick = (item: SearchResultItemType) => {\n    onItemClick(item);\n    closeDropdownList();\n  };\n  return (\n    <>\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          data-testid=\"search-input\"\n          onKeyDown={handleKeyDown}\n          onChange={handleChange}\n          placeholder=\"Enter city name (e.g. Melbourne, New York)\"\n        />\n      </div>\n      {isDropdownOpen && (\n        //... render the dropdown\n      )}\n    </>\n  );\n};\n```", "```js\nconst useFetchCityWeather = () => {\n  const [cityWeather, setCityWeather] = useState<CityWeather | \n   undefined>(undefined);\n  const fetchCityWeather = (item: SearchResultItemType) => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${item.latitude}&lon=${item.longitude}&appid=<api-key>&units=metric`\n    )\n      .then((r) => r.json())\n      .then((cityWeather: RemoteCityWeather) => {\n        setCityWeather(new CityWeather(cityWeather));\n      });\n  };\n  return {\n    cityWeather,\n    fetchCityWeather,\n  };\n};\n```", "```js\nconst Weather = ({ cityWeather }: { cityWeather: CityWeather | undefined }) => {\n  if (cityWeather) {\n    return (\n      <div className=\"city\">\n        <span>{cityWeather.name}</span>\n        <span>{cityWeather.degree}°C</span>\n      </div>\n    );\n  }\n  return null;\n};\n```", "```js\nfunction App() {\n  const { cityWeather, fetchCityWeather } = useFetchCityWeather();\n  const onItemClick = (item: SearchResultItemType) => \n   fetchCityWeather(item);\n  return (\n    <div className=\"app\">\n      <h1>Weather Application</h1>\n      <SearchCityInput onItemClick={onItemClick} />\n      <div data-testid=\"favorite-cities\">\n        <Weather cityWeather={cityWeather} />\n      </div>\n    </div>\n  );\n}\n```", "```js\nsrc\n├── App.tsx\n├── index.tsx\n├── models\n│   ├── CityWeather.ts\n│   ├── RemoteCityWeather.ts\n│   ├── RemoteSearchResultItem.ts\n│   ├── SearchResultItemType.test.ts\n│   └── SearchResultItemType.ts\n├── search\n│   ├── SearchCityInput.tsx\n│   ├── SearchResultItem.test.tsx\n│   ├── SearchResultItem.tsx\n│   └── useSearchCity.ts\n└── weather\n    ├── Weather.tsx\n    ├── useFetchCityWeather.test.ts\n    ├── useFetchCityWeather.ts\n    └── weather.css\n```", "```js\nconst weatherAPIResponse = JSON.stringify({\n  main: {\n    temp: 20.0,\n  },\n  name: \"Melbourne\",\n  weather: [\n    {\n      description: \"clear sky\",\n      main: \"Clear\",\n    },\n  ],\n});\nconst searchResultItem = new SearchResultItemType({\n  country: \"AU\",\n  lat: -37.8141705,\n  lon: 144.9655616,\n  name: \"Melbourne\",\n  state: \"Victoria\",\n});\n```", "```js\ndescribe(\"fetchCityWeather function\", () => {\n  beforeEach(() => {\n    fetchMock.resetMocks();\n  });\n  it(\"returns a list of cities\", async () => {\n    fetchMock.mockResponseOnce(weatherAPIResponse);\n    const { result } = renderHook(() => useFetchCityWeather());\n    await act(async () => {\n      await result.current.fetchCityWeather(searchResultItem);\n    });\n    await waitFor(() => {\n      expect(result.current.cities.length).toEqual(1);\n      expect(result.current.cities[0].name).toEqual(\"Melbourne\");\n    });\n  });\n});\n```", "```js\nconst useFetchCityWeather = () => {\n  const [cities, setCities] = useState<CityWeather[]>([]);\n  const fetchCityWeather = (item: SearchResultItemType) => {\n    //... fetch\n      .then((cityWeather: RemoteCityWeather) => {\n        setCities([new CityWeather(cityWeather), ...cities]);\n      });\n  };\n  return {\n    cities,\n    fetchCityWeather,\n  };\n};\n```", "```js\nfunction App() {\n  //...\n  const { cities, fetchCityWeather } = useFetchCityWeather();\n  return (\n    <div className=\"app\">\n      {/* other jsx */}\n      <div data-testid=\"favorite-cities\">\n        {cities.map((city) => (\n          <Weather key={city.name} cityWeather={city} />\n        ))}\n      </div>\n    </div>\n  );\n}\n```", "```js\nconst WeatherList = ({ cities }: { cities: CityWeather[] }) => {\n  return (\n    <div data-testid=\"favorite-cities\" className=\"favorite-cities\">\n      {cities.map((city) => (\n        <Weather key={city.name} cityWeather={city} />\n      ))}\n    </div>\n  );\n};\n```", "```js\nfunction App() {\n  const { cities, fetchCityWeather } = useFetchCityWeather();\n  const onItemClick = (item: SearchResultItemType) => \n   fetchCityWeather(item);\n  return (\n    <div className=\"app\">\n      <h1>Weather Application</h1>\n      <SearchCityInput onItemClick={onItemClick} />\n      <WeatherList cities={cities} />\n    </div>\n  );\n}\n```", "```js\nconst items = [\n  {\n    name: \"Melbourne\",\n    lat: -37.8142,\n    lon: 144.9632,\n  },\n];\nit(\"fetches data when initializing when possible\", () => {\n  cy.window().then((window: any) => {\n    window.localStorage.setItem(\n      \"favoriteItems\",\n      JSON.stringify(items, null, 2)\n    );\n  });\n  cy.intercept(\"GET\", \"https://api.openweathermap.org/data/2.5/\n   weather*\", {\n    fixture: \"melbourne.json\",\n  }).as(\"getWeather\");\n  cy.visit(\"http://localhost:3000/\");\n  cy.get('[data-testid=\"favorite-cities\"] .city').should(\"have.\n   length\", 1);\n  cy.get(\n    '[data-testid=\"favorite-cities\"] .city:contains(\"Melbourne\")'\n  ).should(\"exist\");\n  cy.get('[data-testid=\"favorite-cities\"] .city:contains(\"20°C\")').\n   should(\n    \"exist\"\n  );\n});\n```", "```js\nexport const fetchCityWeatherData = async (item: SearchResultItemType) => {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?lat=${item.latitude}&lon=${item.longitude}&appid=<api-key>&units=metric`\n  );\n  const json = await response.json();\n  return new CityWeather(json);\n};\n```", "```js\nconst useFetchCityWeather = () => {\n  //...\n  const fetchCityWeather = (item: SearchResultItemType) => {\n    return fetchCityWeatherData(item).then((cityWeather) => {\n      setCities([cityWeather, ...cities]);\n    });\n  };\n  //...\n}\n```", "```js\nuseEffect(() => {\n  const hydrate = async () => {\n    const items = JSON.parse(localStorage.getItem(\"favoriteItems\") || \n     \"[]\");\n    const promises = items.map((item: any) => {\n      const searchResultItem = new SearchResultItemType(item);\n      return fetchCityWeatherData(searchResultItem);\n    });\n    const cities = await Promise.all(promises);\n    setCities(cities);\n  };\n  hydrate();\n}, []);\n```", "```js\nconst onItemClick = (item: SearchResultItemType) => {\n  setTimeout(() => {\n    const items = JSON.parse(localStorage.getItem(\"favoriteItems\") || \"[]\");\n    const newItem = {\n      name: item.city,\n      lon: item.longitude,\n      lat: item.latitude,\n    };\n    localStorage.setItem(\n      \"favoriteItems\",\n      JSON.stringify([newItem, ...items], null, 2)\n    );\n  }, 0);\n  return fetchCityWeather(item);\n};\n```"]