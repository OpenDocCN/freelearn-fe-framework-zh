- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Your Own Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the limitations and rules of Hooks.
    We also learned where to call Hooks, why the order matters, and naming conventions
    for Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to create custom Hooks by extracting
    existing code from our components. We are also going to learn how to use custom
    Hooks and how Hooks can interact with each other. Finally, we are going to learn
    how to write tests for our custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, you will be able to create custom Hooks to encapsulate
    and re-use application logic, keeping your code clean and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom Theme Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom User Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom API Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Debounced History State Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing custom Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter12)'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided in the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom Theme Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After getting a good grasp on the concept of Hooks by learning about the built-in
    React Hooks, community Hooks, as well as the rules of Hooks, we are now going
    to build our own Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 5*](Chapter_05.xhtml#_idTextAnchor127)*, Implementing React Contexts*,
    we introduced a `ThemeContext` to style blog posts in our app. We used a Context
    Hook to access the `ThemeContext` in many components. Functionality that is used
    across multiple components is usually a good opportunity for a custom Hook. As
    you might have noticed, we often do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We could abstract this functionality into a `useTheme` Hook, which will get
    the `theme` object from the `ThemeContext`.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, it makes the most sense to first write the component, and then later
    extract a custom Hook from it if we notice that we use similar code across multiple
    components. Doing so avoids prematurely creating custom Hooks and making our project
    unnecessarily complex.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get started creating the custom Theme Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the custom Theme Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started creating a custom Theme Hook now, by extracting the existing
    code for the Context Hook into a separate function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter10_3` folder to a new `Chapter12_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter12_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/hooks/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside it, create a new `src/hooks/theme.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this newly created file, import the `useContext` function and the `ThemeContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define and export a `useTheme` function, which simply returns the Context
    Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It’s as simple as that, as long as we stick to the rules and naming conventions
    of Hooks, we can easily create our own custom Hooks! Let’s continue by using our
    custom Theme Hook throughout the blog app.
  prefs: []
  type: TYPE_NORMAL
- en: Using the custom Theme Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started using our custom Theme Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/Post.jsx` and *remove* the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with an import of the `useTheme` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the existing Context Hook with our custom Theme Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/PostListItem.jsx` and *remove* the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with an import of the `useTheme` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the Context Hook with our Theme Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `dev` server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see that the theme still works the same way as before, showing featured
    posts in a different color.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, replacing the Context Hooks with our Theme Hook simplifies the
    code a bit (requiring less imports) and allows us to easily adjust the theming
    system later. For example, if we wanted to fetch the default theme from a user
    setting instead of getting it from the context, we could implement this functionality
    in the Theme Hook and all components would automatically use this new theme system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter12/Chapter12_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully created a custom Theme Hook, let’s move on to
    creating a custom User Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom User Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 5*](Chapter_05.xhtml#_idTextAnchor127), *Implementing React Contexts*,
    we defined a `UserContext` to store the username of the currently logged in user.
    In [*Chapter 10*](Chapter_10.xhtml#_idTextAnchor250), *Using Community Hooks*,
    we replaced the `UserContext` with a Local Storage Hook. As you may remember,
    refactoring from the Context Hook to a Local Storage Hook required us to adjust
    the code in many components.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid such issues in the future, we can put all user related information
    and functions into a User Hook, which then exposes them to be used by other components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the custom User Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by extracting all of our existing code related to dealing with
    the username into a custom User Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter12_1` folder to a new `Chapter12_2` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter12_2` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/hooks/user.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `useLocalStorage` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a new `useUser` function, in which we use the Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Additionally, we define a flag to tell whether the user is logged in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define the `register`, `login`, and `logout` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the `username`, `isLoggedIn` flag, and the functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, we are not just returning the username and a function to set
    the username, but instead returning an object with various information about the
    user session, as well as functions that we can call to adjust the user state.
    Now that we have abstracted this functionality into a User Hook, we can easily
    extend it later to support full authentication (instead of just storing the username).
  prefs: []
  type: TYPE_NORMAL
- en: With our User Hook successfully created, let’s use it in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Using the custom User Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now refactor our blog app to use the User Hook instead of directly reading
    from and writing to the Local Storage Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and *remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import to the `useUser` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the `username` check with a check for the `isLoggedIn` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the `isLoggedIn` flag from the Hook makes the code easier to read – before
    it may have been unclear why we are checking for the username, but now it’s clear
    that we only want to render this component when the user is logged in. Doing the
    check like this has the additional benefit that we can change the logic for checking
    if the user is logged in later by adjusting the User Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now edit `src/components/user/UserBar.jsx` and *remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import to the `useUser` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the `username` check with a check for the `isLoggedIn` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next edit `src/components/user/Register.jsx` and *remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import to the `useUser` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `handleSubmit` function, *replace* the `setUsername` function with our
    new `register` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, we are making our code easier to read by calling a function that explains
    what we actually want to do (register a new user). Before, we were just calling
    `setUsername` here. Later, we may want to actually connect this to a database,
    so having the `register` function in the User Hook will make it easier for us
    to add this functionality later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/user/Login.jsx` and *remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import to the `useUser` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `handleSubmit` function, *replace* the `setUsername` function with our
    new `login` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/user/Logout.jsx` and *remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import to the `useUser` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `handleSubmit` function, *replace* the `setUsername` function with our
    new `logout` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/CreatePost.jsx` and *remove* the following import
    of the `useLocalStorage` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an import to the `useUser` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Being able to access the `username` from the User Hook decouples the component
    from the internal logic. For example, we may later store a whole user object,
    or an authentication token, in local storage. If we used the Local Storage Hook
    in each component, we would need to adjust every single component that uses it.
    Now, we can simply adjust the User Hook and as long as we still return the `username`
    from it, we do not need to change any components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/comment/CreateComment.jsx` and *remove* the following
    import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import to the `useUser` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/comment/CommentList.jsx` and *remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import to the `useUser` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Local Storage Hook with our custom User Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the `username` check with a check for the `isLoggedIn` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, the refactored code with the User Hook is already significantly
    easier to read. Instead of doing checks on the `username`, we are checking an
    `isLoggedIn` flag. Additionally, we are calling `login`, `register` and `logout`
    functions, abstracting implementation details and allowing the components to focus
    on their features. Doing this separates concerns about the application logic into
    custom Hooks, while components focus on the user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now start the dev server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: You will see that all functionality of our blog still works the same way as
    before.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter12/Chapter12_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we finished creating the custom User Hook, let’s move on to creating
    custom Hooks for API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom API Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also create Hooks for the various API calls. Putting these Hooks in a
    single file allows us to adjust the API calls easily later on. We are going to
    prefix our custom API Hooks with `useAPI` so it is easy to tell which functions
    are API Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting custom API Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create custom Hooks for our API now by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter12_2` folder to a new `Chapter12_3` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter12_3` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/hooks/api.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/hooks/api.js` and import the following functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function to fetch posts, copied over from the code we had in `src/components/post/PostFeed.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function to fetch a single post, copied over from the code we had
    in `src/components/post/Post.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function to search for posts, copied over from the code we had in
    `src/components/post/PostSearchResults.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function to create posts, copied over from the code we had in `src/components/post/CreatePost.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Similarly to the User Hook, the API Hooks abstract implementation details and
    only expose the necessary information, such as the `data` or the `mutateAsync`
    function. This means that we could even swap out React Query for a different library
    later, simply by adjusting the custom API Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: We can now refactor our blog app to use the custom API Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom API Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to refactor the app to use the previously defined API Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/PostFeed.jsx` and *remove* the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with an import of `useAPIFetchPosts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Suspense Query Hook with our API Fetch Posts Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Instead of having implementation details on *how* we fetch posts from the API,
    we now only provide the information that is relevant to the component (whether
    the posts are featured or not). The rest is handled internally by the custom API
    Hook and can be changed later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/Post.jsx` and *remove* the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with an import of `useAPIFetchPost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Suspense Query Hook with our API Fetch Posts Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/PostSearchResults.jsx` and *remove* the following
    imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with an import of `useAPISearchPosts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '*Replace* the Suspense Query Hook with our API Fetch Posts Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/CreatePost.jsx` and *remove* the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with an import of `useAPICreatePost`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '*Remove* the existing Mutation Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with our API Create Post Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now directly call the `createPost` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the dev server, and make sure that everything still works like before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, refactoring to use custom Hooks has made our components easier to read,
    allowing us to focus on the user interaction logic, while our custom Hooks deal
    with the application logic internally.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter12/Chapter12_3`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: After creating custom API Hooks, let’s move on to creating a Debounced History
    State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Debounced History State Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to create a slightly more advanced Hook for debounced history
    state functionality. In [*Chapter 10*](Chapter_10.xhtml#_idTextAnchor250), *Using
    Community Hooks*, we learned about the History State Hook, which allowed us to
    implement undo/redo functionality in the `CreatePost` component. We then used
    a Debounce Hook to avoid storing every single change in the history, allowing
    us to undo/redo larger parts of the text instead of a single character at a time.
    Now, we are going to extract this combined functionality into a custom Debounced
    History State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: While this functionality is currently only used in one component, it is a generic
    feature that could be used in other components. Also, abstracting this functionality
    into a separate Hook allows us to keep the `CreatePost` component code clean and
    concise.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Debounced History State Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now get started extracting the code from the `CreatePost` component into
    a Debounced History State Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter12_3` folder to a new `Chapter12_4` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter12_4` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/hooks/debouncedHistoryState.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function that accepts an initial state and a timeout value for the
    debounce:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define the History State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a State Hook for the actively edited content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a Debounced Callback Hook that will set the value of the History
    State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Effect Hook that we had before in the `CreatePost` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember, this Effect Hook is used to sync the History State back into the actively
    edited `content` state, meaning that it will change the content of the textbox
    whenever we trigger the `undo`, `redo`, or `clear` functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, define a handler function which sets the `content` state and starts the
    debounced callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, return all the values and functions we need from the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we have a drop-in replacement for the Debounced History State functionality,
    which we now use in the `CreatePost` component, so let’s do it!
  prefs: []
  type: TYPE_NORMAL
- en: Using the Debounced History State Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to refactor the `CreatePost` component to use the Debounced
    History State Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/CreatePost.jsx` and *remove* the following highlighted
    imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an import of the `useDebouncedHistoryState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* all of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with the Debounced History State Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '*Remove* the following handler function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the dev server and ensure that creating a post and undo/redo still work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s all there is to it – now the `CreatePost` component code is much less
    cluttered!
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter12/Chapter12_4`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the Debounced History State Hook, let’s move on to learn about
    testing custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Testing custom Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now our blog application fully makes use of Hooks! We even defined custom Hooks
    for various functions to make our code more reusable, concise, and easy to read.
  prefs: []
  type: TYPE_NORMAL
- en: When creating custom Hooks, it also makes sense to write unit tests for them
    to ensure they work properly, even when we change them later on or add more options.
    We are going to use **Vitest** to write our unit tests. Vitest and Vite go very
    well together, because Vitest can read and use Vite configurations. Vitest also
    offers a Jest-compatible API. **Jest** is another very popular testing framework.
    If you are already familiar with Jest, learning Vitest will be a breeze. Additionally,
    Vitest is very fast and well equipped for modern web apps.
  prefs: []
  type: TYPE_NORMAL
- en: However, as a result of the rules of Hooks, we cannot call Hooks from the test
    functions because they can only be called inside the body of a functional React
    component. As we do not want to create a component specifically for each test,
    we are going to use the React Testing Library to test Hooks directly. This library
    actually creates a test component and provides various utility functions to interact
    with Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the past, there were two libraries: The React Testing Library and the React
    Hooks Testing Library. However, nowadays the React Testing Library already includes
    support for rendering and testing Hooks out of the box, so it is the perfect fit
    for testing React components and Hooks! The React Hooks Testing Library is deprecated
    now, so we will only be using the React Testing Library.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We should particularly write tests for Hooks in the following circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: When writing libraries that define and export Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you have Hooks that are used throughout multiple components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a Hook is complex and will thus be difficult to change/refactor later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you have Hooks that are specific to one component, it is often better
    to just test the component directly. However, testing React components is out
    of scope of this book. More information about testing components can be found
    on the React Testing Library website: [https://testing-library.com/docs/react-testing-library/intro/](https://testing-library.com/docs/react-testing-library/intro/)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get started setting up Vitest and the React Testing Library!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Vitest and the React Testing Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can start writing tests for our Hooks, we first need to set up Vitest
    and the React Testing Library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter12_4` folder to a new `Chapter12_5` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter12_5` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Vitest, the React Testing Library, and jsdom, by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: jsdom provides an environment to access the DOM in Node.js. Since our tests
    are not actually running in a browser, it is necessary to provide such an environment
    to be able to render React components and test Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `package.json` and add a script for running Vitest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, edit `vite.config.js` and add a config for Vitest at the end of the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have successfully set up Vitest, we can start testing Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Testing a simple Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we are going to test a very simple Hook that does not make use
    of contexts or asynchronous code such as timeouts. To do this, we are going to
    create a new Hook called `useCounter`. Then, we are going to test various parts
    of the Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Counter Hook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Counter Hook is going to provide a current `count` and functions to `increment`
    and `reset` the counter. Follow these steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/counter.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `useState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a Counter Hook, which takes an `initialCount` as argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a State Hook for the count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define a function to increment the count by 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a function to reset the counter to the initial count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the current count and the two functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have defined a simple Hook, we can start writing our first tests.
  prefs: []
  type: TYPE_NORMAL
- en: Creating unit tests for the Counter Hook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s now write unit tests for the Counter Hook by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/counter.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `describe`, `test` and `expect` functions from Vitest,
    as well as the `renderHook` and `act` functions from the React Testing Library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, import the `useCounter` function, which we are going to write tests for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can start defining tests. In Vitest, we can use the `describe` function
    to define a group of tests. The first argument is a name for the group, the second
    argument is an options object to configure the test (we leave this as an empty
    object), and the third argument is a function in which we can define our various
    tests. Here, we create a group of tests for the Counter Hook, so let’s call it
    that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the group, we can now define our tests. To define a test, we use the
    `test` function. The first argument is the name of the test, the second argument
    the test options, and the third argument is a function to be executed as the test.
    In our first test, we check if the Hook returns 0 by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this test, we use the `renderHook` function to simulate the Hook being rendered
    in a React component. It returns an object for us, which includes a `result`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now access the `count` by getting it from the `result.current` object,
    and check if it is 0:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the `expect` function we can do tests on values. It works as follows:
    `expect(actualValue).toBe(expectedValue)`. If the `actualValue` matches the `expectedValue`,
    the test will succeed. Otherwise, it will fail.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many kinds of matchers to be used with `expect` – `toBe` is just
    one of them! For a full list of matchers, please check out the Vitest API documentation:
    [https://vitest.dev/api/expect.html](https://vitest.dev/api/expect.html)'
  prefs: []
  type: TYPE_NORMAL
- en: If you have worked with Jest before, you will notice that the Vitest API is
    fully compatible with it, so all these functions will be familiar to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s define a test that checks if the `initialCount` argument works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we define a test that checks if the increment function increments the
    counter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use the `act` function to trigger an action from the Hook. This function
    tells the React Testing Library that something is being triggered inside the Hook,
    causing the `result.current` value from the `renderHook` function to be updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can check if the new count is 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let’s do a test that simulates the `initialCount` passed to the Counter
    Hook being changed by a prop change of a React component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To simulate a React prop, we simply define a variable, then we define the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now change the prop by changing the variable and manually triggering
    a re-render of the React component, by using the `rerender` function returned
    from `renderHook`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we have learned before, the React Testing Library creates a dummy component,
    which is used for testing the Hook. We can force this dummy component to rerender
    to simulate what would happen when props change in a real component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we call the `reset` function and check if the count was reset to the new
    initial count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the tests, by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember, for special scripts, such as `start` and `test`, we do not need to
    execute `npm run test`; we can simply execute `npm test`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows the result after executing `npm test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Running Vitest in watch mode](img/B31327_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Running Vitest in watch mode
  prefs: []
  type: TYPE_NORMAL
- en: You will see that Vitest automatically runs the watch mode. This means that
    it will wait for file changes and automatically re-run tests for you. You can
    just keep running it in that mode throughout the rest of this chapter to see your
    tests executing as you write them.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Theme Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the React Hooks Testing Library, we can also test more complex Hooks,
    such as those Hooks that make use of context. To test Hooks that make use of context,
    we first have to create a context wrapper, and then we can test the Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started writing tests for the Theme Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/theme.test.jsx` file. Please note that the file extension
    needs to be `.jsx`, not just `.js`, as we will be using JSX in that file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the relevant functions from Vitest, the `renderHook` function,
    the `ThemeContext`, and the `useTheme` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, define a `ThemeContextWrapper` component, which will set up the context
    provider for testing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The wrapper accepts `children` as a prop, which is a special property of React
    components. It will contain all other components defined inside the wrapper, such
    as `<ThemeContextWrapper>{children}</ThemeContextWrapper>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `wrapper` component, define the context provider and a value for
    `primaryColor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can begin writing tests for the Theme Hook. We start by creating a
    test group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the group, we define a test which checks for the primary color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then render the Hook, passing the wrapper component to the `renderHook` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, check if the primary color is the same as we defined in the wrapper component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you kept Vitest running in watch mode, you should see it successfully executing
    the test we just wrote! If not, start Vitest again by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following image shows how Vitest automatically executes our newly defined
    test in watch mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Vitest automatically executing our newly defined test](img/B31327_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Vitest automatically executing our newly defined test
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully written a test for the Theme Hook, let’s move
    on to the slightly more complex User Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the User Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The User Hook internally uses a Local Storage Hook now. Thankfully, the `jsdom`
    environment handles mocking the LocalStorage API for us already, so we do not
    need to do any setup for that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started writing tests for the User Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/user.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the relevant functions from Vitest, as well as the `renderHook`,
    `act` and `useUser` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a test group for the User Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For our first test, we ensure that the user is not logged in by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we test the registration functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we test the login functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the final test, we make two actions, calling login first, then logout,
    and then we check if the user is logged out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see that Vitest executed all our tests and they are all passing! Now,
    let’s move on to the Debounced History State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Testing asynchronous Hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes we need to test Hooks that perform asynchronous actions. This means
    that we need to wait a certain amount of time until we check the result.
  prefs: []
  type: TYPE_NORMAL
- en: To write tests for these kind of Hooks, we can use the `waitFor` function from
    the React Testing Library. This function can be used to wait for the condition
    to be met, instead of trying to match it immediately. It can thus be used to test
    asynchronous operations in React components and Hooks. If the condition fails
    to match even after a certain amount of time (which can be specified with an optional
    timeout parameter), the test will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, we created the Debounced History State Hook, which
    only stores changes in the history after a certain amount of time, thus making
    it an asynchronous Hook. We are now going to use the `waitFor` function to test
    the debouncing in the Debounced History State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/debouncedHistoryState.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the relevant functions from Vitest, as well as the `renderHook`,
    `act` and `waitFor` functions from the React Testing Library, as well as the `useDebouncedHistoryState`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a test group and a first test, which just checks the initial value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we define a test that checks if the content is updated immediately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the final test, we check if the Hook updates the history only after a debounce:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this test, we first define the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We kept the debounce timeout as 10ms to avoid unnecessarily slowing down our
    test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we trigger a content update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before debouncing, the `canUndo` value should be `false`, as there is nothing
    stored in the history state yet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we use `waitFor` to wait for the `canUndo` value to be true, which should
    happen after the debounce timeout (10ms):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Vitest will automatically run our new tests and we can see that they all succeed!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we have a very simple timeout. However, there may be more advanced
    cases where we have to wait for a longer time. For more control over dates and
    timers when testing Hooks, you can mock the system time using fake timers in Vitest.
    Check out the mocking guide on the official Vitest docs for more information:
    [https://vitest.dev/guide/mocking.html#dates](https://vitest.dev/guide/mocking.html#dates)'
  prefs: []
  type: TYPE_NORMAL
- en: We are not testing the `undo`/`redo`/`clear` functionality, because those come
    from the History State Hook from the `useHooks` library, so it is out of scope
    for our custom Hook. In most cases, it is enough to only test the logic that we
    added in our own implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Since the API Hooks are mostly wrappers for TanStack Query Hooks and do not
    add their own logic, it also does not make much sense to write tests for them.
  prefs: []
  type: TYPE_NORMAL
- en: Running all tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To verify that all our tests are succeeding now, let’s quit the Vitest watch
    mode by pressing the *q* key. Then, run Vitest again by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, Vitest executed all our tests again, and they are all passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – All our tests are passing!](img/B31327_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – All our tests are passing!
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter12/Chapter12_5`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how to extract custom Hooks from existing
    code in our blog app. We defined the Theme Hook to easily access the context,
    then we defined the User Hook, which manages user state and provides functions
    to register/login/logout. Then, we created API Hooks and a more advanced Hook
    for the debounced history state functionality. Finally, we learned about writing
    tests for our custom Hooks using Vitest and the React Testing Library.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing when and how to extract custom Hooks is a very important skill in React
    development. In a larger project, you are probably going to define many custom
    Hooks, specifically tailored to your project’s needs. Custom Hooks can also make
    it easier to maintain the application, as we only need to adjust functionality
    in one place. Testing custom Hooks is very important, because if we refactor our
    custom Hooks later on, we want to make sure that they still work properly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to migrate from class components
    to a Hook-based system. We first create a small project using class components
    and then we replace them with Hooks, taking a closer look at the differences between
    the two solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How can we extract a custom Hook from existing code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of creating custom Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we extract functionality into a custom Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we use custom Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which library can we use to test custom Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are actions performed by Hooks tested?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we test Hooks that make use of React Context?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we test Hooks that perform asynchronous operations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Guide on “Reusing Logic with Custom Hooks” in the official React docs: [https://react.dev/learn/reusing-logic-with-custom-hooks](https://react.dev/learn/reusing-logic-with-custom-hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vitest documentation: [https://vitest.dev/](https://vitest.dev/ )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'React Testing Library documentation: [https://testing-library.com/docs/react-testing-library/intro/](https://testing-library.com/docs/react-testing-library/intro/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_12.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
