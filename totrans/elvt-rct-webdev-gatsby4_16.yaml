- en: '*Chapter 13*: Internationalization and Localization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is all about opening your site up to an international audience.
    We will talk about patterns you can use to make translating your site as it scales
    simple! Creating your site in English makes it accessible to the 1.3 billion people
    in the world who speak the language. However, if we provide users with localization
    options, we can translate the site into any language, therefore making our site
    accessible to all.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding localization and internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing routes for internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page translations for programmatic pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing locale translations for single-instance pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To navigate this chapter, you will need to have completed [*Chapter 12*](B15983_12_ePub_RK.xhtml#_idTextAnchor159)*,
    Using Real-Time Data*.
  prefs: []
  type: TYPE_NORMAL
- en: The code present in this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter13](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-3/tree/main/Chapter13).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding localization and internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While the end goal of this chapter is to set up localization, we can make things
    easier by implementing internationalization first. The terms localization and
    internationalization are often confused, so let''s define these terms properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internationalization**: The process of ensuring that your website is created
    in such a way that it can support different languages, locales, and cultures.
    Internationalization is all about being proactive in your site''s design and development
    to ensure that you don''t have to completely redesign it later when you introduce
    it to a new market. This could include allowing text to be displayed from right
    to left as well as left to right, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Localization**: Normally conducted after internationalization, localization
    is the process of adapting your site to meet a new locale requirement. This could
    be adding a language or cultural requirement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By spending the time upfront to get the internationalization right within the
    project, you can save yourself considerable time when you need to add a new locale
    later down the line. Let's now look at how we can modify our project with an internationalization
    strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing routes for internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common approach for large sites to accommodate localization is to prefix all
    paths with a language code. Let's take our about page, for example – the English
    (and default) language version of the page is located at `/about` but the French
    version of the page might be located at `/fr/about` and the German version of
    it at `/de/about`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement this pattern now for our default language of English and add
    French as a secondary language. We can make this easy with the help of `gatsby-theme-i18n`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the new dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we are installing the `gatsby-theme-i18n` package and its dependencies.
    This package automatically creates the route prefixes for us. It also adds `language`
    and `alternate` tags to the head of document. This helps Google identify that
    two pages contain the same content in different languages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This theme uses `react-helmet`, which may clash with `react-helmet-async`, a
    package we have used in other chapters. Be sure to check that the head of your
    document is set up as intended when using both, and if you experience issues stick
    to a single package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the `gatsby-theme-i18n` plugin in your `gatsby-config.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As part of this configuration, we add a couple of options. `defaultLang` refers
    to the default language we will use on the site – in this case, this is English,
    so we use the language code `en`. `configPath` is the configuration path to where
    we will set up `i18n`. This is most commonly in its own folder, which we will
    create in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a folder in your root directory called `i18n`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file inside the `i18n` folder called `config.json`, and add the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here it is important that we define a configuration for every locale we intend
    to support. Each configuration object must contain the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a. `code`: This refers to the language''s code you will use to access this
    locale. Though you can set this to whatever you want for each language, it is
    probably best to keep them easily identifiable, for example, `fr` for French and
    `en` for English.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. `hrefLang`: This is the value that is used for the `hrefLang` tag attribute
    in the head of the HTML. It is used to tell Google which language you are using
    on a specific page.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c. `name`: The name of the language in the native language of the developer.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'd. `localName`: This is how the name of the language is spelled by its native
    speakers.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e. `langDir`: This is the direction that text is read in the given locale.
    This could be `ltr` for left-to-right text or `rtl` for right-to-left text.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f. `dateFormat`: This is the date format used within the locale.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Quick Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When adding locales later on, this is the only file that needs to be updated
    to create the required routes for the locale.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally replace instances of the Gatsby `Link` component on your site with
    the `LocalizedLink` component from `gatbsy-theme-i18n`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s verify the previous steps. First, start your Gatsby development server''s
    GraphQL layer (normally located at `http://localhost:8000/_graphql`) and run the
    following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the returned data object, you should be able to see nodes with paths for
    all locales:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, navigate to your Gatsby development site. Your footer should now contain
    links to the two languages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Site footer with language toggle'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.01_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – Site footer with language toggle
  prefs: []
  type: TYPE_NORMAL
- en: Clicking `/fr/` and clicking `/`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have set up our pages for different locales, let's ensure that we
    have language-appropriate content to display on these pages. Let's start by looking
    at pages generated programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Page translations for programmatic pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to offer pages such as articles and blog posts translated, we will
    need to provide the content in both languages. Let's look at how we structure
    our project so that posts in different languages are available to the site visitor.
  prefs: []
  type: TYPE_NORMAL
- en: '`gatsby-theme-i18n` comes with built-in support for handling `gatsby-plugin-mdx`
    plugin is set up to treat `.md` files as `.mdx` by adding the extension to the
    plugin''s configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I will be using the posts that are local files for this demo, but the same
    steps will work for CMS content once it is ingested to Gatsby''s data layer:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to restructure our blog posts folder in a way that makes them
    easy to identify when we have duplicates in different languages. Instead of filenames,
    use folder names to group them. Inside `/blog-posts`, create a folder for each
    post. A good name format for these folders would be `YYYY-mm-DD-Post-Title`. This
    makes the folder sortable by date but also tells you what the post is about without
    you having to open the folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside this folder, place the corresponding default language blog post and
    rename it to `index.mdx`. Be sure that the MDX file contains a `slug` in the frontmatter.
    An example might look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat *Step 2* for every blog post you wish to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a second file in this folder called `index.fr.mdx`. This file''s name
    has the locale code added between the filename and extension. In this example,
    we are using France (French), so the locale code is `fr`. Replicate the `index.mdx`
    file''s frontmatter in French by translating all the text values. The `slug`,
    `type`, `hero`, `date`, and `tags` must remain the same for both files. The resultant
    file for the example started in *Step 2* looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat *Step 4* for any additional languages and locales you wish to support.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your `gatsby-node.js` files'' blog post page creation configuration
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to tell Gatsby to use the correct MDX file on the correct locale
    path. Without this step, your site will find the MDX file with the first matching
    `slug` when creating blog posts. This may not match the locale as we have multiple
    files with the same `slug` and could lead to us being lost in translation. First,
    update the blog page template (located at `src/templates/blog-page.js`) query
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform the exact same step in the `src/templates/blog-preview.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s verify the previous steps. First, start your Gatsby development server''s
    GraphQL layer (normally located at `http://localhost:8000/_graphql`) and run the
    following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we are querying for all MDX of type `Blog` and retrieving the locale,
    whether that locale is the default, and the `slug`. The result should look like
    this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A result should be present for each locale for any given `slug`. Assuming this
    is the case, you can navigate to `/blog` on your Gatsby development site. You
    should see your blog content in your default language:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Blog page in English'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.02_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Blog page in English
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigating to `/fr/blog`, you should see your content in French:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Blog page in French'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.03_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – Blog page in French
  prefs: []
  type: TYPE_NORMAL
- en: Quick Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you are clicking on a blog post and always receiving the default locale version,
    the most likely cause is that you are using `Link` instead of `LocalizedLink`
    when navigating to the page. Review *Step 5* of the *Implementing routes for internationalization*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We can provide translations for our programmatically generated pages with ease
    using this strategy. Let's now learn how we can set up translations for single-instance
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Providing locale translations for single-instance pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For static pages, we will need a different approach to providing translations.
    For any strings that require translation we can no longer have the values in line
    with our JSX. A very common approach is to use `react-i18next`, which has a great
    hook called `useTranslation` that allows you to switch strings out depending on
    the locale. Let''s use this now to translate content on our index page for site
    visitors:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal at your root directory and add these new dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are installing the `gatsby-theme-i18n-react-i18next` package and its
    dependencies. This package is a Gatsby theme plugin that provides locale support
    to our application by wrapping our site in `react-i18next`'s context provider.
    Underneath the hood, this package wraps the site by using `wrapPageElement` in
    the `gatsby-browser.js` in the same way we did in [*Chapter 12*](B15983_12_ePub_RK.xhtml#_idTextAnchor159)*,
    Using Real-Time Data*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the `gatsby-theme-i18n-react-i18next` plugin in your `gatsby-config.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As part of this configuration, we add a couple of options. `locales` refer to
    location where we will store our translations. `i18nextOptions` accepts any configuration
    options that `i18next` accepts (the full list is available at [https://www.i18next.com/overview/configuration-options](https://www.i18next.com/overview/configuration-options)).
    Here, we are passing in the `ns` option, which is an array of namespaces to use.
    For this example, we will just be creating a single namespace called `globals`,
    but you may want to add more as your site grows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `gatsby-theme-i18n-react-18next` is an add-on package that will only work
    in tandem with `gatsby-theme-i18n`. Ensure that this package is installed by following
    the steps in the *Implementing routes for internationalization* section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new folder in `i18n` called `locales`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within `locales`, create a new folder for each locale your site supports, for
    example, `en` and `fr`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For each namespace, create a JSON file in the `locale` folder. In our case,
    we need to create a single file named `globals.json` for our `globals` namespace
    in each folder. This file should contain any translations you require, retrievable
    with a key that is consistent across all files. Your English file (which should
    be located at `i18n/locales/en/globals.json`) should contain the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your French file (which should be located at `i18n/locales/fr/globals.json`)
    should contain the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use the translation within a Gatsby page component, we can use the `useTranslation`
    hook from `react-i18next`. Let''s look at the about me link on the index page
    (located at `src/pages/index.js`) as an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also use the exact same process in any other components, such as our
    header, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can even use this inside React components that are used within MDX content
    if you need to!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verify your implementation by navigating to the index page on your Gatsby development
    site. Toggle the locale by modifying the path or using the `Footer` component,
    and you should see any copy that is using `useTranslation` update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We've only scratched the surface of the features that `i18next` offers. Visit
    their documentation at [https://www.i18next.com/](https://www.i18next.com/) to
    learn more about the powerful capabilities they offer. With this strategy and
    the preceding sections, you should now feel confident translating any aspect of
    your site. Let's now summarize what we've learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we learned about making our site accessible to a global
    audience. We first identified the differences between internationalization and
    localization. We then used the `gatsby-theme-i18n` plugin to create routes for
    our locales. We created programmatic blog posts in different languages and ensured
    the correct translation was visible when visiting a locale. Finally, we also translated
    our static pages using the `gatsby-theme-i18n-react-i18next` plugin. Between these
    two plugins, you now have the power to translate any of your site's content.
  prefs: []
  type: TYPE_NORMAL
- en: Hi!
  prefs: []
  type: TYPE_NORMAL
- en: I am Samuel Larsen-Disney, author of Elevating React Web Development with Gatsby.
    I really hope you enjoyed reading this book and found it useful for increasing
    your productivity and efficiency in Gatsby.
  prefs: []
  type: TYPE_NORMAL
- en: It would really help me (and other potential readers!) if you could leave a
    review on Amazon sharing your thoughts on Elevating React Web Development with
    Gatsby here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the link below or scan the QR code to leave your review:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/r/1800209096](https://packt.link/r/1800209096 )'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_code_B15983.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your review will help me to understand what's worked well in this book, and
    what could be improved upon for future editions, so it really is appreciated.
  prefs: []
  type: TYPE_NORMAL
- en: Best Wishes,
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Author_photo_B15983.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Samuel Larsen-Disney
  prefs: []
  type: TYPE_NORMAL
