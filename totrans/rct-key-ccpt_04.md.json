["```js\nfunction EmailInput() {\n  return (\n    <div>\n      <input placeholder=\"Your email\" type=\"email\" />\n      <p>The entered email address is invalid.</p>\n    </div>\n  );\n}; \n```", "```js\nfunction EmailInput() {\n  return (\n    <div>\n      <input placeholder=\"Your email\" type=\"email\" />\n      <p></p>\n    </div>\n  );\n};\nconst input = document.querySelector('input');\nconst errorParagraph = document.querySelector('p');\nfunction evaluateEmail(event) {\n  const enteredEmail = event.target.value;\n  if (enteredEmail.trim() === '' || !enteredEmail.includes('@')) {\n    errorParagraph.textContent = ' The entered email address is invalid.';\n  } else {\n    errorParagraph.textContent = '';\n  }\n};\ninput.addEventListener('blur', evaluateEmail); \n```", "```js\nfunction EmailInput() {\n  let errorMessage = '';\n  function evaluateEmail(event) {\n    const enteredEmail = event.target.value;\n    if (enteredEmail.trim() === '' || !enteredEmail.includes('@')) {\n      errorMessage = ' The entered email address is invalid.';\n    } else {\n      errorMessage = '';\n    }\n  };\n  const input = document.querySelector('input');\n  input.addEventListener('blur', evaluateEmail);\n  return (\n    <div>\n      <input placeholder=\"Your email\" type=\"email\" />\n      <p>{errorMessage}</p>\n    </div>\n  );\n}; \n```", "```js\nfunction EmailInput() {\n  let errorMessage = '';\n  function evaluateEmail(event) {\n    const enteredEmail = event.target.value;\n    if (enteredEmail.trim() === '' || !enteredEmail.includes('@')) {\n      errorMessage = 'The entered email address is invalid.';\n    } else {\n      errorMessage = '';\n    }\n  };\n  return (\n    <div>\n      <input \n        placeholder=\"Your email\" \n        type=\"email\" \n        **onBlur****=****{evaluateEmail}** />\n      <p>{errorMessage}</p>\n    </div>\n  );\n}; \n```", "```js\nfunction EmailInput() {\n  let errorMessage = '';\n  function evaluateEmail(event) {\n    console.log('Hello');\n    const enteredEmail = event.target.value;\n    if (enteredEmail.trim() === '' || !enteredEmail.includes('@')) {\n      errorMessage = 'The entered email address is invalid.';\n    } else {\n      errorMessage = '';\n    }\n  };\n  return (\n    <div>\n      <input \n        placeholder=\"Your email\" \n        type=\"email\" \n        onBlur={evaluateEmail} />\n      <p>{errorMessage}</p>\n    </div>\n  );\n}; \n```", "```js\n**import** **{ useState }** **from****'react'****;**\nfunction EmailInput() {\n  **const** **[errorMessage, setErrorMessage] =** **useState****(****''****);**\n  function evaluateEmail(event) {\n    const enteredEmail = event.target.value;\n    if (enteredEmail.trim() === '' || !enteredEmail.includes('@')) {\n      **setErrorMessage****(****'The entered email address is invalid.'****);**\n    } else {\n      **setErrorMessage****(****''****);**\n    }\n  };\n  return (\n    <div>\n      <input \n        placeholder=\"Your email\" \n        type=\"email\" \n        onBlur={evaluateEmail} />\n      <p>{errorMessage}</p>\n    </div>\n  );\n}; \n```", "```js\nconst [errorMessage, setErrorMessage] = useState(''); \n```", "```js\nconst stateData = useState('');\nconst errorMessage = stateData[0];\nconst setErrorMessage = stateData[1]; \n```", "```js\nconst [enteredEmail, setEnteredEmail] = useState(''); \n```", "```js\nfunction LoginForm() {\n  const [enteredEmail, setEnteredEmail] = useState(''); \n  const [enteredPassword, setEnteredPassword] = useState('');\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  };\n  function handleUpdatePassword(event) {\n    setEnteredPassword(event.target.value);\n  };\n  // Below, props are split across multiple lines for better readability\n  // This is allowed when using JSX, just as it is allowed in standard HTML\n  return (\n    <form>\n      <input\n        type=\"email\"\n        placeholder=\"Your email\"\n        onBlur={handleUpdateEmail} />\n      <input\n        type=\"password\"\n        placeholder=\"Your password\"\n        onBlur={handleUpdatePassword} />\n    </form>\n  );\n}; \n```", "```js\nfunction LoginForm() {\n  const [userData, setUserData] = useState({\n    email: '',\n    password: ''\n  }); \n  function handleUpdateEmail(event) {\n    setUserData({\n      email: event.target.value,\n      password: userData.password\n    });\n  };\n  function handleUpdatePassword(event) {\n    setUserData({\n      email: userData.email,\n      password: event.target.value\n    });\n  };\n  // ... code omitted, because the returned JSX code is the same as before\n}; \n```", "```js\nfunction Counter() {\n  const [counter, setCounter] = useState(0);\n  function handleIncrement() {\n    setCounter(counter + 1);\n  };\n  return (\n    <>\n      <p>Counter Value: {counter}</p>\n      <button onClick={handleIncrement}>Increment</button>\n    </>\n  );\n}; \n```", "```js\nfunction Counter() {\n  const [counter, setCounter] = useState(0);\n  function handleIncrement() {\n    setCounter(function(prevCounter) { return prevCounter + 1; });\n    // alternatively, JS arrow functions could be used:\n    // setCounter(prevCounter => prevCounter + 1);\n  };\n  return (\n    <>\n      <p>Counter Value: {counter}</p>\n      <button onClick={handleIncrement}>Increment</button>\n    </>\n  );\n}; \n```", "```js\nfunction LoginForm() {\n  const [userData, setUserData] = useState({\n    email: '',\n    password: ''\n  }); \n  function handleUpdateEmail(event) {\n    setUserData({\n      email: event.target.value,\n      password: userData.password\n    });\n  };\n  function handleUpdatePassword(event) {\n    setUserData({\n      email: userData.email,\n      password: event.target.value\n    });\n  };\n  // ... code omitted, because the returned JSX code is the same as before\n}; \n```", "```js\nfunction LoginForm() {\n  const [userData, setUserData] = useState({\n    email: '',\n    password: ''\n  }); \n  function handleUpdateEmail(event) {\n    setUserData(prevData => ({\n      email: event.target.value,\n      password: prevData.password\n    }));\n  };\n  function handleUpdatePassword(event) {\n    setUserData(prevData => ({\n      email: prevData.email,\n      password: event.target.value\n    }));\n  };\n  // ... code omitted, because the returned JSX code is the same as before\n  // userData is not actively used here, hence you could get a warning\n  // regarding that. Simply ignore it or start using userData\n  // (e.g., via console.log(userData))\n}; \n```", "```js\nfunction NewsletterField() {\n  const [email, setEmail] = useState('');\n  function handleUpdateEmail(event) {\n    setEmail(event.target.value);\n  };\n  return (\n    <>\n      <input\n        type=\"email\"\n        placeholder=\"Your email address\"\n        value={email}\n        onChange={handleUpdateEmail} />\n    </>    \n  );\n}; \n```", "```js\nfunction NewsletterField() {\n  const [email, setEmail] = useState('');\n  function handleUpdateEmail(event) {\n    setEmail(event.target.value);\n  };\n  function handleClearInput() {\n    setEmail(''); // reset email input (back to an empty string)\n  };\n  return (\n    <>\n      <input\n        type=\"email\"\n        placeholder=\"Your email address\"\n        value={email}\n        onChange={handleUpdateEmail} />\n      <button onClick={handleClearInput}>Reset</button>\n    </>\n  );\n}; \n```", "```js\nfunction Repeater() {\n  const [userInput, setUserInput] = useState('');\n  function handleChange(event) {\n    setUserInput(event.target.value);\n  };\n  return (\n    <>\n      <input type=\"text\" onChange={handleChange} />\n      <p>You entered: {userInput}</p>\n    </>\n  );\n}; \n```", "```js\nfunction CharCounter() {\n  const [userInput, setUserInput] = useState('');\n  function handleChange(event) {\n    setUserInput(event.target.value);\n  };\n  const numChars = userInput.length;\n  return (\n    <>\n      <input type=\"text\" onChange={handleChange} />\n      <p>Characters entered: {numChars}</p>\n    </>\n  );\n}; \n```", "```js\nfunction NewsletterSignup() {\n  const [email, setEmail] = useState('');\n  const [agreed, setAgreed] = useState(false);\n  function handleUpdateEmail(event) {\n    // could add email validation here\n    setEmail(event.target.value);\n  };\n  function handleUpdateAgreement(event) {\n    setAgreed(event.target.checked); // checked is a default JS boolean property\n  };\n  function handleSignup(event) {\n    event.preventDefault(); // prevent browser default of sending a Http request\n    const userData = {userEmail: email, userAgrees: agreed};\n    // doWhateverYouWant(userData);\n  };\n  return (\n    <form onSubmit={handleSignup}>\n      <div>\n        <label htmlFor=\"email\">Your email</label>\n        <input type=\"email\" id=\"email\" onChange={handleUpdateEmail}/>\n      </div>\n      <div>\n        <input type=\"checkbox\" id=\"agree\" onChange={handleUpdateAgreement}/>\n        <label htmlFor=\"agree\">Agree to terms and conditions</label>\n      </div>\n    </form>\n  );\n}; \n```", "```js\nfunction SearchBar() {\n  const [searchTerm, setSearchTerm] = useState('');\n  function handleUpdateSearchTerm(event) {\n    setSearchTerm(event.target.value);\n  };\n  return <input type=\"search\" onChange={handleUpdateSearchTerm} />;\n};\nfunction Overview() {\n  return <p>Currently searching for {searchTerm}</p>;\n};\nfunction App() {\n  return (\n    <>\n      <SearchBar />\n      <Overview />\n    </>\n  );\n}; \n```", "```js\nfunction SearchBar({onUpdateSearch}) {\n  return <input type=\"search\" onChange={onUpdateSearch} />;\n};\nfunction Overview({currentTerm}) {\n  return <p>Currently searching for {currentTerm}</p>;\n};\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('');\n  function handleUpdateSearchTerm(event) {\n    setSearchTerm(event.target.value);\n  };\n  return (\n    <>\n      <SearchBar onUpdateSearch={handleUpdateSearchTerm} />\n      <Overview currentTerm={searchTerm} />\n    </>\n  );\n}; \n```"]