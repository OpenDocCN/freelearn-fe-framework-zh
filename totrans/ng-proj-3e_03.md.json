["```js\nng new issue-tracker --defaults \n```", "```js\n    npm install @cds/core @clr/angular @clr/ui --save \n    ```", "```js\n    \"styles\": [\n      **\"node_modules/@clr/ui/clr-ui.min.css\"****,**\n      \"src/styles.css\"\n    ] \n    ```", "```js\n    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import { AppComponent } from './app.component';\n    **import** **{** **ClarityModule** **}** **from****'@clr/angular'****;**\n    **import** **{** **BrowserAnimationsModule** **}** **from**\n    **'@angular/platform-browser/animations'****;**\n    @NgModule({\n      declarations: [\n        AppComponent\n      ],\n      imports: [\n        BrowserModule,\n    **ClarityModule****,**\n    **BrowserAnimationsModule**\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { } \n    ```", "```js\n    ng generate service issues \n    ```", "```js\n    ng generate interface issue \n    ```", "```js\n    export interface Issue {\n      **issueNo****:** **number****;**\n    **title****:** **string****;**\n    **description****:** **string****;**\n    **priority****:** **'low'** **|** **'high'****;**\n    **type****:** **'Feature'** **|** **'Bug'** **|** **'Documentation'****;**\n     **completed?:** **Date****;**\n    } \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    **import** **{** **Issue** **}** **from****'./issue'****;**\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class IssuesService {\n      **private****issues****:** **Issue****[] = [];**\n\n      constructor() { }\n\n      **getPendingIssues****():** **Issue****[] {**\n    **return****this****.****issues****.****filter****(****issue** **=>** **!issue.****completed****);**\n     **}**\n    } \n    ```", "```js\n    import { issues } from '../assets/mock-issues'; \n    ```", "```js\n    ng generate component issue-list \n    ```", "```js\n    <div class=\"main-container\">\n      <div class=\"content-container\">\n        <div class=\"content-area\">\n          <app-issue-list></app-issue-list>\n        </div>\n      </div>\n    </div> \n    ```", "```js\n    import { Component } from '@angular/core';\n    **import** **{** **IssuesService** **}** **from****'../issues.service'****;**\n    @Component({\n      selector: 'app-issue-list',\n      templateUrl: './issue-list.component.html',\n      styleUrls: ['./issue-list.component.css']\n    })\n    export class IssueListComponent {\n    **constructor****(****private** **issueService: IssuesService****) { }**\n    } \n    ```", "```js\n    import { Component } from '@angular/core';\n    **import** **{** **Issue** **}** **from****'../issue'****;**\n    import { IssuesService } from '../issues.service';\n    @Component({\n      selector: 'app-issue-list',\n      templateUrl: './issue-list.component.html',\n      styleUrls: ['./issue-list.component.css']\n    })\n    export class IssueListComponent {\n      **issues****:** **Issue****[] = [];**\n      constructor(private issueService: IssuesService) { }\n    **private****getIssues****() {**\n    **this****.****issues** **=** **this****.****issueService****.****getPendingIssues****();**\n     **}**\n    } \n    ```", "```js\n    import { Component, **OnInit** } from '@angular/core';\n    import { Issue } from '../issue';\n    import { IssuesService } from '../issues.service';\n    @Component({\n      selector: 'app-issue-list',\n      templateUrl: './issue-list.component.html',\n      styleUrls: ['./issue-list.component.css']\n    })\n    export class IssueListComponent **implements****OnInit** {\n      issues: Issue[] = [];\n      constructor(private issueService: IssuesService) { }\n      **ngOnInit****():** **void** **{**\n    **this****.****getIssues****();** \n     **}**\n      private getIssues() {\n        this.issues = this.issueService.getPendingIssues();\n      }\n    } \n    ```", "```js\n<clr-datagrid>\n    <clr-dg-column [clrDgField]=\"'issueNo'\" [clrDgColType]=\"'number'\">Issue No</clr-dg-column>\n    <clr-dg-column [clrDgField]=\"'type'\">Type</clr-dg-column>\n    <clr-dg-column [clrDgField]=\"'title'\">Title</clr-dg-column>\n    <clr-dg-column [clrDgField]=\"'description'\">Description</clr-dg-column>\n    <clr-dg-column [clrDgField]=\"'priority'\">Priority</clr-dg-column>\n    <clr-dg-row *clrDgItems=\"let issue of issues\">\n      <clr-dg-cell>{{issue.issueNo}}</clr-dg-cell>\n      <clr-dg-cell>{{issue.type}}</clr-dg-cell>\n      <clr-dg-cell>{{issue.title}}</clr-dg-cell>\n      <clr-dg-cell>{{issue.description}}</clr-dg-cell>\n      <clr-dg-cell>\n       <span class=\"label\" [class.label-danger]=\"issue.priority === 'high'\">{{issue.priority}}</span>\n      </clr-dg-cell>\n    </clr-dg-row>\n    <clr-dg-footer>{{issues.length}} issues</clr-dg-footer>\n</clr-datagrid> \n```", "```js\n    import { ReactiveFormsModule } from '@angular/forms'; \n    ```", "```js\n    @NgModule({\n      declarations: [\n        AppComponent,\n        IssueListComponent\n      ],\n      imports: [\n        BrowserModule,\n        ClarityModule,\n        BrowserAnimationsModule,\n        **ReactiveFormsModule**\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    }) \n    ```", "```js\n    ng generate component issue-report \n    ```", "```js\n    import { FormControl, FormGroup } from '@angular/forms'; \n    ```", "```js\n    interface IssueForm {\n      title: FormControl<string>;\n      description: FormControl<string>;\n      priority: FormControl<string>;\n      type: FormControl<string>;\n    } \n    ```", "```js\n    issueForm = new FormGroup<IssueForm>({\n      title: new FormControl('', { nonNullable: true }),\n      description: new FormControl('', { nonNullable: true }),\n      priority: new FormControl('', { nonNullable: true }),\n      type: new FormControl('', { nonNullable: true })\n    }); \n    ```", "```js\n    <h3>Report an issue</h3>\n    <form clrForm *ngIf=\"issueForm\" [formGroup]=\"issueForm\">\n      <clr-input-container>\n        <label>Title</label>\n        <input clrInput formControlName=\"title\" />\n      </clr-input-container>\n      <clr-textarea-container>\n        <label>Description</label>\n        <textarea clrTextarea\n          formControlName=\"description\"></textarea>\n      </clr-textarea-container>\n      <clr-radio-container clrInline>\n        <label>Priority</label>\n        <clr-radio-wrapper>\n          <input type=\"radio\" value=\"low\" clrRadio\n             formControlName=\"priority\" />\n          <label>Low</label>\n        </clr-radio-wrapper>\n        <clr-radio-wrapper>\n          <input type=\"radio\" value=\"high\" clrRadio\n            formControlName=\"priority\" />\n          <label>High</label>\n        </clr-radio-wrapper>\n      </clr-radio-container>\n      <clr-select-container>\n        <label>Type</label>\n        <select clrSelect formControlName=\"type\">\n          <option value=\"Feature\">Feature</option>\n          <option value=\"Bug\">Bug</option>\n          <option value=\"Documentation\">Documentation\n            </option>\n        </select>\n      </clr-select-container>\n    </form> \n    ```", "```js\n    .clr-input, .clr-textarea {\n        width: 30%;\n    }\n    button {\n        margin-top: 25px;\n    } \n    ```", "```js\n    <button class=\"btn btn-primary\" type=\"submit\">Create</button> \n    ```", "```js\n    createIssue(issue: Issue) {\n      issue.issueNo = this.issues.length + 1;\n      this.issues.push(issue);\n    } \n    ```", "```js\n    import { Issue } from '../issue';\n    import { IssuesService } from '../issues.service'; \n    ```", "```js\n    constructor(private issueService: IssuesService) { } \n    ```", "```js\n    addIssue() {\n      this.issueService.createIssue(this.issueForm.getRawValue() as Issue);\n    } \n    ```", "```js\n    <form clrForm *ngIf=\"issueForm\" [formGroup]=\"issueForm\" **(****ngSubmit****)=****\"addIssue()\"**> \n    ```", "```js\n    @Output() formClose = new EventEmitter(); \n    ```", "```js\n    addIssue() {\n      this.issueService.createIssue(this.issueForm.getRawValue() as Issue);\n    **this****.****formClose****.****emit****();**\n    } \n    ```", "```js\n    <button class=\"btn\" type=\"button\" (click)=\"formClose.emit()\">Cancel</button> \n    ```", "```js\n    showReportIssue = false; \n    ```", "```js\n    onCloseReport() {\n      this.showReportIssue = false;\n      this.getIssues();\n    } \n    ```", "```js\n    <button class=\"btn btn-primary\" (click)=\"showReportIssue = true\">Add new issue</button> \n    ```", "```js\n    **<****ng-container** *******ngIf****=****\"showReportIssue === false\"****>**\n        <button class=\"btn btn-primary\" (click)=\"showReportIssue = true\">Add new issue</button>\n        <clr-datagrid>\n            <clr-dg-column [clrDgField]=\"'issueNo'\" [clrDgColType]=\"'number'\">Issue No</clr-dg-column>\n            <clr-dg-column [clrDgField]=\"'type'\">Type</clr-dg-column>\n            <clr-dg-column [clrDgField]=\"'title'\">Title</clr-dg-column>\n            <clr-dg-column [clrDgField]=\"'description'\">Description</clr-dg-column>\n            <clr-dg-column [clrDgField]=\"'priority'\">Priority</clr-dg-column>\n            <clr-dg-row *clrDgItems=\"let issue of issues\">\n                <clr-dg-cell>{{issue.issueNo}}</clr-dg-cell>\n                <clr-dg-cell>{{issue.type}}</clr-dg-cell>\n                <clr-dg-cell>{{issue.title}}</clr-dg-cell>\n                <clr-dg-cell>{{issue.description}}</clr-dg-cell>\n                <clr-dg-cell>\n                    <span class=\"label\" [class.label-danger]=\"issue.priority === 'high'\">{{issue.priority}}</span>\n                </clr-dg-cell>\n            </clr-dg-row>\n            <clr-dg-footer>{{issues.length}} issues</clr-dg-footer>\n        </clr-datagrid>\n    **</****ng-container****>** \n    ```", "```js\n    <app-issue-report *ngIf=\"showReportIssue === true\" (formClose)=\"onCloseReport()\"></app-issue-report> \n    ```", "```js\n    import { FormControl, FormGroup, **Validators** } from '@angular/forms'; \n    ```", "```js\n    issueForm = new FormGroup<IssueForm>({\n      title: new FormControl('', { nonNullable: true, **validators****:** **Validators****.****required** }),\n      description: new FormControl('', { nonNullable: true }),\n      priority: new FormControl('', { nonNullable: true, **validators****:** **Validators****.****required** }),\n      type: new FormControl('', { nonNullable: true, **validators****:** **Validators****.****required** })\n    }); \n    ```", "```js\n    <clr-input-container>\n        <label>Title</label>\n        <input clrInput formControlName=\"title\" />\n        **<****clr-control-error****>****Title is required****</****clr-control-error****>**\n    </clr-input-container>\n    <clr-textarea-container>\n        <label>Description</label>\n        <textarea clrTextarea formControlName=\"description\"></textarea>\n    </clr-textarea-container>\n    <clr-radio-container clrInline>\n        <label>Priority</label>\n        <clr-radio-wrapper>\n          <input type=\"radio\" value=\"low\" clrRadio formControlName=\"priority\" />\n          <label>Low</label>\n        </clr-radio-wrapper>\n        <clr-radio-wrapper>\n          <input type=\"radio\" value=\"high\" clrRadio formControlName=\"priority\" />\n          <label>High</label>\n        </clr-radio-wrapper>\n        **<****clr-control-error****>****Priority is required****</****clr-control-error****>**\n    </clr-radio-container>\n    <clr-select-container>\n        <label>Type</label>\n        <select clrSelect formControlName=\"type\">\n          <option value=\"Feature\">Feature</option>\n          <option value=\"Bug\">Bug</option>\n          <option value=\"Documentation\">Documentation</option>\n        </select>\n        **<****clr-control-error****>****Type is required****</****clr-control-error****>**\n    </clr-select-container> \n    ```", "```js\n    addIssue() {\n    **if** **(****this****.****issueForm** **&&** **this****.****issueForm****.****invalid****) {**\n    **this****.****issueForm****.****markAllAsTouched****();**\n    **return****;**\n     **}**\n      this.issueService.createIssue(this.issueForm.getRawValue() as Issue);\n      this.formClose.emit();\n    } \n    markAllAsTouched method of the issueForm property to mark all controls as touched when the form is invalid. Marking controls as touched makes validation messages appear automatically. Additionally, we use a return statement to prevent the creation of the issue when the form is invalid.\n    ```", "```js\n    ng generate component confirm-dialog \n    ```", "```js\n    import { Component, **EventEmitter****,** **Input****,** **Output** } from '@angular/core';\n    @Component({\n      selector: 'app-confirm-dialog',\n      templateUrl: './confirm-dialog.component.html',\n      styleUrls: ['./confirm-dialog.component.css']\n    })\n    export class ConfirmDialogComponent {\n    **@Input****()** **issueNo****:** **number** **|** **null** **=** **null****;**\n    **@Output****() confirm =** **new****EventEmitter****<****boolean****>();**\n    } \n    ```", "```js\n    agree() {\n      this.confirm.emit(true);\n      this.issueNo = null;\n    }\n    disagree() {\n      this.confirm.emit(false);\n      this.issueNo = null;\n    } \n    ```", "```js\n<clr-modal [clrModalOpen]=\"issueNo !== null\" [clrModalClosable]=\"false\">\n    <h3 class=\"modal-title\">\n      Resolve Issue #\n      {{issueNo}}\n    </h3>\n    <div class=\"modal-body\">\n      <p>Are you sure you want to close the issue?</p>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-outline\" (click)=\"disagree()\">Cancel</button>\n      <button type=\"button\" class=\"btn btn-danger\" (click)=\"agree()\">Yes, continue</button>\n    </div>\n</clr-modal> \n```", "```js\n    completeIssue(issue: Issue) {\n      const selectedIssue: Issue = {\n        ...issue,\n        completed: new Date()\n      };\n      const index = this.issues.findIndex(i => i === issue);\n      this.issues[index] = selectedIssue;\n    } \n    ```", "```js\n    selectedIssue: Issue | null = null;\n    onConfirm(confirmed: boolean) {\n      if (confirmed && this.selectedIssue) {\n        this.issueService.completeIssue(this.selectedIssue);\n        this.getIssues();\n      }\n      this.selectedIssue = null;\n    } \n    ```", "```js\n    <clr-dg-row *clrDgItems=\"let issue of issues\">\n        **<****clr-dg-action-overflow****>**\n    **<****button****class****=****\"action-item\"** **(****click****)=****\"selectedIssue = issue\"****>****Resolve****</****button****>**\n    **</****clr-dg-action-overflow****>**\n        <clr-dg-cell>{{issue.issueNo}}</clr-dg-cell>\n        <clr-dg-cell>{{issue.type}}</clr-dg-cell>\n        <clr-dg-cell>{{issue.title}}</clr-dg-cell>\n        <clr-dg-cell>{{issue.description}}</clr-dg-cell>\n        <clr-dg-cell>\n            <span class=\"label\" [class.label-danger]=\"issue.priority === 'high'\">{{issue.priority}}</span>\n        </clr-dg-cell>\n    </clr-dg-row> \n    ```", "```js\n    <app-confirm-dialog *ngIf=\"selectedIssue\" [issueNo]=\"selectedIssue.issueNo\" (confirm)=\"onConfirm($event)\"></app-confirm-dialog> \n    ```", "```js\n    getSuggestions(title: string): Issue[] {\n      if (title.length > 3) {\n        return this.issues.filter(issue =>\n          issue.title.indexOf(title) !== -1);\n      }\n      return [];\n    } \n    ```", "```js\n    import { Component, EventEmitter, **OnInit**, Output } from '@angular/core'; \n    ```", "```js\n    suggestions: Issue[]= []; \n    ```", "```js\n    export class IssueReportComponent **implements****OnInit** { \n    ```", "```js\n    ngOnInit(): void {\n      this.issueForm.controls.title.valueChanges.subscribe(title => {\n        this.suggestions = this.issueService.getSuggestions(title);\n      });\n    } \n    ```", "```js\n    <div class=\"clr-row\" *ngIf=\"suggestions.length\">\n        <div class=\"clr-col-lg-2\"></div>\n        <div class=\"clr-col-lg-6\">\n          <clr-stack-view>\n            <clr-stack-header>Similar issues</clr-stack-header>\n            <clr-stack-block *ngFor=\"let issue of suggestions\">\n                <clr-stack-label>#{{issue.issueNo}}:{{issue.title}}</clr-stack-label>\n                <clr-stack-content>{{issue.description}}</clr-stack-content>\n            </clr-stack-block>\n          </clr-stack-view>\n        </div>\n    </div> \n    ```"]