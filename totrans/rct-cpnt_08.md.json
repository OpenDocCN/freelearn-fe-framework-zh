["```js\n$ npm install --save babel-cli babel-preset-react babel-preset-es2015 eventemitter3 react react-dom\n\n```", "```js\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```", "```js\n$ node_modules/.bin/babel-node index.js\n\n```", "```js\nimport Emitter from \"eventemitter3\";\n\nclass Backend extends Emitter {\n    constructor() {\n        super();\n\n        this.id = 1;\n        this.pages = [];\n    }\n\n    add() {\n        const id = this.id++;\n        const title = `New Page ${id}`;\n\n        const page = {\n            id,\n            title\n        };\n\n        this.pages.push(page);\n        this.emit(\"onAdd\", page);\n    }\n\n    getAll() {\n        return this.pages;\n    }\n}\n\nexport default Backend;\n```", "```js\nimport Backend from \"./src/backend\";\n\nlet backend = new Backend();\n\nbackend.on(\"onAdd\", (page) => {\n    console.log(\"new page: \", page);\n});\n\nconsole.log(\"all pages: \", backend.getAll());\n\nbackend.add();\nconsole.log(\"all pages: \", backend.getAll());\n```", "```js\nfunction printPages(pages) {\n    for (var i = 0; i < pages.length; i++) {\n        console.log(pages[i]);\n    }\n\n    // i == pages.length - 1 \n\n    for (let j = 0; j < pages.length; j++) {\n        console.log(pages[j]);\n    }\n\n    // j == undefined\n}\n```", "```js\nall pages:  []\nnew page:  { id: 1, title: 'New Page 1' }\nall pages:  [ { id: 1, title: 'New Page 1' } ]\n```", "```js\nimport React from \"react\";\n\nconst PageAdmin = (props) => {\n    return (\n        <div>\n            <a href=\"#\"\n                onClick={(e) => {\n                    e.preventDefault();\n                    props.backend.add();\n                }}>\n                add page\n            </a>\n            <ol>\n                {props.backend.all().map((page) => {\n                    return (\n                        <li key={page.id}>\n                            {page.title}\n                        </li>\n                    );\n                })}\n            </ol>\n        </div>\n    );\n};\n\nexport default PageAdmin;\n```", "```js\nimport Backend from \"./src/backend\";\nimport PageAdmin from \"./src/page-admin\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\n\nlet backend = new Backend();\n\nbackend.add();\nbackend.add();\nbackend.add();\n\nconsole.log(\n    ReactDOMServer.renderToString(\n        <PageAdmin backend={backend} />\n    )\n);\n```", "```js\n<div data-reactid=\".51gm9pfn5s\" data-react-checksum=\"865425333\">\n    <a href=\"#\" data-reactid=\".51gm9pfn5s.0\">add page</a>\n    <ol data-reactid=\".51gm9pfn5s.1\">\n        <li data-reactid=\".51gm9pfn5s.1.$1\">New Page 1</li>\n        <li data-reactid=\".51gm9pfn5s.1.$2\">New Page 2</li>\n        <li data-reactid=\".51gm9pfn5s.1.$3\">New Page 3</li>\n    </ol>\n</div>\n```", "```js\nimport { Dispatcher } from \"flux\";\n\nconst pageDispatcher = new Dispatcher();\n\nexport default pageDispatcher;\n```", "```js\nimport Emitter from \"eventemitter3\";\nimport PageDispatcher from \"./page-dispatcher\";\n\nclass PageStore extends Emitter {\n    constructor() {\n        super();\n\n        this.id = 1;\n        this.pages = [];\n    }\n\n    add() {\n        // ...add new page\n    }\n\n    getAll() {\n        return this.pages;\n    }\n}\n\nconst pageStore = new PageStore();\n\nPageDispatcher.register((payload) => {\n    if (payload.action === \"ADD_PAGE\") {\n        pageStore.add();\n    }\n\n    pageStore.emit(\"change\");\n});\n\nexport default pageStore;\n```", "```js\nimport PageAdmin from \"./src/page-admin\";\nimport PageDispatcher from \"./src/page-dispatcher\";\nimport PageStore from \"./src/page-store\";\n\nPageStore.on(\"change\", () => {\n    console.log(\"on change: \", PageStore.getAll());\n});\n\nconsole.log(\"all pages: \", PageStore.getAll());\n\nPageDispatcher.dispatch({\n    \"action\": \"ADD_PAGE\"\n});\n\nconsole.log(\"all pages: \", PageStore.getAll());\n```", "```js\nclass PageStore extends Emitter {\n    constructor() {\n        super();\n\n        this.id = 1;\n        this.pages = [];\n    }\n\n    handle(payload) {\n        if (payload.action == \"ADD_PAGE\") {\n            // ...add new page\n        }\n    }\n    getState() {\n        return {\n            \"pages\": this.pages\n        };\n    }\n}\n\nconst pageStore = new PageStore();\n\nPageDispatcher.register((payload) => {\n    if (payload.action === \"ADD_PAGE\") {\n        pageStore.handle(payload);\n    }\n\n    pageStore.emit(\"change\");\n});\n```", "```js\nPageStore.on(\"change\", () => {\n    console.log(\"change: \", PageStore.getState());\n});\n\nconsole.log(\"all state: \", PageStore.getState());\n\nPageDispatcher.dispatch({\n    \"action\": \"ADD_PAGE\"\n});\n\nconsole.log(\"all state: \", PageStore.getState());\n```", "```js\nall state:  { pages: [] }\nchange:  { pages: [ { id: 1, title: 'New Page 1' } ] }\nall state:  { pages: [ { id: 1, title: 'New Page 1' } ] }\n```", "```js\nimport React from \"react\";\nimport PageDispatcher from \"./page-dispatcher\";\nimport PageStore from \"./page-store\";\nclass PageAdmin extends React.Component {\n    constructor() {\n        super();\n        this.state = PageStore.getState();\n       this.onChange = this.onChange.bind(this);\n    }\n    componentDidMount() {\n        PageStore.on(\"change\", this.onChange);\n    }\n    componentWillUnmount() {\n        PageStore.removeListener(\"change\", this.onChange);\n    }\n    onChange() {\n        this.setState(PageStore.getState());\n    }\n    render() {\n        return (\n            <div>\n                <a href=\"#\"\n                    onClick={(e) => {\n                        e.preventDefault();\n\n                        PageDispatcher.dispatch({\n                            \"action\": \"ADD_PAGE\"\n                        });\n                    }}>\n                    add page\n                </a>\n                <ol>\n                    {this.state.pages.map((page) => {\n                        return (\n                            <li key={page.id}>\n                                {page.title}\n                            </li>\n                        );\n                    })}\n                </ol>\n            </div>\n        );\n    }\n};\n\nexport default PageAdmin;\n```", "```js\nimport PageAdmin from \"./src/page-admin\";\nimport PageDispatcher from \"./src/page-dispatcher\";\nimport PageStore from \"./src/page-store\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\n\nPageDispatcher.dispatch({\n    \"action\": \"ADD_PAGE\"\n});\n\n// ...dispatch the same thing a few more times\n\nconsole.log(\n    ReactDOMServer.renderToString(\n        <PageAdmin />\n    )\n);\n```", "```js\nconst transform = (state, action) => {\n    let id = 1;\n    let pages = state.pages;\n\n    if (action.type == \"ADD_PAGE\") {\n        pages = [\n            ...state.pages,\n            {\n                \"title\": \"New Page \" + id,\n                \"id\": id++\n            }\n        ];\n    }\n\n    return {\n        pages\n    };\n};\n\nconsole.log(\n    transform({ \"pages\": [] }, { \"type\": \"ADD_PAGE\" })\n);\n```", "```js\npages = pages.concat({\n    \"title\": \"New Page \" + id,\n    \"id\": id++\n});\n```", "```js\nimport { createStore } from \"redux\";\n\nconst transform = (state = { \"pages\": [] }, action) => {\n    // ...create a new state object, with a new page\n};\n\nconst store = createStore(transform);\n\nstore.dispatch({ \"type\": \"ADD_PAGE\" });\n\nconsole.log(\n    store.getState()\n);\n```", "```js\nimport React from \"react\";\n\nclass PageAdmin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = this.props.store.getState();\n this.onChange = this.onChange.bind(this);\n    }\n    componentDidMount() {\n        this.removeListener = \n            this.props.store.register(this.onChange);\n    }\n    componentWillUnmount() {\n        this.removeListener();\n    }\n    onChange() {\n        this.setState(this.props.store.getState());\n    }\n    render() {\n        return (\n            <div>\n                <a href=\"#\"\n                    onClick={(e) => {\n                        e.preventDefault();\n\n                        this.props.store.dispatch({\n                            \"type\": \"ADD_PAGE\"\n                        });\n                    }}>\n                    add page\n                </a>\n                <ol>\n                    {this.state.pages.map((page) => {\n                        // ...render each page\n                    })}\n                </ol>\n            </div>\n        );\n    }\n};\n\nexport default PageAdmin;\n```", "```js\nimport { createStore } from \"redux\";\nimport PageAdmin from \"./src/page-admin\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\n\nconst transform = (state = { \"pages\": [] }, action) => {\n    let id = 1;\n    let pages = state.pages;\n\n    if (action.type == \"ADD_PAGE\") {\n        pages = [\n            ...state.pages,\n            {\n                \"title\": \"New Page \" + id,\n                \"id\": id++\n            }\n        ];\n    }\n\n    return {\n        pages\n    };\n};\n\nconst store = createStore(transform);\n\nstore.dispatch({ \"type\": \"ADD_PAGE\" });\n\nconsole.log(\n    ReactDOMServer.renderToString(\n        <PageAdmin store={store} />\n    )\n);\n```", "```js\nReact.render(\n    <PageAdmin store={store}>\n        {store.getState().pages.map((page) => {\n            <Page key={page.id} store={store}>\n                <PageView {...page} store={store} />\n                <PageEditor {...page} store={store} />\n            </Page>\n        })}\n    </PageAdmin>\n    document.querySelector(\".react\")\n);\n```", "```js\nclass Provider extends React.Component {\n    getChildContext() {\n        return {\n            \"store\": this.props.store\n        };\n    }\n    render() {\n        return this.props.children;\n    }\n}\n\nProvider.childContextTypes = {\n    \"store\": React.PropTypes.object\n};\n\nconsole.log(\n    ReactDOMServer.renderToString(\n        <Provider store={store}>\n            <PageAdmin />\n        </Provider>\n    )\n);\n```", "```js\nclass PageAdmin extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = context.store.getState();\n        this.onChange = this.onChange.bind(this);\n    }\n    componentDidMount() {\n        this.removeListener =\n            this.context.store.register(this.onChange);\n    }\n    componentWillUnmount() {\n        this.removeListener();\n    }\n    onChange() {\n        this.setState(this.context.store.getState());\n    }\n    render() {\n        return (\n            <div>\n                <a href=\"#\"\n                    onClick={(e) => {\n                        e.preventDefault();\n\n                        this.context.store.dispatch({\n                            \"type\": \"ADD_PAGE\"\n                        });\n                    }}>\n                    add page\n                </a>\n                <ol>\n                    {this.state.pages.map((page) => {\n                        // ...render each page\n                    })}\n                </ol>\n            </div>\n        );\n    }\n};\n\nPageAdmin.contextTypes = {\n    \"store\": React.PropTypes.object\n};\n\n```", "```js\nimport { Provider } from \"react-redux\";\n\nconsole.log(\n    ReactDOMServer.renderToString(\n        <Provider store={store}>\n            <PageAdmin />\n        </Provider>\n    )\n);\n```"]