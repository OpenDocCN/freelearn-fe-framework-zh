["```js\n// src/app/store.js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n```", "```js\n// features/counter/counterSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  value: 0,\n};\n```", "```js\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (\n      state,\n      action: PayloadAction<number>\n     ) => {\n      state.value += action.payload;\n    },\n  },\n});\n```", "```js\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;\n```", "```js\n// features/counter/Counter.jsx\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { decrement, increment } from \"./counterSlice\";\n```", "```js\nexport function Counter() {\n  const count = useSelector((\n    state: { counter: { value: number; }; }\n  ) => state.counter.value);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <button onClick={() => dispatch(increment())}>\n        Increment\n      </button>\n      <span>{count}</span>\n      <button onClick={() => dispatch(decrement())}>\n        Decrement\n      </button>\n    </div>\n  );\n}\n```", "```js\n// App.jsx\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport { Counter } from \"./features/counter/Counter\";\nconst App = () => (\n  <Provider store={store}>\n    <div>\n      <Counter />\n      <Counter />\n    </div>\n  </Provider>\n);\nexport default App;\n```", "```js\n// store.js\nimport create from \"zustand\";\n```", "```js\ntype State = {\n  counter: {\n    value: number;\n  };\n  counterActions: {\n    increment: () => void;\n    decrement: () => void;\n    incrementByAmount: (amount: number) => void;\n  };\n};\n```", "```js\nexport const useStore = create<State>((set) => ({\n  counter: { value: 0 },\n  counterActions: {\n    increment: () =>\n      set((state) => ({\n        counter: { value: state.counter.value + 1 },\n      })),\n    decrement: () =>\n      set((state) => ({\n        counter: { value: state.counter.value - 1 },\n      })),\n    incrementByAmount: (amount: number) =>\n      set((state) => ({\n        counter: { value: state.counter.value + amount },\n      })),\n  },\n}));\n```", "```js\n// Counter.jsx\nimport { useStore } from \"./store\";\nexport function Counter() {\n  const count = useStore((state) => state.counter.value);\n  const { increment, decrement } = useStore(\n    (state) => state.counterActions\n  );\n  return (\n    <div>\n      <div>\n        <button onClick={increment}>Increment</button>\n        <span>{count}</span>\n        <button onClick={decrement}>Decrement</button>\n      </div>\n    </div>\n  );\n}\n```", "```js\n// App.jsx\nimport { Counter } from \"./Counter\";\nconst App = () => (\n  <div>\n    <Counter />\n    <Counter />\n  </div>\n);\nexport default App;\n```", "```js\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from \"recoil\";\n```", "```js\nconst textState = atom({\n  key: \"textState\",\n  default: \"\",\n});\n```", "```js\nconst TextInput = () => {\n  const [text, setText] = useRecoilState(textState);\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(event) => {\n          setText(event.target.value);\n        }}\n      />\n      <br />\n      Echo: {text}\n    </div>\n  );\n};\n```", "```js\nconst charCountState = selector({\n  key: \"charCountState\",\n  get: ({ get }) => get(textState).length,\n});\n```", "```js\nconst CharacterCount = () => {\n  const count = useRecoilValue(charCountState);\n  return <>Character Count: {count}</>;\n};\n```", "```js\nconst CharacterCounter = () => (\n  <div>\n    <TextInput />\n    <CharacterCount />\n  </div>\n);\n```", "```js\nconst App = () => (\n  <RecoilRoot>\n    <CharacterCounter />\n  </RecoilRoot>\n);\n```", "```js\nimport { atom, useAtom } from \"jotai\";\n```", "```js\nconst textAtom = atom(\"\");\n```", "```js\nconst TextInput = () => {\n  const [text, setText] = useAtom(textAtom);\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(event) => {\n          setText(event.target.value);\n        }}\n      />\n      <br />\n      Echo: {text}\n    </div>\n  );\n};\n```", "```js\nconst charCountAtom = atom((get) => get(textAtom).length);\n```", "```js\nconst CharacterCount = () => {\n  const [count] = useAtom(charCountAtom);\n  return <>Character Count: {count}</>;\n};\n```", "```js\nconst CharacterCounter = () => (\n  <div>\n    <TextInput />\n    <CharacterCount />\n  </div>\n);\n```", "```js\nconst App = () => (\n  <>\n    <CharacterCounter />\n  </>\n);\n```", "```js\nimport { makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react\";\n```", "```js\nclass Timer {\n  secondsPassed = 0;\n  constructor() {\n    makeAutoObservable(this);\n  }\n  increase() {\n    this.secondsPassed += 1;\n  }\n  reset() {\n    this.secondsPassed = 0;\n  }\n}\nconst myTimer = new Timer();\n```", "```js\nsetInterval(() => {\n  myTimer.increase();\n}, 1000);\n```", "```js\nconst TimerView = observer(({ timer }: { timer: Timer }) => (\n  <button onClick={() => timer.reset()}>\n    Seconds passed: {timer.secondsPassed}\n  </button>\n));\n```", "```js\nconst App = () => (\n  <>\n    <TimerView timer={myTimer} />\n  </>\n);\n```", "```js\nimport { proxy, useSnapshot } from \"valtio\";\n```", "```js\nconst myTimer = proxy({\n  secondsPassed: 0,\n  increase: () => {\n    myTimer.secondsPassed += 1;\n  },\n  reset: () => {\n    myTimer.secondsPassed = 0;\n  },\n});\n```", "```js\nsetInterval(() => {\n  myTimer.increase();\n}, 1000);\n```", "```js\nconst TimerView = ({ timer }: { timer: typeof myTimer }) => {\n  const snap = useSnapshot(timer);\n  return (\n    <button onClick={() => timer.reset()}>\n      Seconds passed: {snap.secondsPassed}\n    </button>\n  );\n};\n```", "```js\nconst App = () => (\n  <>\n    <TimerView timer={myTimer} />\n  </>\n);\n```", "```js\n    // timer.js\n    const timer = proxy({ secondsPassed: 0 })\n    export const increase = () => {\n      timer.secondsPassed += 1;\n    };\n    export const reset = () => {\n      timer.secondsPassed = 0;\n    };\n    export const useSecondsPasses = () =>\n      useSnapshot(timer).secondsPassed;\n    ```", "```js\n    const countAtom = atom(0);\n    ```"]