- en: Chapter 3. Beginning with the Example Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。从示例应用程序开始
- en: Now that you have an idea about how React Native works and how to create components,
    let's create your first React Native application. Throughout this book, we will
    be developing a note-taking application which we'll call **ReactNotes**. By the
    end of the book, you'll have a fully featured application that allows you to create
    notes, save them to a device, view the list of the notes you've saved, take pictures
    with the device and attach them to your notes, and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 React Native 的工作原理以及如何创建组件，让我们创建你的第一个 React Native 应用程序。在整个书中，我们将开发一个记事应用，我们将其称为
    **ReactNotes**。到书末，你将拥有一个功能齐全的应用程序，允许你创建笔记、将它们保存到设备上、查看已保存的笔记列表、使用设备拍照并将照片附加到笔记中，等等。
- en: In this chapter, we'll build the skeleton of the application, create a `HomeScreen`
    and `NoteScreen`. We'll also add navigation that allows you to switch between
    the screens, and along the way you'll learn about creating your own components
    and handling events.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建应用程序的框架，创建 `HomeScreen` 和 `NoteScreen`。我们还将添加导航，允许你在屏幕之间切换，在这个过程中，你将学习如何创建自己的组件和处理事件。
- en: 'The topics that we will cover in this chapter are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题包括：
- en: How to generate iOS and Android project files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何生成 iOS 和 Android 项目文件
- en: Examining the React Native starter template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 React Native 入门模板
- en: Creating the first component, `SimpleButton`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建第一个组件，`SimpleButton`
- en: Debugging with Chrome Developer Tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Chrome 开发者工具进行调试
- en: Exploring navigation and transitioning between screens
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索导航和屏幕间切换
- en: Developing the UI to create notes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发创建笔记的 UI
- en: Generating the projects
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成项目
- en: To start building our note taking application for iOS, we are going to need
    a couple of command-line tools.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建我们的 iOS 记事应用，我们需要一些命令行工具。
- en: React Native 0.14.2 requires **Node.js v4+**, we are going to use v5.0.0; visit
    [https://nodejs.org](https://nodejs.org) for more information (we recommend managing
    different node versions with NVM [https://github.com/creationix/nvm](https://github.com/creationix/nvm))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native 0.14.2 需要 **Node.js v4+**，我们将使用 v5.0.0；访问 [https://nodejs.org](https://nodejs.org)
    获取更多信息（我们建议使用 NVM [https://github.com/creationix/nvm](https://github.com/creationix/nvm)
    管理不同的 node 版本）
- en: Install the latest version of NPM from [https://www.npmjs.com/](https://www.npmjs.com/)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [https://www.npmjs.com/](https://www.npmjs.com/) 安装最新版本的 NPM
- en: 'Great, now that we have these tools we can install the `react-native-cli`.
    The `react-native-cli` exposes an interface that does all the work of setting
    up a new React Native project for us:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，现在我们有了这些工具，我们可以安装 `react-native-cli`。`react-native-cli` 提供了一个接口，为我们设置新的
    React Native 项目：
- en: 'To install `react-native-cli`, use the `npm` command:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 `react-native-cli`，请使用 `npm` 命令：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we are going to generate a new React Native project called `ReactNotes`
    using the `cli` and the `react-native init` command. The output of the command
    looks similar to the following:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `cli` 和 `react-native init` 命令生成一个名为 `ReactNotes` 的新 React Native
    项目。命令的输出类似于以下内容：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will walk you through the creation of a new React Native project in `/Users/ethanholmes/ReactNotes`.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将指导你创建一个位于 `/Users/ethanholmes/ReactNotes` 的新 React Native 项目。
- en: 'Set up a new React Native app in `/Users/ethanholmes/ReactNotes`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/Users/ethanholmes/ReactNotes` 中设置一个新的 React Native 应用：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To run your app on iOS:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在 iOS 上运行你的应用：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To run your app on Android:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在 Android 上运行你的应用：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `root` directory of the `Xcode` project is generated in the `ReactNotes`
    folder, with the same name as we gave `react-native-cli` when we ran the command.
    Follow the steps at the end of the React Native set up to see what it produces.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Xcode` 项目的 `root` 目录在 `ReactNotes` 文件夹中生成，其名称与我们运行 `react-native-cli` 命令时给出的名称相同。查看
    React Native 设置步骤的末尾，以了解它产生的结果。'
- en: Xcode and the iOS simulator
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xcode 和 iOS 模拟器
- en: 'We are going to start by running the starter template in the iOS simulator
    through Xcode:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过 Xcode 在 iOS 模拟器中运行入门模板：
- en: In Xcode, select `File` | `Open` and navigate to the `ReactNotes` folder.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xcode 中，选择 `文件` | `打开` 并导航到 `ReactNotes` 文件夹。
- en: Open the `ReactNotes.xcodeproj` file, as shown in the following figure:![Xcode
    and the iOS simulator](img/B05162_03_01.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ReactNotes.xcodeproj` 文件，如图所示：![Xcode 和 iOS 模拟器](img/B05162_03_01.jpg)
- en: Click on **Run** (or *Cmd* + *R*) to run the application in the iOS simulator,
    the following screenshot will be shown:![Xcode and the iOS simulator](img/B05162_03_02.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **运行**（或 *Cmd* + *R*）在 iOS 模拟器中运行应用程序，以下截图将显示：![Xcode 和 iOS 模拟器](img/B05162_03_02.jpg)
- en: Just like that, we already have the React Native template up and running on
    the iOS simulator!
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就这样，我们已经在 iOS 模拟器上成功运行了 React Native 模板！
- en: The Android SDK and emulator
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android SDK 和模拟器
- en: Facebook has a detailed step by step guide set up on Android SDK and emulator.
    You can access the React Native Docs at [https://facebook.github.io/react-native/docs/android-setup.html](https://facebook.github.io/react-native/docs/android-setup.html).
    In this section, we will only cover the basics of running the application on the
    Android emulator.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook 在 Android SDK 和模拟器上有一个详细的分步指南。您可以在 [https://facebook.github.io/react-native/docs/android-setup.html](https://facebook.github.io/react-native/docs/android-setup.html)
    访问 React Native 文档。在本节中，我们只介绍在 Android 模拟器上运行应用程序的基本知识。
- en: When running the project in the iOS simulator, we can run it from the Xcode
    IDE. Android, on the other hand, doesn't require any particular IDE and can be
    launched directly from the command line.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 iOS 模拟器中运行项目时，我们可以从 Xcode IDE 中运行它。另一方面，Android 不需要特定的 IDE，可以直接从命令行启动。
- en: 'To install the `android apk` to the emulator, use the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `android apk` 安装到模拟器，请使用以下命令：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot will be generated:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图将生成：
- en: '![The Android SDK and emulator](img/B05162_03_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Android SDK 和模拟器](img/B05162_03_03.jpg)'
- en: Let's start by modifying the contents of the starter template and display a
    different message.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从修改启动模板的内容并显示不同的消息开始。
- en: Modifying the React Native starter template
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改 React Native 启动模板
- en: 'Open `index.ios.js`, located in the root directory, in the text editor of your
    choice. Here is the code that `react-native-cli` generated:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开位于根目录中的 `index.ios.js`。以下是 `react-native-cli` 生成的代码：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although `react-native-cli` generates the starter template using the ES5 `createClass`,
    we will be creating our components using ES6 classes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `react-native-cli` 使用 ES5 的 `createClass` 生成启动模板，但我们将使用 ES6 类来创建我们的组件。
- en: A lot of things are included in here, but bear with us as we break it down for
    you. If we take a closer look at the render method, we can see the familiar `View`
    and `Text` components that we encountered in the previous chapter. Note how the
    index file is a component itself (`ReactNotes`). Change the value in line `30`
    to `Welcome to React Notes!`. Save it and then press *Cmd* + *R* from the simulator
    or, in the top menu, navigate to **Hardware** | **Shake Gesture** and select **Reload**
    from the pop-up action sheet. The text on screen re-renders to show the text value
    we just modified! We are no longer constrained to wait for the Xcode to recompile
    in order to see our changes as we can reload straight from the simulator. Continue
    making changes and reload it in the simulator to get a feel for the work flow.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里包含了很多内容，但请耐心等待，我们将为您逐一解释。如果我们仔细查看渲染方法，我们可以看到我们在上一章中遇到的熟悉的 `View` 和 `Text`
    组件。注意索引文件本身就是一个组件（`ReactNotes`）。将第 30 行的值更改为 `Welcome to React Notes!`。保存后，然后从模拟器中按
    *Cmd* + *R*，或者在顶部菜单中导航到 **硬件** | **摇动手势**，并从弹出操作表中选择 **重新加载**。屏幕上的文本重新渲染以显示我们刚刚修改的文本！我们不再受限于等待
    Xcode 重新编译才能看到我们的更改，因为我们可以直接从模拟器中重新加载。继续进行更改，并在模拟器中重新加载以获得工作流程的感觉。
- en: Structuring the application
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序的架构
- en: It's time to add a little interactivity to our application. You can begin by
    adding a simple button component to the screen that is touchable. In the root
    directory, create a folder called `App` and another folder inside the `App` folder
    called `Components`. In the `Components` directory, add a file named `SimpleButton.js`.
    This will be the directory in which we store and reference the components we create.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候给我们的应用程序添加一点交互性了。您可以从向屏幕添加一个可触摸的简单按钮组件开始。在根目录中创建一个名为 `App` 的文件夹，并在 `App`
    文件夹内创建一个名为 `Components` 的文件夹。在 `Components` 目录中添加一个名为 `SimpleButton.js` 的文件。这将是我们存储和引用创建的组件的目录。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the React Native code created in this chapter will work for both iOS
    and Android. Simply replace `index.ios.js` with `index.android.js` if you are
    interested in android only. The screenshots and instructions will be mainly for
    the iOS simulator.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章中创建的 React Native 代码将适用于 iOS 和 Android。如果您只对 Android 感兴趣，只需将 `index.ios.js`
    替换为 `index.android.js`。截图和说明将主要针对 iOS 模拟器。
- en: Creating the SimpleButton component
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 SimpleButton 组件
- en: 'Let''s start by rendering some text to the screen and importing it into our
    `index.ios.js` file. In `SimpleButton.js,` add:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将一些文本渲染到屏幕并将它导入到我们的 `index.ios.js` 文件开始。在 `SimpleButton.js` 中添加：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: ES6 de-structuring assignment `var [a, b] = [1, 2];` is used to extract `Text`
    and `View` from the React Native module.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 解构赋值 `var [a, b] = [1, 2];` 用于从 React Native 模块中提取 `Text` 和 `View`。
- en: 'We are going to include our newly created component in `index.ios.js` and simplify
    it to ES6 syntax:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把新创建的组件包含到 `index.ios.js` 中，并将其简化为 ES6 语法：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output for the preceding code is:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码的输出结果为：
- en: '![Creating the SimpleButton component](img/B05162_03_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建 SimpleButton 组件](img/B05162_03_04.jpg)'
- en: 'We''re off to a good start; it''s time to add some interactivity to our button.
    In `SimpleButton.js`, add the `TouchableOpacity` component to the destructuring
    assignment. `TouchableHighlight`, `TouchableOpacity`, and `TouchableWithoutFeedback`
    are similar components that respond to touches, and it takes an `onPress` prop
    for a function to react to the touch. Wrap the existing code in the render function
    with the `TouchableOpacity` component:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经取得了良好的开端；现在是时候给我们的按钮添加一些交互性了。在 `SimpleButton.js` 中，将 `TouchableOpacity`
    组件添加到解构赋值中。`TouchableHighlight`、`TouchableOpacity` 和 `TouchableWithoutFeedback`
    是响应触摸的类似组件，它们需要一个 `onPress` 属性来执行触摸时的响应。将现有代码包裹在渲染函数中的 `TouchableOpacity` 组件内：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Go ahead and try tapping (or clicking) on the text now, you should be able
    to see that the opacity of the text decreases as you press it. But where has our
    `console.log(…)` output gone? Open the **Developer** menu (**Hardware** | **Shake
    Gesture**) and select **Debug** in Chrome. This opens a Chrome Window at `localhost:8081/debugger-ui`
    for debugging, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试点击（或单击）文本，你应该能够看到当你按下它时文本的透明度降低。但我们的 `console.log(…)` 输出到哪里去了？打开 **开发者**
    菜单（**硬件** | **摇动手势**）并在 Chrome 中选择 **调试**。这将打开一个 Chrome 窗口，地址为 `localhost:8081/debugger-ui`，用于调试，如下面的截图所示：
- en: '![Creating the SimpleButton component](img/B05162_03_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建 SimpleButton 组件](img/B05162_03_06.jpg)'
- en: Lo and behold, here is the console log that we specified in our `SimpleButton`
    component. Behind the scenes, the JavaScript code is being run from inside the
    Chrome tab and loaded onto the mobile device on startup or reload. From here,
    you have access to all the Chrome Developer Tools you will normally use, including
    the addition of break points.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，看这里，这是我们 `SimpleButton` 组件中指定的控制台日志。幕后，JavaScript 代码在 Chrome 标签页中运行，并在启动或重新加载时加载到移动设备上。从这里，你可以访问你通常使用的所有
    Chrome 开发者工具，包括添加断点。
- en: Navigation
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航
- en: 'Now, its time to make our application more actionable. Let''s begin by transforming
    our `SimpleButton` into a **Create Note** button. When the user clicks on the
    **Create Note** button, it transitions them to another screen to create notes.
    To do this, we need our button to be able to accept a function via props from
    `index.ios.js` to activate the transition. We will add some custom text as well
    for extra flair:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候让我们的应用程序更具行动力了。让我们首先将 `SimpleButton` 转换为“创建笔记”按钮。当用户点击“创建笔记”按钮时，它会将用户过渡到另一个屏幕来创建笔记。为此，我们需要我们的按钮能够通过
    `index.ios.js` 的 props 接受一个函数来激活过渡。我们还将添加一些自定义文本以增加额外的魅力：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, we have extended our `SimpleButton` component to be reusable with minimal
    changes. We can always pass different functions through the `onPress` prop and
    add custom text if we choose. This is all that we need to modify our `SimpleButton`;
    now to include the transition functionality to our `index.io.js` file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将我们的 `SimpleButton` 组件扩展为可重用，只需进行最小改动。我们总是可以通过 `onPress` 属性传递不同的函数，并且如果我们选择的话，还可以添加自定义文本。这就是我们需要修改
    `SimpleButton` 的全部内容；现在要将过渡功能包含到我们的 `index.io.js` 文件中。
- en: 'The following image shows the validating props revisited page:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了重新访问验证 props 的页面：
- en: '![Navigation](img/B05162_03_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![导航](img/B05162_03_07.jpg)'
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember `propTypes` from the previous chapter? If we forget to pass the `onPress`
    prop, the console will log a warning reminding us to pass it. Note that there
    is no warning for `customText` since it was not set to `isRequired`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记得上一章中的 `propTypes` 吗？如果我们忘记传递 `onPress` 属性，控制台将记录一个警告，提醒我们传递它。注意，对于 `customText`
    没有警告，因为它没有被设置为 `isRequired`。
- en: The Navigator component
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航组件
- en: 'The **Navigator** component is a reimplementation of the `UINavigationController`
    provided by React Native to manage various screens. Similar to a stack, you can
    push, pop, and replace routes onto the Navigator. It is fully customizable on
    both iOS and Android, which we will cover in the next chapter. Import the Navigator
    into index.ios.js and replace the contents of the render method with:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Navigator**组件是React Native提供的`UINavigationController`的重实现，用于管理各种屏幕。类似于堆栈，你可以在导航器上推送、弹出和替换路由。它在iOS和Android上都是完全可定制的，我们将在下一章中介绍。将导航器导入到`index.ios.js`中，并用以下内容替换`render`方法的内容：'
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Navigator receives a prop called `initialRoute` that accepts an object to be
    the first route to be put on the stack. The route object can contain any attribute
    that you need to pass to the screen components. All we need for now is the name
    of the screen we want to transition to. Next, we need to create the `function`
    to pass to the `renderScene` prop. In the `ReactNotes` component, we are going
    to create a `function` that takes `route` and `navigator` as parameters, as shown:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 导航器接收一个名为`initialRoute`的属性，它接受一个对象，作为第一个要放入堆栈的路由。路由对象可以包含你需要传递给屏幕组件的任何属性。我们现在只需要过渡到我们想要屏幕的名称。接下来，我们需要创建传递给`renderScene`属性的`function`。在`ReactNotes`组件中，我们将创建一个接受`route`和`navigator`作为参数的`function`，如下所示：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When we first load our application, the parameter `route` will be the object
    we pass into `initialRoute`. Using a switch statement and looking at the values
    of `route.name` allows us to choose the component we want to render:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次加载应用程序时，参数`route`将是传递到`initialRoute`的对象。使用`switch`语句并查看`route.name`的值，我们可以选择我们想要渲染的组件：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, under the `home` case, you can see our slightly modified code from the
    original `render` method in `ReactNotes`; we have included the `onPress` and `customText`
    props we created earlier. You can add another component to `App/Componets/ named
    NoteScreen.js`; this screen will contain the functionality to create a new note:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在`home`情况下，你可以看到我们从`ReactNotes`中的原始`render`方法稍作修改的代码；我们包含了之前创建的`onPress`和`customText`属性。你可以在`App/Componets/`下添加另一个名为`NoteScreen.js`的组件；这个屏幕将包含创建新笔记的功能：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For now, we are only going to use this screen when we press the **Create Note**
    button. In the `onPress` prop arrow function, we are going to push a new route
    onto the stack using `navigator.push`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只会在点击**创建笔记**按钮时使用这个屏幕。在`onPress`属性的箭头函数中，我们将使用`navigator.push`将一个新的路由推送到堆栈：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that push also takes a regular JavaScript object, so we need to include
    the name attribute for our `NoteScreen`; reload the application in the simulator
    and press on the **Create Note** button. A smooth animated transition between
    the two screens will occur without adding any extra code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`push`也接受一个常规的JavaScript对象，因此我们需要为我们的`NoteScreen`包含名称属性；在模拟器中重新加载应用程序并点击**创建笔记**按钮。两个屏幕之间将发生平滑的动画过渡，而无需添加任何额外的代码。
- en: Navigator.NavigationBar
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Navigator.NavigationBar
- en: 'At this point you must be thinking *A button is OK, but is there a better,
    more native way to do navigation?* Of course, as a part of the Navigator component,
    you can pass a `navigationBar` prop to add a persistent top navigation bar across
    every screen. The `Navigator.NavigationBar` is a subcomponent that accepts an
    object that defines the left and right buttons, a title, and styles (although
    we are going to leave it `unstyled` until the next chapter). Modify the `ReactNotes`
    render function to include the `navigationBar`, as shown:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能正在想*按钮是可以的，但是有没有更好的、更原生的方式来处理导航？*当然，作为导航组件的一部分，你可以传递一个`navigationBar`属性来在每一个屏幕上添加一个持久的顶部导航栏。`Navigator.NavigationBar`是一个子组件，它接受一个定义左侧和右侧按钮、标题和样式的对象（尽管我们将在下一章将其设置为`unstyled`）。修改`ReactNotes`的`render`函数以包含`navigationBar`，如下所示：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `routeMapper` prop accepts an object containing functions for the `LeftButton`,
    `RightButton`, and `Title` attributes. Let''s insert this object after the imports
    at the top of `index.ios.js`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`routeMapper`属性接受一个包含`LeftButton`、`RightButton`和`Title`属性函数的对象。让我们在`index.ios.js`顶部的导入之后插入这个对象：'
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Advancing the flow of our application to the `CreateNote` screen will require
    displaying a right-hand button in the navigator bar. Luckily, we already have
    our simple button set up to push the state onto the navigator. In the `RightButton`
    function, add:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的应用程序流程推进到`CreateNote`屏幕将需要显示导航栏中的右侧按钮。幸运的是，我们已经有了一个简单的按钮设置，可以将状态推送到导航器。在`RightButton`函数中添加：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Similar to our previous `renderScene` method, we can switch on the value of
    `route.name`. The default expression in the `switch` statement is there to ensure
    that different screens do not return a button unless we include them. Let's also
    go ahead and add a `LeftButton` to the `NavigationBar` when it's on the `NoteScreen`
    to return to the home screen.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前的`renderScene`方法类似，我们可以根据`route.name`的值进行切换。`switch`语句中的默认表达式是为了确保除非我们包含它们，否则不同的屏幕不会返回按钮。让我们还添加一个`LeftButton`到`NavigationBar`，当它在`NoteScreen`上时，以便返回主页。
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `navigator.pop()` will remove the route on the top of the stack; thus,
    returning us to our original view. Finally, to add a title, we do the exact same
    thing in the `Title` attributes function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`navigator.pop()`将移除栈顶的路由；因此，返回到我们的原始视图。最后，为了添加标题，我们在`Title`属性函数中做完全相同的事情：'
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s update the original `renderScene` function to get rid of the button
    and include the home screen as a component. Create a new component called `HomeScreen`;
    the contents of this screen won''t matter much, as we will come back to it later:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新原始的`renderScene`函数，以移除按钮并包含主页作为组件。创建一个新的组件叫做`HomeScreen`；这个屏幕的内容现在不会很重要，因为我们稍后会回到它：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then import it into `index.ios.js` or `index.android.js`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将其导入到`index.ios.js`或`index.android.js`：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, let''s see how the navigation bar persists across each route:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看导航栏是如何在每个路由中保持一致的：
- en: '![Navigator.NavigationBar](img/B05162_03_08.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Navigator.NavigationBar](img/B05162_03_08.jpg)'
- en: 'That''s it! Reload and take a look at how the static navigation bar persists
    across each route:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！重新加载并查看静态导航栏是如何在每个路由中保持一致的：
- en: '![Navigator.NavigationBar](img/B05162_03_09.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Navigator.NavigationBar](img/B05162_03_09.jpg)'
- en: For a more detailed guide on Navigator, check out the React Native documentation
    at [https://facebook.github.io/react-native/docs/navigator.html](https://facebook.github.io/react-native/docs/navigator.html).
    We now have the proper infrastructure to go ahead and start adding the create
    note functionality to our application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取关于Navigator的更详细指南，请查看React Native文档[https://facebook.github.io/react-native/docs/navigator.html](https://facebook.github.io/react-native/docs/navigator.html)。我们现在有了适当的基础设施，可以开始向我们的应用程序添加创建笔记的功能。
- en: The NoteScreen – first pass
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoteScreen – 第一次尝试
- en: Now that we have a `NoteScreen` and can navigate to it, let's start making it
    useful. We'll need to add some `TextInput` components, one for the title of the
    note and one to capture the body. We'll want to automatically set focus on the
    `TextInput` for the title, so the user can start typing right away. We'll need
    to listen to events on the `TextInput` components, so we can keep a track of what
    the user has typed by updating the state. We'd also like to know when the user
    has finished editing the title of the note, so that we can automatically set focus
    on the `TextInput` for the body.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`NoteScreen`并且可以导航到它，让我们开始让它变得有用。我们需要添加一些`TextInput`组件，一个用于笔记的标题，一个用于捕获正文。我们希望自动将焦点设置在标题的`TextInput`上，以便用户可以立即开始输入。我们需要监听`TextInput`组件上的事件，以便通过更新状态来跟踪用户输入的内容。我们还希望知道用户何时完成了笔记标题的编辑，这样我们就可以自动将焦点设置在正文的`TextInput`上。
- en: 'First, let''s add the `TextInput` component to our list of dependencies and
    remove the `Text` component since we no longer need it:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将`TextInput`组件添加到我们的依赖列表中，并移除不再需要的`Text`组件：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before we add the `TextInput` components to the `View`, let''s get a few style
    updates out of the way:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将`TextInput`组件添加到`View`之前，让我们先处理一些样式更新：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Note that we''ve added a `marginTop: 64` to the container. This is important
    because we want to make sure that the `NavigationBar` doesn''t accidentally intercept
    the `onPress` events we want our `TextInput` to receive. We''ve also added styles
    for each of the `TextInputs` we''re about to add. We''ll talk more about styles
    in detail in [Chapter 4](ch04.html "Chapter 4. Working with Styles and Layout"),
    *Working with Styles and Layout*.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，我们在容器中添加了`marginTop: 64`。这很重要，因为我们想确保`NavigationBar`不会意外地拦截我们希望`TextInput`接收的`onPress`事件。我们还为即将添加的每个`TextInput`添加了样式。我们将在[第4章](ch04.html
    "第4章。使用样式和布局")中更详细地讨论样式，*使用样式和布局*。'
- en: 'Now, in our render function, let''s replace the `Text` component with two `TextInput`
    components, such as:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的渲染函数中，让我们将`Text`组件替换为两个`TextInput`组件，例如：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Before we try this out, notice that the `TextInput` component has a placeholder
    property that allows us to tell the user what the `TextInput` is for without having
    to take up additional screen real estate by labeling our form fields. I've also
    specified `multiline={true}` on the second `TextInput` so the user can add as
    much text as they want.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们尝试之前，请注意 `TextInput` 组件有一个占位符属性，它允许我们告诉用户 `TextInput` 的用途，而无需通过标签我们的表单字段来占用额外的屏幕空间。我还在第二个
    `TextInput` 上指定了 `multiline={true}`，以便用户可以添加他们想要的任意多的文本。
- en: 'Now let''s refresh the application in the simulator and you should see something
    like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在模拟器中刷新应用程序，你应该会看到类似这样的内容：
- en: '![The NoteScreen – first pass](img/B05162_03_10.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![NoteScreen – 第一次尝试](img/B05162_03_10.jpg)'
- en: You should be able to click into `TextInput` and start typing. If you'd like
    to use the on-screen keyboard available in the simulator, you can press *Cmd*+*K*
    / *Ctrl*+*K*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够点击进入 `TextInput` 并开始输入。如果您想在模拟器中使用可用的屏幕键盘，可以按 *Cmd*+*K* / *Ctrl*+*K*。
- en: 'Let''s improve the user experience a little bit by making the title `TextInput`
    focus automatically and show the keyboard when the user navigates to the `NoteScreen`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使标题 `TextInput` 自动聚焦并显示键盘，当用户导航到 `NoteScreen` 时来稍微提升用户体验：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To be even more user friendly, let''s listen for the event that tells us the
    user has finished editing the title and automatically set focus on the body `TextInput`.
    To do that we''ll need to make a slight change to the body `TextInput` so that
    we can refer to it in our event handler:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更加用户友好，让我们监听一个事件，告诉我们用户已经完成了标题的编辑，并自动将焦点设置在主体 `TextInput` 上。为此，我们需要对主体 `TextInput`
    进行一些小的修改，以便我们可以在事件处理器中引用它：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Notice the `ref="body"`. Any React component can be given a `ref` so that it
    can be referenced in your `javascript` code. Now, in the title `TextInput`, we
    can add an `onEndEditing` event handler that sets focus on the `TextInput` body:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `ref="body"`。任何 React 组件都可以被赋予一个 `ref`，以便在您的 `javascript` 代码中引用。现在，在标题 `TextInput`
    中，我们可以添加一个 `onEndEditing` 事件处理器，以便将焦点设置在 `TextInput` 的主体上：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Avoid using refs to set and get values on your components! That's what `state`
    is for and we'll learn all about state in [Chapter 5](ch05.html "Chapter 5. Displaying
    and Saving Data"), *Displaying and Saving Data*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在组件上使用 `refs` 来设置和获取值！那是 `state` 的用途，我们将在第 5 章 [显示和保存数据](ch05.html "第 5 章。显示和保存数据")中学习所有关于
    `state` 的内容。
- en: Now when you refresh the application in the simulator and navigate to the `NoteScreen`,
    you will see that the title `TextInput` has focus and you should be able to type
    something. Press *Enter* and see the focus automatically switch to the body and
    start typing there as well. If you're not seeing the on-screen keyboard when you
    try this, press *Cmd* + *K* / *Ctrl* + *K* and try again.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您在模拟器中刷新应用程序并导航到 `NoteScreen` 时，您将看到标题 `TextInput` 有焦点，并且您应该能够输入一些内容。按 *Enter*
    键，您会看到焦点自动切换到主体，并开始在那里输入。如果您在尝试此操作时没有看到屏幕键盘，请按 *Cmd* + *K* / *Ctrl* + *K* 并再次尝试。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have created the skeleton of our `ReactNotes` application,
    walked you through how to create a new project, created `Views` and custom components,
    navigated between the `HomeScreen` and `NoteScreen`, and debugged your application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了 `ReactNotes` 应用程序的骨架，向您介绍了如何创建新项目，创建了 `Views` 和自定义组件，在 `HomeScreen`
    和 `NoteScreen` 之间导航，并调试了您的应用程序。
- en: You now have a solid foundation for all of the topics we'll introduce throughout
    the rest of the book. However, there are two big problems with this application,
    it's not pretty and it doesn't do anything! In the next two chapters, we'll solve
    both of those problems and you'll be well on your way to master React Native!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经为我们将在本书的其余部分介绍的所有主题打下了坚实的基础。然而，这个应用程序有两个大问题，它不够美观，而且没有任何功能！在接下来的两个章节中，我们将解决这两个问题，您将朝着掌握
    React Native 的道路迈进！
