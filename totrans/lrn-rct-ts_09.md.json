["```js\nnpm i -D json-server\n```", "```js\n{\n  \"posts\": [\n    {\n      \"title\": \"Getting started with fetch\",\n      \"description\": \"How to interact with backend APIs using         fetch\",\n      \"id\": 1\n    },\n    {\n      \"title\": \"Getting started with useEffect\",\n      \"description\": \"How to use React's useEffect hook for         interacting with backend APIs\",\n      \"id\": 2\n    }\n  ]\n}\n```", "```js\n{\n  ...,\n  \"scripts\": {\n    ...,\n    \"server\": \"json-server --watch db.json --port 3001 --delay       2000\"\n  },\n  ...\n}\n```", "```js\nnpm run server\n```", "```js\n    REACT_APP_API_URL = http://localhost:3001/posts/\n    ```", "```js\n    export async function getPosts() {\n    ```", "```js\n      const response = await fetch(\n    ```", "```js\n        process.env.REACT_APP_API_URL!\n    ```", "```js\n      );\n    ```", "```js\n      const body = await response.json()\n    ```", "```js\n      return body;\n    ```", "```js\n    }\n    ```", "```js\n    export async function getPosts() {\n    ```", "```js\n      const response = await fetch(postsUrl);\n    ```", "```js\n      const body = (await response.json()) as unknown;\n    ```", "```js\n      return body;\n    ```", "```js\n    }\n    ```", "```js\n    export function assertIsPosts(\n    ```", "```js\n      postsData: unknown\n    ```", "```js\n        ): asserts postsData is PostData[] {\n    ```", "```js\n    }\n    ```", "```js\n    export function assertIsPosts(\n    ```", "```js\n      postsData: unknown\n    ```", "```js\n    ): asserts postsData is PostData[] {\n    ```", "```js\n      if (!Array.isArray(postsData)) {\n    ```", "```js\n        throw new Error(\"posts isn't an array\");\n    ```", "```js\n      }\n    ```", "```js\n      if (postsData.length === 0) {\n    ```", "```js\n        return;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    export function assertIsPosts(\n    ```", "```js\n      postsData: unknown\n    ```", "```js\n    ): asserts postsData is PostData[] {\n    ```", "```js\n      ...\n    ```", "```js\n      postsData.forEach((post) => {\n    ```", "```js\n        if (!('id' in post)) {\n    ```", "```js\n          throw new Error(\"post doesn't contain id\");\n    ```", "```js\n        }\n    ```", "```js\n        if (typeof post.id !== 'number') {\n    ```", "```js\n          throw new Error('id is not a number');\n    ```", "```js\n        }\n    ```", "```js\n      });\n    ```", "```js\n    }\n    ```", "```js\n    export function assertIsPosts(\n    ```", "```js\n      postsData: unknown\n    ```", "```js\n    ): asserts postsData is PostData[] {\n    ```", "```js\n      …\n    ```", "```js\n      postsData.forEach((post) => {\n    ```", "```js\n        ...\n    ```", "```js\n        if '!('ti'le' in post)) {\n    ```", "```js\n          throw new Err\"r(\"post do'sn't contain ti\"le\");\n    ```", "```js\n        }\n    ```", "```js\n        if (typeof post.title !'= 'str'ng') {\n    ```", "```js\n          throw new Err'r('title is not a str'ng');\n    ```", "```js\n        }\n    ```", "```js\n        if '!('descript'on' in post)) {\n    ```", "```js\n          throw new Err\"r(\"post do'sn't contain         descript\"on\");\n    ```", "```js\n        }\n    ```", "```js\n        if (typeof post.description !'= 'str'ng') {\n    ```", "```js\n          throw new Err'r('description is not a str'ng');\n    ```", "```js\n        }\n    ```", "```js\n      });\n    ```", "```js\n    }\n    ```", "```js\n    export async function getPosts() {\n    ```", "```js\n      const response = await fetch(postsUrl);\n    ```", "```js\n      const body = (await response.json()) as unknown;\n    ```", "```js\n      assertIsPosts(body);\n    ```", "```js\n      return body;\n    ```", "```js\n    }\n    ```", "```js\n    import { PostData } from './types';\n    ```", "```js\n    export type PostData = {\n    ```", "```js\n      id: number;\n    ```", "```js\n      title: string;\n    ```", "```js\n      description: string;\n    ```", "```js\n    };\n    ```", "```js\n    import { PostData } from './types';\n    ```", "```js\n    type Props = {\n    ```", "```js\n      posts: PostData[];\n    ```", "```js\n    };\n    ```", "```js\n    export function PostsList({ posts }: Props) {\n    ```", "```js\n    }\n    ```", "```js\n    export function PostsList({ posts }: Props) {\n    ```", "```js\n      return (\n    ```", "```js\n        <ul className=\"list-none\">\n    ```", "```js\n          {posts.map((post) => (\n    ```", "```js\n            <li key={post.id} className=\"border-b py-4\">\n    ```", "```js\n              <h3 className=\"text-slate-900 font-bold\">\n    ```", "```js\n                {post.title}\n    ```", "```js\n              </h3>\n    ```", "```js\n              <p className=\" text-slate-900 \">{post.description}</p>\n    ```", "```js\n            </li>\n    ```", "```js\n          ))}\n    ```", "```js\n        </ul>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    import { useEffect, useState } from 'react';\n    ```", "```js\n    import { getPosts } from './getPosts';\n    ```", "```js\n    import { PostData } from './types';\n    ```", "```js\n    import { PostsList } from './PostsList';\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      const [isLoading, setIsLoading] = useState(true);\n    ```", "```js\n      const [posts, setPosts] = useState<PostData[]>([]);\n    ```", "```js\n    }\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      …\n    ```", "```js\n      useEffect(() => {\n    ```", "```js\n        let cancel = false;\n    ```", "```js\n        getPosts().then((data) => {\n    ```", "```js\n          if (!cancel) {\n    ```", "```js\n            setPosts(data);\n    ```", "```js\n            setIsLoading(false);\n    ```", "```js\n          }\n    ```", "```js\n        });\n    ```", "```js\n        return () => {\n    ```", "```js\n          cancel = true;\n    ```", "```js\n        };\n    ```", "```js\n      }, []);\n    ```", "```js\n    }\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      ...\n    ```", "```js\n      useEffect(...);\n    ```", "```js\n      if (isLoading) {\n    ```", "```js\n        return (\n    ```", "```js\n          <div className=\"w-96 mx-auto mt-6\">\n    ```", "```js\n            Loading ...\n    ```", "```js\n          </div>\n    ```", "```js\n        );\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      ...\n    ```", "```js\n      if (isLoading) {\n    ```", "```js\n        return (\n    ```", "```js\n          <div className=\"w-96 mx-auto mt-6\">\n    ```", "```js\n            Loading ...\n    ```", "```js\n          </div>\n    ```", "```js\n        );\n    ```", "```js\n      }\n    ```", "```js\n      return (\n    ```", "```js\n        <div className=\"w-96 mx-auto mt-6\">\n    ```", "```js\n          <h2 className=\"text-xl text-slate-900 font-bold\">Posts</h2>\n    ```", "```js\n          <PostsList posts={posts} />\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    import { PostsPage } from './posts/PostsPage';\n    ```", "```js\n    function App() {\n    ```", "```js\n      return <PostsPage />;\n    ```", "```js\n    }\n    ```", "```js\n    export default App;\n    ```", "```js\n    export type NewPostData = {\n    ```", "```js\n      title: string;\n    ```", "```js\n      description: string;\n    ```", "```js\n    };\n    ```", "```js\n    export type SavedPostData = {\n    ```", "```js\n      id: number;\n    ```", "```js\n    };\n    ```", "```js\n    import { NewPostData, SavedPostData } from './types';\n    ```", "```js\n    export async function savePost(\n    ```", "```js\n      newPostData: NewPostData\n    ```", "```js\n    ) {\n    ```", "```js\n      const response = await fetch(\n    ```", "```js\n        process.env.REACT_APP_API_URL!,\n    ```", "```js\n        {\n    ```", "```js\n          method: 'POST',\n    ```", "```js\n          body: JSON.stringify(newPostData),\n    ```", "```js\n          headers: {\n    ```", "```js\n            'Content-Type': 'application/json',\n    ```", "```js\n          },\n    ```", "```js\n        }\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export async function savePost(newPostData: NewPostData) {\n    ```", "```js\n      const response = await fetch( ... );\n    ```", "```js\n      const body = (await response.json()) as unknown;\n    ```", "```js\n      assertIsSavedPost(body);\n    ```", "```js\n    }\n    ```", "```js\n    export async function savePost(newPostData: NewPostData) {\n    ```", "```js\n      ...\n    ```", "```js\n      return { ...newPostData, ...body };\n    ```", "```js\n    }\n    ```", "```js\n    function assertIsSavedPost(\n    ```", "```js\n      post: any\n    ```", "```js\n    ): asserts post is SavedPostData {\n    ```", "```js\n      if (!('id' in post)) {\n    ```", "```js\n        throw new Error(\"post doesn't contain id\");\n    ```", "```js\n      }\n    ```", "```js\n      if (typeof post.id !== 'number') {\n    ```", "```js\n        throw new Error('id is not a number');\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    import { FieldError } from 'react-hook-form';\n    ```", "```js\n    type Props = {\n    ```", "```js\n      fieldError: FieldError | undefined,\n    ```", "```js\n    };\n    ```", "```js\n    export function ValidationError({ fieldError }: Props) {\n    ```", "```js\n      if (!fieldError) {\n    ```", "```js\n        return null;\n    ```", "```js\n      }\n    ```", "```js\n      return (\n    ```", "```js\n        <div role=\"alert\" className=\"text-red-500 text-xs       mt-1\">\n    ```", "```js\n          {fieldError.message}\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    import { FieldError, useForm } from 'react-hook-form';\n    ```", "```js\n    import { ValidationError } from './ValidationError';\n    ```", "```js\n    import { NewPostData } from './types';\n    ```", "```js\n    type Props = {\n    ```", "```js\n      onSave: (newPost: NewPostData) => void;\n    ```", "```js\n    };\n    ```", "```js\n    export function NewPostForm({ onSave }: Props) {\n    ```", "```js\n    }\n    ```", "```js\n    type Props = {\n    ```", "```js\n      onSave: (newPost: NewPostData) => void;\n    ```", "```js\n    };\n    ```", "```js\n    export function NewPostForm({ onSave }: Props) {\n    ```", "```js\n      const {\n    ```", "```js\n        register,\n    ```", "```js\n        handleSubmit,\n    ```", "```js\n        formState: { errors, isSubmitting, isSubmitSuccessful },\n    ```", "```js\n      } = useForm<NewPostData>();\n    ```", "```js\n    }\n    ```", "```js\n    export function NewPostForm({ onSave }: Props) {\n    ```", "```js\n      ...\n    ```", "```js\n      const fieldStyle = 'flex flex-col mb-2';\n    ```", "```js\n      function getEditorStyle(\n    ```", "```js\n        fieldError: FieldError | undefined\n    ```", "```js\n      ) {\n    ```", "```js\n        return fieldError ? 'border-red-500' : '';\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    export function NewPostForm({ onSave }: Props) {\n    ```", "```js\n      ...\n    ```", "```js\n      return (\n    ```", "```js\n        <form\n    ```", "```js\n          noValidate\n    ```", "```js\n          className=\"border-b py-4\"\n    ```", "```js\n          onSubmit={handleSubmit(onSave)}\n    ```", "```js\n        >\n    ```", "```js\n          <div className={fieldStyle}>\n    ```", "```js\n            <label htmlFor=\"title\">Title</label>\n    ```", "```js\n            <input\n    ```", "```js\n              type=\"text\"\n    ```", "```js\n              id=\"title\"\n    ```", "```js\n              {...register('title', {\n    ```", "```js\n                required: 'You must enter a title',\n    ```", "```js\n              })}\n    ```", "```js\n              className={getEditorStyle(errors.title)}\n    ```", "```js\n            />\n    ```", "```js\n            <ValidationError fieldError={errors.title} />\n    ```", "```js\n          </div>\n    ```", "```js\n          <div className={fieldStyle}>\n    ```", "```js\n            <label htmlFor=\"description\">Description</label>\n    ```", "```js\n            <textarea\n    ```", "```js\n              id=\"description\"\n    ```", "```js\n              {...register('description', {\n    ```", "```js\n                required: 'You must enter the description',\n    ```", "```js\n              })}\n    ```", "```js\n              className={getEditorStyle(errors.description)}\n    ```", "```js\n            />\n    ```", "```js\n            <ValidationError fieldError={errors.description}           />\n    ```", "```js\n          </div>\n    ```", "```js\n        </form>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    <form\n    ```", "```js\n      noValidate\n    ```", "```js\n      className=\"border-b py-4\"\n    ```", "```js\n      onSubmit={handleSubmit(onSave)}\n    ```", "```js\n    >\n    ```", "```js\n      <div className={fieldStyle}> ... </div>\n    ```", "```js\n      <div className={fieldStyle}> ... </div>\n    ```", "```js\n      <div className={fieldStyle}>\n    ```", "```js\n        <button\n    ```", "```js\n          type=\"submit\"\n    ```", "```js\n          disabled={isSubmitting}\n    ```", "```js\n          className=\"mt-2 h-10 px-6 font-semibold bg-black         text-white\"\n    ```", "```js\n        >\n    ```", "```js\n          Save\n    ```", "```js\n       </button>\n    ```", "```js\n        {isSubmitSuccessful && (\n    ```", "```js\n          <div\n    ```", "```js\n            role=\"alert\"\n    ```", "```js\n            className=\"text-green-500 text-xs mt-1\"\n    ```", "```js\n          >\n    ```", "```js\n            The post was successfully saved\n    ```", "```js\n         </div>\n    ```", "```js\n        )}\n    ```", "```js\n      </div>\n    ```", "```js\n    </form>\n    ```", "```js\n    import { useEffect, useState } from 'react';\n    ```", "```js\n    import { getPosts } from './getPosts';\n    ```", "```js\n    import { PostData, NewPostData } from './types';\n    ```", "```js\n    import { PostsList } from './PostsList';\n    ```", "```js\n    import { savePost } from './savePost';\n    ```", "```js\n    import { NewPostForm } from './NewPostForm';\n    ```", "```js\n    <div className=\"w-96 mx-auto mt-6\">\n    ```", "```js\n      <h2 className=\"text-xl text-slate-900 font-    bold\">Posts</h2>\n    ```", "```js\n      <NewPostForm onSave={handleSave} />\n    ```", "```js\n      <PostsList posts={posts} />\n    ```", "```js\n    </div>;\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      ...\n    ```", "```js\n    }, []);\n    ```", "```js\n    async function handleSave(newPostData: NewPostData) {\n    ```", "```js\n      const newPost = await savePost(newPostData);\n    ```", "```js\n      setPosts([newPost, ...posts]);\n    ```", "```js\n    }\n    ```", "```js\nconst router = createBrowserRouter([\n  ...,\n  {\n    path: '/some-page',\n    element: <SomePage />,\n    loader: async () => {\n      const response = fetch('https://somewhere');\n      return await response.json();\n    }\n  },\n  ...\n]);\n```", "```js\nexport function SomePage() {\n  const data = useLoaderData();\n  ...\n}\n```", "```js\n    import {\n    ```", "```js\n      createBrowserRouter,\n    ```", "```js\n      RouterProvider\n    ```", "```js\n    } from 'react-router-dom';\n    ```", "```js\n    import { getPosts } from './posts/getPosts';\n    ```", "```js\n    const router = createBrowserRouter([\n    ```", "```js\n      {\n    ```", "```js\n        path: \"/\",\n    ```", "```js\n        element: <PostsPage />,\n    ```", "```js\n        loader: getPosts\n    ```", "```js\n      }\n    ```", "```js\n    ]);\n    ```", "```js\n    function App() {\n    ```", "```js\n      return <RouterProvider router={router} />;\n    ```", "```js\n    }\n    ```", "```js\n    import { assertIsPosts } from './getPosts';\n    ```", "```js\n    import { useLoaderData } from 'react-router-dom';\n    ```", "```js\n    async function handleSave(newPostData: NewPostData) {\n    ```", "```js\n      await savePost(newPostData);\n    ```", "```js\n    }\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      const posts = useLoaderData();\n    ```", "```js\n      …\n    ```", "```js\n    }\n    ```", "```js\n    const posts = useLoaderData();\n    ```", "```js\n    assertIsPosts(posts);\n    ```", "```js\n    import {\n    ```", "```js\n      createBrowserRouter,\n    ```", "```js\n      RouterProvider,\n    ```", "```js\n      defer\n    ```", "```js\n    } from 'react-router-dom';\n    ```", "```js\n    const router = createBrowserRouter([\n    ```", "```js\n      {\n    ```", "```js\n        path: \"/\",\n    ```", "```js\n        element: ...,\n    ```", "```js\n        loader: async () => defer({ posts: getPosts() })\n    ```", "```js\n      }\n    ```", "```js\n    ]);\n    ```", "```js\n    import { Suspense } from 'react';\n    ```", "```js\n    import { useLoaderData, Await } from 'react-router-dom';\n    ```", "```js\n    const data = useLoaderData();\n    ```", "```js\n    type Data = {\n    ```", "```js\n      posts: PostData[];\n    ```", "```js\n    };\n    ```", "```js\n    export function assertIsData(\n    ```", "```js\n      data: unknown\n    ```", "```js\n    ): asserts data is Data {\n    ```", "```js\n      if (typeof data !== 'object') {\n    ```", "```js\n        throw new Error(\"Data isn't an object\");\n    ```", "```js\n      }\n    ```", "```js\n      if (data === null) {\n    ```", "```js\n        throw new Error('Data is null');\n    ```", "```js\n      }\n    ```", "```js\n      if (!('posts' in data)) {\n    ```", "```js\n        throw new Error(\"data doesn't contain posts\");\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    const data = useLoaderData();\n    ```", "```js\n    assertIsData(data);\n    ```", "```js\n    <Suspense fallback={<div>Fetching...</div>}>\n    ```", "```js\n      <Await resolve={data.posts}>\n    ```", "```js\n        {(posts) => {\n    ```", "```js\n          assertIsPosts(posts);\n    ```", "```js\n          return <PostsList posts={posts} />;\n    ```", "```js\n        }}\n    ```", "```js\n      </Await>\n    ```", "```js\n    </Suspense>\n    ```", "```js\nnpm i @tanstack/react-query\n```", "```js\n    import {\n    ```", "```js\n      QueryClient,\n    ```", "```js\n      QueryClientProvider,\n    ```", "```js\n    } from '@tanstack/react-query';\n    ```", "```js\n    const queryClient = new QueryClient();\n    ```", "```js\n    const router = createBrowserRouter( ... );\n    ```", "```js\n    function App() {\n    ```", "```js\n      return (\n    ```", "```js\n        <QueryClientProvider client={queryClient}>\n    ```", "```js\n          <RouterProvider router={router} />\n    ```", "```js\n        </QueryClientProvider>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    import { useQuery } from '@tanstack/react-query';\n    ```", "```js\n    import { assertIsPosts, getPosts } from './getPosts';\n    ```", "```js\n    // const data = useLoaderData();\n    ```", "```js\n    // assertIsData(data);\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      const {\n    ```", "```js\n        isLoading,\n    ```", "```js\n        isFetching,\n    ```", "```js\n        data: posts,\n    ```", "```js\n      } = useQuery(['postsData'], getPosts);\n    ```", "```js\n      // const data = useLoaderData();\n    ```", "```js\n      // assertIsData(data);\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    if (isLoading || posts === undefined) {\n    ```", "```js\n      return (\n    ```", "```js\n        <div className=\"w-96 mx-auto mt-6\">\n    ```", "```js\n          Loading ...\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    return ...\n    ```", "```js\n    return (\n    ```", "```js\n      <div className=\"w-96 mx-auto mt-6\">\n    ```", "```js\n        <h2 className=\"text-xl text-slate-900 font-      bold\">Posts</h2>\n    ```", "```js\n        <NewPostForm onSave={mutate} />\n    ```", "```js\n        {/* <Suspense fallback={<div>Fetching ...</div>}>\n    ```", "```js\n            <Await resolve={data.posts}           errorElement={<p>Error!</p>}>\n    ```", "```js\n              {(posts) => {\n    ```", "```js\n                assertIsPosts(posts);\n    ```", "```js\n                return <PostsList posts={posts} />;\n    ```", "```js\n              }}\n    ```", "```js\n            </Await>\n    ```", "```js\n          </Suspense> */}\n    ```", "```js\n      </div>\n    ```", "```js\n    );\n    ```", "```js\n    <div className=\"w-96 mx-auto mt-6\">\n    ```", "```js\n      <h2 className=\"text-xl text-slate-900 font-    bold\">Posts</h2>\n    ```", "```js\n      <NewPostForm onSave={handleSave} />\n    ```", "```js\n      {isFetching ? (\n    ```", "```js\n        <div>Fetching ...</div>\n    ```", "```js\n      ) : (\n    ```", "```js\n        <PostsList posts={posts} />\n    ```", "```js\n      )}\n    ```", "```js\n      ...\n    ```", "```js\n    </div>\n    ```", "```js\n    <PostsList posts={posts} />\n    ```", "```js\n    import {\n    ```", "```js\n      useQuery,\n    ```", "```js\n      useMutation,\n    ```", "```js\n      useQueryClient,\n    ```", "```js\n    } from '@tanstack/react-query';\n    ```", "```js\n    const {\n    ```", "```js\n      isLoading,\n    ```", "```js\n      data: posts,\n    ```", "```js\n      isFetching,\n    ```", "```js\n    } = useQuery(['postsData'], getPosts);\n    ```", "```js\n    const { mutate } = useMutation(savePost);\n    ```", "```js\n    const queryClient = useQueryClient();\n    ```", "```js\n    const { mutate } = useMutation(savePost, {\n    ```", "```js\n      onSuccess: (savedPost) => {\n    ```", "```js\n        queryClient.setQueryData<PostData[]>(\n    ```", "```js\n          ['postsData'],\n    ```", "```js\n          (oldPosts) => {\n    ```", "```js\n            if (oldPosts === undefined) {\n    ```", "```js\n              return [savedPost];\n    ```", "```js\n            } else {\n    ```", "```js\n              return [savedPost, ...oldPosts];\n    ```", "```js\n            }\n    ```", "```js\n          }\n    ```", "```js\n        );\n    ```", "```js\n      },\n    ```", "```js\n    });\n    ```", "```js\n    <NewPostForm onSave={mutate} />\n    ```", "```js\n    import { PostData } from './types';\n    ```", "```js\n    const router = createBrowserRouter([\n    ```", "```js\n      {\n    ```", "```js\n        path: '/',\n    ```", "```js\n        element: ...,\n    ```", "```js\n        loader: async () => {\n    ```", "```js\n          const existingData = queryClient.getQueryData([\n    ```", "```js\n            'postsData',\n    ```", "```js\n          ]);\n    ```", "```js\n          if (existingData) {\n    ```", "```js\n            return defer({ posts: existingData });\n    ```", "```js\n          }\n    ```", "```js\n          return defer({\n    ```", "```js\n            posts: queryClient.fetchQuery(\n    ```", "```js\n              ['postsData'],\n    ```", "```js\n              getPosts\n    ```", "```js\n            )\n    ```", "```js\n          });\n    ```", "```js\n        }\n    ```", "```js\n      }\n    ```", "```js\n    ])\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      const queryClient = useQueryClient();\n    ```", "```js\n      const { mutate } = useMutation( ... );\n    ```", "```js\n      const data = useLoaderData();\n    ```", "```js\n      assertIsData(data);\n    ```", "```js\n      return ...\n    ```", "```js\n    }\n    ```", "```js\n    <div className=\"w-96 max-w-xl mx-auto mt-6\">\n    ```", "```js\n      <h2 className=\"text-xl text-slate-900 font-bold\">\n    ```", "```js\n        Posts\n    ```", "```js\n      </h2>\n    ```", "```js\n      <NewPostForm onSave={mutate} />\n    ```", "```js\n      <Suspense fallback={<div>Fetching ...</div>}>\n    ```", "```js\n        <Await resolve={data.posts}>\n    ```", "```js\n          {(posts) => {\n    ```", "```js\n            assertIsPosts(posts);\n    ```", "```js\n            return <PostsList posts={posts} />;\n    ```", "```js\n          }}\n    ```", "```js\n        </Await>\n    ```", "```js\n      </Suspense>\n    ```", "```js\n    </div>\n    ```", "```js\n    import {\n    ```", "```js\n      useLoaderData,\n    ```", "```js\n      Await,\n    ```", "```js\n      useNavigate\n    ```", "```js\n    } from 'react-router-dom';\n    ```", "```js\n    ...\n    ```", "```js\n    export function PostsPage() {\n    ```", "```js\n      const navigate = useNavigate();\n    ```", "```js\n      const queryClient = useQueryClient();\n    ```", "```js\n      const { mutate } = useMutation(savePost, {\n    ```", "```js\n        onSuccess: (savedPost) => {\n    ```", "```js\n          queryClient.setQueryData<PostData[]>(\n    ```", "```js\n            ['postsData'],\n    ```", "```js\n            (oldPosts) => {\n    ```", "```js\n              if (oldPosts === undefined) {\n    ```", "```js\n                return [savedPost];\n    ```", "```js\n              } else {\n    ```", "```js\n                return [savedPost, ...oldPosts];\n    ```", "```js\n              }\n    ```", "```js\n            }\n    ```", "```js\n          );\n    ```", "```js\n          navigate('/');\n    ```", "```js\n        },\n    ```", "```js\n      });\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    useEffect(async () => {\n    ```", "```js\n      const response = await fetch('https://some-rest-api/');\n    ```", "```js\n      const data = await response.json();\n    ```", "```js\n      setData(data);\n    ```", "```js\n    }, []);\n    ```", "```js\n    export async function getFirstNames() {\n    ```", "```js\n      const response = await fetch('https://some-    firstnames/');\n    ```", "```js\n      const body = await response.json();\n    ```", "```js\n      return body;\n    ```", "```js\n    }\n    ```", "```js\n    fetch(url, {\n    ```", "```js\n      method: ???,\n    ```", "```js\n      body: JSON.stringify(data),\n    ```", "```js\n    });\n    ```", "```js\nuseEffect(() => {\n  let cancel = false;\n  fetch('https://some-rest-api/')\n    .then((response) => data.json())\n    .then((data) => {\n      if (!cancel) {\n        setData(data);\n      }\n    });\n  return () => {\n    cancel = true;\n  };\n}, []);\n```", "```js\n    export async function getFirstNames() {\n    ```", "```js\n      const response = await fetch('https://some-    firstnames/');\n    ```", "```js\n      const body = await response.json();\n    ```", "```js\n      assertIsFirstNames(body);\n    ```", "```js\n      return body;\n    ```", "```js\n    }\n    ```", "```js\n    function assertIsFirstNames(\n    ```", "```js\n      firstNames: unknown\n    ```", "```js\n    ): asserts firstNames is string[] {\n    ```", "```js\n      if (!Array.isArray(firstNames)) {\n    ```", "```js\n        throw new Error('firstNames isn't an array');\n    ```", "```js\n      }\n    ```", "```js\n      if (firstNames.length === 0) {\n    ```", "```js\n        return;\n    ```", "```js\n      }\n    ```", "```js\n      firstNames.forEach((firstName) => {\n    ```", "```js\n        if (typeof firstName !== 'string') {\n    ```", "```js\n          throw new Error('firstName is not a string');\n    ```", "```js\n        }\n    ```", "```js\n      });\n    ```", "```js\n    }\n    ```", "```js\n    fetch(url, {\n    ```", "```js\n      method: 'PUT',\n    ```", "```js\n      body: JSON.stringify(data),\n    ```", "```js\n    });\n    ```", "```js\n    fetch(url, {\n    ```", "```js\n      headers: {\n    ```", "```js\n        Authorization: 'Bearer some-bearer-token',\n    ```", "```js\n        'Content-Type': 'application/json',\n    ```", "```js\n      },\n    ```", "```js\n    });\n    ```"]