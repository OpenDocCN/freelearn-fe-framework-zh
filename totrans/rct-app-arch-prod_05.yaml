- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocking the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we built the application pages that use test data.
    The UI of the pages is complete, but the pages are not functional yet. We are
    using the test data without making requests to the API.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn what mocking is and why it is useful. We will
    learn how to mock the API endpoints with the `msw` library, a great tool that
    allows us to create mocked API endpoints that behave as real-world API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn how to model the data of our application entities with the
    `@``mswjs/data` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why is mocking useful?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to MSW
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring data models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring request handlers for API endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will learn how to generate fully featured mocked
    APIs with data models set in place, which will make our code base less dependent
    on external APIs during development.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get started, we need to set up our project. To be able to develop
    our project, we will need the following things installed on our computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** version 16 or above and **npm** version 8 or above'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are multiple ways to install Node.js and npm. Here is a great article
    that goes into more detail: [https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VS Code**) (optional) is currently the most popular
    editor/IDE for JavaScript/TypeScript, so we will be using it. It is open source,
    has great integration with TypeScript, and we can extend its features via extensions.
    It can be downloaded from here: [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository can be cloned locally with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the repository is cloned, we need to install the application’s dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can provide the environment variables using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the dependencies have been installed, we need to select the right stage
    of the code base that matches this chapter. We can do that by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will prompt us with a list of stages for each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the fifth chapter, so we can select `chapter-05-start` if we want to
    follow along, or `chapter-05` to see the final results of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once the chapter has been selected, all files required to follow along with
    the chapter will appear.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the setup details, check out the `README.md` file.
  prefs: []
  type: TYPE_NORMAL
- en: Why is mocking useful?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mocking** is the process of simulating parts of the system, meaning they
    are not production-ready but fake versions that are useful for development and
    testing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may ask yourself, *Why do we want to bother with setting a mocked API?*
    There are several benefits of having the API mocked:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Independence of external services during development**: A web application
    usually consists of many different parts such as the frontend, the backend, external
    third-party APIs, and so on. When developing our frontends, we want to be as autonomous
    as possible without getting blocked by some parts of the system that are not functional.
    If the API of our application is broken or unfinished, we should still be able
    to proceed with developing the frontend part of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good for quick prototyping**: Mocked endpoints allow us to prototype the
    application quicker since they don''t require any additional setup such as the
    backend server, database, and so on. Very useful for building **proofs of concept**
    (**POCs**) and **minimum viable product** (**MVP**) applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offline development**: Having mocked API endpoints allows us to develop our
    application without an internet connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: We do not want to hit our real services while testing our frontends.
    That’s where mocked APIs become useful. We can build and test the entire functionality
    as if we were building it against a real API and then switch to the real one when
    in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For testing our API endpoints, we will use the **Mock Service Worker** (**MSW**)
    library, a great tool that allows us to mock endpoints in a very elegant way.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to MSW
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MSW** is a tool that allows us to create mocked APIs. It works as a service
    worker that intercepts any API request that has its mocked version defined. We
    can inspect the requests and responses in the **Network** tab of our browser the
    same way as if we were calling the real API.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a high-level overview of how it works, let’s take a look at the diagram
    provided on their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – MSW workflow diagram ](img/B17297_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – MSW workflow diagram
  prefs: []
  type: TYPE_NORMAL
- en: One great thing about MSW is that our application will behave the same as if
    it were using a real API, and it’s pretty trivial to switch to using the real
    API by turning mocked endpoints off and not intercepting requests.
  prefs: []
  type: TYPE_NORMAL
- en: Another great thing is that since the interception happens at the network level,
    we will still be able to inspect our requests in the **Network** tab of the browser
    dev tools.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We already have the MSW package installed as a dev dependency. The msw mocked
    API can be configured to work both in the browser and on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Browser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *browser* version of the mocked API can be used for running mocked endpoints
    during the development of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Initialization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The first thing that needs to be done is to create a service worker. This can
    be done by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will create a service worker at `public/mockServiceWorker.js`,
    which will intercept our requests in the browser and modify the responses accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the worker for the browser
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can now configure our worker to use the endpoints we will define in a couple
    of moments. Let’s open the `src/testing/mocks/browser.ts` file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding snippet will configure MSW to work with the provided handlers
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *server* version is used mostly during running automated tests since our
    test runner works in the Node environment instead of the browser. The server version
    is also useful for API calls executed on the server, which we will have for our
    application during server-side rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MSW for the server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s open the `src/testing/mocks/server.ts` file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding snippet will apply the handlers to the server version of our mocks.
  prefs: []
  type: TYPE_NORMAL
- en: Running MSW in the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have configured MSW, we need to make it run in our application.
    To do that, let’s open the `src/testing/mocks/initialize.ts` file and modify the
    `initializeMocks` function to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `initializeMocks` function is in charge of calling the proper MSW setup
    based on the environment it is being called in. If it is executed on the server,
    it will run the server version. Otherwise, it will start the browser version.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to integrate our mocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create an `src/lib/msw.tsx` file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here we defined `MSWWrapper`, which is a component that will wrap our application
    and initialize MSW and the MSW dev tools into the wrapped application.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can integrate it into our application by opening `src/pages/_app.tsx`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to add new imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we want to load `MSWWrapper` dynamically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let’s modify the `return` statement of our `App` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we will load the `MSWWrapper` component and wrap the content
    of the page only if the mocks are enabled. We are doing this to exclude MSW-related
    code for the production version of the application, which uses the real API and
    does not need the redundant MSW-related code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that MSW is running, let’s open the console. We should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – MSW running in our application ](img/B17297_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – MSW running in our application
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have successfully installed and integrated MSW in our application,
    let’s implement our first mocked endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first handler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To define mocked endpoints, we need to create request handlers. Think of request
    handlers as functions that determine whether a request should be intercepted and
    modified by mocking their responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create our first handler in the `src/testing/mocks/handlers/index.ts`
    file by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We are using the `rest` helper provided by `msw` to define our rest endpoints.
    We are using the `get` method, which accepts the path, and a callback, which will
    modify the response.
  prefs: []
  type: TYPE_NORMAL
- en: The handler callback will return a response with a status code of `200` and
    the response data set as `{ healthy:` `true }`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that our handler is working, let’s open the dev tools in the bottom-right
    corner and then select the health check endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Health check handler test selection ](img/B17297_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Health check handler test selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Sending the request should give us a response, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Health check handler test result ](img/B17297_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Health check handler test result
  prefs: []
  type: TYPE_NORMAL
- en: The **Devtools** widget is going to give us the ability to test our handlers
    without creating the UI in the application right away.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have MSW running properly in our application, it is time to create
    a data model for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring data models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For data modeling our application, we will be using the data library from MSW,
    which is very useful and simple to use to manipulate the data in a similar way
    an **object-relational mapper** (**ORM**) on the backend would.
  prefs: []
  type: TYPE_NORMAL
- en: To make our request handlers functional, we could just hardcode the responses,
    but where is the fun in that? With MSW and its data library, we can build a mocked
    backend that is fully functional with the business logic included should we decide
    to implement it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure our data models, let’s open the `src/testing/mocks/db.ts` file
    and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We are importing the `factory` and `primaryKey` functions from the `@mswjs/data`
    package. The `primaryKey` function allows us to define primary keys in our mocked
    database, and the `factory` function creates an in-memory database that we can
    use for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then access a bunch of different methods on each model that allow us
    to manipulate our data more easily, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It would also be great if we could pre-fill some data in the database so that
    we always had something to show in our application. To do that, we should seed
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open the `src/testing/mocks/seed-db.ts` file and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `seedDb` function will populate the database with test data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s execute it after our mocked endpoints have been initialized. Open `src/testing/mocks/initialize.ts`
    and call the function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To inspect the data in our database, we can open the **Data** tab in **Devtools**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Inspecting seeded data ](img/B17297_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Inspecting seeded data
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! Now, we have our database pre-filled with some test data. We can now
    create request handlers, which will interact with the database and consume the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring request handlers for API endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will define handlers for our application. As already mentioned,
    a handler in MSW is a function that, if defined, will intercept any matching requests,
    and instead of sending the requests to the network, it will modify them and return
    the mocked response.
  prefs: []
  type: TYPE_NORMAL
- en: API utils
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before getting started, let’s take a quick look at the `src/testing/mocks/utils.ts`
    file, which includes some utilities we will be using for handling the business
    logic of our API handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`authenticate` accepts user credentials, and if they are valid, it will return
    the user from the database together with the authentication token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getUser` returns a test user object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requireAuth` returns the current user if the token in the cookie is available.
    It can optionally throw an error if the token does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before getting started, let’s include all handlers in the configuration. Open
    the `src/testing/mocks/handlers/index.ts` file and change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We are including all handlers we will define in each of the handlers’ files
    and make them available to MSW.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can start working on the request handlers for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Auth handlers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the `auth` feature, we will need the following endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST /auth/login`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /auth/logout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /auth/me`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The endpoints for `auth` will be defined in the `src/test/mocks/handlers/auth.ts`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by importing the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let’s create a request handler for logging in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We are extracting the credentials and using them to get the user info and the
    token. Then, we attach the token to the cookie and return the user in the response
    with a 300 ms delay as the real API.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `httpOnly` cookie because it is safer since it is not accessible
    from the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, let’s create a logout handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The handler will just empty the cookie and return the response. Any subsequent
    requests to protected handlers will throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have an endpoint for fetching the currently authenticated user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The endpoint will extract the user from the token and return it in the response.
    In the end, we should export the handlers in order for them to be consumed by
    MSW:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Jobs handlers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the `jobs` feature, we will need the following endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /jobs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /jobs/:jobId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /jobs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The endpoints for `jobs` will be defined in the `src/test/mocks/handlers/jobs.ts`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by importing the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let’s implement a handler for fetching jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We are getting the organization ID from the search parameters and using that
    to get jobs for a given organization, which we return in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another endpoint we want to create is a job details endpoint. We can do that
    by creating the following handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We are getting the job ID from the URL parameters and using that to retrieve
    the given job from the database. If the job is not found, we return a `404` error.
    Otherwise, we return the job in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our application also needs an endpoint for creating jobs. We can create a handler
    for that, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We are first checking whether the user is authenticated since we don’t want
    to allow creation for unauthenticated users. Then, we get the job data from the
    request and use that to create a new job, which we then return in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we want to export the handlers to make them available for MSW:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Organizations handlers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the `organizations` feature, we will need the `GET /``organizations/:organizationId`
    endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: All handlers for this feature will be defined in the `src/test/mocks/handlers/organizations.ts`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by importing all required dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can implement the endpoint for getting organization details by adding
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We are getting the organization ID from URL parameters and using that to retrieve
    the given organization. If it doesn’t exist in the database, the handler will
    return a `404` error; otherwise, it will return the found organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the end, we must export the handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that we have all handlers defined, we can visit **Devtools** again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Mocked endpoints ](img/B17297_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Mocked endpoints
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now, we have all the required handlers to make our application work as
    if it were consuming the real API. Play around with the handlers to make sure
    that everything works as expected. In the next chapter, we will integrate these
    endpoints into the application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about mocking the API. We introduced the **MSW**
    library, which is a great tool for mocking APIs in an elegant way. It can work
    both in the browser and on the server. It is super useful for prototyping and
    testing the application during development.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will integrate the API layer of the application, which
    will consume the endpoints we just created.
  prefs: []
  type: TYPE_NORMAL
