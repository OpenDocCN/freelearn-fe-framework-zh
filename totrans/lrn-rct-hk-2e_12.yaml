- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Community Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the various built-in React Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about various Hooks provided by the community.
    First, we are going to learn about using Hooks to manage application state. Then,
    we will implement **debouncing** using Hooks. Next, we will learn about various
    utility Hooks. Finally, we are going to learn where to find more community Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks to manage application state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debouncing with Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about various utility Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding more community Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fairly recent version of Node.js should already be installed. The Node Package
    Manager (`npm`) also needs to be installed (it should come with Node.js). For
    more information on how to install Node.js, please check out their official website:
    [https://nodejs.org/](https://nodejs.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use **Visual Studio Code** (**VS Code**) for the guides in
    this book, but everything should work similarly in any other editor. For more
    information on how to install VS Code, please refer to their official website:
    [https://code.visualstudio.com](https://code.visualstudio.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we use the following versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js v22.14.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm` v10.9.2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code v1.97.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The versions mentioned in the preceding list are the ones used in the book.
    While installing a newer version should not be an issue, please note that certain
    steps might work differently on a newer version. If you are having an issue with
    the code and steps provided in this book, please try using the mentioned versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code for this chapter on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Learn-React-Hooks-Second-Edition/tree/main/Chapter10)'
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended that you write the code on your own. Do not simply
    run the code examples that are provided with the book. It is important to write
    the code yourself to be able to learn and understand it properly. However, if
    you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks to manage application state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we are going to learn about various community Hooks that help
    you manage application state. These Hooks are provided by [useHooks.com](https://www.useHooks.com),
    which is a collection of various useful Hooks packaged in a single library.
  prefs: []
  type: TYPE_NORMAL
- en: useLocalStorage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Local Storage Hook** allows you to store and retrieve data using the browser’s
    **LocalStorage API**. The LocalStorage API is a way to persistently store information
    in the user’s browser. We can use this to, for example, store information about
    the currently logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useLocalStorage` function has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the Local Storage Hook accepts a key (which is used to identify
    the data in local storage) and an initial value (which is a fallback used when
    there is no item with the given key in local storage). It then returns an API
    similar to the **State Hook**: The data itself, and a function to update data
    in local storage.'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we are simply going to store the username in local storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real application you should instead store a token, such as a **JSON Web
    Token** (**JWT**), and ideally store it in a Cookie instead of local storage.
    However, this would require a server and some full-stack knowledge. To learn more
    about full-stack projects with React including real-world authentication, please
    refer to my book: *Modern Full-Stack React Projects*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to get started storing the username in local storage:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter09_1` folder to a new `Chapter10_1` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter10_1` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the `useHooks` library, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the `src/contexts/UserContext.js` file. We are going to replace the
    `UserContext` with local storage now.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `src/App.jsx` and *remove* the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead, *replace* them with the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the following State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with a Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the `UserContext` by deleting the following highlighted lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/user/UserBar.jsx` and *remove* the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* them with an import to the `useLocalStorage` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, replace the Context Hook with a Local Storage Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/user/Register.jsx` and *replace* all imports with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, *replace* the Context Hook with a Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/user/Login.jsx` and *replace* all imports with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, *replace* the Context Hook with a Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/user/Logout.jsx` and *replace* all imports with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the Context Hook with a Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/CreatePost.jsx` and *remove* the `useContext` import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, *remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import of `useLocalStorage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the Context Hook with a Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/comment/CreateComment.jsx` and *replace* all imports with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, *replace* the Context Hook with a Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/comment/CommentList.jsx` and *remove* the `useContext`
    import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Remove* the following import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* it with an import of `useLocalStorage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Replace* the Context Hook with a Local Storage Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the blog app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that the registration, login and logout still work the same way
    as before, but there is now an added advantage: When refreshing the page, the
    user stays logged in until they press the **Logout** button!'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the Local Storage Hook is a great way to persistently store
    information in the browser!
  prefs: []
  type: TYPE_NORMAL
- en: useHistoryState
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **History State Hook** is an extended version of the State Hook, adding
    functionality to undo / redo changes to the state. It has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We provide an initial state to it, and it returns the current `state`, a function
    to `set` the state, an `undo` function to undo changes to the state, a `redo`
    function to redo changes, a `clear` function to reset the state to the initial
    state, and `canUndo` and `canRedo` flags to tell whether it is possible to undo/redo
    the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to understand this Hook is to try it out, so let’s get started
    implementing undo/redo functionality for our `CreatePost` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useHistoryState`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a History State Hook for the post content, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a handler function for when the content is changed by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define buttons to undo/redo and clear the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is important to add `type='button'` to all the buttons here. Otherwise, pressing
    those buttons will submit the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the `<textarea>` a controlled element by providing the `value` and `onChange`
    handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, inside the Action State Hook, call the `clear` function after the post
    was successfully created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we are dealing with a controlled element now, we need to clear its content
    ourselves. It is not done automatically on form submission anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the blog app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that there are now three new buttons, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Providing undo/redo/clear buttons when creating a post](img/B31327_10_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Providing undo/redo/clear buttons when creating a post
  prefs: []
  type: TYPE_NORMAL
- en: Try typing in some text into the field, and you will be able to undo/redo changes
    made to it! However, you may have noticed that only a single character at a time
    is undone/redone. Next, we are going to implement debouncing, which means that
    our changes will only be added to the undo/redo history after a certain amount
    of time, not after every character that we entered.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter10/Chapter10_1`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Debouncing with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen in the previous section, when we press undo it undoes a single
    character at a time. Sometimes, we do not want to store every change in our undo
    history. To avoid storing every change, we need to implement debouncing, which
    means that the function that stores the `content` to the history state is only
    called after there are no changes for a certain amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `use-debounce` library provides a **Debounce Hook**, which can be used,
    as follows, for simple values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we change the text via `setText`, the `text` value will be updated instantly,
    but the `value` variable will only be updated after 1000 ms (1 second).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, for our use case, this is not enough. We are going to need debounced
    callbacks in order to implement debouncing in combination with the History State
    Hook. Thankfully, the `use-debounce` library also provides the Debounced Callback
    Hook, which can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we call `debouncedSet('text')`, the `text` value will be updated after
    1000 ms (1 second). If `debouncedSet` is called multiple times, the timeout will
    get reset every time, so that only after 1000 ms of no further call to the `debouncedSet`
    function, the `setText` function will be called.
  prefs: []
  type: TYPE_NORMAL
- en: Debouncing changes in the post editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have learned about debouncing, we are going to implement it in
    combination with the History State Hook in our post editor. Follow these steps
    to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter10_1` folder to a new `Chapter10_2` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter10_2` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the `use-debounce` library, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/CreatePost.jsx` and import the `useState`, `useEffect`
    and `useDebouncedCallback` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a new State Hook that will contain the controlled input value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a **Debounced Callback Hook**, which will set the History State
    after 200 ms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we have to define an Effect Hook, which will trigger whenever the History
    State changes, cancel the current debounce, and set the controlled input value
    to the current value from the History State Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adjust the handler function to trigger the `setContent` function to update
    the controlled input value, and the `debounced` function to update the History
    State:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, adjust the `textarea` to use `content` instead of `state` for its
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the blog app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now instantly set the controlled input value, but we do not store anything
    to the History State yet. After the debouncing callback triggers (after 200 ms),
    we store the current value to the History State. Whenever the History State updates,
    for example, when we press the **Undo**/**Redo** buttons, we cancel the current
    debouncing to avoid overwriting the value after undoing/redoing. Then, we set
    the controlled input value to the new value of the History State Hook.
  prefs: []
  type: TYPE_NORMAL
- en: If we now type some text into our editor, we can see that the **Undo** button
    only activates after a while. If we now press the **Undo** button, we can see
    that we will not undo character-by-character, but more text at once. As we can
    see, undo/redo works very well together with debouncing!
  prefs: []
  type: TYPE_NORMAL
- en: Difference between debounced and deferred values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may remember that in [*Chapter 9*](Chapter_09.xhtml#_idTextAnchor200), *Advanced
    Hooks Provided by React*, we used the **Deferred Value Hook** to wait for the
    new search results to come in before showing them, letting us avoid showing a
    loading screen while waiting for new results. While we could have used debouncing
    there as well, there are certain downsides to using debounce for this use case.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between debounced and deferred values is that when debouncing,
    we define a fixed time interval after which the value is updated. Deferred values,
    however, will keep attempting to update after every change (and cancel them if
    a new change comes in). Thus, deferred values are not limited to a fixed time
    interval, but instead limited by the speed at which the requests can be processed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter10/Chapter10_2`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about various utility Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to learn about a selection of some useful utility Hooks provided
    by the useHooks library.
  prefs: []
  type: TYPE_NORMAL
- en: useCopyToClipboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Copy To Clipboard Hook** makes it easy to copy text to the clipboard across
    various browsers. If available, it uses the modern `navigator.clipboard.writeText`
    API. Otherwise, it falls back to the traditional `document.execCommand("copy")`
    method, ensuring that the functionality works for older and newer browsers. This
    Hook is also provided by [](https://www.useHooks.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useCopyToClipboard` function has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: It provides a similar API to the State Hook, with a `copyToClipboard` function
    that accepts a string and copies it to the clipboard, as well as storing it in
    the `copiedText` value. This value can also be used to check if we successfully
    copied the text to the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now use the Hook to implement a way of copying a link to blog posts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `Chapter10_2` folder to a new `Chapter10_3` folder by executing the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the new `Chapter10_3` folder in VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/components/post/CopyLink.jsx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, import the `useCopyToClipboard` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a checkmark and link emoji for the copy link button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a component that accepts a `url`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the component, define the Copy To Clipboard Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, render a button that triggers the `copyToClipboard` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the link was already copied, show the checkmark symbol, otherwise the link
    symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/components/post/Post.jsx` and import the `CopyLink` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the component next to the title of the blog post, passing the current
    URL to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the blog app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click on one of the **View post >** links to go to the single post page. You
    will see a button with the link emoji now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Showing a “copy link” button next to the blog post title](img/B31327_10_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Showing a “copy link” button next to the blog post title
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking this button, it will show the checkmark emoji and copy the current
    URL to your clipboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – The state of the button after successfully copying the link](img/B31327_10_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – The state of the button after successfully copying the link
  prefs: []
  type: TYPE_NORMAL
- en: Try pasting the link somewhere to see if it worked!
  prefs: []
  type: TYPE_NORMAL
- en: useHover
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Hover Hook** tracks whether an element is being hovered over by the user.
    It has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, it returns a `ref`, which we need to pass to the element that
    we want to track the hover state of. It also returns a `hovering` state, which
    will be `true` if the user is hovering over the element, and `false` if they are
    not. This Hook is also provided by [useHooks.com](https://www.useHooks.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now use the Hover Hook to show a hint when the user hovers over the copy
    link button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/components/post/CopyLink.jsx` and import the `useHover` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, define a Hover Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Fragment, so that we can display a message next to the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the `ref` of the Hover Hook to the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we are hovering over the button, show a small info text, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In real world projects, most hover effects in the UI would be done with CSS.
    A real world example for using the Hover Hook would be to send events to an analytics
    API on hover. However, this would be a significantly longer example than showing
    a text on hover.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try hovering over the copy link button now, and you will see the info text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Showing an info text when hovering over the button](img/B31327_10_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Showing an info text when hovering over the button
  prefs: []
  type: TYPE_NORMAL
- en: '**Example code**'
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this section can be found in the `Chapter10/Chapter10_3`
    folder. Check the `README.md` file inside the folder for instructions on how to
    set up and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: Finding more community Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already learned about the collection of Hooks provided by [useHooks.com](https://www.useHooks.com).
    However, there are many more Hooks that are provided by the community. You can
    find a searchable list of various Hooks on the following page: [https://nikgraf.github.io/react-hooks/](https://nikgraf.github.io/react-hooks/).'
  prefs: []
  type: TYPE_NORMAL
- en: To give you an idea of which other Hooks are out there, the following features
    are provided by community Hooks. We now list a couple more interesting Hooks provided
    by the community.
  prefs: []
  type: TYPE_NORMAL
- en: '`use-events` ([https://github.com/sandiiarov/use-events](https://github.com/sandiiarov/use-events)):
    Various JavaScript events that have been turned into Hooks, such as mouse position,
    touch events, clicking outside, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-use` ([https://github.com/streamich/react-use](https://github.com/streamich/react-use)):
    Various Hooks to deal with sensors (`useBattery`, `useIdle`, `useGeolocation`,
    and so on), UI (`useAudio`, `useCss`, `useFullscreen`, and so on), animations
    (`useSpring`, `useTween`, `useRaf`, and so on), and side effects (`useAsync`,
    `useDebounce`, `useFavicon`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there are many more Hooks to be found on GitHub and npm.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how to persistently store data in the browser
    by using the LocalStorage API via the Local Storage Hook. Then, we implemented
    undo/redo functionality in the `CreatePost` component using the History State
    Hook. Next, we learned about debouncing and implemented it using the Debounced
    Callback Hook. Then, we learned about some utility Hooks to copy to clipboard
    and handle hover states. Finally, we learned where to find more community Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about the rules of Hooks, teaching
    us the basics we need to know before developing our own custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which Hook can we use to persistently store information in the browser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook can we use to implement undo/redo functionality?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is debouncing? Why do we need to do it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook can we use for debouncing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does debouncing values differ from deferring values?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can we find more Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following book and links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Modern Full-Stack React Projects* by Daniel Bugl'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "useHooks website: [https://usehooks.com](https://useho\uFEFFoks.com)"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'use-debounce library documentation: [https://github.com/xnimorz/use-debounce](https://github.com/xnimorz/use-debounce)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Collection of React Hooks: [https://nikgraf.github.io/react-hooks/](https://nikgraf.github.io/react-hooks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_10.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
