- en: 7\. Animations and Transitions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7. 动画与过渡
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter deals with creating transition and animation effects in a Vue application.
    Throughout this chapter, you will explore the basics of Vue transitions. We will
    cover single-element transitions, using transition groups to animate a list of
    elements, and creating full-page animations with transition routes. You will also
    learn how to create your transitions and learn how to combine with external libraries
    to do various animations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何在 Vue 应用程序中创建过渡和动画效果。在本章中，你将探索 Vue 过渡的基础知识。我们将涵盖单元素过渡、使用过渡组来动画化元素列表，以及使用过渡路由创建全页动画。你还将学习如何创建自己的过渡，以及如何与外部库结合使用以实现各种动画。
- en: By the end of the chapter, you will be ready to implement and handle the fundamental
    transition and animation effects for any Vue application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将准备好为任何 Vue 应用程序实现和处理基本过渡和动画效果。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In *Chapter 6*, *Routing*, you learned about routes and how to set up an essential
    routing navigation system using Vue Router. Empowering the transition between
    different routes with smoothness or providing your application with proper animation
    effects when users interact with the application is the next level to achieve.
    While the smooth transition between pages provides a better user experience, animation
    effects such as loading or the way we render content can keep users engaged with
    the application. Hence, our next focus is transitions and animations in Vue and
    what we can do to apply these concepts to our Vue application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 6 章*，*路由* 中，你学习了路由以及如何使用 Vue Router 设置基本的路由导航系统。通过平滑地实现不同路由之间的过渡，或者在用户与应用程序交互时为应用程序提供适当的动画效果，这是达到更高层次的目标。虽然页面之间的平滑过渡提供了更好的用户体验，但如加载或内容渲染方式等动画效果可以保持用户与应用程序的互动。因此，我们接下来的重点是
    Vue 中的过渡和动画，以及我们可以如何将这些概念应用到我们的 Vue 应用程序中。
- en: Vue Transitions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vue 过渡
- en: Unlike other frameworks, Vue.js provides developers with built-in support for
    animating Vue.js applications, including transitions and animations. Transitioning
    is implemented in such a simple and straightforward manner that developers can
    easily configure and add it to their application. The Vue.js transition mechanism
    supports CSS transitions, programmatic manipulation with JavaScript, and even
    integration with third-party animation libraries such as GSAP or Animate.css.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架不同，Vue.js 为开发者提供了内置支持，用于动画化 Vue.js 应用程序，包括过渡和动画。过渡的实现方式简单直接，开发者可以轻松配置并将其添加到他们的应用程序中。Vue.js
    过渡机制支持 CSS 过渡、使用 JavaScript 的程序性操作，甚至可以与第三方动画库（如 GSAP 或 Animate.css）集成。
- en: First, we will discuss the difference between transitions and animations. A
    transition happens when a component (or element) moves from one state to another,
    such as hovering on a button, navigating from one page to another, displaying
    a pop-up modal, and so on. Meanwhile, animations are like transitions but are
    not limited to just two states. Understanding the basics of transitions allows
    you to get started with animations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论过渡和动画之间的区别。当组件（或元素）从一个状态移动到另一个状态时，就会发生过渡，例如在按钮上悬停、从一个页面导航到另一个页面、显示弹出模态框等。同时，动画类似于过渡，但并不局限于仅两个状态。了解过渡的基础知识将帮助你开始学习动画。
- en: Transition Elements
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡元素
- en: 'In this example, to enable transitions for a single component or element, Vue.js
    provides the built-in `transition` component that will wrap around the targeted
    element, as seen in `./src/components/HelloWorld.vue`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，为了为单个组件或元素启用过渡，Vue.js 提供了内置的 `transition` 组件，它将围绕目标元素包裹，如 `./src/components/HelloWorld.vue`
    中所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `transition` component adds two transition states—`enter` and `leave`—for
    any targeted element or component, including components with conditional rendering
    (`v-if`) and conditional display (`v-show`).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition` 组件为任何目标元素或组件添加了两个过渡状态——`enter` 和 `leave`，包括具有条件渲染（`v-if`）和条件显示（`v-show`）的组件。'
- en: This component receives a prop called `name` that represents the name of the
    transition—in this case, it's `fade-in`—and is also the prefix for the transition
    class names, which will be discussed next.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件接收一个名为 `name` 的属性，它代表过渡的名称——在本例中是 `fade-in`——也是过渡类名的前缀，将在下面讨论。
- en: Transition Classes
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡类
- en: Vue.js implements a CSS-based and class-based transition effect for `leave`/`enter`,
    hence the transition will be applied to the target component through a set of
    class selectors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js实现了基于CSS和类的`leave`/`enter`过渡效果，因此过渡将通过一组类选择器应用于目标组件。
- en: Each of these class selectors has the `v-` prefix in case there is no `name`
    prop given on the `transition` component. And there are some standard classes
    that are grouped into two main groups.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类选择器都有`v-`前缀，以防在`transition`组件上没有提供`name`属性。还有一些标准类被分为两组。
- en: 'The first group of transition classes is for the `enter` transition, when the
    component is first displayed. Here is a list of `enter` transition classes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组过渡类是用于`enter`过渡的，当组件首次显示时。以下是一个`enter`过渡类的列表：
- en: '`v-enter` (or `<name>-enter`): This is the starting state and is added to the
    component before the component is added or updated. This class will be removed
    once the transition finishes it at the ending state. In the `<style>` section
    of `src/components/HelloWorld.vue`, we will set the `.fade-in-enter` starting
    state as completely hidden with `opacity: 0`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-enter`（或`<name>-enter`）：这是起始状态，在组件添加或更新之前添加到组件上。这个类将在过渡完成后从结束状态中移除。在`src/components/HelloWorld.vue`的`<style>`部分，我们将`.fade-in-enter`起始状态设置为完全隐藏，使用`opacity:
    0`：'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`v-enter-active` (or `<name>-enter-active`): This class defines the delay,
    duration, and the easing curve when the component is actively entering the transition.
    It will be added to the component before the component is inserted, applied to
    the component during the entire entering phase, and removed once the effect completes.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-enter-active`（或`<name>-enter-active`）：这个类定义了组件在活动进入过渡时的延迟、持续时间和缓动曲线。它将在组件插入之前添加到组件上，在整个进入阶段应用于组件，并在效果完成后移除。'
- en: 'Let''s add `.fade-in-enter-active`, which will do a transition to the opacity
    state within `3` seconds:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加`.fade-in-enter-active`，它将在3秒内将透明度状态进行过渡：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`v-enter-to` (or `<name>-enter-to`): This is the last sub-state of entering,
    where the effect frame is added after the component is inserted and removed when
    the effect finishes. In our example, we do not need to define anything since the
    `opacity` value for this state should be `1`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`v-enter-to`（或`<name>-enter-to`）：这是进入的最后一个子状态，其中在组件插入后添加效果帧，并在效果完成后移除。在我们的例子中，我们不需要定义任何内容，因为此状态的`opacity`值应该是`1`。'
- en: 'The second group of classes consists of `leave` transitions, which trigger
    when the component is disabled or removed from view:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第二组类包括`leave`过渡，当组件被禁用或从视图中移除时触发：
- en: '`v-leave` (or `<name>-leave`): This is the starting state for the leaving transition.
    Similar to `v-enter-to`, we don''t need to define styling effects for this state.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave`（或`<name>-leave`）：这是离开过渡的起始状态。类似于`v-enter-to`，我们不需要为此状态定义样式效果。'
- en: '`v-leave-active` (or `<name>-leave-active`): This is applied during the leaving
    phase and acts similarly to `v-enter-active`. And since we want to have a fade-out
    effect, we will use the same styling as with `fade-in-enter-active`:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave-active`（或`<name>-leave-active`）：这个类在离开阶段应用，其行为类似于`v-enter-active`。由于我们想要实现淡出效果，我们将使用与`fade-in-enter-active`相同的样式：'
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`v-leave-to` (or `<name>-leave-to`): This is the ending state with similar
    behavior to `v-enter-to`. Since the component is going to disappear from view,
    we will reuse the styling defined for the starting phase of `enter` `fade-in-enter`:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v-leave-to`（或`<name>-leave-to`）：这是与`v-enter-to`具有相似行为的结束状态。由于组件将从视图中消失，我们将重用为`enter`阶段的开始阶段定义的样式：'
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot is a recap of all the states of `transition` described
    so far:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是到目前为止描述的所有`transition`状态的总结：
- en: '![Figure 7.1: Diagram of transition phases'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1：过渡阶段图解'
- en: '](img/B15218_07_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15218_07_01.jpg)'
- en: 'Figure 7.1: Diagram of transition phases'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：过渡阶段图解
- en: In this section, we looked at three different transition states for entering
    and three transition states for leaving. We also walked through using a transition
    state to slowly fade in some text when the user presses a button.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了进入和离开的三个不同过渡状态，还介绍了使用过渡状态在用户按下按钮时缓慢淡入一些文本的方法。
- en: Animation for a Component
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件的动画
- en: Since animation is basically an extended form of a transition (with more than
    two states), it is applied in the same way as transitions, with the exception
    that `v-enter` will only be removed on an `animationend` event triggered by Vue.js.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于动画基本上是过渡的扩展形式（具有超过两个状态），因此它的应用方式与过渡相同，唯一的区别是`v-enter`只会在由Vue.js触发的`animationend`事件上被移除。
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`animationend` is a DOM event that is fired once the CSS animation finishes
    execution, with the condition that the target element still exists within the
    DOM and the animation is still attached to that element.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`animationend`是一个DOM事件，当CSS动画完成执行时触发，条件是目标元素仍然存在于DOM中，并且动画仍然附加到该元素上。'
- en: For the next example, in the `<template>` section, we can define a new transition
    called `slide` using an animation CSS effect as a wrapper for the `h1` element
    that displays msg. This transition provides the animation effect of sliding from
    the left to the center on entering and vice versa on leaving.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，在`<template>`部分，我们可以定义一个新的名为`slide`的过渡，使用动画CSS效果作为显示msg的`h1`元素的包装器。这个过渡提供了从左侧滑到中心在进入时的动画效果，在离开时则相反。
- en: 'To get started, generate a `vue` starter project using the CLI with the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，使用以下命令使用CLI生成一个`vue`起始项目：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, open up the project and go into `src/components/HelloWorld.vue`, and
    then modify the existing `<h1>{{msg}}</h1> code`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开项目并进入`src/components/HelloWorld.vue`，然后修改现有的`<h1>{{msg}}</h1>`代码：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In `<style>`, we need to define keyframes for the `slide` animation effect:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<style>`中，我们需要为`slide`动画效果定义关键帧：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The related transition classes will be assigned the following stylings:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的过渡类将被分配以下样式：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This means at the starting phase of entering and at the ending phase of leaving,
    the text position will be `-100px` from the designated position on the page. The
    browser will animate the element using the slide keyframe for a duration of 5
    seconds, and in the active state of leaving, the animation will be exactly the
    opposite of the one in the active stage of entering.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在进入的起始阶段和离开的结束阶段，文本位置将位于页面指定位置`-100px`处。浏览器将使用滑动关键帧在5秒内对元素进行动画处理，并且在离开的活跃状态下，动画将正好与进入活跃阶段的动画相反。
- en: 'You''ll also want to add a show data variable. You can do this by modifying
    the existing export, as shown:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还想要添加一个显示数据变量。你可以通过修改现有的导出来实现，如下所示：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And with that, we have implemented our animation. Now comes the next challenge:
    what if we want to combine different animation or transition effects to leave
    and enter states, or use an external CSS library for these states? Let''s take
    a look at custom transition classes.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们就实现了我们的动画。接下来是下一个挑战：如果我们想将不同的动画或过渡效果组合到进入和离开状态，或者为这些状态使用外部CSS库，该怎么办？让我们看看自定义过渡类。
- en: Custom Transition Classes
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义过渡类
- en: In this section, we'll again be starting from the default starter project created
    with vue create hello-world. Instead of setting the transition name and letting
    the Vue.js mechanism populate the required class names, there is an option to
    provide custom classes through the following attributes and replace the conventional
    defaults.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们再次从使用vue create hello-world创建的默认起始项目开始。我们不是设置过渡名称，让Vue.js机制填充所需的类名，而是可以通过以下属性提供自定义类，并替换传统默认值。
- en: 'For entering a state, use the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于进入状态，使用以下代码：
- en: '`enter-class`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter-class`'
- en: '`enter-active-class`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter-active-class`'
- en: '`enter-to-leave`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter-to-leave`'
- en: 'For leaving a state, use the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于离开状态，使用以下代码：
- en: '`leave-class`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave-class`'
- en: '`leave-active-class`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave-active-class`'
- en: '`leave-to-class`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave-to-class`'
- en: 'We will start by creating a file based on the previous example, but now we
    will use a `swing` animation effect on the active phase of the entering state,
    and the `tada` effect for the active phase of the leaving state. We will define
    the `enter-active-class` and `leave-active-class` attributes in our `transition`
    component as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个基于之前示例的文件开始，但现在我们将对进入状态的活跃阶段使用`swing`动画效果，对离开状态的活跃阶段使用`tada`效果。我们将在`transition`组件中定义`enter-active-class`和`leave-active-class`属性，如下所示：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And in the `<style>` section, we just need to define `.tada` and `.swing`,
    without any suffix pattern:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<style>`部分，我们只需要定义`.tada`和`.swing`，无需任何后缀模式：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then add the dedicated keyframes to set up the animation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加专用的关键帧来设置动画：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You''ll also want to add a show data variable. You can do this by modifying
    the existing `export`, as shown:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你还想要添加一个显示数据变量。你可以通过修改现有的`export`来实现，如下所示：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we run the application using the `yarn serve` command, we will have our
    animations set separately for entering and leaving. The following screenshot displays
    how the screen will now appear:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`yarn serve`命令运行应用程序时，我们将为进入和离开设置单独的动画。以下截图显示了屏幕现在的样子：
- en: '![Figure 7.2: Swing animation effect on action'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2：动作上的摆动动画效果](img/B15218_07_02.jpg)'
- en: '](img/B15218_07_02.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_07_02.jpg)'
- en: 'Figure 7.2: Swing animation effect on action'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：动作上的摆动动画效果
- en: 'You should see the welcome text shrink while rotating, transitioning from what
    was shown in *Figure 7.2* to the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到欢迎文本在旋转的同时缩小，从*图7.2*中显示的过渡到以下：
- en: '![Figure 7.3: tada animation effect on action'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.3：动作上的tada动画效果](img/B15218_07_03.jpg)'
- en: '](img/B15218_07_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15218_07_03.jpg)'
- en: 'Figure 7.3: tada animation effect on action'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：动作上的tada动画效果
- en: In this section, we looked at creating custom transition effects. As examples,
    we made `swing` and `tada`. We did this by defining the transition classes in
    our stylesheet and then adding keyframes for each of the effects. This technique
    can be used to create all kinds of custom transition effects. In the next section,
    we'll look at JavaScript hooks and how they can be used for more complex animations.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了创建自定义过渡效果。作为示例，我们创建了`swing`和`tada`。我们通过在样式表中定义过渡类并为每个效果添加关键帧来实现这一点。这种技术可以用来创建各种自定义过渡效果。在下一节中，我们将探讨JavaScript钩子以及它们如何用于更复杂的动画。
- en: JavaScript Hooks
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript钩子
- en: As we learned in the previous section, we can use custom transition classes
    to integrate external third-party CSS animation libraries for styling effects.
    However, there are external libraries that are not CSS-based, but JavaScript-based,
    such as **Velocity.js** or **GreenSock Animation API** (**GSAP**), which require
    hooks to be set using JavaScript events and external animation handlers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在上一节所学，我们可以使用自定义过渡类来集成外部第三方CSS动画库以实现样式效果。然而，有些外部库不是基于CSS的，而是基于JavaScript的，例如**Velocity.js**或**GreenSock
    Animation API**（**GSAP**），这些库需要通过JavaScript事件和外部动画处理程序设置钩子。
- en: 'In order to use the Velocity.js or GSAP libraries in the Vue app, you need
    to install them separately by using the `npm install` or `yarn add` command, as
    follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Vue应用程序中使用Velocity.js或GSAP库，你需要分别使用`npm install`或`yarn add`命令安装它们，如下所示：
- en: 'To install Velocity.js, use these commands:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装Velocity.js，请使用以下命令：
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To install GSAP, use these commands:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装GSAP，请使用以下命令：
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Being a Vue.js component means the `transition` component supports binding
    custom handlers to a list of events as props. Consider the following example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Vue.js组件，`transition`组件支持将自定义处理程序绑定到事件列表的props上。考虑以下示例：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We bind the animation methods programmatically to the respective events on
    the transition element:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将动画方法程序性地绑定到过渡元素的相关事件上：
- en: '`beforeEnter` is the animation state before the component is inserted—similar
    to the v-enter phase.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeEnter`是在组件插入之前的动画状态——类似于v-enter阶段。'
- en: '`enter` for the animation during the entire entering phase—similar to the v-enter-active
    phase.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter`用于整个进入阶段的动画——类似于v-enter-active阶段。'
- en: '`leave` for the animation during the entire leaving phase. This is similar
    to the v-leave-active phase.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave`用于整个离开阶段的动画。这类似于v-leave-active阶段。'
- en: 'We need to define these event handlers in the `methods` section of the `HelloWorld.vue`
    component''s configuration:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`HelloWorld.vue`组件配置的`methods`部分中定义这些事件处理程序：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this example, we will create our animation events using the `TweenMax` and
    `TimelineMax` functionalities provided by the GSAP library, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用GSAP库提供的`TweenMax`和`TimelineMax`功能来创建我们的动画事件，如下所示：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For both `TweenMax` and `TimelineMax`, the syntax of the `to()` animation trigger
    method is pretty simple:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`TweenMax`和`TimelineMax`，`to()`动画触发方法的语法相当简单：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Most of the effect properties have a similar syntax to CSS so they're not difficult
    to learn and use. In addition, we must pass a `done` callback received from the
    event emitter for events such as `enter` and `leave` to `onComplete` to make sure
    it is triggered, and the hooks will not be called synchronously. Also, note that
    all the event emitters also pass `el`, which is a pointer to the current element
    in transition for use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数效果属性与 CSS 的语法相似，因此它们不难学习和使用。此外，我们必须将事件发射器接收到的 `done` 回调传递给 `onComplete`，以确保它被触发，并且钩子不会同步调用。另外，请注意，所有事件发射器也传递
    `el`，它是当前过渡元素的指针，用于使用。
- en: Other than these three events, there are other events we can bind, depending
    on the complexity of the animations and transitions, such as `afterEnter`, `enterCancelled`,
    `beforeLeave`, `afterLeave`, and `leaveCancelled`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这三个事件之外，我们还可以绑定其他事件，具体取决于动画和过渡的复杂度，例如 `afterEnter`、`enterCancelled`、`beforeLeave`、`afterLeave`
    和 `leaveCancelled`。
- en: 'Please note, it''s highly recommended to add `v-bind:css="false"` (or `:css="false"`)
    if you are using transitions with JavaScript only. This is to prevent Vue.js from
    detecting and applying any related CSS, therefore avoiding transition interference
    by accident:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你仅使用 JavaScript 进行过渡，强烈建议添加 `v-bind:css="false"`（或 `:css="false"`）。这是为了防止
    Vue.js 侦测并应用任何相关的 CSS，从而避免意外地发生过渡干扰：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this section, we looked at how external JavaScript libraries can be used
    for animations. We implemented a simple tween using the GSAP library, making use
    of its `TweenMax` and `TimelineMax` functions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用外部 JavaScript 库进行动画。我们使用 GSAP 库实现了一个简单的缓动，利用其 `TweenMax` 和 `TimelineMax`
    函数。
- en: Let's now learn how to add a new message using an animation effect.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何使用动画效果添加新消息。
- en: 'Exercise 7.01: Adding a New Message with an Animation Effect'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.01：使用动画效果添加新消息
- en: We are going to create a message editor where the user will compose and submit
    a new message. The new message will be displayed instantly with a sliding-from-right
    animation effect.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个消息编辑器，用户可以在其中编写和提交新消息。新消息将立即通过从右向左的滑动动画效果显示。
- en: 'To access the code files for this exercise, refer to [https://packt.live/338ZXJv](https://packt.live/338ZXJv):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://packt.live/338ZXJv](https://packt.live/338ZXJv)：
- en: Note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此练习之前，运行 `vue create` 命令以生成 Vue 入门项目。
- en: 'First create a new component called `MessageEditor.vue` located in the `/src/components/`
    folder. In this component, `<template>` will contain two sections, `textarea`,
    for composing a new message with a button to submit it, and `section`, where the
    newly composed message will be displayed:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个名为 `MessageEditor.vue` 的新组件，位于 `/src/components/` 文件夹中。在这个组件中，`<template>`
    将包含两个部分，`textarea` 用于编写新消息，并有一个提交按钮，以及 `section` 用于显示新编写的消息：
- en: '[PRE21]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next, wrap the whole message section with the `transition` element, to prepare
    for our animation.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将整个消息部分包裹在 `transition` 元素中，为我们的动画做准备。
- en: '[PRE22]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We''ll need our `export` component with a method for changing the message text.
    Add that with the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个具有更改消息文本方法的 `export` 组件。使用以下代码添加它：
- en: '[PRE23]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we will define the `slide-right` animation effect using `@keyframes`
    in our `style` section by using the following command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下命令在我们的 `style` 部分使用 `@keyframes` 定义 `slide-right` 动画效果：
- en: '[PRE24]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This means it will re-position the element that has this effect horizontally
    (on the *X* axis) to the original starting point, (0,0).
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着它将具有此效果的元素在水平方向上（在 *X* 轴上）重新定位到原始起始点，（0,0）。
- en: 'Now we will define the two classes, one for sliding in from left to right (`slide-right`),
    and one for the opposition direction (`slide-left`):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义两个类，一个用于从左到右滑动（`slide-right`），另一个用于相反方向（`slide-left`）：
- en: '[PRE25]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add `border-top:0` as the starting point for our `slide-right` transition to
    do a bit of an effect on the `border-top` of this section:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `border-top:0` 作为 `slide-right` 过渡的起始点，以便对这一部分的 `border-top` 产生一点效果：
- en: '[PRE26]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, using what we learned about custom transition classes, let''s bind `enter-active`
    to the `slide-right` class, and similarly bind `leave-active` to `slide-left`.
    These three properties are added to the `transition` element that was created
    in *Step 2*:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，利用我们学到的关于自定义过渡类的知识，将 `enter-active` 绑定到 `slide-right` 类，并将 `leave-active`
    类似地绑定到 `slide-left`。这三个属性被添加到在 *步骤 2* 中创建的 `transition` 元素中：
- en: '[PRE27]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run the application using the `yarn serve` command.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `yarn serve` 命令运行应用程序。
- en: 'This will generate a component that will display the typed message with a sliding
    animation effect, as shown in *Figure 7.4*:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成一个组件，将显示带有滑动动画效果的输入消息，如图 *图 7.4* 所示：
- en: '![Figure 7.4: Message Editor text area'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.4：消息编辑器文本区域'
- en: '](img/B15218_07_04.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B15218_07_04](img/B15218_07_04.jpg)'
- en: 'Figure 7.4: Message Editor text area'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：消息编辑器文本区域
- en: 'The following screenshot shows how the message component appears with a slide-from-left-to-right
    animation effect:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了消息组件具有从左到右滑动动画效果的外观：
- en: '![Figure 7.5: Message in transition for display'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5：用于显示的消息过渡'
- en: '](img/B15218_07_05.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_07_05](img/B15218_07_05.jpg)'
- en: 'Figure 7.5: Message in transition for display'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：用于显示的消息过渡
- en: 'After animating in from the left, the component should stop in the centered
    position, as shown in *Figure 7.6*:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧动画进入后，组件应停在居中位置，如图 *图 7.6* 所示：
- en: '![Figure 7.6: Message after the animation'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6：动画后的消息'
- en: '](img/B15218_07_06.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_07_06](img/B15218_07_06.jpg)'
- en: 'Figure 7.6: Message after the animation'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6：动画后的消息
- en: This exercise helped you to get used to some of the transform effects in CSS,
    such as `translateX` and `transition`. It also demonstrates how easy it is to
    add animation to an element in the Vue application. What about transitioning for
    multiple elements in the same group, such as a list? We will find out in the next
    topic.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习帮助您熟悉 CSS 中的某些转换效果，例如 `translateX` 和 `transition`。它还展示了在 Vue 应用程序中添加动画是多么容易。对于同一组中的多个元素，如列表，过渡怎么办？我们将在下一个主题中找到答案。
- en: Transition Groups
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡组
- en: So far, we have gone through the fundamentals of Vue transition elements for
    simple components and elements, with both custom CSS-only and JavaScript-only
    support for animations. Next, we will explore how to apply a transition on a group
    of components, for instance, a list of items that will be rendered simultaneously,
    by using `v-for`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '到目前为止，我们已经介绍了 Vue 过渡元素的基本知识，适用于简单组件和元素，同时支持自定义 CSS 仅和 JavaScript 仅动画。接下来，我们将探讨如何使用
    `v-for` 在一组组件上应用过渡，例如，同时渲染的项目列表。 '
- en: Vue.js provides another component for this specific purpose, the `transition-group`
    component.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 为此特定目的提供了另一个组件，即 `transition-group` 组件。
- en: 'We will now assume that we have a list of messages displayed on a feed, and
    we would like to add a transition to this list to have some effect when each item
    appears on the screen. In the `./src/components/Messages.vue` file, let''s wrap
    the main container with a `transition-group` component, and pass the same props
    we used previously for our `transition` component. They share the same prop types:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在假设我们有一个显示在源上的消息列表，我们希望为此列表添加一个过渡效果，以便在屏幕上每个项目出现时产生一些效果。在 `./src/components/Messages.vue`
    文件中，让我们用 `transition-group` 组件包裹主要容器，并传递我们之前为 `transition` 组件使用的相同属性。它们具有相同的属性类型：
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And we need to set the CSS styling effect for the transition effect passed
    as `fade`, following the same syntax rules for transition classes:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为传递为 `fade` 的过渡效果设置 CSS 样式效果，遵循与过渡类相同的语法规则：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Upon running the application using the `yarn serve` command, your list''s item
    will have a fading effect when it appears. The following screenshot displays how
    your screen should appear:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `yarn serve` 命令运行应用程序后，您的列表项在出现时将具有淡入效果。以下截图显示了您的屏幕应该如何显示：
- en: '![Figure 7.7: Fading of the list item'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.7：列表项的淡入'
- en: '](img/B15218_07_07.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_07_07](img/B15218_07_07.jpg)'
- en: 'Figure 7.7: Fading of the list item'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7：列表项的淡入
- en: 'Note that unlike the `transition` component, which does not render any wrapper
    container element, `transition-group` will render an actual element and you can
    change the element tag name by using a `tag` prop. By default, the element used
    is `span`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，与不渲染任何包装容器元素的 `transition` 组件不同，`transition-group` 将渲染一个实际元素，您可以通过使用 `tag`
    prop 来更改元素标签名。默认使用的元素是 `span`：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the browser, the actual HTML output will look as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，实际的 HTML 输出将如下所示：
- en: '![Figure 7.8: Transition container element rendered according to the tag attribute'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8：根据标签属性渲染的过渡容器元素'
- en: '](img/B15218_07_08.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_07_08](img/B15218_07_08.jpg)'
- en: 'Figure 7.8: Transition container element rendered according to the tag attribute'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8：根据标签属性渲染的过渡容器元素
- en: Furthermore, all the transition classes will only be applied to the list item
    elements that have the `v-for` attribute and not to the wrapper.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有过渡类只应用于具有 `v-for` 属性的列表项元素，而不应用于包装器。
- en: Finally, you *must* have the `:key` attribute for every list item, in order
    for Vue.js to index and know which item to apply the transition to.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你必须为每个列表项设置 `:key` 属性，以便Vue.js能够索引并知道要将转换应用到哪个项上。
- en: We will now create a moving effect on the list.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在列表上创建移动效果。
- en: Creating a Moving Effect While Transitioning a List
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在过渡列表时创建移动效果
- en: 'Besides all the classes provided in the `transition` component, `transition-group`
    has another class, `v-move`, which allows us to add additional effects while each
    item is being moved into its position. It can be manually assigned through the
    `move-class` attribute:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `transition` 组件中提供的所有类之外，`transition-group` 还有一个类 `v-move`，它允许我们在每个项移动到其位置时添加额外的效果。可以通过
    `move-class` 属性手动分配：
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next, we will look at making animations on the initial rendering of a page or component.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在页面或组件的初始渲染上制作动画。
- en: Making an Animation on Initial Render
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在初始渲染时制作动画
- en: 'Usually, the list of items will be displayed on the first initial page load,
    and our animation won''t work because the element is already in the view. In order
    to trigger the animation, we need to use a different transition attribute, `appear`,
    to force the animation on the initial page render, right after the page has been
    loaded:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，项目列表将在第一次初始页面加载时显示，我们的动画将不会工作，因为元素已经在视图中。为了触发动画，我们需要使用不同的转换属性 `appear`，在页面加载后立即强制在初始页面渲染上进行动画：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can also set hooks with `v-on:after-appear`, `v-on:appear`, `v-on:after-appear`,
    and `v-on:appear-cancelled`, or we can create custom classes by using the following
    format:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `v-on:after-appear`、`v-on:appear`、`v-on:after-appear` 和 `v-on:appear-cancelled`
    设置钩子，或者我们可以使用以下格式创建自定义类：
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Animating on render is a commonly used feature that can be used in many situations,
    such as fading in components as we did here. In the next section, we will look
    at sorting a list of messages with an animation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染时进行动画是一个常用的功能，可以在许多情况下使用，例如像我们在这里所做的那样淡入组件。在下一节中，我们将探讨如何使用动画对消息列表进行排序。
- en: 'Exercise 7.02: Sorting a List of Messages with an Animation'
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.02：使用动画对消息列表进行排序
- en: 'In this short exercise, we will add additional functionality to the message
    list: **sorting**. Upon sorting (A-Z or Z-A), there will be a flipping animation
    effect on the list.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的练习中，我们将向消息列表添加额外的功能：**排序**。在排序（A-Z或Z-A）时，列表将会有翻转动画效果。
- en: 'To access the code files for this exercise, refer to [https://packt.live/35TFs5l](https://packt.live/35TFs5l):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请参阅 [https://packt.live/35TFs5l](https://packt.live/35TFs5l)：
- en: Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此练习之前，运行 `vue create` 命令以生成Vue入门项目。
- en: 'We will use the same component code as previously for rendering messages in
    the `Messages.vue` component. The list will be wrapped with a `transition-group`
    component, ready for animation. And do not forget to set `appear="true"`, or simply
    `appear` for short, in order for the element to be animated only after the page
    has finished loading:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用之前用于在 `Messages.vue` 组件中渲染消息的相同组件代码。列表将被 `transition-group` 组件包裹，准备进行动画。并且不要忘记设置
    `appear="true"`，或者简单地使用 `appear`，以便元素仅在页面加载完成后进行动画：
- en: '[PRE34]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the application using the `yarn serve` command. This will generate the
    following output:![Figure 7.9: Message list before animation'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `yarn serve` 命令运行应用程序。这将生成以下输出：![图7.9：动画前的消息列表
- en: '](img/B15218_07_09.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_07_09.jpg)'
- en: 'Figure 7.9: Message list before animation'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.9：动画前的消息列表
- en: 'There''s no animation because we haven''t defined the CSS animation styling
    for `flip` yet. Let''s do it. In the `<style>` section of `src/components/Messages.vue`,
    we will add `opacity: 0` and then reposition each element in the list vertically
    (on the *Y* axis) by `20px` from the original position. This should be the initial
    stage when the element enters `flip-enter` or is about to leave the transition
    with `flip-leave-to`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '没有动画，因为我们还没有为 `flip` 定义CSS动画样式。让我们来做。在 `src/components/Messages.vue` 的 `<style>`
    部分中，我们将添加 `opacity: 0` 并将列表中的每个元素垂直（在 *Y* 轴上）从原始位置移动 `20px`。这应该是元素进入 `flip-enter`
    或即将离开转换到 `flip-leave-to` 的初始阶段：'
- en: '[PRE35]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the same `<style>` section, add custom CSS styling to each message element
    (the `message—item` class) with `transition: all 2s`. This is to make sure the
    transition effect for the element will be done with all CSS properties within
    `2` seconds:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在相同的`<style>`部分，为每个消息元素（`message-item`类）添加自定义CSS样式`transition: all 2s`。这是为了确保元素的过渡效果将在`2`秒内完成所有CSS属性的转换：'
- en: '[PRE36]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Once the `flip-move` is in action, we need to add the transition effect only
    for `transform` (which was defined previously as vertically `20px` away). We can
    see the moving up and down effect for each message flawlessly. In addition, we
    also need to add `position: absolute` for when the transition is in the middle
    of the leaving stage:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '一旦`flip-move`开始工作，我们只需要为`transform`（之前定义为垂直`20px`偏移）添加过渡效果。我们可以完美地看到每个消息的上下移动效果。此外，我们还需要在过渡处于离开阶段中间时添加`position:
    absolute`：'
- en: '[PRE37]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We will next add three buttons—allowing sorting from A to Z, sorting from Z
    to A, and to shuffle randomly:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来将添加三个按钮——允许从A到Z排序、从Z到A排序以及随机洗牌：
- en: '[PRE38]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We''ll also need to add our basic component export code as well as our message
    feed data. Feel free to use any content you like for your messages:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要添加我们的基本组件导出代码以及我们的消息源数据。请随意使用您喜欢的任何内容作为您的消息：
- en: '[PRE39]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, we''ll add the logic for sorting and shuffling. The `methods` section
    should be inside the component `export` created in the last step:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加排序和洗牌的逻辑。`methods`部分应该位于上一步创建的组件`export`内部：
- en: '[PRE40]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output after clicking on one of the buttons will be similar to the following:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击按钮后的输出将类似于以下内容：
- en: '![Figure 7.10: Message list during sorting with animation'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图7.10：排序动画中的消息列表'
- en: '](img/B15218_07_10.jpg)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_07_10.jpg)'
- en: 'Figure 7.10: Message list during sorting with animation'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10：排序动画中的消息列表
- en: In this exercise, we learned how to add a flip animation effect with `transition-group`
    to a list of components dynamically based on a change of the order of its element.
    Next, let's explore how to apply transition effects when navigating between pages.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们学习了如何根据元素顺序的变化，使用`transition-group`动态地为组件列表添加翻转动画效果。接下来，让我们探索如何在页面之间导航时应用过渡效果。
- en: Transition Routes
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡路由
- en: With the combination of the `router-element` component from Vue Router and the
    `transition` component, we can easily set up the transition effects when a user
    navigates from one URL (route) to another.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合Vue Router的`router-element`组件和`transition`组件，我们可以轻松地设置用户在从一个URL（路由）导航到另一个URL时的过渡效果。
- en: To give you a more fundamental understanding, we demonstrate in the following
    section an underlying case where a user redirects from the `home` page to the
    `about` page on a website.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您有更深入的理解，我们在以下部分演示了一个基本案例，其中用户从网站的`home`页面重定向到`about`页面。
- en: 'Let''s wrap `router-element` with `transition` and add the `name="zoom"` attribute:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`router-element`包裹在`transition`中，并添加`name="zoom"`属性：
- en: '[PRE41]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here we will use the `mode` attribute to indicate the transition mode. There
    are currently two modes to set:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用`mode`属性来指示过渡模式。目前有两种模式可供设置：
- en: '`in-out`: The new element comes in first, and only after that will the current
    element go out of view.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in-out`：新元素首先进入，然后当前元素才会从视图中消失。'
- en: '`out-in`: The current element goes out first, and only then will the new element
    come in. We will use this for our example, and it''s more common than the previous
    one.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out-in`：当前元素首先消失，然后新元素才会进入。我们将使用这个模式作为示例，它比上一个模式更常见。'
- en: 'Then, we just need to set up the transition CSS effect with the transition
    classes as usual and it''s done. Simple as that:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需像往常一样设置带有过渡类的过渡CSS效果，任务就完成了。就这么简单：
- en: '[PRE42]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In this section, we looked at transition routes. Transition effects are animations
    that occur between the rendering of routes, such as navigating from one page to
    another. In the next section, we will look at creating a transition effect for
    each route navigated in our application.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了过渡路由。过渡效果是在路由渲染之间发生的动画，例如从一个页面导航到另一个页面。在下一节中，我们将探讨如何在我们的应用程序中为每个导航的路由创建过渡效果。
- en: 'Exercise 7.03: Creating a Transition Effect for Each Route Navigated'
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.03：为每个导航的路由创建过渡效果
- en: In this exercise, we will adapt what we have learned about transitions with
    the router element from the *Transition Routes* section to create different transition
    effects for different routes. The default effect will be `fade`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，我们将根据 *过渡路由* 部分学到的关于路由元素过渡的知识，为不同的路由创建不同的过渡效果。默认效果将是 `fade`。
- en: 'To access the code files for this exercise, visit [https://packt.live/376DoXo](https://packt.live/376DoXo):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请访问 [https://packt.live/376DoXo](https://packt.live/376DoXo)：
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此练习之前，运行 `vue create` 命令以生成Vue入门项目。
- en: Create a simple application with Vue Router, and add a route for `messages`
    using the `Messages.vue` view, located in the `src/views/` folder. Use the code
    from the previous exercise and add a link to this newly created route in `App.vue`.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Vue Router创建一个简单的应用程序，并在 `src/views/` 文件夹中添加一个名为 `Messages.vue` 的路由，为 `messages`
    添加一个路由。使用前一个练习中的代码，并在 `App.vue` 中添加一个指向新创建的路由的链接。
- en: 'Next, we wrap the `router-view` element with the `transition` component, in
    `App.vue`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在 `App.vue` 中将 `router-view` 元素包裹在 `transition` 组件中：
- en: '[PRE43]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Inside the `export` section of `App.vue`, make sure the `data` function includes
    values for `transition` and `mode`, as shown here:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.vue` 的 `export` 部分中，确保 `data` 函数包含 `transition` 和 `mode` 的值，如下所示：
- en: '[PRE44]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the CSS style for fading in and out using the following CSS in `App.vue`:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.vue` 中使用以下CSS添加淡入淡出的样式：
- en: '[PRE45]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'At this point, all the pages are loaded with the `fade` effect, even `/messages`.
    But we want to make the messages page load with a different effect—the `zoom`
    effect. Next, add the relevant CSS code for the `zoom` animation inside the same
    `style` tag:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，所有页面都使用 `fade` 效果加载，包括 `/messages`。但我们希望消息页面使用不同的效果——`zoom` 效果。接下来，在同一个
    `style` 标签内添加相关的 `zoom` 动画CSS代码：
- en: '[PRE46]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We will now add some standard CSS stylings for the app''s default layout with
    the help of the following code:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使用以下代码帮助添加一些标准的CSS样式以应用于应用程序的默认布局：
- en: '[PRE47]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now we need to map the `/messages` route with this specific transition effect
    and without affecting other routes. In order to do that, we need to add a field
    called `transition` to the `meta` property of this route configuration, in `src/router/index.js`:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将 `/messages` 路由与这个特定的过渡效果相匹配，同时不影响其他路由。为了做到这一点，我们需要在 `src/router/index.js`
    中的此路由配置中添加一个名为 `transition` 的字段：
- en: '[PRE48]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Check the code for your `routes` object to confirm it''s the same as the following
    code. Here, we are matching each URL for our application with a view file:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的 `routes` 对象的代码，以确认它与以下代码相同。在这里，我们将我们应用程序的每个URL与一个视图文件相匹配：
- en: '[PRE49]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This won't show in the browser, since this transition declaration is not yet
    tied to the `data` field of the `App.vue` component, and it needs to be tied before
    the view starts loading. For that, we will take advantage of the `created` life
    cycle hook and the `beforeEach` route hook of the `$router` global mentioned in
    *Chapter 6*, *Routing*.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这在浏览器中不会显示，因为此过渡声明尚未与 `App.vue` 组件的 `data` 字段绑定，并且需要在视图开始加载之前绑定。为此，我们将利用 *第6章*
    中提到的 `$router` 全局变量的 `created` 生命周期钩子和 `beforeEach` 路由钩子。
- en: 'Let''s add a hook for before each route change in `App.vue`. We will check
    whether the destination route (`to`) has a custom `transition` effect. If it does,
    we will map the value of `transition` in the `App` instance to it; otherwise,
    we''ll use the fallback default value before continuing the navigation, as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 `App.vue` 中添加一个在每次路由更改之前的钩子。我们将检查目标路由（`to`）是否有自定义的 `transition` 效果。如果有，我们将把
    `App` 实例中的 `transition` 值映射到它；否则，在继续导航之前，我们将使用回退默认值，如下所示：
- en: '[PRE50]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the application using the following command:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行应用程序：
- en: '[PRE51]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now if you open `localhost:8080` in your browser and navigate to `/messages`,
    you should see something similar to *Figure 7.11*:![Figure 7.11: Navigating to
    /messages with a zoom effect in progress'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果您在浏览器中打开 `localhost:8080` 并导航到 `/messages`，您应该会看到类似于 *图7.11* 的内容：![图7.11：带有缩放效果的导航到
    /messages
- en: '](img/B15218_07_11.jpg)'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_07_11.jpg)'
- en: 'Figure 7.11: Navigating to /messages with a zoom effect in progress'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11：带有缩放效果的导航到 /messages
- en: 'While navigating to other routes, we should see the default transition shown
    in *Figure 7.12*:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航到其他路由时，我们应该看到 *图7.12* 中显示的默认过渡效果：
- en: '![Figure 7.12: Navigating to /home with a fade effect in progress'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.12：带有淡入效果的导航到 /home'
- en: '](img/B15218_07_12.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15218_07_12.jpg)'
- en: 'Figure 7.12: Navigating to /home with a fade effect in progress'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：带有淡入效果的导航到 /home
- en: This exercise demonstrates how we can easily set up different transitions on
    different pages with minimum effort, by combining the right hooks and methods.
    You can experiment a bit further with an external library to make your app animation
    smoother and livelier.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习演示了我们可以如何通过结合正确的钩子和方法，以最少的努力在不同的页面上设置不同的过渡。你可以通过外部库进一步实验，以使你的应用程序动画更加平滑和生动。
- en: Using the GSAP Library for Animation
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GSAP 库进行动画
- en: GSAP is an open source scripted library that focuses solely on fast animation
    using JavaScript and provides cross-platform consistency support. It supports
    animation on a wide range of element types, such as Scalar Vector Graphics (SVG),
    React components, canvas, and so on.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: GSAP 是一个专注于使用 JavaScript 进行快速动画的开源脚本库，并提供跨平台的兼容性支持。它支持在广泛的元素类型上动画，例如矢量图形 (SVG)、React
    组件、画布等。
- en: GSAP is flexible, easy to install, and will adjust to any configuration given,
    from CSS properties or SVG attributes to a numeric value for rendering an object
    into a canvas.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: GSAP 是灵活的，易于安装，并能适应任何配置，从 CSS 属性或 SVG 属性到将对象渲染到画布上的数值。
- en: The core library is a suite of different tools, divided into core and others,
    such as plugins, easing tools, and utilities.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 核心库是一套不同的工具，分为核心和其他，例如插件、缓动工具和实用工具。
- en: Installing GSAP
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 GSAP
- en: 'Installing GSAP is straightforward using `npm install` or `yarn add`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `npm install` 或 `yarn add` 可以直接安装 GSAP：
- en: '[PRE52]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After installation, you should see a success output similar to that shown in
    the following screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你应该会看到一个类似于以下截图的成功输出：
- en: '![Figure 7.13: Results after successful installation'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.13：成功安装后的结果'
- en: '](img/B15218_07_13.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15218_07_13.jpg](img/B15218_07_13.jpg)'
- en: 'Figure 7.13: Results after successful installation'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13：成功安装后的结果
- en: Now that we have GSAP installed, we'll look at basic tweens in GSAP.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 GSAP，我们将看看 GSAP 中的基本缓动动画。
- en: Basic tweens
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本缓动动画
- en: '**Tween** is a concept defined by the GSAP library creator as a high-performance
    setter for performing all desired animation work based on the user''s configuration
    inputs. The inputs can be the targeted objects to animate, a period, or any specific
    CSS properties to animate. Upon performing the animation, the tween figures out
    what the values of CSS properties should be according to the given duration and
    applies them accordingly.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓动**是由 GSAP 库的创建者定义的一个概念，是一个高性能的设置器，用于执行所有基于用户配置输入的所需动画工作。输入可以是动画的目标对象、一个时间段或任何特定的
    CSS 属性。在执行动画时，缓动根据给定的持续时间确定 CSS 属性的值，并相应地应用它们。'
- en: The following are the fundamental methods to create basic tweens.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些创建基本缓动动画的基本方法。
- en: '**gsap.to()**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**gsap.to()**'
- en: 'The most commonly used tween is `gsap.to()`, which is called to create an animation,
    based on the two main parameters:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的缓动是 `gsap.to()`，它用于创建动画，基于两个主要参数：
- en: '`#myId`.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#myId`。'
- en: '`opacity: 0`, `rotation: 90`, or `fontSize: ''20px''`, animation properties
    such as `duration: 1`, `stagger: 0.2`, or `ease: "elastic"`, and event handler
    properties such as `onComplete` or `onUpdate`.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`透明度：0`，`旋转：90`，或 `字体大小：''20px''`，动画属性如 `持续时间：1`，`延迟：0.2`，或 `缓动："弹性"`，以及事件处理程序属性如
    `onComplete` 或 `onUpdate`。'
- en: 'For example, if we want to animation the logo of Vue in `HelloWorld.vue`, we
    run the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想在 `HelloWorld.vue` 中动画化 Vue 的标志，我们运行以下代码：
- en: '[PRE53]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Or use the following to move an object with `x` properties (same as `transform:
    translateX()`):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '或者使用以下方法通过 `x` 属性移动一个对象（与 `transform: translateX()` 相同）：'
- en: '[PRE54]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '**gsap.from() and gsap.fromTo**'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '**gsap.from() 和 gsap.fromTo**'
- en: We don't always want to define the expected animation effect for the element
    in view. Instead, we define the default values where the animation should start
    from for the targeted element. And that's when we use `gsap.from()`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不总是想为视图中元素定义预期的动画效果。相反，我们定义动画应该从目标元素开始时的默认值。这就是我们使用 `gsap.from()` 的时候。
- en: 'For example, assuming the current `opacity` value of a box is `1`, the `scale`
    value is `1`, and the `x` position is `0`, we want to set up an animation to these
    current values *from* a position `x` of `300`, with an `opacity` value of `0`
    and a `scale` value of `0.5`. In other words, the animation will be done from
    `{x: 300, opacity: 0, scale: 0.5}` to whatever values the element has currently:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，假设一个盒子的当前 `透明度` 值为 `1`，`缩放` 值为 `1`，`x` 位置为 `0`，我们想要设置一个动画，从位置 `x` 的 `300`，`透明度`
    值为 `0`，`缩放` 值为 `0.5` 开始。换句话说，动画将从 `{x: 300, 透明度: 0, 缩放: 0.5}` 开始，到元素当前拥有的任何值：'
- en: '[PRE55]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'But in many cases, we need to set up the starting and ending values for an
    animation since one side is not good enough. For that purpose, GSAP provides `gasp.fromTo()`
    with the following syntax:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 但在许多情况下，我们需要为动画设置起始值和结束值，因为单侧不够好。为此目的，GSAP提供了`gsap.fromTo()`，其语法如下：
- en: '[PRE56]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Let''s define an animation for a gray box with original values of `{ opacity:
    0, scale: 0.5, x: 300 }` to values of `{ opacity: 1, scale: 1, x: 100, rotation:
    360}`:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们定义一个动画，将一个灰色框从原始值`{ opacity: 0, scale: 0.5, x: 300 }`转换为值`{ opacity: 1,
    scale: 1, x: 100, rotation: 360}`：'
- en: '[PRE57]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In order to translate all the CSS-like values to the corresponding CSS values,
    one of the core plugins for GSAP is `CSSPlugin`. This plugin will detect whether
    the target is a DOM element automatically, intercept the passed values, translate
    them into proper CSS values, and then apply them to the element as inline styles
    accordingly.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将所有类似CSS的值转换为相应的CSS值，GSAP的核心插件之一是`CSSPlugin`。此插件将自动检测目标是否为DOM元素，拦截传递的值，将它们转换为适当的CSS值，然后相应地将其作为内联样式应用到元素上。
- en: In the next section, we'll walk through an exercise of creating a simple tween
    using GSAP.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过一个使用GSAP创建简单缓动的练习进行讲解。
- en: 'Exercise 7.04: Tweens with GSAP'
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.04：使用GSAP进行缓动
- en: The goal of this exercise is to get you comfortable with working with external
    libraries such as GSAP. We'll make a simple animation, but you can apply this
    same pattern anywhere in your Vue code. We'll be applying the animation during
    mount, but JavaScript animations can be triggered dynamically based on things
    such as timers, random integers, or inputs such as buttons.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是让您熟悉使用外部库，如GSAP。我们将制作一个简单的动画，但您可以在Vue代码的任何地方应用此相同的模式。我们将在挂载时应用动画，但JavaScript动画可以根据计时器、随机整数或按钮等输入动态触发。
- en: 'To access the code files for this exercise, visit [https://packt.live/3kVO4gm](https://packt.live/3kVO4gm):'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此练习的代码文件，请访问[https://packt.live/3kVO4gm](https://packt.live/3kVO4gm)：
- en: Note
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此练习之前，运行`vue create`命令以生成Vue入门项目。
- en: 'Create a Vue project by running the following command:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令创建一个Vue项目：
- en: '[PRE58]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Install GSAP with `yarn` or `npm` using one of the following commands:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`yarn`或`npm`通过以下命令之一安装GSAP：
- en: '[PRE59]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In `src/App.vue`, import GSAP:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.vue`中导入GSAP：
- en: '[PRE60]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Find the existing `img` tag in `src/App.vue` and add `ref="logo"` to it as follows:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.vue`中找到现有的`img`标签，并按照以下方式添加`ref="logo"`：
- en: '[PRE61]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add a function called `mounted` to the exported object in `src/App.vue` that
    defines the logo as a variable and adds an animation, which is `10` rotations
    over `30` seconds:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.vue`中导出的对象中添加一个名为`mounted`的函数，该函数将logo定义为变量并添加一个动画，该动画为`10`次旋转，持续`30`秒：
- en: '[PRE62]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Next, start the application by running `yarn serve` in the terminal.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过在终端运行`yarn serve`来启动应用程序。
- en: Open your browser to `localhost:8080` and you should see the default Vue starter
    page but with the logo spinning, as shown in the following screenshot:![Figure
    7.14:Simple animation with GSAP
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器到`localhost:8080`，您应该看到默认的Vue入门页面，但带有旋转的logo，如下面的截图所示：![图7.14：使用GSAP的简单动画
- en: '](img/B15218_07_14.jpg)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15218_07_14.jpg]'
- en: Figure 7.14:Simple animation with GSAP
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14：使用GSAP的简单动画
- en: In this exercise, we implemented a simple spinning animation using GSAP in Vue.
    Next, we will see how we can modify the look and feel of an animation with easing.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用GSAP在Vue中实现了一个简单的旋转动画。接下来，我们将看到如何通过缓动修改动画的外观和感觉。
- en: Modifying the Look and Feel with Easing
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缓动修改外观和感觉
- en: 'Easing is important because it determines the movement style between the original
    starting point and the destination point of an animation. It controls the rate
    of change during a tween; hence a user has the time to see the effect, whether
    it be smooth, sudden, bouncing, or some other transition effect:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动很重要，因为它决定了动画的原点与目的地之间的运动风格。它控制缓动过程中的变化率；因此，用户有时间看到效果，无论是平滑、突然、弹跳还是其他过渡效果：
- en: '[PRE63]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In addition, there are additional built-in plugins in GSAP providing extra
    capabilities for configuring the easing effect, such as power, back, elastic,
    and so on. Take a bubble effect, for instance; to make the movement smooth within
    a certain degree, we use `Back.easeOut.config()` and `Elastic.easOut.config()`
    and pass the related settings:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GSAP还提供了额外的内置插件，用于配置额外的缓动效果，例如power、back、elastic等。以气泡效果为例；为了使运动在一定范围内平滑，我们使用`Back.easeOut.config()`和`Elastic.easeOut.config()`并传递相关设置：
- en: '[PRE64]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: With `ease`, we can make the same animation look completely different based
    on the style set. Next, we'll look at `stagger`, another option that affects the
    look and feel of an animation.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ease`，我们可以根据设置的样式使相同的动画看起来完全不同。接下来，我们将探讨`stagger`，这是另一个影响动画外观和感觉的选项。
- en: Modifying the Look and Feel with Stagger
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用交错修改外观和感觉
- en: We have gone through how to animate a list of items using Vue transitions in
    the previous sections. Staggering is one of the animations we should take into
    consideration for a list of objects since it makes animation for this type of
    target easy and with an appropriate delay between each of the item's animations.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们介绍了如何使用Vue过渡来动画化一系列项目。对于对象列表，我们应该考虑交错动画，因为它使得此类目标的动画变得简单，并且每个项目动画之间有适当的延迟。
- en: 'For example, by assigning a value to the `stagger` property, we can create
    and apply some configuration options besides just the delay duration number (in
    milliseconds):'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过将值分配给`stagger`属性，我们可以在除了延迟持续时间数字（以毫秒为单位）之外创建并应用一些配置选项：
- en: '[PRE65]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: You can use `repeat` to define how many times it should repeat the animation.
    A negative number will make it repeat infinitely.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`repeat`来定义动画应该重复多少次。负数将使其无限重复。
- en: Using Timeline
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用时间线
- en: '**Timeline** is a schedule of tweens under your total control to define overlap
    or gaps between the tweens. It''s useful when you need to control a group of animations
    according to an order, build a sequence of animations, chain the animations for
    a final callback, or modularize your animation code for reusability.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间线**是您完全控制的缓动调度，用于定义缓动之间的重叠或间隔。当您需要根据顺序控制一组动画、构建一系列动画、链式动画以进行最终回调或模块化动画代码以实现可重用时，它非常有用。'
- en: 'In order to use Timeline, you can choose to create a timeline instance by using
    the built-in `gsap.timeline()` method, or import `TimelineMax` or `TimelineLite`
    from the core library and set up the instance with a set of configurations, as
    follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用时间线，您可以选择使用内置的`gsap.timeline()`方法创建时间线实例，或者从核心库中导入`TimelineMax`或`TimelineLite`并使用一组配置设置实例，如下所示：
- en: '[PRE66]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: We will look briefly into the two main use cases of Timeline, **sequencing**
    and **chaining**.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍时间线的两个主要用例，**排序**和**链式**。
- en: '**Sequencing**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**排序**'
- en: 'With similar core functionalities to GSAP, Timeline also provides `to()`, `from()`,
    and `fromTo()` methods. All animations by default can be sequenced as one after
    another, with the option to force timing to control where or when things go using
    the `position` attribute, which is an optional argument:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 与GSAP类似的核心功能，时间线也提供了`to()`、`from()`和`fromTo()`方法。默认情况下，所有动画都可以按顺序排列，有选项强制使用`position`属性来控制事物在哪里或何时进行，这是一个可选参数：
- en: '[PRE67]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: In this section, we looked at using the GSAP Timeline feature to schedule a
    series of animations all running one after the other, some with a gap and others
    with an overlap. In the next section, we'll look further at sequencing animations
    with the concept of chaining.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了使用GSAP时间线功能来安排一系列动画，这些动画一个接一个地运行，有些有间隔，有些有重叠。在下一节中，我们将进一步探讨使用链式概念排序动画。
- en: '**Chaining**'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**链式**'
- en: 'As with sequencing, chaining arranges animation into an order. Instead of calling
    each animation with the instance method each time separately, it will be placed
    in a chain. All the special values that are used between the child tweens can
    be defined, or in the instance created as defaults, or alternatively in the first
    call, get other timelines (list of animations) in the chain to inherit these values:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 与排序类似，链式排列将动画按顺序排列。而不是每次单独调用每个动画的实例方法，它将被放置在链中。在子缓动之间使用的所有特殊值都可以定义，或者在实例中创建为默认值，或者也可以在第一次调用中，获取链中的其他时间线（动画列表）以继承这些值：
- en: '[PRE68]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We can also intercept the timing position of each chained timeline using `position`,
    as described earlier:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`position`拦截每个链式时间线的定时位置，正如之前所描述的：
- en: '[PRE69]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: GSAP has very detailed documentation, so just visit [https://greensock.com/get-started](https://greensock.com/get-started)
    and start animating.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: GSAP有非常详细的文档，所以只需访问[https://greensock.com/get-started](https://greensock.com/get-started)并开始动画。
- en: In the next section we'll build on what we've learned about GSAP to make a message-viewing
    app with animated transitions.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将基于我们对GSAP的了解来制作一个带有动画过渡的消息查看应用。
- en: 'Activity 7.01: Building a Messages App with Transition and GSAP'
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动7.01：使用过渡和GSAP构建消息应用
- en: 'In this activity, you will use CSS to write custom transitions, use transition
    groups and routes to do more complex transitions, and use a third-party transition
    library such as GSAP to do animations and transitions in the app. You will be
    creating a simple messages app that makes use of transition effects:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，你将使用CSS编写自定义过渡，使用过渡组和路由进行更复杂的过渡，并使用第三方过渡库如GSAP在应用中进行动画和过渡。你将创建一个简单的消息应用，利用过渡效果：
- en: Note
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此练习之前，运行`vue create`命令以生成Vue入门项目。
- en: 'Create a `Messages` route (at `src/views/Messages.vue`) that renders two nested
    views: `Messages` (`src/views/MessageList.vue`) displaying list of messages and
    `MessageEditor` (`src/views/MessageEditor.vue`) with one `textarea` and a submit
    button for creating a new message.'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Messages`路由（在`src/views/Messages.vue`），用于渲染两个嵌套视图：`Messages`（`src/views/MessageList.vue`）显示消息列表和`MessageEditor`（`src/views/MessageEditor.vue`）包含一个`textarea`和一个用于创建新消息的提交按钮。
- en: Create a `Message` route (at `src/views/Message.vue`) that renders a view of
    a single message with a given ID.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Message`路由（在`src/views/Message.vue`），用于渲染具有给定ID的单条消息视图。
- en: Register all the routes.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册所有路由。
- en: Add a transition to the main `router-view` in the `src/App.vue` file with a
    simple transition name, `fade`, and `out-in` mode.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/App.vue`文件中为主`router-view`添加一个简单的过渡名称`fade`和`out-in`模式。
- en: Add the transition to the nested `router-view` in `src/views/Messages.vue` by
    using custom transition classes
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用自定义过渡类，将过渡添加到`src/views/Messages.vue`中的嵌套`router-view`。
- en: Write an animation effect for zooming in on entering the route and zooming out
    on leaving the route.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个动画效果，在进入路由时放大，在离开路由时缩小。
- en: Write another animation effect for fading in on a leaving event.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为离开事件编写另一个淡入动画效果。
- en: Add a transition to the list of messages in `MessageList.vue` with a bounce-in
    effect.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MessageList.vue`的消息列表中添加一个弹入效果的过渡。
- en: Use GSAP to animate the bounce-in effect.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用GSAP动画实现弹入效果。
- en: Add a moving effect for an item when it appears.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为出现的项目添加移动效果。
- en: 'When navigating from the list page to the editor page, you should see the feed
    slide away to the left as the editor appears, as shown in *Figure 7.15*:![Figure
    7.15: Fade out when navigating from message list view to editor view'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当从列表页面导航到编辑页面时，你应该看到内容流滑向左侧，同时编辑器出现，如图*图7.15*所示：![图7.15：从消息列表视图导航到编辑视图时淡出
- en: '](img/B15218_07_15.jpg)'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15218_07_15.jpg)'
- en: 'Figure 7.15: Fade out when navigating from message list view to editor view'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15：从消息列表视图导航到编辑视图时淡出
- en: 'When navigating from the message view to the editor view, you should see the
    text input slide out to the left, as shown in *Figure 7.16*:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 当从消息视图导航到编辑视图时，你应该看到文本输入向左滑动，如图*图7.16*所示：
- en: '![Figure 7.16: Fade out when navigating from editor view to message list view'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.16：从编辑视图导航到消息列表视图时淡出'
- en: '](img/B15218_07_16.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15218_07_16.jpg)'
- en: 'Figure 7.16: Fade out when navigating from editor view to message list view'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16：从编辑视图导航到消息列表视图时淡出
- en: 'Next, the message list will appear with the numbers spinning with a bounce
    effect, as shown in *Figure 7.17*:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，消息列表将以弹跳效果显示，数字旋转，如图*图7.17*所示：
- en: '![Figure 7.17: Bounce effect when displaying the message feed in message list
    view'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.17：在消息列表视图中显示消息源时的弹跳效果'
- en: '](img/B15218_07_17.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15218_07_17.jpg)'
- en: 'Figure 7.17: Bounce effect when displaying the message feed in message list
    view'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17：在消息列表视图中显示消息源时的弹跳效果
- en: 'When clicking on a specific message, `0` or `1` in our example, our list will
    slide out to the left and you should see the message content, as shown in *Figure
    7.18*:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击特定的消息，例如我们的例子中的`0`或`1`，我们的列表将向左滑动，你应该看到消息内容，如图*图7.18*所示：
- en: '![Figure 7.18: Single message view'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.18：单条消息视图'
- en: '](img/B15218_07_18.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15218_07_18.jpg)'
- en: 'Figure 7.18: Single message view'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18：单条消息视图
- en: Note
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor395).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor395)找到。
- en: Summary
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we explored the built-in support Vue.js has for transitions
    and animations, both on single and multiple components, and we saw how easy it
    is to set it up. At this point, you have created your transition and animation
    effects for routes and components and witnessed all the basic features of Vue.js
    transitions: the custom transition class, group transition, and transition modes.
    Moreover, you also learned about other leading animation third-party libraries
    such as GSAP and saw how to integrate them with your Vue application, in order
    to get better animation effects on the web.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Vue.js 内置对过渡和动画的支持，包括对单个和多个组件的支持，并看到了如何轻松地设置它们。到这一点，你已经为路由和组件创建了过渡和动画效果，并见证了
    Vue.js 过渡的所有基本功能：自定义过渡类、分组过渡和过渡模式。此外，你还了解到了其他领先的第三方动画库，如 GSAP，并看到了如何将它们与你的 Vue
    应用程序集成，以便在网页上获得更好的动画效果。
- en: The next chapter focuses on another crucial topic for building a production-ready
    Vue application, state management, and how components within an application communicate
    with one another using Vuex, a state management library.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将重点介绍构建生产就绪的 Vue 应用程序的关键主题之一，即状态管理，以及应用程序内部组件如何使用 Vuex（一个状态管理库）相互通信。
