["```js\n> ./gradlew test\n```", "```js\ncom.mycompany.store.web.rest.ProductOrderResourceIntTest > getProductOrder FAILED\n java.lang.AssertionError at ProductOrderResourceIntTest.java:229\n\ncom.mycompany.store.web.rest.ProductOrderResourceIntTest > getAllProductOrders FAILED\n java.lang.AssertionError at ProductOrderResourceIntTest.java:213\n\ncom.mycompany.store.web.rest.ProductOrderResourceIntTest > getNonExistingProductOrder FAILED\n java.lang.AssertionError at ProductOrderResourceIntTest.java:242\n\ncom.mycompany.store.web.rest.ShipmentResourceIntTest > getAllShipments FAILED\n java.lang.AssertionError at ShipmentResourceIntTest.java:176\n\ncom.mycompany.store.web.rest.ShipmentResourceIntTest > getShipment FAILED\n java.lang.AssertionError at ShipmentResourceIntTest.java:192\n\ncom.mycompany.store.web.rest.ShipmentResourceIntTest > getNonExistingShipment FAILED\n java.lang.AssertionError at ShipmentResourceIntTest.java:205\n\ncom.mycompany.store.web.rest.InvoiceResourceIntTest > getInvoice FAILED\n java.lang.AssertionError at InvoiceResourceIntTest.java:309\n\ncom.mycompany.store.web.rest.InvoiceResourceIntTest > getNonExistingInvoice FAILED\n java.lang.AssertionError at InvoiceResourceIntTest.java:326\n\ncom.mycompany.store.web.rest.InvoiceResourceIntTest > getAllInvoices FAILED\n java.lang.AssertionError at InvoiceResourceIntTest.java:289\n\ncom.mycompany.store.web.rest.OrderItemResourceIntTest > getNonExistingOrderItem FAILED\n java.lang.AssertionError at OrderItemResourceIntTest.java:247\n\ncom.mycompany.store.web.rest.OrderItemResourceIntTest > getAllOrderItems FAILED\n java.lang.AssertionError at OrderItemResourceIntTest.java:218\n\ncom.mycompany.store.web.rest.OrderItemResourceIntTest > getOrderItem FAILED\n java.lang.AssertionError at OrderItemResourceIntTest.java:234\n2018-02-11 13:55:55.693 INFO 27458 --- [ Thread-10] c.m.store.config.CacheConfiguration : Closing Cache Manager\n\n217 tests completed, 12 failed\n```", "```js\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = StoreApp.class)\n@WithMockUser(username=\"admin\", authorities={\"ROLE_ADMIN\"}, password = \"admin\")\npublic class InvoiceResourceIntTest {\n...\n}\n```", "```js\n> yarn test\n```", "```js\n...\n\ndescribe('Component Tests', () => {\n    describe('Product Management Component', () => {\n        ...\n        beforeEach(() => {\n            TestBed.configureTestingModule({\n                ...\n            })\n            .overrideTemplate(ProductComponent, '')\n            .compileComponents();\n            ...\n        });\n\n        it('Should call load all on init', () => {\n           ...\n        });\n        ...\n    });\n\n});\n```", "```js\n> ./gradlew clean webpackBuildDev bootRun\n```", "```js\n> yarn e2e\n```", "```js\nfdescribe('Customer e2e test', () => {\n   ...\n});\n```", "```js\n    it('should create and save Customers', () => {\n        ...\n        customerDialogPage.setEmailInput('email@email.com');\n        expect(customerDialogPage.getEmailInput()).toMatch('email@email.com');\n        ...\n    });\n```", "```js\n    table = element.all(by.css('.table-responsive tbody tr'));\n    getTable() {\n        return this.table;\n    }\n\n    deleteFirstItem() {\n        this.table.first().element(by.css('button.btn-\n        danger')).click();\n    }\n\n```", "```js\nit('should create and save Customers', () => {\n        ...\n        expect(customerComponentsPage.getTable().isPresent()).toBeTruthy();\n    });\n\n    it('should delete Customers', () => {\n        customerComponentsPage.deleteFirstItem();\n        const deleteBtn = element.all(by.css('.modal-footer \n        .btn.btn-danger'));\n        deleteBtn.click();\n        expect(customerComponentsPage.getTable().isPresent()).toBeFalsy();\n    });\n```", "```js\n> jhipster ci-cd\n```", "```js\nWelcome to the JHipster CI/CD Sub-Generator\n? What CI/CD pipeline do you want to generate? (Press <space> to select, <a> to toggle all, <i> to inverse selection) >◯ Jenkins pipeline\n ◯ Travis CI\n ◯ GitLab CI\n ◯ CircleCI\n```", "```js\n? What CI/CD pipeline do you want to generate? Jenkins pipeline\n? Jenkins pipeline: what tasks/integrations do you want to include? >◯ Perform the build in a Docker container\n ◯ Analyze code with Sonar\n ◯ Send build status to GitLab\n ◯ Build and publish a Docker image\n```", "```js\n? What CI/CD pipeline do you want to generate? Jenkins pipeline\n? Jenkins pipeline: what tasks/integrations do you want to include?\n? Deploy to heroku? >◯ In Jenkins pipeline\n```", "```js\n   create Jenkinsfile\n   create src/main/docker/jenkins.yml\n   create src/main/resources/idea.gdsl\nCongratulations, JHipster execution is complete!\n```", "```js\n#!/usr/bin/env groovy\n\nnode {\n    stage('checkout') {\n        checkout scm\n    }\n\n    stage('check java') {\n        sh \"java -version\"\n    }\n\n    stage('clean') {\n        sh \"chmod +x gradlew\"\n        sh \"./gradlew clean --no-daemon\"\n    }\n\n    stage('install tools') {\n        sh \"./gradlew yarn_install -PnodeInstall --no-daemon\"\n    }\n\n    stage('backend tests') {\n        try {\n            sh \"./gradlew test -PnodeInstall --no-daemon\"\n        } catch(err) {\n            throw err\n        } finally {\n            junit '**/build/**/TEST-*.xml'\n        }\n    }\n\n    stage('frontend tests') {\n        try {\n            sh \"./gradlew yarn_test -PnodeInstall --no-daemon\"\n        } catch(err) {\n            throw err\n        } finally {\n            junit '**/build/test-results/karma/TESTS-*.xml'\n        }\n    }\n\n    stage('packaging') {\n        sh \"./gradlew bootRepackage -x test -Pprod -PnodeInstall --\n        no-daemon\"\n        archiveArtifacts artifacts: '**/build/libs/*.war', \n        fingerprint: true\n    }\n\n    stage('deployment') {\n        sh \"./gradlew deployHeroku --no-daemon\"\n    }\n}\n```", "```js\n    stage('checkout') {\n        checkout scm\n    }\n```", "```js\n    stage('check java') {\n        sh \"java -version\"\n    }\n```", "```js\n    stage('clean') {\n        sh \"chmod +x gradlew\"\n        sh \"./gradlew clean --no-daemon\"\n    }\n```", "```js\n    stage('install tools') {\n        sh \"./gradlew yarn_install -PnodeInstall --no-daemon\"\n    }\n```", "```js\n    stage('backend tests') {\n        try {\n            sh \"./gradlew test -PnodeInstall --no-daemon\"\n        } catch(err) {\n            throw err\n        } finally {\n            junit '**/build/**/TEST-*.xml'\n        }\n    }\n```", "```js\n    stage('frontend tests') {\n        try {\n            sh \"./gradlew yarn_test -PnodeInstall --no-daemon\"\n        } catch(err) {\n            throw err\n        } finally {\n            junit '**/build/test-results/karma/TESTS-*.xml'\n        }\n    }\n```", "```js\n    stage('packaging') {\n        sh \"./gradlew bootRepackage -x test -Pprod -PnodeInstall --no-\n        daemon\"\n        archiveArtifacts artifacts: '**/build/libs/*.war', fingerprint: \n        true\n    }\n```", "```js\n    stage('deployment') {\n        sh \"./gradlew deployHeroku --no-daemon\"\n    }\n```", "```js\n> git add --all\n> git commit -am \"add Jenkins pipeline for ci/cd\"\n```", "```js\n> cd online-store\n> git remote add origin https://github.com/<username>/online-store.git\n> git push -u origin master\n```"]