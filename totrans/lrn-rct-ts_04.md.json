["```js\nfunction SomeComponent() {\n  function someEffect() {\n    console.log(\"Some effect\");\n  }\n  useEffect(someEffect);\n  return ...\n}\n```", "```js\nfunction SomeComponent() {\n  useEffect(() => {\n    console.log(\"Some effect\");\n  });\n  return ...\n}\n```", "```js\nfunction SomeOtherComponent({ search }) {\n  useEffect(() => {\n    console.log(\"An effect dependent on a search prop\",       search);\n  }, [search]);\n  Return ...;\n}\n```", "```js\nexport function AnotherComponent() {\n  function handleClick() {\n    useEffect(() => {\n      console.log(\"Some effect\");\n    });\n  }\n  return <button onClick={handleClick}>Cause effect</button>;\n}\n```", "```js\nexport function AnotherComponent() {\n  const [clicked, setClicked] = useState(false);\n  useEffect(() => {\n    if (clicked) {\n      console.log(\"Some effect\");\n    }\n  }, [clicked]);\n  function handleClick() {\n    setClicked(true);\n  }\n  return <button onClick={handleClick}>Cause effect</button>;\n}\n```", "```js\nfunction YetAnotherComponent({ someProp }) {\n  if (!someProp) {\n    return null;\n  }\n  useEffect(() => {\n    console.log(\"Some effect\");\n  });\n  return ...\n}\n```", "```js\nfunction YetAnotherComponent({someProp}) {\n  useEffect(() => {\n    if (someProp) {\n      console.log(\"Some effect\");\n    }\n  });\n  if (!someProp) {\n    return null\n  }\n  return ...\n}\n```", "```js\nfunction ExampleComponent({onClickAnywhere}) {\n  useEffect(() => {\n    function handleClick() {\n      onClickAnywhere();\n    }\n    document.addEventListener(\"click\", handleClick);\n  });\n  return ...\n}\n```", "```js\nfunction ExampleComponent({ onClickAnywhere }) {\n  useEffect(() => {\n    function handleClick() {\n      onClickAnywhere();\n    }\n    document.addEventListener(\"click\", listener);\n    return function cleanup() {\n      document.removeEventListener(\"click\", listener);\n    };\n  });\n  return ...;\n}\n```", "```js\nfunction ExampleComponent({ onClickAnywhere }) {\n  useEffect(() => {\n    function handleClick() {\n      onClickAnywhere();\n    }\n    document.addEventListener(\"click\", listener);\n    return () => {\n      document.removeEventListener(\"click\", listener);\n    };\n  });\n  return ...;\n```", "```js\n    npx create-react-app app --template typescript\n    ```", "```js\n    npm i -D prettier eslint-config-prettier eslint-plugin-prettier\n    ```", "```js\n    {\n    ```", "```js\n      \"editor.formatOnSave\": true,\n    ```", "```js\n      \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n    ```", "```js\n    }\n    ```", "```js\n    {\n    ```", "```js\n      ...,\n    ```", "```js\n      \"eslintConfig\": {\n    ```", "```js\n        \"extends\": [\n    ```", "```js\n          \"react-app\",\n    ```", "```js\n          \"react-app/jest\",\n    ```", "```js\n          \"plugin:prettier/recommended\"\n    ```", "```js\n        ]\n    ```", "```js\n      },\n    ```", "```js\n      ...\n    ```", "```js\n    }\n    ```", "```js\n    {\n    ```", "```js\n      \"printWidth\": 100,\n    ```", "```js\n      \"singleQuote\": true,\n    ```", "```js\n      \"semi\": true,\n    ```", "```js\n      \"tabWidth\": 2,\n    ```", "```js\n      \"trailingComma\": \"all\",\n    ```", "```js\n      \"endOfLine\": \"auto\"\n    ```", "```js\n    }\n    ```", "```js\n    import React from 'react';\n    ```", "```js\n    import './App.css';\n    ```", "```js\n    function App() {\n    ```", "```js\n      return <div className=\"App\"></div>;\n    ```", "```js\n    }\n    ```", "```js\n    export default App;\n    ```", "```js\n    type Person = {\n    ```", "```js\n      name: string,\n    ```", "```js\n    };\n    ```", "```js\n    export function getPerson(): Promise<Person> {\n    ```", "```js\n      return new Promise((resolve) =>\n    ```", "```js\n        setTimeout(() => resolve({ name: \"Bob\" }), 1000)\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    import { useEffect } from 'react';\n    ```", "```js\n    import { getPerson } from './getPerson';\n    ```", "```js\n    export function PersonScore() {\n    ```", "```js\n      return null;\n    ```", "```js\n    }\n    ```", "```js\n    export function PersonScore() {\n    ```", "```js\n      useEffect(() => {\n    ```", "```js\n        getPerson().then((person) => console.log(person));\n    ```", "```js\n      }, []);\n    ```", "```js\n      return null;\n    ```", "```js\n    }\n    ```", "```js\n    import React from 'react';\n    ```", "```js\n    import './App.css';\n    ```", "```js\n    import { PersonScore } from './PersonScore';\n    ```", "```js\n    function App() {\n    ```", "```js\n      return (\n    ```", "```js\n        <div className=\"App\">\n    ```", "```js\n          <PersonScore />\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export default App;\n    ```", "```js\n    useEffect(async () => {\n    ```", "```js\n      const person = await getPerson();\n    ```", "```js\n      console.log(person);\n    ```", "```js\n    }, []);\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      async function getThePerson() {\n    ```", "```js\n        const person = await getPerson();\n    ```", "```js\n        console.log(person);\n    ```", "```js\n      }\n    ```", "```js\n      getThePerson();\n    ```", "```js\n    }, []);\n    ```", "```js\nconst [state, setState] = useState(initialState);\n```", "```js\n    import { useEffect, useState } from 'react';\n    ```", "```js\n    export function PersonScore() {\n    ```", "```js\n      const [name, setName] = useState<string | undefined>();\n    ```", "```js\n      const [score, setScore] = useState(0);\n    ```", "```js\n      const [loading, setLoading] = useState(true);\n    ```", "```js\n      useEffect( ... );\n    ```", "```js\n      return null;\n    ```", "```js\n    }\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      getPerson().then((person) => {\n    ```", "```js\n        setLoading(false);\n    ```", "```js\n        setName(person.name);\n    ```", "```js\n      });\n    ```", "```js\n    }, []);\n    ```", "```js\n    useEffect( ... );\n    ```", "```js\n    if (loading) {\n    ```", "```js\n      return <div>Loading ...</div>;\n    ```", "```js\n    }\n    ```", "```js\n    return ...\n    ```", "```js\n    if (loading) {\n    ```", "```js\n      return <div>Loading ...</div>;\n    ```", "```js\n    }\n    ```", "```js\n    return (\n    ```", "```js\n      <div>\n    ```", "```js\n        <h3>\n    ```", "```js\n          {name}, {score}\n    ```", "```js\n        </h3>\n    ```", "```js\n        <button>Add</button>\n    ```", "```js\n        <button>Subtract</button>\n    ```", "```js\n        <button>Reset</button>\n    ```", "```js\n      </div>\n    ```", "```js\n    );\n    ```", "```js\n    <button onClick={() => setScore(score + 1)}>Add</button>\n    ```", "```js\nsetScore(previousScore => previousScore + 1)\n```", "```js\n    <button onClick={() => setScore(score - 1)}>Subtract</button>\n    ```", "```js\n    <button onClick={() => setScore(0)}>Reset</button>\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      getPerson().then((person) => {\n    ```", "```js\n        setLoading(false);\n    ```", "```js\n        setName(person.name);\n    ```", "```js\n        console.log(\"State values\", loading, name);\n    ```", "```js\n      });\n    ```", "```js\n    }, []);\n    ```", "```js\nconst [state, dispatch] = useReducer(reducer, initialState);\n```", "```js\ndispatch({ type: 'add', amount: 2 });\n```", "```js\ndispatch({ type: 'loaded' });\n```", "```js\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'add':\n      return { ...state, total: state.total + action.amount };\n    case ...\n      ...\n    default:\n      return state;\n  }\n}\n```", "```js\n\"add\" branch the state variable (...state). The spread syntax copies all the properties from the object after the three dots. In the preceding code snippet, all the properties are copied from the state variable into the new state object returned. The total property value will then be overwritten by state.total + action.amount because this is defined after the spread operation in the new object creation. For more information on the spread syntax, see the following link: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax.\n```", "```js\nconst [state, dispatch] = useReducer<Reducer<State, Action>>(\n  reducer,\n  initialState\n);\n```", "```js\n    import { useEffect, useReducer } from 'react';\n    ```", "```js\n    type State = {\n    ```", "```js\n      name: string | undefined;\n    ```", "```js\n      score: number;\n    ```", "```js\n      loading: boolean;\n    ```", "```js\n    };\n    ```", "```js\n    type Action =\n    ```", "```js\n      | {\n    ```", "```js\n          type: 'initialize';\n    ```", "```js\n          name: string;\n    ```", "```js\n        }\n    ```", "```js\n      | {\n    ```", "```js\n          type: 'increment';\n    ```", "```js\n        }\n    ```", "```js\n      | {\n    ```", "```js\n          type: 'decrement';\n    ```", "```js\n        }\n    ```", "```js\n      | {\n    ```", "```js\n          type: 'reset';\n    ```", "```js\n        };\n    ```", "```js\n    function reducer(state: State, action: Action): State {\n    ```", "```js\n      switch (action.type) {\n    ```", "```js\n        case 'initialize':\n    ```", "```js\n          return { name: action.name, score: 0, loading: false };\n    ```", "```js\n        case 'increment':\n    ```", "```js\n          return { ...state, score: state.score + 1 };\n    ```", "```js\n        case 'decrement':\n    ```", "```js\n          return { ...state, score: state.score - 1 };\n    ```", "```js\n        case 'reset':\n    ```", "```js\n          return { ...state, score: 0 };\n    ```", "```js\n        default:\n    ```", "```js\n          return state;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    const [{ name, score, loading }, dispatch] = useReducer(\n    ```", "```js\n      reducer,\n    ```", "```js\n      {\n    ```", "```js\n        name: undefined,\n    ```", "```js\n        score: 0,\n    ```", "```js\n        loading: true,\n    ```", "```js\n      }\n    ```", "```js\n    );\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      getPerson().then(({ name }) =>\n    ```", "```js\n        dispatch({ type: 'initialize', name })\n    ```", "```js\n      );\n    ```", "```js\n    }, []);\n    ```", "```js\n    <button onClick={() => dispatch({ type: 'increment' })}>\n    ```", "```js\n      Add\n    ```", "```js\n    </button>\n    ```", "```js\n    <button onClick={() => dispatch({ type: 'decrement' })}>\n    ```", "```js\n      Subtract\n    ```", "```js\n    </button>\n    ```", "```js\n    <button onClick={() => dispatch({ type: 'reset' })}>\n    ```", "```js\n      Reset\n    ```", "```js\n    </button>\n    ```", "```js\nconst ref = useRef(initialValue);\n```", "```js\nconst ref = useRef<Ref>(initialValue);\n```", "```js\nconsole.log(\"Current ref value\", ref.current);\n```", "```js\nref.current = newValue;\n```", "```js\nfunction MyComponent() {\n  const inputRef = useRef<HTMLInputElement>(null);\n  function doSomething() {\n    console.log(\n      \"All the properties and methods of the input\",\n      inputRef.current\n    );\n  }\n  return <input ref={inputRef} type=\"text\" />;\n}\n```", "```js\n    import { useEffect, useReducer, useRef } from 'react';\n    ```", "```js\n    const [ ... ] = useReducer( ... );\n    ```", "```js\n    const addButtonRef = useRef<HTMLButtonElement>(null);\n    ```", "```js\n    useEffect( ... )\n    ```", "```js\n    <button\n    ```", "```js\n      ref={addButtonRef}\n    ```", "```js\n      onClick={() => dispatch({ type: 'increment' })}\n    ```", "```js\n    >\n    ```", "```js\n      Add\n    ```", "```js\n    </button>\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      getPerson().then(({ name }) =>\n    ```", "```js\n        dispatch({ type: 'initialize', name })\n    ```", "```js\n      );\n    ```", "```js\n    }, []);\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      if (!loading) {\n    ```", "```js\n        addButtonRef.current?.focus();\n    ```", "```js\n      }\n    ```", "```js\n    }, [loading]);\n    ```", "```js\n    if (loading) {\n    ```", "```js\n      return <div>Loading ...</div>;\n    ```", "```js\n    }\n    ```", "```js\nuseEffect(() => {\n  getPerson().then(({ name }) => {\n    dispatch({ type: 'initialize', name });\n    addButtonRef.current?.focus();\n  });\n}, []);\n```", "```js\nconst memoizedValue = useMemo(() => expensiveCalculation(), []);\n```", "```js\nconst memoizedValue = useMemo(\n  () => expensiveCalculation(a, b),\n  [a, b]\n);\n```", "```js\n const memoizedValue = useMemo<number>(\n  () => expensiveCalculation(),\n  []\n);\n```", "```js\n    import {\n    ```", "```js\n      useEffect,\n    ```", "```js\n      useReducer,\n    ```", "```js\n      useRef,\n    ```", "```js\n      useMemo\n    ```", "```js\n    } from 'react';\n    ```", "```js\n    function sillyExpensiveFunction() {\n    ```", "```js\n      console.log(\"Executing silly function\");\n    ```", "```js\n      let sum = 0;\n    ```", "```js\n      for (let i = 0; i < 10000; i++) {\n    ```", "```js\n        sum += i;\n    ```", "```js\n      }\n    ```", "```js\n      return sum;\n    ```", "```js\n    }\n    ```", "```js\n    useEffect( ... );\n    ```", "```js\n    const expensiveCalculation = sillyExpensiveFunction();\n    ```", "```js\n    if (loading) {\n    ```", "```js\n      return <div>Loading ...</div>;\n    ```", "```js\n    }\n    ```", "```js\n    <h3>\n    ```", "```js\n      {name}, {score}\n    ```", "```js\n    </h3>\n    ```", "```js\n    <p>{expensiveCalculation}</p>\n    ```", "```js\n    <button ... >\n    ```", "```js\n      Add\n    ```", "```js\n    </button>\n    ```", "```js\n    const expensiveCalculation = useMemo(\n    ```", "```js\n      () => sillyExpensiveFunction(),\n    ```", "```js\n      []\n    ```", "```js\n    );\n    ```", "```js\nconst memoizedCallback = useCallback(() => someFunction(), []);\n```", "```js\nconst memoizedCallback = useCallback(\n  () => someFunction(a, b),\n  [a, b]\n);\n```", "```js\n const memoizedValue = useCallback<() => void>(\n  () => someFunction (),\n  []\n);\n```", "```js\nexport function SomeComponent() {\n  const [someState, setSomeState] = useState('something');\n  return (\n    <div>\n      <ChildComponent />\n      <AnotherChildComponent something={someState} />\n      <button\n        onClick={() => setSomeState('Something else')}\n      ></button>\n    </div>\n  );\n}\n```", "```js\nexport function ChildComponent() {\n  return <span>A child component</span>;\n}\n```", "```js\nexport const ChildComponent = memo(() => {\n  return <span>A child component</span>;\n});\n```", "```js\n    type Props = {\n    ```", "```js\n      onClick: () => void,\n    ```", "```js\n    };\n    ```", "```js\n    export function Reset({ onClick }: Props) {\n    ```", "```js\n      console.log(\"render Reset\");\n    ```", "```js\n      return <button onClick={onClick}>Reset</button>;\n    ```", "```js\n    }\n    ```", "```js\n    import { Reset } from './Reset';\n    ```", "```js\n    <div>\n    ```", "```js\n      ...\n    ```", "```js\n      <button onClick={() => dispatch({ type: 'decrement' })}>\n    ```", "```js\n        Subtract\n    ```", "```js\n      </button>\n    ```", "```js\n      <Reset onClick={() => dispatch({ type: 'reset' })} />\n    ```", "```js\n    </div>;\n    ```", "```js\n    import { memo } from 'react';\n    ```", "```js\n    export const Reset = memo(({ onClick }: Props) => {\n    ```", "```js\n      console.log(\"render Reset\");\n    ```", "```js\n      return <button onClick={onClick}>Reset</button>;\n    ```", "```js\n    });\n    ```", "```js\n    Reset.displayName = 'Reset';\n    ```", "```js\n    function handleReset() {\n    ```", "```js\n      dispatch({ type: 'reset' });\n    ```", "```js\n    }\n    ```", "```js\n    if (loading) {\n    ```", "```js\n      return <div>Loading ...</div>;\n    ```", "```js\n    }\n    ```", "```js\n    return (\n    ```", "```js\n      <div>\n    ```", "```js\n        ...\n    ```", "```js\n        <Reset onClick={handleReset} />\n    ```", "```js\n      </div>\n    ```", "```js\n    );\n    ```", "```js\n    import {\n    ```", "```js\n      useEffect,\n    ```", "```js\n      useReducer,\n    ```", "```js\n      useRef,\n    ```", "```js\n      useMemo,\n    ```", "```js\n      useCallback\n    ```", "```js\n    } from 'react';\n    ```", "```js\n    const handleReset = useCallback(\n    ```", "```js\n      () => dispatch({ type: 'reset' }),\n    ```", "```js\n      []\n    ```", "```js\n    );\n    ```", "```js\n    export function TextVanish({ text }: Props) {\n    ```", "```js\n      if (!text) {\n    ```", "```js\n        return null;\n    ```", "```js\n      }\n    ```", "```js\n      const [textToRender, setTextToRender] = useState(text);\n    ```", "```js\n      useEffect(() => {\n    ```", "```js\n        setTimeout(() => setTextToRender(\"\"), 5000);\n    ```", "```js\n      }, []);\n    ```", "```js\n      return <span>{textToRender}</span>;\n    ```", "```js\n    }\n    ```", "```js\n    const [data, setData] = useState([]);\n    ```", "```js\n    useEffect(async () => {\n    ```", "```js\n      const data = await getData();\n    ```", "```js\n      setData(data);\n    ```", "```js\n    });\n    ```", "```js\n    export function Counter() {\n    ```", "```js\n      const [count, setCount] = useState(0);\n    ```", "```js\n      return (\n    ```", "```js\n        <button\n    ```", "```js\n          onClick={() => {\n    ```", "```js\n            setCount(count + 1);\n    ```", "```js\n            setCount(count + 1);\n    ```", "```js\n            setCount(count + 1);\n    ```", "```js\n          }}\n    ```", "```js\n        >\n    ```", "```js\n          {count}\n    ```", "```js\n        </button>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function CounterRef() {\n    ```", "```js\n      const count = useRef(0);\n    ```", "```js\n      return (\n    ```", "```js\n        <button\n    ```", "```js\n          onClick={() => {\n    ```", "```js\n            count.current = count.current + 1;\n    ```", "```js\n          }}\n    ```", "```js\n        >\n    ```", "```js\n          {count.current}\n    ```", "```js\n        </button>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    type State = { steps: number };\n    ```", "```js\n    type Action =\n    ```", "```js\n      | { type: 'forward'; steps: number }\n    ```", "```js\n      | { type: 'backwards'; steps: number };\n    ```", "```js\n    function reducer(state: State, action: Action): State {\n    ```", "```js\n      switch (action.type) {\n    ```", "```js\n        case 'forward':\n    ```", "```js\n          return { ...state, steps: state.steps + action.steps };\n    ```", "```js\n        case 'backwards':\n    ```", "```js\n          return { ...state, steps: state.steps - action.        steps };\n    ```", "```js\n        default:\n    ```", "```js\n          return state;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    export function Counter() {\n    ```", "```js\n      const [count, setCount] = useState(0);\n    ```", "```js\n      const memoCount = useMemo(() => count, []);\n    ```", "```js\n      return (\n    ```", "```js\n        <div>\n    ```", "```js\n          <button onClick={() => setCount(count + 1)}>\n    ```", "```js\n            {memoCount}\n    ```", "```js\n          </button>\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function Counter() {\n    ```", "```js\n      const [count, setCount] = useState(0);\n    ```", "```js\n      const handleClick = useCallback(() => {\n    ```", "```js\n        setCount(count + 1);\n    ```", "```js\n      }, []);\n    ```", "```js\n      return (\n    ```", "```js\n        <div>\n    ```", "```js\n          <button onClick={handleClick}>{count}</button>\n    ```", "```js\n        </div>\n    ```", "```js\n      );\n    ```", "```js\n    }\n    ```", "```js\n    export function TextVanish({ text }: Props) {\n    ```", "```js\n      const [textToRender, setTextToRender] = useState(text);\n    ```", "```js\n      useEffect(() => {\n    ```", "```js\n        setTimeout(() => setTextToRender(\"\"), 5000);\n    ```", "```js\n      }, []);\n    ```", "```js\n      if (!text) {\n    ```", "```js\n        return null;\n    ```", "```js\n      }\n    ```", "```js\n      return <span>{textToRender}</span>;\n    ```", "```js\n    }\n    ```", "```js\n    const [data, setData] = useState([]);\n    ```", "```js\n    useEffect(() => {\n    ```", "```js\n      getData().then((theData) => setData(theData));\n    ```", "```js\n    });\n    ```", "```js\nuseEffect(() => {\n  getData().then((theData) => setData(theData));\n}, []);\n```", "```js\nconst [data, setData] = useState<Data[]>([]);\n```", "```js\nuseEffect(() => {\n  let cancel = false;\n  getData().then((theData) => {\n    if (!cancel) {\n      setData(theData);\n    }\n  });\n  return () => {\n    cancel = true;\n  };\n}, []);\n```"]