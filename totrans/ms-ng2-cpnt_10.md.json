["```js\nexport function PluginConfig(config) {\n  return (type) => {\n    type._pluginConfig = config;\n  };\n}\n```", "```js\nexport class PluginPlacement {\n  constructor(options) {\n    this.slot = options.slot;\n    this.priority = options.priority;\n    this.component = options.component;\n  }\n}\n```", "```js\nexport class PluginData {\n  constructor(plugin, placement) {\n    this.plugin = plugin;\n    this.placement = placement;\n  }\n}\n```", "```js\n@PluginConfig({\n  name: 'my-example-plugin',\n  description: 'A simple example plugin',\n  placements: [\n    new PluginPlacement({\n      slot: 'plugin-slot-1',\n      priority: 1, \n      component: PluginComponent1\n    }),\n    new PluginPlacement({\n      slot: 'plugin-slot-2', \n      priority: 1, \n      component: PluginComponent2\n    })\n  ]\n})\nexport default class ExamplePlugin {}\n```", "```js\nimport {Injectable} from '@angular/core';\nimport {ReplaySubject} from 'rxjs/Rx';\n\n@Injectable()\nexport class PluginService {\n  ...\n}\n```", "```js\nconstructor() {\n  this.plugins = [];\n  // Change observable if the list of active plugin changes\n this.change = new ReplaySubject(1);\n this.loadPlugins();\n}\n```", "```js\nloadPlugins() {\n System.import('/plugins.js').then((pluginsModule) => {\n pluginsModule.default.forEach(â€©      (pluginUrl) => this.loadPlugin(pluginUrl)\n );\n });\n}\n```", "```js\nloadPlugin(url) {\n return System.import(url).then((pluginModule) => {\n    const Plugin = pluginModule.default;\n    const pluginData = {\n      url,\n      type: Plugin,\n      // Reading the meta data previously stored by the @Plugin \n      // decorator\n config: Plugin._pluginConfig,\n      // Creates the plugin instance\n instance: new Plugin()\n    };\n\n this.plugins = this.plugins.concat([pluginData]);\n this.change.next(this.plugins);\n });\n}\n```", "```js\ngetPluginData(slot) {\n  return this.plugins.reduce((components, pluginData) => {\n    return components.concat(\n     pluginData.config.placements\n .filter((placement) => placement.slot === slot)\n .map((placement) => new PluginData(pluginData, placement))\n    );\n  }, []);\n```", "```js\nimport {Component, Inject, ViewChild, ViewContainerRef, ComponentResolver} from '@angular/core';\n\n@Component({\n  selector: 'hello-world',\n  template: 'Hello World'\n})\nexport class HelloWorld {}\n\n@Component({\n  selector: 'app'\n  template: '<h1 #headingRef>App</h1>'\n})\nexport class App {\n @ViewChild('headingRef', {read: ViewContainerRef}) viewContainer;\n\n  constructor(@Inject(ComponentResolver) resolver) {\n this.resolver = resolver;\n  }\n\n  ngAfterViewInit() {\n this.resolver\n .resolveComponent(HelloWorld)\n .then((componentFactory) => {\n this.viewContainer.createComponent(componentFactory);\n });\n  }\n}\n```", "```js\nimport {Directive, Input, Inject, provide, ViewContainerRef, ComponentResolver, ReflectiveInjector} from '@angular/core';\nimport {PluginData} from './plugin';\nimport {PluginService} from './plugin-service';\n@Directive({\n  selector: 'ngc-plugin-slot'\n})\nexport class PluginSlot {\n @Input() name;\n  ...\n}\n```", "```js\n  constructor(@Inject(ViewContainerRef) viewContainerRef, \n @Inject(ComponentResolver) componentResolver, \n @Inject(PluginService) pluginService) {\n    this.viewContainerRef = viewContainerRef;\n    this.componentResolver = componentResolver;\n    this.pluginService = pluginService;\n    this.componentRefs = [];\n    // Subscribing to changes on the plugin service and re-\n    // initialize slot if needed\n    this.pluginChangeSubscription = \n this.pluginService\n .change.subscribe(() => this.initialize());\n  }\n```", "```js\ninitialize() {\n if (this.componentRefs.length > 0) {\n this.componentRefs.forEach(\n (componentRef) => componentRef.destroy());\n this.componentRefs = [];\n }\n\n const pluginData = \n this.pluginService.getPluginData(this.name);\n\n pluginData.sort(\n (a, b) => a.placement.priority < b.placement.priority ?\n 1 : a.placement.priority > b.placement.priority ? -1 : 0);\n\n return Promise.all(\n pluginData.map((pluginData) => \n this.instantiatePluginComponent(pluginData))\n );\n}\n```", "```js\ninstantiatePluginComponent(pluginData) {\n return this.componentResolver\n .resolveComponent(pluginData.placement.component)\n .then((componentFactory) => {\n // Get the injector of the plugin slot parent component\n const contextInjector = this.viewContainerRef.parentInjector;\n // Preparing additional PluginData provider for the created \n // plugin component\n const providers = [\n provide(PluginData, {\n useValue: pluginData\n })\n ];\n // We're creating a new child injector and provide the \n // PluginData provider\n const childInjector = ReflectiveInjector\n .resolveAndCreate(providers, contextInjector);\n // Now we can create a new component using the plugin slot view \n // container and the resolved component factory\n const componentRef = this.viewContainerRef\n .createComponent(componentFactory, \n this.viewContainerRef.length, \n childInjector);\n this.componentRefs.push(componentRef);\n });\n}\n```", "```js\n...\n<ngc-task-info title=\"Efforts\" \n               [info]=\"task.efforts | formatEfforts\">\n</ngc-task-info>\n<ngc-plugin-slot name=\"task-info\"></ngc-plugin-slot>\n\n```", "```js\n...\n<div class=\"task-details__content\">\n  ...\n <ngc-plugin-slot name=\"task-detail\"></ngc-plugin-slot>\n</div>\n```", "```js\nimport {PluginConfig, PluginPlacement} from '../../lib/plugin/plugin';\n\n@PluginConfig({\n name: 'agile',\n description: 'Agile development plugin to manage story points on tasks',\n placements: []\n})\nexport default class AgilePlugin {\n  constructor() {\n this.storyPoints = [0.5, 1, 2, 3, 5, 8, 13, 21];\n  }\n}\n```", "```js\nreturn System.import(url).then((pluginModule) => {\n    const Plugin = pluginModule.default;\n...\n```", "```js\n...\nimport {Task} from '../../../lib/task-list/task/task';\n\n@Component({\n  selector: 'ngc-agile-task-info',\n  encapsulation: ViewEncapsulation.None,\n  template,\n  host: {\n class: 'task-infos__info'\n  }\n})\nexport class AgileTaskInfo {\n  constructor(@Inject(Task) taskComponent) {\n this.task = taskComponent.task;\n  }\n}\n```", "```js\n<div *ngIf=\"task.storyPoints || task.storyPoints === 0\">\n  <strong>Story Points: </strong>{{task.storyPoints}}\n</div>\n```", "```js\n...\nimport {AgileTaskInfo} from './agile-task-info/agile-task-info';\n\n@PluginConfig({\n  name: 'agile',\n  description: 'Agile development plugin to manage story points on tasks',\n placements: [\n new PluginPlacement({slot: 'task-info', priority: 1, \n component: AgileTaskInfo})\n ]\n})\nexport default class AgilePlugin {\n  ...\n}\n```", "```js\n...\nimport {Project} from '../../../lib/project/project';\nimport {ProjectTaskDetails} from '../../../lib/project/project-task-details/project-task-details';\nimport {Editor} from '../../../lib/ui/editor/editor';\n\n@Component({\n  selector: 'ngc-agile-task-detail',\n  encapsulation: ViewEncapsulation.None,\n  template,\n  host: {class: 'agile-task-detail'},\n  directives: [Editor]\n})\nexport class AgileTaskDetail {\n  constructor(@Inject(Project) project, \n @Inject(ProjectTaskDetails) projectTaskDetails) {\n    this.project = project;\n    this.projectTaskDetails = projectTaskDetails;\n this.plugin = placementData.plugin.instance;\n  }\n\n  onStoryPointsSaved(storyPoints) {\n this.projectTaskDetails.task.storyPoints = +storyPoints || 0;\n this.project.document.persist();\n  }\n}\n```", "```js\n<div class=\"task-details__label\">Story Points</div>\n<ngc-editor [content]=\"projectTaskDetails.task?.storyPoints\"\n            [showControls]=\"true\"\n            (editSaved)=\"onStoryPointsSaved($event)\"></ngc-editor>\n```", "```js\n...\nimport {PluginData} from '../../../lib/plugin/plugin';\n\n@Component({\n  selector: 'ngc-agile-task-detail',\n  ...\n})\nexport class AgileTaskDetail {\n  constructor(..., @Inject(PluginData) pluginData) {\n    ...\n this.plugin = pluginData.plugin.instance;\n  }\n  ...\n  increaseStoryPoints() {\n const current = this.projectTaskDetails.task.storyPoints || 0;\n    const storyPoints = this.plugin.storyPoints.slice().sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n    this.projectTaskDetails.task.storyPoints =\n storyPoints.find((storyPoints) => storyPoints > current) || current;\n this.project.document.persist();\n  }\n\n  decreaseStoryPoints() {\n const current = this.projectTaskDetails.task.storyPoints || 0;\n    const storyPoints = this.plugin.storyPoints.slice().sort((a, b) => a < b ? 1 : a > b ? -1 : 0);\n    this.projectTaskDetails.task.storyPoints =\n storyPoints.find((storyPoints) => storyPoints < current) || current;\n this.project.document.persist();\n  }\n}\n```", "```js\n...\n<button (click)=\"decreaseStoryPoints()\"\n        class=\"button button--small\">-</button>\n<button (click)=\"increaseStoryPoints()\"\n        class=\"button button--small\">+</button>\n```", "```js\n...\nimport {AgileTaskDetail} from './agile-task-detail/agile-task-detail';\n\n@PluginConfig({\n  ...\n  placements: [\n    new PluginPlacement({slot: 'task-info', priority: 1, \n                         component: AgileTaskInfo}),\n new PluginPlacement({slot: 'task-detail', priority: 1, \n component: AgileTaskDetail})\n  ]\n})\nexport default class AgilePlugin {\n  ...\n}\n```", "```js\nexport default [\n  '/plugins/agile/agile.js'\n];\n```", "```js\n...\nimport {PluginService} from '../plugin/plugin-service';\n\n@Component({\n  selector: 'ngc-manage-plugins',\n  ...\n})\nexport class ManagePlugins {\n  constructor(@Inject(PluginService) pluginService) {\n this.plugins = pluginService.change;\n  }\n}\n```", "```js\n<div class=\"manage-plugins__l-header\">\n  <h2 class=\"manage-plugins__title\">Manage Plugins</h2>\n</div>\n<div class=\"manage-plugins__l-main\">\n  <h3 class=\"manage-plugins__sub-title\">Active Plugins</h3>\n  <div class=\"manage-plugins__section\">\n    <table class=\"manage-plugins__table\">\n      <thead>\n      <tr>\n        <th>Name</th>\n        <th>Url</th>\n        <th>Description</th>\n        <th>Placements</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr *ngFor=\"let plugin of plugins | async\">\n        <td>{{plugin.config.name}}</td>\n        <td>{{plugin.url}}</td>\n        <td>{{plugin.config.description}}</td>\n        <td>\n          <div *ngFor=\"let placement of plugin.config.placements\"\n               class=\"manage-plugins__placement\">\n            {{placement.slot}}\n          </div>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n```", "```js\n...\nimport {ManagePlugins} from './manage-plugins/manage-plugins';\n\n@Component({\n  selector: 'ngc-app',\n  ...\n})\n@Routes([\n  ...\n new Route({path: 'plugins', component: ManagePlugins})\n])\nexport class App {\n  ...\n}\n```", "```js\n<div class=\"app\">\n  <div class=\"app__l-side\">\n    <ngc-navigation [openTasksCount]=\"openTaskCount\">\n      ...\n <ngc-navigation-section title=\"Admin\">\n <ngc-navigation-item title=\"Manage Plugins\" \n [link]=\"['/plugins']\">\n </ngc-navigation-item>\n </ngc-navigation-section>\n    </ngc-navigation>\n  </div>\n  <div class=\"app__l-main\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n```", "```js\n...\n@Injectable()\nexport class PluginService {\n  ...\n removePlugin(name) {\n const plugin = this.plugins.find(\n (plugin) => plugin.name === name);\n if (plugin) {\n const plugins = this.plugins.slice();\n plugins.splice(plugins.indexOf(plugin), 1);\n this.plugins = plugins;\n this.change.next(this.plugins);\n }\n }\n}\n```", "```js\n...\n@Component({\n  selector: 'ngc-manage-plugins',\n  ...\n})\nexport class ManagePlugins {\n  constructor(@Inject(PluginService) pluginService) {\n    ...\n this.pluginService = pluginService;\n }\n\n removePlugin(name) {\n this.pluginService.removePlugin(name);\n }\n\n loadPlugin(loadUrlInput) {\n this.pluginService.loadPlugin(loadUrlInput.value);\n loadUrlInput.value = '';\n }\n}\n```", "```js\n...\n<div class=\"manage-plugins__l-main\">\n  <h3 class=\"manage-plugins__sub-title\">Active Plugins</h3>\n  <div class=\"manage-plugins__section\">\n    ...\n        <td>\n          <button (click)=\"removePlugin(plugin.name)\"\n                  class=\"button button--small\">remove</button>\n        </td>\n    ...\n  </div>\n  <h3 class=\"manage-plugins__sub-title\">Load Plugin</h3>\n  <div class=\"manage-plugins__section\">\n    <div class=\"manage-plugins__load-elements\">\n      <input #loadUrlRef type=\"text\"\n             placeholder=\"Enter plugin URL\"\n             class=\"manage-plugins__load-url\">\n      <button (click)=\"loadPlugin(loadUrlRef)\"\n              class=\"button\">Load</button>\n    </div>\n  </div>\n</div>\n```"]