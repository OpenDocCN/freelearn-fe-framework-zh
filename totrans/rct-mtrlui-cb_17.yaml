- en: Typography - Control Font Look and Feel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Types of typography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using theme colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aligning text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Typography` component is used by Material-UI to render text on the screen.
    You can use `Typography` on its own, but it is also used internally by other Material-UI
    components that render text. Instead of using other HTML elements to render your
    text, using `Typography` components allows Material-UI to handle the application
    of theme styles using consistent font types, and also handle font behavior in
    a uniform way.
  prefs: []
  type: TYPE_NORMAL
- en: Types of typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Typography` component is used any time you want to render text in a Material-UI
    application. The type of text, or variant, is specified as a string value that's
    passed to the `variant` property.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s an example that shows how to render all of the available `Typography`
    variants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the heading variants look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b59dd456-677f-42c8-9c42-947eb3c87276.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, here are what the remaining variants look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8e3d466-87b7-46a6-aac3-5b88d64e8c54.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The value that you pass to the `variant` property determines the styles that
    are applied to the text. The styles for each of these variants are defined by
    the theme, and can be customized from theme to theme.
  prefs: []
  type: TYPE_NORMAL
- en: It can be tempting to add your own variant names, or to add font styles outside
    of the typography variants. I would advise against this, because doing so breaks
    the common font vocabulary based on Material Design. If you stray from the typography
    variant conventions, you'll end up with variant names that only make sense to
    you, or worse, variants that don't work because of font styles applied to text
    from outside of the typography system.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want your `Typography` component to inherit the variant styles from
    its parent, you can use the `inherit` variant value, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The parent `Typography` component uses the `title` variant. It also changes
    its component to be a `div` element, because it's not actually rendering text
    as direct children—think of it as a container for font styles. Inside, there are
    three child `Typography` components. The first two have `inherit` as the `variant`
    property value, so they'll actually get the `title` variant. The third `Typography`
    child uses `caption` as its variant, so it will not inherit `title`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the result looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c6d9f33-4905-4797-8f12-c97b4a0cec62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One adjustment to this approach that you might consider is to have `inherit`
    as the default variant. This way, you don''t have to keep typing `variant="inherit"`
    if you have lots of child `Typography` components that need to inherit font styles.
    Here''s a component that does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MyTypography` component will render a `Typography` component with a `variant`
    value of `inherit`, but only if the `variant` property wasn''t passed. Let''s
    change the preceding code to use this new component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The result is exactly the same. The only difference is that now you don't need
    to provide the `variant` property for variants that you want to inherit.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Typography` demos: [https://material-ui.com/style/typography/](https://material-ui.com/style/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using theme colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text that is rendered using the `Typography` component can use colors from the
    Material-UI theme used by the app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this example, you''ll find a Storybook control that allows you to change
    the color of the text using predefined Color names from the theme, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32c1c6cc-1e5d-4025-89bc-2ef334b41d34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the source for the example that uses the selected color by passing
    it to the `color` property of each `Typography` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s walk through how each of these colors change the appearance of the different
    `Typography` variants:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Default | The `default` color uses whatever color is defined in the styles
    for the `Typography` variant in question | ![](img/bec821cd-8a6c-4af8-9d2b-0a197b5989d0.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Error | The `error` color applies the `palette.error.main` theme color to
    the text | ![](img/6c45a04b-a9a9-4744-8112-17c2b3ac12ee.png) |'
  prefs: []
  type: TYPE_TB
- en: '| Inherit | The `Typography` component will inherit the font color of its parent
    component | ![](img/f735faab-8cdd-4293-99ec-ff5efa2db060.png) |'
  prefs: []
  type: TYPE_TB
- en: '| Primary | The `primary` color applies the `palette.primary.main` theme color
    to the text | ![](img/2670db74-17d2-4d95-ace4-2c19488c4a58.png) |'
  prefs: []
  type: TYPE_TB
- en: '| Secondary | The `secondary` color applies the `palette.secondary.main` theme
    color to the text | ![](img/16e4bc47-53ff-4f27-97a1-53d24f2eb71e.png) |'
  prefs: []
  type: TYPE_TB
- en: '| Text Primary | The `textPrimary` color applies the `palette.text.primary`
    theme color to the text |       ![](img/98b25a5e-9c81-422c-a004-c5fada42004c.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Text Secondary | The `textSecondary` color applies the `palette.text.secondary` theme
    color to the text | ![](img/bab90430-9c5a-4ff3-98e9-fd073be471d4.png) |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Typography` demos: [https://material-ui.com/style/typography/](https://material-ui.com/style/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aligning text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aligning text in user interfaces is common. Unfortunately, it isn't easy. With
    Material-UI grids and typography, you can create abstractions that make it a little
    easier to align text.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re trying to align your text horizontally to the left, right, or center,
    then you can use the `align` property of your `Typography` component, as demonstrated
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is shorthand for using the `text-align` style, so that you don't have to
    keep adding CSS to your components for the more common alignment scenarios. However,
    sometimes you need the ability to align your text both horizontally and vertically.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s say that you have a 200x200 `Paper` element, and you need
    the ability to render text in the bottom-right corner. Let''s illustrate this
    example with some code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3ee840e-943d-41c2-8e3a-49d423ad693a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two Storybook controls for aligning the text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02a88e6b-a19a-4b6b-ae7d-ce4671f52b3c.png)'
  prefs: []
  type: TYPE_IMG
- en: The horizontal alignment control changes the `horizontalAlign` property that
    is passed to the `MyPaper` component. Likewise, the vertical alignment control
    changes the `verticalAlign` property value. The `horizontalAlign` value is passed
    to the `justify` property of the `Grid` component, while the `verticalAlign` property
    goes to the `alignContent` property.
  prefs: []
  type: TYPE_NORMAL
- en: What's neat about the `Grid` components is that you can pass them a `component`
    property and this will be rendered instead of the `div` element that's rendered
    by default. In other words, you can make the `Paper` component a grid container
    and the `Typography` component that you're trying to align a grid item. You don't
    have to render the `Grid` components and then your actual content as children.
    You can make your content the grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the grid looks like when you set `justify="center"` and `alignContent="flex-end"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a800dcfa-373a-478a-91fe-2856d96b66a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And here''s what it looks like what you set `justify="flex-end"` and `alignContent="flex-start"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46a27b1a-014c-4860-adc2-c830410f84dc.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Typography` demos: [https://material-ui.com/style/typography/](https://material-ui.com/style/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Typography` components that you use to render text in your application
    need to be aware of scenarios where text wraps. This means that, when there isn't
    enough horizontal space to render a line of text, it continues onto the next line.
    This can have undesirable layout consequences if you don't anticipate how text
    might wrap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at an example where you have two `Paper` components that render
    text using `Typography` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/854a205f-4486-4388-9972-1f48a25029c3.png)'
  prefs: []
  type: TYPE_IMG
- en: The first `Paper` component doesn't have a set the `height` component, and has
    a single line of text that fits within the current screen width. The second `Paper`
    component does have a set `height`, and the text in the second `Paper` component
    is wrapped so that it fits on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s try changing the screen resolution, making the available width
    in which to render text smaller. Here''s what you''ll see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b4c4ee4-0539-4002-9153-838622c59b28.png)'
  prefs: []
  type: TYPE_IMG
- en: There are wrapping issues in both `Paper` components. In the first, the wrapped
    text causes the the height of the component to change because it doesn't have
    a fixed height. This has a domino effect with regard to layout that may or may
    not be problematic, depending on your design. In the second `Paper` component, `height`
    is fixed, which means that the wrapped text overflows out of the component, which
    looks terrible.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s fix the text wrapping in both of the `Paper` components in this example.
    The following is a modified version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you shrink the width of the screen, this is what the two components
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/221fc2d0-bfe2-490b-a0b8-eb9d04a983b2.png)'
  prefs: []
  type: TYPE_IMG
- en: The first `Paper` component was fixed by adding the `noWrap` property to the
    `Typography` component. This will ensure that the `height` component of the component
    never changes, by hiding text overflow and adding an ellipsis to indicate that
    the text has been truncated. This works because you know ahead of time that this
    is just a single line of text that will never need to wrap when shown on wider
    displays. The second `Paper` component, on the other hand, needs a different approach,
    because it does need the ability to wrap.
  prefs: []
  type: TYPE_NORMAL
- en: The solution was to use the Material-UI media query functionality. The call
    to `theme.breakpoints.down('xs')` results in a class name that's prefixed by a
    media query for the specified breakpoint, in this case, `xs`. Now, when the screen
    width shrinks to the `xs` breakpoint, the same styles used for the `noWrap` property
    are applied to the component.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Typography` demos: [https://material-ui.com/style/typography/](https://material-ui.com/style/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Typography` API documentation: [https://material-ui.com/api/typography/](https://material-ui.com/api/typography/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
