["```js\nfunction EmailForm() {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  console.log(enteredEmail);\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  }\n  function handleSubmitForm(event) {\n    event.preventDefault();\n    // could send enteredEmail to a backend server\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmitForm}>\n      <label htmlFor=\"email\">Your email</label>\n      <input type=\"email\" id=\"email\" onChange={handleUpdateEmail} />\n      <button>Save</button>\n    </form>\n  );\n} \n```", "```js\nconst emailInputEl = document.getElementById('email');\nconst enteredEmailVal = emailInputEl.value; \n```", "```js\nimport { useRef } from 'react';\nfunction EmailForm() {\n  const emailRef = useRef(null);\n  // other code ...\n}; \n```", "```js\nreturn (\n  <form className={classes.form} onSubmit={handleSubmitForm}>\n    <label htmlFor=\"email\">Your email</label>\n    <input\n      **ref****=****{emailRef}**\n      type=\"email\"\n      id=\"email\"\n    />\n    <button>Save</button>\n  </form>\n); \n```", "```js\nfunction handleSubmitForm(event) {\n  event.preventDefault();\n  **const** **enteredEmail = emailRef.****current****.****value****;** // .current is mandatory!\n  // could send enteredEmail to a backend server\n}; \n```", "```js\nfunction EmailForm() {\n  const emailRef = useRef(null);\n  function handleSubmitForm(event) {\n    event.preventDefault();\n    const enteredEmail = emailRef.current.value;\n    // could send enteredEmail to a backend server\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmitForm}>\n      <label htmlFor=\"email\">Your email</label>\n      <input\n        ref={emailRef}\n        type=\"email\"\n        id=\"email\"\n      />\n      <button>Save</button>\n    </form>\n  );\n} \n```", "```js\nfunction EmailForm() {\n  const emailRef = useRef(null);\n  function handleSubmitForm(event) {\n    event.preventDefault();\n    const enteredEmail = emailRef.current.value;\n    // could send enteredEmail to a backend server\n    **emailRef.****current****.****value** **=** **''****;** **// resetting the input value**\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmitForm}>\n      <label htmlFor=\"email\">Your email</label>\n      <input\n        ref={emailRef}\n        type=\"email\"\n        id=\"email\"\n      />\n      <button>Save</button>\n    </form>\n  );\n} \n```", "```js\nfunction EmailForm() {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  function handleUpdateEmail(event) {\n    setEnteredEmail(event.target.value);\n  }\n  function handleSubmitForm(event) {\n    event.preventDefault();\n    // could send enteredEmail to a backend server\n    // reset by setting the state + using the value prop below\n    **setEnteredEmail**('');\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmitForm}>\n      <label htmlFor=\"email\">Your email</label>\n      <input\n        type=\"email\"\n        id=\"email\"\n        onChange={handleUpdateEmail}\n        **value****=****{enteredEmail}**\n      />\n      <button>Save</button>\n    </form>\n  );\n} \n```", "```js\nconst passwordRetries = useRef(0); \n```", "```js\npasswordRetries.current = 1; \n```", "```js\nfunction Counters() {\n  const [counter1, setCounter1] = useState(0);\n  const counterRef = useRef(0);\n  let counter2 = 0;\n  function handleChangeCounters() {\n    setCounter1(1);\n    counter2 = 1;\n    counterRef.current = 1;\n  };\n  return (\n    <>\n      <button onClick={handleChangeCounters}>Change Counters</button>\n      <ul>\n        <li>Counter 1: {counter1}</li>\n        <li>Counter 2: {counter2}</li>\n        <li>Counter 3: {counterRef.current}</li>\n      </ul>\n    </>\n  );\n}; \n```", "```js\nimport { useRef } from 'react';\nfunction Counters() {\n  const counterRef1 = useRef(0);\n  const counterRef2 = useRef(0);\n  let counter2 = 0;\n  function handleChangeCounters() {\n    counterRef1.current = 1;\n    counter2 = 1;\n    counterRef2.current = 1;\n  }\n  return (\n    <>\n      <button onClick={handleChangeCounters}>Change Counters</button>\n      <ul>\n        <li>Counter 1: {counterRef1.current}</li>\n        <li>Counter 2: {counter2}</li>\n        <li>Counter 3: {counterRef2.current}</li>\n      </ul>\n    </>\n  }\n);\nexport default Counters; \n```", "```js\nconst passwordRetries = useRef(0);\n// later in the component ...\npasswordRetries.current = 1; // changed from 0 to 1\n// later ...\nconsole.log(passwordRetries.current); // prints 1, even if the component changed \n```", "```js\nfunction Preferences() {\n  const [wantsNewProdInfo, setWantsNewProdInfo] = useState(false);\n  const [wantsProdUpdateInfo, setWantsProdUpdateInfo] = useState(false);\n  function handleChangeNewProdPref() {\n    setWantsNewProdInfo((prevPref) => !prevPref);\n  }\n  function handleChangeUpdateProdPref() {\n    setWantsProdUpdateInfo((prevPref) => !prevPref);\n  }\n  return (\n    <div className={classes.preferences}>\n      <label>\n        <input\n          type=\"checkbox\"\n          id=\"pref-new\"\n          checked={wantsNewProdInfo}\n          onChange={handleChangeNewProdPref}\n        />\n        <span>New Products</span>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          id=\"pref-updates\"\n          checked={wantsProdUpdateInfo}\n          onChange={handleChangeUpdateProdPref}\n        />\n        <span>Product Updates</span>\n      </label>\n    </div>\n  );\n}; \n```", "```js\nfunction Form() {\n  function handleSubmit(event) {\n    event.preventDefault();\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.formControl}>\n        <label htmlFor=\"email\">Your email</label>\n        <input type=\"email\" id=\"email\" />\n      </div>\n      <Preferences />\n      <button>Submit</button>\n    </form>\n  );\n} \n```", "```js\nfunction Preferences(props) { // or function Preferences({ ref }) {}\n  // can use props.ref in here\n  // component code ...\n};\nexport default Preferences; \n```", "```js\nfunction Form() {\n  const preferencesRef = useRef(null);\n  return <Preferences ref={preferencesRef} />;\n} \n```", "```js\nconst Preferences = forwardRef((props, ref) => {\n  // component code ...\n});\nexport default Preferences; \n```", "```js\nfunction Preferences(props, ref) {\n // component code ...\n};\nexport default forwardRef(Preferences); \n```", "```js\nfunction Form() {\n  **const** **preferencesRef =** **useRef****({});**\n  function handleSubmit(event) {\n    // other code ...\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.formControl}>\n        <label htmlFor=\"email\">Your email</label>\n        <input type=\"email\" id=\"email\" />\n      </div>\n      <Preferences **ref****=****{preferencesRef**} />\n      <button>Submit</button>\n    </form>\n  );\n} \n```", "```js\nfunction Preferences(props) { // wrap with forwardRef() for React < 19\n  const { ref } = props; // Extracting ref prop\n  const [wantsNewProdInfo, setWantsNewProdInfo] = useState(false);\n  const [wantsProdUpdateInfo, setWantsProdUpdateInfo] = useState(false);\n  function handleChangeNewProdPref () {\n    setWantsNewProdInfo((prevPref) => !prevPref);\n  }\n  function handleChangeUpdateProdPref() {\n    setWantsProdUpdateInfo((prevPref) => !prevPref);\n  }\n  function reset() {\n    setWantsNewProdInfo(false);\n    setWantsProdUpdateInfo(false);\n  }\n  **ref.****current****.****reset** **= reset;**\n  **ref.****current****.****selectedPreferences** **= {**\n    **newProductInfo****: wantsNewProdInfo,**\n    **productUpdateInfo****: wantsProdUpdateInfo**,\n  };\n  // also return JSX code (has not changed) ...\n}); \n```", "```js\nfunction Form() {\n  const preferencesRef = useRef({});\n  function handleSubmit(event) {\n    event.preventDefault();\n    **console****.****log****(preferencesRef.****current****.****selectedPreferences**); // reading a value\n    **preferencesRef.****current****.****reset**(); // executing a function stored in Preferences\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.formControl}>\n        <label htmlFor=\"email\">Your email</label>\n        <input type=\"email\" id=\"email\" />\n      </div>\n      <Preferences ref={preferencesRef} />\n      <button>Submit</button>\n    </form>\n  );\n} \n```", "```js\nfunction Preferences({newProdInfo, prodUpdateInfo, onUpdateInfo}) {\n  return (\n    <div className={classes.preferences}>\n      <label>\n        <input\n          type=\"checkbox\"\n          id=\"pref-new\"\n          checked={newProdInfo}\n          onChange={onUpdateInfo.bind(null, 'pref-new')}\n        />\n        <span>New Products</span>\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          id=\"pref-updates\"\n          checked={prodUpdateInfo}\n          onChange={onUpdateInfo.bind(null, 'pref-updates')}\n        />\n        <span>Product Updates</span>\n      </label>\n    </div>\n  );\n}; \n```", "```js\nfunction Form() {\n  const [wantsNewProdInfo, setWantsNewProdInfo] = useState(false);\n  const [wantsProdUpdateInfo, setWantsProdUpdateInfo] = useState(false);\n  function handleUpdateProdInfo(selection) {\n    // using one shared update handler function is optional\n    // you could also use two separate functions (passed to Preferences) as props\n    if (selection === 'pref-new') {\n      setWantsNewProdInfo((prevPref) => !prevPref);\n    } else if (selection === 'pref-updates') {\n      setWantsProdUpdateInfo((prevPref) => !prevPref);\n    }\n  }\n  function reset() {\n    setWantsNewProdInfo(false);\n    setWantsProdUpdateInfo(false);\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n    // state values can be used here\n    reset();\n  }\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.formControl}>\n        <label htmlFor=\"email\">Your email</label>\n        <input type=\"email\" id=\"email\" />\n      </div>\n      <Preferences\n        newProdInfo={wantsNewProdInfo}\n        prodUpdateInfo={wantsProdUpdateInfo}\n        onUpdateInfo={handleUpdateProdInfo}\n      />\n      <button>Submit</button>\n    </form>\n  );\n} \n```", "```js\n<body>\n  <div id=\"root\"></div>\n  **<****div****id****=****\"dialogs\"****></****div****>**\n  <script type=\"module\" src=\"img/main.jsx\"></script>\n</body> \n```", "```js\nimport { createPortal } from 'react-dom';\nimport classes from './ErrorDialog.module.css';\nfunction ErrorDialog({ onClose }) {\n  return createPortal(\n    <>\n      <div className={classes.backdrop}></div>\n      <dialog className={classes.dialog} open>\n        <p>\n          This form contains invalid values. Please fix those errors before\n          submitting the form again!\n        </p>\n        <button onClick={onClose}>Okay</button>\n      </dialog>\n    </>,\n    document.getElementById('dialogs')\n  );\n}\nexport default ErrorDialog; \n```"]