- en: Chapter 8. Miscellaneous Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章-其他方法
- en: Freedom of choice is what you got
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 选择的自由是你获得的
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Freedom from choice is what you want
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 选择的自由是你想要的
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- Devo,'
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Freedom of Choice"'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"选择的自由"'
- en: In the preceding chapters, we have examined many categories of jQuery methods.
    A few methods provided by the library have so far defied **categorization**, though.
    In this chapter, we will explore methods that can be used to abbreviate common
    JavaScript idioms.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经审查了许多类别的jQuery方法。但是到目前为止，该库提供的一些方法还不属于任何类别。在本章中，我们将探讨用于缩写常见JavaScript习语的方法。
- en: Setup Methods
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置方法
- en: These functions are useful before the main code body begins.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在主代码体开始之前很有用。
- en: $.browser
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.browser
- en: '| Contains information about the currently running browser.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '| 包含有关当前运行浏览器的信息。'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: Boolean flags for each user agent possibility.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户代理可能的布尔标记。
- en: Description
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `$.browser` property allows us to detect which web browser is accessing
    the page, as reported by the browser itself. It contains flags for each of the
    four most prevalent browser classes—Internet Explorer, Mozilla, Safari, and Opera.
    The browsers can be tested independently:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.browser`属性允许我们检测访问页面的是哪个Web浏览器，如浏览器本身所报告的。它包含每个最常见的浏览器类别——Internet Explorer，Mozilla，Safari和Opera的标志。可以独立测试这些浏览器：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When executed on a Firefox browser, the results are:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox浏览器上执行时，结果是：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This property is available immediately. It is therefore safe to use it to determine
    whether or not to call `$(document).ready()`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性立即可用。因此可以用它来确定是否调用`$(document).ready()`是安全的。
- en: Because `$.browser` uses `navigator.useragent` to determine the platform, it
    is vulnerable to spoofing by the user. It is always best to avoid browser-specific
    code entirely where possible. In special cases where it needs to be written for
    different agents, the best alternative is to test for the presence of the JavaScript
    features you want to use. If this does not differentiate the clients well enough,
    the `$.browser` property can be used for further distinctions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`$.browser`使用`navigator.useragent`来确定平台，所以用户可能会伪装它。最好在可能的情况下完全避免特定于浏览器的代码。在需要为不同代理编写它的特殊情况下，最好的选择是测试你想要使用的JavaScript功能的存在。如果这不能很好地区分客户端，可以使用`$.browser`属性进行进一步的区分。
- en: $.noConflict()
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.noConflict()
- en: '| Relinquishes jQuery’s control of the `$` variable.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '| 放弃jQuery对`$`变量的控制。'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The global jQuery object. This can be set to a variable to provide an alternative
    shortcut to `$`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 全局jQuery对象。这可以设置为一个变量，提供一个替代快捷键给`$`.
- en: Description
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Many JavaScript libraries use `$` as a function or variable name, just as jQuery
    does. In jQuery’s case, `$` is just an alias for `jQuery`, so all functionality
    is available without using `$`. If we need to use another JavaScript library alongside
    jQuery, we can return control of `$` back to the other library with a call to
    `$.noConflict()`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 许多JavaScript库使用`$`作为函数或变量名，就像jQuery一样。在jQuery的情况下，`$`只是`jQuery`的别名，所以所有功能都可以在不使用`$`的情况下实现。如果我们需要在jQuery旁边使用另一个JavaScript库，我们可以通过调用`$.noConflict()`来让`$`的控制权归还给其他库：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This technique is especially effective in conjunction with the `.ready()` method’s
    ability to alias the `jQuery` object, as within the `.ready()` we can use `$`
    if we wish without fear of conflicts later:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术特别适用于`.ready()`方法与`jQuery`对象的别名，因为在`.ready()`中，我们可以使用`$`而不必担心后续的冲突：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: DOM Element Methods
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM元素方法
- en: These methods help us to work with the DOM elements underlying each jQuery object.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法帮助我们处理每个jQuery对象下的DOM元素。
- en: .length
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .length
- en: '| Returns the number of DOM elements matched by the jQuery object.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '| 返回jQuery对象匹配的DOM元素的数量。'
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The number of elements matched.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配的元素数量。
- en: Description
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Suppose we had a simple unordered list on the page:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设页面上有一个简单的无序列表：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can determine the number of list items by calling `.length`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`.length`来确定列表项的数量：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: .size()
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .size()
- en: '| Returns the number of DOM elements matched by the jQuery object.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| 返回jQuery对象匹配的DOM元素的数量。'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: None.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 无。
- en: Return Value
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The number of elements matched.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配的元素数量。
- en: Description
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Suppose we had a simple unordered list on the page:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设页面上有一个简单的无序列表：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can determine the number of list items by calling `.size()`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`.size()`来确定列表项的数量：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: .get()
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .get()
- en: '| Retrieves DOM elements matched by the jQuery object.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '| 检索与jQuery对象匹配的DOM元素。'
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'index (optional): An integer indicating which element to retrieve'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引（可选）：指示要检索的元素的整数
- en: Return Value
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: A DOM element, or an array of DOM elements if the index is omitted.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个DOM元素，或者如果省略索引，则是一组DOM元素的数组。
- en: Description
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `.get()` method grants us access to the DOM nodes underlying each jQuery
    object. Suppose we had a simple unordered list on the page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`.get()`方法允许我们访问每个jQuery对象下面的DOM节点。假设我们在页面上有一个简单的无序列表：'
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With an index specified, `.get()` will retrieve a single element:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 指定了索引，`.get()`将检索单个元素：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Since the index is zero-based, the first list item is returned:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于索引是从零开始的，因此返回第一个列表项：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Each jQuery object also masquerades as an array, so we can use the array dereferencing
    operator to get at the list item instead:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每个jQuery对象也都伪装成数组，因此我们可以使用数组解引用运算符来获取列表项：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Without a parameter, .get() returns all of the matched DOM nodes in a regular
    array:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 没有参数时，`.get()`返回正常数组中的所有匹配的DOM节点：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In our example, this means that all list items are returned:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，这意味着返回了所有列表项：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: .index()
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .index()
- en: '| Searches for a given DOM node from among the matched elements.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从匹配的元素中搜索给定的DOM节点。'
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'node: The DOM element to look for'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点：要查找的DOM元素
- en: Return Value
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The position of the element within the jQuery object, or `-1` if not found.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 元素在jQuery对象中的位置，如果找不到则为`-1`。
- en: Description
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The complementary operation to `.get()`, that accepts an index and returns
    a DOM node, `.index()` takes a DOM node and returns an index. Suppose we had a
    simple unordered list on the page:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与`.get()`相对应的操作，它接受一个索引并返回一个DOM节点，`.index()`接受一个DOM节点并返回一个索引。假设我们在页面上有一个简单的无序列表：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we retrieve one of the two list items, we can store it in a variable. Then
    `.index()` can search for this list item within the set of matched elements:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检索了两个列表项中的一个，我们可以将其存储在一个变量中。然后，`.index()`可以在匹配元素集中搜索此列表项：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We get back the zero-based position of the list item:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了列表项的从零开始的位置：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Collection Manipulation
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合操作
- en: These helper functions manipulate arrays, maps, and strings.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些辅助函数操作数组，映射和字符串。
- en: .each()
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .each()
- en: '| Iterates over a collection, firing a callback function on each item.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '| 在集合上进行迭代，在每个项目上触发回调函数。'
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters (First Version)
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第一版）
- en: 'callback: A function to execute for each matched element'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调：要对每个匹配的元素执行的函数
- en: Return Value (First Version)
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值（第一版）
- en: The jQuery object, for chaining purposes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象，用于链接目的。
- en: Parameters (Second Version)
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数（第二版）
- en: 'collection: An object or an array to iterate over'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合：要迭代的对象或数组
- en: 'callback: A function to execute for each item in the collection'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调：要在集合中的每个项目上执行的函数
- en: Return Value (Second Version)
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值（第二版）
- en: The collection.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 集合。
- en: Description
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `.each()` method and `$.each()` function are generic iterators designed
    to make concise and less error-prone looping constructs. They operate on a collection,
    and execute a callback function once for every item in that collection.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`.each()`方法和`$.each()`函数是设计用于创建简洁且不易出错的循环结构的通用迭代器。它们在集合上操作，并且对该集合中的每个项目执行一次回调函数。'
- en: The first syntax listed above is a method of jQuery objects, and when called
    it iterates over the DOM elements that are part of the object. Each time the callback
    runs, it is passed the current loop iteration, beginning from `0`, as a parameter.
    More importantly, the callback is fired in the context of the current DOM element,
    so the keyword `this` refers to that element.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 上面列出的第一种语法是 jQuery 对象的一种方法，当调用它时，它会迭代对象的一部分DOM元素。每次回调运行时，都将当前循环迭代作为参数传递，从`0`开始。更重要的是，回调在当前DOM元素的上下文中触发，因此关键字`this`指的是该元素。
- en: 'Suppose we had a simple unordered list on the page:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在页面上有一个简单的无序列表：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can select the list items and iterate across them:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择列表项并对它们进行迭代：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'A message is thus logged for each item in the list:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对列表中的每个项目记录了一条消息：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The second syntax is similar, but it is a global function rather than a method.
    The collection is passed as the first parameter in this case, and can be either
    a map (JavaScript object) or an array. In the case of an array, the callback is
    passed an array index and corresponding array value as parameters each time:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种语法类似，但它是一个全局函数，而不是一个方法。在这种情况下，集合作为第一个参数传递，并且可以是映射（JavaScript对象）或数组。在数组的情况下，每次回调都会将数组索引和相应的数组值作为参数传递：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This produces two messages:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了两条消息：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If a map is used as the collection, the callback is passed a key-value pair
    as parameter each time:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作为集合使用映射，每次回调都会把一个键值对传递为参数：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once again, this produces two messages:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这产生了两条消息：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: $.grep()
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.grep()
- en: '| Winnow an array down to a selected set of items.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '| 筛选一个数组，只留下所选的项目。'
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'array: The array to search through'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '数组: 要搜索的数组'
- en: 'filter: A function to apply as a test for each item, or a string containing
    an expression to use as a test'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'filter: 要对每个项目应用的测试函数，或包含要用作测试的表达式的字符串'
- en: 'invert (optional): A Boolean indicating whether to reverse the filter condition'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: invert（可选）：一个布尔值，指示是否倒转过滤条件
- en: Return Value
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The newly constructed, filtered array.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 新构建的、经过过滤的数组。
- en: Description
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `$.grep()` method removes items from an array as necessary so that all remaining
    items pass a provided test. The test is a function that is passed an array item
    and the index of the item within the array as parameters; only if the test returns
    true will the item be in the result array.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.grep()` 方法根据需要从数组中移除项，以便所有剩余项都通过提供的测试。 测试是一个函数，它以数组项和数组中的索引作为参数； 只有在测试返回
    true 时，项才会在结果数组中。'
- en: 'As is typical with jQuery methods, the callback function is often defined anonymously:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 与jQuery方法一样，回调函数通常是匿名定义的：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'All array items that are over `50` are preserved in the result array:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组中保留了所有大于`50`的项目：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Since filter functions tend to be very short, jQuery provides a further shortcut.
    Filter functions can be defined as a single expression that is evaluated for each
    item `a` in the array:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于过滤函数往往非常简短，jQuery提供了一个更进一步的快捷方式。 过滤函数可以定义为对数组中的每个项目`a`进行评估的单个表达式：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This produces the same results as before. We can invert this test by adding
    the third parameter:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了与以前相同的结果。 通过添加第三个参数，我们可以反转这个测试：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This now produces an array of items less than or equal to `50`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在产生了一个小于或等于`50`的项目数组：
- en: '[PRE36]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: $.map()
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.map()
- en: '| Transform an array into another one by using a filter function.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '| 通过使用一个过滤函数将一个数组转换成另一个数组。'
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'array: The array to convert'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '数组: 要转换的数组'
- en: 'filter: A function to apply to each item, or a string containing an expression
    to apply'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '过滤器: 要应用于每个项的函数，或包含要应用的表达式的字符串'
- en: Return Value
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The newly constructed, transformed array.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 新构建的转换数组。
- en: Description
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `$.map()` method applies a function to each item in an array, collecting
    the results into a new array. The filter is a function that is passed an array
    item and the index of the item within the array as parameters.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.map()` 方法对数组中的每个项目应用一个函数，将结果收集到一个新数组中。 过滤器是一个函数，它以数组项和数组中的索引作为参数。'
- en: 'As is typical with jQuery methods, the callback function is often defined anonymously:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 与jQuery方法一样，回调函数通常是匿名定义的：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'All array items are reduced by `45` in the result array:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组中的所有项目都减去了`45`：
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Since filter functions tend to be very short, jQuery provides a further shortcut.
    Filter functions can be defined as a single expression that is applied to each
    item `a` in the array:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 由于过滤函数往往非常简短，jQuery提供了一个更进一步的快捷方式。 过滤函数可以定义为应用于数组中每个项目`a`的单个表达式：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This produces the same results as before. We can remove items from the array
    by returning `null` from the filter function:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了与以前相同的结果。 通过从过滤函数中返回`null`，我们可以从数组中移除项目：
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This now produces an array of the items that were greater than `50`, each reduced
    by `45`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在产生了一个大于`50`的项目数组，每个都减去了`45`：
- en: '[PRE42]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If the filter function returns an array rather than a scalar, the returned
    arrays are concatenated together to form the result:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果过滤函数返回的是一个数组而不是一个标量，则返回的数组将连接在一起形成结果：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Instead of a two-dimensional result array, the map forms a flattened one:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是二维结果数组，映射形成了一个扁平化的结果：
- en: '[PRE44]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: $.merge()
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.merge()
- en: '| Merge the contents of two arrays together into the first array.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将两个数组的内容合并到第一个数组中。'
- en: '[PRE45]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'array1: The first array to merge'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'array1: 要合并的第一个数组'
- en: 'array2: The second array to merge'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'array2: 要合并的第二个数组'
- en: Return Value
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: An array consisting of elements from both supplied arrays.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个提供的数组元素组成的数组。
- en: Description
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `$.merge()` operation forms an array that contains all elements from the
    two arrays, with duplicates removed. The order of items in the first array is
    preserved, with items from the second array appended:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.merge()` 操作形成一个包含两个数组中所有元素的数组，重复项已被移除。第一个数组中的项目顺序被保留，第二个数组中的项目被附加：'
- en: '[PRE46]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The resulting array contains all four distinct items:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组包含所有四个不同的项目：
- en: '[PRE47]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The `$.merge()` function is destructive. It alters the first parameter to add
    the items from the second. If you need the original first array, make a copy of
    it before calling `$.merge()`. Fortunately, `$.merge()` itself can be used for
    this duplication:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.merge()` 函数是破坏性的。它修改第一个参数以添加第二个参数中的项目。如果需要原始的第一个数组，在调用 `$.merge()` 之前复制它。幸运的是，`$.merge()`
    本身可以用于这种复制：'
- en: '[PRE48]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This shortcut creates a new, empty array and merges the contents of `oldArray`
    into it, effectively cloning the array.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这个快捷方式创建一个新的空数组，并将 `oldArray` 的内容合并到其中，从而有效地克隆数组。
- en: $.unique()
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.unique()
- en: '| Creates a copy of an array of objects with the duplicates removed.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '| 创建一个删除重复项的对象数组的副本。'
- en: '[PRE49]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'array: An array of objects'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组：对象数组
- en: Return Value
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: An array consisting of only unique objects.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 仅由唯一对象组成的数组。
- en: Description
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `$.unique()` function searches through an array of objects, forming a new
    array that does not contain duplicate objects. Two objects are considered distinct
    if they refer to different locations in memory, even if their contents are identical.
    The original array is not modified. The array may consist of any kind of JavaScript
    object:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.unique()` 函数搜索对象数组，形成一个不包含重复对象的新数组。如果两个对象引用内存中的不同位置，则认为它们是不同的对象，即使它们的内容相同也是如此。原始数组不会被修改。数组可以包含任何类型的
    JavaScript 对象：'
- en: '[PRE50]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The resulting array contains only the four distinct items:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组仅包含四个不同的项目：
- en: '[PRE51]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The second instance of the object named `bob` is removed from the resulting
    array. However, the object named `ted` remains even though it has identical content,
    since it was created as a separate object.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组中移除了第二个名为 `bob` 的对象实例。但是，名为 `ted` 的对象保留了下来，即使它具有相同的内容，因为它是作为单独的对象创建的。
- en: Note that `$.unique()` modifies the objects in the array, adding an extra property
    called `mergeNum` to each. This property is a side effect of the implementation
    of the function, and is not useful to the calling code.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`$.unique()` 修改数组中的对象，为每个对象添加了一个名为 `mergeNum` 的额外属性。这个属性是函数实现的副作用，并且对调用代码没有用处。
- en: $.extend()
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.extend()
- en: '| Merge the contents of two objects together into the first object.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '| 将两个对象的内容合并到第一个对象中。'
- en: '[PRE52]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'target (optional): An object which will receive the new properties'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标（可选）：将接收新属性的对象
- en: 'properties: An object containing additional properties to merge in'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：包含要合并的其他属性的对象
- en: Return Value
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The target object after it has been modified.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的目标对象。
- en: Description
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `$.extend()` function merges two objects in the same way that `$.merge()`
    merges arrays. The properties of the second object are added to the first, creating
    an object with all the properties of both objects:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.extend()` 函数以与 `$.merge()` 合并数组相同的方式合并两个对象。将第二个对象的属性添加到第一个对象中，创建一个具有两个对象所有属性的对象：'
- en: '[PRE53]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The value for `durian` in the second object gets added to the first, and the
    value for `banana` gets overwritten:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个对象中的 `durian` 的值被添加到第一个对象中，而 `banana` 的值被覆盖：
- en: '[PRE54]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `$.extend()` function is destructive; the target object is modified in
    the process. This is generally desirable behavior, as `$.extend()` can in this
    way be used to simulate object inheritance. Methods added to the object become
    available to all the code that has a reference to the object. If, however, we
    want to preserve both of the original objects, we can do this by passing an empty
    object as the target:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.extend()` 函数是破坏性的；目标对象在过程中被修改。这通常是期望的行为，因为 `$.extend()` 可以用来模拟对象继承。添加到对象的方法可供所有引用对象的代码使用。然而，如果我们想保留原始对象的副本，我们可以通过将空对象作为目标来实现：'
- en: '[PRE55]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We can also supply more than two objects to `$.extend()`. In this case, properties
    from all of the objects are added to the target object.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向 `$.extend()` 提供两个以上的对象。在这种情况下，所有对象的属性都将添加到目标对象中。
- en: If only one argument is supplied to `$.extend()`, this means the target argument
    was omitted. In this case, the jQuery object itself is assumed to be the target.
    By doing this, we can add new functions to the jQuery namespace. We will explore
    this capability when discussing how to create jQuery plug-ins.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给`$.extend()`提供了一个参数，这意味着目标参数被省略了。在这种情况下，jQuery对象本身被假定为目标。通过这样做，我们可以向jQuery命名空间添加新功能。在讨论如何创建jQuery插件时，我们将探讨这种能力。
- en: The merge performed by `$.extend()` is not recursive; if a property of the first
    object is itself an object or an array, it will be completely overwritten by a
    property with the same key in the second object. The values are not merged.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.extend()`执行的合并不是递归的；如果第一个对象的属性本身是对象或数组，则它将被第二个对象中具有相同键的属性完全覆盖。值不会合并。'
- en: $.trim()
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $.trim()
- en: '| Removes whitespace from the ends of a string.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '| 从字符串的两端删除空白。'
- en: '[PRE56]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Parameters
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数
- en: 'string: A string to trim'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: string：要修剪的字符串
- en: Return Value
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回值
- en: The trimmed string.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 修剪后的字符串。
- en: Description
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The `$.trim()` function removes all newlines, spaces, and tabs from the beginning
    and end of the supplied string:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.trim()`函数从提供的字符串的开头和结尾删除所有换行符、空格和制表符：'
- en: '[PRE57]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'All of the whitespace characters are trimmed:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 所有空白字符都被修剪：
- en: '[PRE58]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
