["```js\nnpm run server: start\n```", "```js\nng serve --proxy-config proxy.config.json\n```", "```js\nGET /api/recipes\n```", "```js\n$ ng g i Recipe\n```", "```js\nexport interface Recipe {\nid: number;\ntitle: string;\ningredients: string;\ntags?: string;\nimageUrl: string;\ncookingTime?: number;\nprepTime?: number;\nyield: number;\nsteps?: string;\nrating:number;\n}\n```", "```js\n$ ng g s Recipes\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Recipe } from '../model/recipe.model';\nimport { environment } from 'src/environments/environment';\nconst BASE_PATH = environment.basePath\n@Injectable({\nprovidedIn: 'root'\n})\nexport class RecipesService {\nconstructor(private http: HttpClient) { }\ngetRecipes(): Observable<Recipe[]> {\nreturn this.http.get<Recipe[]>(`${BASE_PATH}/recipes`);\n}\n}\n```", "```js\nconstructor(private http: HttpClient) { }\n```", "```js\nprivate http= inject(HttpClient);\n```", "```js\n  $ ng g c recipesList\n```", "```js\n  $ ng g c recipesList --standalone\n```", "```js\n@Component({\n  selector: 'app-recipes-list',\n  standalone: true,\n  imports: [],\n  templateUrl: './recipes-list.component.html',\n  styleUrls: ['./recipes-list.component.scss'],\n})\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Recipe } from '../core/model/recipe';\nimport { RecipesService } from '../core/services/recipes.\nService';\n@Component({\nselector: 'app-recipes-list',\nstandalone: true,\nimports: [CommonModule],\ntemplateUrl: './recipes-list.component.html',\nstyleUrls: ['./recipes-list.component.scss']\n})\nexport class RecipesListComponent implements OnInit {\nrecipes!: Recipe[];\nconstructor(private service: RecipesService) { }\nngOnInit(): void {\nthis.service.getRecipes().subscribe(result => {\nthis.recipes = result;\n});\n}\n}\n```", "```js\n<div class=\"card\">\n<p-dataView #dv [value]=\"recipes\" [paginator]=\"true\"\n[rows]=\"9\"    filterBy=\"name\" layout=\"grid\">\n/** Extra code here **/\n</p-dataView>\n</div>\n```", "```js\nexport class RecipesListComponent implements OnInit,\nOnDestroy {\n  recipes!: Recipe[];\n  subscription: Subscription;\n  constructor(private service: RecipesService) { }\nngOnInit(): void {\n  this.subscription=this.service.getRecipes()\n  .subscribe(result => {\n    this.recipes = result;\n});\n}\nngOnDestroy(): void {\n  this.subscription?.unsubscribe();\n}\n```", "```js\nexport class RecipesListComponent implements OnInit,\nOnDestroy {\n  recipes!: Recipe[];\n  destroy$ = new Subject<void>();\n  constructor(private service: RecipesService) { }\nngOnInit(): void {\n  this.service.getRecipes().pipe(\n    takeUntil(this.destroy$)).\n    subscribe(result => {\n    this.recipes = result;\n  });\n}\nngOnDestroy(): void {\n  this.destroy$.next();\n  this.destroy$.complete();\n}\n}\n```", "```js\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\n```", "```js\nexport class RecipesListComponent {\n  recipes!: Recipe[];\n  constructor(private service: RecipesService) {\n    this.service.getRecipes().pipe(takeUntilDestroyed())\n      .subscribe(result=>this.recipes = result);\n  }\n}\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Recipe } from '../model/recipe';\nimport { environment } from 'src/environments/environment';\nconst BASE_PATH = environment.basePath\n@Injectable({\nprovidedIn: 'root'\n})\nexport class RecipesService {\nrecipes$ = this.http.get<Recipe[]>(\n`${BASE_PATH}/recipes`);\nconstructor(private http: HttpClient) { }\n}\n```", "```js\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { RecipesService } from '../core/services/recipes.\nService';\n@Component({\nselector: 'app-recipes-list',\nstandalone: true,\nimports: [CommonModule],\ntemplateUrl: './recipes-list.component.html',\nstyleUrls: ['./recipes-list.component.css']\n})\nexport class RecipesListComponent implements OnInit {\nrecipes$= this.service.recipes$;\nconstructor(private service: RecipesService) { }\n}\n```", "```js\n<div *ngIf=\"recipes$ |async as recipes\" class=\"card\">\n<p-dataView #dv [value]=\"recipes\" [paginator]=\"true\"\n[rows]=\"9\"    filterBy=\"name\" layout=\"grid\">\n/** Extra code here **/\n</p-dataView>\n</div>\n```", "```js\nimport { ChangeDetectionStrategy, Component} from\n'@angular/ core';\n@Component({\n  selector: 'app-recipes-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './recipes-list.component.html',\n  styleUrls: ['./recipes-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n```", "```js\n    <div *ngIf=\"items.length === 0\">No items found </div>\n    In this code, if the `items` array is not empty, the content inside the `else` block defined by the `ng-template` element with the `#itemsFound` reference will be displayed, indicating `*ngFor`: This structural directive is used for iteration. It repeats a section of HTML for each item in an iterable collection. For example, this code renders a list of products one by one:\n\n    ```", "```js\n\n    In order to improve performance, you can optionally add a custom `trackBy` function that provides a unique identifier for each item in the list. This is achieved by modifying the previous code, shown as follows:\n\n    ```", "```js\n\n    Then, define the `trackProduct` function in your component class to return the unique identifier of each product item as follows:\n\n    ```", "```js\n\n    This way, Angular can more efficiently track changes within the list. It will only update the DOM elements that actually changed, instead of re-rendering the entire list for minor changes. This leads to a smoother user experience, especially when dealing with large or frequently updated lists.\n    ```", "```js\n    <div [ngSwitch]=\"userRole\">\n      <admin-dashboard *ngSwitchCase=\"admin\" >\n        </admin-dashboard>\n      <user-dashboard *ngSwitchCase=\"'user'\" >\n        </user-dashboard>\n      <guest-dashboard *ngSwitchDefault >\n        </guest-dashboard>\n    </div>\n    ```", "```js\n<div *ngIf=\"items.length === 0; else itemsFound\">\n  <div>No items found</div>\n</div>\n<ng-template #itemsFound>\n  <div>Items found</div>\n</ng-template>\n```", "```js\n@if (items.length === 0) {\n  <div> No items found </div>\n} @else {\n<div> Items found </div>\n}\n```", "```js\n@if (age >= 18) {\n  You are an adult.\n} @else if (age >= 13) {\n  You are a teenager.\n} @else {\n  You are a child.\n}\n```", "```js\n<ul>\n  <li *ngFor=\"let product of products; trackBy:\n    trackProduct\">{{ product.name }}\n  </li>\n</ul>\n```", "```js\n@for (product of products; track product.id) {\n  {{ product.name }}\n}\n```", "```js\n@for (product of products; track trackProduct($index, product) {\n  {{ product.name }}\n}\n```", "```js\n@for (product of products; track product.id) {\n  {{ product.name }}\n} @empty {\n  Empty list of products\n}\n```", "```js\n<div [ngSwitch]=\"userRole\">\n  <admin-dashboard *ngSwitchCase=\"admin\" >\n    </admin-dashboard>\n  <user-dashboard *ngSwitchCase=\"'user'\" >\n    </user-dashboard>\n  <guest-dashboard *ngSwitchDefault >\n    </guest-dashboard>\n</div>\n```", "```js\n@switch (userRole) {\n  @case ('admin') { <admin-dashboard/> }\n  @case ('user') { <user-dashboard/> }\n  @default { <guest-dashboard/> }\n}\n```", "```js\n<div *ngIf=\"recipes$ | async as recipes\" class=\"card\">\n  <p-dataView #dv [value]=\"recipes\" [paginator]=\"true\"\n  [rows]=\"9\" filterBy=\"name\" layout=\"grid\">\n      <ng-template let-recipes pTemplate=\"gridItem\">\n        <div class=\"grid grid-nogutter\">\n          <div class=\"col-12\" class=\"recipe-grid-item card\"\n          *ngFor=\"let recipe of recipes\">\n            /** Extra code here **/\n          </div>\n        </div>\n      </ng-template>\n  </p-dataView>\n</div>\n```", "```js\n@if (recipes$ | async; as recipes) {\n  <div class=\"card\">\n    <p-dataView #dv [value]=\"recipes\" [paginator]=\"true\"\n    [rows]=\"9\" filterBy=\"name\" layout=\"grid\">\n      <ng-template let-recipes pTemplate=\"gridItem\">\n        <div class=\"grid grid-nogutter\">\n          @for (recipe of recipes; track recipe.id) {\n            <div class=\"col-12\"\n            class=\"recipe-grid-item card\">\n/** Extra code here **/\n            </div>\n                }\n        </div>\n      </ng-template>\n    </p-dataView>\n  </div>\n}\n```", "```js\nng generate @angular/core:control-flow\n```"]