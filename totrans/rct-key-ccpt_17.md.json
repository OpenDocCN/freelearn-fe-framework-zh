["```js\nimport { lazy, **Suspense**, useState } from 'react';\nconst DateCalculator = lazy(() => import(\n    './components/DateCalculator.jsx'\n  )\n);\nfunction App() {\n  const [showDateCalc, setShowDateCalc] = useState(false);\n  function handleOpenDateCalc() {\n    setShowDateCalc(true);\n  }\n  return (\n    <>\n      <p>This app might be doing all kinds of things.</p>\n      <p>\n        But you can also open a calculator which calculates \n        the difference between two dates.\n      </p>\n      <button onClick={handleOpenDateCalc}>Open Calculator</button>\n      **<****Suspense****fallback****=****{****<****p****>****Loading...****</****p****>****}>**\n        {showDateCalc && <DateCalculator />}\n      **</****Suspense****>**\n    </>\n  );\n} \n```", "```js\nimport fs from 'node:fs/promises';\nasync function fetchGoals() {\n  await new Promise((resolve) => setTimeout(resolve, 3000)); // delay\n  const goals = await fs.readFile('./data/user-goals.json', 'utf-8');\n  return JSON.parse(goals);\n}\nexport default async function UserGoals() {\n  const fetchedGoals = await fetchGoals();\n  return (\n    <ul>\n      {fetchedGoals.map((goal) => (\n        <li key={goal}>{goal}</li>\n      ))}\n    </ul>\n  );\n} \n```", "```js\nimport { Suspense } from 'react';\nimport UserGoals from '../../components/UserGoals';\nexport default async function GoalsPage() {\n  return (\n    <>\n      <h1>Top User Goals</h1>\n      <Suspense fallback={\n        <p id=\"fallback\">Fetching user goals...</p>}\n      >\n        <UserGoals />\n      </Suspense>\n    </>\n  );\n} \n```", "```js\nfunction ShopOverviewPage() {\n  return (\n    <>\n      <header>\n        <h1>Find your next deal!</h1>\n        <MainNavigation />\n      </header>\n      <main>\n        <Suspense fallback={<DailyDealSkeleton />}>\n          <DailyDeal />\n        </Suspense>\n        <section id=\"search\">\n          <h2>Looking for something specific?</h2>\n          <Search />\n        </section>\n        <Suspense fallback={<p>Fetching products...</p>}>\n          <Products />\n        </Suspense>\n      </main>\n    </>\n  );\n} \n```", "```js\nimport { useEffect, useState } from 'react';\nfunction BlogPosts() {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    async function fetchBlogPosts() {\n      // simulate slow network\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n      const posts = await response.json();\n      setPosts(posts);\n    }\n    fetchBlogPosts();\n  }, []);\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n} \n```", "```js\nimport { Suspense } from 'react';\nimport BlogPosts from './components/BlogPosts.jsx';\nfunction App() {\n  return (\n    <>\n      <h1>All posts</h1>\n      <Suspense fallback={<p>Fetching blog posts...</p>}>\n        <BlogPosts />\n      </Suspense>\n    </>\n  );\n} \n```", "```js\nasync function BlogPosts() {\n  await new Promise((resolve) => setTimeout(resolve, 3000));\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  const posts = await response.json();\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n} \n```", "```js\nfunction BlogPosts() {\n  const [posts, setPosts] = useState([]);\n  new Promise(() => setTimeout(() => {\n    return fetch(\n      'https://jsonplaceholder.typicode.com/posts'\n    ).then(response => response.json())\n     .then(fetchedPosts => setPosts(fetchedPosts));\n  }, 3000));\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n} \n```", "```js\nimport { useSuspenseQuery } from '@tanstack/react-query';\nasync function fetchPosts() {\n  await new Promise((resolve) => setTimeout(resolve, 3000));\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  const posts = await response.json();\n  return posts;\n}\nfunction BlogPosts() {\n  const {data} = useSuspenseQuery({\n    queryKey: ['posts'],\n    queryFn: fetchPosts\n  });\n  return (\n    <ul>\n      {data.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n} \n```", "```js\nimport { Suspense } from 'react';\nimport BlogPosts from './components/BlogPosts.jsx';\nfunction App() {\n  return (\n    <>\n      <h1>All posts</h1>\n      <Suspense fallback={<p>Fetching blog posts...</p>}>\n        <BlogPosts />\n      </Suspense>\n    </>\n  );\n} \n```", "```js\n**import** **{ use }** **from****'react'****;**\nasync function fetchPosts() {\n  await new Promise((resolve) => setTimeout(resolve, 3000));\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  const posts = await response.json();\n  return posts;\n}\nfunction BlogPosts() {\n  **const** **posts =** **use****(****fetchPosts****());**\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  );\n} \n```", "```js\nimport { Suspense } from 'react';\nimport BlogPosts from './components/BlogPosts.jsx';\nfunction App() {\n  return (\n    <>\n      <h1>All posts</h1>\n      <Suspense fallback={<p>Fetching blog posts...</p>}>\n        <BlogPosts />\n      </Suspense>\n    </>\n  );\n} \n```", "```js\nimport fs from 'node:fs/promises';\nimport UserGoals from '../../components/UserGoals';\nasync function fetchGoals() {\n  await new Promise((resolve) => setTimeout(resolve, 3000)); // delay\n  const goals = await fs.readFile('./data/user-goals.json', 'utf-8');\n  return JSON.parse(goals);\n}\nexport default function GoalsPage() {\n  **const** **fetchGoalsPromise =** **fetchGoals****();**\n  return (\n    <>\n      <h1>Top User Goals</h1>\n      <UserGoals **promise****=****{fetchGoalsPromise}** />\n    </>\n  );\n} \n```", "```js\nimport { use, Suspense } from 'react';\nfunction Goals({ fetchGoalsPromise }) {\n  const goals = use(fetchGoalsPromise);\n  return (\n    <ul>\n      {goals.map((goal) => (\n        <li key={goal}>{goal}</li>\n      ))}\n    </ul>\n  );\n}\nexport default function UserGoals({ promise }) {\n  return (\n    <Suspense fallback={<p id=\"fallback\">Fetching user goals...</p>}>\n      <Goals fetchGoalsPromise={promise} />\n    </Suspense>\n  );\n} \n```", "```js\n**'use client'****;**\nimport { use, Suspense, **useEffect,****useState**  } from 'react';\n// sendAnalytics() is a dummy function that just logs to the console\nimport { sendAnalytics } from '../lib/analytics';\nfunction Goals({ fetchGoalsPromise }) {\n  **const** **[mainGoal, setMainGoal] =** **useState****();**\n  const goals = use(fetchGoalsPromise);\n  function handleSetMainGoal(goal) {\n    setMainGoal(goal);\n  }\n  return (\n    <ul>\n      {goals.map((goal) => (\n        <li\n          key={goal}\n          id={goal === mainGoal ? 'main-goal' : undefined}\n          onClick={() => handleSetMainGoal(goal)}\n        >\n          {goal}\n        </li>\n      ))}\n    </ul>\n  );\n}\nexport default function UserGoals({ promise }) {\n  **useEffect****(****() =>** **{**\n    **sendAnalytics****(****'user-goals-loaded'****, navigator.****userAgent****);**\n  **}, []);**\n  return (\n    <Suspense fallback={<p id=\"fallback\">Fetching user goals...</p>}>\n      <Goals fetchGoalsPromise={promise} />\n    </Suspense>\n  );\n} \n```", "```js\nfunction Shop() {\n  return (\n    <>\n      <h1>Welcome to our shop!</h1>\n      <Suspense fallback={<p>Fetching shop data...</p>}>\n        <DailyDeal />\n        <Products />\n      </Suspense>\n    </>\n  );\n} \n```", "```js\nfunction Shop() {\n  return (\n    <>\n      <h1>Welcome to our shop!</h1>\n      <Suspense fallback={<p>Fetching daily deal data...</p>}>\n        <DailyDeal />\n      </Suspense>\n      <Suspense fallback={<p>Fetching products data...</p>}>\n        <Products />\n      </Suspense>\n    </>\n  );\n} \n```", "```js\nfunction Shop() {\n  return (\n    <>\n      <h1>Welcome to our shop!</h1>\n      <Suspense fallback={<p>Fetching shop data...</p>}>\n        <DailyDeal />\n        <Suspense fallback={<p>Fetching products data...</p>}>\n          <Products />\n        </Suspense>\n      </Suspense>\n    </>\n  );\n} \n```"]