["```js\nconst Profile = ({ user }) => ( \n  <>\n    <Picture profileImageUrl={user.profileImageUrl} /> \n    <UserName name={user.name} screenName={user.screenName} /> \n  </> \n) \n```", "```js\nProfile is not the direct parent of Picture (the div tag is), but Profile owns Picture because it passes down the props to it.\n```", "```js\nconst Button = ({ text }) => <button className=\"btn\">{text}</button> \n```", "```js\n<Button text=\"Click me!\" /> \n```", "```js\n<button class=\"btn\">Click me!</button> \n```", "```js\nconst Button = ({ children }) => <button className=\"btn\">{children}</button> \n```", "```js\n<Button> \n    <img src=\"img/...\" alt=\"...\" /> \n    <span>Click me!</span> \n</Button> \n```", "```js\n<button class=\"btn\"> \n    <img src=\"img/...\" alt=\"...\" /> \n    <span>Click me!</span> \n</button> \n```", "```js\n<Button>\n    <span>Click me!</span> \n</Button> \n```", "```js\nimport { useState, useEffect } from 'react'\nconst Geolocation = () => {}\nexport default Geolocation \n```", "```js\nconst [latitude, setLatitude] = useState<number | null>(null)\nconst [longitude, setLongitude] = useState<number | null>(null) \n```", "```js\nuseEffect(() => { \n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleSuccess)\n        } \n}, [navigator]) \n```", "```js\nconst handleSuccess = ({ \n    coords: { latitude, longitude } \n  }: { coords: { latitude: number; longitude: number }}) => { \n    setLatitude(latitude)\n    setLongitude(longitude)\n} \n```", "```js\nreturn ( \n    <div>\n      <h1>Geolocation:</h1>\n      <div>Latitude: {latitude}</div> \n      <div>Longitude: {longitude}</div> \n    </div> \n) \n```", "```js\nconst GeolocationContainer = () => {...} \n```", "```js\nreturn <Geolocation latitude={latitude} longitude={longitude} /> \n```", "```js\nimport { FC } from 'react'\ntype Props = {\n  latitude: number\n  longitude: number\n}\nconst Geolocation: FC<Props> = ({ latitude, longitude }) => (\n  <div>\n    <h1>Geolocation:</h1>\n    <div>Latitude: {latitude}</div>\n    <div>Longitude: {longitude}</div>\n  </div>\n)\nexport default Geolocation \n```", "```js\nconst HoC = Component => EnhancedComponent \n```", "```js\nconst withClassName = Component => props => (\n  <Component {...props} className=\"my-class\" />\n) \n```", "```js\nconst MyComponent = ({ className }) => <div className={className} /> \n```", "```js\nconst MyComponentWithClassName = withClassName(MyComponent) \n```", "```js\n import { useEffect, useState } from 'react'\n  const withInnerWidth = Component => props => <Component {...props} /> \n```", "```js\nconst withInnerWidth = Component => props => {\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth)\n  const handleResize = () => {\n    setInnerWidth(window.innerWidth)\n  }\n  return <Component {...props} />\n} \n```", "```js\nuseEffect(() => {\n  window.addEventListener('resize', handleResize)\n  return () => {\n    window.removeEventListener('resize', handleResize)\n  }\n}, []) \n```", "```js\nreturn <Component {...props} innerWidth={innerWidth} /> \n```", "```js\nconst MyComponent = ({ innerWidth }) => {\n  console.log('window.innerWidth', innerWidth)\n  // ...\n} \n```", "```js\nconst MyComponentWithInnerWidth = withInnerWidth(MyComponent) \n```", "```js\n<MyComponent innerWidth={320} /> \n```", "```js\n<MyComponent innerWidth={960} /> \n```", "```js\nconst FunctionAsChild = ({ children }) => children() \n```", "```js\n<FunctionAsChild>\n  {() => <div>Hello, World!</div>}\n</FunctionAsChild> \n```", "```js\nconst Name = ({ children }) => children('World') \n```", "```js\n<Name>\n  {name => <div>Hello, {name}!</div>}\n</Name> \nHello, World! again, but this time the name has been passed by the parent. It should now be clear how this pattern works. Letâ€™s look at the advantages of this approach:\n```", "```js\n    <Fetch url=\"...\">\n      {data => <List data={data} />}\n    </Fetch> \n    ```"]