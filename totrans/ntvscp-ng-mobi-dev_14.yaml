- en: Deployment Preparation with webpack Bundling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to deploy our app to the two leading mobile app stores, Apple App Store
    and Google Play; however, there are several things that we need to do to prepare
    our app for distribution.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that you use the smallest JavaScript size in addition to Angular's
    AoT compiler to help our app execute as fast as possible, we will use webpack
    to bundle everything. It's worth noting that webpack is not a requirement to create
    a distributable NativeScript app. However, it provides very nice benefits that
    should make it an important step for anyone when distributing their apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing webpack for a NativeScript for Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a project to be bundled with webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solving various webpack bundling issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A primer on writing your own custom webpack plugin to solve specific cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using webpack to bundle the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If it weren't for Sean Larkin, you might have never heard of webpack. His contributions
    and involvement in the bundler community have helped bring webpack into the Angular
    CLI and also make it a primary *go-to* bundler for many things. We greatly appreciate
    his efforts and kindness in the community.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing to use webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at how webpack can be utilized to reduce the packaged size
    of our NativeScript for Angular app in addition to ensuring that it executes optimally
    on a user's mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first install the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This automatically creates a `webpack.config.js` file (at root of project)
    preconfigured with a basic setup that will get you reasonably further with most
    apps. Additionally, it creates a `tsconfig.aot.json` file (also at root of project)
    since NativeScript''s webpack usage will use Angular''s AoT compiler while bundling.
    It also adds some nifty npm scripts to our `package.json` to help handle all the
    various bundling options we will want; consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run build-android-bundle` to build for Android'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run build-ios-bundle` to build for iOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run start-android-bundle` to run on Android'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm run start-ios-bundle` to run on iOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, before we attempt those new commands, we will need to audit our app
    for a couple of things.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should start by ensuring that all NativeScript import paths are preceded
    with `tns-core-modules/[module]`; consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We'll go through our app and do this now. This works fine for development and
    production builds.
  prefs: []
  type: TYPE_NORMAL
- en: You might wonder, *Hey! Why did you even use the other form if we needed to
    go through the entire codebase and change the imports after the fact?*
  prefs: []
  type: TYPE_NORMAL
- en: Great concern! There's actually a ton of examples out there that show the convenient
    shortform import path, so we chose to build the app using that throughout in this
    chapter to demonstrate that it works just fine for development to help avoid confusion,
    in case you come across examples such as these in the future. Besides, it doesn't
    take too much to edit that after the fact to prepare for webpack but now you know.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the following errors—which I have enumerated—and we will present
    solutions for it sequentially in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: ERROR in Unexpected value `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts
    declared by the module PlayerModule in /path/to/TNSStudio/app/modules/player/player.module.ts`.
    Please add a `@Pipe/@Directive/@Component` annotation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ERROR in Cannot determine the module for class `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.android.ts`!
    Add `SlimSliderDirective` to the `NgModule` to fix it. Cannot determine the module
    for class `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.ios.ts`!
    Add `SlimSliderDirective` to the `NgModule` to fix it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ERROR in Error encountered resolving symbol values statically. Calling function
    `ModalDialogParams`, function calls are not supported. Consider replacing the
    function or lambda with a reference to an exported function, resolving symbol
    `RecorderModule` in `/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`,
    resolving symbol `RecorderModule` in `/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ERROR in Entry module not found: Error: Can''t resolve `./app.css` in `/path/to/TNSStudio/app`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ERROR in [copy-webpack-plugin] unable to locate `app.css` at `/path/to/TNSStudio/app/app.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first three errors are purely Angular **Ahead of Time** (**AoT**) compilation
    related. The last two are purely related to webpack configuration. Let's look
    at each error and how to properly resolve it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution #1: Unexpected value ''SlimSliderDirective...'''
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the first complete error mentioned in the preceding section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The solution to the preceding error is to install an additional webpack plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open `webpack.config.js` and configure the plugin as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will find the `slider.directive` import in `app/modules/players/directives/index.ts`
    and append the correct target platform suffix, so the AoT compiler will pick up
    the right target platform implementation file.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, a solution did not exist for that error, so
    we developed the `nativescript-webpack-import-replace` plugin to solve. Since
    you might encounter situations with webpack bundling that may require some additional
    webpack help via a plugin, we will share an overview of how we developed the plugin
    to solve that error in the event that you encounter other obscure errors that
    might require you to create a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at solutions for the initial remaining errors first, and then we'll
    highlight webpack plugin development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution #2: Cannot determine the module for class SlimSliderDirective...'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the second complete error mentioned in the *Preparing to use webpack*
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The solution to the preceding error is to open `tsconfig.aot.json`, and make
    the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Since AoT compilation uses the `tsconfig.aot.json` configuration, we want to
    be more specific with the files that are targeted for compilation. Since `./app/main.ts`
    is our entry point to bootstrap the app, we will target that file and remove the
    `exclude` block.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to try bundling now at this point, we would have solved the error
    we saw; however, we would see the following *new* errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is because we are targeting our `./app/main.ts`, which branches out to
    all other imports to our app's files, except to those modules that are lazy loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to the preceding error is to add lazy-loaded module paths in the
    `files` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, we solved the `lazy` error; however, now this reveals several *new* errors,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Right about now...
  prefs: []
  type: TYPE_NORMAL
- en: The funk soul brother.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you might be singing Fatboy Slim or about to lose your mind, and we understand.
    Bundling with webpack can be quite an adventure at times. The best advice that
    we can provide is to maintain patience and diligence to handle one error at a
    time; we're almost there.
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to the preceding error is to include the iOS and Android platform
    declarations since we are using native APIs in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Hooray, we have now fully resolved the second issue. Let's move on to the next
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution #3: Error encountered resolving symbol values statically'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the third complete error mentioned in the *Preparing to use webpack* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The solution to the preceding error is to open `app/modules/recorder/recorder.module.ts`
    and make the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will satisfy the Angular AoT compiler's need to resolve symbols statically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution #4 and #5: Can''t resolve ''./app.css'''
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the 4th and 5th errors mentioned in the *Preparing to use webpack* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The solution to the preceding error is actually related to the fact that we
    are using platform-specific `.ios.css` and `.android.css`, which is compiled via
    SASS. We need to update our webpack config so that it knows this. Open `webpack.config.js`,
    which the plugin added for us automatically, and make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Okay, we now have the bundling issues all cleared, or wait....**do we?!**
  prefs: []
  type: TYPE_NORMAL
- en: 'We haven''t tried to run the app yet in a simulator or on a device. If we were
    to try and do this now using `npm run start-ios-bundle` or via XCode or `npm run
    start-android-bundle`, you might get an app crash right when it tries to boot
    with an error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The solution to the preceding error is to ensure that your app contains an `./app/main.aot.ts`
    file with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you recall we have a demo composition setup which loads it''s track files
    from an `audio` folder. We also utilize font-awesome icons with the help of a
    font-awesome.css file loaded from an `assets` folder. We need to make sure these
    folders also get copied into our production webpack build. Open `webpack.config.js`
    and make the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: SUCCESS!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now run our bundled app with no errors using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm run start-ios-bundle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening the XCode project and running `npm run start-android-bundle`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's worth noting that all the changes we made to enable webpack bundling for
    release of our app also work perfectly well in development, so rest assured that
    you have only improved your app's setup at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Detour – Overview of developing a webpack plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now want to return to the first error we encountered when bundling our app
    which was:'
  prefs: []
  type: TYPE_NORMAL
- en: ERROR in Unexpected value `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts`
    declared by the module `PlayerModule` in `/path/to/TNSStudio/app/modules/player/player.module.ts`.
    Please add a `@Pipe/@Directive/@Component` annotation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solution for this error did not exist at the time of writing this book, so
    we created the `nativescript-webpack-import-replace` ([https://github.com/NathanWalker/nativescript-webpack-import-replace](https://github.com/NathanWalker/nativescript-webpack-import-replace))
    plugin to solve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a webpack plugin in detail is out of the scope of this book, but
    we wanted to give you some highlights to the process in case you end up needing
    to create one to solve a particular case for your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We started by creating a separate project with a `package.json` file so we
    could install our webpack plugin like any other npm plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `nativescript` key actually helps categorize this plugin on the various
    NativeScript plugin listing sites.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then created `lib/ImportReplacePlugin.js` to represent the actual plugin
    class we would be able to import and use in our webpack config. We created this
    file inside a `lib` folder for good measure in case we need to add extra supporting
    files to aid our plugin for a nice clean separation of concerns with our plugin
    organization. In this file, we set up an export by defining a closure containing
    a constructor for our plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will take the target `platform` defined in our webpack config and pass
    it through as options along with a `files` collection, which will contain all
    the filenames of the imports we need to replace.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then want to wire into webpack''s `make` lifecycle hook to grab hold of
    the source files being processed in order to parse them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This grabs hold of all the AoT source files. Then we setup a loop to process
    them one by one and add processing methods for what we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'An interesting part to building webpack plugins (*and arguably the most challenging*)
    is working with **Abstract Syntax Trees** (**ASTs**) of your source code. A critical
    aspect of our plugin is getting the "source file" node from the AST as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This effectively weeds out any other nodes that are not source files since that
    is all our plugin needs to deal with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we create an `index.js` file in the root to simply export the plugin
    file for use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: With the aid of this webpack plugin, we are able to completely solve all the
    webpack bundling errors we encountered in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we prepared our app for distribution by adding webpack into
    our build chain to help ensure that we have the smallest JavaScript size and the
    optimal execution performance of our code. This also enabled Angular's AoT compilation
    on our app, which helps to provide an optimal performance of our code.
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we provided a cookbook of solutions to various webpack bundling
    errors that you might run into during the course of your app's development. In
    addition, we took a high-level look at developing a custom webpack plugin to help
    solve a particular error condition in our app to achieve a successful bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an optimal bundle of our app code, we are now ready to finish
    our distribution steps to finally deploy our app in the next chapter.
  prefs: []
  type: TYPE_NORMAL
