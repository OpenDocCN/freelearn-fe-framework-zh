- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating PrimeNG into Your Angular Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the process of integrating PrimeNG, a popular
    UI component library, into your Angular projects. PrimeNG provides a rich set
    of pre-built components that can enhance the functionality and aesthetics of your
    application. Whether you need to incorporate complex data tables, responsive layouts,
    or interactive charts, PrimeNG offers a wide range of components to meet your
    requirements. By utilizing PrimeNG, it will help to save time from building foundation
    components in a robust, reliable, and accessible way, so that you can focus on
    the application rather than building all the core components of typical UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: By following the step-by-step instructions and examples provided in this chapter,
    you will gain the knowledge and skills necessary to seamlessly integrate PrimeNG
    into your Angular projects, and create feature-rich and visually appealing applications
    with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding PrimeNG components to your Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring PrimeNG modules and dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with PrimeNG component APIs and directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing component styles and themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting common integration issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains various working code samples on how to integrate PrimeNG
    into Angular projects. You can find the related source code in the `chapter-04`
    folder of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-04](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-04).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding PrimeNG components to your Angular project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**PrimeNG** is a powerful UI component library for Angular that provides a
    wide range of pre-built components to enhance the functionality and visual appeal
    of your application. In this section, we will explore how to add PrimeNG and its
    dependencies to your Angular project, import the necessary styles, and utilize
    PrimeNG components in your templates.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing PrimeNG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting to integrate PrimeNG into your Angular project, make sure that
    you set up a fresh project to begin with. Now follow these steps to install PrimeNG
    in your Angular project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal or command prompt in your project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install PrimeNG and save it as a dependency in
    your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the installation process, you will see `primeng` in the `package.json`
    file in your root directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, we’re using PrimeNG version `17.0.0`. If you
    have a different version and your app doesn’t work correctly, you can try with
    `yarn add primeng@17.0.0` to install the correct version of the plugin for this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: The `primeng` package is all that you need to get started with integration.
    In the next section, we will add some styles and themes to your application.
  prefs: []
  type: TYPE_NORMAL
- en: Importing PrimeNG styles into your Angular application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Theme and Core styles are essential CSS files for the components. You can
    find the comprehensive selection of available themes in the `angular.json` or
    `src/styles.css` file. In this section, we will use the `lara-light-blue` theme
    as an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to add themes and styles to your `angular.json` file, go to the `styles`
    section of the file and add the styles like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides adding themes and styles to the `angular.json` file, you can also utilize
    `styles.scss` to import the styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, each theme has its own font family; it’s suggested to apply a
    font family to your application to achieve a unified look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`--font-family` is a CSS variable, also known as a CSS custom property, which
    are placeholders that hold values and can be used throughout a CSS stylesheet.
    You can learn more at [https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties).'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, for the `lara-light-blue` theme, the default font family is
    defined under the `theme.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Nx Workspace, instead of `angular.json`, use `project.json`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with PrimeNG icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Icons** play a crucial role in enhancing the visual appeal and usability
    of web applications, providing intuitive visual cues and helping users quickly
    identify and interact with various elements. In this section, we will explore
    how to work with icons in PrimeNG and leverage the vast collection of icons it
    offers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To utilize PrimeIcons, you need to install the `primeicons` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, the CSS file of the icon library needs to be imported in `styles.scss`
    of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For a full list of PrimeIcons, please check this website: [https://primeng.org/icons](https://primeng.org/icons).'
  prefs: []
  type: TYPE_NORMAL
- en: 'PrimeIcons offers special syntax: `pi pi-{icons}`, which can be utilized in
    your Angular components. You have the flexibility to substitute `{icons}` with
    an icon name from the provided link, such as `pi pi-user`, to indicate that it
    represents a user icon. In case you want to use Prime Icons as a standalone element,
    you can utilize the `i` or `span` element, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use the `pi-user` icon. You can replace it with any other
    icon name from the supported icon libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Adding PrimeNG methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two methods to add PrimeNG to your template: PrimeNG components and
    PrimeNG directives. To illustrate this, let’s use PrimeNG’s `p-button` element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `p-button` component is a self-contained UI element that can be customized
    and reused throughout your app. It comes with built-in functionality, such as
    event handling, and a variety of customization options, including icon support,
    label, and style classes. Here’s an example of how to use the `p-button` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In contrast, the `pButton` directive is used to add behavior to an existing
    HTML button element. It allows you to enhance the functionality of the button
    element by adding PrimeNG-specific features, such as styling and event handling.
    Here’s an example of how to use the `pButton` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we’re using the `pButton` directive to enhance an existing
    HTML button element with PrimeNG-specific features. We’re setting the `type` attribute
    to `"button"` and adding a `label` to the button.
  prefs: []
  type: TYPE_NORMAL
- en: It’s recommended to use the `p-button` component when you need a self-contained
    UI element that can be customized and reused throughout your app, and when you
    need to add a lot of built-in functionality to your button. For the `pButton`
    directive, you can use it to add behavior to existing HTML button elements such
    as `button`, `input`, or `tag`, and when you need to enhance the functionality
    of the button with PrimeNG-specific features.
  prefs: []
  type: TYPE_NORMAL
- en: Using PrimeNG components in your templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The section focuses on incorporating PrimeNG components seamlessly into your
    templates. We will learn how to leverage the extensive library of PrimeNG components
    effectively within your web applications. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using the `NgModule` approach, all you need to do is import the
    PrimeNG modules to `NgModule` decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The previous code shows that we imported `ButtonModule` into `AppModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the PrimeNG modules are imported, you can start using PrimeNG components
    in your Angular templates. Follow these steps to utilize PrimeNG components:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a component template file (`.html`) where you want to use PrimeNG components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the PrimeNG component selector in the template where you want the component
    to appear. For example, to add a button component, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the standalone component approach, you will import the PrimeNG component
    into the Angular component that you are working on:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a result, you will have a styled button on your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – PrimeNg button component](img/B18805_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – PrimeNg button component
  prefs: []
  type: TYPE_NORMAL
- en: Working with PrimeNG component APIs and directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a developer, you understand the importance of leveraging powerful and customizable
    libraries to streamline your development process. Here, we’ll see how to use PrimeNG
    APIs and directives to interact with components programmatically, customize their
    behavior, and harness their full potential.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each PrimeNG component will have its own APIs and configurations. Let’s consider
    the PrimeNG button component as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we’re using the `label` input to set the button label, the
    `icon` input to set the icon displayed on the button, the `iconPos` input to set
    the icon position to the right of the label, and the `disabled` input to disable
    the button based on the value of `isDisabled` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the result in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – PrimeNG button configuration](img/B18805_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – PrimeNG button configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some other configuration options you can use with `p-button`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`styleClass`: Sets the CSS class for the button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: Sets the type of button (e.g. `"button"`, `"``submit"`, `"reset"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tabIndex`: Sets the tab index for the button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loading`: Indicates the button is in the loading state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loadingIcon`: Sets the icon to display in the loading state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In case you want to trigger an event after clicking the button, you can utilize
    the `click` event emitter in order to trigger a function from your component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows a PrimeNG button with a click event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(click)="onClickEvent()"`: When the user clicks on the button, it will trigger
    the `onClickEvent()` function on the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[loading]="loading"`: Show the loading state of the button after being clicked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – PrimeNG button with click event](img/B18805_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – PrimeNG button with click event
  prefs: []
  type: TYPE_NORMAL
- en: After the button is clicked, the loading state is activated and shows a loading
    icon on the left of the button.
  prefs: []
  type: TYPE_NORMAL
- en: By following these steps, you can easily add PrimeNG components to your Angular
    project. In the next section, we will delve into some PrimeNG configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring PrimeNG modules and dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG provides a comprehensive set of configuration options that can be applied
    to its components. These options enable you to control various aspects of the
    component’s functionality and visual presentation. Let’s take a look at some commonly
    used configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Global configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PrimeNG offers a global configuration object that allows you to define default
    settings for all components in your application. For example, you can configure
    the default locale, animation duration, and other global options using the `PrimeNGConfig`
    object. The provided code snippets show the initialization and configuration of
    PrimeNG during the bootstrapping process.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, Let’s create the global configuration file for PrimeNG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This code defines the `primeNgProvider`, which is a provider that initializes
    and configures PrimeNG. It uses the `APP_INITIALIZER` token from `@angular/core`
    to ensure that the configuration is applied before the application starts.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`APP_INITIALIZER` is an Angular feature that allows you to run some initialization
    tasks before your application starts. By providing an array of functions or services
    to the `APP_INITIALIZER` token in the `providers` array of your application configuration,
    Angular ensures that these tasks are executed and completed before the application
    is fully loaded. You can learn more at [https://angular.io/api/core/APP_INITIALIZER](https://angular.io/api/core/APP_INITIALIZER).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `factory` function is the implementation of the provider. It receives the
    `PrimeNGConfig` object as a dependency and returns a function. When this function
    is executed during the application initialization, it configures various aspects
    of PrimeNG. In this example, it enables the ripple effect (`ripple: true`), which
    is a visual animation or graphical effect that occurs when the button is interacted
    with and sets the `z-index` values for different PrimeNG components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we can add the PrimeNG global config to the app configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This code is part of the Angular application’s bootstrap process. It provides
    the `primeNgProvider` as a provider, which is responsible for initializing and
    configuring PrimeNG.
  prefs: []
  type: TYPE_NORMAL
- en: By providing the `primeNgProvider` as a provider in the application’s bootstrap
    process, it ensures that PrimeNG is properly initialized and configured before
    the application starts, allowing components and features of PrimeNG to be used
    seamlessly throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: Angular animation configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animations play a crucial role in creating engaging and interactive user interfaces.
    In Angular, animations can be utilized to bring components to life and provide
    a smooth and visually appealing user experience. In this section, we will explore
    how to integrate and configure animations in your Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: To enable animations in your Angular application, you need to import the `provideAnimations`
    function from the `@angular/platform-browser/animations` package. This function
    provides the necessary functionality and tools to work with animations in Angular.
    It leverages the underlying animation capabilities of the browser to deliver seamless
    animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import `provideAnimations`, you need to include it in the `providers` array
    of your app configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In certain scenarios, you may prefer to disable animations globally in your
    application. This could be to optimize performance or accommodate specific user
    preferences. Angular provides the `provideNoopAnimations` function as an alternative
    to `provideAnimations` for disabling animations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `provideNoopAnimations` function essentially replaces the animation functionality
    with a no-operation implementation. This results in animations being disabled
    throughout your application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore further how to customize styles and themes.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing component styles and themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNg provides a wide range of components with default styles that are designed
    to be functional and visually appealing. However, to create a seamless integration
    with your application’s design, you may need to customize the appearance of PrimeNG
    components. In this section, we will explore various techniques for customizing
    component styles and themes in PrimeNG to achieve the desired look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding styles at the component level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say you want to change the background color and border radius of a `Button`
    component. Here’s an example of how you can override the default styles of the
    `Button` component using CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we’re targeting the `.p-button` class, which is the class
    applied to all `Button` components. We’re then using the `background-color` and
    `border-radius` properties to change the appearance of the `Button` component.
    Let’s take a look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Component custom button styles](img/B18805_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Component custom button styles
  prefs: []
  type: TYPE_NORMAL
- en: 'If you inspect the browser, you will see that the styling is being applied
    correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Component custom button style inspection](img/B18805_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Component custom button style inspection
  prefs: []
  type: TYPE_NORMAL
- en: You can see from the inspection the background color of the button has the color
    code `#696CFF`, which is the one that we set in the styles section.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding styles globally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we learned how to add custom styles at a component
    level. In this part, we will learn how to apply styling globally using **CSS preprocessors**.
    Before we begin, let’s quickly look into what CSS preprocessors are.
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS preprocessors are scripting languages that extend the default capabilities
    of **Cascading Style Sheets** (**CSS**). They enable developers to use variables,
    nested rules, mixins, functions, and more, which can make CSS more maintainable,
    themeable, and extendable:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variables**: These allow you to store values that you want to reuse throughout
    your style sheet. For example, you can define a variable for your primary color
    and use it in multiple places:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This styling will apply all the new background colors to all PrimeNG buttons.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Nested rules**: These let you nest CSS selectors inside other selectors,
    making your CSS more readable and maintainable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Mixins and functions**: These enable you to define reusable chunks of CSS.
    They can take parameters, allowing you to customize the output:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the mixin, there are three declarations, each representing a vendor-prefixed
    version of the box-shadow property. The vendor prefixes are *-webkit-* for WebKit-based
    browsers (e.g., Chrome and Safari), and *-moz-* for Mozilla-based browsers (e.g.,
    Firefox). The final declaration is the standard `box-shadow` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Wherever you want to apply a box shadow to your element, you can just include
    the `box-shadow` mixin. It will generate the following code for you:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Using a CSS preprocessor can greatly enhance your workflow, especially in large
    projects. However, there’s a learning curve, and you must set up your development
    environment to compile the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s take a look at an example of how you can apply global styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we’re using a CSS variable to override `font-family` from `lara-light-blue/theme.css`.
    After that, we add a Sass variable to define the primary color and text color
    values. Then we add the `box-shadow` property via the mixin.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re using these variables to style the `Button` component globally. Let’s
    check the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Global custom button styles](img/B18805_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Global custom button styles
  prefs: []
  type: TYPE_NORMAL
- en: After debugging the browser, you can see that except for the modified styling
    button at the component level, all other buttons in your applications are updated
    with new styling globally.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When customizing component styles or applying themes, be sure to test your changes
    thoroughly to ensure that they don’t adversely affect the functionality or usability
    of your application. Also, be aware that some components may have specific CSS
    classes or styles that you need to target in order to customize their appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the appearance of PrimeNG components is an important part of creating
    a visually appealing and cohesive web application. Whether you’re using CSS, CSS
    preprocessors, or PrimeNG’s built-in themes, there are a range of tools and customization
    options available to help you achieve your design goals. By taking the time to
    customize your application’s styles and themes, you can create an application
    that is both functional and aesthetically pleasing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore common integration issues that may arise
    when working with PrimeNG components and provide troubleshooting tips to overcome
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting common integration issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating PrimeNG into your Angular project can sometimes come with its own
    set of challenges. In this section, we will explore common issues that may arise
    during PrimeNG integration and provide troubleshooting techniques to help you
    overcome them. By understanding these challenges and having the necessary debugging
    skills, you can ensure a smooth integration process.
  prefs: []
  type: TYPE_NORMAL
- en: Conflict or compatibility issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One common issue when integrating PrimeNG is encountering conflicts or compatibility
    issues with other libraries or Angular versions. It’s essential to ensure that
    all dependencies, including Angular and PrimeNG, are compatible with each other.
    For instance, if you are using Angular 15.x and have installed PrimeNG 16.x, there
    may be conflicts when integrating PrimeNG components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is release cycle information from the PrimeNG official website:
    *“PrimeNG release cycle is aligned with Angular and every 6 months a new major
    PrimeNG version is released as open source that is compatible with the latest
    Angular core”*. You can check the current **Long Term Support** (**LTS**) details
    at [https://primeng.org/lts](https://primeng.org/lts).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of conflicts, you may need to investigate the specific conflicting
    versions and find workarounds or update the versions accordingly. You should pay
    attention to the `package.json` file to check the version of your dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, `primeng` and `angular` are using the same version `17.x`.
    Having different versions doesn’t mean that there will be conflicts in your Angular
    applications. In case you do get errors, please check versions from the official
    Angular and PrimeNG websites: [https://github.com/angular/angular/releases](https://github.com/angular/angular/releases)
    and [https://github.com/primefaces/primeng/releases](https://github.com/primefaces/primeng/releases).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you check the release version of Angular or PrimeNG that you want to
    install, use `npm` to update it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This command will update `primeng` to version `17.0.0`.
  prefs: []
  type: TYPE_NORMAL
- en: Missing or incorrect imports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another frequent issue is missing or incorrect imports of PrimeNG modules or
    components. When using PrimeNG components in your templates or code, it’s crucial
    to import the necessary modules correctly. If you forget to import a required
    module, the component may not work as expected or throw errors. Double-check your
    imports and make sure all required PrimeNG modules are imported into your Angular
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the following component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, you can see that we’re using the `pButton` directive
    approach, and there is no error from the VS Code or the compiler. However, the
    button will not show correctly since you haven’t imported `ButtonModule` from
    `primeng` into the `imports` array. Here is how you fix this issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Error: apps/chapter-04/src/app/components/button-configuration.component.ts:11:5
    - error NG8001: ''p-button'' is not a known element:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. If 'p-button' is an Angular component, then verify that it is included in
    the '@Component.imports' of this component.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. If 'p-button' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the
    '@Component.schemas' of this component to suppress this message.
  prefs: []
  type: TYPE_NORMAL
- en: 11       <p-button
  prefs: []
  type: TYPE_NORMAL
- en: ~~~~~~~~~
  prefs: []
  type: TYPE_NORMAL
- en: 12          label="Click me!"
  prefs: []
  type: TYPE_NORMAL
- en: ~~~~~~~~~~~~~~~~~~~~~~~
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 15          [disabled]="isDisabled"
  prefs: []
  type: TYPE_NORMAL
- en: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  prefs: []
  type: TYPE_NORMAL
- en: 16       />
  prefs: []
  type: TYPE_NORMAL
- en: ~~~~~~
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Part 2: UI Components and Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will dive deep into the world of PrimeNG’s UI components and
    explore the rich set of features they offer. You will learn how to leverage these
    components to build dynamic and interactive user interfaces for your Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this part, you will have a comprehensive understanding of most
    of PrimeNG’s UI components and be able to effectively utilize them to enhance
    your application’s functionality and user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18805_05.xhtml#_idTextAnchor095), *Introducing Input Components
    and Form Controls*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18805_06.xhtml#_idTextAnchor117), *Working with Table, List,
    and Card Components*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18805_07.xhtml#_idTextAnchor137), *Working with Tree, TreeTable,
    and Timeline Components*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18805_08.xhtml#_idTextAnchor160), *Working with Navigation and
    Layout Components*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
