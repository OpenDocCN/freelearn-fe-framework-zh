- en: Themes - Centralize the Look and Feel of Your App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题 - 中心化您的应用的外观和感觉
- en: 'Here''s what you''ll learn in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Understanding the palette
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解调色板
- en: Comparing light and dark themes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较浅色和深色主题
- en: Customizing typography
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义字体
- en: Nesting themes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套主题
- en: Understanding component theme settings
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解组件主题设置
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Material-UI applications all share a common look and feel—to an extent. This
    doesn't mean that your banking application is going to look and feel the same
    as my music library application just because we're both using the same library.
    The common aspect is that both apps follow Material Design principles. I'm not
    going to go into depth on Material Design here, because there are ample resources
    out there that do a much better job than I could ever hope to do. Instead, I want
    to focus on the fact that Material-UI applications can be themed with a high degree
    of flexibility, and without the need to sacrifice the principles of Material Design.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Material-UI 应用程序在某种程度上都共享一个共同的外观和感觉。这并不意味着您的银行应用程序会与我的音乐库应用程序看起来和感觉一样，仅仅因为我们都在使用相同的库。共同之处在于，两个应用程序都遵循
    Material Design 原则。在这里，我不会深入探讨 Material Design，因为已经有大量资源做得比我好得多。相反，我想强调的是，Material-UI
    应用程序可以以高度灵活的方式主题化，而无需牺牲 Material Design 的原则。
- en: Understanding the palette
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解调色板
- en: 'The first place most people start when building a new Material-UI theme is
    with the color palette. Color palettes can be very complex with a lot of moving
    parts: Material-UI themes are no exception, but Material-UI hides a lot of the
    complexity. Your focus is on the color intentions of the theme while Material-UI
    uses these color intentions to compute other colors where necessary. Taken straight
    from the Material-UI theme documentation, the intentions are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人在构建新的 Material-UI 主题时，首先考虑的是调色板。调色板可能非常复杂，包含许多可变部分：Material-UI 主题也不例外，但
    Material-UI 隐藏了很多复杂性。您需要关注主题的色彩意图，而 Material-UI 则使用这些色彩意图在必要时计算其他颜色。以下内容直接摘自 Material-UI
    主题文档，意图如下：
- en: Primary: Used to represent primary interface elements
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要：用于表示主要界面元素
- en: 'Secondary: Used to represent secondary interface elements'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二级：用于表示二级界面元素
- en: 'Error: Used to represent interface elements that the user should be made aware
    of'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误：用于表示用户应了解的界面元素
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s build a new theme that sets color intentions using the built-in color
    objects of Material-UI. To help tweak your theme, this example uses Hue and Shade
    Storybook controls:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个新的主题，使用 Material-UI 内置的颜色对象设置色彩意图。为了帮助调整您的主题，此示例使用了色调和阴影 Storybook 控件：
- en: '![](img/527ddd1a-9f26-42d7-a4f2-2226b9c58e96.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/527ddd1a-9f26-42d7-a4f2-2226b9c58e96.png)'
- en: 'The three color intentions are represented as tabs across the top. The PRIMARY
    intention is currently selected and it has a Hue selector and a Shade number range.
    Each intention has the same controls. The Hue selector is populated with the same
    colors available to `import` from Material-UI:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 三个色彩意图以标签形式显示在顶部。目前 PRIMARY 意图被选中，它有一个色调选择器和阴影数值范围。每个意图都有相同的控件。色调选择器中填充了可以从
    Material-UI `import` 的相同颜色：
- en: '![](img/22decf7e-fc90-4fa4-9367-4675f02a155e.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22decf7e-fc90-4fa4-9367-4675f02a155e.png)'
- en: 'Here''s the source that uses these Storybook controls to build a new theme
    and render some `Button` and `Typography` components:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用这些 Storybook 控件构建新主题并渲染一些 `Button` 和 `Typography` 组件的源代码：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what you''ll see when you first load the screen with the DEFAULT theme
    values selected:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次加载选择默认主题值的屏幕时，您将看到以下内容：
- en: '![](img/d38b9f3c-a82a-4669-90c0-ecaf6c41e45f.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d38b9f3c-a82a-4669-90c0-ecaf6c41e45f.png)'
- en: 'Now, let''s change the DEFAULT theme color intentions, starting with PRIMARY:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更改默认主题的色彩意图，从 PRIMARY 开始：
- en: '![](img/d1698a92-ca19-4128-ab0c-335b3b26cadd.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1698a92-ca19-4128-ab0c-335b3b26cadd.png)'
- en: 'The Primary Hue is now Cyan with a shade value of 300\. Next, we''ll change
    the SECONDARY intention:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 主要色调现在为青色，阴影值为 300。接下来，我们将更改二级意图：
- en: '![](img/135e854c-93e2-497d-9679-e3f28192c68d.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/135e854c-93e2-497d-9679-e3f28192c68d.png)'
- en: 'The Secondary Hue is now Teal with a shade value of 100\. Lastly, we''ll change
    the ERROR intention:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 二级色调现在为青绿色，阴影值为 100。最后，我们将更改错误意图：
- en: '![](img/bc682ae0-3090-4698-ac5d-1f48392f256c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc682ae0-3090-4698-ac5d-1f48392f256c.png)'
- en: 'The Error Hue is still Red for this theme, but slightly lighter with a shade
    value of 400\. Here''s what the end result looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个主题，错误色调仍然是红色，但稍微浅一些，阴影值为 400。以下是最终结果：
- en: '![](img/4673d3a3-7f56-4016-a4bb-50daec3fd194.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4673d3a3-7f56-4016-a4bb-50daec3fd194.png)'
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Material-UI has core `hues` that can be imported and can help you with building
    your theme:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI 有核心的`hues`可以导入，可以帮助你构建你的主题：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You don''t have to `import` every hue—this is done here because of the Storybook
    controls that dynamically change the color palette values. Each color value that
    is imported is an object indexed by the shade value, such as 500, for example.
    The values are colors expressed in hex, such as `#fffffff`, for example. When
    using a color expressed in hex, you have to pass it to the `main` property when
    creating your `theme`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必`import`每一个色调——这里这样做是因为Storybook控件可以动态更改调色板值。每个导入的颜色值都是一个按色调值（例如500）索引的对象。例如，这些值是以十六进制表示的颜色，例如`#fffffff`。当使用以十六进制表示的颜色时，你必须在创建`theme`时将其传递给`main`属性：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The properties `primaryHue`, `primaryShade`, and so on, are the values set by
    the Storybook controls. The `MuiThemeProvider` component is how the `theme` is
    actually applied to your Material-UI components. It doesn't have to be the root
    component of your app, but any Material-UI components that depend on theme styles
    (`Button`, `Typography`, and so on) need to be children of this component.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`primaryHue`、`primaryShade`等是由Storybook控件设置的值。`MuiThemeProvider`组件是将`theme`实际应用于你的Material-UI组件的方式。它不必是应用程序的根组件，但任何依赖于主题样式的Material-UI组件（如`Button`、`Typography`等）都需要是这个组件的子组件。
- en: The `createMuiTheme()` function is called every time the `main` application
    component in this example is rendered. In practice, this shouldn't happen. Instead,
    the theme is created once and passed to the `MuiThemeProvider` component. The
    reason this is happening here, is so that the theme updates when you change the
    color values using the Storybook controls.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每当在这个例子中渲染`main`应用程序组件时，都会调用`createMuiTheme()`函数。实际上，这种情况不应该发生。相反，主题应该只创建一次，然后传递给`MuiThemeProvider`组件。这里之所以这样做，是为了当使用Storybook控件更改颜色值时，主题能够更新。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI `theme` 文档：[https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)
- en: 'Material-UI `color` documentation: [https://material-ui.com/style/color/](https://material-ui.com/style/color/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI `color` 文档：[https://material-ui.com/style/color/](https://material-ui.com/style/color/)
- en: Comparing light and dark themes
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较亮色和暗色主题
- en: The color palette of a theme takes a `type` property value that can be either
    light or dark. By default, themes are light. Changing the theme to dark does not
    change the other palette values of your theme (`primary`, `secondary`, `error`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 主题的颜色调色板接受一个`type`属性值，可以是亮色或暗色。默认情况下，主题是亮色。将主题更改为暗色不会改变你的主题的其他调色板值（如`primary`、`secondary`、`error`）。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s create a dark theme and a light theme. Both themes will use the same
    color values for the intentions (`primary`, `secondary`, `error`). The example
    will use a Storybook control to change themes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个暗色主题和一个亮色主题。这两个主题都将使用相同的颜色值（如`primary`、`secondary`、`error`）来表示意图。示例将使用Storybook控件来更改主题：
- en: '![](img/da95173a-cf63-4d63-b7a1-74319fa35dc7.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da95173a-cf63-4d63-b7a1-74319fa35dc7.png)'
- en: 'Here''s the source that uses this value to choose between a `light` and `dark`
    theme and apply it to the Material-UI components:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用此值在`light`和`dark`主题之间进行选择并将其应用于Material-UI组件的源代码：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here''s the dialog that you''ll see when the screen first loads:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，你会看到以下对话框：
- en: '![](img/65f4ed52-17e7-4f33-968f-6ca6778dee06.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65f4ed52-17e7-4f33-968f-6ca6778dee06.png)'
- en: 'Here''s the same dialog with the theme type changed to dark:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是主题类型更改为暗色时的相同对话框：
- en: '![](img/a4efe99f-c01c-4aaf-b9e3-823cc701091c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4efe99f-c01c-4aaf-b9e3-823cc701091c.png)'
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When the `palette.type` theme value changes from `light` to `dark`, the following
    palette values change:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当`palette.type`主题值从`light`变为`dark`时，以下调色板值会发生变化：
- en: '`palette.text`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`palette.text`'
- en: '`palette.divider`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`palette.divider`'
- en: '`palette.background`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`palette.background`'
- en: '`palette.action`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`palette.action`'
- en: 'Let''s take a look at the two themes used in this example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个例子中使用的两个主题：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These two themes are the same except for the `palette.type` value. Whenever
    you change this value, new color values are computed for the theme. For example,
    the new text color that you see in the dialog isn't static—it's a color that's
    computed by Material-UI in order to provide the optimal contrast between the text
    color and the background color.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个主题除了 `palette.type` 值相同之外，其他都一样。每次你更改这个值时，都会为该主题计算新的颜色值。例如，你在对话框中看到的新的文本颜色不是静态的——这是一个由
    Material-UI 计算的颜色，以便在文本颜色和背景颜色之间提供最佳对比度。
- en: See also
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI `主题` 文档：[https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)
- en: Customizing typography
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义字体
- en: The preferred `typeface` for Material-UI themes is **Roboto**. This is by no
    means the only option, and, indeed, you can install new typefaces and use them
    in your custom Material-UI theme.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI 主题的首选 `字体` 是 **Roboto**。这绝对不是唯一的选择，实际上，你可以安装新的字体并在自定义 Material-UI
    主题中使用它们。
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s install a couple of new `typeface` packages so that they''re available
    for use in your application:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装几个新的 `字体` 包，以便它们可用于你的应用程序：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, you can add a Storybook control for the example that allows you to switch
    themes, and, as a result, switch fonts:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以为示例添加一个 Storybook 控制器，允许你切换主题，从而切换字体：
- en: '![](img/98f2724a-ca11-414e-bf93-b878734c1cdd.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98f2724a-ca11-414e-bf93-b878734c1cdd.png)'
- en: 'Here''s what the `Dialog` component looks like when you first load the screen:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次加载屏幕时，`Dialog` 组件看起来是这样的：
- en: '![](img/638d424a-aeeb-4af3-bb77-39a3c36a000a.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/638d424a-aeeb-4af3-bb77-39a3c36a000a.png)'
- en: 'Here''s what the `Dialog` component looks like when you change the font type
    to Exo:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将字体类型更改为 Exo 时，`Dialog` 组件看起来是这样的：
- en: '![](img/1b814caa-f092-4af1-83b3-7d440db6970b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b814caa-f092-4af1-83b3-7d440db6970b.png)'
- en: 'Lastly, here''s what the `Dialog` component looks like when you change the
    font type to Ubuntu:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当你将字体类型更改为 Ubuntu 时，`Dialog` 组件看起来是这样的：
- en: '![](img/ab64a07f-f22d-4fe6-af18-6b182e9fce45.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab64a07f-f22d-4fe6-af18-6b182e9fce45.png)'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The two typefaces that are used in this example are imported:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中使用的两种字体已导入：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In practice, you'll only `import` the font that your active theme uses, to reduce
    the size of your build. The `roboto` font that's used all throughout the examples
    in this book is imported by the Storybook `index` file, since this font is the
    default theme font and used in every example in this book.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，你只需 `导入` 你活动主题使用的字体，以减少构建的大小。本书中所有示例中使用的 `roboto` 字体是由 Storybook 的 `index`
    文件导入的，因为这是默认主题字体，并在本书的每个示例中使用。
- en: 'Now that you''ve imported the typefaces, you''ve made the font family names
    available to the theme:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经导入了字体，你已使字体家族名称可用于主题：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that, in the `exo` and `ubuntu` themes, `roboto` is still used as part
    of the font family, since it's the preferred font for Material-UI; it makes a
    good fallback.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 `exo` 和 `ubuntu` 主题中，`roboto` 仍然作为字体家族的一部分使用，因为它是 Material-UI 的首选字体；它是一个很好的后备选项。
- en: See also
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI `主题` 文档：[https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)
- en: Nesting themes
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套主题
- en: By nesting `MuiThemeProvider` components, you can compose multiple themes that
    handle different aspects of a theme into a single theme that's suitable for use
    in your application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过嵌套 `MuiThemeProvider` 组件，你可以将处理主题不同方面的多个主题组合成一个适合在应用程序中使用的单一主题。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you have a theme that sets the color palette and another theme
    that changes the border radius. You can merge both themes by nesting the `MuiThemeProvider`
    components. Here''s an example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个设置颜色调板的主题和另一个改变边框半径的主题。你可以通过嵌套 `MuiThemeProvider` 组件来合并这两个主题。以下是一个例子：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s what you''ll see when the screen loads:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕加载时，你会看到以下内容：
- en: '![](img/6354e717-fc52-4dc7-ad31-480485efcfb4.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6354e717-fc52-4dc7-ad31-480485efcfb4.png)'
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `Blue` theme applies the color palette `theme` settings, while the `Rounded`
    theme changes the `borderRadius` settings. Both themes are applied to the `Dialog`
    component—you can see the blue primary button, and the round corners are even
    more round. Let''s take a closer look at the `Rounded` theme:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blue`主题应用颜色调色板`theme`设置，而`Rounded`主题更改`borderRadius`设置。这两个主题都应用于`Dialog`组件——你可以看到蓝色的主要按钮，而且圆角更加圆润。让我们更仔细地看看`Rounded`主题：'
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Instead of being an object, `Rounded` is a function that returns a `theme` object.
    When you pass a function to the `theme` property of `MuiThemeProvider`, a `theme`
    argument is passed. This is the outer `theme`, or, in this example, the `Blue`
    theme. The `theme` is extended by applying the `spread` operator to the `theme`
    argument, and then passing additional `theme` values to `createMuiTheme()`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rounded`不是一个对象，而是一个返回`theme`对象的函数。当你将函数传递给`MuiThemeProvider`的`theme`属性时，会传递一个`theme`参数。这是外部`theme`，或者在这个例子中，是`Blue`主题。通过将`spread`运算符应用于`theme`参数并传递额外的`theme`值到`createMuiTheme()`，来扩展`theme`。'
- en: See also
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Material-UI `theme` documentation: [https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI `theme`文档：[https://material-ui.com/customization/themes/](https://material-ui.com/customization/themes/)
- en: Understanding component theme settings
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解组件主题设置
- en: '**Themes** can override styles that are specific to component types, such as
    buttons or drawers. This is useful when you need to apply a style change to every
    instance of the component in the app. In other words, the style is part of the
    overall theme, but it applies to just one type of component instead of the color
    palette for example, which applies to almost every Material-UI component.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**主题**可以覆盖特定于组件类型的样式，例如按钮或抽屉。当你需要将样式更改应用到应用中组件的每个实例时，这非常有用。换句话说，样式是整体主题的一部分，但它只应用于一种类型的组件，而不是例如颜色调色板，它几乎适用于所有Material-UI组件。'
- en: How to do it
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'Let''s say that you want the title and the actions of `Dialog` components centered.
    Since you want the same style applied for every `Dialog` component in your app,
    the `theme` is the right place to override this setting. Here''s how to do it:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要`Dialog`组件的标题和操作居中。由于你想要在应用中的每个`Dialog`组件上应用相同的样式，因此`theme`是覆盖此设置的合适位置。下面是如何操作的：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s what the custom dialog looks like:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是自定义对话框的外观：
- en: '![](img/9d3790cc-f409-4c12-ad45-ddb69c43067b.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d3790cc-f409-4c12-ad45-ddb69c43067b.png)'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s take a closer look at the `overrides` section of the theme:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看主题的`overrides`部分：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `MuiDialogTitle` key corresponds to the `DialogTitle` component, while the
    `MuiDialogActions` key corresponds to the `DialogActions` component. The `root`
    key used in both objects is the name of the rule. In more complex components,
    you can use these keys to target specific parts of the component. The API documentation
    for each component spells out each of these style rule names that you can target.
    Then, it's a matter of overriding or providing new styles. The `textAlign` property
    isn't set by default on the `DialogTitle` component, so you're adding it. The
    `justifyContent` is set to the right of the `DialogActions` component, which means
    that you're overriding an existing value.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`MuiDialogTitle`键对应于`DialogTitle`组件，而`MuiDialogActions`键对应于`DialogActions`组件。两个对象中使用的`root`键是规则的名称。在更复杂的组件中，你可以使用这些键来定位组件的特定部分。每个组件的API文档详细说明了你可以定位的每个样式规则名称。然后，就是覆盖或提供新的样式的问题。`textAlign`属性默认不在`DialogTitle`组件上设置，所以你添加了它。`justifyContent`设置为`DialogActions`组件的右侧，这意味着你正在覆盖一个现有的值。'
- en: See also
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Theme override documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题覆盖文档：[https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/)
