- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rules of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we learned about using various Hooks that have been
    developed by the React community, as well as where to find more of them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about everything that there is to know
    and watch out for when using Hooks. We are also going to learn what we need to
    know to start developing our own Hooks. Hooks have certain limitations regarding
    the places and the order that they are defined in. Violating the rules of Hooks
    can cause bugs or unexpected behavior, so we need to make sure that we learn and
    enforce the rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order of Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Names of Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforcing the rules of Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hooks can only be used in:'
  prefs: []
  type: TYPE_NORMAL
- en: React function components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Hooks (we are going to learn about creating custom Hooks in the next
    chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hooks *cannot* be used:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside conditions or loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a conditional `return` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In class components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside functions passed to Memo, Reducer or Effect Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside `try`/`catch`/`finally` blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some places, like the React docs, using a Hook is sometimes called *calling*
    the Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Hooks are normal JavaScript functions, except that React relies on them being
    invoked from inside a function component. Of course, custom Hooks that use other
    Hooks can be *defined* outside of React function components, but when *using*
    those custom Hooks, we always need to make sure that we call them inside a React
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to learn about the rules regarding the order of Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Order of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Only use Hooks at the *top level (not nested), ideally at the beginning* of
    function components or custom Hooks, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Do not* use Hooks inside conditions, loops, or nested functions—doing so changes
    the order of Hooks, which causes bugs. We have already learned that changing the
    order of Hooks causes the state to get mixed up between multiple Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap, in [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048)*, Using the State
    Hook*, in Example 2, we learned that we cannot do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We rendered a checkbox and two input fields for the first name and last name,
    and then we entered something in the last name field, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Revisiting the example from Chapter 2, Using the State Hook](img/B31327_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Revisiting the example from [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048),
    Using the State Hook
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, the order of Hooks looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enableFirstName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lastName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we clicked on the checkbox to enable the first name field. Doing so changed
    the order of Hooks, because now our Hook definitions look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enableFirstName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`firstName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lastName`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since React solely relies on the order of Hooks to manage their state, the
    `firstName` field is now the second Hook, so it gets the state from the `lastName`
    field, as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Problem of changing the order of Hooks from Chapter 2, Using
    the State Hook](img/B31327_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Problem of changing the order of Hooks from [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048),
    Using the State Hook
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the real `useState` Hook from React in Example 2 from [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048)*,
    Using the State Hook*, we can see that React automatically detects when the order
    of Hooks has changed, and it will log a warning, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – React printing a warning when detecting that the order of Hooks
    has changed](img/B31327_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – React printing a warning when detecting that the order of Hooks
    has changed
  prefs: []
  type: TYPE_NORMAL
- en: 'When running React in development mode, it will additionally throw an error
    and crash the application when this happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – React throwing an error in development mode](img/B31327_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – React throwing an error in development mode
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, changing the order of Hooks or conditionally enabling Hooks is
    not possible, as React internally uses the order of Hooks to keep track of which
    data belongs to which Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, we always defined the Hook, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we conditionally rendered the name instead of conditionally defining
    the Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The fixed version can be seen in Example 3 from [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048),
    *Using the State Hook*.
  prefs: []
  type: TYPE_NORMAL
- en: After learning about the order of Hooks, let’s move on to the naming convention
    for Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Names of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to naming Hooks, there is a convention that Hook functions should
    always be prefixed with `use`, followed by the Hook name starting with a capital
    letter. For example: `useState`, `useEffect`, and `useQuery`. This is important
    because, otherwise, we would not know which functions are Hooks, and which are
    not. Especially when automatically enforcing the rules of Hooks, we need to be
    able to know which functions are Hooks, so that we can make sure they are not
    being called conditionally or in loops.'
  prefs: []
  type: TYPE_NORMAL
- en: It is best practice to name Hooks in such a way that they semantically make
    sense. For example, if you want to create a custom Hook for an input field, you
    would call it `useInputField`. This ensures that when using the Hook it is immediately
    clear what that Hook will be useful for.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, naming conventions make our lives a lot easier: Knowing the
    difference between normal functions and Hooks makes it very easy to automatically
    enforce the rules of Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to learn how the rules of Hooks are automatically
    enforced by ESLint.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcing the rules of Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we stick to the convention of prefixing Hook functions with `use`, we can
    automatically enforce the other two rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Only call Hooks from React function components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only call Hooks at the top level (not inside loops, conditions, or nested functions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to enforce the rules automatically, React provides an ESLint plugin
    called `eslint-plugin-react-hooks`, which will automatically detect when Hooks
    are used, and will ensure that the rules are not broken. ESLint is a linter, which
    is a tool that analyzes source code and finds problems such as stylistic errors,
    potential bugs, and programming errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, Vite has already set up ESLint with the relevant React plugins
    for us. You may remember that in [*Chapter 2*](Chapter_02.xhtml#_idTextAnchor048)*,
    Using the State Hook*, we had to specifically disable the linter when we added
    a conditional Hook, by adding the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we removed this line, we would get the following linter error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – ESLint showing an error when violating the rules of Hooks](img/B31327_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – ESLint showing an error when violating the rules of Hooks
  prefs: []
  type: TYPE_NORMAL
- en: So, this whole time that we have been using Hooks, the linter was already making
    sure that we do not use them incorrectly! To recap how we set up ESLint, please
    refer back to [*Chapter 1*](Chapter_01.xhtml#_idTextAnchor016)*, Introducing React
    and React Hooks*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned that we should only call Hooks from React
    function components and that we need to ensure that the order of Hooks stays the
    same. Additionally, we learned about the naming convention of Hooks, and that
    they should always start with the `use` prefix. Then, we learned how ESLint can
    help us by enforcing the rules of Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing about the rules of Hooks, and enforcing them, is very important in order
    to avoid bugs and unexpected behavior. These rules will be especially important
    when creating our own Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good grasp of how Hooks work, and the rules and conventions,
    in the next chapter, we are going to learn how to create our own Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Where can Hooks be called?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we use Hooks in React class components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we need to watch out for regarding the order of Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can Hooks be called inside conditions, loops, or nested functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the naming convention for Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are the rules of Hooks automatically enforced?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules of Hooks in the official React documentation: [https://react.dev/reference/rules/rules-of-hooks](https://react.dev/reference/rules/rules-of-hooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/wnXT0](Chapter_11.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_%283%29.png)'
  prefs: []
  type: TYPE_IMG
