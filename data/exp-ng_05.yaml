- en: Implementing Angular Routing and Navigation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Angular路由和导航
- en: Application navigation is one of the core functionalities for any website or
    application. Along with defining the routes or path, navigation helps users to
    reach the application pages, explore functionalities, and is also very useful
    for SEO purposes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序导航是任何网站或应用程序的核心功能之一。除了定义路由或路径之外，导航还帮助用户到达应用程序页面，探索功能，并且对于SEO目的也非常有用。
- en: In this chapter, you will learn all about the Angular routing and navigation.
    Here's a detailed list of functionalities we will learn and implement in routing
    and navigation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关Angular路由和导航的所有内容。以下是我们将在路由和导航中学习和实现的功能的详细列表。
- en: 'You will learn the following aspects of routing and navigation:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习以下路由和导航方面：
- en: Importing and configuring the router
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入和配置路由器
- en: Enabling the Router Outlet, `routerLink`, `routerLinkActive`, and `base href`
    in the view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中启用路由出口、`routerLink`、`routerLinkActive`和`base href`
- en: Custom component routes and child routes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义组件路由和子路由
- en: Custom component routes with inner child routes--same page loading
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有内部子路由的自定义组件路由--同一页面加载
- en: Demo application routing and navigation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示应用程序的路由和导航
- en: 'At the end of the chapter, we will able to do the following things:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将能够做到以下事情：
- en: Create `app.routes` for the application and set up the required modules
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序创建`app.routes`并设置所需的模块
- en: Implement and enable `RouterModule.forRoot`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现并启用`RouterModule.forRoot`
- en: Define the Router Outlet and the `routerLink` directive for binding the route
    path
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义路由出口和`routerLink`指令以绑定路由路径
- en: Enable `RouterLinkActivated` to find the current active state
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用`RouterLinkActivated`以查找当前活动状态
- en: Understand how the Route State works
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解路由状态的工作原理
- en: Understand and implement Route Lifecycle Hooks
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解并实现路由生命周期钩子
- en: Create custom component routes and child routes
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义组件路由和子路由
- en: Implement location strategy for our web applications
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的Web应用程序实现位置策略
- en: Create a sample application routes and navigation
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个示例应用程序路由和导航
- en: 'First things first, take a look at the demo application routing and navigation
    we will be developing as part of this chapter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下我们将在本章开发的演示应用程序的路由和导航：
- en: '![](assets/d473f165-7a2c-437b-942c-9fbcf2978fa0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d473f165-7a2c-437b-942c-9fbcf2978fa0.png)'
- en: As part of the demo application, we will developing routes for About Us, Services,
    and Products components.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为演示应用程序的一部分，我们将为“关于我们”、“服务”和“产品”组件开发路由。
- en: Services components will have inner child routes. Products component will make
    use of `ActivatedRoute` for getting route `params`. We will also implement navigation
    using the JavaScript event `onclick`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务组件将具有内部子路由。产品组件将使用`ActivatedRoute`来获取路由`params`。我们还将使用JavaScript事件`onclick`来实现导航。
- en: Importing and configuring the router
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和配置路由器
- en: In order to define and implement the navigation strategy, we will make use of
    router and `RouterModule`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义和实现导航策略，我们将使用路由器和`RouterModule`。
- en: 'We need to update our `app.module.ts` file to do the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新我们的`app.module.ts`文件以执行以下操作：
- en: Import `RouterModule` and routes from Angular router module
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Angular路由器模块导入`RouterModule`和路由
- en: Import the application components
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入应用程序组件
- en: Define the routes with path and component details
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义具有路径和组件详细信息的路由
- en: Import `RouterModule.forRoot` (`appRoutes`)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入`RouterModule.forRoot`（`appRoutes`）
- en: 'Each route definition can have the following keys:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个路由定义可以具有以下键：
- en: '`path`: The URL we want to display in the browser address bar.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`：我们希望在浏览器地址栏中显示的URL。'
- en: '`component`: Corresponding component that will hold the view and application
    logic.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component`：将保存视图和应用程序逻辑的相应组件。'
- en: '`redirectTo` (optional): This indicates the URL we want the user to get redirected
    from this path.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redirectTo`（可选）：这表示我们希望用户从此路径重定向的URL。'
- en: '`pathMatch` (optional): A redirect route requires `pathMatch`--it tells the
    router how to match a URL to the path of a route. `pathMatch` can take either
    value as `full` or `prefix`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathMatch`（可选）：重定向路由需要`pathMatch`--它告诉路由器如何将URL与路由的路径匹配。`pathMatch`可以取`full`或`prefix`的值。'
- en: 'We will now import and configure the router in our `NgModule`. Take a look
    at the updated `app.module.ts` file with complete implementation of the router:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在我们的`NgModule`中导入和配置路由器。看一下更新的`app.module.ts`文件，其中包含了路由器的完整实现：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s analyze the preceding code snippet:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析上述代码片段：
- en: We are importing `Routes` and `routerModule` from `@angular/router`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`@angular/router`导入`Routes`和`RouterModule`。
- en: We are importing the required modules `NgModule`, `BrowserModule`, and `FormsModule`
    from the respective Angular libraries.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从各自的Angular库中导入所需的模块`NgModule`，`BrowserModule`和`FormsModule`。
- en: We are importing custom defined components--`About`, `Services`, and `Products`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在导入自定义定义的组件--`About`，`Services`和`Products`。
- en: We are defining a const `appRoutes` in which we are specifying paths for our
    components.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`appRoutes`中定义了一个常量，其中我们为我们的组件指定了路径。
- en: We are creating our routes through `appRoutes` and defining custom path for
    various URL router links by passing various parameters.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过`appRoutes`创建我们的路由，并通过传递各种参数为各种URL路由链接定义自定义路径。
- en: Now that we have learned how to import and configure our `NgModule` for implementing
    routes, in next section we will learn about the building blocks of router.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何导入和配置我们的`NgModule`来实现路由，在下一节中我们将学习路由器的构建模块。
- en: Building blocks of router
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由器的构建模块
- en: In this section, you will learn the important building blocks of the router.
    The important building blocks are `base href`, `Router Outlet`, `routerLink`,
    and `routerLinkActive`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习路由器的重要构建模块。重要的构建模块包括`base href`，`Router Outlet`，`routerLink`和`routerLinkActive`。
- en: 'Let''s now analyze each of the building blocks of the router library:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析路由器库的每个构建模块：
- en: '`base href`: We must set the `base` directive in the `index.html` page. *This
    is a mandatory step.* Without the `base` tag, the browser may not be able to load
    resources (images, CSS, and scripts) when *deep linking* into the app.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base href`：我们必须在`index.html`页面中设置`base`指令。*这是一个强制性步骤。*没有`base`标签，浏览器可能无法在*深度链接*到应用程序时加载资源（图像、CSS和脚本）。'
- en: 'In our application, we need to define the `base href` inside the `<head>` tag
    in our `index.html` file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们需要在`index.html`文件的`<head>`标签中定义`base href`：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Defining the** `router-outlet`: The `router-outlet` directive is the placeholder
    for containing the loaded data of the view. Inside the `router-outlet` directive,
    the component views will be loaded and displayed. Place the directive inside the
    template in the `app.component.html` to render the data:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义** `router-outlet`：`router-outlet`指令是包含视图加载数据的占位符。在`router-outlet`指令内，组件视图将被加载和显示。将该指令放在`app.component.html`模板中以呈现数据：'
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Using multiple** `router-outlet`: In certain cases, we will want to load
    data to different view containers instead of our `router-outlet`. We can easily
    add multiple Router Outlets to a page and assign them names so that we can render
    respective data inside them:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用多个** `router-outlet`：在某些情况下，我们希望将数据加载到不同的视图容器而不是我们的`router-outlet`中。我们可以轻松地向页面添加多个Router
    Outlets并为它们分配名称，以便我们可以在其中呈现相应的数据：'
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To load the data of the view inside the named `router-outlet`, we define the
    key while defining the route:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载视图数据到命名的`router-outlet`中，我们在定义路由时定义键：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Creating** `RouterLink`: This indicates the URL or the link address that
    could arrive directly from the browser address bar. Bind and associate a link
    path with the anchor tag: for example, `/about` or `/products`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建** `RouterLink`：这表示URL或链接地址可以直接从浏览器地址栏中到达。绑定并关联一个链接路径与锚点标签：例如，`/about`或`/products`。'
- en: 'The general syntax for binding and associating an anchor tag is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定和关联锚点标签的一般语法如下：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`RouterLinkActive` **for active state links**: `routerLinkActive` is used to
    highlight the current active link. Using `routerLinkActive`, we can easily highlight
    the link that is currently active to better suit our applications look and feel:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RouterLinkActive` **用于活动状态链接**：`routerLinkActive`用于突出显示当前活动链接。使用`routerLinkActive`，我们可以轻松地突出显示当前活动的链接，以更好地适应我们应用程序的外观和感觉：'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the style sheet, add our custom style class, `active-state`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在样式表中，添加我们的自定义样式类`active-state`。
- en: '**Building dynamic** `routerLink`: We can pass dynamic values or parameters
    by binding them with the `routerLink` directive to pass custom data.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建动态** `routerLink`：我们可以通过将它们与`routerLink`指令绑定来传递动态值或参数以传递自定义数据。'
- en: 'Generally, in most applications, we use a unique identifier for categorizing
    data--for example, `http://hostname/product/10` will be written as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在大多数应用程序中，我们使用唯一标识符对数据进行分类--例如，`http://hostname/product/10`将被写成如下形式：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The same preceding code dynamically can be rendered in our template view:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的前面的代码可以在我们的模板视图中动态呈现：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Passing array and datasets with** `routerLink` **directive**: We can pass
    data arrays along with the `routerLink`:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用** `routerLink` **指令传递数组和数据集**：我们可以通过`routerLink`传递数据数组。'
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: About router LocationStrategy
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于路由器LocationStrategy
- en: We need to define the URL behavior of the application. Based on application
    preferences, we can customize how the URL should be rendered.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义应用程序的URL行为。根据应用程序的偏好，我们可以自定义URL应该如何呈现。
- en: Using `LocationStrategy`, we can define how we want our application routing
    system to behave.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`LocationStrategy`，我们可以定义我们希望应用程序路由系统如何行为。
- en: 'Angular, through `LocationStrategy`, provides two types of routing strategies
    we can implement in our application. Let''s understand the different route strategy
    options we can use in our Angular applications:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Angular通过`LocationStrategy`提供了两种我们可以在应用程序中实现的路由策略。让我们了解一下我们可以在Angular应用程序中使用的不同路由策略选项：
- en: '`PathLocationStrategy`: This is the default HTML style routing mechanism.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PathLocationStrategy`：这是默认的HTML样式路由机制。'
- en: Applying `PathLocationStrategy` is the common routing strategy which involves
    making request/calls to the server side on every change detected. Implementing
    this strategy will allow us to create clean URLs and also bookmark the URLs easily.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 应用`PathLocationStrategy`是常见的路由策略，它涉及在每次检测到更改时向服务器端发出请求/调用。实现此策略将允许我们创建清晰的URL，并且也可以轻松地标记URL。
- en: 'An example of a route using `PathLocationStrategy` is given as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`PathLocationStrategy`的路由示例如下：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`HashLocationStrategy`*:* This is the hash URL style. In most modern web applications,
    we see hash URLs being used. This has a major advantage.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HashLocationStrategy`*:* 这是哈希URL样式。在大多数现代Web应用程序中，我们看到哈希URL被使用。这有一个重大优势。'
- en: 'The client doesn''t make the server calls or requests when the information
    after `#` changes; hence there are fewer server calls:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当`#`后的信息发生变化时，客户端不会发出服务器调用或请求；因此服务器调用较少：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Defining and setting the `LocationStrategy` in our application: In the `app.module.ts`
    file under `providers`, we need to pass `LocationStrategy` and tell the router
    to `useClass` as `HashLocationStrategy`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的应用程序中定义和设置`LocationStrategy`：在`app.module.ts`文件的`providers`下，我们需要传递`LocationStrategy`并告诉路由器使用`HashLocationStrategy`作为`useClass`。
- en: 'In `app.module.ts`, import and use `LocationStrategy` and mention that we want
    to use `HashLocationStategy`, as shown in the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.module.ts`中，导入并使用`LocationStrategy`并说明我们要使用`HashLocationStategy`，如下所示：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we have injected `LocationStrategy` in our providers
    and we are explicitly mentioning Angular to use `HashLocationStrategy`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们在我们的提供者中注入了`LocationStrategy`，并明确告知Angular使用`HashLocationStrategy`。
- en: By default, the Angular router implements `PathLocationStrategy`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Angular路由器实现`PathLocationStrategy`。
- en: Handling the error state - wildcard route
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误状态-通配符路由
- en: 'We need to set up the error messages for page not found or 404 pages. We can
    use the `ErrorPageNotFoundComponent` component to display the page not found or
    error messages for paths that are unknown to the router:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为找不到页面或404页面设置错误消息。我们可以使用`ErrorPageNotFoundComponent`组件来显示找不到页面或路由器未知路径的错误消息：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At this stage, with all the information about how to use the router with various
    aspects, let''s add all of them to our `app.component.ts` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，有关如何使用路由器的各个方面的所有信息，让我们将它们全部添加到我们的`app.component.ts`文件中：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s analyze the preceding code and break it down into key functionalities:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析上述代码并将其分解为关键功能：
- en: We defined the `routerLink` attribute to enable the navigation when a user clicks
    on the anchor links
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了`routerLink`属性，以便在用户点击锚链接时启用导航
- en: We implemented the `routerLinkActive` attribute to highlight the current/active
    link, that is, the link that the user has clicked
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们实现了`routerLinkActive`属性以突出显示当前/活动链接，也就是用户点击的链接
- en: We defined a placeholder for `<router-outlet>`, which will hold the data from
    different views--depending on which link was clicked
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为`<router-outlet>`定义了一个占位符，它将保存来自不同视图的数据--具体取决于点击了哪个链接
- en: 'Now, when we launch the application, we will see the resulting output, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们启动应用程序时，我们将看到以下结果输出：
- en: '![](assets/529ba97c-a27a-4980-9d5a-8a0f89e6ef56.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/529ba97c-a27a-4980-9d5a-8a0f89e6ef56.png)'
- en: Awesome! So far, so good. Let's add the Router Guards functionality now.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！到目前为止，一切都很好。现在让我们添加路由守卫功能。
- en: In the next section, we will learn how to integrate Route Guards to implement
    controlled navigation between various components.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何集成路由守卫以在各个组件之间实现受控导航。
- en: Route Guards
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由守卫
- en: Route Guards let you control various stages of a route navigation. While navigating
    from one component to another, we need to make sure that the data that will be
    displayed is authorized for the user, and if not, cancel the navigation.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 路由守卫让您控制路由导航的各个阶段。在从一个组件导航到另一个组件时，我们需要确保将要显示的数据对用户是经过授权的，如果不是，则取消导航。
- en: 'A Router Guard can return an `Observable<boolean>` or a `Promise<boolean>`,
    and the router will wait for Observable to resolve to either true or false:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 路由守卫可以返回一个`Observable<boolean>`或一个`Promise<boolean>`，路由器将等待Observable解析为true或false：
- en: If the Route Guard returns true, it will proceed with the navigation and display
    the view
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路由守卫返回true，它将继续导航并显示视图
- en: If the Route Guard returns false, it will abort/cancel the navigation
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路由守卫返回false，它将中止/取消导航
- en: 'There are various Route Guards we can use either independently or in combinations.
    They are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种路由守卫可以独立使用或组合使用。它们如下：
- en: '`canActivate`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canActivate`'
- en: '`canActivateChild`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canActivateChild`'
- en: '`canDeactivate`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canDeactivate`'
- en: '`Resolve`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resolve`'
- en: '`canLoad`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canLoad`'
- en: 'The guard function can accept parameters to make a better decision. The parameters
    we can pass are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 守卫函数可以接受参数以做出更好的决定。我们可以传递的参数如下：
- en: '`component`: The custom components directives we created: for example, `Products`,
    `Services`, and so on.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component`：我们创建的自定义组件指令：例如`Products`，`Services`等。'
- en: '`route`: `ActivatedRouteSnapshot` is the future route that will be activated
    if the guard passes.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`route`：`ActivatedRouteSnapshot`是如果守卫通过将要激活的未来路由。'
- en: '`state`: `RouterStateSnapshot` is the future Route State if the guard passes.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`：`RouterStateSnapshot`是如果守卫通过将来的路由状态。'
- en: '`canActivate`: This guards the component--think of this as a sanitize function
    whose job is similar to that of a bouncer outside a famous pub. Ensure that all
    the necessary criteria are met before a route can be activated. We need to import
    the `canActivate` module from the router and call the function in the component
    class.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canActivate`：这保护组件——将其视为一个类似于著名酒吧外面保镖的消毒函数。确保在激活路由之前满足所有必要的标准。我们需要从路由器导入`canActivate`模块，并在组件类中调用该函数。'
- en: 'The following is the code snippet for an all-purpose sanity service `check-credentials.ts`
    file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于通用健全性服务`check-credentials.ts`文件的代码片段：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you want to redirect users without any validations or business rules, use
    the navigate function instead of `canActivate`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在没有任何验证或业务规则的情况下重定向用户，请使用导航函数而不是`canActivate`。
- en: '`canActivateChild`: This guards the child components*--*remember in previous
    section, we created components routes along with child routes? Yes, now we want
    to make sure that we guard them as well.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canActivateChild`：这保护子组件*——*在前一节中，我们创建了组件路由以及子路由？是的，现在我们也要确保保护它们。'
- en: The `canActivateChild` function is similar to `canActivate` with a key difference
    that this function protects the child routes of the component.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canActivateChild`函数类似于`canActivate`，但有一个关键区别，即此函数保护组件的子路由。'
- en: 'The following is a sample code for using the `canActivateChild` function inside
    a service:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在服务中使用`canActivateChild`函数的示例代码：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`canDeactivate`: This handles any unsaved changes in the page*--*many times
    when a user tries to navigate away from a page having unsaved changes, we need
    to inform the user about the pending changes and take confirmation on whether
    the user wants to save their work or proceed without saving.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canDeactivate`：这处理页面中的任何未保存更改*——*当用户尝试从具有未保存更改的页面导航时，我们需要通知用户有待更改，并确认用户是否要保存他们的工作或继续而不保存。'
- en: 'That''s where `canDeactivate` comes into picture. The following is the code
    snippet for a service, which implements the `canDeactivate` function:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`canDeactivate`的作用。以下是一个实现`canDeactivate`函数的服务的代码片段：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`Resolve`: This performs route data retrieval before route activation--`Resolve`
    allows us to prefetch data retrieval from the service before we activate a route
    and component.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resolve`：这在路由激活之前执行路由数据检索——`Resolve`允许我们在激活路由和组件之前从服务中预取数据检索。'
- en: 'The following is the code snippet for how we can use the `Resolve` function
    and get the data from service before the route is activated:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何使用`Resolve`函数并在激活路由之前从服务获取数据的代码片段：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`canLoad`: This guards the module even before loading the module*--*using `canActivate`,
    we can redirect the unauthorized user to other landing pages, but in those cases,
    the module gets loaded.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canLoad`：这甚至在加载模块之前保护模块*——*使用`canActivate`，我们可以将未经授权的用户重定向到其他着陆页面，但在这些情况下，模块会被加载。'
- en: We can avoid the loading of the module using the `canLoad` function.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`canLoad`函数避免加载模块。
- en: In the next section, we will learn about defining the routes for components
    and child components. We will learn to create a multi-level hierarchy of components.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习为组件和子组件定义路由。我们将学习创建多级组件层次结构。
- en: Custom component routes and child routes
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义组件路由和子路由
- en: In previous sections, so far we have learned about the various usage of the
    router; it's now time to use all our knowledge to put together a sample demo application
    using all the routing examples. We will now create a custom component and define
    its route file with child routes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经学习了路由的各种用法；现在是时候将我们的所有知识整合起来，使用所有的路由示例来创建一个样例演示应用程序。我们将创建一个自定义组件，并定义其带有子路由的路由文件。
- en: We will create an unordered list of items called Products, which will have linked
    list items that are child products. Clicking on the respective product link, the
    user will be displayed the product details.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为Products的项目列表，其中将包含子产品的链接列表项。点击相应的产品链接，用户将显示产品详情。
- en: 'The application navigation plan looks as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的导航计划如下：
- en: '![](assets/675cb239-5df0-4dcb-bfa5-13149826202c.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/675cb239-5df0-4dcb-bfa5-13149826202c.png)'
- en: We have in previous sections learned to define and create routes in `NgModule`.
    We can also, alternatively, define a separate `app.route.ts` file and place all
    the routing details inside it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经学习了在`NgModule`中定义和创建路由。我们也可以选择在单独的`app.route.ts`文件中定义所有的路由细节。
- en: 'Create the `app.route.ts` file and add the following code snippet to the file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`app.route.ts`文件，并将以下代码片段添加到文件中：
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We import our component into the `app.routes.ts` file and then define the routes
    with `productRoutes`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的组件导入到`app.routes.ts`文件中，然后使用`productRoutes`定义路由。
- en: 'Now, it''s time we create our `product.routes.ts` file with path definitions
    for our products. The following is the code for doing so:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要创建我们的`product.routes.ts`文件，其中包含我们产品的路径定义。以下是这样做的代码：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s analyze the preceding code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前述代码：
- en: We are defining two paths in the `products.routes.ts` file.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`products.routes.ts`文件中定义了两个路径。
- en: The path `products` will point to `ProductsComponent`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路径`products`将指向`ProductsComponent`。
- en: The path `products/:id` path that translates to `products/10` will be mapped
    to `ProductsDetailsComponent`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路径`products/:id`将被映射到`ProductsDetailsComponent`，对应的路径为`products/10`。
- en: Now, it's time to create our components--`ProductsComponent` and `ProductsDetailsComponent`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建我们的组件--`ProductsComponent`和`ProductsDetailsComponent`。
- en: 'Let''s define the `ProductsComponent` class in the `products.components.ts`
    file, and add the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`products.components.ts`文件中定义`ProductsComponent`类，并添加以下代码：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s analyze the preceding code in detail:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细分析前述代码：
- en: We have created three product links with the `routerLink` directive; clicking
    on these links will get us mapped to the path we created in the `products.route.ts`
    file
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经使用`routerLink`指令创建了三个产品链接；点击这些链接将使我们映射到我们在`products.route.ts`文件中创建的路径。
- en: We have created a button, which has a `navigateToServices` event, and in the
    `ProductsComponent` class, we implement the method to navigate to the Services
    page
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建了一个按钮，它具有`navigateToServices`事件，在`ProductsComponent`类中，我们实现了导航到服务页面的方法。
- en: We have created a `routerLink` to handle each product ID, and the respective
    data will be loaded in `<router-outlet>`
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经创建了一个`routerLink`来处理每个产品ID，并且相应的数据将在`<router-outlet>`中加载。
- en: 'Now, let''s create `ProductsDetailsComponent` in `products-details.components.ts`
    under the `products` folder using the following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`products`文件夹下的`products-details.components.ts`中使用以下代码创建`ProductsDetailsComponent`：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here''s the analysis of the preceding code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的分析：
- en: When the user clicks on the product link, the `id` gets mapped and its respective
    product details are displayed
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户点击产品链接时，`id`将被映射，并显示相应的产品详情。
- en: We are importing the required modules, `Component` and `OnInit`, from the `@angular/core`
    library
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从`@angular/core`库中导入所需的模块`Component`和`OnInit`。
- en: We are importing the required modules, `ROUTER_DIRECTIVES` and `ActivatedRoute`
    from the `angular/router` library
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从`angular/router`库中导入所需的模块`ROUTER_DIRECTIVES`和`ActivatedRoute`
- en: We are exporting the `ProductsDetailsComponent` class
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在导出`ProductsDetailsComponent`类
- en: We are injecting `ActivatedRoute` in the constructor method
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在构造方法中注入了`ActivatedRoute`
- en: We are defining the `ngOnInIt` method which will be called on the page load
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在定义`ngOnInIt`方法，该方法将在页面加载时调用
- en: We are using the `ActivatedRoute` service which provides a `params` `Observable`
    which we can subscribe to get the route parameters
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用`ActivatedRoute`服务，它提供了一个`params` `Observable`，我们可以订阅以获取路由参数
- en: We are using `this.route.params.subscribe` to map the parameters passed in the
    URL
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`this.route.params.subscribe`来映射在URL中传递的参数
- en: The parameter has the `id` of the selected/clicked product which we are assigning
    to the variable `this.selectedId`
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数具有所选/点击产品的`id`，我们将其分配给变量`this.selectedId`
- en: All set so far? Great.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切都准备好了吗？太棒了。
- en: 'Now it''s time to update our `app.module.ts` file with the new components and
    their declarations. The updated `app.module.ts` will be as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候用新组件和它们的声明更新我们的`app.module.ts`文件了。更新后的`app.module.ts`将如下所示：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Alright. Now, let's test drive the application we have made so far.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。现在，让我们测试一下我们迄今为止制作的应用程序。
- en: 'The following image shows how our application should behave at this stage:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了我们的应用在这个阶段应该如何运行：
- en: '![](assets/50883655-dd87-4758-aacb-4e37447cb411.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/50883655-dd87-4758-aacb-4e37447cb411.png)'
- en: 'The following image shows when the user clicks on any particular product, the
    application will take the user to the respective product listing:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了当用户点击任何特定产品时，应用程序将带用户到相应的产品列表：
- en: '![](assets/52cdecfc-5e6e-4214-bc58-1142f3622c6e.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52cdecfc-5e6e-4214-bc58-1142f3622c6e.png)'
- en: Custom component routes with inner child routes
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有内部子路由的自定义组件路由
- en: In the preceding example, when the user clicks on product links, the user is
    navigated to a new path. In this example, you will learn how to create custom
    components and child routes and display the view inside the same path; that is,
    inner child routes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，当用户点击产品链接时，用户将被导航到新路径。在这个示例中，您将学习如何创建自定义组件和子路由，并在同一路径内显示视图；也就是说，内部子路由。
- en: 'Extending the same example, take a look at the application navigation plan:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展相同的示例，看一下应用程序的导航计划：
- en: '![](assets/a7991fcb-17a6-4b42-b902-cd6494d93356.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7991fcb-17a6-4b42-b902-cd6494d93356.png)'
- en: 'Let''s start by defining the route definitions in the `service.routes.ts` file.
    Refer to the following code for route definitions:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在`service.routes.ts`文件中定义路由定义开始。请参考以下代码进行路由定义：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code snippet, we are creating path services, and inside the
    same path, we are creating multi-level child routes, which all belong to the same
    URL hierarchy.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们正在创建路径服务，并在同一路径内创建多级子路由，这些子路由都属于同一URL层次结构。
- en: 'The component navigation route definition is shown as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 组件导航路由定义如下所示：
- en: '`/services`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/services`'
- en: '`/services/web-technologies`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/services/web-technologies`'
- en: '`/services/web-technologies/angular2`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/services/web-technologies/angular2`'
- en: 'Now, let''s create our three new components for our services :'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的服务创建三个新的组件：
- en: '`ServicesComponent`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServicesComponent`'
- en: '`ServicesChildComponent`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServicesChildComponent`'
- en: '`ServicesInnerChildComponent`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServicesInnerChildComponent`'
- en: Note that adding the `<router-outlet>` directive is important in parent views;
    otherwise, it will throw an error.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在父视图中添加`<router-outlet>`指令是重要的；否则，它会抛出错误。
- en: 'Now we need to create our Service component. For `ServicesComponent`, create
    a new file called `services.component.ts` and add the following code snippet to
    it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建我们的服务组件。对于`ServicesComponent`，创建一个名为`services.component.ts`的新文件，并将以下代码片段添加到其中：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Quick notes on the preceding code follow:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是对上述代码的快速说明：
- en: We have defined a unordered list `<ul>` of items `<li>` inside the `ServicesComponent`
    template.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`ServicesComponent`模板中定义了一个无序列表`<ul>`和项目`<li>`。
- en: For each of the list items, we are attaching `routerLink` attribute to link
    the URL.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个列表项，我们附加了`routerLink`属性来链接URL。
- en: Inside the template, we are also adding `<router-outlet>`--this will allow the
    child component view template to be placed inside the parent component view.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中，我们还添加了`<router-outlet>`--这将允许子组件视图模板放置在父组件视图中。
- en: 'We have our parent `ServicesComponent` created and ready. Now it''s time to
    create the child that is the inner component: `ServicesChildComponent.`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建好了父组件`ServicesComponent`。现在是时候创建内部组件`ServicesChildComponent`了。
- en: 'Let''s create a new file called `services-child.component.ts` and add the following
    code snippet to the file:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`services-child.component.ts`的新文件，并将以下代码片段添加到文件中：
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Quick notes on the preceding code follow:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是对上述代码的快速说明：
- en: We have defined a title and an anchor tag `<a>` and added `routerLink` and `routerLinkActive`
    attributes to it.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为标题和锚点标签`<a>`定义了`routerLink`和`routerLinkActive`属性。
- en: For the anchor tag, we are attaching added `routerLink` and `routerLinkActive`
    attributes.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于锚点标签，我们附加了`routerLink`和`routerLinkActive`属性。
- en: Inside the template, we are also adding `<router-outlet>`--this will allow the
    inner child component view template to be placed inside the child component view.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中，我们还添加了`<router-outlet>`--这将允许内部子组件视图模板放置在子组件视图中。
- en: 'Take a look at the following hierarchy diagram, which depicts the component
    structure:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的层次结构图，它描述了组件结构：
- en: '![](assets/58d49976-3ab6-4442-8952-82783f6d33ae.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/58d49976-3ab6-4442-8952-82783f6d33ae.png)'
- en: So far we have created a parent component, `ServicesComponent`, and it's child
    component, `ServicesChildComponent`, which have a hierarchy of parent-child relation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个父组件`ServicesComponent`，以及它的子组件`ServicesChildComponent`，它们之间有父子关系的层次结构。
- en: 'It''s time to create the third-level component, `ServicesInnerChildComponent`.
    Create a new file named `services-child.component.ts`:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候创建第三级组件`ServicesInnerChildComponent`了。创建一个名为`services-child.component.ts`的新文件：
- en: '[PRE27]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Alright, now that we defined all our components and child components and their
    respective route definitions, it's time to see all of them in action. The following
    screenshots show you how the navigation routes work for the services component
    and child components.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们已经定义了所有的组件和子组件以及它们各自的路由定义，是时候看看它们的运行情况了。以下截图展示了服务组件和子组件的导航路由是如何工作的。
- en: '![](assets/5a272ae6-6784-43ad-8664-85661075a836.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5a272ae6-6784-43ad-8664-85661075a836.png)'
- en: Clicking on the Web Technologies link will show the user child component data.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Web Technologies链接将显示用户子组件数据。
- en: '![](assets/374256c1-7c0f-4d48-af2c-4869c5af0b4c.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/374256c1-7c0f-4d48-af2c-4869c5af0b4c.png)'
- en: Clicking on the Angular Services link will show the user child component data.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Angular Services链接将显示用户子组件数据。
- en: '![](assets/222d5b54-6968-4386-8234-b0a4eecb1a86.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/222d5b54-6968-4386-8234-b0a4eecb1a86.png)'
- en: We have our components working individually very well. In next section we will
    integrate them all into one single working application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的组件分别很好地工作。在下一节中，我们将把它们全部集成到一个单一的工作应用程序中。
- en: Integrating all the components together
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有组件集成在一起
- en: We have defined and implemented routes for the individual components, `About`,
    `Services`, and `Products`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为各个组件`About`、`Services`和`Products`定义并实现了路由。
- en: In this section, we will integrate them all into one single `NgModule` so we
    have all routes working together as a single page application.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把它们全部集成到一个单一的`NgModule`中，这样我们就可以将所有路由作为一个单页面应用程序一起工作。
- en: 'Let''s add all the individual routes of the `About`, `Services`, and `Products`
    components to our `app.routes.ts` and the updated `app.route.ts` file is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`About`，`Services`和`Products`组件的所有单独路由添加到我们的`app.routes.ts`中，更新后的`app.route.ts`文件如下：
- en: '[PRE28]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We have updated the `app.routes.ts` file to include all the routes of the components
    as well as the child components.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更新了`app.routes.ts`文件，以包括所有组件以及子组件的路由。
- en: It's now time to update the `NgModule` to import all the components as well
    the updates routes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更新`NgModule`，导入所有组件以及更新的路由了。
- en: 'The updated `app.module.ts` file is given as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的`app.module.ts`文件如下：
- en: '[PRE29]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Important things to note in the preceding code are:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中需要注意的重要事项是：
- en: We are importing all the components we created so far, namely `About`, `Services`,
    and `Products`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入了我们迄今为止创建的所有组件，即`About`，`Services`和`Products`。
- en: We are also importing the routes `app.routes.ts` we created for each of the
    components.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还在导入每个组件的`app.routes.ts`路由。
- en: We are injecting `LocationStrategy` and explicitly mentioning it to `useClass
    HashLocationStrategy`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在注入`LocationStrategy`并明确地将其指定为`useClass HashLocationStrategy`。
- en: We have learned about `router`, `routerModule`, and utilities provided by Angular
    for implementing the routing mechanism of our applications. We learned about different
    types of `LocationStrategy` we can use to define how the URLs should be displayed.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了`router`，`routerModule`以及Angular提供的用于实现应用程序路由机制的实用工具。我们了解了可以使用的不同类型的`LocationStrategy`来定义URL应该如何显示。
- en: We created components having route paths and route paths for child components,
    and we have learned to navigate using JavaScript events as well.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了具有路由路径和子组件路由路径的组件，并且我们也学会了如何使用JavaScript事件进行导航。
- en: In the next section, we will stitch all the code together to make our demo application.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将把所有的代码组合在一起，制作我们的演示应用程序。
- en: Demo application routing and navigation
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示应用程序的路由和导航
- en: We have come a long way in learning all about the Angular router. We have seen
    various tips and tricks of how to use the router module. It's now fun time as
    we put together all the pieces we have learned so far into a neat, clean application.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在学习Angular路由方面走了很长的路。我们已经看到了如何使用路由模块的各种技巧和窍门。现在是时候将我们迄今学到的所有知识整合到一个整洁、干净的应用程序中了。
- en: 'The following image shows our final application filesystem structure :'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了我们最终的应用程序文件系统结构：
- en: '![](assets/4ab53ed1-f7dc-42e9-9b9c-9a4ecc4b2ba5.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4ab53ed1-f7dc-42e9-9b9c-9a4ecc4b2ba5.png)'
- en: 'We will add the main navigation menu and some basic styling to jazz up our
    application in the `app.component.ts` file:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`app.component.ts`文件中添加主导航菜单和一些基本样式来为我们的应用程序增添活力：
- en: '[PRE30]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Our final `app.routes.ts` file code is given as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的`app.routes.ts`文件代码如下：
- en: '[PRE31]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Our `app.module.ts` file code is given as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`app.module.ts`文件代码如下：
- en: '[PRE32]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Our application is ready for the grand demo.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序已经准备好进行大规模演示了。
- en: In the following screenshots, we show you the behavior of the application.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下的屏幕截图中，我们展示了应用程序的行为。
- en: 'When we launch the page, we see the landing page. The landing page screenshot
    is as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动页面时，我们会看到登陆页面。登陆页面的截图如下：
- en: '![](assets/34d91e6f-784e-44f5-88d2-62ddd5cd8838.png)Landing page'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/34d91e6f-784e-44f5-88d2-62ddd5cd8838.png)登陆页面'
- en: 'Now let''s click on the Services link. The `routerLink/services` will be activated,
    and the following screen should be displayed:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们点击Services链接。`routerLink/services`将被激活，并且应该显示以下屏幕：
- en: '![](assets/a6b5a78d-891c-4b3f-b176-d2bdf881a629.png)Services page.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a6b5a78d-891c-4b3f-b176-d2bdf881a629.png)Services页面。'
- en: 'Alright, now we are in the Services page. Now, click on the child component,
    Web Technology Services. The following screen should be displayed:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们在服务页面。现在，点击子组件，Web技术服务。应显示以下屏幕截图：
- en: '![](assets/1d6af39d-ce38-4db7-8acf-a8fb393b4f6b.png)Services child page--Web
    Technologies.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 服务子页面--Web技术。
- en: Things are shaping up really well here.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 事情在这里发展得非常顺利。
- en: 'We are now already in the child component--Web Technology Services, and now
    we click one more level down. Let''s click on Angular2 Services. The following
    screen should be displayed:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在子组件--Web技术服务中，现在我们再点击一级。让我们点击Angular2服务。应显示以下屏幕截图：
- en: '![](assets/3cf72bff-e9b5-43fc-b200-795699a0c8fd.png)Web Technologies inner
    child route--Angular2.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Web技术内部子路由--Angular2。
- en: 'Okay, now click on the Products link. The following screenshot should be displayed:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在点击“产品”链接。应显示以下屏幕截图：
- en: '![](assets/45286ff8-c778-4b2a-9859-a7b592e5236c.png)Products page.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面。
- en: Alight, now we are in the Products page. Now, click on the All products link
    and navigate to the Services page.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们在产品页面。现在，点击“所有产品”链接，导航到服务页面。
- en: However, the navigation happened using the JavaScript event and not the `routerLink`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，导航是使用JavaScript事件而不是`routerLink`发生的。
- en: '![](assets/c409adbe-54e4-4fd8-afe3-483b81153f8b.png)Product details page.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 产品详情页面。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Angular routing is one of the core functionalities of any web application. In
    this chapter, we discussed, designed, and implemented our Angular routing in detail.
    We also discussed how to implement and enable `RouterModule.forRoot`. Additionally,
    we defined Router Outlet and `routerLink` directive to bind the route path and
    enabled `RouterLinkActivated` to find the current active state.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Angular路由是任何Web应用程序的核心功能之一。在本章中，我们详细讨论、设计和实现了我们的Angular路由。我们还讨论了如何实现和启用`RouterModule.forRoot`。此外，我们定义了Router
    Outlet和`routerLink`指令来绑定路由路径，并启用了`RouterLinkActivated`来查找当前活动状态。
- en: We focused on how route state works, and understood and implemented Route Lifecycle
    Hooks. We outlined how to create custom component routes and child routes and
    how to implement location strategy for our web applications. Finally, we created
    a sample application implementing routes and navigation.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重点关注路由状态的工作原理，并了解并实现了路由生命周期钩子。我们概述了如何创建自定义组件路由和子路由，以及如何为我们的Web应用程序实现位置策略。最后，我们创建了一个实现路由和导航的示例应用程序。
- en: In the next chapter, you will learn about creating directives and implementing
    change detection. You will also learn about directives, different types of directives
    provided by Angular, and also create custom user-defined directives.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何创建指令并实现变更检测。您还将了解Angular提供的不同类型的指令，并创建自定义用户定义的指令。
- en: You will deep dive into learning how Angular handles the change detection and
    how we can utilize change detection in our apps.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您将深入学习Angular如何处理变更检测以及如何在我们的应用程序中利用变更检测。
