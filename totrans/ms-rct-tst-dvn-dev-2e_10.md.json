["```js\n[{ id: 123, firstName: \"Ashley\"}, ... ]\n```", "```js\n    it(\"renders a table with four headings\", async () => {\n      await renderAndWait(<CustomerSearch />);\n      const headings = elements(\"table th\");\n      expect(textOf(headings)).toEqual([\n        \"First name\",\n        \"Last name\",\n        \"Phone number\",\n        \"Actions\",\n      ]);\n    });\n    ```", "```js\n    export const CustomerSearch = () => (\n      <table>\n        <thead>\n          <tr>\n            <th>First name</th>\n            <th>Last name</th>\n            <th>Phone number</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n      </table>\n     );\n    ```", "```js\n    it(\"fetches all customer data when component mounts\", async () => {\n      await renderAndWait(<CustomerSearch />);\n      expect(global.fetch).toBeCalledWith(\"/customers\", {\n        method: \"GET\",\n        credentials: \"same-origin\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    });\n    ```", "```js\n    export const CustomerSearch = () => {\n      useEffect(() => {\n        const fetchData = async () =>\n          await global.fetch(\"/customers\", {\n            method: \"GET\",\n            credentials: \"same-origin\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n          });\n        fetchData();\n      }, []);\n      return (\n        ...\n      )\n    };\n    ```", "```js\n    const oneCustomer = [\n      {\n        id: 1,\n        firstName: \"A\",\n        lastName: \"B\",\n        phoneNumber: \"1\"\n      },\n    ];\n    ```", "```js\n    it(\"renders all customer data in a table row\", async () => {\n      global.fetch.mockResolvedValue(\n        fetchResponseOk(oneCustomer)\n      );\n      await renderAndWait(<CustomerSearch />);\n      const columns = elements(\"table > tbody > tr > td\");\n      expect(columns[0]).toContainText(\"A\");\n      expect(columns[1]).toContainText(\"B\");\n      expect(columns[2]).toContainText(\"1\");\n    });\n    ```", "```js\n    const [customers, setCustomers] = useState([]);\n    ```", "```js\n    const fetchData = async () => {\n    const result = await global.fetch(...);\n      setCustomers(await result.json());\n    };\n    ```", "```js\n    const CustomerRow = ({ customer }) => (\n      <tr>\n        <td>{customer.firstName}</td>\n        <td>{customer.lastName}</td>\n        <td>{customer.phoneNumber}</td>\n        <td />\n      </tr>\n    );\n    ```", "```js\n    return (\n      <table>\n        <thead>\n          ...\n        </thead>\n        <tbody>\n          {customers[0] ? (\n            <CustomerRow customer={customers[0]} />\n          ) : null}\n        </tbody>\n      </table>\n    );\n    ```", "```js\n    const twoCustomers = [\n      {\n        id: 1,\n        firstName: \"A\",\n        lastName: \"B\",\n        phoneNumber: \"1\"\n      },\n      {\n        id: 2,\n        firstName: \"C\",\n        lastName: \"D\",\n        phoneNumber: \"2\"\n      }\n    ];\n    ```", "```js\n    it(\"renders multiple customer rows\", async () => {\n      global.fetch.mockResolvedValue(\n        fetchResponseOk(twoCustomers)\n      );\n      await renderAndWait(<CustomerSearch />);\n      const rows = elements(\"table tbody tr\");\n      expect(rows[1].childNodes[0]).toContainText(\"C\");\n    });\n    ```", "```js\n    <tbody>\n      {customers.map(customer => (\n         <CustomerRow\n           customer={customer}\n           key={customer.id}\n         />\n        )\n      )}\n    </tbody>\n    ```", "```js\n    export const buttonWithLabel = (label) =>\n      elements(\"button\").find(\n        ({ textContent }) => textContent === label\n     );\n    ```", "```js\n    import {\n      ...,\n      buttonWithLabel,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"has a next button\", async () => {\n      await renderAndWait(<CustomerSearch />);\n      expect(buttonWithLabel(\"Next\")).not.toBeNull();\n    });\n    ```", "```js\n    const SearchButtons = () => (\n      <menu>\n        <li>\n          <button>Next</button>\n        </li>\n      </menu>\n    );\n    ```", "```js\n    return (\n      <>\n        <SearchButtons />\n        <table>\n          ...\n        </table>\n      </>\n    );\n    ```", "```js\n    const tenCustomers =\n      Array.from(\"0123456789\", id => ({ id })\n    );\n    ```", "```js\n    it(\"requests next page of data when next button is clicked\", async () => {\n      global.fetch.mockResolvedValue(\n        fetchResponseOk(tenCustomers)\n      );\n      await renderAndWait(<CustomerSearch />);\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      expect(global.fetch).toHaveBeenLastCalledWith(\n        \"/customers?after=9\",\n        expect.anything()\n      );\n    });\n    ```", "```js\n    const handleNext = useCallback(() => {\n      const after = customers[customers.length - 1].id;\n      const url = `/customers?after=${after}`;\n      global.fetch(url, {\n        method: \"GET\",\n        credentials: \"same-origin\",\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }, [customers]);\n    ```", "```js\n    const SearchButtons = ({ handleNext }) => (\n      <menu>\n        <li>\n          <button onClick={handleNext}>Next</button>\n        </li>\n      </menu>\n    );\n    ```", "```js\n    <SearchButtons handleNext={handleNext} />\n    ```", "```js\n    it(\"displays next page of data when next button is clicked\", async () => {\n      const nextCustomer = [{ id: \"next\", firstName: \"Next\" }];\n      global.fetch\n        .mockResolvedValueOnce(\n          fetchResponseOk(tenCustomers)\n        )\n        .mockResolvedValue(fetchResponseOk(nextCustomer));\n      await renderAndWait(<CustomerSearch />);\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      expect(elements(\"tbody tr\")).toHaveLength(1);\n      expect(elements(\"td\")[0]).toContainText(\"Next\");\n    });\n    ```", "```js\n    const handleNext = useCallback(async () => {\n      ...\n    const result = await global.fetch(...);\n      setCustomers(await result.json());\n    }, [customers]);\n    ```", "```js\nconst handleNext = useCallback(async () => {\n  const after = customers[customers.length - 1].id;\n  const url = `/customers?after=${after}`;\nconst result = await global.fetch(url, ...);\n  setCustomers(await result.json());\n}, [customers]);\nconst fetchData = async () => {\nconst result = await global.fetch(`/customers`, ...);\n  setCustomers(await result.json());\n};\n```", "```js\n    const [queryString, setQueryString] = useState(\"\");\n    ```", "```js\n    const handleNext = useCallback(() => {\n      const after = customers[customers.length - 1].id;\n      const newQueryString = `?after=${after}`;\n      setQueryString(newQueryString);\n    }, [customers]);\n    ```", "```js\n    useEffect(() => {\n      const fetchData = async () => {\n        const result = await global.fetch(\n          `/customers${queryString}`,\n          ...\n        );\n        setCustomers(await result.json());\n      };\n      fetchData();\n    }, [queryString]);\n    ```", "```js\n    it(\"has a previous button\", async () => {\n      await renderAndWait(<CustomerSearch />);\n      expect(buttonWithLabel(\"Previous\")).not.toBeNull();\n    });\n    ```", "```js\n    <menu>\n      <li>\n        <button>Previous</button>\n      </li>\n      ...\n    </menu>\n    ```", "```js\n    it(\"moves back to first page when previous button is clicked\", async () => {\n      global.fetch.mockResolvedValue(\n        fetchResponseOk(tenCustomers)\n      );\n      await renderAndWait(<CustomerSearch />);\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      await clickAndWait(buttonWithLabel(\"Previous\"));\n      expect(global.fetch).toHaveBeenLastCalledWith(\n        \"/customers\",\n        expect.anything()\n      );\n    });\n    ```", "```js\n    const handlePrevious = useCallback(\n      () => setQueryString(\"\"),\n      []\n    );\n    ```", "```js\n    const SearchButtons = (\n      { handleNext, handlePrevious }\n    ) => (\n      <menu>\n        <li>\n          <button\n            onClick={handlePrevious}\n          >\n            Previous\n          </button>\n        </li>\n        ...\n      </menu>\n    );\n    ```", "```js\n    <SearchButtons\n      handleNext={handleNext}\n      handlePrevious={handlePrevious}\n    />\n    ```", "```js\n    const anotherTenCustomers =\n      Array.from(\"ABCDEFGHIJ\", id => ({ id }));\n    ```", "```js\n    it(\"moves back one page when clicking previous after multiple clicks of the next button\", async () => {\n      global.fetch\n        .mockResolvedValueOnce(\n          fetchResponseOk(tenCustomers)\n        )\n        .mockResolvedValue(\n          fetchResponseOk(anotherTenCustomers)\n        );\n      await renderAndWait(<CustomerSearch />);\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      await clickAndWait(buttonWithLabel(\"Previous\"));\n      expect(global.fetch).toHaveBeenLastCalledWith(\n        \"/customers?after=9\",\n        expect.anything()\n      );\n    });\n    ```", "```js\n    const [\n      previousQueryString, setPreviousQueryString\n    ] = useState(\"\");\n    ```", "```js\n    const handleNext = useCallback(queryString => {\n      ...\n      setPreviousQueryString(queryString);\n      setQueryString(newQueryString);\n    }, [customers, queryString]);\n    ```", "```js\n    const handlePrevious = useCallback(async () =>\n      setQueryString(previousQueryString)\n    , [previousQueryString]);\n    ```", "```js\n    it(\"moves back multiple pages\", async () => {\n      global.fetch\n        .mockResolvedValue(fetchResponseOk(tenCustomers));\n      await renderAndWait(<CustomerSearch />);\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      await clickAndWait(buttonWithLabel(\"Previous\"));\n      await clickAndWait(buttonWithLabel(\"Previous\"));\n      expect(global.fetch).toHaveBeenLastCalledWith(\n        \"/customers\",\n        expect.anything()\n      );\n    });\n    ```", "```js\n    const [queryStrings, setQueryStrings] = useState([]);\n    ```", "```js\n    useEffect(() => {\n      const fetchData = async () => {\n        const queryString =\n          queryStrings[queryStrings.length - 1] || \"\";\n        const result = await global.fetch(\n          `/customers${queryString}`,\n          ...\n        );\n        setCustomers(await result.json());\n      };\n      fetchData();\n    }, [queryStrings]);\n    ```", "```js\n    const handleNext = useCallback(() => {\n      const after = customers[customers.length - 1].id;\n      const newQueryString = `?after=${after}`;\n      setQueryStrings([...queryStrings, newQueryString]);\n    }, [customers, queryStrings]);\n    ```", "```js\n    const handlePrevious = useCallback(() => {\n      setQueryStrings(queryStrings.slice(0, -1));\n    } [queryStrings]);\n    ```", "```js\nGET /customers?searchTerm=Dan\n[\n  {\n    firstName: \"Daniel\",\n    ...\n  }\n  ...\n]\n```", "```js\n    it(\"renders a text field for a search term\", async () => {\n      await renderAndWait(<CustomerSearch />);\n      expect(element(\"input\")).not.toBeNull();\n    });\n    ```", "```js\n    return (\n      <>\n        <input />\n        ...\n      </>\n    );\n    ```", "```js\n    it(\"sets the placeholder text on the search term field\", async () => {\n      await renderAndWait(<CustomerSearch />);\n      expect(\n        element(\"input\").getAttribute(\"placeholder\")\n      ).toEqual(\"Enter filter text\");\n    });\n    ```", "```js\n    <input placeholder=\"Enter filter text\" />\n    ```", "```js\n    export const changeAndWait = async (target, value) =>\n      act(async () => change(target, value));\n    ```", "```js\n    import {\n      ...,\n      changeAndWait,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    it(\"performs search when search term is changed\", async () => {\n      await renderAndWait(<CustomerSearch />);\n      await changeAndWait(element(\"input\"), \"name\");\n      expect(global.fetch).toHaveBeenLastCalledWith(\n        \"/customers?searchTerm=name\",\n        expect.anything()\n      );\n    });\n    ```", "```js\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    ```", "```js\n    const handleSearchTextChanged = (\n      { target: { value } }\n    ) => setSearchTerm(value);\n    ```", "```js\n    <input\n      value={searchTerm}\n      onChange={handleSearchTextChanged}\n      placeholder=\"Enter filter text\"\n    />\n    ```", "```js\n    const fetchData = async () => {\n      let queryString = \"\";\n      if (searchTerm !== \"\") {\n        queryString = `?searchTerm=${searchTerm}`;\n      } else if (queryStrings.length > 0) {\n        queryString =\n         queryStrings[queryStrings.length - 1];\n      }\n      ...\n    };\n    ```", "```js\n    useEffect(() => {\n     ...\n    }, [queryStrings, searchTerm]);\n    ```", "```js\n    it(\"includes search term when moving to next page\", async () => {\n      global.fetch.mockResolvedValue(\n        fetchResponseOk(tenCustomers)\n      );\n      await renderAndWait(<CustomerSearch />);\n      await changeAndWait(element(\"input\"), \"name\");\n      await clickAndWait(buttonWithLabel(\"Next\"));\n      expect(global.fetch).toHaveBeenLastCalledWith(\n        \"/customers?after=9&searchTerm=name\",\n        expect.anything()\n      );\n    });\n    ```", "```js\n    const fetchData = async () => {\n      let queryString;\n      if (queryStrings.length > 0 && searchTerm !== \"\") {\n        queryString =\n          queryStrings[queryStrings.length - 1]\n          + `&searchTerm=${searchTerm}`;\n      } else if (searchTerm !== '') {\n        queryString = `?searchTerm=${searchTerm}`;\n      } else if (queryStrings.length > 0) {\n        queryString =\n          queryStrings[queryStrings.length - 1];\n      }\n      ...\n    };\n    ```", "```js\n    const [lastRowIds, setLastRowIds] = useState([]);\n    ```", "```js\n    const newQueryString = `?after=${after}`;\n    ```", "```js\n    const handleNext = useCallback(() => {\n      const after = customers[customers.length - 1].id;\n      setLastRowIds([...lastRowIds, after]);\n    }, [customers, lastRowIds]);\n    ```", "```js\n    const searchParams = (after, searchTerm) => {\n      let pairs = [];\n      if (after) {\n        pairs.push(`after=${after}`);\n      }\n      if (searchTerm) {\n        pairs.push(`searchTerm=${searchTerm}`);\n      }\n      if (pairs.length > 0) {\n        return `?${pairs.join(\"&\")}`;\n      }\n      return \"\";\n    };\n    ```", "```js\n    const fetchData = async () => {\n      const after = lastRowIds[lastRowIds.length - 1];\n      const queryString = searchParams(after, searchTerm);\n      const response = await global.fetch(...);\n    };\n    ```", "```js\n    it(\"displays provided action buttons for each customer\", async () => {\n      const actionSpy = jest.fn(() => \"actions\");\n      global.fetch.mockResolvedValue(\n       fetchResponseOk(oneCustomer)\n      );\n      await renderAndWait(\n        <CustomerSearch\n          renderCustomerActions={actionSpy}\n        />\n      );\n      const rows = elements(\"table tbody td\");\n      expect(rows[rows.length - 1])\n        .toContainText(\"actions\");\n    });\n    ```", "```js\n    CustomerSearch.defaultProps = {\n      renderCustomerActions: () => {}\n    };\n    ```", "```js\n    export const CustomerSearch = (\n      { renderCustomerActions }\n    ) => {\n      ...\n    };\n    ```", "```js\n    <CustomerRow\n      customer={customer}\n      key={customer.id}\n      renderCustomerActions={renderCustomerActions}\n    />\n    ```", "```js\n    const CustomerRow = (\n      { customer, renderCustomerActions }\n    ) => (\n      <tr>\n        <td>{customer.firstName}</td>\n        <td>{customer.lastName}</td>\n        <td>{customer.phoneNumber}</td>\n        <td>{renderCustomerActions()}</td>\n      </tr>\n    );\n    ```", "```js\n    it(\"passes customer to the renderCustomerActions prop\", async () => {\n      const actionSpy = jest.fn(() => \"actions\");\n      global.fetch.mockResolvedValue(\n        fetchResponseOk(oneCustomer)\n      );\n      await renderAndWait(\n        <CustomerSearch\n          renderCustomerActions={actionSpy}\n        />\n      );\n      expect(actionSpy).toBeCalledWith(oneCustomer[0]);\n    });\n    ```", "```js\n    <td>{renderCustomerActions(customer)}</td>\n    ```", "```js\n    export const renderAdditional = (component) => {\n      const container = document.createElement(\"div\");\n      act(() =>\n        ReactDOM.createRoot(container).render(component)\n      );\n      return container;\n    };\n    ```", "```js\n    import {\n      ...,\n      renderAdditional,\n    } from \"./reactTestExtensions\";\n    ```", "```js\n    const searchFor = (customer) =>\n      propsOf(CustomerSearch)\n        .renderCustomerActions(customer);\n    ```", "```js\n    it(\"passes a button to the CustomerSearch named Create appointment\", async () => {\n      render(<App />);\n      navigateToSearchCustomers();\n      const buttonContainer = \n        renderAdditional(searchFor());\n      expect(\n        buttonContainer.firstChild\n      ).toBeElementWithTag(\"button\");\n      expect(\n        buttonContainer.firstChild\n      ).toContainText(\"Create appointment\");\n    });\n    ```", "```js\n    const searchActions = () => (\n      <button>Create appointment</button>\n    );\n    ```", "```js\n    case \"searchCustomers\":\n      return (\n        <CustomerSearch \n          renderCustomerActions={searchActions}\n        />\n      );\n    ```", "```js\n    it(\"clicking appointment button shows the appointment form for that customer\", async () => {\n      const customer = { id: 123 };\n      render(<App />);\n      navigateToSearchCustomers();\n      const buttonContainer = renderAdditional(\n        searchFor(customer)\n      );\n      click(buttonContainer.firstChild);\n      expect(\n       element(\"#AppointmentFormLoader\")\n      ).not.toBeNull();\n      expect(\n        propsOf(AppointmentFormLoader).original\n      ).toMatchObject({ customer: 123 });\n    });\n    ```", "```js\n    const searchActions = (customer) => (\n      <button\n        onClick={\n          () => transitionToAddAppointment(customer)\n        }>\n        Create appointment\n    </button>\n    );\n    ```"]