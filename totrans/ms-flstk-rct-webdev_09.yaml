- en: Continuous Integration with Unit and Behavioral Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We made it; congratulations! We have created a full-stack app that runs under
    a certain domain name (in this book its *reactjs.space*). The missing parts in
    the whole setup are the deployments processes. Deployments should be zero downtime.
    We need to have a redundant server of our application.
  prefs: []
  type: TYPE_NORMAL
- en: We are also missing some steps in our app to make it professionally work as
    minification, unit, and behavioral tests.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce you to some additional concepts that are
    required in order to master the full-stack development. The remaining missing
    pieces are left for you as homework.
  prefs: []
  type: TYPE_NORMAL
- en: When to write unit and behavioral tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, there are some advices about when to write unit and/or behavioral
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'We in ReactPoland often have clients who run startups. As a general governance
    for them, we suggest the following:'
  prefs: []
  type: TYPE_NORMAL
- en: If your startup is looking for traction and you need your product in order to
    make it, then don't worry about tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After you have created your **Minimum Viable Product** (**MVP**), you *must*
    have those tests when expanding your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a well-established company, which is building an app for your clients
    and you know their needs very well, then you must have tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding first two points are related to startups and young companies.
    The third point is related mostly to well-established companies.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on where you and your product are, then you need to decide on your
    own, if it is worth to write the tests.
  prefs: []
  type: TYPE_NORMAL
- en: React conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a project that shows fully how the full-stack development setup should
    be looking like at [http://React JS.co](http://reactjs.co/).
  prefs: []
  type: TYPE_NORMAL
- en: Visit this website and learn how to integrate your app with unit and behavioral
    tests and learn up-to-date best conventions about how to make React Redux applications.
  prefs: []
  type: TYPE_NORMAL
- en: Karma for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We won't guide you in setting up the tests in this chapter because it's not
    in the scope of this book. The aim of this chapter is intended to present you
    with online resources that will help you to understand the bigger picture.
  prefs: []
  type: TYPE_NORMAL
- en: Karma is the one of most popular tools for unit and behavioral tests. The main
    goal is to bring a productive testing environment while working on any application.
  prefs: []
  type: TYPE_NORMAL
- en: There are many features that you are provided with by using this test runner.
    There is a nice video that explains the big picture about Karma at [https://karma-runner.github.io](https://karma-runner.github.io).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tests on real devices**: You can use real browsers and real devices such
    as phones, tablets, or PhantomJS to run the tests (PhantomJS is a headless WebKit
    scriptable with a JavaScript API; it has fast and native support for various web
    standards: DOM handling, CSS selector, JSON, Canvas, and SVG.) There are different
    environments, but one tool that runs on them all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote control**: You can run the tests remotely, for example, on each save
    from your IDE, so that you don''t have to do it manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing framework agnostic**: You can write your tests in Jasmine, Mocha,
    QUnit, and other frameworks. It''s totally up to you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous integration**: Karma works great with CI tools such as Jenkins,
    Travis, or CircleCI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write unit and behavioral tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's provide an example of how to set up properly a project in order to have
    an ability to write tests.
  prefs: []
  type: TYPE_NORMAL
- en: Visit the GitHub repo of the very popular Redux starter kit at [https://github.com/davezuko/react-redux-starter-kit](https://github.com/davezuko/react-redux-starter-kit).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then visit the `package.json` file of this repository. We can find out there
    what the possible commands/scripts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can find, after the NPM test that it runs the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can find the configuration file of Karma located at `build/karma.conf` from
    [https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js).
  prefs: []
  type: TYPE_NORMAL
- en: 'And the content (July 2016) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in `karma.conf.js` they are using Mocha (check the line with
    `"frameworks: [''mocha'']"`). The rest of the options used in the config files
    are described in the documentation that is available at [http://karma-runner.github.io/1.0/config/configuration-file.html](http://karma-runner.github.io/1.0/config/configuration-file.html).
    If you are interested in learning the Karma configuration, then `karma.conf.js` should
    be your starting file.'
  prefs: []
  type: TYPE_NORMAL
- en: What is Mocha and why do you need it?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Karma config file, we have found that it uses Mocha as the JS testing
    framework ([https://mochajs.org/](https://mochajs.org/)). Let's analyze the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find `dir_test : ''tests''` in the `config/index.js` file, so based
    on that variable, Karma''s `config` knows that the Mocha''s tests are located
    in the `tests/test-bundler.js` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what is in the `tests` directory at https://github.com/davezuko/react-redux-starter-kit/tree/master/tests.
    As you can see in the `test-bundler.js` file, there are plenty of dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s roughly describe what is used there:'
  prefs: []
  type: TYPE_NORMAL
- en: Babel-polyfill emulates a full ES6 environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sinon is a standalone and test framework agnostic JavaScript test for spies,
    stubs, and mocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spies are useful if in a tested piece of code, you call for an other external's
    services. You can check if it was called, what parameters it had, if it returned
    something, or even how many times it was called!
  prefs: []
  type: TYPE_NORMAL
- en: The stubs concept is very similar to the spies concept. The biggest difference
    is that stubs replace the target function. They also replace the called code with
    custom behavior (replacing it) such as throwing exceptions or returning a value.
    They are also able to call a callback function that has been provided as a parameter.
    Stubs code returns a specified result.
  prefs: []
  type: TYPE_NORMAL
- en: Mocks are kind of *smarter stubs*. Mocks are used for asserting data and should
    never return data, when a stub is used simply for returning data and should never
    assert. Mocks can file your tests (when asserting), while stubs can't.
  prefs: []
  type: TYPE_NORMAL
- en: Chai is the BDD/TDD assertion framework for Node.js and the browser. In the
    previous example, it has been paired with the Mocha testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: Testing CoreLayout step-by-step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's analyze the `CoreLayout.spec.js` tests. This component has a role similar
    to the CoreLayout in the publishing app, and so it's a good way to describe how
    you can start writing tests for your application.
  prefs: []
  type: TYPE_NORMAL
- en: The CoreLayout tests file location (July 2016) is available at [https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js).
  prefs: []
  type: TYPE_NORMAL
- en: 'The content is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `react-addons-test-utils` library makes it easy to test React components
    with Mocha. The method that we used in the preceding example is **shallow rendering,**
    which is available at [https://facebook.github.io/react/docs/test-utils.html#shallow-rendering](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering).
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature helps us test the `render` function and is the result of rendering
    a one level deep in our components. Then we can assert facts about what its `render`
    method returns, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: First, we provide a component in the `shallowRender` method (in this example,
    it will be CoreLayout). Later, we use `method.render` and then we return the output
    with the use of `renderer.getRenderOutput`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, that function is called here (note that the semicolons are missing
    in the following example, because the starter that we are describing has different
    linting options than ours):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find that the `_component` variable contains the result of the `renderer.getRenderOutput`.
    This value is asserted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In that test, we test our code if it returns `div`. But if you visit the documentation,
    then you can find the code example as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also find the assertion example as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding two examples, you can expect a type as `div`
    or you can expect more specific information about the CoreLayout return (depending
    on your needs).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first test asserts the type of a component (if it is `div`), and the second
    example test asserts if a CoreLayout returns correct components that are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first one is a unit test because this isn't testing exactly if users see
    a correct thing. The second one is a behavioral test.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, Packt has many books on **Behavior-Driven Development** (**BDD**)
    and **Test-Driven Development** (**TDD**).
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration with Travis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the given example, you can find a `.yml` file at [https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml](https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml).
  prefs: []
  type: TYPE_NORMAL
- en: This is a configuration file for Travis. What is this? It's a hosted CI service
    used to build and test software. Generally, it's a tool that is free for open
    source projects to use. If you want a hosted Travis CI for private projects, then
    their fees apply.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration for Travis is made by adding the `.travis.yml` file, as mentioned
    earlier. The YAML form is a text file that is placed to the root directory of
    your project. This file's content describes all the steps that have to be done
    to test, install, and build a project.
  prefs: []
  type: TYPE_NORMAL
- en: The Travis CI goal is to make every commit to your GitHub account and to run
    the tests, and when the tests are passing, you can deploy the app to a staging
    server on an Amazon AWS. The continuous integration is not in the scope of this
    book, so if you are interested in adding this step to the whole publishing app
    project, there are books related to this as well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our publishing app is working. As with any digital project, there are still
    plenty of stuff that we can improve in order to have a better end product. For
    example, the following homework is for you:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a minifaction on the frontend side so that it will be lighter when loading
    over the Internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned earlier, you need to start using Karma and Mocha for unit and behavioral
    tests. An example setup was described in detail in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to choose a CI tool such as Travis, create your YML file, and prepare
    the environment on AWS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is all you can additionally do besides all that has been covered in the 350+
    pages of this book, where you built a full-stack React + Redux + Falcor + Node
    + Express + Mongo application. I hope to keep in touch with you; follow me on
    Twitter/GitHub in order to keep in touch or send me an e-mail if you have any
    additional questions.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck in getting your hands dirty with the next commercial full-stack applications
    and see you again.
  prefs: []
  type: TYPE_NORMAL
