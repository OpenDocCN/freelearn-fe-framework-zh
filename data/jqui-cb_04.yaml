- en: Chapter 4. Developing Datepickers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章. 开发日期选择器
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Working with different date formats
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理不同的日期格式
- en: Making a full-sized calendar widget
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作全尺寸的日历小部件
- en: Displaying month-to-month effects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示月度效果
- en: Appointment reminders as tooltips
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预约提醒作为工具提示
- en: Restricting the date range
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制日期范围
- en: Hiding the input field
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏输入字段
- en: Additional data and controls
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加数据和控件
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The **datepicker** widget augments the typical text input form element by presenting
    the user with a date selection utility. We see these types of inputs everywhere
    on the Web now. The graphical nature of the datepicker is intuitive for most users
    because it closely resembles a physical calendar. The datepicker widget also addresses
    the challenge of working with consistent date formats, something users don't have
    to worry about.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**日期选择器**小部件通过提供日期选择实用工具来增强典型的文本输入表单元素。我们现在在Web上到处都可以看到这些类型的输入。日期选择器的图形化性质对大多数用户来说是直观的，因为它与物理日历非常相似。日期选择器小部件还解决了处理一致日期格式的挑战，这是用户无需担心的。'
- en: Working with different date formats
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理不同的日期格式
- en: The datepicker widget supports a variety of date string formats. The date string
    is the value populated in the text input when the user makes a selection. More
    often than not, applications will try to follow the same date format throughout
    the UI for consistency. So if you're not happy with the default format provided
    by the widget, we can change it when the widget is created using the `dateFormat`
    option.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择器小部件支持各种日期字符串格式。当用户进行选择时，日期字符串是填充在文本输入中的值。通常情况下，应用程序会尝试在整个用户界面中遵循相同的日期格式以保持一致性。因此，如果您不满意小部件提供的默认格式，我们可以在创建小部件时使用`dateFormat`选项进行更改。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll start by creating two `input` fields where we require the date input
    from the user:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建两个`input`字段开始，其中我们需要用户输入日期：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we'll create two datepicker widgets using the preceding `input` fields
    and by specifying our custom format.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用前面的`input`字段并指定我们的自定义格式来创建两个日期选择器小部件。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we make a selection in either of the datepicker widgets, you'll notice
    the text `input` value changes to the selected date, using the format we've chosen.
    The date format string itself, `"DD, MM d, yy"`, is modeled after those found
    in most other programming languages, that is, there is no native JavaScript date
    formatting facilities for the datepicker to use. When the user makes a selection
    in the drop-down calendar of the datepicker, a `Date` object is created. The widget
    then uses the `dateFormat` option to format the `Date` object, and populate the
    text input with the result.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在日期选择器小部件中做出选择时，您会注意到文本`input`值会更改为所选日期，使用我们选择的格式。日期格式字符串本身，`"DD, MM d, yy"`，是根据大多数其他编程语言中找到的格式而建模的，也就是说，日期选择器没有本机JavaScript日期格式化工具可用。当用户在日期选择器的下拉日历中进行选择时，将创建一个`Date`对象。然后小部件使用`dateFormat`选项来格式化`Date`对象，并将文本输入填充为结果。
- en: '![How it works...](img/2186_04_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/2186_04_01.jpg)'
- en: There's more...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If we're building a reasonably large user interface, we'll probably use several
    datepicker widgets in several different places. To keep up with the date formatting
    consistency, we'll have to specify the `dateFormat` option each time we create
    the datepicker widget. We will likely have several calls to create the widget
    that use different selectors, so it becomes a little tedious to always specify
    the same `dateFormat` option when it should just be the default.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在构建一个相当大的用户界面，我们可能会在几个不同的地方使用几个日期选择器小部件。为了保持日期格式的一致性，我们将不得不每次创建日期选择器小部件时指定`dateFormat`选项。我们可能会有几个调用创建小部件的调用使用不同的选择器，因此总是指定相同的`dateFormat`选项有点烦人，而它应该只是默认值。
- en: In this scenario, we're better off just changing the default `dateFormat` value
    to something our application uses throughout. This beats having to specify the
    same format, over and over, while preserving the ability to change the date format
    on a case-by-case basis.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最好只是将默认的`dateFormat`值更改为我们的应用程序遍布的内容。这比一遍又一遍地指定相同的格式要好，同时保留了根据情况更改日期格式的能力。
- en: 'We''ll use the same HTML structure as before—the two `input` fields are our
    datepicker placeholders. But let''s modify the JavaScript as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与之前相同的HTML结构-两个`input`字段是我们的日期选择器占位符。但让我们修改JavaScript如下：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, if you run this modified JavaScript, you'll get the same datepicker behavior
    as before. What you'll notice, however, is that we're now making two calls to
    the `datepicker()` constructor. Neither specifies the `dateFormat` option, because
    we've altered the default value by customizing the `datepicker` widget and extending
    `options`. We still have the option of providing a custom date format for each
    individual widget, and this route could save us a lot of potentially repetitive
    `dateFormat` options.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你运行这个修改过的 JavaScript，你会得到与之前相同的日期选择器行为。然而，你会注意到，我们现在要调用两次 `datepicker()`
    构造函数。都没有指定 `dateFormat` 选项，因为我们通过定制 `datepicker` 小部件和扩展 `options` 来改变了默认值。我们仍然可以为每个单独的小部件提供自定义日期格式的选项，这样做可以为我们节省大量潜在的重复
    `dateFormat` 选项。
- en: Making a full-sized calendar widget
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个全尺寸的日历小部件
- en: The typical use for the `datepicker` widget is to augment a standard form input
    field. When the field comes into focus, it's then that we want to display the
    actual datepicker for the user. This makes sense if we're following the standard
    usage pattern for the widget—to pick dates. This is why, after all, it's called
    a datepicker.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`datepicker` 小部件的典型用法是增强标准表单输入字段。当字段获得焦点时，我们希望为用户显示实际的日期选择器。如果我们遵循小部件的标准使用模式——选择日期，那么这就是有道理的。毕竟，这就是为什么它被称为日期选择器的原因。'
- en: But we could, however, take advantage of some flexibility afforded by the theme
    framework and perform a few minor tweaks to display a larger calendar. Not necessarily
    for the purpose of picking a date as input, but as a large window into date/time
    related information. The changes we need to make to the widget are merely to scale
    the inline display up in size.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以利用主题框架提供的一些灵活性，并对日期选择器进行一些微小的调整，以显示一个更大的日历。不一定是为了作为输入选择日期的目的，而是作为一个大窗口来显示与日期/时间相关的信息。我们需要对小部件进行的更改仅仅是将内联显示的尺寸放大。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The datepicker widget already knows how to display itself inline. We just need
    to call the datepicker constructor on a `div` element instead of an `input` element.
    So we''ll use this basic markup:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择器小部件已经知道如何在内联中显示自己。我们只需要在 `div` 元素上调用日期选择器构造函数，而不是在 `input` 元素上。所以我们将使用这个基本的标记：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And a plain old `datepicker()` invocation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个普通的 `datepicker()` 调用：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The rest of the work is performed in the theme adjustments.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的工作是在主题调整中完成的。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The goal of adjusting the datepicker CSS is to make it scale up in size. The
    idea is to make the widget look more like a calendar and less like a form input
    field helper. The calendar is already displayed inline, so let's just include
    this new CSS on the page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 调整日期选择器 CSS 的目标是使其尺寸放大。想法是使小部件看起来更像一个日历，而不像一个表单输入字段助手。日历已经以内联方式显示了，所以让我们在页面上包含这个新的
    CSS。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With that, we have a scaled up calendar widget that still functions perfectly
    fine as a datepicker, as we haven't altered any functionality with the widget.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就有了一个缩放的日历小部件，作为一个日期选择器仍然可以完美地运行，因为我们没有改变小部件的任何功能。
- en: '![How to do it...](img/2186_04_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/2186_04_02.jpg)'
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first thing we're doing with these new style declarations is increasing
    the width of the calendar display to `500px`. This could be any number we choose
    that best fits the user interface we happen to be developing. Next, we're upping
    the title section—the month and the year—in terms of the font size. We're also
    increasing the font size of all the weekdays and month numbers, as well as providing
    more padding between the month day slots. We have the space now, we might as well
    use it. Finally, the `padding` set on the `td span` and `td a` elements fixes
    the height of the entire calendar; otherwise, the aspect ratio would be way out
    of whack. This is another number that we would want to fiddle with on a per-application
    basis in order to get it right.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这些新的样式声明所做的第一件事是增加日历显示的宽度为`500px`。这可以是我们选择的任何数字，最适合我们正在开发的用户界面。接下来，我们将增加标题部分——月份和年份的字体大小。我们还增加了所有星期几和月份数字的字体大小，并在月份日槽之间提供了更多的填充。我们现在有了空间，我们可能会用到它。最后，设置在
    `td span` 和 `td a` 元素上的 `padding` 修复了整个日历的高度；否则，纵横比将会非常不协调。这是另一个我们希望根据每个应用程序进行微调的数字，以便正确设置。
- en: Displaying month-to-month effects
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示月度效果
- en: When the datepicker selector is shown, we're typically displaying one month
    at a time for the user. If the user needs to navigate backward through time, they
    do so using the previous month button. Likewise, they can move forward through
    time using the next month button. The datepicker widget just empties out the datepicker
    `div` when this happens, regenerates some HTML for the calendar and inserts that.
    This all happens very quickly, essentially instantaneously as far as the user
    is concerned.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当日期选择器选择器显示时，我们通常为用户每次显示一个月。如果用户需要向后导航时间，则使用上个月按钮。同样，他们可以使用下个月按钮向前导航时间。当发生这种情况时，日期选择器小部件仅清空日期选择器`div`，然后重新生成一些
    HTML 以用于日历，并插入其中。这一切都发生得非常快，对于用户来说，基本上是瞬间的。
- en: Let's liven up this month-to-month navigation a little bit by injecting some
    effects into the datepicker internals.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向日期选择器内部注入一些效果来使这个月份导航更加生动。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can use any datepicker widget for this experiment, but it's probably more
    straightforward to just use an inline datepicker display instead of using a text
    `input`. That way, the datepicker is there when the page loads and we don't need
    to open it. Inline datepickers are created using a `div` element.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实验可以使用任何日期选择器小部件，但直接使用内联日期选择器显示可能更简单，而不是使用文本`input`。这样，当页面加载时，日期选择器就在那里，我们不需要打开它。内联日期选择器是使用`div`元素创建的。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll extend the datepicker widget as follows to allow for the jQuery `fadeIn()`
    and `fadeOut()` functions to be applied while we're adjusting the the current
    month.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展日期选择器小部件，以允许在我们调整当前月份时应用 jQuery 的`fadeIn()`和`fadeOut()`函数。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now when the user clicks on the next or previous arrow buttons at the top of
    the calendar, we'll see that the widget fades out and fades back in with a new
    calendar month layout.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当用户单击日历顶部的下一个或上一个箭头按钮时，我们会看到小部件淡出，并淡入具有新日历月份布局的界面。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: The first thing you'll notice about this code is that it doesn't extend the
    datepicker widget using the typical widget factory machinery. That's because the
    default implementation of the datepicker hasn't yet moved over to the new widget
    factory way of doing things. But that doesn't stop us from extending the widget
    to suit our needs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这段代码的第一件事是它没有使用典型的小部件工厂机制扩展日期选择器小部件。这是因为日期选择器的默认实现尚未转移到新的小部件工厂方式进行操作。但这并不妨碍我们根据需要扩展小部件。
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The datepicker widget is complicated—much more so than most others within the
    framework. There are many considerations the core jQuery UI team must entertain
    before such a drastic change is introduced. The plan, as of writing, is that the
    datepicker widget we'll be a product of the widget factory, just like every other
    widget in a future release.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择器小部件很复杂——比框架内的大多数其他小部件都要复杂得多。在引入如此重大变化之前，核心 jQuery UI 团队必须考虑许多因素。截至撰写本文时的计划是，日期选择器小部件将在将来的版本中像其他小部件一样成为小部件工厂的产品。
- en: We're using the jQuery `extend()` function on the `$.datepicker` object. This
    object is a singleton instance of the `Datepicker` class, which is what we're
    interested in for the sake of brevity. The `_updateDatepicker()` method is what
    we're targeting in this customization. The default datepicker implementation uses
    this method to update the contents of the datepicker `div`. So we want to override
    it. In our version of the method, we're hiding `inst.dpDiv` using `fadeOut()`.
    Once that completes, we call `fadeIn()`. The `_super` variable is a reference
    to the `Datepicker` class used to defined the widget. As `$.datepicker` is an
    instance, the only way to access the `Datepicker` prototype is through `$.datepicker.constructor.prototype`.
    The reason we need the `Datepicker` prototype is so that we can call the original
    `_updateDatepicker()` method once we've finished with our effects, as it performs
    several other tasks related to configuring the display.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`$.datepicker`对象上使用了 jQuery `extend()`函数。该对象是`Datepicker`类的单例实例，这是我们为了简洁而感兴趣的内容。`_updateDatepicker()`方法是我们在此自定义中的目标。默认的日期选择器实现使用此方法来更新日期选择器`div`的内容。因此，我们想要重写它。在我们版本的方法中，我们使用`fadeOut()`隐藏了`inst.dpDiv`。一旦完成，我们调用`fadeIn()`。`_super`变量是对用于定义小部件的`Datepicker`类的引用。由于`$.datepicker`是一个实例，因此访问`Datepicker`原型的唯一方法是通过`$.datepicker.constructor.prototype`。我们需要`Datepicker`原型的原因是，这样我们才能在我们完成了效果后调用原始的`_updateDatepicker()`方法，因为它执行了与配置显示相关的其他几个任务。
- en: Appointment reminders as tooltips
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将预约提醒显示为工具提示
- en: Datepicker widgets help users select the proper date for an `input` field, or
    serve as a basic display. In either case, wouldn't it be useful if we could provide
    the user with some more context? That is, if I'm using the datepicker to select
    the date on a form, it would be helpful to know that when I move the mouse pointer
    over a day in the calendar, I've got something going on that day. Maybe I should
    pick something else.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择器小部件帮助用户为`input`字段选择正确的日期，或者作为基本显示。在任何一种情况下，如果我们能为用户提供更多的上下文信息，那么这不是很有用吗？也就是说，如果我正在使用日期选择器来选择表单中的日期，那么当我将鼠标指针移到日历中的某一天时，知道那天有些事情要做会很有帮助。也许我应该选择其他日期。
- en: In this section, we'll look at extending the capabilities of the datepicker
    widget to allow for specifying reminders that appear as tooltips. These get passed,
    as an option, to the datepicker constructor and probably originated within the
    application somehow, perhaps from the user's profile in the database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究扩展日期选择器小部件的能力，以允许指定作为工具提示出现的提醒。这些作为选项传递给日期选择器构造函数，并且可能在应用程序内部产生，可能是从数据库中的用户资料中获得的。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: We'll use a simple inline datepicker for this example with `<div class="calendar"></div>`
    as the target markup.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的内联日期选择器作为示例，目标标记为`<div class="calendar"></div>`。
- en: Let's extend the datepicker's capabilities by accepting an array of reminder
    objects, and creating tooltips for them. A reminder object is just a plain JavaScript
    object with `date` and `text` fields. The date tells the datepicker where in the
    calendar the tooltip should be placed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过接受提醒对象数组并为它们创建工具提示来扩展日期选择器的功能。提醒对象只是一个带有`date`和`text`字段的普通JavaScript对象。日期告诉日期选择器工具提示应该放在日历中的何处。
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, when you move the mouse pointer over the provided reminder dates in the
    datepicker widget, you should see the provided text as a tooltip:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您将鼠标指针移到日期选择器小部件中提供的提醒日期上时，您应该会看到所提供的文本作为工具提示显示出来：
- en: '![How to do it...](img/2186_04_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/2186_04_03.jpg)'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let's take a step back and think about the data passed to the reminders parameter,
    and what we've done with it. The value passed is an array of objects, each with
    `date` and `text` attributes. The text is what we want to display in the tooltip,
    and the date tells the datepicker where to place the tooltip. So we take this
    value and compare it against the dates rendered in the datepicker calendar.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们退一步，思考传递给提醒参数的数据以及我们对其进行了什么处理。传递的值是一个对象数组，每个对象都有`date`和`text`属性。文本是我们想要显示在工具提示中的内容，而日期告诉日期选择器在何处放置工具提示。因此，我们取得这个值并将其与日期选择器日历中呈现的日期进行比较。
- en: All the customized work is done in our own implementation of the `_updateDatepicker()`
    method. This method is called every time the calendar is rendered. This includes
    switching from month to month. We use our reference to the original datepicker
    implementation in `_super` to call the `_updateDatepicker()` method. Once that
    has completed, we can perform our customizations. We first check if the reminders
    parameter has been supplied, otherwise, our work is done.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所有定制工作都在我们自己的`_updateDatepicker()`方法的实现中完成。每次渲染日历时都会调用此方法。这包括从一个月切换到另一个月。我们使用对原始日期选择器实现的引用`_super`来调用`_updateDatepicker()`方法。一旦完成了这一点，我们就可以执行我们的自定义。我们首先检查是否已提供提醒参数，否则我们的工作已经完成。
- en: Next, we find and iterate over each `td` element that represents a day in the
    currently-displayed month. For each day, we construct a JavaScript `Date` object
    representative of the table cell—we'll need this to compare against each reminder
    entry. Finally, we iterate over each reminder object in the `reminders` parameter.
    If we're on the date that this reminder should be displayed, we construct the
    tooltip widget after setting the `title` attribute of the `td` element.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们查找并迭代当前显示的月份中表示一天的每个`td`元素。对于每一天，我们构造一个代表表格单元格的JavaScript`Date`对象——我们将需要这个对象来与每个提醒条目进行比较。最后，我们在`reminders`参数中迭代每个提醒对象。如果我们在应该显示此提醒的日期上，我们在设置`td`元素的`title`属性之后构造工具提示小部件。
- en: Restricting the date range
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制日期范围
- en: Your application may need to restrict allowable date selections for limiting
    the date range. Perhaps this is predicated on some other condition being true
    or event being triggered. Thankfully, we have enough flexibility to handle the
    most common selection-restricted configurations of the widget.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序可能需要限制可选日期，限制日期范围。也许这是基于某些其他条件为真或事件被触发的。谢天谢地，我们有足够的灵活性来处理小部件的最常见的受限选择配置。
- en: Getting ready...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: 'We''ll use the basic input element markup for our datepicker widget:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用基本输入元素标记来创建我们的日期选择器小部件：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We'll create our datepicker widget as follows, using the `minDate` and `maxDate`
    options.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`minDate`和`maxDate`选项创建我们的日期选择器小部件。
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When we activate the datepicker widget by clicking on the `input` field, you'll
    notice that only a specific range of days are selectable.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过单击`input`字段激活日期选择器小部件时，您会注意到仅有特定范围的日期可选择。
- en: '![How to do it...](img/2186_04_04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_04_04.jpg)'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Both the `minDate` and `maxDate` options accept a variety of formats. In our
    example here, we gave the `minDate` option a `Date` object, representing today.
    This means that the user cannot select any dates prior to today. Further, we don't
    want to allow the user to select any dates past two weeks into the future. This
    is easy to specify by giving the `maxDate` option a delta of `14` days.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`minDate`和`maxDate`选项都接受各种格式。 在我们的示例中，我们给`minDate`选项一个代表今天的`Date`对象。 这意味着用户不能选择今天之前的任何日期。
    此外，我们不希望允许用户选择任何日期超过未来两周。 通过给`maxDate`选项提供`14`天的增量，这很容易指定。'
- en: There's more...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The restricted date range of a given datepicker instance doesn't have to be
    statically defined. The actual range might depend on something dynamic within
    the UI such as another datepicker selection.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 给定日期选择器实例的受限日期范围不一定要静态定义。 实际范围可能取决于UI中的某些动态内容，例如另一个日期选择器的选择。
- en: Let's take a look at how we might go about restricting the date range depending
    on the selection of another date. We'll create two datepicker widgets. When the
    user selects a date in the first widget, the second widget is enabled with an
    updated range restriction. The user cannot select a date before the first datepicker.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何限制日期范围，取决于选择另一个日期。 我们将创建两个日期选择器小部件。 当用户在第一个小部件中选择日期时，将使用更新的范围限制启用第二个小部件。
    用户不能在第一个日期选择器之前选择日期。
- en: 'Here is the markup we''ll use for the two datepickers:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将用于两个日期选择器的标记：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And here is the code to create our two datepicker widgets:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建两个日期选择器小部件的代码：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By default, the `#stop` datepicker is disabled because we need to know what
    the `minDate` value should be.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`＃stop`日期选择器被禁用，因为我们需要知道`minDate`值应该是什么。
- en: '![There''s more...](img/2186_04_05.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容... ](img/2186_04_05.jpg)'
- en: But once the user makes a selection in the `#start` datepicker, we can make
    a selection in the `#stop` datepicker—we just can't select anything prior to the
    selection we made in the `#start` datepicker.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 但是一旦用户在`＃start`日期选择器中做出选择，我们就可以在`＃stop`日期选择器中做出选择-我们只是不能在`＃start`日期选择器中的选择之前选择任何内容。
- en: '![There''s more...](img/2186_04_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/2186_04_06.jpg)'
- en: The `#start` datepicker enables and updates the `#stop` datepicker when a selection
    is made. It enables the widget and passes the value of `getDate` as the `minDate`
    option. This forces the user in one direction based on a prior selection.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`#start`日期选择器在进行选择时启用并更新`#stop`日期选择器。 它启用小部件并将`getDate`的值作为`minDate`选项传递。 这基于先前选择进行单向强制用户。'
- en: Hiding the input field
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏输入字段
- en: The goal of the datepicker widget is to populate a text `input` element once
    the user makes a selection. So the widget has two uses for the `input` element.
    First, it listens for `focus` events on the `input` element. This is how it knows
    when to display the calendar selector. Second, once the selection is made, the
    `input` element value is updated to reflect the date in the chosen format.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择器小部件的目标是在用户进行选择后填充文本`input`元素。 因此，小部件对于`input`元素有两种用途。 首先，它监听`input`元素上的`focus`事件。
    这是它知道何时显示日历选择器的方式。 其次，一旦做出选择，`input`元素的值会更新以反映所选格式的日期。
- en: Presenting the user with an `input` element would work fine in the majority
    of cases. But perhaps for some reason, an input doesn't suit your UI well. Maybe
    we need a different approach to displaying the calendar and storing/displaying
    the selection.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 向用户呈现一个 `input` 元素在大多数情况下都可以正常工作。但也许由于某些原因，输入框并不适合您的 UI。也许我们需要一种不同的方法来显示日历并存储/显示选择。
- en: In this section, we'll look at an alternative approach to just using the datepicker
    `input` element. We'll use a **button** widget to trigger the calendar display,
    and we'll disguise the `input` element as being something else.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨一种替代方法，而不仅仅使用日期选择器 `input` 元素。我们将使用一个 **button** 小部件来触发日历显示，并且我们将伪装
    `input` 元素，使其看起来像是其他东西。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Let's use the following HTML for this example. We'll lay out four date sections
    where the user needs to press a button in order to interact with the datepicker
    widget.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下 HTML 示例。我们将布置四个日期部分，用户需要按按钮才能与日期选择器小部件交互。
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The first thing we'll need to make our date sections work as expected is some
    CSS. This is important not only for laying out the UI we're building, but also
    for disguising the `input` element, so that the user doesn't know it's there.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使日期部分按预期工作的第一件事是一些 CSS。这不仅对于布置我们正在构建的 UI 非常重要，还对于伪装 `input` 元素很重要，以便用户不知道它在那里。
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we'll write the JavaScript code necessary to instantiate the datepicker
    and button widgets.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将编写 JavaScript 代码来实例化日期选择器和按钮小部件。
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With that, we now have four date sections where the user can click on the date
    button to the right of the label and get the calendar displayed. They pick a date,
    and the calendar is hidden. You'll notice that our CSS styles have hidden the
    `input` element.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，现在我们有了四个日期部分，用户可以单击标签右侧的日期按钮来显示日历。他们选择一个日期，然后日历就会隐藏起来。您会注意到我们的 CSS 样式已经隐藏了
    `input` 元素。
- en: '![How to do it...](img/2186_04_07.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_04_07.jpg)'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Most of the CSS style rules in this example are required for laying out the
    UI components, `label`, `buttons`, and `input`. You'll notice that until a date
    is selected, the input isn't visible. This is because it has no text value yet,
    and because we've removed `border` in our `div.date-section` input CSS selector.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中的大多数 CSS 样式规则用于布局 UI 组件、`label`、`buttons` 和 `input`。您会注意到，在选择日期之前，输入框是不可见的。这是因为它尚无文本值，而且因为我们已经在我们的
    `div.date-section` 输入 CSS 选择器中删除了 `border`。
- en: The first thing our JavaScript code does on page load is create datepicker widgets
    for each input element. We pass a custom string along to the `dateFormat` option
    too. For each date section, we have a button. We use the button widget here to
    create a calendar icon button that when clicked, displays the calendar. We do
    this by calling `datepicker( "show" )`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 JavaScript 代码在页面加载时首先为每个输入元素创建日期选择器小部件。我们还将自定义字符串传递给 `dateFormat` 选项。对于每个日期部分，我们都有一个按钮。我们在此处使用按钮小部件来创建一个日历图标按钮，当单击时显示日历。我们通过调用
    `datepicker( "show" )` 来实现这一点。
- en: Additional calendar data and controls
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加的日历数据和控件
- en: The datepicker widget has a variety of additional data and control options that
    may be exposed by the developer using the widget. These are simple Boolean configuration
    options that turn on the data or the control.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择器小部件有各种附加数据和控件选项，开发人员可以使用该小部件公开这些选项。这些都是简单的布尔配置选项，用于打开数据或控件。
- en: Getting started
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: Let's prepare two `div` elements with which we can create two inline datepicker
    instances.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备两个 `div` 元素，用它们可以创建两个内联日期选择器实例。
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's create the two datepicker widgets. We're creating two widgets so that
    we can contrast the differences between a regular datepicker and one with expanded
    data and controls.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个日期选择器小部件。我们创建两个小部件，以便我们可以对比普通日期选择器和具有扩展数据和控件的日期选择器之间的差异。
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now you can see the differences between the two rendered datepickers. The latter
    has been expanded with additional controls and data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以看到两个渲染的日期选择器之间的差异。后者已经通过附加的控件和数据进行了扩展。
- en: '![How to do it...](img/2186_04_08.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/2186_04_08.jpg)'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'All we''ve done with the expanded `datepicker` instance is turn on some features
    that are turned off by default. These are as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对扩展的 `datepicker` 实例所做的所有工作都是打开一些默认关闭的功能。具体如下：
- en: '`changeYear`: This enables the year drop-down menu.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`changeYear`: 这样可以启用年份下拉菜单。'
- en: '`changeMonth`: This enables the month drop-down menu.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`changeMonth`: 这样可以启用月份下拉菜单。'
- en: '`showButtonPanel`: This enables the **Today** and **Done** buttons at the bottom
    of the calendar.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showButtonPanel`：这会在日历底部启用**今天**和**完成**按钮。'
- en: '`showOtherMonths`: This enables days being displayed from adjacent months.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showOtherMonths`：这会显示来自相邻月份的日期。'
- en: '`showWeek`: This enables the week-of-the-year column in the calendar.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showWeek`：这会在日历中启用一周中的列。'
