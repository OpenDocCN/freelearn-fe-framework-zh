["```js\nfunction isPalindrome(word) {\n  const lowerCaseWord = word.toLowerCase()\n  const reversedWord = lowerCaseWord.split('').reverse().join('')\n  return lowerCaseWord === reversedWord\n} \n```", "```js\nfunction isPalindrome(word: string): boolean {\n  const lowerCaseWord = word.toLowerCase()\n  const reversedWord = lowerCaseWord.split('').reverse().join('')\n  return lowerCaseWord === reversedWord\n} \n```", "```js\n console.log(isPalindrome('Level')) // true\n    console.log(isPalindrome('Anna')) // true\n    console.log(isPalindrome('Carlos')) // false\n    console.log(isPalindrome(101)) // TS Error\n    console.log(isPalindrome(true)) // TS Error\n    console.log(isPalindrome(false)) // TS Error \n```", "```js\ntype User = {\n  username: string\n  email: string\n  name: string\n  age: number\n  website: string\n  active: boolean\n}\nconst user: User = {\n  username: 'czantany',\n  email: 'carlos@milkzoft.com',\n  name: 'Carlos Santana',\n  age: 33,\n  website: 'http://www.js.education',\n  active: true\n}\n// Let's suppose you will insert this data using Sequelize...\nmodels.User.create({ ...user }} \n```", "```js\ntype User = {\n  username: string\n  email: string\n  name: string\n  age?: number\n  website: string\n  active: boolean\n} \n```", "```js\ninterface User {\n  username: string\n  email: string\n  name: string\n  age?: number\n  website: string\n  active: boolean\n} \n```", "```js\n// Extending an interface\ninterface IWork {\n  company: string\n  position: string\n}\ninterface IPerson extends IWork {\n  name: string\n  age: number\n}\n// Extending a type\ntype TWork = {\n  company: string\n  position: string\n}\ntype TPerson = TWork & {\n  name: string\n  age: number\n}\n// Extending an interface into a type\ninterface IWork {\n  company: string\n  position: string\n}\ntype TPerson = IWork & {\n  name: string\n  age: number\n} \n```", "```js\n// Implementing an interface\ninterface IWork {\n  company: string\n  position: string\n}\nclass Person implements IWork {\n  name: 'Carlos'\n  age: 35\n}\n// Implementing a type\ntype TWork = {\n  company: string\n  position: string\n}\nclass Person2 implements TWork {\n  name: 'Cristina'\n  age: 34\n}\n// You can't implement a union type\ntype TWork2 = {   company: string;   position: string } | {   name: string;   age: number }\nclass Person3 implements TWork2 {\n  company: 'Google'\n  position: 'Senior Software Engineer'\n} \n```", "```js\ninterface IUser {\n  username: string\n  email: string\n  name: string\n  age?: number\n  website: string\n  active: boolean\n}\ninterface IUser {\n  country: string\n}\nconst user: IUser = {\n  username: 'czantany',\n  email: 'carlos@milkzoft.com',\n  name: 'Carlos Santana',\n  country: 'Mexico',\n  age: 35,\n  website: 'http://www.js.education',\n  active: true\n} \n```", "```js\nimport styled from 'styled-components'\nexport namespace CSS {\n  export const InputWrapper = styled.div`\n    padding: 10px;\n    margin: 0;\n    background: white;\n    width: 250px;\n  `\n  export const InputBase = styled.input`\n    width: 100%;\n    background: transparent;\n    border: none;\n    font-size: 14px;\n  `\n} \n```", "```js\nimport React, { ComponentPropsWithoutRef, FC } from 'react'\nimport { CSS } from './Input.styled'\nexport interface Props extends ComponentPropsWithoutRef<'input'> {\n  error?: boolean\n}\nconst Input: FC<Props> = ({\n  type = 'text',\n  error = false,\n  value = '',\n  disabled = false,\n  ...restProps\n}) => (\n    <CSS.InputWrapper style={error ? { border: '1px solid red' } : {}}>\n      <CSS.InputBase type={type} value={value} disabled={disabled} {...restProps} />\n    </CSS.InputWrapper>\n  ) \n```", "```js\n type Theme = 'light' | 'dark' \n```", "```js\n{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"alwaysStrict\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"downlevelIteration\": true,\n    \"esModuleInterop\": true,\n    \"experimentalDecorators\": true,\n    \"jsx\": \"react-jsx\",\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"noEmit\": false,\n    \"noFallthroughCasesInSwitch\": false,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"strictFunctionTypes\": true,\n    \"strictNullChecks\": true,\n    \"suppressImplicitAnyIndexErrors\": false,\n    \"target\": \"ESNext\"\n  },\n  \"exclude\": [\"node_modules\", \"dist\", \"coverage\", \".vscode\", \"**/__tests__/*\"]\n} \n```", "```js\n{\n  \"extends\": \"./tsconfig.common.json\",\n  \"compilerOptions\": {\n    \"baseUrl\": \"./packages\",\n    \"paths\": {\n      \"@web-creator/*\": [\"*/src\"]\n    }\n  }\n} \n```"]