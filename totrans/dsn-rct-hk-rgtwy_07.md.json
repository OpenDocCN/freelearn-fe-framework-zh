["```js\nconst Title = () => {\n  const [count, dispatch] = useState(0)\n  const onClick = () => {\n    dispatch(count + 1)\n  }\n\n  return ( \n    <>\n      <div onClick={onClick}>{count}</div>\n      ...\n    </>\n  )\n}\n```", "```js\nconst ThumbUp = () => {\n  // made up count\n  return count > 5 ? \"Awesome\" : \"\"\n}\n```", "```js\nconst Branch = () => {\n   const [count, dispatch] = useState(0)\n   const onClick = () => {\n     dispatch(count + 1)\n   }\n\n   return (\n     <>\n       <div>\n         ...\n         <Title count={count} onClick={onClick} />  \n         ...\n       </div>\n       <div>\n         ...\n         <ThumbUp count={count} />\n         ...\n       </div>\n     </>\n   )\n}\n```", "```js\nlet dispatch2\nconst ThumbUp = () => {\n  const [count, dispatch] = useState(0)\n  dispatch2 = dispatch\n  return count > 5 ? \"Awesome\" : \"\"\n}\n```", "```js\nconst Title = () => {\n  const [count, dispatch] = useState(0)\n  const onClick = () => { \n    dispatch(v => v + 1)\n    dispatch2(v => v + 1)\n  }\n\n  return <div onClick={onClick}>{count}</div>\n}\n```", "```js\nconst UserContext = createContext(defaultValue)\nexport default UserContext\n```", "```js\nimport UserContext from './UserContext'\nconst Branch = () => {\n  return (    \n    <UserContext.Provider value={...}>      \n    ...    \n    </UserContext.Provider>  \n  )\n}\n```", "```js\nconst Branch = ({ user, theme }) => {\n  return (\n    <ThemeContext.Provider value={theme}>\n      <UserContext.Provider value={user}>\n        ...\n      </UserContext.Provider>\n    </ThemeContext.Provider>\n  )\n}\n```", "```js\nconst Branch = ({ theme1, theme2 }) => {\n  return (\n    <ThemeContext.Provider value={theme1}>\n      // A. value = theme1\n      <ThemeContext.Provider value={theme2}>\n        // B. value = theme2\n      </ThemeContext.Provider>\n      // C. value = theme1\n    </ThemeContext.Provider>\n    // D. value = defaultTheme\n  )\n}\n```", "```js\nconst ThemeContext = React.createContext(defaultTheme)\n```", "```js\nconst defaultTheme = {\n  mode: 'light'\n}\n```", "```js\nimport UserContext from './UserContext'\nconst Title = () => {  \n  const user = useContext(UserContext)\n  return <div>{user.name}</div>\n}\n```", "```js\nfunction useContext(context) {\n  const contextItem = {      \n    context: context,      \n    next: null,    \n  }    \n  if (lastDependency === null) {      \n    lastDependency = contextItem      \n    updatingFiber.dependencies = {        \n      firstContext: contextItem,      \n    }    \n  } else {      \n    lastDependency =        \n      lastDependency.next = contextItem    \n  }\n  ...\n}\n```", "```js\nfunction App({ initialUser }) {\n  const user = initialUser\n  return (\n    <div>\n      <Header user={user} />\n      <Main user={user} />\n    </div>\n  )\n}\nconst Header = ({ user }) => {\n  return <Logo user={user} />\n}\nconst Logo = ({ user }) => {\n  return (\n    <div>\n      <img url={ user.imageUrl } />\n      <span>{ user.username }</span>\n    </div>\n  )  \n}\n```", "```js\nconst UserContext = React.createContext()\nexport default UserContext\n```", "```js\nimport UserContext from './UserContext'\nconst App = ({ initialUser }) => {\n  const [user, changeUser] = useState(initialUser)\n  const value = { user, changeUser }\n  return (\n    <UserContext.Provider value={value}>\n      <div>\n        <Header />\n        <Site />\n      </div>\n    </UserContext.Provider>\n  )\n}\n```", "```js\nimport UserContext from './UserContext'\nconst Logo = () => {\n  const { user } = useContext(UserContext)\n  return (\n    <div>\n      <img url={ user.imageUrl } />\n      <span>{ user.username }</span>\n    </div>\n  )  \n}\n```", "```js\nimport UserContext from './UserContext'\nconst Greeting = () => {\n  const { user } = useContext(UserContext)\n  return <h1>Hello {user.username}</h1>\n}\n```", "```js\nimport UserContext from './UserContext'\nconst Logo = () => {\n  const { user, changeUser } = useContext(UserContext)\n  const { imageUrl, username } = user\n  const authenticated = username != undefined\n  const onLogout = () => { changeUser({}) }\n  const onLogin = () => { // redirect to LoginForm }\n  return (\n    <div>\n      {authenticated ? (\n        <>\n          <img url={ imageUrl } />\n          <span>{ username }</span>\n           <button onClick={onLogout}>Logout</button>\n        </>\n      ) : (\n           <button onClick={onLogin}>Login</button>\n      )}\n    </div>\n  )  \n}\n```", "```js\nconst LoginForm = () => {\n  const { changeUser } = useContext(UserContext)\n  const onSubmit = (_user) => {\n    changeUser(_user)\n    // redirect to home page\n  }\n  return ...\n}\n```", "```js\nconst ThemeContext = React.createContext({\n  mode: 'light',  // or 'dark'\n})\n```", "```js\nconst Button = () => {\n  const theme = useContext(ThemeContext)\n  return (\n    <ButtonStyle mode={theme.mode}>\n     Ok\n    </ButtonStyle>\n}\n```", "```js\nconst color = props => \n  props.mode === 'light' : 'black' ? 'white'\nconst ButtonStyle = styled.button`\n  color: ${color};\n`\n```", "```js\nconst App = ({ theme }) => {\n  return (\n    <ThemeContext.Provider value={theme}>\n      ...\n    </ThemeContext.Provider>\n}\n```", "```js\nconst ThemeContext = React.createContext({\n  primaryColor: 'blue',\n  secondaryColor: 'red'\n})\n```", "```js\nconst color = props => props.primaryColor\nconst ButtonStyle = styled.button`\n  color: ${color};\n`\n```", "```js\nconst Header = () => {\n  return (\n    <ThemeContext.Provider value={{ mode: 'dark' }}>\n      <Button />\n    </ThemeContext.Provider>\n  )\n}\n```", "```js\nconst Header = () => {\n  const theme = useContext(ThemeContext)\n  const value = { ...theme, primaryColor: 'blue' }\n  return (\n    <ThemeContext.Provider value={value}>\n      ...\n    </ThemeContext.Provider>\n  )\n}\n```", "```js\nconst DefaultCell = ({ value }) => {\n  return <div>{value}</div>\n}\n```", "```js\nconst fruits = [\n  { title: 'Apple', status: true },\n  { title: 'Orange', },\n  { title: 'Strawberry' },\n  { title: 'Pineapple', status: true },\n  { title: 'Watermelon' }\n]\n```", "```js\nconst StatusCell = ({ value }) => {\n  const s = value ? 'Nice' : 'Ok'\n  return <div>{s}</div>\n}\n```", "```js\nconst TableCell = ({ col, row }) => {\n  const value = row[col.name]\n  const Component = col.Cell || DefaultCell\n  return <Component value={value} />\n}\n```", "```js\nconst cols = [\n  { name: 'title' },\n  { name: 'status', Cell: StatusCell }\n]\n```", "```js\nconst TableContext = React.createContext({\n  rows: [],\n  cols: [],\n  row: {}\n})\nexport default TableContext\n```", "```js\nimport TableContext from './TableContext'\nconst TableRow = ({ row }) => {\n  const table = useContext(TableContext)\n  const value = { ...table, row }\n  const cols = table.cols\n  return (\n    <TableContext.Provider value={value}>\n      <TableRowStyle>\n        {cols.map(col => {\n          <TableCell\n            row={row}\n            col={col}\n          />\n        })}\n      </TableRowStyle>\n    </TableContext.Provider>\n  )\n}\n```", "```js\nconst cols = [\n  { name: 'title' },\n  { name: 'status', Cell: StatusCell },\n  { name: 'combo', Cell: ComboCell }\n]\n```", "```js\nconst ComboCell = () => {\n  const { row } = useContext(TableContext)\n  const s = row.status ? 'Nice' : 'Ok'\n  return <div>{row.title} – {s}</div> \n}\n```", "```js\nconst Table = ({ cols, rows, setRows }) => {\n  const value = { cols, rows, setRows }\n  return (\n    <TableContext.Provider value={value}>\n      <TableStyle>\n        {rows.map(row => {\n          <TableRow row={row} />\n        })}\n      </TableStyle>\n    </TableContext.Provider>\n  )\n}\n```", "```js\nconst DeleteCell = () => {\n  const { row, rows, setRows } = useContext(TableContext)\n  const onClick = () => {\n    const newRows = rows.filter(r => r.title !== row.title)\n    setRows(newRows)\n  }\n\n  return (\n    <div>\n      <button onClick={onClick}>Remove</button>\n    </div>\n  )\n}\n```", "```js\nconst cols = [\n  { name: 'combo', Cell: ComboCell },\n  { name: 'action', Cell: DeleteCell }\n]\nconst App = () => {\n  const [rows, setRows] = useState(fruits)\n  return <Table\n    rows={rows}\n    cols={cols}\n    setRows={setRows}\n  />\n}\n```", "```js\nfunction updateContextProvider(fiber) {\n  var providerType = fiber.type\n  var context = providerType._context\n  var newProps = fiber.pendingProps\n  var oldProps = fiber.memoizedProps\n  var newValue = newProps.value\n  if (oldProps !== null) { ... }\n  var children = newProps.children\n  reconcileChildren(fiber, children)\n  return fiber.child\n}\n```", "```js\n  if (oldProps !== null) {\n    var oldValue = oldProps.value\n    if (oldValue === newValue) {\n      if (oldProps.children === newProps.children) {\n        return bailoutOnAlreadyFinishedWork(fiber)\n      }\n    } else {\n      propagateContextChange(fiber, context)\n    }\n  }\n```", "```js\nfunction propagateContextChange(work, context) {\n  var fiber = work.child;\n  while (fiber !== null) {\n    var nextFiber = void 0\n    var list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n      var dependency = list.firstContext;\n      while (dependency !== null) {\n        if (dependency.context === context) {\n          scheduleWorkOnParentPath(fiber.return) \n          break\n        }\n        dependency = dependency.next;\n      }\n    } else {\n      nextFiber = fiber.child;\n    }\n    ...\n    fiber = nextFiber;\n  }\n}\n```", "```js\nConst provider1 = (value) => {\n  const provider2 = (value) => {\n    const provider3 = (value) => {\n      console.log(value)  \n    }\n    provider3(3)\n  }\n  provider2(2)\n}\nprovider1(1)\n```", "```js\nfunction push(cursor, value) {\n  index++\n  valuesStack[index] = cursor.current\n  cursor.current = value\n}\n```", "```js\nfunction pop(cursor) {\n  if (index < 0) return\n  cursor.current = valueStack[index]\n  valueStack[index] = null\n  index--\n}\n```", "```js\nfunction updateContextProvider(fiber) {\n  ...\n  pushProvider(fiber, newValue)\n  if (oldProps !== null) { ... }\n  ...\n}\n```", "```js\nfunction pushProvider(fiber, nextValue) {\n  var context = fiber.type._context\n  push(valueCursor, context._currentValue)\n  context._currentValue = nextValue;\n}\n```", "```js\nfunction popProvider(fiber) {\n  var currentValue = valueCursor.current\n  pop(valueCursor)\n  var context = fiber.type._context\n  context._currentValue = currentValue\n}\n```"]