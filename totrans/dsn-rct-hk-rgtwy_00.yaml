- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*React* has been my main development tool lately. In my experience both as
    a developer and a computer user, I found most of what I love in the end is non-heavy
    stuff. While big names come and go often, there''re certain things left behind.
    For instance, the way to build a website has been reshaped and refined over the
    past twenty years, but the general process of building it hasn''t changed much.
    You still need to create an *HTML* file, design the layout, and host it somewhere
    on a server.'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to the **user interface** (**UI**), there's another topic that
    can benefit you in a similar way. That is state. From *jQuery* and *Angular* to
    *React*, from the web to other non-desktop platforms (such as *Electron* or *React
    Native*), no matter where you go, there's a technical question that you need to
    answer now *– how does the screen know there's a change to apply?* When I was
    back in college, I never asked this type of question. I generally assumed the
    computer just worked that way.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, now I know the computer works that way because someone made it. What's
    fascinating about the UI is when the state gets in the picture. Back in the early
    days, we didn't talk about state at all. But now state is everywhere, although
    there's still no textbook definition for it or how we should learn it in the first
    place. Suffice to say, state is still a relatively young topic in the web development
    industry.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, I'll attempt, by using *React* as the underlying technology, to
    explore and learn how states are introduced and implemented. I hope, by doing
    that, we will have a better picture in the end to answer the question *– how is
    a render engine driven by states?*
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ideal reader of this book is an engineer who has been writing *JavaScript*
    for a few years but doesn't necessarily have experience with *React* and/or the
    function component. For readers with less *JavaScript* experience, we include
    a live playground via *CodePen* so that you can experiment with each topic in
    no time.
  prefs: []
  type: TYPE_NORMAL
- en: If you do have experience with *React*, or even Hooks, that's fine; this book
    will show you how Hooks are implemented within the function component. Moreover,
    a stripped-down version of the *React* source code pertaining to each Hook is
    also included in each chapter, so you will get a deeper understanding if you are
    an experienced *React* programmer.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B17963_01_Epub.xhtml#_idTextAnchor018), *Introducing the Function
    Component*, explains what a function component is with an explanation of its props
    and the basic parent/child relationship. You will then get some tips on how to
    write a function component. At the end of the chapter, you will see a practical
    function component example, `Nav`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B17963_02_Epub.xhtml#_idTextAnchor055), *Crafting States in Functions*,
    shows how to craft a special variable called state in function components. We
    will see what benefits a state can provide, including requesting a new update
    and listening to a value change. We will also see an example of applying a state
    to a **Single Page Application** (**SPA**). We will also take a close look at
    what role states play in the *UI*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B17963_03_Epub.xhtml#_idTextAnchor080), *Hooking into React*,
    goes through the challenges we face when creating a good state solution, and then
    we''ll see how *React* architects provide the solution with the underlying Hook.
    We will then introduce Hooks, learn about their calling order, and learn how to
    avoid running into the conditional Hook issue in real applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B17963_04_Epub.xhtml#_idTextAnchor113), *Use State to Jumpstart
    Components*, covers built-in Hooks, starting with the `useState` Hook. We will
    first explain how state is used in *React* and then walk through the data structure
    and source code behind `useState`, and we''ll also describe common usages of dispatching
    states. We''ll give `useState` a test drive and provide two practical examples
    of applying `useState` to the `Avatar` and `Tooltip` components.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B17963_05_Epub.xhtml#_idTextAnchor157), *Use Effect to Handle
    Side Effects*, introduces side effects, walks through the data structure and source
    code behind `useEffect`, and provides various scenarios in which you invoke effects.
    We will also demonstrate a couple of pitfalls of using `useEffect` and ways to
    avoid them. And we''ll use `useEffect` in two practical examples, Window Size
    and a Fetch API.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B17963_06_Epub.xhtml#_idTextAnchor203), *Use Memo to Boost Performance*,
    explains how we can run into performance degradation issues in a typical web application.
    Then we will walk through the design and source code behind `useMemo` and describe
    various ways of reusing a value conditionally. We''ll then apply the optimization
    technique to two common cases, clicking to search and debouncing the search.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B17963_07_Epub.xhtml#_idTextAnchor237), *Use Context to Cover
    an Area*, introduces an area updates and how *React* contexts are used to share
    a value to an area. Then, we will walk through the data structure and source code
    behind `useContext` to consume the shared value. At the end of the chapter, we''ll
    provide two practical examples of applying contexts to a Theme and a Table.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B17963_08_Epub.xhtml#_idTextAnchor278), *Use Ref to Hide Stuff*,
    explains how to access a *DOM* element via a ref, and we''ll walk through the
    design and source code behind the `useRef` Hook. We will also describe how to
    work with a persistent value without dispatching an update. Finally, we''ll apply
    refs to a couple of practical problems, such as clicking outside of the menu,
    avoiding memory leaks, setting up a mule, and locating the current value.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B17963_09_Epub.xhtml#_idTextAnchor314), *Use Custom Hooks to
    Reuse Logic*, gathers all the Hooks we have learned about so far and explains
    how to create a custom Hook for our own needs. We will introduce custom Hooks
    and then write a couple of custom Hooks step by step, including `useToggle`, `useWindow`,
    `useAsync`, `useDebounced`, `useClickOutside`, `useCurrent`, and `useProxy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B17963_10_Epub.xhtml#_idTextAnchor363), *Building a Website
    with React*, discusses *React* in general, especially the role *React* plays in
    web development. We will approach this topic from three perspectives to see how
    *React* puts resources together to build a site, including *JavaScript ES6* features,
    *CSS-in-JS* approaches, and the transformation from *HTML*-like lines into *JavaScript*
    expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the goals of this book is for you to get hands-on experience using *React*
    and Hooks. Following are a couple of options that you can follow to get the most
    out of the content before you start.
  prefs: []
  type: TYPE_NORMAL
- en: Refresh your knowledge of React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you haven''t used *React* lately or are not familiar with its cutting-edge
    features, I recommended you jump to [*Chapter 10*](B17963_10_Epub.xhtml#_idTextAnchor363),
    *Building a Website with React*, to get an overview of the three building blocks
    that *React* relies upon to build a website: JavaScript, CSS, and HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: While reading the book, feel free to visit this chapter often if you run into
    new syntax that you are not familiar with, or you simply want to gain more insights
    into how each building block is utilized in *React*.
  prefs: []
  type: TYPE_NORMAL
- en: Use a browser without building the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t have a local environment to work with the code or you simply
    don''t want to build the code, you can access the examples from an online server
    at [https://codepen.io/windmaomao/pen/ExvYPEX](https://codepen.io/windmaomao/pen/ExvYPEX).
    You should get `Hello World` printed on your screen in no time. Each chapter comes
    with a couple of playground links that you can click to follow. They appear as
    follows in the book:'
  prefs: []
  type: TYPE_NORMAL
- en: Playground – Hello World
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to play with this online example at [https://codepen.io/windmaomao/pen/ExvYPEX](https://codepen.io/windmaomao/pen/ExvYPEX).
  prefs: []
  type: TYPE_NORMAL
- en: Build the code yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are a hands-on person and would like to follow the code step by step
    in each chapter, you need to have *React* installed in one of your projects. Instructions
    to set up a *React* project from scratch are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: npm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Visit the Node.js website, [https://nodejs.org](https://nodejs.org), to grab
    the latest versions of `Node.js` and `npm`. Pick the right version for your operating
    system and install it. To find out if everything has been installed properly,
    open a terminal, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you see a version number returned by the preceding command, Node.js has been
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: Create React App
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can get your *React* project up and running quickly by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `my-app` with your desired application name. Once you have the projects
    ready, you can go into the `my-app` folder and launch it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That's it, you should see an application on your local computer. Now you can
    try the source code out by pasting our code over your project and compiling it
    locally.
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781803235950_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781803235950_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "The element can be as simple as `h1`, a `div` element,
    or it can be an artificial element that does things differently."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    "This flag can be used to decide if the UI should display the **Logout** or **Login** button."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or Important Notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '`customercare@packtpub.com` and mention the book title in the subject of your
    message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '`copyright@packt.com` with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've read *Designing React Hooks the Right Way*, we'd love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://www.packtpub.com/)
    [https://packt.link/r/1803235950/](https://packt.link/r/1803235950/) for this
    book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we're delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
