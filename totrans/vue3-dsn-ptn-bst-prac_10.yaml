- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Deploying Your Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您的应用程序
- en: Working on and developing our application would come to a sad end if we could
    not publish the final product. While quite straightforward, presenting our application
    on the internet does require attention to a few details and being familiar with
    some terms and hosting possibilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不能发布最终产品，那么我们在开发和我们的应用程序上的工作将走向一个悲伤的结局。虽然相当直接，但在互联网上展示我们的应用程序确实需要关注一些细节，并熟悉一些术语和托管可能性。
- en: 'In this chapter, we will learn about the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: What is involved in publishing a web application on the internet
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在互联网上发布网络应用程序涉及哪些内容
- en: Considerations for building our application for deployment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为部署构建我们的应用程序的考虑因素
- en: Becoming familiar with the terms and processes to register a domain
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉注册域名的术语和流程
- en: Configuring a web server to host our **Single-Page Application** (**SPA**) or
    **Progressive Web** **Application** (**PWA**)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置网络服务器以托管我们的**单页应用程序**（**SPA**）或**渐进式网络应用程序**（**PWA**）
- en: Securing our web application's server with Let’s Encrypt
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Let’s Encrypt保护我们的网络应用程序服务器
- en: The main purpose of this chapter is to give you the tools to understand the
    steps needed to publish and secure a website, and by extension, also our SPA or
    PWA.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目的是为您提供工具，以了解发布和保障网站所需的步骤，以及由此延伸出的我们的SPA或PWA。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter is mostly informative, but a few configuration files have been
    uploaded to the book’s repository as examples, which can be found here: [https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter10](https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter10).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要是信息性的，但已将一些配置文件上传到本书的存储库作为示例，可以在以下位置找到：[https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter10](https://github.com/PacktPublishing/Vue.js-3-Design-Patterns-and-Best-Practices/tree/main/Chapter10)。
- en: What is involved in publishing a web application?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布一个网络应用程序涉及哪些内容？
- en: 'Publishing a Vue 3 web application is not that much different from doing so
    for any other website, save for a few key differences. In this chapter, we will
    consider a clean installation, meaning that we will procure all the elements involved
    by ourselves. At its most basic, we need to consider the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 发布Vue 3网络应用程序与发布任何其他网站并没有太大的不同，除了几个关键差异。在本章中，我们将考虑一个干净的安装，这意味着我们将自行获取所有涉及的元素。在最基本的情况下，我们需要考虑以下内容：
- en: A domain name for our site/application
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们网站/应用程序的域名
- en: The destination path for our application
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用程序的目标路径
- en: The hosting service or type
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管服务或类型
- en: The web server software
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务器软件
- en: Procuring a security certificate
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取安全证书
- en: The preceding items also give us a simple formula for our preparations. Let’s
    go one by one, explaining each necessary term and concern as we move forward.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前述项目也为我们准备提供了一个简单的公式。让我们逐一解释，在前进的过程中解释每个必要的术语和关注点。
- en: Domains, Domain Name Servers (DNS), and DNS records
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域名、域名服务器（DNS）和DNS记录
- en: Every computer connected to a network receives a unique identificatory address
    to distinguish it from the others on the same network. These are called **Internet
    Protocol** (**IP**) addresses, and nowadays, there are two in operation – IP versions
    4 and 6.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到网络的每台计算机都会收到一个独特的标识地址，以区分同一网络上的其他计算机。这些被称为**互联网协议**（**IP**）地址，如今，有两种在运行——IP版本4和6。
- en: '`127.0.0.1`, which represents a loopback to our own computer. These addresses
    can also have a mask that defines a sub-segment in a network. Most likely, your
    home network uses this protocol internally.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`127.0.0.1`，代表回环到我们自己的计算机。这些地址也可以有一个掩码，用于定义网络中的子段。很可能是您的家庭网络内部使用此协议。'
- en: '`127.0.0.1` in IPv6 is `0000:0000:0000:0000:0000:0000:0000:0001`, which then
    can be abridged as `0:0:0:0:0:0:0:1` or just `::1`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv6中的`127.0.0.1`是`0000:0000:0000:0000:0000:0000:0000:0001`，然后可以缩写为`0:0:0:0:0:0:0:1`或简称为`::1`。
- en: There is much more regarding network addresses, but only with this brief introduction,
    it is already possible to see a usability issue here. These addresses work great
    for computers but don’t play nice with “*human memory.*” On the great internet,
    with millions of connected computers, using only IP addresses for navigation would
    be impossible. That is why there are special servers in the infrastructure of
    the web that provide a conversion from a “*human-friendly name*” into the right
    IP address. These friendly names are called **domains**, and the servers that
    provide the conversion are the **Domain Name Service** (**DNS**). All this is
    regulated by the **Internet Corporation for Assigned Names and Numbers** (**ICANN**)
    organization.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 关于网络地址还有很多内容，但仅通过这个简要介绍，我们已经可以看到这里存在一个可用性问题。这些地址对计算机来说工作得很好，但与“*人类记忆*”不太友好。在庞大的互联网上，有成百万的连接计算机，仅使用IP地址进行导航是不可能的。这就是为什么在网络的架构中有特殊的服务器，它们可以将“*人类友好的名称*”转换为正确的IP地址。这些友好的名称被称为**域名**，提供转换的服务器被称为**域名系统**（**DNS**）。所有这些都由**互联网名称与数字地址分配机构**（**ICANN**）组织进行监管。
- en: 'Domain names are what we use every day to access any website or application
    on the internet today. These are bought for a limited time from an entity authorized
    to sell them, called a **registrar**. Once the period has expired, there is the
    possibility for a limited time to renew the domain, and if not, it can be acquired
    by anyone else. Usually, domains are sold in terms of years, and prices vary greatly
    from a few cents to thousands of dollars. Domains are also organized in groups,
    separated by dots from right to left, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 域名是我们每天用来访问互联网上任何网站或应用程序的工具。这些域名是从有权销售它们的实体那里购买的，称为**注册商**。一旦期限到期，可以在有限的时间内进行续费，否则可以被其他人获得。通常，域名按年出售，价格从几美分到几千美元不等。域名也按组组织，从右到左由点分隔，如下所示：
- en: '![Figure 10.1 – The parts that make up a full domain name](img/Figure_10.01_B18602.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 构成完整域名各部分](img/Figure_10.01_B18602.jpg)'
- en: Figure 10.1 – The parts that make up a full domain name
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 构成完整域名各部分
- en: 'The top-level domain is managed by the ICANN, and while `.com` for commercial
    websites is the most famous, there are plenty of others to choose from, such as
    the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最高级域名由ICANN管理，虽然`.com`商业网站是最著名的，但还有许多其他选择，如下所示：
- en: '`.org`: For organizations'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.org`: 用于组织'
- en: '`.net`: For networks or portals of corporate intranets and other organizations'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.net`: 用于企业内部网或组织门户'
- en: '`.mil`: For military use'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.mil`: 用于军事用途'
- en: '`.gov`: For official government sites'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.gov`: 用于官方政府网站'
- en: 'New top-level domains are created often. You can find a growing list of them
    here: [https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 新的顶级域名经常被创建。您可以在以下位置找到它们的增长列表：[https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains](https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains)。
- en: 'When we buy a domain (such as **mydomain** in the previous figure), it is attached
    to a top-level domain of our choosing. **Registrars** give us the option to select
    a domain and check whether they are available for purchase. To be of any use,
    the domain needs to be registered on a DNS to point to an IP address. The way
    to do that is to create **DNS records**, which is often done through the same
    registrar that sells the domain, or we can record in the registrar the DNS that
    will have the destination IP. There’ll be more about this later, but for now,
    just keep present the concept in your mind. The most common DNS records for a
    domain are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们购买一个域名（如前图中的**mydomain**）时，它会附加到我们选择的顶级域名。**注册商**为我们提供了选择域名并检查它们是否可供购买的选择。为了发挥作用，域名需要在DNS上进行注册，以便指向一个IP地址。这样做的方式是创建**DNS记录**，这通常是通过出售域名的同一注册商完成的，或者我们可以在注册商处记录将具有目标IP的DNS。关于这一点，我们稍后会详细介绍，但现在是，请记住这个概念。域名最常见的DNS记录如下：
- en: '| **Record** **Type (name)** | **Value** **and description** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **记录** **类型（名称）** | **值和描述** |'
- en: '| `A` | An IPv4 address. This is the main record that points to the public
    IP of your server. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 一个IPv4地址。这是指向您的服务器公共IP的主要记录。 |'
- en: '| `AAAA` | An IPv6 address. Points to the public IPv6 address of your server.
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `AAAA` | 一个IPv6地址。指向您的服务器公共IPv6地址。 |'
- en: '| `CNAME` | Creates an alias to a domain, so you can point multiple domains
    to the same destination without creating multiple A/AAAA records. This can be
    used to create subdomains. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `CNAME` | 创建一个指向域的别名，因此您可以将多个域名指向同一目的地，而无需创建多个A/AAAA记录。这可以用于创建子域名。|'
- en: '| `TXT` | A plain text record, which is often used with some form of validation
    of ownership for a domain. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `TXT` | 一种纯文本记录，通常与某种形式的域所有权验证一起使用。|'
- en: Table 10.1 – DNS record types
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.1 – DNS记录类型
- en: Depending on the registrar and the service hired, you may never see or have
    to deal with these records, as some registrars/web hostings manage them automatically
    for you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据注册商和聘请的服务，您可能永远看不到或必须处理这些记录，因为一些注册商/网络托管商会自动为您管理它们。
- en: 'Subdomains do not need to be bought from a registrar, only configured. You
    can create as many as you please for your own domain. Some common subdomains are
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 子域名不需要从注册商那里购买，只需配置即可。您可以为您的域名创建尽可能多的子域名。以下是一些常见的子域名：
- en: '`www`: For **World Wide Web**, or a web page. Nowadays, this subdomain is often
    used as a synonym for the domain.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`www`：用于**万维网**，或一个网页。如今，这个子域名通常被用作域的同义词。'
- en: '`app`: For applications.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`：用于应用程序。'
- en: '`admin`: For administration access.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`：用于管理访问。'
- en: '`mail`: For email services.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mail`：用于电子邮件服务。'
- en: Using subdomains, you can host multiple websites off the same domain/host. We
    will see later how to configure one for our application on our web server. At
    this point, what we need to remember is that a domain or a subdomain will point
    as a final destination to your server.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用子域名，您可以在同一域名/主机上托管多个网站。我们将在稍后看到如何为我们的应用程序在Web服务器上配置一个。在此阶段，我们需要记住的是，域名或子域名将指向您的服务器作为最终目的地。
- en: A note about the loopback address
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关于回环地址的说明
- en: Following the previous examples, the “domain” name reserved for the loopback
    (home) address is `localhost`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前面的示例，为回环（本地）地址保留的“域名”是 `localhost`。
- en: The domain where our application will be hosted is the first step to having
    a presence on the internet. With it, we are in place to move to the next consideration
    – where it will be placed in that domain.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序将要托管的主机域是我们在互联网上拥有存在感的第一步。有了它，我们就位，可以转向下一个考虑因素——它将在该域中的位置。
- en: Considerations for building our application for deployment
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的应用程序以进行部署的注意事项
- en: 'Once we have our domain/subdomain, we need to decide (or know) on which path
    the application will be located. The path is what follows the domain, in segments
    separated by a forward slash (`/`) – for example, `mydomain.com/store/product.html`.
    These sections are called “paths” because they follow the same directory structure
    as mirrored in the local storage. Our application will be served through a `folder/subfolder/file...`).
    Internally, our server will match a domain request to the files in a local directory.
    Here is where we need to know whether the Vue application will be placed at the
    root, or on a path (directory), as we need to indicate this for the build process
    if we are using Vue Router in the web history mode (review [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130),
    *Single-Page Applications*, if you need a refresher on this topic). In this case,
    we need to make two modifications:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了我们的域名/子域名，我们需要决定（或知道）应用程序将位于哪个路径上。路径是跟随域的部分，由正斜杠(`/`)分隔的段——例如，`mydomain.com/store/product.html`。这些部分被称为“路径”，因为它们遵循与本地存储中镜像相同的目录结构。我们的应用程序将通过一个
    `folder/subfolder/file...`）来提供服务。内部，我们的服务器将匹配域名请求到本地目录中的文件。这就是我们需要知道Vue应用程序是否将放置在根目录，还是在一个路径（目录）上，因为如果我们使用Vue
    Router在Web历史模式下，我们需要为此指示构建过程（如果您需要复习此主题，请参阅[*第5章*](B18602_05.xhtml#_idTextAnchor130)，“单页应用程序”）。在这种情况下，我们需要进行两项修改：
- en: Indicate the *root* path for the application in our Router configuration
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的路由器配置中指明应用程序的*根*路径
- en: Configure the web server to alter the directory/file service and route all the
    requests to the `index.html` file
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置网络服务器以更改目录/文件服务并将所有请求路由到 `index.html` 文件
- en: 'If our application is placed in `mydomain.com`**/app** using the web history
    mode, then we need to alter our router definition by passing the “base path” to
    the creator function. So, if we look at the router from our SPA example application
    in [*Chapter 5*](B18602_05.xhtml#_idTextAnchor130), *Single-Page Applications*,
    we can modify it as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序使用网络历史模式放置在 `mydomain.com`**/app**，那么我们需要通过将“基本路径”传递给创建函数来修改我们的路由定义。因此，如果我们查看我们的SPA示例应用程序中的路由，即[*第5章*](B18602_05.xhtml#_idTextAnchor130)，“单页应用程序”，我们可以按以下方式修改它：
- en: /chapter 5/to-do SPA/src/router/index.js
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: /chapter 5/to-do SPA/src/router/index.js
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note the minor change, where we pass the base path to the `createWebHistory`
    constructor instead of using `createWebHashHistory()`. Of course, if the application
    uses the hash mode, it doesn’t matter where it is placed in our path. This is
    because in this mode, all routing navigation will be passed after the hash while
    pointing to our `index.html` file. For example, if our router has a route called
    `/description`, using the hash mode will make the address `mydomain.com/app``mydomain.com/app`**/description**
    (the web history mode).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到的小变化，我们将基本路径传递给`createWebHistory`构造函数，而不是使用`createWebHashHistory()`。当然，如果应用程序使用哈希模式，它放置在我们的路径中的位置无关紧要。这是因为在这种模式下，所有路由导航都将传递给哈希，并指向我们的`index.html`文件。例如，如果我们的路由器有一个名为`/description`的路由，使用哈希模式将使地址变为`mydomain.com/app/description`（Web历史模式）。
- en: Hashes in web addresses
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 网址中的哈希值
- en: The hash in an address indicates a link to a section on the page/file, according
    to the HTML standard, and is used by Vue to manage the defined routes when in
    the hash mode.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 地址中的哈希表示指向页面/文件的某个部分的链接，根据HTML标准，Vue在哈希模式下管理定义的路由时使用它。
- en: 'Having provisioned the destination of our application, we can now build the
    production code through Vite with the following command on the terminal:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在为我们的应用程序指定目的地后，我们现在可以通过在终端上运行以下命令通过Vite构建生产代码：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, the final production-ready files for our entire application will
    be placed in the `/dist` folder (at the same level as our `/src` folder). Now,
    with our built distribution files, we are ready to upload them to a server once
    we have set the proper configuration.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们整个应用程序的最终生产就绪文件将放置在`/dist`文件夹中（与我们的`/src`文件夹处于同一级别）。现在，有了我们的构建分发文件，一旦我们设置了适当的配置，我们就可以将它们上传到服务器。
- en: Web server options and configurations
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web服务器选项和配置
- en: 'When is time to upload our application to a server, we are faced with many
    options, based on the type of service and web server application provided. This
    combination of items is usually referred to as the “hosting” server, which includes
    the operating system, machine configuration, architecture type, and especially,
    the web server software. Here is a list of some of the most common options for
    each category:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们准备将应用程序上传到服务器时，我们会面临许多选项，这些选项基于提供的服务类型和Web服务器应用程序。这些项目的组合通常被称为“托管”服务器，包括操作系统、机器配置、架构类型，特别是Web服务器软件。以下是每个类别的一些最常见选项列表：
- en: '| **Operating system** | **Linux** **or Windows** | **For our Vue 3 application,
    this choice** **is inconsequential** |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **操作系统** | **Linux** **或 Windows** | **对于我们Vue 3应用来说，这个选择** **无关紧要** |'
- en: '| **Hosting type** | **Shared** | Our application will reside in a server in
    a private area of the storage but will share all the resources with other applications.
    Access to configuration is usually done through a web control panel |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **托管类型** | **共享** | 我们的应用程序将驻留在存储的私有区域的服务器上，但将与其他应用程序共享所有资源。通常通过网页控制面板进行配置访问
    |'
- en: '| **Virtual Private** **Server (VPS)** | We are provided with a virtual machine
    with full access to the entire configuration and resources, usually through a
    direct connection with a remote terminal |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **虚拟专用服务器 (VPS)** | 我们获得了一个具有完全访问整个配置和资源的虚拟机，通常通过远程终端的直接连接 |'
- en: '| **Managed VPS** | Like a VPS, but we are provided with a web control panel
    or other services to manage the machine |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **托管VPS** | 与VPS类似，但我们提供网页控制面板或其他服务来管理该机器 |'
- en: '| **Private server** | Here, we rent real hardware from the hosting provider
    and have full liberty to all their resources |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **私有服务器** | 在这里，我们从托管提供商那里租用真实硬件，并拥有所有资源的完全自由 |'
- en: '| **Self-hosted** | We connect a server directly to the internet by our own
    means and an internet connection |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **自托管** | 我们用自己的方式将服务器直接连接到互联网，并拥有互联网连接 |'
- en: '| **Collocated** | We provide a server to a server farm, where they take care
    of physical needs. We manage the server remotely with full control of software
    and hardware |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **托管** | 我们向服务器农场提供服务器，他们负责物理需求。我们通过远程管理服务器，拥有软件和硬件的完全控制权 |'
- en: '| **Web server** | **Apache HTTP** | This server is stable and heavily used
    in Linux and shared hosting |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **Web服务器** | **Apache HTTP** | 该服务器在Linux和共享托管中稳定且使用广泛 |'
- en: '| **Nginx** | A smaller and fast web server, famous for managing very well
    a large number of concurrent connections, with efficient use of resources. Very
    easy to manage and very popular for VPS hosting |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **Nginx** | 一个较小且快速的Web服务器，以其高效管理大量并发连接而闻名，资源使用效率高。非常易于管理，在VPS托管中非常受欢迎 |'
- en: Table 10.2 - Common hosting options per category
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.2 - 每个类别的常见托管选项
- en: In the case of Vue 3 applications, we aim to have a web server that is fast
    and reliable to attend to multiple requests simultaneously by serving static files.
    We do not require much CPU processing power, as we do not run code on the server,
    so our requirements for hardware and software are very low, so much so that practically
    any “static file server” would do. Most likely, our application will be part of
    a much larger infrastructure with other requirements, but those used to serve
    our Vue 3 app in and of itself are low.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue 3应用程序的情况下，我们的目标是拥有一个快速且可靠的Web服务器，能够通过提供静态文件来同时处理多个请求。由于我们不在服务器上运行代码，因此我们不需要太多的CPU处理能力，所以我们对硬件和软件的要求非常低，以至于实际上任何“静态文件服务器”都可以。很可能会是我们的应用程序成为更大基础设施的一部分，具有其他要求，但专门用于为我们自己的Vue
    3应用程序提供服务的要求是较低的。
- en: The key consideration here is, again, whether we are using the web history mode
    in our router. In that case, we need to include a configuration to the web server
    software to direct all requests to the entry point of our Vue application (our
    `index.html`) when a request does not match the standard (a file in the folder
    directory). This may sound complicated but is rather simple. Directly from the
    official Vue Router documentation, here are examples of the two web servers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键考虑因素是，再次强调，我们是否在我们的路由器中使用Web历史模式。在这种情况下，我们需要向Web服务器软件添加配置，以便在请求不匹配标准（文件夹目录中的文件）时将所有请求定向到我们的Vue应用程序的入口点（我们的`index.html`）。这可能听起来很复杂，但实际上相当简单。直接从官方Vue
    Router文档中，以下是两个Web服务器的示例。
- en: Apache HTTP Server configuration
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache HTTP服务器配置
- en: 'The Apache HTTP Server is used heavily in shared hosting providers and allows
    us to alter the configuration for requests by placing a single file in the root
    directory of the web application. This is very convenient and simple, but it does
    require that the hosting provider has enabled (or through the administration panel,
    allowed the user to enable) a special module that allows us to rewrite the incoming
    requests. The official documentation ([https://router.vuejs.org/guide/essentials/history-mode.html#apache](https://router.vuejs.org/guide/essentials/history-mode.html))
    shows this example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Apache HTTP服务器在共享主机提供商中被广泛使用，并允许我们通过在Web应用程序的根目录中放置单个文件来更改请求的配置。这非常方便且简单，但确实需要主机提供商已启用（或通过管理面板允许用户启用）一个特殊模块，允许我们重写传入的请求。官方文档([https://router.vuejs.org/guide/essentials/history-mode.html#apache](https://router.vuejs.org/guide/essentials/history-mode.html))展示了此示例：
- en: /.htaccess
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: /.htaccess
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding file should be placed alongside our `index.html` file. Every incoming
    request will then be routed to it and captured by Vue Router in the web history
    mode. Also, note in line `//1`, the `RewriteBase` rule. Here is where we change
    the path of our application, if not placed at the root of the domain.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的文件应该放置在我们的`index.html`文件旁边。然后，每个进入的请求都将被路由到它，并由Vue Router在Web历史模式下捕获。注意，在行`//1`中，有`RewriteBase`规则。这就是我们更改应用程序路径的地方，如果不在域根目录下。
- en: Nginx server configuration
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nginx服务器配置
- en: In the case of VPSes and private servers, the NGINX server is quite popular
    for how flexible and performant it is. It can behave as a reverse proxy, load
    balancer, and much more. Installing this server in a VPS with Linux/Windows is
    rather trivial, but we will not cover it here. You can see the documentation for
    each system at [https://www.nginx.com/resources/wiki/start/topics/tutorials/install/](https://www.nginx.com/resources/wiki/start/topics/tutorials/install/).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在VPS和私有服务器的情况下，NGINX服务器因其灵活性和性能而非常受欢迎。它可以作为反向代理、负载均衡器等等。在Linux/Windows的VPS上安装此服务器相当简单，但这里不会涉及。您可以在每个系统的文档中查看[https://www.nginx.com/resources/wiki/start/topics/tutorials/install/](https://www.nginx.com/resources/wiki/start/topics/tutorials/install/)。
- en: 'Unlike Apache with the `.htaccess` files, we need to modify the server configuration
    file for our site. In Linux, this is usually placed in /etc/nginx/sites-available.
    The file follows a simple schema where, for each virtual server, we declare the
    location path (as in the domain path) and the location on the local storage (the
    directory or folder). Here is an example file from a Linux server:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 `.htaccess` 文件的Apache不同，我们需要修改我们网站的服务器配置文件。在Linux中，这通常位于 /etc/nginx/sites-available。文件遵循一个简单的模式，其中，对于每个虚拟服务器，我们声明位置路径（如域名路径）和本地存储的位置（目录或文件夹）。以下是一个来自Linux服务器的示例文件：
- en: /etc/nginx/sites-available/default
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: /etc/nginx/sites-available/default
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let’s look at the preceding code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看前面的代码：
- en: In line *//1*, we place the local storage absolute path to our application.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 *//1* 行，我们放置本地存储的绝对路径到我们的应用程序。
- en: In line *//2*, we declare the domains and subdomains that will be associated
    with this server block.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 *//2* 行，我们声明将与该服务器块关联的域名和子域名。
- en: In line *//3,* we declare the location path to process. In this example, we
    are placing the application at the root (`/`). If placed in `mydomain.com/app`,
    we would write `location /app`.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 *//3* 行，我们声明要处理的位置路径。在这个例子中，我们将应用程序放置在根目录（`/`）。如果放置在 `mydomain.com/app`，我们将写
    `location /app`。
- en: Finally, in line *//4,* we tell NGINX to try to find a valid directory/file
    and, if not, pass it through to our `index.html` file.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在第 *//4* 行，我们告诉NGINX尝试找到一个有效的目录/文件，如果没有，则将其传递到我们的 `index.html` 文件。
- en: As before, if we are using the web hash mode, then we do not need to do these
    changes. We can just use the default configuration to serve the files from the
    disk.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，如果我们使用的是Web哈希模式，那么我们不需要进行这些更改。我们可以直接使用默认配置从磁盘提供文件。
- en: Other servers
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他服务器
- en: 'There are many other servers in use and possible configurations that are not
    possible to cover here. However, the official Vue Router documentation has very
    good examples for other servers and guidelines for those not covered. You can
    find the reference at this link: [https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations](https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里无法涵盖许多其他正在使用和可能的配置服务器。然而，官方Vue Router文档为其他服务器提供了非常好的示例，并为未涵盖的内容提供了指南。您可以通过此链接找到参考：[https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations](https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations)。
- en: Let’s see now how to move our files onto our online server.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看现在如何将我们的文件移动到我们的在线服务器上。
- en: Transferring your files to the server
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的文件传输到服务器
- en: Armed now with the domain pointing to our server and the configurations in place,
    it is time to upload our distribution files. Depending on your choice of hosting,
    this could be done through a web interface, a **File Transfer Protocol** (**FTP**)
    application, or secure transfer over the **Secure Shell Protocol** (**SSH**).
    For the last two options, it is recommended to use an application that takes care
    of the heavy lifting. An excellent option is to use FileZilla ([https://filezilla-project.org/](https://filezilla-project.org/)),
    which handles the aforementioned protocols. It is available for Linux, Windows,
    and macOS.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了指向我们服务器的域名和配置就绪，现在是时候上传我们的发行文件了。根据您选择的托管方式，这可以通过Web界面、**文件传输协议**（**FTP**）应用程序或通过**安全外壳协议**（**SSH**）进行安全传输来完成。对于后两种选项，建议使用一个负责繁重工作的应用程序。一个很好的选择是使用FileZilla
    ([https://filezilla-project.org/](https://filezilla-project.org/))，它处理上述协议。它适用于Linux、Windows和macOS。
- en: As we mentioned in [*Chapter 9*](B18602_09.xhtml#_idTextAnchor199), *Testing
    and Source Control*, you can also configure your VPS/server to pull the source
    code from a remote repository using `/dist` folder in the local repository. We
    could, for example, open a remote terminal to the server, trigger a synchronization
    (pull), and then bundle the application on the server itself, pull a branch that
    already has the application bundled, push our commits directly to the server,
    and so on. There are many options when using Git, and a few more when using a
    service such as `GitHub` or `GitLab` with powerful tools for *continuous integration
    and delivery*. This is a topic worth exploring if you do not want to use S/FTP
    applications or want to automate the process. Each implementation would be specific
    and out of the scope of this book, so we will move on to the next topic, assuming
    that our files are now on the server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第9章*](B18602_09.xhtml#_idTextAnchor199)“测试和源代码控制”中提到的，你也可以配置你的VPS/服务器，使用本地仓库中的`/dist`文件夹从远程仓库拉取源代码。例如，我们可以打开到服务器的远程终端，触发同步（拉取），然后在服务器本身打包应用程序，拉取已经打包应用程序的分支，直接将我们的提交推送到服务器，等等。使用Git时有很多选项，使用像`GitHub`或`GitLab`这样的服务时还有更多选项，这些服务提供了强大的**持续集成和交付**工具。如果你不想使用S/FTP应用程序或想自动化这个过程，这是一个值得探索的话题。每种实现都是特定的，超出了本书的范围，所以我们将继续下一个主题，假设我们的文件现在已经在服务器上了。
- en: Protecting your web application with Let’s Encrypt
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Let’s Encrypt保护你的网络应用程序
- en: Internet addresses are included at the very beginning of the protocol being
    used. By default, all web navigation is done using the **Hypertext Transfer Protocol**
    (**HTTP**), which, while foundational, is not considered secure. When an encryption
    layer between the client and the server is provided, then the communication is
    done over **HTTPS** (the **S** standing for **Secure**). This encryption layer
    is provided and validated by a certifying authority, so the certificate must be
    bought from such one. Hosting providers usually have the option to buy and install
    one on their servers, but there is also a free and reliable alternative provided
    by the **Let’s Encrypt** foundation ([https://letsencrypt.org/](https://letsencrypt.org/)).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网地址包含在使用协议的最开始部分。默认情况下，所有网页导航都使用**超文本传输协议**（**HTTP**），虽然它是基础性的，但并不被认为是安全的。当在客户端和服务器之间提供加密层时，通信将通过**HTTPS**（其中的**S**代表**安全**）进行。这个加密层由认证机构提供和验证，因此证书必须从这样的机构购买。托管提供商通常有在他们的服务器上购买和安装一个证书的选项，但**Let’s
    Encrypt**基金会也提供了一个免费且可靠的替代方案（[https://letsencrypt.org/](https://letsencrypt.org/)）。
- en: 'To install a *Let’s Encrypt* certificate, you need shell access to your server.
    If not, then you must rely on the service provided by the hosting. The list of
    certified hosting providers compatible is here: [https://certbot.eff.org/hosting_providers](https://certbot.eff.org/hosting_providers).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装*Let’s Encrypt*证书，你需要对服务器有shell访问权限。如果没有，那么你必须依赖托管商提供的服务。兼容的认证托管提供商列表在这里：[https://certbot.eff.org/hosting_providers](https://certbot.eff.org/hosting_providers)。
- en: 'In the case that we have access to a server through remote shell access, the
    process is also straightforward. The Let’s Encrypt foundation and the **Electronic
    Frontier Foundation** (**EFF**) provide an application called **certbot** (certification
    robot), which automates the installation of security certificates and also configures
    the local web server files to use HTTPS. In this case, we have two options:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过远程shell访问服务器，过程也是直接的。Let’s Encrypt基金会和**电子前沿基金会**（**EFF**）提供了一个名为**certbot**（认证机器人）的应用程序，该程序自动化了安全证书的安装，并配置了本地网络服务器文件以使用HTTPS。在这种情况下，我们有两种选择：
- en: Install a certificate for each domain and each subdomain
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个域名和每个子域名安装证书
- en: Install a *wild card certificate*, which covers each domain and all possible
    subdomains
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个*通配符证书*，它覆盖每个域名及其所有可能的子域名
- en: 'The instructions to install the *certbot* and then run the process differ for
    each operating system and web server, and the type of certificate mentioned. Because
    of this, the EFF provides a web page with configurable options for each possible
    variation and easy-to-follow steps. The wizard can be found here: [https://certbot.eff.org/](https://certbot.eff.org/).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 安装*certbot*并运行过程的说明因操作系统、网络服务器和证书类型的不同而不同。因此，电子前沿基金会（EFF）提供了一个网页，其中包含针对每种可能变体的可配置选项和易于遵循的步骤。向导可以在[https://certbot.eff.org/](https://certbot.eff.org/)找到。
- en: '![Figure 10.2 – Certbot instructions for NGINX and Ubuntu 20](img/Figure_10.02_B18602.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – Certbot 为 NGINX 和 Ubuntu 20 的说明](img/Figure_10.02_B18602.jpg)'
- en: Figure 10.2 – Certbot instructions for NGINX and Ubuntu 20
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – Certbot 为 NGINX 和 Ubuntu 20 的说明
- en: 'In general, the instructions follow these steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，说明遵循以下步骤：
- en: Install **certbot**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 **certbot**。
- en: Run **certbot**. This will present a series of options, with all the found dominions
    found on the given web server.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 **certbot**。这将显示一系列选项，包括在给定的 Web 服务器上找到的所有域名。
- en: Select the type of certificate to install.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要安装的证书类型。
- en: Select, if active, the auto-renewal of the certificate. Rejecting this will
    require manual renewal.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用，选择证书的自动续订。拒绝此选项将需要手动续订。
- en: The free certificate is only valid for 3 months at a time, as opposed to a commercial
    certificate, which can be bought for more time. After 3 months, it must be manually
    renewed. Luckily, *certbot* includes a function to perform automatic updates before
    the expiration period is due.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 免费证书的有效期仅为 3 个月，而商业证书可以购买更长时间。3 个月后，必须手动续订。幸运的是，*certbot* 包含一个在到期期限之前执行自动更新的功能。
- en: Even for simple test applications, it is important and recommendable to always
    protect a website with a security certificate. Let’s also remember that having
    a security certificate and serving an application over HTTPS is a hard requirement
    for PWAs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对于简单的测试应用程序，始终使用安全证书保护网站也是重要且值得推荐的。让我们也记住，拥有安全证书并通过 HTTPS 提供应用程序是 PWAs 的硬性要求。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the basics for publishing our Vue application in
    its own public space on the internet. We also learned important concepts for understanding
    instructions when buying and reserving a domain and setting DNS records if and
    when prompted to do so. We also learned about how to accommodate our bundle configuration
    when using the HTML5 history mode in Vue Router, the different types of online
    hosting we can hire, options for copying our distribution files onto the production
    server, and guidelines for securing our website with a free Let’s Encrypt certificate
    to serve our applications over HTTPS. All of these are important skills, and you
    will benefit from having the experience of executing these skills at least once.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了在互联网上我们自己的公共空间发布 Vue 应用程序的基本知识。我们还学习了在购买和预订域名时理解指令的重要概念，以及如果需要设置 DNS
    记录。我们还学习了如何在 Vue Router 中的 HTML5 历史模式下调整我们的包配置，我们可以租用的不同类型的在线托管，将我们的分发文件复制到生产服务器的选项，以及使用免费的
    Let’s Encrypt 证书来保护我们的网站，以通过 HTTPS 提供应用程序的指南。所有这些技能都很重要，并且你将受益于至少执行这些技能一次的经验。
- en: With the deployment of our application, we have covered in this book the main
    steps and topics to construct a Vue 3 application, from the introduction of the
    framework all the way to testing our individual components and installing our
    production-ready files in a web server. In some cases, we have gone beyond the
    basics to see advanced topics, which are an important addition to a professional
    developer. If you have followed the concepts and code examples this far, you have
    acquired important skills to help you in your professional development. But this
    is not the end of this book, as you can find additional bonus content next.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们应用程序的部署，本书中涵盖了构建 Vue 3 应用程序的主要步骤和主题，从框架的介绍到测试我们的单个组件，再到在 Web 服务器上安装我们的生产就绪文件。在某些情况下，我们已经超越了基础知识，探讨了高级主题，这些主题对于专业开发者来说是一个重要的补充。如果你已经跟随了这些概念和代码示例，你已经获得了帮助你在职业发展中取得重要技能。但这本书还没有结束，因为你可以找到额外的额外内容。
- en: I extend my appreciation and gratitude to you, dear reader, for your interest
    in Vue 3 and in acquiring this book, which summarizes many years of experience
    developing applications. I hope it becomes a source of reference and encouragement
    to keep learning, and I wish you the best of success in your personal and professional
    career.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我衷心感谢您，亲爱的读者，您对 Vue 3 的兴趣以及购买这本书，这本书总结了多年开发应用程序的经验。我希望它成为您继续学习的参考资料和鼓励，并祝您在个人和职业生涯中取得最佳成功。
- en: Sincerely,
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 诚挚地，
- en: '**Pablo** **D. Garaguso**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pablo** **D. Garaguso**'
- en: Review questions
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: What is a top-level domain, and how is it different from a domain?
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是顶级域名，它与域有什么不同？
- en: Is there a limit to the number of subdomains we can create for our domain? Why?
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以为我们的域名创建多少个子域名？为什么？
- en: What is a DNS? What are DNS records?
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 是什么？DNS 记录是什么？
- en: What are the options currently for publishing your web application on the internet?
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前有哪些选项可以用于在互联网上发布您的Web应用程序？
- en: What considerations in our code and web server do we need to make when using
    Vue Router in web history mode?
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用Vue Router在Web历史模式下时，我们在代码和Web服务器方面需要考虑哪些因素？
- en: What are some common web servers found in shared hosting and VPSes?
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在共享主机和VPS中常见的Web服务器有哪些？
- en: What is certbot and what does it do?
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Certbot是什么？它有什么作用？
