- en: Appendix A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A
- en: Debugging Angular
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular调试
- en: '"A problem well-stated is half-solved." Charles Kettering, the head of research
    for GM in the early 20^(th) century, said that to effectively find a solution
    to your problem, you must first be able to explain it well. In other terms, you
    must first invest the time to understand what the problem is and when you do you
    will be halfway to solving it.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '"一个表述清晰的问题已经解决了一半。" 20世纪初通用汽车公司研究部门负责人查尔斯·凯特林（Charles Kettering）曾说过，为了有效地找到解决问题的方法，你必须首先能够很好地解释它。换句话说，你必须首先投入时间去理解问题是什么，当你做到了这一点，你就已经解决了一半的问题。'
- en: Effective debugging is crucial in understanding why or how your software is
    failing. There are far better ways to debug you JavaScript code than using `console.log`.
    This appendix will cover various tools and techniques to introduce you to breakpoint
    debugging and browser extensions that can help you better understand the state
    of your application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的调试对于理解为什么或如何你的软件失败至关重要。与使用`console.log`相比，有更好的方法来调试你的JavaScript代码。本附录将介绍各种工具和技术，以介绍断点调试和可以帮助你更好地理解应用程序状态的浏览器扩展。
- en: 'In this appendix, we cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们涵盖了以下内容：
- en: The most useful shortcut
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最有用的快捷键
- en: Troubleshooting errors in the browser
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器中的错误排查
- en: Karma, Jasmine, and unit testing errors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Karma、Jasmine和单元测试错误
- en: Debugging with dev tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用开发者工具进行调试
- en: Debugging with VS Code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用VS Code进行调试
- en: Debugging with Angular Augury
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular Augury进行调试
- en: Debugging with Redux DevTools
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Redux DevTools进行调试
- en: Debugging RxJS
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RxJS调试
- en: Let's start off by learning a keyboard shortcut that will make you way more
    productive.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习一个将使你更加高效的生产力快捷键开始。
- en: The most useful shortcut
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最有用的快捷键
- en: Finding your way around an unfamiliar or a large code base can be difficult,
    disorienting, and annoying. There is a keyboard shortcut that solves this problem,
    which is shared across multiple tools like VS Code and Chrome/Edge Developer Tools
    (dev tools).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在不熟悉或大型代码库中找到自己的位置可能会很困难，令人困惑，甚至令人烦恼。有一个键盘快捷键可以解决这个问题，这个快捷键在多个工具中共享，如VS Code和Chrome/Edge开发者工具（dev
    tools）。
- en: 'To search for and open a file in VS Code or the **Sources** panel in dev tools,
    use the following shortcut:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要在VS Code或开发者工具中的**源**面板中搜索并打开文件，请使用以下快捷键：
- en: 'On macOS: *![](img/B14094_A2_22.png)* + *P*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上：![图片](img/B14094_A2_22.png) + *P*
- en: 'On Windows: *Ctrl* + *P*.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上：*Ctrl* + *P*。
- en: You'll quickly discover that this is the shortcut that you will be using the
    most.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你会很快发现，这将是你最常使用的快捷键。
- en: Troubleshooting errors in the browser
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器中的错误排查
- en: In this section, you will intentionally introduce an easy-to-make mistake so
    that you can become familiar with real-life errors that can happen while developing
    your applications and gain a solid understanding of the tooling that makes you
    an effective developer.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将故意引入一个容易犯的错误，这样你就可以熟悉在开发应用程序时可能发生的真实错误，并深入了解使你成为有效开发者的工具。
- en: Please refer to *Chapter 4*, *Automated Testing, CI, and Releasing to Production*,
    and the LocalCast Weather app to get a better context of the following code sample.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考*第4章*，*自动化测试、持续集成和发布到生产*，以及LocalCast天气应用，以更好地理解以下代码示例。
- en: The latest version of the LocalCast Weather app can be found on GitHub at [https://github.com/duluca/local-weather-app](https://github.com/duluca/local-weather-app).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: LocalCast天气应用的最新版本可以在GitHub上找到：[https://github.com/duluca/local-weather-app](https://github.com/duluca/local-weather-app)。
- en: 'Let''s pretend that we made an innocent mistake when copying and pasting the
    URL from the API documentation page on `OpenWeatherMap.org` and forgot to add `http://`
    in front of it. This is an easy mistake to make:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们在从`OpenWeatherMap.org`的API文档页面复制粘贴URL时犯了一个无辜的错误，并且忘记在前面添加`http://`。这是一个容易犯的错误：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Your app will compile successfully, but when you inspect the results in the
    browser, you won''t see any weather data. In fact, it seems like the `CurrentWeather`
    component is not rendering at all, as you can see in the following image:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用将成功编译，但当你检查浏览器中的结果时，你不会看到任何天气数据。实际上，看起来`CurrentWeather`组件根本就没有渲染，正如你在以下图片中可以看到的：
- en: '![](img/B14094_A2_01.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_A2_01.png)'
- en: 'Figure 1: CurrentWeather does not render'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：CurrentWeather无法渲染
- en: To find out why, you will need to debug your Angular app.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出原因，你需要调试你的Angular应用。
- en: Leveraging Browser DevTools
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用浏览器开发者工具
- en: As a developer, I use the Edge or Google Chrome browsers because of their cross-platform
    and consistent developer tools with helpful extensions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，我使用Edge或Google Chrome浏览器，因为它们具有跨平台和一致的开发者工具，以及有用的扩展。
- en: 'As a best practice, I code with VS Code and the browser open side by side,
    while the dev tools are also open in the browser. There are several good reasons
    for practicing side-by-side development:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最佳实践，我使用VS Code和浏览器并排编码，同时开发工具也在浏览器中打开。有多个很好的理由来实践并排开发：
- en: '**Fast feedback loops**: With live-reloading, you see the end result of your
    changes very quickly'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速反馈循环**：使用实时重新加载，你可以非常快地看到你更改的最终结果'
- en: '**Laptops**: A lot of developers now do most of their development on a laptop
    and a second monitor is a luxury'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**笔记本电脑**：现在很多开发者都在笔记本电脑上进行大部分的开发工作，第二块显示器是一种奢侈'
- en: '**Attention to responsive design**: As I have limited space to work with, I
    constantly pay attention to mobile-first development, fixing desktop layout issues
    after the fact'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注响应式设计**：由于我的工作空间有限，我始终关注移动优先开发，在之后修复桌面布局问题'
- en: '**Awareness of network activity**: To enable me to quickly see any API call
    errors and ensure that the amount of data that is being requested remains in line
    within my expectations'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注网络活动**：使我能够快速看到任何API调用错误，并确保请求的数据量符合我的预期'
- en: '**Awareness of console errors**: To enable me to quickly react and troubleshoot
    when new errors are introduced'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注控制台错误**：使我能够快速反应并解决当引入新错误时'
- en: '**Disabled cache**: So you know you are always getting all of your changes
    and not fighting with the browser''s cache'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用缓存**：这样你知道你总是得到所有的更改，而不是与浏览器的缓存作斗争'
- en: 'Observe what side-by-side development looks like:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 观察并排开发的样貌：
- en: '![](img/B14094_A2_02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_A2_02.png)'
- en: 'Figure 2: Side-by-side development with live-reloading running'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：运行实时重新加载的并排开发
- en: Ultimately, you should do what works best for you. With the side-by-side setup,
    I frequently find myself toggling VS Code's Explorer on and off and resizing the
    dev tools pane to a larger or smaller size depending on the specific task at hand.
    To toggle VS Code's Explorer, click on the Explorer icon circled in the preceding
    screenshot.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你应该做最适合你的事情。在使用并排设置的情况下，我经常发现自己需要打开和关闭VS Code的资源管理器，并根据具体任务调整开发工具窗格的大小。要切换VS
    Code的资源管理器，请点击前一张截图中圈出的资源管理器图标。
- en: 'Just as you can do side-by-side development with live-reloading using `npm
    start`, you can get the same kind of fast feedback loops for unit testing using
    `npm test`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以使用`npm start`进行带有实时重新加载的并排开发一样，你也可以使用`npm test`获得相同类型的快速反馈循环，用于单元测试：
- en: '![](img/B14094_A2_03.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_A2_03.png)'
- en: 'Figure 3: Side-by-side development with unit testing'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：单元测试并行的开发
- en: With the side-by-side unit testing setup, you can become highly effective in
    developing unit tests.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用并排单元测试设置，你可以成为开发单元测试的高效者。
- en: Optimizing dev tools
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化开发工具
- en: 'For side-by-side development with live-reloading to work well, you need to
    optimize the default dev tools experience:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使带有实时重新加载的并排开发工作得很好，你需要优化默认的开发工具体验：
- en: '![](img/B14094_A2_04.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_A2_04.png)'
- en: 'Figure 4: Optimized Chrome Developer Tools'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：优化后的Chrome开发者工具
- en: 'Looking at the preceding screenshot, you will note that numerous settings and
    information radiators are highlighted:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 观察前一张截图，你会注意到许多设置和信息发射器被突出显示：
- en: Have the **Network** tab open by default so that you can see network traffic
    flowing.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认打开**网络**选项卡，以便你可以看到网络流量流动。
- en: Open the dev tools settings by clicking on the ![](img/1.png) button.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 ![](img/1.png) 按钮打开开发工具设置。
- en: Click on the **right-hand side** icon so that dev tools dock on the right-hand
    side of Chrome. This layout gives more vertical space, so you can see more network
    traffic and console events at once. As a side benefit, the left-hand side takes
    the rough size and shape of a mobile device.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**右侧**图标，以便开发工具停靠在Chrome的右侧。这种布局提供了更多的垂直空间，因此你可以一次性看到更多的网络流量和控制台事件。作为额外的好处，左侧大致呈现移动设备的尺寸和形状。
- en: '**Toggle on** large request rows and **toggle off** overview to see more of
    the URL and parameters for each request and gain more vertical space.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开启**大请求行并**关闭**概览，以便看到每个请求的更多URL和参数，并获得更多垂直空间。'
- en: Check the option to **Disable cache**, which will force reload every resource
    when you refresh a page while the dev tools are open. This prevents bizarre caching
    errors from ruining your day.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**禁用缓存**选项，这将强制在开发工具打开时刷新页面时重新加载每个资源。这可以防止奇怪的缓存错误破坏你的日子。
- en: You will mostly be interested in seeing XHR calls to various APIs, so click
    on **XHR** to filter results.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你主要会关注查看对各种API的XHR调用，因此点击**XHR**以过滤结果。
- en: Note that you can glance the number of console errors in the upper-right corner
    as **12**. The ideal number of console errors should be 0 at all times.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，你可以在右上角查看控制台错误的数量为**12**。理想情况下，控制台错误的数量应该始终为0。
- en: Note that the top item in the request row is indicating that there's an error
    with status code **404 Not Found**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，请求行中的顶部条目表明存在状态码为**404 Not Found**的错误。
- en: Since we are debugging an Angular application, the **Augury** extension has
    been loaded. This tool is covered in more detail later in this chapter, using
    the more complicated LemonMart app.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们正在调试Angular应用程序，已经加载了**Augury**扩展。这个工具将在本章后面更详细地介绍，使用更复杂的LemonMart应用程序。
- en: With your optimized dev tools environment, you can now effectively troubleshoot
    and resolve the application error from earlier.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的优化开发工具环境中，你现在可以有效地调试和解决之前的应用程序错误。
- en: Troubleshooting network issues
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除网络问题
- en: 'There are three visible issues with the app at this stage:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，应用程序存在三个可见问题：
- en: The component details aren't displaying
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件详情未显示
- en: There are numerous console errors
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在许多控制台错误
- en: The API call is returning a **404 Not Found** error
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API调用返回**404 Not Found**错误
- en: 'Begin by inspecting any network errors, since network errors usually cause
    knock-on effects:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查任何网络错误，因为网络错误通常会导致连锁反应：
- en: Click on the failing URL in the **Network** tab
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络**选项卡中点击失败的URL
- en: In the **Details** pane that opens to the right of the URL, click on the **Preview** tab
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在URL右侧打开的**详细信息**面板中，点击**预览**选项卡
- en: 'You should see this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到这个：
- en: '[PRE1]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By just observing this error message, you will likely miss the fact that you
    forgot to add the `http://` prefix to the URL. The bug is subtle and certainly
    not glaringly obvious.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅通过观察这个错误信息，你可能会错过忘记添加`http://`前缀到URL的事实。这个错误很微妙，绝对不是显而易见的。
- en: Hover over the URL and observe the full URL, as shown:![](img/B14094_A2_05.png)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在URL上，观察完整的URL，如图所示：![完整URL截图](img/B14094_A2_05.png)
- en: 'Figure 5: Inspecting network errors'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5：检查网络错误
- en: As you can see, now the bug is glaringly obvious. In this view, we get to see
    the full URL, and it becomes clear that the URL defined in `weather.service.ts`
    is not fully qualified, so Angular is attempting to load the resource from its
    parent server, hosted on `localhost:5000`, instead of going over the web to the
    right server.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在错误非常明显。在这个视图中，我们可以看到完整的URL，并且很明显，`weather.service.ts`中定义的URL不是完全限定的，因此Angular正在尝试从其父服务器（`localhost:5000`）加载资源，而不是通过网络到正确的服务器。
- en: Investigating console errors
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查控制台错误
- en: 'Before you fix this issue, it is worthwhile understanding the knock-on effects
    of the failing API call:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在修复这个问题之前，了解失败的API调用的连锁反应是值得的：
- en: Observe the console errors:![](img/B14094_A2_06.png)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察控制台错误：![控制台错误截图](img/B14094_A2_06.png)
- en: 'Figure 6: Dev tools Console Error Context'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6：开发者工具控制台错误上下文
- en: The first element of note here is the `ERROR CONTEXT` object, which has a property
    named `DebugContext_`. `DebugContext_` contains a detailed snapshot of the current
    state of your Angular application when the error happened. The information contained
    within `DebugContext_` is light years ahead of the amount of mostly unhelpful
    error messages AngularJS generates.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里值得注意的第一个元素是名为`ERROR CONTEXT`的对象，它有一个名为`DebugContext_`的属性。`DebugContext_`包含错误发生时Angular应用程序当前状态的详细快照。`DebugContext_`中包含的信息比AngularJS生成的几乎无用的错误信息多得多。
- en: Properties that have the value `(...)` are property getters, and you must click
    on them to load their details. For example, if you click on the ellipsis for `componentRenderElement`,
    it will be populated with the `app-current-weather` element. You can expand the
    element to inspect the runtime condition of the component.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为`(...)`的属性是属性获取器，你必须点击它们来加载它们的详细信息。例如，如果你点击`componentRenderElement`的省略号，它将被`app-current-weather`元素填充。你可以展开元素来检查组件的运行时条件。
- en: Now scroll to the top of the console
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在滚动到控制台顶部
- en: 'Observe the first error:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察第一个错误：
- en: '[PRE2]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You have probably encountered the `TypeError` before. This error is caused by
    trying to access the property of an object that is not defined. In this case,
    `CurrentWeatherComponent.current` is not assigned to an object because the HTTP call
    is failing. Since `current` is not initialized and the template blindly tries
    to bind to its properties like `{{current.city}}`, we get a message saying **property
    'city' of undefined** cannot be read. This is the kind of knock-on effect that
    can create many unpredictable side-effects in your application. You must proactively
    code to prevent this condition.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能之前遇到过`TypeError`。这种错误是由于尝试访问未定义的对象属性而引起的。在这种情况下，`CurrentWeatherComponent.current`因为没有HTTP调用失败而没有分配给一个对象。由于`current`未初始化，模板盲目地尝试绑定到其属性，如`{{current.city}}`，我们得到一条消息说**属性'city'的未定义**无法读取。这就是可能在你应用程序中产生许多不可预测副作用的那种连锁反应。你必须积极编码以防止这种情况发生。
- en: Karma, Jasmine, and unit testing errors
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Karma、Jasmine和单元测试错误
- en: When running tests with the `ng test` command, you will encounter some high-level
    errors that can mask the root cause of the actual underlying errors.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`ng test`命令运行测试时，你可能会遇到一些高级错误，这些错误可能会掩盖实际潜在错误的根本原因。
- en: The general approach to resolving errors should be inside out, resolving child
    component issues first and leaving parent and root components for last.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 解决错误的通用方法应该是从内到外，首先解决子组件的问题，最后留下父组件和根组件。
- en: NetworkError
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络错误
- en: 'Network errors can be caused by a multitude of underlying issues:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 网络错误可能由多种潜在问题引起：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Working inside out, you should implement test doubles of services and provide
    the fakes to the appropriate components, as covered in the previous section. However,
    in parent components, you may still encounter errors even if you correctly provided
    fakes. Refer to the section on dealing with generic error events to uncover the
    underlying issues.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从内到外工作，你应该实现服务的测试双倍，并向适当的组件提供伪造品，如前一小节所述。然而，即使在父组件中正确提供了伪造品，你也可能仍然会遇到错误。请参阅处理通用错误事件的章节，以揭示潜在问题。
- en: Generic ErrorEvents
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用错误事件
- en: 'Error events are generic errors that hide the underlying cause:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 错误事件是隐藏潜在原因的通用错误：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To expose the root cause of a generic error, implement a new `test:debug` script:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了暴露通用错误的根本原因，实现一个新的`test:debug`脚本：
- en: 'Implement `test:debug`, as shown, in `package.json`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下所示，在`package.json`中实现`test:debug`：
- en: '[PRE5]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute `npm run` `test:debug`
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`npm run test:debug`
- en: Now the Karma runner will likely reveal the underlying issue
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Karma运行器可能会揭示根本问题
- en: If necessary, follow the stack trace to find the child component that may be causing
    the issue
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，根据堆栈跟踪找到可能引起问题的子组件
- en: If this strategy is not helpful, you may be able to glean more information on
    what's going wrong by breakpoint debugging your unit tests.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果这种策略不起作用，你可能可以通过断点调试你的单元测试来获取更多关于错误原因的信息。
- en: Debugging with Dev Tools
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用开发工具进行调试
- en: To `console.log` or not to `console.log`; that is the question. For the record,
    let me state that `console.log` statements will never be checked in to your repository.
    In general, they are a waste of your time, because it requires editing, building,
    and running code to bring value, not to mention the cost of cleaning up your code
    later.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 关于是否将`console.log`输出到控制台；这是一个问题。记录在案，让我声明，`console.log`语句永远不会被提交到你的仓库。一般来说，它们是浪费时间，因为它们需要编辑、构建和运行代码来带来价值，更不用说清理代码的成本了。
- en: The preferred method of debugging is breakpoint debugging, which is a way to
    pause the execution of your code, and inspect and manipulate the state of it while
    your code is running. You can conditionally set breakpoints, walk through your
    code line by line, and even execute statements in the console to try out new ideas.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的首选方法是断点调试，这是一种暂停代码执行的方法，在代码运行时检查和操作其状态。你可以有条件地设置断点，逐行遍历你的代码，甚至可以在控制台中执行语句来尝试新想法。
- en: Angular 9 and Ivy bring in many debugging improvements that makes it possible
    to debug asynchronous code and templates. In addition, the stack trace generated
    by Angular 9 is far more useful in pinpointing the root cause of an error.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 9和Ivy带来了许多调试改进，使得调试异步代码和模板成为可能。此外，Angular 9生成的堆栈跟踪在确定错误根本原因方面要远比以前更有用。
- en: There are some niche use cases where `console.log` statements can be useful.
    These are mostly asynchronous workflows that operate in parallel and are dependent
    on timely user interaction. In these cases, console logs can help you better understand
    the flow of events and interaction between various components. You can see this
    in action in the *Debugging RxJS* section later in this chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些特殊用例，其中`console.log`语句可能很有用。这些主要是并行操作且依赖于及时用户交互的异步工作流程。在这些情况下，控制台日志可以帮助你更好地理解事件流和各个组件之间的交互。你可以在本章后面的*调试RxJS*部分看到这一点。
- en: For common cases, we should stick with breakpoint debugging. Using dev tools,
    we can observe the state of properties as they are being set, and be able to change
    their values on the fly to force the code to execute branching logic in `if-else`
    or `switch` statements.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于常见情况，我们应该坚持使用断点调试。使用开发者工具，我们可以观察属性在被设置时的状态，并且能够即时更改它们的值，以强制代码在`if-else`或`switch`语句中执行分支逻辑。
- en: 'Let''s presume that some basic logic exists on `HomeComponent`, which sets
    a `displayLogin boolean`, based on an `isAuthenticated` value retrieved from an `AuthService`,
    as demonstrated:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`HomeComponent`上存在一些基本逻辑，它根据从`AuthService`检索到的`isAuthenticated`值设置一个`displayLogin
    boolean`，如下所示：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now observe the state of the value of `displayLogin` and the `isAuthenticated`
    function as they are being set, and then observe the change in the value of `displayLogin`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在观察`displayLogin`的值和`isAuthenticated`函数在被设置时的状态，然后观察`displayLogin`值的改变：
- en: Switch to the **Sources** tab in dev tools
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到开发者工具中的**源**标签
- en: Using the most useful shortcut, *Ctrl* + *P* or *![](img/B14094_A2_222.png)*
    + *P*, search for `HomeComponent`
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用最有用的快捷键，*Ctrl* + *P* 或 *![图片](img/B14094_A2_222.png)* + *P*，搜索`HomeComponent`
- en: Drop a breakpoint on the first line inside the `ngOnInit` function
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit`函数内的第一行设置一个断点
- en: Refresh the page
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面
- en: You'll see your breakpoint hit, as highlighted in blue here:![](img/B14094_A2_07.png)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到你的断点被触发，如这里用蓝色突出显示的![图片](img/B14094_A2_07.png)
- en: 'Figure 7: Chrome DevTools breakpoint debugging'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7：Chrome开发者工具断点调试
- en: Hover over `this.displayLogin` and observe that its value is set to `true`
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 悬停在`this.displayLogin`上并观察其值被设置为`true`
- en: If hovering over `this.authService.isAuthenticated()`, you will not be able
    to observe its value
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你悬停在`this.authService.isAuthenticated()`上，你将无法观察到其值
- en: While your breakpoint is hit, you can access the current scope of the state
    in the console, which means you can execute the function and observe its value.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你的断点被触发时，你可以在控制台中访问当前的状态作用域，这意味着你可以执行函数并观察其值。
- en: 'Execute `isAuthenticated()` in the console:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台执行`isAuthenticated()`：
- en: '[PRE7]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You'll observe that it returns `true`, which is what `this.displayLogin` is
    set to. You can still coerce the value of `displayLogin` in the console.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会观察到它返回`true`，这正是`this.displayLogin`被设置的值。你仍然可以在控制台中强制改变`displayLogin`的值。
- en: 'Set `displayLogin` to `false`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`displayLogin`设置为`false`：
- en: '[PRE8]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you observe the value of `displayLogin`, either by hovering over it or retrieving
    it from the control, you'll see that the value is set to `false`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察`displayLogin`的值，无论是通过悬停在其上还是从控件中检索它，你会发现该值被设置为`false`。
- en: Leveraging breakpoint debugging basics, you can debug complicated scenarios
    without changing your source code at all. You can debug templates as well as complicated
    callbacks with RxJS statements.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 利用断点调试的基础知识，你可以调试复杂场景而无需更改源代码。你也可以调试模板以及复杂的回调，使用RxJS语句。
- en: Debugging with Visual Studio Code
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code进行调试
- en: 'You can also debug your Angular application, Karma, and Protractor tests from
    directly within Visual Studio Code. First, you need to configure the debugger
    to work with a Chrome debugging environment, as illustrated:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以直接在Visual Studio Code中调试你的Angular应用程序、Karma和Protractor测试。首先，你需要配置调试器以与Chrome调试环境一起工作，如图所示：
- en: '![](img/B14094_A2_08.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B14094_A2_08.png)'
- en: 'Figure 8: VS Code debugging setup'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：VS Code调试设置
- en: Click on the **Debug** pane
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**调试**面板
- en: Expand the **No Configurations** dropdown and click on **Add Configuration...**
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**无配置**下拉菜单并点击**添加配置...**
- en: In the **Select Environment** checkbox, select **Chrome**
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择环境**复选框中，选择**Chrome**
- en: This will create a default configuration in the `.vscode/launch.json` file.
    We will modify this file to add three separate configurations.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在`.vscode/launch.json`文件中创建一个默认配置。我们将修改此文件以添加三个单独的配置。
- en: 'Replace the contents of `launch.json` with the following configuration:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`launch.json`的内容替换为以下配置：
- en: '[PRE9]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we also added debuggers for Microsoft's new Chromium-based Edge browser.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们还为微软基于Chromium的新Edge浏览器添加了调试器。
- en: Execute the relevant CLI command, like `npm start`, `npm test`, or `npm run
    e2e`, before you start the debugger
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始调试器之前，执行相关的CLI命令，如`npm start`、`npm test`或`npm run e2e`。
- en: On the **Debug** page, in the **Debug** dropdown, select `npm start` and click
    on the green play icon
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**调试**页面，在**调试**下拉菜单中，选择`npm start`并点击绿色的播放图标
- en: Observe that a Chrome instance has launched
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察到一个Chrome实例已启动
- en: Set a breakpoint on a `.ts` file
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.ts`文件上设置断点
- en: Perform the action in the app to trigger the breakpoint
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中执行操作以触发断点
- en: If all goes well, Chrome will report that the code has been **Paused in Visual
    Studio Code**
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，Chrome将报告代码已在Visual Studio Code中**暂停**
- en: For more information, refer to the Angular CLI section on VS Code Recipes on
    GitHub at [https://github.com/Microsoft/vscode-recipes](https://github.com/Microsoft/vscode-recipes).
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅GitHub上VS Code菜谱的Angular CLI部分[https://github.com/Microsoft/vscode-recipes](https://github.com/Microsoft/vscode-recipes)。
- en: Debugging with Angular Augury
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular Augury进行调试
- en: Augury is a Chrome DevTools extension for debugging and profiling Angular applications.
    It is a purpose-built tool designed to help developers visually navigate the component
    tree, inspect the state of the router, and enable breakpoint debugging by source
    mapping between the generated JavaScript code and the TypeScript code that the
    developer coded in.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Augury是一个用于调试和性能分析的Chrome DevTools扩展，它是一个专为帮助开发者可视化导航组件树、检查路由状态以及通过源映射在生成的JavaScript代码和开发者编写的TypeScript代码之间启用断点调试而设计的工具。
- en: Note that Augury is not fully compatible with Angular 9's Ivy rendering engine.
    For certain features like Router Tree and NgModules to work, you need to temporarily
    disable Ivy in your project.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Augury与Angular 9的Ivy渲染引擎不完全兼容。为了某些功能（如路由树和NgModules）能够工作，您需要暂时在项目中禁用Ivy。
- en: 'You can turn off Ivy by updating `tsconfig.app.json` in the root of your project
    to add the following property to it:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过更新项目根目录下的`tsconfig.app.json`来关闭Ivy，向其中添加以下属性：
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can download Augury from [https://augury.angular.io](https://augury.angular.io).
    Once installed, when you open Chrome DevTools for your Angular app, you''ll note
    a new tab for Augury, as illustrated:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://augury.angular.io](https://augury.angular.io)下载Augury。一旦安装，当您为Angular应用程序打开Chrome
    DevTools时，您会注意到一个名为Augury的新选项卡，如图所示：
- en: '![](img/B14094_A2_09.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_09.png)'
- en: 'Figure 9: Chrome DevTools Augury'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：Chrome DevTools Augury
- en: 'Augury provides useful and critical information in understanding how your Angular
    app is behaving at runtime:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Augury提供了有用的关键信息，以了解您的Angular应用程序在运行时的行为：
- en: The current Angular version is listed, in this case, as version **9.1.7**
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前Angular版本列在下面，在这种情况下，版本为**9.1.7**
- en: '**Component Tree** show all Angular components that rendered in the app'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**组件树**显示了在应用程序中渲染的所有Angular组件'
- en: '**Router Tree** shows all the routes that have been configured in the app'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**路由树**显示了应用程序中配置的所有路由'
- en: '`NgModules` shows the `AppModule` and feature modules of the app'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`NgModules`显示了应用程序的`AppModule`和功能模块'
- en: Component Tree
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件树
- en: 'The **Component Tree** tab shows how all app components are related and how
    they interact with each other:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件树**选项卡显示了所有应用程序组件之间的关系以及它们如何相互交互：'
- en: Select a particular component, such as `HomeComponent`, as follows:![](img/B14094_A2_10.png)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式选择特定的组件，例如`HomeComponent`：![](img/B14094_A2_10.png)
- en: 'Figure 10: Augury Component Tree'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10：Augury组件树
- en: The **Properties** tab on the right-hand side will display a link called **View
    Source**, which you can use to debug your component. Further below, you will be
    able to observe the state of properties of the component, such as the `displayLogin
    boolean`, including services that you have injected into the component and their
    state.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 右侧的**属性**选项卡将显示一个名为**查看源代码**的链接，您可以使用它来调试您的组件。进一步向下，您将能够观察到组件属性的状态，例如`displayLogin
    boolean`，包括注入到组件中的服务和它们的状态。
- en: You can change the value of any property by double-clicking on the value.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过双击值来更改任何属性的值。
- en: For example, if you would like to change the value of `displayLogin` to `false`,
    simply double-click on the blue box that contains the `true` value and type in
    `false`. You will be able to observe the effects of your changes in your Angular
    app.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，如果您想将`displayLogin`的值更改为`false`，只需双击包含`true`值的蓝色框，并输入`false`。您将能够在Angular应用程序中观察到您更改的效果。
- en: In order to observe the runtime component hierarchy of `HomeComponent`, you
    can observe the **Injector Graph**.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了观察 `HomeComponent` 的运行时组件层次结构，你可以观察 **注入器图**。
- en: 'Click on the **Injector Graph** tab, as shown:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击如图所示的 **注入器图** 选项卡：
- en: '![](img/B14094_A2_11.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_11.png)'
- en: 'Figure 11: Augury Injector Graph'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11：Augury 注入器图
- en: This view shows how your selected component came to be rendered. In this case,
    we can observe that `HomeComponent` was rendered within `AppComponent`. This visualization
    can be very helpful in tracking down the implementation of a particular component
    in an unfamiliar code base or where a deep component tree exists.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图显示了所选组件是如何被渲染的。在这种情况下，我们可以观察到 `HomeComponent` 是在 `AppComponent` 中被渲染的。这种可视化在追踪不熟悉的代码库中特定组件的实现或存在深层组件树的情况下非常有帮助。
- en: Router Tree
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由树
- en: 'The **Router Tree** tab will display the current state of the router. This
    can be a very helpful tool in visualizing the relationship between routes and
    components, as shown:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**路由树** 选项卡将显示路由的当前状态。这可以是一个非常有助于可视化路由和组件之间关系的工具，如图所示：'
- en: '![](img/B14094_A2_12.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_12.png)'
- en: 'Figure 12: Augury Router Tree'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12：Augury 路由树
- en: The preceding router tree demonstrates a deeply nested routing structure with
    master-detail views. You can see the absolute path and parameters required to
    render a given component by clicking on the circular node.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 上述路由树展示了具有主-详细视图的深度嵌套路由结构。你可以通过点击圆形节点来查看渲染给定组件所需的绝对路径和参数。
- en: As you can see, for `PersonDetailsComponent`, it can get complicated to determine, exactly,
    the set of parameters needed to render this detail portion of a master-detail
    view.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，对于 `PersonDetailsComponent`，确定渲染主-详细视图的这一部分所需的确切参数集可能会变得复杂。
- en: NgModules
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NgModules
- en: 'The **NgModules** tab displays the `AppModule` and any other feature module
    that is currently loaded into memory:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**NgModules** 选项卡显示了 `AppModule` 和任何其他当前已加载到内存中的功能模块：'
- en: Launch the `/home` route of the app and hit enter on the address bar, so Augury
    registers the navigation event
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序的 `/home` 路由并在地址栏中按回车键，以便 Augury 注册导航事件
- en: Observe the **NgModules** tab, as follows:![](img/B14094_A2_13.png)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察如图所示的 **NgModules** 选项卡：![](img/B14094_A2_13.png)
- en: 'Figure 13: Augury NgModules'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13：Augury NgModules
- en: You'll note that all root-level modules, including the `AppModule`, are loaded.
    However, since our application has a lazy-loaded architecture, none of our feature
    modules are loaded yet.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到所有根级模块，包括 `AppModule`，都已经加载。然而，由于我们的应用程序具有懒加载架构，我们还没有加载任何功能模块。
- en: Navigate to a page in `ManagerModule` and hit enter on the address bar
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `ManagerModule` 中的一个页面并在地址栏中按回车键
- en: Then, navigate to a page in `UserModule` and hit enter on the address bar
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，导航到 `UserModule` 中的一个页面并在地址栏中按回车键
- en: Finally, navigate back to the `/home` route and hit enter on the address bar
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导航回 `/home` 路由并在地址栏中按回车键
- en: Observe the **NgModules** tab, as shown:![](img/B14094_A2_14.png)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察如图所示的 **NgModules** 选项卡：![](img/B14094_A2_14.png)
- en: 'Figure 14: Augury NgModules with three modules'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14：Augury 包含三个模块的 NgModules
- en: Now, you'll observe that `ManagerModule` and `UserModule`, along with all of their
    related modules, have been loaded into memory.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你会注意到 `ManagerModule` 和 `UserModule` 以及所有相关的模块已经被加载到内存中。
- en: '**NgModules** is an important tool to visualize the impact of your design and
    architecture.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**NgModules** 是一个重要的工具，可以可视化你的设计和架构的影响。'
- en: Debugging with Redux DevTools
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Redux DevTools 进行调试
- en: There are two major strategies to debug and get instrumentation from NgRx.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种主要的策略用于调试和从 NgRx 获取仪表化。
- en: Implement a console logger for debugging
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个控制台日志记录器进行调试
- en: Configure Store DevTools for rich instrumentation
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Store DevTools 以进行丰富的仪表化
- en: Let's start with the simple debugging solution.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的调试解决方案开始。
- en: Implement NgRx Console Logger
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现NgRx控制台日志记录器
- en: In `app.module`, `StoreModule` is configured to inject a `MetaReducer` into
    your configuration. Meta-reducers are able to listen to all events happening in
    the action-reducer pipeline, thereby giving you the ability to preprocess actions.
    We can use this hook to implement a simple logger.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.module` 中，`StoreModule` 被配置为将一个 `MetaReducer` 注入到你的配置中。元减法器能够监听在动作-减法器管道中发生的所有事件，从而赋予你预处理动作的能力。我们可以使用这个钩子来实现一个简单的日志记录器。
- en: 'Implement a function called `logger` in `reducers/index.ts`:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `reducers/index.ts` 中实现一个名为 `logger` 的函数：
- en: '[PRE11]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Configure the `logger` with `metaReducers` and only in non-production mode:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `metaReducers` 配置 `logger`，并且仅在非生产模式下：
- en: '[PRE12]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now give it a whirl and you should be able to observe NgRx right in your console,
    shown as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试一下，你应该能在你的控制台中观察到NgRx，如下所示：
- en: '![](img/B14094_A2_15.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_15.png)'
- en: 'Figure 15: Console view with NgRx logs'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：带有NgRx日志的控制台视图
- en: Configuring NgRx Store DevTools
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置NgRx Store DevTools
- en: 'The NgRx Store Devtools package can also assist with our debugging efforts
    during development or provide instrumentation of our production builds. Add the
    package by running the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: NgRx Store Devtools包也可以在开发过程中协助我们的调试工作，或者在生成生产构建时提供仪表化。通过运行以下命令添加该包：
- en: '[PRE13]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You will notice that the package will automatically add production instrumentation
    rules in `app.module`, so that only the last 25 events are captured. This is necessary
    to avoid performance issues.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到该包会自动在`app.module`中添加生产仪表化规则，以便只捕获最后25个事件。这是为了避免性能问题。
- en: Once installed, in order to leverage the instrumentation generated and to be
    able to debug NgRx, you will want to install the Redux DevTools extension for
    Chrome or Firefox, found at [https://github.com/zalmoxisus/redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension)
    or [http://extension.remotedev.io](http://extension.remotedev.io).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装，为了利用生成的仪表化并能够调试NgRx，你将需要安装Chrome或Firefox的Redux DevTools扩展，可以在[https://github.com/zalmoxisus/redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension)或[http://extension.remotedev.io](http://extension.remotedev.io)找到。
- en: 'Once you launch your application, activate the extension and observe that detailed
    instrumentation over time is being captured by Redux DevTools, shown as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动你的应用程序，激活扩展，你应该能看到Redux DevTools随着时间的推移正在捕获详细的仪表化，如下所示：
- en: '![](img/B14094_A2_16.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_16.png)'
- en: 'Figure 16: Redux DevTools'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图16：Redux DevTools
- en: Redux DevTools gives you the capability to play back events and view state changes.
    This is demonstrated in the bottom-right quadrant of the preceding screenshot.
    You can observe the current city as **Bursa** and its previous value, **Bethesda**.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Redux DevTools为你提供了回放事件和查看状态变化的能力。这在上一个截图的右下象限中得到了演示。你可以观察到当前城市为**布尔萨**，其前一个值为**贝塞斯达**。
- en: Debugging RxJS
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试RxJS
- en: 'There are two major strategies to debug and get information about what''s happening
    inside an RxJS pipe:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 调试RxJS管道内部发生情况的主要策略有两个：
- en: Tap into the event stream and console log the event data at a particular point
    in the stream
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 深入事件流并记录特定点的流事件数据
- en: Execute breakpoint debugging in dev tools
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发者工具中执行断点调试
- en: Let's start with using the `tap` operator.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用`tap`操作符开始。
- en: Tapping an RxJS Event Stream
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入RxJS事件流
- en: In *Chapter 6*, *Forms, Observables, and Subjects*, we introduced the RxJS `tap`
    operator as a way to direct the flow of user input from our search input's stream
    of change events, and eventually call our `doSearch` function. When an RxJS stream
    doesn't seem to be behaving as you'd expect, you can combine the `tap` operator
    and `console.log` to log each event's data, so you can see it over time. Since
    `tap` captures the data in the stream based on where it falls in the order of
    operations, once added to the stream, you can simply use VS Code's line movement
    keyboard shortcuts to move it around and test the flow.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第6章*，*表单、可观察对象和主题*中，我们介绍了RxJS的`tap`操作符，作为将用户输入从搜索输入的更改事件流中引导出来的方式，并最终调用我们的`doSearch`函数。当RxJS流似乎没有按预期行为时，你可以结合`tap`操作符和`console.log`来记录每个事件的详细数据，这样你就可以随着时间的推移看到它。由于`tap`根据操作顺序中的位置捕获流中的数据，一旦添加到流中，你就可以简单地使用VS
    Code的行移动键盘快捷键来移动它并测试流程。
- en: To move a line of code up or down, use `Alt` + `↑` and `Alt` + `↓` on Windows
    or `![](img/B14094_A2_231.png)` + `↑` and `![](img/B14094_A2_231.png)` + `↓` on
    macOS.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要移动代码行上下，在Windows上使用`Alt` + `↑`和`Alt` + `↓`，在macOS上使用`![](img/B14094_A2_231.png)`
    + `↑`和`![](img/B14094_A2_231.png)` + `↓`。
- en: 'The following `tap` in `CitySearchComponent` will log to the console every
    change event coming from the input:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`CitySearchComponent`中的以下`tap`将记录来自输入的每个更改事件：'
- en: '[PRE14]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/B14094_A2_17.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_17.png)'
- en: 'Figure 17: RxJS logging every event'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图17：RxJS记录每个事件
- en: 'If we move the `tap` down one line, instead of getting every user input, we
    will get only the debounced events:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`tap`向下移动一行，那么我们不会得到每个用户输入，而只会得到防抖事件：
- en: '[PRE15]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/B14094_A2_18.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_18.png)'
- en: 'Figure 18: RxJS logging only debounced events'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图18：RxJS仅记录防抖事件
- en: 'One more line down, and we see the events after being debounced and filtered:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 再向下移动一行，我们看到经过防抖和过滤后的事件：
- en: '[PRE16]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/B14094_A2_19.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_19.png)'
- en: 'Figure 19: RxJS ignoring invalid inputs'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图19：RxJS忽略无效输入
- en: Note that since one character is invalid, the filter has caught this event and
    not allowed it through, thus we see no data in the console.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于一个字符无效，过滤器捕获了这个事件并没有让它通过，因此我们在控制台中看不到任何数据。
- en: 'While it can be very confusing in the console, you can also log many things
    at once, utilizing a callback instead of just passing the `console.log` callable:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在控制台中可能会非常混乱，但你也可以同时记录很多东西，使用回调而不是仅仅传递`console.log`可调用函数：
- en: '[PRE17]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/B14094_A2_20.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_20.png)'
- en: 'Figure 20: RxJS logging multiple events'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图20：RxJS记录多个事件
- en: Next, let's see how we can leverage breaking debugging.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何利用断点调试。
- en: Breakpoint debugging an RxJS Event Stream
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断点调试RxJS事件流
- en: Refer to the *Debugging with DevTools* section earlier in the chapter to learn
    more about breakpoint debugging. The important bit in debugging RxJS is to understand
    what the blue carets are for in the debugger.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章前面的*使用DevTools进行调试*部分，了解更多关于断点调试的信息。在调试RxJS时，重要的是要理解调试器中蓝色光标的作用。
- en: 'When a line of code has multiple points that can be used to pause execution,
    these are indicated with the square-sided carets. These can be toggled on (dark,
    solid) or off (light, transparent) to indicate where in the line of code you want
    the browser to stop, as shown in the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当一行代码有多个可以暂停执行的位置时，这些位置会用方形光标表示。这些光标可以是开启的（深色，实心）或关闭的（浅色，透明），以指示你希望在代码行的哪个位置让浏览器停止，如下面的截图所示：
- en: '![](img/B14094_A2_21.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14094_A2_21.png)'
- en: 'Figure 21: RxJS breakpoint debugging'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图21：RxJS断点调试
- en: The carets can be used to stop the browser mid-stream, inside a callback where
    work is done, to examine the data or even manipulate it. In the preceding example,
    I've set the breakpoint debugger to break inside the filter function, so I can
    examine the state of the search input field.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 光标可以用来在浏览器中停止流，在执行工作的回调函数内部，以检查数据或甚至操作它。在上面的例子中，我已经将断点调试器设置为在过滤器函数内部中断，这样我就可以检查搜索输入字段的当前状态。
- en: Experiment with debugging to learn more about it.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实验调试来了解更多相关信息。
- en: Further advice
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步的建议
- en: If you're still stuck, don't get frustrated. Even the best of us spend countless
    hours on minor issues at times. However, if you need it, you can ask for help.
    Angular has a rich and supportive community online.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然遇到困难，不要沮丧。即使是最好的人有时也会在小事上花费无数小时。然而，如果你需要，你可以寻求帮助。Angular在网上有一个丰富且支持性强的社区。
- en: 'It does matter a lot how you go about asking for help. First replicate your
    issue using [https://stackblitz.com/](https://stackblitz.com/). Half the time,
    you will figure out your issue in the process of replicating it. Next, ask a question
    on [https://stackoverflow.com](https://stackoverflow.com). If you can provide
    the StackBlitz link to your issue, your problem will likely get answered quickly.
    If it turns out there might be an issue with the framework itself, then create
    a GitHub issue on the correct repository (in other words, Angular, CLI, Material,
    NgRx, RxJS, and so on) detailing your problem. If you found a bug in the framework,
    then you''ve officially contributed to the development of the open source project:
    ![](img/B14094_A2_24.png)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你寻求帮助的方式非常重要。首先使用[https://stackblitz.com/](https://stackblitz.com/)复现你的问题。一半的时间，你会在复现问题的过程中找到你的问题。接下来，在[https://stackoverflow.com](https://stackoverflow.com)上提问。如果你能提供StackBlitz链接到你的问题，你的问题很可能会得到快速解答。如果最终发现可能是框架本身的问题，那么在正确的存储库（换句话说，Angular、CLI、Material、NgRx、RxJS等）上创建一个GitHub问题，详细说明你的问题。如果你在框架中发现了bug，那么你就正式为开源项目的发展做出了贡献：![](img/B14094_A2_24.png)
- en: Otherwise, you can also use Twitter and search for help on the `@angular` or
    `#angular` handles. Personally, I'm a big fan of Googling. My philosophy is that
    someone else probably ran into the same issue as I did, and believe me when I
    say this -- a well-formed Google query is a problem half-solved.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你也可以使用Twitter并搜索`@angular`或`#angular`标签以寻求帮助。我个人是Google的大粉丝。我的哲学是，别人可能遇到了和我一样的问题，当我说这句话的时候——一个良好的Google查询就是问题解决了一半。
