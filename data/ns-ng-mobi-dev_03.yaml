- en: Our First View via Component Building
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个视图通过组件构建
- en: We've been working hard at framing the base of our app in [Chapter 2](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d),
    *Feature Modules,* and now it's time to finally get a glimpse of what we're working
    with. This is all about getting that first view from our sketch to the mobile
    device screen.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d) *特性模块*中努力构建我们应用程序的基础，现在是时候最终看一眼我们正在处理的内容了。这就是将我们的草图从屏幕上的移动设备上获取第一个视图的过程。
- en: Building views with NativeScript for Angular is not much different than view
    building for the web. We will use Angular's Component decorator to build various
    components our UI needs to achieve the desired usability we're after. Instead
    of using the HTML markup, we will be using NativeScript XML, which is an extremely
    powerful, yet simple and concise, abstraction of all native view components on
    both iOS and Android.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NativeScript为Angular构建视图与为Web构建视图并没有太大的不同。我们将使用Angular的Component装饰器来构建各种组件，以实现我们所需的可用性。我们将使用NativeScript
    XML而不是HTML标记，这是一个非常强大、简单而简洁的抽象，可以在iOS和Android上使用所有本地视图组件。
- en: 'We won''t be covering all the benefits and types of components you have access
    to here; but to learn more, we recommend any of the following books:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里涵盖您可以访问的所有组件的好处和类型；但是要了解更多信息，我们建议阅读以下任何一本书：
- en: '[https://www.packtpub.com/web-development/getting-started-nativescript](https://www.packtpub.com/web-development/getting-started-nativescript)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/getting-started-nativescript](https://www.packtpub.com/web-development/getting-started-nativescript)'
- en: '[https://www.manning.com/books/nativescript-in-action](https://www.manning.com/books/nativescript-in-action)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.manning.com/books/nativescript-in-action](https://www.manning.com/books/nativescript-in-action)'
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using Component decorator to compose our views
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Component装饰器来组合我们的视图
- en: Creating reusable components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用的组件
- en: Creating a custom view filter using Pipe
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用管道创建自定义视图过滤器
- en: Running the app on the iOS and Android simulators
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iOS和Android模拟器上运行应用程序
- en: Our first view via component building
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个视图通过组件构建
- en: If we look at our sketch from [Chapter 1](part0023.html#LTSU0-289fe2426d594f99a90e4363b2c9c34d),
    *Get into Shape with @NgModule*, we can see a header at the top of the app, which
    will contain our app title with the record button to the right. We also see a
    listing of tracks with some player controls at the bottom. We can break these
    key elements of our UI design into essentially three primary components. One component
    is already provided by the NativeScript framework, the ActionBar, which we will
    use to represent the top header.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从[第1章](part0023.html#LTSU0-289fe2426d594f99a90e4363b2c9c34d) *使用@NgModule塑造应用程序*中查看我们的草图，我们可以看到应用程序顶部有一个标题，其中包含我们的应用程序标题和右侧的记录按钮。我们还可以看到一些播放器控件的轨道列表在底部。我们可以将我们的UI设计的这些关键元素基本上分解为三个主要组件。一个组件已经由NativeScript框架提供，ActionBar，我们将使用它来表示顶部标题。
- en: NativeScript provides many rich view components to build our UI. The markup
    is not HTML but rather XML with an `.html` extension, which may seem unusual.
    The reason the `.html` extension is used for XML view templates with NativeScript
    for Angular is that the custom renderer ([https://github.com/NativeScript/nativescript-angular](https://github.com/NativeScript/nativescript-angular))
    uses a DOM adapter to parse the view template. Each NativeScript XML component
    represents true native view widgets on each respective platform.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NativeScript提供了许多丰富的视图组件来构建我们的UI。标记不是HTML，而是XML，具有`.html`扩展名，这可能看起来不太寻常。使用`.html`扩展名用于NativeScript
    for Angular的XML视图模板的原因是，自定义渲染器([https://github.com/NativeScript/nativescript-angular](https://github.com/NativeScript/nativescript-angular))使用DOM适配器来解析视图模板。每个NativeScript
    XML组件代表各自平台上的真正本地视图小部件。
- en: For the other two primary components, we will use Angular's Component decorator.
    It's important at this phase of the app development cycle to think about encapsulated
    pieces of UI functionality. We will encapsulate our track listing as a component
    and the player controls as another component. In this exercise, we will use an outside-in
    approach to building our UI from an abstract viewpoint down to the implementation
    details of each component.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于另外两个主要组件，我们将使用Angular的Component装饰器。在应用程序开发周期的这个阶段，思考封装的UI功能部分非常重要。我们将把我们的曲目列表封装为一个组件，将播放器控件封装为另一个组件。在这个练习中，我们将使用从抽象视角到每个组件的实现细节的外部到内部的方法来构建我们的UI。
- en: 'To begin, let''s focus on the root component in our Angular app because it
    will define the basic layout of our first view. Open `app/app.component.html`,
    clear its contents, and replace with the following to rough out the initial UI
    concept from our sketch:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们专注于我们Angular应用程序中的根组件，因为它将定义我们第一个视图的基本布局。打开`app/app.component.html`，清空其内容，并用以下内容替换，以从我们的草图中勾勒出初始UI概念：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We are expressing our view with `ActionBar` and the primary layout container
    for the main view, `GridLayout`. With NativeScript, it''s important that each
    view starts with a layout container as the root node (outside of any `ActionBar`
    or `ScrollView`), much like `div` tags that are used with HTML markup. At the
    time of this writing, there are six layout containers provided by NativeScript:
    `StackLayout`, `GridLayout`, `FlexboxLayout`, `AbsoluteLayout`, `DockLayout`,
    and `WrapLayout`. For our layout here, `GridLayout` will work well.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用`ActionBar`和主视图的主要布局容器`GridLayout`来表达我们的观点。在NativeScript中，每个视图都以布局容器作为根节点开始（在任何`ActionBar`或`ScrollView`之外），就像在HTML标记中使用`div`标签一样。在撰写本文时，NativeScript提供了六种布局容器：`StackLayout`、`GridLayout`、`FlexboxLayout`、`AbsoluteLayout`、`DockLayout`和`WrapLayout`。对于我们的布局，`GridLayout`将很好地工作。
- en: All about the GridLayout
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于GridLayout
- en: The GridLayout is one of the three most used layouts you will use in your NativeScript
    application (the others are FlexboxLayout and StackLayout). This is the layout
    that allows you to build complex layouts easily.  To use the GridLayout is very
    much like the enhanced table in HTML.  You are basically going to want to take
    your screen area and divide your screen into the pieces you need. It will allow
    you to tell the columns (or rows) to be a percentage of the remaining width (and
    height) of the screen. The grid supports three types of values; **absolute size**,
    a percentage of **remaining space**, and **used space**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GridLayout是你在NativeScript应用程序中将使用的三种最常用的布局之一（其他两种是FlexboxLayout和StackLayout）。这是一个允许您轻松构建复杂布局的布局。使用GridLayout非常类似于HTML中的增强表格。基本上，您要将屏幕区域分成所需的部分。它将允许您告诉列（或行）成为屏幕剩余宽度（和高度）的百分比。网格支持三种类型的值；**绝对大小**，剩余空间的百分比和使用的空间。
- en: For **absolute size**, you just type in the number. For example, `100` means
    it will use 100 dp of space.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**绝对大小**，只需输入数字。例如，`100`表示它将使用100 dp的空间。
- en: Another name for **dp** is **dip**. They are the same. A device-independent
    pixel (also density-independent pixel, DIP, or DP) is a physical unit of measurement
    based on a coordinate system held by a computer and represents an abstraction
    of a pixel for use by an application that an underlying system then converts to
    physical pixels.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个**dp**的名字是**dip**。它们是一样的。设备无关像素（也称为密度无关像素、DIP或DP）是基于计算机持有的坐标系统的测量单位，代表了应用程序使用的像素的抽象，然后由底层系统转换为物理像素。
- en: If you take the smallest iOS device supported, it has a screen width of 320dp.
    For other devices, such as tablets, some have a width of 1024 dp. So, 100 dp would
    be almost one third of an iOS phone, where it is one tenth of the screen on a
    tablet. So, this is something you need to think about when using fixed absolute
    values. It is typically better to use the used space over a fixed value, unless
    you are needing to constrain the column to a specific size.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑到最小的支持的iOS设备，它的屏幕宽度为320dp。对于其他设备，如平板电脑，一些宽度为1024 dp。因此，100 dp 几乎是iOS手机屏幕的三分之一，而在平板电脑上则是屏幕的十分之一。因此，在使用固定的绝对值时，这是您需要考虑的事情。通常最好使用使用的空间而不是固定值，除非您需要将列限制为特定大小。
- en: To use **remaining space-**based values , that is, `***`, the `***` tells it
    to use the rest of the remaining space. If the columns (or rows) is set to *`*`, `*`*,
    then space will be divided into two equal remainders of space. Likewise, `rows="*,*,*,*,*"`
    will specify five equal sized rows. You can also specify things, such as `columns="2*,3*,*",`
    and you will get three columns; the first column will be two sixth of the screen,
    the second column will be three sixth of the screen, and the final column will
    be one sixth of the screen (that is, 2+3+1 = 6).  This allows you great flexibility
    in how to use the remainder of the space.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**剩余空间**为基础的值，也就是 `***`，`***` 告诉它使用剩余空间的其余部分。如果列（或行）设置为 `*`，`*`，那么空间将被分成两个相等的剩余空间。同样，`rows="*,*,*,*,*"`
    将指定五个相等大小的行。您还可以指定诸如 `columns="2*,3*,*"` 这样的东西，您将得到三列；第一列将是屏幕的六分之二，第二列将是屏幕的三分之一，最后一列将是屏幕的六分之一（即
    2+3+1 = 6）。这使您在如何使用剩余空间方面具有极大的灵活性。
- en: The third type of sizing is **space used**. So what happens is the content inside
    the grid is measured and then the column is assigned the size that is the max
    used in that column (or row). This is very useful when you have a grid where you
    have data but you aren't sure of the size or you don't really care; you just want
    it to look good. So, this is the auto keyword. I might have `columns="auto,auto,*,auto"`.
    This means columns 1,2, and 4 will all be automatically sized based on the content
    inside those columns; and column 3 will use whatever space is left over. This
    is very useful for laying out the entire screen or parts of the screen where you
    are looking for a certain look.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种大小类型是**使用的空间**。所以发生的情况是网格内的内容被测量，然后列被分配为该列（或行）中使用的最大尺寸。当您有一个包含数据的网格，但不确定大小或者您并不在乎时，这是非常有用的；您只是希望它看起来不错。因此，这是自动关键字。我可能会写
    `columns="auto,auto,*,auto"`。这意味着列1、2和4将根据这些列内的内容自动调整大小；而列3将使用剩下的空间。这对于布局整个屏幕或屏幕的部分非常有用，您希望它看起来某种特定的样子。
- en: The final reason why the GridLayout is one of the best layouts is that when
    you assign items to the GridLayout, you can actually assign multiple items to
    the same rows and/or columns and you can use row or column spans to allow items
    to use more than one row and/or column.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: GridLayout 是最好的布局之一的最后一个原因是，当您将项目分配给GridLayout时，您实际上可以将多个项目分配给相同的行和/或列，并且可以使用行或列跨度来允许项目使用多个行和/或列。
- en: To assign an object, you just assign it via `row="0"` and/or `col="0"` (keep
    in mind these are index-based positions). You can also use `rowSpan` and `colSpan`
    to make an element span multiple rows and/or columns. Overall, the GridLayout
    is the most versatile layout and allows you to easily create almost any layout
    you will need in your app.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要分配一个对象，你只需通过 `row="0"` 和/或 `col="0"` 进行分配（请记住这些是基于索引的位置）。您还可以使用 `rowSpan` 和
    `colSpan` 来使元素跨越多行和/或列。总的来说，GridLayout 是最通用的布局，可以让您轻松地创建几乎任何您在应用程序中需要的布局。
- en: Back to our layout
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到我们的布局
- en: Inside the grid, we have declared a `track-list` component to represent our track
    listing, which will flex vertically, taking up all the vertical space and leaving
    only a height of 100 for `player-controls`. We indicate `track-list` as `row="0"
    col="0"`, since rows and columns are index-based. The flexible (remainder) vertical
    height is defined via the GridLayout's `*` in the rows attribute. The bottom section
    of the grid (row 1) will represent the player controls, allowing users to play/pause
    the mix and shuttle the playback position.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在网格内，我们声明了一个`track-list`组件来表示我们的曲目列表，它将垂直伸展，占据所有的垂直空间，只留下`player-controls`的高度为100。我们将`track-list`指定为`row="0"
    col="0"`，因为行和列是基于索引的。通过GridLayout的`*`在rows属性中定义了灵活（剩余）的垂直高度。网格的底部部分（第1行）将表示播放器控件，允许用户播放/暂停混音并移动播放位置。
- en: Now that we have the app's primary view defined in a rather abstract way, let's
    dive into the two custom components we need to build, `track-list` and `player-controls`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经以相当抽象的方式定义了应用程序的主视图，让我们深入研究我们需要构建的两个自定义组件，`track-list`和`player-controls`。
- en: Building TrackList component
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建TrackList组件
- en: The track list should be a listing of all the recorded tracks. Each row in the
    list should provide a single record button to re-record in addition to a name
    label for displaying the title provided by the user. It should also provide a
    switch to allow the user to solo just that particular track.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 曲目列表应该是所有录制曲目的列表。列表中的每一行都应该提供一个单独的录制按钮，以重新录制，另外还应该提供一个用于显示用户提供的标题的名称标签。它还应该提供一个开关，允许用户独奏特定的曲目。
- en: We can inject `PlayerService` and declare it `public` to allow us to bind directly
    to the service's tracks collection.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注入`PlayerService`并将其声明为`public`，以便我们可以直接绑定到服务的tracks集合。
- en: We can also mock out some of our bindings to get things rolling like the `record`
    action. For now, let's just allow a track to be passed in and let's print out
    an inspection of that track via `LogService`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以模拟一些绑定来启动一些操作，比如`record`操作。现在，让我们允许传入一个track，并通过`LogService`打印出对该track的检查。
- en: 'Let''s start by creating `app/modules/player/components/track-list/ track-list.component.ts`(with
    a matching `.html` template):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建`app/modules/player/components/track-list/track-list.component.ts`（配套的`.html`模板）开始：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For the view template `track-list.component.html`, we are going to employ the
    powerful `ListView` component. This widget represents the native UITableView ([https://developer.apple.com/reference/uikit/uitableview](https://developer.apple.com/reference/uikit/uitableview))
    on iOS and the native ListView ([https://developer.android.com/guide/topics/ui/layout/listview.html](https://developer.android.com/guide/topics/ui/layout/listview.html))
    on Android, offering 60 fps virtual scrolling with reused rows. Its performance
    is unparalleled on mobile devices:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于视图模板`track-list.component.html`，我们将使用强大的`ListView`组件。这个小部件代表了iOS上的原生UITableView（[https://developer.apple.com/reference/uikit/uitableview](https://developer.apple.com/reference/uikit/uitableview)）和Android上的原生ListView（[https://developer.android.com/guide/topics/ui/layout/listview.html](https://developer.android.com/guide/topics/ui/layout/listview.html)），提供了60fps的虚拟滚动和重用行。它在移动设备上的性能是无与伦比的：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There's a lot going on with this view template, so let's inspect it a bit.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图模板有很多内容，让我们来仔细检查一下。
- en: Since we made `playerService` `public` upon injection into our Component's constructor,
    we can bind directly to its tracks via the `ListView` items' attribute using standard
    Angular binding syntax expressed as `[items]`. This will be the collection our
    list will iterate on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在组件构造函数中将`playerService`声明为`public`，我们可以通过标准的Angular绑定语法`[items]`直接绑定到其tracks，这将是我们的列表将迭代的集合。
- en: The `template` node inside allows us to encapsulate how each row of our list
    will be laid out. It also allows us to declare a variable name (`let-track`) for
    use as our iterator reference.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 内部的`template`节点允许我们封装列表中每一行的布局方式。它还允许我们声明一个变量名（`let-track`）作为我们的迭代器引用。
- en: We start with a GridLayout, since each row will contain a Record button (to
    allow a track to be re-recorded), to which we will assign a width of 75\. This
    button will be bound to the `tap` event, which will activate a recording session
    if the user is authenticated.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个GridLayout开始，因为每一行都将包含一个录制按钮（允许重新录制轨道），我们将为其分配宽度为75。这个按钮将绑定到`tap`事件，如果用户经过身份验证，将激活一个录制会话。
- en: Then, we will have a Label to display a user-provided name for the track, which
    we will assign `*` to ensure it expands to fill the horizontal space in between
    our left-hand and right-hand columns. We use the text attribute to bind to `track.name`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将有一个标签来显示轨道的用户提供的名称，我们将分配`*`以确保它扩展以填充左侧和右侧列之间的水平空间。我们使用文本属性来绑定到`track.name`。
- en: Lastly, we will use `switch` to allow the user to toggle soloing the track in
    the mix. This provides the `checked` attribute to allow us to bind our `track.solo`
    property to.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用`switch`来允许用户在混音中切换独奏轨道。这提供了`checked`属性，允许我们将`track.solo`属性绑定到。
- en: Building a dialog wrapper service to prompt the user
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个对话框包装服务来提示用户
- en: If you recall from [Chapter 1](part0023.html#LTSU0-289fe2426d594f99a90e4363b2c9c34d), *Get
    Into Shape with @NgModule*, recording is a feature that should only be available
    to authenticated users. Therefore, we will want to prompt the user with a login
    dialog when they tap the Record button on each track. If they are already logged
    in, we will want to prompt them to confirm if they want to re-record the track
    for good usability.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得[第1章](part0023.html#LTSU0-289fe2426d594f99a90e4363b2c9c34d)中的*使用 @NgModule
    进入形式*，录制是一个只能由经过身份验证的用户使用的功能。因此，当他们点击每个轨道的录制按钮时，我们将希望提示用户进行登录对话框。如果他们已经登录，我们将希望提示他们确认是否要重新录制轨道，以确保良好的可用性。
- en: We could handle this dialog directly in the Component by importing a NativeScript
    dialog service that provides a consistent API across both platforms. The `ui/dialogs`
    module from the NativeScript framework ([https://docs.nativescript.org/ui/dialogs](https://docs.nativescript.org/ui/dialogs))
    is a very convenient service, allowing you to create native alerts, confirms,
    prompts, actions, and basic login dialogs. However, we may want to provide custom
    native dialog implementations on both iOS and Android down the road for an even
    nicer UX experience. There are several plugins that provide very elegant native
    dialogs, for example, [https://github.com/NathanWalker/nativescript-fancyalert](https://github.com/NathanWalker/nativescript-fancyalert).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导入一个提供跨平台一致API的NativeScript对话框服务来直接处理这个对话框。NativeScript框架的`ui/dialogs`模块（[https://docs.nativescript.org/ui/dialogs](https://docs.nativescript.org/ui/dialogs)）是一个非常方便的服务，允许您创建原生警报、确认、提示、操作和基本登录对话框。然而，我们可能希望为iOS和Android提供自定义的原生对话框实现，以获得更好的用户体验。有几个插件提供非常优雅的原生对话框，例如，[https://github.com/NathanWalker/nativescript-fancyalert](https://github.com/NathanWalker/nativescript-fancyalert)。
- en: To prepare for this enriched user experience, let's build a quick Angular service
    that we can inject and use everywhere, which will allow us to easily implement
    these niceties down the road.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为这种丰富的用户体验做好准备，让我们构建一个快速的Angular服务，我们可以注入并在任何地方使用，这将使我们能够轻松地在将来实现这些美好的东西。
- en: 'Since this should be considered a `core` service to our app, let''s create `app/modules/core/services/dialog.service.ts`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这应该被视为我们应用的“核心”服务，让我们创建`app/modules/core/services/dialog.service.ts`：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At first glance, this may appear incredibly wasteful! Why create a wrapper that
    provides the exact same API as a service that already exists from the NativeScript
    framework?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这似乎非常浪费！为什么要创建一个提供与已经存在于NativeScript框架中的服务完全相同API的包装器？
- en: Yes, indeed, at this stage, it appears that way. However, we are preparing for
    greatness in flexibility and power with how we will handle these dialogs in the
    future. Stay tuned for a potential bonus chapter of material covering this fun
    and unique polish to the integration.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，确实，在这个阶段看起来是这样。然而，我们正在为将来处理这些对话框的灵活性和强大性做准备。敬请关注可能涵盖这种有趣而独特的整合的潜在奖励章节。
- en: The last thing we need to do before we move on to use this service is to ensure
    it is added to our core service `PROVIDERS` collection. This will make sure Angular's
    DI system knows our new service is a valid token available for injection.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续使用这个服务之前，我们需要做的最后一件事是确保它被添加到我们的核心服务`PROVIDERS`集合中。这将确保Angular的DI系统知道我们的新服务是一个有效的可用于注入的令牌。
- en: 'Open `app/modules/core/services/index.ts` and modify as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app/modules/core/services/index.ts`并进行以下修改：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We are now ready to inject and use our new service.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好注入和使用我们的新服务。
- en: Integrating DialogService into our component
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将DialogService集成到我们的组件中
- en: 'Let''s open up `track-list.component.ts` and inject `DialogService` for use
    in our record method. We will also need to determine if the user is logged in
    to conditionally display a login dialog or confirm prompt, so let''s also inject `AuthService`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`track-list.component.ts`并注入`DialogService`以在我们的记录方法中使用。我们还需要确定用户是否已登录，以有条件地显示登录对话框或确认提示，因此让我们也注入`AuthService`：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The record method now first checks to see whether a user is authenticated via
    the static `AuthService.CURRENT_USER` reference, which is set when `AuthService`
    is first constructed via Angular's dependency injection upon app launch (see [Chapter
    2](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d), *Feature Modules*).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，记录方法首先检查用户是否经过静态`AuthService.CURRENT_USER`引用进行了身份验证，该引用是在应用启动时通过Angular的依赖注入首次构建`AuthService`时设置的（参见[第2章](part0037.html#1394Q0-289fe2426d594f99a90e4363b2c9c34d)，*特性模块*）。
- en: If a user is authenticated, we present a confirmation dialog to ensure the action
    was intentional.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已经通过身份验证，我们会呈现一个确认对话框以确保操作是有意的。
- en: If the user is not authenticated, we want to prompt the user to log in. To reduce
    the overload for this book, we will assume the user is already registered via
    a backend API, so we won't be asking the user to register.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户没有经过身份验证，我们希望提示用户登录。为了减少本书的负担，我们将假设用户已经通过后端API注册，因此我们不会要求用户注册。
- en: We need to implement the `promptLogin` method in `AuthService` to persist the
    user's login credentials, so every time they return to the app, it will automatically
    log them in. The record method now provides an extra optional argument `usernameAttempt`,
    which will be useful to repopulate the username field of the login prompt when
    reinitiating the login sequence after a user input validation error. We won't do
    a thorough validation of user input here, but we can at least do a lightweight
    check for a valid email.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`AuthService`中实现`promptLogin`方法来持久保存用户的登录凭据，这样他们每次返回应用时都会自动登录。现在，记录方法提供了一个额外的可选参数`usernameAttempt`，当在用户输入验证错误后重新启动登录序列时，这将有助于重新填充登录提示的用户名字段。我们不会在这里对用户输入进行彻底的验证，但至少可以对有效的电子邮件进行轻量级检查。
- en: In your own app, you should probably do more user input validation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在您自己的应用中，您可能应该进行更多的用户输入验证。
- en: 'To maintain a clean separation of concerns, open `app/modules/core/services/auth.service.ts`
    to implement `promptLogin`. Here''s the entire service with the modifications:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持关注点的清晰分离，打开`app/modules/core/services/auth.service.ts`来实现`promptLogin`。以下是带有修改的整个服务：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We use the `dialogService.login` method to open a native login dialog, allowing
    the user to input a username and password. Once they choose ok, we do minimal
    validation of the input and, if successful, proceed to persist the username and
    password via `DatabaseService`. Otherwise, we simply alert the user of an error
    and reject our promise, passing along the username that was entered. This allows
    us to help the user out by redisplaying the login dialog with the failed username
    they entered, so they can more easily make corrections.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`dialogService.login`方法打开本机登录对话框，允许用户输入用户名和密码。一旦他们选择确定，我们对输入进行最小的验证，如果成功，就会继续通过`DatabaseService`持久保存用户名和密码。否则，我们只是警告用户有错误，并拒绝我们的承诺，传递输入的用户名。这样可以通过重新显示带有输入的用户名的登录对话框来帮助用户，以便他们更容易地进行更正。
- en: With these service level details complete, the `track-list` component is looking
    pretty good. However, there is one additional step we should take while we are
    working on this. If you recall, our TrackModel contains an order property that
    will help the user order the tracks in any way they'd like for convenience.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些服务级细节后，`track-list`组件看起来非常不错。然而，在我们进行这项工作时，我们应该采取一个额外的步骤。如果您还记得，我们的TrackModel包含一个order属性，这将帮助用户方便地按照他们喜欢的方式对曲目进行排序。
- en: Creating an Angular Pipe - OrderBy
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Angular管道 - OrderBy
- en: 'Angular provides the Pipe decorator for ease in creating view filters. Let''s
    start by showing how we will use this in the view. You can see that it appears
    very similar to a command-line pipe used in Unix shell scripts; hence, it''s named:
    `Pipe`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Angular提供了Pipe装饰器，以便轻松创建视图过滤器。让我们首先展示我们将如何在视图中使用它。您可以看到它看起来非常类似于Unix shell脚本中使用的命令行管道；因此，它被命名为：`Pipe`：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will take the `playerService.tracks` collection and ensure it is ordered
    via the `order` property of each `TrackModel` for the view display.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取`playerService.tracks`集合，并确保通过每个`TrackModel`的`order`属性对其进行排序，以便在视图中显示。
- en: 'Since we may want to use this anywhere in our app views, let''s add this pipe
    as part of `CoreModule`. Create `app/modules/core/pipes/order-by.pipe.ts` and
    here is how we will implement `OrderByPipe`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可能希望在应用程序的任何视图中使用这个，让我们将这个管道作为`CoreModule`的一部分添加。创建`app/modules/core/pipes/order-by.pipe.ts`，以下是我们将如何实现`OrderByPipe`：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We won''t go into too much detail with what is going on here, since this is
    pretty typical in JavaScript to order a collection. To finish this off, ensure
    `app/modules/core/pipes/index.ts` follows our standard convention:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细介绍这里发生了什么，因为在JavaScript中对集合进行排序是非常典型的。为了完成这一点，确保`app/modules/core/pipes/index.ts`遵循我们的标准约定：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Lastly, import the preceding collection for use with `app/modules/core/core.module.ts`.
    Here is the full file with all the modifications:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，导入前面的集合以与`app/modules/core/core.module.ts`一起使用。以下是所有修改的完整文件：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since pipes are view level implementations, we ensure they are added as part
    of the `exports` collection to allow other modules to use them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于管道是视图级别的实现，我们确保它们作为“exports”集合的一部分添加，以允许其他模块使用它们。
- en: Now, if we were to run our app at this point, you would notice that our `OrderBy`
    pipe used on our `track-list.component.html` view template would *NOT* work!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们在这一点上运行我们的应用程序，您会注意到我们在`track-list.component.html`视图模板上使用的`OrderBy`管道*不会*工作！
- en: Angular modules compile in isolation of one another.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Angular模块在彼此之间进行隔离编译。
- en: 'This is a critical point to understand: Angular compiles `PlayerModule` that
    declares `TrackListComponent`unto itself in an isolated sense. Since we declared `OrderByPipe`
    as part of `CoreModule` and `PlayerModule` has no dependency (at the moment) on
    `CoreModule`, the `TrackListComponent` gets compiled with no awareness of `OrderByPipe`!
    You would end up seeing this error generated in the console:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个需要理解的关键点：Angular将声明`TrackListComponent`的`PlayerModule`编译到自身中，以孤立的方式。由于我们将`OrderByPipe`声明为`CoreModule`的一部分，而`PlayerModule`目前对`CoreModule`没有依赖，`TrackListComponent`被编译时并不知道`OrderByPipe`！你会在控制台中看到生成的错误：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To remedy this, we want to make sure `PlayerModule` is aware of view-related declarations
    (such as pipes or other components) from `CoreModule` by ensuring `CoreModule`
    is added as part of the `imports` collection on `PlayerModule`. This also provides
    us with one additional convenience. If you notice, `CoreModule` specifies `NativeScriptModule`
    as an export, which means any module that imports `CoreModule` will inherently
    get `NativeScriptModule` along with it. Here are the final modifications to `PlayerModule`
    to allow everything to work together:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们希望确保`PlayerModule`知道来自`CoreModule`的与视图相关的声明（如管道或其他组件），方法是确保`CoreModule`作为`PlayerModule`的`imports`集合的一部分添加进去。这也为我们提供了一个额外的便利。如果你注意到，`CoreModule`指定`NativeScriptModule`作为一个导出，这意味着导入`CoreModule`的任何模块将从中获得`NativeScriptModule`。以下是允许所有内容一起工作的`PlayerModule`的最终修改：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can now move on to the `player-controls` component.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续进行`player-controls`组件。
- en: Building PlayerControls component
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建PlayerControls组件
- en: Our player controls should contain a play/pause toggle button for the entire
    mix. It should also present a slider control to allow us to skip ahead and rewind our
    playback.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的播放器控件应该包含一个用于整个混音的播放/暂停切换按钮。它还应该呈现一个滑块控件，允许我们快进和倒带我们的播放。
- en: 'Let''s create `app/modules/player/components/player-controls/player-controls.component.html`(with
    a matching `.ts`):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`app/modules/player/components/player-controls/player-controls.component.html`（带有匹配的`.ts`）：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We start with a single row `GridLayout` with an explicit 100 height. Then, the
    first column will be constrained to 75 wide to accommodate our play/pause toggle
    button. Then, the second column will take up the rest of the horizontal space,
    indicated with `*` with the `Slider` component. This component is provided by
    the NativeScript framework and allows us to bind the `maxValue` attribute to the
    total duration of our mix as well as a value to `currentTime` of the playback.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个具有明确的100高度的单行`GridLayout`开始。然后，第一列将被限制为75宽，以容纳我们的播放/暂停切换按钮。然后，第二列将占据其余的水平空间，用`*`表示，使用`Slider`组件。这个组件由NativeScript框架提供，允许我们将`maxValue`属性绑定到我们混音的总持续时间，以及将值绑定到播放的`currentTime`。
- en: 'Then, for `player-controls.component.ts`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于`player-controls.component.ts`：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For now, we have placed `currentTime` and `duration` directly on the component,
    however, we will refactor those into  `PlayerService` later. Eventually, all of
    the state related to our player will come from `PlayerService` when we implement
    plugins to handle our audio in subsequent chapters. The `togglePlay` method also
    just stubs out some general behavior, toggling the text of our button to Play
    or Stop.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经直接将`currentTime`和`duration`放在了组件上，但是以后我们会将它们重构到`PlayerService`中。最终，当我们在后续章节实现处理音频的插件时，与我们的播放器相关的所有状态都将来自于`PlayerService`。`togglePlay`方法也只是为一些一般行为设置了存根，切换我们按钮的文本为播放或停止。
- en: Quick preview
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速预览
- en: 'At this point, we will take a quick look at what we have built so far. Currently,
    our player service returns an empty list of tracks. To see the results, we should
    add some dummy data to it. For example, in `PlayerService`, we could add:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将快速查看我们到目前为止构建的内容。目前，我们的播放器服务返回一个空的曲目列表。为了查看结果，我们应该向其中添加一些虚拟数据。例如，在`PlayerService`中，我们可以添加：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Don't be surprised if it's not pretty; we'll cover that in the next chapter.
    We also won't cover all the runtime commands available to us yet; we'll cover
    that thoroughly in [Chapter 6](part0072.html#24L8G0-289fe2426d594f99a90e4363b2c9c34d), *Running
    the app on iOS and Android*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它不够漂亮，不要感到惊讶；我们将在下一章中涵盖这一点。我们也不会涵盖我们目前可用的所有运行时命令；我们将在[第6章](part0072.html#24L8G0-289fe2426d594f99a90e4363b2c9c34d)
    *在iOS和Android上运行应用程序* 中彻底涵盖这一点。
- en: Preview  on iOS
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS上预览
- en: 'You will have to be on a Mac with XCode installed to preview the iOS app:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在安装了XCode的Mac上预览iOS应用程序：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This should launch the iOS Simulator and you should see the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动iOS模拟器，你应该会看到以下截图：
- en: '![](../images/00006.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00006.jpeg)'
- en: Preview on Android
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android上预览
- en: 'You will have to have the AndroidSDKk and tools installed to preview on an
    Android emulator:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装AndroidSDKk和工具才能在Android模拟器上预览：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This should launch an Android emulator and you should see the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个Android模拟器，你应该会看到以下截图：
- en: '![](../images/00007.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00007.jpeg)'
- en: Congratulations! We have our first view.  Well hey, no one said it would be
    pretty yet!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们有了我们的第一个视图。嘿，没人说它会很漂亮！
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have kicked off Part 2 with the component building, where we have laid out
    our root component `app.component.html` to house our primary view, where you learned
    about `GridLayout`, a very useful layout container.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开始了第2部分的组件构建，我们已经布置了我们的根组件`app.component.html`来容纳我们的主视图，你将学习到`GridLayout`，一个非常有用的布局容器。
- en: Angular's Component decorator allowed us to easily build `TrackListComponent`
    as well as `PlayerControlsComponent`.We also learned how to build an Angular `Pipe`
    to aid our view's ability to keep our track list in order. Angular's `NgModule` taught
    us we need to ensure any view-related declarations needed for any components are imported
    properly. This Angular design pattern helps maintain module isolation as standalone
    units of code that can be intermixed by importing modules into each other.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的组件装饰器使我们能够轻松构建`TrackListComponent`和`PlayerControlsComponent`。我们还学会了如何构建一个Angular
    `Pipe` 来帮助我们的视图保持我们的曲目列表有序。Angular的`NgModule`教会了我们需要确保任何与视图相关的声明都被正确导入。这种Angular设计模式有助于保持模块隔离，作为可以通过相互导入模块相互混合的独立代码单元。
- en: We also enhanced a fair share of our services to support some of the usability
    we desire with our components.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还增强了一些服务，以支持我们对组件所需的一些可用性。
- en: Finally, we were able to take a quick peek at what we were building. Even though
    it's not at all pretty at this point, we can see things coming together.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们能够快速地看一下我们正在构建的东西。尽管目前还不够漂亮，但我们可以看到事情正在逐渐成形。
- en: In [Chapter 4](part0059.html#1O8H60-289fe2426d594f99a90e4363b2c9c34d), *A prettier
    view with CSS*, you will learn how to use CSS to bring out the pretty from our
    views.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0059.html#1O8H60-289fe2426d594f99a90e4363b2c9c34d) *使用CSS创建更漂亮的视图*
    中，你将学习如何使用CSS来美化我们的视图。
