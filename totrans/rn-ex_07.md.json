["```js\n{ \n  cellExpanded: false, \n  tasks: [ \n    { \n      title: 'Buy Milk', \n      completed: false, \n      dueDate: undefined \n    }, \n    { \n      title: 'Walk Dog', \n      completed: true, \n      dueDate: undefined \n    } \n  ], \n} \n\n```", "```js\nexport function addTask(taskName) { \n  return { \n    type: 'ADD_TASK', \n    taskName: taskName \n  } \n} \n\n// With constants \n\nconst ADD_TASK = 'ADD_TASK'; \n\nexport function addTask(taskName) { \n  return { \n    type: ADD_TASK, \n    taskName: taskName \n  } \n} \n\n```", "```js\nconst task = (state = [], action) => { \n\n```", "```js\nswitch(action.type) { \n    case 'ADD_TASK': \n      return [ \n        ...state, \n        { \n          taskName: action.taskName \n        } \n      ] \n    default: \n      return state; \n  } \n} \n\n```", "```js\nimport { combineReducers, createStore, compose } from 'redux'; \n\nconst defaultState = { \n  task, \n  dueDate \n} \n\n```", "```js\nconst addTask = function(taskName) { \n  return { \n    type: 'ADD_TASK', \n    taskName: taskName \n  } \n} \n\nconst changeDueDate = function(dueDate) { \n  return { \n    type: 'CHANGE_DUE_DATE', \n    dueDate: dueDate \n  } \n}\n\n```", "```js\nconst task = // Reducer to add a new task to the list \nconst dueDate = // Reducer to modify a task's due date \n\nconst rootReducer = combineReducers(task, dueDate); \n\nconst store = createStore(rootReducer, defaultState); \n\n```", "```js\nthis.props.addTask('Buy Milk') \n\n```", "```js\nconst mapStateToProps = (state) => { \n  return { \n    tasks: state.tasks \n  } \n} \n\n```", "```js\nimport { bindActionCreators } from 'redux'; \nimport { connect } from 'react-redux'; \nimport * as actionCreators from '../actions'; \n\nconst mapDispatchToProps = (dispatch) => { \n  return bindActionCreators(actionCreators, dispatch); \n} \n\n```", "```js\nimport Main from './Main'; \n\nconst App = connect(mapStateToProps, mapDispatchToProps)(Main) \n\n```", "```js\nreturn ( \n  <Provider store={ store }> \n    <App /> \n  </Provider> \n) \n\n```", "```js\nnpm install --save redux react-redux redux-thunk \n\n```", "```js\n|app \n|__components \n|____DatePickerDialogue \n|____EditTask \n|____ExpandableCell \n|____TasksList \n|____TasksListCell \n\n```", "```js\n|app \n|__containers \n|__components \n|__reducers \n|__index.js \n\n```", "```js\n// TasksRedux/index.js \n\nimport Tasks from './app'; \nimport { AppRegistry } from 'react-native'; \n\nAppRegistry.registerComponent('Tasks', () => Tasks); \n\n```", "```js\n// TasksRedux/app/index.js \n\nimport React from 'react'; \nimport AppContainer from './containers/AppContainer'; \nimport { createStore, applyMiddleware } from 'redux'; \nimport { Provider } from 'react-redux'; \nimport thunk from 'redux-thunk'; \nimport listOfTasks from './reducers';  \n\n```", "```js\nlet store = createStore(task) \n\n```", "```js\nlet store = createStore(listOfTasks, applyMiddleware(thunk)); \n\n```", "```js\nexport default function Tasks (props) { \n  return ( \n    <Provider store={ store }> \n      <AppContainer /> \n    </Provider> \n  ) \n} \n\n```", "```js\n// TasksRedux/app/index.js \n\nimport React from 'react'; \nimport AppContainer from './containers/AppContainer'; \nimport { createStore, applyMiddleware } from 'redux'; \nimport { Provider } from 'react-redux'; \nimport thunk from 'redux-thunk'; \nimport listOfTasks from './reducers'; \n\nlet store = createStore(listOfTasks, applyMiddleware(thunk)); \n\nexport default function Tasks (props) { \n  return ( \n    <Provider store={ store }> \n      <AppContainer /> \n    </Provider> \n  ) \n} \n\n```", "```js\n// TasksRedux/app/containers/AppContainer.ios.js \n\nimport React, { Component } from 'react'; \n\nimport { \n  NavigatorIOS, \n  StyleSheet \n} from 'react-native'; \n\nimport TasksListContainer from '../containers/TasksListContainer'; \n\nexport default class App extends Component { \n  render () { \n    return ( \n      <NavigatorIOS \n        initialRoute={{ \n          component: TasksListContainer, \n          title: 'Tasks' \n        }} \n        style={ styles.container } \n      /> \n    ) \n  } \n} \n\nconst styles = StyleSheet.create({ \n  container: { \n    flex: 1, \n    backgroundColor: '#F5FCFF' \n  } \n}); \n\n```", "```js\n// TasksRedux/app/containers/AppContainer.android.js \n\nimport React, { Component } from 'react'; \nimport { \n  Navigator, \n} from 'react-native'; \n\nimport TasksListContainer from './TasksListContainer'; \nimport EditTaskContainer from './EditTaskContainer'; \n\n```", "```js\nclass Tasks extends Component { \n\n  render () { \n    const routes = [ \n      { title: 'Tasks', index: 0 }, \n      { title: 'Edit Task', index: 1 } \n    ]; \n\n```", "```js\n    return ( \n      <Navigator \n        initialRoute={{ index: 0}} \n        renderScene={ (routes, navigator) =>\n        this._renderScene(routes, navigator) }/> \n    ); \n  } \n\n  _renderScene (route, navigator) { \n    if (route.index === 0) { \n      return ( \n        <TasksListContainer \n          title={ route.title } \n          navigator={ navigator } \n        /> \n      ) \n    } \n\n    if (route.index === 1) { \n      return ( \n        <EditTaskContainer \n          title={ route.title } \n          navigator={ navigator } \n        /> \n      ) \n    } \n  } \n} \n\nAppRegistry.registerComponent('Tasks', () => Tasks); \n\n```", "```js\nexport function editTaskName (title, index) { \n  return { \n    type: 'EDIT_TASK_NAME', \n    title: title, \n    index: index \n  } \n}; \n\n```", "```js\n// TasksRedux/app/actions/index.js  \n\nlet currentIndex = 0; \n\nconst ADD_TASK = 'ADD_TASK'; \nconst CHANGE_COMPLETION_STATUS = 'CHANGE_COMPLETION_STATUS'; \nconst CHANGE_INPUT_TEXT = 'CHANGE_INPUT_TEXT'; \n\nexport function addTask (text) { \n  return { \n    type: ADD_TASK, \n    index: currentIndex++, \n    text, \n. } \n} \n\n```", "```js\nexport function changeCompletionStatus (index) { \n  return { \n    type: CHANGE_COMPLETION_STATUS, \n    index \n  } \n} \n\nexport function changeInputText (text) { \n  return { \n    type: CHANGE_INPUT_TEXT, \n    text \n  } \n} \n\n```", "```js\n{ \n  tasks: [ \n    { \n      title: 'Buy Milk', \n      completed: false, \n      dueDate: undefined \n    }, \n    { \n      title: 'Walk Dog', \n      completed: true, \n      dueDate: undefined \n    } \n  ], \n} \n\n```", "```js\nfunction addTask (state, action) { \n  switch(action.type) { \n    case 'ADD_TASK': \n      state.tasks.push({ \n        title: action.title, \n        completed: false \n      }); \n      return state; \n    default: \n      return state; \n  } \n}; \n\n```", "```js\n// TasksRedux/app/reducers/index.js \n\nconst singleTask = (state = {}, action) => { \n\n```", "```js\n  switch(action.type) { \n    case 'ADD_TASK': \n      return { \n        completed: false, \n        due: undefined, \n        index: action.index, \n        text: action.text \n      } \n\n```", "```js\n    case 'CHANGE_COMPLETION_STATUS': \n      if (state.index !== action.index) { \n        return state; \n      } \n      return { \n        ...state, \n        completed: !state.completed \n      } \n\n```", "```js\n    default: \n      return state; \n  } \n} \n\nlet defaultState = { \n  listOfTasks: [], \n  text: '' \n} \n\n```", "```js\nconst listOfTasks = (state = defaultState, action) => { \n\n```", "```js\n  switch(action.type) { \n    case 'ADD_TASK': \n      return { \n        ...state, \n        listOfTasks: [...state.listOfTasks, singleTask({}, action)], \n        text: '' \n      } \n\n```", "```js\n    case 'CHANGE_COMPLETION_STATUS': \n      return { \n        ...state, \n        listOfTasks: state.listOfTasks.map((element) => { \n          return singleTask(element, action); \n        }) \n      } \n\n```", "```js\n    case 'CHANGE_INPUT_TEXT': \n      return { \n        ...state, \n        text: action.text \n      } \n\n    default: \n      return state; \n  } \n} \n\nexport default listOfTasks; \n\n```", "```js\n// TasksRedux/app/containers/TasksListContainer/index.js \n\nimport { connect } from 'react-redux'; \n\nimport { \n  addTask, \n  changeCompletionStatus, \n  changeInputText, \n} from '../../actions'; \n\nimport TasksList from '../../components/TasksList'; \n\n```", "```js\nconst mapDispatchToProps = (dispatch) => { \n  return { \n    addTask: (text) => { \n      dispatch(addTask(text)); \n    }, \n    changeCompletionStatus: (rowID) => { \n      dispatch(changeCompletionStatus(rowID)) \n    }, \n    onChangeText: (text) => { \n      dispatch(changeInputText(text)); \n    }, \n  } \n} \n\n```", "```js\nconst mapStateToProps = (state, { navigator }) => { \n  return { \n    listOfTasks: state.listOfTasks || [], \n    navigator: navigator, \n    text: state.text || '' \n  } \n} \n\n```", "```js\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksList); \n\n```", "```js\n// TasksRedux/app/components/TasksList/index.js \n\nimport React, { Component } from 'react'; \nimport { \n  ListView, \n  Platform, \n  TextInput, \n  View \n} from 'react-native'; \n\n```", "```js\nimport TasksListCell from '../TasksListCell'; \nimport styles from './styles'; \n\nexport default class TasksList extends Component { \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      ds: new ListView.DataSource({ \n        rowHasChanged: (r1, r2) => r1 !== r2 \n      }), \n    }; \n  } \n\n```", "```js\n  render () { \n    const dataSource = \n    this.state.ds.cloneWithRows(this.props.listOfTasks); \n\n```", "```js\n    return ( \n      <View style={ styles.container }> \n        <TextInput \n          autoCorrect={ false } \n          onChangeText={ (text) => this.props.onChangeText(text) } \n          onSubmitEditing={ () => this.props.addTask(this.props.text) } \n          returnKeyType={ 'done' } \n          style={ Platform.OS === 'ios' ? styles.textInput : \n          styles.androidTextInput } \n          value={ this.props.text } \n        /> \n\n```", "```js\n        <ListView \n          automaticallyAdjustContentInsets={ false } \n          dataSource={ dataSource } \n          enableEmptySections={ true } \n          renderRow={ (rowData, sectionID, rowID) => \n          this._renderRowData(rowData, rowID) } \n          style={ styles.listView } \n        /> \n      </View> \n    ); \n  } \n\n  _renderRowData (rowData, rowID) { \n    return ( \n      <TasksListCell \n        completed={ rowData.completed } \n        formattedDate={ rowData.formattedDate } \n        id={ rowID } \n        onLongPress={ () => alert('placeholder') } \n        onPress={ () => \n        this.props.changeCompletionStatus(rowData.index) } \n        text={ rowData.text } \n      /> \n    ) \n  } \n}} \n\n```", "```js\n// TasksRedux/app/actions/index.js  \n\n... \nconst CHANGE_CURRENTLY_EDITED_TASK = 'CHANGE_CURRENTLY_EDITED_TASK'; \nconst CHANGE_SELECTED_TASK_COMPLETED = 'CHANGE_SELECTED_TASK_COMPLETED'; \nconst CHANGE_SELECTED_TASK_DUE_DATE = 'CHANGE_SELECTED_TASK_DUE_DATE'; \nconst SAVE_SELECTED_TASK_DETAILS = 'SAVE_SELECTED_TASK_DETAILS'; \nconst EDIT_SELECTED_TASK_NAME = 'EDIT_SELECTED_TASK_NAME'; \nconst EXPAND_CELL = 'EXPAND_CELL'; \nconst REMOVE_SELECTED_TASK_DUE_DATE = 'REMOVE_SELECTED_TASK_DUE_DATE'; \nconst RESET_SELECTED_TASK = 'RESET_SELECTED_TASK'; \n\n```", "```js\n... \nexport function changeCurrentlyEditedTask (selectedTaskObject) { \n  return { \n    type: CHANGE_CURRENTLY_EDITED_TASK, \n    selectedTaskObject: selectedTaskObject \n  } \n} \n\nexport function changeSelectedTaskCompleted (value) { \n  return { \n    type: CHANGE_SELECTED_TASK_COMPLETED, \n    value \n  } \n} \n\nexport function changeSelectedTaskDueDate (date) { \n  return { \n    type: CHANGE_SELECTED_TASK_DUE_DATE, \n    date \n  } \n} \n\n```", "```js\nexport function editSelectedTaskName (text) { \n  return { \n    type: EDIT_SELECTED_TASK_NAME, \n    text \n  } \n} \n\nexport function expandCell (currentlyExpanded) { \n  return { \n    type: EXPAND_CELL, \n    expanded: currentlyExpanded \n  } \n} \n\nexport function resetSelectedTask () { \n  return { \n    type: RESET_SELECTED_TASK \n  } \n} \n\nexport function removeSelectedTaskDueDate () { \n  return { \n    type: REMOVE_SELECTED_TASK_DUE_DATE \n  } \n} \n\nexport function saveSelectedTaskDetails (object) { \n  return { \n    type: SAVE_SELECTED_TASK_DETAILS, \n    completed: object.completed, \n    date: object.due || undefined, \n    formattedDate: object.formattedDate || undefined, \n    index: object.index, \n    text: object.text \n  } \n} \n\n```", "```js\n// TasksRedux/app/reducers/index.js \n\nimport moment from 'moment'; \n\nconst defaultState = { \n  ... \n  date: undefined, \n  dateSelected: false, \n  expanded: false, \n  formattedDate: undefined, \n  selectedTaskObject: undefined, \n} \n\n```", "```js\nconst _formatDate = (date) => { \n  if (date) { \n    return moment(date).format('lll'); \n  } \n} \n\n```", "```js\nconst singleTask = (state = {}, action) => { \n  switch(action.type) { \n    case 'ADD_TASK': \n      ... \n    case 'CHANGE_COMPLETION_STATUS': \n      ... \n\n```", "```js\n    case 'SAVE_SELECTED_TASK_DETAILS': \n      if (state.index !== action.index) { \n        return state; \n      } \n      return { \n        ...state, \n        completed: action.completed, \n        due: action.date, \n        formattedDate: action.formattedDate, \n        text: action.text \n      } \n\n```", "```js\n    default: \n      return state; \n  } \n} \n\nconst selectedTask = (state = {}, action) => { \n\n```", "```js\n  switch(action.type) { \n    case 'CHANGE_SELECTED_TASK_COMPLETED': \n      return { \n        ...state, \n        completed: action.value \n      } \n    case 'CHANGE_SELECTED_TASK_DUE_DATE': \n      return { \n        ...state, \n        due: action.date || undefined, \n        formattedDate: action.date ?\n        _formatDate(action.date) : undefined \n      } \n\n```", "```js\n    case 'EDIT_SELECTED_TASK_NAME': \n      return { \n        ...state, \n        text: action.text \n      } \n    case 'REMOVE_SELECTED_TASK_DUE_DATE': \n      return { \n      ...state, \n      due: undefined, \n      formattedDate: undefined \n      } \n    default: \n      return state; \n  } \n} \n\nconst listOfTasks = (state = defaultState, action) => { \n  switch(action.type) { \n    case 'ADD_TASK': \n      ... \n    case 'CHANGE_COMPLETION_STATUS': \n      ... \n\n```", "```js\n    case 'CHANGE_CURRENTLY_EDITED_TASK': \n      const date = action.selectedTaskObject.due || new Date(); \n      const formattedDate = _formatDate(date); \n\n      const hasDueDate = action.selectedTaskObject.due ? true : false \n      return { \n        ...state, \n        date: date, \n        dateSelected: hasDueDate, \n        formattedDate: formattedDate, \n        selectedTaskObject: action.selectedTaskObject \n      } \n\n```", "```js\n    case 'CHANGE_INPUT_TEXT': \n      ... \n\n```", "```js\n    case 'CHANGE_SELECTED_TASK_COMPLETED': \n      return { \n        ...state, \n        selectedTaskObject: selectedTask\n        (state.selectedTaskObject, action) \n      } \n\n```", "```js\n    case 'CHANGE_SELECTED_TASK_DUE_DATE': \n      return { \n        ...state, \n        date: action.date, \n        dateSelected: action.date ? true : false, \n        formattedDate: action.date ? _formatDate(action.date) : \n        undefined, \n        selectedTaskObject: selectedTask\n        (state.selectedTaskObject, action) \n      } \n\n```", "```js\n    case 'EDIT_SELECTED_TASK_NAME': \n      return { \n        ...state, \n        selectedTaskObject: selectedTask(state.selectedTaskObject,\n        action) \n      } \n\n```", "```js\n    case 'EXPAND_CELL': \n      return { \n        ...state, \n        expanded: !action.expanded \n      } \n\n```", "```js\n    case 'RESET_SELECTED_TASK': \n      return { \n        ...state, \n        expanded: false, \n        selectedTask: undefined, \n      } \n\n```", "```js\n    case 'REMOVE_SELECTED_TASK_DUE_DATE': \n      return { \n        ...state, \n        dateSelected: false, \n        selectedTaskObject: selectedTask(state.selectedTaskObject, \n        action) \n      } \n\n```", "```js\n    case 'SAVE_SELECTED_TASK_DETAILS': \n      return { \n        ...state, \n        expanded: false, \n        listOfTasks: state.listOfTasks.map((element) => { \n            return singleTask(element, action) \n          }) \n      } \n\n    default: \n      ... \n  } \n} \n\nexport default listOfTasks;export default listOfTasks; \n\n```", "```js\n// TasksRedux/app/containers/TasksListContainer \n\n... \nimport { \n  ... \n  changeCurrentlyEditedTask, \n  resetSelectedTask, \n  saveSelectedTaskDetails \n} from '../../actions'; \n\n```", "```js\n... \nconst mapDispatchToProps = (dispatch) => { \n  return { \n    ... \n    changeCompletionStatus: (index) => { \n      dispatch(changeCompletionStatus(index)); \n    }, \n    resetSelectedTask: () => { \n      dispatch(resetSelectedTask()); \n    }, \n    saveSelectedTaskDetails: (selectedTaskObject) => { \n      dispatch(saveSelectedTaskDetails(selectedTaskObject)); \n    } \n  } \n} \n\n```", "```js\nconst mapStateToProps = (state, { navigator }) => { \n  return { \n    ... \n    date: state.date, \n    formattedDate: state.formattedDate, \n    selectedTaskObject: state.selectedTaskObject, \n  } \n} \n... \n\n```", "```js\n// TasksRedux/app/components/TasksList/index.js \n\n... \nimport { \n  ... \n  Platform, \n} from 'react-native'; \n\nimport EditTaskContainer from '../../containers/EditTaskContainer'; \n... \nexport default class TasksList extends Component { \n  ...\n\n```", "```js\n  _cancelEditingTask () { \n    this.props.navigator.pop(); \n    this.props.resetSelectedTask(); \n  } \n\n```", "```js\n  _renderRowData (rowData, rowID) { \n    return ( \n      <TasksListCell \n        ... \n        onLongPress={ () => this._onLongPress(rowData) } \n      /> \n    ) \n  } \n\n```", "```js\n  _onLongPress (rowData) { \n    this.props.changeCurrentlyEditedTask(rowData); \n\n    if (Platform.OS === 'ios') { \n      this.props.navigator.push({ \n        component: EditTaskContainer, \n        title: this.props.selectedTaskText, \n        leftButtonTitle: 'Cancel', \n        rightButtonTitle: 'Save', \n        onLeftButtonPress: () => this._cancelEditingTask(), \n        onRightButtonPress: () => this._saveEditedTask() \n      }); \n      return; \n    } \n\n```", "```js\n    this.props.navigator.push({ \n      index: 1 \n    }); \n  }\n\n```", "```js\n  _saveEditedTask () { \n    this.props.navigator.pop(); \n    this.props.saveSelectedTaskDetails(this.props.selectedTaskObject); \n  } \n} \n\n```", "```js\n// TasksRedux/app/containers/EditTaskContainer \n\nimport { connect } from 'react-redux'; \n\nimport { \n  changeSelectedTaskCompleted, \n  changeSelectedTaskDueDate, \n  editSelectedTaskName, \n  expandCell, \n  removeSelectedTaskDueDate, \n  resetSelectedTask, \n  saveSelectedTaskDetails \n} from '../../actions'; \n\n```", "```js\nimport EditTask from '../../components/EditTask'; \n\nconst mapDispatchToProps = (dispatch) => { \n  return { \n    changeCompletedStatus: (value) => { \n      dispatch(changeSelectedTaskCompleted(value)); \n    }, \n    changeTextInputValue: (text) => { \n      dispatch(editSelectedTaskName(text)) \n    }, \n    clearDate: () => { \n      dispatch(removeSelectedTaskDueDate()); \n    }, \n    onDateChange: (date) => { \n      dispatch(changeSelectedTaskDueDate(date)); \n    }, \n    onExpand: (currentlyExpanded) => { \n      dispatch(expandCell(currentlyExpanded)) \n    }, \n    resetSelectedTask: () => { \n      dispatch(resetSelectedTask()); \n    }, \n    saveSelectedTaskDetails: (selectedTaskObject) => { \n      dispatch(saveSelectedTaskDetails(selectedTaskObject)); \n    } \n  } \n} \n\n```", "```js\nconst mapStateToProps = (state) => { \n  return { \n    date: state.date, \n    dateSelected: state.dateSelected, \n    expanded: state.expanded, \n    formattedDate: state.formattedDate, \n    selectedTaskObject: state.selectedTaskObject, \n  } \n}\n\n```", "```js\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTask);  \n\n```", "```js\n// TasksRedux/app/components/EditTask/index.ios.js  \n\nimport React, { Component } from 'react'; \n\nimport { \n  Button, \n  DatePickerIOS, \n  Switch, \n  Text, \n  TextInput, \n  View \n} from 'react-native'; \n\nimport ExpandableCell from '../ExpandableCell'; \nimport styles from './styles'; \n\nexport default class EditTask extends Component { \n  constructor (props) { \n    super (props); \n\n    this.state = { \n      datePickerHeight: undefined \n    } \n  } \n\n```", "```js\n  render () { \n    const noDueDateTitle = 'Set Reminder'; \n    const dueDateSetTitle = 'Due On ' + \n    this.props.selectedTaskObject.formattedDate; \n\n    return ( \n      <View style={ styles.editTaskContainer }> \n        <View> \n          <TextInput \n            autoCorrect={ false } \n            onChangeText={ (text) => \n            this.props.changeTextInputValue(text) } \n            returnKeyType={ 'done' } \n            style={ styles.textInput } \n            value={ this.props.selectedTaskObject.text } \n          /> \n\n```", "```js\n        </View> \n        <View style={ [styles.expandableCellContainer, \n        { maxHeight: this.props.expanded ? \n        this.state.datePickerHeight : 40 }]}> \n          <ExpandableCell \n            childrenHeight={ this.state.datePickerHeight } \n            expanded={ this.props.expanded } \n            onPress={ () => this.props.onExpand(this.props.expanded) } \n            title={ this.props.due ? dueDateSetTitle : noDueDateTitle }> \n\n```", "```js\n            <DatePickerIOS \n              date={ this.props.date } \n              onDateChange={ (date) => this.props.onDateChange(date) } \n              onLayout={ (event) => this._getDatePickerHeight(event) } \n            /> \n          </ExpandableCell> \n        </View> \n        <View style={ styles.switchContainer } > \n          <Text style={ styles.switchText } > \n            Completed \n          </Text> \n          <Switch \n            onValueChange={ (value) => \n            this.props.changeCompletedStatus(value) } \n            value={ this.props.selectedTaskObject.completed } \n          /> \n        </View> \n        <View style={ styles.clearDateButtonContainer }> \n          <Button \n            color={ '#B44743' } \n            disabled={ this.props.dateSelected ? false : true } \n            onPress={ () => this.props.clearDate() } \n            title={ 'Clear Date' } \n          /> \n        </View> \n      </View> \n    ); \n  } \n\n  _getDatePickerHeight (event) { \n    this.setState({ \n      datePickerHeight: event.nativeEvent.layout.width \n    }); \n  } \n} \n\n```", "```js\n// TasksRedux/app/components/EditTask/index.android.js \n\n... \nimport { \n  ... \n  BackAndroid, \n  DatePickerAndroid, \n  TimePickerAndroid, \n} from 'react-native'; \n\n```", "```js\n... \nexport default class EditTask extends Component { \n  constructor (props) { \n    super (props); \n  } \n\n```", "```js\n  componentWillMount () { \n    BackAndroid.addEventListener('hardwareButtonPress', () => \n    this._backButtonPress()); \n  } \n\n  componentWillUnmount () { \n    BackAndroid.removeEventListener('hardwareButtonPress', () => \n    this._backButtonPress()) \n  } \n\n```", "```js\n  render () { \n    ... \n    return ( \n      <View style={ styles.editTaskContainer }> \n        <View> \n          ... \n        </View> \n\n```", "```js\n        <View style={ styles.androidButtonContainer }> \n          <Button \n            color={ '#80B546' } \n            title={ this.props.selectedTaskObject.due ? \n            dueDateSetTitle : noDueDateTitle } \n            onPress={ () => this._showAndroidDatePicker() } \n          /> \n        </View> \n\n```", "```js\n        <View style={ styles.switchContainer } > \n          ... \n        </View> \n        <View style={ styles.androidButtonContainer }> \n          ... \n        </View> \n        <View style={ styles.saveButton }> \n          <Button \n            color={ '#4E92B5' } \n            onPress={ () => this._saveSelectedTaskDetails() } \n            title={ 'Save Task' } \n          /> \n        </View> \n      </View> \n    ); \n  } \n\n```", "```js\n  _backButtonPress () { \n    this.props.navigator.pop(); \n    this.props.resetSelectedTask(); \n    return true; \n  } \n\n```", "```js\n  _saveSelectedTaskDetails () { \n    this.props.navigator.pop(); \n    this.props.saveSelectedTaskDetails(this.props.selectedTaskObject); \n  } \n\n```", "```js\n  ... \n  async _showAndroidDatePicker () { \n    const options = { \n      date: this.props.date \n    }; \n\n    const { action, year, month, day } = await \n    DatePickerAndroid.open(options); \n\n    this._showAndroidTimePicker (day, month, year); \n  } \n\n```", "```js\n  async _showAndroidTimePicker (day, month, year) { \n    const { action, minute, hour } = await TimePickerAndroid.open(); \n\n    if (action === TimePickerAndroid.dismissedAction) { \n      return; \n    } \n\n    const date = new Date(year, month, day, hour, minute); \n\n    this.props.onDateChange(date); \n  } \n} \n\n```", "```js\n// TasksRedux/app/utils/storageMethods.js \n\nimport { AsyncStorage } from 'react-native'; \n\nexport const getAsyncStorage = async () => { \n  let response = await AsyncStorage.getItem('listOfTasks'); \n  let parsedData = JSON.parse(response) || []; \n\n  return parsedData; \n} \n\n```", "```js\nexport const saveAsyncStorage = async (listOfTasks) => { \n  return AsyncStorage.setItem('listOfTasks', \n  JSON.stringify(listOfTasks)); \n} \n\n```", "```js\n// TasksRedux/app/index.js \n\n... \nimport { saveAsyncStorage } from './utils/storageMethods'; \n... \nstore.subscribe(() => { \n  saveAsyncStorage(store.getState().listOfTasks); \n}); \n... \n\n```", "```js\n// TasksRedux/app/actions/index.js \n\nimport { getAsyncStorage } from '../utils/storageMethods'; \n\n```", "```js\nconst SET_LIST_OF_TASKS_AND_INDEX = 'SET_LIST_OF_TASKS_AND_INDEX'; \n\n```", "```js\nexport function getListOfTasksAndIndex () { \n  return async (dispatch) => { \n    let response = await getAsyncStorage(); \n\n    dispatch(setListOfTasksAndIndex(response, response.length)); \n  } \n} \n\n```", "```js\nfunction setListOfTasksAndIndex (listOfTasks, index) { \n  return { \n    type: SET_LIST_OF_TASKS_AND_INDEX, \n    index, \n    listOfTasks, \n  } \n} \n\n```", "```js\n// TasksRedux/app/reducers/index.js \n\nconst defaultState = { \n  currentIndex: undefined, \n  ... \n} \n... \nconst singleTask = (state = {}, action) => { \n  switch(action.type) { \n    case 'ADD_TASK': \n      return { \n        ... \n        index: action.index, \n      } \n    ... \n  } \n} \n\n```", "```js\n... \nconst listOfTasks = (state = defaultState, action) => { \n  switch(action.type) { \n    case 'ADD_TASK': \n      ... \n      return { \n        currentIndex: ++state.currentIndex, \n        ... \n      } \n\n```", "```js\n    ... \n    case 'SET_LIST_OF_TASKS_AND_INDEX': \n      return { \n        ...state, \n        currentIndex: action.index, \n        listOfTasks: action.listOfTasks \n      } \n  } \n} \n\nexport default listOfTasks; \n\n```", "```js\n// TasksRedux/containers/TasksListContainer/index.js \n\n... \nimport { \n  ... \n  getListOfTasksAndIndex, \n} from '../../actions'; \n\nimport TasksList from '../../components/TasksList'; \n\nconst mapDispatchToProps = (dispatch) => { \n  return { \n    addTask: (text, index) => { \n      dispatch(addTask(text, index)); \n    }, \n    ... \n    getListOfTasksAndIndex: () => { \n      dispatch(getListOfTasksAndIndex()); \n    }, \n    ... \n  } \n} \n\nconst mapStateToProps = (state, { navigator }) => { \n  return { \n    currentIndex: state.currentIndex, \n    ... \n  } \n} \n... \n\n```", "```js\n// TasksRedux/app/components/TasksList/index.js \n\n... \nexport default class TasksList extends Component { \n  ... \n  componentWillMount () { \n    this.props.getListOfTasksAndIndex(); \n  } \n\n```", "```js\n  render () { \n    ... \n    return ( \n      <View style={ styles.container }> \n        <TextInput \n          onSubmitEditing={ () => this.props.addTask\n          (this.props.text, this.props.currentIndex) } \n          ... \n        /> \n        ... \n      </View> \n    ); \n  } \n  ... \n} \n\n```"]