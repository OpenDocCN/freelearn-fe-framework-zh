- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Navigating Between Screens
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕间导航
- en: 'The focus of this chapter is on navigating between the screens that make up
    your React Native application. Navigation in native apps is slightly different
    than navigation on web apps: mainly because there isn’t any notion of a URL that
    the user is aware of. In prior versions of React Native, there were primitive
    navigator components that you could use to control the navigation between screens.
    There were a number of challenges with these components that resulted in more
    code to accomplish basic navigation tasks. For example, initial navigation components,
    like `Navigator` and `NavigatorIOS`, were complex to implement and lacked features,
    leading to performance issues and inconsistency across platforms.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重点是导航 React Native 应用程序中构成屏幕之间的导航。在原生应用中的导航与在网页应用中的导航略有不同：主要是因为用户没有意识到任何
    URL 的概念。在 React Native 的早期版本中，有一些原始的导航组件，你可以使用它们来控制屏幕间的导航。这些组件存在一些挑战，导致完成基本导航任务需要更多的代码。例如，初始导航组件，如
    `Navigator` 和 `NavigatorIOS`，实现起来复杂且功能不足，导致性能问题和跨平台的不一致性。
- en: More recent versions of **React Native** encourage you to use the `react-navigation`
    package, which will be the focus of this chapter, even though there are several
    other options. You’ll learn about navigation basics, passing parameters to screens,
    changing header content, using tab and drawer navigation, and handling state with
    navigation. Also, we’ll take a look at a modern navigation approach called file-based
    navigation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 更新版本的 **React Native** 鼓励你使用 `react-navigation` 包，这将是本章的重点，尽管还有其他几个选项。你将学习导航基础知识、向屏幕传递参数、更改标题内容、使用标签和抽屉导航以及使用导航处理状态。我们还将探讨一种现代导航方法，称为基于文件的导航。
- en: 'We’ll cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: The basics of navigation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航的基本知识
- en: Route parameters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由参数
- en: The navigation header
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航标题
- en: Tab and drawer navigation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签和抽屉导航
- en: File-based navigation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于文件的导航
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter19](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter19).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章的代码文件，链接为 [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter19](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter19)。
- en: The basics of navigation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航的基本知识
- en: Navigation in React Native is crucial because it manages the transition between
    different screens in an app. It improves user experience by organizing the app’s
    flow logically, allowing users to intuitively understand how to access features
    and information. Effective navigation makes an app feel quick and responsive,
    reducing frustration and increasing user engagement. It also supports the app’s
    architecture, making it easier to scale and maintain by clearly defining how components
    are linked and interact. Without proper navigation, an app can become confusing
    and difficult to use, significantly impacting its success and user retention.
    This section will guide you through setting up navigation in your app by creating
    a small app where you can navigate between screens.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React Native 中，导航至关重要，因为它管理着应用中不同屏幕之间的过渡。它通过逻辑组织应用流程来提高用户体验，使用户能够直观地了解如何访问功能和信息。有效的导航使应用感觉快速且响应灵敏，减少用户挫败感并提高用户参与度。它还支持应用架构，通过明确定义组件之间的链接和交互，使应用更容易扩展和维护。没有适当的导航，应用可能会变得令人困惑且难以使用，这会严重影响其成功和用户留存。本节将通过创建一个小型应用来引导你设置应用中的导航，在这个小应用中你可以导航到不同的屏幕。
- en: Let’s start off with the basics of moving from one page to another using the
    `react-navigation` package.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用 `react-navigation` 包从一个页面跳转到另一个页面的基本操作开始。
- en: 'Before starting, you should install the `react-navigation` package to a fresh
    project and some additional dependencies related to the example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你应该将 `react-navigation` 包安装到一个新项目中，以及一些与示例相关的附加依赖：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, install native dependencies using `expo`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 `expo` 安装本地依赖：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding installation steps will be required for each example in this
    chapter, but we need to add one more package related to the stack navigator:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节的安装步骤将适用于本章的每个示例，但我们还需要添加一个与堆栈导航相关的包：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we are ready to develop navigation. Here’s what the `App` component looks
    like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好开发导航。下面是 `App` 组件的样貌：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`createNativeStackNavigator()` is a function that sets up your navigation.
    It returns an object with two properties, the `Screen` and `Navigator` components,
    that are used for configuring the stack navigator.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`createNativeStackNavigator()`是一个设置导航的函数。它返回一个对象，包含两个属性，即`Screen`和`Navigator`组件，它们用于配置堆栈导航器。'
- en: 'The first argument to this function maps to the screen components that can
    be navigated. The second argument is for more general navigation options: in this
    case, you’re telling the navigator that the homepage should be the default screen
    component that’s rendered. The `<NavigationContainer>` component is necessary
    so that the screen components get all of the navigation properties that they need.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的第一个参数映射到可以导航的屏幕组件。第二个参数用于更通用的导航选项：在这种情况下，你正在告诉导航器主页应该是默认的屏幕组件。`<NavigationContainer>`组件是必要的，这样屏幕组件就能获得它们需要的所有导航属性。
- en: 'Here’s what the `Home` component looks like:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Home`组件的外观：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is your typical functional React component. You can use a class-based component
    here, but there’s no need since there is no state or life cycle methods. It renders
    a `View` component where the container style is applied.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的功能React组件。你在这里可以使用基于类的组件，但不需要，因为没有状态或生命周期方法。它渲染一个应用了容器样式的`View`组件。
- en: 'This is followed by a `Text` component that labels the `screen` followed by
    a `Button` component. A `screen` can be anything you want: it’s just a regular
    React Native component. The navigator component handles the routing and the transitions
    between screens for you.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这后面跟着一个`Text`组件，用于标记`screen`，然后是一个`Button`组件。`screen`可以是任何你想要的东西：它只是一个普通的React
    Native组件。导航组件为你处理路由和屏幕之间的转换。
- en: The `onPress` handler for this button navigates to the **Settings** screen when
    clicked. This is done by calling `navigation.navigate('Settings')`. The navigation
    property is passed to your `screen` component by `react-navigation` and contains
    all of the routing functionality you need. In contrast to working with URLs in
    React web apps, here you call navigator API functions and pass them the names
    of screens.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮的`onPress`处理程序在点击时导航到**设置屏幕**。这是通过调用`navigation.navigate('Settings')`完成的。导航属性通过`react-navigation`传递给你的`screen`组件，并包含你需要的所有路由功能。与在React
    web应用中处理URL相比，这里你调用导航器API函数，并传递屏幕名称。
- en: 'To get type safe environment in navigation, we need to define a type called
    `RootStackParamList` that contains all the information about our routes. We use
    it together with `NativeStackScreenProps` to define route `Props`. This is what
    `RootStackParamList` looks like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在导航中获得类型安全的环境，我们需要定义一个名为`RootStackParamList`的类型，它包含有关我们路由的所有信息。我们使用它和`NativeStackScreenProps`一起定义路由`Props`。这是`RootStackParamList`的外观：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We pass undefined to each route because we don’t have any parameters on routes.
    As a result, we can call `navigation.navigate()` only with `Settings` or `Home`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个路由传递undefined，因为我们没有在路由上设置任何参数。因此，我们只能用`Settings`或`Home`调用`navigation.navigate()`。
- en: 'Let’s take a look at the `Settings` component:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`Settings`组件：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This component is just like the `Home` component, except with different text,
    and when the button is clicked, you’re taken back to the **Home screen**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件与`Home`组件类似，只是文本不同，当按钮被点击时，你将被带回到**主页**。
- en: 'This is what the **Home screen** looks like:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**主页**的外观：
- en: '![Picture 1](img/B19636_19_01.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/B19636_19_01.png)'
- en: 'Figure 19.1: The Home screen'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1：主页
- en: 'If you click the **Settings** button, you’ll be taken to the **Settings screen**,
    which looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击**设置**按钮，你将被带到**设置屏幕**，其外观如下：
- en: '![Picture 2](img/B19636_19_02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/B19636_19_02.png)'
- en: 'Figure 19.2: The Settings screen'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.2：设置屏幕
- en: This screen looks almost identical to the **Home screen**. It has different
    text and a different button that will take you back to the **Home screen** when
    clicked. However, there’s another way to get back to the **Home screen**. Take
    a look at the top of the screen, where you’ll notice a white navigation bar. On
    the left side of the navigation bar, there’s a back arrow. This works just like
    the back button in a web browser and will take you back to the previous screen.
    What’s nice about react-navigation is that it takes care of rendering this navigation
    bar for you.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕看起来几乎与**Home屏幕**完全相同。它有不同的文本和不同的按钮，点击该按钮将带你返回到**Home屏幕**。然而，还有另一种返回**Home屏幕**的方法。看看屏幕顶部，你会注意到一个白色的导航栏。在导航栏的左侧，有一个返回箭头。这就像网页浏览器中的返回按钮一样，会带你回到上一个屏幕。react-navigation的好处是它会为你渲染这个导航栏。
- en: With this navigation bar in place, you don’t have to worry about how your layout
    styles impact the status bar. You only need to worry about the layout of each
    of your screens.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个导航栏设置好之后，你不必担心你的布局样式如何影响状态栏。你只需要担心你每个屏幕的布局。
- en: If you run this app on Android, you’ll see the same back button in the navigation
    bar. But you can also use the standard back button found outside of the app on
    most Android devices.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这个Android应用上运行，你会在导航栏中看到相同的返回按钮。但你也可以使用大多数Android设备上应用外部的标准返回按钮。
- en: In the next section, you’ll learn how to pass parameters to your routes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何向你的路由传递参数。
- en: Route parameters
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由参数
- en: When you develop React web applications, some of your routes have **dynamic
    data** in them. For example, you can link to a details page, and within that URL,
    you’ll have some sort of identifier. The component then has what it needs to render
    specific detailed information. The same concept exists within `react-navigation`.
    Instead of just specifying the name of the screen that you want to navigate to,
    you can pass along additional data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开发React Web应用时，一些路由中包含**动态数据**。例如，你可以链接到一个详情页面，在该URL中，你将有一个某种标识符。组件将拥有渲染特定详细信息所需的内容。在`react-navigation`中，也存在同样的概念。你不仅可以指定你想要导航到的屏幕名称，还可以传递额外的数据。
- en: Let’s take a look at route parameters in action.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看路由参数的实际应用。
- en: 'We’ll start with the `App` component:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`App`组件开始：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This looks just like the example in the *The basics of navigation* section,
    except instead of a `Settings` page, there’s a `Details` page. This is the page
    that you want to pass data to dynamically so that it can render the appropriate
    information.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来就像*导航基础*部分中的例子，只不过没有`Settings`页面，而是有一个`Details`页面。这是你想要动态传递数据以渲染适当信息的页面。
- en: 'To enable TypeScript for our routes, need to define `RootStackParamList`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的路由启用TypeScript，需要定义`RootStackParamList`：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, let’s take a look at the `Home` screen component:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`Home`屏幕组件：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `Home` screen has three `Button` components, and each navigates to the `Details`
    screen. Note that in the `navigation.navigate()` calls, in addition to the screen
    name, each has a second argument. These arguments are objects that contain specific
    data, which is passed to the `Details` screen.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`Home`屏幕有三个`Button`组件，每个都导航到`Details`屏幕。注意，在`navigation.navigate()`调用中，除了屏幕名称外，每个都有一个第二个参数。这些参数是包含特定数据的对象，这些数据被传递到`Details`屏幕。'
- en: 'Next, let’s take a look at the `Details` screen and see how it consumes these
    route parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`Details`屏幕，看看它是如何消费这些路由参数的：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Although this example is only passing one `title` parameter, you can pass as
    many parameters to the screen as you need to. You can access these parameters
    using the `params` value of the route prop to look up the value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个例子只传递了一个`title`参数，但你可以向屏幕传递你需要的任意多个参数。你可以使用路由属性`params`的`value`来访问这些参数。
- en: 'Here’s what the **Home screen** looks like when rendered:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染后的**Home屏幕**的样子：
- en: '![Picture 3](img/B19636_19_03.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片 3](img/B19636_19_03.png)'
- en: 'Figure 19.3: The Home screen'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.3：Home屏幕
- en: 'If you click on the **First Item** button, you’ll be taken to the **Details**
    screen that is rendered using the route parameter data:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击**第一个项目**按钮，你将被带到使用路由参数数据渲染的**Details**屏幕：
- en: '![Picture 4](img/B19636_19_04.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片 4](img/B19636_19_04.png)'
- en: 'Figure 19.4: The Details screen'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.4：Details屏幕
- en: You can click the back button in the navigation bar to get back to the **Home**
    screen. If you click on any of the other buttons on the **Home screen**, you’ll
    be taken back to the **Details** screen with updated data. Route parameters are
    necessary to avoid having to write duplicate components. You can think of passing
    parameters to `navigator.navigate()` as passing props to a React component.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, you’ll learn how to populate navigation section headers
    with content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The navigation header
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The navigation bars that you’ve created so far in this chapter have been sort
    of plain. That’s because you haven’t configured them to do anything, so `react-navigation`
    will just render a plain bar with a back button. Each screen component that you
    create can configure specific navigation header content.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build on the example discussed in the `Route` parameters section, which
    used buttons to navigate to a details page.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'The `App` component has major updates, so let’s take a look at it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Screen` component accepts the `options` prop as an object or function to
    provide additional screen properties.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The `headerRight` option is used to add a `Button` component to the right side
    of the navigation bar. This is where the `stock` parameter comes into play. If
    this value is `0` because there isn’t anything in `stock`, you want to disable
    the `Buy` button.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we pass `options` as a function and read the `stock` screen params
    to disable the button. This is one of several ways to pass options to the `Screen`
    component. We’ll apply another way to the `Details` component.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how the stock props have been passed, take a look at the `Home`
    component here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The first thing to note is that each button is passing more route parameters
    to the `Details` component: `content` and `stock`. You’ll see why in a moment.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s take a look at the `Details` component:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This time, the `Details` component renders the content `route` parameter. As
    with the `App` component, we add additional options to the screen. In this case,
    we update `screen` options using the `navigation.setOptions()` method. To customize
    the header, we can also add a title to that screen via the `App` component.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how all of this works now, starting with the **Home** screen:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 5](img/B19636_19_05.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.5: The Home screen'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Now there is header text in the navigation bar, which is set by the name property
    in the `Screen` component.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, try pressing the **First Item** button:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture 6](img/B19636_19_06.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.6: The First Item screen'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The title in the navigation bar is set based on the `title` parameter that’s
    passed to the `Details` component using the `navigation.setOptions()` method.
    The **Buy** button that’s rendered on the right side of the navigation bar is
    rendered by the options property in the `Screen` component placed in the `App`
    component. It’s enabled because the stock parameter value is `1`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try returning to the **Home** screen and pressing the **Second Item**
    button:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试返回到**Home**屏幕并按下**第二个项目**按钮：
- en: '![Picture 7](img/B19636_19_07.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片7](img/B19636_19_07.png)'
- en: 'Figure 19.7: The Second Item screen'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.7：第二个项目屏幕
- en: The title and the page content both reflect the new parameter values passed
    to `Details`, but so does the `Buy` button. It is in a disabled state because
    the stock parameter value was `0`, meaning that it can’t be bought.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 标题和页面内容都反映了传递给`Details`的新参数值，但`Buy`按钮也是如此。它处于禁用状态，因为库存参数值为`0`，这意味着不能购买。
- en: Now that you’ve learned how to use navigation headers, in the next section,
    you’ll learn about tab and drawer navigation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用导航标题，在下一节中，你将学习关于标签和抽屉导航的内容。
- en: Tab and drawer navigation
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签和抽屉导航
- en: So far in this chapter, each example has used `Button` components to link to
    other screens in the app. You can use functions from `react-navigation` that will
    create **tab** or **drawer** navigation for you automatically based on the screen
    components that you give it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，每个示例都使用了`Button`组件来链接到应用中的其他屏幕。你可以使用`react-navigation`中的函数来自动为你创建**tab**或**drawer**导航，这些函数基于你提供的屏幕组件。
- en: Let’s create an example that uses bottom tab navigation on iOS and drawer navigation
    on Android.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例，使用iOS上的底部tab导航和Android上的抽屉导航。
- en: You aren’t limited to using tab navigation on iOS or drawer navigation on Android.
    I’m just picking these two to demonstrate how to use different modes of navigation
    based on the platform. You can use the exact same navigation mode on both platforms
    if you prefer.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅限于在iOS上使用标签导航或在Android上使用抽屉导航。我只是选择这两个来演示如何根据平台使用不同的导航模式。如果你更喜欢，你可以在两个平台上使用完全相同的导航模式。
- en: 'For this example, we need to install a few other packages for tab and drawer
    navigators:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要安装一些其他用于标签和抽屉导航器的包：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Also, the drawer navigator requires some native modules. Let’s install them:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，抽屉导航器需要一些原生模块。让我们来安装它们：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, add a plugin to the `babel.config.js` file. As a result, the file should
    look like the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，向`babel.config.js`文件添加一个插件。结果，文件应该看起来像以下这样：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we are ready to continue coding. Here’s what the `App` component looks
    like:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好继续编码。以下是`App`组件的样式：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Instead of using the `createNativeStackNavigator()` function to create your
    navigator, you’re importing the `createBottomTabNavigator()` and `createDrawerNavigator()`
    functions:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你不是使用`createNativeStackNavigator()`函数来创建你的导航器，而是导入`createBottomTabNavigator()`和`createDrawerNavigator()`函数：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, you’re using the `Platform` utility from `react-native` to decide which
    navigator to use. The result, depending on the platform, is assigned to `App`.
    Each navigator contains the `Navigator` and `Screen` components, and you can pass
    them to your `App`. The resulting `tab` or `drawer` navigation will be created
    and rendered for you.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你使用`react-native`中的`Platform`实用工具来决定使用哪个导航器。结果，根据平台，被分配给`App`。每个导航器都包含`Navigator`和`Screen`组件，你可以将它们传递给你的`App`。为你创建并渲染的`tab`或`drawer`导航将自动生成。
- en: 'Next, let’s take a look at the `Home` screen component:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`Home`屏幕组件：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `News` and `Settings` components are essentially the same as `Home`. Here’s
    what the bottom `tab` navigation looks like on iOS:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`News`和`Settings`组件与`Home`组件基本相同。以下是iOS上底部`tab`导航的样式：'
- en: '![Picture 8](img/B19636_19_08.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片8](img/B19636_19_08.png)'
- en: 'Figure 19.8: The tab navigator'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.8：标签导航器
- en: The three screens that make up your app are listed at the bottom. The current
    screen is marked as active, and you can click on the other tabs to move around.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用由三个屏幕组成，列在底部。当前屏幕被标记为活动状态，你可以点击其他标签来移动。
- en: 'Now, let’s see what the `drawer` layout looks like on Android:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Android上的`drawer`布局是什么样的：
- en: '![Picture 9](img/B19636_19_09.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片9](img/B19636_19_09.png)'
- en: 'Figure 19.9: The drawer navigator'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.9：抽屉导航器
- en: To open the `drawer`, you need to swipe from the left side of the screen. Once
    it’s open, you’ll see buttons that will take you to the various screens of your
    app.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开`drawer`，你需要从屏幕左侧滑动。一旦打开，你会看到按钮，它们会带你到应用的各种屏幕。
- en: Swiping the `drawer` open from the left side of the screen is the default mode.
    You can configure the `drawer` to swipe open from any direction.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从屏幕左侧滑动打开`drawer`是默认模式。你可以配置`drawer`从任何方向滑动打开。
- en: Now, you’ve learned how to use `tab` and `drawer` navigation. Next, we’ll explore
    the approach of how to define navigation based just on files.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经学会了如何使用 `tab` 和 `drawer` 导航。接下来，我们将探讨仅基于文件定义导航的方法。
- en: File-based navigation
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于文件的导航
- en: In this section, we will talk about **Expo Router**, a file-based router works
    in a similar way to routing in Next.js. To add a new screen, you just need to
    add a new file to the `app` folder. It’s built on top of React Navigation, so
    the routes have the same options and parameters.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 **Expo Router**，这是一个基于文件的路由器，其工作方式与 Next.js 中的路由类似。要添加新的屏幕，你只需在 `app`
    文件夹中添加一个新的文件。它是建立在 React Navigation 之上的，因此路由具有相同的选项和参数。
- en: 'For more information and details about Expo Router, take a look at this link:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Expo Router 的信息和细节，请查看此链接：
- en: '[https://docs.expo.dev/routing/introduction/](https://docs.expo.dev/routing/introduction/)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.expo.dev/routing/introduction/](https://docs.expo.dev/routing/introduction/)'
- en: 'To try it out, we will install a fresh project using:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试它，我们将使用以下命令安装一个新的项目：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To install the project with Expo Router ready, we just need to choose the `Navigation
    (TypeScript)` template:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用准备好 Expo Router 的项目进行安装，我们只需选择 `Navigation (TypeScript)` 模板：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When the installation is finished, you will find the `app` folder for the project.
    This folder will be used for all your screens. Let’s try to replicate the example
    from the *The basics of navigation* section. First of all, we need to create `_layout.tsx`
    inside the `app` folder. That file is working as a `root` layer of our `app`.
    This is how it looks:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你将找到项目的 `app` 文件夹。这个文件夹将用于所有你的屏幕。让我们尝试复制 *导航基础* 部分的示例。首先，我们需要在 `app` 文件夹内创建
    `_layout.tsx` 文件。这个文件作为我们 `app` 的 `root` 层工作。它看起来是这样的：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then let’s create the `index.tsx` files that will contain the `Home` screen.
    It has few differences compared to `_layout.tsx`, so let’s take a look:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们创建包含 `Home` 屏幕的 `index.tsx` 文件。与 `_layout.tsx` 相比，它有一些不同，让我们看看：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see here, we don’t use a `navigation` prop. We are instead using
    a `Link` component that accepts `href` props, just like a web page. Clicking on
    that button takes us to the `Settings` screen.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们没有使用 `navigation` 属性。我们而是使用一个接受 `href` 属性的 `Link` 组件，就像一个网页。点击那个按钮会带我们到
    `Settings` 屏幕。
- en: 'Let’s create the `settings.tsx` file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `settings.tsx` 文件：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we use the same approach as the `index.tsx` files, but in `Link`, we set
    `href` to “`/`".
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用与 `index.tsx` 文件相同的方法，但在 `Link` 中，我们将 `href` 设置为 “`/`”。
- en: This is how easily we can define screens in a declarative way, and the URL approach
    to navigating between screens works out of the box. Also, one benefit we get here
    is that **deep linking** also works out of the box; with this method, we can open
    specific screens using app links.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们可以如此轻松地以声明式方式定义屏幕，并且屏幕之间的导航 URL 方法是即插即用的。此外，我们在这里获得的一个好处是**深度链接**也是即插即用的；使用这种方法，我们可以通过应用链接打开特定的屏幕。
- en: Now you know how to use file-based routing, which can improve your experience
    of developing mobile apps, especially with a web-based mindset of URLs and linking.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你知道如何使用基于文件的路由，这可以提高你开发移动应用的经验，尤其是在基于 URL 和链接的 Web 态度下。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned that mobile applications require navigation, just
    like web applications do. Although they are different, web application and mobile
    application navigation have enough conceptual similarities that mobile app routing
    and navigation don’t have to be a nuisance.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解到移动应用需要导航，就像 Web 应用一样。尽管它们不同，Web 应用和移动应用导航在概念上有足够的相似性，使得移动应用的路由和导航不必成为麻烦。
- en: 'Older versions of React Native attempted to provide components to help manage
    navigation within mobile apps, but they never really took hold. Instead, the React
    Native community has dominated this area. One example of this is the `react-navigation`
    library: the focus of this chapter.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版本的 React Native 尝试提供组件来帮助管理移动应用内的导航，但它们从未真正流行起来。相反，React Native 社区主导了这个领域。一个例子是
    `react-navigation` 库：本章的重点。
- en: You learned how basic navigation works with `react-navigation`. You then learned
    how to control `header` components within the navigation bar. Next, you learned
    about the `tab` and `drawer` navigation components. These two navigation components
    can automatically render the navigation buttons for your app based on the screen
    components. You also learned how to work with the file-based Expo Router.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何使用 `react-navigation` 进行基本导航。然后，你学习了如何在导航栏中控制 `header` 组件。接下来，你了解了 `tab`
    和 `drawer` 导航组件。这两个导航组件可以根据屏幕组件自动渲染你的应用的导航按钮。你还学习了如何与基于文件的 Expo Router 一起工作。
- en: In the next chapter, you’ll learn how to render lists of data.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何渲染数据列表。
