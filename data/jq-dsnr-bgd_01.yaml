- en: Chapter 1. Designer, Meet jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 设计师，遇见 jQuery
- en: You might have heard quite a lot about jQuery over the past couple of years
    — it's quickly become one of the most popular code packages in use on the Web
    today. And you might have wondered what all the fuss was about.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在过去几年里，你可能已经听说了很多关于 jQuery 的事情 —— 它很快成为了当今网络上使用最广泛的代码包之一。你可能会想知道这一切到底是怎么回事。
- en: Whether you've tried to figure out JavaScript before and have thrown up your
    hands in frustration or have been too intimidated to even give it a go, you'll
    find that jQuery is a wonderfully approachable and relatively easy to learn approach
    to getting your feet wet with JavaScript.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 无论你以前是否尝试过理解 JavaScript 并因挫折而放弃，或者对此感到害怕而不敢尝试，你会发现 jQuery 是一种非常易于接近且相对容易学习的方法，可以让你初次接触
    JavaScript 时感到轻松自如。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖：
- en: What jQuery is and why it's ideal for designers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery 是什么，为什么它非常适合设计师
- en: Progressive enhancement and graceful degradation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐进增强和优雅降级
- en: JavaScript basics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript 基础知识
- en: Downloading jQuery
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载 jQuery
- en: Your first jQuery script
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的第一个 jQuery 脚本
- en: What is jQuery?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 是什么？
- en: jQuery is a JavaScript library. That means that it's a collection of reusable
    JavaScript code that accomplishes common tasks — web developers often find themselves
    solving the same problems over and over again. Instead of engineering a solution
    from scratch each time, it makes sense to collect up all those useful bits into
    a single package that can be included and used in any project. The creators of
    jQuery have written code to smoothly and easily handle the most common and most
    tedious tasks we want to accomplish with JavaScript — and they've ironed out all
    the little differences that need to be worked out to get the code working in different
    browsers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 是一个 JavaScript 库。这意味着它是一组可重复使用的 JavaScript 代码，用于完成常见任务 —— 网页开发者经常发现自己一遍又一遍地解决相同的问题。与其每次从头开始设计解决方案，不如将所有这些有用的代码片段收集到一个单独的包中，可以在任何项目中包含并使用。jQuery
    的创建者已经编写了代码来平稳而轻松地处理我们想要使用 JavaScript 完成的最常见和最乏味的任务 —— 并且他们已经解决了在不同浏览器中让代码工作所需解决的所有小差异。
- en: It's important to remember that jQuery is JavaScript, not a language of its
    own. It has all the same rules and is written the same way as JavaScript. Don't
    let that frighten you away — jQuery really does make writing JavaScript much easier.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住 jQuery 是 JavaScript，而不是自己的语言。它遵循同样的规则，以及与 JavaScript 相同的写法。不要因此而退缩 ——
    jQuery 确实使编写 JavaScript 变得更加容易。
- en: jQuery's official tag line is *Write Less, Do More*. That's an excellent and
    accurate description of the jQuery library — you really can accomplish amazing
    things in just a few lines of code. My own unofficial tag line for jQuery is *Find
    Stuff and Do Stuff To It* because finding and manipulating different parts of
    an HTML document is extremely tedious with raw JavaScript and requires lines and
    lines of code. jQuery makes that same task painless and quick. Thanks to jQuery,
    you can not only quickly create a drop-down menu — you can create one that's animated
    and works smoothly in many different browsers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的官方口号是 *写更少，做更多*。这是对 jQuery 库的一个极好而准确的描述 —— 你真的可以在几行代码中完成惊人的事情。我自己对 jQuery
    的非官方口号是 *找到东西并对其进行操作*，因为使用原始 JavaScript 找到并操作 HTML 文档的不同部分非常乏味，并且需要大量的代码行。jQuery
    使得同样的任务变得轻松而快速。多亏了 jQuery，你不仅可以快速创建一个下拉菜单 —— 你可以创建一个动画效果并且在许多不同的浏览器中流畅运行的下拉菜单。
- en: Why is jQuery awesome for designers?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么 jQuery 对设计师来说如此棒？
- en: So just what is it about jQuery that makes it so easy to learn, even if you
    have limited or no experience with JavaScript?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，究竟是什么让 jQuery 如此易于学习，即使你对 JavaScript 有限或没有经验？
- en: Uses CSS selectors you already know
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用你已经了解的 CSS 选择器
- en: The first thing you'll often do in a jQuery script is select the elements you'd
    like to work with. For example, if you're adding some effects to a navigation
    menu, you'll start by selecting the items in the navigation menu. The tools you
    use for this job are selectors — ways to select certain elements on the page you
    want to work with.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 脚本中，你通常会做的第一件事情是选择你想要操作的元素。例如，如果你要向导航菜单添加一些效果，你会首先选择导航菜单中的项目。用于这项工作的工具是选择器
    —— 一种选择页面上要操作的特定元素的方法。
- en: jQuery borrowed selectors from CSS all the way up through CSS3 and they work
    even in browsers that don't support CSS3 selectors just yet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 从 CSS 中借用了选择器一直到 CSS3，即使在尚不支持 CSS3 选择器的浏览器中也可以工作。
- en: Even though CSS offers a pretty robust set of selectors, jQuery adds a few more,
    all on its own, to make just the elements you need easy to work with.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 CSS 提供了一组相当强大的选择器，但 jQuery 自己添加了一些额外的选择器，使得你需要的元素更容易处理。
- en: If you already know how to do things such as make all the level 1 headings blue
    or make all the links green and underlined, then you'll easily learn how to select
    the elements you'd like to modify with jQuery.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经知道如何做一些事情，比如将所有的一级标题变为蓝色，或者将所有的链接变为绿色并带下划线，那么你很容易学会如何用 jQuery 选择你想要修改的元素。
- en: Uses HTML markup you already know
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用你已经了解的 HTML 标记语言
- en: If you want to create new elements or modify existing elements with raw JavaScript,
    you better crack your knuckles and get ready to write lots and lots of code —
    and it won't make all that much sense, either.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要用原始的 JavaScript 创建新元素或修改现有元素，最好揉揉手指，准备好写很多很多的代码 —— 而且这些代码可能并不那么容易理解。
- en: For example, if we wanted to append a paragraph to our page that said *This
    page is powered by JavaScript*, we would have to first create the paragraph element,
    then assign the text that should be inside the paragraph to a variable as a string,
    and finally append the string to the newly created paragraph as a text node. And
    after all that, we would still have to append the paragraph to the document. Phew!
    (Don't worry if you didn't understand all of that it was just to illustrate how
    much work and code is required to do something this simple.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要向页面附加一个段落，内容是*这个页面由 JavaScript 驱动*，我们首先必须创建段落元素，然后将应该在段落中的文本分配给一个变量作为字符串，最后将字符串附加到新创建的段落作为文本节点。然后，我们仍然必须将段落附加到文档中。哎呀！（如果你没有完全理解这一切，别担心，这只是为了说明做这么简单的事情需要多少工作和代码。）
- en: 'With jQuery, adding a paragraph to the bottom of our page is as simple as:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 jQuery，向页面底部添加一个段落就这么简单：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's right — you just append a bit of HTML directly to the body and you're
    all set. I bet that without understanding JavaScript at all, you can read that
    line of code and grasp what it's doing. This code is appending a paragraph that
    reads *This page is powered by jQuery* to the body of my HTML document.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 没错 —— 你只需将一小段 HTML 直接附加到 body 中，然后一切就搞定了。我敢打赌，即使你完全不理解 JavaScript，你也能读懂那行代码并理解它在做什么。这段代码是将一个段落附加到我的
    HTML 文档的 body 中，内容是*这个页面由 jQuery 驱动*。
- en: Impressive effects in just a few lines of code
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅需几行代码即可实现令人印象深刻的效果。
- en: 'You''ve got better things to do than to sit and write lines and lines of code
    to add fade in and fade out effects. jQuery provides you with a few basic animations
    and the power to create your own custom animations right out of the box. Let''s
    say I wanted to make an image fade into the page:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你有更重要的事情要做，而不是坐在那里写一行一行的代码来添加淡入和淡出效果。jQuery 为你提供了一些基本的动画和创建自定义动画的能力。比如说，我想让一张图片淡入到页面中：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Yep, that's it — one little line of code in which I select my image and then
    tell it to fade in. We'll see later in the chapter exactly where this line of
    code will go in your HTML page.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这样 —— 一行代码，我选择了我的图片然后告诉它淡入。我们稍后会在本章中确切地了解这行代码在你的 HTML 页面中的位置。
- en: Huge plugin library available
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的巨大插件库
- en: As I've said earlier, web developers often find themselves solving the same
    problems over and over again. You're likely not the first person who wanted to
    build a rotating image slideshow, an animated drop-down menu, or a news ticker.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说，Web 开发者经常发现自己反复解决相同的问题。你很可能不是第一个想要构建旋转图片幻灯片、动画下拉菜单或新闻滚动条的人。
- en: jQuery has an impressively large library of scripts available freely — scripts
    to create tooltips, slideshows, news tickers, drop-down menus, date pickers, character
    counters, and on and on. You don't need to learn how to build all these things
    from scratch — you just have to learn how to harness the power of plugins. We'll
    be covering some of the most popular jQuery plugins in this book, and you'll be
    able to take what you've learned to use any plugin in the jQuery plugin library.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 有一个令人印象深刻的大型脚本库 —— 脚本用于创建工具提示、幻灯片、新闻滚动条、下拉菜单、日期选择器、字符计数器等等。你不需要学会如何从头开始构建所有这些东西
    —— 你只需要学会如何利用插件的威力。我们将在本书中介绍一些最受欢迎的 jQuery 插件，你将能够利用你所学到的知识使用 jQuery 插件库中的任何插件。
- en: Great community support
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 庞大的社区支持
- en: jQuery is an open source project — that means it's being collectively built
    by a team of super-smart JavaScript coders and is freely available for anyone
    to use. The success or failure of an open source project often depends on the
    community behind the project — and jQuery has a large and active community supporting
    it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery是一个开源项目 — 这意味着它是由一群超级聪明的JavaScript编码人员共同构建的，并且任何人都可以免费使用。开源项目的成功或失败通常取决于项目背后的社区
    — 而jQuery有一个庞大而活跃的支持社区。
- en: That means that jQuery itself is being constantly improved and updated. And
    on top of that, there are thousands of developers out there creating new plugins,
    adding features to existing plugins, and offering up support and advice to newcomers
    — you'll find new tutorials, blog posts and podcasts on a daily basis for just
    about anything you want to learn.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着jQuery本身正在不断改进和更新。除此之外，还有成千上万的开发人员创建新的插件，为现有插件添加功能，并为新手提供支持和建议 —— 你会发现针对几乎任何你想学习的内容，每天都会有新的教程、博客文章和播客。
- en: JavaScript basics
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript基础知识
- en: In this section, I am going to cover a few basics of JavaScript that will make
    things go more smoothly. We're going to look at a little bit of code and work
    through how it works. Don't be intimidated — this will be quick and painless and
    then we'll be ready to get on with actually doing something with jQuery.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将介绍一些JavaScript的基础知识，这将使事情更加顺利进行。我们将查看一小部分代码，并解释它的工作原理。不要感到害怕 —— 这将很快并且没有痛苦，然后我们将准备好真正开始使用jQuery了。
- en: Progressive enhancement and graceful degradation
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渐进增强和优雅降级
- en: There are a few different schools of thought when it comes to enhancing your
    HTML pages with JavaScript. Let's talk about some of the things we should consider
    before we dive into the cool stuff.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在增强HTML页面与JavaScript时，有几种不同的思想流派。在我们着手进行有趣的事情之前，让我们谈谈一些在深入研究之前应该考虑的事情。
- en: Progressive enhancement and graceful degradation are essentially two sides of
    the same coin. They both mean that our page with its impressive JavaScript animations
    and special effects will still work for users who have less capable browsers or
    devices. Graceful degradation means that we create our special effect and then
    make sure it fails gracefully if JavaScript is not enabled. If we take the progressive
    enhancement approach, we'll first build out a bare bones version of our page that
    works for everyone, and then enhance it by adding on our JavaScript special effects.
    I tend to favor the progressive enhancement approach.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进增强和优雅降级本质上是同一枚硬币的两面。它们都意味着我们的页面及其令人印象深刻的JavaScript动画和特效将仍然适用于具有较差浏览器或设备的用户。优雅降级意味着我们创建特效，然后确保如果未启用JavaScript，则优雅地失败。如果我们采用渐进增强方法，我们将首先构建一个适用于所有人的简约页面，然后通过添加我们的JavaScript特效来增强它。我倾向于采用渐进增强方法。
- en: Why should we care about users who don't have JavaScript enabled? Well, one
    of the Web's biggest users — search engines — do not have JavaScript capabilities.
    When search engines are crawling and indexing your pages, they will not have access
    to any content that's being loaded into your pages by JavaScript. That's often
    referred to as dynamic content, and it won't be indexed or found by search engines
    if it can't be reached with JavaScript disabled.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要关心那些没有启用JavaScript的用户呢？好吧，网络上最大的用户之一 — 搜索引擎 — 没有JavaScript功能。当搜索引擎爬行和索引您的页面时，它们将无法访问JavaScript加载到您的页面中的任何内容。这通常被称为动态内容，如果无法在禁用JavaScript的情况下访问，搜索引擎将无法索引或找到它。
- en: We're also in an era where we can no longer count on users accessing the web
    pages we build with a conventional desktop or laptop computer. We're quick to
    think of smart phones and tablets as the next candidates, and while they are very
    popular, they still only account for a tiny fraction of Internet access.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也处于一个时代，不再能指望用户使用传统的台式机或笔记本电脑访问我们构建的网页。我们很快就会想到智能手机和平板电脑是下一个候选者，虽然它们非常受欢迎，但它们仍然只占互联网访问的一小部分。
- en: People are accessing the Web from gaming consoles, e-book readers, Internet-enabled
    televisions, a huge variety of mobile devices, and probably hundreds of other
    ways. Not all of these devices are capable of executing JavaScript — some of them
    don't even have color screens! Your number one priority should be making sure
    that your content is available to anyone who asks for it, no matter what device
    they happen to be using.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 人们从游戏机、电子书阅读器、互联网电视、各种各样的移动设备甚至可能还有数百种其他方式访问网络。并非所有这些设备都能执行 JavaScript —— 其中一些甚至没有彩色屏幕！你的头等大事应该是确保你的内容对任何要求它的人都是可用的，无论他们使用的设备是什么。
- en: Gotta keep 'em separated
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 必须分开处理它们
- en: 'To accomplish this task of making our content available to as wide an audience
    as possible, we have to think of our web pages in three separate and distinct
    layers: content, presentation, and behavior.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个尽可能使我们的内容对尽可能广泛的受众可用的任务，我们必须将我们的网页看作是三个独立且不同的层次：内容、呈现和行为。
- en: Content
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容
- en: Content is the meat of our web page — it's the text or the audio or video that
    we're most interested in presenting on our page, so this is where we start.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 内容是我们网页的重点 —— 它是我们最感兴趣的呈现在我们页面上的文本或音频或视频，所以这是我们开始的地方。
- en: Mark up your content with clean, simple HTML code. Use HTML elements the way
    they were intended to be used. Mark up headings with heading tags, paragraphs
    with paragraph tags, lists with list tags, and save tables for tabular data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 用干净、简单的 HTML 代码标记您的内容。使用 HTML 元素的方式是它们预期的使用方式。使用标题标记标记标题、使用段落标记标记段落、使用列表标记标记列表，并将表格保留给表格数据。
- en: Browsers have built-in styles for these basic HTML tags — headings will be larger
    type and probably bolded. Lists will have bullets or numbers. It might not look
    very fancy, but it's readable and accessible to anyone.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器为这些基本的 HTML 标签内置了样式 —— 标题将会是较大的字体且可能会加粗。列表将具有项目符号或编号。可能看起来不太花哨，但它对任何人来说都是可读的和可访问的。
- en: Presentation
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 呈现
- en: The presentation layer is where we start to get fancy. This is where we introduce
    CSS and start applying our own styles to the content we've created. As we style
    our page, we might find that we have to go back into our HTML and add some new
    containers and markup to make things such as multi-column layouts possible, but
    we should still strive to keep our markup as simple and as straightforward as
    we can.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 展示层是我们开始变得花哨的地方。这是我们引入 CSS 并开始对我们创建的内容应用自己的样式的地方。当我们为页面添加样式时，我们可能会发现我们需要回到我们的
    HTML 中添加一些新的容器和标记，以使诸如多列布局之类的东西成为可能，但我们仍然应该努力保持我们的标记尽可能简单和直接。
- en: Behavior
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行为
- en: Once our page has all of our content properly marked up and is styled to look
    the way we like, now we can think about adding in some interactive behavior. This
    is where JavaScript and jQuery come in. This layer includes animations, special
    effects, AJAX, and more.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的页面所有内容都被正确标记并且样式看起来我们喜欢的方式，现在我们可以考虑添加一些交互行为。这就是 JavaScript 和 jQuery 起作用的地方。这一层包括动画、特效、AJAX
    等等。
- en: Designer, meet JavaScript
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计师，见识 JavaScript
- en: JavaScript is a powerful and complex language — you can work with it for 10
    years and still have more to learn. But don't let that frighten you away, you
    don't have to know everything about it to be able to take advantage of what it
    has to offer. In fact, you just have to get down a few basics.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种功能强大且复杂的语言 —— 你可以与之一起工作 10 年，仍然有更多要学习的内容。但不要让这吓倒你，你不必了解它的所有内容才能利用它所提供的内容。事实上，你只需要掌握一些基础知识。
- en: This section introduces some JavaScript basics and JavaScript syntax. Don't
    be scared away by that developer word — syntax. Syntax just means the rules for
    writing a language, much like we have rules of grammar for writing English.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节介绍了一些 JavaScript 基础和 JavaScript 语法。不要被那个开发者词语 —— 语法 吓倒。语法只是指编写语言的规则，就像我们有写英语的语法规则一样。
- en: Variables
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'Let''s start with something simple:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的开始：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a *sentence* in JavaScript. In English, we end a sentence with a period
    or maybe a question mark or exclamation point. In JavaScript we end our sentences
    with a semicolon.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 JavaScript 中的*句子*。在英语中，我们以句号或者可能是问号或感叹号结束句子。在 JavaScript 中，我们以分号结束我们的句子。
- en: In this sentence, we're creating a variable, `x`. A variable is just a container
    for holding something. In this case, `x` is holding the number `5`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个句子中，我们正在创建一个变量，`x`。变量只是一个容器，用来保存东西。在这种情况下，`x`保存的是数字`5`。
- en: 'We can do math with JavaScript like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用 JavaScript 这样做数学：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Just like algebra, our variable `z` is now holding the value of the number `7`
    for us.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就像代数一样，我们的变量`z`现在为我们保存了数字`7`的值。
- en: 'But variables can hold things other than numbers. For example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但变量可以保存除了数字之外的其他东西。例如：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we've named our variable `text` and it's holding some alphabetical characters
    for us. This is called a **string**. A string is a set of alpha-numeric characters.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们命名了我们的变量`text`，它为我们保存了一些字母字符。这叫做**字符串**。字符串是一组字母数字字符。
- en: Objects
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: Objects might be the hardest thing for a newcomer to JavaScript to grasp, but
    that's often because we overthink it, convinced it has to be more complicated
    than it actually is.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JavaScript 新手来说，对象可能是最难理解的东西，但那往往是因为我们想得太多，坚信它必须比实际更复杂。
- en: An object is just what it sounds like — a thing, anything. Just like a car,
    a dog, or a coffee maker are objects.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象就像它听起来的那样 —— 一个东西，任何东西。就像汽车、狗或咖啡壶都是对象。
- en: Objects have properties and methods. A property is a characteristic of an object.
    For example — a dog could be tall or short, have pointy ears or floppy ears, and
    be brown or black, or white. All of these are properties of a dog. A method is
    something an object can do. For example a dog can run, bark, walk, and eat.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对象具有属性和方法。属性是对象的特征。例如 — 一只狗可以高或矮，有尖耳或垂耳，是棕色或黑色，或白色。所有这些都是一只狗的属性。方法是对象可以做的事情。例如一只狗可以跑、吠、走路和吃东西。
- en: 'Let''s take my dog, Magdelena von Barkington, as an example to see how we would
    deal with objects, properties, and methods in JavaScript:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以我的狗，马格达莱纳·冯·巴尔金顿，为例，看看我们如何在 JavaScript 中处理对象、属性和方法：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here I''ve created a variable `dog` that I''m using as a container to hold
    my dog, mostly because I don''t want to have to type out her full name each time
    I refer to her in my code. Now let''s say I wanted to get my dog''s color:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我创建了一个变量`dog`，我将其用作一个容器来容纳我的狗，主要是因为我不想每次在代码中提及她时都要输入她的全名。现在假设我想要获取我的狗的颜色：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I created a container called `color` and I'm using it to hold my dog's color
    property— `color` is now equal to my dog's color.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个名为`color`的容器，我用它来容纳我的狗的颜色属性 — `color`现在等于我的狗的颜色。
- en: 'Now, I''ve trained my dog very well, and I would like her to roll over. Here''s
    how I would tell her to roll over with JavaScript:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我训练过我的狗，我想让她翻滚。这是我用 JavaScript 告诉她翻滚的方法：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`rollOver` is a method — something that my dog can do. After my dog rolls over,
    I might like to reward her with a treat. Here''s how my dog eats a treat with
    JavaScript:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`rollOver`是一个方法 —— 我的狗能做的事情。在我的狗翻滚后，我可能想用零食奖励她。这是我用 JavaScript 让我的狗吃零食的方法：'
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Wait, what's going on here? Let's take it one step at a time. We have dog, which
    we know is a container for my dog, Magdelena von Barkington. We have the `eat`
    method, which we know is something that my dog can do. But my dog can't just eat
    — she has to eat *something*. We use the parentheses to say what it is that she
    is eating. In this case, my lucky dog is eating bacon. In JavaScript speak, we
    would say we were passing bacon to the eat method of the dog.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，这里发生了什么？ 让我们一步一步来看。我们有 dog，我们知道它是一个容器，里面装着我的狗，马格达莱纳·冯·巴尔金顿。我们有`eat`方法，我们知道这是我的狗能做的事情。但是我的狗不能只是吃
    —— 她必须吃*某物*。我们用括号来表示她在吃什么。在这种情况下，我的幸运狗在吃培根。在 JavaScript 里，我们会说我们正在将培根传递给狗的`eat`方法。
- en: So you see, objects aren't so difficult — they're just things. Properties are
    like adjectives — they describe traits or characteristics of an object. Methods
    are like verbs — they describe actions that an object can do.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你看，对象并不那么难 — 它们只是事物。属性就像形容词 — 它们描述对象的特征或特性。方法就像动词 — 它们描述对象可以做的动作。
- en: Functions
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: 'A function is a bit of reusable code that tells JavaScript to do something.
    For example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是一小段可重复使用的代码，告诉 JavaScript 做某事。例如：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This function tells JavaScript to pop up an alert box that says `Something!`.
    We always start a function with the word `function` then we name our function.
    That's followed by a set of parentheses and a set of curly brackets. The lines
    of instruction go inside the curly brackets.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数告诉 JavaScript 弹出一个显示`Something!`的警告框。我们总是用单词`function`开始一个函数，然后命名我们的函数。接着是一对括号和一对花括号。指令行写在花括号里。
- en: 'Now, my `saySomething` function won''t actually do anything until it''s called,
    so I need to add a line of code to call my function:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我的`saySomething`函数在被调用之前实际上不会做任何事情，所以我需要添加一行代码来调用我的函数：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你在 [http://www.PacktPub.com](http://www.PacktPub.com) 上购买的所有 Packt 书籍的帐户中下载示例代码文件。如果你在其他地方购买了这本书，你可以访问
    [http://www.PacktPub.com/support](http://www.PacktPub.com/support) 并注册，让文件直接通过电子邮件发送给你。
- en: You might wonder what those parentheses are for. Remember how we could pass
    things to a method by including them in parentheses?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想知道那些括号是干什么的。还记得我们是如何通过将它们包含在括号中将东西传递给一个方法的吗？
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this case, we passed bacon to say what the dog was eating. We can do much
    the same thing for functions. In fact, methods actually are functions or functions.
    In fact, methods actually are functions — they''re just functions specialized
    for describing what an object can do. Let''s look at how we modify our `saySomething`
    function so that we can pass text to it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们通过`bacon`来说明狗正在吃什么。对于函数，我们也可以做类似的事情。事实上，方法实际上就是函数 —— 它们只是专门用于描述对象可以做什么的函数。让我们看看如何修改我们的`saySomething`函数，以便我们可以向其传递文本：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, when I wrote the `saySomething` function, I just left a generic
    container in place. This is called a parameter — we'd say the `saySomething` function
    takes a text parameter, since I've called my parameter `text`. I chose the name
    `text` because it's a short and handy descriptor of what we're passing in. We
    can pass in any bit of text to this function, so `text` is an appropriate name.
    You can name your parameter anything you'd like — but you'll make your code easier
    to read and understand if you apply some commonsense rules when you're selecting
    names for your parameters. A parameter behaves very much like a variable — it's
    just a container for something.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当我编写`saySomething`函数时，我只是留下了一个通用的容器。这被称为参数 —— 我们会说`saySomething`函数接受一个文本参数，因为我将我的参数称为`text`。我选择了`text`这个名字，因为它是对我们传入的内容的一个简短而方便的描述。我们可以向这个函数传递任何文本片段，所以`text`是一个合适的名字。你可以给你的参数起任何名字
    —— 但是如果在选择参数名称时应用一些常识规则，你的代码将更容易阅读和理解。参数行为非常像变量 —— 它只是一个东西的容器。
- en: Downloading jQuery and getting set up
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 jQuery 并设置
- en: We're ready to include the magic of jQuery into a project, but first we need
    to download it and figure out how to get it attached to an HTML page. Here, we'll
    walk through getting a sample HTML file started, and all the associated files
    and folders we'll need to work through a sample project set up. Once we're finished,
    you can use this as a template for all the future exercises in the book.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备将 jQuery 的魔力引入项目中，但首先我们需要下载它并弄清如何将它附加到一个 HTML 页面上。在这里，我们将逐步了解如何启动一个示例 HTML
    文件，以及我们需要处理一个示例项目设置所需的所有关联文件和文件夹。完成后，你可以将其用作本书中所有未来练习的模板。
- en: Time for action — downloading and attaching jQuery
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 下载并附加 jQuery
- en: 'Earlier, I described the three layers of an HTML document — content, presentation,
    and behavior. Let''s take a look at how we can set up our files for these three
    layers:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我描述了 HTML 文档的三个层次 —— 内容、展示和行为。让我们看看如何为这三个层次设置我们的文件：
- en: First, let's set up a folder on your hard drive to hold all of your work as
    you work through the lessons in this book. Find a good place on your hard drive
    and create a folder called `jQueryForDesigners`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们在你的硬盘上创建一个文件夹，用来保存你在本书中学习过程中的所有工作。在你的硬盘上找一个合适的位置，创建一个名为`jQueryForDesigners`的文件夹。
- en: Inside the folder, create a folder called `styles`. We'll use this folder to
    hold any CSS we create. Inside the `styles` folder, create an empty CSS file called
    `styles.css`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件夹内创建一个名为`styles`的文件夹。我们将使用这个文件夹来保存我们创建的任何 CSS。在`styles`文件夹内，创建一个名为`styles.css`的空
    CSS 文件。
- en: The styles represent our presentation layer. We'll keep all of our styles in
    this file to keep them separate. Likewise, create a folder called `images` to
    hold any images we'll use.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 样式代表着我们的展示层。我们将所有的样式保存在这个文件中以保持它们的分离。同样，创建一个名为`images`的文件夹来保存我们将要使用的任何图片。
- en: Next, create a folder called `scripts` to hold our JavaScript and jQuery code.
    Inside the `scripts` folder, create an empty JavaScript file called `scripts.js`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`scripts`的文件夹来保存我们的 JavaScript 和 jQuery 代码。在`scripts`文件夹内，创建一个名为`scripts.js`的空
    JavaScript 文件。
- en: The JavaScript we write here represents our behavior layer. We'll keep all of
    our JavaScript in this file to keep it separate from the other layers.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里编写的 JavaScript 代表我们的行为层。我们将所有的 JavaScript 都放在这个文件中，以使其与其他层分开。
- en: 'Now, inside the `jQueryForDesigners` folder, create a new HTML page very basic
    as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`jQueryForDesigners`文件夹中，创建一个非常基本的新 HTML 页面，如下所示：
- en: '[PRE13]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save this file as `index.html`. The HTML file is our content layer — and arguably
    the most important layer; as it's likely the reason site visitors are coming to
    our website at all.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将该文件保存为`index.html`。HTML 文件是我们的内容层，可以说是最重要的层；因为这很可能是网站访问者访问我们网站的原因。
- en: 'Next, we''ll attach the CSS and JavaScript files that we made to our HTML page.
    In the head section, add a line to include the CSS file:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把我们制作的 CSS 和 JavaScript 文件附加到我们的 HTML 页面上。在头部部分，添加一行来包含 CSS 文件：
- en: '[PRE14]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And then head down to the bottom of the HTML file, just before the closing
    `</body>` tag and include the JavaScript file:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后转到 HTML 文件的底部，在闭合的`</body>`标签之前，包含 JavaScript 文件：
- en: '[PRE15]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As these files are just empty placeholders, attaching them to your HTML page
    won't have any effect. But now we have a handy place to write our CSS and JavaScript
    when we're ready to dive into an exercise.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这些文件只是空占位符，将它们附加到你的 HTML 页面上不会产生任何效果。但现在当我们准备进行练习时，我们有一个方便的地方来编写我们的 CSS 和
    JavaScript。
- en: Note
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that it's perfectly fine to self-close a`<link>` element, but a`<script>`
    element always needs a separate closing`</script>` tag. Without it, your JavaScript
    won't work.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，自闭合`<link>`元素是完全可以的，但是`<script>`元素总是需要一个单独的闭合`</script>`标签。没有它，你的 JavaScript
    将无法工作。
- en: 'Here''s what my folder looks like at this point:'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到目前为止，我的文件夹看起来是这样的：
- en: '![Time for action — downloading and attaching jQuery](img/6709OS_01_004.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作时间 — 下载并附加 jQuery](img/6709OS_01_004.jpg)'
- en: Now we have to include jQuery in our page. Head over to [http://jquery.com](http://jquery.com)
    and hit the **Download(jQuery)**; button:![Time for action — downloading and attaching
    jQuery](img/6709OS_01_001.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们要在我们的页面中包含 jQuery。前往 [http://jquery.com](http://jquery.com)，点击**Download(jQuery)**按钮：![操作时间
    — 下载并附加 jQuery](img/6709OS_01_001.jpg)
- en: You'll notice you have two options under **Choose Your Compression Level**.
    You'll always want to check the **Production** checkbox. This is the version that's
    ready to use on a website. The **Development** version is for experienced JavaScript
    developers who want to edit the source code of the jQuery library.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到**选择你的压缩级别**下有两个选项。你总是要勾选**生产**复选框。这是一个准备在网站上使用的版本。**开发**版本是为有经验的 JavaScript
    开发人员准备的，他们想要编辑 jQuery 库的源代码。
- en: Clicking on the **Download** button will open the production jQuery file in
    your browser window, and it looks a little bit scary, as follows:![Time for action
    — downloading and attaching jQuery](img/6709OS_01_002.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载**按钮会在你的浏览器窗口中打开生产 jQuery 文件，看起来有点吓人，如下所示：![操作时间 — 下载并附加 jQuery](img/6709OS_01_002.jpg)
- en: Don't worry, you don't have to read it and you definitely don't have to understand
    it. Just go to your browser's file menu and choose **Save Page As...**. or right-click
    on the page and select **Save As** and then save the file to your hard drive,
    inside the `scripts` folder we created. By default, the script will have the version
    number in the file name. I'm going to go ahead and rename the file to `jquery.js`
    to keep things simple.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不用担心，你不必阅读它，你绝对不必理解它。只需转到浏览器的文件菜单，选择**另存为...**。或右键单击页面，选择**另存为**，然后将文件保存到我们创建的`scripts`文件夹中。默认情况下，脚本文件名中会包含版本号。我将继续将文件重命名为`jquery.js`，以保持简单。
- en: 'Now we just have to include our jQuery script in our page, just like we included
    our empty JavaScript file. Go to the bottom of your practice HTML file, just before
    the`<script>` tag we created earlier and add a line to include jQuery:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只需在我们的页面中包含我们的 jQuery 脚本，就像我们包含我们的空 JavaScript 文件一样。转到你的练习 HTML 文件的底部，在我们之前创建的`<script>`标签之前添加一行来包含
    jQuery：
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You won't notice any changes to your HTML page — jQuery doesn't do anything
    on its own. It just makes its magic available for you to use.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会在你的 HTML 页面上注意到任何变化 — jQuery 自己不会做任何事情。它只是让它的魔法可供你使用。
- en: Another option for using jQuery
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 jQuery 的另一个选项
- en: There is nothing wrong with downloading and using your own copy of jQuery, but
    you do have another option available that can help to improve the performance
    of your websites. That's to use a CDN-hosted copy of jQuery.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并使用自己的 jQuery 副本没有任何问题，但你还有另一个选项可用，可以帮助提高你的网站性能。那就是使用 CDN 托管的 jQuery 副本。
- en: In case you don't know, a **CDN** is a **Content Delivery Network**. The premise
    behind a CDN is that files download faster from the servers that are physically
    closer to a site visitor's location. So, for example, if you're in Los Angeles,
    California, a copy of jQuery that's on a server in Phoenix, Arizona will download
    faster than a copy that's on a server in New York City. To help this along, a
    CDN has a copy of the same file on lots of different servers all around the world.
    Each time a site visitor requests a file, the CDN smartly routes their request
    to the closest available server, helping to improve response times and overall
    site performance.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不知道，**CDN**是**内容传递网络**的简称。CDN的前提是从离站点访问者位置物理上更近的服务器下载文件速度更快。例如，如果您在加利福尼亚州的洛杉矶，那么位于亚利桑那州凤凰城的服务器上的jQuery副本将比位于纽约市的服务器上的jQuery副本下载得更快。为了加快这个过程，CDN在世界各地的许多不同服务器上都有相同文件的副本。每当站点访问者请求文件时，CDN会智能地将他们的请求路由到最接近的可用服务器，有助于改善响应时间和整体站点性能。
- en: It won't make much of a difference for the relatively simple examples and pages
    that we'll build in this book, but for a public-facing website, using a CDN-hosted
    copy of jQuery can make a noticeable difference. There are a few options out there,
    but the most popular by far is Google's Ajax API CDN. You can get the information
    on the latest version available and the correct URL at [http://code.google.com/apis/libraries/devguide.html#jquery](http://code.google.com/apis/libraries/devguide.html#jquery).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中构建的相对简单的示例和页面来说，这并不会有太大影响，但对于公开面向网站来说，使用CDN托管的jQuery副本可以带来明显的改善。虽然有几种选择，但远非最受欢迎的是谷歌的Ajax
    API CDN。您可以在[http://code.google.com/apis/libraries/devguide.html#jquery](http://code.google.com/apis/libraries/devguide.html#jquery)获取有关最新版本和正确URL的信息。
- en: 'If you would like to use the Google CDN-hosted version of jQuery in your files,
    it''s as simple as adding the following line of code to your HTML file, instead
    of the line we used previously to include jQuery:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您想在您的文件中使用谷歌CDN托管的jQuery版本，只需将以下代码行添加到您的HTML文件中即可，而不是以前用于包含jQuery的行:'
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: No downloading the file, no saving your own copy, you can just point your`<script>`
    tag directly at the copy of jQuery stored on Google's servers. Google will then
    take care of sending jQuery to your site visitors from the closest available server.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要下载文件，也不需要保存自己的副本，您只需直接将您的`<script>`标签指向存储在Google服务器上的jQuery的副本即可。谷歌会负责从最近可用的服务器向您的站点访问者发送jQuery。
- en: Not only that, but as Google's CDN is so popular, there's a good chance that
    your site visitor has already visited another site that's also using a Google
    CDN-hosted copy of jQuery and that they'll have
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，因为谷歌的CDN非常受欢迎，您的站点访问者很可能已经访问过另一个也使用谷歌CDN托管的jQuery副本的站点，他们将会有
- en: jQuery cached in their browser. That means that your site visitor won't have
    to download jQuery at all — it's already saved in their browser and available
    to be used. How's that for improving performance?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery在他们的浏览器中已缓存。这意味着您的站点访问者根本不需要下载jQuery-它已保存在他们的浏览器中，并可以随时使用。这又如何提高性能呢?
- en: Your first jQuery script
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的第一个jQuery脚本
- en: Alright, now that we understand a few basic things about JavaScript and we know
    how to get our files and folders set up to build a sample exercise, let's build
    our first simple example page and make it do something fancy with jQuery.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们对JavaScript的一些基本概念有了一些了解，并且知道如何设置文件和文件夹以构建一个示例练习，让我们构建我们的第一个简单的示例页面，并使用jQuery实现一些花里胡哨的东西。
- en: Time for action — getting ready for jQuery
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-准备好使用jQuery了
- en: 'Set up your files and folders just like we did in the previous exercise. Inside
    the`<body>` of the HTML document, add a heading and a paragraph:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '就像我们在前面的练习中所做的那样设置您的文件和文件夹。在HTML文档的`<body>`内，添加一个标题和一个段落:'
- en: '[PRE18]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Feel free to create some CSS in the `styles.css` in the styles folder — style
    this however you would like.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`styles`文件夹中的`styles.css`中随意创建一些CSS样式-您可以随心所欲地对其进行样式化。
- en: 'Next, open up that empty `scripts.js` file we created earlier and add this
    bit of script to the file:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来，打开我们之前创建的空白`scripts.js`文件，并向文件中添加以下脚本:'
- en: '[PRE19]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What just happened?
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么?
- en: Let's take this statement one at a time — first a dollar sign? Really? What's
    that doing in JavaScript?
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一次来分析这个陈述-首先是一个美元符号?真的吗?JavaScript里面怎么会出现这个符号？
- en: 'The `$` here is just a variable — that''s all. It''s a container for the jQuery
    function. Remember how I said we might use a variable to save ourselves a few
    keystrokes? The clever writers of jQuery have provided the `$` variable to save
    us from having to write out `jQuery` every time we want to use it. This code does
    the same thing:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`$`只是一个变量——就这样。它是jQuery函数的容器。还记得我说过我们可能使用一个变量来节省几次按键吗？jQuery的聪明作者们提供了`$`变量，使我们不必每次都写出`jQuery`。这段代码也能完成同样的事情：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Except it takes longer to type. jQuery uses the `$` as its short name because
    it's unlikely that you'd call a variable `$` on your own since it's an uncommon
    character. Using an uncommon character reduces the chance that there would be
    some sort of conflict between some other JavaScript being used on a page and the
    jQuery library.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 除了输入时间更长之外。jQuery使用`$`作为其简称，因为你很少会自己使用变量`$`，因为这是一个不常见的字符。使用不常见的字符可以减少在页面上使用其他JavaScript代码和jQuery库之间发生冲突的可能性。
- en: So, in this case, we're passing `document` to the jQuery or `$` method, because
    we want to select our HTML document as the target of our code. When we call the
    jQuery function, we get a jQuery object. In JavaScript speak, we would say that
    the jQuery function *returns* a jQuery object. The jQuery object is what gives
    the jQuery library its power. The entire jQuery library exists to give the jQuery
    object lots of properties and methods that make our lives easier. We don't have
    to deal with lots of different sorts of objects — we just have to deal with the
    jQuery object.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这种情况下，我们将`document`传递给jQuery或`$`方法，因为我们希望将我们的HTML文档作为我们代码的目标选择。当我们调用jQuery函数时，我们得到一个jQuery对象。在JavaScript中，我们会说jQuery函数*返回*一个jQuery对象。jQuery对象是jQuery库赋予其强大功能的核心。整个jQuery库存在的目的就是为了给jQuery对象提供许多属性和方法，使我们的生活更轻松。我们不必处理很多不同类型的对象——我们只需要处理jQuery对象。
- en: The jQuery object has a method called `ready()`. In this case, the ready method
    will be called when the document is loaded into the browser, and is ready for
    us to work with. So `$(document).ready()` just means, "when the document is ready".
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery对象有一个名为`ready()`的方法。在这种情况下，当文档加载到浏览器中并且可以与之一起工作时，将调用ready方法。所以`$(document).ready()`的意思就是“当文档准备就绪时”。
- en: Adding a paragraph
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个段落
- en: So now we're all set to do something when the document is ready, but what is
    it that we'll do? Let's add a new paragraph to our page.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好在文档就绪时执行某些操作了，但我们要做什么呢？让我们向页面添加一个新段落。
- en: Time for action — adding a new paragraph
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加一个新段落
- en: 'We need to tell jQuery what to do when the document is ready. As we want something
    to happen, we''ll pass in a function as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要告诉jQuery在文档准备就绪时要做什么。因为我们希望发生某些事情，所以我们将传入一个函数，如下所示：
- en: '[PRE21]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We'll write what's going to happen inside this function.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在这个函数内写明将要发生的事情。
- en: What about that line that starts with //? That's one way of writing a comment
    in JavaScript. A `//` tells JavaScript to ignore everything else on that line
    because it's a comment. Adding comments to your JavaScript is a great way to help
    yourself keep track of what's happening on what line. It's also great for helping
    along other developers who might need to work on your code. It can even be great
    for helping yourself if you haven't looked at your own code in a few months.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那行以`//`开头的代码呢？那是JavaScript中编写注释的一种方式。`//`告诉JavaScript忽略该行上的所有内容，因为它是一条注释。在JavaScript中添加注释是帮助自己跟踪代码发生了什么的好方法。对于可能需要处理您的代码的其他开发人员来说，这也很有帮助。即使在几个月后再次查看自己的代码，这也是很有帮助的。
- en: 'Next, we''ll add what we want to happen as soon as the document is ready:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加我们想要在文档准备就绪时立即发生的事情：
- en: '[PRE22]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: What just happened?
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'Our function is using the jQuery function again:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函数再次使用了jQuery函数：
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remember how I said that jQuery uses CSS selectors to find stuff? This is how
    we use those CSS selectors. In this case, I want the`<body>` tag, so I''m going
    to pass`''body''` to the jQuery function. This returns the`<body>` tag wrapped
    in a jQuery object. Handily, the jQuery object has an `append()` method that lets
    me add something new to the page:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我说过jQuery使用CSS选择器来查找东西吗？这就是我们如何使用这些CSS选择器的方式。在这种情况下，我想要`<body>`标签，所以我将`'body'`传递给jQuery函数。这会返回包装在jQuery对象中的`<body>`标签。巧妙的是，jQuery对象有一个`append()`方法，让我可以向页面添加新内容：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'All I have to do now is pass the append method the thing I want to add to the
    page. In quotes, I''ll pass in a line of HTML that I''d like to add:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我所要做的就是将要添加到页面的内容传递给append方法。在引号中，我将传递一行HTML代码，我想要添加的内容：
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And that''s it! Now when I load my page in a browser, I''ll see my heading
    followed by two paragraphs — jQuery will add the second paragraph as soon as the
    document is loaded in the browser:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是全部！现在，当我在浏览器中加载我的页面时，我会看到我的标题，后面跟着两个段落 —— jQuery 会在文档加载到浏览器中时添加第二个段落：
- en: '![What just happened?](img/6709OS_01_003.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/6709OS_01_003.jpg)'
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the jQuery library and learned a few
    things about it. We covered a bit of JavaScript basics and then we learned how
    to set up our files and folders for the exercises in this book. Finally, we set
    up a simple HTML page that took advantage of jQuery to add some dynamic content.
    Now let's take a look at how we can make links more powerful with jQuery.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经介绍了 jQuery 库，并学习了一些关于它的知识。我们讲解了一些 JavaScript 基础知识，然后学习了如何为本书中的练习设置我们的文件和文件夹。最后，我们设置了一个简单的
    HTML 页面，利用 jQuery 添加了一些动态内容。现在让我们看看如何使用 jQuery 使链接更加强大。
