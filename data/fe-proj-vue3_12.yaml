- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: End-to-End Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端到端测试
- en: In this chapter, we will look at how to create an **End-to-End** (**E2E**) test
    suite for a Vue.js application with Cypress. In order to write robust tests, we’ll
    look at common pitfalls and best practices, such as intercepting HTTP requests
    and waiting for elements to appear without timeouts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用 Cypress 为 Vue.js 应用程序创建一个 **端到端**（**E2E**）测试套件。为了编写健壮的测试，我们将探讨常见的陷阱和最佳实践，例如拦截
    HTTP 请求和等待元素出现而不设置超时。
- en: As we proceed, you will gain an understanding of E2E testing and its use cases.
    You will see how Cypress can be configured to test a Vue.js application and also
    interact with and inspect a **User Interface** (**UI**) using it. Throughout the
    chapter, you will gain familiarity with the pitfalls of arbitrary timeouts and
    how to avoid them with Cypress’ waiting functionality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，你将了解端到端测试及其用例。你将看到如何配置 Cypress 来测试 Vue.js 应用程序，以及如何使用它来与用户界面（**UI**）交互和检查。在整个章节中，你将熟悉任意超时的陷阱以及如何使用
    Cypress 的等待功能来避免它们。
- en: Toward the end of the chapter, you will also learn when, why, and how to intercept
    HTTP requests with Cypress.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的结尾，你还将学习何时、为什么以及如何使用 Cypress 拦截 HTTP 请求。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding E2E testing and its use cases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解端到端测试及其用例
- en: Configuring Cypress for a Vue.js application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Vue.js 应用程序配置 Cypress
- en: Using Cypress to interact with and inspect a Vue.js UI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Cypress 与 Vue.js UI 交互和检查
- en: Triggering and waiting for UI updates with Cypress
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Cypress 触发和等待 UI 更新
- en: Intercepting HTTP requests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拦截 HTTP 请求
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are no technical requirements for this chapter beyond the `git` CLI,
    which you will have already used by now. You can find this chapter’s source here:
    [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求，除了 `git` 命令行界面，你现在已经使用过了。你可以在这里找到本章的源代码：[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12)
- en: Understanding E2E testing and its use cases
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解端到端测试及其用例
- en: 'Most developers will have seen a version of the testing pyramid shown in the
    following figure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者都见过以下图中显示的测试金字塔版本：
- en: '![Figure 12.1 – A diagram of the testing pyramid](img/Figure_12.01_B18645.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 – 测试金字塔的示意图](img/Figure_12.01_B18645.jpg)'
- en: Figure 12.1 – A diagram of the testing pyramid
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – 测试金字塔的示意图
- en: E2E tests fall under the UI testing category. The type of test we’ll be looking
    at in this chapter is automated E2E tests using Cypress.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试属于 UI 测试类别。本章我们将探讨的是使用 Cypress 自动化的端到端测试。
- en: E2E and UI tests provide a level of confidence higher than unit or integration
    tests. They’re testing the application as used by the end user. The end user doesn’t
    care why or where a bug is happening, just that there is a bug.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端和 UI 测试提供的信心水平高于单元测试或集成测试。它们测试的是最终用户使用的应用程序。最终用户不关心错误发生的原因或地点，只关心存在错误。
- en: The where and why of a bug tends to be the concern of unit and system-level
    tests. Unit and system-level tests check that the internals of a system work as
    the specification or code describes them. UI-level tests validate that application
    flows are working as expected.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的位置和原因通常是单元测试和系统级测试的担忧。单元测试和系统级测试检查系统的内部是否按规范或代码描述的方式工作。UI 级测试验证应用程序流程是否按预期工作。
- en: A strong E2E test suite that runs quickly, has few false negatives (where a
    test fails but the application works), and even fewer false positives (where all
    tests pass but the application is broken) enables **Continuous Deployment** (**CD**).
    CD, as its name suggests, involves deploying a project or application continuously.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个运行快速、假阴性（测试失败但应用程序工作）少、假阳性（所有测试通过但应用程序损坏）更少的强大端到端测试套件能够实现 **持续部署**（**CD**）。正如其名所示，持续部署涉及持续部署项目或应用程序。
- en: In this kind of setup, an application version is validated by the E2E suite
    and is then automatically deployed to production.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种设置中，应用程序版本由端到端测试套件验证，然后自动部署到生产环境。
- en: Configuring Cypress for a Vue.js application
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Vue.js 应用程序配置 Cypress
- en: Cypress is a JavaScript E2E testing framework. It’s designed to solve the very
    specific need of writing E2E tests using JavaScript. This is in contrast to other
    full-fledged browser automation solutions, such as WebdriverIO ([https://webdriver.io/](https://webdriver.io/)),
    Selenium WebDriver ([https://www.selenium.dev/](https://www.selenium.dev/)), Puppeteer
    ([https://developers.google.com/web/tools/puppeteer/](https://developers.google.com/web/tools/puppeteer/)),
    and Playwright ([https://github.com/microsoft/playwright](https://github.com/microsoft/playwright)),
    which are commonly used to write E2E tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress是一个JavaScript端到端测试框架。它旨在解决使用JavaScript编写端到端测试的特定需求。这与其他全功能的浏览器自动化解决方案形成对比，例如WebdriverIO
    ([https://webdriver.io/](https://webdriver.io/))、Selenium WebDriver ([https://www.selenium.dev/](https://www.selenium.dev/))、Puppeteer
    ([https://developers.google.com/web/tools/puppeteer/](https://developers.google.com/web/tools/puppeteer/))和Playwright
    ([https://github.com/microsoft/playwright](https://github.com/microsoft/playwright))，这些通常用于编写端到端测试。
- en: The big difference with Cypress compared to these other solutions is its singular
    focus on writing E2E tests (as opposed to generic browser automation). Tests can
    only be written using JavaScript (Selenium supports other languages), and require
    Chrome, Edge, or Firefox (WebKit support is in development).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他解决方案相比，Cypress最大的不同之处在于它专注于编写端到端测试（而不是通用的浏览器自动化）。测试只能使用JavaScript编写（Selenium支持其他语言），并且需要Chrome、Edge或Firefox（WebKit支持正在开发中）。
- en: Cypress has a **Graphical User Interface** (**GUI**) to run and debug tests
    locally and comes with built-in assertion and stubbing/mocking libraries.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress有一个**图形用户界面**（**GUI**）来本地运行和调试测试，并附带内置的断言和存根/模拟库。
- en: 'To add Cypress to a new Vue project, simply enable it when prompted:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Cypress添加到新的Vue项目中，只需在提示时启用它：
- en: '![Figure 12.2 – Enabling Cypress when creating a new Vue 3 project](img/Figure_12.02_B18645.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 在创建新的Vue 3项目时启用Cypress](img/Figure_12.02_B18645.jpg)'
- en: Figure 12.2 – Enabling Cypress when creating a new Vue 3 project
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 在创建新的Vue 3项目时启用Cypress
- en: To add Cypress to an existing project, use `npm install @``cypress/vue@next
    --dev`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Cypress添加到现有项目中，使用`npm install @cypress/vue@next --dev`。
- en: 'The plugin adds a `test:e2e` script that we can run using the following two
    commands. The first prepares a build of the Vue application. The second actually
    starts the Cypress app:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 插件添加了一个`test:e2e`脚本，我们可以使用以下两个命令运行它。第一个准备Vue应用程序的构建。第二个实际上启动了Cypress应用程序：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will be asked to use a browser for testing first, as shown in *Figure 12**.3*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先被要求使用浏览器进行测试，如图*图12.3*所示：
- en: '![Figure 12.3 – Cypress asking for the preferred browser to use for testing](img/Figure_12.03_B18645.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – Cypress询问用于测试的首选浏览器](img/Figure_12.03_B18645.jpg)'
- en: Figure 12.3 – Cypress asking for the preferred browser to use for testing
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – Cypress询问用于测试的首选浏览器
- en: 'After selecting a browser, the main Cypress UI is displayed:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 选择浏览器后，主Cypress UI将显示：
- en: '![Figure 12.4 – Cypress testing UI](img/Figure_12.04_B18645.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – Cypress测试UI](img/Figure_12.04_B18645.jpg)'
- en: Figure 12.4 – Cypress testing UI
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – Cypress测试UI
- en: 'If you click on the example link, you’ll see the test running and the output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击示例链接，你会看到测试正在运行和输出：
- en: '![Figure 12.5 – Cypress running a test](img/Figure_12.05_B18645.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – Cypress运行测试](img/Figure_12.05_B18645.jpg)'
- en: Figure 12.5 – Cypress running a test
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – Cypress运行测试
- en: 'Cypress creates a default test for us at `cypress/e2e/example.cy.js`. The test
    navigates to the root of the Vue application and looks for an `h1` tag that contains
    `You` `did it!`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress为我们创建了一个默认测试，位于`cypress/e2e/example.cy.js`。该测试导航到Vue应用程序的根目录，并查找包含`You`
    `did it!`的`h1`标签：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will work in a default Vue 3 project.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在默认的Vue 3项目中工作。
- en: 'We can try visiting `google.com` using `cy.visit(url)` and check that the `input`
    element that’s synonymous with the Google home page is there by selecting the
    input elements on the page with `cy.get(''input'')` first and then using the `.``should(''exist'')`
    assertion:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试使用`cy.visit(url)`访问`google.com`，并通过使用`cy.get('input')`选择页面上的输入元素，然后使用`.should('exist')`断言来检查与Google首页同义的`input`元素是否存在：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The Cypress window will automatically load and run the new test:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress窗口将自动加载并运行新的测试：
- en: '![Figure 12.6 – Cypress tests running in Chrome while visiting the Google home
    page](img/Figure_12.06_B18645.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – Cypress在Chrome中运行测试的同时访问Google首页](img/Figure_12.06_B18645.jpg)'
- en: Figure 12.6 – Cypress tests running in Chrome while visiting the Google home
    page
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – Cypress在Chrome中运行测试的同时访问Google首页
- en: We’ve now seen how to install and use Cypress to visit web pages. In the next
    section, we’ll see how Cypress can be used to interact with and inspect a UI.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了如何安装和使用 Cypress 访问网页。在下一节中，我们将看到如何使用 Cypress 与 UI 交互和检查。
- en: Using Cypress to interact with and inspect a Vue.js UI
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Cypress 与 Vue.js UI 交互和检查
- en: 'In order to E2E test a new application, Commentator Pro, we should start by
    adding something to test. In this case, we’ll have a heading (`h2`) with the name
    of the application. In the `App.vue` file, we’ll have the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了端到端测试新的应用程序 Commentator Pro，我们应该先添加一些要测试的内容。在这种情况下，我们将有一个带有应用程序名称的标题 (`h2`)。在
    `App.vue` 文件中，我们将有如下代码：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to test this with Cypress, we can change the `cypress/e2e/example.cy.js`
    file with the following code. We’ll go to the running application using `cy.visit(''/'')`
    and then check that the `h2` on the page contains `Commentator Pro` using `cy.contains(''h2'',
    ''Commentator Pro'')`. The `cy.contains` function is overloaded and can be used
    with one parameter (the text to match against) or two parameters (the selector
    for the container and the text to match against):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Cypress 进行测试，我们可以将 `cypress/e2e/example.cy.js` 文件更改为以下代码。我们将使用 `cy.visit('/')`
    访问运行中的应用程序，然后检查页面上的 `h2` 是否包含 `Commentator Pro` 使用 `cy.contains('h2', 'Commentator
    Pro')`。`cy.contains` 函数是重载的，可以用一个参数（要匹配的文本）或两个参数（容器的选择器和要匹配的文本）使用：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can then run `example.cy.js` using the Cypress UI, as shown in the following
    screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 Cypress UI 运行 `example.cy.js`，如下截图所示：
- en: '![Figure 12.7 – A heading content test running successfully in Chrome](img/Figure_12.07_B18645.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 在 Chrome 中成功运行的标题内容测试](img/Figure_12.07_B18645.jpg)'
- en: Figure 12.7 – A heading content test running successfully in Chrome
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 在 Chrome 中成功运行的标题内容测试
- en: Now that we’ve seen how to visit a page and assert its content, we’ll see how
    we can use Cypress to automate tests for a new feature in a Vue.js application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何访问页面并断言其内容，我们将看到如何使用 Cypress 自动化 Vue.js 应用程序中一个新功能的测试。
- en: Exercise 12.01 – adding a New Comment button and a corresponding E2E test
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.01 – 添加一个“新增评论”按钮及其相应的端到端测试
- en: In order for the Commentator Pro application to be useful, we should have an
    **Add a New Comment** button to allow users to add comments.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Commentator Pro 应用程序变得有用，我们应该有一个“新增评论”按钮，允许用户添加评论。
- en: We will add a blue jumbo button with **Add a New Comment** as text and write
    the corresponding E2E test with Cypress.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个带有“新增评论”文本的蓝色巨型按钮，并使用 Cypress 编写相应的端到端测试。
- en: The complete code can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.01)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以在 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.01)
    找到
- en: 'To do this, perform the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: 'To add a button in the app, we’ll add a `button` element with some text in
    `src/App.vue`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在应用程序中添加按钮，我们将在 `src/App.vue` 中添加一个带有一些文本的 `button` 元素：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output should show as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 12.8 – The Commentator Pro application with the Add a New Comment
    button](img/Figure_12.08_B18645.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – 带有“新增评论”按钮的 Commentator Pro 应用程序](img/Figure_12.08_B18645.jpg)'
- en: Figure 12.8 – The Commentator Pro application with the Add a New Comment button
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – 带有“新增评论”按钮的 Commentator Pro 应用程序
- en: 'Next, we’ll create a new E2E test at `cypress/e2e/add-new-comment.cy.js`. We’ll
    set the name of the suite and description of the test to `Adding a New Comment`,
    and the home page should have a button with the right text:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `cypress/e2e/add-new-comment.cy.js` 创建一个新的端到端测试。我们将设置测试套件的名称和测试的描述为
    `Adding a New Comment`，主页应该有一个带有正确文本的按钮：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In order to test the home page, we’ll have to navigate to it using `cy.visit(''/'')`:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试主页，我们需要使用 `cy.visit('/')` 导航到它：
- en: '[PRE17]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we can write the assertion that a `button` instance containing the
    `Add a New Comment` text is on the page:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以编写断言，即页面上有一个包含“新增评论”文本的 `button` 实例：
- en: '[PRE23]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We can run this test using the Cypress UI first by running a new build (`npm
    run build`), and then `npm run test:e2e`. If you already had Cypress running,
    you do not need to restart it. You can visit the list of tests by clicking on
    the **Specs** navigation item in the left-hand menu.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过首先运行一个新的构建（`npm run build`），然后运行 `npm run test:e2e` 来使用 Cypress UI 运行此测试。如果你已经运行了
    Cypress，你不需要重新启动它。你可以通过点击左侧菜单中的 **Specs** 导航项来访问测试列表。
- en: '![Figure 12.9 – The add-new-comment.cy.js test displaying in the Cypress UI](img/Figure_12.09_B18645.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – 在Cypress UI中显示的add-new-comment.cy.js测试](img/Figure_12.09_B18645.jpg)'
- en: Figure 12.9 – The add-new-comment.cy.js test displaying in the Cypress UI
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – 在Cypress UI中显示的add-new-comment.cy.js测试
- en: 'When we run the test (by clicking on it), we’ll get the following output in
    Chrome. The test passes since there is a button with the relevant text on the
    home page:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们运行测试（通过点击它）时，我们将在Chrome中得到以下输出。测试通过，因为主页上有一个相关文本的按钮：
- en: '![Figure 12.10 – Cypress running our add-new-comment test in Chrome](img/Figure_12.10_B18645.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10 – Cypress在Chrome中运行我们的添加新评论测试](img/Figure_12.10_B18645.jpg)'
- en: Figure 12.10 – Cypress running our add-new-comment test in Chrome
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – Cypress在Chrome中运行我们的添加新评论测试
- en: We’ve now seen how to visit pages and assert against their content.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何访问页面并对其内容进行断言。
- en: In the next section, we will look at using Cypress to test interactive behavior.
    Cypress has automatic selector retries, which makes it a great fit for testing
    highly interactive Vue.js applications. We’ll see how to use Cypress to interact
    with the UI and assert the effect of our interactions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用Cypress测试交互行为。Cypress具有自动选择器重试功能，这使得它非常适合测试高度交互的Vue.js应用程序。我们将看到如何使用Cypress与UI交互并断言我们交互的效果。
- en: Triggering and waiting for UI updates with Cypress
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cypress触发和等待UI更新
- en: The tests we’ve written up until now are quite simple and only check that the
    application isn’t crashing on load in the browser.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止编写的测试相当简单，仅检查应用程序在浏览器加载时不会崩溃。
- en: One of the strengths of E2E tests is testing that the UI behaves as expected
    when a user interacts with it with high fidelity. We’ll use Cypress’ selection
    (the `.get()` function), event triggering (the `.click()` function), and assertion
    (the `.should()` function) functionality to test a Vue.js application in this
    section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: E2E测试的一个优点是，可以以高保真度测试用户与UI交互时UI的行为是否符合预期。在本节中，我们将使用Cypress的选择（`.get()`函数）、事件触发（`.click()`函数）和断言（`.should()`函数）功能来测试Vue.js应用程序。
- en: Cypress’ automatic retries on DOM selection will allow us to write E2E tests
    without explicit wait or timeout conditions. Waits and timeouts are a staple of
    other E2E testing systems and tend to be a source of flakiness in tests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在DOM选择上的自动重试将允许我们编写E2E测试，而无需显式的等待或超时条件。等待和超时是其他E2E测试系统的基本要素，并且往往是测试不稳定的原因。
- en: To begin with, we will add a comment editor to our Commentator Pro application.
    Displaying the editor (a simple `textarea`) will be toggled by clicking on the
    **Add a New** **Comment** button.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向我们的Commentator Pro应用程序添加一个评论编辑器。通过点击**添加新评论**按钮来切换显示编辑器（一个简单的`textarea`）。
- en: 'In order to keep writing tests without wrangling complicated and brittle selectors,
    we’ll start adding `data-test-id` attributes; to begin with, we can add one to
    the `App.vue` file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在不处理复杂且脆弱的选择器的情况下继续编写测试，我们将开始添加`data-test-id`属性；首先，我们可以在`App.vue`文件中添加一个：
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we’ll add a `showEditor` property to the Vue.js `data()` method on the
    `App` component. We’ll use this expression in `v-if` for the editor. We can also
    set the **Add a New Comment** button to toggle this instance property:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`App`组件的Vue.js `data()`方法中添加一个`showEditor`属性。我们将使用这个表达式在`v-if`中为编辑器设置。我们还可以设置**添加新评论**按钮来切换这个实例属性：
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can add our editor with `new-comment-editor` `data-test-id` that is toggled
    by `showEditor`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`new-comment-editor` `data-test-id`来添加我们的编辑器，该`data-test-id`可以通过`showEditor`来切换：
- en: '[PRE32]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In order to test the toggling, we can add a test that opens that app and checks
    that the comment editor is not initially shown, as well as checking whether or
    not it is displayed depending on how many clicks are triggered on `new-comment-button`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试切换功能，我们可以添加一个测试，打开该应用程序并检查评论编辑器最初不会显示，以及根据在`new-comment-button`上触发的点击次数来检查是否显示：
- en: '[PRE33]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The preceding code will generate the following result in Cypress:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将在Cypress中生成以下结果：
- en: '![Figure 12.11 – Cypress running add-new-comment tests, including the new editor-toggling
    test](img/Figure_12.11_B18645.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图12.11 – Cypress运行添加新评论测试，包括新的编辑器切换测试](img/Figure_12.11_B18645.jpg)'
- en: Figure 12.11 – Cypress running add-new-comment tests, including the new editor-toggling
    test
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – Cypress运行添加新评论测试，包括新的编辑器切换测试
- en: We’ve now seen how to write Cypress tests that select and assert over DOM elements.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何编写Cypress测试来选择和断言DOM元素。
- en: Note
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`data-test-id` instances, as a convention, are a way to decouple tests from
    application-specific and styling-specific selectors. This is especially useful
    if the people writing the tests aren’t always the ones writing the code. In that
    situation, using `data-test-id` allows the markup structure and classes to change,
    but the tests will keep passing as long as the `test-id` instances remain on the
    correct element.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`data-test-id` 实例，按照惯例，是一种将测试与特定于应用程序和样式的选择器解耦的方法。这在编写测试的人不总是编写代码的人时特别有用。在这种情况下，使用
    `data-test-id` 允许标记结构和类发生变化，但只要 `test-id` 实例保持在正确的元素上，测试就会继续通过。'
- en: Exercise 12.02 – adding new comment editor input and a Submit functionality
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.02 – 添加新的评论编辑器输入和提交功能
- en: To be able to send the new comment text to an API, we will need to store the
    text in a Vue.js state. The other prerequisite to adding a comment is to have
    a dummy **Submit** button.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够将新的评论文本发送到 API，我们需要在 Vue.js 状态中存储文本。添加评论的另一个先决条件是拥有一个虚拟的 **提交** 按钮。
- en: The complete code can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.02)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以在 [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.02](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.02)
    找到。
- en: 'To accomplish this, perform the following steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这项任务，请执行以下步骤：
- en: 'To store the `textarea` (editor) content in memory, we’ll use `v-model`. We’ll
    create a new data (state) variable, `newComment`, that gets initialized to `""`.
    Now, `v-model` will two-way bind the `textarea` content and `newComment`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将 `textarea`（编辑器）内容存储在内存中，我们将使用 `v-model`。我们将创建一个新的数据（状态）变量 `newComment`，它被初始化为
    `""`。现在，`v-model` 将双向绑定 `textarea` 内容和 `newComment`：
- en: '[PRE34]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We’ll add a `submit` button inside the editor, which should only appear when
    the editor is toggled on. We also make sure to include a `data-test-id="new-comment-submit"`
    attribute in order to be able to select it with Cypress later:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在编辑器内添加一个 `submit` 按钮，它仅在编辑器开启时才出现。我们还确保包含一个 `data-test-id="new-comment-submit"`
    属性，以便稍后可以用 Cypress 选择它：
- en: '[PRE52]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: It’s now time to add an E2E test to test that `new-comment-editor` works as
    expected when we type text into it. In order to achieve this, we need to load
    up the application and click on the `new-comment` button so that the editor displays.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候添加一个端到端测试来测试当我们向其中输入文本时 `new-comment-editor` 是否按预期工作。为了实现这一点，我们需要加载应用程序并点击
    `new-comment` 按钮，以便编辑器显示。
- en: 'We can then select `new-comment-editor` (by `data-test-id`) and use the Cypress
    `.type` function to add some text. We can chain `.should(''have.value'', ''Just
    saying...'')` to validate that our interaction with `textarea` was successful.
    Remember to run `npm run build` when adding new tests:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以选择 `new-comment-editor`（通过 `data-test-id`），并使用 Cypress 的 `.type` 函数添加一些文本。我们可以将
    `.should('have.value', 'Just saying...')` 连接到一起以验证我们对 `textarea` 的交互是否成功。记得在添加新测试时运行
    `npm run build`：
- en: '[PRE65]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'When run using the Cypress UI, this `add-new-comment` test suite should yield
    the following result:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Cypress UI 运行时，这个 `add-new-comment` 测试套件应该产生以下结果：
- en: '![Figure 12.12 – Cypress running add-new-comment tests, including the new editor
    text input test](img/Figure_12.12_B18645.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.12 – Cypress 运行 add-new-comment 测试，包括新的编辑器文本输入测试](img/Figure_12.12_B18645.jpg)'
- en: Figure 12.12 – Cypress running add-new-comment tests, including the new editor
    text input test
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – Cypress 运行 add-new-comment 测试，包括新的编辑器文本输入测试
- en: 'Finally, we can add an E2E test to check that the `submit` button does not
    appear by default but does appear when we click on the `new-comment` button. We
    can also check the text content of the `new-comment-submit` button:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以添加一个端到端测试来检查 `submit` 按钮默认情况下不会出现，但当我们点击 `new-comment` 按钮时会出现。我们还可以检查
    `new-comment-submit` 按钮的文本内容：
- en: '[PRE66]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'When this test is run through the Cypress UI, we see the following result:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个测试通过 Cypress UI 运行时，我们看到以下结果：
- en: '![Figure 12.13 – Cypress running add-new-comment tests, including the new submit
    button test](img/Figure_12.13_B18645.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.13 – Cypress 运行 add-new-comment 测试，包括新的提交按钮测试](img/Figure_12.13_B18645.jpg)'
- en: Figure 12.13 – Cypress running add-new-comment tests, including the new submit
    button test
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – Cypress 运行 add-new-comment 测试，包括新的提交按钮测试
- en: 'One more feature we can add is to disable the `submit` button until there’s
    text in the text editor. To do this, we can bind `:disabled` to `!newComment`
    on the `new-comment-submit` button. As an aside, one of the major reasons we added
    a two-way binding between `newComment` and `textarea` is to enable UI validations
    such as this one:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以添加的一个功能是在文本编辑器中有文本之前禁用`submit`按钮。为此，我们可以在`new-comment-submit`按钮上绑定`:disabled`到`!newComment`。顺便说一句，我们添加`newComment`和`textarea`之间的双向绑定的主要原因之一是启用此类UI验证：
- en: '[PRE82]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The relevant test will look at whether or not the `new-comment-submit` button
    is disabled when the text editor content is empty using Cypress’ `should(''be.disabled'')`
    and `should(''not.be.disabled'')` assertions:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相关的测试将检查`new-comment-submit`按钮是否在文本编辑器内容为空时被禁用，使用Cypress的`should('be.disabled')`和`should('not.be.disabled')`断言：
- en: '[PRE86]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'This yields the following output when run through Cypress UI and Chrome automation:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过Cypress UI和Chrome自动化运行时，这会产生以下输出：
- en: '![Figure 12.14 – Cypress running add-new-comment tests, including the new-comment-submit
    button disabled test](img/Figure_12.14_B18645.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14 – Cypress运行添加新评论测试，包括新评论提交按钮禁用测试](img/Figure_12.14_B18645.jpg)'
- en: Figure 12.14 – Cypress running add-new-comment tests, including the new-comment-submit
    button disabled test
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14 – Cypress运行添加新评论测试，包括新评论提交按钮禁用测试
- en: We’ve now seen how to use Cypress to select, click, and input text. We’ve also
    seen approaches to check element visibility, text content, input values, and disabled
    states.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了如何使用Cypress来选择、点击和输入文本。我们还看到了检查元素可见性、文本内容、输入值和禁用状态的方法。
- en: Anyone familiar with other automation frameworks will have noticed that in Cypress
    tests, there are no explicit waits or retries. This is because Cypress waits and
    retries assertions and selections automatically. Most of the tests we’ve written
    don’t showcase this in a major way, but the next exercise, where we bring asynchronicity
    into the mix, will.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 任何熟悉其他自动化框架的人都会注意到，在Cypress测试中，没有显式的等待或重试。这是因为Cypress会自动等待和重试断言和选择。我们编写的大多数测试都没有以这种方式展示这一点，但下一个练习，我们将引入异步性，将会展示这一点。
- en: Exercise 12.03 – adding a submitting state to the new comment editor
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习12.03 – 向新评论编辑器添加提交状态
- en: In order to showcase Cypress’s impressive, automatic retry/wait capability,
    we will look at adding and testing a `submitting` state for the new comment editor.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示Cypress强大的自动重试/等待功能，我们将探讨为新的评论编辑器添加并测试一个`submitting`状态。
- en: In effect, we’ll be reacting to a click on the `2.5` seconds to simulate a reasonably
    slow HTTP request to a backend API. The loading state is simply a CSS class that
    makes the button have italic text.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们将对点击进行反应，持续2.5秒来模拟一个合理的慢速HTTP请求到后端API。加载状态只是一个CSS类，它使按钮具有斜体文本。
- en: This test will be an example that showcases Cypress’ ability to automatically
    wait and retry selections. This feature reduces the need for arbitrary waits and
    the flakiness associated with them.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试将是一个展示Cypress自动等待和重试选择能力的示例。这个功能减少了任意等待及其相关的不稳定性。
- en: The complete code can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.03)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.03](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.03)找到。
- en: 'Let’s do this by following these steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤进行：
- en: 'In order to show a loading state, we add a new class to the component:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了显示加载状态，我们在组件中添加一个新的类：
- en: '[PRE104]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Next, we need to add an `isSubmitting` state to the Vue.js application in `data()`,
    which will allow us to toggle the state for the `submit` button. We will initialize
    it to `false` since we are not submitting anything until the user clicks on the
    **Submit** button:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在Vue.js应用中的`data()`中添加一个`isSubmitting`状态，这将允许我们切换`submit`按钮的状态。我们将它初始化为`false`，因为我们还没有提交任何内容，直到用户点击**提交**按钮：
- en: '[PRE109]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Next, we will add a click handler for the `submit` button (as `methods.submitNewComment`).
    It will simulate a 2.5-second load time using `setTimeout`:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为`submit`按钮添加一个点击处理程序（作为`methods.submitNewComment`）。它将使用`setTimeout`模拟2.5秒的加载时间：
- en: '[PRE119]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Now that we’ve got a fake `submit` handler, we should bind it to click events
    on the `new-comment-submit` button:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有一个假的`submit`处理函数，我们应该将其绑定到`new-comment-submit`按钮的点击事件上：
- en: '[PRE133]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Now comes the part where we need to react to the `submit` button. The `submitting`
    class will show when `isSubmitting` is `true`. To do this, we simply need to set
    the `submitting` class to be added when `isSubmitting` is `true`. In addition
    to this, we’ll disable the button when `isSubmitting` is `true`:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是我们要对`submit`按钮做出反应的部分。当`isSubmitting`为`true`时，将显示`submitting`类。为此，我们只需将`submitting`类设置为在`isSubmitting`为`true`时添加。除此之外，当`isSubmitting`为`true`时，我们还将禁用按钮：
- en: '[PRE143]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Finally, we can add a test to check that the button applies the `submitting`
    class when the `submit` button is clicked. To begin with, we’ll need to set up
    the text editor so that when clicking on the `add-new-comment` button and setting
    a text value for the comment, the text editor is shown and enabled.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以添加一个测试来检查当点击`submit`按钮时，按钮是否应用了`submitting`类。首先，我们需要设置文本编辑器，以便在点击`add-new-comment`按钮并设置评论的文本值时，文本编辑器显示并启用。
- en: 'Next, we can click on the enabled `new-comment-submit` button and check that
    it is disabled and has the `submitting` class (using the `should()` function).
    After that, we should write another assertion that the button does not show the
    `submitting` class:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以点击启用的`new-comment-submit`按钮，并检查它是否被禁用并且具有`submitting`类（使用`should()`函数）。之后，我们应该编写另一个断言，按钮不显示`submitting`类：
- en: '[PRE149]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Despite the `2.5` seconds during which the `submitting` class is shown, this
    test still passes due to Cypress’ automatic retry/wait functionality:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在显示`submitting`类时持续了`2.5`秒，但由于Cypress的自动重试/等待功能，这个测试仍然通过：
- en: '![Figure 12.15 – Cypress running add-new-comment tests, including the comment
    submission loading state test](img/Figure_12.15_B18645.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图12.15 – Cypress运行添加新评论测试，包括评论提交加载状态测试](img/Figure_12.15_B18645.jpg)'
- en: Figure 12.15 – Cypress running add-new-comment tests, including the comment
    submission loading state test
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.15 – Cypress运行添加新评论测试，包括评论提交加载状态测试
- en: We’ve now seen how Cypress allows us to seamlessly work around asynchronicity
    in the application by automatically waiting/retrying where an assertion or selection
    would fail.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了Cypress如何通过自动等待/重试来无缝地处理应用程序中的异步性，当断言或选择失败时。
- en: Intercepting HTTP requests
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 截获HTTP请求
- en: As mentioned in previous sections, Cypress is designed as a JavaScript E2E testing
    solution. This means that it comes with built-ins such as assertions, automatic
    wait/retries, sane defaults for running the application, and extensive mocking
    functionality.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，Cypress被设计为JavaScript端到端（E2E）测试解决方案。这意味着它自带断言、自动等待/重试、运行应用程序的合理默认值以及广泛的模拟功能。
- en: HTTP requests can be slow and tend to introduce flaky behavior into tests. What’s
    meant by flaky is intermittent false negatives – that is, failures that are not
    caused by an application issue but rather by connectivity issues (for example,
    between the server running the tests and the backend hosts).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求可能会很慢，并且倾向于在测试中引入不稳定的（flaky）行为。所谓的flaky是指间歇性的假阴性——也就是说，失败不是由应用程序问题引起的，而是由连接问题（例如，测试运行的服务器和后端主机之间的连接）引起的。
- en: We would also be testing the implementation of the backend system. When using
    **Continuous Integration** (**CI**), this would mean having to run the backend
    systems in whichever CI pipeline step needs to run E2E tests.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会测试后端系统的实现。当使用**持续集成（CI**）时，这意味着需要在需要运行端到端测试的任何CI管道步骤中运行后端系统。
- en: Usually, when the backend requests are intercepted and a mock response is sent,
    we also say that the HTTP requests are *stubbed* in order to avoid tests flaking
    (meaning intermittent failures not linked to application changes).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当拦截后端请求并发送模拟响应时，我们也会说HTTP请求被*stubbed*，以避免测试不稳定（意味着间歇性失败与应用程序更改无关）。
- en: Seeing that the requests do not go all the way through the stack (including
    the backend API), this is technically not a full E2E test of the system anymore.
    We can, however, consider it an E2E test of the frontend application since the
    whole application is made up of separate exercises and is not implementation-specific.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 由于请求并没有完全通过整个堆栈（包括后端API），因此这从技术上讲不再是系统的完整端到端（E2E）测试。然而，我们可以将其视为前端应用的端到端测试，因为整个应用由独立的练习组成，并且不是特定于实现的。
- en: In order to mock requests in Cypress, we’ll need to use `cy.intercept()`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Cypress中模拟请求，我们需要使用`cy.intercept()`。
- en: 'To showcase HTTP interception, we’ll fetch a list of comments from `JSONPlaceholder`
    and store them under a `comments` reactive instance variable. We can use `fetch`
    to do this in the `mounted()` life cycle event as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示HTTP拦截，我们将从`JSONPlaceholder`获取评论列表，并将它们存储在`comments`响应式实例变量下。我们可以在`mounted()`生命周期事件中使用`fetch`来完成此操作，如下所示：
- en: '[PRE150]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: A sample comment includes an ID, a body, and an email, among other properties.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例评论包括ID、正文和电子邮件等属性。
- en: That means we can render the comments by creating a `div` container, which only
    shows if there are comments (`comments.length > 0)`. Inside the `div` container,
    we can render a list of `div` elements using `v-for`. Each card will render the
    body of the comment and the author’s email inside a `mailto:` link.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以通过创建一个`div`容器来渲染评论，该容器仅在存在评论时显示（`comments.length > 0`）。在`div`容器内部，我们可以使用`v-for`渲染一个`div`元素的列表。每张卡片将渲染评论的正文和作者的电子邮件，并在`mailto:`链接内。
- en: 'Note how we set `comments-list` and `comment-card` `data-test-ids` for the
    list container and the list items respectively:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们是如何为列表容器和列表项分别设置`comments-list`和`comment-card`的`data-test-ids`：
- en: '[PRE151]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'If we were to test this without HTTP interception, we would have to keep the
    assertions quite generic. For example, we can check that `comments-list` is visible
    and that there is a number (greater than `0`) of `comment-card` instances in a
    new E2E test file:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不使用HTTP拦截来测试，我们必须保持断言相当通用。例如，我们可以在新的端到端测试文件中检查`comments-list`是否可见，以及是否有数量（大于`0`）的`comment-card`实例：
- en: '[PRE152]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'The following test run using the Cypress GUI passes but the tests are quite
    generic. We can’t make any assertions about the specific number of comments or
    their content:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Cypress GUI运行的以下测试运行通过，但测试相当通用。我们无法对特定评论的数量或内容做出任何断言：
- en: '![Figure 12.16 – Cypress running load-comments tests, including a generic load
    and display test](img/Figure_12.16_B18645.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![图12.16 – Cypress运行加载评论测试，包括通用加载和显示测试](img/Figure_12.16_B18645.jpg)'
- en: Figure 12.16 – Cypress running load-comments tests, including a generic load
    and display test
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.16 – Cypress运行加载评论测试，包括通用加载和显示测试
- en: 'To intercept the request, we use `cy.intercept`. It lets us define a route
    and a static response – in our case, an array of comments. We’ll use a fictitious
    email address in our stubs:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 为了拦截请求，我们使用`cy.intercept`。它允许我们定义一个路由和一个静态响应 – 在我们的情况下，是一个评论数组。在我们的模拟中，我们将使用一个虚构的电子邮件地址：
- en: '[PRE153]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Once we’ve got our stub route set up, we can visit the page and wait for the
    comment fetching to finish using `cy.wait(''@getComments'')`, since we’ve previously
    set the alias of the comments’ `fetch` route to `getComments` with `.as(''getComments'')`:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了模拟路由，我们就可以访问页面，并使用`cy.wait('@getComments')`等待评论获取完成，因为我们之前已经使用`.as('getComments')`将评论的`fetch`路由的别名设置为`getComments`：
- en: '[PRE154]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'We can then start asserting, first off, that `comments-list` is visible, and
    then assert the number of `comment-card` elements:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以开始断言，首先断言`comments-list`是可见的，然后断言`comment-card`元素的数量：
- en: '[PRE155]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'We can also assert the specific contents of the cards using the `.``contains()`
    function:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`.contains()`函数断言卡片的特定内容：
- en: '[PRE156]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'We can then run the suite with the Cypress GUI and see it passing:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用Cypress GUI运行测试套件，并查看它是否通过：
- en: '![Figure 12.17 – Cypress running load-comments tests, including our stubbed
    comments test](img/Figure_12.17_B18645.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图12.17 – Cypress运行加载评论测试，包括我们的模拟评论测试](img/Figure_12.17_B18645.jpg)'
- en: Figure 12.17 – Cypress running load-comments tests, including our stubbed comments
    test
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17 – Cypress运行加载评论测试，包括我们的模拟评论测试
- en: We’ve now seen how and why we might stub HTTP requests using Cypress.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了如何以及为什么我们可能会使用Cypress来模拟HTTP请求。
- en: Exercise 12.04 – POST comment to the API on submission
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习12.04 – 在提交时将评论POST到API
- en: The `new-comment-submit` button currently only sets a loading state for a few
    seconds and then resets – the comment is not actually being sent anywhere.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`new-comment-submit`按钮目前仅设置加载状态几秒钟后重置 – 实际上并没有将评论发送到任何地方。'
- en: Let’s use the `JSONPlaceholder` API as the place to send our new comment. When
    the `POST` request to the API succeeds, we’ll add the comment to the top of the
    comment list.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`JSONPlaceholder` API作为发送我们新评论的地方。当对API的`POST`请求成功时，我们将评论添加到评论列表的顶部。
- en: The complete code can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.04)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.04](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Exercise12.04)找到。
- en: 'To complete the exercise, we will perform the following steps:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成练习，我们将执行以下步骤：
- en: 'Start by making the `submitNewComment` method actually post data using `fetch`.
    New comments require an email address, which our application doesn’t have, but
    we can set a fake email in our data as well:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让`submitNewComment`方法使用`fetch`实际发送数据。新评论需要一个电子邮件地址，而我们的应用程序没有，但我们可以设置一个假电子邮件地址在我们的数据中：
- en: '[PRE157]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Unfortunately, the `fetch()` call doesn’t update the data by itself or come
    out of the loading state. In order to do so, we need to chain some `.then()` function
    calls to handle the response, and a `.catch` function call in case we have an
    error.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`fetch()`调用本身不会更新数据或退出加载状态。为了做到这一点，我们需要链式调用一些`.then()`函数来处理响应，以及一个`.catch`函数来处理可能出现的错误。
- en: 'On success (`.then`), we should get the JSON output of the request and add
    it to the front of a copy of the `comments` array. We should also reset `isSubmitting`,
    `newComment`, and `showEditor`. On error (`.catch`), we will just reset the loading
    state, `isSubmitting`, to `false`; we won’t clear the editor or close it since
    the user might want to try to submit it again:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 成功（`.then`）时，我们应该获取请求的JSON输出并将其添加到`comments`数组副本的前面。我们还应该重置`isSubmitting`、`newComment`和`showEditor`。错误（`.catch`）时，我们只需将加载状态`isSubmitting`重置为`false`；我们不会清除编辑器或关闭它，因为用户可能想要再次尝试提交：
- en: '[PRE182]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: We should now add new tests to the `cypress/e22/add-new-comment.js` test suite.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该向`cypress/e22/add-new-comment.js`测试套件添加新的测试。
- en: 'First of all, to be good users of the JSON placeholder, we’ll stub out all
    the `GET` requests to `/comments` for the `add-new-comment` suite. In order to
    do this, we’ll use a `beforeEach` hook that will intercept requests matching the
    `**/comments` glob and return an empty array:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为了成为好的JSON placeholder用户，我们将为`add-new-comment`套件中的所有`GET`请求到`/comments`进行存根处理。为了做到这一点，我们将使用一个`beforeEach`钩子来拦截匹配`**/comments`通配符的请求，并返回一个空数组：
- en: '[PRE183]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: We can then proceed to update the `the new comment editor should show a submitting
    class on submit` test since we’re not using `setTimeout` anymore but an HTTP request.
    To start with, we need to stub out the `/comments` `POST` request, for which we’ll
    use the configuration object syntax for `cy.intercept` in order to introduce a
    delay into the HTTP request so that it doesn’t respond immediately.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以继续更新`the new comment editor should show a submitting class on submit`测试，因为我们不再使用`setTimeout`，而是使用HTTP请求。首先，我们需要对`/comments`
    `POST`请求进行存根处理，我们将使用`cy.intercept`的配置对象语法来引入HTTP请求的延迟，以便它不会立即响应。
- en: 'We alias this request with `.as(''newComment'')`:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`.as('newComment')`来别称这个请求：
- en: '[PRE188]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Instead of `// eventually, the submitting class should be removed`, we can
    now use `cy.wait()` to wait for the `newComment` HTTP request to complete before
    checking that the spinner is gone:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 而不是`// 最终，应该移除提交类`，我们现在可以使用`cy.wait()`等待`newComment` HTTP请求完成，然后再检查旋转器是否消失：
- en: '[PRE189]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Upon successfully posting a new comment, the comment text is cleared. We should
    test that this happens when a comment is posted. We’ll use a similar skeleton
    to the updated loading state test, with the setup of the `POST` comments route
    stubbing `cy.intercept('POST', '**/comments', {}`, aliased as .`as('newComment')`.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功发布一条新评论后，评论文本会被清除。我们应该测试在发布评论时是否会发生这种情况。我们将使用与更新后的加载状态测试类似的骨架，设置`POST`评论路由的`cy.intercept('POST',
    '**/comments', {})`，别名为`.as('newComment')`。
- en: 'We can then get the new comment editor to display, add some text, and submit
    the form. We’ll then proceed to wait for the `POST` request to complete before
    checking that the comment has been cleared:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以显示新的评论编辑器，添加一些文本，并提交表单。然后，我们将等待`POST`请求完成，然后再检查评论是否已被清除：
- en: '[PRE200]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'This test can now be run with the Cypress GUI and will pass:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试现在可以用Cypress GUI运行，并且会通过：
- en: '![Figure 12.18 – Cypress running add-new-comment tests, including the editor
    comment text being cleared](img/Figure_12.18_B18645.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![图12.18 – Cypress运行添加新评论测试，包括清除编辑器评论文本](img/Figure_12.18_B18645.jpg)'
- en: Figure 12.18 – Cypress running add-new-comment tests, including the editor comment
    text being cleared
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.18 – Cypress运行添加新评论测试，包括清除编辑器评论文本
- en: 'The second bit of functionality that we’ve added is that on completion of the
    HTTP request, the new comment is added to the top of the comments list. To test
    this, it’s better to change the response of the comments’ `GET` request to have
    at least one element (so that we can check that the new comment is added to the
    top of the list):'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加的第二项功能是在HTTP请求完成后，将新评论添加到评论列表的顶部。为了测试这一点，最好将评论的`GET`请求的响应更改至少包含一个元素（这样我们就可以检查新评论是否添加到列表的顶部）：
- en: '[PRE201]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'We can then stub the `POST` request with some mock data, add text to the editor,
    and submit the form:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以然后模拟`POST`请求使用一些模拟数据，添加文本到编辑器，并提交表单：
- en: '[PRE214]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'Finally, we can assert the fact that the first comment is the newly added comment
    using a combination of `cy.get()`, `.first()`, and `.contains()`:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以通过结合使用`cy.get()`、`.first()`和`.contains()`来断言第一个评论是新添加的评论：
- en: '[PRE241]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'When running the `add-new-comment` suite with the Cypress GUI, we can see the
    new test passing:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Cypress GUI运行`add-new-comment`测试套件时，我们可以看到新的测试通过：
- en: '![Figure 12.19 – Cypress running add-new-comment tests, including the new comment
    added to the top of the list test](img/Figure_12.19_B18645.jpg)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
  zh: '![图12.19 – Cypress运行添加新评论测试，包括将新评论添加到列表顶部的测试](img/Figure_12.19_B18645.jpg)'
- en: Figure 12.19 – Cypress running add-new-comment tests, including the new comment
    added to the top of the list test
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.19 – Cypress运行添加新评论测试，包括将新评论添加到列表顶部的测试
- en: You’ve now seen how to handle network operations in your testing. As most applications
    make use of some sort of API call, this will be tremendously helpful in ensuring
    your tests cover as much ground as possible.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经看到了如何在测试中处理网络操作。由于大多数应用程序都会使用某种形式的API调用，这将非常有帮助，以确保你的测试尽可能覆盖更多范围。
- en: Activity 12.01 – adding the ability to set a user’s email and test
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动十二.01 – 添加设置用户电子邮件和测试的能力
- en: 'You’ll remember that we’ve hardcoded `fakeemail@email.com` as the email for
    any comments. What we’ll do in this activity is add an email input that will set
    the `email` property on comments. We’ll add the relevant tests in a new `cypress/e2e/enter-email.cy.js`
    suite:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得我们将`fakeemail@email.com`硬编码为任何评论的电子邮件。在这个活动中，我们将添加一个电子邮件输入，它将为评论设置`email`属性。我们将在新的`cypress/e2e/enter-email.cy.js`测试套件中添加相关的测试：
- en: In order to keep track of the email, we’ll set it as a piece of reactive state
    in `data()` and add an email input to the page, which will be two-way bound to
    `email` using `v-model`. We also add a label and corresponding markup. Note that
    we’ll have a `data-test-id` attribute on the email input set to `email-input`.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了跟踪电子邮件，我们将它在`data()`中设置为一个响应式状态，并在页面上添加一个电子邮件输入，它将使用`v-model`双向绑定到`email`。我们还添加了一个标签和相应的标记。请注意，我们将在电子邮件输入上设置一个`data-test-id`属性，设置为`email-input`。
- en: We’ll now add a `beforeEach` hook to have Cypress intercept and stub out the
    `GET` comments (list) request. The comments list request should be aliased as
    `getComments`.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个`beforeEach`钩子，让Cypress拦截并模拟`GET`评论（列表）请求。评论列表请求应该被别名为`getComments`。
- en: We’ll add our first test, which checks whether typing into the email input works
    correctly. We’ll go to the app, type an email, and check that what we typed is
    now the input value.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加我们的第一个测试，该测试检查输入电子邮件输入是否正确工作。我们将进入应用程序，输入电子邮件，并检查我们输入的内容现在是否是输入值。
- en: 'When it is run using the Cypress UI, we should get the following passing test:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Cypress UI运行时，我们应该得到以下通过测试：
- en: '![Figure 12.20 – Cypress running enter-email tests with the email input test](img/Figure_12.20_B18645.jpg)'
  id: totrans-438
  prefs: []
  type: TYPE_IMG
  zh: '![图12.20 – Cypress运行带有电子邮件输入测试的输入电子邮件测试](img/Figure_12.20_B18645.jpg)'
- en: Figure 12.20 – Cypress running enter-email tests with the email input test
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.20 – Cypress运行输入电子邮件测试的添加新评论测试
- en: Having the `email` property is a pre-requisite to adding comments, so we’ll
    disable the `email` is empty (`!email`). We’ll bind to the `disabled` attribute
    based on whether or not the email field is populated.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有`email`属性是添加评论的先决条件，因此我们将禁用`email`为空（`!email`）。我们将根据电子邮件字段是否填充来绑定到`disabled`属性。
- en: With this new `disable add new comment button while email is empty` functionality,
    we should add a new E2E test. We’ll load up the page and on initial load, we’ll
    check that the email input is empty and that the `not` disabled, which means it
    is enabled.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个新的`当电子邮件为空时禁用添加新评论按钮`功能，我们应该添加一个新的端到端测试。我们将加载页面，并在初始加载时检查电子邮件输入是否为空，以及`not`是否被禁用，这意味着它是启用的。
- en: 'When run using the Cypress UI, we should see the new test passing with the
    following output:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Cypress UI运行时，我们应该看到新的测试通过，以下为输出：
- en: "![Figure 12.21 – Cypress running enter-email\uFEFF tests with the disabled\
    \ add comment button test](img/Figure_12.21_B18645.jpg)"
  id: totrans-443
  prefs: []
  type: TYPE_IMG
  zh: '![图12.21 – Cypress运行带有禁用添加评论按钮的enter-email测试](img/Figure_12.21_B18645.jpg)'
- en: Figure 12.21 – Cypress running enter-email tests with the disabled add comment
    button test
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21 – Cypress运行带有禁用添加评论按钮的enter-email测试
- en: Now that we’ve got a way to capture the email, we should pass it to the backend
    API when making the `POST` comments call (that is, when submitting a new comment).
    In order to do this, we should modify the spot in `methods.submitNewComment` where
    the email is hardcoded as `fakeemail@email.com`.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了捕获电子邮件的方法，我们应该在提交新评论（即提交新评论时）调用后端API时传递它。为了做到这一点，我们应该修改`methods.submitNewComment`中电子邮件被硬编码为`fakeemail@email.com`的位置。
- en: Now that we’re using the email that’s been input by the user, we should write
    an E2E test to check that it’s being sent. We’ll stub out the `POST` request,
    alias it to `newComment`, and send back an arbitrary value. We can then visit
    the page, fill out the email input, open the comment editor, fill that out, and
    submit it. We’ll then wait on the `newComment` request and assert in the request
    body that the body and email are as they were when we completed them.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们正在使用用户输入的电子邮件，我们应该编写一个端到端测试来检查它是否被发送。我们将模拟`POST`请求，将其别名为`newComment`，并返回一个任意值。然后我们可以访问页面，填写电子邮件输入，打开评论编辑器，填写内容，并提交。然后我们将等待`newComment`请求，并在请求体中确认正文和电子邮件与我们完成它们时相同。
- en: Note
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We could also opt to not stub out the `POST` request and instead check that
    the new comment inserted on the page contains the right email and body.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以选择不模拟`POST`请求，而是检查新插入到页面上的评论是否包含正确的电子邮件和正文。
- en: 'When run using the Cypress UI, we get the following test run output:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Cypress UI运行时，我们得到以下测试运行输出：
- en: '![Figure 12.22 – Cypress running enter-email tests with the email input test](img/Figure_12.22_B18645.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
  zh: '![图12.22 – Cypress运行带有电子邮件输入测试的enter-email测试](img/Figure_12.22_B18645.jpg)'
- en: Figure 12.22 – Cypress running enter-email tests with the email input test
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.22 – Cypress运行带有电子邮件输入测试的enter-email测试
- en: Note
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found at [https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Activity12.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Activity12.01)
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动的解决方案可以在[https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Activity12.01](https://github.com/PacktPublishing/Frontend-Development-Projects-with-Vue.js-3/tree/v2-edition/Chapter12/Activity12.01)找到
- en: Summary
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we’ve looked at leveraging Cypress to test Vue.js applications
    E2E. E2E tests in general are useful to give us a high level of confidence that
    tested flows will work as expected, as opposed to unit or integration tests, which
    validate that our code works as expected at a much lower overhead.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了利用Cypress进行Vue.js应用程序端到端测试的方法。端到端测试通常非常有用，可以给我们一个高度信心，即测试的流程将按预期工作，而不是单元或集成测试，后者以更低的开销验证我们的代码是否按预期工作。
- en: We’ve seen how to use Cypress to inspect, interact with, and assert against
    a UI. We’ve also shown how Cypress’ default wait/retry functionality is a great
    advantage when writing robust tests. We leveraged Cypress’ HTTP interception library
    to stub out HTTP requests and make tests more predictable and faster.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用Cypress检查、交互和断言UI。我们还展示了Cypress的默认等待/重试功能在编写健壮测试时的巨大优势。我们利用Cypress的HTTP拦截库来模拟HTTP请求，使测试更加可预测和快速。
- en: Finally, we looked at how to set up visual regression testing with Cypress.
    In the next chapter, we’ll look at how to deploy a Vue.js application to the web.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了如何使用Cypress设置视觉回归测试。在下一章中，我们将探讨如何将Vue.js应用程序部署到网络上。
