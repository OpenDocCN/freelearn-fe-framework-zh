["```js\nexport class Developer {\n  private skills: Array<Skill>;\n  private bio: Person;\n  constructor() {\n    this.bio = new Person('Sarah', 'Doe', 24, 'female');\n    this.skills = [\n      new Skill('css'), \n      new Skill('TypeScript'), \n      new Skill('Webpack')\n    ];\n  }\n}\n```", "```js\n// Person Class\nexport class Person {\n  private fName: string;\n  private lName: string;\n  private age: number;\n  private gender: string;\n  constructor(\n    fName: string, \n    lName: string, \n    age: number, \n    gender: string, \n  ) {\n    this.fName = fName;\n    this.lName = lName;\n    this.age = age;\n    this.gender = gender;\n  }\n}\n\n// Skill Class\nexport class Skill {\n  private type: string;\n  constructor(\n    type: string\n  ) {\n    this.type = type;\n  }\n}\n```", "```js\nexport class Developer {\n  private skills: Array<Skills>;\n  private bio: Person;\n  constructor(\n    fName: string, \n    lName: string, \n    age: number, \n    gender: string, \n    skills: Array<string>\n  ) {\n    this.bio = new Person(fName, lName, age, gender);\n    this.skills = skills.map(skill => new Skill(skill));\n  }\n}\n```", "```js\n// Skill Class\nexport class Skill {\n  private type: string;\n  private yearsOfExperience: number;\n  constructor(\n    type: string,\n    yearsOfExperience: number\n  ) {\n    this.type = type;\n    this.yearsOfExperience = yearsOfExperience\n  }\n}\n```", "```js\nexport class Developer {\n  public skills: Array<Skill>;\n  private bio: Person;\n  constructor(\n    fName: string, \n    lName: string, \n    age: number, \n    gender: string, \n    skils: Array<any>\n  ) {\n    this.bio = new Person(fName, lName, age, gender);\n    this.slills = skills.map(skill => \n       new Skill(skill.type, skill.yearsOfExperience));\n  }\n}\n```", "```js\nexport class Developer {\n  public skills: <Skill>;\n  private person: Person;\n  constructor(\n    skill: Skill,\n    person: Person\n  ) {}\n}\n```", "```js\nexport class Developer {\n  constructor(\n    public skills: <Skill>,\n    private person: Person\n  ) {}\n}\n```", "```js\nng g component comment-list\n```", "```js\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-comment-list',\n  templateUrl: './comment-list.component.html',\n  styleUrls: ['./comment-list.component.css']\n})\nexport class CommentListComponent implements OnInit {\n\n  comments: Array<any>\n  constructor() { }\n\n  ngOnInit() {\n    this.comments = [\n      {\n        author: 'solomon',\n        content: `TypeScript + Angular is amazing`\n      },\n      {\n        author: 'lorna',\n        content: `TypeScript is really awesome`\n      },\n      {\n        author: 'codebeast',\n        content: `I'm new to TypeScript`\n      },\n    ];\n  }\n\n}\n```", "```js\n<div class=\"list-group\">\n  <a href=\"#\" class=\"list-group-item\" *ngFor=\"let comment of comments\">\n    <h4 class=\"list-group-item-heading\">{{comment.author}}</h4>\n    <p class=\"list-group-item-text\">{{comment.content}}</p>\n  </a>\n</div>\n```", "```js\n<div class=\"container\">\n  <h2 class=\"text-center\">TS Comments</h2>\n  <div class=\"col-md-6 col-md-offset-3\">\n    <app-comment-list></app-comment-list>\n  </div>\n</div>\n```", "```js\nng g service comment\n```", "```js\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CommentService {\n  private comments: Array<any> = [\n    {\n      author: 'solomon',\n      content: `TypeScript + Angular is amazing`\n    },\n    {\n      author: 'lorna',\n      content: `TypeScript is really awesome`\n    },\n    {\n      author: 'codebeast',\n      content: `I'm new to TypeScript`\n    }\n  ];\n  constructor() {}\n\n  getComments() {\n    return this.comments;\n  }\n}\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { CommentService } from '../comment.service';\n\n@Component({\n  selector: 'app-comment-list',\n  templateUrl: './comment-list.component.html',\n  styleUrls: ['./comment-list.component.css']\n})\nexport class CommentListComponent implements OnInit {\n  private comments: Array<any>;\n  constructor(\n    private commentService: CommentService\n  ) { }\n\n  ngOnInit() {\n    this.comments = this.commentService.getComments();\n  }\n\n}\n```", "```js\n// ./src/app/app.module.ts\ndeclarations: [\n    AppComponent,\n    // New scaffolded component here\n    CommentListComponent\n  ],\n```", "```js\nimport { CommentService } from './comment.service';\n//...\n\n@NgModule({\n  //...\n  providers: [\n    CommentService\n  ],\n})\nexport class AppModule { }\n```", "```js\n<a href=\"#\" class=\"list-group-item\" (dblclick)=\"removeComment(comment)\" *ngFor=\"let comment of comments\">\n    <h4 class=\"list-group-item-heading\">{{comment.author}}</h4>\n    <p class=\"list-group-item-text\">{{comment.content}}</p>\n  </a>\n```", "```js\nremoveComment(comment) {\n    this.comments = this.commentService.removeComment(comment);\n}\n```", "```js\n// Comment service\nremoveComment(removableComment) {\n    // find the index of the comment\n    const index = this.comments.findIndex(\n      comment => comment.author === removableComment.author\n    );\n    // remove the comment from the array\n    this.comments.splice(index, 1);\n    // return the new array\n    return this.comments;\n  }\n```", "```js\nng g component comment-detail\n```", "```js\n<div class=\"container\">\n  <h2 class=\"text-center\">TS Comments</h2>\n  <div class=\"col-md-4 col-md-offset-2\">\n    <app-comment-list></app-comment-list>\n  </div>\n  <div class=\"col-md-4\">\n    <!-- Comment detail component -->\n    <app-comment-detail></app-comment-detail>\n  </div>\n</div>\n\n```", "```js\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class CommentService {\n  private commentSelectedSource = new Subject<any>();\n  public commentSelected$ = this.commentSelectedSource.asObservable();\n\n  private comments: Array<any> = [\n   // ...\n  ];\n\n  // ...\n\n  showComment(comment) {\n    this.commentSelectedSource.next(comment);\n  }\n}\n```", "```js\n<div class=\"list-group\">\n  <a href=\"#\" class=\"list-group-item\" \n    (dblclick)=\"removeComment(comment)\" \n    *ngFor=\"let comment of comments\"\n    (click)=\"showComment(comment)\"\n    >\n    <h4 class=\"list-group-item-heading\">{{comment.author}}</h4>\n    <p class=\"list-group-item-text\">{{comment.content}}</p>\n  </a>\n</div>\n```", "```js\nshowComment(comment) {\n  this.commentService.showComment(comment);\n}\n```", "```js\nimport { Component, OnInit } from '@angular/core';\nimport { CommentService } from '../comment.service';\n\n@Component({\n  selector: 'app-comment-detail',\n  templateUrl: './comment-detail.component.html',\n  styleUrls: ['./comment-detail.component.css']\n})\nexport class CommentDetailComponent implements OnInit {\n\n  comment: any = {\n    author: '',\n    content: ''\n  };\n  constructor(\n    private commentService: CommentService\n  ) { }\n\n  ngOnInit() {\n    this.commentService.commentSelected$.subscribe(comment => {\n      this.comment = comment;\n    })\n  }\n\n}\n```", "```js\n<div class=\"panel panel-default\" *ngIf=\"comment.author\">\n  <div class=\"panel-heading\">{{comment.author}}</div>\n  <div class=\"panel-body\">\n    {{comment.content}}\n  </div>\n</div>\n```", "```js\n<username>: <comment content>\n```", "```js\nshowPrompt() {\n    const commentString = window.prompt('Please enter your username and content: ', 'username: content');\n    const parsedComment = this.commentService.parseComment(commentString);\n    this.commentService.addComment(parsedComment);\n  }\n```", "```js\n<button class=\"btn btn-primary\" \n (click)=\"showPrompt()\"\n>Add Comment</button>\n```", "```js\nparseComment(commentString) {\n    const commentArr = commentString.split(':');\n    const comment = {\n      author: commentArr[0].trim(),\n      content: commentArr[1].trim()\n    }\n    return comment;\n  }\n\n  addComment(comment) {\n    this.comments.unshift(comment);\n  }\n```"]