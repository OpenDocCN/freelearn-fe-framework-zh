["```js\n> cd e-commerce-app/online-store\n> git checkout -b gateway-conversion\n```", "```js\n> git init\n> git add --all\n> git commit -am \"converted into gateway application\"\n```", "```js\n@ComponentScan\n@EnableAutoConfiguration(exclude = {MetricFilterAutoConfiguration.class, MetricRepositoryAutoConfiguration.class, MetricsDropwizardAutoConfiguration.class})\n@EnableConfigurationProperties({LiquibaseProperties.class, ApplicationProperties.class})\n@EnableDiscoveryClient\n@EnableZuulProxy\npublic class GatewayApp {\n...\n}\n```", "```js\nzuul: # those values must be configured depending on the application specific needs\n    host:\n        max-total-connections: 1000\n        max-per-route-connections: 100\n    semaphore:\n        max-semaphores: 500\n```", "```js\npublic class AccessControlFilter extends ZuulFilter {\n     ...\n     public boolean shouldFilter() {\n       ...\n       return !isAuthorizedRequests(serviceUrl, serviceName, \n       requestUri);\n     }\n    ...\n}\n```", "```js\n@ConditionalOnProperty(\"jhipster.gateway.rate-limiting.enabled\")\npublic static class RateLimitingConfiguration { \n... \n}\n```", "```js\n@Component\npublic class SwaggerBasePathRewritingFilter extends SendResponseFilter {\n    @Override\n    public Object run() {\n        RequestContext ctx = RequestContext.getCurrentContext();\n        if(!context.getResponseGzipped()) {\n            context.getResponse().setCharacterEncoding(\"UTF-8\");\n        }\n        // rewrite the base path and send down the response\n    }\n...\n```", "```js\n@Component\npublic class TokenRelayFilter extends ZuulFilter {\n    @Override\n    public Object run() {\n        RequestContext ctx = RequestContext.getCurrentContext();\n        Set<String> headers = (Set<String>) ctx.get(\"ignoredHeaders\");\n        // JWT tokens should be relayed to the resource servers\n        headers.remove(\"authorization\");\n        return null;\n    }\n...\n```", "```js\neureka:\n    client:\n        enabled: true\n        healthcheck:\n            enabled: true\n        fetch-registry: true\n        register-with-eureka: true\n        instance-info-replication-interval-seconds: 10\n        registry-fetch-interval-seconds: 10\n    instance:\n        appname: gateway\n        instanceId: gateway:${spring.application.instance-id:${random.value}}\n        lease-renewal-interval-in-seconds: 5\n        lease-expiration-duration-in-seconds: 10\n        status-page-url-path: ${management.context-path}/info\n        health-check-url-path: ${management.context-path}/health\n        metadata-map:\n            zone: primary # This is needed for the load balancer\n            profile: ${spring.profiles.active}\n            version: ${info.project.version}\n```", "```js\nhystrix:\n    command:\n        default:\n            execution:\n                isolation:\n                    thread:\n                        timeoutInMilliseconds: 10000\n```", "```js\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNlbmRpbCBLdW1hciBOIiwiYWRtaW4iOnRydWV9.ILwKeJ128TwDZmLGAeeY7qiROxA3kXiXOG4MxTQVk_I\n```", "```js\n#Algorithm for JWT generation\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n\n)\n```", "```js\nAuthorization: Bearer <token>\n```", "```js\npublic class TokenProvider {\n  ...\n    public String createToken(Authentication authentication, Boolean rememberMe) {\n        ...\n\n        return Jwts.builder()\n            .setSubject(authentication.getName())\n            .claim(AUTHORITIES_KEY, authorities)\n            .signWith(SignatureAlgorithm.HS512, secretKey)\n            .setExpiration(validity)\n            .compact();\n    }\n}\n```", "```js\npublic boolean validateToken(String authToken) {\n    try {\n        Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken);\n        return true;\n    } catch (SignatureException e) {\n        log.info(\"Invalid JWT signature.\");\n        log.trace(\"Invalid JWT signature trace: {}\", e);\n    } catch (MalformedJwtException e) {\n        log.info(\"Invalid JWT token.\");\n        log.trace(\"Invalid JWT token trace: {}\", e);\n    } catch (ExpiredJwtException e) {\n        log.info(\"Expired JWT token.\");\n        log.trace(\"Expired JWT token trace: {}\", e);\n    } catch (UnsupportedJwtException e) {\n        log.info(\"Unsupported JWT token.\");\n        log.trace(\"Unsupported JWT token trace: {}\", e);\n    } catch (IllegalArgumentException e) {\n        log.info(\"JWT token compact of handler are invalid.\");\n        log.trace(\"JWT token compact of handler are invalid trace: {}\", e);\n    }\n    return false;\n}\n```", "```js\n> git init\n> git add --all\n> git commit -am \"generated invoice microservice application\"\n```", "```js\n@Override\npublic void configure(WebSecurity web) throws Exception {\n    web.ignoring()\n        .antMatchers(HttpMethod.OPTIONS, \"/**\")\n        .antMatchers(\"/app/**/*.{js,html}\")\n        .antMatchers(\"/bower_components/**\")\n        .antMatchers(\"/i18n/**\")\n        .antMatchers(\"/content/**\")\n        .antMatchers(\"/swagger-ui/index.html\")\n        .antMatchers(\"/test/**\")\n        .antMatchers(\"/h2-console/**\");\n}\n```", "```js\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        .csrf()\n        .disable()\n        .headers()\n        .frameOptions()\n        .disable()\n    .and()\n        .sessionManagement()\n        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n    .and()\n        .authorizeRequests()\n        .antMatchers(\"/api/**\").authenticated()\n        .antMatchers(\"/management/health\").permitAll()\n        .antMatchers(\"/management/**\").hasAuthority(AuthoritiesConstants.ADMIN)\n        .antMatchers(\"/swagger-resources/configuration/ui\").permitAll()\n    .and()\n        .apply(securityConfigurerAdapter());\n}\n```", "```js\njhipster:\n    registry:\n        password: admin\n```", "```js\nspring:\n    application:\n        name: invoice\n        ...\n    cloud:\n        config:\n            fail-fast: false # if not in \"prod\" profile, do not force to use Spring Cloud Config\n            uri: http://admin:${jhipster.registry.password}@localhost:8761/config\n            # name of the config server's property source (file.yml) that we want to use\n            name: invoice\n            ...\n\n```", "```js\neureka:\n    client:\n        enabled: true\n        healthcheck:\n            enabled: true\n        fetch-registry: true\n        register-with-eureka: true\n        instance-info-replication-interval-seconds: 10\n        registry-fetch-interval-seconds: 10\n    instance:\n        appname: invoice\n        instanceId: invoice:${spring.application.instance-id:${random.value}}\n        lease-renewal-interval-in-seconds: 5\n        lease-expiration-duration-in-seconds: 10\n        status-page-url-path: ${management.context-path}/info\n        health-check-url-path: ${management.context-path}/health\n        metadata-map:\n            zone: primary # This is needed for the load balancer\n            profile: ${spring.profiles.active}\n            version: ${info.project.version}\n```", "```js\nspring:\n    profiles:\n        active: dev\n    ...\n    datasource:\n        type: <connector jar>\n        url: <db url>\n        username: <username>\n        password: <password>\n    ...\n    jpa:\n        database-platform: <DB platform>\n        database: <H2 or MySQL or any SQL database>\n        show-sql: true\n        properties:\n            hibernate.id.new_generator_mappings: true\n            hibernate.cache.use_second_level_cache: true\n            hibernate.cache.use_query_cache: false\n            hibernate.generate_statistics: true\n            hibernate.cache.region.factory_class: com.hazelcast.hibernate.HazelcastCacheRegionFactory\n            hibernate.cache.hazelcast.instance_name: invoice\n            hibernate.cache.use_minimal_puts: true\n            hibernate.cache.hazelcast.use_lite_member: true\n```", "```js\n> git init\n> git add --all\n> git commit -am \"generated notification microservice application\"\n```"]