- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Introduction to Angular Material
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular Material简介
- en: When developing a web application, you must decide how to create your **user
    interface** ( **UI** ). It should ideally use proper contrasting colors, have
    a consistent look and feel, be responsive, and work well on different devices
    and browsers. In short, there are many things to consider regarding UI and UX.
    Many developers consider creating the UI/UX a daunting task and turn to UI frameworks
    that do much of the heavy lifting. Some frameworks are used more than others,
    namely **Bootstrap** and **Tailwind CSS** . However, **Angular Material** , a
    framework based on Google’s **Material Design** techniques, has gained popularity.
    In this chapter, we will explain what Material Design is and how Angular Material
    uses it to provide a component UI library for the Angular framework. We will also
    learn to use various Angular Material components by applying them in our e-shop
    application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Web应用程序时，您必须决定如何创建您的**用户界面**（**UI**）。它理想上应使用适当的对比色，具有一致的外观和感觉，响应式，并在不同的设备和浏览器上运行良好。简而言之，关于UI和UX有很多事情要考虑。许多开发者认为创建UI/UX是一项艰巨的任务，并转向UI框架来承担大部分繁重的工作。有些框架比其他框架使用得更多，即**Bootstrap**和**Tailwind
    CSS**。然而，基于Google的**Material Design**技术的**Angular Material**框架已经获得了流行。在本章中，我们将解释Material
    Design是什么，以及Angular Material如何使用它为Angular框架提供一个组件UI库。我们还将通过在我们的e-shop应用程序中应用它们来学习使用各种Angular
    Material组件。
- en: 'In this chapter, we will be doing the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进行以下操作：
- en: Introducing Material Design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Material Design
- en: Introducing Angular Material
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Angular Material
- en: Integrating UI components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成UI组件
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The chapter contains various code samples to walk you through the concept of
    Angular Material. You can find the related source code in the `ch12` folder of
    the following GitHub repository:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种代码示例，以向您介绍Angular Material的概念。您可以在以下GitHub仓库的`ch12`文件夹中找到相关的源代码：
- en: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition
    )'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition](https://www.github.com/PacktPublishing/Learning-Angular-Fifth-Edition)'
- en: Introducing Material Design
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Material Design
- en: 'Material Design is a design language developed by Google with the following
    goals in mind:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design是由Google开发的一种设计语言，其目标是：
- en: Develop a single underlying system, allowing a unified experience across platforms
    and device sizes.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个单一的基础系统，允许在各个平台和设备尺寸上提供统一的使用体验。
- en: Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all
    first-class input methods.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动原则是基本的，但触摸、语音、鼠标和键盘都是一等输入方法。
- en: 'The purpose of a design language is to have the user deal with how the UI and
    user interaction should look and feel across devices. Material Design is based
    on three main principles:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设计语言的目的在于让用户处理UI和用户交互在各个设备上的外观和感觉。Material Design基于以下三个主要原则：
- en: '**Material is the metaphor** : It is inspired by the physical world with different
    textures and mediums, such as paper and ink.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材料是隐喻**：它受到物理世界中的不同纹理和介质（如纸张和墨水）的启发。'
- en: '**Bold, graphic, and intentional** : It is guided by different print design
    methods, such as typography, grids, and color, to create an immersive experience
    for the user.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粗体、图形化和有意图的**：它受到不同的印刷设计方法（如排版、网格和颜色）的指导，为用户提供沉浸式的体验。'
- en: '**Motion provides meaning** : Elements are displayed on the screen by creating
    animations and interactions that reorganize the environment.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运动赋予意义**：通过创建动画和交互来重新组织环境，元素在屏幕上显示。'
- en: 'Material Design has much theory behind it, and proper documentation on the
    topic is available should you wish to delve further. You can find more information
    at the official documentation site: [https://material.io](https://material.io)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design背后有许多理论，如果您想深入了解，可以查阅相关的适当文档。您可以在官方文档网站上找到更多信息：[https://material.io](https://material.io)
- en: A design language alone isn’t that interesting if you are not a designer. In
    the following section, we will learn how Angular developers can benefit from Material
    Design using the Angular Material library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是设计师，设计语言本身可能并不那么有趣。在下一节中，我们将学习Angular开发者如何通过Angular Material库从Material
    Design中受益。
- en: Introducing Angular Material
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Angular Material
- en: 'The Angular Material library was developed to implement Material Design for
    the Angular framework. It is based on the following concepts:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material库是为了实现Angular框架的Material Design而开发的。它基于以下概念：
- en: '**Sprint from zero to app** : The intention is to make it easy for you, as
    an application developer, to hit the ground running. The effort needed to set
    it up should be minimal.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从零开始构建应用**：目的是让作为应用开发者的您能够迅速上手。设置所需的工作量应尽可能小。'
- en: '**Fast and consistent** : Performance has been a significant focus point, and
    Angular Material is guaranteed to work well on all major browsers.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速且一致**：性能一直是重点，Angular Material保证在所有主要浏览器上都能良好工作。'
- en: '**Versatile** : Many themes should be easily customizable, and there is also
    great support for localization and internationalization.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用性**：许多主题应该很容易自定义，并且还有对本地化和国际化的强大支持。'
- en: '**Optimized for Angular** : The fact that the Angular team has built it means
    that support for Angular is a big priority.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**针对Angular优化**：Angular团队构建了它的事实意味着对Angular的支持是一个重要优先事项。'
- en: 'The library is split into the following main parts:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该库分为以下主要部分：
- en: '**Components** : Many UI components, such as different kinds of input, buttons,
    layout, navigation, modals, and other ways to show tabular data, are in place
    to help you be successful.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：许多UI组件，如不同类型的输入、按钮、布局、导航、模态以及其他展示表格数据的方式，都已准备好以帮助您成功。'
- en: '**Themes** : The library comes with preinstalled themes, but there is also
    a theming guide if you want to create your own at [https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)
    .'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：该库附带预安装的主题，但如果您想创建自己的主题，也可以参考[https://material.angular.io/guide/theming](https://material.angular.io/guide/theming)中的主题指南。'
- en: Every part and component of the Angular Material library encapsulates web accessibility
    best techniques out of the box.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material库的每个部分和组件都封装了开箱即用的Web无障碍最佳实践。
- en: The core of the Angular Material library is the **Angular CDK** , which is a
    collection of tools that implement similar interaction patterns unrelated to any
    presentation style. The behavior of Angular Material components has been designed
    using the Angular CDK. The Angular CDK is so abstract that you can use it to create
    custom components. You should seriously consider it if you are a UI library author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material库的核心是**Angular CDK**，它是一组实现与任何展示风格无关的类似交互模式的工具集合。Angular Material组件的行为是使用Angular
    CDK设计的。Angular CDK如此抽象，以至于您可以用它来创建自定义组件。如果您是UI库的作者，您应该认真考虑它。
- en: We have covered all the basic theory about Angular Material, so let’s put it
    into practice in the following section by integrating it with an Angular application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了关于Angular Material的所有基本理论，所以让我们在以下部分通过将其与Angular应用集成来将其付诸实践。
- en: Installing Angular Material
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Angular Material
- en: The Angular Material library is an npm package. To install it, we need to manually
    execute the `npm install` command and import several Angular artifacts into our
    Angular application. The Angular team has automated these interactions by creating
    the necessary schematics to install it using the Angular CLI.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material库是一个npm包。为了安装它，我们需要手动执行`npm install`命令并将几个Angular工件导入到我们的Angular应用中。Angular团队通过创建必要的schematics来自动化这些交互，以便使用Angular
    CLI安装它。
- en: You will need the source code of the Angular application we created in *Chapter
    11* , *Handling Application Errors* , to follow along with the rest of the chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要我们在*第11章*，*处理应用错误*中创建的Angular应用的源代码，以跟随本章的其余部分。
- en: 'We can use the `ng add` command of the Angular CLI to install Angular Material
    into our e-shop application:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Angular CLI的`ng add`命令将Angular Material安装到我们的电子商务应用中：
- en: 'Run the following command in the current Angular CLI workspace:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前Angular CLI工作区中运行以下命令：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Angular CLI will find the latest stable version of the Angular Material
    library and prompt us to download it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI将找到Angular Material库的最新稳定版本，并提示我们下载它。
- en: In this book, we work with Angular Material 19, which is compatible with Angular
    19. If the version that prompts you is different, you should run the command `ng
    add @angular/material@19` to install the latest Angular Material 19 to your system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们使用Angular Material 19，它与Angular 19兼容。如果提示的版本不同，您应该运行命令`ng add @angular/material@19`将最新的Angular
    Material 19安装到您的系统中。
- en: 'After the download is complete, it will ask us whether we want to use a prebuilt
    theme for our Angular application or a custom one:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，它将询问我们是否想为我们的Angular应用使用预构建的主题或自定义主题：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Accept the default value, **Azure/Blue,** by pressing *Enter* .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按*Enter*键接受默认值**Azure/Blue**。
- en: 'After selecting a theme, the Angular CLI will ask if we want to set up global
    typography styles in our application. Typography refers to how the text is arranged
    in our application:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择主题后，Angular CLI 将询问我们是否想在应用程序中设置全局排版样式。排版指的是文本在我们应用程序中的排列方式：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We want to keep our application as simple as possible, so accept the default
    value, `No` , by pressing *Enter* .
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望尽可能保持应用程序的简单性，因此通过按 *Enter* 键接受默认值，`No`。
- en: Angular Material typography is based on Material Design guidelines and uses
    the Roboto Google Font for styling.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 排版基于 Material 设计指南，并使用 Roboto Google 字体进行样式设计。
- en: 'The next question is about animations. Animation isn’t strictly required, but
    we want our application to display a beautiful animation when we click a button
    or open a modal dialog:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的问题是关于动画。动画不是严格必需的，但我们希望当点击按钮或打开模态对话框时，我们的应用程序能够显示一个漂亮的动画：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Accept the default value, `Include and enable animations` , by pressing *Enter.*
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按 *Enter* 键接受默认值，`Include and enable animations`。
- en: 'The Angular CLI will start installing and configuring Angular Material into
    our application. It will scaffold and import all necessary artifacts so we can
    start working with Angular Material immediately:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 将开始安装和配置 Angular Material 到我们的应用程序中。它将构建和导入所有必要的组件，以便我们立即开始使用 Angular
    Material：
- en: '`angular.json` : It adds the theme stylesheet file in the configuration file
    of the Angular CLI workspace:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angular.json` : 它在 Angular CLI 工作区的配置文件中添加了主题样式表文件：'
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`package.json` : It adds the `@angular/cdk` and `@angular/material` npm packages.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json` : 它添加了 `@angular/cdk` 和 `@angular/material` npm 包。'
- en: '`index.html` : It adds the stylesheet files of the Roboto fonts and the Material
    icons in the main HTML file.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html` : 它在主 HTML 文件中添加了 Roboto 字体和 Material 图标的样式表文件。'
- en: '`styles.css` : It adds the necessary global CSS styles for the `<html>` and
    the `<body>` tags:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styles.css` : 它为 `<html>` 和 `<body>` 标签添加必要的全局 CSS 样式：'
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`app.config.ts` : It enables animations in the application configuration file:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.config.ts` : 它在应用程序配置文件中启用动画：'
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After the process is finished, we can begin adding UI components from the Angular
    Material library into our application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在过程完成后，我们可以开始将 Angular Material 库中的 UI 组件添加到我们的应用程序中。
- en: Adding UI components
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 UI 组件
- en: 'The button component is one of the most used components from the Angular Material
    library. As an example, we will learn how easy it is to add a button component
    to our e-shop application. Before we can use it in our Angular application, we
    must remove all CSS styles for the native `<button>` tag that we have used so
    far:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮组件是 Angular Material 库中最常用的组件之一。例如，我们将学习如何轻松地将按钮组件添加到我们的电子商务应用程序中。在我们可以在 Angular
    应用程序中使用它之前，我们必须删除我们迄今为止使用的所有原生 `<button>` 标签的 CSS 样式：
- en: Open the `styles.css` file and remove the `button` , `button:hover` , and `button:disabled`
    CSS styles.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `styles.css` 文件，并删除 `button`、`button:hover` 和 `button:disabled` CSS 样式。
- en: Open the `product-detail.component.css` file and remove the `--button-accent`
    variable from the `button.secondary` and `button.delete` styles.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-detail.component.css` 文件，并从 `button.secondary` 和 `button.delete`
    样式中删除 `--button-accent` 变量。
- en: Remove the `.button-group` CSS style completely.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全删除 `.button-group` CSS 样式。
- en: 'Add a `color` in the `button.delete` style:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `button.delete` 样式中添加一个 `color`：
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To start using a UI component from the Angular Material library, we must import
    its corresponding Angular component. Let’s see how this is done by adding a button
    component in the authentication component of the Angular application:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Angular Material 库中的 UI 组件，我们必须导入其相应的 Angular 组件。让我们通过在 Angular 应用程序的认证组件中添加按钮组件来查看这是如何完成的：
- en: 'Open the `auth.component.ts` file and add the following `import` statement
    to use Angular Material buttons:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `auth.component.ts` 文件，并添加以下 `import` 语句以使用 Angular Material 按钮：
- en: '[PRE8]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We do not import directly from the `@angular/material` package because every
    component has a dedicated namespace. The button component can be found in the
    `@angular/material/button` namespace.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不直接从 `@angular/material` 包中导入，因为每个组件都有一个专门的命名空间。按钮组件可以在 `@angular/material/button`
    命名空间中找到。
- en: Angular Material components can also be used by importing their respective module,
    such as `MatButtonModule` for buttons. It is recommended to import the components
    directly though, because it helps us stay consistent with modern Angular patterns.
    However, we will see that some features require too many components to import.
    In those cases, it is acceptable to import the module directly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 组件也可以通过导入它们各自的模块来使用，例如 `MatButtonModule` 用于按钮。然而，我们建议直接导入组件，因为这有助于我们保持与现代
    Angular 模式的一致性。但是，我们将看到一些功能需要导入太多的组件。在这些情况下，直接导入模块是可以接受的。
- en: 'Add the `MatButton` class in the `imports` array of the `@Component` decorator:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@Component` 装饰器的 `imports` 数组中添加 `MatButton` 类：
- en: '[PRE9]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the `auth.component.html` file and add the `mat-button` directive in the
    `<button>` HTML elements:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `auth.component.html` 文件，并在 `<button>` HTML 元素中添加 `mat-button` 指令：
- en: '[PRE10]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding template, the `mat-button` directive, in essence, modifies
    the `<button>` element so that it appears and behaves as a Material Design button.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的模板中，`mat-button` 指令本质上修改了 `<button>` 元素，使其看起来并表现得像一个 Material Design 按钮。
- en: If we run the `ng serve` command and navigate to `http://localhost:4200` , we
    will notice that the button style is different than before. It looks more like
    a link, which is the default appearance of a Material button. In the following
    section, we will learn about theming and variations of the button component.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行 `ng serve` 命令并导航到 `http://localhost:4200`，我们会注意到按钮的样式与之前不同。它看起来更像是一个链接，这是
    Material 按钮的默认外观。在下一节中，我们将学习关于主题化和按钮组件的变化。
- en: Theming UI components
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题化 UI 组件
- en: 'The Angular Material library comes with four built-in themes:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 库自带四个内置主题：
- en: '**Azure/Blue**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure/蓝色**'
- en: '**Rose/Red**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rose/红色**'
- en: '**Magenta/Violet**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Magenta/紫色**'
- en: '**Cyan/Orange**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**青色/橙色**'
- en: 'When we add Angular Material to an Angular application, we can choose which
    of the preceding themes we want to apply. We can always change it by modifying
    the included CSS stylesheet file in the `angular.json` configuration file. Here’s
    an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 Angular Material 添加到 Angular 应用程序中时，我们可以选择应用前面提到的哪个主题。我们总是可以通过修改 `angular.json`
    配置文件中包含的 CSS 样式表文件来更改它。以下是一个示例：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we saw in the preceding section, the button component is displayed as a
    link. The `mat-button` directive displays a background color only when we hover
    over the button. To set the background color permanently, we must use the `mat-flat-button`
    directive as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中看到的，按钮组件被显示为一个链接。当我们将鼠标悬停在按钮上时，`mat-button` 指令会显示背景颜色。要永久设置背景颜色，我们必须使用
    `mat-flat-button` 指令，如下所示：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we know how to interact with the button component in an Angular application
    let’s learn some of its variations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了如何在 Angular 应用程序中与按钮组件交互，让我们学习一些它的变化：
- en: 'Open the `product-create.component.ts` file and add the following `import`
    statement:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-create.component.ts` 文件，并添加以下 `import` 语句：
- en: '[PRE13]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the `MatButton` class in the `imports` array of the `@Component` decorator:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@Component` 装饰器的 `imports` 数组中添加 `MatButton` 类：
- en: '[PRE14]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the `product-create.component.html` file and add the `mat-raised-button`
    directive in the `<button>` HTML element:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-create.component.html` 文件，并在 `<button>` HTML 元素中添加 `mat-raised-button`
    指令：
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `mat-raised-button` directive will add a shadow to the button element:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-raised-button` 指令将为按钮元素添加阴影：'
- en: '![Εικόνα που περιέχει κείμενο, λογότυπο, γραμματοσειρά, σχεδίαση  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_01.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、标志、字体、设计 自动生成的描述](img/B21418_12_01.png)'
- en: 'Figure 12.1: Raised button'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：提升按钮
- en: Open the `product-detail.component.ts` file and repeat *steps 1* and *2* .
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-detail.component.ts` 文件并重复 *步骤 1* 和 *步骤 2*。
- en: 'Open the `product-detail.component.html` file and add the `mat-stroked-button`
    directive in the `Change` button:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `product-detail.component.html` 文件，并在 `Change` 按钮中添加 `mat-stroked-button`
    指令：
- en: '[PRE16]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `mat-stroked-button` directive adds a border around the button element:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-stroked-button` 指令在按钮元素周围添加一个边框：'
- en: '![Εικόνα που περιέχει γραμματοσειρά, λογότυπο, γραφικά, λευκό  Περιγραφή που
    δημιουργήθηκε αυτόματα](img/B21418_12_02.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![包含字体、标志、图形、白色 自动生成的描述](img/B21418_12_02.png)'
- en: 'Figure 12.2: Stroked button'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：描边按钮
- en: 'Remove the `<div>` HTML element with the `button-group` class and add the `mat-raised-button`
    directive in both `<button>` HTML elements:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除具有 `button-group` 类的 `<div>` HTML 元素，并在两个 `<button>` HTML 元素中添加 `mat-raised-button`
    指令：
- en: '[PRE17]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The two buttons appear as follows when we run the application:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，两个按钮将如下所示：
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, λογότυπο, λευκό  Περιγραφή που
    δημιουργήθηκε αυτόματα](img/B21418_12_03.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、字体、标志、白色 描述由系统自动生成](img/B21418_12_03.png)'
- en: 'Figure 12.3: Product detail action buttons'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：产品详情操作按钮
- en: 'Open the `product-list.component.ts` file and add the following `import` statements:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.ts`文件，并添加以下`import`语句：
- en: '[PRE18]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加前面导入的类：
- en: '[PRE19]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the `product-list.component.html` file and replace the anchor element
    that navigates to the product create component with the following HTML snippet:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.html`文件，并用以下HTML片段替换导航到产品创建组件的锚元素：
- en: '[PRE20]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `mat-mini-fab` directive displays a square button with rounded corners
    and an icon indicated by the `<mat-icon>` HTML element. The text of the `<mat-icon>`
    element corresponds to the `add` icon name from the Material Design icons collection:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-mini-fab`指令显示一个带圆角的方形按钮和一个由`<mat-icon>`HTML元素指示的图标。`<mat-icon>`元素的文本对应于Material
    Design图标集合中的`add`图标名称：'
- en: '![Εικόνα που περιέχει σύμβολο, λογότυπο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_04.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![包含符号、标志 描述由系统自动生成](img/B21418_12_04.png)'
- en: 'Figure 12.4: FAB button'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：FAB按钮
- en: Theming in Angular Material is so extensive that we can use existing CSS variables
    to create custom themes, a topic that is out of the scope of this book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material的主题非常广泛，我们可以使用现有的CSS变量来创建自定义主题，但这本书的范围不包括这个话题。
- en: To continue our journey through the land of styling with Angular Material, we
    will learn how to integrate various UI components in the next section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续我们的Angular Material风格之旅，我们将在下一节学习如何集成各种UI组件。
- en: Integrating UI components
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成UI组件
- en: 'Angular Material contains a lot of UI components organized in categories at
    [https://material.angular.io/components/categories](https://material.angular.io/components/categories)
    . In this chapter, we will explore a subset of the preceding collection that can
    be grouped into the following categories:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material包含许多组织在类别中的UI组件，可以在[https://material.angular.io/components/categories](https://material.angular.io/components/categories)找到。在本章中，我们将探索前面集合的子集，可以归纳为以下类别：
- en: '**Form controls** : These can be used inside an Angular form, such as autocomplete,
    input, and drop-down list.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单控件**：这些可以在Angular表单内部使用，例如自动完成、输入和下拉列表。'
- en: '**Navigation** : These provide navigation capabilities, such as a header and
    footer.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航**：这些提供导航功能，例如页眉和页脚。'
- en: '**Layout** : These define how data is represented, such as a card or table.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：这些定义了数据如何表示，例如卡片或表格。'
- en: '**Popups and overlays** : These are overlay windows that display information
    and can block any user interaction until they are dismissed in any way.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹出窗口和覆盖层**：这些是显示信息并可以阻止用户交互的覆盖窗口，直到以任何方式关闭。'
- en: In the following sections, we will explore each category in more detail.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更详细地探讨每个类别。
- en: Form controls
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单控件
- en: We learned in *Chapter 10* , *Collecting User Data with Forms* , that form controls
    are about collecting input data in different ways and taking further action, such
    as sending data to a backend API over HTTP.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在第10章*使用表单收集用户数据*中，我们了解到表单控件是关于以不同方式收集输入数据并采取进一步行动的，例如通过HTTP将数据发送到后端API。
- en: 'There are quite a few form controls in the Angular Material library of varying
    types, namely the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular Material库中有很多不同类型的表单控件，具体如下：
- en: '**Autocomplete** : Enables the user to start typing in an input field and be
    presented with suggestions while typing. It helps to narrow down the possible
    values that the input can take.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动完成**：允许用户在输入字段中开始输入，并在输入时提供建议。这有助于缩小输入可以接受的值。'
- en: '**Checkbox** : A classic checkbox representing a state either checked or unchecked.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复选框**：一个经典的复选框，表示已选中或未选中的状态。'
- en: '**Date picker** : Allows the user to select a date in a calendar.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期选择器**：允许用户在日历中选择一个日期。'
- en: '**Input** : A classic input control enhanced with meaningful animation while
    typing.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：一个经典的输入控件，在输入时增强了有意义的动画。'
- en: '**Radio button** : A classic radio button enhanced with animations and transitions
    while editing to create a better user experience.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单选按钮**：一个经典的单选按钮，在编辑时增强了动画和过渡，以创造更好的用户体验。'
- en: '**Select** : A drop-down control that prompts the user to select one or more
    items from a list.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择**：一个下拉控件，提示用户从列表中选择一个或多个项目。'
- en: '**Slider** : Enables the user to increase or decrease a value by pulling a
    slider button to either the right or the left.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑块**：允许用户通过拉动滑块按钮向右或向左增加或减少一个值。'
- en: '**Slide toggle** : A switch the user can slide to set on or off.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑动开关**：用户可以滑动来设置开或关的开关。'
- en: '**Chips** : A list that displays, selects, and filters items.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**芯片**：一个显示、选择和过滤项目的列表。'
- en: In the following sections, we will examine some of these form controls in more
    detail. Let’s begin with the input component.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将更详细地检查这些表单控件中的几个。让我们从输入组件开始。
- en: Input
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: The input component is usually attached to an `<input>` HTML element. We can
    also add the ability to display errors in the input field.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 输入组件通常附加到`<input>` HTML元素上。我们还可以添加在输入字段中显示错误的能力。
- en: 'Before we can use the input component in our Angular application, we must remove
    all CSS styles for the native `<input>` tag that we have used so far:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在我们的Angular应用程序中使用输入组件之前，我们必须移除我们迄今为止使用的所有原生`<input>`标签的CSS样式：
- en: Open the `styles.css` file and remove any CSS styles referencing the `input`
    tag.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`styles.css`文件，移除任何引用`input`标签的CSS样式。
- en: Remove the `input` CSS style from the `product-create.component.css` and `cart.component.css`
    files.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`product-create.component.css`和`cart.component.css`文件中移除`input` CSS样式。
- en: 'To learn how to use the input component, we will integrate it into our application
    components:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用输入组件，我们将将其集成到我们的应用程序组件中：
- en: 'Open the `product-create.component.ts` file and add the following `import`
    statements:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-create.component.ts`文件，并添加以下`import`语句：
- en: '[PRE21]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加前面导入的类：
- en: '[PRE22]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open the `product-create.component.html` file and replace the `<div>` tags
    of the `<input>` HTML elements as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-create.component.html`文件，并按以下方式替换`<input>` HTML元素的`<div>`标签：
- en: '[PRE23]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding HTML snippet, we use the `matInput` directive to indicate that
    an `<input>` HTML element is an Angular Material input component. A form control
    in Angular Material must be enclosed in a `<mat-form-field>` element.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的HTML代码片段中，我们使用`matInput`指令来指示`<input>` HTML元素是Angular Material输入组件。在Angular
    Material中，表单控件必须被包含在`<mat-form-field>`元素中。
- en: We have replaced all `<label>` HTML elements with `<mat-label>` elements. A
    `<mat-label>` HTML element is a label that targets a specific Angular Material
    form control.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将所有`<label>` HTML元素替换为`<mat-label>`元素。一个`<mat-label>` HTML元素是一个针对特定Angular
    Material表单控件的标签。
- en: The `<mat-error>` element displays error messages in form controls when Angular
    triggers validation errors. It is shown by default when the status of the form
    control is invalid. In all other cases, we can use an `@if` block to control when
    the `<mat-error>` element will be displayed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当Angular触发验证错误时，`<mat-error>`元素会在表单控件中显示错误消息。当表单控件的状态无效时，它默认显示。在其他所有情况下，我们可以使用`@if`块来控制`<mat-error>`元素何时显示。
- en: 'Open the global `styles.css` file and add the following CSS style:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开全局`styles.css`文件，并添加以下CSS样式：
- en: '[PRE24]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding snippet, we configure `mat-form-field` elements to take all
    the available width.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们配置了`mat-form-field`元素以占用所有可用宽度。
- en: 'Run the `ng` `serve` command to start the application and navigate to `http://localhost:4200/products/new`
    . Focus on the appearance of the input fields:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令以启动应用程序，并导航到`http://localhost:4200/products/new`。关注输入字段的显示：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, ορθογώνιο παραλληλόγραμμο,
    γραμματοσειρά  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_05.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、屏幕截图、矩形、自动生成的描述](img/B21418_12_05.png)'
- en: 'Figure 12.5: Input component'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：输入组件
- en: In the preceding figure, the label of each form control is suffixed by an asterisk.
    The asterisk is a common indication that the form control must have a value. Angular
    Material automatically adds it by recognizing the `required` attribute on the
    `<input>` HTML element.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，每个表单控件的标签后面都跟着一个星号。星号是表示表单控件必须具有值的常见指示。Angular Material会自动添加它，因为它识别了`<input>`
    HTML元素上的`required`属性。
- en: Open the `cart.component.ts` file and repeat steps 1 and 2, but do not include
    the `MatError` class.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`cart.component.ts`文件，重复步骤1和2，但不要包含`MatError`类。
- en: 'Open the `cart.component.html` file and modify the contents of the `@for` block
    as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`cart.component.html`文件，并按以下方式修改`@for`块的内容：
- en: '[PRE25]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The remaining component of our application that contains an `<input>` HTML
    element is the product detail component. The product detail component is a special
    case of an Angular Material input because we must group it with the button that
    changes the product price:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序中包含`<input>` HTML元素的其余组件是产品详情组件。产品详情组件是Angular Material输入的特殊情况，因为我们必须将其与更改产品价格的按钮组合在一起：
- en: 'Open the `product-detail.component.ts` file and modify the `import` statement
    from the Angular Material npm package as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-detail.component.ts`文件，并按照以下方式修改从Angular Material npm包的`import`语句：
- en: '[PRE26]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加前面导入的类：
- en: '[PRE27]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Open the `product-detail.component.html` file and modify the `<form>` HTML
    element as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-detail.component.html`文件，并按照以下方式修改`<form>` HTML元素：
- en: '[PRE28]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the preceding snippet, we modified the button that changes the price so that
    it displays a pencil icon, and it is placed in line with the `<input>` HTML element.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，我们修改了更改价格的按钮，使其显示铅笔图标，并且它与`<input>` HTML元素对齐。
- en: The `mat-icon-button` directive indicates that the button will not have any
    text. Instead, it will display an icon defined by the `<mat-icon>` HTML element.
    The `matSuffix` directive positions the button inline and at the end of the `<input>`
    HTML element.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-icon-button`指令表示按钮将没有任何文本。相反，它将显示由`<mat-icon>` HTML元素定义的图标。`matSuffix`指令将按钮放置在`<input>`
    HTML元素的行内和末尾。'
- en: 'Navigate to the product list in the browser and select one product. The input
    for changing the product price should be the following:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中导航到产品列表并选择一个产品。更改产品价格输入应该是以下内容：
- en: '![Εικόνα που περιέχει κείμενο, ορθογώνιο παραλληλόγραμμο, στιγμιότυπο οθόνης,
    γραμματοσειρά  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_06.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像，矩形，屏幕截图，字体  自动生成的描述](img/B21418_12_06.png)'
- en: 'Figure 12.6: Input component with inline button'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：带有行内按钮的输入组件
- en: In the following section, we will learn how to use an Angular Material select
    component to choose a category in the product create component.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用Angular Material选择组件在产品创建组件中选择一个类别。
- en: Select
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择
- en: The select component works similarly to the native `<select>` HTML element.
    It displays a drop-down element with a list of options for users.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 选择组件的工作方式与原生的`<select>` HTML元素类似。它显示一个下拉元素，其中包含用户可以选择的选项列表。
- en: 'We will add one in the product create component to select the category of a
    new product:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在产品创建组件中添加一个来选择新产品的类别：
- en: 'Open the `product-create.component.ts` file and add the following `import`
    statement:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-create.component.ts`文件并添加以下`import`语句：
- en: '[PRE29]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加前面导入的类：
- en: '[PRE30]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open the `product-create.component.html` file and replace the `<div>` HTML
    element that encloses the `<select>` element with the following HTML snippet:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-create.component.html`文件，并用以下HTML片段替换包围`<select>`元素的`<div>` HTML元素：
- en: '[PRE31]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding snippet, we replaced the `<select>` and the `<option>` HTML
    elements with the `<mat-select>` and the `<mat-option>` elements, respectively.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，我们将`<select>`和`<option>` HTML元素分别替换为`<mat-select>`和`<mat-option>`元素。
- en: 'Navigate to `http://localhost:4200/products/new` and click on the **Category**
    drop-down list:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:4200/products/new`并点击**类别**下拉列表：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_07.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像，屏幕截图，字体  自动生成的描述](img/B21418_12_07.png)'
- en: 'Figure 12.7: Select component'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7：选择组件
- en: The product details component displays the product category as a paragraph element
    with a specific CSS class. In the following section, we will learn how to represent
    the product category with the Angular Material chips component.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 产品详情组件将产品类别显示为具有特定CSS类的段落元素。在下一节中，我们将学习如何使用Angular Material芯片组件表示产品类别。
- en: Chips
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 芯片
- en: The chips component is often used to display information grouped by a specific
    property. It can also provide data filtering and selection capabilities. We can
    use chips in our application to display the category in the product details component.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片组件通常用于按特定属性分组显示信息。它还可以提供数据过滤和选择功能。我们可以在我们的应用程序中使用芯片来在产品详情组件中显示类别。
- en: Our products only have one category, but chips would make more sense if we had
    additional categories assigned to our products.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的产品只有一个类别，但如果我们的产品有额外的类别分配，那么芯片会更有意义。
- en: 'Let’s get started:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'Open the `product-detail.component.ts` file and add the following `import`
    statement:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-detail.component.ts`文件，添加以下`import`语句：
- en: '[PRE32]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加前面导入的类：
- en: '[PRE33]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open the `product-detail.component.html` file and replace the `<div>` HTML
    element that contains the `pill-group` class with the following content:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-detail.component.html`文件，将包含`pill-group`类的`<div>` HTML元素替换为以下内容：
- en: '[PRE34]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `<mat-chip>` HTML element indicates a chip component. Chips must always
    be enclosed using a container element. The simplest form of a chips container
    is the `<mat-chip-set>` element.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`<mat-chip>` HTML元素表示一个芯片组件。芯片必须始终使用容器元素封装。芯片容器最简单的形式是`<mat-chip-set>`元素。'
- en: 'Open the `product-detail.component.css` file and add the following CSS style:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-detail.component.css`文件，添加以下CSS样式：
- en: '[PRE35]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the `ng serve` command to start the application and select a product from
    the list. The category should, for example, look like the following:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令以启动应用程序，并从列表中选择一个产品。例如，类别应该看起来像以下这样：
- en: '![Εικόνα που περιέχει γραμματοσειρά, κείμενο, λευκό, λογότυπο  Περιγραφή που
    δημιουργήθηκε αυτόματα](img/B21418_12_08.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![包含字体、文本、白色、标志的图片，自动生成的描述](img/B21418_12_08.png)'
- en: 'Figure 12.8: Chips component'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8：芯片组件
- en: The chips component completes our exploration of the Angular Material form controls.
    In the following section, we will get hands-on experience by styling the navigation
    layout of the application.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 芯片组件完成了我们对Angular Material表单控件的探索。在下一节中，我们将通过为应用程序的导航布局添加样式来获得实际操作经验。
- en: Navigation
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航
- en: 'There are different ways of navigating in an Angular application, such as clicking
    a link or a menu item. Angular Material offers the following components for this
    type of interaction:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular应用程序中导航有不同的方式，例如点击链接或菜单项。Angular Material为此类交互提供了以下组件：
- en: '**Menu** : A pop-up list where you can choose from a predefined set of options.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**菜单**：一个弹出列表，您可以从预定义的选项集中进行选择。'
- en: '**Sidenav** : A component that acts as a menu docked to the left or the right
    of the page. It can be presented as an overlay over the application while dimming
    the application content.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边栏**：一个作为菜单固定在页面左侧或右侧的组件。它可以作为覆盖在应用程序上的叠加层，同时变暗应用程序内容。'
- en: '**Toolbar** : A standard toolbar that allows the user to reach commonly used
    actions.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具栏**：一个标准工具栏，允许用户访问常用操作。'
- en: In this section, we will demonstrate how to use the toolbar component. We will
    convert the `<header>` and `<footer>` HTML elements of the main application component
    to Angular Material toolbars.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示如何使用工具栏组件。我们将把主应用程序组件的`<header>`和`<footer>` HTML元素转换为Angular Material工具栏。
- en: 'To create a toolbar, we will go through the following steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建工具栏，我们将按照以下步骤进行：
- en: 'Open the `app.component.ts` file and add the following `import` statements:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件，添加以下`import`语句：
- en: '[PRE36]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator and remove the `RouterLinkActive` class:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加前面导入的类，并删除`RouterLinkActive`类：
- en: '[PRE37]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the `app.component.html` file and modify the `<header>` HTML element as
    follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件，按照以下方式修改`<header>` HTML元素：
- en: '[PRE38]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding template, we add the main application links and the authentication
    component inside a `<mat-toolbar>` element. The toolbar component consists of
    a single row indicated by the `<mat-toolbar-row>` HTML element.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的模板中，我们在`<mat-toolbar>`元素内添加了主应用程序链接和身份验证组件。工具栏组件由一个由`<mat-toolbar-row>`
    HTML元素表示的单行组成。
- en: Open the `app.component.css` file and remove the CSS style for the `header`
    tag and the `menu-links` .
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.css`文件，删除`header`标签和`menu-links`的CSS样式。
- en: 'If we run the application using the `ng serve` command, we will see the new
    toolbar of our application at the top of the page:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用`ng serve`命令运行应用程序，我们将在页面顶部看到我们应用程序的新工具栏：
- en: '![img](img/B21418_12_09.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B21418_12_09.png)'
- en: 'Figure 12.9: Application header'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9：应用程序标题
- en: 'Now, modify the `<footer>` HTML element to convert it to an Angular Material
    toolbar component:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，修改`<footer>` HTML元素，将其转换为Angular Material工具栏组件：
- en: '[PRE39]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Save changes, wait for the application to refresh, and observe the toolbar
    at the bottom of the application:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改，等待应用程序刷新，并观察应用程序底部的工具栏：
- en: '![img](img/B21418_12_10.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B21418_12_10.png)'
- en: 'Figure 12.10: Application footer'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10：应用页脚
- en: The toolbar component is fully customizable, and we can adjust it according
    to the application’s needs. We can add icons and even create toolbars with content
    in multiple rows. Now that you know the basics of creating a simple toolbar, you
    can explore further possibilities.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏组件是完全可定制的，我们可以根据应用程序的需求进行调整。我们可以添加图标，甚至创建多行的工具栏。现在你已经了解了创建简单工具栏的基础，你可以探索更多的可能性。
- en: In the following section, we will learn how to lay out content differently inside
    our application.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何在应用程序内部以不同的方式布局内容。
- en: Layout
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局
- en: 'When we refer to the layout, we discuss how we place content in our templates.
    Angular Material gives us different components for this purpose:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提到布局时，我们讨论如何在模板中放置内容。Angular Material为我们提供了不同的组件来完成这个目的：
- en: '**List** : Visualizes the content as a list of items. It can be enriched with
    links and icons and even multiline.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表**：将内容以项目列表的形式可视化。它可以添加链接、图标，甚至多行内容。'
- en: '**Grid list** : Helps us arrange the content in blocks. We only need to define
    the number of columns; the component will fill the visual space.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格列表**：帮助我们以块的形式排列内容。我们只需要定义列数；组件将填充视觉空间。'
- en: '**Card** : Wraps content and adds a box shadow. We can define a header for
    it as well.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卡片**：包装内容并添加阴影。我们还可以为它定义一个标题。'
- en: '**Tabs** : Divides up the content into different tabs.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签页**：将内容分割成不同的标签页。'
- en: '**Stepper** : Divides up the content into wizard-like steps.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤条**：将内容分割成类似向导的步骤。'
- en: '**Expansion panel** : Enables us to place the content in a list-like way with
    a title for each item. Items can only be expanded one at a time.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展开面板**：允许我们将内容以类似列表的方式放置，并为每个项目添加标题。项目一次只能展开一个。'
- en: '**Table** : Represents data in a tabular format with rows and columns.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表格**：以行和列的表格格式表示数据。'
- en: In this book, we will cover the card and table components.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将介绍卡片和表格组件。
- en: Card
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卡片
- en: 'We will learn how to display each product in the list as a card:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何将列表中的每个产品显示为卡片：
- en: 'Open the `product.ts` file and add an `image` property to the `Product` interface:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product.ts`文件，并在`Product`接口中添加一个`image`属性：
- en: '[PRE40]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `image` property is a URL that points to the product image file in the Fake
    Store API.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`image`属性是一个指向Fake Store API中产品图片文件的URL。'
- en: 'Open the `product-list.component.ts` file and add the following `import` statement:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.ts`文件，并添加以下`import`语句：
- en: '[PRE41]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the `MatCardModule` class in the `imports` array of the `@Component` decorator:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加`MatCardModule`类：
- en: '[PRE42]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The Angular Material card component consists of many other components and directives.
    We choose to import the whole Angular module because it would not be convenient
    to import them all individually.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material卡片组件由许多其他组件和指令组成。我们选择导入整个Angular模块，因为单独导入它们不太方便。
- en: 'Open the `product-list.component.html` file and replace the unordered list
    element with the following HTML snippet:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.html`文件，将无序列表元素替换为以下HTML片段：
- en: '[PRE43]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: An Angular Material card component consists of a header, indicated by the `<mat-card-header>`
    HTML element. The header component contains a `<mat-card-title-group>` HTML element
    that aligns the card title, subtitle, and image into a single section. The card
    title indicated by the `<mat-card-title>` HTML element displays the product title.
    The card subtitle indicated by the `<mat-card-subtitle>` HTML element displays
    the product category. Finally, the product image is displayed by attaching the
    `mat-card-sm-image` directive to an `<img>` HTML element. The `sm` keyword in
    the directive indicates that we want to render a small size of the image.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material卡片组件由一个标题组成，由`<mat-card-header>`HTML元素表示。标题组件包含一个`<mat-card-title-group>`HTML元素，该元素将卡片标题、副标题和图像排列成一个单独的部分。由`<mat-card-title>`HTML元素表示的卡片标题显示产品标题。由`<mat-card-subtitle>`HTML元素表示的卡片副标题显示产品类别。最后，通过将`mat-card-sm-image`指令附加到`<img>`HTML元素上，显示产品图片。指令中的`sm`关键字表示我们想要渲染图像的小尺寸。
- en: Angular Material also supports `md` and `lg` for medium and large sizes, respectively.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material还支持`md`和`lg`，分别代表中等和大型尺寸。
- en: 'Open the `product-list.component.css` file and add the following CSS style:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.css`文件，并添加以下CSS样式：
- en: '[PRE44]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Run the application using the `ng serve` command and navigate to `http://localhost:4200`
    :'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ng serve`命令运行应用程序，并导航到`http://localhost:4200`：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης  Περιγραφή που δημιουργήθηκε
    αυτόματα](img/B21418_12_11.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像，屏幕截图，自动生成的描述](img/B21418_12_11.png)'
- en: 'Figure 12.11: Product list card representation'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11：产品列表卡片表示
- en: You can explore more options for the card component by navigating to [https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview)
    .
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到[https://material.angular.io/components/card/overview](https://material.angular.io/components/card/overview)来探索更多卡片组件的选项。
- en: In the following section, we will learn how to switch the product list to a
    tabular view.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何将产品列表切换到表格视图。
- en: Data table
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据表
- en: The table component from the Angular Material library enables us to display
    our data in columns and rows. To create a table, we must import the `MatTableModule`
    class from the `@angular/material/table` namespace.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material库中的表格组件使我们能够以列和行的形式显示我们的数据。要创建表格，我们必须从`@angular/material/table`命名空间导入`MatTableModule`类。
- en: The Angular Material data table consists of many other components and directives.
    We choose to import the whole Angular module because it would not be convenient
    to import them all individually.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material数据表由许多其他组件和指令组成。我们选择导入整个Angular模块，因为单独导入它们将不方便。
- en: 'Let’s get started:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'Open the `product-list.component.ts` file and import the `CurrencyPipe` and
    the `MatTableModule` artifacts:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.ts`文件，并导入`CurrencyPipe`和`MatTableModule`组件：
- en: '[PRE45]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the preceding imported classes to the `imports` array of the `@Component`
    decorator:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将之前导入的类添加到`@Component`装饰器的`imports`数组中：
- en: '[PRE46]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create the following property in the `ProductListComponent` class to define
    the table column names:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ProductListComponent`类中创建以下属性来定义表格列名：
- en: '[PRE47]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The name of each column matches a property from the `Product` interface.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列的名称都与`Product`接口中的一个属性匹配。
- en: 'Open the `product-list.component.html` file and add the following snippet after
    the `@for` block:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.html`文件，在`@for`块之后添加以下代码片段：
- en: '[PRE48]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: An Angular Material table is a standard `<table>` HTML element with the `mat-table`
    directive attached.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material表格是一个带有`mat-table`指令的标准`<table>` HTML元素。
- en: The `dataSource` property of the `mat-table` directive defines the data we want
    to display on the table. It can be any data that can be enumerated, such as an
    array. In our case, we bind it to the `products` template reference variable.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`mat-table`指令的`dataSource`属性定义了我们想在表格上显示的数据。它可以是指任何可枚举的数据，例如数组。在我们的例子中，我们将其绑定到`products`模板引用变量。'
- en: 'Add an `<ng-container>` element for each column we want to display:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们想要显示的每个列添加一个`<ng-container>`元素：
- en: '[PRE49]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `<ng-container>` element is a unique-purpose element that groups elements
    with similar functionality. It does not interfere with the styling of the child
    elements, nor is it rendered on the screen.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<ng-container>`元素是一个具有独特用途的元素，它将具有相似功能的元素分组在一起。它不会干扰子元素的样式，也不会在屏幕上渲染。'
- en: The `<ng-container>` element uses the `matColumnDef` directive to set the name
    of the specific column.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ng-container>`元素使用`matColumnDef`指令设置特定列的名称。'
- en: The value of the `matColumnDef` directive must match with a value from the `columnNames`
    component property; otherwise, the application will throw an error that it cannot
    find the name of the defined column.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`matColumnDef`指令的值必须与`columnNames`组件属性的值匹配；否则，应用程序将抛出一个错误，表明它找不到定义的列的名称。'
- en: It contains a `<th>` HTML element with a `mat-header-cell` directive that indicates
    the header of the cell and a `<td>` HTML element with a `mat-cell` directive for
    the data of the cell. The `<td>` HTML element uses the `matCellDef` directive
    to create a local template variable for the current row data that we can use later.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含一个带有`mat-header-cell`指令的`<th>` HTML元素，表示单元格的标题，以及一个带有`mat-cell`指令的`<td>`
    HTML元素，用于单元格的数据。`<td>` HTML元素使用`matCellDef`指令创建一个用于当前行数据的本地模板变量，我们可以在以后使用它。
- en: 'Add the following snippet after the `<ng-container>` elements:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<ng-container>`元素之后添加以下代码片段：
- en: '[PRE50]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In the preceding snippet, we define the header row of the table that displays
    column names and the actual rows that contain data.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们定义了表格的标题行，显示列名和包含数据的实际行。
- en: 'If we run the application, the output should be the following:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行应用程序，输出应该是以下内容：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, αριθμός, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_12.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像，屏幕截图，编号，字体，自动生成的描述](img/B21418_12_12.png)'
- en: 'Figure 12.12: Table component'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12：表格组件
- en: 'The product list component displays the card and the table representation of
    data simultaneously. We will use the button toggle component from Angular Material
    to distinguish between them. The button toggle component toggles buttons on or
    off according to a specific condition:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 产品列表组件同时显示数据的卡片表示和表格表示。我们将使用Angular Material的按钮切换组件来区分它们。按钮切换组件根据特定条件切换按钮的开启或关闭：
- en: 'Open the `product-list.component.ts` file and add the following `import` statement:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.ts`文件并添加以下`import`语句：
- en: '[PRE51]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加前面导入的类：
- en: '[PRE52]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Open the `product-list.component.html` file and add the following HTML snippet
    inside the `<div>` HTML element with the `caption` class:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-list.component.html`文件，并在具有`caption`类的`<div>`HTML元素内添加以下HTML片段：
- en: '[PRE53]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the preceding snippet, we use the `<mat-button-toggle-group>` element to
    create two toggle buttons side by side. The instance of the button toggle group
    is assigned to the `group` template reference variable so we can access it later.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用`<mat-button-toggle-group>`元素创建两个并排的切换按钮。按钮切换组的实例被分配给`group`模板引用变量，这样我们可以在以后访问它。
- en: We declare toggle buttons using the `<mat-button-toggle>` element and setting
    an appropriate `value` . The `value` property will be set when we click on either
    button. We also have an icon for each toggle button to enhance UX while users
    interact with the product list.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`<mat-button-toggle>`元素声明切换按钮，并设置适当的`value`。当点击任一按钮时，将设置`value`属性。我们还为每个切换按钮添加了一个图标，以增强用户体验，当用户与产品列表交互时。
- en: 'Create a new `@if` block after the `<div>` HTML element with the `caption`
    class and move the `@for` block inside it:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有`caption`类的`<div>`HTML元素之后创建一个新的`@if`块，并将`@for`块移动到其中：
- en: '[PRE54]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: According to the preceding snippet, the card representation of products will
    be displayed when the `value` property of the button toggle group is set to `card`
    .
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的代码片段，当按钮切换组的`value`属性设置为`card`时，将显示产品的卡片表示。
- en: 'Add the following `@else` block and move the data table component inside it
    to display the product list in tabular format when the second toggle button is
    clicked:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`@else`块，并将数据表组件移动到其中，以便在点击第二个切换按钮时以表格格式显示产品列表：
- en: '[PRE55]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Run the `ng serve` command to start the application and verify that the card
    representation is initially displayed.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令以启动应用程序并验证卡片表示最初显示。
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης  Περιγραφή που δημιουργήθηκε
    αυτόματα](img/B21418_12_13.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像，屏幕截图，自动生成的描述](img/B21418_12_13.png)'
- en: 'Figure 12.13: Product list'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13：产品列表
- en: Click the second toggle button and verify that the products are now displayed
    in tabular format.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第二个切换按钮并验证产品现在以表格格式显示。
- en: In this section, we learned how to display the product list in a tabular format.
    We also used toggle buttons to switch from the card view to the tabular one.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何以表格格式显示产品列表。我们还使用了切换按钮在卡片视图和表格视图之间切换。
- en: In the following section, we will learn how to use popups and overlays to provide
    additional information to the users.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，我们将学习如何使用弹出窗口和覆盖层向用户提供额外信息。
- en: Popups and overlays
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出窗口和覆盖层
- en: There are different ways to capture the user’s attention in a web application.
    One of them is to show a pop-up dialog over the content of the page and prompt
    the user to act accordingly. Another way is displaying information as a notification
    in different parts of the page.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，有不同方式来吸引用户的注意力。其中一种是在页面内容上显示弹出对话框，并提示用户相应地采取行动。另一种方式是在页面的不同部分显示信息作为通知。
- en: 'Angular Material offers three different components for handling such cases:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material提供三个不同的组件来处理此类情况：
- en: '**Dialog** : A modal pop-up dialog that displays itself on top of the page
    content.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对话框**：一个模态弹出对话框，它显示在页面内容之上。'
- en: '**Badge** : A small circled indication to update the status of a UI element.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**徽章**：一个小圆形指示，用于更新UI元素的状态。'
- en: '**Snackbar** : An information message displayed at the bottom of a page that
    is visible briefly. Its purpose is to notify the user of the result of an action,
    such as saving a form.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Snackbar**：在页面底部显示的信息消息，短暂可见。其目的是通知用户操作的结果，例如保存表单。'
- en: We will learn how to use the preceding components in our e-shop application,
    starting with how to create a simple modal dialog.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何在我们的电子商务应用程序中使用前面的组件，从如何创建一个简单的模态对话框开始。
- en: Creating a confirmation dialog
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建确认对话框
- en: 'The dialog component is quite powerful and can easily be customized and configured.
    It is an ordinary Angular component with custom directives that force it to behave
    like a dialog. To explore the capabilities of the Angular Material dialog, we
    will use a confirmation dialog in the checkout guard to notify users about remaining
    items in their shopping carts:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框组件功能强大，可以轻松地进行自定义和配置。它是一个普通的 Angular 组件，带有自定义指令，强制其表现出对话框的行为。为了探索 Angular
    Material 对话框的功能，我们将在结账守卫中使用确认对话框来通知用户他们购物车中剩余的商品：
- en: 'Run the following Angular CLI command to create a new Angular component:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Angular CLI 命令以创建一个新的 Angular 组件：
- en: '[PRE56]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The preceding command will create an Angular component that will host our dialog.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个 Angular 组件，该组件将托管我们的对话框。
- en: 'Open the `checkout.component.ts` file and add the following `import` statements:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `checkout.component.ts` 文件并添加以下 `import` 语句：
- en: '[PRE57]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The Angular Material dialog component consists of many other components and
    directives. We choose to import the whole Angular module because it would not
    be convenient to import them all individually.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 对话框组件由许多其他组件和指令组成。我们选择导入整个 Angular 模块，因为单独导入它们将不太方便。
- en: 'Add the preceding imported classes in the `imports` array of the `@Component`
    decorator:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@Component` 装饰器的 `imports` 数组中添加前面导入的类：
- en: '[PRE58]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Open the `checkout.component.html` file and replace its content with the following
    HTML template:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `checkout.component.html` 文件并将其内容替换为以下 HTML 模板：
- en: '[PRE59]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The component template contains various directives and elements that belong
    to the Angular Material dialog component. The `mat-dialog-title` directive defines
    the title of the dialog, and the `<mat-dialog-content>` is the actual content.
    The `<mat-dialog-actions>` element defines the actions the dialog can perform
    and usually wraps button elements.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 组件模板包含属于 Angular Material 对话框组件的各种指令和元素。`mat-dialog-title` 指令定义对话框的标题，`<mat-dialog-content>`
    是实际内容。`<mat-dialog-actions>` 元素定义对话框可以执行的操作，通常包含按钮元素。
- en: 'A dialog must be triggered to be displayed on a page. Open the `checkout.guard.ts`
    file and add the following `import` statements:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对话框必须被触发才能在页面上显示。打开 `checkout.guard.ts` 文件并添加以下 `import` 语句：
- en: '[PRE60]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Inject the `MatDialog` service in the body of the `checkoutGuard` function:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `checkoutGuard` 函数的主体中注入 `MatDialog` 服务：
- en: '[PRE61]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Modify the assignment of the `confirmation` variable as follows:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式修改 `confirmation` 变量的赋值：
- en: '[PRE62]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: In the preceding snippet, we use the `MatDialog` service to display the checkout
    component. The `MatDialog` service accepts the type of component class representing
    the dialog as a parameter.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用 `MatDialog` 服务来显示结账组件。`MatDialog` 服务接受一个参数，该参数是表示对话框的组件类类型。
- en: The `open` method of the `MatDialog` service returns an `afterClosed` observable
    property, which will notify us when the dialog closes. The observable emits any
    value that is sent back from the dialog.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`MatDialog` 服务的 `open` 方法返回一个 `afterClosed` 可观察属性，它将在对话框关闭时通知我们。该可观察对象会发出从对话框发送回的任何值。'
- en: Later in the chapter, we will learn how to return a boolean value from the dialog
    component that matches the type returned by the `CanDeactivateFn` function.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将学习如何从对话框组件返回一个布尔值，该值与 `CanDeactivateFn` 函数返回的类型相匹配。
- en: 'We can now verify that the dialog component works as expected by executing
    the following steps:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过执行以下步骤来验证对话框组件是否按预期工作：
- en: Run the application using the `ng serve` command and navigate to `http://localhost:4200`
    .
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ng serve` 命令运行应用程序并导航到 `http://localhost:4200` 。
- en: Log in to the application.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录应用程序。
- en: Select a product from the list and add it to the shopping cart.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择一个产品并将其添加到购物车。
- en: Repeat the preceding step to add more products to the cart.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上述步骤以向购物车添加更多产品。
- en: 'Navigate to the shopping cart and then click the back button of the browser
    or any of the application links to leave the cart. The following dialog will be
    displayed on the screen:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到购物车，然后点击浏览器的后退按钮或任何应用程序链接以离开购物车。屏幕上将会显示以下对话框：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_14.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像，屏幕截图，字体  自动生成的描述](img/B21418_12_14.png)'
- en: 'Figure 12.14: Checkout dialog component'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14：结账对话框组件
- en: We could improve the application’s UX further by displaying information on the
    dialog about the number of items we have added to the shopping cart. In the following
    section, we will learn how to pass data in the dialog and display the number of
    shopping cart items.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在对话框中显示我们添加到购物车中的项目数量来进一步改善应用程序的 UX。在下一节中，我们将学习如何在对话框中传递数据并显示购物车项目数量。
- en: Configuring dialogs
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置对话框
- en: In a real-world scenario, you will probably need to create a reusable component
    to display a dialog in an Angular project. The component may end up in an Angular
    library as a package. Therefore, you should configure the dialog component to
    accept data dynamically.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景中，你可能会需要创建一个可重用的组件来在 Angular 项目中显示对话框。该组件最终可能成为 Angular 库中的一个包。因此，你应该配置对话框组件以动态接受数据。
- en: 'In the current Angular project, we would like to display the number of products
    that we have added to the shopping cart:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的 Angular 项目中，我们希望显示我们添加到购物车中的产品数量：
- en: 'Open the `checkout.component.ts` file and modify the `import` statements as
    follows:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `checkout.component.ts` 文件，并按如下方式修改 `import` 语句：
- en: '[PRE63]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Inject `MAT_DIALOG_DATA` in the `CheckoutComponent` class in the following
    way:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以以下方式在 `CheckoutComponent` 类中注入 `MAT_DIALOG_DATA`：
- en: '[PRE64]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The `MAT_DIALOG_DATA` is an injection token that enables us to pass arbitrary
    data to the dialog component. The `data` variable will contain any data we pass
    to the dialog when we call its `open` method.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`MAT_DIALOG_DATA` 是一个注入令牌，它使我们能够将任意数据传递给对话框组件。当调用其 `open` 方法时，`data` 变量将包含我们传递给对话框的任何数据。'
- en: 'Open the `checkout.component.html` file and add the `data` property to the
    inner text of the `<span>` HTML element:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `checkout.component.html` 文件，并将 `data` 属性添加到 `<span>` HTML 元素的内部文本：
- en: '[PRE65]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Open the `checkout.guard.ts` file and set the `data` property in the dialog
    configuration object, which is the second parameter of the `open` method:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `checkout.guard.ts` 文件，并在对话框配置对象中设置 `data` 属性，这是 `open` 方法的第二个参数：
- en: '[PRE66]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If we try to leave the cart page while running the application, we will get
    a dialog similar to the following:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在运行应用程序时尝试离开购物车页面，我们将得到一个类似于以下对话框：
- en: '![Εικόνα που περιέχει κείμενο, στιγμιότυπο οθόνης, γραμματοσειρά  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_15.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像，屏幕截图，字体  自动生成的描述](img/B21418_12_15.png)'
- en: 'Figure 12.15: Checkout dialog component with custom data'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15：带有自定义数据的结账对话框组件
- en: The buttons of the dialog component don’t do anything specific yet. In the following
    section, we will learn how to configure them and return data to the guard.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框组件的按钮目前还没有做任何特定的事情。在下一节中，我们将学习如何配置它们并将数据返回给守卫。
- en: Getting data from dialogs
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从对话框获取数据
- en: 'The Angular Material dialog module exposes the `mat-dialog-close` directive
    that we can use to configure which button will close the dialog. Open the `checkout.component.html`
    file and add the `mat-dialog-close` directive to both buttons:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material 对话框模块公开了 `mat-dialog-close` 指令，我们可以使用它来配置哪个按钮将关闭对话框。打开 `checkout.component.html`
    文件，并将 `mat-dialog-close` 指令添加到两个按钮：
- en: '[PRE67]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the preceding snippet, we use the `mat-dialog-close` directive in two ways:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们以两种方式使用 `mat-dialog-close` 指令：
- en: Without passing a value in the `Yes` button, the dialog will return `true` as
    a default value, allowing the guard to navigate away from the shopping cart page.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在 `Yes` 按钮中不传递值，对话框将默认返回 `true`，允许守卫从购物车页面导航离开。
- en: With property binding in the `No` button, we pass `false` as a value to cancel
    the navigation from the guard.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `No` 按钮的属性绑定中，我们传递 `false` 作为值以取消从守卫处的导航。
- en: 'Execute the following steps to verify that the dialog behavior is correct:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以验证对话框行为是否正确：
- en: Run the `ng serve` command to start the application and navigate to `http://localhost:4200`
    .
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ng serve` 命令以启动应用程序并导航到 `http://localhost:4200` 。
- en: Log in to the application.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到应用程序。
- en: Select a product from the list and add it to the cart.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择一个产品并将其添加到购物车。
- en: Click the **My Cart** link to navigate to the shopping cart.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**My Cart**链接以导航到购物车。
- en: Click the **Products** link, select **No** in the checkout dialog, and verify
    that the application stays on the shopping cart page.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结账对话框中选择**No**，然后单击**Products**链接，并验证应用程序是否停留在购物车页面上。
- en: Click the **Products** link again, select **Yes** in the dialog, and you should
    navigate to the product list.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次单击**Products**链接，在对话框中选择**Yes**，你应该会导航到产品列表。
- en: Dialogs are a great feature of Angular Material that can give your applications
    powerful capabilities. In the following section, we will explore the badge and
    snackbar components for notifying the user when a product is added to the shopping
    cart.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框是Angular Material的一个优秀功能，可以为您的应用程序提供强大的功能。在下一节中，我们将探讨徽章和Snackbar组件，以便在产品添加到购物车时通知用户。
- en: Displaying user notifications
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示用户通知
- en: The Angular Material library enforces patterns and behaviors that improve the
    application’s UX. One aspect of the application UX concerns providing notifications
    to users upon specific actions. Angular Material gives us the badge and the snackbar
    components we can use in this case.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Material库强制执行提高应用程序UX的模式和行为。应用程序UX的一个方面是，在特定操作后向用户提供通知。Angular Material为我们提供了在这种情况下可以使用的徽章和Snackbar组件。
- en: Applying badges
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用徽章
- en: 'The badge component is a circle positioned on top of another element and usually
    displays a number. We will learn how to apply badges by displaying the number
    of shopping cart items in the **My Cart** application link:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 徽章组件是一个位于另一个元素顶部的圆形，通常显示一个数字。我们将学习如何通过在**My Cart**应用程序链接中显示购物车项目数量来应用徽章：
- en: 'Open the `app.component.ts` file and add the following `import` statements:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.ts`文件并添加以下`import`语句：
- en: '[PRE68]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The `MatBadge` class exports the badge component. The `CartService` class will
    provide us with the number of items in the shopping cart.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`MatBadge`类导出徽章组件。`CartService`类将为我们提供购物车中的项目数量。'
- en: 'Add the `MatBadge` class in the `imports` array of the `@Component` decorator:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加`MatBadge`类：
- en: '[PRE69]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Inject the `CartService` class in the `AppComponent` class:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AppComponent`类中注入`CartService`类：
- en: '[PRE70]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Open the `app.component.html` file and add the `matBadge` directive to the
    `My Cart` button:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.html`文件并将`matBadge`指令添加到`My Cart`按钮：
- en: '[PRE71]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the preceding snippet, the `matBadge` directive indicates the number displayed
    in the badge. In this case, we bind it with the `length` of the `products` array
    that exists in the current shopping cart.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`matBadge`指令指示徽章中显示的数字。在这种情况下，我们将其绑定到当前购物车中存在的`products`数组的`length`。
- en: 'Open the `app.component.css` file and add the following CSS style:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app.component.css`文件并添加以下CSS样式：
- en: '[PRE72]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The preceding style will add space around each application link so that buttons
    do not overlap with the badge component.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 上述样式将为每个应用程序链接周围添加空间，以便按钮不会与徽章组件重叠。
- en: 'Run the `ng serve` command to start the application and add some products to
    the shopping cart. Notice that the badge icon updates its value when products
    are added to the cart; here’s an example:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令以启动应用程序并向购物车添加一些产品。注意，当产品添加到购物车时，徽章图标会更新其值；以下是一个示例：
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, στιγμιότυπο οθόνης, λογότυπο  Περιγραφή
    που δημιουργήθηκε αυτόματα](img/B21418_12_16.png)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、字体、屏幕截图、徽标的图片，自动生成的描述](img/B21418_12_16.png)'
- en: 'Figure 12.16: Badge component'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.16：徽章组件
- en: Applying a snackbar
  id: totrans-400
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用Snackbar
- en: 'Another good UX pattern when we work with CRUD applications is to display a
    notification when an action has been completed. We can apply such a pattern by
    displaying a notification when a product is added to the shopping cart. We will
    use the snackbar component of the Angular Material to show the notification:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们与CRUD应用程序一起工作时，另一个好的UX模式是在操作完成后显示通知。我们可以通过在产品添加到购物车时显示通知来应用这种模式。我们将使用Angular
    Material的Snackbar组件来显示通知：
- en: 'Open the `product-detail.component.ts` file and add the following `import`
    statement:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-detail.component.ts`文件并添加以下`import`语句：
- en: '[PRE73]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The snackbar is not an actual Angular component like all the Angular Material
    components we have seen. It is an Angular service named `MatSnackBar` and can
    be used by importing the `MatSnackBarModule` class into our components.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: Snackbar不是一个像我们之前看到的所有Angular Material组件的实际Angular组件。它是一个名为`MatSnackBar`的Angular服务，可以通过将`MatSnackBarModule`类导入我们的组件来使用。
- en: 'Add the `MatSnackBarModule` class in the `imports` array of the `@Component`
    decorator:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`装饰器的`imports`数组中添加`MatSnackBarModule`类：
- en: '[PRE74]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Inject the `MatSnackBar` service into the `constructor` of the `ProductDetailComponent`
    class:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MatSnackBar`服务注入到`ProductDetailComponent`类的`constructor`中：
- en: '[PRE75]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Modify the `addToCart` method to display a snackbar when the product is added
    to the cart:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`addToCart`方法，当产品添加到购物车时显示一个通知栏：
- en: '[PRE76]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'In the preceding method, we use the `open` method of the `MatSnackBar` service
    to display a snackbar. The `open` method accepts three parameters: the message
    we want to display, any action we want to take when the snackbar is dismissed,
    and a configuration object. The configuration object enables us to set various
    options, such as the `duration` for which the snackbar will be visible in milliseconds.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，我们使用`MatSnackBar`服务的`open`方法来显示一个通知栏。`open`方法接受三个参数：我们想要显示的消息，当通知栏被关闭时我们想要采取的操作，以及一个配置对象。配置对象使我们能够设置各种选项，例如通知栏在毫秒数内的可见`duration`。
- en: We do not pass a parameter for the action because we do not want to react when
    the snackbar is dismissed.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有传递操作参数，因为我们不希望在通知栏被关闭时做出反应。
- en: Run the `ng serve` command to start the application and select a product from
    the list.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`命令以启动应用程序并从列表中选择一个产品。
- en: 'Ensure you are logged in and click the **Add to cart** button. The following
    notification message will be displayed at the bottom of the page:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已登录并点击**添加到购物车**按钮。以下通知信息将在页面底部显示：
- en: '![Εικόνα που περιέχει κείμενο, γραμματοσειρά, στιγμιότυπο οθόνης, ορθογώνιο
    παραλληλόγραμμο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B21418_12_17.png)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本、字体、屏幕截图、矩形框的图片，自动生成的描述](img/B21418_12_17.png)'
- en: 'Figure 12.17: Snackbar component'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17：Snackbar组件
- en: The position of the snackbar can be changed from the configuration options.
    Read more at [https://material.angular.io/components/snack-bar/overview](https://material.angular.io/components/snack-bar/overview)
    .
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过配置选项更改通知栏的位置。更多信息请参阅[https://material.angular.io/components/snack-bar/overview](https://material.angular.io/components/snack-bar/overview)。
- en: In this section, we learned to use pop-up models and notification overlays to
    enhance the application UX and provide a great workflow to our users.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用弹出模型和通知覆盖来增强应用程序的用户体验，并为用户提供一个出色的工作流程。
- en: Summary
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the basics of the Material Design system. We put
    most of our focus on Angular Material, the Material Design implementation meant
    for Angular, and how it consists of different components. We looked at a hands-on
    explanation of how to install it, set it up, and use some of its core components
    and themes.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Material Design系统的基本知识。我们主要关注Angular Material，这是为Angular设计的Material
    Design实现，以及它由不同的组件组成。我们查看了一个关于如何安装它、设置它以及使用其核心组件和主题的动手说明。
- en: Hopefully, you will have read this chapter and found that you now grasp Material
    Design in general and Angular Material in particular and can determine whether
    it is a good match for your next Angular application.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您已经阅读了这一章，并发现您现在已经掌握了Material Design的一般知识，特别是Angular Material，并且可以确定它是否适合您的下一个Angular应用程序。
- en: Web applications must be testable to ensure they are functional and in accordance
    with the application requirements. In the next chapter, we will learn how to apply
    different testing techniques in Angular applications.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序必须是可测试的，以确保它们的功能性和符合应用程序要求。在下一章中，我们将学习如何在Angular应用程序中应用不同的测试技术。
