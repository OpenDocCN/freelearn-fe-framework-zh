["```js\ngit clone https://github.com/PacktPublishing/React-Application-Architecture-for-Production.git\n```", "```js\nnpm install\n```", "```js\ncp .env.example .env\n```", "```js\nnpm run stage:switch\n```", "```js\n? What stage do you want to switch to? (Use arrow\n keys)\n❯ chapter-02\n  chapter-03\n  chapter-03-start\n  chapter-04\n  chapter-04-start\n  chapter-05\n  chapter-05-start\n(Move up and down to reveal more choices)\n```", "```js\nnpx msw init public/ --save\n```", "```js\nimport { setupWorker } from 'msw';\nimport { handlers } from './handlers';\nexport const worker = setupWorker(...handlers);\n```", "```js\nimport { setupServer } from 'msw/node';\nimport { handlers } from './handlers';\nexport const server = setupServer(...handlers);\n```", "```js\nimport { IS_SERVER } from '@/config/constants';\nconst initializeMocks = () => {\n  if (IS_SERVER) {\n    const { server } = require('./server');\n    server.listen();\n  } else {\n    const { worker } = require('./browser');\n    worker.start();\n  }\n};\ninitializeMocks();\n```", "```js\nimport { MSWDevTools } from 'msw-devtools';\nimport { ReactNode } from 'react';\nimport { IS_DEVELOPMENT } from '@/config/constants';\nimport { db, handlers } from '@/testing/mocks';\nexport type MSWWrapperProps = {\n  children: ReactNode;\n};\nrequire('@/testing/mocks/initialize');\nexport const MSWWrapper = ({\n  children,\n}: MSWWrapperProps) => {\n  return (\n    <>\n      {IS_DEVELOPMENT && (\n        <MSWDevTools db={db} handlers={handlers} />\n      )}\n      {children}\n    </>\n  );\n};\n```", "```js\nimport dynamic from 'next/dynamic';\nimport { API_MOCKING } from '@/config/constants';\nimport { MSWWrapperProps } from '@/lib/msw';\n```", "```js\nconst MSWWrapper = dynamic<MSWWrapperProps>(() =>\n  import('@/lib/msw').then(({ MSWWrapper }) => MSWWrapper)\n);\n```", "```js\nreturn (\n    <AppProvider>\n      {API_MOCKING ? (\n        <MSWWrapper>{pageContent}</MSWWrapper>\n      ) : (\n        pageContent\n      )}\n    </AppProvider>\n  );\n```", "```js\nimport { rest } from 'msw';\nimport { API_URL } from '@/config/constants';\nexport const handlers = [\n  rest.get(`${API_URL}/healthcheck`, (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({ healthy: true })\n    );\n  }),\n];\n```", "```js\nimport { factory, primaryKey } from '@mswjs/data';\nimport { uid } from '@/utils/uid';\nconst models = {\n  user: {\n    id: primaryKey(uid),\n    createdAt: Date.now,\n    email: String,\n    password: String,\n    organizationId: String,\n  },\n  organization: {\n    id: primaryKey(uid),\n    createdAt: Date.now,\n    adminId: String,\n    name: String,\n    email: String,\n    phone: String,\n    info: String,\n  },\n  job: {\n    id: primaryKey(uid),\n    createdAt: Date.now,\n    organizationId: String,\n    position: String,\n    info: String,\n    location: String,\n    department: String,\n  },\n};\nexport const db = factory(models);\n```", "```js\ndb.job.findFirst\ndb.job.findMany\ndb.job.create\ndb.job.update\ndb.job.delete\n```", "```js\nimport { db } from './db';\nimport { testData } from '../test-data';\nexport const seedDb = () => {\n  const userCount = db.user.count();\n  if (userCount > 0) return;\n  testData.users.forEach((user) => db.user.create(user));\n  testData.organizations.forEach((organization) =>\n    db.organization.create(organization)\n  );\n  testData.jobs.forEach((job) => db.job.create(job));\n};\n```", "```js\nimport { IS_SERVER } from '@/config/constants';\nimport { seedDb } from './seed-db';\nconst initializeMocks = () => {\n  if (IS_SERVER) {\n    const { server } = require('./server');\n    server.listen();\n  } else {\n    const { worker } = require('./browser');\n    worker.start();\n  }\n  seedDb();\n};\ninitializeMocks();\n```", "```js\nimport { rest } from 'msw';\nimport { API_URL } from '@/config/constants';\nimport { authHandlers } from './auth';\nimport { jobsHandlers } from './jobs';\nimport { organizationsHandlers } from './organizations';\nexport const handlers = [\n  ...authHandlers,\n  ...jobsHandlers,\n  ...organizationsHandlers,\n  rest.get(`${API_URL}/healthcheck`, (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({ healthy: true })\n    );\n  }),\n];\n```", "```js\nimport { rest } from 'msw';\nimport { API_URL } from '@/config/constants';\nimport {\n  authenticate,\n  requireAuth,\n  AUTH_COOKIE,\n} from '../utils';\n```", "```js\nconst loginHandler = rest.post(\n  `${API_URL}/auth/login`,\n  async (req, res, ctx) => {\n    const credentials = await req.json();\n    const { user, jwt } = authenticate(credentials);\n    return res(\n      ctx.delay(300),\n      ctx.cookie(AUTH_COOKIE, jwt, {\n        path: '/',\n        httpOnly: true,\n      }),\n      ctx.json({ user })\n    );\n  }\n);\n```", "```js\nconst logoutHandler = rest.post(\n  `${API_URL}/auth/logout`,\n  async (req, res, ctx) => {\n    return res(\n      ctx.delay(300),\n      ctx.cookie(AUTH_COOKIE, '', {\n        path: '/',\n        httpOnly: true,\n      }),\n      ctx.json({ success: true })\n    );\n  }\n);\n```", "```js\nconst meHandler = rest.get(\n  `${API_URL}/auth/me`,\n  async (req, res, ctx) => {\n    const user = requireAuth({ req, shouldThrow: false });\n    return res(ctx.delay(300), ctx.json(user));\n  }\n);\n```", "```js\nexport const authHandlers = [\n  loginHandler,\n  logoutHandler,\n  meHandler,\n];\n```", "```js\nimport { rest } from 'msw';\nimport { API_URL } from '@/config/constants';\nimport { db } from '../db';\nimport { requireAuth } from '../utils';\n```", "```js\nconst getJobsHandler = rest.get(\n  `${API_URL}/jobs`,\n  async (req, res, ctx) => {\n    const organizationId = req.url.searchParams.get(\n      'organizationId'\n    ) as string;\n    const jobs = db.job.findMany({\n      where: {\n        organizationId: {\n          equals: organizationId,\n        },\n      },\n    });\n    return res(\n      ctx.delay(300),\n      ctx.status(200),\n      ctx.json(jobs)\n    );\n  }\n);\n```", "```js\nconst getJobHandler = rest.get(\n  `${API_URL}/jobs/:jobId`,\n  async (req, res, ctx) => {\n    const jobId = req.params.jobId as string;\n    const job = db.job.findFirst({\n      where: {\n        id: {\n          equals: jobId,\n        },\n      },\n    });\n    if (!job) {\n      return res(\n        ctx.delay(300),\n        ctx.status(404),\n        ctx.json({ message: 'Not found!' })\n      );\n    }\n    return res(\n      ctx.delay(300),\n      ctx.status(200),\n      ctx.json(job)\n    );\n  }\n);\n```", "```js\nconst createJobHandler = rest.post(\n  `${API_URL}/jobs`,\n  async (req, res, ctx) => {\n    const user = requireAuth({ req });\n    const jobData = await req.json();\n    const job = db.job.create({\n      ...jobData,\n      organizationId: user?.organizationId,\n    });\n    return res(\n      ctx.delay(300),\n      ctx.status(200),\n      ctx.json(job)\n    );\n  }\n);\n```", "```js\nexport const jobsHandlers = [\n  getJobsHandler,\n  getJobHandler,\n  createJobHandler,\n];\n```", "```js\nimport { rest } from 'msw';\nimport { API_URL } from '@/config/constants';\nimport { db } from '../db';\n```", "```js\nconst getOrganizationHandler = rest.get(\n  `${API_URL}/organizations/:organizationId`,\n  (req, res, ctx) => {\n    const organizationId = req.params\n      .organizationId as string;\n    const organization = db.organization.findFirst({\n      where: {\n        id: {\n          equals: organizationId,\n        },\n      },\n    });\n    if (!organization) {\n      return res(\n        ctx.status(404),\n        ctx.json({ message: 'Not found!' })\n      );\n    }\n    return res(\n      ctx.delay(300),\n      ctx.status(200),\n      ctx.json(organization)\n    );\n  }\n);\n```", "```js\nexport const organizationsHandlers = [\n  getOrganizationHandler,\n];\n```"]