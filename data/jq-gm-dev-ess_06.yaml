- en: Chapter 6. Adding Levels to Your Games
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。向你的游戏添加关卡
- en: Until now all of our games have had only one level. This is nice for a demo
    or a proof of concept, but you probably want to have many levels in your game.
    As always there are many ways to do this, but most of them are based on the idea
    that each of your levels are described by their own file (or files).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的游戏都只有一个关卡。这对于演示或概念验证来说很好，但你可能希望在游戏中有很多关卡。和往常一样，有很多方法可以做到这一点，但其中大多数都基于这样一个想法：每个关卡都由它们自己的文件（或文件）描述。
- en: We will begin this chapter by quickly exploring the different ways to combine
    files to create your game. We will then look at the jQuery functions that allow
    such techniques.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章开始时快速探讨不同的文件组合方式来创建你的游戏。然后我们将查看允许这种技术的 jQuery 函数。
- en: Finally, we will take the game we developed in [Chapter 4](ch04.html "Chapter 4. Looking
    Sideways"), *Looking Sideways*, and extend it to include three levels by implementing
    some of the techniques described beforehand.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将把我们在[第 4 章](ch04.html "第 4 章。横向查看")中开发的游戏，*横向查看*，扩展到包括三个关卡，通过实现之前描述的一些技术。
- en: 'The following is a quick list of the topics we will cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章我们将涵盖的主题的快速列表：
- en: Using multiple files for your game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个文件来构建你的游戏
- en: Loading files with `$.ajax`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `$.ajax` 加载文件
- en: Executing remote JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行远程 JavaScript
- en: Adding a new level to our game
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向我们的游戏添加新关卡
- en: Implementing a multi-file game
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现多文件游戏
- en: The first thing you have to ask yourself is, "When are the other files loaded?"
    The classical approach is to have simple levels and load the next one at the end
    of the previous one. This is the typical scenario for a platform game.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先要问自己的问题是，“其他文件何时加载？” 传统的方法是有简单的关卡，并在前一个关卡结束时加载下一个。这是平台游戏的典型情景。
- en: Another approach is to have one big level and load a sublevel when you reach
    a given point. Typically, in an RPG the big level would be the outside world and
    the sublevel would be the inside of buildings. In both of these examples, the
    loading of the file doesn't need to be done asynchronously.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是有一个大的关卡，并在到达给定点时加载子关卡。通常，在 RPG 中，大关卡将是外部世界，而子关卡将是建筑物内部。在这两个示例中，文件的加载不需要异步执行。
- en: The last common approach is to have a single very large level made of many sublevels.
    This is typically what you have for MMORPG. Here you need to load the files asynchronously
    so that the player doesn't notice that the sublevel has to be loaded.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个常见的方法是拥有一个由许多子关卡组成的单个非常大的关卡。这通常是 MMORPG 的情况。在这里，你需要异步加载文件，以便玩家不会注意到必须加载子关卡。
- en: 'The challenge you will face depends greatly on which of the aforementioned
    situations you find yourself in. They can be divided as follows: loading a tile
    map, a sprite, and loading a logic behavior.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将面临的挑战取决于你处于上述哪种情况。它们可以分为以下几类：加载瓦片地图、精灵、加载逻辑行为。
- en: Loading tile maps
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载瓦片地图
- en: 'If you remember, in [Chapter 5](ch05.html "Chapter 5. Putting Things into Perspective"),
    *Putting Things into Perspective*, we loaded the tile map in the form of a JSON
    file. As we explained earlier, we load a JSON file that holds the description
    of the tile map. To do this, we use the basic AJAX function in jQuery: `$.ajax()`.
    We will later see all the details about using this function.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，在[第 5 章](ch05.html "第 5 章。透视")中，*透视*，我们加载了以 JSON 文件形式的瓦片地图。正如我们之前解释的那样，我们加载一个包含瓦片地图描述的
    JSON 文件。为此，我们使用 jQuery 中的基本 AJAX 函数：`$.ajax()`。稍后我们将看到如何使用此函数的所有细节。
- en: However, simply loading a tile map is often not enough to describe your level
    entirely. You may want to specify where the end of the level is, what are the
    areas that will kill the player, and so on. One common technique is to use a secondary
    tile map, one that is invisible and holds tiles that adds meaning to the other
    tile map.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅加载瓦片地图通常不足以完全描述你的关卡。你可能想要指定关卡结束的位置，哪些区域会杀死玩家，等等。一种常见的技术是使用第二个瓦片地图，一个不可见的瓦片地图，它包含为另一个瓦片地图添加含义的瓦片。
- en: 'The following figure shows an example of this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示是一个示例：
- en: '![Loading tile maps](img/5060OT_06_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![加载瓦片地图](img/5060OT_06_01.jpg)'
- en: 'This has several advantages:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这有几个优点：
- en: You can easily give the same semantic meaning to different tiles. For example,
    tiles with or without grass can represent the ground and interact in the exact
    same way with the player.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以轻松地给不同的瓦片赋予相同的语义含义。例如，有或没有草的瓦片可以表示地面，并且与玩家的交互方式完全相同。
- en: You can give the same semantic meaning to tiles of two levels that use completely
    different tile sets. This way you don't really have to worry about what images
    are used in your levels as long as they use the same logic tiles to model it.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以为使用完全不同瓦片集的两个级别的瓦片赋予相同的语义含义。这样，只要它们使用相同的逻辑瓦片来建模，您就不必真正担心在您的级别中使用了什么图像。
- en: 'Implementing this isn''t really hard. The following code shows the changes
    in the `gf.addTilemap` function:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这并不是真正困难的。下面的代码显示了`gf.addTilemap`函数的更改：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we simply add a flag to indicate if the tile maps are here for
    a logical purpose. If so, we don't need to create any tiles in it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们只是添加了一个标志来指示瓦片地图是否是为了逻辑目的。如果是这样，我们就不需要在其中创建任何瓦片。
- en: 'The collision detection function is now slightly modified too. In the case
    of a logical tile map we can''t simply return the divs. Instead, we will return
    an object literal containing the size, position, and type of the colliding tiles.
    The following code extract shows exactly this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞检测函数现在也略有修改。在逻辑瓦片地图的情况下，我们不能简单地返回 divs。相反，我们将返回一个包含碰撞瓦片的大小、位置和类型的对象文字。下面的代码片段显示了这一点：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once this feature is implemented, it becomes very easy to load the level. Indeed,
    as long as the logical tile map is present and the game's code knows how to react
    to each tile, we don't need anything more to make the player react to its environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实现了这个功能，加载关卡就变得非常容易了。事实上，只要逻辑瓦片地图存在并且游戏代码知道如何对每个瓦片做出反应，我们就不需要任何额外的东西让玩家对其环境做出反应。
- en: Loading sprites and their behavior
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载精灵及其行为
- en: If loading a tile map from a different file is pretty straightforward, there
    are plenty of ways to do the same for the sprites that a level contains.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从不同文件加载瓦片地图相当简单，那么对于关卡包含的精灵，有很多方法可以做同样的事情。
- en: 'You can implement an interpreter for a JSON file that will in turn create and
    configure the enemies and NPCs. This has the advantage that you could merge this
    JSON and the one describing the tile map. This way you would only need to load
    one file instead of two. As there''s a pretty big overhead for each file you load,
    the size of the file has little impact; in most situations it will make your level
    load faster. The following diagram illustrates this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为一个 JSON 文件实现一个解释器，该解释器将依次创建和配置敌人和 NPC。这样做的好处是，您可以合并这个 JSON 和描述瓦片地图的 JSON。这样您只需要加载一个文件而不是两个文件。由于每个加载的文件都有相当大的开销，因此文件的大小几乎没有影响；在大多数情况下，它将使您的关卡加载更快。下图说明了这一点：
- en: '![Loading sprites and their behavior](img/5060OT_06_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![加载精灵及其行为](img/5060OT_06_02.jpg)'
- en: 'It has some disadvantages too: first your engine has to be written to understand
    every possible behavior you may want your enemies to adopt. It means that if you
    have a kind of enemy that is used only once in the tenth level of the game, you
    will still need to load its implementation at the same time you load the game
    at startup. If you work in a team and the other members want to implement their
    own type of enemy, they will need to modify the engine instead of just working
    on their level.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它也有一些缺点：首先，您的引擎必须被编写成理解您希望您的敌人采取的所有可能行为。这意味着，如果您有一种仅在游戏的第十关中使用的敌人，您仍然需要在启动时加载其实现。如果您在一个团队中工作，其他成员想要实现自己类型的敌人，他们将需要修改引擎而不仅仅是在他们的关卡上工作。
- en: 'You will also need to be really careful to specify a JSON format that covers
    all your needs or you run the risk of having to refactor a big part of your game
    later on. The following code is an example of how such a JSON file might look
    like the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要非常小心地指定一个涵盖所有需求的 JSON 格式，否则您将有可能在以后不得不重构游戏的大部分内容。下面的代码是这样一个 JSON 文件的示例：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another possible implementation is to load a complete script that will in turn
    create the enemies and configure them. This has the advantage of making your game
    more modular and loosening the coupling between the game and the levels.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能的实现是加载一个完整的脚本，该脚本将依次创建敌人并配置它们。这样做的好处是使您的游戏更具模块化，并减少了游戏与关卡之间的耦合。
- en: It has several disadvantages though. First, if you're not careful, the code
    of your level has the potential to override some of your main game variables.
    This will create bugs that are quite difficult to track and will depend on the
    order the levels have been loaded. Secondly, you will have to be extra careful
    with choosing your variable scope as each newly loaded level's code is executed
    in the global scope.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它有一些缺点。首先，如果你不小心，你的级别代码有可能覆盖一些主要游戏变量。这将创建相当难以跟踪的错误，并且将依赖于级别加载的顺序。其次，你必须特别小心地选择你的变量范围，因为每次加载新级别的代码都是在全局范围内执行的。
- en: In the example given in this chapter, we will choose the second solution because
    it makes sense for a small game and is quite flexible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中给出的示例中，我们将选择第二种解决方案，因为对于一个小游戏来说，这是比较合理且相当灵活的。
- en: No matter which of those you choose to implement, you will most likely use `$.ajax`
    or one of its aliases. In the next section, we will take a detailed look at it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择实现哪一个，你很可能将使用`$.ajax`或其别名之一。在下一节中，我们将对其进行详细介绍。
- en: Using $.ajax
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`$.ajax`
- en: 'The `$.ajax` function is a very powerful, but low-level function. It has many
    aliases that can be used for different specific tasks:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.ajax`函数是一个非常强大但低级的函数。它有许多别名，可用于不同的特定任务：'
- en: '`$.get` is a multi-purpose alias that reduces the number of options in comparison
    with `$.ajax` and has an API based on multiple optional parameters instead of
    a single object literal. It always loads files asynchronously.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.get`是一个多用途别名，与`$.ajax`相比减少了选项的数量，并且其API是基于多个可选参数而不是单个对象文字。它总是以异步方式加载文件。'
- en: '`$.getJSON` is a function used to load a JSON file asynchronously.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.getJSON`是一个用于异步加载JSON文件的函数。'
- en: '`$.getScript` is a function that loads a script asynchronously and then executes
    it.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.getScript`是一个以异步方式加载脚本并且执行的函数。'
- en: '`$.load` is a function that loads an HTML file asynchronously and injects its
    content in the selected element.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.load`是一个以异步方式加载HTML文件并将其内容注入到所选元素中的函数。'
- en: '`$.post` is similar to `$.get`, but uses a post request.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$.post`类似于`$.get`，但使用了post请求。'
- en: 'As you can see all these aliases have one thing in common: they all load their
    files asynchronously. This means that if you rather load your resource synchronously,
    you are back to using `$.ajax`. However, be reassured it''s not really more complicated
    than the aliases once you know the right parameters. Furthermore, the API documentation
    for the aliases always include the exact parameter to use for an `$.ajax` call
    to have the same effect.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，所有这些别名都有一个共同点：它们都以异步方式加载它们的文件。这意味着如果您更喜欢同步加载资源，您将需要使用`$.ajax`。但是，一旦您知道了正确的参数，你稍后会看到它实际上并没有比别名更复杂。此外，别名的API文档始终包括要用于`$.ajax`调用的确切参数以产生相同的效果。
- en: When using `$.ajax`, you have to make sure that you access the files through
    a server and that you respect the same-origin policy. Otherwise, you will likely
    run into problems on most browsers. To learn more about `$.ajax` you should look
    at the official jQuery API documentation ([http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`$.ajax`时，你必须确保通过服务器访问文件，并且遵守同源策略。否则，在大多数浏览器上，你可能会遇到问题。要了解有关`$.ajax`的更多信息，您应该查看官方jQuery
    API文档（[http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/)）。
- en: Loading a JSON file
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载一个JSON文件
- en: JSON files are a very convenient way to load external data without having to
    parse it yourself. Once loaded, a JSON file is typically stored in a simple JavaScript
    object. Then you can simply look up its properties to access the data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文件是一种非常方便的加载外部数据的方式，无需自行解析。一旦加载，JSON文件通常存储在一个简单的JavaScript对象中。然后你只需查找其属性就能访问数据。
- en: 'If you want to mimic a call to `$.getJSON` with `$.ajax` it will look something
    like the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想用`$.ajax`模拟对`$.getJSON`的调用，它看起来会像下面的代码：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `url` is the web address of the JSON file, `data` is an optional list
    of parameters you may want to pass to the server, and `success` is the callback
    that will handle the JSON file once it's loaded. If you want to access the remote
    file synchronously, you have to add the parameter `async` `:` `false` to the call.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`url`是JSON文件的Web地址，`data`是您可能希望传递到服务器的可选参数列表，`success`是在加载JSON文件后将处理它的回调函数。如果你想同步访问远程文件，你必须在调用中添加参数`async`
    `:` `false`。
- en: 'It''s in the callback that you will decide what to do with the JSON file; it
    will have the following signature:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它是在回调函数中你将决定如何处理JSON文件；它将具有以下签名：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, `data` holds the object generated from the JSON file. What you will do
    with it really depends on your use case; here is a short version of the code that
    imports the tile maps generated by Tiled:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`data`保存着从JSON文件生成的对象。你将如何处理它，这实际上取决于你的用例；这里是一个导入Tiled生成的地图图块的代码的简短版本：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The highlighted part is quite typical. Indeed, most non-trivial JSON will hold
    an array of elements to make it possible to describe any number of similar entities.
    When you are not the designer of the JSON file specification, you may find yourself
    in the situation where you have to convert the content of the JSON object to your
    own data structure. That's exactly what this code does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮部分是相当典型的。实际上，大多数复杂的JSON都将包含一系列元素，以便描述任意数量的类似实体。当您不是JSON文件规范的设计者时，您可能会发现自己处于这样一种情况：您必须将JSON对象的内容转换为自己的数据结构。这段代码正是这样做的。
- en: There is no general approach here and you really have to consider each situation
    individually. The nice thing is that in most cases this piece of code is executed
    only a few times during the game and therefore, is not sensible with regard to
    performances. You're better off making it as readable as possible rather than
    searching all the places where you can make it run faster.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有通用的方法，你真的必须考虑每种情况。好处是，在大多数情况下，这段代码只会在游戏中执行几次，因此，性能方面并不敏感。与其在所有地方搜索可以使其运行更快的地方，还不如使其尽可能易读。
- en: Loading a remote script
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载远程脚本
- en: 'If you want to mimic the usage of `$.getScript` with `$.ajax`, it will look
    something like the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要用`$.ajax`来模仿`$.getScript`的用法，看起来会像下面这样：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As we did earlier, you can make it synchronous simply by adding `async : false`
    to the list of parameters. This will do two things: load the script and execute
    it. The callback is not that important here, it will only allow you to track whether
    the file was successfully retrieved or not.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '就像我们之前做的那样，你可以通过简单地将`async : false`添加到参数列表中使其同步。这将做两件事情：加载脚本并执行它。这里回调函数并不那么重要，它只允许你跟踪文件是否成功检索。'
- en: 'As mentioned earlier, the script will be executed in the global scope. This
    has some implication on your code organization. Until now the code of our games
    looked like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，脚本将在全局范围内执行。这对你的代码组织有一些影响。直到现在，我们游戏的代码看起来像这样：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here all the functions and variables are defined in a "private" scope that
    cannot be touched from outside. This means that if your remote code tries to do
    something like the following, it will fail:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的函数和变量都在一个"私有"范围内定义，外部无法访问。这意味着如果你的远程代码尝试做下面这样的事情，它将失败：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Indeed, the functions `someFunction` and `someVariable` are not visible from
    the global scope. The solution is to carefully choose which variable and function
    should be visible from the remote code and put them in the global scope. In our
    situation it might look like the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，函数`someFunction`和`someVariable`在全局范围内是不可见的。解决方案是仔细选择哪些变量和函数应该对远程代码可见，并将它们放在全局范围内。在我们的情况下，可能会像这样：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You may want to keep all these in a namespace like we did for our framework.
    As you're writing a final product that won't likely be used as a library in another,
    it has more to do with personal preference.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要将所有这些函数都放在一个命名空间中，就像我们为我们的框架所做的那样。由于你正在编写一个最终产品，不太可能被其他库用作库，这更多取决于个人偏好。
- en: Debugging calls to $.ajax
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试对$.ajax的调用
- en: 'Now that we are loading remote files, a new variety of problems can occur:
    the URL of the file may no longer be valid, the server may be down, or the file
    may be ill formatted. In production, you may want to detect these at runtime to
    display a message to the user instead of simply crashing. During the development
    phase, you may want to find out exactly what went wrong in order to debug your
    code.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在加载远程文件，可能会出现一系列新问题：文件的URL可能不再有效，服务器可能已经关闭，或者文件可能格式不正确。在生产环境中，您可能希望在运行时检测这些问题，以向用户显示一条消息，而不仅仅是崩溃。在开发阶段，您可能希望找出到底出了什么问题，以便调试您的代码。
- en: 'jQuery provides three functions that you can use to perform this: .`done()`,
    `.fail()`, and `.always()`. There used to be three others (`.success()`, `.error()`,
    and `.complete()`), but they have been deprecated since jQuery 1.8.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery提供了三个函数，你可以用它们来实现这个功能：.`done()`、`.fail()`和`.always()`。以前还有另外三个函数（`.success()`、`.error()`和`.complete()`），但自jQuery
    1.8版本起已经被弃用。
- en: .done()
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .done()
- en: '`.done()` can be used instead of the success callback. It will only be called
    once the file is successfully loaded. The provided function will be called with
    the following three arguments in this order: `data`, `textStatus`, `jqXHR`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`.done()`可以用来代替成功回调。只有在文件成功加载后才会调用它。提供的函数将按以下顺序调用以下三个参数：`data`、`textStatus`、`jqXHR`。'
- en: '`data` is the loaded file, which means you could handle your JSON file there
    if you wanted to.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`是加载的文件，这意味着如果你愿意，你可以在那里处理你的 JSON 文件。'
- en: .fail()
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.fail()`'
- en: '`.fail()` is called whenever a problem occurred. The provided function will
    be called with the following three arguments in this order: `jqXHR`, `textStatus`,
    `exception`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每当发生问题时都会调用`.fail()`。提供的函数将按以下顺序调用以下三个参数：`jqXHR`、`textStatus`、`exception`。
- en: When loading and executing a script, it's very convenient to find what happened
    if the script is not executed. Indeed, the exceptions won't appear in most browsers'
    debug consoles, but the exception argument will contain the exact exception thrown
    by your code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载和执行脚本时，如果脚本未被执行，查找发生了什么非常方便。实际上，在大多数浏览器的调试控制台中不会出现异常，但异常参数将包含你的代码抛出的确切异常。
- en: 'For example, if we look at the scope problem described earlier where the main
    game contains the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们看一下之前描述的作用域问题，主游戏包含以下代码：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And a remote script like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 远程脚本如下：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You could catch the exception by writing:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过编写以下代码来捕获异常：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And the following error would be written to the console:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台将写入以下错误：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will work to detect other problems such as unresponsive servers and so
    on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将用于检测其他问题，如服务器无响应等。
- en: Modifying our platform game
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改我们的平台游戏
- en: 'We now have all the knowledge we need for creating a multi-level game. First,
    we will create a list of levels and a function to load them:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了创建多级游戏所需的所有知识。首先，我们将创建一个级别列表和一个加载它们的函数：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The highlighted lines are the ones that do the remote loading of files. This
    uses the functions described earlier. As you can see, there is no mechanism to
    detect that the game is over. You could add one as homework if you want to!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮显示的行是远程加载文件的行。这使用了之前描述的函数。正如你所看到的，没有机制来检测游戏是否结束。如果你愿意，你可以将其作为作业添加进去！
- en: Before the next level is loaded, we have to make sure to delete the existing
    one as well as the enemies it contains.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载下一级之前，我们必须确保删除现有的级别以及它包含的敌人。
- en: 'Now we will change the game to work with logic tiles instead of standard ones.
    This way we can have a kind of tile that defines the end of one level. Here is
    our collision detection code modified to do exactly that:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更改游戏以使用逻辑砖块而不是标准砖块。这样我们可以有一种定义一个级别结束的砖块。以下是我们修改后用于执行此操作的碰撞检测代码：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, we've added the possibility for the player to die when he/she
    hits some tiles. This will make him/her reappear at the beginning of the current
    level. If the tiles are of type 3, we set the status of the player as `finished`.
    Later, we detect the status and load the next level.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们增加了玩家碰到某些砖块时死亡的可能性。这将使他/她重新出现在当前级别的开始处。如果砖块的类型是 3，我们将玩家的状态设置为`finished`。稍后，我们检测状态并加载下一个级别。
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Don't forget to rest the player position too, otherwise, it will appear in the
    middle of the next level instead of at its starting point.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了重置玩家位置，否则它将出现在下一级的中间位置，而不是起始点。
- en: 'We now have to write each script that creates the enemies for their respective
    level. This is almost the exact same piece of code that we used in the previous
    version of the game, but placed in a separate file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须编写每个脚本，为它们各自的级别创建敌人。这几乎是与游戏的先前版本中使用的相同代码，但放在一个单独的文件中：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you may already have figured, we cannot simply run the game and use that
    script without modifying our code some more. As we said before, the remote script
    will be executed in the global scope and we need to move the pieces it uses to
    it.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经想到的那样，我们不能简单地运行游戏并使用该脚本而不对我们的代码进行一些修改。如前所述，远程脚本将在全局范围内执行，我们需要将它使用的部分移到其中。
- en: 'Here we need the enemies'' objects and animations as well as the array that
    contains the list of enemies. We will simply take those out of their closure and
    add them at the beginning of our game script:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要敌人的对象和动画，以及包含敌人列表的数组。我们将它们从它们的闭包中取出，然后添加到我们游戏脚本的开头：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now the game will contain as many levels as we want. Have fun with the level
    editor! Here we used the scripts only to set the enemies, but we could use it
    to change the level background if we wanted to.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在游戏将包含我们想要的任意数量的关卡。享受关卡编辑器的乐趣！在这里，我们仅使用脚本来设置敌人，但如果我们想的话，我们也可以用它来更改关卡背景。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Making your game multileveled adds a few new tricks to your sleeve. Now you've
    learned to divide your assets in many files and load them when you need them.
    You've also learned how to use tiles to describe logic behavior and not only the
    graphical aspect of your levels.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使你的游戏多层级将为你带来一些新的技巧。现在你已经学会了将你的资产分成许多文件，并在需要时加载它们。你还学会了如何使用瓦片来描述逻辑行为，而不仅仅是你的关卡的图形方面。
- en: As mentioned earlier, there is much more that can be done with the game to make
    it really fun. I will recommend spending quite some time on level design. In most
    commercial games, this is where most of the time is spent, so don't hesitate to
    stop coding for a while and start making and testing your levels!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，游戏还有很多可以做得更有趣的地方。我建议花一些时间来设计关卡。在大多数商业游戏中，这是花费时间最多的地方，所以不要犹豫，停下编码一段时间，开始制作和测试你的关卡！
- en: In the next chapter, you will learn how to make a multiplayer game. For this
    we will use the game we created in [Chapter 5](ch05.html "Chapter 5. Putting Things
    into Perspective"), *Putting Things into Perspective*, and add new functionality
    to it in the same way we did for the game from [Chapter 4](ch04.html "Chapter 4. Looking
    Sideways"), *Looking Sideways*, which we used in this chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何制作多人游戏。为此，我们将使用我们在[第五章](ch05.html "第五章。将事情放在透视中")中创建的游戏，*将事情放在透视中*，并以与我们在本章中使用的[第四章](ch04.html
    "第四章。侧面观察")中的游戏相同的方式为它添加新功能。
