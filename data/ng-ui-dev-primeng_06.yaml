- en: Amazing Overlays and Messages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 令人惊叹的覆盖和消息
- en: Amazing Overlays and Messages demonstrate various variants of content displayed
    in modal or non-modal Overlays, such as Dialog, Lightbox, and the Overlay panel.
    The user does not leave the page flow when the content is displayed in the mentioned
    Overlays. An Overlay component overlays other components on the page. PrimeNG
    also offers Notification components to show any kind of messages or advisory information.
    These Message components will be described as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊叹的覆盖和消息展示了模态或非模态覆盖（如对话框、灯箱和覆盖面板）中显示的各种内容的不同变体。当内容显示在上述覆盖中时，用户不会离开页面流。覆盖组件会覆盖页面上的其他组件。PrimeNG还提供通知组件来显示各种消息或咨询信息。这些消息组件也将被描述。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Displaying content in the popup mode
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在弹出模式下显示内容
- en: Multipurpose scenarios with OverlayPanel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OverlayPanel的多功能场景
- en: Displaying content in Lightbox
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在灯箱中显示内容
- en: Notifying users with Messages and Growl
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用消息和Growl通知用户
- en: Tooltips for form components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单组件的工具提示
- en: Displaying content in the popup mode
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在弹出模式下显示内容
- en: 'The additional information of a website can be represented in a popup format.
    This will improve the user experience with optimal view port. There are two types
    of popup formats that exist: **Dialog** and **ConfirmDialog**.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的附加信息可以以弹出格式表示。这将通过最佳视口改善用户体验。存在两种类型的弹出格式：**对话框**和**确认对话框**。
- en: Dialog
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话框
- en: Dialog is a container component to display the content in an Overlay window.
    To save the web page's viewport, Dialog is very useful to display additional information
    in a popup format. The visibility of Dialog is controlled through the `visible`
    property.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框是一个容器组件，用于在覆盖窗口中显示内容。为了保存网页的视口，对话框非常有用，可以以弹出格式显示附加信息。对话框的可见性通过`visible`属性控制。
- en: By default, the Dialog is hidden with `visibility` as `false` and enabling the
    `visible` property displays the Dialog. Due to the two-way binding nature of Dialog,
    the `visible` property turned as `false` automatically after closing the Dialog
    using the close icon. The `closeOnEscape` attribute is used to close the Dialog
    with the *Esc* key.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对话框以`false`的`visibility`隐藏，并启用`visible`属性显示对话框。由于对话框具有双向绑定的特性，使用关闭图标关闭对话框后，`visible`属性会自动变为`false`。`closeOnEscape`属性用于使用*Esc*键关闭对话框。
- en: 'A basic example of Dialog component with source button would be written as
    follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框组件的基本示例与源按钮将如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `visible` property is enabled on the user action. The following screenshot
    shows a snapshot result of the basic Dialog example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`visible`属性在用户操作时被启用。以下屏幕截图显示了基本对话框示例的快照结果：'
- en: '![](assets/ee678b76-d822-4e80-9466-775720dc4553.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ee678b76-d822-4e80-9466-775720dc4553.png)'
- en: The Dialog component supports two event callbacks named `onShow` and `onHide`,
    which will be invoked when the Dialog is shown or hidden.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框组件支持两个名为`onShow`和`onHide`的事件回调，当对话框显示或隐藏时将被调用。
- en: Usability features
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用性功能
- en: The user experience with the Dialog component will be improved with draggable,
    resizable, closable, and responsive features using `draggable`, `resizable`, `closable`,
    and `responsive` properties. Apart from these interactive features, the `modal`
    property prevents user actions on the main page with a transparent background,
    whereas `dismissableMask` hides the Dialog if the user clicks on a transparent
    background.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`draggable`、`resizable`、`closable`和`responsive`属性，对话框组件的用户体验将得到改善，具有可拖动、可调整大小、可关闭和响应式功能。除了这些交互功能，`modal`属性通过透明背景防止用户在主页面上执行操作，而`dismissableMask`在用户点击透明背景时隐藏对话框。
- en: 'The default values of these properties are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性的默认值如下：
- en: '`draggable = true`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`draggable = true`'
- en: '`resizable = true`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resizable = true`'
- en: '`closable = true`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closable = true`'
- en: '`responsive = false`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`responsive = false`'
- en: '`modal = false`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modal = false`'
- en: '`dismissableMask = false`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dismissableMask = false`'
- en: Customized header and footer
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义标题和页脚
- en: The header of the Dialog is defined through the `header` property, and it can
    be controlled by the `showHeader` attribute. The header and footer sections of
    the Dialog component can be defined in a more flexible manner using the `p-header`
    and `p-footer` tags. In order to work with them, there is a need to import the
    header and footer components and declare it in the directives section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框的标题通过`header`属性定义，并且可以通过`showHeader`属性进行控制。对话框组件的页眉和页脚部分可以使用`p-header`和`p-footer`标签以更灵活的方式进行定义。为了使用它们，需要导入页眉和页脚组件，并在指令部分声明它。
- en: 'A customized example of a Dialog component with customized header and footer
    will be written as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 具有自定义标题和页脚的对话框组件的自定义示例将如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows a snapshot result of the custom Dialog example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了自定义对话框示例的快照结果：
- en: '![](assets/310d8d0e-9d09-475f-8687-c4e8aa2d2fdf.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/310d8d0e-9d09-475f-8687-c4e8aa2d2fdf.png)'
- en: The preceding snapshot shows how the header, message, and footer icons can be
    customized as per the needs or requirements. By default, the Dialog component
    is center aligned in the viewport, but this can be customized using `positionLeft`
    and `positionTop` properties.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的快照显示了如何根据需要或要求自定义标题、消息和页脚图标。默认情况下，对话框组件在视口中居中对齐，但可以使用`positionLeft`和`positionTop`属性进行自定义。
- en: ConfirmDialog
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ConfirmDialog
- en: The ConfirmDialog is a component used to display confirmation windows with multiple
    actions at the same time. In this case, it will be backed by the confirmation
    service utilizing obseravables. The service which uses a confirmed method for
    multiple actions needs to be imported.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ConfirmDialog是一个用于同时显示多个操作的确认窗口的组件。在这种情况下，它将由使用可观察对象的确认服务支持。需要导入使用多个操作的确认方法的服务。
- en: 'A basic example of the ConfirmDialog component with a source button (or dialog
    generator button) would be written as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用源按钮（或对话框生成器按钮）的ConfirmDialog组件的基本示例将如下所示：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding example, the confirm method will confirm an instance for customizing
    the Dialog UI along with accept and reject buttons. For example, the `accept`
    function invokes the confirm method of a confirmation service, which decides what
    action needs to be performed:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，确认方法将确认一个实例，用于自定义对话框UI以及接受和拒绝按钮。例如，`accept`函数调用确认服务的确认方法，决定需要执行什么操作：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Dialog appeared with the click of a button component. The following screenshot
    shows a snapshot result of the basic confirmed Dialog example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮组件后，对话框出现。以下截图显示了基本确认对话框示例的快照结果：
- en: '![](assets/15c967c5-65dd-400a-8862-e12aa1bd8386.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15c967c5-65dd-400a-8862-e12aa1bd8386.png)'
- en: The footer accept and reject buttons decide whether to subscribe for the Angular
    news feed system.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚的接受和拒绝按钮决定是否订阅Angular新闻订阅系统。
- en: Customization
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义
- en: There are two ways to provide the header, message, and icons for the confirmed
    Dialog. One is a declarative approach in which all the features are provided through
    attributes (`header`, `message`, and `icon`), whereas the other approach is a
    programmatic approach in which the values can be dynamic through confirmed instance
    properties. Even the footer section buttons can be customized with their own UI
    (`acceptLabel`, `acceptIcon`, `acceptVisibility`, `rejectLabel`, `rejectIcon`,
    and `rejectVisibility`) along with the accept and reject methods of the local
    `ng-template` variable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 提供确认对话框的标题、消息和图标有两种方式。一种是声明性的方式，通过属性（`header`、`message`和`icon`）提供所有功能，而另一种方式是程序化的方式，通过确认实例属性使值可以动态变化。甚至页脚部分的按钮也可以通过它们自己的UI（`acceptLabel`、`acceptIcon`、`acceptVisibility`、`rejectLabel`、`rejectIcon`和`rejectVisibility`）进行自定义，以及本地`ng-template`变量的接受和拒绝方法。
- en: 'A customized example of the confirm Dialog component with header and footer
    would be written as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有标题和页脚的自定义确认对话框组件的示例将如下编写：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows a snapshot result of a custom confirm Dialog
    example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了自定义确认对话框示例的快照结果：
- en: '![](assets/83c1baf1-f5e6-4dd1-ad21-e32eae92e14a.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/83c1baf1-f5e6-4dd1-ad21-e32eae92e14a.png)'
- en: In the preceding snapshot, all headers, messages, and icons are customized in
    a declarative approach. The confirm Dialog provides default `closable`, `responsive`,
    and `closeOnEscape` properties, which is similar to the Dialog component.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，所有标题、消息和图标都是以声明性的方式进行自定义的。确认对话框提供了默认的`closable`、`responsive`和`closeOnEscape`属性，这与对话框组件类似。
- en: 'The complete demo application with instructions is available on GitHub:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到：
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/dialog](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/dialog)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/dialog](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/dialog)'
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/confirm-dialog.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/confirm-dialog)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/confirm-dialog.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/confirm-dialog)'
- en: Multipurpose scenarios with OverlayPanel
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OverlayPanel的多用途场景
- en: 'The OverlayPanel is a container component that displays additional information
    on top of the other components in the page. This element will be displayed using
    the `show` or `toggle` method of a local `ng-template` variable, and it can be
    hidden using the `hide` or `toggle` method. Remember that the `show` method will
    allow a second argument as the target element, where it has to display the Overlay
    (instead source). A basic example of the Overlay component with the source button
    generator will be written as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: OverlayPanel是一个容器组件，可以在页面的其他组件上方显示附加信息。使用本地`ng-template`变量的`show`或`toggle`方法来显示该元素，使用`hide`或`toggle`方法来隐藏它。请记住，`show`方法将允许第二个参数作为目标元素，它必须显示Overlay（而不是源）。Overlay组件与源按钮生成器的基本示例将如下所示：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example, Overlay will appear by the click of the Button component.
    The following screenshot shows a snapshot result of the basic Overlay example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，Overlay将在单击按钮组件时出现。以下截图显示了基本Overlay示例的快照结果：
- en: '![](assets/95ece15c-06b5-4dc8-8721-99dbffc6c840.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/95ece15c-06b5-4dc8-8721-99dbffc6c840.png)'
- en: In the preceding snapshot, the Overlay displays the PrimeNG logo as a image
    on the click of the logo button. By default, OverlayPanel is attached to the body
    of the page, but the target can be changed using the `appendTo` property.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，Overlay 在点击 logo 按钮时显示 PrimeNG logo 作为图像。默认情况下，OverlayPanel 附加到页面的 body
    上，但可以使用 `appendTo` 属性更改目标。
- en: Integration with other components
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他组件集成
- en: 'The OverlayPanel component can be integrated with other PrimeNG components
    as well. For example, the following snapshot shows how to integrate the Overlay
    component with the DataTable component using `ng-template`. In this case, the
    button needs to be placed inside DataTable `ng-template` and Overlay triggered
    through the `toggle` event:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: OverlayPanel 组件也可以与其他 PrimeNG 组件集成。例如，下面的快照显示了如何使用 `ng-template` 将 Overlay 组件与
    DataTable 组件集成。在这种情况下，按钮需要放置在 DataTable `ng-template` 内，并通过 `toggle` 事件触发 Overlay：
- en: '![](assets/032d5765-fa89-40c7-b0b8-676ec555d49c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/032d5765-fa89-40c7-b0b8-676ec555d49c.png)'
- en: In the preceding snapshot, the Overlay panel is used to display the aggregation
    information such as marks and percentage in the popup format by clicking on the
    result button in each row.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，Overlay 面板用于通过点击每行的结果按钮以弹出格式显示聚合信息，如标记和百分比。
- en: Closable properties
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可关闭属性
- en: By default, the interaction outside the Overlay panel closes the Dialog immediately.
    This behavior can be prevented with the help of the `dismissable` property. At
    the same time, there is an option to display close at the top-right corner using
    the `showCloseIcon` property.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Overlay 面板外部的交互会立即关闭 Dialog。可以使用 `dismissable` 属性阻止此行为。同时，还可以使用 `showCloseIcon`
    属性在右上角显示关闭选项。
- en: The Dialog component supports four event callbacks named `onBeforeShow`, `onAfterShow`,
    `onBeforeHide`, and `onAfterHide`, which will be invoked when the Dialog is shown
    or hidden.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Dialog 组件支持四个事件回调，分别为 `onBeforeShow`、`onAfterShow`、`onBeforeHide` 和 `onAfterHide`，当
    Dialog 被显示或隐藏时将被调用。
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在 GitHub 上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/overlaypanel.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/overlaypanel)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/overlaypanel.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/overlaypanel)'
- en: Displaying content in Lightbox
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Lightbox 中显示内容
- en: 'LightBox component is used to display a collection of images, videos, inline
    HTML content, and also iframes in a modal Overlay mode. There are two types of
    LightBox modes that exist: one is the default `image` type and the other one is
    the `content` type. In the image mode, a collection of images will be displayed
    where each entry represents an image object which represent the source of the
    image, thumbnail, and title. A basic example of a LightBox with a collection (or
    array) of Angular conferences would be as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: LightBox 组件用于以模态 Overlay 模式显示图像、视频、内联 HTML 内容，以及 iframe 集合。存在两种类型的 LightBox
    模式：一种是默认的 `image` 类型，另一种是 `content` 类型。在图像模式中，将显示图像集合，其中每个条目代表一个图像对象，代表图像的来源、缩略图和标题。一个带有
    Angular 会议集合（或数组）的 LightBox 的基本示例如下：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The component will be rendered as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 组件将呈现如下截图所示：
- en: '![](assets/3a961c4b-84f5-47ca-a0cb-f59bc6e8f855.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a961c4b-84f5-47ca-a0cb-f59bc6e8f855.png)'
- en: In the preceding snapshot, all the images are displayed as gallery of images
    and navigated through the next and previous icons.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的快照中，所有图像都显示为图像库，并通过下一个和上一个图标进行导航。
- en: Custom content mode
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义内容模式
- en: 'The content mode is enabled by setting the `type` property to `content`, which
    provides an anchor (or link) to open the LightBox and content to display inside
    of it. A customized content example of a LightBox with a collection of Angular
    conferences would be as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`type`属性设置为`content`来启用内容模式，这将提供一个锚点（或链接）来打开LightBox并在其中显示内容。一个自定义内容的LightBox示例，包含一系列Angular会议，如下所示：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The component will be rendered as iframe video inside Overlay panel as shown
    in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件将作为iframe视频呈现在覆盖面板内，如下截图所示：
- en: '![](assets/b8764662-39e0-4380-86f4-b2bb6390cd2d.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8764662-39e0-4380-86f4-b2bb6390cd2d.png)'
- en: As shown the preceding snapshot, the list of videos are displayed and can watch
    videos in a popup mode for better experience.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的快照所示，视频列表被显示出来，并且可以在弹出模式下观看视频，以获得更好的体验。
- en: Transition effects
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡效果
- en: The LightBox component is more powerful with the transition effects between
    images. This can be achieved through the `easing` property. Here, the default
    value is `ease-out` (that is, the effects are customized using the `easing` property).
    There are many other effects available, the entire list of CSS3 effects are supported.
    Also, by default, the effect duration is `500ms`. This also can be customized
    through the `effectDuration` property.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: LightBox组件在图片之间的过渡效果更加强大。这可以通过`easing`属性实现。在这里，默认值是`ease-out`（即，使用`easing`属性自定义效果）。还有许多其他效果可用，支持整个CSS3效果列表。此外，默认情况下，效果持续时间为`500ms`。这也可以通过`effectDuration`属性进行自定义。
- en: 'The transition effect as an example of a LightBox with a collection of Angular
    conferences would be as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为LightBox的过渡效果的一个示例，包含一系列Angular会议的效果如下：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/lightbox.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/lightbox)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/lightbox.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/lightbox)'
- en: Notifying users with Messages and Growl
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过消息和Growl通知用户
- en: The Message component is used to display messages in an inline format to notify
    the users. These Messages are notified as the result of a specific action. Each
    Message in PrimeNG API is defined using the `Message` interface, which defines
    `severity`, `summary`, and `detail` properties.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 消息组件用于以内联格式显示消息，以通知用户。这些消息是作为特定操作的结果而通知的。PrimeNG API中的每条消息都是使用`Message`接口定义的，该接口定义了`severity`、`summary`和`detail`属性。
- en: 'A basic example of Messages to notify the user would be as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通知用户的消息的基本示例如下：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding example, Messages are displayed using the `value` property,
    which defines an array of the `Message` interfaces. The component will be rendered
    as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，消息使用`value`属性显示，该属性定义了`Message`接口的数组。该组件将如下截图所示呈现：
- en: '![](assets/ddfaf6df-6ad7-4ec0-8479-f502b2fc8ab9.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ddfaf6df-6ad7-4ec0-8479-f502b2fc8ab9.png)'
- en: 'The severity of Messages are represented with the `class` property. The possible
    values of Messages severity would be as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 消息的严重程度由`class`属性表示。消息严重程度的可能值如下：
- en: '| **Severity** | **Class name** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **严重程度** | **类名** |'
- en: '| `success` | `.ui-button-success` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `success` | `.ui-button-success` |'
- en: '| `info` | `.ui-button-info` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `info` | `.ui-button-info` |'
- en: '| `warn` | `.ui-button-warn` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `warn` | `.ui-button-warn` |'
- en: '| `error` | `.ui-button-error` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `error` | `.ui-button-error` |'
- en: The Messages are closable by default with the help of the cross icon located
    at the top-right corner. This behavior can be altered through the `closable` property,
    that is, `[closable]="false"` disables the closable nature of Messages.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 消息默认情况下可以通过位于右上角的关闭图标关闭。这种行为可以通过`closable`属性进行修改，即`[closable]="false"`会禁用消息的可关闭性。
- en: Growl - another way of notifying information
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Growl - 另一种通知信息的方式
- en: 'Similar to Message components, Growl is used to display Messages as a result
    of specific actions, but it displays in the form of the Overlay mode instead of
    the inline mode. Each Message is represented through the `Message` interface with
    `severity`, `summary`, and `details`. A basic example of Growl to notify the user
    would be as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与消息组件类似，Growl用于以覆盖模式而不是内联模式显示特定操作的消息。每条消息通过`Message`接口表示，具有`severity`、`summary`和`details`。Growl通知用户的基本示例如下：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `value` property defines an array of the `Message` interfaces in the backing
    component model. The component will be rendered as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`属性在后台组件模型中定义了`Message`接口的数组。组件将呈现如下截图所示：'
- en: '![](assets/713cf270-975f-43af-a988-10a28b617fec.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/713cf270-975f-43af-a988-10a28b617fec.png)'
- en: Similar to the Messages component, the same severity types can be defined in
    Growl as well. PrimeNG 4.1 release introduced the `onClick` event callback which
    will be invoked when a Message is clicked on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与消息组件类似，Growl中也可以定义相同的严重类型。PrimeNG 4.1版本引入了`onClick`事件回调，当单击消息时将被调用。
- en: Sticky behavior
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粘性行为
- en: By default, the Growl messages are removed after a certain span of time. The
    default lifespan of Growl messages is `3000ms`. This can be customized using the
    `life` property (that is, `life="5000"`). To make the Messages as sticky, irrespective
    of the lifespan mentioned, you should enable the sticky behavior, that is, `sticky="true"`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Growl消息在一定时间后会被移除。Growl消息的默认寿命是`3000ms`。这可以使用`life`属性进行自定义（即`life="5000"`）。要使消息成为粘性消息，无论提到的寿命如何，您都应该启用粘性行为，即`sticky="true"`。
- en: PrimeNG Version 4.0.1 supports the two-way binding feature for Growl messages.
    Due to this feature, whenever the message is removed manually from UI, backend
    instance, or message, array will be updated immediately.The complete demo application
    with instructions is available on GitHub at
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG版本4.0.1支持Growl消息的双向绑定功能。由于这个特性，每当消息从UI、后端实例或消息中被手动移除时，数组将立即更新。完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/messages](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/messages)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/messages](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/messages)'
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/growl.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/growl)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/growl.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/growl)'
- en: Tooltips for form components
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单组件的工具提示
- en: 'Tooltip provides an advisory information for a component. This gives a brief
    insight of target component before going to use. The Tooltip is applied through
    the `pTooltip` directive with the value to define text to display. Along with
    that, HTML tags also displayed instead of regular text information with the help
    of the `escape` attribute. A basic example of Tooltip is to provide an advisory
    information for input as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 工具提示为组件提供了咨询信息。这在使用目标组件之前给出了简要的见解。工具提示通过`pTooltip`指令应用，其值定义要显示的文本。除此之外，还可以使用`escape`属性显示HTML标签，而不是常规文本信息。工具提示的基本示例是为输入提供咨询信息，如下所示：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The Tooltip display on right side of input as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 工具提示显示在输入框的右侧，如下面的屏幕截图所示：
- en: '![](assets/cc180360-109f-4d65-bf15-7dfd2fe66bd6.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc180360-109f-4d65-bf15-7dfd2fe66bd6.png)'
- en: 'The Tooltip position is displayed on the right side of target component by
    default. This behavior can be changed using the `tooltipPosition` property with
    other values such as `top`, `right`, and `bottom`, for example, `tooltipPosition`
    with the `top` value will result as in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，工具提示位置显示在目标组件的右侧。可以使用`tooltipPosition`属性将此行为更改为其他值，例如`top`、`right`和`bottom`，例如，具有`top`值的`tooltipPosition`将导致如下屏幕截图所示：
- en: '![](assets/14ee580a-3a7f-42db-b6b7-4f009b7ea4d0.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14ee580a-3a7f-42db-b6b7-4f009b7ea4d0.png)'
- en: By default, the Tooltip is displayed on hover of a target element (that is,
    the default event to invoke Tooltip information is hover.) This can be customized
    using the `tooltipEvent` property, which provides focus event to display and blur
    event to hide Tooltip. Remember, Tooltips can also be disabled using the `tooltipDisabled`
    property.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，工具提示在悬停在目标元素上时显示（即，调用工具提示信息的默认事件是悬停）。可以使用`tooltipEvent`属性进行自定义，该属性提供焦点事件以显示和模糊事件以隐藏工具提示。请记住，工具提示也可以使用`tooltipDisabled`属性禁用。
- en: 'A Tooltip event example for input would be as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的工具提示事件示例如下：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By default, Tooltip is assigned to document body. If the target of a Tooltip
    placed inside scrolling containers (for example, overflown `div` element), append
    Tooltip to the element with the relative position. This can be achieved using
    the `appendTo` property (that is, `appendTo="container"`).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，工具提示分配给文档主体。如果工具提示的目标放置在滚动容器内（例如，溢出的`div`元素），则将工具提示附加到具有相对位置的元素。可以使用`appendTo`属性实现这一点（即`appendTo="container"`）。
- en: 'PrimeNG Version 4.1 provides the `showDelay` and `hideDelay` properties in
    order to add delay while showing and hiding Tooltips (which accept a number value
    in terms of milliseconds). The delay feature would be applied as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG版本4.1提供了`showDelay`和`hideDelay`属性，以便在显示和隐藏工具提示时添加延迟（以毫秒为单位的数字值）。延迟功能将应用如下：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的演示应用程序及说明可在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/tooltips.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/tooltips)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/tooltips.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter6/tooltips)'
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By reaching this section, you will be in a position to understand how to display
    images, videos, iframe, and HTML content in an Overlay window without the leaving
    current page flow. Initially, you will see how to work with Dialog, ConfirmDialog,
    LightBox, and Overlay components. After that, you learned on how to display inline
    messages or messages in an Overlay by Messages and Growl components, respectively.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读本节，您将能够了解如何在不离开当前页面流的情况下在覆盖窗口中显示图像、视频、iframe和HTML内容。最初，您将看到如何使用对话框、确认对话框、灯箱和覆盖组件。之后，您将学习如何通过消息和生长组件在覆盖中显示内联消息或消息。
- en: The last recipe explained about the Tooltip component for displaying advisory
    information. All these components are explained with all possible features in
    a step-by-step approach. In the next chapter, you will see how to use the Menu
    model API, navigation, and menu variations such as menu, mega menu, menu bar,
    slide menu, panel menu, tiered menu, and so on, with various features.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例介绍了用于显示咨询信息的工具提示组件。所有这些组件都是通过逐步方法解释的，具有所有可能的功能。在下一章中，您将看到如何使用菜单模型API、导航和菜单变体，如菜单、超级菜单、菜单栏、滑动菜单、面板菜单、分层菜单等，具有各种功能。
