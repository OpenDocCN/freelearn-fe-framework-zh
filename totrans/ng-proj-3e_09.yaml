- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Component UI Library Using Angular CLI and Angular CDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An Angular application consists of Angular components that are organized into
    modules. When components need to share a similar appearance or behavior across
    modules, we extract their functionality into reusable components and group them
    in a shared module. Reusable components may vary from complex UI structures with
    many controls, such as forms, to single native HTML elements, such as buttons.
  prefs: []
  type: TYPE_NORMAL
- en: A component UI library is a collection of reusable components that can be used
    outside a specific application domain. A large enterprise application built with
    a monorepo architecture can use these components across all its applications.
    A project outside an organization can also use the same component library as an
    external dependency.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI includes all the necessary tooling for creating libraries with
    Angular. The Angular **Component Dev Kit** (**CDK**) provides a broad range of
    functionalities for creating accessible and high-performant UI components. In
    this chapter, we will combine them with **Bulma**, a modern CSS framework, to
    create a simple component UI library from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a library with the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a draggable card list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the clipboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing an Angular library to `npm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using components as **Angular elements**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Essential background theory and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Angular CDK contains a collection of common interactions and behaviors that
    we can apply to Angular components. It is at the heart of the Angular Material
    library but can be used with any CSS framework in an Angular application. The
    Angular CDK is available from the `@angular/cdk` npm package.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI supports creating Angular libraries out of the box. The functionality
    of an Angular library can be used only in Angular applications, and it is decoupled
    from specific business logic. If we want to use an Angular library in a non-Angular
    application, we must convert it into an Angular element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom elements** are a web standard that allows the creation of HTML elements
    independent of any JavaScript framework. It works by declaring a custom HTML tag
    and associating it with a JavaScript class. The browser can identify the HTML
    tag and execute the JavaScript code defined inside the class.'
  prefs: []
  type: TYPE_NORMAL
- en: Angular elements are Angular components converted into custom elements using
    the `@angular/elements` library. Packaging an Angular component as a custom element
    connects the Angular framework to the DOM of the element, enriching it with data
    binding, a component life cycle, and change detection features.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, we will build a component UI library for our Angular projects.
    Initially, we will use the Angular CLI to scaffold a new Angular workspace for
    our library. We will then use the Angular CDK and the Bulma CSS framework to create
    the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of cards that we can rearrange using drag-and-drop features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button that will allow us to copy arbitrary content to the clipboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will learn how to deploy the library into a package registry such as **npm**.
    Finally, we will convert one of our components into an Angular element to share
    it with non-Angular applications using the `ngx-build-plus` library. The following
    diagram provides an architectural overview of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει διάγραμμα  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Project architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time: 1½ hours'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following prerequisites and software tools are required to complete this
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular CLI: A CLI for Angular, which you can find at [https://angular.io/cli](https://angular.io/cli).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub material: The related code for this chapter can be found in the `Chapter09`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a library with the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start working with Angular libraries using the Angular CLI, we
    need to create an Angular CLI workspace. The Angular CLI workspace will contain
    our Angular library and an Angular application for testing the library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to generate a new Angular CLI workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create a new Angular CLI workspace that contains
    an Angular application named `my-components`. Navigate to the `my-components`
    folder and execute the following command to generate a new Angular library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create a `ui-controls` library inside the `projects`
    folder of the workspace. It will contain various files and folders similar to
    those when creating an Angular application, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src\lib`: This contains the source code of the library, such as modules, components,
    and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src\public-api.ts`: This exports artifacts from the library that we want to
    make publicly available in other Angular applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ng-package.json`: This contains a configuration for the `ng-packagr` library
    that the Angular CLI uses under the hood for building libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.lib.json`: The TypeScript configuration file for our library, which
    also contains several Angular compiler options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.lib.prod.json`: The TypeScript configuration file used when building
    our library in production mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Angular CLI will generate a module, a component, and a service in the `src\lib`
    folder for us by default. It will also export them so that they can be used by
    any Angular application that will use the library. You can see an example of this
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have set up our Angular CLI workspace, we can go ahead and install
    the Bulma and Angular CDK libraries as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to install the Angular CDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to install the Bulma CSS framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `angular.json` configuration file and add the CSS style sheet file
    of the Bulma library to the `styles` section of the `build` architect entry, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `package.json` file of the `projects\ui-controls` folder and modify
    it accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We add the Angular CDK and the Bulma library to the `peerDependencies` section
    to ensure that any consuming application has a specific version of the packages
    to run our library.
  prefs: []
  type: TYPE_NORMAL
- en: The version number of each package may vary if you follow along with this project.
    To ensure you have the correct versions, copy them from the `package.json` file
    of the root folder of the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: We have now completed the basic setup of our UI components library. We have
    also configured the Angular application that comes with the Angular CLI workspace
    to preview and test the library. In the following section, we will build the first
    component of our library—a card list that can be re-ordered.
  prefs: []
  type: TYPE_NORMAL
- en: Building a draggable card list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first component of our UI library will be a list of Bulma card elements.
    Each card will display a title, a description, and an anchor link element. We
    will also be able to drag a card and change the order of the card list using the
    Angular CDK. Building our component will consist of the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying card data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding drag-and-drop functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will first see how to display data on the card
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying card data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our Angular application should pass a list of cards as an input property to
    the component for displaying them. Let’s see how we can create a draggable card
    component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following Angular CLI command to create an Angular component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create a `card-list` component in the `ui-controls`
    project of our Angular CLI workspace. The `--export` option will also export the
    component from `UiControlsModule`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `UiControlsModule` class is already exported from the `public-api.ts` file.
    So, when our Angular application imports `UiControlsModule`, it will also have
    our component available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the `generate` command of the Angular CLI to create an interface for the
    structure of card data, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will create a `card.ts` file in the `ui-controls` project
    of our workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `card.ts` file and add the following properties to the `Card` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `public-api.ts` file and add the following `export` statements to
    make the component and the interface available to the library consumers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `card-list.component.ts` file and use the `@Input` decorator to define
    an `input` property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `cards` property will be set later from the Angular application with the
    card data we want to display.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `card-list.component.html` file and replace its content with the following
    HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding template uses the Bulma `card` component and iterates over the
    `cards` component property to display each one, using the `*ngFor` directive.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `card-list.component.css` file and add the following CSS styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding styles, we use the `:host` selector to target the `div` element
    in the `host` element of our component and apply a `grid` style to display all
    cards in a single row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `ui-controls.module.ts` file and add `CommonModule` to the `imports`
    array of the `@NgModule` decorator, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CommonModule` class is needed for the `*ngFor` directive in the card list
    component template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our component is ready to accept and display data in a card list representation.
    Let’s see how to consume it from the Angular application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, execute the following command to build the component UI library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Angular CLI will start building the library, and it will have been completed
    as soon as you see the following output on the terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Εικόνα που περιέχει τραπέζι  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_09_02.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 9.2 – Library build output
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `app.module.ts` file and add the `UiControlsModule` class to the `imports`
    array of the `@NgModule` decorator, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We import `UiControlsModule` from the `ui-controls` namespace, which is the
    library name, and not from the full absolute path in our workspace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and declare a `component` property of the
    `Card[]` type, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We initialize the `cards` component property using demo data from the `assassins.ts`
    file, which you can find in the GitHub repository of the *Getting started* section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `app.component.html` file and replace its content with the following
    HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To preview the application, run `ng serve` and open your browser at `http://localhost:4200`.
    You should then see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Card list component](img/B18465_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Card list component
  prefs: []
  type: TYPE_NORMAL
- en: The card list component displays data that a consumer application passed using
    the `cards` input property. In the following section, we will take our component
    a step further and make our cards able to change their location in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Adding drag-and-drop functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A feature of the card list component is that we will be able to change the location
    of a card by dragging and dropping it into the list. The order of the card list
    should be emitted back to the consumer application using an output property binding.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Angular CDK contains a drag-and-drop module that we can use for this purpose.
    To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ui-controls.module.ts` file and import `DragDropModule` from the
    `@angular/cdk/drag-drop` namespace, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `DragDropModule` class to the `imports` array of the `@NgModule` decorator
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `card-list.component.html` file and modify the template as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, we add the `cdkDrag` directive to each card element to be able to move
    it by dragging it. Then, we add the `cdkDropList` directive to the container element
    to mark it as a drop list. A drop list in the Angular CDK indicates that its contents
    can be re-ordered using drag-and-drop actions. We set the drag-and-drop orientation
    to `horizontal` because our card list is rendered in a single row, and we also
    bind a `sortCards` component method to the `cdkDropListDropped` event of the drop
    list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `card-list.component.ts` file and modify the `import` statements accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an output property using the `@Output` decorator and use it in the `sortCards`
    component method to emit the re-ordered list to the consumer of the component,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The card list component has now acquired drag-and-drop superpowers. Let’s give
    it a try, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.html` file and add an event binding to the `cardChange`
    event of the `<lib-card-list>` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.component.ts` file and create an `onCardChange` method to log
    the new card list as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to build the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `serve` command of the Angular CLI to start your application like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try to drag and drop some of the cards from the list and notice the output in
    the **Console** window of your browser and the actual application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first component of our UI library is now packed with all the functionality
    to make it a drag-and-drop list. It can display a list passed from our Angular
    application in a Bulma card format. It can also change the order of each item
    in the list using the Angular CDK drag-and-drop module, and propagate the change
    back to our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will create a second component of our library for
    copying data to the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the clipboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Angular CDK library contains a collection of Angular artifacts that we
    can use to interact with the system clipboard. Specifically, it includes a directive
    for copying data to the clipboard and an event binding for taking additional action
    when the content has been copied. Let’s see how we can integrate both in to our
    component library, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command of the Angular CLI to create a new Angular component
    in the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the newly generated component from the `public-api.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ui-controls.module.ts` file and import `ClipboardModule` from the
    `@angular/cdk/clipboard` namespace, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `ClipboardModule` class to the `imports` array of the `@NgModule` decorator
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `copy-button.component.ts` file and declare the following component
    properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `data` property will be used to set clipboard data, and the `copied` event
    will fire when the data is successfully copied to the clipboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a component method to trigger a `copied` output event, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `copy-button.component.html` file and replace its content with the
    following HTML template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding template, we use a Bulma `button` component and attach two
    Angular CDK bindings to it. The `cdkCopyToClipboard` property binding indicates
    that the `data` component property will be copied to the clipboard when the button
    is clicked. The `cdkCopyToClipboardCopied` event binding will call the `onCopy`
    component method as soon as data has been copied to the clipboard successfully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have set up our component, let’s find out how to use it in our
    Angular application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `app.component.html` file and add a `<div>` element that consists
    of an `<input>` element and the `<lib-copy-button>` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the previous template, we bind the `title` property of the component to the
    `<input>` element using the `ngModel` directive. We also bind it to the `data`
    property of the `<lib-copy-button>` component to copy the contents of the `<input>`
    element to the clipboard. We also bind the `copied` event to the `log` component
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `app.component.ts` file and create a `log` method for displaying an
    information message when data is copied to the clipboard, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.module.ts` file and import `FormsModule`, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `FormsModule` class is part of the `@angular/forms` npm package and is required
    when we want to use `ngModel` in our application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Execute the following command to build the library so that our application
    can recognize the new component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using `ng serve`, and you should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Clipboard interaction](img/B18465_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Clipboard interaction
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the value `my awesome library` into the textbox and click on the **Copy**
    button. You should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Alert message](img/B18465_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Alert message
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully created a button that we can attach to an Angular application
    and use to interact with the clipboard directly!
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CDK contains various other components and behaviors that we can
    use in our Angular applications. When combined with a highly customizable CSS
    framework such as Bulma, it can create compelling and unique interfaces. Try them
    in your Angular projects and build a library with a rich set of components. In
    the following section, we will learn how to publish a library in the **npm package
    registry**.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an Angular library to npm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already seen how to build an Angular library and consume it in an Angular
    application when both exist in the same repository or organization. However, there
    are cases where you may want to make your library available to Angular projects
    outside your infrastructure via a public package registry such as npm. A usual
    case is when you want to make your library open source so that other members of
    the development community can benefit from this. Let’s see how to publish our
    `ui-controls` library to npm, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have an npm account, navigate to [https://www.npmjs.com/signup](https://www.npmjs.com/signup)
    to create one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `package.json` file that exists in the `projects\ui-controls` folder
    of the Angular CLI workspace and set the value of the `version` property to `1.0.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is considered a good practice to follow **semantic versioning** in your library
    and publish it as version *1.0.0* for the first time. Angular also follows semantic
    versioning, and you can learn more about this at [https://semver.org](https://semver.org).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a terminal window and run the following Angular CLI command to build your
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to the `dist` folder where the Angular CLI has generated the final
    bundle of our library, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following `npm` command to log in to the npm registry from the
    terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After you have successfully authenticated with npm, run the following command
    to publish your library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running the preceding command will throw an error because the npm package registry
    already contains a `ui-controls` package. If you want to preview the result of
    the previous command, make sure that you change the `name` field in the `package.json`
    file of the library.
  prefs: []
  type: TYPE_NORMAL
- en: Well done! Your library is now on the public npm registry and can be used by
    other developers in their Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: Always remember to change the `version` number in the `package.json` file of
    your library before publishing it. Otherwise, the npm registry will throw an error
    stating that the version you are trying to publish already exists.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will learn how to use our library in non-Angular
    applications using Angular elements.
  prefs: []
  type: TYPE_NORMAL
- en: Using components as Angular elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already learned how to use the Angular CLI to create an Angular library.
    We also saw how to publish our library to the npm registry so that other Angular
    projects can use it and benefit from it. In this section, we will go the extra
    mile and learn how to build our Angular library to be used in non-Angular environments.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already pointed out, the Angular framework is a cross-platform JavaScript
    framework in many ways. It can run on the server using **Angular Universal** and
    on mobile platforms. It can also run on a native desktop environment. In addition
    to those platforms, it can even run on web applications that are not built with
    Angular, using Angular elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how we can convert our clipboard component into an Angular element,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following Angular CLI command to generate a new Angular application
    in our workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will generate the `ui-elements` Angular application in
    the `projects` folder using default options.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Angular CLI does not currently support the use of Angular elements directly
    on an Angular library. Thus, we need to create an Angular application whose only
    purpose will be to export our components as Angular elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the `projects\ui-elements` folder and run the following command
    to install the `@angular/elements` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `app.module.ts` file of the `ui-elements` application and modify it
    accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `constructor` to the `AppModule` class and inject the `Injector` service
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement an `ngDoBootstrap` method to create the custom element for the `CopyButtonComponent`
    class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ngDoBootstrap` method is used to hook in the manual bootstrap process of
    the Angular application. We use the `createCustomElement` method from the `@angular/elements`
    npm package to create a custom element, passing the class of the component and
    the injector. Finally, we use the `define` method of the `customElements` object
    to declare the custom element, passing the HTML selector that we want to use and
    the custom element as parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have put into practice all the workings for converting an Angular
    component into an Angular element, it’s time to build it so that we can use it
    in a web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building an Angular element differs from a standard build of an Angular application.
    When we build an Angular application, the Angular CLI generates different JavaScript
    bundles that contain the application source code, the Angular framework, and any
    third-party libraries. In an Angular element scenario, we only want to generate
    one bundle file containing our component. For this purpose, we will use the `ngx-build-plus`
    library, which can generate a single bundle, among other things. Let’s see how
    to install it and use it in our application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command of the Angular CLI to install the `ngx-build-plus`
    package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding command will modify the `angular.json` file of the Angular CLI
    workspace to use the `ngx-build-plus` library to build the `ui-elements` application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following command of the Angular CLI to build the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous command will build the `ui-elements` application and produce a
    single bundle for all application code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the `dist\ui-elements` folder to another location of your choice on your
    hard disk and open the `index.html` file, using your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the `<base>` tag from the `<head>` element and add the Bulma CSS minified
    file using a **content delivery network** (**CDN**), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `<app-root>` selector with the following HTML snippet in the `<body>`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the following JavaScript code *after* the `<div>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding script, we communicate with the component that is hidden behind
    the Angular element using vanilla JavaScript. First, we query the global `document`
    object to get a reference to the Angular element. Then, we set the `data` input
    property using the `setAttribute` method of the element. Finally, we listen for
    the `copied` output event by attaching an event listener using the `addEventListener`
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use a web server to serve the `ui-elements` folder and open the `index.html`
    file using your browser. You should see the following output:![Figure 9.6 – Angular
    element](img/B18465_09_06.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 9.6 – Angular element
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you do not want to install a separate web server, you can use the Live Server
    VSCode extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **Copy** button, and you should see the following alert dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Alert dialog](img/B18465_09_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Alert dialog
  prefs: []
  type: TYPE_NORMAL
- en: We have managed to use an Angular component from our UI component library as
    a native HTML element in a web application that has nothing to do with Angular!
    The custom element looks and behaves the same as its Angular counterpart. The
    only difference is how we set up and configure the custom element in our web application
    using plain JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we built a component UI library that we can use in our Angular
    applications. Initially, we learned how to use the Angular CLI to create an Angular
    library. We scaffolded a new Angular CLI workspace that contained our Angular
    library, along with an Angular application for testing it.
  prefs: []
  type: TYPE_NORMAL
- en: We then used the Angular CDK with the Bulma CSS framework to build the UI components
    of our library. We created a card list that can be re-ordered using drag-and-drop
    features and a button for copying content to the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw how to publish our library in the npm registry to use it in other
    Angular projects. Finally, we converted it into custom elements using Angular
    elements for distribution to non-Angular applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next project, which will be the final project in the book, we will learn
    how to customize the Angular CLI to create our generation schematics.
  prefs: []
  type: TYPE_NORMAL
- en: Practice questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a look at a few practice questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do we generate a new Angular library using the Angular CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we make an Angular artifact of our library public?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which CSS selector do we use to target the `host` element of an Angular component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we mark an element as draggable in the Angular CDK?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method do we use to re-order a draggable list of items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Angular CDK directive is responsible for passing data to the clipboard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a single bundle using the `ngx-build-plus` library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we pass data to and from an Angular element?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some links to build upon what we learned in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular libraries overview: [https://angular.io/guide/libraries](https://angular.io/guide/libraries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating Angular libraries: [https://angular.io/guide/creating-libraries](https://angular.io/guide/creating-libraries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bulma CSS: [https://bulma.io](https://bulma.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular CDK: [https://material.angular.io/cdk/categories](https://material.angular.io/cdk/categories)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drag-and-drop module: [https://material.angular.io/cdk/drag-drop/overview](https://material.angular.io/cdk/drag-drop/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Clipboard module: [https://material.angular.io/cdk/clipboard/overview](https://material.angular.io/cdk/clipboard/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Angular elements overview: [https://angular.io/guide/elements](https://angular.io/guide/elements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ngx-build-plus`: [https://www.npmjs.com/package/ngx-build-plus](https://www.npmjs.com/package/ngx-build-plus)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code89405936498927781.png)'
  prefs: []
  type: TYPE_IMG
