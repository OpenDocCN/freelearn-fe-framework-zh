- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Building an Issue Tracking System Using Reactive Forms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反应式表单构建问题跟踪系统
- en: Web applications use HTML forms to collect data from users and validate them,
    such as when logging in to an application, performing a search, or completing
    an online payment. The Angular framework provides two types of forms, reactive
    and template-driven, that we can use in an Angular application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Web 应用程序使用 HTML 表单从用户那里收集数据并进行验证，例如在登录应用程序、执行搜索或完成在线支付时。Angular 框架提供了两种类型的表单，反应式和模板驱动型，我们可以在
    Angular 应用程序中使用。
- en: In this chapter, we will build a system for managing and tracking issues. We
    will use Angular reactive forms for reporting new issues. We will also use **Clarity
    Design System** from VMware for designing our forms and displaying our issues.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个用于管理和跟踪问题的系统。我们将使用 Angular 反应式表单来报告新问题。我们还将使用来自 VMware 的 **Clarity
    设计系统**来设计我们的表单和显示我们的问题。
- en: 'We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Installing Clarity Design System in an Angular application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中安装 Clarity 设计系统
- en: Displaying an overview of issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示问题概述
- en: Reporting new issues
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告新问题
- en: Marking an issue as resolved
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记问题为已解决
- en: Turning on suggestions for new issues
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用新问题建议
- en: Essential background theory and context
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景理论和上下文
- en: 'The Angular framework provides two types of forms that we can use:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 框架提供了两种类型的表单，我们可以使用：
- en: '**Template-driven**: They are easy to set up in an Angular application. Template-driven
    forms do not scale well and are difficult to test because they are defined in
    the component template.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板驱动型**：在 Angular 应用程序中设置它们非常简单。模板驱动的表单扩展性不好，且难以测试，因为它们是在组件模板中定义的。'
- en: '**Reactive**: They are based on the reactive programming approach. Reactive
    forms operate in the TypeScript class of the component, and they are easier to
    test and scale better than template-driven forms.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反应式**：它们基于反应式编程方法。反应式表单在组件的 TypeScript 类中操作，并且比模板驱动型表单更容易测试和扩展。'
- en: In this chapter, we will get hands-on with the reactive forms approach, which
    is the most popular in the Angular community.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将亲身体验反应式表单方法，这是 Angular 社区中最受欢迎的方法。
- en: 'Angular components can get data from external sources such as HTTP or other
    Angular components. In the latter case, they interact with components that have
    data using a public API:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 组件可以从外部源（如 HTTP 或其他 Angular 组件）获取数据。在后一种情况下，它们通过公共 API 与具有数据的组件交互：
- en: '`@Input()`: This is used to pass data into a component.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Input()`：用于向组件传递数据。'
- en: '`@Output()`: This is used to get notified about changes or get data back from
    a component.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Output()`：用于接收通知或从组件获取数据。'
- en: '**Clarity** is a design system that contains a set of UX and UI guidelines
    for building web applications. It also comprises a proprietary HTML and CSS framework
    packed with these guidelines. Luckily, we do not have to use this framework since
    Clarity already provides various Angular-based UI components that we can use in
    our Angular applications.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**Clarity** 是一个包含构建 Web 应用程序的一套 UX 和 UI 指南的设计系统。它还包含一个包含这些指南的专有 HTML 和 CSS
    框架。幸运的是，我们不需要使用这个框架，因为 Clarity 已经提供了各种基于 Angular 的 UI 组件，我们可以在我们的 Angular 应用程序中使用。'
- en: Project overview
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'In this project, we will build an Angular application for managing and tracking
    issues using reactive forms and Clarity. Initially, we will display a list of
    issues in a table that we can sort and filter. We will then create a form for
    allowing users to report new issues. Finally, we will create a modal dialog for
    resolving an issue. We will also go the extra mile and turn on suggestions when
    reporting an issue to help users avoid duplicate entries. The following diagram
    depicts an architectural overview of the project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在此项目中，我们将使用反应式表单和 Clarity 构建 Angular 应用程序来管理和跟踪问题。最初，我们将以表格形式显示问题列表，我们可以对其进行排序和筛选。然后我们将创建一个表单，允许用户报告新问题。最后，我们将创建一个模态对话框来解决问题。我们还将更进一步，在报告问题时启用建议，以帮助用户避免重复输入。以下图表展示了项目的架构概述：
- en: '![](img/B18465_03_01.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_03_01.png)'
- en: Figure 3.1 – Project architecture
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 项目架构
- en: 'Build time: 1 hour'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：1 小时
- en: Getting started
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: 'The following software tools are required to complete this project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目所需的以下软件工具：
- en: '**Angular CLI**: A command-line interface for Angular that you can find at
    [https://angular.io/cli](https://angular.io/cli)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular CLI**：Angular 的命令行界面，您可以在 [https://angular.io/cli](https://angular.io/cli)
    找到'
- en: '**GitHub material**: The related code for this chapter, which you can find
    in the `Chapter03` folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub 材料**：本章的相关代码，您可以在 [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)
    的 `Chapter03` 文件夹中找到'
- en: Installing Clarity in an Angular application
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中安装 Clarity
- en: 'Let’s start creating our issue-tracking system by scaffolding a new Angular
    application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过搭建一个新的 Angular 应用程序来开始创建我们的问题跟踪系统：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We use the `ng new` command of the Angular CLI to create a new Angular application
    with the following characteristics:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Angular CLI 的 `ng new` 命令创建一个具有以下特性的新 Angular 应用程序：
- en: '`issue-tracker`: The name of the Angular application.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`issue-tracker`：Angular 应用程序的名称。'
- en: '`--defaults`: This disables Angular routing for the application and sets the
    stylesheet format to CSS.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--defaults`：此选项禁用应用程序的 Angular 路由，并将样式表格式设置为 CSS。'
- en: 'We now need to install the Clarity library in our Angular application:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在我们的 Angular 应用程序中安装 Clarity 库：
- en: 'Navigate to the `issue-tracker` folder that was created and run the following
    command to install it:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到创建的 `issue-tracker` 文件夹，并运行以下命令来安装它：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the `angular.json` file and add the Clarity CSS styles in the `styles`
    array:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `angular.json` 文件，并在 `styles` 数组中添加 Clarity CSS 样式：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, import `ClarityModule` and `BrowserAnimationsModule` in the main application
    module, `app.module.ts`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在主应用程序模块 `app.module.ts` 中导入 `ClarityModule` 和 `BrowserAnimationsModule`：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have completed installing Clarity in our application, we can start
    building beautiful designs with it. In the following section, we will begin by
    creating a list for displaying our issues.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了 Clarity 在我们的应用程序中的安装，我们可以开始使用它构建美观的设计。在接下来的部分，我们将首先创建一个用于显示我们问题的列表。
- en: Displaying an overview of issues
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示问题概述
- en: 'Our Angular application will be responsible for managing and tracking issues.
    When the application starts, we should display a list of all pending issues in
    the system. Pending issues are defined as those issues that have not been resolved.
    The process that we will follow can be further analyzed as the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Angular 应用程序将负责管理和跟踪问题。当应用程序启动时，我们应该显示系统中所有待处理问题的列表。待处理问题定义为那些尚未解决的问题。我们将遵循的过程可以进一步分析如下：
- en: Fetching pending issues
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取待处理问题
- en: Visualizing issues using a data grid
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据网格可视化问题
- en: Fetching pending issues
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取待处理问题
- en: 'First, we need to create a mechanism for fetching all pending issues:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个机制来获取所有待处理问题：
- en: 'Use the `generate` command of the Angular CLI to create an Angular service
    named `issues`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 的 `generate` 命令创建一个名为 `issues` 的 Angular 服务：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding command will create an `issues.service.ts` file in the `src\app`
    folder of our Angular CLI project.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令将在我们的 Angular CLI 项目的 `src\app` 文件夹中创建一个 `issues.service.ts` 文件。
- en: 'Every issue will have specific properties of a defined type. We need to create
    a TypeScript interface for that with the following Angular CLI command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个问题都将具有定义类型的特定属性。我们需要使用以下 Angular CLI 命令创建一个 TypeScript 接口：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous command will create an `issue.ts` file in the `src\app` folder
    of the project.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令将在项目的 `src\app` 文件夹中创建一个 `issue.ts` 文件。
- en: 'Open the `issue.ts` file and add the following properties in the `Issue` interface:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue.ts` 文件，并在 `Issue` 接口中添加以下属性：
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `completed` property is the date that an issue is resolved. We define it
    as optional because new issues will not have this property set.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`completed` 属性是一个问题被解决时的日期。我们将其定义为可选的，因为新问题将不会设置此属性。'
- en: 'Open the Angular service we created in step 1 and add an `issues` property
    to hold our data. Also, create a `getPendingIssues` method that will return all
    issues that have not been completed:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在第一步中创建的 Angular 服务，并添加一个 `issues` 属性来存储我们的数据。同时，创建一个 `getPendingIssues`
    方法，它将返回所有未完成的问题：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, we initialize the `issues` property to an empty array.
    If you want to get started with sample data, you can use the `mock-issues.ts`
    file from the `src\assets` folder that exists in the GitHub material of this chapter
    and import it as follows:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将 `issues` 属性初始化为一个空数组。如果您想从示例数据开始，可以使用本章 GitHub 材料中存在的 `src\assets`
    文件夹中的 `mock-issues.ts` 文件，并按以下方式导入：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the following section, we will create a component for displaying those issues.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将创建一个用于显示这些问题的组件。
- en: Visualizing issues in a data grid
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在数据网格中可视化问题
- en: 'We will use the data grid UI component of the Clarity library to display data
    in a tabular format. A data grid also provides mechanisms for filtering and sorting
    out of the box. Let’s create the Angular component that will host the data grid
    first:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Clarity 库的数据网格 UI 组件以表格格式显示数据。数据网格还提供了开箱即用的过滤和排序机制。首先，让我们创建一个将托管数据网格的
    Angular 组件：
- en: 'Use the `generate` command of the Angular CLI to create the component:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Angular CLI 的 `generate` 命令创建组件：
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the template of the main component of our application, `app.component.html`,
    and replace its content with the following HTML code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们应用程序的主要组件模板 `app.component.html`，并用以下 HTML 代码替换其内容：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The list of issues will be displayed in the main component of the Angular application
    as soon as it starts up.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦 Angular 应用程序启动，问题列表将显示在主组件中。
- en: 'Currently, the `<app-issue-list>` component displays no issue data. We must
    connect it with the Angular service we created in the *Fetching pending issues*
    section. Open the `issue-list.component.ts` file and inject `IssuesService` in
    the `constructor` of the `IssueListComponent` class:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，`<app-issue-list>` 组件不显示任何问题数据。我们必须将其与我们在 *获取待处理问题* 部分创建的 Angular 服务连接起来。打开
    `issue-list.component.ts` 文件，并在 `IssueListComponent` 类的 `constructor` 中注入 `IssuesService`：
- en: '[PRE11]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a method named `getIssues` that will call the `getPendingIssues` method
    of the injected service and keep its returned value in the `issues` component
    property:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `getIssues` 的方法，该方法将调用注入的服务中的 `getPendingIssues` 方法，并将返回值保存在 `issues`
    组件属性中：
- en: '[PRE12]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, call the `getIssues` method in the `ngOnInit` component method to
    get all pending issues upon component initialization:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `ngOnInit` 组件方法中调用 `getIssues` 方法，以在组件初始化时获取所有待处理问题：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have already implemented the process for getting issue data in our component.
    All we have to do now is display it in the template. Open the `issue-list.component.html`
    file and replace its content with the following HTML code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的组件中实现了获取问题数据的过程。现在我们只需要在模板中显示它。打开 `issue-list.component.html` 文件，并用以下
    HTML 代码替换其内容：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding snippet, we use several Angular components of the Clarity
    library:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用了 Clarity 库的几个 Angular 组件：
- en: '`<clr-datagrid>`: Defines a table.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<clr-datagrid>`: 定义一个表格。'
- en: '`<clr-dg-column>`: Defines a column of a table. Each column uses the `clrDgField`
    directive to bind to the property name of the issue represented by that column.
    The `clrDgField` directive provides sorting and filtering capabilities without
    writing a single line of code in the TypeScript class file. Sorting works automatically
    only with string-based content. If we want to sort by a different primitive type,
    we must use the `clrDgColType` directive and specify the particular type.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<clr-dg-column>`: 定义表格的一列。每一列使用 `clrDgField` 指令绑定到该列表示的问题的属性名。`clrDgField`
    指令提供了排序和过滤功能，而无需在 TypeScript 类文件中编写任何代码。排序仅适用于基于字符串的内容。如果我们想按不同的原始类型排序，我们必须使用
    `clrDgColType` 指令并指定特定的类型。'
- en: '`<clr-dg-row>`: Defines a row of a table. It uses the `*clrDgItems` directive
    to iterate over the issues and create one row for each issue.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<clr-dg-row>`: 定义表格的一行。它使用 `*clrDgItems` 指令遍历问题，并为每个问题创建一行。'
- en: '`<clr-dg-cell>`: Each row contains a collection of `<clr-dg-cell>` components
    to display the value of each column using interpolation. In the last cell, we
    add the `label-danger` class when an issue has a high priority to indicate its
    importance.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<clr-dg-cell>`: 每一行包含一组 `<clr-dg-cell>` 组件，用于通过插值显示每列的值。在最后一列中，当问题具有高优先级时，我们添加
    `label-danger` 类以表明其重要性。'
- en: '`<clr-dg-footer>`: Defines the footer of a table. In this case, it displays
    the total number of issues.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<clr-dg-footer>`: 定义表格的页脚。在这种情况下，它显示问题的总数。'
- en: 'If we run our Angular application using `ng serve`, the output will look like
    the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 `ng serve` 运行我们的 Angular 应用程序，输出将如下所示：
- en: '![Figure 3.1 – Overview of pending issues](img/B18465_03_02.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 待处理问题的概述](img/B18465_03_02.png)'
- en: Figure 3.2 – Overview of pending issues
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 待处理问题的概述
- en: In the previous screenshot, the application uses sample data from the `mock-issues.ts`
    file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，应用程序使用 `mock-issues.ts` 文件中的示例数据。
- en: The data grid component of the Clarity library has a rich set of capabilities
    that we can use in our Angular applications. In the following section, we will
    learn how to use reactive forms to report a new issue.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Clarity 库的数据网格组件具有丰富的功能，我们可以在我们的 Angular 应用程序中使用这些功能。在下一节中，我们将学习如何使用响应式表单来报告新问题。
- en: Reporting new issues
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告新问题
- en: 'One of the main features of our issue-tracking system is the ability to report
    new issues. We will use Angular reactive forms to create a form for adding new
    issues. The feature can be further subdivided into the following tasks:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们问题跟踪系统的主要功能之一是能够报告新问题。我们将使用 Angular 反应式表单来创建添加新问题的表单。该功能可以进一步细分为以下任务：
- en: Setting up reactive forms in an Angular application
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中设置反应式表单
- en: Creating the report issue form
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建报告问题表单
- en: Displaying a new issue in the list
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表中显示新问题
- en: Validating the details of an issue
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证问题细节
- en: Let’s begin by introducing reactive forms in our Angular application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Angular 应用程序中介绍反应式表单开始。
- en: Setting up reactive forms in an Angular application
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中设置反应式表单
- en: 'Reactive forms are defined in the `@angular/forms` npm package of the Angular
    framework. To add them to our Angular application:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 反应式表单定义在 Angular 框架的 `@angular/forms` npm 包中。要将它们添加到我们的 Angular 应用程序中：
- en: 'Open the `app.module.ts` file and import `ReactiveFormsModule`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开 `app.module.ts` 文件并导入 `ReactiveFormsModule`:'
- en: '[PRE15]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add `ReactiveFormsModule` into the `imports` array of the `@NgModule` decorator:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ReactiveFormsModule` 添加到 `@NgModule` 装饰器的 `imports` 数组中：
- en: '[PRE16]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`ReactiveFormsModule` contains all necessary Angular directives and services
    that we will need to work with forms, as we will see in the following section.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactiveFormsModule` 包含了我们与表单一起工作所需的所有必要的 Angular 指令和服务，正如我们将在下一节中看到的。'
- en: Creating the report issue form
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建报告问题表单
- en: 'Now that we have introduced reactive forms in our Angular application, we can
    start building our form:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 Angular 应用程序中介绍了反应式表单，我们可以开始构建我们的表单：
- en: 'Create a new Angular component named `issue-report`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `issue-report` 的新 Angular 组件：
- en: '[PRE17]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the `issue-report.component.ts` file and add the following `import` statement:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-report.component.ts` 文件并添加以下 `import` 语句：
- en: '[PRE18]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this statement, `FormControl` represents a single control of a form and `FormGroup`
    is used to group individual controls into a logical form representation.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个语句中，`FormControl` 代表表单的单个控件，而 `FormGroup` 用于将单个控件组合成一个逻辑表单表示。
- en: 'Create the following interface, which will represent the structure of our form:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下接口，它将代表我们表单的结构：
- en: '[PRE19]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Declare an `issueForm` property of the `FormGroup<IssueForm>` type in the TypeScript
    class:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 TypeScript 类中声明一个 `issueForm` 属性，其类型为 `FormGroup<IssueForm>`：
- en: '[PRE20]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We initialize all controls to empty strings because the form will be used to
    create a new issue from scratch. We also explicitly state that all controls will
    not accept null values by default using the `nonNullable` property.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将所有控件初始化为空字符串，因为表单将用于从头创建新问题。我们还通过使用 `nonNullable` 属性明确声明所有控件默认不接受空值。
- en: 'We must now associate the `FormGroup` object we created with the respective
    HTML elements. Open the `issue-report.component.html` file and replace its content
    with the following HTML code:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在必须将我们创建的 `FormGroup` 对象与相应的 HTML 元素关联。打开 `issue-report.component.html` 文件，并用以下
    HTML 代码替换其内容：
- en: '[PRE21]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `formGroup` and `clrForm` directives associate the HTML `<form>` element
    with the `issueForm` property and identify it as a Clarity form.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`formGroup` 和 `clrForm` 指令将 HTML `<form>` 元素与 `issueForm` 属性关联，并将其标识为 Clarity
    表单。'
- en: The `formControlName` directive is used to associate HTML elements with form
    controls using their name. Each control is also defined using a Clarity container
    element.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`formControlName` 指令用于通过名称将 HTML 元素与表单控件关联。每个控件也使用 Clarity 容器元素定义。'
- en: For example, the `title` input control is a `<clr-input-container>` component
    that contains an `<input>` HTML element.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`title` 输入控件是一个包含 `<input>` HTML 元素的 `<clr-input-container>` 组件。
- en: Each native HTML element has a Clarity directive attached to it according to
    its type. For example, the `<input>` HTML element contains a `clrInput` directive.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个原生 HTML 元素都根据其类型附加了一个 Clarity 指令。例如，`<input>` HTML 元素包含一个 `clrInput` 指令。
- en: 'Finally, add some styles to our `issue-report.component.css` file:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，给我们的 `issue-report.component.css` 文件添加一些样式：
- en: '[PRE22]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that we have created the basics of our form, we will learn how to submit
    its details:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了表单的基本结构，我们将学习如何提交其细节：
- en: 'Add an HTML `<button>` element *before* the closing tag of the HTML `<form>`
    element:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 HTML `<form>` 元素的结束标签之前添加一个 HTML `<button>` 元素：
- en: '[PRE23]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We set its type to `submit` to trigger form submission upon clicking the button.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将其类型设置为 `submit`，以便在点击按钮时触发表单提交。
- en: 'Open the `issues.service.ts` file and add a `createIssue` method that inserts
    a new issue into the `issues` array:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issues.service.ts` 文件并添加一个 `createIssue` 方法，该方法将新问题插入到 `issues` 数组中：
- en: '[PRE24]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We automatically assign a new `issueNo` property to the issue before adding
    it to the `issues` array.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将问题添加到 `issues` 数组之前，我们自动为问题分配一个新的 `issueNo` 属性。
- en: The `issueNo` property is currently calculated according to the length of the
    `issues` array. A better approach would be implementing a generator mechanism
    for creating unique and random `issueNo` values.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当前 `issueNo` 属性是根据 `issues` 数组的长度来计算的。一个更好的方法是实现一个生成器机制来创建唯一且随机的 `issueNo` 值。
- en: 'Return to the `issue-report.component.ts` file and add the following `import`
    statements:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `issue-report.component.ts` 文件，并添加以下 `import` 语句：
- en: '[PRE25]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Inject the `IssuesService` class into the `constructor` of the TypeScript class:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `IssuesService` 类注入到 TypeScript 类的 `constructor` 中：
- en: '[PRE26]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a new component method that will call the `createIssue` method of the injected
    service:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的组件方法，该方法将调用注入的服务中的 `createIssue` 方法：
- en: '[PRE27]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We pass the value of each form control using the `getRawValue` property of the
    `issueForm` object that will provide us access to the underlying form model. We
    are also typecasting it to the `Issue` interface since we already know that its
    values will represent the properties of an issue object.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `issueForm` 对象的 `getRawValue` 属性传递每个表单控件值，该对象将为我们提供对底层表单模型的访问。我们还将其类型转换为
    `Issue` 接口，因为我们已经知道其值将代表问题对象的属性。
- en: 'Open the `issue-report.component.html` file and bind the `ngSubmit` event of
    the form to the `addIssue` component method:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-report.component.html` 文件，并将表单的 `ngSubmit` 事件绑定到 `addIssue` 组件方法：
- en: '[PRE28]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `ngSubmit` event will be triggered when we click on the `Create` button
    of the form.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击表单的 `Create` 按钮时，将触发 `ngSubmit` 事件。
- en: We have completed all the processes to add a new issue to the system. In the
    following section, we will learn how to display a newly created issue in the pending
    issue table.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了将新问题添加到系统的所有过程。在下一节中，我们将学习如何在待处理问题表中显示新创建的问题。
- en: Displaying a new issue in the list
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在列表中显示新问题
- en: 'Displaying and creating new issues are two tasks delegated to different Angular
    components. When we create a new issue with `IssueReportComponent`, we need to
    notify `IssueListComponent` to reflect that change in the table. First, let’s
    see how we can configure `IssueReportComponent` to communicate that change:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 显示和创建新问题是委托给不同的 Angular 组件的两个任务。当我们使用 `IssueReportComponent` 创建新问题时，我们需要通知 `IssueListComponent`
    以在表格中反映这一变化。首先，让我们看看如何配置 `IssueReportComponent` 以实现这种通信：
- en: 'Open the `issue-report.component.ts` file and use the `@Output()` decorator
    to add an `EventEmitter` property:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-report.component.ts` 文件，并使用 `@Output()` 装饰器添加一个 `EventEmitter` 属性：
- en: '[PRE29]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`Output` and `EventEmitter` symbols can be imported from the `@angular/core`
    npm package.'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以从 `@angular/core` npm 包中导入 `Output` 和 `EventEmitter` 符号。
- en: 'Call the `emit` method of the `formClose` output property inside the `addIssue`
    component method right after creating the issue:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建问题后，立即在 `addIssue` 组件方法中调用 `formClose` 输出属性的 `emit` 方法：
- en: '[PRE30]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a second HTML `<button>` element in the component template and call the
    `formClose.emit` method on its `click` event:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件模板中添加第二个 HTML `<button>` 元素，并在其 `click` 事件上调用 `formClose.emit` 方法：
- en: '[PRE31]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`IssueListComponent` can now bind to the `formClose` event of `IssueReportComponent`
    and be notified when any buttons are clicked. Let’s find out how:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`IssueListComponent` 现在可以绑定到 `IssueReportComponent` 的 `formClose` 事件，并在任何按钮被点击时收到通知。让我们来看看如何实现：'
- en: 'Open the `issue-list.component.ts` file and add the following property in the
    `IssueListComponent` class:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-list.component.ts` 文件，并在 `IssueListComponent` 类中添加以下属性：
- en: '[PRE32]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `showReportIssue` property will toggle the appearance of the report issue
    form.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`showReportIssue` 属性将切换报告问题表单的显示。'
- en: 'Add the following component method, which will be called when the report issue
    form emits the `formClose` event:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下组件方法，当报告问题表单发出 `formClose` 事件时将被调用：
- en: '[PRE33]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The preceding method will set the `showReportIssue` property to `false` so that
    the report issue form is no longer visible and the table of pending issues is
    displayed instead. It will also fetch issues again to refresh the data in the
    table.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的方法会将 `showReportIssue` 属性设置为 `false`，这样报告问题表单就不再可见，而是显示待处理问题的表格。它还会再次获取问题以刷新表格中的数据。
- en: 'Open the `issue-list.component.html` file and add an HTML `<button>` element
    at the top of the template. The button will display the report issue form when
    clicked:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-list.component.html` 文件，并在模板顶部添加一个 HTML `<button>` 元素。当点击按钮时，将显示报告问题表单：
- en: '[PRE34]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Group the button and the data grid inside an `<ng-container>` element. As indicated
    by the `*ngIf` Angular directive, the contents of the `<ng-container>` element
    will be displayed when the report issue form is not visible:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<ng-container>` 元素内组合按钮和数据网格。如 `*ngIf` Angular 指令所示，当报告问题表单不可见时，`<ng-container>`
    元素的 内容将被显示：
- en: '[PRE35]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `<ng-container>` element is an Angular component not rendered on the screen
    and used to group HTML elements.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<ng-container>` 元素是一个 Angular 组件，它不会在屏幕上渲染，用于组合 HTML 元素。'
- en: 'Add the `<app-issue-report>` component at the end of the template and use the
    `*ngIf` directive to display it when the `showReportIssue` property is true. Also
    bind its `formClose` event to the `onCloseReport` component method:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板末尾添加 `<app-issue-report>` 组件，并使用 `*ngIf` 指令在 `showReportIssue` 属性为 true 时显示它。同时将其
    `formClose` 事件绑定到 `onCloseReport` 组件方法：
- en: '[PRE36]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We have successfully connected all the dots and completed the interaction between
    the report issue form and the table that displays issues. Now it is time to put
    them into action:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功连接了所有点，完成了报告问题表单与显示问题的表格之间的交互。现在，是时候将它们付诸实践了：
- en: Run the Angular application using `ng` `serve`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ng` `serve` 运行 Angular 应用程序。
- en: 'Click on the **ADD NEW ISSUE** button and enter the details of a new issue:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加新问题** 按钮，并输入新问题的详细信息：
- en: '![Figure 3.2 – Report issue form](img/B18465_03_03.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 报告问题表单](img/B18465_03_03.png)'
- en: Figure 3.3 – Report issue form
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 报告问题表单
- en: 'Click on the **CREATE** button, and the new issue should appear in the table:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 按钮，新的问题应该会出现在表格中：
- en: '![Figure 3.3 – Pending issues](img/B18465_03_04.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 待处理问题](img/B18465_03_04.png)'
- en: Figure 3.4 – Pending issues
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 待处理问题
- en: Repeat steps 2 and 3 without filling in any details, and you will notice an
    empty issue added to the table.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 2 和 3 而不填写任何详细信息，你将注意到表格中添加了一个空的问题。
- en: An empty issue can be created because we have not defined any required fields
    on our report issue form. In the following section, we will learn how to accomplish
    this task and add validations to our form to avoid unexpected behaviors.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建一个空的问题，因为我们没有在我们的报告问题表单上定义任何必填字段。在下一节中，我们将学习如何完成这项任务，并添加验证到我们的表单以避免意外的行为。
- en: Validating the details of an issue
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证问题详情
- en: 'When we create an issue with the report issue form, we can leave the form control
    value empty since we have not added any validation rules yet. To add validations
    in a form control, we use the `Validators` class from the `@angular/forms` npm
    package. A validator is added in each form control instance when we build the
    form. In this case, we will use the **required** validator to indicate that a
    form control is required to have a value:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用报告问题表单创建问题时，我们可以留空表单控件值，因为我们还没有添加任何验证规则。要在表单控件中添加验证，我们使用来自 `@angular/forms`
    npm 包的 `Validators` 类。在构建表单时，每个表单控件实例都会添加一个验证器。在这种情况下，我们将使用 **required** 验证器来表示表单控件必须有一个值：
- en: 'Open the `issue-report.component.ts` file and import `Validators` from the
    `@angular/forms` npm package:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-report.component.ts` 文件，并从 `@angular/forms` npm 包导入 `Validators`：
- en: '[PRE37]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Set the `Validators.required` static property in all controls except the `description`
    of the issue:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有控件（除了问题的 `description`）中设置 `Validators.required` 静态属性：
- en: '[PRE38]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We can use various validators for a form control, such as **min**, **max**,
    and **email**. If we want to set multiple validators in a form control, we add
    them inside an array.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以为表单控件使用各种验证器，例如 **min**、**max** 和 **email**。如果我们想在表单控件中设置多个验证器，我们可以在一个数组中添加它们。
- en: 'When we use validators in a form, we need to provide a visual indication to
    the user of the form. Open the `issue-report.component.html` file and add a `<clr-control-error>`
    component for each required form control:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在表单中使用验证器时，我们需要向用户提供视觉指示。打开 `issue-report.component.html` 文件，并为每个必填表单控件添加
    `<clr-control-error>` 组件：
- en: '[PRE39]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `<clr-control-error>` Clarity component provides validation messages in
    forms. It is displayed when we touch an invalid control. A control is invalid
    when at least one of its validation rules is violated.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<clr-control-error>` Clarity 组件在表单中提供验证消息。当触摸无效控件时，它会显示。当至少有一个验证规则被违反时，控件是无效的。'
- en: 'The user may only sometimes touch form controls to see the validation message.
    So, we need to consider that upon form submission and act accordingly. To overcome
    this case, we will mark all form controls as touched when the form is submitted:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户可能只是偶尔触摸表单控件来查看验证消息。因此，我们需要在表单提交时考虑这一点并相应地操作。为了克服这种情况，我们将在表单提交时将所有表单控件标记为已触摸：
- en: '[PRE40]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Run `ng serve` to start the application. Click inside the **Title** input, and
    then move the focus out of the form control:![Figure 3.4 – Title validation message](img/B18465_03_05.png)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ng serve`以启动应用程序。在**标题**输入框内点击，然后移出表单控件：![图3.4 – 标题验证消息](img/B18465_03_05.png)
- en: Figure 3.5 – Title validation message
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.5 – 标题验证消息
- en: A message should appear underneath the **Title** input stating that we have
    not entered any value yet. Validation messages in the Clarity library are indicated
    by text and an exclamation icon in red in the form control that is validated.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**标题**输入框下方应出现一条消息，说明我们尚未输入任何值。Clarity库中的验证消息由文本和红色感叹号图标在验证的表单控件中表示。
- en: 'Now, click on the **CREATE** button:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**创建**按钮：
- en: '![Figure 3.5 – Form validation messages](img/B18465_03_06.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 表单验证消息](img/B18465_03_06.png)'
- en: Figure 3.6 – Form validation messages
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – 表单验证消息
- en: All validation messages will appear on the screen at once, and the form will
    not be submitted. Validations in reactive forms ensure a smooth UX for our Angular
    applications. In the following section, we will learn how to create a modal dialog
    with Clarity and use it to resolve issues from our list.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 所有验证消息将同时出现在屏幕上，表单将不会提交。响应式表单中的验证确保了我们的Angular应用程序拥有流畅的用户体验。在下一节中，我们将学习如何使用Clarity创建模态对话框，并使用它来解决列表中的问题。
- en: Resolving an issue
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决问题
- en: 'The main idea behind having an issue tracking system is that an issue should
    be resolved at some point. We will create a user workflow in our application to
    accomplish such a task. We will be able to resolve an issue directly from the
    list of pending issues. The application will ask for confirmation from the user
    before resolving with the use of a modal dialog:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 建立问题跟踪系统的主要思想是问题应该在某个时候得到解决。我们将在我们的应用程序中创建一个用户工作流程来完成这项任务。我们将能够直接从待解决问题列表中解决问题。在解决问题时，应用程序将使用模态对话框向用户请求确认：
- en: 'Create an Angular component to host the dialog:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Angular组件来托管对话框：
- en: '[PRE41]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Open the `confirm-dialog.component.ts` file and modify it as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`confirm-dialog.component.ts`文件，并按以下方式修改它：
- en: '[PRE42]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We use the `@Input()` decorator to get the issue number and display it on the
    component template. The `confirm` event will emit a `boolean` value to indicate
    whether the user confirmed resolving the issue or not.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用`@Input()`装饰器来获取问题编号并在组件模板中显示它。`confirm`事件将发出一个`boolean`值，以指示用户是否确认解决了问题。
- en: 'Create two methods that will call the `emit` method of the `confirm` output
    property, either with `true` or `false`:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个方法，这两个方法将调用`confirm`输出属性的`emit`方法，要么是`true`，要么是`false`：
- en: '[PRE43]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Both methods will set the `issueNo` property to `null` because that property
    will also control whether the modal dialog is opened. So, we want to close the
    dialog in both cases.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法都将`issueNo`属性设置为`null`，因为该属性也将控制模态对话框是否打开。所以，我们希望在两种情况下都关闭对话框。
- en: 'We have set up the TypeScript class of our dialog component. Let’s wire it
    up now with its template. Open the `confirm-dialog.component.html` file and replace
    its content with the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了对话框组件的TypeScript类。现在让我们通过其模板将其连接起来。打开`confirm-dialog.component.html`文件，并用以下内容替换其内容：
- en: '[PRE44]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'A Clarity modal dialog consists of a `<clr-modal>` component and a collection
    of HTML elements with specific classes:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Clarity模态对话框由一个`<clr-modal>`组件和一组具有特定类的HTML元素组成：
- en: '`modal-title`: The dialog title that displays the current issue number.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modal-title`：显示当前问题编号的对话框标题。'
- en: '`modal-body`: The main content of the dialog.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modal-body`：对话框的主要内容。'
- en: '`modal-footer`: The footer of the dialog that is commonly used to add actions
    for that dialog. We currently add two HTML `<button>` elements and bind their
    `click` event to the `agree` and `disagree` component methods, respectively.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modal-footer`：对话框的页脚，通常用于添加该对话框的动作。我们目前添加了两个HTML `<button>`元素，并将它们的`click`事件分别绑定到`agree`和`disagree`组件方法。'
- en: Whether it is opened or closed, the current status of the dialog is indicated
    by the `clrModalOpen` directive bound to the `issueNo` input property. When that
    property is null, the dialog is closed. The `clrModalClosable` directive indicates
    that the dialog cannot be closed by any means other than programmatically through
    the `issueNo` property.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是打开还是关闭，对话框的当前状态由绑定到`issueNo`输入属性的`clrModalOpen`指令指示。当该属性为null时，对话框是关闭的。`clrModalClosable`指令指示对话框不能通过任何其他方式关闭，只能通过程序化地通过`issueNo`属性关闭。
- en: 'According to our specs, we want the user to resolve an issue directly from
    the list. Let’s find out how we can integrate the dialog that we created with
    the list of pending issues:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的规范，我们希望用户能够直接从列表中解决问题。让我们找出如何将我们创建的对话框与待解决问题列表集成：
- en: 'Open the `issues.service.ts` file and add a new method to set the `completed`
    property of an issue:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issues.service.ts` 文件并添加一个新方法来设置问题的 `completed` 属性：
- en: '[PRE45]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The previous method first creates a clone of the issue we want to resolve and
    sets its `completed` property to the current date. It then finds the initial issue
    in the `issues` array and replaces it with the cloned instance.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的方法首先创建了一个我们想要解决的问题的副本，并将其 `completed` 属性设置为当前日期。然后它在 `issues` 数组中找到初始问题，并用克隆实例替换它。
- en: 'Open the `issue-list.component.ts` file and add a `selectedIssue` property
    and an `onConfirm` method in the TypeScript class:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-list.component.ts` 文件并在 TypeScript 类中添加一个 `selectedIssue` 属性和一个 `onConfirm`
    方法：
- en: '[PRE46]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `onConfirm` method calls the `completeIssue` method of the `issueService`
    property only when the `confirmed` parameter is true. In this case, it also calls
    the `getIssues` method to refresh the table data. The `selectedIssue` property
    holds the `Issue` object that we want to resolve, and it is reset whenever the
    `onConfirm` method is called.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有当 `confirmed` 参数为真时，`onConfirm` 方法才会调用 `issueService` 属性的 `completeIssue`
    方法。在这种情况下，它还会调用 `getIssues` 方法来刷新表格数据。`selectedIssue` 属性持有我们想要解决的问题的 `Issue` 对象，并且每次调用
    `onConfirm` 方法时都会重置。
- en: 'Open the `issue-list.component.html` file and add an action overflow component
    inside the `<clr-dg-row>` component:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-list.component.html` 文件并在 `<clr-dg-row>` 组件内添加一个操作溢出组件：
- en: '[PRE47]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `<clr-dg-action-overflow>` Clarity component adds a drop-down menu in each
    table row. The menu contains a single button to set the `selectedIssue` property
    to the current issue when clicked.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Clarity 组件 `<clr-dg-action-overflow>` 在每一行表格中添加一个下拉菜单。该菜单包含一个按钮，当点击时，将 `selectedIssue`
    属性设置为当前问题。
- en: 'Finally, add the `<app-confirm-dialog>` component at the end of the template:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在模板末尾添加 `<app-confirm-dialog>` 组件：
- en: '[PRE48]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We pass the `issueNo` property of `selectedIssue` to the input binding of the
    dialog component.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将 `selectedIssue` 的 `issueNo` 属性传递给对话框组件的输入绑定。
- en: We also bind the `onConfirm` component method to the `confirm` event so that
    we can be notified when the user either agrees or not. The `$event` parameter
    is a reserved keyword in Angular and contains the event binding result, which
    depends on the HTML element type. In this case, it includes the `boolean` result
    of the confirmation.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还将 `onConfirm` 组件方法绑定到 `confirm` 事件，以便我们可以在用户同意或不同意时得到通知。`$event` 参数是 Angular
    中的一个保留关键字，包含事件绑定结果，这取决于 HTML 元素类型。在这种情况下，它包括确认的 `boolean` 结果。
- en: 'We have put all the pieces into place to resolve an issue. Let’s give it a
    try:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将所有部件放在一起以解决问题。让我们试一试：
- en: Run `ng serve` and open the application at `http://localhost:4200`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ng serve` 并在 `http://localhost:4200` 打开应用程序。
- en: If you don’t have any issues, use the **ADD NEW ISSUE** button to create one.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有任何问题，请使用 **添加新问题** 按钮创建一个。
- en: 'Click on the action menu of one row and select **Resolve**. The menu is the
    three vertical dots icon next to the **Issue No** column:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击某一行的操作菜单并选择 **解决**。菜单是位于 **问题编号** 列旁边的三个垂直点图标：
- en: '![Figure 3.6 – Action menu](img/B18465_03_07.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 操作菜单](img/B18465_03_07.png)'
- en: Figure 3.7 – Action menu
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 操作菜单
- en: 'In the dialog that appears, click on the **YES, CONTINUE** button:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的对话框中，点击 **是，继续** 按钮：
- en: '![Figure 3.7 – Resolve Issue dialog](img/B18465_03_08.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 解决问题对话框](img/B18465_03_08.png)'
- en: Figure 3.8 – Resolve Issue dialog
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 解决问题对话框
- en: After clicking the button, the dialog will close, and the issue should no longer
    be visible on the list.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮后，对话框将关闭，问题不应再在列表中可见。
- en: We have provided a way for users of our application to resolve issues. Our issue-tracking
    system is now complete and ready to put into action! Sometimes, users are in a
    hurry and may report an issue already reported. In the following section, we will
    learn how to leverage advanced reactive form techniques to help them in this case.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的应用程序用户提供了解决问题的方法。我们的问题跟踪系统现在已完整并准备好投入使用！有时，用户可能因为匆忙而报告了已经报告的问题。在下一节中，我们将学习如何利用高级响应式表单技术来帮助他们。
- en: Turning on suggestions for new issues
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开启新问题建议
- en: 'The reactive forms API contains a mechanism for getting notified when the value
    of a particular form control changes. We will use it in our application to find
    related issues when reporting a new one. More specifically, we will display a
    list of suggested issues when the user starts typing in the title form control:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式表单 API 包含一个机制，用于在特定表单控件值发生变化时接收通知。我们将在我们的应用程序中使用它来在报告新问题时查找相关的问题。更具体地说，当用户开始在标题表单控件中输入时，我们将显示建议问题的列表：
- en: 'Open the `issues.service.ts` file and add the following method:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issues.service.ts` 文件并添加以下方法：
- en: '[PRE49]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The preceding method takes the title of an issue as a parameter and searches
    for any issues that contain the same title. The search mechanism is triggered
    when the `title` parameter is more than three characters long to limit results
    to a reasonable amount.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的方法接受一个问题的标题作为参数，并搜索包含相同标题的任何问题。当 `title` 参数超过三个字符长时，搜索机制被触发，以限制结果到一个合理的数量。
- en: 'Open the `issue-report.component.ts` file and import the `OnInit` artifact
    from the `@angular/core` npm package:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `issue-report.component.ts` 文件并从 `@angular/core` npm 包导入 `OnInit` 实体：
- en: '[PRE50]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a new component property to hold the suggested issues:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的组件属性来保存建议的问题：
- en: '[PRE51]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the `OnInit` interface to the list of implemented interfaces of the `IssueReportComponent`
    class:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `OnInit` 接口添加到 `IssueReportComponent` 类实现的接口列表中：
- en: '[PRE52]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `controls` property of a `FormGroup` object contains all form controls
    as a key-value pair. The key is the name of the control, and the value is the
    actual form control object. We can get notified about changes in the value of
    a form control by accessing its name, in this case, `title`, in the following
    way:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FormGroup` 对象的 `controls` 属性包含所有表单控件作为键值对。键是控件的名称，值是实际的表单控件对象。我们可以通过访问其名称（在这种情况下为
    `title`）来获取关于表单控件值变化的通知，以下是这样做的：'
- en: '[PRE53]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Each control exposes a `valueChanges` observable that we can subscribe to and
    get a continuous stream of values. The `valueChanges` observable emits new values
    as soon as the user starts typing in the `title` control of the form. When that
    happens, we set the result of the `getSuggestions` method in the `suggestions`
    component property.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个控件都公开一个 `valueChanges` 可观察对象，我们可以订阅它并获取一个连续的值流。`valueChanges` 可观察对象在用户开始在表单的
    `title` 控件中输入时立即发出新值。当发生这种情况时，我们将 `getSuggestions` 方法的结果设置在 `suggestions` 组件属性中。
- en: 'To display the suggested issues on the template of the component, open the
    `issue-report.component.html` file and add the following HTML code right after
    the `<clr-input-container>` element:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在组件的模板上显示建议的问题，打开 `issue-report.component.html` 文件，并在 `<clr-input-container>`
    元素之后添加以下 HTML 代码：
- en: '[PRE54]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We use the `<clr-stack-view>` component from the Clarity library to display
    suggested issues in a key-value pair representation. The key is indicated by the
    `<clr-stack-header>` component and displays the title and the number of the issue.
    The `<clr-stack-content>` component indicates the value and displays the issue
    description.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 Clarity 库中的 `<clr-stack-view>` 组件以键值对的形式显示建议的问题。键由 `<clr-stack-header>`
    组件指示，显示问题的标题和编号。《clr-stack-content》组件指示值并显示问题描述。
- en: We display similar issues only when there are any available suggested ones.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当有可用的建议问题时，我们才会显示类似的问题。
- en: 'Run `ng serve` and open the report issue form to create a new issue. When you
    start typing in the **Title** input, the application will suggest any issues related
    to the one that you are trying to create:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `ng serve` 并打开报告问题表单以创建新问题。当你开始在 **标题** 输入框中输入时，应用程序将建议任何与你试图创建的问题相关的任何问题：
- en: '![Figure 3.8 – Similar issues](img/B18465_03_09.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 类似的问题](img/B18465_03_09.png)'
- en: Figure 3.9 – Similar issues
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 类似的问题
- en: The user will now see if there are any similar issues and avoid reporting a
    duplicate issue.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在将看到是否有任何类似的问题，并避免报告重复的问题。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built an Angular application for managing and tracking issues
    using reactive forms and Clarity Design System.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用响应式表单和 Clarity 设计系统构建了一个 Angular 应用程序来管理和跟踪问题。
- en: First, we installed Clarity in an Angular application and used a data grid component
    to display a list of pending issues. Then, we introduced reactive forms and used
    them to build a form for reporting a new issue. We added validations in the form
    to give our users a visual indication of the required fields and guard against
    unwanted behavior.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 Angular 应用程序中安装了 Clarity，并使用数据网格组件显示待处理问题的列表。然后，我们介绍了响应式表单，并使用它们来构建报告新问题的表单。我们在表单中添加了验证，以向用户提供必填字段的视觉指示并防止不希望的行为。
- en: An issue-tracking system is only efficient if our users can resolve them. We
    built a modal dialog using Clarity to resolve a selected issue. Finally, we improved
    the UX of our application by suggesting related issues when reporting a new one.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的用户能够解决问题，问题跟踪系统才会高效。我们使用 Clarity 构建了一个模态对话框来解决问题。最后，我们通过在报告新问题时建议相关问题来改进了应用程序的
    UX。
- en: In the next chapter, we will build a progressive web application for the weather
    using the Angular service worker.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Angular 服务工作者构建一个用于天气的渐进式网络应用程序。
- en: Exercise
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Create an Angular component to edit the details of an existing issue. The component
    should display the issue number and allow the user to change the title, description,
    and priority. The title and the description should be required fields.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 Angular 组件来编辑现有问题的详细信息。该组件应显示问题编号，并允许用户更改标题、描述和优先级。标题和描述应为必填字段。
- en: The user should be able to access the previous component using the action menu
    in the list of pending issues. Add a new action menu button to open the edit issue
    form.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应能够通过待处理问题列表中的操作菜单访问上一个组件。向操作菜单中添加一个新按钮以打开编辑问题表单。
- en: After the user has completed updating an issue, the form should be closed, and
    the list of pending issues should be refreshed.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 用户完成更新问题后，表单应关闭，并刷新待处理问题的列表。
- en: You can find the solution to the exercise in the `Chapter03` folder of the `exercise`
    branch at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise](https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `exercise` 分支的 `Chapter03` 文件夹中找到练习的解决方案：[https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise](https://github.com/PacktPublishing/Angular-Projects-Third-Edition/tree/exercise)。
- en: Further reading
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Angular forms: [https://angular.io/guide/forms-overview](https://angular.io/guide/forms-overview)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 表单：[https://angular.io/guide/forms-overview](https://angular.io/guide/forms-overview)
- en: 'Reactive forms: [https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式表单：[https://angular.io/guide/reactive-forms](https://angular.io/guide/reactive-forms)
- en: 'Validating reactive forms: [https://angular.io/guide/form-validation#validating-input-in-reactive-forms](https://angular.io/guide/form-validation#validating-input-in-reactive-forms)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证响应式表单：[https://angular.io/guide/form-validation#validating-input-in-reactive-forms](https://angular.io/guide/form-validation#validating-input-in-reactive-forms)
- en: 'Passing data to a component: [https://angular.io/guide/component-interaction#pass-data-from-parent-to-child-with-input-binding](https://angular.io/guide/component-interaction#pass-data-from-parent-to-child-with-input-binding)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向组件传递数据：[https://angular.io/guide/component-interaction#pass-data-from-parent-to-child-with-input-binding](https://angular.io/guide/component-interaction#pass-data-from-parent-to-child-with-input-binding)
- en: 'Getting data from a component: [https://angular.io/guide/component-interaction#parent-listens-for-child-event](https://angular.io/guide/component-interaction#parent-listens-for-child-event)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从组件获取数据：[https://angular.io/guide/component-interaction#parent-listens-for-child-event](https://angular.io/guide/component-interaction#parent-listens-for-child-event)
- en: 'Getting started with Clarity: [https://clarity.design/documentation/get-started](https://clarity.design/documentation/get-started)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Clarity：[https://clarity.design/documentation/get-started](https://clarity.design/documentation/get-started)
- en: Join our community on Discord
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/AngularProjects3e](https://packt.link/AngularProjects3e)'
- en: '![](img/QR_Code89405936498927781.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code89405936498927781.png)'
