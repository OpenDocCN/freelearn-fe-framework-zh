["```js\n// package.json\n\"devDependencies\": {\n  ...\n  \"@types/jasmine\": \"~4.3.0\",\n  \"jasmine-core\": \"~4.6.0\",\n  \"karma\": \"~6.4.0\",\n  \"karma-chrome-launcher\": \"~3.2.0\",\n  \"karma-coverage\": \"~2.2.0\",\n  \"karma-jasmine\": \"~5.1.0\",\n  \"karma-jasmine-html-reporter\": \"~2.1.0\",\n}\n// angular.json\n\"test\": {\n  \"builder\": \"@angular-devkit/build-angular:karma\",\n  \"options\": {\n    \"polyfills\": [\n      \"zone.js\",\n      \"zone.js/testing\"\n    ],\n    \"tsConfig\": \"tsconfig.spec.json\",\n    ...\n  }\n}\n```", "```js\nnpm run test\n> primeng-book@0.0.0 test\n> ng test\n Browser application bundle generation complete.\n15 11 2023 09:42:30.460:WARN [karma]: No captured browser, open http://localhost:9876/\n15 11 2023 09:42:30.500:INFO [karma-server]: Karma v6.4.2 server started at http://localhost:9876/\n15 11 2023 09:42:30.500:INFO [launcher]: Launching browsers Chrome with concurrency unlimited\n15 11 2023 09:42:30.503:INFO [launcher]: Starting browser Chrome\n15 11 2023 09:42:33.251:INFO [Chrome 119.0.0.0 (Mac OS 10.15.7)]: Connected on socket 3D7e73rrBAAAB with id 37006674\nChrome 119.0.0.0 (Mac OS 10.15.7): Executed 0 of 3 SUCCESS (\nChrome 119.0.0.0 (Mac OS 10.15.7): Executed 1 of 3 SUCCESS (\nChrome 119.0.0.0 (Mac OS 10.15.7): Executed 2 of 3 SUCCESS (\nChrome 119.0.0.0 (Mac OS 10.15.7): Executed 3 of 3 SUCCESS (\nChrome 119.0.0.0 (Mac OS 10.15.7): Executed 3 of 3 SUCCESS (0.139 secs / 0.12 secs)\nTOTAL: 3 SUCCESS\n```", "```js\nnpm install jest jest-environment-jsdom --save-dev\n```", "```js\n// angular.json\n\"test\": {\n  \"builder\": \"@angular-devkit/build-angular:jest\",\n  \"options\": {\n    \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n    \"tsConfig\": \"tsconfig.spec.json\"\n  }\n}\n```", "```js\n> primeng-book@0.0.0 test\n> ng test\nNOTE: The Jest builder is currently EXPERIMENTAL and not ready for production use.\nApplication bundle generation complete. [1.619 seconds]\n(node:22351) ExperimentalWarning: VM Modules is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\nPASS  dist/test-out/app.component.spec.mjs\n  AppComponent\n     should create the app (123 ms)\n     should have as title 'Welcome to chapter-13' (27 ms)\n     should render title (25 ms)\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        1.398 s\nRan all test suites.\n```", "```js\n// app.component.spec.ts\ndescribe('AppComponent', () => {\n  // Arrange\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [AppComponent]\n    }).compileComponents()\n  })\n  it('should render title', () => {\n    // Arrange\n    const fixture = TestBed.createComponent(AppComponent)\n    const compiled = fixture.nativeElement as HTMLElement\n    // Act\n    fixture.detectChanges()\n    // Assert\n    expect(compiled.querySelector('h1')?.textContent).toContain(\n      'Welcome to chapter-13'\n    )\n  })\n})\n```", "```js\ndescribe('Button', () => {\n    let button: Button;\n    let fixture: ComponentFixture<Button>;\n    beforeEach(() => {\n        TestBed.configureTestingModule({\n            imports: [NoopAnimationsModule],\n            declarations: [Button]\n        });\n        fixture = TestBed.createComponent(Button);\n        button = fixture.componentInstance;\n    });\n    it('should disabled when disabled is true', () => {\n        button.disabled = true;\n        fixture.detectChanges();\n        const buttonEl = fixture.debugElement.query(By.css('.p-button'));\n        expect(buttonEl.nativeElement.disabled).toBeTruthy();\n    });\n    it('should display the label and have a text only class', () => {\n        button.label = 'PrimeNG';\n        fixture.detectChanges();\n        const buttonEl = fixture.debugElement.query(By.css('.p-button'));\n        expect(buttonEl.nativeElement.textContent).toContain('PrimeNG');\n        expect(buttonEl.nativeElement.children.length).toEqual(1);\n    });\n    ...\n})\n```", "```js\n// sample-test.component.spec.ts\ndescribe('SampleTestComponent', () => {\n  let component: SampleTestComponent\n  let fixture: ComponentFixture<SampleTestComponent>\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [SampleTestComponent],\n    }).compileComponents()\n    fixture = TestBed.createComponent(SampleTestComponent)\n    component = fixture.componentInstance\n    fixture.detectChanges()\n  })\n  it('should create', () => {\n    expect(component).toBeTruthy()\n  })\n  it('should display the product title and subtitle', () => {\n    fixture.detectChanges()\n    const card = fixture.debugElement.query(By.css('p-card'))\n    expect(card.nativeElement.textContent).toContain('Super Laptop PRO X')\n    expect(card.nativeElement.textContent).toContain('Best for Nomads')\n  })\n  it('should have a footer', () => {\n    fixture.detectChanges()\n    const footerCard = fixture.debugElement.query(By.css('.p-card-footer'))\n    const ctaButtons = fixture.debugElement.queryAll(By.css('.p-button'))\n    expect(footerCard).toBeTruthy()\n    expect(ctaButtons).toBeTruthy()\n    expect(ctaButtons.length).toEqual(2)\n  })\n})\n```", "```js\nPASS   chapter-13  apps/chapter-13/src/app/pages/sample-test/sample-test.component.spec.ts\nSampleTestComponent\n   should create (95 ms)\n   should display the product title and subtitle (23 ms)\n   should have a footer (17 ms)\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\nSnapshots:   0 total\nTime:        6.411 s\n```", "```js\n// tips.component.spec.ts\nconst productsStub = [\n  ...\n]\ndescribe('TipsComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [TipsComponent],\n      providers: [\n        ...\n        {\n          provide: ShopService,\n          useValue: {\n            getProducts: jest.fn().mockReturnValue(productsStub),\n          },\n        },\n      ],\n    }).compileComponents()\n  })\n  ..\n})\n```", "```js\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\ndescribe('AppComponent', () => {\n  let component: AppComponent;\n  let fixture: ComponentFixture<AppComponent>;\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [AppComponent],\n      schemas: [NO_ERRORS_SCHEMA]\n    }).compileComponents();\n  });\n  // Additional tests go here\n});\n```", "```js\n// tips.component.spec.ts\nbeforeEach(async () => {\n  await TestBed.configureTestingModule({\n    imports: [TipsComponent],\n    ...\n  }).compileComponents()\n  fixture = TestBed.createComponent(TipsComponent)\n  confirmDialog = fixture.debugElement.query(\n    By.css('p-confirmdialog')\n  ).componentInstance\n})\nit('should show accept message on delete', () => {\n  const messageSpy = jest.spyOn(messageService, 'add')\n  component.onRowDelete(1)\n  fixture.detectChanges()\n  confirmDialog.accept()\n  expect(messageSpy).toHaveBeenCalledWith({\n    severity: 'info',\n    summary: 'Confirmed',\n    detail: 'Your product is deleted',\n  })\n})\n```", "```js\nimport { fakeAsync, flush, tick } from '@angular/core/testing'\ndescribe('FakeAsync Example', () => {\n  it('should test asynchronous code using fakeAsync', fakeAsync(() => {\n    let value: string | undefined\n    // Simulate an asynchronous operation\n    setTimeout(() => {\n      value = 'completed'\n    }, 1000)\n    // Use tick to simulate the passage of time\n    tick(500) // Simulate 500 milliseconds passed\n    expect(value).toBeUndefined() // Value should still be undefined\n    tick(500) // Simulate another 500 milliseconds passed\n    expect(value).toBe('completed')\n    flush()\n  }))\n})\n```", "```js\n// tips.component.spec.ts\nimport {\n  fakeAsync, flush, tick\n} from '@angular/core/testing'\nit('should show close message on delete', fakeAsync(() => {\n  const messageSpy = jest.spyOn(messageService, 'add')\n  component.onRowDelete(1)\n  fixture.detectChanges()\n  tick(300)\n  // Send Escape event\n  const escapeEvent: any = document.createEvent('CustomEvent')\n  escapeEvent.which = 27\n  escapeEvent.initEvent('keydown', true, true)\n  document.dispatchEvent(escapeEvent as KeyboardEvent)\n  expect(messageSpy).toHaveBeenCalledWith({\n    severity: 'warn',\n    summary: 'Cancelled',\n    detail: 'You have cancelled',\n  })\n  flush()\n}))\n```", "```js\nnpm install @ngneat/spectator --save-dev\n```", "```js\n// spectator.component.spec.ts\nimport {\n  Spectator,\n  createComponentFactory,\n  mockProvider,\n} from '@ngneat/spectator/jest'\ndescribe('TipsComponent', () => {\n  let spectator: Spectator<TipsComponent>\n  const createComponent = createComponentFactory({\n    component: TipsComponent,\n    providers: [\n      mockProvider(ShopService, {\n        getProducts: () => productsStub,\n      }),\n    ],\n  })\n  beforeEach(() => (spectator = createComponent()))\n  it('should show table content', () => {\n    const table = spectator.query('p-table')\n    expect(table?.textContent).toContain('Product 1')\n    expect(table?.textContent).toContain('Product 2')\n  })\n})\n```", "```js\nnpm install ng-mocks --save-dev\n```", "```js\n// ng-mocks.component.spec.ts\nimport { MockInstance, MockProvider } from 'ng-mocks'\ndescribe('TipsComponent', () => {\n  beforeAll(() =>\n    MockInstance(ShopService, () => ({\n      getProducts: () => productsStub,\n    }))\n  )\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [TipsComponent],\n      providers: [\nprovideNoopAnimations(),\nMockProvider(ShopService)\n],\n    }).compileComponents()\n    fixture = TestBed.createComponent(TipsComponent)\n    component = fixture.componentInstance\n    fixture.detectChanges()\n  })\n})\n```"]