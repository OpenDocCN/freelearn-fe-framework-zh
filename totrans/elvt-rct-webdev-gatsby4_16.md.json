["```js\n    npm install gatsby-theme-i18n gatsby-plugin-react-\n    helmet react-helmet\n    ```", "```js\n    {\n          resolve: 'gatsby-theme-i18n',\n          options: {\n            defaultLang: 'en',\n            configPath:\n              require.resolve('./i18n/config.json'),\n          },\n        },\n    ```", "```js\n    [\n        {\n          \"code\": \"en\",\n          \"hrefLang\": \"en-US\",\n          \"name\": \"English\",\n          \"localName\": \"English\",\n          \"langDir\": \"ltr\",\n          \"dateFormat\": \"MM/DD/YYYY\"\n        },\n        {\n          \"code\": \"fr\",\n          \"hrefLang\": \"fr-FR\",\n          \"name\": \"French\",\n          \"localName\": \"Francais\",\n          \"langDir\": \"ltr\",\n          \"dateFormat\": \"DD/MM/YYYY\"\n        }\n      ]\n    ```", "```js\n    LocalizedLink is a component that extends the Link component with a language prop. By specifying a language's code (from the i18n/config.json file), we route the user to the corresponding page in that specific language. If no language is specified, it will keep the user in their currently active locale. In the preceding example code, we have modified the footer to include links to the index page for both English and French visitors. This will allow site visitors to switch between the locales on any page.\n    ```", "```js\n    query MyQuery {\n      allSitePage {\n        nodes {\n          path\n        }\n      }\n    }\n    ```", "```js\n    {\n      \"data\": {\n        \"allSitePage\": {\n          \"nodes\": [\n            {\n              \"path\": \"/\"\n            },\n            {\n              \"path\": \"/fr/ \"\n            },\n            {\n              \"path\": \"/blog\"\n            },\n            {\n              \"path\": \"/fr/blog\"\n            },\n            // Continued list\n          ]\n        }\n      },\n      \"extensions\": {}\n    }\n    ```", "```js\n   {\n      resolve: 'gatsby-plugin-mdx',\n      options: {\n        extensions: ['.mdx', '.md'],\n      },\n    }\n```", "```js\n    ---\n    type: Blog\n    title: My First Hackathon Experience\n    desc: This post is all about my learnings from my\n      first hackathon experience in London.\n    date: 2020-06-20\n    hero: ../../../assets/images/cover-1.jpeg\n    tags: [hackathon, webdev, ux]\n    slug: /my-first-post/\n    ---\n    My First Hackathon Experience was great!\n    Rest of content...\n    ```", "```js\n    ---\n    type: Blog\n    title: Ma première expérience de hackathon\n    desc: Ce post est tout sur mes apprentissages de ma\n      première expérience de hackathon à Londres.\n    date: 2020-06-20\n    hero: ../../../assets/images/cover-1.jpeg\n    tags: [hackathon, webdev, ux]\n    slug: /my-first-post/\n    ---\n    Ma première expérience de hackathon était super !\n    Rest of content...\n    ```", "```js\n    exports.createPages = async ({ actions, graphql,\n     reporter }) => {\n      const { createPage } = actions;\n      const BlogPostTemplate =\n        path.resolve('./src/templates/blog-page.js');\n      const BlogPostQuery = await graphql('\n        {\n          allMdx(filter: { frontmatter: { type: { eq:\n            \"Blog\" } } }) {\n            nodes {\n              slug from the frontmatter of the MDX files. We then use this to create the page with the createPage function, ensuring that we also provide the slug to the component as context. atsby-theme-i18n listens for page creation and will additionally create the same page for each locale without any additional configuration! It will also add two fields to the MDX nodes in our GraphQL data layer – locale and isDefault, which tell you what locale the MDX is and whether the MDX is the default locale, respectively.\n    ```", "```js\n    export const pageQuery = graphql'\n      query(gatsby-theme-i18n plugin and use it to filter the MDX blog posts to those that match the specified locale. This will ensure that we render the blog post in the correct language on any blog page.\n    ```", "```js\n    export const pageQuery = graphql'\n      query($locale: String!,$skip: Int!, $limit: Int!) {\n        blogposts: allMdx(\n          limit: $limit\n          skip: $skip\n          filter: {frontmatter: {type: {eq: \"Blog\"}},\n        fields: {locale: { eq: $locale }}}\n          sort: { fields: frontmatter___date, order: DESC }\n        ) {\n          nodes {\n            frontmatter {\n              date\n              title\n              tags\n              desc\n              slug\n              hero {\n                childImageSharp {\n                  gatsbyImageData(width: 240, height: 160,\n                    placeholder: BLURRED)\n                }\n              }\n            }\n          }\n        }\n      }\n    ';\n    ```", "```js\n    query MyQuery {\n      blogposts: allMdx(filter: {frontmatter: {type: {eq:\n        \"Blog\"}}}) {\n        nodes {\n          fields {\n            locale\n            isDefault\n          }\n          frontmatter {\n            slug\n          }\n        }\n      }\n    }\n    ```", "```js\n    {\n      \"data\": {\n        \"blogposts\": {\n          \"nodes\": [\n            {\n              \"fields\": {\n                \"locale\": \"en\",\n                \"isDefault\": true\n              },\n              \"frontmatter\": {\n                \"slug\": \"/my-first-post/\"\n              }\n            },\n            {\n              \"fields\": {\n                \"locale\": \"fr\",\n                \"isDefault\": false\n              },\n              \"frontmatter\": {\n                \"slug\": \"/my-first-post/\"\n              }\n            }\n          ]\n        }\n      }\n    }\n    ```", "```js\n    npm install gatsby-theme-i18n-react-i18next react-\n    i18next i18next\n    ```", "```js\n        {\n          resolve: 'gatsby-theme-i18n-react-i18next',\n          options: {\n            locales: './i18n/locales',\n            i18nextOptions: {\n              ns: [\"globals\"],\n            },\n          },\n        },\n    ```", "```js\n    {\n        \"header\": \"Site Header\",\n        \"yourName\": \"Your Name\",\n        \"aboutMe\": \"About Me\",\n        \"location\": \"London, UK\",\n        \"bio\": \"A short biography about me\"\n      }\n    ```", "```js\n    {\n        \"header\": \"En-tête du site\",\n        \"yourName\": \"Votre nom\",\n        \"aboutMe\": \"À propos de moi\",\n        \"location\": \"France, Paris\",\n        \"bio\": \"Une courte biographie sur moi.\"\n      }\n    ```", "```js\n    import React from \"react\";\n    useTranslation from reacti18next. Then within the page component, we invoke the hook specifying the namespace we wish to use. In our case, this is the globals namespace we have created. The t function can be used to retrieve the translation from the namespace by passing in a valid key from the globals.json objects created in *Step 5*. t(\"aboutMe\") will return *About me* when on the en locale and *À propos de moi* when on the fr locale.\n    ```", "```js\n    import React from \"react\";\n    import { useTranslation } from \"react-i18next\";\n    import { LocalizedLink } from \"gatsby-theme-i18n\"\n    const Header = () => {\n      const { t } = useTranslation(\"globals\");\n      return(\n      <header className=\"px-2 border-b w-full max-w-7xl\n        mx-auto py-4 flex items-center justify-between\">\n        <LocalizedLink to=\"/\">\n          <div className=\"flex items-center space-x-2\n            hover:text-blue-600\">\n            <p className=\"font-bold text-\n              2xl\">{t(\"header\")}</p>\n          </div>\n        </LocalizedLink>\n      </header>\n      )\n      };\n    export default Header;\n    ```"]