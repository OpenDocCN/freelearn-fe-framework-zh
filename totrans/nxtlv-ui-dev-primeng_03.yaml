- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Utilizing Angular’s Features and Improvements
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 Angular 的功能和改进
- en: Welcome to the exciting world of modern Angular development. With its rapid
    six-month release cycle, Angular has evolved dramatically, introducing new features
    and updates that change how we approach our applications in a really interesting
    way!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到激动人心的现代 Angular 开发世界。凭借其快速的六个月发布周期，Angular 发生了巨大的变化，引入了新的功能和更新，以非常有趣的方式改变了我们对待应用程序的方法！
- en: In this chapter, we will explore Angular 17, the latest version of the Angular
    framework at the time of writing, and discover how its new features and improvements
    empower developers to build cutting-edge web applications. We will also delve
    into the core features of Angular and understand how they enhance the development
    process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Angular 17，这是撰写本文时的最新 Angular 框架版本，并了解其新功能和改进如何赋予开发者构建前沿 Web 应用程序的能力。我们还将深入研究
    Angular 的核心功能，了解它们如何增强开发过程。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing modern Angular
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍现代 Angular
- en: Learning about the core features and improvements in Angular
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Angular 的核心功能和改进
- en: Organizing an Angular project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织 Angular 项目
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various code samples of Angular core features and concepts.
    You can find the related source code in the `chapter-03` folder of the following
    GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-03](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-03).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含 Angular 核心功能和概念的多种代码示例。您可以在以下 GitHub 仓库的 `chapter-03` 文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-03](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-03)。
- en: Introducing modern Angular
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍现代 Angular
- en: As we embark on this chapter, let’s take a moment to explore the Angular framework’s
    journey and understand how it has evolved over time to become a powerhouse in
    web development. From its inception to the latest version, Angular has continuously
    evolved to meet the changing needs of developers and provide a robust foundation
    for building complex web applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始本章之前，让我们花一点时间探索 Angular 框架的历程，并了解它是如何随着时间的推移而演变，成为 Web 开发领域的一股强大力量。从其诞生到最新版本，Angular
    不断进化，以满足开发者不断变化的需求，并为构建复杂的 Web 应用程序提供坚实的基础。
- en: The Angular framework was initially introduced by Google in 2010 as AngularJS
    (using JavaScript). It was a game-changer in the web development landscape, offering
    a declarative and powerful approach to building dynamic user interfaces. However,
    as web technologies advanced and developers demanded more scalability and performance,
    Angular underwent a significant transformation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 框架最初由 Google 于 2010 年推出，名为 AngularJS（使用 JavaScript）。它在 Web 开发领域是一次变革，提供了一种声明性和强大的方法来构建动态用户界面。然而，随着
    Web 技术的进步和开发者对可扩展性和性能的需求增加，Angular 经历了重大转型。
- en: One of the pivotal moments in Angular’s evolution was the release of Angular
    2 (using TypeScript) in 2016\. Angular 2 introduced a complete rewrite of the
    framework, embracing modern concepts such as component-based architecture and
    reactive programming. This shift laid the groundwork for Angular’s future growth
    and set the stage for subsequent versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 发展历程中的一个关键时刻是 2016 年发布的 Angular 2（使用 TypeScript）。Angular 2 引入了框架的全面重写，采用了基于组件的架构和响应式编程等现代概念。这一转变为
    Angular 的未来增长奠定了基础，并为后续版本做好了准备。
- en: In subsequent releases, Angular continued to refine its features and introduce
    new capabilities such as bundle-size optimization, backward compatibility, animation,
    tree-shaking, and server-side rendering. Notably, Angular version 14 brought significant
    improvements to the framework. It emphasized a more modular approach with the
    introduction of standalone components, enabling developers to create reusable
    and encapsulated code. This modular architecture revolutionized the way developers
    approached Angular development, enhancing code maintainability and reusability.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的版本中，Angular 继续优化其功能并引入了新的功能，如包大小优化、向后兼容性、动画、摇树优化和服务器端渲染。值得注意的是，Angular 版本
    14 对框架进行了重大改进。它通过引入独立组件强调了更模块化的方法，使开发者能够创建可重用和封装的代码。这种模块化架构彻底改变了开发者对待 Angular
    开发的方式，提高了代码的可维护性和可重用性。
- en: Understanding these changes allows you to leverage the latest features and best
    practices, leading to more efficient and scalable applications. In the next section,
    let’s have an overview of the existing features and new improvements introduced
    in recent versions of Angular.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些更改可以帮助您利用最新的特性和最佳实践，从而构建更高效和可扩展的应用程序。在下一节中，让我们概述Angular最近版本中引入的现有功能和新的改进。
- en: Learning about the core features and improvements in Angular
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Angular的核心功能和改进
- en: In this section, let’s explore some of the features and improvements that Angular
    brings to the table, including data binding, components, services, directives,
    pipes, signals, and control flow. It’s important to understand some core concepts
    of Angular, so we can have a better understanding of how Angular and PrimeNG work
    together in the following chapters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们探讨一些Angular带来的特性和改进，包括数据绑定、组件、服务、指令、管道、信号和控制流。理解Angular的一些核心概念非常重要，这样我们才能更好地理解Angular和PrimeNG在以下章节中的协同工作。
- en: Angular data binding
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular数据绑定
- en: '**Data binding** is a fundamental concept in Angular that enables the synchronization
    of data between the component and the view. It allows you to establish a connection
    between the data in your component and the HTML elements in the template. Data
    binding ensures that any changes in the component are automatically reflected
    in the view, and vice versa.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据绑定**是Angular中的一个基本概念，它使组件和视图之间的数据同步成为可能。它允许您在组件中的数据与模板中的HTML元素之间建立连接。数据绑定确保组件中的任何更改都会自动反映在视图中，反之亦然。'
- en: 'Angular supports several types of data binding. Let’s explore each type:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Angular支持多种类型的数据绑定。让我们探索每种类型：
- en: '`{{}}`, to bind the component property to the view. Here’s an example:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{}}`，用于将组件属性绑定到视图。以下是一个示例：'
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the code, the `username` property from the component is interpolated into
    the `<p>` element, as follows:'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在代码中，组件的 `username` 属性被插值到 `<p>` 元素中，如下所示：
- en: '![Figure 3.1 – Interpolation example](img/B18805_03_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 插值示例](img/B18805_03_01.jpg)'
- en: Figure 3.1 – Interpolation example
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 插值示例
- en: '`[ ]`. Here’s an example:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[ ]`. 以下是一个示例：'
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous code, the value of the `<input>` element is bound to the `username`
    property from the component.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，`<input>` 元素的价值绑定到组件的 `username` 属性。
- en: '`()`. Here’s an example:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`()`. 以下是一个示例：'
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the code, the `handleClick()` method from the component is bound to the `click`
    event of the `<``button>` element.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在代码中，组件的 `handleClick()` 方法绑定到 `<button>` 元素的 `click` 事件。
- en: '`[(ngModel)]` directive, which synchronizes the value of a form control in
    the template with a property in the component class. Here’s an example:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[(ngModel)]` 指令，它将模板中表单控件的价值与组件类中的一个属性同步。以下是一个示例：'
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the code, the value of the `<input>` element is bound to the `username` property
    from the component. Any changes in the input field will update the component property,
    and vice versa.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在代码中，`<input>` 元素的价值绑定到组件的 `username` 属性。任何输入字段中的更改都将更新组件属性，反之亦然。
- en: 'To use data binding in Angular, you need to define the component property and
    bind it to the appropriate HTML element in the template. Let’s look at an example
    of using interpolation and property binding:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Angular中使用数据绑定，您需要定义组件属性并将其绑定到模板中适当的HTML元素。让我们看看使用插值和属性绑定的示例：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `GreetingComponent` has a `username` property set to `'John Doe'`. The
    `{{ username }}` instance in the `<p>` element uses interpolation to display the
    value of `username` in the template. The `[value]="username"` instance in the
    `<input>` element uses property binding to set the initial value of the input
    field.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`GreetingComponent` 有一个设置为 `'John Doe'` 的 `username` 属性。`<p>` 元素中的 `{{ username
    }}` 实例使用插值在模板中显示 `username` 的值。`<input>` 元素中的 `[value]="username"` 实例使用属性绑定来设置输入字段的初始值。
- en: Angular components
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular组件
- en: When building applications with Angular, components play a central role in defining
    the user interface and behavior of different parts of the application. A **component**
    in Angular encapsulates the HTML template, CSS styles, and TypeScript code required
    to render a specific part of the user interface. It promotes reusability, maintainability,
    and modularity, by dividing the application into smaller, self-contained units.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Angular 构建应用程序时，组件在定义应用程序不同部分的用户界面和行为中起着核心作用。在 Angular 中，**组件**封装了渲染用户界面特定部分所需的
    HTML 模板、CSS 样式和 TypeScript 代码。通过将应用程序划分为更小、自包含的单元，它促进了可重用性、可维护性和模块化。
- en: 'In previous versions of Angular, components were typically registered and managed
    within Angular modules using the `@NgModule` decorator. The `@NgModule` decorator
    was used to define a module, which is a container for related components, directives,
    services, and other artifacts. Within `@NgModule`, you could specify the components
    that belong to it using the `declarations` property. Here’s an example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 的早期版本中，组件通常使用 `@NgModule` 装饰器在 Angular 模块内注册和管理。`@NgModule` 装饰器用于定义一个模块，它是相关组件、指令、服务和其他实体的容器。在
    `@NgModule` 中，您可以使用 `declarations` 属性指定属于它的组件。以下是一个示例：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this code snippet, the `declarations` property includes three components:
    `AppComponent`, `HeaderComponent`, and `FooterComponent`. These components can
    be used within the module or exported to be used in other modules.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码片段中，`declarations` 属性包括三个组件：`AppComponent`、`HeaderComponent` 和 `FooterComponent`。这些组件可以在模块中使用，也可以导出以在其他模块中使用。
- en: Since Angular v14, we have had another concept, which is standalone components.
    A `declarations` array under `@NgModule`. Let’s create a new standalone component
    from scratch.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Angular v14 以来，我们还有一个新的概念，即独立组件。在 `@NgModule` 下的 `declarations` 数组。让我们从头开始创建一个新的独立组件。
- en: 'Let’s use Angular CLI to generate a new standalone component:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Angular CLI 生成一个新的独立组件：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using an Angular version lower than v17, make sure to append `--standalone`
    when generating standalone components.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是低于 v17 的 Angular 版本，确保在生成独立组件时附加 `--standalone`。
- en: 'The command successfully generated the alert component in the specified directory,
    along with its associated files for styles, template, test, and component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 命令成功地在指定目录中生成了警报组件，以及与其相关的样式、模板、测试和组件文件：
- en: '`alert.component.scss`: This file is intended for defining styles specific
    to the alert component'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert.component.scss`：此文件旨在定义针对警报组件的特定样式'
- en: '`alert.component.html`: This file is meant to contain the template code for
    the alert component'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert.component.html`：此文件旨在包含警报组件的模板代码'
- en: '`alert.component.spec.ts`: This file is used for writing tests for the alert
    component'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert.component.spec.ts`：此文件用于编写警报组件的测试'
- en: '`alert.component.ts`: This file is the main file where the logic and behavior
    of the alert component will be implemented'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert.component.ts`：此文件是实现警报组件逻辑和行为的主要文件'
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can further enhance your application’s size and maintainability by using
    the `--inline-style` and `--inline-template` options, enabling you to incorporate
    inline styles and templates. This approach reduces file dependencies, resulting
    in a more streamlined and manageable application. This approach will also encourage
    you to write smaller and more maintainable components since a big anti-pattern
    is to have singular complex and huge components.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `--inline-style` 和 `--inline-template` 选项来进一步增强应用程序的大小和可维护性，这些选项允许您合并内联样式和模板。这种方法减少了文件依赖性，从而使得应用程序更加精简和易于管理。这种方法还将鼓励您编写更小、更易于维护的组件，因为一个常见的反模式是拥有单一复杂且庞大的组件。
- en: 'Let’s now look at the alert component in detail:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来详细看看警报组件：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The provided code defines an `AlertComponent` instance within an Angular application.
    Let’s break down the code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码在 Angular 应用程序中定义了一个 `AlertComponent` 实例。让我们分析一下代码：
- en: '`@Component({ ... })`: This is the decorator used to define an Angular component.
    It provides metadata about the component.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Component({ ... })`：这是一个用于定义 Angular 组件的装饰器。它提供了有关组件的元数据。'
- en: '`selector: ''app-alert''`: This property specifies the HTML tag selector for
    this component. In this case, the component can be used in templates with the
    `<app-alert />` tag.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selector: ''app-alert''`：此属性指定了该组件的 HTML 标签选择器。在这种情况下，该组件可以使用 `<app-alert
    />` 标签在模板中使用。'
- en: '`standalone: true`: This indicates that the component is self-contained and
    can be used by importing to another standalone component or `NgModule`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`standalone: true`：这表示该组件是自包含的，可以通过导入到另一个独立组件或`NgModule`中使用。'
- en: '`imports: [CommonModule]`: This property specifies the modules or components
    that should be imported for this component. In this case, it imports the `CommonModule`,
    which is required for using common Angular directives.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imports: [CommonModule]`：此属性指定了应导入此组件的模块或组件。在这种情况下，它导入了`CommonModule`，这是使用通用Angular指令所必需的。'
- en: '`templateUrl: ''./alert.component.html''`: This property specifies the URL
    of the external HTML template file associated with this component.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templateUrl: ''./alert.component.html''`：此属性指定了与该组件关联的外部HTML模板文件的URL。'
- en: '`styleUrls: [''./alert.component.scss'']`: This property specifies an array
    of external stylesheet URLs associated with this component.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleUrls: [''./alert.component.scss'']`：此属性指定了与该组件关联的外部样式表URL数组。'
- en: It’s recommended that when starting a new project, we should utilize standalone
    components since it will help simplify the way we build Angular applications.
    It’s also better for future migration since standalone components will be the
    default option when creating a new application in Angular 17.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在开始新项目时，我们应该利用独立组件，因为它将有助于简化我们构建Angular应用程序的方式。对于未来的迁移来说，这也是更好的选择，因为当在Angular
    17中创建新应用程序时，独立组件将是默认选项。
- en: Note
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Angular still supports `NgModule`, and you can also mix `NgModule` and standalone
    components without any issues. More than that, we can also create standalone directives
    or pipes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Angular仍然支持`NgModule`，你也可以混合使用`NgModule`和独立组件而不会出现任何问题。不仅如此，我们还可以创建独立的指令或管道。
- en: 'In summary, Angular components are the building blocks of Angular applications,
    providing encapsulated functionality and UI representation. By leveraging the
    power of components, you can create reusable and modular code that promotes maintainability
    and code organization. Now, let’s explore another fundamental concept in Angular
    development: dependency injection.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Angular组件是Angular应用程序的构建块，提供封装的功能和UI表示。通过利用组件的力量，你可以创建可重用和模块化的代码，这有助于促进可维护性和代码组织。现在，让我们探索Angular开发中的另一个基本概念：依赖注入。
- en: Dependency injection
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖注入
- en: At its core, **dependency injection** (**DI**) is a design pattern that allows
    objects to receive their dependencies from an external source rather than creating
    them internally. In Angular, the DI system takes care of providing the required
    dependencies to the components, services, and other Angular constructs. DI plays
    a crucial role in decoupling components and promoting code reusability, maintainability,
    and testability.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，**依赖注入（DI**）是一种设计模式，它允许对象从外部源接收其依赖，而不是内部创建。在Angular中，DI系统负责为组件、服务和其他Angular构造提供所需的依赖。DI在解耦组件、促进代码重用、可维护性和可测试性方面发挥着关键作用。
- en: With DI in Angular, dependencies are typically defined as services or other
    components that a class relies upon. These dependencies are declared in the constructor
    of the class, and Angular’s DI system automatically resolves and injects the appropriate
    instances when the class is instantiated.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中使用DI（依赖注入），依赖通常定义为类所依赖的服务或其他组件。这些依赖在类的构造函数中声明，当类实例化时，Angular的DI系统会自动解析并注入适当的实例。
- en: 'Here are some best practices when working with DI:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用DI时，以下是一些最佳实践：
- en: '**Singleton services**: By default, Angular services are singleton, meaning
    there’s only one instance of the service throughout the application. This is a
    good practice as it ensures data consistency and optimized memory usage.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单例服务**：默认情况下，Angular服务是单例的，这意味着在整个应用程序中只有一个服务实例。这是一个好习惯，因为它确保了数据的一致性和优化了内存使用。'
- en: '`providedIn` property with the value `root`. This ensures that the service
    is available application-wide and gets tree-shaken if not used.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providedIn`属性值为`root`。这确保了服务在应用程序范围内可用，并且如果未使用，则会被摇树优化。'
- en: '**Hierarchical injectors**: Understand that Angular has a hierarchical injector
    system. While services provided in the root are available application-wide, services
    provided at a component level are available only within that component and its
    children.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层注入器**：了解Angular有一个分层注入器系统。虽然根提供的服务在应用程序范围内可用，但组件级别提供的服务仅在该组件及其子组件内可用。'
- en: '**Interface-based injection**: Sometimes, it’s beneficial to inject a service
    based on an interface rather than a concrete class. This makes the system more
    flexible and allows for easier testing and mocking.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于接口的注入**：有时，根据接口而不是具体类注入服务是有益的。这使得系统更加灵活，并允许更容易地进行测试和模拟。'
- en: '**Avoid complex logic in constructors**: Since constructors are the primary
    place for injection, keep them clean. Avoid placing complex logic or operations
    that can block the component’s initialization.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免在构造函数中包含复杂逻辑**：由于构造函数是注入的主要位置，请保持其简洁。避免放置可能阻塞组件初始化的复杂逻辑或操作。'
- en: In the next section, we will delve into the specifics of how dependency injection
    works in practice.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨实际中依赖注入的工作原理。
- en: Angular services
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular服务
- en: In Angular, a **service** is a class that provides a specific functionality
    or data to multiple components throughout an application. Services act as a bridge
    between components, facilitating the sharing of data, communication with external
    APIs, and performing various business logic operations. They promote code reusability,
    modularity, and separation of concerns within an application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，**服务**是一个类，它为应用程序中的多个组件提供特定的功能或数据。服务充当组件之间的桥梁，促进数据的共享、与外部API的通信以及执行各种业务逻辑操作。它们促进了应用程序中的代码重用、模块化和关注点分离。
- en: To use a service in Angular, we first need to create the service class. We can
    generate a new service using the `ng generate service` Angular CLI command. Once
    the service is created, we can inject it into any component or another service
    using dependency injection.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Angular中使用服务，我们首先需要创建服务类。我们可以使用`ng generate service` Angular CLI命令生成一个新的服务。一旦创建了服务，我们就可以使用依赖注入将其注入到任何组件或另一个服务中。
- en: 'Let’s take the example of a `UserService` instance that manages user-related
    operations, such as fetching user data from an API. Here’s how we can create the
    `UserService` instance:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个管理用户相关操作（如从API获取用户数据）的`UserService`实例为例。以下是创建`UserService`实例的方法：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this code, `UserService` is created as an injectable service using the `@Injectable`
    decorator, which indicates that this class is eligible for DI. Then the `providedIn:
    ''root''` option ensures that Angular creates a single instance of the service
    that is shared across the entire application.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '在此代码中，`UserService`是通过使用`@Injectable`装饰器创建为一个可注入的服务，这表明这个类有资格进行DI。然后`providedIn:
    ''root''`选项确保Angular创建一个在整个应用程序中共享的单例服务。'
- en: 'Now, let’s see how we can use `UserService` in a component:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在组件中使用`UserService`：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The provided code demonstrates the usage of the DI of `UserService` in an Angular
    component, specifically in `UserListComponent`. Let’s break it down and explain
    its functionality:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码演示了在Angular组件中（特别是在`UserListComponent`中）使用`UserService`的DI。让我们分解它并解释其功能：
- en: '`private userService = inject(UserService)`: This `inject` function manually
    injects an instance of `UserService`, so `UserListComponent` can assess its properties
    and methods. You can also run `inject` inside the `constructor`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private userService = inject(UserService)`: 这个`inject`函数手动注入`UserService`的一个实例，因此`UserListComponent`可以访问其属性和方法。您也可以在`constructor`中运行`inject`。'
- en: '`users$ = this.userService.getUsers()`: This line declares the `users$` property,
    which takes its value from the result of the `getUser()` method from the `UserService`
    instance.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`users$ = this.userService.getUsers()`: 这行代码声明了`users$`属性，其值来自`UserService`实例的`getUser()`方法的结果。'
- en: '`*ngFor="let user of users$ | async"`: This line enables iterating over the
    collection of `users$` and generating the HTML elements for each item. The `async`
    pipe is used in conjunction to subscribe to the `users$` observable and handle
    the asynchronous nature of the data. The `async` pipe automatically unsubscribes
    from the observable when the component is destroyed, preventing memory leaks.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ngFor="let user of users$ | async"`: 这行代码允许遍历`users$`集合，并为每个项目生成HTML元素。`async`管道与订阅`users$`可观察对象结合使用，以处理数据的异步特性。`async`管道在组件销毁时自动取消订阅可观察对象，防止内存泄漏。'
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The usage of `$` in `users$` is a pattern to indicate that the property is an
    observable. An **observable**, a core feature from the RxJS library, is a mechanism
    for handling streams of asynchronous events or data over time. You can read more
    at [https://rxjs.dev/guide/observable](https://rxjs.dev/guide/observable).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `users$` 中使用 `$` 的用法是一个模式，表示该属性是一个可观察的。**可观察的** 是来自 RxJS 库的核心功能，它是一种处理随时间异步事件或数据流的机制。你可以在
    [https://rxjs.dev/guide/observable](https://rxjs.dev/guide/observable) 上了解更多信息。
- en: Angular directives
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular 指令
- en: '**Directives** are a powerful feature in Angular that allows you to extend
    the functionality of HTML elements. They are used to manipulate the DOM, apply
    custom behavior, and dynamically change the appearance or behavior of elements.
    Angular provides three types of directives:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**指令** 是 Angular 中的一项强大功能，它允许你扩展 HTML 元素的功能。它们用于操作 DOM、应用自定义行为以及动态更改元素的外观或行为。Angular
    提供了三种类型的指令：'
- en: '`<app-my-component>`, which Angular interprets to create an instance of the
    corresponding component, encapsulating its behavior, view, and data interactions.
    The difference between component directives and other directives is that components
    contain templates.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<app-my-component>`，Angular 解释为创建相应组件的实例，封装其行为、视图和数据交互。组件指令与其他指令的区别在于组件包含模板。'
- en: '`ngStyle` directive can be used to change multiple styles at the same time.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngStyle` 指令可以同时更改多个样式。'
- en: '`*ngFor` directive can be used to render a list of items, and `*ngIf` can conditionally
    show or hide an element based on a boolean expression.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*ngFor` 指令可以用来渲染项目列表，而 `*ngIf` 可以根据布尔表达式有条件地显示或隐藏元素。'
- en: 'To use a directive in Angular, you can either leverage the built-in directives
    provided by Angular or create your own custom directives. Let’s look at an example
    of using the built-in `ngIf` directive to conditionally show an element:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Angular 中使用指令，你可以利用 Angular 提供的内置指令，或者创建你自己的自定义指令。让我们看看使用内置的 `ngIf` 指令有条件地显示元素的例子：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the code, the `ngIf` directive is applied to the `<div>` element. The `showMessage`
    property is evaluated, and if it is truthy, the `<div>` element and its content
    will be rendered. Otherwise, they will be removed from the DOM.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，`ngIf` 指令被应用于 `<div>` 元素。`showMessage` 属性被评估，如果它是真值，则 `<div>` 元素及其内容将被渲染。否则，它们将从
    DOM 中移除。
- en: 'You can also create your own custom directives to encapsulate specific behavior
    or styling by running the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过运行以下命令来创建自定义指令，以封装特定的行为或样式：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here’s an example of creating a custom directive called `FallbackImageDirective`
    that shows a fallback image when an existing image cannot be found:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个创建自定义指令 `FallbackImageDirective` 的例子，当找不到现有图像时，它会显示一个后备图像：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this code, `FallbackImageDirective` is created using the `@Directive` decorator.
    It defines a selector, `img[fallbackImage]`, which means the directive will be
    applied to an image element with the `fallbackImage` attribute.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，`FallbackImageDirective` 是使用 `@Directive` 装饰器创建的。它定义了一个选择器 `img[fallbackImage]`，这意味着指令将被应用于具有
    `fallbackImage` 属性的图像元素。
- en: 'Here is an example of how to use `FallbackImageDirective`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 `FallbackImageDirective` 的例子：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `HostListener` decorator is used to listen to events on the host element.
    In this case, we listen to the `error` event and call the corresponding methods.
    `ElementRef` gives us access to the host element, allowing us to modify its properties,
    such as the `src` attribute.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`HostListener` 装饰器用于监听宿主元素上的事件。在这种情况下，我们监听 `error` 事件并调用相应的方法。`ElementRef`
    允许我们访问宿主元素，从而可以修改其属性，例如 `src` 属性。'
- en: Angular pipes
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular 管道
- en: '**Pipes** are a powerful feature in Angular that allows you to transform and
    format data right within your template. They provide a convenient way to perform
    data manipulation operations, such as filtering, sorting, formatting, and more.
    Plus, they are lightweight and reusable, and they can be chained together to create
    complex transformations.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**管道** 是 Angular 中的一项强大功能，它允许你在模板中直接转换和格式化数据。它们提供了一种方便的方式来执行数据操作，如过滤、排序、格式化等。此外，它们轻量级且可重用，可以串联起来创建复杂的转换。'
- en: 'Angular provides a set of built-in pipes that you can use out of the box. Let’s
    take a look at a few examples of using these pipes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 提供了一套内置管道，你可以直接使用。让我们看看使用这些管道的一些例子：
- en: '`date` pipe is used to format dates. Here’s an example:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date` 管道用于格式化日期。以下是一个例子：'
- en: '[PRE14]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, the `today` variable represents the current date. The `date` pipe formats
    the date using the `'longDate'` format, which displays the date in a long format,
    such as `"January` `1, 2023"`.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`today`变量代表当前日期。`date`管道使用`'longDate'`格式来格式化日期，以长格式显示日期，例如`"January 1, 2023"`。
- en: '`currency` pipe is used to format currency values. Here’s an example:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currency`管道用于格式化货币值。以下是一个示例：'
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, the `price` variable represents a currency value. The `currency` pipe
    formats the value as a currency using the `'USD'` currency code, such as `"$10.99"`.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`price`变量代表货币值。`currency`管道使用`'USD'`货币代码将值格式化为货币，例如`"$10.99"`。
- en: '`uppercase` pipe is used to convert a string to uppercase. Here’s an example:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uppercase`管道用于将字符串转换为大写。以下是一个示例：'
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In addition to the built-in pipes, you can also create your own custom pipes
    to perform custom data transformations. First, you can use the `ng` command to
    create a standalone pipe:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置的管道外，你还可以创建自己的自定义管道以执行自定义数据转换。首先，你可以使用`ng`命令创建一个独立管道：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using an Angular version lower than v17, make sure to append `--standalone`
    when generating standalone pipes.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用低于v17版本的Angular，在生成独立管道时请确保附加`--standalone`。
- en: 'Then we can add logic to create a custom pipe called `ReversePipe` that reverses
    a string:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以添加逻辑来创建一个名为`ReversePipe`的自定义管道，该管道反转字符串：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, a custom Angular pipe named `ReversePipe` is created using
    the `@Pipe` decorator. The pipe takes a string, reverses it, and returns the reversed
    string. The `transform` method, required by the `PipeTransform` interface, is
    where this reversal operation is implemented.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，使用`@Pipe`装饰器创建了一个名为`ReversePipe`的自定义Angular管道。该管道接收一个字符串，将其反转，并返回反转后的字符串。实现反转操作的`transform`方法是`PipeTransform`接口所必需的。
- en: 'Then, if we want to use this custom pipe, all we have to do is import the pipe
    to the component and use it as normal:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果我们想使用这个自定义管道，我们只需要将其导入组件并像平常一样使用：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this line of code, Angular’s pipe mechanism is being used to transform the
    string `abc` using a custom pipe named `reverse`. The line `Reverse of 'abc' is
    {{'abc' | reverse}}` will render as `Reverse of 'abc' is cba` in the HTML.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行代码中，Angular的管道机制正在使用名为`reverse`的自定义管道来转换字符串`abc`。行`Reverse of 'abc' is {{'abc'
    | reverse}}`将在HTML中渲染为`Reverse of 'abc' is cba`。
- en: Note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Pipes are chainable, so you can combine different pipes to create the desired
    result. For example, `{{'abc' | reverse | uppercase}}` will reverse the string
    and make it uppercase. The final result is `CBA`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是可链式的，因此你可以组合不同的管道以创建所需的结果。例如，`{{'abc' | reverse | uppercase}}`将反转字符串并将其转换为大写。最终结果是`CBA`。
- en: Angular signals
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular信号
- en: '**Angular Signals** is a system that granularly tracks how and where your state
    is used throughout an application, allowing the framework to optimize rendering
    updates. This feature in Angular 16 is a native way of handling reactivity in
    Angular.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Angular信号**是一个系统，它细粒度地跟踪你的状态在应用中的使用方式和位置，允许框架优化渲染更新。Angular 16中的这个特性是处理Angular中反应性的原生方式。'
- en: 'In most cases, signals are all you need to build a simple application. A **signal**
    is a function that holds a value and allows you to listen to changes to that value.
    Let’s take a look at the following example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，信号就是构建简单应用所需的所有东西。**信号**是一个包含值并允许你监听该值变化的函数。让我们看看以下示例：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This code block shows how to use signals and effects from the `@angular/core`
    package to manage state and side effects. Here’s a breakdown:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块展示了如何使用来自`@angular/core`包的信号和效果来管理状态和副作用。以下是分解：
- en: '`public count: WritableSignal<number> = signal<number>(4)`: This line declares
    a signal `count`, which is a `WritableSignal` instance that holds a number. The
    initial value of `count` is set to `4`.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public count: WritableSignal<number> = signal<number>(4)`: 这一行声明了一个名为`count`的信号，它是一个包含数字的`WritableSignal`实例。`count`的初始值设置为`4`。'
- en: '`setRandomCount() { ... }`: This is a method that sets `count` to a random
    number between 1 and 10\. The `this.count.set(...)` method is used to update the
    value of `count`.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setRandomCount() { ... }`：这是一个将`count`设置为1到10之间的随机数的函数。使用`this.count.set(...)`方法来更新`count`的值。'
- en: '`effect()` is an operation that runs whenever one or more signal values change
    and prints the current value of `count` to the browser console log.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`effect()`是一个操作，每当一个或多个信号值发生变化时就会运行，并将`count`的当前值打印到浏览器控制台日志中。'
- en: The template of the component displays the current value of `count` and a button
    that calls `setRandomCount` when clicked.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的模板显示 `count` 的当前值，以及一个当点击时调用 `setRandomCount` 的按钮。
- en: Note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Angular Signals is marked as stable since Angular 17\. You can read more on
    Angular Signals at [https://angular.io/guide/signals](https://angular.io/guide/signals).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Signals 自 Angular 17 起被标记为稳定。你可以在 [https://angular.io/guide/signals](https://angular.io/guide/signals)
    上了解更多关于 Angular Signals 的信息。
- en: Angular control flow
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular 控制流
- en: In an effort to enhance the **developer experience** (**DX**), Angular 17 introduced
    a new feature called **Built-in control flow**. This feature allows you to use
    a familiar JavaScript-like syntax in Angular templates to easily show, hide, or
    repeat elements.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提升**开发者体验**（**DX**），Angular 17 引入了一个名为**内置控制流**的新功能。这个功能允许你在 Angular 模板中使用类似
    JavaScript 的语法，轻松地显示、隐藏或重复元素。
- en: 'Let’s take the `NgIf` directive as an example. Suppose we have a list of products
    and we want to display different content when no products are available. Before
    the introduction of the control flow feature, here’s how we would handle it:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `NgIf` 指令为例。假设我们有一个产品列表，我们想在没有产品可用时显示不同的内容。在控制流功能引入之前，我们会这样处理：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Overall, this code snippet displays a `Show product list` message inside a `<div>`
    element if the `products` array has elements. If the `products` array is empty,
    the `Products are empty!` message from the `ng-template` block is displayed instead.
    This allows for conditional rendering based on the state of the `products` array.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这个代码片段在 `products` 数组有元素时，在 `<div>` 元素内显示“显示产品列表”消息。如果 `products` 数组为空，则显示来自
    `ng-template` 块的“产品为空！”消息。这允许根据 `products` 数组的当前状态进行条件渲染。
- en: 'Now let’s see how it’s done with the new `@if` control flow:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用新的 `@if` 控制流来完成它：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this code snippet, you’ll notice that we can directly utilize `@if`, `@else`,
    and even `@else if` syntax, resulting in cleaner and more familiar code. This
    approach also exhibits a JavaScript-like coding style, enhancing the DX with a
    sense of familiarity and ease.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，你会注意到我们可以直接使用 `@if`、`@else`，甚至 `@else if` 语法，从而产生更干净、更熟悉的代码。这种方法也展示了类似
    JavaScript 的编码风格，增强了 DX 的熟悉感和便捷性。
- en: Note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In addition to enhancing the DX, the new control flow also significantly improves
    the performance of your application compared to the previous implementation. You
    can refer to the community framework benchmarks available at [https://krausest.github.io/js-framework-benchmark/current.html](https://krausest.github.io/js-framework-benchmark/current.html)
    for further verification.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 除了增强 DX 之外，新的控制流与之前的实现相比，还显著提高了应用程序的性能。你可以参考在 [https://krausest.github.io/js-framework-benchmark/current.html](https://krausest.github.io/js-framework-benchmark/current.html)
    可用的社区框架基准，以进一步验证。
- en: 'The Angular team also provides a nice way to run migration to move existing
    syntax to the new control flow. All you need to do is to run the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 团队还提供了一个很好的方法来运行迁移，将现有语法移动到新的控制流。你只需要运行以下命令：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This command will scan the existing implementations of `NgIf`, `NgFor`, and
    `NgSwitch` and upgrade them to the new control flow. It is important to thoroughly
    test and validate that everything functions as intended before finalizing and
    committing these changes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将扫描现有的 `NgIf`、`NgFor` 和 `NgSwitch` 的实现，并将它们升级到新的控制流。在最终确定并提交这些更改之前，彻底测试和验证所有功能按预期工作非常重要。
- en: Note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Angular control flow is still under Developer Preview in Angular 17\. You can
    read more on Angular control flow at [https://angular.io/guide/control_flow](https://angular.io/guide/control_flow).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 控制流在 Angular 17 中仍处于开发者预览阶段。你可以在 [https://angular.io/guide/control_flow](https://angular.io/guide/control_flow)
    上了解更多关于 Angular 控制流的信息。
- en: Up to this point, we have explored several core features of Angular that serve
    as fundamental building blocks for developing functional Angular applications.
    In the next section, we will delve into valuable tips on effectively organizing
    your Angular project.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了 Angular 的几个核心功能，这些功能是开发功能强大的 Angular 应用程序的基本构建块。在下一节中，我们将深入探讨有效组织
    Angular 项目的宝贵技巧。
- en: Organizing an Angular project
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织 Angular 项目
- en: The purpose of organizing and structuring an Angular application is to enhance
    its maintainability, scalability, and reusability. It involves making decisions
    about how to structure the code base, divide responsibilities among different
    files and folders, and establish conventions for naming and organizing files.
    Organizing an Angular project effectively not only improves the developer experience
    but also helps teams collaborate better and reduces the learning curve for new
    developers joining the project.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 组织和构建Angular应用程序的目的是提高其可维护性、可扩展性和可重用性。这涉及到如何结构化代码库、在不同文件和文件夹之间分配责任，以及建立命名和组织文件的约定。有效地组织Angular项目不仅改善了开发者的体验，还有助于团队更好地协作，并降低了新加入项目的开发者学习曲线。
- en: 'When organizing an Angular project, it’s important to follow established best
    practices and leverage Angular’s recommended project structure. The Angular style
    guide provides several best practices for organizing an Angular project. You can
    find the style guide here: [https://angular.io/guide/styleguide](https://angular.io/guide/styleguide).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织Angular项目时，遵循既定的最佳实践并利用Angular推荐的项目结构非常重要。Angular风格指南提供了组织Angular项目的几个最佳实践。您可以在以下位置找到风格指南：[https://angular.io/guide/styleguide](https://angular.io/guide/styleguide)。
- en: 'One key principle emphasized in the style guide is the **LIFT approach**, which
    stands for *Locating* code quickly, *Identifying* the code at a glance, *Flattening*
    the structure, and *Trying* to be **DRY** (**Don’t Repeat Yourself**). Let’s go
    through each aspect of the LIFT principle and provide a code example for better
    understanding:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 风格指南中强调的一个关键原则是**LIFT方法**，它代表快速定位代码、一眼识别代码、简化结构，以及尝试做到**DRY**（不要重复自己）。让我们逐一介绍LIFT原则的各个方面，并提供代码示例以更好地理解：
- en: '**Locating code quickly**: The goal is to organize the code base in a way that
    allows you to locate files and modules easily. One common approach is to group
    files based on their functionality or features. Here’s an example:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速定位代码**：目标是按照一种方式组织代码库，使得你可以轻松地定位文件和模块。一种常见的方法是根据其功能或特性对文件进行分组。以下是一个例子：'
- en: '[PRE24]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, related files are grouped together within directories such as `components`,
    `services`, and `models`. This structure helps developers quickly find the files
    they need when working on a specific feature.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，相关的文件被分组在`components`、`services`和`models`等目录中。这种结构有助于开发者在开发特定功能时快速找到所需的文件。
- en: '**Identifying the code at a glance**: The focus is on using meaningful and
    descriptive names for files, classes, variables, and functions. This makes it
    easier to understand the purpose and functionality of the code. Here’s an example:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一眼识别代码**：重点是使用有意义的和描述性的名称来命名文件、类、变量和函数。这使得理解代码的目的和功能更加容易。以下是一个例子：'
- en: '[PRE25]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using descriptive names such as `ProductComponent` clearly communicates the
    responsibility and purpose of the code.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用如`ProductComponent`这样的描述性名称可以清楚地传达代码的责任和目的。
- en: '**Flattening the structure**: The aim is to keep a flat directory structure
    instead of nesting directories too deeply. This simplifies navigation and maintenance.
    Here’s an example:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化结构**：目标是保持扁平的目录结构，而不是过度嵌套目录。这简化了导航和维护。以下是一个例子：'
- en: '[PRE26]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, the `product.component.ts` file is located directly under the `components`
    directory without unnecessary nesting.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`product.component.ts`文件直接位于`components`目录下，没有不必要的嵌套。
- en: '**Trying to be DRY**: The principle encourages code reuse and avoiding duplication.
    It promotes extracting common functionality into reusable components, services,
    or modules. Here’s an example:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尝试做到DRY**：这个原则鼓励代码重用和避免重复。它提倡将公共功能提取到可重用的组件、服务或模块中。以下是一个例子：'
- en: '[PRE27]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`LoadingSpinnerComponent` can be reused in multiple parts of the application
    to display a loading spinner, reducing code duplication, and improving consistency.'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LoadingSpinnerComponent`可以在应用程序的多个部分中重复使用以显示加载指示器，减少代码重复，并提高一致性。'
- en: By adhering to the LIFT principle, Angular projects can benefit from a well-organized
    and maintainable code base, making development more efficient and enhancing collaboration
    among team members.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循LIFT原则，Angular项目可以从一个组织良好且易于维护的代码库中受益，使开发更加高效，并增强团队成员之间的协作。
- en: 'In addition to the LIFT approach, the style guide also provides the following
    best practices which are worth noting here:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 除了LIFT方法之外，风格指南还提供了以下值得注意的最佳实践：
- en: '`src/app` for application-specific code and `src/assets` for assets.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app` 用于特定于应用程序的代码，以及 `src/assets` 用于资源。'
- en: '**Separate concerns with directories**: Use directories to separate concerns
    and group related files. For example, place components, templates, styles, and
    tests for a feature in the same directory. This makes it easier to locate and
    maintain related code.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用目录分离关注点**：使用目录来分离关注点并分组相关文件。例如，将一个功能的相关组件、模板、样式和测试放在同一个目录中。这使得定位和维护相关代码变得更加容易。'
- en: '`feature-name.component.ts` for component files, `feature-name.service.ts`
    for service files, and `feature-name.spec.ts` for test files. This consistency
    helps developers locate and identify files quickly.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature-name.component.ts` 用于组件文件，`feature-name.service.ts` 用于服务文件，以及 `feature-name.spec.ts`
    用于测试文件。这种一致性有助于开发者快速定位和识别文件。'
- en: '`index.ts`) in directories to provide a central entry point for exporting multiple
    files. **Barrels** simplify imports and make it easier to locate and manage related
    files.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在目录中使用 `index.ts`) 提供一个中央入口点以导出多个文件。**Barrels** 简化了导入，并使定位和管理相关文件变得更加容易。
- en: '`AppModule`); feature-level code should be placed in feature modules.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将功能级别的代码放置在功能模块中。
- en: '**Consider a shared directory**: Create a shared directory to encapsulate commonly
    used components, directives, pipes, and services. The shared module simplifies
    importing shared resources and promotes code reuse.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**考虑创建共享目录**：创建一个共享目录来封装常用组件、指令、管道和服务。共享模块简化了共享资源的导入，并促进了代码的重用。'
- en: '**Use lazy loading**: For large applications, consider using **lazy loading**
    to load feature modules on demand. This improves initial load times and separates
    code into manageable chunks.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用懒加载**：对于大型应用程序，考虑使用 **懒加载** 来按需加载功能模块。这提高了初始加载时间，并将代码分离成可管理的块。'
- en: Remember that the Angular style guide provides detailed explanations and examples
    for each of these best practices, and it’s a valuable resource for organizing
    an Angular project effectively.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Angular 风格指南为每个最佳实践提供了详细的解释和示例，并且是有效组织 Angular 项目的宝贵资源。
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These are just recommendations on best practices when organizing an Angular
    project. There’s no *one size fits all* approach in terms of architecting your
    Angular project. It will always depend on other factors such as the stage of the
    project, deadline, team size, and so on. Make sure that you pick the approach
    that is suitable for your project. A recommended strategy is to begin with the
    LIFT approach, which facilitates faster application development. As your application
    expands, it is advisable to apply best practices to optimize your code and ensure
    its efficiency.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是组织 Angular 项目时的最佳实践建议。在架构你的 Angular 项目方面，没有一种“一刀切”的方法。它将始终取决于其他因素，如项目的阶段、截止日期、团队规模等。确保你选择适合你项目的方案。一种推荐策略是从
    LIFT 方法开始，这有助于加快应用程序的开发。随着应用程序的扩展，建议应用最佳实践来优化代码并确保其效率。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered key aspects of modern Angular development.
    We began by introducing the evolution of Angular, highlighting its growth and
    advancements. Moving on, we discussed core features and improvements in recent
    Angular versions, including data binding, components, services, directives, pipes,
    and signals. We also emphasized the importance of organizing an Angular project
    effectively using best practices.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了现代 Angular 开发的关键方面。我们首先介绍了 Angular 的发展历程，强调了其增长和进步。接着，我们讨论了最近 Angular
    版本中的核心特性和改进，包括数据绑定、组件、服务、指令、管道和信号。我们还强调了有效组织 Angular 项目的重要性，并强调了使用最佳实践的重要性。
- en: By gaining insights into modern Angular development, you are now equipped to
    take your skills to the next level. In the next chapter, we will focus on integrating
    PrimeNG into your Angular project. We will guide you through the process of incorporating
    PrimeNG into your Angular application and harnessing its power to enhance the
    user experience.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通过深入了解现代 Angular 开发，你现在已经准备好将你的技能提升到下一个层次。在下一章中，我们将专注于将 PrimeNG 集成到你的 Angular
    项目中。我们将指导你通过将 PrimeNG 集成到你的 Angular 应用程序中，并利用其功能来增强用户体验的过程。
