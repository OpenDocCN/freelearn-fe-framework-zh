["```js\ntype User {\n  username: String\n}\nfunction User_username(user) {\n  return user.getUsername()\n}\n```", "```js\ntype Query {\n  currentUser: User\n}\nfunction Query_currentUser(req) {\n  return req.auth.user\n}\n```", "```js\n{\n  currentUser {\n    username\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"currentUser\": {\n      \"username\": \"dan\"\n    }\n  }\n}\n```", "```js\n{\n  currentUser {\n    username\n    posts {\n      id\n      title\n    }\n  }\n}\n```", "```js\n{\n  postById(id: \"1234\") {\n    title\n  }\n}\n```", "```js\n    $ cp -R ch10 ch11\n    ```", "```js\n    $ cd backend/\n    $ npm install graphql@16.8.1 @apollo/server@4.10.0\n    ```", "```js\n    export const querySchema = `#graphql\n      type Query {\n        test: String\n      }\n    `\n    ```", "```js\n    export const queryResolver = {\n      Query: {\n        test: () => {\n          return 'Hello World from GraphQL!'\n        },\n      },\n    }\n    ```", "```js\n    import { querySchema, queryResolver } from './query.js'\n    ```", "```js\n    export const typeDefs = [querySchema]\n    export const resolvers = [queryResolver]\n    ```", "```js\n    import { ApolloServer } from '@apollo/server'\n    import { expressMiddleware } from '@apollo/server/express4'\n    ```", "```js\n    import { typeDefs, resolvers } from './graphql/index.js'\n    ```", "```js\n    const apolloServer = new ApolloServer({\n      typeDefs,\n      resolvers,\n    })\n    ```", "```js\n    apolloServer\n      .start()\n      .then(() => app.use('/graphql', expressMiddleware(apolloServer)))\n    ```", "```js\n    $ npm run dev\n    ```", "```js\n    query ExampleQuery {\n      test\n    }\n    ```", "```js\n    import {\n      getPostById,\n      listAllPosts,\n      listPostsByAuthor,\n      listPostsByTag,\n    } from '../services/posts.js'\n    ```", "```js\n    export const querySchema = `#graphql\n      type Query {\n        test: String\n    [Type] syntax means that something is an array of Type. We will define the Post type later. Type! is the non-null modifier and means that a type is not null (required), so [Type!] means that each element is a Type, and not null (the array can still be empty, though). [Type!]! means that the array will always exist and never be null (but the array can still be empty).\n    ```", "```js\n        postsByAuthor(username: String!): [Post!]!\n        postsByTag(tag: String!): [Post!]!\n    ```", "```js\n        postById(id: ID!): Post\n      }\n    `\n    ```", "```js\n    export const queryResolver = {\n      Query: {\n        test: () => {\n          return 'Hello World from GraphQL!'\n        },\n        posts: async () => {\n          return await listAllPosts()\n        },\n        postsByAuthor: async (parent, { username }) => {\n          return await listPostsByAuthor(username)\n        },\n        postsByTag: async (parent, { tag }) => {\n          return await listPostsByTag(tag)\n        },\n        postById: async (parent, { id }) => {\n          return await getPostById(id)\n        },\n      },\n    }\n    ```", "```js\n    import { getUserInfoById } from '../services/users.js'\n    ```", "```js\n    export const postSchema = `#graphql\n      type Post {\n        id: ID!\n        title: String!\n        author: User\n        contents: String\n        tags: [String!]\n        createdAt: Float\n        updatedAt: Float\n      }\n    `\n    ```", "```js\n    export const postResolver = {\n      Post: {\n        author: async (post) => {\n          return await getUserInfoById(post.author)\n        },\n      },\n    }\n    ```", "```js\n    import { querySchema, queryResolver } from './query.js'\n    import { postSchema, postResolver } from './post.js'\n    export const typeDefs = [querySchema, postSchema]\n    export const resolvers = [queryResolver, postResolver]\n    ```", "```js\n    import { listPostsByAuthor } from '../services/posts.js'\n    ```", "```js\n    export const userSchema = `#graphql\n      type User {\n        username: String!\n        posts: [Post!]!\n      }\n    `\n    ```", "```js\n    export const userResolver = {\n      User: {\n        posts: async (user) => {\n          return await listPostsByAuthor(user.username)\n        },\n      },\n    }\n    ```", "```js\n    import { querySchema, queryResolver } from './query.js'\n    import { postSchema, postResolver } from './post.js'\n    import { userSchema, userResolver } from './user.js'\n    export const typeDefs = [querySchema, postSchema, userSchema]\n    export const resolvers = [queryResolver, postResolver, userResolver]\n    ```", "```js\nquery GetPostsOverview {\n  posts {\n    id\n    title\n    author {\n      username\n    }\n  }\n}\n```", "```js\n    query PostById($postByIdId: ID!) {\n      postById(id: $postByIdId) {\n    ```", "```js\n        title\n        contents\n        author {\n    ```", "```js\n          username\n          posts {\n            id\n            title\n          }\n        }\n      }\n    }\n    ```", "```js\n    {\n      \"postByIdId\": \"<ENTER ID FROM DATABASE>\"\n    }\n    ```", "```js\n    export const querySchema = `#graphql\n      input PostsOptions {\n        sortBy: String\n        sortOrder: String\n      }\n    ```", "```js\n      type Query {\n        test: String\n        posts(options: PostsOptions): [Post!]!\n        postsByAuthor(username: String!, options: PostsOptions): [Post!]!\n        postsByTag(tag: String!, options: PostsOptions): [Post!]!\n        postById(id: ID!, options: PostsOptions): Post\n      }\n    `\n    ```", "```js\n        posts: async (parent, { options }) => {\n          return await listAllPosts(options)\n        },\n        postsByAuthor: async (parent, { username, options }) => {\n          return await listPostsByAuthor(username, options)\n        },\n        postsByTag: async (parent, { tag, options }) => {\n          return await listPostsByTag(tag, options)\n        },\n    ```", "```js\n    query SortedPosts($options: PostsOptions) {\n      posts(options: $options) {\n        id\n        title\n        createdAt\n        updatedAt\n      }\n    }\n    ```", "```js\n    {\n      \"options\": {\n        \"sortBy\": \"updatedAt\",\n        \"sortOrder\": \"ascending\"\n      }\n    }\n    ```", "```js\n    export const optionalAuth = expressjwt({\n      secret: () => process.env.JWT_SECRET,\n      algorithms: ['HS256'],\n      credentialsRequired: false,\n    })\n    ```", "```js\n    import { optionalAuth } from './middleware/jwt.js'\n    ```", "```js\n    apolloServer.start().then(() =>\n      app.use(\n        '/graphql',\n        optionalAuth,\n    ```", "```js\n        expressMiddleware(apolloServer, {\n          context: async ({ req }) => {\n            return { auth: req.auth }\n          },\n        }),\n      ),\n    )\n    ```", "```js\n    import { GraphQLError } from 'graphql'\n    import { createUser, loginUser } from '../services/users.js'\n    import { createPost } from '../services/posts.js'\n    ```", "```js\n    export const mutationSchema = `#graphql\n    type Mutation {\n          signupUser(username: String!, password: String!): User\n          loginUser(username: String!, password: String!): String\n    ```", "```js\n          createPost(title: String!, contents: String, tags: [String]): Post\n        }\n    `\n    ```", "```js\n    export const mutationResolver = {\n      Mutation: {\n        signupUser: async (parent, { username, password }) => {\n          return await createUser({ username, password })\n        },\n        loginUser: async (parent, { username, password }) => {\n          return await loginUser({ username, password })\n        },\n    ```", "```js\n        createPost: async (parent, { title, contents, tags }, { auth }) => {\n    ```", "```js\n          if (!auth) {\n            throw new GraphQLError(\n              'You need to be authenticated to perform this action.',\n              {\n                extensions: {\n                  code: 'UNAUTHORIZED',\n                },\n              },\n            )\n          }\n    ```", "```js\n          return await createPost(auth.sub, { title, contents, tags })\n        },\n      },\n    }\n    ```", "```js\n    import { querySchema, queryResolver } from './query.js'\n    import { postSchema, postResolver } from './post.js'\n    import { userSchema, userResolver } from './user.js'\n    import { mutationSchema, mutationResolver } from './mutation.js'\n    export const typeDefs = [querySchema, postSchema, userSchema, mutationSchema]\n    export const resolvers = [\n      queryResolver,\n      postResolver,\n      userResolver,\n      mutationResolver,\n    ]\n    ```", "```js\n    mutation SignupUser($username: String!, $password: String!) {\n      signupUser(username: $username, password: $password) {\n        username\n      }\n    }\n    ```", "```js\n    {\n      \"username\": \"graphql\",\n      \"password\": \"gql\"\n    }\n    ```", "```js\n    mutation LoginUser($username: String!, $password: String!) {\n      loginUser(username: $username, password: $password)\n    }\n    ```", "```js\n    mutation CreatePost($title: String!, $contents: String, $tags: [String]) {\n      createPost(title: $title, contents: $contents, tags: $tags) {\n        id\n        title\n        author {\n          username\n        }\n      }\n    }\n    ```", "```js\n    {\n      \"title\": \"GraphQL Post\",\n      \"contents\": \"This is posted from GraphQL!\"\n    }\n    ```", "```js\nenum PostType {\n  UNPUBLISHED,\n  UNLISTED,\n  PUBLIC\n}\n```", "```js\nfragment UserInfo on User {\n  username\n  profilePicture\n  fullName\n  biography\n}\n```", "```js\n{\n  posts {\n    author {\n      ...UserInfo\n    }\n  }\n}\n```", "```js\n{\n  posts {\n    author {\n      ...UserInfo\n      followedBy {\n        ...UserInfo\n      }\n      follows {\n        ...UserInfo\n      }\n    }\n  }\n}\n```", "```js\n{\n  __schema {\n    types {\n      name\n    }\n  }\n}\n```"]