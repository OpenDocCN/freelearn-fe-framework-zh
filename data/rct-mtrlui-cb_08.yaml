- en: Cards - Display Detailed Information
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡片 - 显示详细信息
- en: 'In this chapter, you''ll learn the following about Cards:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下关于卡片的内容：
- en: Main content
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要内容
- en: Card header
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡片标题
- en: Performing actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行操作
- en: Presenting media
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示媒体
- en: Expandable cards
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可展开卡片
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Cards are a Material Design concept used to display specific information on
    a given subject. For example, the subject could be an object returned by an API
    endpoint. Or, the subject could just be part of a complex object—in this case, you
    can use multiple cards to organize information in a way that helps the user understand
    what they're looking at.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片是用于在给定主题上显示特定信息的Material Design概念。例如，主题可以是API端点返回的对象。或者，主题可以是复杂对象的一部分——在这种情况下，您可以使用多个卡片以帮助用户理解他们正在查看的信息的方式来组织信息。
- en: Main content
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要内容
- en: The main content of a `Card` component is where information concerning the subject
    is placed. The `CardContent` component is a child of `Card`, and you can use it
    to render other Material UI components, such as `Typography`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Card`组件的主要内容是放置与主题相关的信息的地方。`CardContent`组件是`Card`的子组件，您可以使用它来渲染其他Material
    UI组件，例如`Typography`。'
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s say that you''re working on a detail screen for some type of entity,
    such as a blog post. You''ve decided to use a `Card` component to render some
    of the entity details since the entity is the subject under consideration. Here''s
    the code that will render a `Card` component with information about a particular
    subject:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在为某种类型的实体（如博客文章）创建一个详情屏幕。您决定使用`Card`组件来渲染一些实体详情，因为实体是考虑的主题。以下是渲染包含特定主题信息的`Card`组件的代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you first load the screen, here''s what you''ll see:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次加载屏幕时，您将看到以下内容：
- en: '![](img/fd703a4a-d3bc-42b6-acfb-100b542eb524.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd703a4a-d3bc-42b6-acfb-100b542eb524.png)'
- en: 'The card''s content is divided into three sections:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片内容分为三个部分：
- en: '**Subject Title**: Tells the user what they''re looking at'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题标题**：告诉用户他们正在查看什么'
- en: '**Subtitle**: Gives the user a little more context'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**副标题**：为用户提供更多上下文'
- en: '**Content**: The main content of the subject'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容**：主题的主要内容'
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This example uses the `CardContent` component as the key organizational unit
    within `Card`. Everything else is up to you. For example, the card in this example
    uses three `Typography` components to render three different styles of text as
    the card's content.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用`CardContent`组件作为`Card`中的主要组织单元。其余部分由您自行决定。例如，本示例中的卡片使用三个`Typography`组件来渲染三种不同样式的文本作为卡片内容。
- en: The first `Typography` component uses the `h4` variant and serves as the card's
    title. The second `Typography` component serves as the subtitle of the card and
    uses the `subtitle1` variant. Lastly, there's the main content of the card, which
    uses the `Typography` default font. There is a `marginTop` style set on this text
    so that it's not pushed up against the subtitle.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`Typography`组件使用`h4`变体，作为卡片的标题。第二个`Typography`组件作为卡片的副标题，使用`subtitle1`变体。最后，是卡片的主要内容，使用`Typography`默认字体。此文本设置了`marginTop`样式，以便它不会紧挨着副标题。
- en: See also
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'Card reference: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡片参考：[https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)
- en: Card header
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡片标题
- en: The `CardHeader` component is used to render the header of a card. This includes
    the title text, as well as some other potential elements. The reason you might
    want to use a `CardHeader` component is so that you can let it handle the layout
    styles of the header and to keep the markup within your `Card` semantic.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardHeader`组件用于渲染卡片的标题。这包括标题文本以及一些其他潜在元素。您可能想要使用`CardHeader`组件的原因是让它处理标题的布局样式，并保持您的`Card`语义内的标记。'
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s say that you''re building a `card` component for users of your application.
    As the card header, you want to display the user''s name. Instead of using a `Typography`
    component to render the title using a text variant, you could use a `CardHeader`
    component, placed adjacent to the `CardContent` component. Here''s how the code
    appears:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在为您的应用程序用户构建一个`card`组件。作为卡片标题，您想显示用户的姓名。您可以使用`CardHeader`组件，而不是使用`Typography`组件通过文本变体来渲染标题，将其放置在`CardContent`组件旁边。以下是代码的显示方式：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s what the screen looks like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是屏幕的显示效果：
- en: '![](img/75009254-773e-412b-a6fb-5e6b616069be.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75009254-773e-412b-a6fb-5e6b616069be.png)'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s take a look at the markup used to render this card:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看渲染此卡片所使用的标记：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `CardHeader` component is a sibling of `CardContent`. This makes the `Card`
    markup semantic, as opposed to having to declare the card header within `CardContent`.
    The `CardHeader` component takes a `title` string property, which is how the title
    of the card is rendered.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardHeader` 组件是 `CardContent` 的兄弟组件。这使得 `Card` 标记语义化，而不是需要在 `CardContent`
    内声明卡片头部。`CardHeader` 组件接受一个 `title` 字符串属性，这是卡片标题的渲染方式。'
- en: There's more...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can add more than just a string to `CardHeader` components. You can also
    pass a sub-header string and an avatar to help users identify the subject in the
    card. Let''s modify this example to add both of these things. First, here are
    the new component imports that you''ll need to add:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向 `CardHeader` 组件添加不仅仅是字符串。你还可以传递一个副标题字符串和一个头像，以帮助用户识别卡片中的主题。让我们修改这个示例以添加这两者。首先，这里是你需要添加的新组件导入：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, here''s the updated `CardHeader` markup:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这是更新后的 `CardHeader` 标记：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here''s what the result looks like:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是结果的样子：
- en: '![](img/130f2d70-86af-4e20-bd97-7cafcef3ddcc.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/130f2d70-86af-4e20-bd97-7cafcef3ddcc.png)'
- en: The `CardHeader` component handles alignment of the three header components—the
    avatar, the title, and the sub-header.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardHeader` 组件处理三个头部组件的对齐——头像、标题和副标题。'
- en: See also
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Card` demos: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Card` 示例：[https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
- en: Performing actions
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作
- en: Cards are used to display specific actions about a subject. Often, users take
    action on subjects, such as sending a contact a message or deleting a contact.
    `CardActions` components can be used by `Card` components to display actions that
    users can take on the subject.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片用于显示关于主题的特定操作。通常，用户会对主题执行操作，例如向联系人发送消息或删除联系人。`CardActions` 组件可以被 `Card` 组件用来显示用户可以对主题执行的操作。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s say that you''re using a `Card` component to display a contact. In addition
    to showing information about the contact, you would like for your users to be
    able to take actions on contacts from within the card. For example, you could
    provide two actions—one to message the contact, and one to phone the contact.
    Here''s the code to do this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用 `Card` 组件来显示一个联系人。除了显示联系人的信息外，你还希望用户能够在卡片内对联系人执行操作。例如，你可以提供两个操作——一个用于给联系人发消息，另一个用于给联系人打电话。以下是执行此操作的代码：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s what the card looks like when the screen first loads:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，卡片看起来是这样的：
- en: '![](img/9a0775ce-ff82-4023-830f-9f9835d79b1f.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9a0775ce-ff82-4023-830f-9f9835d79b1f.png)'
- en: The two actions that users can take on the subject are rendered as icon buttons
    at the bottom of the card.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以对主题执行的两种操作以图标按钮的形式渲染在卡片底部。
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `CardActions` component handles aligning the button items inside of it,
    both horizontally, and making sure they're placed at the bottom of the card. The
    `disableActionSpacing` property removes the extra margin added by `CardActions`.
    Typically, you'll use this property any time you're using an `IconButton` component
    for your `actions`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardActions` 组件负责在其内部对按钮项进行水平对齐，并确保它们放置在卡片底部。`disableActionSpacing` 属性移除了
    `CardActions` 添加的额外边距。通常，你会在使用 `IconButton` 组件作为 `actions` 时使用此属性。'
- en: 'Let''s take a closer look at the markup:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看标记：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Like the other child components of `Card`, the `CardActions` component makes
    the overall card structure semantic, as it is a sibling of related card functionality.
    The items placed within `CardActions` can be anything you want, but common practice
    is to use icon buttons.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Card` 的其他子组件一样，`CardActions` 组件使整体卡片结构语义化，因为它与相关的卡片功能是兄弟关系。放置在 `CardActions`
    内的项可以是任何你想要的内容，但常见的做法是使用图标按钮。
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can change the alignment of the items in the `CardActions` component. Since
    it uses flexbox as its display, you can use any of the `justify-content` values.
    Here''s an updated version that aligns the action buttons to the right of the
    card:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以改变 `CardActions` 组件中项的对齐方式。由于它使用 flexbox 作为其显示方式，你可以使用任何 `justify-content`
    的值。下面是一个更新版本，将操作按钮对齐到卡片的右侧：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `justify-content` property is part of the `actions` style, which is then
    applied to the `CardActions` component. Here''s what the result looks like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`justify-content` 属性是 `actions` 样式的一部分，然后应用于 `CardActions` 组件。下面是结果的样子：'
- en: '![](img/c2568567-be08-48ae-9b92-6a1d9a2360d3.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c2568567-be08-48ae-9b92-6a1d9a2360d3.png)'
- en: 'Here''s another version showing `center` as the `justify-content` value:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个版本，显示 `center` 作为 `justify-content` 的值：
- en: '![](img/c5b60975-617b-419d-92cc-b9a905f7d7b1.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5b60975-617b-419d-92cc-b9a905f7d7b1.png)'
- en: See also
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Card` demos: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Card` 示例：[https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
- en: Presenting media
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示媒体
- en: Cards have built-in capabilities for displaying media. This includes things
    such as images and videos that become the focal point of the card.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片具有内置的显示媒体的能力。这包括图像和视频，它们成为卡片的核心内容。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you have an image of the subject that the `Card` component
    is displaying. You can use the `CardMedia` component to render the image. You
    should use this component instead of something like `<img>` because it will handle
    a number of styling issues for you. Here''s the code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个 `Card` 组件显示的主题图片。你可以使用 `CardMedia` 组件来渲染图片。你应该使用这个组件而不是 `<img>` 这样的东西，因为它会为你处理许多样式问题。以下是代码：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s what the card looks like when it''s rendered:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染后的卡片的样子：
- en: '![](img/df6bfd25-8e28-4898-90bd-1c59556fbf04.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df6bfd25-8e28-4898-90bd-1c59556fbf04.png)'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `CardMedia` component is just like other components that make up cards –
    just another part. In this example, `CardMedia` is placed below `CardHeader` and
    above `CardContent`. But it doesn't have to be this way. You can rearrange the
    order of these components.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardMedia` 组件就像构成卡片的其它组件一样——只是另一个部分。在这个例子中，`CardMedia` 放在 `CardHeader` 下方和
    `CardContent` 上方。但不必这样。你可以重新排列这些组件的顺序。'
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can rearrange your card items in a way that makes the most sense for your
    app. For example, your card with media might not have any content and you might
    want to display the header text at the bottom of the card, below the media, and
    with the text centered. Here''s the modified code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据你的应用逻辑重新排列你的卡片项目。例如，你的带有媒体的卡片可能没有任何内容，你可能想在卡片的底部显示标题文本，在媒体下方，并且文本居中。以下是修改后的代码：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here''s what the resulting card looks like:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终卡片的样式：
- en: '![](img/fa65f868-1e49-4982-baec-35984c84854e.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa65f868-1e49-4982-baec-35984c84854e.png)'
- en: See also
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: The `img` HTML tag reference: [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`img` HTML 标签参考：[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)'
- en: Expandable cards
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可展开卡片
- en: Sometimes, you can't fit everything into a card that you might want to. To accommodate,
    you can make your cards expandable, meaning that the user can click on an `expand`
    button to reveal additional content.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能无法将所有想要的内容都放入卡片中。为了适应，你可以使你的卡片可展开，这意味着用户可以点击 `expand` 按钮来显示附加内容。
- en: If you're trying to fit too much content into a `Card`, making the card expandable
    just masks the problem. Instead, consider a different approach to displaying information
    about the subject in question. For example, maybe, instead of a card, the subject
    is worthy of its own page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图在 `Card` 中放入太多内容，使卡片可展开只是掩盖了问题。相反，考虑一种不同的方法来显示关于所讨论主题的信息。例如，也许，而不是卡片，主题值得拥有自己的页面。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s see that there''s additional content about a subject within a card that
    does the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看卡片内关于一个主题的附加内容：
- en: Takes up a little too much vertical space
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 占用过多的垂直空间
- en: Isn't very important and doesn't need to be shown by default
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并不重要，不需要默认显示
- en: 'You can deal with both of these challenges by putting the content into an expandable
    region of the card. Then, the vertical space isn''t an issue and the user can
    look at the content if they deem it relevant. Here''s an example that builds on
    an earlier example from this chapter to make part of the card content hidden by
    default:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将内容放入卡片的可展开区域来处理这两个挑战。这样，垂直空间就不是问题，用户如果认为内容相关，可以查看内容。以下是一个基于本章早期示例构建的示例，其中默认隐藏卡片的部分内容：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When you first load the screen, here''s what the card looks like:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次加载屏幕时，卡片看起来是这样的：
- en: '![](img/039e3357-58ef-4ea8-ac34-61f5370c4932.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/039e3357-58ef-4ea8-ac34-61f5370c4932.png)'
- en: 'To the right of the action buttons in the card, there is now an `expand` button
    with a down arrow. If you click on the `expand` button, here''s what the card
    looks like when it''s expanded:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在卡片操作按钮的右侧，现在有一个带有向下箭头的 `expand` 按钮。如果你点击 `expand` 按钮，以下是卡片展开时的样子：
- en: '![](img/ffe0bc80-2382-4c30-94ad-b62c6ab43488.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffe0bc80-2382-4c30-94ad-b62c6ab43488.png)'
- en: The expand icon has now changed to a collapse icon—clicking on it will collapse
    the card into its original state.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 展开图标现在已更改为折叠图标——点击它将使卡片折叠回原始状态。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s break down the additions in this example that added the expandable card
    region. First, there''s the `expand` style:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下这个示例中添加的可展开卡片区域。首先，是 `expand` 样式：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is used to align the expand/collapse icon button to the left of the other
    actions. Next, let''s look at the `ExpandIcon` component:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于将展开/折叠图标按钮对齐到其他操作按钮的左侧。接下来，让我们看看 `ExpandIcon` 组件：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This utility component is used to render either the correct icon component,
    depending on the expanded state of the component. Next, let''s take a look at
    the `toggleExpanded()` function:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实用组件用于根据组件的展开状态渲染正确的图标组件。接下来，让我们看看 `toggleExpanded()` 函数：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This handler, when called, will toggle the expanded state. This state is then
    passed to the `ExpandIcon` component, which will render the appropriate icon.
    Next, let''s take a closer look at the actions markup for this card:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用此处理程序时，将切换展开状态。然后，将此状态传递给 `ExpandIcon` 组件，该组件将渲染适当的图标。接下来，让我们更仔细地看看这张卡的标记：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The expand/collapse button is the last `IconButton` component shown here. It''s
    using the expand style, the `toggleExpanded()` click handler, and the expanded
    state. Finally, let''s take a look at the card content that can be expanded and
    collapsed when the button is clicked on:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 展开折叠按钮是这里显示的最后一个 `IconButton` 组件。它使用展开样式，`toggleExpanded()` 点击处理程序和展开状态。最后，让我们看看当按钮被点击时可以展开和折叠的卡片内容：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `Collapse` component is used to show or hide the additional card content
    based on the expanded state. Note that the `CardContent` component is used here
    so that once the additional content is shown, it is styled consistently with the
    rest of the card content.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collapse` 组件用于根据展开状态显示或隐藏额外的卡片内容。请注意，这里使用的是 `CardContent` 组件，以确保一旦显示额外内容，其样式与卡片内容的其余部分保持一致。'
- en: See also
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Card` demos: [https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Card` 示例：[https://material-ui.com/demos/cards/](https://material-ui.com/demos/cards/)'
- en: '`Card` API documentation: [https://material-ui.com/api/card/](https://material-ui.com/api/card/)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Card` API 文档：[https://material-ui.com/api/card/](https://material-ui.com/api/card/)'
- en: '`CardHeader` API documentation: [https://material-ui.com/api/card-header/](https://material-ui.com/api/card-header/)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CardHeader` API 文档：[https://material-ui.com/api/card-header/](https://material-ui.com/api/card-header/)'
- en: '`CardContent` API documentation: [https://material-ui.com/api/card-content/](https://material-ui.com/api/card-content/)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CardContent` API 文档：[https://material-ui.com/api/card-content/](https://material-ui.com/api/card-content/)'
- en: '`CardActions` API documentation: [https://material-ui.com/api/card-actions/](https://material-ui.com/api/card-actions/)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CardActions` API 文档：[https://material-ui.com/api/card-actions/](https://material-ui.com/api/card-actions/)'
- en: '`IconButton` API documentation: [https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IconButton` API 文档：[https://material-ui.com/api/icon-button/](https://material-ui.com/api/icon-button/)'
- en: '`Collapse` API documentation: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collapse` API 文档：[https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
