- en: Better Forms and Event Handling with TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s talk form. Since the beginning of the book, we have been avoiding form
    inputs in our examples. This is because I wanted to dedicate this entire chapter
    to just forms. We will cover as much as it takes to build business applications
    that collect user information. Here is a breakdown of what you should expect from
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Typed form input and output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form submission and handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating types for forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to try to utilize TypeScript as much as possible, as it simplifies our
    development process and makes our app behavior more predictable. For this reason,
    we will create a simple data class to serve as a type for the form values.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new Angular project to follow along with the examples. Then,
    use the following command to create a new class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The class is generated in the `app` folder; replace its content with the following
    data class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This class represents all the values our form (yet to be created) will have.
    The properties that are succeeded by a question mark (`?`) are optional, which
    means that TypeScript will throw no errors when the respective values are not
    supplied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before jumping into creating forms, let''s start with a clean slate. Replace
    the `app.component.html` file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app and leave it running. You should see the following at port `4200`
    of localhost (remember to include Bootstrap):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61c38bbd-b40e-433e-9ebd-75b6eed4d0a9.png)'
  prefs: []
  type: TYPE_IMG
- en: The form module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a contract that we want the form to follow, let''s now generate
    the form''s component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The command also adds the component as a declaration to our `App` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'What makes Angular forms special and easy to use are functionalities provided
    out-of-the-box, such as the `NgForm` directive. Such functionalities are not available
    in the core browser module but in the form module. Hence, we need to import them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Simply importing and adding `FormModule` to the `imports` array is all we needed
    to do.
  prefs: []
  type: TYPE_NORMAL
- en: Two-way binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The perfect time to start showing some form controls using the form component
    in the browser is right now. Keeping the state in sync between the data layer
    (model) and the view can be very challenging, but with Angular it''s just a matter
    of using one directive exposed from `FormModule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Angular relies on the `name` attribute internally to carry out binding. For
    this reason, the `name` attribute is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pay attention to `[(ngModel)]="flightModel.fullName"`; it''s trying to bind
    a property on the component class to the form. This model will be of the `Flight` type,
    which is the class we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `flightModel` property is added to the component as a `Flight` type and
    initialized with some default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the component in the app HTML, so it can be displayed in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what you should have in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7632cd3a-a1e3-4da8-b126-17290af51232.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see two-way binding in action, use interpolation to display the value of
    `flightModel.fullName`. Then, enter a value and see the live update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26ef4055-66f5-4517-85ff-3f2508be6682.png)'
  prefs: []
  type: TYPE_IMG
- en: More form fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get hands-on and add the remaining form fields. After all, we can't book
    a flight by just supplying our names.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `from` and `to` fields are going to be *select boxes* with a list of cities
    we can fly into and out of. This list of cities will be stored right in our component
    class, and then we can iterate over it in the template and render it as a select
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The array stores a few cities from around the world as strings. Let''s now
    use the `ngFor` directive to iterate over the cities and display them on the form
    using a select box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Neat and clean! You can open the browser and see it right there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc07e8d4-009d-479f-ab6d-e598fdbd6b3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The select drop-down, when clicked, shows a list of cities, as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74a07788-3491-415c-8cea-90ed0bd340ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s add the trip type field (radio buttons), the departure date field
    (date control), and the arrival date field (date control):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'How the data is bound to the controls is very similar to the text and select
    fields that we created previously. The major difference is the types of control
    (radio buttons and dates):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93d3b746-b068-4e0b-9337-ac684ef5d492.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, add the number of passengers (adults, children, and infants):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The passengers section are all of the number type because we are just expected
    to pick the number of passengers coming onboard from each category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f24bb9e-6103-4069-8780-86979a25aa23.png)'
  prefs: []
  type: TYPE_IMG
- en: Validating the form and form fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular greatly simplifies form validation by using its built-in directives
    and state properties. You can use the state property to check whether a form field
    has been touched. If it's touched but violates a validation rule, you can use
    the `ngIf` directive to display associated errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example of validating the full name field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We just added three extra significant attributes to our form's full name field: `#name`,
    `required`, and `minlength`. The `#name` attribute is completely different from
    the `name` attribute in that the former is a template variable that holds information
    about this given field via the `ngModel` value while the latter is the usual form
    input name attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In Angular, validation rules are passed as attributes, which is why `required`
    and `minlength` are there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, the fields are validated, but there are no feedbacks to the user on what
    must have gone wrong. Let''s add some error messages to be shown when form fields
    are violated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ngIf` directive shows these `div` elements conditionally:'
  prefs: []
  type: TYPE_NORMAL
- en: If the form field has been touched but there's no value in it, the Name is required error
    is shown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name must be at least 6 characters long is also shown when the field is touched
    but the content length is less than *6*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following two screenshots show these error outputs in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24770a2a-1b0f-4039-926b-abccb82b063a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A different error is shown when a value is entered but the value text count
    is not up to 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46db1233-a42c-45db-9ae2-739fb0952514.png)'
  prefs: []
  type: TYPE_IMG
- en: Submitting forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to consider a few factors before submitting a form:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the form valid?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there a handler for the form prior to submission?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make sure that the form is valid, we can disable the Submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we add a template variable called `flightForm` to the form and then
    use the variable to check whether the form is valid. If the form is invalid, we
    disable the button from being clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99a2e768-93a1-436b-a474-ba333e7fb8ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To handle the submission, add an `ngSubmit` event to the form. This event will
    be called when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now add a class method, `handleSubmit`, to handle the form submission.
    A simple log to the console may be just enough for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Handling events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are not the only way we receive values from users. Simple DOM interactions,
    mouse clicks, and keyboard interactions can raise events that could lead to a
    request from our users. Of course, we have to handle their requests one way or
    another. There are numerous events that we can't talk about in this book. What
    we can do is look at basic keyboard and mouse events.
  prefs: []
  type: TYPE_NORMAL
- en: Mouse events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate the two popular mouse events, click and double-click, create
    a new Angular project and then add the following autogenerated `app.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A `counter` property is bound to the view using interpolation and Increment
    and Decrement buttons. The property is available on the app component and is initialized
    to zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is what it baically looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3831e47-a5b0-41ec-a37c-f9d5894d0061.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking the buttons does absolutely nothing. Let''s add a click event to the
    Increment button, so it adds 1 to the counter property every time it''s clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to bind this event handler to the button in the template for us to
    actually increment the counter when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Events are bound to the template using attributes but wrapping the attribute
    in parentheses. The attribute value becomes the method on the component class
    that will serve as the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the same functionality for Decrement. Assuming that decrementing is
    an action you want to ensure that the user intended to implement, you can attach
    a double-click event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, instead of using `click`, we use the `dblclick` event and then
    bind the decrement event handler to it. The handler is just an inverse of the
    increment handler with a check to see whether we have hit zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the new events in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0afbe16e-d007-41f3-a927-ffd0c386fa24.png)'
  prefs: []
  type: TYPE_IMG
- en: Keyboard events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can track keyboard interactions by listening to various keyboard events.
    The `keypress` event tells you that a button is clicked; if you have a listener
    attached to it, the listener is fired. You can attach keyboard events in the same
    way that we attached mouse events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The element with the `key-bg` class is shown when a key is pressed; it displays
    the exact key we pressed, which is held in the `key` property. The `keyPressed`
    property is a Boolean that we set to `true` when a key is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The event fires the `showKey` listener; let''s implement it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `showKey` handler does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It sets the `key` property with the value of the pressed key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pressed key is represented as a lowercase string, so we use the `toUpperCase`
    method to transform it to uppercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `keyPressed` property is set to `true`, so it displays the pressed key,
    and is then set to `false` after 500 miliseconds, so the shown key is hidden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you press a key (and the `container` div has focus), the following screenshot
    shows what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '>![](img/865639ab-db68-4952-b736-2ee817c0ecc6.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have a great deal of knowledge about collecting user inputs either via
    forms or events. We also covered important features of forms, such as typed inputs,
    validation, two-way binding, submission, and so on. The event examples we saw
    covered both mouse and keyboard events and how to handle them. All these interesting
    encounters prepare you for building business applications.
  prefs: []
  type: TYPE_NORMAL
