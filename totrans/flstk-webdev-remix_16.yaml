- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Developing for the Edge
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为边缘开发
- en: '**Edge** is a multifaceted term that can mean different things in different
    contexts. It might denote a location, a runtime, or a computing paradigm. You
    may recall from [*Chapter 3*](B17399_03.xhtml#_idTextAnchor043), *Deployment Targets,
    Adapters, and Stacks*, that Remix can be deployed to various server environments,
    including edge environments. In this chapter, we will dive deeper into developing
    for the edge and explore what it means to develop Remix applications that run
    on edge environments.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**边缘**是一个多面性的术语，在不同的上下文中可能意味着不同的事物。它可能表示一个位置、一个运行时或一种计算范式。您可能还记得从[*第三章*](B17399_03.xhtml#_idTextAnchor043)，*部署目标、适配器和堆栈*，中了解到Remix可以被部署到各种服务器环境，包括边缘环境。在本章中，我们将深入探讨为边缘开发，并探讨开发在边缘环境中运行的Remix应用程序的含义。'
- en: 'The chapter is split into two sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为两个部分：
- en: Living on the edge
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在边缘生活
- en: Understanding the edge’s benefits and limitations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解边缘的优势和限制
- en: First, we will discuss edge computing and define related concepts. Next, we
    will consider the benefits and limitations of hosting Remix at the edge.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将讨论边缘计算并定义相关概念。接下来，我们将考虑在边缘托管Remix的好处和限制。
- en: After reading this chapter, you will understand what it means to deploy to the
    edge and know what to consider when working with Remix in edge environments. Further,
    you will know about popular edge providers and be able to discuss the pros, cons,
    and limitations of the edge as a location and runtime.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章之后，您将了解部署到边缘的含义，并了解在与边缘环境中的Remix一起工作时需要考虑什么。此外，您还将了解流行的边缘提供商，并能够讨论边缘作为位置和运行时的优点、缺点和限制。
- en: Living on the edge
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在边缘生活
- en: Edge computing is a paradigm that has been around for many years but has picked
    up steam in association with the **Internet of Things** (**IoT**). The term also
    found a new meaning in web development when CDNs started offering new JavaScript
    runtimes to host web applications on the edge. In this section, we will define
    what it means to run websites on the edge and see what edge development with Remix
    looks like. First, let’s take a step back and understand the different meanings
    of the term “edge.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘计算是一种已经存在多年的范式，但随着物联网（**IoT**）的兴起而备受关注。当CDN开始提供新的JavaScript运行时，以便在边缘托管Web应用程序时，该术语在Web开发中也找到了新的含义。在本节中，我们将定义在边缘运行网站的含义，并了解使用Remix进行边缘开发的样子。首先，让我们退一步，理解“边缘”一词的不同含义。
- en: Computing at the edge
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘计算
- en: Edge computing is a paradigm of computer science that contrasts cloud computing.
    It describes a system architecture where the compute is located as close as possible
    to its utilization. While cloud computing happens in offsite data centers, edge
    computing aims to locate computing at the edge of a given network. This is why
    we often use the term edge to describe a location that contrasts the massive data
    centers of the cloud.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘计算是一种与云计算相对的计算机科学范式。它描述了一种系统架构，其中计算位于其利用点尽可能近的位置。虽然云计算发生在远程数据中心，但边缘计算旨在将计算定位在给定网络的边缘。这就是为什么我们经常使用“边缘”一词来描述与云的庞大数据中心形成对比的位置。
- en: The goal of edge computing is to reduce round-trip times from the client to
    the server by moving the server closer to the user. Among other things, edge computing
    is enabled by the increased availability and reduced cost of computing. Why not
    compute closer to the user if the computing power is available?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘计算的目标是通过将服务器移至用户附近来减少客户端到服务器的往返时间。除了其他方面，边缘计算得益于计算可用性的增加和成本的降低。如果计算能力可用，为什么不更靠近用户进行计算呢？
- en: Think about a security camera designed to automatically detect movement and
    set off an alarm in case of suspicious activity. In a cloud-based setup, the camera
    sends its video feed to a central data center for analysis. If it detects movement,
    the central system triggers the building's alarm. On the other hand, with an edge-based
    architecture, the camera may process the feed right on the device. If it spots
    movement, the camera itself sends an alert to the building's central server, which
    then activates the alarm system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下一款设计用来自动检测运动并在发现可疑活动时触发警报的安全摄像头。在基于云的设置中，摄像头将视频流发送到数据中心进行分析。如果检测到运动，中央系统会触发建筑物的警报。另一方面，使用基于边缘的架构，摄像头可能直接在设备上处理视频流。如果它检测到运动，摄像头本身会向建筑物的中央服务器发送警报，然后激活警报系统。
- en: Edge computing requires available computation capabilities on the network’s
    edge, while cloud computing takes advantage of the computation capabilities of
    centralized data centers. With edge computing, we can decrease response times
    and network bandwidth by avoiding round trips to the cloud. However, the required
    computation capabilities must be available. Sometimes, we may need to rethink
    our application and its runtime to make it lighter and suitable for the edge.
    This is why we may use the term edge to describe optimized runtime environments
    for the edge.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘计算需要在网络边缘有可用的计算能力，而云计算则利用了集中式数据中心的计算能力。通过边缘计算，我们可以通过避免往返云端的行程来减少响应时间和网络带宽。然而，所需的计算能力必须是可用的。有时，我们可能需要重新思考我们的应用程序及其运行时，使其更轻量级且适合边缘。这就是为什么我们可能会使用“边缘”一词来描述针对边缘优化的运行时环境。
- en: To clarify, we won’t try to deploy and run Remix on security cameras. Edge computing
    is a distributed computing paradigm that can be applied to many use cases, such
    as the Internet of Things. The Internet of Things is one example of edge computing,
    where smart devices communicate in an edge network without the need to stream
    the collected data directly to the cloud for processing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确，我们不会尝试在安全摄像头上部署和运行Remix。边缘计算是一种分布式计算范式，可以应用于许多用例，例如物联网。物联网是边缘计算的一个例子，其中智能设备在边缘网络中通信，无需将收集到的数据直接流式传输到云端进行处理。
- en: In web development, edge computing takes place in highly geographically distributed
    data centers that heavily increase proximity to users compared to the centralized
    data centers of traditional cloud computing offerings. Next, let’s review today’s
    edge offerings for web apps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络开发中，边缘计算发生在高度地理分布的数据中心，与传统的云计算提供的集中式数据中心相比，大大增加了与用户的接近程度。接下来，让我们回顾一下今天针对Web应用的边缘服务。
- en: Running web apps on the edge
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在边缘运行Web应用
- en: CDNs have served content on the edge of the internet for decades. Conclusively,
    edge computing is not a new concept within web development. What’s cutting-edge
    (pun intended) is the ability to host dynamic web applications on the edge.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: CDN已经为互联网边缘提供了数十年的内容。总之，边缘计算在Web开发中不是一个新概念。真正前沿的（有意为之）是能够在边缘托管动态Web应用的能力。
- en: Traditionally, CDNs are used to deliver static content, including web page assets
    (HTML, CSS, and JavaScript files) and media files (images and videos). CDNs maintain
    geographically distributed data centers in as many locations as possible and are
    optimized for reliability, scale, and performance. This makes CDNs perfect not
    just for caching and serving static content but also for acting as edge computing
    providers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，CDN用于交付静态内容，包括网页资源（HTML、CSS和JavaScript文件）和媒体文件（图像和视频）。CDN在尽可能多的地点维护地理分布式的数据中心，并针对可靠性、可扩展性和性能进行了优化。这使得CDN不仅适合缓存和提供静态内容，还适合作为边缘计算提供商。
- en: In recent years, CDNs have expanded their scope to handle dynamic content and
    offer web application hosting services. Popular CDNs that offer edge runtimes
    are Cloudflare and Fastly. Additionally, a growing list of hosting providers,
    such as Netlify and Vercel, partner with CDNs to offer edge environments through
    their hosting platforms.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，CDN已经扩大了其范围，以处理动态内容并提供Web应用托管服务。提供边缘运行时的流行CDN包括Cloudflare和Fastly。此外，越来越多的托管提供商，如Netlify和Vercel，与CDN合作，通过他们的托管平台提供边缘环境。
- en: Remix is one of the first web frameworks to support deploying and running on
    the edge. As you know from the previous chapters of this book, Remix was developed
    with various runtime environment requirements in mind. In the next section, we
    will learn more about today’s edge hosting providers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Remix是第一个支持在边缘部署和运行的Web框架之一。正如您从本书的前几章所知，Remix是在考虑到各种运行时环境需求的情况下开发的。在下一节中，我们将了解更多关于今天的边缘托管提供商。
- en: Remixing the edge
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘计算中的Remix
- en: In theory, Remix can run on any server that can execute JavaScript. This is
    possible because Remix utilizes an adapter architecture. Remix uses adapters to
    translate requests and responses between the native server runtime and Remix.
    This allows Remix to work together with various web server libraries and runtimes.
    In this section, we will review how to deploy Remix at the edge.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，Remix可以在任何可以执行JavaScript的服务器上运行。这是可能的，因为Remix利用了适配器架构。Remix使用适配器在本地服务器运行时和Remix之间转换请求和响应。这使得Remix可以与各种Web服务器库和运行时协同工作。在本节中，我们将回顾如何在边缘部署Remix。
- en: 'Remix maintains official adapters for many popular deployment targets, but
    the adapter architecture also allows the community to build adapters for any environment.
    At the time of writing, there are Remix templates for the following edge and edge-like
    deployment targets:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Remix为许多流行的部署目标维护官方适配器，但适配器架构也允许社区为任何环境构建适配器。在撰写本文时，以下边缘和类似边缘的部署目标有Remix模板：
- en: Cloudflare Pages
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloudflare Pages
- en: Cloudflare Workers
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloudflare Workers
- en: Deno Deploy
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Deno Deploy
- en: Fastly Compute@Edge
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fastly Compute@Edge
- en: Netlify Edge Functions
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netlify Edge Functions
- en: Fly.io
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fly.io
- en: Vercel Edge Functions
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vercel Edge Functions
- en: 'Deploying Remix to the edge is as easy as picking an edge template and deploying
    it to the associated provider service. Try it out by running the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将Remix部署到边缘就像选择一个边缘模板并将其部署到相关服务提供商一样简单。通过运行以下命令尝试一下：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Follow the instructions of the `create-remix` script and then open the bootstrapped
    `README.md` file. The `README.md` will guide you through deploying the app to
    Cloudflare Workers. Just like that, you deployed to the edge with Remix.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 按照`create-remix`脚本的说明操作，然后打开引导的`README.md`文件。`README.md`将指导您将应用程序部署到Cloudflare
    Workers。就像那样，您使用Remix将应用程序部署到了边缘。
- en: Note that there are differences between the listed edge and edge-like deployment
    targets. CDNs utilize lightweight JavaScript runtimes that are not compatible
    with Node.js. Edge-like deployment targets such as Deno Deploy and Fly.io provide
    regional distribution but may offer less proximity than their CDN counterparts.
    You can refer to [*Chapter 3*](B17399_03.xhtml#_idTextAnchor043), *Deployment
    Targets, Adapters, and Stacks*, to learn more about Remix’s different deployment
    targets and their runtimes and environments.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，列出的边缘和类似边缘的部署目标之间存在差异。CDN使用与Node.js不兼容的轻量级JavaScript运行时。类似边缘的部署目标，如Deno Deploy和Fly.io提供区域分布，但可能比它们的CDN对应物提供更少的邻近性。您可以参考[*第3章*](B17399_03.xhtml#_idTextAnchor043)，*部署目标、适配器和堆栈*，了解更多关于Remix的不同部署目标及其运行时和环境。
- en: In this section, you learned that edge computing is a distributed computing
    paradigm and understood how it differs from cloud computing. You further reviewed
    available edge deployment targets for Remix and deployed a Remix app to the edge.
    You also learned how serving from the edge can improve response times. Maybe you’re
    wondering why we didn’t build BeeRich to run on the edge. In the next section,
    we will consider the limitations of running at the edge and discuss further pros
    and cons.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了边缘计算是一种分布式计算范式，并了解了它与云计算的区别。您还回顾了Remix可用的边缘部署目标，并将Remix应用程序部署到了边缘。您还了解了从边缘提供服务如何提高响应时间。也许您想知道为什么我们没有构建BeeRich在边缘上运行。在下一节中，我们将考虑在边缘运行的局限性，并进一步讨论利弊。
- en: Understanding the edge’s benefits and limitations
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解边缘计算的优势和局限性
- en: In the previous section, you learned that edge computing is about performance.
    By moving the compute closer to the user, we can reduce response times and, consequently,
    improve the user experience. Let’s dive deeper and learn more about the edge’s
    pros and cons.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您了解到边缘计算关乎性能。通过将计算更靠近用户，我们可以减少响应时间，从而提高用户体验。让我们深入了解，了解更多关于边缘的优缺点。
- en: Edge environments follow a serverless programming model. Each incoming request
    starts up a new edge function. The function runs the web application (our Remix
    app) to fulfill the request and shuts down afterward. The serverless programming
    model makes edge environments highly scalable but also increases the complexity
    of the associated system architecture as it limits what can be done within the
    web application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘环境遵循无服务器编程模型。每个传入请求都会启动一个新的边缘函数。该函数运行Web应用程序（我们的Remix应用程序）以满足请求，然后关闭。
- en: Serverless execution avoids wasting computing power on idle applications. However,
    serverless also reduces the capabilities of web applications to short-lived functions
    that shut down after handling an incoming request. For example, serverless functions
    cannot be used for long-running tasks, such as maintaining server-sent event endpoints
    or WebSocket servers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器执行避免了在空闲应用程序上浪费计算能力。然而，无服务器也减少了Web应用程序的能力，将其缩短为处理传入请求后关闭的短期函数。例如，无服务器函数不能用于长时间运行的任务，如维护服务器发送事件端点或WebSocket服务器。
- en: Like most serverless environments, edge functions also do not have access to
    a filesystem and cannot write and read files. This requires us to utilize a remote
    service to store files. Additionally, edge functions do not offer long-living
    application states that can be shared between different requests. This prevents
    us from caching data or managing user sessions in memory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数无服务器环境一样，边缘函数也无法访问文件系统，无法读写文件。这要求我们利用远程服务来存储文件。此外，边缘函数不提供可以在不同请求之间共享的长久应用状态。这阻止了我们缓存数据或在内存中管理用户会话。
- en: Edge providers utilize lightweight runtimes to make web applications less computation-intensive.
    Most of today’s CDN-based edge runtimes operate on V8 isolates, isolated contexts
    within the V8 engine. Booting up a V8 isolate is faster than booting up containers
    or virtual machines. This makes edge applications handle a request within milliseconds.
    Most traditional serverless functions suffer from cold start times of several
    hundred milliseconds to start after being dormant for a while. Edge functions
    do not suffer from the same cold start problem.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘提供商使用轻量级运行时，使Web应用程序的计算密集度降低。今天的大多数基于CDN的边缘运行时都在V8隔离器上运行，这是V8引擎中的隔离上下文。启动V8隔离器比启动容器或虚拟机更快。这使得边缘应用程序能够在毫秒内处理请求。大多数传统无服务器函数在一段时间休眠后启动时，会遭受数百毫秒的冷启动时间。边缘函数则不会遇到同样的冷启动问题。
- en: Most edge-native runtimes, such as workerd from Cloudflare, are designed with
    web standards in mind but do not support executing Node.js standard libraries.
    This makes them incompatible with Node.js. Conclusively, we can only use npm packages
    if these packages do not use Node.js standard libraries internally. This may or
    may not be an issue, depending on the use case of the application, but it certainly
    is a point to consider.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数边缘原生运行时，如Cloudflare的workerd，都是考虑到Web标准设计的，但它们不支持执行Node.js标准库。这使得它们与Node.js不兼容。最终，我们只能使用不内部使用Node.js标准库的npm包。这可能会或可能不会成为问题，具体取决于应用程序的使用情况，但确实是一个需要考虑的点。
- en: The big advantage the edge has over traditional web hosting is global distribution.
    Most server and serverless environments do not automatically distribute applications
    across different regions, at least not without additional configuration overhead
    and costs. Edge computing allows us to distribute web applications globally with
    minimal configuration efforts and significantly lower price points. However, geographical
    distribution also increases the complexity of the associated system architecture.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘相对于传统Web托管的一个大优势是全球分布。大多数服务器和无服务器环境不会自动在不同区域之间分发应用程序，至少不是没有额外的配置开销和成本。边缘计算使我们能够以最小的配置努力和显著降低的价格点在全球范围内分发Web应用程序。然而，地理分布也增加了相关系统架构的复杂性。
- en: 'Regional distribution only decreases response times if it decreases the total
    round-trip time behind a request. Refer to *Figure 13**.2* in [*Chapter 13*](B17399_13.xhtml#_idTextAnchor194),
    *Deferring Loader Data*, where we illustrated how Remix reduces response times
    by removing client-server round trips. Instead of doing fetch requests from the
    client to the server, we can execute `loader` functions on the document request
    and query the closely located database. Notice that in *Figure 13**.2*, the round-trip
    time from the server to the database is very small. We assume that the database
    is closely located to the server – for instance, in the same cloud region, data
    center, or even on the same. *Figure 16**.1* illustrates how the response time
    may increase if the database is distant from the server:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 区域分布只有在减少请求背后的总往返时间时才会降低响应时间。请参考[*第13章*](B17399_13.xhtml#_idTextAnchor194)中的*图13.2*，*延迟加载器数据*，其中我们说明了Remix如何通过移除客户端-服务器往返来减少响应时间。我们可以在文档请求上执行`loader`函数并查询附近数据库，而不是从客户端向服务器发起fetch请求。注意，在*图13.2*中，从服务器到数据库的往返时间非常小。我们假设数据库靠近服务器
    – 例如，在同一个云区域、数据中心，甚至同一地点。*图16.1*说明了如果数据库远离服务器，响应时间可能会增加：
- en: '![Figure 16.1 – Edge response waterfall with distant database](img/Figure_16.01_B17399.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图16.1 – 带远程数据库的边缘响应瀑布图](img/Figure_16.01_B17399.jpg)'
- en: Figure 16.1 – Edge response waterfall with distant database
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – 带远程数据库的边缘响应瀑布图
- en: By moving the server close to the user, we may be able to reduce client-server
    round trips. However, each client-server round trip might trigger several server-database
    round trips. If these round trips increase due to the distance between the server
    and the database, we may decrease performance overall.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将服务器靠近用户，我们可能能够减少客户端-服务器往返次数。然而，每次客户端-服务器往返可能会触发几次服务器-数据库往返。如果这些往返由于服务器和数据库之间的距离而增加，我们可能会降低整体性能。
- en: '*Figure 16**.1* assumes we make two separate database queries to fulfill the
    document request. As we can see, we further assume that we can make both database
    requests in parallel. However, sometimes, we may need to make subsequent requests.
    Notice how such requests would further delay the response time.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16**.1* 假设我们进行两次独立的数据库查询以满足文档请求。正如我们所见，我们进一步假设我们可以并行执行这两个数据库请求。然而，有时我们可能需要执行后续请求。注意这些请求将如何进一步延迟响应时间。'
- en: The performance of today’s web applications heavily depends on the distance
    between the server and the database. In cloud data centers and regions, databases
    are usually close to the web servers. However, to accomplish proximity between
    the server and the database on the edge, we must distribute our database.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 今天网络应用程序的性能很大程度上取决于服务器和数据库之间的距离。在云数据中心和区域中，数据库通常靠近网络服务器。然而，为了在边缘环境中实现服务器和数据库的邻近性，我们必须分布我们的数据库。
- en: Geographically distributed database offerings exist and CDNs have also started
    to offer distributed key-value and SQL databases, but it is important to consider
    the costs and complexity of a globally distributed system architecture.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 地理上分布的数据库服务存在，CDN也开始提供分布式键值和SQL数据库，但考虑全球分布式系统架构的成本和复杂性是很重要的。
- en: You may notice a pattern here. Edge functions provide computational and geographical
    scalability but introduce additional complexity. You must weigh the discussed
    benefits and considerations carefully when evaluating the edge for a project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到这里有一个模式。边缘函数提供了计算和地理上的可扩展性，但引入了额外的复杂性。在评估项目中的边缘时，你必须仔细权衡所讨论的利益和考虑因素。
- en: 'Let’s wrap up by doing a short thought experiment. What pieces of BeeRich would
    require a rework to make BeeRich run on an edge environment? For edge-like environments
    such as Fly.io or Deno Deploy, not many. However, for true edge environments such
    as Cloudflare Workers and Pages, we would need to make signification changes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过进行一个简短的思想实验来结束。BeeRich需要哪些部分进行重新设计才能在边缘环境中运行？对于类似Fly.io或Deno Deploy这样的边缘环境，不多。然而，对于像Cloudflare
    Workers和Pages这样的真正边缘环境，我们需要进行重大的更改：
- en: SQLite databases run on the same machine and require filesystem access. SQLite
    is not supported by edge runtimes. We would need to use a different database.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite数据库在同一台机器上运行并需要文件系统访问。SQLite不被边缘运行时支持。我们需要使用不同的数据库。
- en: The expense and invoice attachment file upload feature would require a rework.
    We currently use the server’s filesystem. We would need to use a third-party file
    storage service or build a custom one.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 费用和发票附件文件上传功能需要重新设计。我们目前使用服务器的文件系统。我们需要使用第三方文件存储服务或构建一个自定义的存储服务。
- en: The real-time update feature would require a rework. We currently use a server-sent
    events endpoint to update clients about data changes. Server-sent events require
    long-running connections that are not supported by edge runtimes. We must deploy
    the server-sent events endpoint to a different long-running server.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时更新功能需要重新设计。我们目前使用服务器发送事件端点来更新客户端关于数据变化的信息。服务器发送事件需要长期运行的连接，而这些连接不被边缘运行时支持。我们必须将服务器发送事件端点部署到不同的长期运行服务器上。
- en: This example illustrates that long-running servers support simpler application
    designs, while serverless edge runtimes introduce limitations due to their scalable
    and performance-driven nature.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子说明了长期运行的服务器支持更简单的应用程序设计，而无服务器边缘运行时由于其可扩展性和性能驱动的特性而引入了限制。
- en: In this section, you learned about the benefits and limitations of the edge.
    We also discussed what is not possible in edge environments. Equipped with these
    considerations, you can now evaluate whether moving to the edge is worthwhile
    for a given project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了边缘的好处和局限性。我们还讨论了在边缘环境中不可能实现的事情。有了这些考虑，你现在可以评估将项目迁移到边缘是否值得。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the edge as a computing paradigm, a location,
    and a runtime. You now understand that edge computing contrasts cloud computing
    and aims to move the compute as close as possible to the users to reduce response
    times.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了边缘作为一种计算范式、一个位置和运行时。你现在明白边缘计算与云计算形成对比，旨在将计算尽可能靠近用户以减少响应时间。
- en: You further learned that CDNs can serve as the edge of the internet. Running
    Remix on the edge moves the web server much closer to the user compared to the
    regionally centralized data centers of the cloud.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你进一步了解到CDN可以作为互联网的边缘。在边缘运行Remix将Web服务器移动到比云的区域集中数据中心更接近用户的位置。
- en: Remix offers adapters for several edge deployment targets, and you practiced
    deploying to the edge by using Remix’s `create-remix` script. You now understand
    how easy it is to set up a Remix application on the edge.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Remix为多个边缘部署目标提供了适配器，你通过使用Remix的`create-remix`脚本来练习部署到边缘。你现在明白在边缘设置Remix应用程序是多么容易。
- en: We discussed both the benefits and limitations of the edge as a deployment target.
    You now understand that the edge follows a serverless programming model, which
    makes it highly scalable but also introduces complexity. Edge runtimes use lightweight
    container technologies to optimize for geographical distribution and performance.
    Geographical distribution introduces additional considerations, such as the distance
    to the databases.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了边缘作为部署目标的好处和局限性。你现在明白边缘遵循无服务器编程模型，这使得它具有高度的可扩展性，但也引入了复杂性。边缘运行时使用轻量级容器技术来优化地理分布和性能。地理分布引入了额外的考虑因素，例如到数据库的距离。
- en: Finally, you learned what cannot be done on the edge, such as accessing the
    filesystem, sharing application states in memory across requests, and handling
    long-running tasks and connections.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了在边缘无法完成的事情，例如访问文件系统、在请求之间在内存中共享应用程序状态，以及处理长时间运行的任务和连接。
- en: In the next and last chapter, we will review what we have learned. We will further
    touch upon some final topics, such as migration strategies and Remix’s versioning.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将回顾我们已经学到的内容。我们将进一步涉及一些最终话题，例如迁移策略和Remix的版本控制。
- en: Further reading
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Review the Remix documentation for a list of official and community adapters:
    [https://remix.run/docs/en/2/other-api/adapter](https://remix.run/docs/en/2/other-api/adapter).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅Remix文档以获取官方和社区适配器的列表：[https://remix.run/docs/en/2/other-api/adapter](https://remix.run/docs/en/2/other-api/adapter)。
- en: 'You can find more information about Fastly’s Remix adapter here: [https://www.fastly.com/blog/host-your-remix-app-on-fastly-compute-edge](https://www.fastly.com/blog/host-your-remix-app-on-fastly-compute-edge).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到有关Fastly的Remix适配器的更多信息：[https://www.fastly.com/blog/host-your-remix-app-on-fastly-compute-edge](https://www.fastly.com/blog/host-your-remix-app-on-fastly-compute-edge)。
- en: 'Refer to this article to learn how to deploy your Remix application to Netlify’s
    edge functions: [https://www.netlify.com/blog/how-to-use-remix-framework-with-edge-functions/](https://www.netlify.com/blog/how-to-use-remix-framework-with-edge-functions/).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 参考这篇文章了解如何将你的Remix应用程序部署到Netlify的边缘函数：[https://www.netlify.com/blog/how-to-use-remix-framework-with-edge-functions/](https://www.netlify.com/blog/how-to-use-remix-framework-with-edge-functions/)。
- en: 'If you want to learn more about edge environments, have a look at Cloudflare’s
    learning resources: [https://developers.cloudflare.com/workers/learning/how-workers-works/](https://developers.cloudflare.com/workers/learning/how-workers-works/).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于边缘环境的信息，请查看Cloudflare的学习资源：[https://developers.cloudflare.com/workers/learning/how-workers-works/](https://developers.cloudflare.com/workers/learning/how-workers-works/)。
