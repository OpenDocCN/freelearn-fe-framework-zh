["```js\nimport { useLoaderData } from 'react-router-dom';\nfunction Posts() {\n  const loadedPosts = useLoaderData();\n  return (\n    <main>\n      <h1>Your Posts</h1>\n      <ul className=\"posts\">\n        {loadedPosts.map((post) => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </main>\n  );\n}\nexport default Posts;\nexport async function loader() {\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  if (!response.ok) {\n    throw new Error('Could not fetch posts');\n  }\n  return response;\n} \n```", "```js\n{ path: '/posts', element: <Posts />, **loader****:** **() =>** **{...}** } \n```", "```js\nimport Posts, **{ loader** **as** **postsLoader }** from './components/Posts.jsx';\n// … other code …\nconst router = createBrowserRouter([\n  { path: '/posts', element: <Posts />, **loader****: postsLoader** }\n]); \n```", "```js\nimport { useLoaderData } from 'react-router-dom';\nfunction PostsList() {\n  const loadedPosts = useLoaderData();\n  return (\n    <main>\n      <h1>Your Posts</h1>\n      <ul className=\"posts\">\n        {loadedPosts.map((post) => (\n          <li key={post.id}>{post.title}</li>\n        ))}\n      </ul>\n    </main>\n  );\n}\nexport default PostsList; \n```", "```js\nimport PostsList from '../components/PostsList.jsx';\nfunction Posts() {\n  return (\n    <main>\n      <h1>Your Posts</h1>\n      <PostsList />\n    </main>\n  );\n}\nexport default Posts;\nexport async function loader() {\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  if (!response.ok) {\n    throw new Error('Could not fetch posts');\n  }\n  return response;\n} \n```", "```js\n{ \n  path: \"/posts/:id\",\n  element: <PostDetails />, \n  loader: postDetailsLoader \n} \n```", "```js\nimport { useLoaderData } from 'react-router-dom';\nfunction PostDetails() {\n  const post = useLoaderData();\n  return (\n    <div id=\"post-details\">\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n    </div>\n  );\n}\nexport default PostDetails;\nexport async function loader({ params, request }) {\n  console.log(request); \n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts/' + params.id\n  );\n  if (!response.ok) {\n    throw new Error('Could not fetch post for id ' + params.id);\n  }\n  return response;\n} \n```", "```js\nexport async function loader({ request }) {\n  // e.g. for localhost:5173/posts?sort=desc\n  const sortDirection = new URL(request.url).searchParams.get('sort');\n  // Fetch sorted posts, based on local 'sort' query param value\n  const response = await fetch(\n    'https://example.com/posts?sorting=' + sortDirection\n  );\n  return response;\n} \n```", "```js\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />, // main layout, adds navigation bar\n    children: [\n      { index: true, element: <Welcome /> },\n      {\n        path: '/posts',\n        element: <PostsLayout />, // posts layout, adds posts sidebar\n        loader: postsLoader,\n        children: [\n          { index: true, element: <Posts /> },\n          { \n            path: ':id', \n            element: <PostDetails />, \n            loader: postDetailsLoader \n          },\n        ],\n      },\n    ],\n  },\n]); \n```", "```js\nimport { Outlet, useLoaderData } from 'react-router-dom';\nimport PostsList from '../components/PostsList.jsx';\nfunction PostsLayout() {\n  const loadedPosts = useLoaderData();\n  return (\n    <div id=\"posts-layout\">\n      <nav>\n        <PostsList posts={loadedPosts} />\n      </nav>\n      <main>\n        <Outlet />\n      </main>\n    </div>\n  );\n}\nexport default PostsLayout;\nexport async function loader() {\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  if (!response.ok) {\n    throw new Error('Could not fetch posts');\n  }\n  return response;\n} \n```", "```js\nexport async function loader({ params }) {\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts/' + params.id\n  );\n  if (!response.ok) {\n    throw new Error('Could not fetch post for id ' + params.id);\n  }\n  return response;\n} \n```", "```js\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />, // main layout, adds navigation bar\n    children: [\n      { index: true, element: <Welcome /> },\n      {\n        path: '/posts',\n        element: <PostsLayout />, // posts layout, adds posts sidebar\n        loader: postsLoader,\n        children: [\n          { index: true, element: <Posts /> },\n          { \n            path: ':id', \n            element: <PostDetails />, \n            **loader****: postDetailsLoader** // can be removed\n          },\n        ],\n      },\n    ],\n  },\n]); \n```", "```js\nconst posts = useRouteLoaderData('posts'); \n```", "```js\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />, // main layout, adds navigation bar\n    children: [\n      { index: true, element: <Welcome /> },\n      {\n        path: '/posts',\n        **id****:** **'posts'****,** **// the id value is up to you**\n        element: <PostsLayout />, // posts layout, adds posts sidebar\n        loader: postsLoader,\n        children: [\n          { index: true, element: <Posts /> },\n          { \n            path: ':id', \n            element: <PostDetails />, // details loader was removed\n          },\n        ],\n      },\n    ],\n  },\n]); \n```", "```js\nimport { **useParams****useRouteLoaderData**,  } from 'react-router-dom';\nfunction PostDetails() {\n  **const** **params =** **useParams****();**\n  **const** **posts =** **useRouteLoaderData****(****'posts'****);**\n  **const** **post = posts.****find****(****(****post****) =>** **post.****id****.****toString****() === params.****id****);**\n  return (\n    <div id=\"post-details\">\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n    </div>\n  );\n}\nexport default PostDetails; \n```", "```js\n// ... other imports\n**import****Error****from****'./components/Error.jsx'****;**\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />,\n    **errorElement****:** **<****Error** **/>****,**\n    children: [\n      { index: true, element: <Welcome /> },\n      {\n        path: '/posts',\n        id: 'posts',\n        element: <PostsLayout />,\n        loader: postsLoader,\n        children: [\n          { index: true, element: <Posts /> },\n          { path: ':id', element: <PostDetails /> },\n        ],\n      },\n    ],\n  },\n]); \n```", "```js\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />,\n    **errorElement****:** **<****Error** **/>****,** **// for all errors not handled elsewhere**\n    children: [\n      { index: true, element: <Welcome /> },\n      {\n        path: '/posts',\n        id: 'posts',\n        element: <PostsLayout />,\n        // used if /posts or /posts/:id throws an error\n        **errorElement****:** **<****PostsError** **/>****,** **// handles /posts related errors**\n        loader: postsLoader,\n        children: [\n          { index: true, element: <Posts /> },\n          { path: ':id', element: <PostDetails /> },\n        ],\n      },\n    ],\n  },\n]); \n```", "```js\nimport { useRouteError } from 'react-router-dom';\nfunction Error() {\n  const error = useRouteError();\n  return (\n    <>\n      <h1>Oh no!</h1>\n      <p>An error occurred</p>\n      <p>{error.message}</p>\n    </>\n  );\n}\nexport default Error; \n```", "```js\nfunction NewPost() {\n  return (\n    <form id=\"post-form\">\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      <p>\n        <label htmlFor=\"text\">Text</label>\n        <textarea id=\"text\" name=\"text\" rows={3} />\n      </p>\n      <button>Save Post</button>\n    </form>\n  );\n}\nexport default NewPost; \n```", "```js\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />,\n    errorElement: <Error />,\n    children: [\n      { index: true, element: <Welcome /> },\n      {\n        path: '/posts',\n        id: 'posts',\n        element: <PostsLayout />,\n        loader: postsLoader,\n        children: [\n          { index: true, element: <Posts /> },\n          { path: ':id', element: <PostDetails /> },\n          **{** **path****:** **'new'****,** **element****: <****NewPost** **/> },**\n        ],\n      },\n    ],\n  },\n]); \n```", "```js\nfunction NewPost() {\n  const navigate = useNavigate();\n  async function submitAction(formData) {\n    const enteredTitle = formData.get('title');\n    const enteredText = formData.get('text');\n    const postData = {\n      title: enteredTitle,\n      text: enteredText\n    };\n    await fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify(postData),\n      headers: {'Content-Type': 'application/json'}\n    });\n    navigate('/posts');\n  } \n  return (\n    <form action={submitAction}>\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      <p>\n        <label htmlFor=\"text\">Text</label>\n        <textarea id=\"text\" rows={3} name=\"text\" />\n      </p>\n      <button>Save Post</button>\n    </form>\n  );\n} \n```", "```js\n**import** **{** **Form****, redirect }** **from****'react-router-dom'****;**\nfunction NewPost() {\n  return (\n    <**Form****method****=****\"post\"** id=\"post-form\">\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\"/>\n      </p>\n      <p>\n        <label htmlFor=\"text\">Text</label>\n        <textarea id=\"text\" rows={3} name=\"text\" />\n      </p>\n      <button>Save Post</button>\n    </Form>\n  );\n}\nexport default NewPost;\n**export****async****function****action****(****{ request }****) {**\n  **const** **formData =** **await** **request.****formData****();**\n  **const** **enteredTitle = formData.****get****(****'****title'****);**\n  **const** **enteredText = formData.****get****(****'text'****);**\n  **const** **postData = {**\n    **title****: enteredTitle,**\n    **text****: enteredText**\n  **};**\n  **await****fetch****(****'https://jsonplaceholder.typicode.com/posts'****, {**\n    **method****:** **'POST'****,**\n    **body****:** **JSON****.****stringify****(postData),**\n    **headers****: {** **'Content-Type'****:** **'application/json'** **},**\n  **});**\n  **return****redirect****(****'****/posts'****);**\n**}** \n```", "```js\n**import****NewPost****, { action** **as** **newPostAction }** **from****'./components/NewPost.jsx'****;**\n**// ...**\n**{** **path****:** **'new'****,** **element****:** **<****NewPost** **/>****,** **action****: newPostAction },** \n```", "```js\n**export****async****function****action****(****{ request }****) {**\n  **const** **formData =** **await** **request.****formData****();**\n  **const** **postData =** **Object****.****fromEntries****(formData);**\n  **// ...**\n**}** \n```", "```js\nexport async function action({ request }) {\n  const formData = await request.formData();\n  const postData = Object.fromEntries(formData);\n  await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify(postData),\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return redirect('/posts');\n} \n```", "```js\n**export****async****function****action****(****{ request }****) {**\n  **// action logic …**\n  **return****new****Response****(****\"\"****, {**\n    **status****:** **302****,**\n    **headers****: {**\n      **Location****:** **'/posts'**\n    **}**\n  **});**\n**}** \n```", "```js\n**export****async****function****action****(****{ request }****) {**\n  **// action logic …**\n  **return****redirect****(****'/posts'****)**\n**}** \n```", "```js\nexport async function action({ request }) {\n  const formData = await request.formData();\n  const postData = Object.fromEntries(formData);\n  **let** **validationErrors = [];**\n  **if** **(postData.****title****.****trim****().****length** **===** **0****) {**\n    **validationErrors.****push****(****'Invalid post title provided.'****)**\n  **}**\n  **if** **(postData.****text****.****trim****().****length** **===** **0****) {**\n    **validationErrors.****push****(****'Invalid post text provided.'****)**\n  **}**\n  **if** **(validationErrors.****length** **>** **0****) {**\n    **return** **validationErrors;**\n  **}**\n  await fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    body: JSON.stringify(postData),\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return redirect('/posts');\n} \n```", "```js\nimport { Form, redirect, **useActionData** } from 'react-router-dom';\nfunction NewPost() {\n  **const** **validationErrors =** **useActionData****();**\n  return (\n    <Form method=\"post\" id=\"post-form\">\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      <p>\n        <label htmlFor=\"text\">Text</label>\n        <textarea id=\"text\" name=\"text\" rows={3} />\n      </p>\n      **<****ul****>**\n        **{validationErrors &&**\n          **validationErrors.map((err) =>** **<****li****key****=****{err}****>****{err}****</****li****>****)}**\n      **</****ul****>**\n      <button>Save Post</button>\n    </Form>\n  );\n} \n```", "```js\n{ path: '/posts/new', element: <NewPost />, action: newPostAction } \n```", "```js\n// form rendered in a component that belongs to /posts\n<Form method=\"post\" action=\"/save-data\">\n  ...\n</Form> \n```", "```js\nimport { \n  Form, \n  redirect, \n  useActionData, \n  **useNavigation** \n} from 'react-router-dom';\nfunction NewPost() {\n  const validationErrors = useActionData();\n  **const** **navigation =** **useNavigation****();**\n  **const** **isSubmitting = navigation.****state** **!==** **'idle'****;**\n  return (\n    <Form method=\"post\" id=\"post-form\">\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" name=\"title\" />\n      </p>\n      <p>\n        <label htmlFor=\"text\">Text</label>\n        <textarea id=\"text\" name=\"text\" rows={3} />\n      </p>\n      <ul>\n        {validationErrors &&\n          validationErrors.map((err) => <li key={err}>{err}</li>)}\n      </ul>\n      <button **disabled****=****{isSubmitting}**>\n        **{isSubmitting ? 'Saving...' : 'Save Post'}**\n      </button>\n    </Form>\n  );\n} \n```", "```js\nimport {\n  redirect,\n  useParams,\n  useRouteLoaderData,\n  **useSubmit,**\n} from 'react-router-dom';\nfunction PostDetails() {\n  const params = useParams();\n  const posts = useRouteLoaderData('posts');\n  const post = posts.find((post) => post.id.toString() === params.id);\n  **const** **submit =** **useSubmit****();**\n  **function****handleSubmit****(****event****) {**\n    **event.****preventDefault****();**\n    **const** **proceed =** **window****.****confirm****(****'Are you sure?'****);**\n    **if** **(proceed) {**\n      **submit****(**\n        **{** **message****:** **'Your submitted data, if needed'** **},**\n        **{**\n          **method****:** **'post'****,**\n        **}**\n      **);**\n    **}**\n  **}**\n  return (\n    <div id=\"post-details\">\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n      **<****form****onSubmit****=****{handleSubmit}****>**\n        **<****button****>****Delete****</****button****>**\n      **</****form****>**\n    </div>\n  );\n}\nexport default PostDetails;\n// action must be added to route definition!\n**export****async****function****action****(****{ request }****) {**\n  **const** **formData =** **await** **request.****formData****();**\n  **console****.****log****(formData.****get****(****'message'****));**\n  **console****.****log****(request.****method****);**\n  **return****redirect****(****'/posts'****);**\n**}** \n```", "```js\nimport {\n  // ... other imports\n  **useFetcher,**\n} from 'react-router-dom';\nimport { FaHeart } from 'react-icons/fa';\nfunction PostDetails() {\n  // ... other code & logic\n  **const** **fetcher =** **useFetcher****();**\n  **function****handleLikePost****() {**\n    **fetcher.****submit****(****null****, {**\n      **method****:** **'post'****,**\n      **action****:** **`/posts/****${post.id}****/like`****,** \n      **// targeting an action on another route**\n    **});**\n  **}**\n  return (\n    <div id=\"post-details\">\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n      <div className=\"actions\">\n        **<****button****className****=****\"icon-btn\"****onClick****=****{handleLikePost}****>**\n          <FaHeart />\n          <span>Like this post</span>\n        </button>\n        <form onSubmit={handleSubmit}>\n          <button>Delete</button>\n        </form>\n      </div>\n    </div>\n  );\n} \n```", "```js\n// there is no component function in this file!\nexport function action({ params }) {\n  console.log('Triggered like action.');\n  console.log(`Liking post with id ${params.id}.`);\n  // Do anything else\n  // May return data or response, including redirect() if needed\n  return null; // something must be returned, even if it's just null\n} \n```", "```js\nimport { action as likeAction } from './pages/like.js';\n// ...\n{ path: ':id/like', action: likeAction }, \n```", "```js\n// ... other imports\nexport async function loader() {\n  return **{**\n    **posts****:** **getPosts****()**\n  **};**\n} \n```", "```js\nasync function getPosts() {\n  const response = await fetch(\n    'https://jsonplaceholder.typicode.com/posts'\n  );\n  await wait(3); // utility function, simulating a slow response\n  if (!response.ok) {\n    throw new Error('Could not fetch posts');\n  }\n  const data = await response.json();\n  return data;\n} \n```", "```js\n**import** **{** **Suspense** **}** **from****'react'****;**\n**import** **{** **Await** **}** **from****'react-router-dom'****;**\n// ... other imports\nfunction PostsLayout() {\n  const data = useLoaderData();\n  return (\n    <div id=\"posts-layout\">\n      <nav>\n        **<****Suspense****fallback****=****{****<****p****>****Loading posts...****</****p****>****}>**\n          **<****Await****resolve****=****{data.posts}****>**\n            **{(loadedPosts) =>** **<****PostsList****posts****=****{loadedPosts}** **/>****}**\n          **</****Await****>**\n        **</****Suspense****>**\n      </nav>\n      <main>\n        <Outlet />\n      </main>\n    </div>\n  );\n} \n```", "```js\nexport async function loader() {\n  return {\n      posts: getPosts(), // slow operation => deferred\n      userData: await getUserData() // fast operation => NOT deferred\n    };\n} \n```"]