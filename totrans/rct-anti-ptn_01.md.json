["```js\nfunction Quotes(quotes: string[]) {\n  return (\n    <ul>\n      {quotes.map((quote, index) => <li key={index}>{quote}</li>)}\n    </ul>\n  );\n}\n```", "```js\nimport React, { useState, useEffect } from 'react';\nfunction Quotes() {\n  const [quotes, setQuotes] = useState<string[]>([]);\n  useEffect(() => {\n    fetch('https://quote-service.com/quotes')\n      .then(response => response.json())\n      .then(data => setQuotes(data));\n  }, []);\n  return (\n    <ul>\n      {quotes.map((quote, index) => <li key={index}>{quote}</li>)}\n    </ul>\n  );\n}\nexport default Quotes;\n```", "```js\nfunction Quotes() {\n  const [quotes, setQuotes] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n  useEffect(() => {\n    setIsLoading(true);\n    fetch('https://quote-service.com/quotes')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch quotes');\n        }\n        return response.json();\n      })\n      .then(data => {\n        setQuotes(data);\n      })\n      .catch(err => {\n        setError(err.message);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n  return (\n    <div>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      <ul>\n        {quotes.map((quote, index) => <li key={index}>{quote}</li>)}\n      </ul>\n    </div>\n  );\n}\n```", "```js\nconst MenuItem = ({\n  item,\n  onItemClick,\n}: {\n  item: MenuItemType;\n  onItemClick: (item: MenuItemType) => void;\n}) => {\n  const information = item.something.doesnt.exist;\n  return (\n    <li key={item.name}>\n      <h3>{item.name}</h3>\n      <p>{item.description}</p>\n      <button onClick={() => onItemClick(item)}>Add to Cart</button>\n    </li>\n  );\n};\n```", "```js\nimport React, { ChangeEvent, useState } from \"react\";\nconst Form = () => {\n  const [value, setValue] = useState<string>(\"\");\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value;\n    const sanitizedValue = inputValue.replace(/[^\\w\\s]/gi, \"\");\n    setValue(sanitizedValue);\n  };\n  return (\n    <div>\n      <form>\n        <label>\n          Input without special characters:\n          <input type=\"text\" value={value} onChange={handleChange} />\n        </label>\n      </form>\n    </div>\n  );\n};\nexport default Form;\n```", "```js\nfunction SearchableList({ items, onItemClick }) {\n  return (\n    <div className=\"searchable-list\">\n      {/* Potentially some search functionality here */}\n      <List items={items} onItemClick={onItemClick} />\n    </div>\n  );\n}\nfunction List({ items, onItemClick }) {\n  return (\n    <ul className=\"list\">\n      {items.map(item => (\n        <ListItem key={item.id} data={item} onItemClick={onItemClick}\n         />\n      ))}\n    </ul>\n  );\n}\nfunction ListItem({ data, onItemClick }) {\n  return (\n    <li className=\"list-item\" onClick={() => onItemClick(data.id)}>\n      {data.name}\n    </li>\n  );\n}\n```", "```js\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    fetch(`/api/users/${userId}`)\n      .then(response => response.json())\n      .then(data => {\n        // Transforming data right inside the component\n        const transformedUser = {\n          name: `${data.firstName} ${data.lastName}`,\n          age: data.age,\n          address: `${data.addressLine1}, ${data.city}, ${data.\n           country}`\n        };\n        setUser(transformedUser);\n      });\n  }, [userId]);\n  return (\n    <div>\n      {user && (\n        <>\n          <p>Name: {user.name}</p>\n          <p>Age: {user.age}</p>\n          <p>Address: {user.address}</p>\n        </>\n      )}\n    </div>\n  );\n}\n```", "```js\nfunction PriceListView({ items }) {\n  // Business logic within the view\n  const filterExpensiveItems = (items) => {\n    return items.filter(item => item.price > 100);\n  }\n  const expensiveItems = filterExpensiveItems(items);\n  return (\n    <div>\n      {expensiveItems.map(item => (\n        <div key={item.id}>\n          {item.name}: ${item.price}\n        </div>\n      ))}\n    </div>\n  );\n}\n```", "```js\nfunction ShoppingCart() {\n  const [items, setItems] = useState([]);\n  const addItem = (item) => {\n    setItems([...items, item]);\n  };\n  const removeItem = (itemId) => {\n    setItems(items.filter(item => item.id !== itemId));\n  };\n  const calculateTotal = () => {\n    return items.reduce((total, item) => total + item.price, 0);\n  };\n  return (\n    <div>\n      {/* Render items and controls for adding/removing */}\n      <p>Total: ${calculateTotal()}</p>\n    </div>\n  );\n}\n```", "```js\nfunction AdminList(props) {\n  const filteredUsers = props.users.filter(user => user.isAdmin);\n  return <List items={filteredUsers} />;\n}\nfunction ActiveList(props) {\n  const filteredUsers = props.users.filter(user => user.isActive);\n  return <List items={filteredUsers} />;\n}\n```", "```js\nconst OrderContainer = ({\n  testID,\n  orderData,\n  basketError,\n  addCoupon,\n  voucherSelected,\n  validationErrors,\n  clearErrors,\n  removeLine,\n  editLine,\n  hideOrderButton,\n  hideEditButton,\n  loading,\n}: OrderContainerProps) => {\n  //..\n}\n```"]