- en: Webpack with Angular
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Angular一起使用webpack
- en: Webpack is a module bundler. It is able to bundle together different assets
    such as JavaScript, CSS, and HTML. The webpack is quite popular and is becoming
    the preferred way of setting up your app. In the world of frontend though, things
    come and go at a high rate. This makes it important to understand what problem
    needs solving, rather than the technical details of a specific bundler tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是一个模块捆绑器。它能够捆绑不同的资产，如JavaScript、CSS和HTML。webpack非常受欢迎，正在成为设置应用程序的首选方式。然而，在前端世界中，事物变化很快。这使得重要的是理解需要解决的问题，而不是特定捆绑工具的技术细节。
- en: 'In this appendix, you will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，您将：
- en: Discover the important concepts in webpack
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解webpack中的重要概念
- en: Learn how to use webpack in a simple web project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在简单的Web项目中使用webpack
- en: Utilize webpack to set up an Angular project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用webpack设置Angular项目
- en: Core concepts
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心概念
- en: 'Essentially, webpack tries to create a graph of dependencies by crawling all
    the import statements in your files. Imagine you have the following code snippet:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，webpack尝试通过爬取文件中的所有导入语句来创建依赖关系图。想象一下，您有以下代码片段：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, it would deduce that `main.js` is dependent on `lib.js`, which
    is dependent on `otherlib.js`, thereby creating a chain of dependencies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它会推断`main.js`依赖于`lib.js`，而`lib.js`又依赖于`otherlib.js`，从而创建了一系列依赖关系。
- en: The end result from crawling all the import statements and figuring out all
    dependencies is to produce a bundle that you can make part of your `index.html` and
    present to the browser for rendering.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 爬取所有导入语句并找出所有依赖关系的最终结果是生成一个捆绑包，您可以将其作为`index.html`的一部分并呈现给浏览器进行渲染。
- en: Loaders
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载程序
- en: 'The webpack needs a loader to understand a certain file extension and operate
    on it. By extension we mean `.ts`, `.js`, `.html`, and so on. Why do we care?
    When it comes to setup, we need to ensure that the proper loaders have been set
    up so that a certain file extension that we care about will be processed. In webpack,
    when you want to handle extensions you set up rules. A rule can look like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: webpack需要一个加载程序来理解特定的文件扩展名并对其进行操作。我们所说的扩展名是`.ts`、`.js`、`.html`等。我们为什么关心呢？在设置时，我们需要确保已设置了适当的加载程序，以便处理我们关心的特定文件扩展名。在webpack中，当您想要处理扩展名时，您设置规则。规则可以如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `test` property is a regex where you specify what file extensions to look
    for.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`test`属性是一个正则表达式，您可以在其中指定要查找的文件扩展名。'
- en: The `loader` property is where you specify the name of your loader. The webpack
    comes built-in with a lot of loaders, but it's also possible to download it, should
    you need it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`loader`属性是您指定加载程序名称的地方。webpack内置了许多加载程序，但如果需要，也可以下载它。'
- en: Plugins
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: 'A plugin can fire at different steps in the build process. This means you can
    carry out extra work at a certain step. To use a plugin, you specify it in the `plugins` property,
    like so:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以在构建过程的不同步骤触发。这意味着您可以在某个步骤执行额外的工作。要使用插件，您需要在`plugins`属性中指定它，如下所示：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before we venture into an Angular webpack setup, let us first establish what
    we've learned so far. The webpack is able to deal with JavaScript, CSS, TypeScript,
    and more, and create bundles that we can include in our starter HTML file, usually
    called `index.html`. Furthermore, if configured through a `config` file, we can
    set up a number of rules. Each rule consists of a regular expression that will
    capture all files of a certain file ending and will point to a loader that will
    process the captured files. There are also things called plugins, which are able
    to give us further functionality at specific life cycle steps. It would, however,
    be nice if we put that knowledge into practice, so let's do that in the next section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入Angular webpack设置之前，让我们首先确定我们到目前为止学到了什么。webpack能够处理JavaScript、CSS、TypeScript等，并创建我们可以包含在起始HTML文件中的捆绑文件，通常称为`index.html`。此外，如果通过`config`文件进行配置，我们可以设置一些规则。每个规则由一个正则表达式组成，该正则表达式将捕获特定文件结束的所有文件，并将指向一个处理捕获文件的加载器。还有一些称为插件的东西，它们能够在特定的生命周期步骤给我们提供进一步的功能。然而，如果我们将这些知识付诸实践，那将是很好的，所以让我们在下一节中这样做。
- en: Webpack - first project
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack - 第一个项目
- en: To prepare us properly for setting up an Angular project, let's first go through
    a simple project that showcases all the common scenarios that we will be using
    to set up Angular.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确地为设置Angular项目做准备，让我们首先通过一个简单的项目来展示我们将用来设置Angular的所有常见场景。
- en: 'First off, we need to install webpack. This is accomplished by running the
    following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装webpack。通过运行以下命令来完成：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After successful installation, it''s time to try it out. First off, let''s
    create a few files with the following content:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，是时候试一试了。首先，让我们创建几个文件，内容如下：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will crawl all dependencies starting with `app.js` and create a `bundle.js` file
    from them. To use said `bundle.js`, add a script tag to `index.html` so it now
    looks as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`app.js`开始爬取所有依赖项，并从中创建一个`bundle.js`文件。要使用所述的`bundle.js`，请在`index.html`中添加一个脚本标签，使其看起来如下：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To see your app in a browser, you need a web server that can host your files.
    There are many small, lightweight web servers; Python comes with one, for example.
    I am going to recommend one called `http-server`. It can easily be installed by
    typing the following in the Terminal:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在浏览器中查看您的应用程序，您需要一个可以托管您的文件的Web服务器。有许多小型、轻量级的Web服务器；例如，Python自带一个。我要推荐一个叫做`http-server`的服务器。可以通过在终端中输入以下内容轻松安装：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After it is installed, place yourself in the same directory as the `index.html` file
    and invoke the web server by typing the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，将自己放在与`index.html`文件相同的目录中，并输入以下内容来调用Web服务器：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Navigate to `http://localhost:5000` in your browser and open up `devtools`;
    the following should be displayed:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中导航到`http://localhost:5000`，并打开`devtools`；应该显示如下内容：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Congratulations, you have successfully created your first webpack bundle and
    you have a working app.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您已成功创建了您的第一个webpack捆绑文件，并且您有一个可工作的应用程序。
- en: Improving our project - using a configuration file
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进我们的项目-使用配置文件
- en: 'It was nice and all to be able to create a bundle that easily, but it wasn''t
    really realistic. Most webpack projects will be using a `config` file instead
    of invoking webpack on the command line. So let''s do that: let''s create a `config`
    file called`Webpack.config.js` and add the following code to it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 能够轻松创建一个捆绑文件是很好的，但这并不真实。大多数webpack项目将使用`config`文件而不是在命令行上调用webpack。所以让我们这样做：让我们创建一个名为`Webpack.config.js`的`config`文件，并将以下代码添加到其中：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This essentially recreates what we wrote on the command line, that is, start
    with `app.js` and ensure that the resulting bundle is called `bundle.js`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上重新创建了我们在命令行上写的内容，即从`app.js`开始，并确保生成的捆绑文件名为`bundle.js`。
- en: Now type `webpack` on the command line.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在命令行中键入`webpack`。
- en: Fire up your app again and ensure that everything still works. Success! We have
    moved from the command line to the config file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 再次启动您的应用程序，并确保一切仍然正常。成功！我们已经从命令行转移到了配置文件。
- en: 'However, we don''t want to have to type `webpack` in the Terminal all the time.
    What we want is for the bundle to be rebuilt when we change something, so let''s
    add that functionality:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们不希望一直在终端中输入`webpack`。我们希望在更改时重新构建捆绑包，因此让我们添加该功能：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note the extra property, `watch`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意额外的属性`watch`。
- en: Entering `webpack` in the Terminal at this point will now lead to the webpack
    process not actually quitting, like it did before, but still running and waiting
    for us to make a change.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入`webpack`，现在webpack进程不会像以前那样退出，而是继续运行并等待我们进行更改。
- en: 'Let''s, as an example, change what the `app.js` does to the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将`app.js`的操作更改为以下内容：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Save the file and note how the bundle is being rebuilt in the Terminal. That''s
    great, but we can do even better. We can add a web server that automatically launches
    and relaunches our app upon changes. I am talking about something called **hot
    reloading**. Essentially, a change is made to the code, the bundle is recreated,
    and the browser reflects said change. We need to do two things for this to happen:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并注意捆绑包在终端中的重新构建。这很棒，但我们可以做得更好。我们可以添加一个Web服务器，它会在更改时自动启动和重新启动我们的应用程序。我在谈论一种叫做**热重载**的东西。基本上，对代码进行更改，重新创建捆绑包，浏览器反映更改。为此，我们需要做两件事：
- en: Install an HTTP server utility that works well with webpack
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个与webpack兼容的HTTP服务器实用程序
- en: Enable hot reloading in the `config` file
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`config`文件中启用热重载
- en: 'To install the webpack HTTP server utility, we type the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装webpack HTTP服务器实用程序，我们输入以下内容：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s now update the `config` file to the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将`config`文件更新为以下内容：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Two things have been added. Here is the first:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加两个功能。这是第一个：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is the second:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二个：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We have added a hot reload plugin. Fire up the app using the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加了一个热重载插件。使用以下命令启动应用程序：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This now leads to the web server listening for changes; it will rebuild the
    bundle if a change happens, and will display said change in the web browser.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Web服务器会监听更改；如果发生更改，它将重新构建捆绑包，并在Web浏览器中显示更改。
- en: Adding more capabilities to our project
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的项目添加更多功能
- en: There are more interesting things we can do in a modern web app project. One
    such thing is to be able to use all the latest ES2015 features, as well as being
    able to split our bundle into more dedicated bundles, such as one for the application
    and one for third-party libraries. webpack supports both these things with ease.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代Web应用程序项目中，我们可以做更多有趣的事情。其中之一是能够使用所有最新的ES2015功能，以及能够将我们的捆绑包拆分成更多专用的捆绑包，比如一个用于应用程序，一个用于第三方库。webpack可以轻松支持这两个功能。
- en: Creating several bundles
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多个捆绑包
- en: There are multiple reasons why you would want several bundles for your application.
    It might be that you have several pages and you don't want each page to load a
    heavy bundle, but only the JavaScript that it needs. You might also want to separate
    third-party libraries from the app itself. Let's try to look at how we could create
    several bundles.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个原因可以解释为什么您希望为应用程序创建多个捆绑包。可能是您有多个页面，您不希望每个页面加载一个沉重的捆绑包，而只需要它所需的JavaScript。您可能还希望将第三方库与应用程序本身分开。让我们尝试看看如何创建多个捆绑包。
- en: Our ideal scenario is that we want three different files, `app.js`, `init.js`,
    and `vendor.js`*:*
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的理想情况是，我们希望有三个不同的文件，`app.js`，`init.js`和`vendor.js`*:*
- en: '`app.js`: This is where our application lives'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`：这是我们的应用程序所在的位置'
- en: '`init.js`: This should contain what the bundles have in common, that is, our
    webpack runtime'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init.js`：这应该包含捆绑包共有的内容，也就是我们的webpack运行时'
- en: '`vendor.js`: This is where the third-party libraries we are dependent on live,
    such as `query` and `lodash`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor.js`：这是我们依赖的第三方库所在的地方，比如`query`和`lodash`'
- en: 'To accomplish this, we need to change the configuration file to say the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们需要更改配置文件，以便如下所示：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s break that down:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解一下：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We used to have one entry here pointing to `app.js`. Now we want to have two
    entries, but for different things. Vendor points to an array of libraries. This
    means that when webpack sees `a:require('angular')`, it knows to place the `node_modules/angular` library
    in the `vendor.js`, that it will create.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们过去在这里有一个指向`app.js`的入口。现在我们想要有两个入口，但是用于不同的事情。Vendor指向一个库数组。这意味着当webpack看到`a:require('angular')`时，它知道要将`node_modules/angular`库放在`vendor.js`中，它将创建。
- en: 'The second piece of interest is:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个感兴趣的部分是：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here we are saying to take everything we have in common (the webpack runtime
    in this case) and place it in `init.js`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说要将我们共有的一切（在这种情况下是webpack运行时）放在`init.js`中。
- en: Setting up Angular with webpack
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用webpack设置Angular
- en: 'Armed with knowledge of webpack''s core concepts and how to add extra capabilities, we
    should now feel ready to take on bootstrapping an Angular project. First off,
    create the following files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了webpack的核心概念以及如何添加额外功能的知识后，我们现在应该准备好启动Angular项目了。首先，创建以下文件：
- en: '`webpack`: When setting up webpack, it''s usually a good idea to set up your
    config to consist of the following three files:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack`：在设置webpack时，通常最好将配置设置为以下三个文件：'
- en: '`webpack.common.js`: This is where most of the configuration will happen'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack.common.js`：这是大部分配置将发生的地方'
- en: '`webpack.dev.js`: This is the `dev` environment-specific configuration'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack.dev.js`：这是`dev`环境特定的配置'
- en: '`webpack.prod.js`: This is the `prod` environment-specific configuration'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack.prod.js`：这是`prod`环境特定的配置'
- en: '`package.json`: This file will list what libraries we are dependent on for
    Angular to be properly bootstrapped. This is listed in `devDependencies` and `depedencies`.
    We will also list some commands in the script that allow us to fire up the application,
    so it can be run on a web server. We will furthermore create commands for testing
    and a command for creating a production bundle.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：此文件将列出我们依赖的库，以便正确引导Angular。这些列在`devDependencies`和`dependencies`中。我们还将在`script`中列出一些命令，以便启动应用程序，以便在web服务器上运行。此外，我们还将创建用于测试的命令和用于创建生产捆绑包的命令。'
- en: '`tsconfig.json`: This file is meant for the TypeScript compiler. It is worth
    noting that we want to enable certain functionalities for the app to work, such
    as `emitDecoratorMetadata` and `experimentalDecorators`.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsconfig.json`：这个文件是为TypeScript编译器准备的。值得注意的是，我们希望启用某些功能，使应用程序能够正常工作，比如`emitDecoratorMetadata`和`experimentalDecorators`。'
- en: Common configuration
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用配置
- en: 'A brief overview of this file looks like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的简要概述如下：
- en: '`Entry`, the entry points of the application'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Entry`，应用程序的入口点'
- en: '`Module.rules`, an object that specifies how certain files should be loaded,
    with what loader'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Module.rules`，一个指定如何加载某些文件以及使用什么加载器的对象'
- en: '`Plugins`, an array of plugins that give us extra functionality during the
    life cycle of webpack'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件，一个在webpack生命周期中为我们提供额外功能的插件数组
- en: The `entry` session specifies that there will be three different bundles: `polyfills`, `vendor`,
    and `app`. Why these three bundles, you might ask? Well, to have a separate bundle
    for `polyfills`makes sense as it is a separate concept from the others. The `polyfills`bundle
    ensures our selected browser has all the latest features from ES2015\. The `vendor`bundle
    is where we place all the libraries that are considered helpers to our app, but
    not really the app itself. The `app` bundle is really where our app lives; it
    contains our business code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`entry`部分指定将有三个不同的捆绑：`polyfills`，`vendor`和`app`。你可能会问为什么是这三个捆绑？嗯，为`polyfills`有一个单独的捆绑是有道理的，因为它是与其他不同的概念。`polyfills`捆绑确保我们选择的浏览器具有来自ES2015的所有最新功能。`vendor`捆绑是我们放置所有被认为是我们应用程序的辅助程序的库，但并不是应用程序本身。`app`捆绑真正是我们应用程序的所在；它包含我们的业务代码。'
- en: 'The following code snippet shows what the configuration should look like to
    create the three previously-mentioned bundles:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了创建前面提到的三个捆绑所需的配置应该是什么样子的：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `module` section defines a list of rules. Just as a reminder, rules are
    about processing certain file extensions. Every rule consists of a `test`property
    that defines what file extension to look for. It also consists of the `loader`property,
    which points to loaders capable of processing said file extensions. For example,
    if the file extension is `.sass`, the loader is capable of compiling the Sass
    into a CSS file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`module`部分定义了一系列规则。提醒一下，规则是关于处理特定文件扩展名的。每个规则都包括一个`test`属性，定义要查找的文件扩展名。它还包括一个`loader`属性，指向能够处理该文件扩展名的加载程序。例如，如果文件扩展名是`.sass`，加载程序能够将Sass编译成CSS文件。'
- en: 'The following code snippet exemplifies how a rule can be set up to handle HTML
    files:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段举例说明了如何设置规则来处理HTML文件：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can see that a regular expression tests for the `.html` extension and lets `HTML-loader` handle
    it. The complete rules list for our project should set up rules for handling TypeScript,
    assets (images), CSS, and HTML. If we have all that, we are good to go.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一个正则表达式测试`.html`扩展名，并让`HTML-loader`处理它。我们项目的完整规则列表应该设置规则来处理TypeScript、资源（图像）、CSS和HTML。如果我们都有了，就可以开始了。
- en: 'We also need to enhance the building process by setting up some plugins, namely:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要通过设置一些插件来增强构建过程，即：
- en: '`ContextReplacementPlugin`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContextReplacementPlugin`'
- en: '`CommonChunksPlugin`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CommonChunksPlugin`'
- en: '`HTMLWebpackPlugin`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTMLWebpackPlugin`'
- en: 'The job of `ContextReplacementPlugin` is to replace one context for another.
    But what does that even mean? The most common use case is using `require` statements
    that are dynamic, like so:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContextReplacementPlugin`的工作是用另一个上下文替换一个上下文。但这到底是什么意思呢？最常见的用例是使用动态的`require`语句，就像这样：'
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'At compile time, webpack is unable to figure out what files to include. To
    ensure it will work at runtime, it includes everything in that directory. A common
    case is dealing with translation files. You might have hundreds of files in such
    a directory, and having all those files included will make the bundle unnecessarily
    big. So what you do is use said plugin and give it a filter parameter that narrows
    down the number of files, like so:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，webpack无法确定要包含哪些文件。为了确保它在运行时能够正常工作，它会包含该目录中的所有内容。一个常见情况是处理翻译文件。您可能在这样的目录中有数百个文件，包含所有这些文件会使捆绑文件变得不必要地庞大。因此，您可以使用该插件，并给它一个过滤参数，缩小文件数量，就像这样：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `CommonChunksPlugin` is used when you are trying to create several bundle
    files, like so:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试创建多个捆绑文件时，将使用`CommonChunksPlugin`，就像这样：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To avoid that, every single bundle contains the webpack runtime and other common
    parts; the mentioned plugin can be used to extract the common parts. There are
    many ways to call this plugin; here is one:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免每个捆绑包都包含webpack运行时和其他常见部分；可以使用上述插件来提取常见部分。有许多调用这个插件的方法；这里是一个：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will create an `init.js` file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个`init.js`文件。
- en: The webpack generates a lot of files, such as HTML and JavaScript files. You
    could link to all those files in your `index.html`, but that becomes quite cumbersome.
    A better way to handle this is to use `HTMLWebpackPlugin`, which will inject these `link` and `script` tags
    for you.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: webpack生成了许多文件，如HTML和JavaScript文件。你可以在`index.html`中链接到所有这些文件，但这变得相当麻烦。更好的处理方法是使用`HTMLWebpackPlugin`，它将为你注入这些`link`和`script`标签。
- en: 'Without this plugin, your `index.html` would look something like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 没有这个插件，你的`index.html`会看起来像这样：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You get the idea, using this plugin is pretty much a must, at least if you want
    to make sure to keep `index.html` in sync with your solution and avoid unnecessary
    typing by having to add/alter script tags.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你明白了，使用这个插件几乎是必须的，至少如果你想确保将`index.html`与你的解决方案同步，并避免不必要的输入，需要添加/更改脚本标签。
- en: 'What we need to do to make this plugin work is to point to where the `script` and `link` tags
    need to be injected, like so:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是使这个插件工作，指向需要注入`script`和`link`标签的位置，如下所示：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: So far, we have covered what bundles are created, what rules need to be set
    up to handle all different file extensions, and lastly what plugins are needed.
    This is the core of the webpack setup. However, the configuration needs to differ
    a bit depending on whether we are dealing with a development environment or a
    production environment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了创建的捆绑包，需要设置处理所有不同文件扩展名的规则，以及需要的插件。这是webpack设置的核心。然而，配置需要根据我们处理的是开发环境还是生产环境有所不同。
- en: Dev configuration
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发配置
- en: 'The webpack treats your files differently in development mode from production
    mode. For one, your JavaScript files are all in-memory, that is, no files are
    actually written to the output directory, as specified here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: webpack在开发模式和生产模式下以不同的方式处理你的文件。首先，你的JavaScript文件都是在内存中的，也就是说，没有文件实际写入输出目录，如下所示：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In development environments, we care about setting up source maps. Source maps
    remember what the file structure used to look like, before everything was concatenated
    into one or more bundles. It makes for easier debugging when the files resemble
    your project structure in your IDE. One way to set up source maps is to type the
    following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发环境中，我们关心设置源映射。源映射记住了在所有东西被合并成一个或多个捆绑包之前文件结构是什么样子的。当文件在IDE中与项目结构相似时，调试变得更容易。设置源映射的一种方法是输入以下内容：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Production configuration
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产配置
- en: 'In a production configuration, it''s important to set up minification by using
    the `UglifyJS` plugin. It''s important because we want our app to be as small
    as possible so it loads quickly. More of our users will probably be on a 3G connection,
    so we need to cater to all types of users:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产配置中，通过使用`UglifyJS`插件进行最小化设置是很重要的。这很重要，因为我们希望我们的应用尽可能小，这样它加载起来会很快。我们的用户中可能有更多的人在3G连接上，所以我们需要迎合所有类型的用户：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Testing
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: Any developer worth their salt should care about writing tests. Testing is not
    that hard to set up.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 任何值得一提的开发人员都应该关心编写测试。测试的设置并不难。
- en: 'We need the following file to make testing work:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以下文件来使测试工作：
- en: '`karma.conf.js`: We are using karma as a test runner. This needs a `config`
    file that sets up where to find the tests, whether to run our tests in a headless
    browser or a real one, and lots of other things.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma.conf.js`：我们正在使用karma作为测试运行器。这需要一个`config`文件，设置测试的位置，是否在无头浏览器或真实浏览器中运行我们的测试，以及许多其他内容。'
- en: 'The noteworthy `config` needed in this file is:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件中需要注意的`config`是：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preprocessing step is needed so that it compiles our TypeScript files into
    ES5 JavaScript. It will also set up proper source maps, as well as point out what
    files are needed from the Angular framework for our tests to run properly.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理步骤是必需的，以便将我们的TypeScript文件编译成ES5 JavaScript。它还将设置适当的源映射，并指出从Angular框架中需要哪些文件才能使我们的测试正常运行。
- en: 'Another property worth mentioning is:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得一提的属性是：
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This points to config specified in the `Webpack.test.js ` file.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这指向了`Webpack.test.js`文件中指定的配置。
- en: '`webpack.test.js`: This is just a copy of `Webpack.common.js`, normal config.
    However, by making it into a separate file, we have the ability to override certain
    configs later should we wish to.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webpack.test.js`：这只是`Webpack.common.js`的副本，正常的配置。然而，通过将其制作成一个单独的文件，我们有能力稍后覆盖某些配置。'
- en: '`karma-test-shim.js`: This file, as mentioned before, is responsible for importing
    all parts of the Angular framework that are needed to run, core parts of the framework,
    as well as dedicated parts related to testing. The full file looks as follows:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`karma-test-shim.js`：如前所述，这个文件负责导入运行所需的Angular框架的所有部分，框架的核心部分，以及与测试相关的专用部分。完整的文件如下：'
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It is worth nothing the following line:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是以下一行：
- en: '[PRE35]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This defines what it looks for when trying to locate what tests to run. So,
    let''s create a test that matches this pattern, `test.spec.ts`, under the `src` directory:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了在尝试定位要运行的测试时要查找的内容。因此，让我们创建一个匹配这种模式的测试，`test.spec.ts`，在`src`目录下：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'With all this set up correctly, you should be able to type:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都设置正确后，你应该能够输入：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This should start up the Chrome browser. You should see the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该启动Chrome浏览器。你应该看到以下内容：
- en: '![](assets/a4ff3e50-74d1-4a08-98b8-72c9a2009fdf.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4ff3e50-74d1-4a08-98b8-72c9a2009fdf.png)'
- en: 'Pressing the debug button will show the following screen, where it clearly
    indicates that it is running our test and the result, which is a passing test:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 按下调试按钮将显示以下屏幕，清楚地指示正在运行我们的测试和结果，即通过测试。
- en: '![](assets/63607909-e5c3-4b90-95fa-8db6252df8e4.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/63607909-e5c3-4b90-95fa-8db6252df8e4.png)'
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This appendix has described how webpack works in conjunction with Angular. Furthermore,
    we have explored the parts related to setting up an Angular application, and even
    how to set up unit tests, which is highly recommended to adapt early. Hopefully
    you feel empowered by this appendix, and are left with a feeling that the setup
    is not all that complicated. Oftentimes, setup for a project is a one-off, something
    you just do at the beginning of a project and barely touch afterwards. For brevity,
    a lot of configuration was not shown and we instead discussed how different configuration
    files worked together to make our setup work. However, if you want to study the
    configuration in detail, it is available at the following GitHub repository: [https://github.com/softchris/angular4-Webpack](https://github.com/softchris/angular4-webpack).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录描述了webpack与Angular的配合工作方式。此外，我们已经探讨了与设置Angular应用程序相关的部分，甚至如何设置单元测试，这是强烈建议尽早适应的。希望你通过这个附录感到有所启发，并且觉得设置并不那么复杂。通常情况下，项目的设置只需要一次，你只需要在项目开始时进行一次设置，之后几乎不再碰。为了简洁起见，我们没有展示很多配置，而是讨论了不同配置文件如何一起工作来使我们的设置生效。然而，如果你想详细研究配置，可以在以下GitHub存储库中找到：[https://github.com/softchris/angular4-Webpack](https://github.com/softchris/angular4-webpack)。
