["```js\nexport function PizzaShopApp() {\n  const [cartItems, setCartItems] = useState<string[]>([]);\n  const addItem = (item: string) => {\n    setCartItems([...cartItems, item]);\n  };\n  return (\n    <>\n      <h1>The Code Oven</h1>\n      <MenuList onAddMenuItem={addItem} />\n      <ShoppingCart cartItems={cartItems} />\n    </>\n  );\n}\n```", "```js\nconst pizzas = [\n  \"Margherita Pizza\",\n  \"Pepperoni Pizza\",\n  \"Veggie Supreme Pizza\"\n];\n```", "```js\n[\n  {\n    \"id\": \"p1\",\n    \"name\": \"Margherita Pizza\",\n    \"price\": 10.99,\n    \"description\": \"Classic pizza with tomato sauce and mozzarella\",\n    \"ingredients\": [\"Tomato Sauce\", \"Mozzarella Cheese\", \"Basil\", \n     \"Olive Oil\"],\n    \"allergyTags\": [\"Dairy\"],\n    \"calories\": 250,\n    \"category\": \"Pizza\"\n  },\n  //...\n]\n```", "```js\ntype RemoteMenuItem = {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n  ingredients: string[];\n  allergyTags: string[];\n  category: string;\n  calories: number\n}\n```", "```js\nconst MenuList = ({\n  onAddMenuItem,\n}: {\n  onAddMenuItem: (item: string) => void;\n}) => {\n  const [menuItems, setMenuItems] = useState<string[]>([]);\n  useEffect(() => {\n    const fetchMenuItems = async () => {\n      const result = await fetch('https://api.code-oven.com/menus');\n      const menuItems = await result.json();\n      setMenuItems(menuItems.map((item: RemoteMenuItem) => item.\n       name));\n    }\n    fetchMenuItems();\n  }, [])\n  return (\n    <div data-testid=\"menu-list\">\n      <ol>\n        {menuItems.map((item) => (\n          <li key={item}>\n            {item}\n            <button onClick={() => onAddMenuItem(item)}>Add</button>\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n```", "```js\ntype MenuItem = {\n  id: string;\n  name: string;\n  price: number;\n  ingredients: string[];\n  type: string;\n}\n```", "```js\nconst MenuList = ({\n  onAddMenuItem,\n}: {\n  onAddMenuItem: (item: string) => void;\n}) => {\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);\n  useEffect(() => {\n    const fetchMenuItems = async () => {\n      const result = await fetch(\"http://api.code-oven.com/menus\");\n      const menuItems = await result.json();\n      setMenuItems(\n        menuItems.map((item: RemoteMenuItem) => {\n          return {\n            id: item.id,\n            name: item.name,\n            price: item.price,\n            type: item.category.toUpperCase(),\n            ingredients: item.ingredients.slice(0, 3),\n          };\n        })\n      );\n    };\n    fetchMenuItems();\n  }, []);\n  return (\n    <div data-testid=\"menu-list\">\n      <ol>\n        {menuItems.map((item) => (\n          <li key={item.id}>\n            <h3>{item.name}</h3>\n            <span>${item.price}</span>\n            <div>\n              {item.ingredients.map((ingredient) => (\n                <span>{ingredient}</span>\n              ))}\n            </div>\n            <button onClick={() => onAddMenuItem(item.name)}>Add\n             </button>\n          </li>\n        ))}\n      </ol>\n    </div>\n  );\n};\n```", "```js\nconst useMenuItems = () => {\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);\n  useEffect(() => {\n    const fetchMenuItems = async () => {\n      const result = await fetch(\n        \"https://api.code-oven.com/menus\"\n      );\n      const menuItems = await result.json();\n      setMenuItems(\n        menuItems.map((item: RemoteMenuItem) => {\n          // ... transform RemoteMenuItem to MenuItem\n        })\n      );\n    };\n    fetchMenuItems();\n  }, []);\n  return { menuItems };\n};\n```", "```js\nconst MenuList = ({\n  onAddMenuItem,\n}: {\n  onAddMenuItem: (item: string) => void;\n}) => {\n  const { menuItems } = useMenuItems();\n  //...\n}\n```", "```js\nexport class MenuItem {\n  private readonly _id: string;\n  private readonly _name: string;\n  private readonly _type: string;\n  private readonly _price: number;\n  private readonly _ingredients: string[];\n  constructor(item: RemoteMenuItem) {\n    this._id = item.id;\n    this._name = item.name;\n    this._price = item.price;\n    this._type = item.category;\n    this._ingredients = item.ingredients;\n  }\n  // ... getter functions for id, name, price just returns the private \n          fields\n  get type() {\n    return this._type.toLowerCase();\n  }\n  get ingredients() {\n    return this._ingredients.slice(0, 3);\n  }\n}\n```", "```js\nexport const useMenuItems = () => {\n  //...\n  useEffect(() => {\n    const fetchMenuItems = async () => {\n      //...\n      setMenuItems(\n        menuItems.map((item: RemoteMenuItem) => {\n          return new MenuItem(item);\n        })\n      );\n    };\n    fetchMenuItems();\n  }, []);\n  return { menuItems };\n};\n```", "```js\nexport const ShoppingCart = ({ cartItems }: { cartItems: string[] }) => {\n  return (\n    <div data-testid=\"shopping-cart\">\n      <ol>\n        {cartItems.map((item) => (\n          <li key={item}>{item}</li>\n        ))}\n      </ol>\n      <button disabled={cartItems.length === 0}>Place My Order\n       </button>\n    </div>\n  );\n};\n```", "```js\nexport const ShoppingCart = ({ cartItems }: { cartItems: MenuItem[] }) => {\n  const totalPrice = cartItems.reduce((acc, item) => (acc += item.price), 0);\n  return (\n    <div data-testid=\"shopping-cart\" className=\"shopping-cart\">\n      <ol>\n        {cartItems.map((item) => (\n          <li key={item.id}>\n            <h3>{item.name}</h3>\n            <span>${item.price}</span>\n          </li>\n        ))}\n      </ol>\n      <div>Total: ${totalPrice}</div>\n      <button disabled={cartItems.length === 0}>Place My Order\n       </button>\n    </div>\n  );\n};\n```", "```js\nexport class MenuItem {\n  //... the private fields\n  constructor(item: RemoteMenuItem) {\n    //... assignment\n  }\n  get calculateDiscount() {\n    return this.type === 'pizza' && this.toppings >= 3 ? this.price * \n     0.1 : 0;\n  }\n}\n```", "```js\nexport interface IMenuItem {\n  id: string;\n  name: string;\n  type: string;\n  price: number;\n  ingredients: string[];\n  calculateDiscount(): number;\n}\n```", "```js\nexport abstract class AbstractMenuItem implements IMenuItem {\n  private readonly _id: string;\n  private readonly _name: string;\n  private readonly _price: number;\n  private readonly _ingredients: string[];\n  protected constructor(item: RemoteMenuItem) {\n    this._id = item.id;\n    this._name = item.name;\n    this._price = item.price;\n    this._ingredients = item.ingredients;\n  }\n  static from(item: IMenuItem): RemoteMenuItem {\n    return {\n      id: item.id,\n      name: item.name,\n      price: item.price,\n      category: item.type,\n      ingredients: item.ingredients,\n    };\n  }\n  //... the getter functions\n  abstract calculateDiscount(): number;\n}\n```", "```js\nexport class PizzaMenuItem extends AbstractMenuItem {\n  private readonly toppings: number;\n  constructor(item: RemoteMenuItem, toppings: number) {\n    super(item);\n    this.toppings = toppings;\n  }\n  calculateDiscount(): number {\n    return this.toppings >= 3 ? this.price * 0.1 : 0;\n  }\n}\n```", "```js\nexport class PastaItem extends AbstractMenuItem {\n  private readonly servingSize: string;\n  constructor(item: RemoteMenuItem, servingSize: string) {\n    super(item);\n    this.servingSize = servingSize;\n  }\n  calculateDiscount(): number {\n    return this.servingSize === \"large\" ? this.price * 0.15 : 0;\n  }\n}\n```", "```js\nexport const MenuList = ({}) => {\n  //...\n  const [toppings, setToppings] = useState([]);\n  const [size, setSize] = useState<string>(\"small\");\n  const handleAddMenuItem = (item: IMenuItem) => {\n    const remoteItem = AbstractMenuItem.from(item);\n    if (item.type === \"pizza\") {\n      onAddMenuItem(new PizzaMenuItem(remoteItem, toppings.length));\n    } else if (item.type === \"pasta\") {\n      onAddMenuItem(new PastaItem(remoteItem, size));\n    } else {\n      onAddMenuItem(item);\n    }\n  };\n  return (\n    //...\n  );\n};\n```", "```js\nexport const ShoppingCart = ({ cartItems }: { cartItems: IMenuItem[] }) => {\n  const totalPrice = cartItems.reduce((acc, item) => (acc += item.price), 0);\n  const totalDiscount = cartItems.reduce(\n    (acc, item) => (acc += item.calculateDiscount()),\n    0\n  );\n  return (\n    <div data-testid=\"shopping-cart\">\n      {/* rendering the list */}\n      <div>Total Discount: ${totalDiscount}</div>\n      <div>Total: ${totalPrice - totalDiscount}</div>\n      <button disabled={cartItems.length === 0}>Place My Order\n       </button>\n    </div>\n  );\n};\n```", "```js\nexport interface IDiscountStrategy {\n  calculate(price: number): number;\n}\n```", "```js\nclass NoDiscountStrategy implements IDiscountStrategy {\n  calculate(price: number): number {\n    return 0;\n  }\n}\n```", "```js\nclass SpecialDiscountStrategy implements IDiscountStrategy {\n  calculate(price: number): number {\n    return price * 0.15;\n  }\n}\n```", "```js\nexport interface IMenuItem {\n  // ... other fields\n  discountStrategy: IDiscountStrategy;\n}\n```", "```js\nexport class BaseMenuItem implements IMenuItem {\n  // ... other fields\n  private _discountStrategy: IDiscountStrategy;\n  constructor(item: RemoteMenuItem) {\n    // ... other fields\n    this._discountStrategy = new NoDiscountStrategy();\n  }\n  // ... other getters\n  set discountStrategy(strategy: IDiscountStrategy) {\n    this._discountStrategy = strategy;\n  }\n  calculateDiscount() {\n    return this._discountStrategy.calculate(this.price);\n  }\n}\n```", "```js\nexport const MenuList = ({\n  onAddMenuItem,\n}: {\n  onAddMenuItem: (item: IMenuItem) => void;\n}) => {\n  // ...\n  const handleAddMenuItem = (item: IMenuItem) => {\n    if (isTodayFriday()) {\n      item.discountStrategy = new SpecialDiscountStrategy();\n    }\n    onAddMenuItem(item);\n  };\n```", "```js\nconst handleAddMenuItem = (item: IMenuItem) => {\n  if (isTodayFriday()) {\n    item.discountStrategy = new SpecialDiscountStrategy();\n  }\n  if(item.type === 'pizza') {\n    item.discountStrategy = new PizzaDiscountStrategy();\n  }\n  onAddMenuItem(item);\n};\n```", "```js\nexport const useShoppingCart = (items: IMenuItem[]) => {\n  const totalPrice = useMemo(\n    () => items.reduce((acc, item) => (acc += item.price), 0),\n    [items]\n  );\n  const totalDiscount = useMemo(\n    () => items.reduce((acc, item) => (acc += item.\n     calculateDiscount()), 0),\n    [items]\n  );\n  return {\n    totalPrice,\n    totalDiscount,\n  };\n};\n```", "```js\nexport const ShoppingCart = ({ cartItems }: { cartItems: IMenuItem[] }) => {\n  const { totalPrice, totalDiscount } = useShoppingCart(cartItems);\n  return (\n    {/* JSX for the rendering logic */}\n  );\n};\n```", "```js\nsrc\n├── App.tsx\n├── hooks\n│   ├── useMenuItems.ts\n│   └── useShoppingCart.ts\n├── models\n│   ├── BaseMenuItem.ts\n│   ├── IMenuItem.ts\n│   ├── PastaItem.ts\n│   ├── PizzaMenuItem.ts\n│   ├── RemoteMenuItem.ts\n│   └── strategy\n│       ├── IDiscountStrategy.ts\n│       ├── NoDiscountStrategy.ts\n│       ├── SpecialDiscountStrategy.ts\n│       └── TenPercentageDiscountStrategy.ts\n└── views\n    ├── MenuList.tsx\n    └── ShoppingCart.tsx\n```"]