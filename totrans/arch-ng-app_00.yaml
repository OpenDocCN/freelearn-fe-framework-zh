- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NgRx is an implementation of the popular pattern, Redux, that's meant for use
    with Angular. It is entirely possible to create an Angular application without
    NgRx. You might even be very successful in doing so. There are situations, though,
    where Redux can really help; you can get that help by using NgRx.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is Redux and when do we need it? Redux is about adding predictability
    to your app. Predictability is about knowing who did what to the state in your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Single source of truth is a concept that Redux lives up to as it promotes adding
    all your data to one store. At any given moment, you will be able to tell what
    state your application is in. This is great if you want to save the state and
    come back to it (also called rehydration) like you would in a game where you create
    a save point and later resume your game from that save point.
  prefs: []
  type: TYPE_NORMAL
- en: It's not only about having a single source of truth; it's also about knowing
    who is allowed to change the content, or the state, of the store. A challenge
    you often face is that as an application grows, you need to add a lot of views
    and controllers, you gradually lose the overview of what code affects what state
    in the application. Redux helps you with this by ensuring that a view can't change
    the state directly but will have to dispatch actions that represent the intent
    of how you want the state to change.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing that might happen is that a lot of user interaction kicks off
    a lot of changes to the state. Some of those actions should lead to immediate
    changes and some lead to asynchronous actions that will eventually change the
    state of the application. The important thing at this point is that we ensure
    that all those changes happen in the right order. Redux helps us with that by
    queuing up all the actions and ensures that our app changes its state in a predictable
    way.
  prefs: []
  type: TYPE_NORMAL
- en: A very important aspect of Redux is that when it changes the state, it does
    not mutate it. It replaces the state with a copy of the old state, but with the
    latest action applied to it. If we take our game analogy again, imagine that you
    have a game and you want to add a potion to your backpack. When you do that in
    Redux, we replace the main character; we replace it with a main character that
    has a potion in its backpack. The fact that we do things this way makes it easy
    for us to remember each previous state and return to an earlier state if we need
    to, which is known as time-travel-debugging. To enable us to replace the previous
    state with a new state, we are using something called pure functions. Pure functions
    ensure that we only create a copy of the data instead of mutating it.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of benefits to knowing what state your app contains at a given
    point. However, not all the state in your app will need Redux. It comes down to
    preference. Some prefer to put all the state in the store, some prefer to put
    some state in the store, and some other state is fine if it only lives as local
    state in a specific component. Think of it this way, if you were to restore your
    app, what state would be okay to lose; the answer may be a drop-down selection
    made or something else, if anything. Having everything in the store will ensure
    that you don't, by mistake, make extra Ajax calls if the store already holds the
    data, so it is a way of helping you with caching as well.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for Angular developers who have written an app or two
    and are looking for a more structured way to handle data management. This means
    you ideally have a decent grasp of JavaScript, HTML, and CSS and know how to scaffold
    an Angular application using angular-cli, and you also know how to make AJAX requests
    using the HttpClient service in Angular.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](6a4e361c-0567-4d80-b889-2643e199c96a.xhtml), *Quick Look Back at
    Data Services for Simple Apps*, covers how to work with services and how Angular
    dependency injection helps out. It also brings up the MVC pattern and discusses
    cohesion and coupling.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](81d377c1-aafe-4eff-a7cd-a1b64629454c.xhtml), *1.21 Gigawatt – Flux
    Pattern Explained*, teaches what the Flux pattern is and what concepts it consists
    of. It shows how to implement the Flux pattern using stores, a dispatcher, and
    several views.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](fb400b4b-5f47-4df8-96e8-ec0032370c66.xhtml), *Asynchronous Programming*,
    looks at what asynchronous means and talks about callbacks, promises, async/await,
    and how the async library can help us create order in our asynchronous code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](8b39d931-ad22-4fea-8856-ab22c8cb077a.xhtml), *Functional Reactive
    Programming*, compares declarative and imperative programming and looks at a subset
    of declarative programming, functional programming. We drill down into certain
    properties of functional programming, such as higher-order functions, immutability,
    and recursion. Furthermore, we look at how to make code reactive and what reactive
    means.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](84bb33e0-d186-4abe-9b3f-10ba1ae911c8.xhtml), *RxJS Basics*, introduces
    the RxJS library. Furthermore, it brings up concepts such as Observable, Producer,
    and Observer. It further discusses how the Observable is the asynchronous concept
    that we need to unify all our asynchronous concepts into one. We also touch on
    operators and what they are. Lastly, we attempt to build our own micro implementation
    of RxJS to further understand what''s going on under the hood.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](887ffe0b-5c42-47b8-9fd7-9e13e4a8d0a4.xhtml), *Manipulating Stream
    and Their Values*, focuses a lot on educating the reader on operators, the thing
    that gives RxJS its power. The reader should leave this chapter with a lot more
    knowledge about how to manipulate data as well as Observables.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](f9ddd481-07d2-4008-a72d-384454489d5b.xhtml), *RxJS Advanced*, goes
    deeper and tries to explain more advanced concepts in RxJS, such as hot and cold
    Observables, subjects, error handling, and how to test your RxJS code with Marble
    testing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](e29180be-1bdf-4fdb-805b-333607fd6e0d.xhtml), *Redux*, demonstrates
    the Redux pattern and explains how it came from the Flux pattern and improved
    upon some of its paradigms and concepts. The reader will learn how it works in
    practice by learning to build their own Redux and also using the same, involving
    a couple of views.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](f57e66b8-c58d-4735-90fb-0d0e9638e8a5.xhtml), *NgRx – Reduxing that
    Angular App*, explores what NgRx is and what it consists of. It also shows the
    reader how to put it in to use by adding it to an Angular application. Concepts
    such as store are explained and demoed, and the reader will learn how to debug
    and handle side effects with the Effects library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](3b2b35d3-b023-468d-814d-d76907110933.xhtml)*, NgRx – In Depth*,
    covers the Entity library, which allows you to write way less code by reducing
    a lot of boilerplate. It also shows how you can put a router''s state in the store.
    Furthermore, we look at how to test NgRx, how to build it yourself, and lastly,
    we cover Schematics, which will help us further by allowing us to scaffold the
    most common constructs we need to work with in NgRx.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is about building Angular applications using NGRX. To get the most
    out of the book you need a basic understanding of the Angular framework and should
    be able to scaffold an Angular application using the Angular-CLI or be able to
    set up an Angular project through Webpack, if that is your preferred way. It's
    good to have a decent understanding of JavaScript and TypeScript. Most of all
    a curious mind is really all you need. It's a good idea to have NodeJs installed
    on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Architecting-Angular-Applications-with-Redux-RxJs-and-NgRx](https://github.com/PacktPublishing/Architecting-Angular-Applications-with-Redux-RxJs-and-NgRx).
    We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "We need to install `webpack` by typing the following in our
    terminal."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Let''s add an item to our store by adding a value to our input
    element and pressing the Save button."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: Email `feedback@packtpub.com` and mention the book title
    in the subject of your message. If you have questions about any aspect of this
    book, please email us at `questions@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packtpub.com](https://www.packtpub.com/).
  prefs: []
  type: TYPE_NORMAL
