- en: Exercising MERN Skills with an Online Marketplace
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过在线市场锻炼MERN技能
- en: With more business being conducted over the internet than ever before, the ability
    to buy and sell in an online marketplace setting has become a core requirement
    for many web platforms. In this and the next two chapters, we will utilize the
    MERN stack technologies to develop an online marketplace application complete
    with features that enable users to buy and sell.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的业务在网上进行，在线市场环境中买卖的能力已成为许多网络平台的核心需求。在本章和接下来的两章中，我们将利用MERN技术栈开发一个具有用户买卖功能的在线市场应用程序。
- en: We will build out everything from simple to advanced features for this application,
    starting in this chapter with a reiteration of the full-stack development lessons
    learned in previous chapters to set up a base for the marketplace platform. We
    will be extending the MERN skeleton application with support for seller accounts
    and shops with products, to incrementally integrate marketplace functionalities such
    as product search and suggestions. By the end of this chapter, you will have a
    better grasp of how to extend, integrate, and combine the different aspects of
    full-stack implementations to add complex features to your applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个应用程序构建从简单到高级的所有功能，从本章开始，我们将重复前几章中学到的全栈开发经验，为市场平台打下基础。我们将通过支持卖家账户和带有产品的商店来扩展MERN框架应用程序，逐步集成市场功能，如产品搜索和建议。到本章结束时，你将更好地掌握如何扩展、集成和组合全栈实现的各个方面，以向你的应用程序添加复杂功能。
- en: 'In this chapter, we will start building the online marketplace by covering
    the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题开始构建在线市场：
- en: Introducing the MERN Marketplace app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍MERN市场应用程序
- en: Users with seller accounts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有卖家账户的用户
- en: Adding shops to the marketplace
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在市场上添加商店
- en: Adding products to shops
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向商店添加产品
- en: Searching for products by name and category
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过名称和类别搜索产品
- en: Introducing the MERN Marketplace app
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍MERN市场应用程序
- en: 'The MERN Marketplace application will allow users to become sellers, who can
    manage multiple shops and add the products they want to sell in each shop. Users
    who visit MERN Marketplace will be able to search for and browse products they
    want to buy and add products to their shopping cart to place an order. The resulting
    marketplace application will look as pictured in the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MERN市场应用程序将允许用户成为卖家，他们可以管理多个商店并在每个商店中添加他们想要出售的产品。访问MERN市场的用户将能够搜索和浏览他们想要购买的产品，并将产品添加到购物车中下订单。最终的市场应用程序将如以下截图所示：
- en: '![](img/5b37e049-33ed-46e7-818c-dffdde8444de.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5b37e049-33ed-46e7-818c-dffdde8444de.png)'
- en: The code for the complete MERN Marketplace application is available on GitHub
    at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace).
    The implementations discussed in this and the next chapter can be accessed in
    the shop-cart-order-pay branch of the repository. You can clone this code and
    run the application as you go through the code explanations for the rest of this
    chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的MERN市场应用程序的代码可在GitHub上找到，网址为[https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter07%20and%2008/mern-marketplace)。本章和下一章中讨论的实现可以在存储库的shop-cart-order-pay分支中访问。你可以在阅读本章剩余部分的代码解释时克隆此代码并运行应用程序。
- en: 'In this chapter, we will extend the MERN skeleton to build a simple version
    of the online marketplace, starting with the following features:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将扩展MERN框架以构建一个简单的在线市场版本，从以下功能开始：
- en: Users with seller accounts
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有卖家账户的用户
- en: Shop management
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 店铺管理
- en: Product management
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品管理
- en: Product search by name and category
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过名称和类别搜索产品
- en: 'The views needed for these features related to seller accounts, shops, and
    products will be developed by extending and modifying the existing React components in
    the MERN skeleton application. The component tree pictured next shows all the
    custom React components that make up the MERN Marketplace frontend developed in
    this chapter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与卖家账户、商店和产品相关的功能所需视图将通过扩展和修改MERN框架应用程序中现有的React组件来开发。下面所示的组件树展示了本章开发的MERN市场前端的所有自定义React组件：
- en: '![](img/77ecbd46-3384-4646-b9c4-091c10d0de6c.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77ecbd46-3384-4646-b9c4-091c10d0de6c.png)'
- en: We will add new React components to implement views for managing shops and products as
    well as browsing and searching for products. We will also modify existing components
    such as the EditProfile, Menu, and Home components to develop the skeleton code
    into a marketplace application as we build out the different features in the rest
    of the chapter. These marketplace features will depend on the user's ability to
    update their accounts into seller accounts. In the next section, we will begin
    building the MERN Marketplace application by updating the existing user implementation
    to enable seller account features.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加新的React组件来实现管理商店和产品以及浏览和搜索产品的视图。我们还将修改现有的组件，如EditProfile、Menu和Home组件，将骨架代码开发成市场应用程序，正如我们在本章的其余部分构建不同功能时那样。这些市场功能将取决于用户将他们的账户更新为卖家账户的能力。在下一节中，我们将通过更新现有的用户实现来启用卖家账户功能，开始构建MERN市场应用程序。
- en: Allowing users to be sellers
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许用户成为卖家
- en: 'Any user with an account on the MERN Marketplace application will have the
    option to update their accounts to seller accounts by making changes to their
    profiles. We will add this option to convert to a seller account in the <q>Edit
    Profile</q> page, as shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在MERN市场应用程序上有账户的用户都有将他们的账户更新为卖家账户的选项，通过更改他们的个人资料来实现。我们将在<q>编辑个人资料</q>页面添加此选项以转换为卖家账户，如下面的截图所示：
- en: '![](img/de5922cb-2463-4326-8285-5896ae0dedc8.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de5922cb-2463-4326-8285-5896ae0dedc8.png)'
- en: 'A user with an active seller account will be allowed to create and manage their
    own shops, where they can manage products. Regular users will not have access
    to a seller dashboard, whereas users with active seller accounts will see a link
    to their dashboard on the menu as MY SHOPS. The following screenshot shows how
    the menu looks to a regular user in contrast to a user with an active seller account:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有活跃卖家账户的用户将被允许创建和管理他们自己的商店，在那里他们可以管理产品。普通用户将无法访问卖家仪表板，而拥有活跃卖家账户的用户将在菜单上看到一个指向他们仪表板的链接，显示为“我的商店”。以下截图显示了普通用户与拥有活跃卖家账户的用户在菜单上的区别：
- en: '![](img/a4970b51-3707-4888-ab58-45b8c68f8d8b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4970b51-3707-4888-ab58-45b8c68f8d8b.png)'
- en: To add this seller account feature, we need to update the user model, the Edit
    Profile view and add a MY SHOPS link to the menu that will only be visible to
    sellers, as discussed in the following sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加此卖家账户功能，我们需要更新用户模型、编辑个人资料视图，并在菜单中添加一个仅对卖家可见的“我的商店”链接，如以下各节所述。
- en: Updating the user model
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: 'We need to store additional detail about each user to determine whether a user
    is an active seller or not. We will update the user model that we developed in
    [Chapter 3](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml), *Building a Backend with
    MongoDB, Express, and Node*, to add a `seller` value that will be set to `false`
    by default to represent regular users and can additionally be set to `true` to
    represent users who are also sellers. We will update the existing user schema
    to add this `seller` field with the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要存储有关每个用户的额外详细信息，以确定用户是否是活跃的卖家。我们将更新我们在[第3章](a9dedbd8-baf6-4ec8-b766-0b370227fbe4.xhtml)，《使用MongoDB、Express和Node构建后端》中开发的用户模型，以添加一个默认设置为`false`的`seller`值来表示普通用户，并且可以额外设置为`true`来表示也是卖家的用户。我们将更新现有的用户模式以添加此`seller`字段，如下面的代码所示：
- en: '`mern-marketplace/server/models/user.model.js`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/models/user.model.js`:'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This `seller` value for each user must be sent to the client with the user
    details received on successful sign-in, so the view can be rendered accordingly
    to show information relevant to the seller. We will update the response sent back
    in the `signin` controller method to add this detail, as highlighted in the following
    code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个用户的此`seller`值必须在成功登录后发送给客户端，以便视图可以根据显示与卖家相关的信息进行渲染。我们将在`signin`控制器方法中更新返回的响应，以添加此详细信息，如下面的代码所示：
- en: '`mern-marketplace/server/controllers/auth.controller.js`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/auth.controller.js`:'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using this `seller` field value, we can render the frontend based on authorizations
    permitted only to seller accounts. Before rendering views based on seller authorizations,
    we first need to implement the option to activate seller account features in the `EditProfile` view,
    as discussed in the next section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此`seller`字段值，我们可以根据仅允许卖家账户的授权来渲染前端。在根据卖家授权渲染视图之前，我们首先需要在`EditProfile`视图中实现激活卖家账户功能的选项，如下一节所述。
- en: Updating the Edit Profile view
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新编辑个人资料视图
- en: 'A signed-in user will see a toggle in the Edit Profile view, allowing them
    to either activate or deactivate the seller feature. We will update the `EditProfile`
    component to add a `Material-UI` `Switch` component in `FormControlLabel`, as
    shown in the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 已登录用户将在编辑个人资料视图中看到一个切换按钮，允许他们激活或停用卖家功能。我们将更新`EditProfile`组件，在`FormControlLabel`中添加一个`Material-UI`
    `Switch`组件，如下面的代码所示：
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/EditProfile.js`:'
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Any changes to the switch will be set to the value of the `seller` in state
    by calling the `handleCheck` method. The `handleCheck` method is implemented as
    shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对开关的更改将通过调用`handleCheck`方法设置为状态中`seller`的值。`handleCheck`方法的实现如下所示：
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/EditProfile.js`:'
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When the form to edit profile details is submitted, the `seller` value is also
    added to details sent in the update to the server, as highlighted in the following
    code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当提交编辑个人资料详情的表单时，`seller`值也将添加到发送给服务器的更新详情中，如下面的代码所示：
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/user/EditProfile.js`:'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: On successful update, the user details stored in `sessionStorage` for auth purposes
    should also be updated. The `auth.updateUser` method is called to do this `sessionStorage`
    update. The implementation for the `auth.updateUser` method was discussed in *Updating
    the Edit Profile view* section of [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml),
    *Building a Web-Based Classroom Application*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功更新后，用于认证目的存储在`sessionStorage`中的用户详情也应更新。通过调用`auth.updateUser`方法来完成此`sessionStorage`更新。`auth.updateUser`方法的实现已在[第6章](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml)的*更新编辑个人资料视图*部分中讨论，*构建基于Web的课堂应用*。
- en: Once the updated `seller` value is available in the frontend, we can use it
    to render the interface accordingly. In the next section, we will see how to render
    the menu differently based on whether the user viewing the application has an
    active seller account.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在前端获得更新的`seller`值，我们可以使用它来相应地渲染界面。在下一节中，我们将看到如何根据查看应用的用户的卖家账户是否活跃来不同地渲染菜单。
- en: Updating the menu
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新菜单
- en: In the frontend of the marketplace application, we can render different options
    based on whether the user currently browsing the application has an active seller
    account. In this section, we will add the code to conditionally display a link
    to *MY SHOPS* on the navigation bar, which will only be visible to the signed-in
    users who have active seller accounts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场应用的前端，我们可以根据当前浏览应用的用户的卖家账户是否活跃来渲染不同的选项。在本节中，我们将添加代码以条件性地在导航栏上显示到*我的商店*的链接，该链接仅对已登录且拥有活跃卖家账户的用户可见。
- en: 'We will update the `Menu` component within the previous code so that it only
    renders when a user is signed in, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新前一段代码中的`Menu`组件，使其仅在用户登录时渲染，如下所示：
- en: '`mern-marketplace/client/core/Menu.js`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/core/Menu.js`:'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This *MY SHOPS *link on the navigation bar will take users with active seller
    accounts to the seller dashboard view where they can manage the shops they own
    on the marketplace.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏上的此*我的商店*链接将带活跃卖家账户的用户带到卖家仪表板视图，在那里他们可以管理他们在市场上的商店。
- en: With these updates to the user implementation, it is now possible for users
    on the marketplace to update their regular accounts to seller accounts, and we
    can begin incorporating features that will allow these sellers to add shops to
    the marketplace. We will see how to do this in the following section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对用户实现的这些更新，现在市场中的用户可以将他们的普通账户更新为卖家账户，我们可以开始整合允许这些卖家向市场添加商店的功能。我们将在下一节中看到如何实现这一点。
- en: Adding shops to the marketplace
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在市场中添加商店
- en: Sellers on MERN Marketplace can create shops and add products to each shop.
    To store the shop data and enable shop management, we will implement a Mongoose
    Schema for shops, backend APIs to access and modify the shop data, and frontend
    views for both the shop owner and buyers browsing through the marketplace.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: MERN市场中的卖家可以创建商店并向每个商店添加产品。为了存储商店数据和启用商店管理，我们将实现一个用于商店的Mongoose模式，后端API以访问和修改商店数据，以及面向商店所有者和浏览市场的买家的前端视图。
- en: In the following sections, we will build out the shop module in the application
    by first defining the shop model for storing shop data in the database, then implementing
    the backend APIs and frontend views for the shop-related features including creating
    new shops, listing all shops, listing shops by owner, displaying a single shop,
    editing shops, and deleting shops from the application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将通过首先定义用于在数据库中存储商店数据的商店模型，然后实现商店相关功能的后端API和前端视图（包括创建新商店、列出所有商店、按所有者列出商店、显示单个商店、编辑商店和从应用程序中删除商店）来构建应用程序中的商店模块。
- en: Defining a Shop model
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义商店模型
- en: 'We will implement a Mongoose model to define a Shop model for storing the details
    of each shop. This model will be defined in `server/models/shop.model.js`, and
    the implementation will be similar to other Mongoose model implementations covered
    in previous chapters, like the Course model defined in [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml),
    *Building a Web-Based Classroom Application*. The Shop schema in this model will
    have simple fields to store shop details, along with a logo image, and a reference
    to the user who owns the shop. The code blocks defining the shop fields are given
    in the following list with explanations:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个Mongoose模型来定义一个用于存储每个商店详情的商店模型。此模型将在`server/models/shop.model.js`中定义，其实现将与之前章节中覆盖的其他Mongoose模型实现类似，如第6章中定义的Course模型，*构建基于Web的课堂应用程序*。此模型中的商店模式将包含简单的字段以存储商店详情，包括标志图像以及指向拥有商店的用户引用。定义商店字段的代码块及其说明如下所示：
- en: '**Shop name and description**: The `name` and `description` fields will be
    string types, with `name` as a required field:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店名称和描述**：`name`和`description`字段将是字符串类型，其中`name`为必填字段：'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Shop logo image**: The `image` field will store the logo image file uploaded
    by the user as data in the MongoDB database:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店标志图像**：`image`字段将存储用户上传到MongoDB数据库中的标志图像文件：'
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Shop owner**: The `owner` field will reference the user who creates the shop:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店所有者**：`owner`字段将引用创建商店的用户：'
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '***Created at* and *updated at* times**: The `created` and `updated` fields
    will be `Date` types, with `created` generated when a new shop is added, and `updated`
    changed when any shop details are modified:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建时间和更新时间**：`created`和`updated`字段将是`Date`类型，`created`在添加新商店时生成，而`updated`在修改任何商店详情时更改：'
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The fields added in this schema definition will enable us to implement the shop-related
    features in MERN Marketplace.  In the next section, we will start developing these
    features by implementing the full-stack slice that will allow sellers to create
    new shops.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式定义中添加的字段将使我们能够实现MERN Marketplace中的商店相关功能。在下一节中，我们将通过实现允许卖家创建新商店的全栈切片来开始开发这些功能。
- en: Creating a new shop
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新商店
- en: In MERN Marketplace, a user who is signed in and has an active seller account
    will be able to create new shops. To implement this feature, in the following
    sections we will add a create shop API in the backend, along with a way to fetch
    this API in the frontend, and a create new shop form view that takes user input
    for shop fields.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace中，一个已登录并拥有活跃卖家账户的用户将能够创建新的商店。为了实现这个功能，在接下来的章节中，我们将在后端添加创建商店API，以及在前端获取此API的方法，以及一个用于输入商店字段的创建新商店表单视图。
- en: The create shop API
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建商店API
- en: 'For the implementation of the create shop API that will allow creating new
    shops in the database, we will first add a `POST` route, as shown in the following
    code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现允许在数据库中创建新商店的创建商店API，我们首先添加一个`POST`路由，如下面的代码所示：
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`:'
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A `POST` request to this route at `/api/shops/by/:userId` will first ensure
    the requesting user is signed in and is also the authorized owner, in other words,
    it is the same user associated with the `:userId` specified in the route param.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对`/api/shops/by/:userId`此路由的`POST`请求将首先确保请求的用户已登录并且也是授权的所有者，换句话说，它是与路由参数中指定的`:userId`关联的同一用户。
- en: 'To process the `:userId` param and retrieve the associated user from the database,
    we will utilize the `userByID` method in the user controller. We will add the
    following to the `Shop` routes in `shop.routes.js`, so the user is available in
    the `request` object as `profile`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理`:userId`参数并从数据库中检索关联的用户，我们将利用用户控制器中的`userByID`方法。我们将在`shop.routes.js`中的`Shop`路由中添加以下内容，以便用户在`request`对象中作为`profile`可用：
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`:'
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `shop.routes.js` file containing the shop routes will be very similar to
    the `user.routes` file. To load these new shop routes in the Express app, we need
    to mount the shop routes in `express.js` as shown in the following code, as we
    did for the auth and user routes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 包含商店路由的`shop.routes.js`文件将与`user.routes`文件非常相似。为了在Express应用中加载这些新的商店路由，我们需要在`express.js`中挂载商店路由，如下所示，就像我们为认证和用户路由所做的那样：
- en: '`mern-marketplace/server/express.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/express.js`:'
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The request to the create shop route will also verify that the current user
    is a seller before creating a new shop with the shop data passed in the request. We
    will update the user controller to add the `isSeller` method, which will ensure
    that the current user is actually a seller. The `isSeller` method is defined as
    follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建商店路由的请求中，也会验证当前用户是否为卖家，然后再使用请求中传递的商店数据创建一个新的商店。我们将更新用户控制器以添加`isSeller`方法，以确保当前用户实际上是一个卖家。`isSeller`方法定义如下：
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/user.controller.js`:'
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `create` method in the shop controller, which is invoked after a seller
    is verified, uses the `formidable` node module to parse the multipart request
    that may contain an image file uploaded by the user for the shop logo. If there
    is a file, `formidable` will store it temporarily in the filesystem, and we will
    read it using the `fs` module to retrieve the filetype and data to store it in
    the `image` field in the shop document. The `create` controller method will look
    as shown in the following code block:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在商店控制器中，当卖家验证后，会调用`create`方法，该方法使用`formidable`节点模块解析可能包含用户上传的商店标志图像文件的multipart请求。如果有文件，`formidable`将暂时将其存储在文件系统中，我们将使用`fs`模块读取它，以检索文件类型和数据并将其存储在商店文档的`image`字段中。`create`控制器方法将如下所示：
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The logo image file for the shop is uploaded by the user and stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate `GET` API. The `GET` API is set up as an Express
    route at `/api/shops/logo/:shopId`, which gets the image data from MongoDB and
    sends it as a file in the response. The implementation steps for file upload, storage,
    and retrieval are outlined in detail in the *Upload profile photo* section of Chapter
    5, *Starting with a Simple Social Media Application*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 用户上传的商店标志图像文件存储在MongoDB中作为数据。然后，为了在视图中显示，它作为单独的`GET` API从数据库中检索出来，作为一个图像文件。`GET`
    API设置为Express路由`/api/shops/logo/:shopId`，从MongoDB获取图像数据并将其作为文件发送在响应中。文件上传、存储和检索的实现步骤在第五章“从简单的社交媒体应用开始”的“上传个人照片”部分中详细说明。
- en: This create shop API endpoint can now be used in the frontend to make a `POST`
    request. Next, we will add a `fetch` method on the client side to make this request
    from the application's client interface.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在前端使用这个创建商店API端点来发起`POST`请求。接下来，我们将在客户端添加一个`fetch`方法，以便从应用程序的客户端界面发起这个请求。
- en: Fetching the create API in the view
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中获取创建API
- en: 'In the frontend, to make a request to this create API, we will set up a `fetch`
    method on the client side to make a `POST` request to the API route and pass it
    the multipart form data containing details of the new shop. This `fetch` method
    will be defined as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了向这个创建API发起请求，我们将在客户端设置一个`fetch`方法，向API路由发送一个`POST`请求，并传递包含新商店详细信息的multipart表单数据。这个`fetch`方法定义如下：
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/api-shop.js`:'
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will use this method in the create new shop form view, implemented in the
    next section, to send the user-entered shop details to the backend.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节实现的创建新商店表单视图中使用这个方法，将用户输入的商店详细信息发送到后端。
- en: The NewShop component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新商店组件
- en: 'Sellers in the marketplace application will interact with a form view to enter
    details of a new shop and create the new shop. We will render this form in the
    `NewShop` component, which will allow a seller to create a shop by entering a
    name and description, and uploading a logo image file from their local filesystem,
    as pictured in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场应用中的卖家将通过表单视图输入新商店的详细信息并创建新商店。我们将在这个`NewShop`组件中渲染这个表单，允许卖家通过输入名称和描述，并从本地文件系统中上传标志图像文件来创建商店，如下面的截图所示：
- en: '![](img/e7d9a06a-023f-470c-bd8d-a6bf34ab6634.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7d9a06a-023f-470c-bd8d-a6bf34ab6634.png)'
- en: 'We will implement this form in a React component named `NewShop`. For the view,
    we will first add the file upload elements using a Material-UI button and an HTML5
    file input element, as shown in the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在名为 `NewShop` 的 React 组件中实现此表单。对于视图，我们首先使用 Material-UI 按钮和 HTML5 文件输入元素添加文件上传元素，如下面的代码所示：
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`:'
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we add the name and description form fields with the `TextField` components,
    as shown next:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加名称和描述表单字段，使用 `TextField` 组件，如下所示：
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`:'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'These form field changes will be tracked with the `handleChange` method when
    a user interacts with the input fields to enter values. The `handleChange` function
    will be defined as shown in the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表单字段的变化将通过 `handleChange` 方法进行跟踪，当用户与输入字段交互输入值时。`handleChange` 函数将定义如下所示：
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`:'
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `handleChange` method updates the state with the new values, including the
    name of the image file, should one be uploaded by the user.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleChange` 方法会更新状态，包括用户上传的图像文件名（如果有的话）。'
- en: 'Finally, you can complete this form view by adding a submit button that when
    clicked, should send the form data to the server. We will define a `clickSubmit`
    method, as shown next, which will be called when the submit button is clicked
    by the user:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过添加一个提交按钮来完成此表单视图，当用户点击时，应将表单数据发送到服务器。我们将定义一个 `clickSubmit` 方法，如下所示，当用户点击提交按钮时将被调用：
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`:'
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This `clickSubmit` function will take the input values and populate `shopData`,
    which is a `FormData` object that ensures the data is stored in the correct format
    needed for the `multipart/form-data` encoding type. Then the `create` fetch method
    is called to create the new shop in the backend with this form data. On successful
    shop creation, the user is redirected back to the `MyShops` view with the following
    code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `clickSubmit` 函数将获取输入值并填充 `shopData`，这是一个 `FormData` 对象，确保数据以正确的格式存储，适用于 `multipart/form-data`
    编码类型。然后调用 `create` fetch 方法，使用此表单数据在后端创建新的商店。在成功创建商店后，用户将被重定向回 `MyShops` 视图，如下面的代码所示：
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/NewShop.js`:'
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `NewShop` component can only be viewed by a signed-in user who is also
    a seller. So we will add a `PrivateRoute` in the `MainRouter` component, as shown
    in the following code block, that will render this form only for authenticated
    users at `/seller/shop/new`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewShop` 组件只能由已登录且也是卖家的用户查看。因此，我们将在 `MainRouter` 组件中添加一个 `PrivateRoute`，如下面的代码块所示，它只为在
    `/seller/shop/new` 的认证用户提供此表单：'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This link can be added to any of the view components that may be accessed by
    the seller, for example in a view where a seller manages their shops in the marketplace.
    Now that it is possible to add new shops in the marketplace, in the next section
    we will discuss the implementations to fetch and list these shops from the database
    in the backend to the application views in the frontend.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接可以添加到卖家可能访问的任何视图组件中，例如在卖家管理市场中的商店的视图中。现在，在市场上添加新商店成为可能，在下一节中，我们将讨论从后端数据库到前端应用视图检索和列出这些商店的实现。
- en: Listing shops
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出商店
- en: In MERN Marketplace, regular users will be able to browse through a list of
    all the shops on the platform, and each shop owner will manage a list of their
    own shops. In the following sections, we will implement the full-stack slices
    for retrieving and displaying two different lists of shops – a list of all the
    shops, and the list of shops owned by a specific user.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN Marketplace 中，普通用户将能够浏览平台上的所有商店列表，而每位店主将管理他们自己的商店列表。在以下章节中，我们将实现全栈切片，用于检索和显示两种不同的商店列表——所有商店的列表和特定用户拥有的商店列表。
- en: Listing all shops
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出所有商店
- en: 'Any user browsing through the marketplace will be able to see a list of all
    the shops on the marketplace. In order to implement this feature, we will have
    to query the `shops` collection to retrieve all the shops in the database and
    display it in a view to the end user. We achieve this by adding a full-stack slice
    with the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览市场中的任何用户都将能够看到市场上所有商店的列表。为了实现此功能，我们必须查询 `shops` 集合以检索数据库中的所有商店，并将其显示给最终用户。我们通过添加以下全栈切片来实现这一点：
- en: A backend API to retrieve the list of shops
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于检索商店列表的后端 API
- en: A `fetch` method in the frontend to make a request to the API
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端的一个 `fetch` 方法用于向 API 发送请求
- en: A React component to display the list of shops
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于显示商店列表的 React 组件
- en: The shops list API
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店列表 API
- en: 'In the backend, we will define an API to retrieve all the shops from the database,
    so the shops in the marketplace can be listed in the frontend. This API will accept
    a request from the client to query the `shops` collection and return the resulting
    shop documents in the response. First, we will add a route to retrieve all the
    shops stored in the database when the server receives a `GET` request at `''/api/shops''`.
    This route is declared as shown in the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将定义一个 API 来从数据库检索所有商店，以便在前端列出市场中的商店。此 API 将接受来自客户端的请求以查询 `shops` 集合，并在响应中返回结果商店文档。首先，当服务器在
    `'/api/shops'` 接收到 `GET` 请求时，我们将添加一个路由来检索存储在数据库中的所有商店。此路由声明如下所示：
- en: '`mern-marketplace/server/routes/shop.routes.js`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`'
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A `GET` request received at this route will invoke the `list` controller method,
    which will query the `shops` collection in the database to return all the shops.
    The `list` method is defined as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在此路由接收到的 `GET` 请求将调用 `list` 控制器方法，该方法将查询数据库中的 `shops` 集合以返回所有商店。`list` 方法定义如下：
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This method will return all the shops in the database in response to the requesting
    client. Next, we will see how to make a request to this shop list API from the
    client side.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将返回数据库中的所有商店以响应请求的客户端。接下来，我们将看到如何从客户端向此商店列表 API 发送请求。
- en: Fetch all shops for the view
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有商店以供查看
- en: 'In order to use the shop list API in the frontend, we will define a `fetch`
    method that can be used by React components to load this list of shops. The `list` method
    on the client side will use `fetch` to make a `GET` request to the API, as shown
    in the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用商店列表 API，我们将定义一个 `fetch` 方法，该方法可以被 React 组件用来加载此商店列表。客户端的 `list` 方法将使用
    `fetch` 向 API 发送 `GET` 请求，如下所示：
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/api-shop.js`:'
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As we will see in the next section, this `list` method can be used in the React
    component to display the list of shops.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们将在下一节中看到的，此 `list` 方法可以在 React 组件中用来显示商店列表。
- en: The Shops component
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shops 组件
- en: 'In the `Shops` component, we will render the list of shops in a Material-UI
    `List`, after fetching the data from the server and setting the data in a state
    to be displayed as shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Shops` 组件中，在从服务器获取数据并将数据设置在状态中以供显示后，我们将使用 Material-UI `List` 渲染商店列表，如下所示：
- en: '![](img/28ad986e-83a7-4eab-aac2-6835cd66fec8.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/28ad986e-83a7-4eab-aac2-6835cd66fec8.png)'
- en: 'To implement this component, we first need to fetch and render the list of
    shops. We will make the fetch API call in the `useEffect` hook, and set the received
    `shops` array in the state, as shown here:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现此组件，我们首先需要获取并渲染商店列表。我们将在 `useEffect` 钩子中调用 fetch API 调用，并将接收到的 `shops` 数组设置在状态中，如下所示：
- en: '`mern-marketplace/client/shop/Shops.js`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shops.js`:'
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `Shops` component view, this retrieved `shops` array is iterated over
    using `map`, with each shop''s data rendered in the view in a Material-UI `ListItem`,
    and each `ListItem` is also linked to the individual shop''s view, as shown in
    the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Shops` 组件视图中，使用 `map` 迭代检索到的 `shops` 数组，每个商店的数据在视图中以 Material-UI `ListItem`
    的形式渲染，并且每个 `ListItem` 也链接到单个商店的视图，如下所示：
- en: '`mern-marketplace/client/shop/Shops.js`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shops.js`:'
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `Shops` component will be accessed by the end user at `/shops/all`, which
    is set up with React Router and declared in `MainRouter.js` as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shops` 组件将由最终用户在 `/shops/all` 路径下访问，该路径通过 React Router 设置，并在 `MainRouter.js`
    中声明如下：'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Adding this link to any view in the application will redirect the user to a
    view displaying all the shops in the marketplace. Next, we will similarly implement
    the feature to list the shops owned by a specific user.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将此链接添加到应用程序中的任何视图中，将用户重定向到显示市场内所有商店的视图。接下来，我们将类似地实现列出特定用户拥有的商店的功能。
- en: Listing shops by owner
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按所有者列出商店
- en: 'Authorized sellers on the marketplace will see a list of the shops they created,
    which they can manage by editing or deleting any shop on the list. In order to
    implement this feature, we will have to query the shops'' collection to retrieve
    all the shops with the same owner and display it only to the authorized owner
    of the shops. We achieve this by adding a full-stack slice with the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上的授权卖家将看到他们创建的商店列表，他们可以通过编辑或删除列表中的任何商店来管理这些商店。为了实现这个功能，我们必须查询商店集合以检索所有具有相同所有者的商店，并仅向授权的所有者显示。我们通过添加以下全栈切片来实现这一点：
- en: A backend API that ensures the requesting user is authorized and retrieves the
    relevant list of shops
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个后端API，确保请求用户已授权并检索相关的商店列表
- en: A `fetch` method in the frontend to make a request to this API
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端的一个`fetch`方法来请求这个API
- en: A React component to display the list of shops to the authorized user
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个React组件用于向授权用户显示商店列表
- en: The shops by owner API
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按所有者分组的商店API
- en: 'We will implement an API in the backend to return the list of shops of a specific
    owner, so it can be rendered in the frontend for the end user. We will start by adding
    a route in the backend to retrieve all the shops created by a given user when
    the server receives a `GET` request at `/api/shops/by/:userId`. This route is
    declared as shown in the following code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后端实现一个API来返回特定所有者的商店列表，以便在前端渲染给最终用户。我们将从在服务器接收到对`/api/shops/by/:userId`的`GET`请求时检索给定用户创建的所有商店的后端路由开始。此路由声明如下所示：
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`:'
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A `GET` request to this route will first ensure the requesting user is signed
    in and is also the authorized owner, before invoking the `listByOwner` controller
    method in `shop.controller.js`. This method will query the `Shop` collection in
    the database to get the matching shops. This `listByOwner` method is defined as
    follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个路由的`GET`请求将首先确保请求用户已登录并且也是授权的所有者，然后调用`shop.controller.js`中的`listByOwner`控制器方法。此方法将在数据库中查询`Shop`集合以获取匹配的商店。`listByOwner`方法定义如下：
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the query to the Shop collection, we find all the shops where the `owner`
    field matches the user-specified with the `userId` param, then populate the referenced
    user's ID and name in the `owner` field, and return the resulting shops in an
    array in the response to the client. Next, we will see how to make a request to
    this API from the client side.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询Shop集合时，我们找到所有`owner`字段与用户指定的`userId`参数匹配的商店，然后在`owner`字段中填充引用的用户ID和名称，并将结果商店以数组形式返回给客户端。接下来，我们将看到如何从客户端发起对这个API的请求。
- en: Fetch all shops owned by a user for the view
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用于视图的用户拥有的所有商店
- en: 'In the frontend, to fetch the shops for a specific user using this list by
    owner API, we will add a `fetch` method that takes the signed-in user''s credentials
    to make a `GET` request to the API route with the specific user ID passed in the
    URL. This `fetch` method is defined as shown in the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用按所有者分组的API获取特定用户的商店，我们将添加一个`fetch`方法，该方法接受已登录用户的凭据，并通过将特定用户ID传递到URL中，向API路由发起`GET`请求。此`fetch`方法定义如下：
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/api-shop.js`:'
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The shops returned in the response from the server using this method can be
    rendered in a React component to display the shops to the authorized user, as
    discussed in the next section.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法从服务器返回的响应中的商店可以在React组件中渲染，以向授权用户显示商店，如下一节所述。
- en: The MyShops component
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MyShops组件
- en: 'The `MyShops` component is similar to the `Shops` component. It fetches the
    list of shops owned by the current user, and renders each shop in a `ListItem`,
    as pictured in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyShops`组件与`Shops`组件类似。它获取当前用户拥有的商店列表，并如图所示在`ListItem`中渲染每个商店：'
- en: '![](img/b3cdc2c2-1081-41c0-b549-a56521a2954c.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3cdc2c2-1081-41c0-b549-a56521a2954c.png)'
- en: 'Additionally, each shop has an `edit` and a `delete` option, unlike the list
    of items in `Shops`. The implementation for the `MyShops` component is the same
    as `Shops`, except for these edit and delete buttons, which are added as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个商店都有一个`编辑`和`删除`选项，与`Shops`中的项目列表不同。`MyShops`组件的实现与`Shops`相同，除了以下添加的编辑和删除按钮：
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/MyShops.js`:'
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `Edit` button links to an <q>Edit Shop</q> view, whereas the `DeleteShop`
    component, which is discussed later in the chapter, handles the delete action.
    The `DeleteShop` component updates the list by calling the `removeShop` method
    passed from `MyShops`. This `removeShop` method allows us to update the state
    with the modified list of shops for the current user and is defined in the `MyShops`
    component, as shown here:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`编辑`按钮链接到`<q>编辑商店</q>`视图，而`DeleteShop`组件（将在本章后面讨论），处理删除操作。`DeleteShop`组件通过调用从`MyShops`传递的`removeShop`方法来更新列表。这个`removeShop`方法允许我们使用当前用户的修改后的商店列表更新状态，并在`MyShops`组件中定义，如下所示：'
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/MyShops.js`:'
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `MyShops` component can only be viewed by a signed-in user who is also
    a seller. So we will add a `PrivateRoute` in the `MainRouter` component, which
    will render this component only for authenticated users at `/seller/shops`, as
    shown in the following code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyShops`组件只能由已登录的卖家查看。因此，我们将在`MainRouter`组件中添加一个`PrivateRoute`，它只为认证用户在`/seller/shops`上渲染此组件，如下所示代码所示：'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE33]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the marketplace application, we add this link to the navigation menu to redirect
    a signed-in seller to the view where they can manage the shops they own by editing
    or deleting a shop. Before adding the ability to edit or delete shops, next we
    will look into how to retrieve a single shop from the backend and display it to
    the end user.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场应用程序中，我们在导航菜单中添加此链接，以便将已登录的卖家重定向到他们可以编辑或删除商店以管理他们拥有的商店的视图。在添加编辑或删除商店的能力之前，我们接下来将探讨如何从后端检索单个商店并将其显示给最终用户。
- en: Displaying a shop
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示商店
- en: Any users visiting MERN Marketplace will be able to browse through each individual
    shop. In the following sections, we will implement the individual shop view by
    adding a read shop API to the backend, a way to call this API from the frontend,
    and the React component that will display the shop details in the view.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MERN市场的任何用户都将能够浏览每个单独的商店。在以下章节中，我们将通过向后端添加读取商店API、从前端调用此API的方法以及将在视图中显示商店详情的React组件来实现单个商店视图。
- en: The read a shop API
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取商店API
- en: 'In order to implement the read shop API in the backend, we will start by adding
    a `GET` route that queries the `Shop` collection with an ID and returns the shop
    in the response. The route is declared along with a route parameter handler, as
    shown in the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在后端实现读取商店API，我们将首先添加一个`GET`路由，该路由通过ID查询`Shop`集合，并在响应中返回商店。该路由与路由参数处理程序一起声明，如下所示：
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`:'
- en: '[PRE34]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The`:shopId` param in the route URL will invoke the `shopByID` controller method,
    which is similar to the `userByID` controller method. It retrieves the shop from
    the database and attaches it to the request object to be used in the `next` method.
    The `shopByID` method is defined as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 路由URL中的`:shopId`参数将调用`shopByID`控制器方法，该方法类似于`userByID`控制器方法。它从数据库中检索商店并将其附加到请求对象中，以便在`next`方法中使用。`shopByID`方法定义如下：
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The shop object queried from the database will also contain the name and ID
    details of the owner, as we specified in the `populate()` method. The `read` controller
    method then returns this shop object in response to the client. The `read` controller
    method is defined as shown in the following code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库查询到的商店对象也将包含所有者的名称和ID详情，正如我们在`populate()`方法中指定的。然后`read`控制器方法将这个商店对象作为对客户端的响应返回。`read`控制器方法定义如下所示：
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We are removing the image field before sending the response since images will
    be retrieved as files in separate routes. With this API ready in the backend,
    you can now add the implementation to call it in the frontend by adding a `fetch`
    method in `api-shop.js`, similar to other fetch methods already added for other
    API implementations. We will use the `fetch` method to call the read shop API
    in the React component that will render the shop details, as discussed in the
    next section.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送响应之前，我们正在删除图像字段，因为图像将通过单独的路由作为文件检索。有了这个后端API就绪，你现在可以添加在`api-shop.js`中调用它的实现，类似于已为其他API实现添加的其他`fetch`方法。我们将使用`fetch`方法在将渲染商店详情的React组件中调用读取商店API，如下一节所述。
- en: The Shop component
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店组件
- en: 'The `Shop` component will render the shop details and also a list of products
    in the specified shop using a product list component, which will be discussed
    in the *Products* section. The completed single `Shop` view will look as pictured
    in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shop` 组件将渲染商店详情，并使用产品列表组件列出指定商店中的产品，这将在 *产品* 部分进行讨论。完成的单个 `Shop` 视图将如图所示：'
- en: '![](img/5576ec5c-cc59-498c-bb56-cea81e1bcb12.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5576ec5c-cc59-498c-bb56-cea81e1bcb12.png)'
- en: 'To implement this `Shop` component, we will first retrieve the shop details
    with a fetch call to the read API in a `useEffect` hook, and set the received
    values to state, as shown in the following code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个 `Shop` 组件，我们首先会在 `useEffect` 钩子中使用 fetch 调用读取 API 来检索商店详情，并将接收到的值设置到状态中，如下面的代码所示：
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`:'
- en: '[PRE37]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This `useEffect` hook will only run when the `shopId` changes in the route params.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `useEffect` 钩子仅在路由参数中的 `shopId` 发生变化时运行。
- en: 'The retrieved shop data is set to state and rendered in the view to display
    the shop''s name, logo, and description with the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 获取到的商店数据被设置到状态中，并在视图中渲染以显示商店的名称、标志和描述，如下面的代码所示：
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`:'
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `logoUrl` points to the route from where the logo image can be retrieved
    from the database (if the image exists), and it''s defined as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`logoUrl` 指向从数据库中检索标志图像的路由（如果图像存在），其定义如下：'
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`:'
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `Shop` component will be accessed in the browser at the `/shops/:shopId` route,
    which is defined in `MainRouter` as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shop` 组件将通过浏览器中的 `/shops/:shopId` 路由进行访问，该路由在 `MainRouter` 中定义如下：'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE40]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This route can be used in any component to link to a specific shop, and this
    link will take the user to the corresponding `Shop` view with the shop details
    loaded. In the next section, we will add the ability to allow the shop owners
    to edit these shop details.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路由可以在任何组件中使用，以链接到特定的商店，并且这个链接将用户带到加载了商店详细信息的相应 `Shop` 视图。在下一节中，我们将添加允许商店所有者编辑这些商店详细信息的功能。
- en: Editing a shop
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑商店
- en: Authorized sellers in the application will be able to update the shops they
    have already added to the marketplace. To implement this capability, we will have
    to create a backend API that allows the update operation on a given shop after
    ensuring that the requesting user is authenticated and authorized. Then this updated
    API needs to be called from the frontend with the changed details of the shop.
    In the following sections, we will build this backend API and the React component
    to allow sellers to make changes to their shops.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的授权卖家将能够更新他们已经添加到市场中的商店。为了实现这一功能，我们需要创建一个后端 API，允许在确认请求用户已认证并授权后对特定商店进行更新操作。然后需要从前端调用这个更新后的
    API，并传入商店更改的详细信息。在接下来的章节中，我们将构建这个后端 API 和 React 组件，以便卖家可以更改他们的商店信息。
- en: The edit shop API
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商店编辑 API
- en: 'In the backend, we will need an API that allows updating an existing shop in
    the database if the user making the request is the authorized seller of the given
    shop. We will first declare the PUT route that accepts the update request from
    the client as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们需要一个 API，允许如果请求用户是给定商店的授权卖家，则更新数据库中的现有商店。我们首先声明接受客户端更新请求的 PUT 路由如下：
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`:'
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'A PUT request received at the `/api/shops/:shopId` route first checks if the
    signed-in user is the owner of the shop associated with the `shopId` provided
    in the URL using the `isOwner` controller method, which is defined as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `/api/shops/:shopId` 路由接收到的 PUT 请求首先检查已登录用户是否是 URL 中提供的 `shopId` 相关商店的所有者，使用
    `isOwner` 控制器方法，该方法定义如下：
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In this method, if the user is found to be authorized, the `update` controller
    is invoked with a call to `next()`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，如果发现用户是授权的，则通过调用 `next()` 来调用 `update` 控制器。
- en: 'The `update` controller method will use the `formidable` and `fs` modules as
    in the `create` controller method discussed earlier, to parse the form data and
    update the existing shop in the database. The `update` method in the shop controllers is
    defined as shown in the following code:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`控制器方法将使用与前面讨论的`create`控制器方法中相同的`formidable`和`fs`模块来解析表单数据并更新数据库中的现有商店。商店控制器中的`update`方法定义如下所示：'
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: To use this update API in the frontend, you will need to define a `fetch` method
    that takes the shop ID, user auth credentials, and the updated shop details to
    make the fetch call to this update shop API, as we have done for other API implementations
    including the create shop API in the *Creating a new shop* section.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前端使用此更新API，您需要定义一个`fetch`方法，该方法接受商店ID、用户认证凭据和更新的商店详情，以对该更新商店API进行fetch调用，就像我们在*创建新商店*部分中为其他API实现所做的那样。
- en: We now have a shop update API that can be used in the frontend to update the
    details of a shop. We will use this in the `EditShop` component, which is discussed
    next.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们有一个可以用于前端更新商店详情的商店更新API。我们将在下一节讨论的`EditShop`组件中使用此API。 '
- en: The EditShop component
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑商店组件
- en: 'The `EditShop` component will show a form similar to the create new shop form,
    pre-populated with the existing shop details. This component will also show a
    list of the products in this shop, to be discussed in the *Products* section.
    The completed Edit Shop view is pictured in the following screenshot:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditShop`组件将显示一个类似于创建新商店表单的表单，预先填充了现有商店的详情。此组件还将显示此商店的产品列表，将在*产品*部分讨论。完成的编辑商店视图如图所示：'
- en: '![](img/18bbcae5-8299-4b14-a40f-f69bd2e35523.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/18bbcae5-8299-4b14-a40f-f69bd2e35523.png)'
- en: The form part of this view for editing shop details is similar to the form in
    the `NewShop` component, with the same form fields and a `formData` object that
    holds the multipart form data to be sent with the `update` `fetch` method. In
    contrast to the `NewShop` component, in this component, we will need to utilize
    the read shop API to fetch the given shop's details in an `useEffect` hook and
    pre-populate the form fields. You can combine the implementations discussed for
    the `NewShop` component and `Shop` component to complete the `EditShop` component.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图的表单部分用于编辑商店详情，与`NewShop`组件中的表单类似，具有相同的表单字段和一个`formData`对象，该对象包含要随`update`
    `fetch`方法发送的多部分表单数据。与`NewShop`组件相比，在此组件中，我们需要利用读取商店API在`useEffect`钩子中获取指定商店的详情并预先填充表单字段。您可以将针对`NewShop`组件和`Shop`组件讨论的实现结合起来，以完成`EditShop`组件。
- en: 'The `EditShop` component will only be accessible by authorized shop owners.
    So we will add a `PrivateRoute` in the `MainRouter` component as shown next, which
    will render this component only for authenticated users at `/seller/shop/edit/:shopId`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditShop`组件只能由授权的商店所有者访问。因此，我们将在`MainRouter`组件中添加一个`PrivateRoute`，如以下所示，它将只为经过认证的用户在`/seller/shop/edit/:shopId`渲染此组件：'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE44]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This link is added with an edit icon for each shop in the `MyShops` component,
    allowing a seller to access the edit page for each of their shops. In the `MyShops`
    view, sellers are also able to delete their shops, as implemented in the next
    section.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyShops`组件中，为每个商店添加了一个编辑图标，允许卖家访问他们每个商店的编辑页面。在`MyShops`视图中，卖家还可以删除他们的商店，如下一节所述。
- en: Deleting a shop
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除商店
- en: As a part of managing the shops they own, authorized sellers will have the option
    to delete any of their own shops. In order to allow a seller to remove a shop
    from the marketplace, in the following sections, first we will define a backend
    API for shop deletion from the database, and then implement a React component
    that makes use of this API when the user interacts with the frontend to perform
    this deletion.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理他们拥有的商店的一部分，授权卖家将有权删除他们自己的任何商店。为了允许卖家从市场移除商店，在以下章节中，我们首先将定义一个从数据库中删除商店的后端API，然后实现一个React组件，当用户与前端交互以执行此删除时，该组件将使用此API。
- en: The delete shop API
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除商店的API
- en: 'In order to delete a shop from the database, we will implement a delete shop
    API in the backend, which will accept a DELETE request from the client at `/api/shops/:shopId`.
    We will add the `DELETE` route for this API as shown in the following code, which
    will allow an authorized seller to delete one of their own shops:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据库中删除商店，我们将在后端实现一个删除商店API，该API将接受客户端在`/api/shops/:shopId`上的DELETE请求。我们将为这个API添加以下代码所示的`DELETE`路由，这将允许授权卖家删除他们自己的商店之一：
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/shop.routes.js`:'
- en: '[PRE45]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'When a DELETE request is received at this route, if the `isOwner` method confirms
    that the signed-in user is the owner of the shop, then the `remove` controller
    method deletes the shop specified by the `shopId` in the param. The `remove` method
    is defined as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到此路由的DELETE请求时，如果`isOwner`方法确认已登录的用户是该商店的所有者，那么`remove`控制器方法将删除由参数中的`shopId`指定的商店。`remove`方法定义如下：
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/shop.controller.js`:'
- en: '[PRE46]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This `remove` method simply deletes the shop document that corresponds to the
    provided ID from the `Shops` collection in the database. To access this backend
    API in the frontend, you will also need a `fetch` method with this route, similar
    to other API implementations. The `fetch` method will need to take the shop ID
    and current user's auth credentials then call the delete shop API with these values.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`remove`方法简单地从数据库中的`Shops`集合中删除与提供的ID相对应的商店文档。为了在前端访问这个后端API，你还需要一个具有此路由的`fetch`方法，类似于其他API实现。`fetch`方法需要获取商店ID和当前用户的认证凭证，然后使用这些值调用删除商店API。
- en: The `fetch` method will be used when the user performs the delete operation
    by clicking a button in the frontend interface. In the next section, we will discuss
    a React component called `DeleteShop`, where this delete shop action will be performed
    by the user.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在前端界面中点击按钮执行删除操作时，将使用`fetch`方法。在下一节中，我们将讨论一个名为`DeleteShop`的React组件，用户将通过该组件执行删除商店操作。
- en: The DeleteShop component
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除商店组件
- en: 'The `DeleteShop` component is added to the `MyShops` component for each shop
    in the list. It takes the `shop` object and a `onRemove` method as props from
    `MyShops`. This component is basically a button that, when clicked, opens a `Dialog`
    component asking the user to confirm the delete action, as shown in the following
    screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteShop`组件被添加到列表中的每个商店的`MyShops`组件中。它从`MyShops`接收`shop`对象和`onRemove`方法作为props。此组件基本上是一个按钮，当点击时，会打开一个`Dialog`组件，提示用户确认删除操作，如下面的截图所示：'
- en: '![](img/be1cb170-87e7-481a-be9b-90862d50edd8.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be1cb170-87e7-481a-be9b-90862d50edd8.png)'
- en: 'The implementation of the `DeleteShop` component is similar to the `DeleteUser`
    component discussed in [Chapter 4,](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml) *Adding
    a React Frontend to Complete MERN*. Instead of a user ID, the `DeleteShop` component
    will take the `shop` object and `onRemove` function definition from the `MyShops` component
    as props when it is added to `MyShops`, as shown in the following code:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteShop`组件的实现类似于在第4章中讨论的`DeleteUser`组件，即*添加React前端以完成MERN*。当它添加到`MyShops`时，`DeleteShop`组件将从`MyShops`组件接收`shop`对象和`onRemove`函数定义作为props，如下所示：'
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/MyShops.js`:'
- en: '[PRE47]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: With this implementation, authorized sellers will be able to remove a shop that
    they own from the marketplace.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种实现，授权卖家将能够从市场上删除他们拥有的商店。
- en: We have implemented the shop module for the marketplace by first defining the
    Shop model for storing shop data, and then integrating the backend APIs and frontend
    views to be able to perform CRUD operations on shops from the application. These
    shop features, with the ability to create new shops, display a shop, edit and
    delete shops, will allow both buyers and sellers to interact with the shops in
    the marketplace. The shops will also have products, discussed next, which the
    owners will manage and the buyers will be able to browse through, with an option
    to add products to their cart.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过首先定义用于存储商店数据的Shop模型，然后集成后端API和前端视图，以便能够在应用程序中执行对商店的CRUD操作，从而实现了市场中的商店模块。这些商店功能，包括创建新商店、显示商店、编辑和删除商店的能力，将允许买家和卖家与市场中的商店进行交互。商店还将拥有以下讨论的产品，所有者将负责管理，买家将能够浏览，并可以选择将产品添加到购物车中。
- en: Adding products to shops
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将产品添加到商店
- en: Products are the most crucial aspect of a marketplace application. In the MERN
    Marketplace, sellers can manage products in their shops, and visitors can search
    for and browse products. While we will implement the features to allow authorized
    sellers to add, modify, and delete products from their shops, we will also incorporate
    features to list products in ways that are meaningful to the end user. In the
    application, we will retrieve and display products by a specific shop, products
    related to a given product, and the latest products added to the marketplace. In
    the following sections, we will build out the product module incorporating these
    features by first defining a product model for storing product data in the database,
    and then implementing the backend APIs and frontend views for the product-related
    features including adding new products to a shop, rendering different lists of
    products, displaying a single product, editing products, and deleting products.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 产品是市场应用中最关键的部分。在 MERN 市场中，卖家可以管理他们店铺中的产品，访客可以搜索和浏览产品。虽然我们将实现允许授权卖家添加、修改和删除他们店铺中产品的功能，但我们还将整合对最终用户有意义的列出产品的方式。在应用中，我们将通过特定店铺、与给定产品相关联的产品以及最新添加到市场中的产品来检索和显示产品。在接下来的章节中，我们将通过首先定义用于在数据库中存储产品数据的
    `product` 模型，然后实现与产品相关功能的后端 API 和前端视图来构建产品模块，包括向店铺添加新产品、渲染不同的产品列表、显示单个产品、编辑产品和删除产品。
- en: Defining a Product model
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义产品模型
- en: Products will be stored in a product collection in the database. To implement
    this, we will add a Mongoose model to define a Product model for storing the details
    of each product. This model will be defined in `server/models/product.model.js`,
    and the implementation will be similar to other Mongoose model implementations
    covered in previous chapters, like the Course model defined in [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml), *Building
    a Web-Based Classroom Application*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 产品将存储在数据库中的产品集合中。为了实现这一点，我们将添加一个 Mongoose 模型来定义一个 `Product` 模型，用于存储每个产品的详细信息。此模型将在
    `server/models/product.model.js` 中定义，其实现将与之前章节中覆盖的其他 Mongoose 模型实现类似，如第 6 章[构建基于
    Web 的课堂应用](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml)中定义的课程模型。
- en: 'For MERN Marketplace, we will keep the product schema simple with support for
    fields such as product `name`, `description`, `image`, `category`, `quantity`,
    `price`, `created at`, `updated at`, and a reference to the shop. The code defining
    the product fields in the product schema are given in the following list, along
    with explanations:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 MERN 市场来说，我们将保持产品架构简单，支持 `name`、`description`、`image`、`category`、`quantity`、`price`、`created
    at`、`updated at` 以及对店铺的引用等字段。定义产品架构中产品字段的代码如下，以及相应的解释：
- en: '**Product name and description**: The `name` and `description` fields will
    be `String` types, with `name` as a `required` field:'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称和描述**：`name` 和 `description` 字段将被定义为 `String` 类型，其中 `name` 是一个 `required`
    字段：'
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '**Product image**: The `image` field will store an image file to be uploaded
    by the user as data in the MongoDB database:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品图片**：`image` 字段将存储用户上传到 MongoDB 数据库中的图片文件：'
- en: '[PRE49]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '**Product category**: The `category` value will allow grouping products of
    the same type together:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品类别**：`category` 值将允许将相同类型的产品分组在一起：'
- en: '[PRE50]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '**Product quantity**: The `quantity` field will represent the amount available
    for selling in the shop:'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品数量**：`quantity` 字段将表示店铺中可供销售的产品的数量：'
- en: '[PRE51]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '**Product price**: The `price` field will hold the unit price this product
    will cost the buyer:'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品价格**：`price` 字段将保存此产品将花费买家的单价：'
- en: '[PRE52]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '**Product shop**: The `shop` field will reference the shop to which the product
    was added:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品店铺**：`shop` 字段将引用添加产品的店铺：'
- en: '[PRE53]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '**Created and updated at times**: The `created` and `updated` fields will be
    `Date` types, with `created` generated when a new product is added, and the `updated`
    time changed when the product''s details are modified:'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和更新时间**：`created` 和 `updated` 字段将被定义为 `Date` 类型，`created` 字段在添加新产品时生成，而
    `updated` 时间在修改产品详情时改变：'
- en: '[PRE54]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The fields in this schema definition will enable us to implement the product-related
    features in MERN Marketplace. To begin the implementation of these features, in
    the next section, we will implement the full-stack slice that will allow sellers
    to add new products to their existing shops in the marketplace.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 此架构定义中的字段将使我们能够在 MERN 市场中实现产品相关功能。为了开始这些功能的实现，在下一节中，我们将实现一个全栈切片，允许卖家向他们在市场中的现有店铺添加新产品。
- en: Creating a new product
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新产品
- en: Sellers in MERN Marketplace will be able to add new products to the shops they
    own on the platform. To implement this feature, in the following sections we will
    add a create product API in the backend, along with a way to fetch this API in
    the frontend, and a create new product form view that takes user input for product
    fields.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: MERN市场中的卖家将能够向他们在平台上拥有的商店添加新产品。为了实现此功能，在接下来的章节中，我们将在后台添加创建产品API，以及在前端获取此API的方法，还有一个用于收集用户输入的产品字段的新产品表单视图。
- en: The create product API
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建产品API
- en: 'We will add a backend API that will let authorized shop owners save new products
    to the database with a `POST` request from the client side. In order to implement
    this create product API in the backend, we will first add a route at `/api/products/by/:shopId`,
    which accepts a `POST` request containing the product data. Sending a request
    to this route will create a new product associated with the shop identified by
    the `:shopId` param. This create product API route is declared as shown in the
    following code:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个后端API，允许授权的店主通过客户端的`POST`请求将新产品保存到数据库中。为了在后台实现这个创建产品API，我们首先将在`/api/products/by/:shopId`路径下添加一个路由，该路由接受包含产品数据的`POST`请求。向此路由发送请求将创建一个与`:shopId`参数指定的商店相关联的新产品。此创建产品API路由的声明如下所示：
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE55]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `product.routes.js` file containing this route declaration will be very
    similar to the `shop.routes.js` file, and to load these new routes in the Express
    app, we need to mount the product routes in `express.js`, as shown next:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 包含此路由声明的`product.routes.js`文件将与`shop.routes.js`文件非常相似，为了在Express应用中加载这些新路由，我们需要在`express.js`中挂载产品路由，如下所示：
- en: '`mern-marketplace/server/express.js`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/express.js`:'
- en: '[PRE56]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The code to handle a request to the create product API route will first check
    that the current user is the owner of the shop to which the new product will be
    added before creating the new product in the database. This API utilizes the `shopByID` and `isOwner` methods
    from the shop controller to process the `:shopId` param and to verify that the
    current user is the shop owner, before invoking the `create` controller method. The
    `create` method is defined as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 处理创建产品API路由请求的代码将首先检查当前用户是否为新产品将被添加的商店的所有者，然后在数据库中创建新产品。此API利用来自商店控制器的`shopByID`和`isOwner`方法来处理`:shopId`参数，并在调用`create`控制器方法之前验证当前用户是否是商店所有者。`create`方法定义如下：
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE57]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This `create` method, in the product controller, uses the `formidable` node
    module to parse the multipart request that may contain an image file uploaded
    by the user along with the product fields. The parsed data is then saved to the
    Products collection as a new product.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在产品控制器中，此`create`方法使用`formidable`节点模块来解析可能包含用户上传的图像文件以及产品字段的multipart请求。然后，解析后的数据被保存到产品集合中作为新产品。
- en: In the frontend, to use this create product API, you will also need to set up
    a `fetch` method in `client/product/api-product.js` to make a `POST` request to
    the create API by passing the multipart form data from the view. This `fetch`
    method can then be utilized in the React component, which takes the product details
    from the user and sends the request to create a new product. The implementation
    of this form-based React component to create new products is discussed in the
    next section.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用此创建产品API，你还需要在`client/product/api-product.js`中设置一个`fetch`方法，通过传递从视图中的multipart表单数据来向创建API发送`POST`请求。然后，此`fetch`方法可以在React组件中使用，该组件从用户那里获取产品详情并发送请求以创建新产品。基于此表单的React组件创建新产品的实现将在下一节中讨论。
- en: The NewProduct component
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新产品组件
- en: 'An authorized seller who already has a shop created in the marketplace will
    see a form view for adding new products to the shop. We will implement this form
    view in a React component named `NewProduct`. The `NewProduct` component will
    be similar to the `NewShop` component. It will contain a form that allows a seller
    to create a product by entering a name, description, category, quantity, and price,
    and to upload a product image file from their local filesystem, as pictured in
    the following screenshot:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场平台上已经创建店铺的授权卖家将看到一个用于添加新产品的表单视图。我们将在这个名为 `NewProduct` 的 React 组件中实现这个表单视图。`NewProduct`
    组件将与 `NewShop` 组件类似。它将包含一个表单，允许卖家通过输入名称、描述、类别、数量和价格来创建产品，并从他们的本地文件系统中上传产品图片文件，如图下截图所示：
- en: '![](img/a6dcfa2a-ed05-40c5-90c2-01538f736a4b.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a6dcfa2a-ed05-40c5-90c2-01538f736a4b.png)'
- en: 'The `NewProduct` component can be implemented almost exactly the same as the
    `NewShop` component, with the exception of retrieving the shop ID from the frontend
    route URL that will render the `NewProduct` component. This component will load
    at a route that is associated with a specific shop, so only signed-in users who
    are sellers can add a product to a shop they own. To define this route, we add
    a `PrivateRoute` in the `MainRouter` component as shown next, which will render
    this form only for authorized users at the URL `/seller/:shopId/products/new`:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`NewProduct` 组件可以几乎与 `NewShop` 组件完全相同地实现，唯一的区别是从渲染 `NewProduct` 组件的前端路由 URL
    中检索店铺 ID。此组件将在与特定店铺关联的路由上加载，因此只有登录的卖家才能向他们拥有的店铺添加产品。为了定义此路由，我们在 `MainRouter` 组件中添加了一个
    `PrivateRoute`，如下所示，它将只为授权用户在 URL `''/seller/:shopId/products/new''` 上渲染此表单：'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE58]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Adding this link for a specific shop to any view in the frontend will render
    the `NewProduct` component for the signed-in user. In this view, the users will
    be able to fill out the new product details in the form and then save the product
    to the database in the backend, only if they are the authorized owner of the given
    shop. Next, we will look into the implementations for retrieving and displaying
    these products on different lists.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端视图中的任何地方添加此特定店铺的链接将渲染 `NewProduct` 组件供登录用户使用。在这个视图中，用户将能够填写表单中的新产品详细信息，然后如果他们是给定店铺的授权所有者，将产品保存到后端数据库中。接下来，我们将探讨检索和在不同列表中显示这些产品的实现方法。
- en: Listing products
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出产品
- en: In MERN Marketplace, products will be presented to users in multiple ways. The
    two main distinctions will be in the way products are listed for sellers and the
    way they are listed for buyers. In the following sections, we will see how to
    list products in a shop for both sellers and buyers, then also discuss how to
    list product suggestions for buyers, featuring products that are related to a
    specific product, along with the latest products added to the marketplace.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MERN 市场平台上，产品将以多种方式向用户展示。两个主要区别在于产品对于卖家和买家的列出方式。在以下章节中，我们将了解如何为卖家和买家列出店铺中的产品，然后还将讨论如何列出为买家提供的产品建议，包括与特定产品相关的产品以及最新添加到市场平台的产品。
- en: Listing by shop
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按店铺列出
- en: Visitors to the marketplace will browse products in each shop, and sellers will
    manage a list of products in each of their shops. Both these features will share
    the same backend API that will retrieve all the products for a specific shop but
    will be rendered differently for the two types of users. In the following sections,
    first, we will implement the backend API for fetching the products in a specific
    shop. Then, we will use the API in two different React components to render the
    list of products to the seller of the shop in one component, and to the buyers
    in another component.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 市场平台的访客将浏览每个店铺中的产品，卖家将管理他们每个店铺中的产品列表。这两个功能将共享相同的后端 API，该 API 将检索特定店铺的所有产品，但将为两种类型的用户以不同的方式渲染。在以下章节中，首先，我们将实现用于检索特定店铺中产品的后端
    API。然后，我们将使用该 API 在两个不同的 React 组件中渲染产品列表，一个用于店铺的卖家，另一个用于买家。
- en: The products by shop API
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 店铺产品 API
- en: 'In order to implement the backend API to retrieve products from a specific
    shop in the database, we will set up a `GET` route at `/api/products/by/:shopId`,
    as shown in the following code:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现从数据库中检索特定店铺产品的后端 API，我们将在 `/api/products/by/:shopId` 上设置一个 `GET` 路由，如下面的代码所示：
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE59]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The `listByShop` controller method executed in response to this request will
    query the Product collection to return the products matching the given shop''s
    reference. The `listByShop` method is defined as shown in the following code:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对此请求执行`listByShop`控制器方法将查询产品集合以返回与给定商店引用匹配的产品。`listByShop`方法定义如下代码所示：
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE60]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Each product in the resulting products array will contain the name and ID details
    of the associated shop, and we will omit the `image` field since images can be
    retrieved via separate API routes.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 结果产品数组中的每个产品都将包含相关商店的名称和ID详情，我们将省略`image`字段，因为可以通过单独的API路由检索图像。
- en: In the frontend, to fetch the products in a specific shop using this API to
    list by shop, we will also need to add a `fetch` method in `api-product.js`, similar
    to our other API implementations. Then, the `fetch` method can be called in any
    React component to render the products, for example, to display products in a
    shop to all buyers, as discussed in the next section.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，为了使用按商店列表的API获取特定商店的产品，我们还需要在`api-product.js`中添加一个`fetch`方法，类似于我们的其他API实现。然后，可以在任何React组件中调用`fetch`方法来渲染产品，例如，在下一节中讨论的显示给所有买家的商店中的产品。
- en: Products component for buyers
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 买家产品组件
- en: 'We will build a `Products` component, mainly for displaying the products to
    visitors who may buy the products. We can reuse this component across the application
    to render different product lists relevant to the buyer. It will receive the product
    list as props from a parent component that displays a list of products. A rendered
    Products view may look as shown in the following screenshot:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个`Products`组件，主要用于向可能购买产品的访客展示产品。我们可以在整个应用程序中重用此组件以渲染与买家相关的不同产品列表。它将从显示产品列表的父组件接收产品列表作为props。渲染后的产品视图可能看起来如下截图所示：
- en: '![](img/ab101983-f154-4f96-bc60-6509979c0896.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab101983-f154-4f96-bc60-6509979c0896.png)'
- en: 'In the marketplace application, the list of products in a shop will be displayed
    to the user in an individual `Shop` view. So this `Products` component is added
    to the `Shop` component and given the list of relevant products as props, as shown
    next:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场应用程序中，商店中的产品列表将以单独的`Shop`视图的形式显示给用户。因此，此`Products`组件被添加到`Shop`组件中，并提供了相关产品的列表作为props，如下所示：
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`:'
- en: '[PRE61]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The `searched` prop relays whether this list is a result of a product search,
    so appropriate messages can be rendered.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`searched` prop传递了此列表是否是产品搜索的结果，因此可以渲染适当的消息。'
- en: 'In the `Shop` component, we need to add a call to the `listByShop` fetch method
    in a `useEffect` hook to retrieve the relevant products and set it to state, as
    shown in the following code:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Shop`组件中，我们需要在`useEffect`钩子中添加对`listByShop` fetch方法的调用以检索相关产品并将其设置到状态中，如下所示代码所示：
- en: '`mern-marketplace/client/shop/Shop.js`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/Shop.js`:'
- en: '[PRE62]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `Products` component, if the product list sent in the props contains
    products, the list is iterated over and the relevant details of each product are
    rendered in a Material-UI `GridListTile`, with a link to the individual product
    view and an `AddToCart` component (the implementation for which is discussed in
    [Chapter 8](7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml), *Extending the Marketplace
    for Orders and Payments*. The code to render the list of products is added as
    follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Products`组件中，如果通过props传入的产品列表包含产品，则会遍历列表，并在Material-UI的`GridListTile`中渲染每个产品的相关详情，包括指向单个产品视图的链接以及`AddToCart`组件（其实现将在第8章[7514f26d-29e1-46e2-ac46-7515b2c3a6d0.xhtml]中讨论，*扩展订单和支付的市场*。以下是添加渲染产品列表的代码：
- en: '`mern-marketplace/client/product/Products.js`:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Products.js`:'
- en: '[PRE63]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: If the `products` array sent in the props is found to be empty, and this was
    a result of a search action by the user, we render an appropriate message to inform
    the user that no products were found.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在props中发送的`products`数组被发现为空，并且这是用户搜索操作的结果，我们将渲染一条适当的消息来通知用户没有找到产品。
- en: This `Products` component can be used to render different lists of products
    for buyers, including products in a shop, products by category, and products in
    search results. In the next section, we will implement a `MyProducts` component
    that will render a list of products only for shop owners, giving them a different
    set of interaction options.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `Products` 组件可以用来渲染不同类型的买家产品列表，包括商店中的产品、按类别划分的产品以及搜索结果中的产品。在下一节中，我们将实现一个
    `MyProducts` 组件，它将只为商店老板渲染产品列表，为他们提供一组不同的交互选项。
- en: MyProducts component for shop owners
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为商店老板的 MyProducts 组件
- en: 'In contrast to the `Products` component, the `MyProducts` component in `client/product/MyProducts.js`
    is only for displaying products to sellers so they can manage the products in
    each shop they own and will be displayed to the end user as pictured in the following
    screenshot:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Products` 组件不同，`client/product/MyProducts.js` 中的 `MyProducts` 组件仅用于向卖家展示产品，以便他们可以管理他们拥有的每个商店中的产品，并且将如图所示显示给最终用户：
- en: '![](img/e9532c67-1d7a-4a33-bcf3-1633f80b84d0.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9532c67-1d7a-4a33-bcf3-1633f80b84d0.png)'
- en: 'The `MyProducts` component is added to the `EditShop` view as shown in the
    following code, so sellers can manage a shop and its contents in one place. It
    is provided with the shop''s ID in a prop so that relevant products can be fetched:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如下代码所示，将 `MyProducts` 组件添加到 `EditShop` 视图中，以便卖家可以在一个地方管理商店及其内容。它通过属性提供商店的 ID，以便可以获取相关产品：
- en: '`mern-marketplace/client/shop/EditShop.js`:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/shop/EditShop.js`:'
- en: '[PRE64]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'In `MyProducts`, the relevant products are first loaded in a state with an
    `useEffect` hook using the `listByShop` fetch method, as shown in the following
    code:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MyProducts` 中，相关产品首先使用 `listByShop` 获取方法，通过 `useEffect` 钩子加载到一个状态，如下面的代码所示：
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/MyProducts.js`:'
- en: '[PRE65]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This list of products is then iterated over with each product rendered in the `ListItem` components
    along with edit and delete options, similar to the `MyShops` list view. The edit
    button links to the Edit Product view. The `DeleteProduct` component handles the
    delete action, and reloads the list by calling an `onRemove` method passed from
    `MyProducts` to update the state with the updated list of products for the current
    shop.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 此产品列表随后被迭代，每个产品都在 `ListItem` 组件中渲染，并附带编辑和删除选项，类似于 `MyShops` 列表视图。编辑按钮链接到编辑产品视图。`DeleteProduct`
    组件处理删除操作，并通过调用从 `MyProducts` 传递的 `onRemove` 方法来重新加载列表，以更新当前商店的产品列表状态。
- en: 'The `removeProduct` method, defined in `MyProducts`, is provided as the `onRemove`
    prop to the `DeleteProduct` component. The `removeProduct` method is defined as
    follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MyProducts` 中定义的 `removeProduct` 方法作为 `onRemove` 属性传递给 `DeleteProduct` 组件。`removeProduct`
    方法定义如下：
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/MyProducts.js`:'
- en: '[PRE66]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Then it is passed as a prop to the `DeleteProduct` component when it is added
    to `MyProducts` as shown next:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当它被添加到 `MyProducts` 中时，作为属性传递给 `DeleteProduct` 组件，如下所示：
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/MyProducts.js`:'
- en: '[PRE67]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Implementing a separate `MyProducts` component this way gives the shop owner
    the ability to see the list of products in their shop with the option to edit
    and delete each. In the next section, we will complete the implementation for
    retrieving different types of product lists from the backend and rendering them
    as product suggestions for buyers in the frontend.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式实现一个单独的 `MyProducts` 组件，使商店老板能够查看他们商店中的产品列表，并可选择编辑和删除每个产品。在下一节中，我们将完成从后端检索不同类型产品列表的实现，并在前端将它们作为买家产品建议渲染。
- en: Listing product suggestions
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出产品建议
- en: Visitors to MERN Marketplace will see product suggestions, such as the latest
    products added to the marketplace and products related to the product they are
    currently viewing. In the following sections, we will first look at the implementation
    of the backend APIs for retrieving the latest products and a list of products
    related to a given product, and then implement a React component called Suggestions
    to render these lists of products.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 MERN 市场的访客将看到产品建议，例如最新添加到市场中的产品以及与他们当前查看的产品相关的产品。在接下来的几节中，我们将首先查看获取最新产品和给定产品相关产品列表的后端
    API 实现，然后实现一个名为 Suggestions 的 React 组件来渲染这些产品列表。
- en: Latest products
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最新产品
- en: 'On the home page of the MERN Marketplace, we will display five of the latest
    products added to the marketplace. To fetch the latest products, we will set up
    a backend API that will receive a `GET` request at `/api/products/latest`, as
    shown in the following code:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN Marketplace的主页上，我们将显示最近添加到市场的五个最新产品。为了获取最新产品，我们将设置一个后端API，该API将在`/api/products/latest`接收`GET`请求，如下所示：
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE68]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'A `GET` request received at this route will invoke the `listLatest` controller
    method. This method will find all products, sort the list of products in the database
    with the `created` date field from newest to oldest, and return the first five
    from the sorted list in the response. This `listLatest` controller method is defined
    as follows:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在此路由接收到的`GET`请求将调用`listLatest`控制器方法。此方法将找到所有产品，按数据库中产品的`created`日期字段从新到旧排序产品列表，并在响应中返回排序列表中的前五个。此`listLatest`控制器方法定义如下：
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE69]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: To use this API in the frontend, you will also need to set up a corresponding
    `fetch` method in `api-product.js` for this latest products API, similar to other
    API implementations. This retrieved list will then be rendered in the `Suggestions`
    component to be added to the home page. Next, we will discuss a similar API for
    retrieving a list of related products.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前端使用此API，您还需要在`api-product.js`中设置相应的`fetch`方法，用于此最新产品API，类似于其他API实现。然后，检索到的列表将被渲染在`Suggestions`组件中，以添加到主页。接下来，我们将讨论用于检索相关产品列表的类似API。
- en: Related products
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关产品
- en: In each individual product view, we will show five related products as suggestions.
    To retrieve these related products, we will set up a backend API that accepts
    a request at `/api/products/related`, as shown in the following code.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个单个产品视图中，我们将展示五个相关产品作为建议。为了检索这些相关产品，我们将设置一个后端API，该API在`/api/products/related`接收请求，如下所示。
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE70]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The`:productId` param in the route URL route will call the `productByID` controller
    method, which is similar to the `shopByID` controller method, and retrieves the
    product from the database and attaches it to the request object to be used in
    the `next` method. The `productByID` controller method is defined as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 路由URL中的`:productId`参数将调用`productByID`控制器方法，该方法类似于`shopByID`控制器方法，从数据库中检索产品并将其附加到请求对象中，以便在`next`方法中使用。`productByID`控制器方法定义如下：
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE71]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Once the product is retrieved, the `listRelated` controller method is invoked.
    This method queries the `Product` collection in the database to find other products
    with the same category as the given product, excluding the given product, and
    returns the first five products in the resulting list. This `listRelated` controller
    method is defined as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦检索到产品，就会调用`listRelated`控制器方法。此方法查询数据库中的`Product`集合，以找到与给定产品具有相同类别的其他产品（不包括给定产品），并返回结果列表中的前五个产品。此`listRelated`控制器方法定义如下：
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE72]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In order to utilize this related products API in the frontend, we will set up
    a corresponding `fetch` method in `api-product.js`. The `fetch` method will be
    called in the `Product` component with the product ID to populate the `Suggestions`
    component rendered in the product view. We will look at the implementation of
    this `Suggestions` component in the next section.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端利用此相关产品API，我们将在`api-product.js`中设置相应的`fetch`方法。`fetch`方法将在`Product`组件中使用产品ID调用，以填充产品视图中渲染的`Suggestions`组件。我们将在下一节查看此`Suggestions`组件的实现。
- en: The Suggestions component
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建议组件
- en: 'The `Suggestions` component will be rendered on the home page and on an individual
    product page to show the latest products and related products, respectively. Once
    rendered, the `Suggestions` component may look as shown in the following screenshot:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`Suggestions`组件将在主页和单个产品页面上渲染，分别显示最新产品和相关产品。一旦渲染，`Suggestions`组件可能看起来如下所示：'
- en: '![](img/e32fbd8f-3a5c-4a2d-9415-c8d5ae3915a4.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e32fbd8f-3a5c-4a2d-9415-c8d5ae3915a4.png)'
- en: 'This component will receive the relevant list of products from the parent component
    as props, along with a title for the list:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件将从父组件接收相关的产品列表作为props，以及列表的标题：
- en: '[PRE73]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: In the `Suggestions` component, the received list is iterated over and individual
    products are rendered with relevant details, a link to the individual product
    page, and an `AddToCart` component, as shown in the following code.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Suggestions` 组件中，遍历接收到的列表，并使用相关详细信息、单个产品页面链接和 `AddToCart` 组件渲染单个产品，如下所示。
- en: '`mern-marketplace/client/product/Suggestions.js`:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Suggestions.js`:'
- en: '[PRE74]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: This `Suggestions` component can be reused to render any list of products to
    buyers, and in this section, we have discussed how to retrieve and display two
    different lists of products. Each product in the lists is linked to a view that
    will render details of the individual product. In the next section, we will look
    at the implementation of reading and displaying a single product to the end user.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `Suggestions` 组件可以被重用来向买家渲染任何产品列表。在本节中，我们讨论了如何检索和显示两个不同的产品列表。列表中的每个产品都链接到一个视图，该视图将渲染单个产品的详细信息。在下一节中，我们将查看读取和向最终用户显示单个产品的实现。
- en: Displaying a product
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示产品
- en: Visitors to the MERN Marketplace will be able to view more details of each product
    in a separate view. In the following sections, we will implement a backend API
    to retrieve a single product from the database and then use it in the frontend
    to render the single product in a React component.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 MERN 市场的访客将能够查看每个产品的更多详细信息。在以下章节中，我们将实现一个后端 API 来从数据库中检索单个产品，然后在前端使用它来在 React
    组件中渲染单个产品。
- en: Read a product API
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取产品 API
- en: 'In the backend, we will add an API with a `GET` route that queries the Products
    collection with an ID and returns the product in the response. The route will
    be declared as shown in the following code:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端，我们将添加一个带有 `GET` 路由的 API，该路由通过 ID 查询产品集合并返回响应中的产品。该路由的声明如下所示：
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE75]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The`:productId` param in the URL invokes the `productByID` controller method,
    which retrieves the product from the database and appends it to the request object.
    The product in the request object is used by the `read` controller method to respond
    to the `GET` request. The read controller method is defined as follows:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: URL 中的 `:productId` 参数调用 `productByID` 控制器方法，该方法从数据库中检索产品并将其附加到请求对象中。请求对象中的产品被
    `read` 控制器方法用于响应 `GET` 请求。`read` 控制器方法定义如下：
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE76]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: To use this read product API in the frontend, we will need to add a `fetch`
    method in `client/product/api-product.js`, similar to other API implementations.
    Then this `fetch` method can be used in the React component, which will render
    the individual product details, as discussed in the next section.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 要在前端使用这个读取产品 API，我们需要在 `client/product/api-product.js` 中添加一个 `fetch` 方法，类似于其他
    API 实现。然后这个 `fetch` 方法可以在 React 组件中使用，该组件将渲染单个产品详细信息，如下一节所述。
- en: Product component
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品组件
- en: 'We will add a React component named `Product` to render the individual product
    details, along with an add to cart option. In this single product view, we will
    also show a list of related products, as pictured in the following screenshot:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个名为 `Product` 的 React 组件来渲染单个产品的详细信息，并提供添加到购物车的选项。在这个单个产品视图中，我们还将显示相关产品的列表，如图所示：
- en: '![](img/a73d395e-7600-4c12-92ac-955d2496864e.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a73d395e-7600-4c12-92ac-955d2496864e.png)'
- en: 'The `Product` component can be accessed in the browser at the `/product/:productID`
    route, which is defined in `MainRouter` as follows:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`Product` 组件可以通过 `/product/:productID` 路由在浏览器中访问，该路由在 `MainRouter` 中定义如下：'
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE77]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The product details and the related product list data will be fetched by calling
    the relevant APIs with `useEffect` hooks using the `productId` specified in the
    route param, as shown in the following code:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `useEffect` 钩子调用相关 API 并使用路由参数中指定的 `productId` 来获取产品详情和相关产品列表数据，如下所示：
- en: '`mern-marketplace/client/product/Product.js`:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Product.js`:'
- en: '[PRE78]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: In the first `useEffect` hook, we call the `read`  API to retrieve the specified
    product and set it to state. In the second hook, we call the `listRelated` API
    to get the list of related products and set it to the state to be passed as a
    prop to a `Suggestions` component added in the product view.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个 `useEffect` 钩子中，我们调用 `read` API 来检索指定的产品并将其设置到状态中。在第二个钩子中，我们调用 `listRelated`
    API 来获取相关产品的列表并将其设置到要作为属性传递给在产品视图中添加的 `Suggestions` 组件的状态中。
- en: 'The product details part of the component displays relevant information about
    the product and an `AddToCart` component in a Material-UI `Card` component, as
    shown in the following code:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的产品详细信息部分显示有关产品的相关信息以及一个Material-UI `Card`组件中的`AddToCart`组件，如下面的代码所示：
- en: '`mern-marketplace/client/product/Product.js`:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Product.js`:'
- en: '[PRE79]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The `Suggestions` component is added in the `Product` view with the related
    list data passed as a prop, as shown next:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在“产品”视图中添加了`建议`组件，该组件通过属性传递相关列表数据，如下所示：
- en: '`mern-marketplace/client/product/Product.js`:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Product.js`:'
- en: '[PRE80]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: With this view complete, visitors to the marketplace application will be able
    to find out more about a specific product as well as explore other similar products.
    In the next section, we will discuss how to add the ability for shop owners to
    edit and delete the products they added to the marketplace.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此视图后，市场应用程序的访客将能够了解更多关于特定产品的信息，以及探索其他类似的产品。在下一节中，我们将讨论如何为店主添加编辑和删除他们添加到市场中的产品的能力。
- en: Editing and deleting a product
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑和删除产品
- en: Implementations to edit and delete products in the application are similar to
    editing and deleting shops, as covered in the previous sections, *Editing a shop*
    and *Deleting a shop*. These functionalities will require the corresponding APIs
    in the backend, fetch methods in the frontend, and React component views with
    forms and actions. In the following sections, we will highlight the frontend view,
    route, and backend API endpoints for editing and deleting a product from the marketplace.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中编辑和删除产品的方法与编辑和删除商店的方法类似，如前几节所述，*编辑商店*和*删除商店*。这些功能将需要在后端使用相应的API、在前端使用获取方法，以及带有表单和操作的React组件视图。在以下章节中，我们将突出显示编辑和从市场删除产品的前端视图、路由和后端API端点。
- en: Edit
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑
- en: The edit functionality is very similar to the create product functionality we
    implemented earlier. The `EditProduct` form component, which can be implemented
    to render a form that allows product detail modification, will also only be accessible
    by verified sellers at `/seller/:shopId/:productId/edit`.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑功能与我们之前实现的创建产品功能非常相似。可以实现的`EditProduct`表单组件，可以渲染一个允许修改产品详细信息的表单，也仅对经过验证的卖家在`/seller/:shopId/:productId/edit`处可访问。
- en: 'To restrict access to this view, we can add a `PrivateRoute` in `MainRouter`
    to declare the route to the `EditProduct` view as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 要限制对此视图的访问，我们可以在`MainRouter`中添加一个`PrivateRoute`来声明指向`EditProduct`视图的路由，如下所示：
- en: '`mern-marketplace/client/MainRouter.js`:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/MainRouter.js`:'
- en: '[PRE81]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The `EditProduct` component contains the same form as `NewProduct`, but with
    populated values of the product retrieved using the read product API. On form
    submit, it uses a `fetch` method to send multipart form data with a PUT request
    to the edit product API in the backend at `/api/products/by/:shopId`. This backend
    route declaration for the edit product API will be as follows:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditProduct`组件包含与`NewProduct`相同的表单，但使用读取产品API检索的产品值进行填充。在表单提交时，它使用`fetch`方法通过PUT请求将多部分表单数据发送到后端在`/api/products/by/:shopId`处的编辑产品API。此编辑产品API的后端路由声明如下：'
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE82]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The `update` controller method is invoked when an authorized user sends a PUT
    request to this API. It is similar to the product `create` method and the shop
    `update` method. It handles the multipart form data using `formidable` and extends
    the product details to save the updates to the database.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 当授权用户向此API发送PUT请求时，将调用`update`控制器方法。它与产品`create`方法和商店`update`方法类似。它使用`formidable`处理多部分表单数据，并将产品详细信息扩展以保存到数据库中的更新。
- en: This implementation of an edit product form view integrated with an update API
    in the backend will allow shop owners to modify the details of products in their
    shops. Next, we will look at the highlights for integrating product deletion functionality
    to the application.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 此编辑产品表单视图的实现与后端更新API集成，将允许店主修改他们商店中产品的详细信息。接下来，我们将探讨将产品删除功能集成到应用程序中的重点。
- en: Delete
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除
- en: In order to implement the delete product functionality, we can implement a `DeleteProduct`
    component similar to the `DeleteShop` component, and add it to the `MyProducts`
    component for each product in the list. It can take the `product` object, `shopID`,
    and an `onRemove` method as a prop from `MyProducts`, as discussed in the *MyProducts
    component for shop owners* section.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现删除产品功能，我们可以实现一个类似于`DeleteShop`组件的`DeleteProduct`组件，并将其添加到`MyProducts`组件中，为列表中的每个产品。它可以从`MyProducts`组件中作为属性接收`product`对象、`shopID`和`onRemove`方法，如*为店主提供的`MyProducts`组件*部分所述。
- en: 'The component will function the same as `DeleteShop`, opening a dialog for
    confirmation on button-click and then, when the delete intent is confirmed by
    the user, calling the `fetch` method for delete, which makes the DELETE request
    to the server at `/api/product/:shopId/:productId`. This backend API for deleting
    a product from the database will be declared as follows with the other product
    routes:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 组件将像`DeleteShop`一样工作，在按钮点击时打开一个确认对话框，然后，当用户确认删除意图后，调用用于删除的`fetch`方法，该方法向服务器在`/api/product/:shopId/:productId`处发出DELETE请求。此从数据库删除产品的后端API将如下声明，与其他产品路由一起声明：
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE83]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The `remove` controller method will be invoked if an authorized user makes the
    DELETE request to this API, and it will delete the specified product from the
    database, like the `remove` controller method for shops.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如果授权用户向此API发出DELETE请求，则将调用`remove`控制器方法，并从数据库中删除指定的产品，就像为商店的`remove`控制器方法一样。
- en: We started the implementation of the product-related features for the marketplace
    in this section by first defining a schema for storing product details and then
    discussing the full-stack slices for creating, listing, reading, updating, and
    deleting products in the application. In the next section, we will look into how
    to allow users in the marketplace to search for products in varied ways, so they
    can easily find the products they are looking for.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中开始实现市场产品相关功能，首先定义一个用于存储产品详情的模式，然后讨论创建、列出、读取、更新和删除应用程序中产品的全栈切片。在下一节中，我们将探讨如何允许市场中的用户以不同的方式搜索产品，以便他们可以轻松找到他们想要的产品。
- en: Searching for products with name and category
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过名称和类别搜索产品
- en: In MERN Marketplace, visitors will be able to search for specific products by
    name and also in a specific category. In the following sections, we will discuss
    how this search functionality can be added by first looking at backend APIs that
    will retrieve the distinct categories from the Products collection, and perform
    the search query against the products stored. Then, we will discuss different
    cases for utilizing these APIs, such as a view to perform the search action and
    a view for displaying products by categories.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在MERN市场，访客将能够通过名称和特定类别搜索特定产品。在接下来的章节中，我们将讨论如何通过首先查看从产品集合中检索独特类别的后端API，并对存储的产品执行搜索查询来添加此搜索功能。然后，我们将讨论利用这些API的不同情况，例如执行搜索操作的视图和按类别显示产品的视图。
- en: The categories API
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别API
- en: 'To allow users to select a specific category to search in, we will first set
    up an API that retrieves all the distinct categories present in the Products collection
    in the database. A `GET` request to `/api/products/categories` will return an
    array of unique categories, and this route is declared as shown here:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户选择一个特定的类别进行搜索，我们首先设置一个API，该API从数据库中产品集合检索所有独特的类别。对`/api/products/categories`的`GET`请求将返回一个唯一类别的数组，并且此路由如以下所示声明：
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE84]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The `listCategories` controller method queries the Products collection with
    a `distinct` call against the `category` field, as shown in the following code:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`listCategories`控制器方法使用以下代码对`Products`集合执行针对`category`字段的`distinct`调用：'
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE85]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This categories API can be used in the frontend with a corresponding `fetch`
    method to retrieve the array of distinct categories and displayed in the view.
    This can be paired with a search API to allow users to search for products by
    its name in a specific category. In the next section, we will discuss this search
    API.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 此类别API可以在前端使用相应的`fetch`方法检索独特类别的数组并在视图中显示。这可以与搜索API配对，允许用户在特定类别中通过其名称搜索产品。在下一节中，我们将讨论此搜索API。
- en: The search products API
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索产品API
- en: 'We can define a search products API that will take a `GET` request at `/api/products?search=value&category=value`,
    with query parameters in the URL to query the Products collection with the provided
    search text and category values. The route for this search API will be defined
    as follows:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义一个搜索产品的API，该API将接受一个`GET`请求，URL为`/api/products?search=value&category=value`，其中URL中的查询参数用于查询包含提供的搜索文本和类别值的Products集合。此搜索API的路由定义如下：
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/routes/product.routes.js`:'
- en: '[PRE86]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The `list` controller method will first process the query parameters in the
    request, then find products in the given category, if any, with names that partially
    match with the provided search text. This `list` method is defined as shown in
    the following code:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`控制器方法首先处理请求中的查询参数，然后在给定类别中查找具有与提供的搜索文本部分匹配的名称的产品（如果有的话）。此`list`方法定义如下：'
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/server/controllers/product.controller.js`:'
- en: '[PRE87]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The resulting products returned against the provided query parameters in the
    request are populated with shop details and downsized by removing the image field
    value, before being sent back in the response. To use this API in the frontend
    to perform a product search, we will need a `fetch` method that can construct
    the query parameters in the request URL, as discussed in the next section.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 根据请求中提供的查询参数返回的结果产品将填充商店详情，并通过删除图像字段值进行缩小，然后作为响应发送回。为了在前端使用此API执行产品搜索，我们需要一个可以构造请求URL中查询参数的`fetch`方法，如下一节所述。
- en: Fetch search results for the view
  id: totrans-433
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取视图的搜索结果
- en: To utilize this search API in the frontend, we will set up a method that constructs
    the URL with query parameters and calls a fetch to make a request to the search
    product API. This `fetch` method will be defined as follows.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前端使用此搜索API，我们将设置一个方法来构造带有查询参数的URL，并调用`fetch`来向搜索产品API发起请求。此`fetch`方法定义如下。
- en: '`mern-marketplace/client/product/api-product.js`:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/api-product.js`:'
- en: '[PRE88]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: In order to construct the query parameters in the correct format, we will use
    the `query-string` node module, which will help stringify the params object into
    a query string that can be attached to the request route URL. The keys and values
    in this params object will be defined by the React component where we call this
    `list` method. Next, we will look at the `Search` component, which will utilize
    this method to enable the end user to search for products in the marketplace.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以正确的格式构造查询参数，我们将使用`query-string`节点模块，它将帮助将params对象转换为可以附加到请求路由URL的查询字符串。此params对象中的键和值将由调用此`list`方法的React组件定义。接下来，我们将查看`Search`组件，该组件将利用此方法使最终用户能够在市场上搜索产品。
- en: The Search component
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索组件
- en: 'The first use case for applying the categories API and search API together
    to perform a search action is in the `Search` component. This component, once
    implemented and functional, will render as shown in the following screenshot:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 将类别API和搜索API结合使用以执行搜索操作的第一个用例是在`Search`组件中。一旦实现并功能化，该组件将如图所示：
- en: '![](img/0c9b6d9c-46d2-4394-b9ec-ae4007260df1.png)'
  id: totrans-440
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c9b6d9c-46d2-4394-b9ec-ae4007260df1.png)'
- en: 'This `Search` component provides the user with a simple form containing a search
    input text field and a dropdown of the category options received from a parent
    component that will retrieve the list using the distinct categories API. The code
    to render this search form view will be as follows:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Search`组件为用户提供了一个简单的表单，包含一个搜索输入文本字段和一个来自父组件的类别选项下拉菜单，该父组件将使用不同的类别API检索列表。渲染此搜索表单视图的代码如下：
- en: '`mern-marketplace/client/product/Search.js`:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Search.js`:'
- en: '[PRE89]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Once the user enters a search text and hits *Enter*, we will make a call to
    the `search` method. To detect that the *Enter* key was pressed, we use the `onKeyDown`
    attribute on the `TextField` and define the `enterKey` handler method as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入搜索文本并按下*Enter*键时，我们将调用`search`方法。为了检测是否按下了*Enter*键，我们使用`TextField`上的`onKeyDown`属性，并定义如下`enterKey`处理方法：
- en: '`mern-marketplace/client/product/Search.js`:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Search.js`:'
- en: '[PRE90]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The `search` method makes a call to the search API using the `list` fetch method,
    providing it with the necessary search query parameters and values. This `search`
    method is defined as shown in the following code:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: “搜索”方法使用`list`获取方法调用搜索API，并向它提供必要的搜索查询参数和值。此“搜索”方法定义如下所示：
- en: '`mern-marketplace/client/product/Search.js`:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Search.js`:'
- en: '[PRE91]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'In this method, the query parameters provided to the `list` method are the
    search text value, if any, and the selected category value. Then the results array
    received from the backend is set to the values in state and passed as a prop to
    the `Products` component, as shown next, to render the matching products underneath
    the search form:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，提供给`list`方法的查询参数是搜索文本值（如果有）和所选类别值。然后，从后端接收到的结果数组被设置为状态中的值，并作为属性传递给`Products`组件，如下所示，以在搜索表单下方渲染匹配的产品：
- en: '`mern-marketplace/client/product/Search.js`:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`mern-marketplace/client/product/Search.js`:'
- en: '[PRE92]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: This search view gives visitors a useful tool to look for the specific product
    they want among many that may be stored in the database for the complete marketplace.
    In the next section, we will look at another simple use case for utilizing the
    categories and search APIs in the frontend.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 这个搜索视图为访客提供了一个有用的工具，可以在可能存储在完整市场数据库中的许多产品中查找他们想要的具体产品。在下一节中，我们将探讨在前端利用类别和搜索API的另一个简单用例。
- en: The Categories component
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别组件
- en: 'The `Categories` component is the second use case for the distinct categories
    and search APIs. For this component, we first fetch the list of categories in
    a parent component and send it as props to display the categories to the user,
    as shown in the following screenshot:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: “类别”组件是独特类别和搜索API的第二个用例。对于这个组件，我们首先在父组件中获取类别列表，并将其作为属性发送以向用户显示类别，如下面的截图所示：
- en: '![](img/e0cdf37a-d434-45ff-9d28-ef6f24f8f4f7.png)'
  id: totrans-456
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e0cdf37a-d434-45ff-9d28-ef6f24f8f4f7.png)'
- en: When the user selects a category in the displayed list, a call is made to the
    Search API with just a category value, and the backend returns all the products
    in the selected category. The returned products are then rendered in a `Products`
    component. This can be a simple way to combine these APIs and display meaningful
    products to buyers browsing through the marketplace.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在显示列表中选择一个类别时，会调用带有仅类别值的搜索API，后端返回所选类别的所有产品。然后，这些返回的产品将在“产品”组件中渲染。这可以是一种简单的方法来组合这些API，并向浏览市场的买家展示有意义的商品。
- en: In this first version of the MERN Marketplace, users can become sellers to create
    shops and add products, and visitors can browse shops and search for products,
    while the application also suggests products to the visitors.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个MERN市场的第一个版本中，用户可以成为卖家来创建商店并添加产品，访客可以浏览商店并搜索产品，同时应用程序还会向访客推荐产品。
- en: Summary
  id: totrans-459
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started building an online marketplace application using
    the MERN stack. The MERN skeleton was extended to allow users to have active seller
    accounts, so they can create shops and add products to each shop with the intention
    to sell to other users. We also explored how to utilize the stack to implement
    features such as product browsing, searching, and suggestions for regular users
    who are interesting in buying.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始使用MERN堆栈构建在线市场应用程序。MERN骨架被扩展，以便用户可以拥有活跃的卖家账户，这样他们就可以创建商店并向每个商店添加产品，目的是向其他用户销售。我们还探讨了如何利用堆栈来实现产品浏览、搜索和为对购买感兴趣的普通用户提供建议等功能。
- en: While going through the implementations in this chapter, we explored how to
    lay down the foundations with full-stack implementations to be able to combine
    and extend interesting features such as search and suggestions. You can apply
    these same approaches while building out other full-stack applications that may
    require these features.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览本章的实现过程中，我们探讨了如何通过全栈实现来奠定基础，以便能够组合和扩展诸如搜索和建议等有趣的功能。您可以在构建可能需要这些功能的其他全栈应用程序时应用这些相同的方法。
- en: Even with these features incorporated, a marketplace application is still incomplete
    without a shopping cart for checkout, order management, and payment processing.
    In the next chapter, we will grow our marketplace application to add these advanced
    features and learn more about how the MERN stack can be used to implement these
    core aspects of an e-commerce application.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 即使包含了这些功能，一个市场应用如果没有购物车、订单管理和支付处理功能，仍然是不完整的。在下一章中，我们将扩展我们的市场应用，添加这些高级功能，并了解如何使用MERN堆栈来实现电子商务应用的核心方面。
