- en: 'Chapter 2: Creating User Interfaces with Ant Design'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the principles of `antd` library, which offers a variety of React
    components you can use to accelerate user interface development.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll study the `antd` library and create user interfaces using
    it. The first section will introduce you to the project we will develop, a **Customer
    Relationship Management** (**CRM**) application. Then, we'll configure the layout
    plugin and theme. We'll create the home page and configure internationalization
    support (also known as **i18n**). Finally, we'll make the **Opportunities** page,
    **Customers** page, and **Reports** page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the project and Ant Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the layout and theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the home page and setting up i18n
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Opportunities and Customers pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the **Reports** page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to search and find the right
    component to meet your needs in the `antd` library. You'll have learned how to
    configure `plugin-layout`, customize your application's default theme, and define
    global styles. You'll also know how to set up support for internationalization
    using `plugin-locale`.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*,
    Environment Setup and Introduction to UmiJS* (VScode, Node.js, and Yarn).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the complete project in the `Chapter02` folder on the GitHub repository
    available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the project and Ant Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will introduce you to the project we'll develop and the Ant Design
    React library.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the real-world use of UmiJS and Ant Design, we'll develop a frontend
    application for a CRM system.
  prefs: []
  type: TYPE_NORMAL
- en: A CRM system is a business application that allows a company to approach a customer,
    offer a solution, and develop a relationship with various strategic contacts to
    sell the right solution to the customer and guarantee their satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the application has three main features: a dashboard with various
    reports, a registry tracking opportunities, and a registry of customers.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll also guarantee that our application is easy to be extended and modified
    in the face of business requirements, has a clean code style, and supports internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: To build the interfaces of our frontend application, we'll use the Ant Design
    React library. Let's learn more about the `antd` library and the Pro components.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Ant Design components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ant Design library is a React components library created following the design
    principles of the Ant Design system. The Ant Design library was written in TypeScript
    and offers predictable static types, internationalization support, and theme customization.
    The library is also deeply integrated with UmiJS, so it's easy to customize the
    theme and set internationalization support using it with UmiJS.
  prefs: []
  type: TYPE_NORMAL
- en: You can browse the library and look for components at [https://ant.design/components/overview/](https://ant.design/components/overview/).
    On this documentation page, you will find detailed descriptions of every library
    component and use case examples followed by their respective code.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also use some components from **Pro components**, a set of components
    derived from Ant Design, to provide a high level of abstraction, making the task
    of building complex interfaces easier. You can look for Pro components at [https://procomponents.ant.design/en-US/components](https://procomponents.ant.design/en-US/components).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the Ant Design React library and were introduced
    to the project we will build. Let's start building the interfaces by setting the
    default layout and theme.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the layout and theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll set up a default layout using `plugin-layout` and customize
    our application theme, changing the default LESS variables used by `antd`. To
    do that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use the project we created in the previous chapter. Add the `plugin-layout`
    configuration to the `config.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration adds a page header and a menu for all pages, defines the
    application name and logo, and enables `plugin-locale` in layout components.
  prefs: []
  type: TYPE_NORMAL
- en: You can also change the layout as you need. For example, you can set the menu
    to appear in the header instead of a side menu, changing the `layout` property
    to `top`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also change the primary color that all interfaces and components use.
    Add this configuration to the `config.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The theme configuration changes the default values of LESS variables used by
    Ant Design components.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the default LESS variables at [https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less](https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add some configurations for `plugin-layout` in the `app.tsx`
    file. Add the following to the `app.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this configuration, we set the routes `plugin-layou`t that will render
    on the side menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display menu items correctly in the side menu, adjust the route configuration
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: routes.ts
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We defined the routes to the login page and the home page. The `layout: false`
    property will make the default layout not appear on the login page. The `name`
    and `icon` properties define how the `Home` page will appear on the side menu.'
  prefs: []
  type: TYPE_NORMAL
- en: Ant Design provides the icon, and you can look for other icons at [https://ant.design/components/icon/](https://ant.design/components/icon/).
  prefs: []
  type: TYPE_NORMAL
- en: Now let's finish our default layout by adding a quick menu, a language selector,
    and changing its style to use our primary color.
  prefs: []
  type: TYPE_NORMAL
- en: Adding right-side content to the layout header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s create two new components: `HeaderMenu`, which will contain the
    user''s avatar, the user''s name, and the logout menu item; and the `HeaderOptions`
    component, which will include the `HeaderMenu` and the `SelectLang` components.
    `SelectLang` is a component provided by UmiJS to change between languages supported
    by the application through `plugin-locale`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create the `HeaderMenu` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `components` in the `src` folder and inside it, create
    a new folder named `HeaderMenu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `HeaderMenu` folder, create two files: `index.tsx` and `index.less`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `index.tsx` file, create the component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this component, we use the `antd` library `Menu` component to render the
    logout menu item and the `Dropdown` and `Avatar` components to render the user's
    avatar and the user's name. The logout option will appear when you mouse over
    the username or avatar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the CSS classes for the `Avatar` and `Dropdown` components in the `index.less`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now follow these steps to create the `HeaderOptions` component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `components` folder, create a new folder named `HeaderOptions`. Inside
    it, create a file called `index.tsx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `index.tsx` file, create the component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this component, we use the `Space` component of `antd` and the recently created
    `HeaderMenu` component with the `SelectLang` component from UmiJS to render the
    layout header options.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The language selector (SelectLang component)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.01_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – The language selector (SelectLang component)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to add the `HeaderOptions` component to the layout, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `HeaderOptions` component, adding this line to the `app.tsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `HeaderOptions` component to the `rightContentRender configuration`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now the `HeaderOptions` component should appear in the layout header as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Layout right content'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.02_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Layout right content
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the language selector did not appear. It will appear
    once we add language support to the project.
  prefs: []
  type: TYPE_NORMAL
- en: To finish setting up our layout, let's add the primary color. We can customize
    the CSS class applied to the layout header using the `global.less` file to add
    the primary color.
  prefs: []
  type: TYPE_NORMAL
- en: UmiJS will apply the `global.less` file before all other style sheets, so when
    you need to customize some style or apply it across all interfaces, you can do
    that using this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to customize the CSS class applied to the layout header:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file under the `src` folder named `global.less`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this style to the `global.less` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We added a background gradient using our primary color to the CSS class and
    applied that to the global header.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can find CSS classes applied to HTML elements by inspecting the page with
    your browser dev tools. Usually, you need to press *F12* and look for the **Elements**
    tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the layout header should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Layout header with primary color applied'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.03_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Layout header with primary color applied
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we set up the default layout for all pages by configuring `plugin-layout`
    and customizing the layout using the `global.less` file. We also created the components
    to render the user's avatar, the user's name, and the language selector. Now let's
    build the home page and set up internationalization.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the home page and setting up i18n
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create the home page and set up the application's internationalization
    for Portuguese and English.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our home page will be composed of two main components: `PageContainer` and
    `ProTable`. When users log in to the application, we want them to see some information
    such as the user''s name, role, and a list of recently opened opportunities. To
    do that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the `PageContainer` component to the `index.tsx` file
    under the `src/pages/Home` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By default, the `PageContainer` component will render the page title you defined
    as the route name in the `routes.ts` file, but we set it to `undefined` as we
    don't want to display the title on this page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll add some basic information to the content of `PageContainer`. We
    want it so that when the user logs into the application, they see a greeting followed
    by their name, role, and avatar, so go ahead and add the following information
    to the `content` property of `PageContainer` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we added the `Avatar` component from `antd` followed by the greeting,
    the user's name, and role.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to define the styles in the file `index.less`. Add these styles
    to the `index.less` file under the `src/pages/Home` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we imported a file called `default.less` from `antd`. This file
    contains the default LESS variables used by Ant Design components to define the
    styles. We are using some of these variables in our CSS classes too.
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend you familiarize yourself with these variables; this will
    help you maintain a consistent style with the Ant Design specification. You can
    access the `default.less` file by pressing *Ctrl* and clicking on its import path,
    or you can see the file on GitHub at [https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less](https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less).
  prefs: []
  type: TYPE_NORMAL
- en: The next component we'll add to our page is `ProTable`; this is a Pro components
    component that abstracts the logic for manipulating a batch of data in a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the component, we need to install its package, so run this command to
    do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `ProTable` component inside the `PageContainer` component in
    the `index.tsx` file under `src/pages/Home` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, your home page should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Home page interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.04_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Home page interface
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time to add support for **internationalization** (**i18n**) to our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up internationalization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add support to i18n using `plugin-locale`, first, we must move all the text
    we want to translate to multi-language files under the `src/locales` folder. I''ll
    build the entire application in English and Portuguese to demonstrate this feature,
    but you don''t need to worry about it; you can download the Portuguese files available
    at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
    Follow these steps to create our language files:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `en-US.ts` under the `src/locales` folder, download the
    file `pt-BR.ts`, and place it under the same folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the texts for the home page in the `en-US.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to change the texts on the home page with the `FormattedMessage` component.
    Import the component in the `index.ts` file under the `src/pages` folder, adding
    this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And change the text of the component as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also change the `ProTable` `headerTitle` property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `FormattedMessage` component property `id` must match the same key in the
    `en-US.ts` and the `pt-BR.ts` files. As you select the language, the component
    will render the corresponding text.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want the menu titles translated, so let''s add files to translate menu items.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named `en-US` under the `src/locales` folder. Under the
    `en-US` folder, create a new file named `menu.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the text to render in the menu item to the `menu.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The key for the text needs to match the `name` property in the `routes.ts` file.
    `plugin-locale` will render the correct text as you change between languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `menu.ts` file into the `en-US.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also need to add the `menu.ts` file to the Portuguese language, so create
    a new folder named `pt-BR`, under the `src/locales` folder, download the `menu.ts`
    file available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs),
    and place it under the `pt-BR` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can change the application''s language using the language selector
    at the top of the page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Home page with the Portuguese language selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.05_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Home page with the Portuguese language selected
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the home page using the `PageContainer` and `ProTable`
    components. We also set up internationalization by creating multi-language files
    under the `src/locales` folder and using the `FormattedMessage` component to replace
    the texts with their corresponding translations.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you'll use what you learned to create the **Opportunities** and **Customers**
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Opportunities and Customers pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll build the **Opportunities** and **Customers** pages.
  prefs: []
  type: TYPE_NORMAL
- en: The **Opportunities** page allows users to browse and register a new sale opportunity.
    A sale opportunity occurs when a customer seems interested in buying a product
    or service. On the **Opportunities** page, we track all activities performed until
    the opportunity is won, when the customer buys the product or service, or until
    the opportunity is lost, when the customer buys a competitor's product or withdraws
    from the purchase.
  prefs: []
  type: TYPE_NORMAL
- en: The **Customers** page allows users to register and search for customers' contact
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'These two pages are similar; they use the `ProTable` component to list the
    opportunities and customers registered. Run the following commands to generate
    the two pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s start with the **Customers** page. Follow these steps to build
    the **Customers** page interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `PageContainer` and the `ProTable` components to the `index.tsx` file
    under the `src/pages/Customer` folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we use the `FormattedMessage` component to render the texts on this
    page, so we need to add these texts to multi-language files in the `src/locales`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the text present on the `en-US.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to access the `routes.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the customer menu item title to the `menu.ts` file under the `src/locales/en-US`
    folder as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s build the **Opportunities** page following the steps demonstrated
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `headerTitle` property of `ProTable`, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the **Opportunities** page route as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't forget to add the texts to the `en-US.ts` and `menu.ts` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Opportunities page layout and menu items'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.06_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Opportunities page layout and menu items
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the `ProTable` component with support for internationalization.
    Next, we'll build the **Reports** page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Reports page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we'll build the **Reports** page. Users can access helpful information
    on this page to get insights into the sales life cycle. We'll add three charts
    to this page using the chart component library bizcharts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bizcharts library is focused on business scenarios and dedicated to creating
    professional data visualization solutions. It''s also an open source project licensed
    under the MIT license. You can learn more about bizcharts at [https://bizcharts.taobao.com/](https://bizcharts.taobao.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, run this command to install the bizcharts package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, run this command to generate the **Reports** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, follow these steps to create the **Reports** page interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the page layout with `antd` components. Add the following components
    to the `index.tsx` file under the `src/pages/Reports` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We defined the layout with two responsive rows, and the first row has two responsive
    columns. The `colProps` variable sets how the columns should adjust their size
    at different breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the first chart. This chart will show the four most important
    opportunities classified by the CRM analytics service. Add the `Chart` component
    from bizcharts inside the first column of the first row as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can configure the `Chart` component with its children components. We set
    the chart to invert the *x* and *y* axis with the `Coordinate` component. With
    the `Axis` component, we defined a new axis called `revenue`. The `Interval` component
    described the chart type and the keys that will populate the axis using the `position`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we set an empty array in the `data` property. We'll put the information
    we want to display in the `data` property in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the second chart. This chart will show where the customers come
    from and in what proportion. Add the `Chart` component to the second column of
    the first row as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this chart, we set the `Coordinate` component to cylindrical coordinates
    to generate a pie chart. With the `Interaction` component, we set the chart to
    react when it is moused over or clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last chart shows the opportunities gained and lost by month. Add the `Chart`
    component to the second row as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To finish the `en-US.ts` file under the `src/locales` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And add the following text to the `menu.ts` file under the `src/locales/en-US`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, configure the `routes.ts` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the **Reports** page is finished and should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Reports page layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.07_B18503.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Reports page layout
  prefs: []
  type: TYPE_NORMAL
- en: Notice that all chart cards are empty because we defined empty arrays in all
    chart `data` properties. We'll generate the data required to show the charts in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we created the **Reports** page using the bizcharts library.
    We added three charts to our page: a bar chart called **Top opportunities**, a
    pie chart called **Leads by source**, and a bar chart called **Opportunities Won/Lost
    by month**.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the project we'll build, the Ant Design
    React library, and Pro components. You also learned how to configure the layout
    using the UmiJS layout plugin and define and customize the global layout using
    the `global.less` file. You learned how to customize the application theme by
    changing the default LESS variables used by Ant Design components.
  prefs: []
  type: TYPE_NORMAL
- en: We also created and defined our application layout's right-side content to show
    the user's name, avatar, and a language selector. You learned how to set up internationalization
    using the UmiJS locale plugin and created the home page. Next, we made the `ProTable`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we built the **Reports** page using **antd** library components to
    define the layout and the bizcharts library to render three charts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll generate a mock API, make requests to the backend,
    and learn how to use services and models.
  prefs: []
  type: TYPE_NORMAL
