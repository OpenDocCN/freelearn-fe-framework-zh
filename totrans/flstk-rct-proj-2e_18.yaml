- en: Making the VR Game Dynamic using MERN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will extend the **MongoDB**, **Express.js**, **React.js**,
    **and Node.js** (**MERN**) skeleton application to build the MERN VR Game application,
    and use it to convert the static React 360 game developed in the previous chapter
    into a dynamic game. We will achieve this by replacing the sample game data with
    game details fetched directly from the database. We will use the MERN stack technologies
    to implement a game model and **Create, Read, Update, and Delete** (**CRUD**)
    **application programming interfaces** (**APIs**) in the backend, which will allow
    storage and retrieval of games, and frontend views, which will allow users to
    make their own games besides playing any of the games on the platform in their
    browser. We will update and integrate the game developed with React 360 into the
    game platform developed with MERN technologies. After completing these implementations
    and integration, you will be able to design and build your own full-stack web
    applications with dynamic VR features.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make MERN VR Game a complete and dynamic game application, we will implement
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A game model schema to store game details in MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs for game CRUD operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React views for creating, editing, listing, and deleting games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the React 360 game to fetch data with the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading the VR game with dynamic game data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the dynamic MERN VR Game application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we will develop the MERN VR Game application with
    MERN-stack technologies. On this platform, registered users will be able to make
    and modify their own games by providing an equirectangular image for the game
    world, and the VR object resources, including transform property values for each
    object to be placed in the game world. Any visitor to the application will be
    able to browse through all the games added by the makers and play any game, to
    find and collect the 3D objects in the game world that are relevant to the clue
    or description of each game. When a registered user signs into the application,
    they will see a home page with all the games listed and an option to make their
    own game, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad11f43c-0c43-4c0e-997a-f2cdbc62a86f.png)'
  prefs: []
  type: TYPE_IMG
- en: The code for the complete MERN VR Game application is available on GitHub at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter14/mern-vrgame](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter14/mern-vrgame). You
    can clone this code and run the application as you go through the code explanations
    for the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The views needed for the MERN VR Game application will be developed by extending
    and modifying the existing React components in the MERN skeleton application. The
    component tree pictured in the following screenshot shows all the custom React
    components that make up the MERN VR Game frontend developed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc786562-af28-45cf-a355-457b1f6919e2.png)'
  prefs: []
  type: TYPE_IMG
- en: We will add new React components related to creating, editing, and listing VR
    games, and will also modify existing components such as the `Profile`, `Menu`,
    and `Home` components as we build out the features of the MERN VR Game application
    in the rest of the chapter. The core features in this game platform depend on
    the capability to store specific details of each game. In the next section, we
    will begin implementing the MERN VR Game application by defining a game model
    for storing details of each game.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Game model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to store details of each game in the platform, we will implement a
    Mongoose model to define a Game model, and the implementation will be similar
    to other Mongoose model implementations covered in previous chapters, such as
    the Course model defined in [Chapter 6](c58ac055-5a1e-4bf4-b8a6-c9b311cf267a.xhtml),
    *Building a Web-Based Classroom Application*. In [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml),
    *Developing a Web-Based VR Game*, the *Game data structure* section laid out the
    details needed for each game in order to implement the scavenger-hunt features
    defined for the gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: We will design the game schema based on these specific details about the game,
    its VR objects, and also a reference to the game maker. In the following sections,
    we will discuss the specifics of the game schema, the sub-schema for storing individual
    VR objects that will be a part of the game, and the validation check to ensure
    a minimum number of VR objects are placed in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the game schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The game schema, which defines the game model with a structure for the game
    data, will specify the fields to store details about each game. These details
    will include a game name; a link for the game world image file, text description,
    or clue; arrays containing details of 3D objects in the game, timestamps indicating
    when the game was created or updated; and a reference to the user who created
    the game. The schema for the game model will be defined in `server/models/game.model.js`, and
    the code defining these game fields is given in the following list, with explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Game name**: The `name` field will store a title for the game. It is declared
    to be a `String` type and will be a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**World image URL**: The `world` field will contain the URL pointing to the
    equirectangular image that makes up the 3D world of the game. It is declared to
    be a `String` type and will be a required fielde:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Clue text**: The `clue` field will store text of `String` type to give a
    description of the game or clues about how to complete the game:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Collectable and other VR objects**: The `answerObjects` field will be an
    array containing details of the VR objects to be added to the game as collectable objects,
    whereas the `wrongObjects` field will be an array with VR objects that cannot
    be collected in the game. Objects in these arrays will be defined in a separate
    VR object schema, as discussed in the next section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Created at and updated at times**: The `created` and `updated` fields will
    be `Date` types, with `created` generated when a new game is added, and `updated`
    changed when any game details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Game maker**: The `maker` field will be a reference to the user who made
    the game:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These fields added in the game schema definition will capture details of each
    game on the platform and allow us to implement the game-related features in the
    MERN VR Game application. The VR objects to be stored in the `answerObjects` and
    `wrongObjects` arrays in the game schema will hold details of each VR object to
    be placed in the game world. In the next section, we will explore the schema defining
    the details to be stored for each VR object.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the VR object schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `answerObjects` and `wrongObjects` fields already defined in the game schema
    will both be arrays of VR object documents. These documents will represent the
    VR objects that are a part of the game. We will define the VR object Mongoose
    schema for these documents separately, with fields for storing the URLs of the
    **object** (**OBJ**) file and **Material Template Library** (**MTL**) file, along
    with the React 360 transform values, the scale value, and color value for each
    VR object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The schema for the VR object will also be defined in `server/models/game.model.js`, and
    the code defining these fields is given in the following list, with explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OBJ and MTL file URLs**: The `objUrl` and `mtlUrl` fields will store the
    links to the OBJ and MTL files representing the 3D object data. These fields will
    be of `String` type and are required fields for storing a VR object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Translation transform values**: The `translateX`, `translateY`, and `translateZ` fields
    will hold the position values of the VR object in 3D space. These fields will
    be of `Number` type, and the default value for each will be `0`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Rotation transform values**: The `rotateX`, `rotateY`, and `rotateZ` fields
    will hold the orientation values of the VR object in 3D space. These fields will
    be of `Number` type, and the default value for each will be `0`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Scale**: The `scale` field will represent the relative size appearance of
    the VR object. This field will be of `Number` type, and the default value will
    be `1`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Color**: The `color` field will specify the default color of the object if
    it is not provided in the MTL file. This field will be of `String` type, and the
    default value will be `white`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: These fields in the VR object schema represent a VR object to be added to the
    game world. When a new game document is saved to the database, the `answerObjects`
    and `wrongObjects` arrays will be populated with `VRObject` documents that adhere
    to this schema definition. When a user is creating a new game using this Game
    model with the defined game and VR object schemas, we want to ensure the user
    adds at least one VR object to each array in the game data. In the next section,
    we will take a look at how to add this validation check to the Game model.
  prefs: []
  type: TYPE_NORMAL
- en: Validating array length in the game schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the game schema defining the Game model, we have two arrays for adding VR
    objects to the game. These `answerObjects` and `wrongObjects` arrays in a game
    document must contain at least one VR object in each array when a game is being
    saved in the game collection. To add this validation for a minimum array length
    to the game schema, we will add the following custom validation checks to the
    `answerObjects` and `wrongObjects` paths in the `GameSchema` defined with Mongoose.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use `validate` to add the array length validation for the `answerObjects`
    field, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/models/game.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this validation check, if the array length is found to be `0`, we throw a
    validation error message indicating that at least one object must be added to
    the array, before saving the game document in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same validation code is also added for the `wrongObjects` field, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/models/game.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These checks run every time a game is to be saved in the database and help ensure
    the game is made with at least two VR objects, including one object that can be
    collected and another object that cannot be collected. These schema definitions
    and validations used for defining the Game model will allow a game database for
    the application to be maintained. This game collection will cater to all the requirements
    for developing a dynamic VR game according to the specifications of the MERN VR
    Game application. In order to allow users to access the game collection, for both
    making their own games and retrieving games made by others, we need to implement
    corresponding CRUD APIs in the backend. In the next section, we will implement
    these CRUD APIs that will allow users to create, read, list, update, and delete
    games from the application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing game CRUD APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build a game platform that allows VR games to be made, managed,
    and accessed, we need to extend the backend to accept requests that enable game
    data manipulation in the database. To make these features possible, the backend
    in the MERN VR Game application will expose a set of CRUD APIs for creating, editing,
    reading, listing, and deleting games from the database, which can be used in the
    frontend of the application with fetch calls, including in the React 360 game
    implementation. In the following sections, we will implement these CRUD API endpoints
    in the backend, along with the corresponding `fetch` methods that will be deployed
    in the frontend to use these APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A user who is signed in to the application will be able to create new games
    in the database with the create game API endpoint. For the implementation of this
    API in the backend, we will first declare a `POST` route at `/api/games/by/:userId`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A `POST` request to this route will process the `:userId` param, verify that the
    current user is signed in, and then create a new game with the game data passed
    in the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `game.routes.js` file containing this route declaration will be very similar
    to the `user.routes` file, and to load these new routes in the Express app, we
    need to mount the game routes in `express.js`, just as we did for the auth and
    user routes. The game routes can be mounted in the Express app by adding the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will make the declared game routes available for receiving requests when
    the server is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a request is received by this create game API, to process the `:userId` param
    and retrieve the associated user from the database we will utilize the `userByID` method
    from the user controller. We will also add the following code to the game routes,
    so the user is available in the `request` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user authentication is verified after receiving the `POST` request
    containing the game data in the body, the `create` controller method is invoked
    next, to add the new game to the database. This `create` controller method is
    defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this `create` method, a new game document is created according to the game
    model and the data passed in the request body from the client side. Then, this
    document is saved in the Game collection after the user reference is set as the
    game maker.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the frontend, we will add a corresponding `fetch` method in `api-game.js`
    to make a `POST` request to the create game API by passing the form data collected
    from the signed-in user. This `fetch` method is defined as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This `fetch` method will be used in the frontend and provided the new game data
    with the user credentials needed to make the `POST` request to the create game
    API. The response from the `fetch` method will tell the user if the game was created
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: This create game API endpoint is ready to be used in a form view that can collect
    the new game details from the user, so new games can be added to the database.
    In the next section, we will implement an API endpoint that will retrieve the
    games already added to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Listing all games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the MERN VR Game application, it will be possible to retrieve a list of
    all the games in the Game collection from the database using a list games API
    in the backend. We will implement this API endpoint in the backend by adding a
    `GET` route to the game routes, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A `GET` request to `/api/games` will execute the `list` controller method, which will
    query the Game collection in the database, to return all the games in the response
    to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `list` controller method will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this method, the results retrieved by the query to the Game collection are
    sorted by the date of creation, with the latest games listed first. Each game
    in the list will also populate the name and ID of the user who created it. The
    resulting list of sorted games is returned in the response to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the frontend, to fetch the games using this list API, we will set up a corresponding `fetch`
    method in `api-game.js`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This `fetch` method can be used in any frontend interface to make a call to
    the list games API. The `fetch` will make a `GET` request to the API and receive
    the list of games in the response, which can be rendered in the interface. In
    the next section, we will implement another listing API that will only return
    the games made by a specific user.
  prefs: []
  type: TYPE_NORMAL
- en: Listing games by the maker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the MERN VR Game application, it will also be possible to retrieve a list
    of games made by a specific user. To implement this, we will add another API endpoint
    in the backend that accepts a `GET` request at the `/api/games/by/:userId` route.
    This route will be declared with the other game routes, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'A `GET` request received at this route will invoke the `listByMaker` controller
    method, which will query the Game collection in the database to get the matching
    games. The `listByMaker` controller method will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the query to the Game collection in this method, we find all the games where
    the `maker` field matches the user specified in the `userId` route parameter.
    The retrieved games will contain the maker name and ID and will be returned in
    the response to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the frontend, to fetch the games for a specific user with this list by the
    maker API, we will add a corresponding `fetch` method in `api-game.js`, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This `fetch` method can be invoked in the frontend interface with the user ID
    to make a call to the list games by the maker API. The `fetch` method will make
    a `GET` request to the API and receive the list of games made by the user specified
    in the URL. In the next section, we will implement a similar `GET` API to retrieve details
    of an individual game.
  prefs: []
  type: TYPE_NORMAL
- en: Loading a game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the backend of the MERN VR Game application, we will expose an API that
    will retrieve the details of an individual game, specified by its ID in the game
    collection. To achieve this, we can add a `GET` API that queries the Game collection
    with an ID and returns the corresponding game document in the response. We will
    start implementing this API to fetch a single game by declaring a route that accepts
    a `GET` request at `''/api/game/:gameId''`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When a request is received at this route, the `:gameId` param in the route
    URL will be processed first to retrieve the individual game from the database.
    So, we will also add the following to the game routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The presence of the `:gameId` param in the route will invoke the `gameByID`
    controller method, which is similar to the `userByID` controller method. It will
    retrieve the game from the database and attach it to the `request` object to be
    used in the `next` method. This `gameByID` controller method is defined as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The game queried from the database will also contain the name and ID details
    of the maker, as specified in the `populate()` method. The `next` method—in this
    case, the `read` controller method—simply returns this retrieved game in response
    to the client. This `read` controller method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This API to read a single game''s details will be used to load a game in the
    React 360 implementation of the game world. We can call this API in the frontend
    code using a `fetch` method, to retrieve the details of an individual game according
    to its ID. A corresponding `fetch` method can be defined to call this game API,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This `read` method will take the game ID in the `params` and make a `GET` request
    to the API, using a `fetch` method.
  prefs: []
  type: TYPE_NORMAL
- en: This API for loading a single game will be used for the React views fetching
    a game detail and also the React 360 game view, which will render the game interface
    in the MERN VR Game application. In the next section, we will implement the API
    that will allow makers to update the games they already created on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Authorized users who are signed in—and also the maker of a specific game—will
    be able to edit the details of that game in the database. To enable this feature,
    we will implement an edit game API in the backend. We will add a `PUT` route that
    allows an authorized user to edit one of their games. The route will be declared
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: A `PUT` request to `'/api/games/:gameId'` will first execute the `gameByID`
    controller method to retrieve the specific game's details. The `requireSignin`
    auth controller method will also be called to ensure the current user is signed
    in. Then, the `isMaker` controller method will determine whether the current user
    is the maker of this specific game, before finally running the game `update` controller
    method to modify the game in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `isMaker` controller method ensures that the signed-in user is actually
    the maker of the game being edited, and it is defined as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `isMaker` condition is not met, that means the currently signed-in user
    is not the maker of the game being edited, and an authorization error is returned
    in the response. But if the condition is met, the `next` method is invoked instead.
    In this case, the update controller method is the `next` method, and it saves
    the changes to the game in the database. This update method is defined as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This `update` method will take the existing game details and the form data received
    in the request body to merge the changes and save the updated game to the Game
    collection in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'This edit game API can be called in the frontend view using a `fetch` method
    that takes the changes as form data and sends it with the request to the backend,
    along with user credentials. The corresponding `fetch` method is defined as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This method makes the `PUT` request to the edit game API, providing the changes
    to the game in the request body, the current user's credentials in the request
    header, and the ID of the game to be edited in the route URL. This method can
    be used in the frontend, which renders a form allowing users to update the game
    details. In the next section, we will implement another API in the backend that
    will allow authorized users to delete the games that they created on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An authenticated and authorized user will be able to delete any of the games
    they created on the application. To enable this feature, we will implement a delete
    game API in the backend. We will start by adding a `DELETE` route that allows
    an authorized maker to delete one of their own games, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The flow of the controller method execution on the server, after receiving the
    `DELETE` request at `api/games/:gameId`, will be similar to the edit game API,
    with the final call made to the `remove` controller method instead of `update`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `remove` controller method deletes the specified game from the database
    when a `DELETE` request is received at `/api/games/:gameId`, and it has been verified
    that the current user is the original maker of the given game. The `remove` controller
    method is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This `remove` method permanently deletes the specified game from the game collection
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this API from the frontend, we will add a corresponding `remove` method
    in `api-game.js` to make a fetch request to the delete game API. This `fetch`
    method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This method uses `fetch` to make a `DELETE` request to the delete game API.
    It takes the game ID in the `params` and the user credentials that are needed
    by the API endpoint in the backend to check if this current user is the authorized
    maker of the specified game. If the request is successful and the corresponding
    game is removed from the database, a success message is returned in the response.
  prefs: []
  type: TYPE_NORMAL
- en: With these game CRUD APIs functional in the backend, we are ready to implement
    the frontend that will use these APIs to allow users to create new games, list
    the games, modify existing games, and load a single game in the React 360 game
    view. We can start building out this frontend in the next section, starting with
    the React views for creating and editing games in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a form for creating and editing games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users registered on the MERN VR Game application will be able to make new games
    and modify these games from views on the application. To implement these views,
    we will add React components that allow users to compose and modify the game details
    and VR object details for each game. As the form for creating new and editing
    existing games will have similar form fields for composing game details and VR
    object details, we will make reusable components that can be used both for creating
    and editing purposes. In the following sections, we will discuss the form views
    for creating a new game and editing an existing game, and the implementation of
    the common form components in these views.
  prefs: []
  type: TYPE_NORMAL
- en: Making a new game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When any user signs into the application, they will be given the option to make
    their own VR game. They will see a MAKE GAME link on the menu that will navigate
    them to a form where they can fill in the game details to create a new game on
    the platform. In the following sections, we will update the frontend code to add
    this link on the menu and implement the `NewGame` component, which will contain
    the form to create a new game.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will update the navigation menu in the application to add the MAKE GAME
    button, which will appear conditionally based on whether the user is signed in,
    and redirect the user to a view containing the form to create a new game. The MAKE
    GAME button will render on the menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47caf224-ac99-45ab-8338-4adccd1d6fcf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add this button to the `Menu` component, we will use a `Link` component
    with the route for the `NewGame` component containing the form. To make it render
    conditionally, we will place it right before the MY PROFILE link shown in the
    preceding screenshot, in the section that renders only when the user is authenticated.
    The button code will be added as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This will show the MAKE GAME option to signed-in users, and they can click on
    it to be redirected to the `/game/new` route containing the form view for making
    a new game on the platform. In the next section, we will look at the component
    that will render this form.
  prefs: []
  type: TYPE_NORMAL
- en: The NewGame component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement the form view for creating a new game in the `NewGame` React
    component. This form view will allow users to fill out the fields for a single
    game. The `NewGame` component will render these form elements corresponding to
    the game details, including VR object details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d4ce768-afba-404d-bef4-74944d75344b.png)'
  prefs: []
  type: TYPE_IMG
- en: The `NewGame` component will use the `GameForm` component, which will contain
    all the rendered form fields, to compose this new game form. The `GameForm` component
    will be a reusable component that we will use in both the create and edit forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'When added to the `NewGame` component, it takes an `onSubmit` method as a prop,
    along with any server-returned error messages, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/NewGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The method passed in the `onSubmit` prop will be executed when the user submits
    the form. The `clickSubmit` method passed in this case is defined in the `NewGame`
    component. It uses the create game `fetch` method from `api-game.js` to make a
    `POST` request to the create game API with the game form data and user details.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `clickSubmit` method is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/NewGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If the user makes an error while entering the game details in the form, the
    backend sends back an error message when this `clickSubmit` method is called on
    form submission. If there are no errors and the game is successfully created in
    the database, the user is redirected to another view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load this `NewGame` component at a specified URL and only for authenticated
    users, we will add a `PrivateRoute` in `MainRouter`, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This will make the `NewGame` component load in the browser at the `/game/new` path
    when an authenticated user is accessing it. In the next section, we will see a
    similar implementation for rendering the same form to edit an existing game from
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users will be able to edit the games they made on the platform using a form
    similar to the form for creating new games. We will implement this edit game view
    in the `EditGame` component, which will render the game form fields pre-populated
    with the existing game's details. We will look at the implementation of this `EditGame`
    component in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: The EditGame component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as in the `NewGame` component, the `EditGame` component will also use
    the `GameForm` component to render the form elements. But in this form, the fields
    will load the current values of the game to be edited, and users will be able
    to update these values, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15fb097c-8223-4dee-ad46-79565b28ace1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the case of this `EditGame` component, the `GameForm` will take the given
    game''s ID as a prop so that it can fetch the game details, in addition to the
    `onSubmit` method and server-generated error message, if any. The `GameForm` component
    will be added to the `EditGame` component with these props, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/EditGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `clickSubmit` method for the edit form will use the update game `fetch`
    method in `api-game.js` to make a `PUT` request to the edit game API with the
    form data and user details. The `clickSubmit` method for this edit form submission
    will be defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/EditGame.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: If the user makes an error while modifying the game details in the form, the
    backend sends back an error message when this `clickSubmit` method is called on
    form submission. If there are no errors and the game is successfully updated in
    the database, the user is redirected to another view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load this `EditGame` component at a specified URL and only for authenticated
    users, we will add a `PrivateRoute` in `MainRouter`, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `EditGame` component will load in the browser at the `/game/edit/:gameId` path
    when an authenticated user is accessing it. Both this `EditGame` component and
    the `NewGame` component use the `GameForm` component to render the form elements
    that allow users to add the details of a game. In the next section, we will discuss
    the implementation of this reusable `GameForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the GameForm component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `GameForm` component is used in both the `NewGame` and `EditGame` components,
    and it contains the elements that allow users to enter game details and VR object
    details for a single game. It may start with a blank game object or load an existing
    game. To begin the implementation of this component, we will first initialize
    a blank game object in the component state, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `GameForm` component receives a `gameId` prop from the parent component—such
    as from the `EditGame` component—then it will use the load game API to retrieve
    the game''s details and set it to the state, to be rendered in the form view.
    We will make this API call in an `useEffect` hook, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In the `userEffect` hook, we first check if the props received from the parent
    component contain a `gameId` prop, and then use the value to make the load game
    API call. If the API call returns an error, we set the error to the state; otherwise,
    we set the retrieved game to the state. With this code, we will have the initial
    values for the game details initialized accordingly, to be used in the form view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The form view part in the `GameForm` component will essentially have two parts:
    one part that takes simple game details—such as name, world image link, and clue
    text—as input, and a second part that allows users to add a variable number of
    VR objects to either the answer objects array or the wrong objects array. In the
    following sections, we will look at the implementations of these two parts that
    will make up the game details form view.'
  prefs: []
  type: TYPE_NORMAL
- en: Inputting simple game details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While creating or editing a game, users will first see the form elements for
    the simpler details of the game, such as name, world image URL, and the clue text. This
    form section with the simple game details will mostly be text input elements added
    using the Material-UI `TextField` component, with a change handling method passed
    to the `onChange` handler. We will build out this section in the `GameForm` component,
    which is implemented in `mern-vrgame/client/game/GameForm.js`, with the following
    elements, as shown in the associated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Form title**: The form title will be either `New Game` or `Edit Game`, depending
    on whether an existing game ID is passed as a prop to `GameForm` from the parent
    component to which it is added, as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '**Game world image input**:We will render the background image URL in an `img`
    element at the very top of the form to show users the image they added as the
    game world image URL. The image URL input will be taken in a `TextField` component
    below the rendered image, as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '**Game name**: The game name will be added in a single `TextField` of the default `text` type,
    as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '**Clue text:** The clue text will be added to a multiline `TextField` component, as
    shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In these form elements added to the `GameForm` component, the input fields
    also take an `onChange` handler function, which is defined as `handleChange`.
    This `handleChange` method will update the game values in the state whenever a
    user changes a value in an input element. The `handleChange` method is defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In this method, based on the specific field value being changed, we update the
    corresponding attribute in the game object in the state. This captures the values
    entered by the user as simple details for their VR game. The form will also give
    the option to define arrays of VR objects that will also be a part of the game.
    In the next section, we will look at the form implementation that will allow users
    to manipulate arrays of VR objects.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying arrays of VR objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users will be able to define a dynamic number of VR objects in two different
    arrays for each game. In order to allow users to modify these arrays of `answerObjects`
    and `wrongObjects` that they wish to add to their VR game, `GameForm` will iterate
    through each array and render a VR object form component for each object. With
    this, it will become possible to add, remove, and modify VR objects from the `GameForm`
    component, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a9c4597-e610-4e84-a023-b409b333feef.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following sections, we will add these array manipulation functionalities
    in the  `GameForm` component. We will start by rendering each item in the VR object
    arrays and incorporate an option to add a new item or remove an existing item
    from an array. Then, since each item in an array will essentially be a form to
    enter VR object details, we will also discuss how to handle the input changes
    made within each item from the `GameForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating and rendering the object details form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add the form interface seen in the previous section with Material-UI
    `ExpansionPanel` components to create a modifiable list of VR objects for each
    type of VR object array in the given game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the nested `ExpansionPanelDetails` component, we will iterate through
    the `answerObjects` array or the `wrongObjects` array to render a `VRObjectForm`
    component for each VR object, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: To render each object in the array, we use a `VRObjectForm` component. We will
    look at the specific implementation of the `VRObjectForm` component later in the
    chapter. While adding `VRObjectForm` in this code, we pass the single `vrObject`
    item as a prop, along with the current `index` in the array, the type of the array,
    and two methods for updating the state in `GameForm` when the array details are
    modified by changing details or deleting an object from within the `VRObjectForm`
    component. This will render a form for each VR object in the arrays associated
    with the game in the `GameForm` component. In the next section, we will see the
    implementation for including an option to add new objects to these arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new object to the array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each array rendered in the game form, we will add a button that will let
    users push new VR objects to the given array. This button to add an object will
    render a new `VRObjectForm` component to take the details of a new VR object.
    We will add this button to the `ExpansionPanelDetails` component after the iteration
    code, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'This ADD OBJECT button will render at the end of each list of VR object forms.
    When clicked on, it will add a new blank VR object form by invoking the `addObject`
    method. This `addObject` method will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The `addObject` method is passed the array type so we know which array the user
    wants to add the new object to. In this method, we will just add an empty object
    to the array being iterated, so an empty form is rendered in its place, which
    users can fill out to enter new object details. In the next section, we will see
    how to let users remove one of these items from a list of VR object forms.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an object from the array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the items rendered in the list of VR object forms can also be removed
    from the list by the user. The `VRObjectForm` component displaying an item will
    contain a delete option, which will remove the object from the given array.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the remove item functionality for this DELETE button, we will
    pass a `removeObject` method as a prop to the `VRObjectForm` component from the
    parent `GameForm` component. This method will allow the array to be updated in
    the parent component''s state when a user clicks DELETE on a specific `VRObjectForm`.
    This `removeObject` method will be defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In this method, the VR object corresponding to the item clicked will be removed
    by slicing at the given `index` from the array with the specified array `type`.
    This updated object array in the game will be reflected in the view when it is
    set in the state, with the deleted VR object removed from the form view. In the
    next section, we will look at how to handle changes to the details of a VR object
    when the user updates values in a VR object form, which is rendered according
    to items in the VR object arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the object detail change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The details of any VR object in the game will be updated when the user changes
    input values in any of the fields in the corresponding VR object form. To register
    this update, the `GameForm` that houses the forms for the VR objects will pass
    the `handleObjectChange` method to the `VRObjectForm` component, which will render
    the VR object form. This `handleObjectChange` method will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This `handleObjectChange` method will be used in the `VRObjectFrom` component
    to capture the changed input's value and update the corresponding field of the
    VR object at the specified `index` in the array of the given `type`, so it is
    reflected in the game object stored in the state in `GameForm`.
  prefs: []
  type: TYPE_NORMAL
- en: The `GameForm` component renders the form elements for modifying the details
    of a game, including the lists of VR objects. Using this form, users can add,
    modify, and delete VR objects in the lists. The lists render each item in a VR
    object form that the users can use to compose the details of the object. In the
    next section, we will implement the React component that renders this VR object
    form for each VR object in the game.
  prefs: []
  type: TYPE_NORMAL
- en: The VRObjectForm component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement the `VRObjectForm` component to render the input fields for
    modifying an individual VR object''s details, which are added to the `answerObjects`
    and `wrongObjects` arrays of the game in the `GameForm` component. The `VRObjectForm`
    component will render a form, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bc1b0fb-6fa8-4f4f-a7f2-628662e64951.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To begin implementation of this `VRObjectForm` component containing a VR object
    form, we will start by initializing the blank details of a VR object in the component''s
    state with a `useState` hook, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'These details correspond to the schema defined for storing a VR object. When
    a `VRObjectForm` component is added to the `GameForm` component, it may receive
    an empty VR object or a VR object populated with details, depending on whether
    an empty form or a form with details of an existing object is being rendered.
    In the case that an existing VR object is passed as a prop, we will set the details
    of this object in the component state using an `useEffect` hook, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `useEffect` hook, if the `vrObject` value passed in the prop is not
    an empty object, we set the details of the received VR object in the state. These
    values will be used in the input fields that make up the VR object form. We will
    add the input fields corresponding to a VR object''s details, in the view of `VRObjectForm` using
    Material-UI `TextField` components, as shown in the code explained with the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**3D object file input**: The OBJ and MTL file links will be collected for
    each VR object as text input using the `TextField` components, as shown in the
    following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '**Translate value input**: The translate values of the VR object across the
    x, y, and z axes will be input in the `TextField` components of the `number` type,
    as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '**Rotate value input**: The rotation values of the VR object around the x,
    y, and z axes will be input in the `TextField` components of the `number` type,
    as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '**Scale value input**: The scale value for the VR object will be input in a
    `TextField` component of the `number` type, as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '**Object color input**: The color value for the VR object will be input in
    a `TextField` component of the `text` type, as shown in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'These input fields will allow the user to set the details of a VR object in
    a game. When any of these VR object details are changed in these input fields
    by the user, the `handleChange` method will be invoked. This `handleChange` method
    will be defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This `handleChange` method will update the corresponding value in the state
    of the `VRObjectForm` component, and use the `handleUpdate` method passed as a
    prop from `GameForm` to update the VR object in the `GameForm` state with the
    changed value for the specific object detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `VRObjectForm` will also contain a DELETE button that will execute the `removeObject` method
    received in the `GameForm` as a prop, which will allow the given object to be
    removed from the list in the game. This delete button will be added to the view
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/VRObjectForm.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The `removeObject` method will take the value of the object array type and the
    array index position, to remove the given object from the relevant VR object array
    in the `GameForm` component's state.
  prefs: []
  type: TYPE_NORMAL
- en: With these implementations, the forms for creating and editing games are in
    place, complete with VR object input forms for arrays of varying sizes. We used
    reusable components to compose the form elements needed for creating and editing
    games, along with adding the capability for modifying arrays of VR objects in
    a game. Any registered user can use these forms to add and edit game details on
    the MERN VR Game application. In the next section, we will discuss the implementation
    of the views that will render different lists of games on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the game list views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to MERN VR Game will access the games on the application from lists
    rendered on the home page and individual user profiles. The home page will list
    all the games on the application, and the games by a specific maker will be listed
    on their user profile page. These list views will iterate through game data fetched
    using the backend APIs for listing games, and render details of each game in a
    reusable React component.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will discuss the implementation for rendering
    all games and games only by a specific maker, using a reusable component for rendering
    each game on the list.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering lists of games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will render all the games available on the platform on the home page of
    the application. To implement this feature, the `Home` component will first fetch
    the list of all the games from the game collection in the database using the list
    game API. We will achieve this in an `useEffect` hook in the `Home` component,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of games retrieved from the server in this `useEffect` hook will be
    set to the state and iterated over to render a `GameDetail` component for each
    game in the list, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The `GameDetail` component, which will be implemented as a reusable component
    that renders details of a single game, will be passed the game details and a `updateGames`
    method. The `updateGames` method will allow the game list in the `Home` component
    to be updated if any of the games on the list are deleted by the maker. The `updateGames` method
    is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/core/Home.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The `updateGames` method will update the list rendered in the `Home` component
    by slicing the specified game from the array of games. This method will be invoked
    when a user deletes their game using the EDIT and DELETE options rendered conditionally
    in the `GameDetail` component for the maker of the game, as pictured in the following
    screenshot of games listed in the home page of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c483d30-7b85-4772-b4ba-76bfe87b7022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can render a similar list view in the user profile page, showing only the
    games made by the corresponding user, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f4bd176-f9b7-497f-9136-ee64919a021f.png)'
  prefs: []
  type: TYPE_IMG
- en: Similar to the implementation steps in the `Home` component, in this `Profile`
    component, we can fetch the list of games by the given user with a call to the
    associated list games by the maker API in an `useEffect` hook. With the retrieved
    list of games set in the state, we can iterate over it to render each game in
    a `GameDetail` component, as discussed earlier, for rendering all games on the
    home page. In the next section, we will discuss the implementation of this `GameDetail`
    component that will render the details of a single game.
  prefs: []
  type: TYPE_NORMAL
- en: The GameDetail component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will implement the `GameDetail` component to render individual games in
    any game list view in the application. This `GameDetail` component takes the game
    object as a prop, and renders the details of the game, along with a PLAY GAME
    button that links to the VR game view, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8eba3c66-44fe-4242-8a58-671e20588f89.png)'
  prefs: []
  type: TYPE_IMG
- en: This component will also conditionally render EDIT and DELETE buttons if the
    current user is the maker of the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the view code of the `GameDetail` component, we will first add the game
    details—such as the name, world image, clue text, and maker name—to give users
    an overview of the game. We will use Material-UI components to compose the interface
    with these details, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This code will render the game world image, game name, maker name, and clue
    text for the game passed in the props.
  prefs: []
  type: TYPE_NORMAL
- en: 'The PLAY GAME button rendered in the `GameDetail` component will simply be
    a button wrapped in an HTML link element that points to the route that opens the
    React 360-generated `index.html` file (implementation for this route on the server
    is discussed in the *Playing the VR game* section). This PLAY GAME link is added
    to the `GameDetail` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The route to the game view takes the game ID as a query parameter. We set `target='_self'` on
    the link so React Router skips transitioning to the next state and lets the browser
    handle this link. What this will do is allow the browser to directly make the
    request to the server at this route when the link is clicked, and render the `index.html`
    file sent by the server in response to this request, allowing the user to start
    playing the rendered VR game immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final section of the `GameDetail` component, we will conditionally show EDIT
    and DELETE options only if the currently signed-in user is also the maker of the
    game being rendered. We will add these options with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/client/game/GameDetail.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: After ensuring the current user is actually authenticated, we check if the user
    ID of the signed-in user matches the maker ID in the game. Then, accordingly,
    we render the EDIT button linking to the edit form view, and the DELETE option
    with a `DeleteGame` component.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of this `DeleteGame` component is similar to the `DeleteShop`
    component discussed in [Chapter 7](03fd3b4a-b7fd-4b42-ad7e-5bc34b5612b0.xhtml), *Exercising
    MERN Skills with an Online Marketplace*. Instead of a shop, the `DeleteGame` component
    will take the game to be deleted and the `updateGames` function definition received
    from the parent component as props. After this implementation is integrated, the
    maker of a game will be able to remove the game from the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Users visiting the MERN VR Game application can browse through the list of games
    rendered in these views and select to play a game by clicking the PLAY GAME link
    rendered in the corresponding `GameDetail` component. In the next section, we
    will see how to update the server to handle a request to play a game.
  prefs: []
  type: TYPE_NORMAL
- en: Playing the VR game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users on the MERN VR Game application will be able to open and play any of
    the VR games from within the application. To enable this, we will add an API on
    the server that renders the `index.html` file, which was generated with React
    360, as discussed in the previous chapter, [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*. This API on the backend will receive a `GET` request at
    the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This path takes a `game ID` value as a query parameter. The `game ID` in this
    URL will be used in the React 360 code, as elaborated on later in the chapter,
    to fetch the game's details using the load game API. In the following section,
    we will look at the implementation of the backend API that will handle this `GET`
    request to start playing a game when the user clicks on the PLAY GAME button.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the API to render the VR game view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to implement the API that will render the VR game in the browser, we
    will add a route in the backend that will receive a `GET` request and open the `index.html`
    page from React 360.
  prefs: []
  type: TYPE_NORMAL
- en: 'This route will be declared in `game.routes.js` with the other game routes,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/routes/game.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'A `GET` request received at this route will execute the `playGame` controller
    method, which will return the `index.html` page in response to the incoming request.
    The `playGame` controller method will be defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-vrgame/server/controllers/game.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The `playGame` controller method will simply send the `index.html` page placed
    in the `/server/vr/` folder to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: In the browser, this will render the React 360 game code, which needs to fetch
    the game details from the database using the load game API and render the game
    world, along with the VR objects that the user can interact with. In the next
    section, we will see how the game view we built previously with React 360 needs
    to be updated to load these game details dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the game code in React 360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the game backend all set up in the MERN application, we can update the
    React 360 project code we developed in [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*, to make it render games directly from the game collection
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the game ID in the link that opens the React 360 application to
    fetch game details, using the load game API from within the React 360 code. Then,
    we will set this retrieved game data to the state so that the game loads details
    from the database instead of the static sample data we used in [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*. Once the code is updated, we can bundle it again and place
    the compiled files in the MERN application before trying out the integration,
    as discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the game ID from a link
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to render the VR game based on the game the user chose to play from
    the MERN VR Game application, we need to retrieve the corresponding game ID from
    the link that loads the VR game view. In the `index.js` file of the React 360
    project folder, we will update the `componentDidMount` method to first retrieve
    the game ID from the incoming URL, and then make a fetch call to the load game
    API, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/MERNVR/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '`Location.search` gives us access to the query string in the incoming URL that
    loads `index.html`. The retrieved query string is `split` to get the `gameId` value
    from the `id` query parameter attached in the URL. We use this `gameId` value
    to fetch the game details with the load game API on the backend and set it to
    the state for the game and `vrObjects` values. To be able to use the load game
    API in the React 360 project, we will define a corresponding `fetch` method in
    the project, as discussed in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the game data with the load game API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to fetch the game data from within the React 360 code. In the React
    360 project folder, we will add an `api-game.js` file that will contain a `read`
    fetch method that makes a call to the load game API on the server using the provided
    game ID. This `fetch` method will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/MERNVR/api-game.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This `fetch` method receives the game ID in the `params` and makes the API call
    to retrieve the corresponding game from the database. It is used in `componentDidMount`
    of the React 360 entry component, which is defined in the `index.js` file, to
    retrieve the game details, as discussed in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: This updated React 360 code is available in the branch named `dynamic-game-second-edition` on
    the GitHub repository at [github.com/shamahoque/MERNVR/tree/dynamic-game-second-edition](https://github.com/shamahoque/MERNVR/tree/dynamic-game-second-edition).
  prefs: []
  type: TYPE_NORMAL
- en: With the React 360 code updated and capable of retrieving and rendering game
    details based on the game ID specified in the incoming URL, we can bundle and
    integrate this updated code with the MERN VR Game application, as discussed in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling and integrating the updated code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the React 360 code updated to fetch and render game details dynamically
    from the server, we can bundle this code using the provided bundle script and
    place the newly compiled files in the `dist` folder of the MERN VR Game project
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To bundle the React 360 code from the command line, go to the React 360 `MERNVR`
    project folder and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This will generate the `client.bundle.js` and `index.bundle.js` bundle files
    in the `build/` folder with the updated React 360 code. These files, along with
    the `index.html` file and `static_assets` folders, need to be added to the MERN
    VR Game application code, as discussed in [Chapter 13](4f633dd6-f392-490d-b3a6-eb5430b58ec8.xhtml), *Developing
    a Web-Based VR Game*, to integrate the latest VR game code.
  prefs: []
  type: TYPE_NORMAL
- en: With this integration completed, if we run the MERN VR Game application and
    click the PLAY GAME link on any of the games, it should open up the game view
    with the details of the specific game rendered in the VR scene, and allow interaction
    with the VR objects, as specified in the gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we integrated the capabilities of the MERN stack technologies
    with React 360 to develop a dynamic VR game application for the web.
  prefs: []
  type: TYPE_NORMAL
- en: We extended the MERN skeleton application to build a working backend that stores
    VR game details and allows us to make API calls to manipulate these details. We
    added React views that let users modify games and browse through the games, with
    the option to launch and play the VR game at a specified route rendered directly
    by the server.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we updated the React 360 project code to pass data between the MERN
    application and the VR game view, by retrieving query parameters from the incoming
    URL, and using fetch to retrieve data with the game API.
  prefs: []
  type: TYPE_NORMAL
- en: This integration of the React 360 code with the MERN stack application produced
    a fully functioning and dynamic web-based VR game application, demonstrating how
    MERN stack technologies can be used and extended to create unique user experiences.
    You can apply the capabilities revealed here to build your own VR-infused full-stack
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will reflect on the full-stack MERN applications built
    in this book, discussing not just the best practices that were followed but also
    the scope for improvements and further development.
  prefs: []
  type: TYPE_NORMAL
