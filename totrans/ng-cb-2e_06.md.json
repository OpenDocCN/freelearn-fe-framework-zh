["```js\n    npm run serve ngrx-actions-reducer \n    ```", "```js\nnpm install @ngrx/store \n```", "```js\n...\nimport { provideStore } from '@ngrx/store';\n...\nimport { provideAnimations } from '@angular/platform-browser/animations';\nimport { provideStore } from '@ngrx/store';\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    ...,\n    provideAnimations(),\n    **provideStore****({}),**\n  ],\n}; \n```", "```js\nimport { createActionGroup, props } from '@ngrx/store';\nimport { IFruit } from '../interfaces/fruit.interface';\nexport const BucketActions = createActionGroup({\n  source: 'Bucket',\n  events: {\n    'Add Fruit': props<{ fruit: IFruit }>(),\n    'Remove Fruit': props<{ fruitId: number }>(),\n  },\n}); \n```", "```js\nimport { createReducer, on } from '@ngrx/store';\nimport { IFruit } from '../interfaces/fruit.interface';\nimport { BucketActions } from './bucket.actions';\nexport const initialState: ReadonlyArray<IFruit> = []; \n```", "```js\n...\n**export****const** **bucketReducer =** **createReducer****(**\n**initialState,**\n**on****(****BucketActions****.****addFruit****,** **(****_state, { fruit }****) =>** **{**\n**console****.****log****({ fruit });**\n**return** **[fruit, ..._state];**\n**}),**\n**on****(****BucketActions****.****removeFruit****,** **(****_state, { fruitId }****) =>** **{**\n**console****.****log****({ fruitId });**\n**return** **_state.****filter****(****(****fr****) =>** **fr.****id** **=== fruitId);**\n**})**\n**);** \n```", "```js\n...\n**import** **{ bucketReducer }** **from****'./app/store/bucket.reducer'****;**\nbootstrapApplication(AppComponent, {\n  providers: [\n    ...,\n    provideStore(**{**\n**bucket****: bucketReducer,**\n**}**),\n  ],\n}).catch((err) => console.error(err)); \n```", "```js\n...\n**import** **{** **StoreModule****,** **Store** **}** **from****'@ngrx/store'****;**\n@Component({\n  ...,\n  imports: [CommonModule, FormsModule, **StoreModule**],\n})\nexport class BucketComponent implements OnInit {\n  ...\n  fruits: string[] = Object.values(Fruit);\n  **store =** **inject****(****Store****);**\n  ...\n} \n```", "```js\n...\n**import** **{** **BucketActions** **}** **from****'../store/bucket.actions'****;**\n...\nexport class BucketComponent implements OnInit {\n  ...\n    addSelectedFruitToBucket() {\n    **const****newFruit****:** **IFruit** **= {**\n**id****:** **Date****.****now****(),**\n**name****:** **this****.****selectedFruit****,**\n**};**\n**this****.****store****.****dispatch****(**\n**BucketActions****.****addFruit****({**\n**fruit****: newFruit,**\n**})**\n**);**\nthis.bucketService.addItem(**newFruit**);\n  }\n  deleteFromBucket(fruit: IFruit) {\n    **this****.****store****.****dispatch****(**\n**BucketActions****.****removeFruit****({**\n**fruitId****: fruit.****id****,**\n**})**\n**);**\nthis.bucketService.removeItem(fruit);\n  }\n} \n```", "```js\n    npm run serve ngrx-devtools \n    ```", "```js\nnpm install @ngrx/store-devtools \n```", "```js\n    ...\n    **import** **{ provideStoreDevtools }** **from****'@ngrx/store-devtools'****;**\n    import { bucketReducer } from './app/store/bucket.reducer';\n    bootstrapApplication(AppComponent, {\n      providers: [\n        ...,\n        provideStore({\n          bucket: bucketReducer,\n        }),\n        **provideStoreDevtools****({**\n    **maxAge****:** **50****,**\n    **}),**\n      ],\n    }).catch((err) => console.error(err)); \n    ```", "```js\n    npm run serve ngrx-selectors \n    ```", "```js\n    import { createFeatureSelector } from '@ngrx/store';\n    import { IFruit } from '../interfaces/fruit.interface';\n    export const selectBucket =\n    createFeatureSelector<ReadonlyArray<IFruit>>('bucket'); \n    ```", "```js\n    ...\n    **import** **{ selectBucket }** **from****'../store/bucket.selectors'****;**\n          ...\n    export class BucketComponent implements OnInit {\n      ...\n      store = inject(Store);\n      **$bucket****:** **Observable****<****IFruit****[]> =** **this****.****store****.****select****(**\n    **selectBucket);**\n    ngOnInit(): void {\n        this.bucketService.loadItems();\n      }\n      ...\n    } \n    ```", "```js\n    //  remove the `implements onInit` below\n    export class BucketComponent implements OnInit {\n      **bucketService =** **inject****(****BucketService****);****// ← remove**\n    selectedFruit: Fruit = '' as Fruit;\n      ...\n      **ngOnInit****():** **void** **{****// ← remove this method**\n    **this****.****bucketService****.****loadItems****();**\n    **}**\n    addSelectedFruitToBucket() {\n        const newFruit: IFruit = {...};\n        this.store.dispatch(...);\n        **this****.****bucketService****.****addItem****(newFruit);****// ← remove**\n      }\n      deleteFromBucket(fruit: IFruit) {\n        this.store.dispatch(...);\n        **this****.****bucketService****.****removeItem****(fruit);****// ← remove**\n      }\n    } \n    ```", "```js\n    ...\n    import { Injectable } from '@angular/core';\n    import { IFruit } from '../interfaces/fruit.interface';\n    import { IBucketService } from '../interfaces/bucket-service';\n    @Injectable({\n      providedIn: 'root',\n    })\n    export class BucketService implements IBucketService {\n      **storeKey =** **'bucket_ngrx-selectors'****;**\n    **loadItems****() {**\n    **return****JSON****.****parse****(****window****.****localStorage****.****getItem****(**\n    **this****.****storeKey****) ||** **'[]'****);**\n    **}**\n    **saveItems****(****items****:** **IFruit****[]****) {**\n    **window****.****localStorage****.****setItem****(**\n    **this****.****storeKey****,** **JSON****.****stringify****(items));**\n    **r}**\n    } \n    ```", "```js\n    import { IFruit } from './fruit.interface';\n    export interface IBucketService {\n      loadItems(): void;\n      **saveItems****(****fruit****:** **IFruit****[]):** **void****;**\n    } \n    ```", "```js\n    npm run serve ngrx-effects with-server \n    ```", "```js\nnpm install --save @ngrx/effects \n```", "```js\n    import { createActionGroup, **props**, **emptyProps** } from '@ngrx/store';\n    import { IFruit } from '../interfaces/fruit.interface';\n    export const BucketActions = createActionGroup({\n      source: 'Bucket',\n      events: {\n        **'Get Bucket'****:** **emptyProps****(),**\n    **'****Get Bucket Success'****: props<{** **bucket****:** **IFruit****[] }>(),**\n    **'Get Bucket Failure'****: props<{** **error****:** **string** **}>(),**\n    'Add Fruit': props<{ fruit: IFruit }>(),\n        **'****Add Fruit Success'****: props<{** **fruit****:** **IFruit** **}>(),**\n    **'Add Fruit Failure'****: props<{** **error****:** **string** **}>(),**\n    'Remove Fruit': props<{ fruitId: number }>(),\n        **'****Remove Fruit Success'****: props<{** **fruitId****:** **number** **}>(),**\n    **'Remove Fruit Failure'****: props<{** **error****:** **string** **}>(),**\n      },\n    }); \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    import { Actions, ofType, createEffect } from '@ngrx/effects';\n    import { of } from 'rxjs';\n    import { catchError, exhaustMap, map } from 'rxjs/operators';\n    import { BucketService } from '../bucket/bucket.service';\n    import { BucketActions } from './bucket.actions';\n    @Injectable()\n    export class BucketEffects {\n      getBucket$ = createEffect(() =>\n    this.actions$.pipe(\n          ofType(BucketActions.getBucket),\n          exhaustMap(() =>\n    this.bucketService.getBucket().pipe(\n              map(({ bucket }) => BucketActions\n     .getBucketSuccess({ bucket })),\n              catchError((error) => of(BucketActions\n     .getBucketFailure({ error })))\n            )\n          )\n        )\n      );\n      constructor(\n     private actions$: Actions,\n     private bucketService: BucketService\n     ) {}\n    } \n    ```", "```js\n    ...\n    **import** **{ provideEffects }** **from****'@ngrx/effects'****;**\n    ...\n    import { BucketEffects } from './app/store/bucket.effects';\n    ...\n    bootstrapApplication(AppComponent, {\n      providers: [\n        ...,\n        provideHttpClient(),\n        **provideEffects****([****BucketEffects****]),**\n      ],\n    }).catch((err) => console.error(err)); \n    ```", "```js\n    ...\n    export const initialState: ReadonlyArray<IFruit> = [];\n    export const bucketReducer = createReducer(\n      initialState,\n      **on****(****BucketActions****.****getBucketSuccess****,**\n    **(****_state, { bucket }****) =>** **{**\n    **return** **bucket;**\n    **}),**\n    on(BucketActions.**addFruitSuccess**, (_state, { fruit }) => {\n        console.log({ fruit });\n        return [fruit, ..._state];\n      }),\n      on(BucketActions.**removeFruitSuccess**, (_state, { fruitId }) => {\n        console.log({ fruitId });\n        return _state.filter((fr) => fr.id !== fruitId);\n      })\n    ); \n    ```", "```js\n    import { CommonModule } from '@angular/common';\n    import { Component, inject, **OnInit** } from '@angular/core';\n    ...\n    @Component({...})\n    export class BucketComponent**implements****OnInit** {\n      ...\n      **ngOnInit****() {**\n    **this****.****store****.****dispatch****(****BucketActions****.****getBucket****());**\n    **}**\n      ...\n    } \n    ```", "```js\n    ...\n    export class BucketEffects {\n      ...\n      **addItem$ =** **createEffect****(****() =>**\n    **this****.****actions$****.****pipe****(**\n    **ofType****(****BucketActions****.****addFruit****),**\n    **exhaustMap****(****(****action****) =>**\n    **this****.****bucketService****.****addItem****(action.****fruit****).****pipe****(**\n    **map****(****(****{ fruit }****) =>****BucketActions**\n    **.****addFruitSuccess****({ fruit })),**\n    **catchError****(****(****error****) =>****of****(**\n    **BucketActions****.****addFruitFailure****({ error })))**\n    **)**\n    **)**\n    **)**\n    **);**\n      ...\n    } \n    ```", "```js\n    ...\n    export class BucketEffects {\n      ...\n      **removeItem$ =** **createEffect****(****() =>**\n    **this****.****actions$****.****pipe****(**\n    **ofType****(****BucketActions****.****removeFruit****),**\n    **exhaustMap****(****(****action****) =>**\n    **this****.****bucketService****.****removeItem****(**\n    **action.****fruitId****).****pipe****(**\n    **map****(****() =>**\n    **BucketActions****.****removeFruitSuccess****({** **fruitId****:**\n    **action.****fruitId** **})**\n    **),**\n    **catchError****(****(****error****) =>****of****(**\n    **BucketActions****.****removeFruitFailure****({ error })))**\n    **)**\n    **)**\n    **)**\n    **);**\n      ...\n    } \n    ```", "```js\n    npm run serve ngrx-component-store \n    ```", "```js\nnpm install @ngrx/component-store \n```", "```js\n    ...\n    **import** **{** **ComponentStore** **}** **from****'@ngrx/component-store'****;**\n    **import** **{** **IFruit** **}** **from****'../interfaces/fruit.interface'****;**\n    **export****interface****BucketState** **{**\n    **bucket****:** **IFruit****[];**\n    **}**\n    ...\n    export class BucketService **extends****ComponentStore****<**\n    **BucketState****>** {\n      storeKey = 'bucket_ngrx-component-store';\n      **constructor****() {**\n    **super****({** **bucket****: [] });**\n    **}**\n    loadItems() {...}\n      saveItems(items: IFruit[]) {...}\n    } \n    ```", "```js\n    ...\n    **import** **{** **Observable** **}** **from****'rxjs/internal/Observable'****;**\n    import { IFruit } from '../interfaces/fruit.interface';\n    ...\n    export class BucketService extends ComponentStore<BucketState> {\n      storeKey = 'bucket_ngrx-component-store';\n      **readonly****bucket$****:** **Observable****<****IFruit****[]> =** **this****.****select****(**\n    **(****state****) =>** **state.****bucket****);**\n      ...\n    } \n    ```", "```js\n     constructor() {\n        super({ bucket: [] });\n        **this****.****setState****({**\n    **bucket****:** **this****.****loadItems****(),**\n    **});**\n      } \n    ```", "```js\n    export class BucketService extends ComponentStore<BucketState> {\n      ...\n      **readonly** **addItem =** **this****.****updater****(****(****state****:** **BucketState****,**\n    **fruit****:** **IFruit****) =>** **{**\n    **const** **bucketUpdated = [fruit, ...state.****bucket****];**\n    **this****.****saveItems****(bucketUpdated);**\n    **return** **{**\n    **bucket****: bucketUpdated,**\n    **};**\n    **});**\n    **readonly** **removeItem =** **this****.****updater****(****(****state****:** **BucketState****,**\n    **fruitId****:** **number****) =>** **{**\n    **const** **bucketUpdated = state.****bucket****.****filter****(****(****fr****) =>**\n    **fr.****id** **!== fruitId);**\n    **this****.****saveItems****(bucketUpdated);**\n    **return** **{**\n    **bucket****: bucketUpdated,**\n    **};**\n    **});**\n      ...\n    } \n    ```", "```js\n    ...\n    **import** **{** **BucketService** **}** **from****'****./bucket.service'****;**\n    @Component({...})\n    export class BucketComponent {\n      ...\n      **bucket****:** **IFruit****[] = [];** **//← remove**\n    **store =** **inject****(****BucketService****);** **//← add**\n    **bucket$ =** **this****.****store****.****bucket$****;** **//← add**\n    addSelectedFruitToBucket() {\n        const newFruit: IFruit = {\n          id: Date.now(),\n          name: this.selectedFruit,\n        };\n        **this****.****store****.****addItem****(newFruit);**\n      }\n      deleteFromBucket(fruit: IFruit) {\n        **this****.****store****.****removeItem****(fruit.****id****);**\n      }\n    } \n    ```", "```js\n     <div class=\"fruits\" *ngIf=\"**bucket$ | async as bucket**\"\n        [@listItemAnimation]=\"bucket.length\">\n    <ng-container *ngIf=\"bucket.length > 0; else\n          bucketEmptyMessage\">\n        ...\n        </ng-container>\n    <ng-template #bucketEmptyMessage>...</ng-template>\n    </div> \n    ```", "```js\n    ...\n    export class BucketService extends ComponentStore<BucketState> {\n      storeKey = 'bucket_ngrx-component-store';\n      readonly bucket$: Observable<IFruit[]> =\n        this.select((state) => state.bucket);\n      **readonly****bucketLength$****:** **Observable****<****number****> =**\n    **this****.****select****(**\n    **(****state****) =>** **state.****bucket****.****length**\n    **);**\n      ...\n    } \n    ```", "```js\n    ...\n    **import** **{** **BucketService** **}** **from****'./bucket/bucket.service'****;**\n    ...\n    export class AppComponent {\n      **store =** **inject****(****BucketService****);**\n    **bucketLength$ =** **this****.****store****.****bucketLength$****;**\n    } \n    ```", "```js\n    <span class=\"mr-4\">{{**bucketLength$ | async**}} items</span> \n    ```"]