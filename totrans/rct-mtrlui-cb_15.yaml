- en: Dialogs - Modal Screens for User Interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Collecting form input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirming actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating fullscreen dialogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrolling dialog content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At some point during interactions with your application, the user is going to
    have to supply some information to the application, make a yes/no decision, or
    acknowledge important information. Material-UI has a dialog component that is
    ideally suited for these types of scenarios—when you need a modal display that
    doesn't disrupt the current screen content.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting form input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dialogs can come in handy when you need to collect input from the user, but
    you don't want to lose the current screen. For example, the user is looking at
    a screen that shows a list of items and wants to create a new item. A dialog could
    display the necessary form fields and, once the new item is created, the dialog
    closes and the user is right back at their item list.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your application allows for the creation of new users. For
    example, from the screen that shows a list of users, the user clicks on a button
    that shows a dialog containing the fields for creating a new user. Here''s an
    example of how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the button you''ll see when the screen first loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81032857-7cb9-4a7e-b8a8-6b6d67143a2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the dialog that you''ll see when you click on the NEW USER button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92d9ac16-cf88-48d6-aa80-d0de6c75c722.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then fill out the three fields for creating a new user and click the
    CREATE button. The dialog will close, and you''ll see the following `Snackbar`
    component displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4706dca2-ce54-462f-b26e-460396f1fc99.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The visibility of the dialog and the snackbar are controlled by Boolean state
    values, `dialogOpen` and `snackbarOpen`, respectively. The values of the fields
    within the `dialog` component are also stored in the state of the `CollectingFormInput`
    component. Let''s take a closer look at the `dialog` markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `Dialog` component is the parent for several other components that make
    up the various pieces of `dialog`. The `DialogTitle` component renders the dialog
    title, while the `DialogActions` component is used to render action buttons at
    the bottom of the dialog. The `DialogContent` component is used to render the
    main content of the dialog—the three text fields for creating a new user.
  prefs: []
  type: TYPE_NORMAL
- en: There are two properties for each of these `TextField` components that are relevant
    for rendering inside of a dialog. First, the `fullWidth` property extends the
    field horizontally so that it's the same width as the dialog. This generally works
    well with forms that only have a few fields. Second, the `margin` property is
    set to `normal`, which provides the appropriate vertical spacing between fields
    in the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s walk through the event handlers of this component, starting with
    `onDialogOpen()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show the dialog by changing the `dialogOpen` state to `true`. Next,
    let''s look at `onDialogClose()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will close the dialog by setting the `dialogOpen` state to `false`. It
    also resets the form field values to empty strings so that they''re empty the
    next time the dialog is displayed. Up next, we have `onSnackbarClose()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `reason` argument is `clickaway`, then there''s nothing to do. Otherwise,
    the `snackbarOpen` state changes to `false`, which will hide the snackbar. The
    `snackbarMessage` state is set to an empty string so that the message doesn''t
    display again in case the snackbar is opened without setting a new message first.
    Finally, we have the `onCreate()` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will show the snackbar by setting `snackbarOpen` to `true`. It also sets
    the `snackbarMessage` value that includes accessing the `first` and `last` state
    values. Then, `onDialogClose()` is called to hide the dialog and reset the form
    fields. The snackbar is closed after four seconds because the `autoHideDuration`
    value was set to `4000`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Snackbar` API documentation: [https://material-ui.com/api/snackbar/](https://material-ui.com/api/snackbar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField` API documentation: [https://material-ui.com/api/text-field/](https://material-ui.com/api/text-field/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirming actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Confirmation dialogs act as a safety net for your users. They're useful when
    the user is about to perform something that could potentially be dangerous, but not
    for every conceivable action in the app. An action can be considered dangerous
    if, once performed, it cannot be reverted. An example of a dangerous action would
    be deleting an account or processing a payment. In these cases, you should always
    use a confirmation dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Confirmation dialogs should be straightforward so that the user can easily
    read what is about to happen and can decide whether to cancel the action or to
    continue. Here''s some code that shows a confirmation dialog before executing
    an action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the confirmation dialog looks like when it''s displayed by clicking
    on the CONFIRM button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f19c186-b553-4768-ba17-d8d04ab91b69.png)'
  prefs: []
  type: TYPE_IMG
- en: You can either click on the CANCEL dialog action to close the dialog without
    doing anything, or you can click on the CONFIRM dialog action that will actually
    execute the action before closing the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DialogContentText` component is used to render the confirmation message
    in the dialog. It's really just a thin wrapper around a `Typography` component.
    The two interesting properties passed to the dialog component are `disableBackdropClick`
    and `disableEscapeKeyDown`, which prevent the confirmation dialog from being closed
    by clicking somewhere on the screen outside of the dialog or by hitting the *Esc*
    key, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The idea with these two properties is to get the user to explicitly acknowledge
    that they're performing an action that requires their close attention, or that
    they're opting out of performing it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alert dialogs are similar to confirmation dialogs. You can think of alerts as
    really important snackbars that cannot be ignored. Like confirmations, alerts
    cause interruption and have to be explicitly acknowledged to get rid of them.
    Furthermore, alert dialogs might not be displayed as the direct result of an action
    taken by the user. Alerts can be displayed as the result of changes to the environment
    the user is interacting with.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your application needs to be able to alert users when their
    allotted disk space is running low. Here''s an example that shows what the alert
    might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s what the alert dialog looks like when it''s displayed by clicking
    on the show alert button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7826795-c1ae-4f2c-b367-08e798d84c40.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alerts aren't much different from regular dialogs in that you use them to collect
    input from the user. The principle with alerts is to keep them short and to the
    point. For example, this alert dialog doesn't have a title. It's able to get the
    point across without a title – if the user doesn't start deleting stuff, they're
    not going to be able to do anything.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can make your alerts a little more eye-catching by adding an icon to the
    alert message and the button that dismisses the alert. Here''s the modified example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the new alert looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e408c9d7-e5ad-4565-baa3-f5e3ca81390b.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dialogs often need data supplied to it from an API endpoint. The challenge is
    displaying the dialog in a loading state while the user waits for the API data
    to load behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that your application needs to display a dialog with a `Select`
    component for selecting an item. The options for the select are populated from
    an API endpoint, so you need to handle the latency between the user opening the
    dialog and the API data arriving. Here''s an example that shows one way to do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the dialog looks like when it''s first opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/feee0e80-d756-4189-9196-a8ab43b66d47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The dialog displays a `LinearProgress` component and disables the dialog action
    buttons while the API data is loading. Once the response arrives, here''s what
    the dialog looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e292d4dc-ea7d-49b1-b035-fded9384e50b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The linear progress bar is gone, the dialog action buttons are enabled, and
    there''s a Select Item field visible for the user to select an item. Here''s the
    Select Item showing the items that are loading from the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18ad9a37-f968-4b04-ae07-a160bfb2279d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s walk through the major parts of this code, starting with the mock API
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `fetchItems()` function simulates an API function by returning a promise
    that resolves an array of data after three seconds. This allows you to see what
    users will see while waiting for an actual API endpoint to respond. Next, let''s
    look at the two utility components that help with rendering or hiding the select
    and the progress indicators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The idea is that you don''t want to render the `LinearProgress` component while
    loading is `false`. Conversely, you don''t want to render the `Select` component
    while loading is `true`. Let''s take a look at `onShowItems()` next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: First, the dialog is opened by setting open to `true` and the progress indicator
    is displayed by setting loading to `true`. Then, the API `fetchItems()` function is
    called, and when the `Promise` it returns is resolved, `loading` is set to `false`
    and the `items` array is updated. This hides the progress indicator and shows
    the select that is now populated with items.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogActions` API documentation: [https://material-ui.com/api/dialog-actions/](https://material-ui.com/api/dialog-actions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContent` API documentation: [https://material-ui.com/api/dialog-content/](https://material-ui.com/api/dialog-content/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogContentText` API documentation: [https://material-ui.com/api/dialog-content-text/](https://material-ui.com/api/dialog-content-text/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Button` API documentation: [https://material-ui.com/api/button/](https://material-ui.com/api/button/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinearProgress` API documentation: [https://material-ui.com/api/linear-progress/](https://material-ui.com/api/linear-progress/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Select` API documentation: [https://material-ui.com/api/select/](https://material-ui.com/api/select/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating fullscreen dialogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With fullscreen dialogs, you have more space to render information. Most of
    the time, you won't need full screen dialogs. In less common cases, your dialog
    needs as much space as possible to render information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that, from some screen in your application, there''s a button that
    exports data for the user. When clicked, you want to give the user a preview of
    the data that''s about to be exported before they confirm. Here''s what the code
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what the dialog looks like when it''s opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc60a3f4-b83c-42f2-a780-73c679cdcdbe.png)'
  prefs: []
  type: TYPE_IMG
- en: You can click on the X button beside the dialog title to close the dialog, or
    you can click on the EXPORT button to the right.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the properties that are passed to the `Dialog` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `fullScreen` Boolean property is how the dialog is rendered in fullscreen
    mode. The `TransitionComponent` property changes the way that dialog is transitioned
    onto the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the dialog is displayed in fullscreen mode, you might want to change
    the way that the title and actions are displayed to the user, as is shown in this
    example. Instead of using the `DialogTitle` and `DialogAction` components, you
    can use the `AppBar` and `Toolbar` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This makes the title, close action, and main action more visible to the user.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppBar` API documentation: [https://material-ui.com/api/app-bar/](https://material-ui.com/api/app-bar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Toolbar` API documentation: [https://material-ui.com/api/toolbar/](https://material-ui.com/api/toolbar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Table` API documentation: [https://material-ui.com/api/table/](https://material-ui.com/api/table/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrolling dialog content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It can be hard to find enough vertical space to fit all of your content into
    a dialog. When the dialog runs out of space, a vertical scrollbar is added.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have a long table of data that you need to display in a
    dialog for the user before exporting to another format. The user will need the
    ability to scroll through the table rows. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the dialog looks like when it''s opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c21f4f9-9e00-4614-818a-db51c186ccff.png)'
  prefs: []
  type: TYPE_IMG
- en: If you move your mouse pointer over the table rows and start scrolling, the
    table rows scroll up and down in between the dialog title and the dialog action
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, dialog content will scroll within the `Paper` component of the dialog
    (the `DialogContent` component), so there's no need to specify a property. However,
    you can pass the `body` value to the `scroll` property of the `Dialog` component.
    This will make the height of the dialog change to accommodate the content.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Dialog` demos: [https://material-ui.com/demos/dialogs/](https://material-ui.com/demos/dialogs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dialog` API documentation: [https://material-ui.com/api/dialog/](https://material-ui.com/api/dialog/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Table` API documentation: [https://material-ui.com/api/table/](https://material-ui.com/api/table/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
