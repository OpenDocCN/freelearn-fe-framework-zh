- en: Styles - Applying Styles to Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Basic component styles
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scoped component styles
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending component styles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving styles to themes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other styling options
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The majority of styles that are applied to **Material-UI** components are part
    of the theme styles. In some cases, you need the ability to style individual components
    without changing the theme. For example, a button in one feature might need a
    specific style applied to it that shouldn't change every other button in the app.
    Material-UI provides several ways to apply custom styles to components as a whole,
    or to specific parts of components.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Basic component styles
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material uses **JavaScript Style Sheets** (**JSS**) to style its components.
    You can apply your own JSS using the utilities provided by Material-UI.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `withStyles()` function is a higher-order function that takes a style object
    as an argument. The function that it returns takes the component to style as an
    argument. Here''s an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what this component looks like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddf2a5c8-d5af-4772-af49-732af579ecdb.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the `styles` defined by this example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `styles` that you pass to `withStyles()` can be either a plain object or
    a function that returns a plain object, as is the case with this example. The
    benefit of using a function is that the `theme` values are passed to the function
    as an argument, in case your `styles` need access to the `theme` values. There
    are two styles defined in this example: `card` and `cardActions`. You can think
    of these as **Cascading Style Sheets** (**CSS**) classes. Here''s what these two
    styles would look like as CSS:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By calling `withStyles(styles)(MyComponent)`, you''re returning a new component
    that has a `classes` property. This object has all of the classes that you can
    apply to components now. You can''t just do something such as this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When you define your `styles`, they have their own build process and every class
    ends up getting its own generated name. This generated name is what you'll find
    in the classes object, so this is why you would want to use it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of working with higher-order functions that return new components,
    you can leverage Material-UI style hooks. This example already relies on the `useState()`
    hook from React, so using another hook in the component feels like a natural extension
    of the same pattern that is already in place. Here''s what the example looks like
    when refactored to take advantage of the `makeStyles()` function:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `useStyles()` hook is built using the `makeStyles()` function—which takes
    the exact same `styles` argument as `withStyles()`. By calling `useStyles()` within
    the component, you have your classes object. Another important thing to point
    out is that `makeStyles` is imported from `@material-ui/styles`, not `@material-ui/core/styles`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI CSS in JS documentation: [https://material-ui.com/css-in-js/basics/](https://material-ui.com/css-in-js/basics/).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scoped component styles
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most Material-UI components have a CSS API that is specific to the component.
    This means that instead of having to assign a class name to the `className` property
    for every component that you need to customize, you can target specific aspects
    of the component that you want to change. Material-UI has laid the foundation
    for scoping component styles; you just need to leverage the APIs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that you have the following style customizations that you want to
    apply to the `Button` components used throughout your application:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Every button needs a margin by default.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every button that uses the `contained` variant should have additional top and
    bottom padding.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every button that uses the `contained` variant and the primary color should
    have additional top and bottom padding, as well as additional left and right padding.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example that shows how to use the `Button` CSS API to target these
    three different `Button` types with `styles`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s what the three rendered buttons look like:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ff32b1e-8808-4bc6-8646-0cb9dffdbfa6.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Button` CSS API takes named styles and applies them to the component. These
    same names are used in the styles in this code. For example, `root` applies to
    every `Button` component, whereas `contained` only applies the styles to the `Button`
    components that use the `contained` variant and the `containedPrimary` style only
    applies to `Button` components that use the `contained` variant and the `primary`
    color.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each style is destructured from the classes property, then applied to the appropriate
    `Button` component. However, you don''t actually need to do all of this work.
    Since the Material-UI CSS API takes care of applying `styles` to components in
    a way that matches what you''re actually targeting, you can just pass the classes
    directly to the buttons and get the same result. Here''s a simplified version
    of this example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output looks the same because only buttons that match the constraints of
    the CSS API get the styles applied to them. For example, the first `Button` has
    the `root`, `contained`, and `containedPrimary` styles passed to the classes property,
    but only `root` is applied because it isn't using the `contained` variant of the
    `primary` color. The second `Button` also has all three styles passed to it, but
    only `root` and `contained` are applied. The third `Button` has all three styles
    applied to it because it meets the criteria of each style.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI style override documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending component styles
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can extend `styles` that you apply to one component with `styles` that you
    apply to another component. Since your `styles` are JavaScript objects, one option
    is to extend one style object with another. The only problem with this approach
    is that you end up with a lot of duplicate `styles` properties in the CSS output.
    A better alternative is to use the `jss` extend plugin.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用另一个组件应用的`styles`来扩展一个组件应用的`styles`。由于你的`styles`是JavaScript对象，一个选项是将一个样式对象扩展到另一个样式对象上。这种方法的唯一问题是，你会在CSS输出中得到大量的重复`styles`属性。一个更好的选择是使用`jss`扩展插件。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you want to render three buttons and share some of the `styles`
    among them. One approach is to extend generic `styles` with more specific `styles`
    using the `jss` extend plugin. Here''s how to do it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要渲染三个按钮并共享一些`styles`。一种方法是使用`jss`扩展插件将通用`styles`扩展到更具体的`styles`。下面是如何做到这一点：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s what the rendered buttons look like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是渲染后的按钮外观：
- en: '![](img/40a18103-6747-4ac2-ab1c-f85ffbd91e7f.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40a18103-6747-4ac2-ab1c-f85ffbd91e7f.png)'
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The easiest way to use the `jss` extend plugin in your Material-UI application
    is to use the default JSS plugin presets, which includes `jss` extend. Material-UI
    has several JSS plugins installed by default, but `jss` extend isn''t one of them.
    Let''s take a look at the `App` component in this example to see how this JSS
    plugin is made available:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Material-UI应用中使用`jss`扩展插件的最简单方法是使用默认的JSS插件预设，这包括`jss`扩展。Material-UI默认安装了几个JSS插件，但`jss`扩展不是其中之一。让我们看看这个例子中的`App`组件，看看这个JSS插件是如何提供的：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `JssProvider` component is how JSS is enabled in Material-UI applications.
    Normally, you wouldn't have to interface with it directly, but this is necessary
    when adding a new JSS plugin. The `jss` property takes the JSS preset object that
    includes the `jss extend` plugin. The `generateClassName` property takes a function
    from Material-UI that helps generate class names that are specific to Material-UI.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`JssProvider`组件是JSS在Material-UI应用中启用的方式。通常，你不需要直接与之交互，但在添加新的JSS插件时这是必要的。`jss`属性接受包含`jss
    extend`插件的JSS预设对象。`generateClassName`属性接受一个来自Material-UI的函数，该函数有助于生成特定于Material-UI的类名。'
- en: 'Next, let''s take a closer look at some `styles`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更仔细地看看一些`styles`：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `extend` property takes the name of a style that you want to extend. In
    this case, the `contained` style extends `root`. The `containedPrimary` extends
    `contained` and `root`. Now let''s take a look at how this translates into CSS.
    Here''s what the `root` style looks like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`extend`属性接受你想要扩展的样式的名称。在这种情况下，`contained`样式扩展了`root`。`containedPrimary`扩展了`contained`和`root`。现在让我们看看这如何转换为CSS。这是`root`样式的样子：'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, here''s the `contained` style:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这是`包含`样式：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, here''s the `containedPrimary` style:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是`containedPrimary`样式：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the properties from the more-generic properties are included in the
    more-specific styles. There are some properties duplicated, but this is in CSS,
    instead of having to duplicate JavaScript object properties. Furthermore, you
    could put these extended `styles` in a more central location in your code base,
    so that multiple components could use them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，更通用的属性中的属性包含在更具体的样式里。有一些属性是重复的，但在CSS中，你不需要重复JavaScript对象属性。此外，你还可以将这些扩展的`styles`放在代码库的更中心位置，这样多个组件就可以使用它们。
- en: See also
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'Material-UI JSS documentation: [https://material-ui.com/customization/css-in-js/](https://material-ui.com/customization/css-in-js/).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI JSS文档：[https://material-ui.com/customization/css-in-js/](https://material-ui.com/customization/css-in-js/)。
- en: Moving styles to themes
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将样式移动到主题中
- en: As you develop your Material-UI application, you'll start to notice style patterns
    that repeat themselves. In particular, styles that apply to one type of component,
    such as buttons, evolve into a theme.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你开发Material-UI应用，你将开始注意到重复出现的样式模式。特别是，应用于一种类型组件（如按钮）的样式会演变成一个主题。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s revisit the example from the *Scoped component styles* section:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下来自*作用域组件样式*部分的例子：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s what these buttons look like after they have these styles applied to
    them:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用了这些样式后的按钮外观：
- en: '![](img/b67dffd6-dbc1-4f24-8d48-7ef9f1772bb8.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b67dffd6-dbc1-4f24-8d48-7ef9f1772bb8.png)'
- en: 'Now, let''s say you''ve implemented these same styles in several places throughout
    your app because this is how you want your buttons to look. At this point, you''ve
    evolved a simple component customization into a theme. When this happens, you
    shouldn''t have to keep implementing the same styles over and over again. Instead,
    the styles should be applied automatically by using the correct component and
    the correct property values. Let''s move these styles into `theme`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, you can use `Button` components without having to apply the same styles
    every time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at how your styles fit into a Material-UI theme:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `overrides` property is an object that allows you to override component-specific
    properties of the theme. In this case, it's the `MuiButton` component styles that
    you want to override. Within `MuiButton`, you have the same CSS API that is used
    to target specific aspects of components. This makes moving your `styles` into
    the `theme` straightforward, because there isn't much to change.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: One thing that did have to change in this example is the way spacing works.
    In normal `styles` that are applied via `withStyles()`, you have access to the
    current theme because it's passed in as an argument. You still need access to
    the spacing data, but there's no `theme` argument because you're not in a function.
    Since you're just extending the default `theme`, you can access it by calling
    `createMuiTheme()` without any arguments, as this example shows.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI style overrides documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other styling options
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other styling options available to your Material-UI app beyond `withStyles()`.
    There's the `styled()` higher-order component function that emulates styled components.
    You can also jump outside the Material-UI style system and use inline CSS styles
    or import CSS modules and apply those styles.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s a modified version of the *Scoped component styles* example that showcases
    a few of the alternative style mechanisms available to you in your Material-UI
    applications:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first button uses inline CSS properties, expressed as a plain JavaScript
    object and passed to the `style` property of the `Button` component. The second
    `Button` uses the `styled()` function to build a `MyStyledButton` component. This
    function works in much the same way as `withStyles`, the main difference being
    that its signature is geared toward people used to the styled-component's approach
    to styling components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'The third `button` uses a style from an imported CSS module. Here''s what the
    module looks like:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Be careful with CSS modules and inline styles. These approaches work fine, but
    since they're not tightly integrated with the Material-UI styling and theming
    mechanisms, they require more work to ensure that your styles fit with the rest
    of the Material-UI components.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material-UI style overrides documentation: [https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/).'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI样式覆盖文档：[https://material-ui.com/customization/overrides/](https://material-ui.com/customization/overrides/).
- en: 'Material-UI JSS documentation: [https://material-ui.com/css-in-js/api/](https://material-ui.com/css-in-js/api/).'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material-UI JSS文档：[https://material-ui.com/css-in-js/api/](https://material-ui.com/css-in-js/api/).
