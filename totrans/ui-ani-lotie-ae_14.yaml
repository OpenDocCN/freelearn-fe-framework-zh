- en: '*Chapter 11*: Any Questions? lottie-react-native FAQs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even with all the information contained in this book, some questions may arise
    when using Lottie-based animations in our React Native apps. In this chapter,
    we will go over some of the most commonly asked questions by developers when it
    comes to `lottie-react-native` usage. For convenience, the following is the list
    of questions and issues you will find in the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: I added an effect in my animation, but it's not rendered in the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The animation is not rendered at all in my app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The animation looks stretched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I pause an animation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I reverse an animation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My animation is rendered on an iOS device but not on an Android device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My animation is rendered on an Android device but not on an iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My app is not building after installing `lottie-react-native`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some frames are not showing in my animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My animation is showing the wrong colors or no colors at all.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I use my Lottie animation as a splash screen?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are images missing in my animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I center my animation in the app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I play my animation a set number of times?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My animation has a low playback performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I change the colors of my animation programmatically?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I use a remote Lottie animation file in my app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My app is crashing on Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An error shows on my app – **Cycle dependencies between targets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An error shows on my app – **Gradle 7: unable to resolve class MavenDeployment**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. I added an effect to my animation but it's not rendered in the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of effects in Adobe After Effects that are not supported
    on certain platforms. When this kind of error happens, it's best to go to the
    list of supported effects in Lottie's documentation at [https://github.com/airbnb/lottie/blob/master/supported-features.md](https://github.com/airbnb/lottie/blob/master/supported-features.md).
  prefs: []
  type: TYPE_NORMAL
- en: Take into account that this list may change over time, as Lottie is being constantly
    improved. As the list shows, the same effect may show on a specific platform but
    might be missing on a different one.
  prefs: []
  type: TYPE_NORMAL
- en: The most common approaches for these cases are to remake the animation, remove
    the selected effect, or create a different animation for the failing platform,
    as there is no programmatic solution for this problem.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The animation is not rendered at all in my app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check that the JSON file containing the animation is placed within the React
    Native app project folder structure and is reachable through an `import/require`
    statement in the component in which the animation should be rendering. To test
    this, you can `console.log` the contents of the JSON file; if they log as `undefined`,
    it means that the file was not reachable by the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case, you might want to move the JSON file to a different folder or
    try with a different JSON file, as it's possible the file was damaged or inconsistent.
    Using a JSON linter can help to identify and fix this kind of issue.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The animation looks stretched
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`LottieView` inherits its size behavior from the standard React Native `View`
    component, and therefore, it can be changed through the style property on its
    containing parent. If the image size looks wrong, try first explicitly changing
    the parent''s size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If that didn''t work, try changing `width` or `height` explicitly in the `LottieView`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parent-relative sizes (percentages) can also be used in both approaches. Always
    be aware of the parent size, as many issues can be fixed by making sure the parent
    size is correct. Also, take into consideration using the `flex` property if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. How can I pause an animation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several approaches to this issue:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the declarative approach in your code, you can use the `speed`
    prop on `LottieView`, as setting it to `0` will stop the animation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using the imperative API, you can use the `pause()` method on the
    animation reference, which will immediately stop your animation playback. Conversely,
    the `play()` method will restart the playback whenever you need it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. How can I reverse an animation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest approach to achieve reverse playback is to use the `speed` prop
    on the `LottieView` component, as negative values will make the animation play
    backward. If you want to play the animation in reverse but at its original speed,
    you need to set the `speed` prop to `–1`, but you can also play it at double speed
    by setting it to `–2` or half-speed by changing it to `–0.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using the animated API to control the progress of your animation,
    you can use methods such as `Animated.timing`, and make sure you are passing descending
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 6\. My animation is rendered on an iOS device but not on an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The newest versions of `lottie-react-native` can only be used on AndroidX projects.
    This means that if your app hasn't been migrated to AndroidX ([https://developer.android.com/jetpack/androidx](https://developer.android.com/jetpack/androidx)),
    it won't be able to display any Lottie animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you can try older versions of `lottie-react-native`. For example,
    try running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Take into account that for these cases, the API might be different or some extra
    installation steps might be required. Always check the version-specific documentation
    when using older versions of `lottie-react-native`.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. My animation is rendered on an Android device but not on an iOS device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`lottie-react-native` requires some extra installation steps for it to work
    properly:'
  prefs: []
  type: TYPE_NORMAL
- en: Remember to install the `lottie-ios` peer dependency by running `yarn add lottie-ios`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember to run `pod install` in the `ios` folder from your React Native project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8\. My app won't build on iOS after installing lottie-react-native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most common building issue for `lottie-react-native` in iOS has to do with
    the lack of support for React Native projects with Swift libraries. In this case,
    you need to create a Swift bridging header in order to get your app ready for
    Swift libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new file through the Xcode menu: **File** | **New** | **File**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Create a new file in your Xcode project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17930_11_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Create a new file in your Xcode project
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Swift File**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Select Swift as the file type'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17930_11_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – Select Swift as the file type
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Create Bridging Header**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Confirm the creation of the bridging header'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17930_11_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Confirm the creation of the bridging header
  prefs: []
  type: TYPE_NORMAL
- en: You may need to rebuild your project for the changes to take effect. Once this
    is done, `lottie-react-native` should be ready to display your animation on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Some frames are not showing in my animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Older versions of Lottie have rendering issues and won't work properly with
    newer versions of Android and iOS. To fix this kind of issue, make sure you have
    the most adequate `lottie-react-native` version for the platform version you are
    running your app in.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a list of available versions for `lottie-react-native` in the `projects`
    repository ([https://github.com/lottie-react-native/lottie-react-native](https://github.com/lottie-react-native/lottie-react-native))
    or the npm site ([https://www.npmjs.com/package/lottie-react-native](https://www.npmjs.com/package/lottie-react-native)).
  prefs: []
  type: TYPE_NORMAL
- en: 10\. My animation is showing the wrong colors or no colors at all
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is often not a problem with `lottie-react-native` but with the way `Bodymovin`
    exports colors. You may still be able to fix this problem by manually going through
    your JSON file and manually modifying them.
  prefs: []
  type: TYPE_NORMAL
- en: Layer colors in the JSON file usually are defined by the key named `"sc"`, so
    you can search for that key and change the hex value for the color you want to
    change. For example, if you expect a red color but you are getting a white one,
    you can search for `"sc":"#ffffff"` and replace it with `"sc":"#ff0000"`.
  prefs: []
  type: TYPE_NORMAL
- en: Take into account that there might be more than one layer with that color defined,
    so you might need to do trial and error until you find the exact layer you need
    to change.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. How can I use my Lottie animation as a splash screen?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Showing a Lottie animation on an app startup is a nice user experience that
    is becoming more and more popular as mobile apps become more sophisticated. A
    common approach is to load the animation as the main screen, have a state variable
    that changes once the animation is finished, and change to the real main screen
    immediately after most of the initial data has been loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: If we want to display a Lottie animation as a splash screen, we need to put
    this component as the initial one, so the first thing that the app does is to
    load this animation. Note how we call `loadAppData()` when the component is mounted
    to start loading the initial data, before the component shows that data to the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. There are images missing in my animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you created your animation with external assets (images), you need to add
    those images into your app and let `lottie-react-native` know where those images
    can be found. This is done at a native level and requires some configuration,
    as explained in [*Chapter 9*](B17930_09_ePub.xhtml#_idTextAnchor167), *Let’s Do
    Some Magic: Integrating Your First Lottie Animation*, in the section named *Using
    Lottie files with assets*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add those images into the project's folder structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure your project in a way that makes those files accessible through code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pass the `imageAssetsFolder` property to the `LottieView` component with the
    right relative route to the folder containing those assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13\. How can I center my animation in the app?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`LottieView` component inherits its layout behavior from the standard `View`
    component in React Native, and therefore, centering should be done in the same
    way we would center `View` in React Native. This can be done by either using the
    `alignSelf: ''center''` key on the `style` property for the `LottieView` component
    or making sure that the parent component has the correct size and uses `alignItems:
    ''center''` in its `style` property.'
  prefs: []
  type: TYPE_NORMAL
- en: If this approach didn't work, we should make sure the parent component has the
    right size, as most of the alignment problems derive from that issue.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. How can I play my animation a set number of times?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest approach would be to use the imperative API and adjust the `play()`
    method and the `onAnimationFinish` prop repeat that plays the animation when its
    playback is finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The key in this piece of code is how `onAnimationFinish` is used to repeat the
    animation, controlling the number of times through a state variable (`numPlaybacks`)
    and a constant maximum number of repetitions (`maxNumPlaybacks`).
  prefs: []
  type: TYPE_NORMAL
- en: 15\. My animation has a low playback performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mobile operating systems evolve, they use different graphic rendering techniques.
    Lottie adapts to those changes by releasing new versions periodically that improve
    the performance of the animations rendered. It's important to always use the latest
    version of `lottie-react-native` because it may contain performance improvements
    based on the latest rendering engines for Android and iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: React Native also offers an out-of-the-box performance improvement for the animated
    API by accepting the `useNativeDriver` parameter, which leverages the native capabilities
    of some UI components. Using this parameter may help when using `Animated` combined
    with `lottie-react-native`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to ensure that you are using the latest version of `lottie-react-native`,
    make sure you check the README documentation in the `lottie-react-native` repository,
    following its installation guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: 16\. How can I change the colors of my animation programmatically?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`lottie-react-native` allows developers to use the `colorFilters` property
    in any `LottieView` component with the intention of changing the colors for specific
    layers in an animation. The names for those layers are defined in After Effects
    and stored in the exported JSON Lottie file, such as in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are changing the colors for two layers named `border` and
    `bar` to be fully red.
  prefs: []
  type: TYPE_NORMAL
- en: 17\. How can I use a remote Lottie animation file in my app?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The simplest approach would be to use `fetch()` to download the JSON file,
    parse it, and set it in a state variable so that it can be used as a `source`
    prop in a `LottieView` container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: If this approach is followed, it's important to control the `LottieView` component
    until the animation is fully downloaded (`animation && <LottieView`).
  prefs: []
  type: TYPE_NORMAL
- en: 18\. My app is crashing on Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several users have reported crashes on Android due to errors. The latest versions
    of React Native have refined this process, and updating these should fix the issue,
    but if this is not a possibility, you can manually link the required libraries
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On your `android/app/src/main/java/<YourAppName>/MainApplication.java`, add
    `import com.airbnb.android.react.lottie.LottiePackage;` at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same file, add `packages.add(new LottiePackage());` under `List<ReactPackage>
    getPackages()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your `android/app/build.gradle`, add `implementation project(':lottie-react-native')`
    inside the dependencies section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your `android/settings.gradle`, add `include ':lottie-react-native'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right after the line you just added, add `project(':lottie-react-native').projectDir
    = new File(rootProject.projectDir, '../node_modules/lottie-react-native/src/android')`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should rebuild your app and find it is not crashing anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 19\. An error shows on my app – Cycle dependencies between targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a common error among React Native developers when having to deal with
    native code in iOS. The problem is related to changes in the dependencies tree
    that ended up rearranging which library depends on another. Therefore, the easiest
    solution is to reset the dependencies tree in our iOS project, ensuring that we
    end up with a clean dependency chain.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we can clean our `builds` folder by pressing *Command* + *Shift*
    + *K* on Xcode and then rebuilding the app, by pressing the `yarn ios` on the
    command line while being in the `project` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 20\. An error shows on my app – Execution failed for task ':lottie-react-native:compileDebugJavaWithJavac'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This error may arise after updating to a newer version of React Native and
    running the app on an Android device for the first time. Sometimes, just cleaning
    the `builds` folder fixes this problem, but there are two other approaches that
    may fix it if cleaning didn''t do the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: Migrate your app to AndroidX by adding `android.useAndroidX=true` and `android.enableJetifier=true`
    to your `gradle.properties` file and running `npx jetifier` immediately afterward.
    This prepares your app to include the AndroidX-based libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you are using JDK v8 instead of a newer version (Android Studio may
    install newer versions). You can follow the environment setup instructions on
    the React Native website ([https://reactnative.dev/docs/environment-setup](https://reactnative.dev/docs/environment-setup))
    and configure that version of Java as your default one in your shell configuration
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for reading through this final chapter, in which we presented the
    most common questions and issues reported when working with `lottie-react-native`.
    There are many other infrequently asked questions that can be found in the `lottie-react-native`
    repository issues ([https://github.com/lottie-react-native/lottie-react-native/issues](https://github.com/lottie-react-native/lottie-react-native/issues))
    and on Stack Overflow, so make sure that you turn to those resources if you find
    yourself in need of more specific answers.
  prefs: []
  type: TYPE_NORMAL
- en: 20\. An error shows on my app – Execution failed for task ':lottie-react-native:compileDebugJavaWithJavac'
  prefs: []
  type: TYPE_NORMAL
