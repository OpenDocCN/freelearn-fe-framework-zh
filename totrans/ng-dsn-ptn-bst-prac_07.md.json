["```js\nng g m home --routing\n```", "```js\nng g c home\n```", "```js\n<div class=\"flex h-screen\">\n  <aside class=\"w-1/6 bg-blue-500 text-white\">\n    <nav class=\"mt-8\">\n      <ul class=\"flex flex-col items-center space-y-4\">\n        <li>\n          <a class=\"flex items-center space-x-2 text-white\">\n            <span>Diary</span>\n          </a>\n        </li>\n        <li>\n          <a class=\"flex items-center space-x-2 text-white\">\n            <span>New Entry</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  </aside>\n  <main class=\"flex-1 bg-gray-200 p-4\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n```", "```js\n. . .\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'home' },\n  {\n    path: 'home',\n    loadChildren: () =>\n      import('./home/home.module').then((file) => file.HomeModule),\n  },\n];\n. . .\nexport class AppRoutingModule {}\n```", "```js\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home.component';\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n    children: [\n      {\n        path: 'diary',\n        loadChildren: () =>\n          import('../diary/diary.module').then((file) => file.DiaryModule),\n      },\n      {\n        path: '',\n        redirectTo: 'diary',\n        pathMatch: 'full',\n      },\n    ],\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HomeRoutingModule {}\n```", "```js\n<li>\n  <a routerLink=\"./diary\" class=\"flex items-center space-x-2 text-white\">\n    <span>Diary</span>\n  </a>\n</li>\n<li>\n  <a routerLink=\"./diary/new-reactive\" class=\"flex items-center space-x-2 text-white\">\n    <span>New Entry</span>\n  </a>\n</li>\n```", "```js\nng generate component ErrorPage\n```", "```js\n<div class=\"flex h-screen flex-col items-center justify-center\">\n  <h1 class=\"mb-4 text-6xl font-bold text-red-500\">Oops!</h1>\n  <h2 class=\"mb-2 text-3xl font-bold text-gray-800\">Looks like you're lost!</h2>\n  <p class=\"mb-6 text-gray-600\">\n    We couldn't find the page you're looking for.\n  </p>\n  <p class=\"text-gray-600\">\n    But don't worry! Go back to the Gym Diary and continue your progress!\n  </p>\n  <a\n    routerLink=\"/home\"\n    class=\"mt-4 rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-600\"\n  >\n    Go back to the Gym Diary\n  </a>\n</div>\n```", "```js\n. . .\nimport { ErrorPageComponent } from './error-page/error-page.component';\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'home' },\n  {\n    path: 'home',\n    loadChildren: () =>\n      import('./home/home.module').then((file) => file.HomeModule),\n  },\n  { path: 'error', component: ErrorPageComponent },\n  { path: '**', redirectTo: '/error' },\n];\n. . .\n```", "```js\n. . .\nconst routes: Routes = [\n  {\n    path: '',\n    component: DiaryComponent,\n    title: 'Diary',\n  },\n  {\n    path: 'new-template',\n    component: NewEntryFormTemplateComponent,\n  },\n  {\n    path: 'new-reactive',\n    component: NewEntryFormReactiveComponent,\n    title: 'Entry Form',\n  },\n];\n. . .\n```", "```js\nimport { Title } from '@angular/platform-browser';\n. . .\nexport class NewEntryFormTemplateComponent implements OnInit {\n. . .\n  private titleService = inject(Title);\n. . .\n  ngOnInit(): void {\n    this.titleService.setTitle('Template Form');\n  }\n. . .\n}\n```", "```js\nexport class ExerciseSetsService {\n . . .\n  updateItem(id: string, item: Partial<ExerciseSet>): Observable<ExerciseSet> {\n    return this.httpClient.put<ExerciseSet>(`${this.url}/${id}`, item);\n  }\n  getItem(id: string): Observable<ExerciseSet> {\n    return this.httpClient.get<ExerciseSet>(`${this.url}/${id}`);\n  }\n}\n```", "```js\nconst routes: Routes = [\n. . .\n. . .\n  {\n    path: 'entry',\n    component: NewEntryFormReactiveComponent,\n    title: 'Entry Form',\n  },\n  {\n    path: 'entry/:id',\n    component: NewEntryFormReactiveComponent,\n    title: 'Edit Entry',\n  },\n];\n```", "```js\n<li>\n  <a\n    routerLink=\"./diary/entry\"\n    class=\"flex items-center space-x-2 text-white\"\n  >\n    <span>New Entry</span>\n  </a>\n</li>\n```", "```js\nexport class EntryItemComponent {\n  @Input('exercise-set') exerciseSet!: ExerciseSet;\n  @Output() editEvent = new EventEmitter<ExerciseSet>();\n  @Output() deleteEvent = new EventEmitter<string>();\n  delete() {\n    this.deleteEvent.emit(this.exerciseSet.id);\n  }\n  editEntry() {\n    this.editEvent.emit(this.exerciseSet);\n  }\n}\n```", "```js\n. . .\n<button\n  class=\"rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700\"\n  (click)=\"editEntry()\"\n>\n  Edit\n</button>\n. . .\n```", "```js\nexport class ListEntriesComponent {\n  @Input() exerciseList!: ExerciseSetList;\n  @Output() editEvent = new EventEmitter<ExerciseSet>();\n  @Output() deleteEvent = new EventEmitter<string>();\n. . .\n}\n<app-entry-item\n  [exercise-set]=\"item\"\n  (deleteEvent)=\"deleteEvent.emit($event)\"\n  (editEvent)=\"editEvent.emit($event)\"\n/>\n```", "```js\n<app-list-entries\n  [exerciseList]=\"exerciseList\"\n  (deleteEvent)=\"deleteItem($event)\"\n  (editEvent)=\"editEntry($event)\"\n/>\n```", "```js\naddExercise(newSet: ExerciseSet) {\n  this.router.navigate(['/home/diary/entry']);\n}\ndeleteItem(id: string) {\n  this.exerciseSetsService.deleteItem(id).subscribe();\n}\neditEntry(updateSet: ExerciseSet) {\n  const id = updateSet.id ?? '';\n  this.router.navigate([`/home/diary/entry/${id}`]);\n}\n```", "```js\n<button\n  type=\"submit\"\n  [disabled]=\"entryForm.invalid\"\n  [class.opacity-50]=\"entryForm.invalid\"\n  class=\"rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700\"\n>\n  Add Entry\n</button>\n```", "```js\n. . .\nexport class NewEntryFormReactiveComponent implements OnInit {\n. . .\n  private route = inject(ActivatedRoute);\n  private entryId?: string | null;\n. . .\n  ngOnInit(): void {\n    this.entryId = this.route.snapshot.paramMap.get('id');\n    if (this.entryId) {\n      this.exerciseSetsService\n        .getItem(this.entryId)\n        .subscribe((entry) => this.updateForm(entry));\n    }\n  }\n  updateForm(entry: ExerciseSet): void {\n    let { id: _, ...entryForm } = entry;\n    this.entryForm.setValue(entryForm);\n  }\n. . .\n}\n```", "```js\nnewEntry() {\n  if (this.entryForm.valid) {\n    const newEntry = { ...this.entryForm.value };\n    if (this.entryId) {\n      this.exerciseSetsService\n        .updateItem(this.entryId, newEntry)\n        .subscribe((entry) => this.router.navigate(['/home']));\n    } else {\n      this.exerciseSetsService\n        .addNewItem(newEntry)\n        .subscribe((entry) => this.router.navigate(['/home']));\n    }\n  }\n}\n```", "```js\n. . .\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      bindToComponentInputs: true,\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```", "```js\nexport class NewEntryFormReactiveComponent implements OnInit {\n  @Input('id') entryId?: string;\n. . .\n  ngOnInit(): void {\n    if (this.entryId) {\n      this.exerciseSetsService\n        .getItem(this.entryId)\n        .subscribe((entry) => this.updateForm(entry));\n    }\n  }\n. . .\n}\n```", "```js\n @Input() id?: string;\n```", "```js\nng g m login --routing\nng g c login\nng g s login/auth\n```", "```js\n. . .\n@NgModule({\n  declarations: [\n    LoginComponent\n  ],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class LoginModule { }\n```", "```js\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'home' },\n  {\n    path: 'home',\n    loadChildren: () =>\n      import('./home/home.module').then((file) => file.HomeModule),\n  },\n  {\n    path: 'login',\n    loadChildren: () =>\n      import('./login/login.module').then((file) => file.LoginModule),\n  },\n  { path: 'error', component: ErrorPageComponent },\n  { path: '**', redirectTo: '/error' },\n];\n```", "```js\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n```", "```js\nexport interface LoginForm {\n  username: string;\n  password: string;\n}\nexport interface Token {\n  access_token: string;\n}\n```", "```js\nexport class AuthService {\n  private httpClient = inject(HttpClient);\n  private url = 'http://localhost:3000/auth/login';\n  private token?: Token;\n  login(loginForm: Partial<LoginForm>): Observable<Token> {\n    return this.httpClient\n      .post<Token>(this.url, loginForm)\n      .pipe(tap((token) => (this.token = token)));\n  }\n  get isLogged() {\n    return this.token ? true : false;\n  }\n  logout() {\n    this.token = undefined;\n  }\n}\n```", "```js\n<div class=\"flex justify-center items-center h-screen bg-blue-500\">\n  <div class=\"bg-blue-200 rounded shadow p-6\">\n    <h2 class=\"text-2xl font-bold text-gray-800 mb-6\">Login</h2>\n    <form class=\"space-y-4\"\n    [formGroup]=\"loginForm\"\n    (ngSubmit)=\"login()\"\n    >\n    <div>\n      <label for=\"username\" class=\"text-gray-700\">Username</label>\n      <input type=\"text\" id=\"username\" class=\"block w-full rounded border-gray-300 p-2 focus:border-blue-500 focus:outline-none\" formControlName=\"username\">\n    </div>\n    <div>\n      <label for=\"password\" class=\"text-gray-700\">Password</label>\n      <input type=\"password\" id=\"password\" class=\"block w-full rounded border-gray-300 p-2 focus:border-blue-500 focus:outline-none\" formControlName=\"password\">\n    </div>\n    <div>\n      <button\n        type=\"submit\"\n        class=\"bg-blue-500 text-white rounded px-4 py-2 w-full\"\n        [disabled]=\"loginForm.invalid\"\n        [class.opacity-50]=\"loginForm.invalid\"\n        >Login</button>\n    </div>\n    </form>\n  </div>\n</div>\n```", "```js\nexport class LoginComponent {\n  private formBuilder = inject(NonNullableFormBuilder);\n  private loginService = inject(AuthService);\n  private router = inject(Router);\n  public loginForm = this.formBuilder.group({\n    username: ['', [Validators.required]],\n    password: ['', [Validators.required]],\n  });\n  login() {\n    const loginValue = { ...this.loginForm.value };\n    this.loginService.login(loginValue).subscribe({\n      next: (_) => {\n        this.router.navigate(['/home']);\n      },\n      error: (e) => alert('User not Found'),\n    });\n  }\n}\n```", "```js\n<li>\n  <a\n    (click)=\"logout()\"\n    class=\"flex items-center space-x-2 text-white\"\n  >\n    <span>Logout</span>\n  </a>\n</li>\nexport class HomeComponent {\n  private authService = inject(AuthService);\n  private router = inject(Router);\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['./login']);\n  }\n}\n```", "```js\nng g guard login/auth\n```", "```js\nexport const authGuard: CanActivateFn = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  if (authService.isLogged) {\n    return true;\n  } else {\n    return router.parseUrl('/login');\n  }\n};\n```", "```js\nconst routes: Routes = [\n  {\n    path: '',\n    component: DiaryComponent,\n    title: 'Diary',\n    canActivate: [authGuard],\n  },\n  {\n    path: 'new-template',\n    component: NewEntryFormTemplateComponent,\n  },\n  {\n    path: 'entry',\n    component: NewEntryFormReactiveComponent,\n    title: 'Entry Form',\n  },\n  {\n    path: 'entry/:id',\n    component: NewEntryFormReactiveComponent,\n    title: 'Edit Entry',\n  },\n];\n```", "```js\nexport const authGuard: CanActivateChildFn = (route, state) => {\n. . .\n};\n```", "```js\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: '',\n        component: DiaryComponent,\n        title: 'Diary',\n      },\n      {\n        path: 'new-template',\n        component: NewEntryFormTemplateComponent,\n      },\n      {\n        path: 'entry',\n        component: NewEntryFormReactiveComponent,\n        title: 'Entry Form',\n      },\n      {\n        path: 'entry/:id',\n        component: NewEntryFormReactiveComponent,\n        title: 'Edit Entry',\n      },\n    ],\n    canActivateChild: [authGuard],\n  },\n];\n```", "```js\nng g resolver diary/diary\n```", "```js\nexport const diaryResolver: ResolveFn<ExerciseSetListAPI> = (route, state) => {\n  const exerciseSetsService = inject(ExerciseSetsService);\n  return exerciseSetsService.getInitialList();\n};\n```", "```js\n{\n  path: '',\n  component: DiaryComponent,\n  title: 'Diary',\n  resolve: { diaryApi: diaryResolver },\n},\n```", "```js\n. . .\nprivate route = inject(ActivatedRoute);\n. . .\n  ngOnInit(): void {\n    this.route.data.subscribe(({ diaryApi }) => {\n      this.exerciseList = diaryApi.items;\n    });\n  }\n. . .\n```", "```js\nexport const entryResolver: ResolveFn<ExerciseSet> = (route, state) => {\n  const entryId = route.paramMap.get('id')!;\n  const exerciseSetsService = inject(ExerciseSetsService);\n  return exerciseSetsService.getItem(entryId);\n};\n```", "```js\n{\n  path: 'entry/:id',\n  component: NewEntryFormReactiveComponent,\n  title: 'Edit Entry',\n  resolve: { entry: entryResolver },\n},\n```", "```js\n  private route = inject(ActivatedRoute);\n. . .\n  ngOnInit(): void {\n    if (this.entryId) {\n      this.route.data.subscribe(({ entry }) => {\n        this.updateForm(entry);\n      });\n    }\n  }\n```"]