- en: Chapter 14. UI Effects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十四章。UI效果
- en: We've so far looked at a range of incredibly useful widgets and interaction
    helpers. All are easy to use, but at the same time are powerful and highly configurable.
    Some have had their subtle nuances, which have required consideration and thought
    during their implementation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过一系列非常有用的小部件和交互式辅助工具。所有这些都易于使用，但同时功能强大，且高度可配置。一些细微的细节需要在实现过程中加以考虑和思考。
- en: The effects provided by the library, on the other hand, are for the most part
    extremely compact, with very few options to learn and no methods at all. We can
    use these effects quickly and easily, with minimum configuration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，库提供的效果大多非常紧凑，几乎没有学习的选项，也没有方法。我们可以快速、轻松地使用这些效果，最小化配置。
- en: 'The effects that we''ll be looking at in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将要看的效果如下：
- en: Highlight
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强调
- en: Bounce
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹跳
- en: Shake
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摇晃
- en: Transfer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移
- en: Scale
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比例
- en: Explode
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爆炸
- en: Puff
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 膨胀
- en: Pulsate
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脉动
- en: Slide
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幻灯片
- en: Blind
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 百叶窗
- en: Clip
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪辑
- en: Fold
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折叠
- en: Using the core effects file
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用核心效果文件
- en: Like the individual components themselves, the effects require the services
    of a separate core file. It provides essential functionality to the effects, such
    as creating wrapper elements and controlling the animations. Most, but not all,
    of the effects have their own source files, which build on the core foundation
    to add functionality specific to the effect.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 就像单独的组件本身一样，效果也需要一个单独的核心文件来提供必要的功能，如创建包装元素和控制动画。大多数效果都有自己的源文件，它们在核心基础上添加了特定于效果的功能。
- en: All we need to do to use an effect is include the core file (`jquery.ui.effect.js`)
    in the page, before the effect's source file. However, unlike the `jquery.ui.core.js`
    file, the `jquery.ui.effect.js` file has been designed to be used, in part, completely
    standalone.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用效果，我们只需在页面中包含核心文件（`jquery.ui.effect.js`），位于效果源文件之前。然而，与`jquery.ui.core.js`文件不同，`jquery.ui.effect.js`文件在设计上可以部分完全独立使用。
- en: Using color animations
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用颜色动画
- en: If we use the core effect file on its own, we can take advantage of the color
    animations. This includes changing the background color of an element to another
    color (and not just a snap change, but a smooth morphing of one color into another),
    class transitions, and advanced easing animations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们单独使用核心效果文件，我们可以利用颜色动画。这包括将元素的背景颜色更改为另一种颜色（不仅仅是突然变化，而是平滑地将一种颜色变成另一种颜色），类别转换和高级缓动动画。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: jQuery UI 1.10 uses Version 2.0.0 of the jQuery Color library as the basis for
    much of the color support in the library. If you would like to learn more about
    jQuery Color, then visit the project page at [https://github.com/jquery/jquery-color](https://github.com/jquery/jquery-color).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 1.10使用jQuery Color库的2.0.0版本作为库中大部分颜色支持的基础。如果您想了解更多关于jQuery Color的信息，请访问[https://github.com/jquery/jquery-color](https://github.com/jquery/jquery-color)项目页面。
- en: The core effects plugin within jQuery UI adds the ability to animate color properties
    using `rgb()`, `rgba()`, hex values, or even color names such as aqua to jQuery
    Core. All we need to do is include the jQuery UI effects core file and jQuery's
    `.animate()` will gain support for colors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI中的核心效果插件添加了使用`rgb()`，`rgba()`，十六进制值甚至诸如水蓝色的颜色名称到jQuery核心的能力。我们所需要做的就是包含jQuery
    UI效果核心文件，jQuery的`.animate()`将支持颜色。
- en: 'Let''s take a look at how to create color animations. First, create the following
    new page:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建颜色动画。首先，创建以下新页面：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save the page as `effectColor.html`. In the last `<script>` block, add the
    following code, which will provide the visual feedback for each field:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将页面保存为`effectColor.html`。在最后的`<script>`块中，添加以下代码，为每个字段提供视觉反馈：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, all we need is jQuery and the `jquery.ui.effect.js` file to
    create attractive color transitions. On the page, we have a simple `<form>` element
    enclosing three container elements and three sets of the `<label>` and `<input>`
    elements. The `animate` method is a part of jQuery rather than jQuery UI specifically,
    but the `jquery.ui.effect.js` file extends jQuery's `animate` method by allowing
    it to specifically work with colors and classes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们所需要的只是jQuery和`jquery.ui.effect.js`文件，就可以创建吸引人的颜色过渡效果。在页面上，我们有一个简单的`<form>`元素围绕着三个容器元素和三组`<label>`和`<input>`元素。`animate`方法是jQuery的一部分，而不是特别是jQuery
    UI的，但`jquery.ui.effect.js`文件通过允许它专门处理颜色和类别，扩展了jQuery的`animate`方法。
- en: 'When the **Submit** button is clicked, we simply use the `animate` method to
    apply a series of new CSS properties to the target elements based on whether the
    text inputs have been filled out or not. If they have been completed, we color
    them green, and if not, we color them red. We also use a basic stylesheet in this
    example. In another new page in your text editor, add the following basic selectors
    and rules:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当单击**提交**按钮时，我们只需使用`animate`方法根据文本输入框是否已填写来将一系列新的 CSS 属性应用于目标元素。如果已经填写，我们将它们着色为绿色；如果没有填写，我们将其着色为红色。在此示例中，我们还使用了基本样式表。在文本编辑器中的另一页中，添加以下基本选择器和规则：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save this as `effectColor.css` in the `css` folder. When we view this page in
    our browser, we should see that any fields that are left blank smoothly turn red
    when the **Submit** button is clicked, while fields that are not empty smoothly
    turn green. However, it's most attractive when a field changes from red to green.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectColor.css`，并放在`css`文件夹中。当我们在浏览器中查看此页面时，我们应该看到任何留空的字段在单击**提交**按钮时平滑变为红色，而不为空的字段在单击时平滑变为绿色。但是，当一个字段从红色变为绿色时最具吸引力。
- en: 'The following screenshot shows the page once the **Submit** button has been
    clicked:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在单击**提交**按钮后页面的情况：
- en: '![Using color animations](img/2209OS_14_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用颜色动画](img/2209OS_14_01.jpg)'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A key point to note is that we've used `backgroundColor` as the attribute in
    our code; the reason for this is that jQuery is not able to animate the `background-color`
    CSS style by default, unless we use the jQuery Color plugin. Let's take a look
    at these attributes in more detail.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的关键点是我们在代码中使用了`backgroundColor`作为属性；这样做的原因是，jQuery 默认情况下不能动画显示`background-color`
    CSS 样式，除非我们使用 jQuery Color 插件。让我们更详细地看一下这些属性。
- en: 'The style attributes that color animations can be used on are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用颜色动画的样式属性如下所示：
- en: '`backgroundColor`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backgroundColor`'
- en: '`borderTopColor`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`borderTopColor`'
- en: '`borderRightColor`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`borderRightColor`'
- en: '`borderBottomColor`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`borderBottomColor`'
- en: '`borderLeftColor`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`borderLeftColor`'
- en: '`color`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`'
- en: '`outlineColor`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outlineColor`'
- en: Colors may be specified using either RGB, hexadecimal (in the format `#xxx[xxx]`),
    or even standard color names. It is recommended that RGB or hexadecimal colors
    be used where possible, as browsers do not always recognize color names consistently.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色可以使用 RGB、十六进制（格式为`#xxx[xxx]`）甚至标准颜色名称来指定。建议在可能的情况下使用 RGB 或十六进制颜色，因为浏览器并不总是一致地识别颜色名称。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default build of the Color plugin only includes support for basic color
    names. If you need to use other color names, you can download a version that includes
    support for this from [https://github.com/jquery/jquery-color#readme](https://github.com/jquery/jquery-color#readme).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Color 插件的默认构建仅包括对基本颜色名称的支持。如果您需要使用其他颜色名称，可以从 [https://github.com/jquery/jquery-color#readme](https://github.com/jquery/jquery-color#readme)
    下载支持此功能的版本。
- en: Using class transitions
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类过渡
- en: In addition to animating individual color attributes, `jquery.ui.effect.js`
    also gives us the powerful ability to animate between entire classes. This allows
    us to switch styles smoothly and seamlessly without sudden jarring changes. Let's
    look at this aspect of the file's use in the following example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对单个颜色属性进行动画处理外，`jquery.ui.effect.js` 还赋予了我们强大的能力，可以在整个类之间进行动画处理。这使我们能够在不出现突然刺耳变化的情况下平滑无缝地切换样式。让我们在以下示例中看一下文件使用的这个方面。
- en: 'Change the `<link>` tag in the `<head>` element of `effectColor.html` to point
    to a new stylesheet:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将`effectColor.html`的`<head>`元素中的`<link>`标签更改为指向一个新样式表：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then change the final `<script>` element so that it appears as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后更改最后一个 `<script>` 元素，使其显示如下：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save this as `effectClass.html`. The `jquery.ui.effect.js` file extends the
    jQuery class API by allowing us to specify a duration over which the new classname
    should be applied, instead of just switching it instantly. We can also specify
    an easing effect.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectClass.html`。`jquery.ui.effect.js` 文件通过允许我们指定应用新类名的持续时间来扩展了 jQuery
    类 API，而不仅仅是立即切换它。我们还可以指定缓动效果。
- en: The `switchClass` method of the `jquery.ui.effect.js` file is used when the
    fields already have one of the classnames and need to change to a different classname.
    The `switchClass` method requires several arguments; we specify the classname
    to be removed, followed by the classname to be added. We also specify duration
    as the third argument.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当字段已经具有其中一个类名并且需要更改为不同的类名时，`jquery.ui.effect.js` 文件的 `switchClass` 方法被使用。`switchClass`
    方法需要几个参数；我们指定要移除的类名，然后是要添加的类名。我们还将持续时间指定为第三个参数。
- en: Essentially, the page functions as it did before; although, using this type
    of class transition allows us to use non-color-based style rules as well, so we
    can adjust widths, heights, or many other style properties if we want to. Note
    that background images cannot be transitioned in this way.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，页面的功能与以前相同；但是，使用这种类型的类别转换还允许我们使用非基于颜色的样式规则，因此我们可以调整宽度、高度或许多其他样式属性。请注意，无法以这种方式过渡背景图像。
- en: As in the previous example, we have a stylesheet attached. This is essentially
    the same as in the previous example, except with some styles for our two new classes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个示例一样，我们附加了一个样式表。本质上与上一个示例相同，只是为我们的两个新类别添加了一些样式。
- en: 'Add the following selectors and rules to the bottom of `effectColor.css`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`effectColor.css`的底部添加以下选择器和规则：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the updated file as `effectClass.css` in the `css` folder.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将更新后的文件另存为`css`文件夹中的`effectClass.css`。
- en: Advanced easing
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级缓动
- en: The `animate` method found in standard jQuery has some basic easing capabilities
    built in, but for more advanced easing, you have to include an additional easing
    plugin (ported to jQuery by GSGD).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 标准jQuery中的`animate`方法内置了一些基本的缓动功能，但是要使用更高级的缓动，您必须包含额外的缓动插件（由GSGD移植到jQuery）。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See the easing plugin's project page for further information at [http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅缓动插件的项目页面[http://gsgd.co.uk/sandbox/jquery/easing/](http://gsgd.co.uk/sandbox/jquery/easing/)。
- en: The `jquery.ui.effect.js` file has all of these advanced easing options built
    in, so there is no need to include additional plugins. We won't be looking at
    them in any real detail in this section; however, we will be using them in some
    of the examples later on in the chapter, in the section, *Scaling elements on
    a page*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`jquery.ui.effect.js`文件中内置了所有这些高级缓动选项，因此无需包含其他插件。在本节中我们不会详细讨论它们；但是，我们将在本章后面的某些示例中使用它们，在“页面上缩放元素”部分。'
- en: Highlighting specified elements
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高亮指定的元素
- en: 'The highlight effect temporarily applies a light-yellow coloring to any element
    that it''s called on (the effect is also known as **Yellow Fade Technique** (**YFT**)).
    Let''s put a simple example together, so we can see the effect in action:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮效果会临时将被调用的任何元素变成浅黄色（该效果也被称为**黄色渐变技术**（**YFT**））。让我们一起来举个简单的例子，这样我们就能看到效果的实际作用：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `<script>` element refers to the effect''s source file so that it uses
    the `jquery.effects.highlight.js` file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`<script>`元素引用效果的源文件，以便使用`jquery.effects.highlight.js`文件：'
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then remove the `<form>` element from the `<body>` element of the page and
    replace it with the following markup:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从页面的`<body>`元素中删除`<form>`元素，并用以下标记替换它：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lastly, change the final `<script>` element so that ends up as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将最终的`<script>`元素更改为以下内容：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save this page as `effectHighlight.html`. The code that invokes the highlight
    effect takes the same familiar form as other library components. The `effect`
    method is called and the actual effect is specified as a string argument to the
    method.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将此页面保存为`effectHighlight.html`。调用高亮效果的代码与其他库组件的形式相同。调用`effect`方法，并将实际效果指定为方法的字符串参数。
- en: We simply sniff the `userAgent` string and see if a search for Windows, Mac,
    or Linux returns a positive integer. If a positive integer is found, the `userAgent`
    string contains the search word; if `-1` is returned, the search term was not
    found.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需检查`userAgent`字符串，看是否搜索Windows、Mac或Linux返回了正整数。如果找到正整数，则`userAgent`字符串包含搜索词；如果返回了`-1`，则未找到搜索词。
- en: 'We also need to create the new stylesheet, not for the effect to work, but
    just tidy things up a little. In a new page in your text editor, add the following
    selectors and rules:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建新的样式表，不是为了让效果起作用，而是为了稍微整理一下。在文本编辑器的新页面中，添加以下选择器和规则：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save this file as `effectHighlight.css` in the `css` folder.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件另存为`css`文件夹中的`effectHighlight.css`。
- en: 'View the example and click the **Hint** button. The icon for whichever operating
    system you are using should be highlighted briefly:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 查看示例，点击**提示**按钮。应该会短暂地突出显示你正在使用的操作系统的图标：
- en: '![Highlighting specified elements](img/2209OS_14_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![高亮指定的元素](img/2209OS_14_02.jpg)'
- en: While our example may seem a little contrived, it is easy to see the potential
    for this effect as an assistance tool on the frontend. Whenever there is a sequence
    of actions that needs to be completed in a specific order, the highlight effect
    can instantly give the visitor a visual cue as to the step that needs to be completed
    next.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的示例可能看起来有些刻意，但很容易看出这种效果作为前端辅助工具的潜力。每当有需要按特定顺序完成一系列操作时，高亮效果都可以立即向访问者提供关于下一步需要完成的步骤的视觉提示。
- en: Adding additional effect arguments
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加额外的效果参数
- en: 'Each of the `effect` methods, as well as the argument that dictates which effect
    is actually applied, can take up three additional arguments that control how the
    effect works. All of these arguments are optional, and consist of the following
    (in the listed order):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `effect` 方法，以及指定实际应用的效果的参数，都可以使用三个额外的参数来控制效果的工作方式。所有这些参数都是可选的，包括以下内容（按列出的顺序）：
- en: An object containing additional configuration options
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含额外配置选项的对象
- en: An integer representing in milliseconds, the duration of the effect, or a string
    specifying one of `slow`, `normal`, or `fast`
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个表示效果持续时间的毫秒数的整数，或指定 `slow`、`normal` 或 `fast` 中的一个的字符串
- en: A callback function that is executed when the effect ends
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当效果结束时执行的回调函数
- en: The `highlight` effect has only one configurable option that can be used in
    the object passed as the second argument, and that is the highlight color.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`highlight` 效果只有一个可配置选项，可以在作为第二个参数传递的对象中使用，那就是高亮颜色。'
- en: 'Let''s add some of these additional arguments into our highlight example to
    clarify their usage. Change the call to the `effect` method in the final `<script>`
    element in `effectHighlight.html` so that it appears as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将一些这些额外的参数添加到我们的高亮示例中，以澄清它们的用法。将 `effect` 方法在 `effectHighlight.html` 最后的
    `<script>` 元素中的调用更改为以下内容：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save this as `effectHighlightCallback.html`. Perhaps the most striking feature
    of our new code is the empty object passed as the second argument. In this example,
    we don't use any additional configurable options, but we still need to pass in
    the empty object in order to access the third and fourth arguments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `effectHighlightCallback.html`。我们新代码最引人注目的特点也许是作为第二个参数传递的空对象。在这个示例中，我们不使用任何额外的可配置选项，但我们仍然需要传递空对象以便访问第三个和第四个参数。
- en: The callback function, passed as the third argument, is perhaps the least useful
    callback in the history of JavaScript, but it does serve to illustrate how easy
    it is to arrange additional post-animation code execution following an effect.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第三个参数传递的回调函数，可能是 JavaScript 历史上最没用的回调函数之一，但它确实说明了在效果后如何轻松安排额外的代码执行。
- en: Bouncing
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹跳
- en: 'Another simple effect we can use with little configuration is the bounce effect.
    To see this effect in action change the contents of the `<body>` element in `effectHighlight.html`
    to the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用很少的配置来使用另一个简单的效果，那就是弹跳效果。要看到这个效果的实际效果，请将 `effectHighlight.html` 中 `<body>`
    元素的内容更改为以下内容：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We also need to use the source file for the bounce effect; change the reference
    to the `jquery.ui.effect-highlight.js` file, so that it points to the `bounce.js`
    source file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要使用弹跳效果的源文件；修改对 `jquery.ui.effect-highlight.js` 文件的引用，使其指向 `bounce.js` 源文件：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Save this as `effectBounce.html`. We need to add a tiny bit of styling to really
    see the effect in full, but it''s probably not worth creating a whole new stylesheet
    so simply replace the `<link>` element in the `<head>` element of the page with
    the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `effectBounce.html`。我们需要添加一点样式才能真正看到效果，但可能不值得创建一个全新的样式表，所以只需将页面的 `<head>`
    元素中的 `<link>` 元素替换为以下内容即可：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, change the final `<script>` element so that it appears as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改最终的 `<script>` 元素，使其如下所示：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using the bounce effect in this example shows how easy it is to add this simple
    but attractive effect. We configure the `distance` option to set how far the element
    travels. Other options that can be configured are listed in the following table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中使用弹跳效果显示了添加此简单但引人注目的效果有多容易。我们配置 `distance` 选项以设置元素移动的距离。可以配置的其他选项列在下表中：
- en: '| Option | Default value | Use |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `direction` | `"up"` | Sets the direction of the bounce |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `direction` | `"up"` | 设置弹跳方向 |'
- en: '| `distance` | `20` | Sets the distance in pixels of the first bounce |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | `20` | 设置第一次弹跳的像素距离 |'
- en: '| `times` | `5` | Sets the number of times the element should bounce |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `times` | `5` | 设置元素应该弹跳的次数 |'
- en: When you run the example you will notice that the bounce effect has an ease-out
    easing feature built into it so the distance of the bounce will automatically
    decrease as the animation proceeds.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行示例时，你会注意到弹跳效果中内置了一个缓出缓入的特性，因此随着动画的进行，弹跳的距离会自动减小。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The default easing effect used here is `swing`; this is one of many easings
    features that are available for use within the library. Easing functions control
    the speed at which an animation proceeds at different points within the animation;
    you can see the full list of easings features available at [http://api.jqueryui.com/easings/](http://api.jqueryui.com/easings/).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的默认缓动效果是`swing`；这是库中可以使用的许多缓动特性之一。缓动函数控制动画在不同点处进行的速度；可以在[http://api.jqueryui.com/easings/](http://api.jqueryui.com/easings/)上看到可用的完整的缓动特性列表。
- en: One thing to note is that with most of the different effects, including the
    bounce effect (but not the highlight effect we looked at earlier), the effect
    is not actually applied to the specified element. Instead a wrapper element is
    created and the element targeted by the effect is appended to the inside of the
    wrapper. The actual effect is then applied to the wrapper.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，对于大多数不同的效果，包括弹跳效果（但不是我们之前看到的亮点效果），实际上并未应用于指定的元素。相反，创建了一个包装元素，并且效果所针对的元素被附加到包装器的内部。实际效果然后应用于包装器。
- en: This is an important detail to be aware of, because if you need to manipulate
    the element that has the effect applied to it in mid-animation, then the wrapper
    will need to be targeted instead of the original element. Once the effect's animation
    has completed, the wrapper is removed from the page.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个要注意的重要细节，因为如果你需要在动画进行中操纵具有应用效果的元素，那么包装器将需要被定位，而不是原始元素。一旦效果的动画完成，包装器就从页面中移除。
- en: Shaking an element
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抖动元素
- en: The shake effect is very similar to the bounce effect, but with the crucial
    difference of not having any built-in easing. So, the targeted element will shake
    the same distance for the specified number of times, instead of lessening each
    time (although it will come to a smooth stop at the end of the animation).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 抖动效果与弹跳效果非常相似，但关键区别是没有内置的缓动。因此，目标元素会在指定的次数内以相同的距离抖动，而不是每次减小（尽管在动画结束时会平稳停止）。
- en: 'Let''s change the previous example so that it uses the shake effect instead
    of the bounce effect. Change `effectBounce.html` so that it uses the `shake.js`
    source file instead of the bounce source file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改前面的示例，使其使用抖动效果而不是弹跳效果。修改`effectBounce.html`以使用`shake.js`源文件而不是弹跳源文件：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then change the click-handler in the final `<script>` element at the bottom
    of the `<body>` element so that it appears as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后修改最终`<body>`元素底部的最后一个`<script>`元素中的点击处理程序，使其如下所示：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save this as `effectShake.html`. This time we've made use of the `direction`
    configuration option and the duration argument. The configuration option controls
    the direction of the shake. We set this to override the default setting for this
    option, which is `left`. The duration we use speeds up the animation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectShake.html`。这次我们使用了`direction`配置选项和持续时间参数。配置选项控制了抖动的方向。我们将其设置为覆盖该选项的默认设置，即`left`。我们使用的持续时间加快了动画。
- en: 'This effect shares the same options as the bounce effect, although the defaults
    are set slightly differently. The options are listed in the following table:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这种效果与弹跳效果共享相同的选项，尽管默认设置略有不同。选项列在下表中：
- en: '| Option | Default value | Uses |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `direction` | `"left"` | Sets the direction of the shake |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `direction` | `"left"` | 设置抖动的方向 |'
- en: '| `distance` | `20` | Sets the distance of the shake in pixels |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | `20` | 设置抖动的距离（像素） |'
- en: '| `times` | `3` | Sets the number of times the element should shake |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `times` | `3` | 设置元素应该抖动的次数 |'
- en: Transferring an element's outline
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转移元素的轮廓
- en: 'The transfer effect is different from others, in that it doesn''t directly
    affect the targeted element. Instead, it transfers the outline of a specified
    element to another specified element. To see this effect in action, change the
    `<body>` element of `effectShake.html` so that it contains the following elements:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 转移效果与其他效果不同，因为它不直接影响目标元素。相反，它将指定元素的轮廓转移到另一个指定元素上。要看到此效果的实际操作，请将`effectShake.html`的`<body>`元素更改为包含以下元素：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Save this as `effectTransfer.html`. We''ve created a basic product listing;
    when the **Buy** button is clicked, the transfer effect will give the impression
    of the product being moved into the basket. To make this happen, change the final
    `<script>` element so that it contains the following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '将此保存为`effectTransfer.html`。我们创建了一个基本的产品列表；当点击**购买**按钮时，转移效果会给人一种产品被移入篮子的印象。为了实现这一点，将最后的`<script>`元素更改为包含以下代码： '
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Of course, a proper shopping cart application would be exponentially more complex
    than this, but we do get to see the transfer effect in all its glory. Don''t forget
    to update the effect''s source file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一个适当的购物车应用程序会比这复杂得多，但我们确实可以看到转移效果的全部荣耀。不要忘记更新效果的源文件：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We also need some CSS for this example, so create the following new stylesheet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们还需要一些 CSS，所以创建以下新样式表：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Save this as `effectTransfer.css` in the `css` folder. The key rule in our new
    stylesheet is the one that targets the element which has the class as `ui-effects-transfer`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectTransfer.css`在`css`文件夹中。我们新样式表中的关键规则是针对具有类`ui-effects-transfer`的元素的规则。
- en: This element is created by the effect and together with our styling produces
    the green outline that is transferred from the product to the basket.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元素是由效果创建的，与我们的样式一起产生绿色轮廓，该轮廓从产品转移到篮子中。
- en: 'Run the file in your browser. I think you''ll agree that it''s a nice effect
    which would add value to any page that it was used on. Here''s how it should look
    while the transfer is occurring:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行文件。我想你会同意，这是一个很好的效果，无论在哪个页面使用都会增加价值。在转移发生时，它应该是这样的：
- en: '![Transferring an element''s outline](img/2209OS_14_03.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![转移元素的轮廓](img/2209OS_14_03.jpg)'
- en: 'The transfer effect has just two configurable options, one of which is required
    and that we have already seen. For reference, both are listed in the following
    table:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 转移效果只有两个可配置选项，其中一个是必需的，我们已经看到了。供参考，两者均列在以下表中：
- en: '| Option | Default value | Use |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `className` | `"ui-effects-transfer"` | Applies a custom classname to the
    effect helper element. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `className` | `"ui-effects-transfer"` | 将自定义类名应用于效果辅助元素。 |'
- en: '| `to` | `"none"` | Sets the element the effect will be transferred to. This
    property is mandatory. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `to` | `"none"` | 设置效果将转移到的元素。此属性是必需的。 |'
- en: The four effects that we've looked at so far all have one thing in common–they
    can only be used with the `effect` method. The remaining effects can be used not
    only with the `effect` method, but also with jQuery's toggle and the `show`/`hide`
    methods.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过的四种效果都有一个共同点-它们只能与`effect`方法一起使用。其余的效果不仅可以与`effect`方法一起使用，还可以与 jQuery
    的切换和`show`/`hide`方法一起使用。
- en: Let's take a look.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看。
- en: Scaling elements on a page
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在页面上缩放元素
- en: The scale effect is highly configurable and is used to shrink an element. It
    is very effective when used to hide elements. In this example we'll use the `hide()`
    method to trigger the effect, instead of using the `effect` method.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放效果是高度可配置的，用于缩小元素。当用于隐藏元素时非常有效。在这个示例中，我们将使用`hide()`方法触发效果，而不是使用`effect`方法。
- en: 'We''ll use a few of the CSS framework classes in this example, as well as a
    few custom styles; so add two new `<link>` elements to the `<head>` element of
    `effectTransfer.html`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用一些 CSS 框架类，以及一些自定义样式；所以将两个新的`<link>`元素添加到`effectTransfer.html`的`<head>`元素中：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, replace the underlying markup in the `<body>` element with the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`<body>`元素中的底层标记替换为以下内容：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Don''t forget to change the `<script>` element for the effect, to the scale
    effect''s source file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将效果的`<script>`元素更改为缩放效果的源文件：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, replace the last `<script>` element, so that it appears as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，替换最后一个`<script>`元素，使其显示如下：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Save the new page as `effectScale.html`. The custom stylesheet we use is as
    follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将新页面保存为`effectScale.html`。我们使用的自定义样式表如下：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save this file as `effectScale.css` in the `css` folder. These styles are used
    to give the example a vaguely dialog-like appearance.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`effectScale.css`，并将其放入`css`文件夹中。这些样式用于使示例具有模糊对话框样式的外观。
- en: 'In the script, we simply add a click handler for the close icon and call the
    `effect()` method on the outer container of the dialog box. An empty object is
    passed as the second argument to the method, and a relatively long duration is
    passed as the third argument, as this effect proceeds quite rapidly. The following
    screenshot shows the effect in action:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们简单地为关闭图标添加了一个点击处理程序，并在对话框外容器上调用了`effect()`方法。空对象作为方法的第二个参数传递，并且相对较长的持续时间作为第三个参数传递，因为此效果进行得相当迅速。以下截图显示了效果正在进行的情况：
- en: '![Scaling elements on a page](img/2209OS_14_04.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![页面上元素的缩放](img/2209OS_14_04.jpg)'
- en: Using the `hide()` method instead of the `effect()` method is advantageous to
    us in this example, because we want the dialog box to remain hidden after the
    effect has completed. When the `effect()` method is used instead, bits of the
    widget remain visible at the end of the animation.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，使用`hide()`方法而不是`effect()`方法对我们是有利的，因为我们希望对话框在效果完成后保持隐藏。当使用`effect()`方法时，动画结束时，部件仍然可见。
- en: Tip
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**When should the percent option be configured?**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**何时应配置百分比选项？**'
- en: The `percent` configuration option must be configured when using the `effect()`
    method in conjunction with the scale effect.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当与缩放效果一起使用`effect()`方法时，必须配置`percent`配置选项。
- en: 'There are several configuration options which can be used with scale; these
    are as listed in the following table:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个配置选项可用于缩放；这些如下表所列：
- en: '| Option | Default value | Use |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `direction` | `"both"` | Sets the direction to scale the element in. May
    be a string specifying horizontal, vertical, or both. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `direction` | `"both"` | 设置元素进行缩放的方向。可以是指定水平、垂直或两者的字符串。 |'
- en: '| `from` | `{}` | Sets the starting height and width of the element to be scaled.
    |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `from` | `{}` | 设置要缩放的元素的起始高度和宽度。 |'
- en: '| `origin` | `["middle","center"]` | Sets the vanishing point, used with show
    / hide animations. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `origin` | `["middle","center"]` | 设置消失点，与显示/隐藏动画一起使用。 |'
- en: '| `percent` | `0` | Sets the end size of the scaled element. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `percent` | `0` | 设置缩放元素的最终大小。 |'
- en: Exploding elements on a page
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在页面上爆炸元素
- en: The explosion effect is truly awesome. The targeted element is literally exploded
    into a specified number of pieces, before disappearing completely. It's an easy
    effect to use and has few configuration properties, but the visual impact of this
    effect is huge, giving you a lot of effect in return for very little code. Let's
    see a basic example.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 爆炸效果真是令人惊叹。目标元素被真正地爆炸成指定数量的碎片，然后完全消失。这是一个简单的效果，几乎没有配置属性，但是这个效果的视觉冲击力很大，为很少的代码提供了很多效果。让我们看一个基本的例子。
- en: 'Create the following new page:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 创建以下新页面：
- en: '[PRE27]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Save this as `effectExplode.html`. As you can see, the code is extremely simple
    and can be used completely out of the box with no additional configuration. This
    effect has only one configurable property, which is the `pieces` property, and
    it determines how many pieces the element is exploded into. The default is nine.
    The effect works equally as well with the `effect()` method as it does with the
    `hide()` method.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectExplode.html`。正如你所见，代码非常简单，可以完全开箱即用，无需额外配置。此效果仅有一个可配置属性，即`pieces`属性，它决定了元素爆炸成多少个碎片。默认值为九。该效果在使用`effect()`方法和`hide()`方法时同样有效。
- en: 'Once the specified element has been exploded, it will be hidden from view by
    having its `style` attribute set to `display: none`. This is the default behavior.
    However, it will still remain in the DOM of the page. The following screenshot
    shows the explosion in progress:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦指定的元素被爆炸，它将通过将其`style`属性设置为`display: none`来隐藏。这是默认行为。但是，它仍然会保留在页面的DOM中。以下截图显示了爆炸正在进行的情况：'
- en: '![Exploding elements on a page](img/2209OS_14_05.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![页面上元素的爆炸](img/2209OS_14_05.jpg)'
- en: Physicists sometimes speculate as to why the arrow of time seems to only point
    forward. They invariably ask themselves philosophical questions like "Why do we
    not see grenades spontaneously forming from a large cloud of debris?" (Actually
    the object is usually an egg, but I don't think an egg-based example would have
    had quite the same impact!)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学家有时会推测为什么时间之箭似乎只指向前方。他们总是会问自己诸如“我们为什么不会看到手榴弹从一大团碎片中自发形成？”这样的哲学问题。（实际上，物体通常是一个鸡蛋，但我认为基于鸡蛋的例子可能没有产生同样的影响！）
- en: 'jQuery UI cannot help our understanding of entropy, but it can show us what
    spontaneously reassembling of a grenade might look like. We''ll need to hide the
    `<img>` tag in order to show it. The easiest way to do this is with an inline
    `style` attribute:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 不能帮助我们理解熵，但它可以向我们展示手榴弹自发重新组装的样子。我们需要隐藏`<img>`标签以显示它。最简单的方法是使用内联`style`属性：
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, change the final `<script>` element so that it appears as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将最后一个`<script>`元素更改为以下内容：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Save this variant as `effectExplodeShow.html`. This time we use the `show()`
    method instead of the `hide()` method to trigger the animation, which occurs once
    the page has loaded.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将此变体保存为`effectExplodeShow.html`。这次我们使用`show()`方法而不是`hide()`方法来触发动画，该动画在页面加载完成后发生。
- en: The animation is the same, except that it is shown in reverse and this time
    the grenade is not hidden from view once the animation ends. Like other effects,
    explode can also make use of specific durations and callback functions.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 动画是相同的，只是它是反向显示的，这次手榴弹在动画结束后不会被隐藏。与其他效果一样，爆炸也可以使用特定的持续时间和回调函数。
- en: Creating a puff effect
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个膨胀效果
- en: Similar to the explode effect, but slightly more subtle is the puff effect,
    which causes an element to grow slightly before fading away. Like explode, there
    are few configuration options to concern ourselves with.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于爆炸效果，但略微更加微妙的是“膨胀”效果，它会导致元素在淡出之前略微增长。与爆炸效果类似，我们只需关注少量配置选项。
- en: Consider a page that has AJAX operations occurring on it. It's useful to provide
    a loading image that shows the visitor that something is happening. Instead of
    just hiding an image like this when the operation has completed, we can puff it
    out of existence instead.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个页面上正在发生 AJAX 操作的情况。提供一个显示访问者正在发生某些事情的加载图像是有用的。当操作完成时，我们不仅可以隐藏这样的图像，还可以使其消失。
- en: 'Remove the `<p>` element and change the `<img>` element from the previous example,
    so that it points to a new image:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 删除先前示例中的`<p>`元素，并更改`<img>`元素，使其指向一个新的图像：
- en: '[PRE30]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then change the effect''s source file to the scale effect:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将效果的源文件更改为缩放效果：
- en: '[PRE31]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, change the last `<script>` element, so that it appears as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将最后一个`<script>`元素更改为以下内容：
- en: '[PRE32]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save this as `effectPuff.html`. We're actually not detecting whether a given
    process has finished loading in this example. It would require too much work just
    to see the effect we're looking at. Instead, we tie the execution of the effect
    into a simple click-handler.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`effectPuff.html`。在这个示例中，我们实际上并没有检测给定过程是否已经加载完成。这将需要太多的工作，仅仅是为了看到我们正在关注的效果。相反，我们将效果的执行绑定到一个简单的点击处理程序中。
- en: You'll notice that we used the `jquery.ui.effect-scale.js` source file for this
    effect.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们为这个效果使用了`jquery.ui.effect-scale.js`源文件。
- en: The puff effect is the only effect that does not have its own source file, and
    instead it's a part of the very closely related scale effect's source file.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 膨胀效果是唯一没有自己源文件的效果，而是作为非常密切相关的缩放效果的源文件的一部分。
- en: Like the explode effect that we looked at in the last section, this effect has
    just one configuration option that can be passed in an object as the second argument
    of the `effect` method. This is the `percent` option and controls the size the
    image is scaled up to. The default value is 150 percent. Like the explode effect,
    the target element is hidden from view once the animation ends. This happens whether
    `effect()` or `hide()` is used.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在上一节中查看的爆炸效果类似，此效果只有一个配置选项，可以将其作为第二个参数传递给`effect`方法的对象。这是`percent`选项，用于控制图像放大到的尺寸。默认值为
    150%。与爆炸效果一样，动画结束后，目标元素被隐藏不再可见。无论是使用`effect()`还是`hide()`，都会发生这种情况。
- en: The effect stretches the targeted element (and its children, if it has any),
    while at the same time reducing its opacity. It works well on proper images, background
    colors, and borders, but you should note that it does not work so well with background
    images specified by CSS. Nevertheless, it's a great effect.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 该效果拉伸了目标元素（如果有的话，还有它的子元素），同时降低其不透明度。它适用于适当的图像、背景颜色和边框，但要注意，它与由CSS指定的背景图像不太适用。尽管如此，这个效果非常棒。
- en: 'The following screenshot shows it in action:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了它的具体操作：
- en: '![Creating a puff effect](img/2209OS_14_06.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![创建膨胀效果](img/2209OS_14_06.jpg)'
- en: Working with the pulsate effect
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用脉动效果工作
- en: The pulsate effect is another effect that works with the opacity of a specified
    element. This effect reduces the opacity temporarily, a specified number of times,
    making the element appear to pulsate.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 脉动效果是另一个与指定元素的不透明度配合运作的效果。这个效果暂时降低不透明度，指定次数，使元素看起来有脉动。
- en: 'In the following basic example, we''ll create a simple countdown time that
    counts down from `15`. When the display reaches 10 seconds, it will begin to flash
    red. In `effectPuff.html`, change the link in the `<head>` element of the page
    to point to a new stylesheet:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下基本示例中，我们将创建一个简单的倒计时时间，从`15`开始倒数。当显示时间达到10秒时，它将开始变成红色。在`effectPuff.html`中，更改页面的`<head>`元素中的链接，指向一个新样式表：
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then remove the loading `<img>` element from the page and add the following
    element in its place:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从页面中删除加载的`<img>`元素，并用以下元素替换它：
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, change the source file of the effect so that the `jquery.ui.effect-pulsate.js`
    file is used:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更改效果的源文件，使用`jquery.ui.effect-pulsate.js`文件：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Finally, remove the existing last `<script>` element, and replace it with the
    following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，删除现有的最后一个`<script>`元素，并将其替换为以下内容：
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Save this as `effectPulsate.html`. The page itself contains just a simple `<div>`
    element with the text `15` inside it. The code first sets a counter variable and
    then caches a selector for the `<div>` element. We then define the `adjustAge()`
    function.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectPulsate.html`。页面本身仅包含一个简单的`<div>`元素，其中包含文本`15`。代码首先设置一个计数器变量，然后缓存`<div>`元素的选择器。然后我们定义`adjustAge()`函数。
- en: This function first decreases the text content of the countdown element and
    at the same time reduces the value of the counter variable by one. It then checks
    whether the counter variable has reached zero yet; if yes, it clears the interval
    we are about to set.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数首先减少倒计时元素的文本内容，并同时减少计数器变量的值。然后检查计数器变量是否已经达到零；如果是，则清除即将设置的间隔。
- en: If the counter variable is greater than 0 but less than 11, the function applies
    a background color of red to the element and white to the element's text content,
    and then runs the pulsate effect.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果计数器变量大于0但小于11，则函数将元素应用红色背景和白色文本内容，并运行脉动效果。
- en: We use the `times` configuration option to specify how many times the element
    should pulsate. As we'll be executing the method once every second, we can set
    this to just pulsate once each time. This is the only configurable option.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`times`配置选项来指定元素应该脉动多少次。因为我们将每秒执行一次该方法，所以可以将其设置为每次脉动一次。这是唯一的可配置选项。
- en: After our `adjustAge` function, we start the interval using JavaScript's `setInterval`
    function. This function will repetitively execute the specified function after
    the specified interval, which in this example is 1000 milliseconds, or 1 second.
    We avoid using the `window` object by using an anonymous function to call our
    named function.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`adjustAge`函数之后，我们使用JavaScript的`setInterval`函数启动间隔。这个函数将在指定的间隔之后重复执行指定的函数，在这个例子中是1000毫秒，或1秒。我们避免使用`window`对象，而是使用匿名函数调用我们的命名函数。
- en: 'The new stylesheet is very simple and consists of the following code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 新样式表非常简单，包括以下代码：
- en: '[PRE37]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Save this in the `css` folder as `effectPulsate.css`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存在`css`文件夹中，命名为`effectPulsate.css`。
- en: Adding the drop effect to elements
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向元素添加下降效果
- en: The drop effect is simple. Elements appear to drop off (or onto) the page, which
    is simulated by adjusting the element's `position` and `opacity` values.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 下降效果很简单。元素看起来掉下（或掉入）页面，这是通过调整元素的`position`和`opacity`值来模拟的。
- en: 'This effect exposes the following configurable options:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个效果公开了以下可配置选项：
- en: '| Option | Default value | Use |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `direction` | `"left"` | Sets the direction of the drop |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `direction` | `"left"` | 设置下降的方向 |'
- en: '| `distance` | The outer width or height of the element (depending on the direction)
    divided by 2 | Sets the distance the element drops |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | 元素的外宽度或高度（取决于方向）除以2 | 设置元素下落的距离 |'
- en: '| `easing n` | `one` | Sets the easing function used during the animation |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `easing n` | `one` | 设置动画期间使用的缓动函数 |'
- en: '| `mode` | `"hide"` | Sets whether the element is hidden or shown |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `mode` | `"hide"` | 设置元素是隐藏还是显示 |'
- en: There are many situations in which the drop effect would be useful, but the
    one that instantly springs to mind is when creating custom tooltips. We can easily
    create a tooltip that appears when a button is clicked, but instead of just showing
    the tooltip, we can drop it onto the page. We'll use the button widget and the
    `position` utility in this example, as well as the effect.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况下，投放效果会很有用，但我立即想到的是创建自定义工具提示时。我们可以很容易地创建一个在按钮被点击时出现的工具提示，但我们可以将其投放到页面上。在本示例中，我们将使用按钮小部件和`position`实用程序，以及效果。
- en: 'Add a link to the CSS framework file and change the stylesheet link in the
    `<head>` element of `effectPulsate.html`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在`effectPulsate.html`的`<head>`元素中添加一个链接到 CSS 框架文件，并更改样式表链接：
- en: '[PRE38]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Remove the countdown `<div>` element from the page and add the following element
    instead:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 从页面中删除倒计时`<div>`元素，并改为添加以下元素：
- en: '[PRE39]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now we need to change the effect''s source file and add the source files for
    the position and button widgets:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要更改效果的源文件并添加位置和按钮小部件的源文件：
- en: '[PRE40]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Lastly, change the final `<script>` element, so that it appears as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更改最后一个`<script>`元素，使其如下所示：
- en: '[PRE41]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Save this file as `effectDrop.html`. When the button is clicked, we first store
    a reference to the DOM node of the button. We then add a configuration object
    for the `position` utility, in order to position our tooltip to the right of the
    button.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`effectDrop.html`。当单击按钮时，我们首先存储按钮的 DOM 节点的引用。然后，我们添加一个`position`实用程序的配置对象，以便将我们的工具提示定位在按钮的右侧。
- en: We then create a new `<span>` element to use as the tooltip, which has its text
    content set to the title text of the button. We also create another element used
    to create a triangular CSS shape to give the tooltip a pointer. This element is
    appended to the tooltip.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个新的`<span>`元素作为工具提示，其文本内容设置为按钮的标题文本。我们还创建另一个用于创建三角形 CSS 形状以给工具提示添加指针的元素。此元素附加到工具提示上。
- en: Once created, the tooltip is appended to the `<body>` element of the page and
    is then shown using the drop effect. The `direction` configuration option is used
    to make the tooltip appear to drop down; we have to specify the opposite direction
    here, because our tooltip is absolutely positioned.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，工具提示附加到页面的`<body>`元素上，然后使用投放效果显示。`direction`配置选项用于使工具提示显示为下拉式；我们必须在此指定相反的方向，因为我们的工具提示是绝对定位的。
- en: 'There is also some minimal CSS required for this example, in addition to the
    styles provided by the CSS framework, to style the tooltip. Create the following
    stylesheet:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 CSS 框架提供的样式之外，此示例还需要一些最小的 CSS 来为工具提示设置样式。创建以下样式表：
- en: '[PRE42]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Save this in the `css` folder as `effectDrop.css`. The styling here is purely
    for aesthetics.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存在`css`文件夹中，命名为`effectDrop.css`。这里的样式纯粹是为了美观。
- en: 'When you run the file in your browser, you should see your tooltip, as in the
    following screenshot:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行文件时，您应该看到您的工具提示，如以下截图所示：
- en: '![Adding the drop effect to elements](img/2209OS_14_07.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![将投放效果添加到元素](img/2209OS_14_07.jpg)'
- en: Implementing the sliding effect
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现滑动效果
- en: The remaining effects of the jQuery UI library all work by showing and hiding
    elements in different ways, rather than using opacity like most of the effects
    we have already looked at.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI 库的剩余效果都通过以不同方式显示和隐藏元素来工作，而不是像我们已经看过的大多数效果那样使用不透明度。
- en: The slide effect is no exception and shows (or hides) an element by sliding
    it into (or out of) view. It is similar to the drop effect that we just looked
    at. The main difference is that it does not use opacity.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动效果也不例外，并通过将元素滑动到（或滑出）视图中来显示（或隐藏）元素。它类似于我们刚刚看到的投放效果。主要区别在于它不使用不透明度。
- en: 'The slide effect contains the following configuration options:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动效果包含以下配置选项：
- en: '| Option | Default value | Use |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 用途 |'
- en: '| --- | --- | --- |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `direction` | `"left"` | Sets the direction of the slide |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `direction` | `"left"` | 设置滑动的方向 |'
- en: '| `distance` | The outer width or height of the element (depending on the direction)
    | Sets the distance the element slides |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `distance` | 元素的外部宽度或高度（取决于方向） | 设置元素滑动的距离 |'
- en: '| `easing` | `none` | Sets the easing function used during the animation |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `easing` | `none` | 设置动画期间使用的缓动函数 |'
- en: '| `mode` | `"show"` | Sets whether the element is hidden or shown |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `mode` | `"show"` | 设置元素是隐藏还是显示 |'
- en: These are the same configuration options used by the drop effect that we looked
    at in the previous example, except that some of the default values are different.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们在前面示例中看到的放置效果使用的相同配置选项，只是某些默认值不同。
- en: 'For our next example, we can create exactly this kind of functionality. In
    `effectDrop.html`, change the `<link>` element in the `<head>` element of the
    page from `effectDrop.css` to `effectSlide.css`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的下一个示例，我们可以创建完全相同类型的功能。在`effectDrop.html`中，将页面`<head>`元素中的`<link>`元素从`effectDrop.css`更改为`effectSlide.css`：
- en: '[PRE43]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then remove the `<a>` element from the `<body>` element of the page and add
    the following HTML in its place:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从页面的`<body>`元素中删除`<a>`元素，并添加以下HTML代码：
- en: '[PRE44]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The outer element in this collection is `<aside>`, which is the perfect element
    for a mini-basket widget that sits in the right column of a site. Within this
    element, we have a `<h1>` element that serves as the heading for the basket. The
    heading contains a link, which will be used to show or hide the contents of the
    basket. The contents of the basket will consist of an unordered list of products
    within a container `<div>`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合中的外部元素是`<aside>`，这是一个完美的小购物篮小部件，位于站点右侧列中。在此元素中，我们有一个作为购物篮标题的`<h1>`元素。标题包含一个链接，该链接将用于显示或隐藏篮子的内容。篮子的内容将包括容器`<div>`内的产品无序列表。
- en: 'Don''t forget to change the `<script>` element for the effect''s source file
    to use `jquery.ui.effect-slide.js`, and remove the `<script>` files for `jquery.ui.core.js`,
    `jquery.ui.widget.js`, `jquery.ui.position.js`, and `jquery.ui.button.js`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记更改效果源文件的`<script>`元素，以使用`jquery.ui.effect-slide.js`，并删除`jquery.ui.core.js`、`jquery.ui.widget.js`、`jquery.ui.position.js`和`jquery.ui.button.js`的`<script>`文件：
- en: '[PRE45]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The final `<script>` element will need to be changed to the following code:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`<script>`元素需要更改为以下代码：
- en: '[PRE46]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Save this as `effectSlide.html`. All of the functionality resides within a clickhandler,
    which we attach to the icon in the basket header. When this element is clicked,
    we first initialize the `slider` and `header` variables, as these are the elements
    that we will be manipulating.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`effectSlide.html`。所有功能都驻留在一个点击处理程序中，我们将其附加到篮子标题中的图标上。当单击此元素时，我们首先初始化`slider`和`header`变量，因为这些是我们将要操作的元素。
- en: We then check whether the `slider` (which is the basket contents container)
    is hidden; if it is hidden, we know that it is about to be opened and so remove
    the rounded corners from the bottom of the `header`. This is so that the slider
    element sits flush up to the bottom of the `header`, even while it is sliding
    open.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查`slider`（即篮子内容容器）是否隐藏；如果隐藏，我们知道它即将打开，因此从`header`底部移除圆角。这样，即使在滑动打开时，滑块元素也能与`header`底部齐平。
- en: We then use jQuery's `toggle()` method to call the effect, which we specify
    using the first argument of the method. We then set the configuration option,
    `direction`, in an object passed as the second argument. The duration of the animation
    is lengthened using the string `slow` as the third argument, and an anonymous
    callback function is used as the fourth argument. This function will be executed
    at the end of the slide animation.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用jQuery的`toggle()`方法调用效果，我们使用方法的第一个参数指定效果。然后，我们将配置选项`direction`设置为作为第二个参数传递的对象中。使用字符串`slow`作为第三个参数延长动画的持续时间，并使用匿名回调函数作为第四个参数。此函数将在滑动动画结束时执行。
- en: Within this function, we check the state of the `slider` to see if it is hidden
    or open. If it is open at the end of the animation, we remove the border from
    the bottom of the `header` and then change the icon in the `header`, so that it
    points up to indicate that the basket can be closed by clicking on the icon again.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数内部，我们检查`slider`的状态，以查看它是否隐藏或打开。如果在动画结束时它是打开的，我们将从`header`底部移除边框，然后更改`header`中的图标，以便它指向上方，表示可以通过再次单击图标关闭篮子。
- en: If the `slider` is now closed, we add the bottom border and rounded corners
    to the `header` once again, and change the icon back to an arrow pointing down.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`slider`现在关闭，我们再次为`header`添加底部边框和圆角，并将图标更改回指向下的箭头。
- en: 'We also use a little CSS in this example. Create the following stylesheet:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个例子中也使用了一点 CSS。 创建以下样式表：
- en: '[PRE47]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Save this as `effectSlide.css` in the `css` folder. We don't need much CSS in
    this example, because we are using the CSS framework classes.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectSlide.css`在`css`文件夹中。 在这个例子中，我们不需要太多的 CSS，因为我们使用 CSS 框架类。
- en: 'The effect in progress should appear as in the following screenshot:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 进行中的效果应如以下屏幕截图所示：
- en: '![Implementing the sliding effect](img/2209OS_14_08.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![实现滑动效果](img/2209OS_14_08.jpg)'
- en: In this example, we could easily just use jQuery's native `slideToggle()` method;
    the main benefit of using jQuery UI's slide effect is that we can also slide left
    or right.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以很容易地只使用 jQuery 的本机`slideToggle()`方法；使用 jQuery UI 的滑动效果的主要好处是我们还可以左右滑动。
- en: Using easing
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用缓动
- en: 'As mentioned earlier that the `jquery.ui.effect.js` file had the built-in ability
    to seamlessly use easing with the effects. Let''s see how easy this is to achieve.
    Change the last `<script>` element in `effectSlide.html`, so that it appears as
    follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`jquery.ui.effect.js`文件具有与效果无缝使用缓动的内置功能。 让我们看看实现这个有多简单。 更改`effectSlide.html`中的最后一个`<script>`元素，使其如下所示：
- en: '[PRE48]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Save this as `effectsSlideEasing.html`. See how easy that was? All we need to
    do is add the `easing` option within the effect's configuration object and define
    one or more of the easing methods as the option value.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectsSlideEasing.html`。 看到有多简单吗？ 我们所需要做的就是在效果的配置对象中添加`easing`选项，并将一个或多个缓动方法定义为选项值。
- en: In this example, we specify a different easing method for each toggle state
    by setting a variable which uses the JavaScript ternary condition to set an easing
    function, depending on whether the slider is visible or not.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过设置一个变量来为每个切换状态指定不同的缓动方法，该变量使用 JavaScript 三元条件来设置缓动函数，具体取决于滑块是否可见。
- en: When the basket slides down, it bounces slightly at the end of the animation
    with `easeOutBounce`. When it slides back up, it will gradually slow down over
    the course of the animation using `easeOutQuart`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 当篮子滑下时，它在动画结束时会稍微弹跳，使用`easeOutBounce`。 当它向上滑动时，它会在动画过程中逐渐减速，使用`easeOutQuart`。
- en: Note
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The full range of easing methods, which we can use with any of the effects are
    shown on an excellent page on the jQueryUI site and can be seen at [http://jqueryui.com/demos/effect/easing.html](http://jqueryui.com/demos/effect/easing.html).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 jQueryUI 网站上的一个很好的页面上看到所有缓动方法的完整范围，并且可以在[http://jqueryui.com/demos/effect/easing.html](http://jqueryui.com/demos/effect/easing.html)上查看。
- en: Understanding the blind effect
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解盲效果
- en: The blind effect is practically the same as the slide effect. Visually, the
    element appears to do the same thing, and the two effects' code files are also
    extremely similar. The main difference between the two effects that we need to
    worry about is that with this effect we can only specify the axis of the effect,
    not the actual direction.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 盲效果实际上与滑动效果几乎相同。 在视觉上，元素似乎做了相同的事情，两个效果的代码文件也非常相似。 我们需要担心的两个效果之间的主要区别是，使用此效果，我们只能指定效果的轴，而不能指定实际的方向。
- en: 'The blind effect has the following configuration options:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 盲效果具有以下配置选项：
- en: '| Option | Default value | Use |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 默认值 | 使用 |'
- en: '| --- | --- | --- |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `direction` | `"vertical"` | Sets the axis of motion |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `direction` | `"vertical"` | 设置运动的轴 |'
- en: '| `easing` | `none` | Sets the easing function used during the animation |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `easing` | `none` | 设置动画过程中使用的缓动函数 |'
- en: '| `mode` | `"hide"` | Sets whether the element is hidden or shown |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `mode` | `"hide"` | 设置元素是隐藏还是显示 |'
- en: 'The `direction` option that this effect uses for configuration only accepts
    the values `horizontal` or `vertical`. We''ll build on the last example to see
    the blind effect in action. Change the `<script>` resource for the blind effect
    in `effectSlide.html`, so that it refers to the `jquery.ui.effect-blind.js` file:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 此效果使用的`direction`选项仅接受值`horizontal`或`vertical`进行配置。 我们将在最后一个示例的基础上构建，以查看盲效果的实际效果。
    将`effectSlide.html`中盲效果的`<script>`资源更改，使其引用`jquery.ui.effect-blind.js`文件：
- en: '[PRE49]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now change the `toggle()` method, so that it uses the blind effect, and change
    the value of the `direction` configuration option:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更改`toggle()`方法，使其使用盲效果，并更改`direction`配置选项的值：
- en: '[PRE50]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Save this as `effectBlind.html`. Literally, all we've changed is the string
    specifying the effect, in this case to `blind`, and the value of the `direction`
    property from `up` to `vertical`. Notice the subtle difference when we view the
    file between sliding the element and blinding it up.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `effectBlind.html`。实际上，我们只改变了指定效果的字符串，本例中为 `blind`，以及 `direction` 属性的值，从
    `up` 更改为 `vertical`。当我们在文件中查看时，注意在滑动元素和将其盲目地收起之间的细微差别。
- en: When the login form slides up, the bottom of the element remains visible at
    all times, as if the whole basket is moving up into or out of the header. However,
    with the blind effect, the element is shown or hidden, starting with the bottom
    first, just like a window blind opening or closing.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 当登录表单向上滑动时，元素的底部始终可见，就好像整个篮子正在向上或向下移动到标题栏中一样。然而，使用盲效果时，元素会从底部开始显示或隐藏，就像窗帘打开或关闭一样。
- en: Clipping elements
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 剪裁元素
- en: The clip effect is very similar to the slide effect. The main difference is
    that instead of moving one edge of the targeted element towards the other, to
    give the effect of the element sliding out of view, the clip effect moves both
    edges of the targeted element in towards the center.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 剪裁效果与滑动效果非常相似。主要区别在于，剪裁效果不是将目标元素的一个边缘向另一个边缘移动，以给出元素滑出视野的效果，而是将目标元素的两个边缘都向中心移动。
- en: The clip effect has the same configuration options as the blind effect and these
    options have the same default values.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 剪裁效果具有与盲效果相同的配置选项，并且这些选项具有相同的默认值。
- en: At the end of [Chapter 5](ch05.html "Chapter 5. The Dialog"), *The Dialog*,
    we created an example that showed a full-size image in a dialog when a thumbnail
    image was clicked. When the close button on the dialog was pressed, the dialog
    was simply removed from the page instantly.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第五章](ch05.html "第五章。对话框")的最后，*对话框*中，我们创建了一个示例，当点击缩略图图像时，在对话框中显示了一个全尺寸图像。当按下对话框上的关闭按钮时，对话框会立即从页面中移除。
- en: We could easily use the clip effect to close our dialog instead.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地使用剪裁效果来关闭我们的对话框。
- en: 'In `dialog14.html`, add the source files for the clip effect after the existing
    library files:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `dialog14.html` 中，在现有库文件之后添加剪裁效果的源文件：
- en: '[PRE51]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then, change the dialog configuration object so that it appears as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，更改对话框配置对象，使其如下所示：
- en: '[PRE52]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Save this as `effectClip.html`. In this simple addition to the existing file,
    we use the clip effect in conjunction with the `close` event callback to hide
    the dialog from view. The default configuration value of `vertical` for the `direction`
    option and the default speed of normal are both fine, so we just call the `hide`
    method, specifying clip with no additional arguments.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为 `effectClip.html`。在现有文件的这个简单添加中，我们将剪裁效果与 `close` 事件回调结合使用，以隐藏对话框。对于 `direction`
    选项，默认配置值 `vertical` 和正常速度都很好，所以我们只需调用 `hide` 方法，指定剪裁而没有额外的参数。
- en: 'The following screenshot shows the dialog being clipped:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了被剪裁的对话框：
- en: '![Clipping elements](img/2209OS_14_09.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![剪裁元素](img/2209OS_14_09.jpg)'
- en: Folding elements
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 折叠元素
- en: Folding is a neat effect that gives the appearance that the element it's applied
    to is being folded up like a piece of paper. It achieves this by moving the bottom
    edge of the specified element up to 15 pixels from the top, then moving the right
    edge completely over towards the left edge.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 折叠是一个很好的效果，它使应用于它的元素看起来像是被折叠起来，就像一张纸一样。它通过将指定元素的底边从顶部向上移动最多 15 像素，然后将右边缘完全移动到左边缘来实现这一点。
- en: The distance from the top that the element is shrunk to in the first part of
    this effect is exposed as a configurable property by the effect's API. So, this
    is something that we can adjust to suit the needs of our implementation. This
    property is an integer.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个效果的 API 中，第一部分元素被缩小到距离顶部的距离是作为一个可配置属性暴露出来的。因此，这是我们可以根据实现的需要调整的东西。该属性是一个整数。
- en: 'We can see this effect in action by modifying the dialog example once again.
    In `effectClip.html`, change the effect source file for clip to fold:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过再次修改对话框示例来看到这个效果。在 `effectClip.html` 中，将剪裁的效果源文件更改为折叠：
- en: '[PRE53]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then change the `hide` event callback to the following:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将 `hide` 事件回调更改为以下内容：
- en: '[PRE54]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Save this as `effectFold.html`. This time we make use of the size configuration
    option to make the effect stop in the first fold, 200 pixels before the top of
    the dialog. We also slow the animation down a little, by setting the duration
    to 1000 milliseconds. It''s a really nice effect; the following screenshot shows
    the second part of the animation:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`effectFold.html`。这次我们利用大小配置选项使效果停在第一个折叠处，距离对话框顶部200像素处。我们还稍微减慢了动画速度，将持续时间设置为1000毫秒。这是一个非常好的效果；以下截图显示了动画的第二部分：
- en: '![Folding elements](img/2209OS_14_10.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![折叠元素](img/2209OS_14_10.jpg)'
- en: Summary
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've covered the complete range of UI effects available in
    the jQuery UI library. We've seen how easy it is to use the `jquery.ui.effect.js`
    base component to construct attractive color animations and smooth class transitions.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经涵盖了jQuery UI库中可用的完整UI效果范围。我们看到了如何使用`jquery.ui.effect.js`基本组件构建引人注目的颜色动画和平滑的类转换是多么容易。
- en: 'We also saw that the following effects can be used in conjunction with the
    simple effect API:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到以下效果可以与简单效果API一起使用：
- en: Bounce
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹跳
- en: Highlight
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示
- en: Shake
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摇动
- en: Transfer
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移
- en: 'An important point is that most of the individual effects can be used not only
    with the effect API but can also make use of `show`/`hide` and `toggle` logic,
    making them incredibly flexible and robust. The following effects can be used
    with this advanced API:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的一点是，大多数单独效果不仅可以与效果API一起使用，还可以利用`show`/`hide`和`toggle`逻辑，使它们非常灵活和健壮。以下效果可以与此高级API一起使用：
- en: Blind
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 盲
- en: Clip
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪辑
- en: Drop
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掉落
- en: Explode
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爆炸
- en: Fold
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折叠
- en: Puff
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 膨胀
- en: Pulsate
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脉动
- en: Scale
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规模
- en: Slide
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑动
- en: We also saw that the jQuery UI effects' core files also include all of the easing
    functions used in the `jquery.easing.js` plugin that must be used with jQuery
    when we are not using jQuery UI.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了jQuery UI效果核心文件还包括了在我们没有使用jQuery UI时必须使用的`jquery.easing.js`插件中使用的所有缓动函数。
- en: This now brings us to the end of this chapter. There is a saying that I'm sure
    almost all of you will have heard before. It's the "Give a man a fish..." saying.
    I hope that during the course of this book, I've taught you how to fish, instead
    of just giving you a fish.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了本章的结束。有一句话我相信你们几乎都听过。那就是“授人以鱼……”的说法。我希望在本书的过程中，我教会了你们如何捕鱼，而不只是给了你们一条鱼。
