- en: '21'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '21'
- en: Geolocation and Maps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理位置和地图
- en: In this chapter, you’ll learn about the geolocation and mapping capabilities
    of React Native. You’ll start the learning process with how to use the **Geolocation
    API**, and then you’ll move on to using the `MapView` component to plot points
    of interest and regions. To do this, we’ll use the `react-native-maps` package
    to implement maps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解React Native的地理位置和地图功能。您将从学习如何使用**地理位置API**开始，然后继续使用`MapView`组件来绘制兴趣点和区域。为此，我们将使用`react-native-maps`包来实现地图。
- en: The goal of this chapter is to go over what’s available in React Native for
    geolocation and in `react-native-maps` for maps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是概述React Native中可用的地理位置功能以及`react-native-maps`中的地图功能。
- en: 'Here’s a list of the topics that we’ll cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍我们将要涵盖的主题列表：
- en: Using the Geolocation API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用地理位置API
- en: Rendering the map
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染地图
- en: Annotating points of interest
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标注兴趣点
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code file for this chapter on GitHub at [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter2](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22)1.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，链接为[https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter2](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22)1.
- en: Using the Geolocation API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用地理位置API
- en: The Geolocation API that web applications use to figure out where the user is
    located can also be used by React Native applications because the same API has
    been polyfilled. Other than maps, this API is useful for getting precise coordinates
    from the GPS on mobile devices. You can then use this information to display meaningful
    location data to the user.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用用来确定用户位置的地理位置API也可以由React Native应用使用，因为相同的API已经被polyfilled。除了地图之外，此API对于从移动设备的GPS获取精确坐标非常有用。然后，您可以使用这些信息向用户显示有意义的地理位置数据。
- en: Unfortunately, the data returned by the Geolocation API is of little use on
    its own. Your code must do the legwork to transform it into something useful.
    For example, latitude and longitude don’t mean anything to the user, but you can
    use this data to look up something that is of use to the user. This might be as
    simple as displaying where the user is currently located.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，地理位置API返回的数据本身用处不大。您的代码必须进行一些工作，将其转换为有用的东西。例如，纬度和经度对用户来说没有意义，但您可以使用这些数据查找对用户有用的信息。这可能只是显示用户当前的位置那么简单。
- en: Let’s implement an example that uses the **Geolocation API** of React Native
    to look up coordinates and then use those coordinates to look up human-readable
    location information from the Google Maps API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个示例，使用React Native的**地理位置API**查找坐标，然后使用这些坐标从Google Maps API中查找可读的地理位置信息。
- en: 'Before we start coding, let’s create a project using `npx create-expo-app`
    and then add the location module:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编码之前，让我们使用`npx create-expo-app`创建一个项目，然后添加位置模块：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we need to configure location permissions in the app. Accessing a user’s
    location in a mobile app requires explicit permission from the user. Later in
    this example, we will do that by calling the `Location.requestForegroundPermissionsAsync()`
    method. This will display a permission dialog to the user asking them to allow
    or deny location access. It’s important to check the status returned to see if
    permission was granted before proceeding to use location methods. If permission
    is denied, you should gracefully handle it in your code and potentially prompt
    the user to grant permission in app settings if needed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在应用中配置位置权限。在移动应用中访问用户的位置需要用户明确授权。在本例的后续部分，我们将通过调用`Location.requestForegroundPermissionsAsync()`方法来实现这一点。这将向用户显示一个权限对话框，询问他们是否允许或拒绝位置访问。在继续使用位置方法之前，检查返回的状态以查看是否已授予权限非常重要。如果权限被拒绝，您应该在代码中优雅地处理它，并在必要时提示用户在应用设置中授权。
- en: 'In real apps, before we can request permissions, we should first set those
    permissions up in the app configuration. We can do this by adding a plugin to
    the `app.json` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的应用中，在我们请求权限之前，我们应该首先在应用配置中设置这些权限。我们可以通过向`app.json`文件添加插件来完成此操作：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should request location permission as early as possible, such as when your
    app first starts up or when the user first navigates to a screen that requires
    location. By requesting permission up-front and properly handling the user’s choice,
    you can ensure your app works as expected while respecting the user’s privacy
    preferences.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该尽早请求位置权限，例如当你的应用首次启动或当用户首次导航到需要位置信息的屏幕时。通过提前请求权限并妥善处理用户的选项，你可以确保你的应用按预期工作，同时尊重用户的隐私偏好。
- en: 'When you have a prepared project, let’s have a look at the `App` component,
    which you can find here: [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/where-am-i/App.tsx](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/where-am-i/App.tsx).
    The goal of this component is to render the properties returned by the Geolocation
    API on the screen, as well as looking up the user’s specific location and displaying
    it.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个准备好的项目时，让我们看看 `App` 组件，你可以在这里找到它：[https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/where-am-i/App.tsx](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/where-am-i/App.tsx)。这个组件的目标是在屏幕上渲染地理位置API返回的属性，以及查找用户的特定位置并显示它。
- en: To fetch a location from the app, we need to grant permissions. In `App.tsx`,
    we have called `Location.requestForegroundPermissionsAsync()` for that.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要从应用中获取位置，我们需要授予权限。在 `App.tsx` 中，我们已经调用了 `Location.requestForegroundPermissionsAsync()`
    来实现这一点。
- en: The `setPosition()` function is used as a callback in a couple of places, with
    its job being to set the state of your component. Firstly, `setPosition()` sets
    the latitude-longitude coordinates. Normally, you wouldn’t display this data directly,
    but this is an example that shows the data that’s available as part of the Geolocation
    API. And, secondly, it uses the `latitude` and `longitude` values to look up the
    name of where the user currently is, using the Google Maps API.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPosition()` 函数在几个地方用作回调，其任务是设置组件的状态。首先，`setPosition()` 设置经纬度坐标。通常，你不会直接显示这些数据，但这是一个示例，展示了作为地理位置API一部分可用的数据。其次，它使用
    `latitude` 和 `longitude` 值来查找用户当前所在地的名称，使用的是 Google Maps API。'
- en: 'In the example, the `API_KEY` value is empty, and you can get it here: [https://developers.google.com/maps/documentation/geocoding/start](https://developers.google.com/maps/documentation/geocoding/start).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，`API_KEY` 值为空，你可以在以下链接获取：[https://developers.google.com/maps/documentation/geocoding/start](https://developers.google.com/maps/documentation/geocoding/start)。
- en: The `setPosition()` callback is used with `getCurrentPosition()`, which is only
    called once when the component is mounted. You’re also using `setPosition()` with
    `watchPosition()`, which calls the callback any time the user’s position changes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPosition()` 回调与 `getCurrentPosition()` 一起使用，它仅在组件挂载时调用一次。你还在 `watchPosition()`
    中使用 `setPosition()`，它会在用户的位置发生变化时调用回调。'
- en: The iOS emulator and Android Studio let you change locations via menu options.
    You don’t have to install your app on a physical device every time you want to
    test changing locations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 模拟器和 Android Studio 允许你通过菜单选项更改位置。你不必每次想要测试更改位置时都在物理设备上安装你的应用。
- en: 'Let’s see what this screen looks like once the location data has loaded:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当位置数据加载后这个屏幕看起来像什么：
- en: '![Picture 1](img/B19636_21_01.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片 1](img/B19636_21_01.png)'
- en: 'Figure 21.1: Location data'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.1：位置数据
- en: The address information that was fetched is probably more useful in an application
    than latitude and longitude data. It works well for apps that need to find buildings
    around you or companies. Even better than physical address text is visualizing
    the user’s physical location on a map; you’ll learn how to do this in the next
    section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 获取的地址信息可能比经纬度数据更有用，对于需要查找周围建筑或公司的应用来说效果很好。甚至比物理地址文本更好的是，在地图上可视化用户的物理位置；你将在下一节中学习如何做到这一点。
- en: Rendering the map
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染地图
- en: The `MapView` component from `react-native-maps` is the main tool you’ll use
    to render maps in your React Native applications. It offers a wide range of tools
    for rendering maps, markers, polygons, heatmaps, and the like.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 `react-native-maps` 的 `MapView` 组件是你在 React Native 应用中渲染地图的主要工具。它提供了广泛的工具来渲染地图、标记、多边形、热图等。
- en: 'You can find more information about `react-native-maps` on the website: [https://github.com/react-native-maps/react-native-maps](https://github.com/react-native-maps/react-native-maps).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网站上找到有关 `react-native-maps` 的更多信息：[https://github.com/react-native-maps/react-native-maps](https://github.com/react-native-maps/react-native-maps)。
- en: 'Let’s now implement a basic `MapView` component to see what you get out of
    the box:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来实现一个基本的`MapView`组件，看看你能够得到什么：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The two Boolean properties that you’ve passed to `MapView` do a lot of work
    for you. The `showsUserLocation` property will activate the marker on the map,
    which denotes the physical location of the device running this application. The
    `followsUserLocation` property tells the map to update the location marker as
    the device moves around.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你传递给`MapView`的两个布尔属性为你做了很多工作。`showsUserLocation`属性会激活地图上的标记，表示运行此应用程序的设备的物理位置。`followsUserLocation`属性告诉地图在设备移动时更新位置标记。
- en: 'Here is the resulting map:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是生成的地图：
- en: '![Picture 2](img/B19636_21_02.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/B19636_21_02.png)'
- en: 'Figure 21.2: Current location'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.2：当前位置
- en: The current location of the device is clearly marked on the map. By default,
    points of interest are also rendered on the map. These are things close to the
    user so that they can see what’s around them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的当前位置在地图上被清楚地标记出来。默认情况下，兴趣点也会在地图上渲染。这些是用户附近的事物，以便他们可以看到周围的情况。
- en: It’s generally a good idea to use the `followsUserLocation` property whenever
    using `showsUserLocation`. This makes the map zoom to the region where the user
    is located.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在设置`showsUserLocation`时使用`followsUserLocation`是一个好主意。这使得地图缩放到用户所在的位置。
- en: In the following section, you’ll learn how to annotate points of interest on
    your maps.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何在你的地图上注释兴趣点。
- en: Annotating points of interest
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释兴趣点
- en: '**Annotations** are exactly what they sound like: additional information rendered
    on top of the basic map geography. You get annotations by default when you render
    `MapView` components. The `MapView` component can render the user’s current location
    and points of interest around the user. The challenge here is that you probably
    want to show the points of interest relevant to your application instead of those
    rendered by default.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**注释**正如其名：在基本地图地理之上渲染的附加信息。当你渲染`MapView`组件时，默认情况下你会得到注释。`MapView`组件可以渲染用户的当前位置以及用户周围的兴趣点。这里的挑战可能是你想要显示与你的应用程序相关的兴趣点，而不是默认渲染的那些。'
- en: In this section, you’ll learn how to render markers for specific locations on
    the map, as well as rendering regions on the map.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何在地图上绘制特定位置的标记，以及如何在地图上绘制区域。
- en: Plotting points
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制点
- en: 'Let’s plot some local breweries! Here’s how you pass annotations to the `MapView`
    component:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制一些当地的酿酒厂！这是你如何将注释传递给`MapView`组件的方法：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this example, we’ve opted out of this capability by setting the `showsPointsOfInterest`
    property to `false`. Let’s see where these breweries are located:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过将`showsPointsOfInterest`属性设置为`false`来放弃了这一功能。让我们看看这些酿酒厂的位置在哪里：
- en: '![Picture 3](img/B19636_21_03.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片3](img/B19636_21_03.png)'
- en: 'Figure 21.3: Plotting points'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.3：绘制点
- en: The callout is displayed when you press the marker that shows the location of
    the brewery on the map. The `title` and `description` property values that you
    give to `<Marker>` are used to render this text.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下显示地图上酿酒厂位置的标记时，会显示呼出窗口。你给`<Marker>`提供的`title`和`description`属性值用于渲染此文本。
- en: Plotting overlays
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制叠加层
- en: In this last section of this chapter, you’ll learn how to render region overlays.
    Think of a region as a connect-the-dots drawing of several points, and a point
    is a single `latitude/longitude` coordinate.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，你将学习如何渲染区域叠加层。将区域想象为连接几个点的连线画，而一个点是一个单独的`纬度/经度`坐标。
- en: 'Regions can serve many purposes. In our example, we’ll create a region that
    shows where we’re more likely to find IPA drinkers versus stout drinkers. You
    can follow this link to see what the full code looks like: [https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/plotting-overlays/App.tsx](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/plotting-overlays/App.tsx).
    Here is what the JSX part of the code looks like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 区域可以服务于许多目的。在我们的例子中，我们将创建一个区域，显示我们更有可能找到IPA饮用者还是黑啤饮用者的地方。你可以点击此链接查看完整代码的样子：[https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/plotting-overlays/App.tsx](https://github.com/PacktPublishing/React-and-React-Native-5E/tree/main/Chapter22/plotting-overlays/App.tsx)。以下是代码的JSX部分的样子：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The region data consists of several `latitude/longitude` coordinates that define
    the shape and location of the region. Regions are placed in the `overlays` state
    variable, which we map into `Polygon` components. The rest of this code is mostly
    about the handling state when the two text links are pressed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 区域数据由几个定义区域形状和位置的 `纬度/经度` 坐标组成。区域被放置在 `overlays` 状态变量中，我们将它们映射到 `Polygon` 组件。其余的代码主要关于处理当两个文本链接被按下时的状态。
- en: 'By default, the IPA region is rendered as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，IPA 区域的渲染方式如下：
- en: '![Picture 4](img/B19636_21_04.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片 4](img/B19636_21_04.png)'
- en: 'Figure 21.4: IPA Fans'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.4：IPA 粉丝
- en: 'When the **Stout Fans** button is pressed, the IPA overlay is removed from
    the map and the stout region is added:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下 **Stout 粉丝** 按钮，IPA 覆盖层将从地图中移除，并添加 stout 区域：
- en: '![Picture 5](img/B19636_21_05.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片 5](img/B19636_21_05.png)'
- en: 'Figure 21.5: Stout Fans'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.5：Stout 粉丝
- en: Overlays are useful when you need to highlight an area instead of a `latitude/longitude`
    point or an address. As an example, it might be an app for finding apartments
    for rent in the area or neighborhood you select.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要突出显示一个区域而不是一个 `纬度/经度` 点或地址时，覆盖层非常有用。例如，它可能是一个用于在所选区域或社区中寻找出租公寓的应用程序。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about geolocation and mapping in React Native.
    The Geolocation API works the same as its web counterpart. The only reliable way
    to use maps in React Native applications is to install the third-party `react-native-maps`
    package.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 React Native 中的地理位置和地图绘制。地理位置 API 与其网络版本的工作方式相同。在 React Native 应用程序中使用地图的唯一可靠方法是安装第三方
    `react-native-maps` 包。
- en: You saw the basic configuration `MapView` components and how they can track
    the user’s location and show relevant points of interest. Then, you saw how to
    plot your own points of interest and regions of interest.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了基本的 `MapView` 组件配置以及它们如何跟踪用户的位置并显示相关的兴趣点。然后，你看到了如何绘制你自己的兴趣点和感兴趣的区域。
- en: In the next chapter, you’ll learn how to collect user input using React Native
    components that resemble HTML form controls.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用类似于 HTML 表单控件的 React Native 组件来收集用户输入。
