- en: Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: Today's **World Wide Web** (**WWW**) is a dynamic environment and its users
    set a high bar for both the style and function of sites. To build interesting
    and interactive sites, developers are turning to JavaScript libraries, such as
    jQuery, to automate common tasks and to simplify complicated ones. One reason
    the jQuery library is a popular choice is its ability to assist in a wide range
    of tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的**万维网**（**WWW**）是一个动态的环境，其用户对站点的样式和功能设置了很高的标准。为了构建有趣和交互式的站点，开发人员正在转向 JavaScript
    库，如 jQuery，来自动执行常见任务并简化复杂任务。jQuery 库之所以成为热门选择的原因之一是其能够帮助完成各种任务。
- en: It can seem challenging to know where to begin because jQuery performs so many
    different functions. Yet, there is a coherence and symmetry to the design of the
    library; many of its concepts are borrowed from the structure of **HTML** and
    **Cascading Style Sheets** (**CSS**). The library's design lends itself to a quick
    start for designers with little programming experience, since many have more experience
    with these technologies than they do with JavaScript. In fact, in this opening
    chapter, we'll write a functioning jQuery program in just three lines of code.
    On the other hand, experienced programmers will also appreciate this conceptual
    consistency.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 jQuery 执行了许多不同的功能，因此很难知道从哪里开始。然而，该库的设计具有一致性和对称性；许多概念都借鉴自**HTML**和**层叠样式表**（**CSS**）的结构。这种设计适合对编程经验较少的设计师快速入门，因为许多人对这些技术的了解比对
    JavaScript 更多。事实上，在本章中，我们将只用三行代码编写一个功能齐全的 jQuery 程序。另一方面，有经验的程序员也会欣赏到这种概念上的一致性。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: The primary features of jQuery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery 的主要特性
- en: Setting up a jQuery code environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 jQuery 代码环境
- en: A simple working jQuery script example
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的工作中的 jQuery 脚本示例
- en: Reasons to choose jQuery over plain JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 jQuery 而不是普通 JavaScript 的原因
- en: Common JavaScript development tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的 JavaScript 开发工具
- en: What jQuery does?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 做了什么？
- en: 'The jQuery library provides a general-purpose abstraction layer for common
    web scripting, and it is therefore useful in almost every scripting situation.
    Its extensible nature means that we could never cover all the possible uses and
    functions in a single book, as plugins are constantly being developed to add new
    abilities. The core features, though, assist us in accomplishing the following
    tasks:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 库为常见的网页脚本提供了一个通用的抽象层，因此在几乎每种脚本情况下都很有用。它的可扩展性意味着我们永远无法在一本书中涵盖所有可能的用途和功能，因为插件不断被开发用来添加新的功能。然而，核心特性却能帮助我们完成以下任务：
- en: '**Access elements in a document**: Without a JavaScript library, web developers
    often need to write many lines of code to traverse the **Document Object Model**
    (**DOM**) tree and locate specific portions of an HTML document''s structure.
    With jQuery, developers have a robust and efficient selector mechanism at their
    disposal, making it easy to retrieve the exact piece of the document that needs
    to be inspected or manipulated.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问文档中的元素**：没有 JavaScript 库，Web 开发人员通常需要编写许多代码行来遍历**文档对象模型**（**DOM**）树并定位
    HTML 文档结构的特定部分。有了 jQuery，开发人员可以使用强大而高效的选择器机制，轻松地检索需要检查或操作的文档的确切部分。'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Modify the appearance of a web page**: CSS offers a powerful method of influencing
    the way a document is rendered, but it falls short when not all web browsers support
    the same standards. With jQuery, developers can bridge this gap, relying on the
    same standards support across all browsers. In addition, jQuery can change the
    classes or individual style properties applied to a portion of the document even
    after the page has been rendered.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修改网页的外观**：CSS 提供了一种影响文档呈现方式的强大方法，但当不是所有的 web 浏览器都支持相同的标准时，它会显得不足。使用 jQuery，开发人员可以弥补这一差距，依赖于所有浏览器的相同标准支持。此外，jQuery
    可以在页面呈现后改变应用于文档部分的类别或个别样式属性。'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Alter the content of a document**: Not limited to mere cosmetic changes,
    jQuery can modify the content of a document itself with a few keystrokes. Text
    can be changed, images can be inserted or swapped, lists can be reordered, or
    the entire structure of the HTML can be rewritten and extended--all with a single
    easy-to-use **Application Programming Interface** (**API**).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修改文档的内容**：jQuery 不仅仅局限于表面上的改变，它可以用几个按键来修改文档本身的内容。文本可以被更改，图像可以被插入或交换，列表可以被重新排序，甚至可以用单个易于使用的**应用程序编程接口**（**API**）重写和扩展
    HTML 的整个结构。'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Respond to a user''s interaction**: Even the most elaborate and powerful
    behaviors are not useful if we can''t control when they take place. The jQuery
    library offers an elegant way to intercept a wide variety of events, such as a
    user clicking on a link, without the need to clutter the HTML code itself with
    event handlers.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应用户的交互**: 即使是最复杂和强大的行为，如果我们无法控制它们发生的时间，也是没有用的。jQuery 库提供了一种优雅的方式来拦截各种事件，比如用户点击链接，而不需要用事件处理程序来混杂
    HTML 代码本身。'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Animate changes being made to a document**: To effectively implement such
    interactive behaviors, a  designer must also provide visual feedback to the user.
    The jQuery library facilitates this by providing an array of effects such as fades
    and wipes, as well as a toolkit for crafting new ones.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画文档中正在进行的更改**: 要有效地实现这样的交互行为，设计者还必须为用户提供视觉反馈。jQuery 库通过提供一系列效果，如淡入淡出和擦除，以及用于制作新效果的工具包，来促进这一点。'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Retrieve information from a server without refreshing a page**: This pattern
    is known as **Ajax**, which originally stood for **Asynchronous JavaScript and
    XML**, but has since come to represent a much greater set of technologies for
    communicating between the client and the server. The jQuery library removes the
    browser-specific complexity from this process, allowing developers to focus on
    the server-side functionality.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在不刷新页面的情况下从服务器检索信息**: 这种模式被称为 **Ajax**，最初代表 **异步 JavaScript 和 XML**，但后来已经成为了一套更大的用于客户端和服务器之间通信的技术集合。jQuery
    库从这个过程中移除了特定于浏览器的复杂性，使开发者可以专注于服务器端功能。'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Why jQuery works well?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么 jQuery 的效果好？
- en: 'With the resurgence of interest in dynamic HTML comes a proliferation of JavaScript
    frameworks. Some are specialized, focusing on just one or two of the tasks previously
    mentioned. Others attempt to catalog every possible behavior and animation and
    serves these up prepackaged. To maintain the wide range of features outlined earlier
    while remaining relatively compact, jQuery employs several strategies:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 随着对动态 HTML 的兴趣重新涌现，JavaScript 框架也在不断涌现。有些是专门的，只关注先前提到的一两个任务。其他尝试列出每一个可能的行为和动画，并提供预打包的。为了保持先前列出的广泛功能范围，同时保持相对紧凑，jQuery
    采用了几种策略：
- en: '**Leverage knowledge of CSS**: By basing the mechanism for locating page elements
    on CSS selectors, jQuery inherits a terse yet legible way of expressing a document''s
    structure. The jQuery library becomes an entry point for designers who want to
    add behaviors to their pages because a prerequisite for doing professional web
    development is knowledge of CSS syntax.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用 CSS 知识**: 通过基于 CSS 选择器定位页面元素的机制，jQuery 继承了一种简洁而易读的表达文档结构的方式。由于专业网页开发的先决条件是对
    CSS 语法的了解，因此 jQuery 库成为了设计师想要为其页面添加行为的入口点。'
- en: '**Support extensions**: In order to avoid "feature creep", jQuery relegates
    special-case uses to plugins. The method for creating new plugins is simple and
    well documented, which has spurred the development of a wide variety of inventive
    and useful modules. Even most of the features in the basic jQuery download are
    internally realized through the plugin architecture and can be removed if desired,
    yielding an even smaller library.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持扩展**: 为了避免“功能蔓延”，jQuery 将特殊用例委托给插件。创建新插件的方法简单而且有文档说明，这推动了各种富有创意和有用的模块的开发。即使基本
    jQuery 下载包中的大多数功能都是通过插件架构内部实现的，如果需要，也可以删除，从而获得更小的库。'
- en: '**Abstract away browser quirks**: An unfortunate reality of web development
    is that each browser has its own set of deviations from published standards. A
    significant portion of any web application can be relegated to handling features
    differently on each platform. While the ever-evolving browser landscape makes
    a perfectly browser-neutral codebase impossible for some advanced features, jQuery
    adds an abstraction layer that normalizes the common tasks, reducing the size
    of code while tremendously simplifying it.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抽象出浏览器的怪癖**: 网页开发的一个不幸现实是，每个浏览器都有自己的一套与发布标准不一致的特性。任何一个网页应用的一个重要部分都可能被归类为在每个平台上以不同方式处理功能。虽然不断发展的浏览器环境使得对于某些高级功能来说，无法实现完全与浏览器无关的代码库成为可能，但
    jQuery 添加了一个抽象层，规范了常见任务，减少了代码量的同时极大地简化了它。'
- en: '**Always work with sets**: When we instruct jQuery to find all elements with
    the class `collapsible` and hide them, there is no need to loop through each returned
    element. Instead, methods such as `.hide()` are designed to automatically work
    on sets of objects instead of individual ones. This technique, called *implicit
    iteration*, means that many looping constructs become unnecessary, shortening
    code considerably.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终与集合一起工作**：当我们指示 jQuery 查找所有具有 `collapsible` 类的元素并隐藏它们时，没有必要遍历每个返回的元素。相反，像
    `.hide()` 这样的方法被设计为自动在对象集合上工作，而不是在单个对象上工作。这种技术称为*隐式迭代*，意味着许多循环结构变得不再必要，大大减少了代码量。'
- en: '**Allow multiple actions in one line**: To avoid overuse of temporary variables
    or wasteful repetition, jQuery employs a programming pattern called *chaining*
    for the majority of its methods. This means that the result of most operations
    on an object is the object itself, ready for the next action to be applied to
    it.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许一行中进行多个操作**：为了避免过多使用临时变量或者重复浪费，jQuery 使用一种被称为*链式调用*的编程模式来执行其大多数方法。这意味着对对象的大多数操作的结果都是对象本身，准备好接受下一个操作。'
- en: These strategies keep the file size of the jQuery package small, while at the
    same time providing techniques for keeping our custom code that uses the library
    compact as well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略使 jQuery 包的文件大小保持较小，同时为我们的自定义代码提供了保持紧凑的技巧，以及使用该库。
- en: The elegance of the library comes about partly by design and partly due to the
    evolutionary process spurred by the vibrant community that has sprung up around
    the project. Users of jQuery gather to discuss not only the development of plugins
    but also enhancements to the core library. The users and developers also assist
    in continually improving the official project documentation, which can be found
    at [http://api.jquery.com](http://api.jquery.com).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库的优雅部分是由设计部分和由项目周围蓬勃发展的活跃社区所推动的进化过程造成的。jQuery 的用户聚集在一起讨论的不仅是插件的开发，还包括对核心库的增强。用户和开发人员还协助不断改进官方项目文档，这些文档可以在
    [http://api.jquery.com](http://api.jquery.com) 找到。
- en: Despite all the efforts required to engineer such a flexible and robust system,
    the end product is free for all to use. This open source project is licensed under
    the MIT License to permit free use of jQuery on any site and facilitate its use
    within proprietary software. If a project requires it, developers can relicense
    jQuery under the GNU Public License for inclusion in other GNU-licensed open source
    projects.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管构建这样一个灵活而强大的系统需要付出巨大的努力，但最终产品却是供所有人免费使用的。这个开源项目在 MIT 许可证下授权，允许在任何网站上免费使用 jQuery，并促进其在专有软件中的使用。如果一个项目需要，开发者可以重新将
    jQuery 授权为 GNU 公共许可证，以便包含在其他 GNU 许可的开源项目中。
- en: What's new in jQuery 3?
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 3 有什么新特性？
- en: The changes introduced in jQuery 3 are quite subtle compared to the changes
    introduced in jQuery 2\. Most of what's changed is under the hood. Let's take
    a brief look at some changes and how they're likely to impact an existing jQuery
    project. You can review the fine-grained details ([https://jquery.com/upgrade-guide/3.0](https://jquery.com/upgrade-guide/3.0))
    while reading this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与 jQuery 2 引入的变化相比，jQuery 3 引入的变化相当微妙。大多数变化都在幕后进行。让我们简要地看一下一些变化以及它们对现有 jQuery
    项目的影响。您可以在阅读本书的同时查看细粒度的详细信息（[https://jquery.com/upgrade-guide/3.0](https://jquery.com/upgrade-guide/3.0)）。
- en: Browser support
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: The biggest change with browser support in jQuery 3 is Internet Explorer. Having
    to support older versions of this browser is the bane of any web developer's existence.
    jQuery 3 has taken a big step forward by only supporting IE9+. The support policy
    for other browsers is the current version and the previous version.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 3 中浏览器支持的最大变化是 Internet Explorer。不得不支持此浏览器的旧版本是任何网页开发人员的噩梦。jQuery 3 通过仅支持
    IE9+ 迈出了重要的一步。其他浏览器的支持政策是当前版本和上一个版本。
- en: The days of Internet Explorer are numbered. Microsoft has released the successor
    to IE called Edge. This browser is a completely separate project from IE and isn't
    burdened by the issues that have plagued IE. Additionally, recent versions of
    Microsoft Windows actually push for Edge as the default browser, and updates are
    regular and predictable. Goodbye and good riddance IE.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Internet Explorer 的时代已经屈指可数。微软发布了 IE 的继任者 Edge。这个浏览器是完全独立于 IE 的项目，不会受到一直困扰 IE
    的问题的影响。此外，最近版本的 Microsoft Windows 实际上推动 Edge 成为默认浏览器，并且更新是定期且可预测的。再见了，IE，真是一去不复返。
- en: Deferred objects
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟对象
- en: The `Deferred` object was introduced in jQuery 1.5 as a means to better manage
    asynchronous behavior. They were kind of like ES2015 promises, but different enough
    that they weren't interchangeable. Now that the ES2015 version of JavaScript is
    commonplace in modern browsers, the `Deferred` object is fully compatible with
    native `Promise` objects. This means that quite a lot has changed with the old
    `Deferred` implementation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deferred` 对象在 jQuery 1.5 中引入，作为更好地管理异步行为的手段。它们有点像 ES2015 的 promises，但不同之处足以使它们不能互换。现在，随着
    ES2015 版本的 JavaScript 在现代浏览器中变得普遍，`Deferred` 对象与原生 `Promise` 对象完全兼容。这意味着旧的 `Deferred`
    实现发生了相当大的变化。'
- en: Asynchronous document-ready
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步文档准备
- en: The idea that the document-ready callback function is executed asynchronously
    might seem counterintuitive at first. There are a couple of reasons this is the
    case in jQuery 3\. First, the `$(() => {})` expression returns a `Deferred` instance,
    and these now behave like native promises. The second reason is that there's a
    `jQuery.ready` promise that resolves when the document is ready. As you'll see
    later on in this book, you can use this promise alongside other promises to perform
    other asynchronous tasks before the DOM is ready to render.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，文档准备好的回调函数被异步执行的想法可能看起来有些违反直觉。在 jQuery 3 中之所以会这样，有几个原因。首先，`$(() => {})` 表达式返回一个
    `Deferred` 实例，这些现在的行为类似于原生 Promise。第二个原因是存在一个 `jQuery.ready` promise，在文档准备好时解析。正如你在本书后面将看到的，你可以在
    DOM 准备好渲染之前使用此 promise 以及其他 promise 来执行其他异步任务。
- en: All the rest
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他所有内容
- en: There are a number of other breaking changes to the API that were introduced
    in jQuery 3 that we won't dwell on here. The upgrade guide that I mentioned earlier
    goes into detail about each of these changes and how to deal with them. However,
    I'll point out functionality that's new or different in jQuery 3 as we make our
    way through this book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 jQuery 3 中引入了许多其他 API 的破坏性更改，我们在这里不会详细讨论。我之前提到的升级指南详细介绍了每个更改以及如何处理它们。然而，当我们在本书中逐步进行时，我会指出
    jQuery 3 中的新功能或不同之处。
- en: Making our first jQuery-powered web page
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作我们的第一个由 jQuery 驱动的网页
- en: Now that we have covered the range of features available to us with jQuery,
    we can examine how to put the library into action. To get started, we need to
    download a copy of jQuery.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了使用 jQuery 提供的一系列功能，我们可以看看如何将库投入实际运用。要开始，我们需要下载 jQuery 的副本。
- en: Downloading jQuery
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 jQuery
- en: No installation is required. To use jQuery, we just need a publicly available
    copy of the file, no matter whether that copy is on an external site or our own.
    Since JavaScript is an interpreted language, there is no compilation or build
    phase to worry about. Whenever we need a page to have jQuery available, we will
    simply refer to the file's location from a `<script>` element in the HTML document.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 无需安装。要使用 jQuery，我们只需要一个公开可用的文件副本，无论该副本是在外部站点还是我们自己的站点上。由于 JavaScript 是一种解释性语言，因此无需担心编译或构建阶段。每当我们需要一个页面具有可用的
    jQuery，我们只需在 HTML 文档中的 `<script>` 元素中引用文件的位置即可。
- en: The official jQuery website ([http://jquery.com/](http://jquery.com/)) always
    has the most up-to-date stable version of the library, which can be downloaded
    right from the home page of the site. Several versions of jQuery may be available
    at any given moment; the most appropriate for us as site developers will be the
    latest uncompressed version of the library. This can be replaced with a compressed
    version in production environments.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 官方 jQuery 网站 ([http://jquery.com/](http://jquery.com/)) 总是具有最新的稳定版本的库，可以直接从网站的首页下载。任何时候可能有几个版本的
    jQuery 可用；对于我们作为站点开发人员而言，最合适的版本将是库的最新未压缩版本。在生产环境中，可以用压缩版本替换此版本。
- en: As jQuery's popularity has grown, companies have made the file freely available
    through their **Content Delivery** **Networks** (**CDNs**). Most notably, Google
    ([https://developers.google.com/speed/libraries/devguide](https://developers.google.com/speed/libraries/devguide)),
    Microsoft ([http://www.asp.net/ajaxlibrary/cdn.ashx](http://www.asp.net/ajaxlibrary/cdn.ashx)),
    and the jQuery project itself ([http://code.jquery.com](http://code.jquery.com))
    offer the file on powerful, low-latency servers distributed around the world for
    fast download, regardless of the user's location. While a CDN-hosted copy of jQuery
    has speed advantages due to server distribution and caching, using a local copy
    can be convenient during development. Throughout this book, we'll use a copy of
    the file stored on our own system, which will allow us to run our code whether
    we're connected to the Internet or not.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 jQuery 的普及，公司已经通过其 **内容交付** **网络**（**CDN**）免费提供文件。尤其是 Google ([https://developers.google.com/speed/libraries/devguide](https://developers.google.com/speed/libraries/devguide))、Microsoft
    ([http://www.asp.net/ajaxlibrary/cdn.ashx](http://www.asp.net/ajaxlibrary/cdn.ashx))
    和 jQuery 项目本身 ([http://code.jquery.com](http://code.jquery.com)) 在全球范围内分布了强大、低延迟的服务器上提供该文件，以便用户快速下载，而不管用户位于何处。尽管由
    CDN 托管的 jQuery 副本具有由于服务器分发和缓存而带来的速度优势，但在开发过程中使用本地副本可能更加方便。在本书中，我们将使用存储在我们自己系统上的文件副本，这样无论我们是否连接到互联网，都可以运行我们的代码。
- en: To avoid unexpected bugs, always use a specific version of jQuery. For example,
    3.1.1\. Some CDNs allow you to link to the latest version of the library. Similarly,
    if you're using `npm` to install jQuery, always make sure that your `package.json`
    requires a specific version.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免意外错误，始终使用特定版本的 jQuery。例如，3.1.1。一些 CDN 允许您链接到库的最新版本。同样，如果您使用 `npm` 安装 jQuery，请始终确保您的
    `package.json` 需要特定版本。
- en: Setting up jQuery in an HTML document
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 HTML 文档中设置 jQuery
- en: 'There are three pieces to most examples of jQuery usage: the HTML document,
    CSS files to style it, and JavaScript files to act on it. For our first example,
    we''ll use a page with a book excerpt that has a number of classes applied to
    portions of it. This page includes a reference to the latest version of the jQuery
    library, which we have downloaded, renamed `jquery.js`, and placed in our local
    project directory:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 jQuery 使用示例都由三部分组成：HTML 文档、用于样式的 CSS 文件，以及用于操作的 JavaScript 文件。对于我们的第一个示例，我们将使用一个包含书摘的页面，其中有许多类应用于其部分。此页面包括对
    jQuery 库的最新版本的引用，我们已经下载并将其重命名为 `jquery.js`，并放置在我们的本地项目目录中：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Immediately following the normal HTML preamble, the stylesheet is loaded. For
    this example, we''ll use a simple one:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通的 HTML 前导部分之后，加载样式表。对于本示例，我们将使用一个简单的样式表：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Getting the example code
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 获取示例代码
- en: 'You can access the example code from the following GitHub repository:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下 GitHub 存储库访问示例代码：
- en: '[https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3)。'
- en: After the stylesheet is referenced, the JavaScript files are included. It is
    important that the `script` tag for the jQuery library be placed before the tag
    for our custom scripts; otherwise, the jQuery framework will not be available
    when our code attempts to reference it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在引用样式表之后，包含 JavaScript 文件。重要的是，jQuery 库的 `script` 标签应放在我们自定义脚本的标签之前；否则，当我们的代码尝试引用它时，jQuery
    框架将不可用。
- en: Throughout the rest of this book, only the relevant portions of HTML and CSS
    files will be printed. The files in their entirety are available from the book's
    companion code examples: [https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，将仅打印 HTML 和 CSS 文件的相关部分。完整的文件可从该书的伴随代码示例中获取：[https://github.com/PacktPublishing/Learning-jQuery-3](https://github.com/PacktPublishing/Learning-jQuery-3)。
- en: 'Now, we have a page that looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的页面看起来像这样：
- en: '![](img/image_01_001-1.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_001-1.jpg)'
- en: We will use jQuery to apply a new style to the poem text.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 jQuery 为诗文文字应用新样式。
- en: This example is to demonstrate a simple use of jQuery. In real-world situations,
    this type of styling could be performed purely with CSS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例旨在演示 jQuery 的简单用法。在现实世界的情况下，此类样式可以纯粹通过 CSS 执行。
- en: Adding our jQuery code
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加我们的 jQuery 代码
- en: 'Our custom code will go in the second, currently empty, JavaScript file, which
    we included from the HTML using `<script src="img/01.js"></script>`. For this
    example, we only need three lines of code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自定义代码将放在第二个目前为空的JavaScript文件中，我们通过`<script src="img/01.js"></script>`从HTML中包含。对于这个示例，我们只需要三行代码：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I'll be using newer ES2015 **arrow function** syntax for most callback functions
    throughout the book. The only reason is that it's more concise than having the
    `function` keyword all over the place. However, if you're more comfortable with
    the `function() {}` syntax, by all means, use it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用更新的ES2015 **箭头函数**语法来编写大多数回调函数。唯一的原因是它比在各处使用`function`关键字更简洁。然而，如果你更喜欢`function()
    {}`语法，那么请尽管使用它。
- en: Now let's step through this script piece by piece to see how it works.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们逐步分析这个脚本，看看它是如何工作的。
- en: Finding the poem text
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找诗歌文本
- en: The fundamental operation in jQuery is selecting a part of the document. This
    is done with the `$()` function. Typically, it takes a string as a parameter,
    which can contain any CSS selector expression. In this case, we wish to find all
    of the `<div>` elements in the document that have the `poem-stanza` class applied
    to them, so the selector is very simple. However, we will cover much more sophisticated
    options through the course of the book. We will walk through many ways of locating
    parts of a document in [Chapter 2](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml),
    *Selecting Elements*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery中的基本操作是选择文档的一部分。这通过`$()`函数完成。通常，它以字符串作为参数，该参数可以包含任何CSS选择器表达式。在本例中，我们希望找到文档中所有应用了`poem-stanza`类的`<div>`元素，因此选择器非常简单。但是，我们将在本书的过程中涵盖更多复杂的选项。我们将在[第2章](195342ed-f533-42e7-8a8d-f9a3462382b7.xhtml)中介绍许多定位文档部分的方法，*选择元素*。
- en: When called, the `$()` function returns a new jQuery object instance, which
    is the basic building block we will be working with from now on. This object encapsulates
    zero or more DOM elements and allows us to interact with them in many different
    ways. In this case, we wish to modify the appearance of these parts of the page
    and we will accomplish this by changing the classes applied to the poem text.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`$()`函数时，它会返回一个新的jQuery对象实例，这是我们将要使用的基本构建块。该对象封装了零个或多个DOM元素，并允许我们以多种不同的方式与它们交互。在这种情况下，我们希望修改页面的这些部分的外观，并通过更改应用于诗歌文本的类来实现这一目标。
- en: Injecting the new class
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入新类
- en: The `.addClass()` method, like most jQuery methods, is named self descriptively;
    it applies a CSS class to the part of the page that we have selected. Its only
    parameter is the name of the class to add. This method, and its counterpart, `.removeClass()`,
    will allow us to easily observe jQuery in action as we explore the different selector
    expressions available to us. For now, our example simply adds the `highlight`
    class, which our stylesheet has defined as italicized text with a gray background
    and a border.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`.addClass()`方法，像大多数jQuery方法一样，其名称具有自解释性；它将一个CSS类应用于我们选择的页面部分。它的唯一参数是要添加的类的名称。这个方法及其相对应的`.removeClass()`方法将允许我们轻松地观察到jQuery在我们探索可用的不同选择器表达式时的作用。目前，我们的示例仅添加了`highlight`类，我们的样式表将其定义为具有灰色背景和边框的斜体文本。'
- en: Note that no iteration is necessary to add the class to all the poem stanzas.
    As we discussed, jQuery uses implicit iteration within methods such as `.addClass()`,
    so a single function call is all it takes to alter all the selected parts of the
    document.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，不需要迭代即可将类添加到所有诗歌的段落中。正如我们讨论的那样，jQuery在诸如`.addClass()`之类的方法内部使用隐式迭代，因此只需一个函数调用即可更改文档中的所有选定部分。
- en: Executing the code
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行代码
- en: Taken together, `$()` and `.addClass()` are enough for us to accomplish our
    goal of changing the appearance of the poem text. However, if this line of code
    is inserted alone in the document header, it will have no effect. JavaScript code
    is run as soon as it is encountered in the browser, and at the time the header
    is being processed, no HTML is yet present to style. We need to delay the execution
    of the code until after the DOM is available for our use.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 综合起来，`$()`和`.addClass()`足以实现我们改变诗歌文本外观的目标。但是，如果单独将这行代码插入文档头部，它将不会产生任何效果。JavaScript代码一旦在浏览器中遇到就会运行，在处理标题时，尚未存在要样式化的HTML。我们需要延迟执行代码，直到DOM可供我们使用。
- en: 'With the `$(() => {})` construct (passing a function instead of a selector
    expression), jQuery allows us to schedule function calls for firing once the DOM
    is loaded, without necessarily waiting for images to fully render. While this
    event scheduling is possible without the aid of jQuery, `$(() => {})` provides
    an especially elegant cross-browser solution that includes the following features:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `$(() => {})` 构造（传递函数而不是选择器表达式），jQuery 允许我们安排函数调用，以便一旦 DOM 加载完成，即可触发，而不必等待图像完全渲染。虽然这种事件调度在没有
    jQuery 的情况下也是可能的，但 `$(() => {})` 提供了一种特别优雅的跨浏览器解决方案，其中包括以下特性：
- en: It uses the browser's native DOM-ready implementations when available and adds
    a `window.onload` event handler as a safety net
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当可用时，它使用浏览器的本机 DOM 就绪实现，并添加 `window.onload` 事件处理程序作为一个安全网
- en: It executes functions passed to `$()` even if it is called after the browser
    event has already occurred
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使在浏览器事件已经发生后调用，它也会执行传递给 `$()` 的函数
- en: It handles the event scheduling asynchronously to allow scripts to delay if
    necessary
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它异步处理事件调度，以允许脚本延迟执行，如果有必要的话
- en: 'The `$()` function''s parameter can accept a reference to an already defined
    function, as shown in the following code snippet:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`$()` 函数的参数可以接受对已定义函数的引用，如以下代码片段所示：'
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Listing 1.1
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1.1
- en: 'However, as demonstrated in the original version of the script and repeated
    in *Listing 1.2*, the method can also accept an anonymous function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如在脚本的原始版本中演示的，并在*列表 1.2*中重复的，该方法也可以接受匿名函数：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Listing 1.2
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1.2
- en: This anonymous function idiom is convenient in jQuery code for methods that
    take a function as an argument when that function isn't reusable. Moreover, the
    closure it creates can be an advanced and powerful tool. If you're using arrow
    functions, you also get lexically bound `this` as a context, which avoids having
    to bind functions. It may also have unintended consequences and ramifications
    of memory use, however, if not dealt with carefully.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这种匿名函数惯用法在 jQuery 代码中对于接受函数作为参数的方法很方便，当该函数不可重用时。此外，它创建的闭包可以是一种高级且强大的工具。如果您使用箭头函数，您还可以获得词法绑定的
    `this` 作为上下文，这避免了绑定函数的需要。然而，如果不小心处理，它可能会产生意想不到的后果和内存使用方面的影响。
- en: The finished product
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成品
- en: 'Now that our JavaScript is in place, the page looks like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的 JavaScript 就位了，页面看起来是这样的：
- en: '![](img/image_01_002-1.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_002-1.jpg)'
- en: The poem stanzas are now italicized and enclosed in boxes, as specified by the
    `01.css` stylesheet, due to the insertion of the `highlight` class by the JavaScript
    code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 诗歌的节现在已经用盒子括起来，如 `01.css` 样式表所指定的，由于 JavaScript 代码插入了 `highlight` 类。
- en: Plain JavaScript versus jQuery
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯 JavaScript 对比 jQuery
- en: 'Even a task as simple as this can be complicated without jQuery at our disposal.
    In plain JavaScript, we could add the `highlight` class this way:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是这样简单的任务，如果没有 jQuery 支持，也可能会变得复杂。在纯 JavaScript 中，我们可以这样添加 `highlight` 类：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Listing 1.3
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1.3
- en: 'Despite its length, this solution does not handle many of the situations that
    jQuery takes care of for us in *Listing 1.2*, such as:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其长度较长，但这种解决方案并没有处理 jQuery 在*列表 1.2*中为我们处理的许多情况，例如：
- en: Properly respecting other `window.onload` event handlers
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确地尊重其他 `window.onload` 事件处理程序
- en: Acting as soon as the DOM is ready
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦 DOM 准备就绪就开始行动
- en: Optimizing element retrieval and other tasks with modern DOM methods
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现代 DOM 方法优化元素检索和其他任务
- en: We can see that our jQuery-driven code is easier to write, simpler to read,
    and faster to execute than its plain JavaScript equivalent.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们使用 jQuery 驱动的代码比其纯 JavaScript 等价物更容易编写、更容易阅读，并且执行速度更快。
- en: Using development tools
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用开发工具
- en: As this code comparison has shown, jQuery code is typically shorter and clearer
    than its basic JavaScript equivalent. However, this doesn't mean we will always
    write code that is free from bugs or that we will intuitively understand what
    is happening on our pages at all times. Our jQuery coding experience will be much
    smoother with the assistance of standard development tools.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个代码对比所显示的，jQuery 代码通常比其基本的 JavaScript 等价物更短更清晰。然而，这并不意味着我们将总是写出没有错误的代码，或者我们会在任何时候直观地理解页面上正在发生的事情。有了标准的开发工具，我们的
    jQuery 编码体验将会更加顺畅。
- en: 'High-quality development tools are available in all modern browsers. We can
    feel free to use the environment that is most comfortable to us. Options include
    the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都提供了高质量的开发工具。我们可以自由选择最适合我们的环境。选项包括以下内容：
- en: Microsoft Edge ([https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/](https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/))
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Edge（[https://developer.microsoft.com/zh-CN/microsoft-edge/platform/documentation/f12-devtools-guide/](https://developer.microsoft.com/zh-CN/microsoft-edge/platform/documentation/f12-devtools-guide/)）
- en: Internet Explorer Developer Tools ([http://msdn.microsoft.com/en-us/library/dd565628.aspx](http://msdn.microsoft.com/%20en-us/library/dd565628.aspx))
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer开发者工具（[http://msdn.microsoft.com/zh-CN/library/dd565628.aspx](http://msdn.microsoft.com/zh-CN/library/dd565628.aspx)）
- en: Safari Web Development Tools ([https://developer.apple.com/safari/tools/](https://developer.apple.com/safari/tools/))
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari Web开发工具（[https://developer.apple.com/zh-CN/safari/tools/](https://developer.apple.com/zh-CN/safari/tools/)）
- en: Chrome Developer Tools ([https://developer.chrome.com/devtools](https://developer.chrome.com/devtools))
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome开发者工具（[https://developer.chrome.com/devtools](https://developer.chrome.com/devtools)）
- en: Firefox Developer Tools ([https://developer.mozilla.org/en-US/docs/Tools](https://developer.mozilla.org/en-US/docs/Tools))
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox开发者工具（[https://developer.mozilla.org/zh-CN/docs/Tools](https://developer.mozilla.org/zh-CN/docs/Tools)）
- en: 'Each of these toolkits offers similar development features, including:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工具包都提供类似的开发功能，包括：
- en: Exploring and modifying aspects of the DOM
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索和修改DOM的各个方面
- en: Investigating the relationship between CSS and its effect on page presentation
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查CSS与其对页面呈现的影响之间的关系
- en: Convenient tracing of script execution through special methods
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过特殊方法方便地追踪脚本执行
- en: Pausing execution of running scripts and inspecting variable values
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停正在运行的脚本的执行并检查变量值
- en: While the details of these features vary from one tool to the next, the general
    concepts remain the same. In this book, some examples will require the use of
    one of these toolkits; we will use Chrome Developer Tools for these demonstrations,
    but development tools for other browsers are fine alternatives.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些功能的细节因工具而异，但一般概念仍然相同。在本书中，一些示例将需要使用其中一个工具包；我们将使用Chrome开发者工具进行这些演示，但其他浏览器的开发工具也是很好的替代方案。
- en: Chrome Developer Tools
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome开发者工具
- en: Up-to-date instructions for accessing and using Chrome Developer Tools can be
    found on the project's documentation pages at [https://developer.chrome.com/devtools](https://developer.chrome.com/devtools).
    The tools are too involved to explore in great detail here, but a survey of some
    of the most relevant features will be useful to us.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的Chrome开发者工具的访问和使用说明可以在项目的文档页面上找到：[https://developer.chrome.com/devtools](https://developer.chrome.com/devtools)。这些工具涉及太多，无法在此处详细探讨，但对一些最相关的功能进行概述将对我们有所帮助。
- en: Understanding these screenshots
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些屏幕截图
- en: Chrome Developer Tools is a quickly evolving project, so the following screenshots
    may not exactly match your environment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome开发者工具是一个快速发展的项目，因此以下屏幕截图可能与您的环境不完全匹配。
- en: 'When Chrome Developer Tools is activated, a new panel appears offering information
    about the current page. In the default Elements tab of this panel, we can see
    a representation of the page structure on the left-hand side and details of the
    selected element (such as the CSS rules that apply to it) on the right-hand side.
    This tab is especially useful for investigating the structure of the page and
    debugging CSS issues:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当激活Chrome开发者工具时，会出现一个新的面板，提供有关当前页面的信息。在此面板的默认元素标签中，我们可以在左侧看到页面结构的表示，右侧可以看到所选元素的详细信息（例如适用于它的CSS规则）。此标签对于调查页面结构和调试CSS问题特别有用：
- en: '![](img/image_01_01-1.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_01-1.png)'
- en: 'The Sources tab allows us to view the contents of all loaded scripts on the
    page. By right-clicking on a line number, we can set a breakpoint, set a conditional
    breakpoint, or have the script continue to that line after another breakpoint
    is reached. Breakpoints are effective ways to pause the execution of a script
    and examine what occurs in a step-by-step fashion. On the right-hand side of the
    page, we can enter a list of variables and expressions we wish to know the value
    of at any time:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: “源”标签允许我们查看页面上加载的所有脚本的内容。通过右键单击行号，我们可以设置断点，设置条件断点，或在达到另一个断点后使脚本继续到该行。断点是暂停脚本执行并逐步检查发生情况的有效方法。在页面右侧，我们可以输入要在任何时间知道其值的变量和表达式列表：
- en: '![](img/image_01_02.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_02.png)'
- en: The Console tab will be of most frequent use to us while learning jQuery. A
    field at the bottom of the panel allows us to enter any JavaScript statement,
    and the result of the statement is then presented in the panel.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习 jQuery 时，控制台选项卡将是我们最频繁使用的。面板底部的字段允许我们输入任何 JavaScript 语句，然后语句的结果将显示在面板中。
- en: 'In this example, we perform the same jQuery selector as in *Listing 1.2*, but
    we are not performing any action on the selected elements. Even so, the statement
    gives us interesting information: we see that the result of the selector is a
    jQuery object pointing to the two `.poem-stanza` elements on the page. We can
    use this console feature to quickly try out jQuery code at any time, right from
    within the browser:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们执行了与 *列表 1.2* 中相同的 jQuery 选择器，但是我们没有对所选元素执行任何操作。即便如此，该语句也给我们提供了有趣的信息：我们看到选择器的结果是一个指向页面上两个
    `.poem-stanza` 元素的 jQuery 对象。我们可以随时使用此控制台功能快速尝试 jQuery 代码，直接从浏览器中进行：
- en: '![](img/image_01_03.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_03.png)'
- en: 'In addition, we can interact with this console directly from our code using
    the `console.log()` method:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以直接从我们的代码中使用 `console.log()` 方法与控制台进行交互：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Listing 1.4
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1.4
- en: 'This code illustrates that we can pass any kind of expression into the `console.log()`
    method. Simple values such as strings and numbers are printed directly, and more
    complicated values such as jQuery objects are nicely formatted for our inspection:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码说明了我们可以将任何类型的表达式传递给 `console.log()` 方法。简单值如字符串和数字直接打印出来，而像 jQuery 对象这样的复杂值则以我们的检查方式进行了良好的格式化：
- en: '![](img/image_01_04.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_04.png)'
- en: This `console.log()` function (which works in each of the browser developer
    tools we mentioned earlier) is a convenient alternative to the JavaScript `alert()`
    function, and will be very useful as we test our jQuery code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `console.log()` 函数（在我们之前提到的每个浏览器开发工具中都有效）是 JavaScript `alert()` 函数的一个便利替代品，并且在我们测试
    jQuery 代码时将非常有用。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to make jQuery available to JavaScript code
    on our web page, use the `$()` function to locate a part of the page that has
    a given class, call `.addClass()` to apply additional styling to this part of
    the page, and invoke `$(() => {})` to cause this function to execute upon loading
    the page. We have also explored the development tools we will be relying on when
    writing, testing, and debugging our jQuery code.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使 jQuery 在我们的网页上的 JavaScript 代码中可用，使用 `$()` 函数来定位具有给定类的页面的某个部分，调用
    `.addClass()` 来为页面的这部分应用附加样式，并调用 `$(() => {})` 来使该函数在加载页面时执行。我们还探讨了在编写、测试和调试我们的
    jQuery 代码时将依赖的开发工具。
- en: We now have an idea of why a developer would choose to use a JavaScript framework
    rather than writing all code from scratch, even for the most basic tasks. We have
    also seen some of the ways in which jQuery excels as a framework, why we might
    choose it over other options, and in general, which tasks jQuery makes easier.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道为什么开发人员选择使用 JavaScript 框架而不是从头编写所有代码，即使是最基本的任务也是如此。我们还看到了 jQuery 作为框架的一些优点，以及为什么我们可能会选择它而不是其他选项，以及通常情况下，jQuery
    使哪些任务更容易。
- en: The simple example we have been using demonstrates how jQuery works, but is
    not very useful in real-world situations. In the next chapter, we will expand
    on this code by exploring jQuery's sophisticated selector language, finding practical
    uses for this technique.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直使用的简单示例展示了 jQuery 的工作原理，但在实际情况下并不太有用。在下一章中，我们将通过探索 jQuery 的复杂选择器语言来扩展这段代码，找到这种技术的实际用途。
