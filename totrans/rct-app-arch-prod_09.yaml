- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring CI/CD for Testing and Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application is finally ready to go to production and meet its first users.
    We have built its features and implemented all the required checks, such as linting,
    testing, and so on, which will give us the confidence that the application code
    is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: However, currently, all those checks must be executed on our local machine.
    Whenever we want to push a new feature to production, we need to run all the scripts
    and then redeploy the application manually, which is a very tedious process.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn what CI/CD is. Then, we will learn what GitHub
    Actions is and what are the main parts of a GitHub Actions pipeline. We will then
    learn how to create a CI/CD pipeline that will automate the verification and deployment
    of the application to Vercel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is CI/CD?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the pipeline for testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the pipeline for deploying to Vercel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will know how to configure the CI/CD pipeline
    with GitHub Actions and deploy the application to Vercel.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get started, we need to set up our project. To be able to develop
    our project, we will need the following things installed on our computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** version 16 or above and **npm** version 8 or above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are multiple ways to install Node.js and npm. Here is a great article
    that goes into more detail: [https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js](https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VSCode** (optional) is currently the most popular editor/IDE for JavaScript/TypeScript,
    so we will be using it. It is open source, has great integration with TypeScript,
    and we can extend its features via extensions. It can be downloaded from [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/React-Application-Architecture-for-Production](https://github.com/PacktPublishing/React-Application-Architecture-for-Production).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository can be cloned locally with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the repository has been cloned, we need to install the application’s dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can provide the environment variables using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the dependencies have been installed, we need to select the right stage
    of the code base that matches this chapter. We can do that by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will prompt us with a list of stages for each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the ninth chapter, so we can select `chapter-09-start` if we want to
    follow along, or `chapter-09` to see the final results of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once the chapter has been selected, all the files required to follow along with
    this chapter will appear.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the setup details, check out the `README.md` file.
  prefs: []
  type: TYPE_NORMAL
- en: What is CI/CD?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous integration/continuous deployment** (**CI/CD**) is a method of
    delivering application changes to its users in an automated way. CI/CD should
    usually consist of the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous Integration** is the automated process of verifying that the code
    has been built, tested, and merged into a repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Delivery** means delivering changes to the repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous Deployment** means publishing the changes to the production server,
    where the changes are made available to the users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s think about how we could implement CI/CD for our application. We
    already have all the parts – we just need to put them together. The process would
    work like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Run all code checks for the application (unit and integration testing, linting,
    type checking, format checking, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the application and run end-to-end tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If both processes finish successfully, we can deploy our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is how the process can be visualized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Pipeline overview ](img/B17297_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Pipeline overview
  prefs: []
  type: TYPE_NORMAL
- en: This process will ensure our application is always in the best condition possible
    and that the changes get frequently and easily released to production. This is
    especially useful when working in larger teams where many changes are being introduced
    to the application on a daily basis.
  prefs: []
  type: TYPE_NORMAL
- en: To run the CI/CD pipeline, we need proper infrastructure. Since we keep the
    repository on GitHub, we can use GitHub Actions to handle CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: Using GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitHub Actions** is a CI/CD tool that allows us to automate, build, test,
    and deploy pipelines. We can create workflows that run on a specific event in
    the repository.'
  prefs: []
  type: TYPE_NORMAL
- en: To understand how it works, let’s have a look at some of its components in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Workflows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `.github/workflows` folder. Workflows can be run when a specified event is
    triggered. We can also re-run workflows manually directly from GitHub. A repository
    can have as many workflows as we want.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **event**, when fired, will cause the workflow to run. GitHub activities
    can trigger events, such as pushing to the repository or creating a pull request.
    Besides that, they can also be started on a schedule or via HTTP POST requests.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **job** defines a series of steps that will be executed in a workflow. A step
    can be either an action or a script that can be executed.
  prefs: []
  type: TYPE_NORMAL
- en: A workflow can have many jobs that can run in parallel, or they can wait for
    dependent jobs to finish before starting.
  prefs: []
  type: TYPE_NORMAL
- en: Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **action** is an application that runs on GitHub Actions to perform a repetitive
    task. We can use already built actions available on [https://github.com/marketplace?type=actions](https://github.com/marketplace?type=actions),
    or we can create our own. We will be using a couple of pre-made actions in our
    pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Runners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A runner is a server that runs workflows when they get triggered. It can be
    hosted on GitHub, but it can also be self-hosted.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are familiar with the basics of GitHub Actions, we can start working
    on creating the workflow for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the `.github/workflows/main.yml` file and the initial code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are providing the name of the workflow. If we omit
    it, the name will be assigned to the name of the workflow file. Here, we are defining
    the `push` event, which will cause the workflow to run whenever code changes get
    pushed to the repository.
  prefs: []
  type: TYPE_NORMAL
- en: We will define the jobs in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'For every job we define, we will provide the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These properties will be common for all the jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` sets the name of the running job'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`runs-on` sets the runner, which will run the job'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we learned what GitHub Actions is and what are the main parts of a
    pipeline, we can now start working on the pipelines for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the pipeline for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our testing pipeline will consist of two jobs that should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run all code checks such as linting, type checking, unit and integration testing,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the application and run end-to-end tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code checks job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code checks job should work as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Code checks job overview ](img/B17297_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Code checks job overview
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, the job should be straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to provide environment variables to the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we need to install the dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we must run unit and integration tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we must run linting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After, we must check the code format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we must run type checking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within `jobs`, let’s add the job that runs these tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of things worth mentioning about the job:'
  prefs: []
  type: TYPE_NORMAL
- en: We use the `actions/checkout@v3` action from the marketplace to allow the job
    to access the repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the `actions/setup-node` action to configure which node version to run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We execute the scripts to verify that everything works as expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End-to-end testing job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our second job related to testing is the end-to-end job, where we want to build
    the application and run the end-to-end tests we defined in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should work as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – E2E testing job ](img/B17297_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – E2E testing job
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, the job will work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to add the environment variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, the dependencies for the applications need to be installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we need to create the production build of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the production code gets end-to-end tested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To implement this job, let’s add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of things worth mentioning about the job:'
  prefs: []
  type: TYPE_NORMAL
- en: We use the `actions/checkout@v3` action to check out the repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the `cypress-io/github-action@v4` action, which will abstract away the
    end-to-end testing. It will install all dependencies, build the application, and
    then start and run all Cypress tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we configured the pipeline for running code checks such as linting,
    formatting, type checking, and testing, we can start working on deploying the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the pipeline for deploying to Vercel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When our testing jobs finish, we want to deploy the application to Vercel.
    To start deploying to Vercel from GitHub Actions, we need to do a couple of things:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a Vercel account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable GitHub integration for Vercel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link the project to Vercel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide environment variables to GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the job that will deploy the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a Vercel account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vercel is straightforward to get started with. Visit [https://vercel.com/signup](https://vercel.com/signup)
    and create an account if you don’t have one.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling GitHub integration for Vercel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Vercel** is a platform that has excellent integration with GitHub out of
    the box. This means that whenever we push changes to the repository, a new version
    of the application will be deployed to Vercel automatically. However, in our case,
    we want to verify that our application works as expected before the deployment
    step so that we can perform this task from the CI/CD pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to disable GitHub integration in Vercel. This can be done
    by creating the `vercel.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Linking the project to Vercel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we have disabled GitHub integration, we need to link the project in Vercel
    to our repository. This can be done by using the Vercel CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask us a series of questions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the CLI process finishes, the `.vercel` folder will be generated. It is
    a folder that should never be tracked by the repository. Inside the `.vercel/project.json`
    file, we will find our project credentials, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We will need to provide these values to GitHub Actions in a few moments.
  prefs: []
  type: TYPE_NORMAL
- en: Providing environment variables to GitHub Actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For our pipeline, we need a couple of environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VERCEL_ORG_ID`, which we can get from the `.``vercel/project.json` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VERCEL_PROJECT_ID`, which we can also get from the `.``vercel/project.json`
    file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VERCEL_TOKEN` which we can get from [https://vercel.com/account/tokens](https://vercel.com/account/tokens%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we have these values, we can add them to GitHub Actions for our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Adding environment variables to GitHub Actions ](img/B17297_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Adding environment variables to GitHub Actions
  prefs: []
  type: TYPE_NORMAL
- en: Creating the job that will deploy the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that everything has been set, we can start working on the job that will
    do all the work. We can see how it should work in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Deploy job overview ](img/B17297_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Deploy job overview
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, it will go through a couple of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the repository owner since we do not want to deploy if the workflow is
    triggered from a repository fork.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the deployment status to *start*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy to Vercel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the deployment status to *finish*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s add the `deploy` job to the workflow file, below the other jobs we defined
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of things worth mentioning about the job:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We set this job to depend on the previous two by adding `needs: [code-checks,
    e2e]`. This means that this job will wait until those jobs complete successfully
    before starting. If some of those jobs fail, this job will never run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With `if: github.repository_owner == ''my-username''`, we check if the repository
    owner is the owner of the project. This check should prevent repository forks
    from deploying the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the `bobheadxi/deployments@v1` action before and after the deploying
    task to update the deployment status in GitHub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using the `amondnet/vercel-action@v25` action to deploy to Vercel. Depending
    on which branch got updated, it will be deployed either to a preview or production
    environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our pipeline should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Pipeline ](img/B17297_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'We can track the deployment status of each environment in the bottom-right
    corner of the repository page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Deployment statuses ](img/B17297_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Deployment statuses
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! Our application is now in production and available for users. Configuring
    the pipeline might take a bit more effort initially, but it saves a lot of time
    in the long run as we don’t have to worry about all these steps. They all just
    got automated.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that a CI/CD pipeline is a process that allows the
    automation of code changes and delivery. We also got introduced to GitHub Actions
    and the parts that allow us to create the CI/CD pipeline to automate testing and
    deploying our application.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we defined three jobs for the workflow. With these jobs, we automated
    the process of running all the required checks, tests, and deployments. Finally,
    we learned how to deploy to Vercel from the CI/CD pipeline and deliver the application
    to the users.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the MVP version of our application. In the next chapter, we will
    cover some of the potential features and improvements we can make to the application.
  prefs: []
  type: TYPE_NORMAL
