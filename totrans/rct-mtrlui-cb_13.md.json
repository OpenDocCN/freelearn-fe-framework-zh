["```js\nimport React, { useState } from 'react';\n\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst CheckboxGroup = ({ values, label, onChange }) => (\n  <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{label}</FormLabel>\n    <FormGroup>\n      {values.map((value, index) => (\n        <FormControlLabel\n          key={index}\n          control={\n            <Checkbox\n              checked={value.checked}\n              onChange={onChange(index)}\n            />\n          }\n          label={value.label}\n        />\n      ))}\n    </FormGroup>\n  </FormControl>\n);\n\nexport default function AbstractingCheckboxGroups() {\n  const [values, setValues] = useState([\n    { label: 'First', checked: false },\n    { label: 'Second', checked: false },\n    { label: 'Third', checked: false }\n  ]);\n\n  const onChange = index => ({ target: { checked } }) => {\n    const newValues = [...values];\n    const value = values[index];\n\n    newValues[index] = { ...value, checked };\n\n    setValues(newValues);\n  };\n\n  return (\n    <CheckboxGroup\n      label=\"Choices\"\n      values={values}\n      onChange={onChange}\n    />\n  );\n}\n```", "```js\nconst CheckboxGroup = ({ values, label, onChange }) => (\n  <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{label}</FormLabel>\n    <FormGroup>\n      {values.map((value, index) => (\n        <FormControlLabel\n          key={index}\n          control={\n            <Checkbox\n              checked={value.checked}\n              onChange={onChange(index)}\n            />\n          }\n          label={value.label}\n        />\n      ))}\n    </FormGroup>\n  </FormControl>\n);\n```", "```js\n<CheckboxGroup\n  label=\"Choices\"\n  values={values}\n  onChange={onChange}\n/>\n```", "```js\nconst [values, setValues] = useState([\n  { label: 'First', checked: false },\n  { label: 'Second', checked: false },\n  { label: 'Third', checked: false }\n]);\n\nconst onChange = index => ({ target: { checked } }) => {\n  const newValues = [...values];\n  const value = values[index];\n\n  newValues[index] = { ...value, checked };\n\n  setValues(newValues);\n};\n```", "```js\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n```", "```js\n<Fragment>\n  <CheckboxGroup\n    label=\"Choices\"\n    values={values}\n    onChange={onChange}\n  />\n  <Typography variant=\"h6\">Selection</Typography>\n  <List>\n    {values\n      .filter(value => value.checked)\n      .map((value, index) => (\n        <ListItem key={index}>\n          <ListItemText>{value.label}</ListItemText>\n        </ListItem>\n      ))}\n  </List>\n</Fragment>\n```", "```js\nimport React, { useState, useEffect } from 'react';\n\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport AccountBalance from '@material-ui/icons/AccountBalance';\nimport AccountBalanceOutlined from '@material-ui/icons/AccountBalanceOutlined';\nimport Backup from '@material-ui/icons/Backup';\nimport BackupOutlined from '@material-ui/icons/BackupOutlined';\nimport Build from '@material-ui/icons/Build';\nimport BuildOutlined from '@material-ui/icons/BuildOutlined';\n\nconst initialItems = [\n  {\n    name: 'AccountBalance',\n    Icon: AccountBalanceOutlined,\n    CheckedIcon: AccountBalance\n  },\n  {\n    name: 'Backup',\n    Icon: BackupOutlined,\n    CheckedIcon: Backup\n  },\n  {\n    name: 'Build',\n    Icon: BuildOutlined,\n    CheckedIcon: Build\n  }\n];\n\nexport default function CustomizingCheckboxItems() {\n  const [items, setItems] = useState({});\n\n  useEffect(() => {\n    setItems(\n      initialItems.reduce(\n        (state, item) => ({ ...state, [item.name]: false }),\n        {}\n      )\n    );\n  }, []);\n\n  const onChange = e => {\n    setItems({ [e.target.name]: e.target.checked });\n  };\n\n  return (\n    <FormGroup>\n      {initialItems.map(({ name, Icon, CheckedIcon }, index) => (\n        <FormControlLabel\n          key={index}\n          control={\n            <Checkbox\n              checked={items[name]}\n              onChange={onChange}\n              inputProps={{ name }}\n              icon={<Icon fontSize=\"small\" />}\n              checkedIcon={<CheckedIcon fontSize=\"small\" />}\n            />\n          }\n          label={name}\n        />\n      ))}\n    </FormGroup>\n  );\n}\n```", "```js\nconst initialItems = [\n  {\n    name: 'AccountBalance',\n    Icon: AccountBalanceOutlined,\n    CheckedIcon: AccountBalance\n  },\n  {\n    name: 'Backup',\n    Icon: BackupOutlined,\n    CheckedIcon: Backup\n  },\n  {\n    name: 'Build',\n    Icon: BuildOutlined,\n    CheckedIcon: Build\n  }\n];\n```", "```js\nconst [items, setItems] = useState({});\n\nuseEffect(() => {\n  setItems(\n    initialItems.reduce(\n      (state, item) => ({ ...state, [item.name]: false }),\n      {}\n    )\n  );\n}, []);\n```", "```js\n{\n  AccountBalance: false,\n  Backup: false,\n  Build: false\n}\n```", "```js\n<FormGroup>\n  {initialItems.map(({ name, Icon, CheckedIcon }, index) => (\n    <FormControlLabel\n      key={index}\n      control={\n        <Checkbox\n          checked={items[name]}\n          onChange={onChange}\n          inputProps={{ name }}\n          icon={<Icon fontSize=\"small\" />}\n          checkedIcon={<CheckedIcon fontSize=\"small\" />}\n        />\n      }\n      label={name}\n    />\n  ))}\n</FormGroup>\n```", "```js\n<Checkbox\n  color=\"default\"\n  checked={items[name]}\n  onChange={onChange}\n  inputProps={{ name }}\n  icon={<Icon fontSize=\"small\" />}\n  checkedIcon={<CheckedIcon fontSize=\"small\" />}\n/>\n```", "```js\n<Checkbox\n  color=\"primary\"\n  checked={items[name]}\n  onChange={onChange}\n  inputProps={{ name }}\n  icon={<Icon fontSize=\"small\" />}\n  checkedIcon={<CheckedIcon fontSize=\"small\" />}\n/>\n```", "```js\nimport React, { useState } from 'react';\n\nimport Radio from '@material-ui/core/Radio';\nimport { default as MaterialRadioGroup } from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst options = [\n  { label: 'First', value: 'first' },\n  { label: 'Second', value: 'second' },\n  { label: 'Third', value: 'third' }\n];\n\nconst RadioGroup = ({ value, options, name, label, onChange }) => (\n  <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{label}</FormLabel>\n    <MaterialRadioGroup\n      name={name}\n      value={value}\n      onChange={onChange}\n      disabled\n    >\n      {options.map((option, index) => (\n        <FormControlLabel\n          key={index}\n          control={<Radio />}\n          value={option.value}\n          label={option.label}\n        />\n      ))}\n    </MaterialRadioGroup>\n  </FormControl>\n);\n\nexport default function AbstractingRadioButtonGroups() {\n  const [value, setValue] = useState('first');\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <RadioGroup\n      value={value}\n      options={options}\n      name=\"radio1\"\n      label=\"Pick One\"\n      onChange={onChange}\n    />\n  );\n}\n```", "```js\nconst RadioGroup = ({ value, options, name, label, onChange }) => (\n  <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{label}</FormLabel>\n    <MaterialRadioGroup name={name} value={value} onChange={onChange}>\n      {options.map((option, index) => (\n        <FormControlLabel\n          key={index}\n          control={<Radio />}\n          value={option.value}\n          label={option.label}\n        />\n      ))}\n    </MaterialRadioGroup>\n  </FormControl>\n);\n```", "```js\n<RadioGroup\n  value={value}\n  options={options}\n  name=\"radio1\"\n  label=\"Pick One\"\n  onChange={onChange}\n/>\n```", "```js\nconst options = [\n  { label: 'First', value: 'first' },\n  { label: 'Second', value: 'second' },\n  { label: 'Third', value: 'third' }\n];\n```", "```js\nconst [value, setValue] = useState('first');\n\nconst onChange = e => {\n  setValue(e.target.value);\n};\n```", "```js\n<FormControl component=\"fieldset\" disabled>\n  ...\n</FormControl>\n```", "```js\n<FormControlLabel\n  key={index}\n  control={<Radio disabled={option.disabled} />}\n  value={option.value}\n  label={option.label}\n/>\n```", "```js\nconst options = [\n  { label: 'First', value: 'first' },\n  { label: 'Second', value: 'second', disabled: true },\n  { label: 'Third', value: 'third' }\n];\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nimport Car from '@material-ui/icons/DirectionsCar';\nimport CarOutlined from '@material-ui/icons/DirectionsCarOutlined';\nimport Bus from '@material-ui/icons/DirectionsBus';\nimport BusOutlined from '@material-ui/icons/DirectionsBusOutlined';\nimport Train from '@material-ui/icons/Train';\nimport TrainOutlined from '@material-ui/icons/TrainOutlined';\n\nexport default function RadioButtonTypes() {\n  const [value, setValue] = useState('train');\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">Travel Mode</FormLabel>\n      <RadioGroup name=\"travel\" value={value} onChange={onChange} row>\n        <FormControlLabel\n          value=\"car\"\n          control={\n            <Radio\n              color=\"primary\"\n              icon={<CarOutlined />}\n              checkedIcon={<Car />}\n            />\n          }\n          label=\"Car\"\n          labelPlacement=\"bottom\"\n        />\n        <FormControlLabel\n          value=\"bus\"\n          control={\n            <Radio\n              color=\"primary\"\n              icon={<BusOutlined />}\n              checkedIcon={<Bus />}\n            />\n          }\n          label=\"Bus\"\n          labelPlacement=\"bottom\"\n        />\n        <FormControlLabel\n          value=\"train\"\n          control={\n            <Radio\n              color=\"primary\"\n              icon={<TrainOutlined />}\n              checkedIcon={<Train />}\n            />\n          }\n          label=\"Train\"\n          labelPlacement=\"bottom\"\n        />\n      </RadioGroup>\n    </FormControl>\n  );\n}\n```", "```js\n<RadioGroup\n  name=\"travel\"\n  value={value}\n  onChange={onChange}\n  row\n>\n```", "```js\n<Radio\n  color=\"primary\"\n  icon={<BusOutlined />}\n  checkedIcon={<Bus />}\n/>\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Switch from '@material-ui/core/Switch';\n\nconst SwitchGroup = ({ values, label, onChange }) => (\n  <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{label}</FormLabel>\n    <FormGroup>\n      {values.map((value, index) => (\n        <FormControlLabel\n          key={index}\n          control={\n            <Switch\n              checked={value.checked}\n              onChange={onChange(index)}\n            />\n          }\n          label={value.label}\n        />\n      ))}\n    </FormGroup>\n  </FormControl>\n);\n\nexport default function ReplacingCheckboxesWithSwitches() {\n  const [values, setValues] = useState([\n    { label: 'First', checked: false },\n    { label: 'Second', checked: false },\n    { label: 'Third', checked: false }\n  ]);\n\n  const onChange = index => ({ target: { checked } }) => {\n    const newValues = [...values];\n    const value = values[index];\n\n    newValues[index] = { ...value, checked };\n    setValues(newValues);\n  };\n\n  return (\n    <SwitchGroup\n      label=\"Choices\"\n      values={values}\n      onChange={onChange}\n    />\n  );\n}\n```", "```js\nconst SwitchGroup = ({ values, label, onChange }) => (\n  <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">{label}</FormLabel>\n    <FormGroup>\n      {values.map((value, index) => (\n        <FormControlLabel\n          key={index}\n          control={\n            <Switch\n              checked={value.checked}\n              onChange={onChange(index)}\n            />\n          }\n          label={value.label}\n        />\n      ))}\n    </FormGroup>\n  </FormControl>\n);\n```", "```js\n<Fragment>\n  <SwitchGroup\n    label=\"Switch Choices\"\n    values={values}\n    onChange={this.onChange}\n  />\n  <SwitchGroup\n    label=\"Switch Choices\"\n    values={values}\n    onChange={onChange}\n    checkbox\n  />\n</Fragment>\n```", "```js\nimport React, { Fragment, useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles(theme => ({\n  control: { margin: theme.spacing(2), minWidth: 200 }\n}));\n\nexport default function ControllingSelectsWithState() {\n  const classes = useStyles();\n\n  const [categories, setCategories] = useState([\n    { label: 'Category 1', id: 1 },\n    { label: 'Category 2', id: 2 },\n    { label: 'Category 3', id: 3 }\n  ]);\n\n  const [products, setProducts] = useState([\n    { label: 'Product 1', id: 1, category: 1 },\n    { label: 'Product 2', id: 2, category: 1 },\n    { label: 'Product 3', id: 3, category: 1 },\n    { label: 'Product 4', id: 4, category: 2 },\n    { label: 'Product 5', id: 5, category: 2 },\n    { label: 'Product 6', id: 6, category: 2 },\n    { label: 'Product 7', id: 7, category: 3 },\n    { label: 'Product 8', id: 8, category: 3 },\n    { label: 'Product 9', id: 9, category: 3 }\n  ]);\n\n  const setters = {\n    categories: setCategories,\n    products: setProducts\n  };\n  const collections = { categories, products };\n\n  const onChange = e => {\n    const setCollection = setters[e.target.name];\n    const collection = collections[e.target.name].map(item => ({\n      ...item,\n      selected: false\n    }));\n    const index = collection.findIndex(\n      item => item.id === e.target.value\n    );\n\n    collection[index] = { ...collection[index], selected: true };\n    setCollection(collection);\n  };\n\n  const category = categories.find(category => category.selected) || {\n    id: ''\n  };\n  const product = products.find(product => product.selected) || {\n    id: ''\n  };\n\n  return (\n    <Fragment>\n      <FormControl className={classes.control}>\n        <InputLabel htmlFor=\"categories\">Category</InputLabel>\n        <Select\n          value={category.id}\n          onChange={onChange}\n          inputProps={{\n            name: 'categories',\n            id: 'categories'\n          }}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          {categories.map(category => (\n            <MenuItem key={category.id} value={category.id}>\n              {category.label}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <FormControl\n        className={classes.control}\n        disabled={category.id === ''}\n      >\n        <InputLabel htmlFor=\"Products\">Product</InputLabel>\n        <Select\n          value={product.id}\n          onChange={onChange}\n          inputProps={{\n            name: 'products',\n            id: 'values'\n          }}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          {products\n            .filter(product => product.category === category.id)\n            .map(product => (\n              <MenuItem key={product.id} value={product.id}>\n                {product.label}\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n    </Fragment>\n  );\n}\n```", "```js\nconst [categories, setCategories] = useState([\n  { label: 'Category 1', id: 1 },\n  { label: 'Category 2', id: 2 },\n  { label: 'Category 3', id: 3 }\n]);\n\nconst [products, setProducts] = useState([\n  { label: 'Product 1', id: 1, category: 1 },\n  { label: 'Product 2', id: 2, category: 1 },\n  { label: 'Product 3', id: 3, category: 1 },\n  { label: 'Product 4', id: 4, category: 2 },\n  { label: 'Product 5', id: 5, category: 2 },\n  { label: 'Product 6', id: 6, category: 2 },\n  { label: 'Product 7', id: 7, category: 3 },\n  { label: 'Product 8', id: 8, category: 3 },\n  { label: 'Product 9', id: 9, category: 3 }\n]);\n```", "```js\nconst setters = {\n  categories: setCategories,\n  products: setProducts\n};\nconst collections = { categories, products };\n\nconst onChange = e => {\n  const setCollection = setters[e.target.name];\n  const collection = collections[e.target.name].map(item => ({\n    ...item,\n    selected: false\n  }));\n  const index = collection.findIndex(\n    item => item.id === e.target.value\n  );\n\n  collection[index] = { ...collection[index], selected: true };\n  setCollection(collection);\n};\n```", "```js\nconst category = categories.find(category => category.selected) || {\n  id: ''\n};\nconst product = products.find(product => product.selected) || {\n  id: ''\n};\n```", "```js\n{categories.map(category => (\n  <MenuItem key={category.id} value={category.id}>\n    {category.label}\n  </MenuItem>\n))}\n```", "```js\n{products\n  .filter(product => product.category === category.id)\n  .map(product => (\n    <MenuItem key={product.id} value={product.id}>\n      {product.label}\n    </MenuItem>\n  ))}\n```", "```js\nimport React, { useState } from 'react';\n\nimport { makeStyles } from '@material-ui/styles';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst options = [\n  { id: 1, label: 'First' },\n  { id: 2, label: 'Second' },\n  { id: 3, label: 'Third' },\n  { id: 4, label: 'Fourth' },\n  { id: 5, label: 'Fifth' }\n];\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 100,\n    maxWidth: 280\n  }\n}));\n\nexport default function SelectingMultipleItems() {\n  const classes = useStyles();\n  const [selected, setSelected] = useState([]);\n\n  const onChange = e => {\n    setSelected(e.target.value);\n  };\n\n  return (\n    <FormControl className={classes.formControl}>\n      <InputLabel htmlFor=\"multi\">Value</InputLabel>\n      <Select\n        multiple\n        value={selected}\n        onChange={onChange}\n        input={<Input id=\"multi\" />}\n      >\n        {options.map(option => (\n          <MenuItem key={option.id} value={option.id}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n```", "```js\n<Select\n  multiple\n  value={selected}\n  onChange={onChange}\n  input={<Input id=\"multi\" />}\n>\n  {options.map(option => (\n    <MenuItem key={option.id} value={option.id}>\n      {option.label}\n    </MenuItem>\n  ))}\n</Select>\n```", "```js\nconst onChange = e => {\n  setSelected(e.target.value);\n};\n```", "```js\nfunction Selected({ selected }) {\n  const classes = useStyles();\n\n  return selected.map(value => (\n    <Chip\n      key={value}\n      label={options.find(option => option.id === value).label}\n      className={classes.chip}\n    />\n  ));\n}\n```", "```js\n<Select\n  multiple\n  value={selected}\n  onChange={onChange}\n  input={<Input id=\"multi\" />}\n  renderValue={selected => <Selected selected={selected} />}\n>\n  {options.map(option => (\n    <MenuItem key={option.id} value={option.id}>\n      {option.label}\n    </MenuItem>\n  ))}\n</Select>\n```"]