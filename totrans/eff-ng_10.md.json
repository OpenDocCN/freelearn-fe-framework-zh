["```js\nnpm i @ngneat/transloco\n```", "```js\nnx g @ngneat/transloco:ng-add\n```", "```js\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n    private http = inject(HttpClient);\n    getTranslation(lang: string) {\n        return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n    }\n}\n```", "```js\nlang: 'en' | 'nl'\n```", "```js\ngetTranslation(langPath:'en' | 'nl') {\n  return this.http.get(`./assets/i18n/${langPath}.json`);\n}\n```", "```js\nprovideHttpClient(),\nprovideTransloco({\n  config: {\n    availableLangs: [‹en›, ‹nl›],\n    defaultLang: ‹en›,\n    // Remove this option if your application doesn›t support changing language in runtime.\n    reRenderOnLangChange: true,\n    prodMode: !isDevMode(),\n  },\n  loader: TranslocoHttpLoader\n}),\n```", "```js\nif (!isDevMode() || req.url.endsWith('.json')) return next(req);\n```", "```js\n{\n  \"expenses_overview\": \"Expenses Overview\"\n}\n```", "```js\n{\n  \"expenses_overview\": \"Uitgavenoverzicht\"\n}\n```", "```js\nimports: [……, TranslocoDirective],\n```", "```js\n<ng-container ng-container element and add the directive on ng-container, you can use the t variable from the directive throughout the template to translate values. Let’s replace Expenses Overview text inside the h1 tag with the translatable value using the t variable from the directive and the expenses_overview translation key:\n\n```", "```js\n\"expenses_overview_for_user\": \"Expenses overview for {{user}}\"\n```", "```js\n<h1>{{ t('expenses_overview_for_user', { user: user.fullName }) }}</h1>\n```", "```js\n{\n  \"expenses_overview_page\": {\n    \"title\": \"Expenses Overview\",\n    \"incl_vat\": \"Incl. VAT\"\n  }\n}\n```", "```js\n<h1>{{ t('expenses_overview_page.title') }}</h1>\n```", "```js\n*transloco=\"let t; read: 'expenses_overview_page'\"\n```", "```js\n<h1>{{ t('title') }}</h1>\n```", "```js\n<h1>{{ 'expenses_overview_for_user' | transloco: {user: user.fullname} }}</h1>\n```", "```js\n<h1 transloco=\" expenses_overview_for_user \" transloco pipe to translate translation keys. In the last example, we showed how you can use the transloco attribute directive combined with the translocoParams attribute directive to translate translation keys with parameters. But, as mentioned earlier, using the structural directive is the preferred approach, as it improves your performance and creates fewer subscriptions.\nNow you know about all the options to translate values inside your HTML templates using Transloco. Next, you’ll learn about translating values programmatically inside your TypeScript files.\nTranslating values programmatically in your TypeScript files\nSometimes, you might encounter a situation where you must translate values inside your component classes or services. To translate values programmatically inside your TypeScript files, you can use the `TranslocoService` class. There is only one caveat: you need to know the translation file is loaded before you can translate translation keys inside your TypeScript files.\nSo, let’s start by creating a `TranslationService` class in the *expenses-registration application*. Inside the `TranslationService`, we will make the `TranslocoService` class publicly available and create a signal from the `events$` observable using the `toSignal()` function:\n\n```", "```js\n\n We injected the `TranslocoService` inside `TranslationService`. Alternatively, you can inject the `TranslocoService` into each component or service you need to, but I prefer to expose it in the `TranslationService`, where we also declare the `translationsLoaded` signal and possible other configurations and methods. The `translationsLoaded` signal you created will return `true` when the `events$` observable from the `TranslocoService` returns an event of type `translationLoadSuccess`. You can use this signal in combination with a signal effect to translate values inside your TypeScript files safely.\nFor example, if you want to translate the `expenses_overview_page.title` key inside the `ExpensesOverviewPageComponent`, you start by injecting the `TranslationService` service you created:\n\n```", "```js\n\n After injecting the service, you can create an effect based on the `translationsLoaded` signal and perform your translations safely inside the effect:\n\n```", "```js\n\n As you can see in the preceding code, we declare an `effect` and check if the `translationsLoaded` signal from the service returns a `true` value; if it does, you can perform your translations safely. If you know the translation file is already loaded, for example, because the user is logged in and you fetch the translation file before the user is logged in, you don’t need the effect and can directly get the translation. You translate a value by calling the `translate()` function on the `TranslocoService` and providing the function with the translation key you want to translate:\n\n```", "```js\n\n Using the `translate()` function will return the translated value synchronously, so you can directly use or assign it however you need to. When you need to translate a key-value pair that includes translation parameters, you use the following syntax:\n\n```", "```js\n\n Alternatively to the `translate()` function, you can also use the `selectTranslate()` function. The `selectTranslate()` function is asynchronous and will fetch the translation file (unless it’s already loaded) and return the translation as an Observable. When using the `selectTranslate()` function, you don’t have to make sure the translation file is already loaded, but you do need to manage the subscription. I like to use the first approach, as you don’t have to create and manage subscriptions each time you want to translate a value inside your component classes, but here is an example of how you can get the translation value for a key using the `selectTranslate()` function:\n\n```", "```js\n\n You now know how to translate values synchronously and asynchronously in your TypeScript files. You also know how to translate values in the HTML template. The last thing to learn is how to change your Transloco instance’s configurations at runtime. After all, you want to give the user the ability to change the language.\nChanging the Transloco configurations at runtime\nThe last step in making your content translatable for your users is adding the option to change the language. First, you need something so the user can select a language; I will add a select box to the navbar for this purpose. In the HTML file of the `NavbarComponent`, I’ve added the following HTML:\n\n```", "```js\n\n After adding the select box in the HTML file, in the `component` class, I’ve added an input for the `languages` array and an output to output the selected value (I also converted the `navbarItems` input to a signal input):\n\n```", "```js\n\n After updating the `NavbarComponent`, you need to provide an array of languages to the `NavbarComponent` inside the HTML template of the `AppComponent` of your `expenses-registration` application. To achieve this, we’re first going to add an additional method in our `LanguageService` to retrieve the available languages as a string array:\n\n```", "```js\n\n After adding the method that returns the available languages, we will use this method inside the HTML template of our `AppComponent` and use it to set the `language` input for the `NavbarComponent`:\n\n```", "```js\n\n After supplying the `languages` input with the available languages, you’ll see the options inside the select box. Next, you need to add the `languageChange` output event on the HTML tag of the `NavbarComponent` and use the output value to set a new active language:\n\n```", "```js\n\n Now, if you change the language in the select box inside your navbar, you’ll notice that the translatable text in your application has been changed to the selected language. That is all you need to know about adding translations in your Angular applications using Transloco. The library has other translation options, such as setting the default language, setting the fallback language, or subscribing to language changes to perform logic reactively when the active language changes.\nIf you want, you can dive deeper on your own by visiting t[he documentation on the official web](https://jsverse.github.io/transloco/)site: [https://jsverse.github.io/transloco/](https://jsverse.github.io/transloco/).\nYou now know how to support internationalization for your Angular websites using Transloco. We did all the necessary setup for Transloco and created an additional `TranslationService`. Next, we created translation files with key-value pairs used to declare all your translations. You learned how to use the Transloco directives and pipe to translate values inside your HTML templates and the `TranslocoService` to translate values and change the active language inside your TypeScript files. Now that you know how to add i18n support to your Angular applications, let’s learn about localization.\nLocalization for Angular applications\nWhere internationalization ensures your application content can be consumed in different languages, localization ensures that your application uses the correct formats and symbols for the user’s location. For example, dates are formatted differently for users in the USA and in the EU. You want to ensure that you show the correct formats for each user so your application can be used without confusion by as many people as possible. Where internationalization is commonly referred to as i18n, localization is commonly referred to as **l10n**.\nJust as with i18n, Angular has its own localization packages, but the implementation of the framework isn’t widely used and requires some additional work to use at runtime. Just as we did with i18n, we can use Transloco for l10n. Transloco provides a dedicated package for l10n containing a date, currency, and decimal pipe. To start using the Transloco l10n pipes, start by installing the NPM package with the following command:\n\n```", "```js\n\n After installing the package in your Nx monorepo, you need to provide configurations in the `ApplicationConfig` object of the applications you want to use the l10n package. We will add it to the *expenses-registration application* by adding the following provider inside the providers array of the `ApplicationConfig` object:\n\n```", "```js\n\n As you can see, you need to add the `provideTranslocoLocale()` provider function inside the providers array and supply the function with a parameter to configure the language to localization mapping. In the example, we map the `en` language to the `en-US` localization and the `nl` language to the `nl-NL` localization. By using the `langToLocaleMapping` configuration, the localization will automatically change when you set a new active language. If you don’t use the `langToLocaleMapping` setting and want your localization settings separated, you need to set the active location using the `TranslocoService`:\n\n```", "```js\n\n Besides the `langToLocaleMapping` configuration, you can provide the following configurations to the `provideTranslocoLocale()` provider function:\n\n```", "```js\n\n After configuring the `provideTranslocoLocale()` provider function, you can start using the Transloco i10n pipes. Let’s start with localizing currencies.\nLocalizing currencies using the translocoCurrency pipe\nWhen localizing currency values inside your applications, you want to display the correct currency symbol and make sure your numbers are formatted correctly depending on the user. To localize currency values with Transloco, you import the pipe into your component (if you’re using standalone components) and change the Angular currency pipe inside your templates for the `translocoCurrency` pipe. So go ahead and change the currency pipe in your `expenses-overview-page.component.html` file and replace it with the transloco pipe:\n\n```", "```js\ntranslocoCurrency: 'narrowSymbol' : {minimumFractionDigits: 2 } : 'EUR' : 'nl-NL'\n```", "```js\n{{ expense.date | translocoDate pipe, the date format changes when you change the language settings inside the navbar. Additionally, you can provide the translocoDate pipe with some parameters to further configure how formats are displayed or to overwrite the default settings for specific instances in your application. The translocoDate pipe can take the following parameters:\n\n*   `options`: This is an object containing the following properties:\n    *   `dateStyle`: Controls how to format the date; you can use full, long, medium, and short formats.\n    *   `timeStyle`: Controls how to format the time of the date. You can provide it with full, long, medium, and short.\n    *   `fractionalSecondDigits`: Controls the number of fractional seconds to show; you can set it to 0, 1, 2, or 3.\n    *   `dayPeriod`: Controls how to show the period of the day (at night, midday, etc.). The options are long, short, and narrow.\n    *   `hour12`: Indicates whether you are using 12 or 24 hours. You can provide the `hour12` property with a `true` or `false` value.\n    *   `weekday`: Controls how weeks are formatted; the options are long, short, and narrow.\n    *   `era`: Controls how the era is formatted; the options are long, short, and narrow.\n    *   `year`: Controls how to format the year value; the options are numeric and 2-digit.\n    *   `month`: Controls how to format the month value; the options are numeric, 2-digit, long, short, and narrow.\n    *   `day`: Controls how to format the day value; the options are numeric and 2-digit.\n    *   `hour`: Controls how to format the hour value; the options are numeric and 2-digit.\n    *   `minute`: Controls how to format the minute value; the options are numeric and 2-digit.\n    *   `second`: Controls how to format the second value; the options are numeric and 2-digit.\n    *   `timezone`: Controls how to display the time zone; the options are full, long, medium, and short.\n*   `locale`: With this option, you can provide a locale option, such as en-US or nl-NL.\n\nAll the additional parameters you can supply to the `translocoDate` pipe are optional; if you don’t supply any additional parameters, the pipe will display dates with the numeric day, month, and year by default. Now that you know how to use the `translocoDate` pipe and what configuration options it has, let’s move on to the last Transloco pipe we will cover: the decimal pipe.\nLocalizing numbers using the translocoDecimal pipe\nJust like currency and date values, numbers are subject to localization. For example, in the USA, large numbers are separated by a comma and decimal numbers are separated from the integer values by a dot; for EU users, this is reversed. This localization issue can be solved in your applications by using the `translocoDecimal` pipe. It will format numbers correctly depending on the language (or localization) settings configured by the user:\n\n```", "```js\n<!--567,890.15  en-US -->\n<span> {{ 567890.15 | translocoDecimal }}</span>\n```", "```js\n<button type=\"button\">1st default focus</button>\n<button type=\"button\">2nd default focus</button>\n<button type=\"button\" tabindex=\"100\">Second focused</button>\n<div tabindex=\"0\">3rd default focus</div>\n<button type=\"button\" tabindex. The first element that will be focused is the button on the bottom with tabindex 1; after that, the button with tabindex 100 will be focused, and after that, elements will be focused from top to bottom (skipping the two elements we already focused because they have a positive tabindex attribute).\nNow that you know how to control the keyboard focus of HTML elements and when to use the `tabindex` attribute, let’s learn about ARIA attributes.\nAdding ARIA attributes\n**Accessible Rich Internet Applications** (**ARIA**) attributes are used to provide or add semantic meaning to HTML elements. In Angular, you can provide static or dynamic values for your ARIA attributes. Dynamic attributes might be useful if you want your ARIA attributes to be translatable or when they change for specific HTML elements based on some user interaction:\n\n```", "```js\n\n In the preceding code, you see the three options:\n\n*   First, we provide a dynamic value to the `aria-label`. In the first example, `dynamicValue` is a component property that can have different values over time.\n*   Then, you see how you can use a translated value for the `aria-label`.\n*   Lastly, we provided a static value for the `aria-label`.\n\nThere are many different ARIA attributes; let us take a look at the few most commonly used ones.\nThe aria-label\nThe `aria-label` attribute is by far the most used ARAI attribute. The `aria-label` attribute can be used to provide a text explanation for visual elements that don’t have any text or to provide a more descriptive explanation of an element that does include text. For example, if you have a button HTML element that is styled as a hamburger menu, the button will not include any text. Without the `aria-label` attribute, a screen reader can’t make anything of this, so you need to provide the `aria-label` attribute with an explanation:\n\n```", "```js\n<button Submit text. By default, a screen reader will read the text of the HTML element, but only reading out Submit might not give the user enough information about what they are submitting, especially if you can’t see the screen. Adding an aria-label attribute can provide a better explanation for the screen reader to read aloud to the user.\nThe role attribute\nAnother important and commonly used ARIA attribute is the `role` attribute. The `role` attribute in HTML defines an element’s specific role or purpose within the web page or application. It can be added to various HTML elements to convey their intended purpose to assistive technologies, such as screen readers, which rely on this information to provide a meaningful experience to users with disabilities.\nThe `role` attribute can be added for most HTML elements, including but not limited to the following:\n\n*   Semantic elements such as `<nav>`, `<article>`, `<section>`, `<header>`, `<footer>`, and `<main>`.\n*   Form elements such as `<input>`, `<button>`, `<select>`, and `<textarea>`.\n*   Interactive elements such as `<a>` (anchor links), `<button>`, and `<option>` (within `<select>`).\n\nThe following is an example of the `role` attribute:\n\n```", "```js\n\n```", "```js\n\n```", "```js\n\n```", "```js\n\n```", "```js\n\n```"]