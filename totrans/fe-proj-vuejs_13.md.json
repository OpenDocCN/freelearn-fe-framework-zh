["```js\nvue add @vue/e2e-cypress\n```", "```js\nnpm run test:e2e\n```", "```js\n// https://docs.cypress.io/api/introduction/api.html\ndescribe('My First Test', () => {\n  it('Visits the app root url', () => {\n    cy.visit('/')\n    cy.contains('h1', 'Welcome to Your Vue.js App')\n  })\n})\n```", "```js\ndescribe('My First Test', () => {\n  it('Opens an arbitrary URL', () => {\n    cy.visit('https://google.com')\n    cy.get('input').should('exist')\n  })\n})\n```", "```js\n<template>\n  <div id=\"app\" class=\"p-10\">\n    <div class=\"flex flex-col\">\n      <h2\n        class=\"uppercase leading-loose pb-4 flex justify-center           m-auto md:w-1/3 text-xl mb-8 font-bold text-gray-800           border-b\"\n      >\n        Commentator Pro\n      </h2>\n   </div>\n  </div>\n</template>\n<script>\nexport default {}\n</script>\n```", "```js\ndescribe('Commentator Pro', () => {\n  it('Has a h2 with \"Commentator Pro\"', () => {\n    cy.visit('/')\n    cy.contains('h2', 'Commentator Pro')\n  })\n})\n```", "```js\n    <template>\n      <div id=\"app\" class=\"p-10\">\n        <div class=\"flex flex-col\">\n          <!-- rest of template -->\n          <button class=\"flex mx-auto bg-blue-500 hover:bg-blue-700         text-white font-bold py-2 px-4 rounded\">\n            Add a New Comment\n          </button>\n        </div>\n      </div>\n    </template>\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      it('the homepage should have a button with the right text',     () => {\n        // test will go here\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      it('the homepage should have a button with the right text',     () => {\n        cy.visit('/')\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      it('the homepage should have a button with the right text',     () => {\n        cy.visit('/')\n        cy.contains('button', 'Add a New Comment')\n      })\n    })\n    ```", "```js\n<template>\n  <div id=\"app\" class=\"p-10\">\n    <div class=\"flex flex-col\">\n      <!-- rest of template -->\n      <button\n        class=\"flex mx-auto bg-blue-500 hover:bg-blue-700           text-white font-bold py-2 px-4 rounded\"\n        data-test-id=\"new-comment-button\"\n      >\n        Add a New Comment\n      </button>\n      <!-- rest of template -->\n    </div>\n  </div>\n</template>\n```", "```js\n<template>\n  <div id=\"app\" class=\"p-10\">\n    <div class=\"flex flex-col\">\n      <!-- rest of template -->\n     <button\n        @click=\"showEditor = !showEditor\"\n        class=\"flex mx-auto bg-blue-500 hover:bg-blue-700           text-white font-bold py-2 px-4 rounded\"\n        data-test-id=\"new-comment-button\"\n      >\n        Add a New Comment\n      </button>\n      <!-- rest of template -->\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      showEditor: false\n    }\n  }\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\" class=\"p-10\">\n    <div class=\"flex flex-col\">\n      <!-- rest of template -->\n      <div v-if=\"showEditor\">\n        <textarea\n          data-test-id=\"new-comment-editor\"\n          class=\"flex mx-auto my-6 shadow appearance-none             border rounded py-2 px-3 text-gray-700 leading-tight             focus:outline-none focus:shadow-outline\"\n        >\n        </textarea>\n      </div>\n    </div>\n  </div>\n</template>\n```", "```js\ndescribe('Adding a New Comment', () => {\n  // other tests   it('the Add a New Comment button should toggle the editor     display on and off', () => {\n    cy.visit('/')\n    cy.get('[data-test-id=\"new-comment-editor\"]').should       ('not.be.visible')\n    cy.get('[data-test-id=\"new-comment-button\"]').click()\n    cy.get('[data-test-id=\"new-comment-editor\"]').should       ('be.visible')\n    cy.get('[data-test-id=\"new-comment-button\"]').click()\n    cy.get('[data-test-id=\"new-comment-editor\"]').should       ('not.be.visible')\n  })\n})\n```", "```js\n    <template>\n      <div id=\"app\" class=\"p-10\">\n            <!-- rest of template -->\n            <textarea\n              data-test-id=\"new-comment-editor\"\n              class=\"flex mx-auto my-6 shadow appearance-none             border rounded py-2 px-3 text-gray-700 leading-tight             focus:outline-none focus:shadow-outline\"\n              v-model=\"newComment\"\n            >\n            </textarea>\n            <!-- rest of template -->\n      </div>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          // other data properties\n          newComment: ''\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\" class=\"p-10\">\n        <!-- rest of template -->\n          <div v-if=\"showEditor\">\n            <!-- rest of template -->\n            <button\n              data-test-id=\"new-comment-submit\"\n              class=\"flex mx-auto bg-blue-500 hover:bg-blue-700             text-white font-bold py-2 px-4 rounded\"\n            >\n            Submit\n            </button>\n            <!-- rest of template -->\n          </div>\n        <!-- rest of template -->\n      </div>\n    </template>\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // other tests\n      it('the new comment editor should support text input',     () => {\n        cy.visit('/')\n        // Get the editor to show\n        cy.get('[data-test-id=\"new-comment-button\"]').click()\n        cy.get('[data-test-id=\"new-comment-editor\"]').should       ('be.visible')\n        cy.get('[data-test-id=\"new-comment-editor\"]')\n          .type('Just saying...')\n          .should('have.value', 'Just saying...')\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // other tests\n      it('the new comment editor should have a submit button',     () => {\n        cy.visit('/')\n        cy.get('[data-test-id=\"new-comment-submit\"]').should       ('not.be.visible')\n        // Get the editor to show\n        cy.get('[data-test-id=\"new-comment-button\"]').click()\n        cy.get('[data-test-id=\"new-comment-submit\"]').should       ('be.visible')\n        cy.contains('[data-test-id=\"new-comment-submit\"]', 'Submit')\n      })\n    })\n    ```", "```js\n    <template>\n            <!-- rest of template -->\n            <button\n              data-test-id=\"new-comment-submit\"\n              class=\"flex mx-auto bg-blue-500 hover:bg-blue-700             text-white font-bold py-2 px-4 rounded\"\n              :disabled=\"!newComment\"\n              :class=\"{ 'opacity-50 cursor-not-allowed' : !newComment }\"\n            >\n            Submit\n            </button>\n            <!-- rest of template -->\n    </template>\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // other tests\n      it('the new comment submit button should be disabled based     on \"new comment\" content', () => {\n        cy.visit('/')\n        // Get the editor to show\n        cy.get('[data-test-id=\"new-comment-button\"]').click()\n        cy.get('[data-test-id=\"new-comment-submit\"]').should       ('be.visible')\n        cy.get('[data-test-id=\"new-comment-submit\"]')\n          .should('be.disabled')\n        cy.get('[data-test-id=\"new-comment-editor\"]')\n          .type('Just saying...')\n        cy.get('[data-test-id=\"new-comment-submit\"]')\n          .should('not.be.disabled')\n      })\n    })\n    ```", "```js\n    npm install --save-dev tailwindcss-spinner\n    # or \n    yarn add -D tailwindcss-spinner\n    ```", "```js\n    module.exports = {\n      theme: {\n        extend: {},\n        spinner: (theme) => ({\n          default: {\n            color: theme('colors.gray.400'), \n            size: theme('spacing.4'),\n            border: theme('borderWidth.2'),\n            speed: theme('transitionDuration.500'),\n          },\n        }),\n      },\n      variants: {\n        spinner: ['responsive'],\n      },\n      plugins: [require('tailwindcss-spinner')()],\n    }\n    ```", "```js\n    <script>\n    export default {\n      data() {\n        return {\n          // other properties\n          isSubmitting: false\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <script>\n    export default {\n      // other component properties\n      methods: {\n       submitNewComment() {\n          this.isSubmitting = true\n          setTimeout(() => {\n            this.isSubmitting = false\n          }, 2500)\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <template>\n      <div id=\"app\" class=\"p-10\">\n        <div class=\"flex flex-col\">\n          <!-- rest of template -->\n          <div v-if=\"showEditor\">\n            <!-- rest of editor -->\n            <button\n              data-test-id=\"new-comment-submit\"\n              class=\"flex mx-auto bg-blue-500 hover:bg-blue-700 text-\n                white font-bold py-2 px-4 rounded\"\n              :disabled=\"!newComment\"\n              :class=\"{ 'opacity-50 cursor-not-allowed' : !newComment \n                }\"\n              @click=\"submitNewComment()\"\n            >\n            Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    </template>\n    ```", "```js\n    <template>\n      <div id=\"app\" class=\"p-10\">\n        <div class=\"flex flex-col\">\n          <!-- rest of template -->\n          <div v-if=\"showEditor\">\n            <!-- rest of editor -->\n            <button\n              data-test-id=\"new-comment-submit\"\n              class=\"flex mx-auto bg-blue-500 hover:bg-blue-700             text-white font-bold py-2 px-4 rounded\"\n              :disabled=\"!newComment || isSubmitting\"\n              :class=\"{\n                'opacity-50 cursor-not-allowed' : !newComment,\n                spinner: isSubmitting\n              }\"\n              @click=\"submitNewComment()\"\n            >\n            Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    </template>\n    ```", "```js\n    it('the new comment editor should show a spinner on submit',   () => {\n        cy.visit('/')\n        // Get the editor to show\n        cy.get('[data-test-id=\"new-comment-button\"]').click()\n        cy.get('[data-test-id=\"new-comment-submit\"]').should       ('be.visible')\n        cy.get('[data-test-id=\"new-comment-editor\"]')\n          .type('Just saying...')\n        cy.get('[data-test-id=\"new-comment-submit\"]')\n          .should('not.be.disabled')\n          .click()\n          .should('have.class', 'spinner')\n          .should('be.disabled')\n        // eventually, the spinner should stop showing\n        cy.get('[data-test-id=\"new-comment-submit\"]')\n          .should('not.have.class', 'spinner')\n          .should('not.be.disabled')\n      })\n    ```", "```js\nnpm install --save-dev unfetch\n# or\nyarn add -D unfetch\n```", "```js\n<script>\nimport fetch from 'unfetch'\n// rest of component\n</script>\n```", "```js\n<script>\n// imports\nexport default {\n  data() {\n    return {\n      // other data properties\n      comments: []\n    }\n  },\n  mounted() {\n    fetch('https://jsonplaceholder.typicode.com/comments')\n      .then(res => res.json())\n      .then(comments => {\n        this.comments = comments\n      })\n  }\n  // other component properties\n}\n</script>\n```", "```js\n<template>\n  <div id=\"app\" class=\"p-10\">\n    <div class=\"flex flex-col\">\n      <!-- rest of template -->\n      <ul\n        v-if=\"comments.length > 0\"\n        class=\"flex flex-col items-center my-4 mx-auto           md:w-2/3 lg:w-1/2\"\n        data-test-id=\"comments-list\"\n      >\n        <li\n          class=\"flex flex-col px-6 py-4 rounded overflow-hidden             shadow-lg mb-6\"\n          v-for=\"(comment, index) in comments\"\n          :key=\"comment.id + index\"\n          data-test-id=\"comment-card\"\n        >\n          <p class=\"flex text-gray-700 text-lg mb-4\">            {{ comment.body }}</p>\n          <p class=\"flex text-gray-600 font-semibold text-sm\">\n            <a :href=\"'mailto:' + comment.email\">              {{ comment.email }}</a>\n          </p>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n```", "```js\ndescribe('Loading Existing Comments', () => {\n  it('should load & display comments', () => {\n    cy.visit('/')\n    cy.get('[data-test-id=\"comments-list\"]')\n      .should('be.visible')\n    cy.get('[data-test-id=\"comment-card\"]')\n      .should('have.length.gt', 0)\n  })\n})\n```", "```js\ndescribe('Loading Existing Comments', () => {\n  // other tests\n  it('should load and display comments correctly', () => {\n    cy.server()\n    cy.route('**/comments', [\n      {\n        body: 'Vue is getting great adoption',\n        email: 'evan@vuejs.org',\n        id: 100,\n      },\n      {\n        body: 'Just saying...',\n        email: 'evan@vuejs.org',\n        id: 10\n      },\n      {\n        body: 'The JS ecosystem is great',\n        email: 'evan@vuejs.org',\n        id: 1\n      }\n    ]).as('getComments')\n  })\n})\n```", "```js\ndescribe('Loading Existing Comments', () => {\n  // other tests\n  it('should load and display comments correctly', () => {\n    // test setup\n    cy.visit('/')\n    cy.wait('@getComments')\n  })\n})\n```", "```js\ndescribe('Loading Existing Comments', () => {\n  // other tests\n  it('should load and display comments correctly', () => {\n    // test setup\n    cy.get('[data-test-id=\"comments-list\"]')\n      .should('be.visible')\n    cy.get('[data-test-id=\"comment-card\"]')\n      .should('have.length', 3)\n  })\n})\n```", "```js\ndescribe('Loading Existing Comments', () => {\n  // other tests\n  it('should load and display comments correctly', () => {\n    // test setup\n    cy.contains('[data-test-id=\"comment-card\"]', 'Vue is       getting great adoption')\n      .contains('evan@vuejs.org')\n    cy.contains('[data-test-id=\"comment-card\"]', 'Just saying...')\n      .contains('evan@vuejs.org')\n    cy.contains('[data-test-id=\"comment-card\"]', 'The JS       ecosystem is great')\n      .contains('evan@vuejs.org')\n  })\n})\n```", "```js\n    <script>\n    // imports\n    export default {\n      // other component properties\n      methods: {\n        submitNewComment() {\n          this.isSubmitting = true\n          fetch('https://jsonplaceholder.typicode.com/comments', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              email: this.email,\n              body: this.newComment\n            })\n          })\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    <script>\n    // imports\n    export default {\n      // other component properties\n      methods: {\n        submitNewComment() {\n          this.isSubmitting = true\n          fetch(\n            // fetch params\n          ).then(res => res.json())\n          .then(data => {\n            this.comments = [\n              data,\n              ...this.comments,\n            ]\n            this.isSubmitting = false\n            this.newComment = ''\n            this.showEditor = false\n          }).catch(() => {\n            this.isSubmitting = false\n          })\n        }\n      }\n    }\n    </script>\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      beforeEach(() => {\n        cy.server()\n        // GET comments is not the concern of this test suite\n        cy.route('GET', '**/comments', [])\n      })\n      // tests\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // setup & tests\n      it('the new comment editor should show a spinner on submit',     () => {\n        cy.route({\n          method: 'POST',\n          url: '**/comments',\n          delay: 1500,\n          response: {}\n        }).as('newComment')\n        // rest of the test\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // setup & tests\n      it('the new comment editor should show a spinner on submit',     () => {\n        // test setup\n        // click the \"submit\" button\n        // check the spinner appears\n        cy.wait('@newComment')\n        // check that the spinner is gone\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // other tests\n      it('adding a new comment should close the editor', () => {\n        cy.route(\n          'POST',\n          '**/comments',\n          { body: 'Just saying...', email: 'hi@vuejs.org' }\n        ).as('newComment')\n        cy.visit('/')\n        // Get the editor to show\n        cy.get('[data-test-id=\"new-comment-button\"]').click()\n        cy.get('[data-test-id=\"new-comment-submit\"]').should       ('be.visible')\n        cy.get('[data-test-id=\"new-comment-editor\"]')\n          .type('Just saying...')\n        cy.get('[data-test-id=\"new-comment-submit\"]')\n          .should('not.be.disabled')\n          .click()\n        cy.wait('@newComment')\n        cy.get('[data-test-id=\"new-comment-editor\"]').should       ('not.be.visible')\n        cy.get('[data-test-id=\"new-comment-submit\"]').should       ('not.be.visible')\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // setup & other tests\n      it('submitting a new comment should POST to /comments and     adds response to top of comments list', () => {\n        cy.route('GET', '**/comments', [\n          {\n            email: 'evan@vuejs.org',\n            body: 'Existing comment'\n          }\n        ])\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // setup & other tests\n      it('submitting a new comment should POST to /comments and     adds response to top of comments list', () => {\n        // GET request stubbing\n        cy.route({\n          method: 'POST',\n          url: '**/comments',\n          response: {\n            email: 'evan@vuejs.org',\n            body: 'Just saying...',\n          },\n        }).as('newComment')\n        cy.visit('/')\n        cy.get('[data-test-id=\"comment-card\"]').should       ('have.length', 1)\n        cy.get('[data-test-id=\"new-comment-button\"]').click()\n        cy.get('[data-test-id=\"new-comment-editor\"]')\n          .type('Just saying...')\n        cy.get('[data-test-id=\"new-comment-submit\"]')\n          .should('not.be.disabled')\n          .click()\n        cy.wait('@newComment')\n      })\n    })\n    ```", "```js\n    describe('Adding a New Comment', () => {\n      // setup & other tests\n      it('submitting a new comment should POST to /comments and     adds response to top of comments list', () => {\n        // setup & wait for POST completion\n        cy.get('[data-test-id=\"comments-list\"]').should('be.visible')\n        cy.get('[data-test-id=\"comment-card\"]')\n          .should('have.length', 2)\n          .first()\n          .contains('[data-test-id=\"comment-card\"]', 'Just saying...')\n          .contains('evan@vuejs.org')\n      })\n    })\n    ```", "```js\nnpm install --save-dev cypress-plugin-snapshots\n# or \nyarn add -D cypress-plugin-snapshots\n```", "```js\nconst { initPlugin } = require('cypress-plugin-snapshots/plugin');\nmodule.exports = (on, config) => {\n  initPlugin(on, config);\n  // rest of plugin config, including return\n}\n```", "```js\nimport 'cypress-plugin-snapshots/commands'\n```", "```js\n{\n  \"//\": \"other config\",\n  \"env\": {\n    \"cypress-plugin-snapshots\": {\n      \"autoCleanUp\": false,\n      \"autopassNewSnapshots\": true,\n      \"diffLines\": 3,\n      \"imageConfig\": {\n        \"createDiffImage\": true,\n        \"resizeDevicePixelRatio\": true,\n        \"threshold\": 0.01,\n        \"thresholdType\": \"percent\"\n      },\n      \"screenshotConfig\": {\n        \"blackout\": [],\n        \"capture\": \"fullPage\",\n        \"clip\": null,\n        \"disableTimersAndAnimations\": true,\n        \"log\": false,\n        \"scale\": false,\n        \"timeout\": 30000\n      },\n      \"backgroundBlend\": \"difference\"\n    }\n  }\n}\n```", "```js\ndescribe('Commentator Pro', () => {\n  beforeEach(() => {\n    cy.server()\n    cy.route('GET', '**/comments', [\n      {\n        body: 'Just saying...',\n        email: 'evant@vuejs.org'\n      }\n    ]).as('getComments')\n  })\n  // tests\n})\n```", "```js\ndescribe('Commentator Pro', () => {\n  // setup & other tests\n  it('visual regression', () => {\n    cy.visit('/')\n    cy.get('[data-test-id=\"new-comment-button\"]')\n      .click()\n    cy.wait('@getComments')\n    cy.get('[data-test-id=\"new-comment-editor\"]')\n      .should('be.visible')\n    cy.get('#app').toMatchImageSnapshot({\n      threshold: 0.001,\n    })\n  })\n})\n```", "```js\n<template>\n  <div id=\"app\" class=\"p-10\">\n    <div class=\"flex flex-col\">\n      <!-- rest of template -->\n      <button\n        @click=\"showEditor = !showEditor\"\n        class=\"flex mx-auto bg-red-500 hover:bg-blue-700           text-white font-bold py-2 px-4 rounded\"\n        data-test-id=\"new-comment-button\"\n      >\n        Add a New Comment\n      </button>\n      <!-- rest of template -->\n    </div>\n  </div>\n</template>\n```"]