["```js\nERROR Error: Uncaught (in promise): HttpErrorResponse:\n{\"headers\":{\"normalizedNames\":{},\"lazyUpdate\":null},\"status\":401,\"statusText\":\"Unauthorized\",\"url\":\"http://localhost:3000/diary\",\"ok\":false,\"name\":\"HttpErrorResponse\",\"message\":\"Http failure response for http://localhost:3000/diary: 401 Unauthorized\",\"error\":{\"message\":\"Unauthorized\",\"statusCode\":401}}\n```", "```js\nexport class AuthService {\n  private httpClient = inject(HttpClient);\n  private url = 'http://localhost:3000/auth/login';\n  #token?: Token;\n  login(loginForm: Partial<LoginForm>): Observable<Token> {\n    return this.httpClient\n      .post<Token>(this.url, loginForm)\n      .pipe(tap((token) => (this.#token = token)));\n  }\n  get isLogged() {\n    return this.#token ? true : false;\n  }\n  logout() {\n    this.#token = undefined;\n  }\n  get token() {\n    return this.#token?.access_token;\n  }\n}\n```", "```js\n. . .\nprivate authService = inject(AuthService);\nprivate url = 'http://localhost:3000/diary';\ngetInitialList(): Observable<ExerciseSetListAPI> {\n  const headers = new HttpHeaders({\n    Authorization: `Bearer ${this.authService.token}`,\n  });\n  return this.httpClient.get<ExerciseSetListAPI>(this.url, { headers });\n}\n. . .\n```", "```js\nexport class ExerciseSetsService {\n  private httpClient = inject(HttpClient);\n  private url = 'http://localhost:3000/diary';\n  getInitialList(): Observable<ExerciseSetListAPI> {\n    return this.httpClient.get<ExerciseSetListAPI>(this.url);\n  }\n . . .\n}\n```", "```js\nng g interceptor login/auth\n```", "```js\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  private authService = inject(AuthService);\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    const token = this.authService.token;\n    if (request.url.includes('auth')) {\n      return next.handle(request);\n    }\n    if (token) {\n      const reqAuth = request.clone({\n        headers: request.headers.set(`Authorization`, `Bearer ${token}`),\n      });\n      return next.handle(reqAuth);\n    }\n    return next.handle(request);\n  }\n}\n```", "```js\n@NgModule({\n  declarations: [AppComponent, ErrorPageComponent],\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```", "```js\nng g interceptor shared/host\n```", "```js\n@Injectable()\nexport class HostInterceptor implements HttpInterceptor {\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    const url = 'http://localhost:3000';\n    const resource = request.url;\n    if (request.url.includes('http')) {\n      return next.handle(request);\n    }\n    const urlsReq = request.clone({\n      url: `${url}/${resource}`,\n    });\n    return next.handle(urlsReq);\n  }\n}\n```", "```js\n@NgModule({\n  declarations: [AppComponent, ErrorPageComponent],\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: HostInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```", "```js\nexport class ExerciseSetsService {\n  private httpClient = inject(HttpClient);\n  private url = 'diary';\n . . .\n}\n```", "```js\nexport class AuthService {\n  private httpClient = inject(HttpClient);\n  private url = 'auth/login';\n. . .\n}\n```", "```js\n ng generate component loading-overlay\n ng generate service loading-overlay/load\n ng generate interceptor loading-overlay/load\n```", "```js\n<div class=\"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75 z-50\">\n  <div class=\"text-white text-xl\">\n    Loading...\n  </div>\n</div>\n```", "```js\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadService {\n  #showLoader = false;\n  showLoader() {\n    this.#showLoader = true;\n  }\n  hideLoader() {\n    this.#showLoader = false;\n  }\n  get isLoading() {\n    return this.#showLoader;\n  }\n}\n```", "```js\n@Injectable()\nexport class LoadInterceptor implements HttpInterceptor {\n  private loadService = inject(LoadService);\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    if (request.headers.get('X-LOADING') === 'false') {\n      return next.handle(request);\n    }\n    this.loadService.showLoader();\n    return next\n      .handle(request)\n      .pipe(finalize(() => this.loadService.hideLoader()));\n  }\n}\n```", "```js\n@NgModule({\n  declarations: [AppComponent, ErrorPageComponent, LoadingOverlayComponent],\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: HostInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: LoadInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```", "```js\nexport class AppComponent {\n  loadService = inject(LoadService);\n  title = 'gym-diary';\n}\n```", "```js\n<app-loading-overlay *ngIf=\"loadService.isLoading\"></app-loading-overlay>\n<router-outlet></router-outlet>\n```", "```js\n npm install ngx-toastr\n```", "```js\n. . .\n  \"build\": {\n    . . .\n      \"assets\": [\n      \"src/favicon.ico\",\n      \"src/assets\"\n      ],\n      \"styles\": [\"src/styles.css\", \"node_modules/ngx-toastr/toastr.css\"],\n    . . .\n  },\n```", "```js\nimports: [\n  BrowserAnimationsModule,\n  AppRoutingModule,\n  HttpClientModule,\n  ToastrModule.forRoot(),\n],\n```", "```js\nng interceptor notification/notification\n```", "```js\n. . .\nimport { ToastrService } from 'ngx-toastr';\n@Injectable()\nexport class NotificationInterceptor implements HttpInterceptor {\n  private toaster = inject(ToastrService);\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse && event.status === 201) {\n          this.toaster.success('Item Created!');\n        }\n      })\n    );\n  }\n}\n```", "```js\n providers: [\n. . .\n   {\n     provide: HTTP_INTERCEPTORS,\n     useClass: NotificationInterceptor,\n     multi: true,\n   },\n. . .\n ]\n```", "```js\nng g interceptor telemetry/telemetry\n```", "```js\n@Injectable()\nexport class TelemetryInterceptor implements HttpInterceptor {\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    if (request.headers.get('X-TELEMETRY') !== 'true') {\n      return next.handle(request);\n    }\n    const started = Date.now();\n    return next.handle(request).pipe(\n      finalize(() => {\n        const elapsed = Date.now() - started;\n        const message = `${request.method} \"${request.urlWithParams}\" in ${elapsed} ms.`;\n        console.log(message);\n      })\n    );\n  }\n}\n```", "```js\n. . .\nproviders: [\n. . .\n   {\n     provide: HTTP_INTERCEPTORS,\n     useClass: TelemetryInterceptor,\n     multi: true,\n   },\n ],\n. . .\n```", "```js\n. . .\ngetInitialList(): Observable<ExerciseSetListAPI> {\n  const headers = new HttpHeaders().set('X-TELEMETRY', 'true');\n  return this.httpClient.get<ExerciseSetListAPI>(this.url, { headers });\n}\n. . .\n```", "```js\nGET \"http://localhost:3000/diary\" in 5 ms. telemetry.interceptor.ts:25:16\n```"]