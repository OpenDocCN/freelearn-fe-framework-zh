- en: Chapter 9. Faster jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 加速 jQuery
- en: 'jQuery''s detractors have two legitimate complaints against it. The first complaint
    is that jQuery creates hard-to-read, spaghetti code. In the previous chapter,
    we addressed this complaint by showing how to write code that is both easy to
    read and maintain. The second complaint is that jQuery creates slow code. This,
    too, is a legitimate complaint. The problem with jQuery or any other library is
    that if you don''t understand it, it is easy to choose the wrong way to do something.
    In this chapter, we will address the second complaint: slow jQuery code.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的批评者有两个合理的抱怨。第一个抱怨是 jQuery 会创建难以阅读的、纷乱的代码。在上一章中，我们通过展示如何编写既易于阅读又易于维护的代码来解决了这个问题。第二个抱怨是
    jQuery 会创建慢速的代码。这也是一个合理的抱怨。jQuery 或任何其他库的问题在于，如果你不理解它，很容易选择错误的方式来做某事。在本章中，我们将解决第二个抱怨：慢速的
    jQuery 代码。
- en: To be sure, jQuery itself is written in highly performance-tuned JavaScript;
    in fact, I highly recommend that you study its source code. The problem with performance
    and jQuery is usually one of not understanding how it works. It is this lack of
    understanding that causes programmers to write inefficient code. But thankfully,
    jQuery is not that hard to understand, and when we pair this understanding with
    performance measuring tools, we can easily improve the performance of our code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，jQuery 本身是用高度性能调优的 JavaScript 编写的；事实上，我强烈建议你研究它的源代码。jQuery 的性能问题通常在于不理解它的工作原理。正是这种缺乏理解导致程序员编写了低效的代码。但幸运的是，jQuery
    并不难理解，当我们将这种理解与性能测量工具结合起来时，我们可以轻松提高代码的性能。
- en: 'In this chapter, we will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn how to measure the speed of our JavaScript code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何测量我们的 JavaScript 代码的速度
- en: Measure the performance of different jQuery snippets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量不同 jQuery 代码片段的性能
- en: Learn when not to use jQuery and use plain vanilla JavaScript instead
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会何时不使用 jQuery，而是使用纯 JavaScript
- en: Writing performance tests
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写性能测试
- en: Before we worry about how to improve our app's performance, we should first
    learn how to measure it. Simply saying "the app feels sluggish" isn't enough.
    In order to improve an app's performance, you must be able to measure it before
    you can improve it. Luckily for us, there have been many improvements in our browsers
    in the past few years. One such improvement is the User Timing API. It isn't officially
    part of all browsers since it is only a recommendation of the W3C, but it is supported
    by modern versions of all of the major browsers except Safari. We won't deploy
    our measuring code with our app, so the lack of Safari support, while regretful,
    isn't a deal killer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们担心如何提高应用程序的性能之前，我们应该先学习如何衡量它。简单地说“应用程序感觉迟缓”是不够的。要想提高应用程序的性能，必须在改进之前能够对其进行测量。幸运的是，过去几年我们的浏览器已经有了许多改进。其中一项改进是用户计时
    API。虽然它只是 W3C 的建议，不是所有浏览器的官方组成部分，但现代版本的所有主要浏览器都支持它，除了 Safari。我们不会将测量代码与应用程序一起部署，因此缺少
    Safari 支持虽然令人遗憾，但并不致命。
- en: I know some are wondering why we need a new way to measure time. We've had `Date.now()`
    since the introduction of ECMAScript 5.1 in 2009 and `new Date().getTime()` before
    that. The problem is one of resolution; at best, `Date.now()` can measure with
    an accuracy of 1 millisecond, which simply isn't good enough. The computer can
    execute a lot of JavaScript instructions in 1 millisecond.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道有些人想知道为什么我们需要一种新的时间测量方式。自从 2009 年 ECMAScript 5.1 引入以来，我们就有了 `Date.now()`，之前是
    `new Date().getTime()`。问题在于分辨率；最好的情况下，`Date.now()` 的准确度只有 1 毫秒，这显然是不够好的。计算机可以在
    1 毫秒内执行大量的 JavaScript 指令。
- en: 'The User Timing API is easy to use. We aren''t going to explain all of its
    capabilities. We will only show just enough to help us write our performance-measuring
    code. The first function we need to get to know is `performance.now()`. It is
    similar to `Date.now()` in that it returns the current system time, but it differs
    in two important ways: first, it returns a floating point value, not an integer
    value like `Date.now()`. The floating-point value represents a precision of 1
    microsecond or one-thousandths of a millisecond. Second, `performance.now()` is
    monotonically increasing, which is a fancy way of saying that it always increases.
    This means that whenever it is called consecutively, the value of the second call
    is always greater than the first. This is something that is not guaranteed with
    `Date.now()`. It might seem strange, but `Date.now()` is not monotonically increasing.
    `Date.now()` is based on time, and most systems have a process that keeps time
    in sync by adjusting `Date.now()` by a few milliseconds every 15 or 20 minutes.
    Because the resolution of `Date.now()` is a millisecond at best, anything that
    happens in less time than it gets rounded down to 0\. A simple example will help
    explain the problem better:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定时API易于使用。我们不打算解释其所有功能。我们只会展示足够的内容来帮助我们编写性能测量代码。我们需要了解的第一个函数是`performance.now()`。它类似于`Date.now()`，因为它返回当前系统时间，但它在两个重要方面有所不同：首先，它返回一个浮点值，而不是像`Date.now()`一样返回整数值。浮点值表示1微秒或千分之一毫秒的精度。其次，`performance.now()`是单调递增的，这是一个花哨的说法，意味着它总是增加的。这意味着每当连续调用时，第二次调用的值总是大于第一次调用的值。这是`Date.now()`无法保证的。这可能看起来很奇怪，但`Date.now()`不是单调递增的。`Date.now()`基于时间，大多数系统都有一个进程，通过每15或20分钟调整`Date.now()`几毫秒来保持时间同步。因为`Date.now()`的分辨率最好是毫秒级，所以在比它更短的时间内发生的任何事情都会被舍入为0。一个简单的例子会更好地解释这个问题：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code is pretty straightforward. We make two consecutive calls
    to both `Date.now()` and `performance.now()`, which then display the elapsed time.
    In most browsers, the elapsed time of `Date.now()` will be zero, which we instinctively
    know can''t be true. It doesn''t matter how fast your computer is; it will always
    take some amount of time to execute every instruction. The problem is the resolution:
    `Date.now()` operates with a millisecond resolution and JavaScript instructions
    take microseconds to execute.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码非常简单。我们连续调用了`Date.now()`和`performance.now()`，然后显示经过的时间。在大多数浏览器中，`Date.now()`的经过时间将为零，我们本能地知道这不可能是真的。无论你的计算机有多快，执行每条指令总是需要一定的时间。问题在于分辨率：`Date.now()`以毫秒分辨率运行，而JavaScript指令需要微秒级别的执行时间。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 1 millisecond equals 1,000 microseconds.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 1毫秒等于1,000微秒。
- en: Luckily, `performance.now()` has a microsecond resolution; it always shows a
    difference between any two calls. When called consecutively, it will usually be
    at the submillisecond level.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，`performance.now()`具有微秒分辨率；它总是显示任意两次调用之间的差异。连续调用时，它通常处于次毫秒级别。
- en: '`Performance.now()` is a very useful method, but it is not the only tool in
    the performance toolbox. The creators of the User Timing API realized that most
    of us were going to measure our app''s performance, so they wrote methods to make
    it easier. First, there is the `performance.mark()`method; when passed a string,
    it will internally store the value of `performance.now()` using the passed string
    as a key:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Performance.now()`是一个非常有用的方法，但它并不是性能工具箱中的唯一工具。用户定时API的创建者意识到我们大多数人都会测量我们应用的性能，所以他们编写了方法来简化操作。首先，有`performance.mark()`方法；当传递一个字符串时，它将使用传递的字符串作为键内部存储`performance.now()`的值：'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code stores a performance mark with the name `startTask1`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码存储了一个名称为`startTask1`的性能标记。
- en: 'Next, there is `performance.measure()`. It will create a named timing measurement.
    It has three strings as parameters. The first string is the name of the measurement.
    The second string is the name of the starting performance mark, and the final
    string is the name of the ending performance mark:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`performance.measure()`。它将创建一个命名的时间测量。它有三个字符串作为参数。第一个字符串是测量的名称。第二个字符串是起始性能标记的名称，最后一个字符串是结束性能标记的名称：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The User Timing API will store the measurement internally with the name as
    a key. In order to see our performance measures, we simply need to ask for them.
    The simplest way is to ask for all of them and then loop through them to display
    each one. The following code demonstrates the technique:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定时 API 将使用名称作为键在内部存储测量值。为了查看我们的性能测量，我们只需要请求它们。最简单的方法是请求所有测量值，然后循环显示每个测量值。以下代码演示了这种技术：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The preceding code displays all of its results to the browser console; nothing
    is displayed to the document.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将所有结果显示在浏览器控制台上；不会显示到文档中。
- en: The action begins with the code hooking the document-ready event, which calls
    the `init()` function. A call to `performance.mark()` is made to create a mark
    for `mark1`. We then call `delay()` with a counter value of 1,000 to simulate
    the performance of a useful task and then follow with another call to `performance.mark()`,
    which creates another performance marker, `mark2`. Again, we call `delay()`, this
    time with a smaller counter of 10 and create another performance marker, `mark3`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 操作始于代码挂钩文档就绪事件，调用 `init()` 函数。调用 `performance.mark()` 创建了一个 `mark1` 标记。然后我们调用
    `delay()`，计数器值为 1,000，模拟一个有用任务的性能，然后再次调用 `performance.mark()`，创建另一个性能标记 `mark2`。同样，我们调用
    `delay()`，这次计数器为 10，创建另一个性能标记 `mark3`。
- en: 'We now have three performance markers. In order to determine how long each
    simulated task took, we will need to measure the markers using the `performance.measure()`
    method. It takes three parameters: the name of the measurement, the name of the
    initial marker, and the name of the final marker. Each measurement will be recorded
    and stored internally in the performance object. In order to view the measurements,
    we call the `showMeasurements()` methods.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了三个性能标记。为了确定每个模拟任务花费了多长时间，我们需要使用 `performance.measure()` 方法来测量标记。它需要三个参数：测量名称、初始标记名称和最终标记名称。每个测量将被记录并存储在性能对象的内部。为了查看测量值，我们调用
    `showMeasurements()` 方法。
- en: The `showMeasurements()` method begins by calling `performance.getEntriesByType('measure')`.
    This method returns an array holding all of the performance measures recorded
    by the performance object. Each item in the array is an object that contains the
    performance measurement's name, start time, and duration. It also contains its
    performance type, but we aren't displaying it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`showMeasurements()` 方法首先调用 `performance.getEntriesByType(''measure'')`。这个方法返回一个数组，其中包含由
    performance 对象记录的所有性能测量。数组中的每个项目都是一个包含性能测量名称、开始时间和持续时间的对象。它还包含其性能类型，但我们不显示它。'
- en: The last thing we do is make a call to `performance.clearMeasures()`. Keep in
    mind that the performance object stores all of the marks and measures internally.
    If you don't clear them occasionally, your lists of measure might become ungainly
    long. When `performance.clearMeasures()` is called with no parameters, it clears
    all of the measures it has saved. It can also be called with the name of a measure
    to clear. You can just as easily clear marks that have been saved by calling `performance.clearMarks()`.
    Calling it with no parameters clears all the saved marks, and calling it with
    the name of a mark clears the mark.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后要做的事情是调用 `performance.clearMeasures()`。请记住，性能对象在内部存储所有的标记和测量值。如果偶尔不清除它们，你的测量列表可能会变得非常长。当调用
    `performance.clearMeasures()` 时没有参数，它会清除所有保存的测量值。它还可以用测量名称调用以清除。你可以通过调用 `performance.clearMarks()`
    来清除已保存的标记。不带参数调用会清除所有保存的标记，带有标记名称的调用会清除标记。
- en: Measuring jQuery
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测量 jQuery
- en: 'Now that we have a way to measure the JavaScript performance, let''s measure
    some jQuery:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一种测量 JavaScript 性能的方法，让我们测量一些 jQuery：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There''s nothing tricky in the preceding code, really. It uses Bootstrap and
    jQuery to create a navigation bar. The `nav` bar isn''t fully functional; it just
    makes our jQuery code follow some markup to parse:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，实际上没有什么复杂的。它使用 Bootstrap 和 jQuery 创建一个导航栏。`nav` 栏并不完全功能；它只是让我们的 jQuery
    代码遵循一些标记来解析：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding markup is the main content. Again, we are just giving ourselves
    some meaty HTML to parse through:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的标记是主要内容。同样，我们只是给自己一些丰富的 HTML 来解析：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code measures the speed of two different jQuery snippets. Both
    snippets return a jQuery object that points to the same element: the sole anchor
    tag with a class of `find-me`. There are faster ways to find the element, and
    we will get to these ways later, but right now, we wish to address a problem with
    our measuring technique.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码测量了两种不同的 jQuery 代码片段的速度。这两个片段返回一个指向相同元素的 jQuery 对象：具有类名 `find-me` 的唯一锚点标签。有更快的方法来查找元素，我们稍后会介绍这些方法，但现在，我们希望解决我们测量技术中的一个问题。
- en: When the code is run, it displays two measurements in the console. The first
    measurement is about the time it took to find the jQuery object using selectors.
    The second measurement is about using an `id` selector combined with the `find()`
    method. The second method is more optimized and should be faster.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码运行时，它在控制台中显示两个测量值。第一个测量值是使用选择器查找 jQuery 对象所花费的时间。第二个测量值是使用 `id` 选择器结合 `find()`
    方法的时间。第二种方法更加优化，应该更快。
- en: The problem is most noticeable when you run the test code repeatedly. The timings
    of each run will vary, but they can vary so much that sometimes, the code that
    should be faster is slower. Run the timing code again, and suddenly it will become
    faster. What's going on? Well, although JavaScript is single threaded and we can't
    interrupt our code, the browser is not single threaded, nor is the operating system.
    Sometimes, something else on another thread can occur while our test code is running,
    causing it to appear to be slower. What can we do to fix this?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你重复运行测试代码时，问题最明显。每次运行的时间都会有所不同，但它们的变化可以很大，有时，本应更快的代码却更慢。再次运行计时代码，突然间它就变快了。怎么回事？嗯，虽然
    JavaScript 是单线程的，我们无法中断我们的代码，但浏览器不是单线程的，操作系统也不是。有时，在我们的测试代码运行时，另一个线程上可能会发生其他事情，导致它看起来变慢。我们能做些什么来解决这个问题呢？
- en: 'The answer is to use the law of averages and execute our code enough times
    to even out the occasional hiccups. With that in mind, here is an improved version
    of our timing code. The markup is the same as the previous version; only the code
    within the `<script>` tags has changed:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是利用平均法则，执行足够多次代码以消除偶尔的小问题。考虑到这一点，这是我们计时代码的改进版本。标记与之前版本相同；只有`<script>`标签中的代码发生了变化：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the new version of the code, the only thing we change is how we call our
    jQuery code. Instead of calling it just once, we pass it to a function that calls
    it thousands of times. The actual number of times the code should be called is
    up to you. I like to call it somewhere between 10,000 and 100,000 times.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的新版本中，我们唯一改变的是调用 jQuery 代码的方式。我们不再只调用一次，而是将其传递给一个调用它数千次的函数。代码应该被调用的实际次数取决于你。我喜欢在
    10,000 到 100,000 次之间调用它。
- en: Now we have a pretty straightforward and precise way of measuring the speed
    of our code. Keep in mind that we shouldn't deploy our performance-measuring code
    with our production website. Let's take an in-depth look at jQuery selectors so
    that we can understand how using the right one can make a dramatic improvement
    in our code's performance.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个相当直接和精确的方法来测量我们代码的速度。请记住，我们不应该将性能测量代码与我们的生产网站一起部署。让我们深入了解 jQuery 选择器，以便我们可以理解如何使用正确的选择器可以显著提高我们代码的性能。
- en: jQuery selectors
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 选择器
- en: The first thing to understand about selectors is that they are a call to the
    browser's Document Object Model, or DOM, and that all interactions with the DOM
    are slow. Even developers who know the DOM is slow sometimes don't understand
    that jQuery uses the DOM like all of the code, which renders the markup to the
    browser page. Selectors are at the heart of jQuery, and small differences in selectors
    can make big differences in the speed of the code. It is important for us to understand
    how to write selectors that are fast and efficient.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于选择器的第一件事情是，它们是对浏览器的文档对象模型（DOM）的调用，而所有与 DOM 的交互都很慢。即使是了解 DOM 很慢的开发人员有时也不明白
    jQuery 像所有代码一样使用 DOM，它将标记呈现到浏览器页面。选择器是 jQuery 的核心，选择器中的小差异可能导致代码速度的巨大差异。重要的是我们要了解如何编写快速有效的选择器。
- en: Using IDs over other selectors
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ID 而不是其他选择器
- en: The fastest selectors are those that are based on the fastest underlying DOM
    code. A fast DOM-based element finding method is `document.getElementById()`,
    so it follows that the fastest jQuery selector is the one based on the `id` selector.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最快的选择器是基于最快的底层 DOM 代码的选择器。一个快速的基于 DOM 的元素查找方法是 `document.getElementById()`，所以最快的
    jQuery 选择器是基于 `id` 选择器的那个。
- en: This doesn't mean that you should put IDs on every element in your markup. You
    should continue to use IDs on elements when it make sense to do so and use `id`
    selectors to find them or elements close to them quickly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着你应该在你的标记上给每个元素都标上ID。当有必要时，你应该继续在元素上使用ID，并使用`id`选择器快速找到它们或靠近它们的元素。
- en: Caching your selectors
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存你的选择器
- en: Every call to jQuery to evaluate a selector is a significant investment of processing
    time. jQuery must first parse the selector, call DOM methods to execute the selector,
    and finally, convert the results into jQuery objects. Remember that the DOM is
    slow. Luckily, you can cache your selector. Your code will still get hit with
    a time penalty the first time it is called, but subsequent calls are as fast as
    they can be.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对jQuery进行选择器评估的每次调用都是一个很大的处理时间投资。jQuery必须首先解析选择器，调用DOM方法执行选择器，最后将结果转换为jQuery对象。记住，DOM很慢。幸运的是，你可以缓存你的选择器。虽然你的代码第一次被调用时会有一个时间惩罚，但随后的调用速度会像他们能达到的那样快。
- en: This method works as long as you aren't performing heavy DOM manipulation. By
    heavy, I mean adding or removing elements from the page or other things that make
    the cached selector invalid.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你不进行大量的DOM操作，这种方法就可以。通过大量，我是指在页面中添加或删除元素或使缓存选择器失效的其他操作。
- en: Optimizing selectors
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器优化
- en: All selectors are not created equal. Choosing the right one can make a big difference
    in your application's performance, but choosing the right selector can be tricky.
    The following are a few tips to help you create the right selector. And remember,
    when in doubt about performance, measure it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的选择器并不都是平等的。选择正确的选择器可以对你的应用程序性能产生很大的影响，但选择正确的选择器可能会有些棘手。以下是一些提示，可以帮助你创建正确的选择器。请记住，如果对性能感到不确定，请进行测量。
- en: Right to left
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从右到左
- en: 'Deep in the core of jQuery is the Sizzle selector engine. Sizzle reads from
    right to left. So, your most specific selector should be on the right side. Imagine
    that we are trying to find a `<p>` tag with a class of `bubble`. How could we
    optimize the selector? Let''s look at an example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery的核心深处是Sizzle选择器引擎。Sizzle从右往左读取。所以，你最具体的选择器应该在右边。想象一下，我们正在尝试找到一个具有`bubble`类的`<p>`标签。我们如何优化选择器呢？让我们看一个例子：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our first attempt looks pretty good. But we know that we should have the most
    specific selector in the rightmost position, so we change things up a bit in our
    second example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个尝试看起来很好。但我们知道最具体的选择器应该在最右边，所以我们在第二个例子中稍微改变了一下：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In most browsers, this will be slightly faster than the first example. In previous
    versions of jQuery, the difference was greater. Don't worry, though; we still
    have more optimizations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数浏览器中，这样做比第一个例子稍微快一些。在以前的jQuery版本中，差异更大。但不要担心；我们还有更多的优化。
- en: Reducing overly specific selectors
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少过于具体的选择器
- en: As developers, we tend to overdo things sometimes. This is especially bad when
    defining selectors. If you add more selectors than required in order to find the
    element you are looking for, you make jQuery do more work than required. Try to
    reduce your selectors to only what is required.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，有时候我们会过度做一些事情。尤其在定义选择器时。如果你添加比所需更多的选择器来找到你要找的元素，你会让jQuery做更多的工作。尽量减少你的选择器，只留下必需的部分。
- en: 'Let''s look at an example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This selector adds more specificity than is needed, making it slower than the
    previous example. Your selectors should be specific enough to find the desired
    elements, and no more.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器比以前的例子慢了。你的选择器应该足够具体，可以找到所需的元素，但不要过于具体。
- en: Narrowing your search
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩小你的搜索范围
- en: By default, jQuery will search the entire document, looking for matches to your
    query. Help it out by narrowing your search.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，jQuery将搜索整个文档，寻找与你的查询匹配的内容。通过缩小你的搜索范围，来帮助它进行搜索。
- en: 'What if we want to be faster still without polluting our markup with excessive
    IDs? We take advantage of the nearest parent tag that has an ID to the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更快，而不在标记上加入过多的ID会怎么样？我们可以利用最近具有ID的父标签来执行如下操作：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Other jQuery optimizations
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他jQuery优化
- en: The optimizations to come can be better termed rules of thumb. They will make
    your code faster but not drastically so. And luckily, they are easy to follow.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将要来的优化可能最好称为经验法则。它们会让你的代码变得更快，但不会有很大的变化。而且幸运的是，它们很容易遵循。
- en: Updating to the latest version
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新到最新版本
- en: Updating to the latest version is probably one of the easiest things you can
    do in order to speed up your jQuery code. You should always exercise care when
    upgrading to a new version of jQuery, but the upgrades usually bring improved
    speed, in addition to new features. Now that you know how to measure the performance
    of your code, you can measure it before and after changing versions to see whether
    things improve.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 更新到最新版本可能是加快 jQuery 代码速度最简单的事情之一。在升级到新版本 jQuery 时，应该始终谨慎，但升级通常会带来提高的速度，以及新功能。现在您知道如何测量代码的性能，您可以在更改版本之前和之后进行测量，看看是否有改进。
- en: Don't expect huge changes in performance and read the release notes to see whether
    there are any breaking changes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不要期望性能有巨大变化，并阅读发布说明，看看是否有任何破坏性的改变。
- en: Using the correct version of jQuery
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用正确的版本 jQuery
- en: 'Currently, there are two branches of jQuery: the 1.x branch and the 2.x branch.
    You should only use the 1.x branch if you need to support an old version of Internet
    Explorer. If your website runs only on modern browsers and Internet Explorer 9
    is the oldest version you need to support, you should switch to the 2.x branch
    of jQuery.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，jQuery 有两个分支：1.x 分支和 2.x 分支。如果您需要支持旧版本的 Internet Explorer，应该只使用 1.x 分支。如果您的网站只在现代浏览器上运行，并且
    Internet Explorer 9 是您需要支持的最旧版本，那么您应该切换到 2.x 分支的 jQuery。
- en: The 2.x branch of jQuery eliminates support for Internet Explorer 6, 7, and
    8 and all of the headaches that came with it. This makes the code execute a bit
    faster and also makes the library smaller so that it downloads quicker.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的 2.x 分支不再支持 Internet Explorer 6、7 和 8，以及与此相关的所有麻烦。这使得代码执行更快，并且使库文件更小，下载速度更快。
- en: Don't use deprecated methods
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要使用已弃用的方法
- en: Deprecated methods are those methods that the jQuery development team has decided
    to remove in a future version. It can take years for the method to be actually
    removed. You should remove such methods from your code as quickly as possible.
    The reason for the method's deprecation may not be performance, but you can be
    sure that the jQuery team isn't going to waste time optimizing a method marked
    as deprecated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 废弃的方法是 jQuery 开发团队决定在将来版本中删除的方法。该方法实际上可能需要多年才会被移除。您应该尽快将这些方法从代码中删除。方法被弃用的原因可能不是性能问题，但您可以确信
    jQuery 团队不会浪费时间优化被标记为弃用的方法。
- en: Using preventDefault() when appropriate
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在适当的时候使用 preventDefault()
- en: The fastest code is the code that doesn't run. The default behavior of an event,
    once it is handled, is for it to be passed to the parent element and then to its
    parent again and again, until the root document is reached. All of this bubbling
    takes time and could be wasted time if you've already done all the required processing.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最快的代码是不运行的代码。一旦事件被处理，其默认行为是向父元素传递，然后再传递给其父元素，一直到达根文档为止。所有这些冒泡都需要时间，如果您已经完成了所有必需的处理，这段时间可能就白白浪费了。
- en: Luckily, it is easy to prevent this default behavior by calling `event.preventDefault()`
    from within your event handler. This stops unnecessary code from executing and
    speeds ups your app.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，通过在事件处理程序中调用 `event.preventDefault()`，很容易阻止这种默认行为。这样可以阻止不必要的代码执行，并加快您的应用程序速度。
- en: Never modify the DOM in a loop
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 永远不要在循环中修改 DOM
- en: 'Always remember that accessing the DOM is a slow process. Access it in a loop
    and you will compound the problem. It is better to copy the section of the DOM
    into JavaScript, modify it, and then copy it back. In this example, we are going
    to modify a DOM element and then compare it with nearly identical code that modifies
    an element that is not in the DOM:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 永远记住，访问 DOM 是一个缓慢的过程。在循环中进行访问会加剧问题。最好将 DOM 的部分复制到 JavaScript 中，进行修改，然后再将其复制回去。在此示例中，我们将修改一个
    DOM 元素，然后与几乎完全相同的修改不在 DOM 中的元素进行比较：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, all of the action is in the `init()` method. We are modifying
    the value of an `<input>` tag. In the first unoptimized pass, we modify the DOM
    in the loop. We do some smart things, such as caching the selector into a variable
    before the loop begins. This code seems pretty fast at first.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，所有操作都在 `init()` 方法中。我们正在修改一个 `<input>` 标签的值。在第一个未经优化的处理过程中，我们在循环中修改了
    DOM。我们做了一些聪明的事情，例如在循环开始之前将选择器缓存到变量中。这段代码一开始看起来速度还挺快的。
- en: In the second pass, we detach the elements from the DOM before we begin manipulating
    them. We actually have to write more code in order to do this. First, we cache
    the form into a variable named `myForm`. Then, we cache its parent into a variable
    as well. Next, we detach `myForm` from the DOM using jQuery's `detach()` method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二次遍历时，在开始操纵元素之前，我们会将元素从 DOM 分离。实际上，我们必须编写更多的代码来做到这一点。首先，我们将表单缓存到名为 `myForm`
    的变量中。然后，我们也将其父级缓存到一个变量中。接下来，我们使用 jQuery 的 `detach()` 方法将 `myForm` 从 DOM 中分离。
- en: The code in the loop is identical to that in our first version. Once we exit
    the loop, we append `myForm` to its parent in order to restore the DOM. While
    there is more JavaScript code in the second version, it is about 5 times faster
    than the first. This is the kind of performance boost that is always worth pursing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 循环中的代码与我们的第一个版本相同。一旦退出循环，我们将 `myForm` 添加到其父级以恢复 DOM。虽然第二个版本中有更多的 JavaScript
    代码，但比第一个版本快了约 5 倍。这就是一直值得追求的性能提升。
- en: jQuery isn't always the answer
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery 并不总是答案
- en: jQuery is the most popular JavaScript open source library ever. It is used in
    more than 60% of the top 100,000 websites. But that doesn't mean that you should
    always use jQuery; plain JavaScript is sometimes a better choice.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 是有史以来最流行的 JavaScript 开源库。它在前 100,000 个网站中使用率超过了 60%。但这并不意味着你总是应该使用 jQuery；有时纯
    JavaScript 是更好的选择。
- en: Using document.getElementById
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 document.getElementById
- en: 'When you want to find a DOM element that has an ID, it is faster to call the
    `document.getElementById()` DOM method than use jQuery. Why? Because that is exactly
    what jQuery will do after it interprets your selector. If you don''t need a jQuery
    object and only want the element, save yourself a few precious microseconds and
    make the DOM call yourself. Calling it is easy:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当你要查找具有 ID 的 DOM 元素时，调用 `document.getElementById()` DOM 方法比使用 jQuery 更快。为什么？因为这正是
    jQuery 在解释你的选择器后会做的事情。如果你不需要一个 jQuery 对象，只想要元素，那就节省几微秒的时间，自己调用 DOM。
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The method accepts one parameter: the name of the `id` element. Note that it
    doesn''t have a hashtag in front of the name. This isn''t jQuery. If the element
    is found, a reference to an element object is returned. If it is not found, `null`
    is returned. Again, remember that the returned value is not a jQuery object, so
    it won''t have jQuery methods attached to it.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受一个参数：`id` 元素的名称。请注意，名称前面没有井号。这不是 jQuery。如果找到元素，则返回对元素对象的引用。如果找不到，则返回 `null`。再次提醒，返回的值不是
    jQuery 对象，因此不会附加 jQuery 方法。
- en: There are other native browser methods available and, in general, they are faster
    than the code written in JavaScript whether it is jQuery, your own code, or code
    in some other library. Two other methods are `document.getElementsByTag()` and
    `document.getElementsByClassName()`. They return an `HTMLCollection` object, which
    is any array-like collection of elements. If no match is found, the collection
    is empty and has a length of zero.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可用的原生浏览器方法，总的来说，它们比用 JavaScript 编写的代码更快，无论是 jQuery、你自己的代码，还是其他库中的代码。另外两种方法是
    `document.getElementsByTag()` 和 `document.getElementsByClassName()`。它们返回一个 `HTMLCollection`
    对象，这是任何类似数组的元素集合。如果没有匹配，集合为空，长度为零。
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Older browsers, such as Internet Explorer 8, don't have `document.getElementsByClassName()`.
    So, if you need to support older browsers, you should check whether this method
    exists before you use it. jQuery is smart enough to use the native browser's version
    if it is present or its own code if it is missing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版浏览器，如 Internet Explorer 8，没有 `document.getElementsByClassName()`。因此，如果你需要支持旧版浏览器，在使用它之前应该检查此方法是否存在。如果存在浏览器的原生版本，jQuery
    足够智能以使用它，如果缺少则使用自己的代码。
- en: Using CSS
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS
- en: jQuery and JavaScript are useful for many things, but they shouldn't be used
    for everything. Things such as animating, rotating, transforming, and translating
    DOM elements can often be done smoother and faster with CSS. jQuery has some methods
    that use CSS. However, by writing your own CSS, you can obtain results customized
    to your needs. CSS can take advantage of the host system's **graphics processor
    unit** (**GPU**) to produce results that no amount of jQuery/JavaScript can reproduce.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 和 JavaScript 对许多事情是有用的，但并不应该被用于一切。诸如对元素进行动画、旋转、变换和平移等操作通常可以更顺畅更快捷地使用
    CSS。jQuery 有一些使用 CSS 的方法。然而，通过编写自己的 CSS，你可以获得符合自己需求的结果。CSS 可以利用主机系统的**图形处理单元**（**GPU**）来生成无法用任何
    jQuery/JavaScript 复制的结果。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started this chapter by learning how to measure our code's performance. We
    then put that knowledge to use by measuring the speed of different selectors as
    we learned how to write better and faster selectors. We also learned some jQuery
    best practices that improve our code's speed. We ended the chapter by realizing
    that jQuery isn't always the answer. Sometimes, better code comes from using plain
    old JavaScript or DOM methods.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从学习如何测量代码性能开始这一章节。然后，我们将这些知识应用到实践中，测量不同选择器的速度，同时学习如何编写更好、更快的选择器。我们还学习了一些改进代码速度的jQuery最佳实践。最后，我们意识到jQuery并不总是答案。有时，更好的代码来自于使用普通的JavaScript或DOM方法。
- en: In the final chapter, we will introduce jQuery plugins. Plugins are bits of
    amazing functionality all wrapped up in easy-to-use packages. Functions allow
    us to easily add graphical widgets, such as calendars, sliders, and photo carousels,
    to our apps. We will learn how to use plugins, where to find them, and finally,
    how to write our own plugin.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将介绍jQuery插件。插件是一些令人惊叹的功能，全部包装在易于使用的包中。函数使我们能够轻松地将图形小部件，例如日历、滑块和图片轮播，添加到我们的应用中。我们将学习如何使用插件，如何找到它们，最后，如何编写我们自己的插件。
