["```js\n$ [[you are in the server directory of your project]]\n$ touch fetchServerSide.js  \n\n```", "```js\nexport default () => { \n    return { \n'article':{ \n      '0': { \n        'articleTitle': 'SERVER-SIDE Lorem ipsum - article one', \n        'articleContent':'SERVER-SIDE Here goes the content of the \n         article' \n      }, \n\n      '1': { \n        'articleTitle':'SERVER-SIDE Lorem ipsum - article two', \n        'articleContent':'SERVER-SIDE Sky is the limit, the \n         content goes here.' \n      } \n    } \n  } \n} \n\n```", "```js\napp.use(cors()); \napp.use(bodyParser.json({extended: false})) \n\n```", "```js\nimport React from 'react'; \nimport {createStore} from 'redux'; \nimport {Provider} from 'react-redux'; \nimport {renderToStaticMarkup} from 'react-dom/server'; \nimport ReactRouter from 'react-router'; \nimport {RoutingContext, match} from 'react-router'; \nimport * as hist  from 'history'; \nimport rootReducer from '../src/reducers'; \nimport reactRoutes from '../src/routes'; \nimport fetchServerSide from './fetchServerSide'; \n\n```", "```js\nimport http from 'http'; \nimport express from 'express'; \nimport cors from 'cors'; \nimport bodyParser from 'body-parser'; \nimport falcor from 'falcor'; \nimport falcorExpress from 'falcor-express'; \nimport falcorRouter from 'falcor-router'; \nimport routes from './routes.js'; \nimport React from 'react' \nimport { createStore } from 'redux' \nimport { Provider } from 'react-redux' \nimport { renderToStaticMarkup } from 'react-dom/server' \nimport ReactRouter from 'react-router'; \nimport { RoutingContext, match } from 'react-router'; \nimport * as hist  from 'history'; \nimport rootReducer from '../src/reducers'; \nimport reactRoutes from '../src/routes'; \nimport fetchServerSide from './fetchServerSide'; \n\n```", "```js\n// this already exists in your codebase \napp.use('/model.json', falcorExpress.dataSourceRoute((req, res) => { \n  return new falcorRouter(routes); // this already exists in your \n   codebase \n})); \n\n```", "```js\nlet handleServerSideRender = (req, res) => \n{ \n  return; \n}; \n\nlet renderFullHtml = (html, initialState) => \n{ \n  return; \n}; \napp.use(handleServerSideRender); \n\n```", "```js\napp.use(express.static('dist')); \n\n```", "```js\napp.use('/static', express.static('dist')); \n\n```", "```js\nlet renderFullHtml = (html, initialState) => \n{ \n  return; // this is already in your codebase \n}; \n\n```", "```js\nlet renderFullPage = (html, initialState) => \n{ \n  return &grave; \n<!doctype html> \n<html> \n<head> \n<title>Publishing App Server Side Rendering</title> \n</head> \n<body> \n<h1>Server side publishing app</h1> \n<div id=\"publishingAppRoot\">${html}</div> \n<script> \nwindow.__INITIAL_STATE__ = ${JSON.stringify(initialState)} \n</script> \n<script src=\"img/app.js\"></script> \n</body> \n</html> \n    &grave; \n}; \n\n```", "```js\n${html}  \n\n```", "```js\nlet handleServerSideRender = (req, res) => \n{ \n  return; \n}; \n\n```", "```js\nlet handleServerSideRender = (req, res, next) => { \n  try { \n    let initMOCKstore = fetchServerSide(); // mocked for now \n\n    // Create a new Redux store instance \n    const store = createStore(rootReducer, initMOCKstore); \n    const location = hist.createLocation(req.path); \n\n    match({ \n      routes: reactRoutes, \n      location: location, \n    }, (err, redirectLocation, renderProps) => { \n      if (redirectLocation) { \n        res.redirect(301, redirectLocation.pathname + \n        redirectLocation.search); \n      } else if (err) { \n        console.log(err); \n        next(err); \n        // res.send(500, error.message); \n      } else if (renderProps === null) { \n        res.status(404) \n        .send('Not found'); \n      } else { \n\n      if  (typeofrenderProps === 'undefined') { \n        // using handleServerSideRender middleware not required; \n        // we are not requesting HTML (probably an app.js or other \n        file) \n        return; \n      } \n\n        let html = renderToStaticMarkup( \n          <Provider store={store}> \n          <RoutingContext {...renderProps}/> \n          </Provider> \n        ); \n\n        const initialState = store.getState() \n\n        let fullHTML = renderFullPage(html, initialState); \n        res.send(fullHTML); \n      } \n    }); \n  } catch (err) { \n      next(err) \n  } \n} \n\n```", "```js\n// this is already added to your codebase: \nlet html = renderToStaticMarkup( \n<Provider store={store}> \n<RoutingContext {...renderProps}/> \n</Provider> \n); \n\nconst initialState = store.getState(); \n\nlet fullHTML = renderFullPage(html, initialState); \nres.send(fullHTML); \n\n```", "```js\nimport http from 'http'; \nimport express from 'express'; \nimport cors from 'cors'; \nimport bodyParser from 'body-parser'; \nimport falcor from 'falcor'; \nimport falcorExpress from 'falcor-express'; \nimport falcorRouter from 'falcor-router'; \nimport routes from './routes.js'; \nimport React from 'react' \nimport { createStore } from 'redux' \nimport { Provider } from 'react-redux' \nimport { renderToStaticMarkup } from 'react-dom/server' \nimport ReactRouter from 'react-router'; \nimport { RoutingContext, match } from 'react-router'; \nimport * as hist from 'history'; \nimport rootReducer from '../src/reducers'; \nimport reactRoutes from '../src/routes'; \nimport fetchServerSide from './fetchServerSide'; \n\nconst app = express(); \n\napp.server = http.createServer(app); \n// CORS - 3rd party middleware \napp.use(cors()); \n// This is required by falcor-express middleware to work correctly \n with falcor-browser \napp.use(bodyParser.json({extended: false})); \n\napp.use(bodyParser.urlencoded({extended: false})); \n\napp.use('/static', express.static('dist')); \n\napp.use('/model.json', falcorExpress.dataSourceRoute(function(req, res) { \n  return new falcorRouter(routes); \n})); \n\nlet handleServerSideRender = (req, res, next) => { \n  try { \n    let initMOCKstore = fetchServerSide(); // mocked for now \n    // Create a new Redux store instance \n    const store = createStore(rootReducer, initMOCKstore); \n    const location = hist.createLocation(req.path); \n    match({ \n      routes: reactRoutes, \n      location: location, \n      }, (err, redirectLocation, renderProps) => { \n        if (redirectLocation) { \n\n          res.redirect(301, redirectLocation.pathname +  \n          redirectLocation.search); \n        } else if (err) { \n\n          next(err); \n        // res.send(500, error.message); \n        } else if (renderProps === null) { \n\n          res.status(404) \n          .send('Not found'); \n        } else { \n            if (typeofrenderProps === 'undefined') { \n            // using handleServerSideRender middleware not \n             required; \n            // we are not requesting HTML (probably an app.js or \n             other file) \n\n            return; \n          } \n          let html = renderToStaticMarkup( \n            <Provider store={store}> \n            <RoutingContext {...renderProps}/> \n            </Provider> \n          ); \n\n          const initialState = store.getState() \n          let fullHTML = renderFullPage(html, initialState); \n          res.send(fullHTML); \n        } \n       }); \n    } catch (err) { \n    next(err) \n  } \n} \n\nlet renderFullPage = (html, initialState) => \n{ \nreturn &grave; \n<!doctype html> \n<html> \n<head> \n<title>Publishing App Server Side Rendering</title> \n</head> \n<body> \n<h1>Server side publishing app</h1> \n<div id=\"publishingAppRoot\">${html}</div> \n<script> \nwindow.__INITIAL_STATE__ = ${JSON.stringify(initialState)} \n</script> \n<script src=\"img/app.js\"></script> \n</body> \n</html> \n&grave; \n}; \n\napp.use(handleServerSideRender); \n\napp.server.listen(process.env.PORT || 3000); \nconsole.log(&grave;Started on port ${app.server.address().port}&grave;); \n\nexport default app; \n\n```", "```js\nimport React from 'react'; \nimport { Link } from 'react-router'; \n\nimport themeDecorator from 'material-ui/lib/styles/theme- \n decorator'; \nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \n\nclass CoreLayout extends React.Component { \n  static propTypes = { \n    children :React.PropTypes.element \n  } \n\n```", "```js\nimport themeDecorator from 'material-ui/lib/styles/theme-decorator'; \nimport getMuiTheme from 'material-ui/lib/styles/getMuiTheme'; \n\n```", "```js\n  render () { \n    return ( \n<div> \n<span> \n    Links:   <Link to='/register'>Register</Link> |  \n      <Link to='/login'>Login</Link> |  \n      <Link to='/'>Home Page</Link> \n</span> \n<br/> \n   {this.props.children} \n</div> \n    ); \n  } \n\nexport default themeDecorator(getMuiTheme(null, { userAgent: 'all' }))(CoreLayout); \n\n```", "```js\ncomponentWillMount() { \n  this._fetch(); \n} \n\n```", "```js\ncomponentWillMount() { \n  if(typeof window !== 'undefined') { \n    this._fetch(); // we are server side rendering, no fetching \n  } \n} \n\n```", "```js\nimport React  from 'react'; \nimport {Provider}  from 'react-redux'; \nimport {Router}  from 'react-router'; \nimport routes  from '../routes'; \nimport createHashHistory  from 'history/lib/createHashHistory'; \n\nexport default class Root extends React.Component { \n  static propTypes = { \n    history : React.PropTypes.object.isRequired, \n    store   : React.PropTypes.object.isRequired \n  } \n\nrender () { \n    return ( \n<Provider store={this.props.store}> \n<div> \n<Router history={this.props.history}> \n{routes} \n</Router> \n</div> \n</Provider> \n    ); \n  } \n} \n\n```", "```js\n// deleted code from Root.js \nconst noQueryKeyHistory = createHashHistory({ \n  queryKey: false \n}); \n\n```", "```js\n<Router history={noQueryKeyHistory}> \n\n```", "```js\n<Router history={this.props.history}> \n\n```"]