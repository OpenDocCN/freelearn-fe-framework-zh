- en: Advanced Custom Components with TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TypeScript的高级自定义组件
- en: In the previous chapter, we discussed the basics of component creation and usage.
    This knowledge is not enough to build robust applications. We need to delve a
    little more deeply into Angular's exciting components and see how TypeScript makes
    working with components a lot easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了组件创建和使用的基础知识。这些知识不足以构建健壮的应用程序。我们需要更深入地了解Angular的精彩组件，并看看TypeScript是如何使组件工作变得更容易的。
- en: 'We are going to address the following topics while showing some hands-on examples
    on how they work:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在展示一些实际操作示例的同时，讨论以下主题：
- en: '**Lifecycle hooks**: These are class methods in Angular that you can hook into.
    They are achievable by implementing a TypeScript interface.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期钩子**: 这些是Angular中的类方法，你可以将其挂钩。这是通过实现TypeScript接口来实现的。'
- en: '**ElementRef**: This involves manipulating and querying DOM safely in Angular
    using the ElementRef API.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ElementRef**: 这涉及到使用ElementRef API在Angular中安全地操作和查询DOM。'
- en: '**View encapsulation**: You will learn how scoped styles are applied to Angular
    components and how to change the default behavior.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图封装**: 你将学习作用域样式是如何应用于Angular组件的，以及如何更改默认行为。'
- en: Lifecycle hooks
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期钩子
- en: Most methods you will create in classes must be called somewhere by you, which
    is the expected pattern in programming. This is not the case in what Angular defines
    as lifecycle hooks. These hooks are methods that you create for Angular to call
    them internally, depending on the current state of a component/directive. They
    are created in a component's or directive's class.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你在类中创建的大多数方法必须由你调用，这是编程中预期的模式。但在Angular定义的生命周期钩子中并非如此。这些钩子是你创建的，供Angular内部调用，取决于组件/指令的当前状态。它们是在组件或指令的类中创建的。
- en: 'The following hooks are available in an Angular component:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下钩子在Angular组件中可用：
- en: '`ngOnChanges`: Remember how properties are bound to components. These properties
    are reactive, meaning that, when they change, the view is updated as well. This
    lifecycle method is called when any property, bound to a view, is changed. Therefore,
    you can manipulate what happens before the changes are reflected.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngOnChanges`: 记得属性是如何绑定到组件上的。这些属性是响应式的，这意味着当它们发生变化时，视图也会更新。当任何绑定到视图的属性发生变化时，会调用此生命周期方法。因此，你可以在变化反映之前进行操作。'
- en: '`ngOnInit`: This is the most common lifecycle. It is called after a component
    has been initialized with the default property bindings. Hence, it is called after
    the first `ngOnChanges`.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngOnInit`: 这是最常见的生命周期。它是在组件使用默认属性绑定初始化之后被调用的。因此，它是在第一次`ngOnChanges`之后被调用的。'
- en: '`ngDoCheck`: Reactivity (change detection) is usually handled for you, but
    in extreme cases where it''s not, you need to handle it yourself. Use `ngDoCheck` to
    detect and act upon changes that Angular can''t or won''t detect on its own.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngDoCheck`: 响应性（变更检测）通常由你处理，但在极端情况下，如果它没有被处理，你需要自己处理。使用`ngDoCheck`来检测并响应Angular无法或不会自动检测的变化。'
- en: '`ngAfterContentInit`: This is called after the component''s content has been
    initialized.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterContentInit`: 这是在组件的内容初始化之后被调用的。'
- en: '`ngAfterContentChecked`: This is called after every check on the component''s
    content.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterContentChecked`: 这是在每次检查组件内容之后被调用的。'
- en: '`ngAfterViewInit`: This is called after initializing the view based on the
    component''s template.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterViewInit`: 这是在根据组件的模板初始化视图之后被调用的。'
- en: '`ngAfterViewChecked`: This is called after checking a component''s view and
    the child views of a component.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngAfterViewChecked`: 这是在检查组件的视图及其子组件的视图之后被调用的。'
- en: '`ngOnDestroy`: This is called before a component is destroyed. This is a good
    place for a clean-up.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngOnDestroy`: 这是在组件被销毁之前被调用的。这是一个进行清理的好地方。'
- en: Some lifecycle hooks may not make sense immediately. You shouldn't worry about
    them because it's only in extreme cases that you will need a lot of them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些生命周期钩子可能一开始并不容易理解。你不必担心它们，因为只有在极端情况下你才需要大量使用它们。
- en: An example will help clarify how they work. Let's explore the most common hook,
    which is `ngOnInit`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子将有助于阐明它们是如何工作的。让我们探索最常见的钩子，即`ngOnInit`。
- en: 'Create a new Angular project with the CLI command. Open the app component TypeScript
    file and update the imports to include `OnInit`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CLI命令创建一个新的Angular项目。打开app组件TypeScript文件，并更新导入以包括`OnInit`：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`OnInit` is an interface that any class intended to implement `ngOnInit` should
    inherit. This is not technically required (see [https://angular.io/guide/lifecycle-hooks#interfaces-are-optional-technically](https://angular.io/guide/lifecycle-hooks#interfaces-are-optional-technically)).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnInit`是一个接口，任何打算实现`ngOnInit`的类都应该继承。这从技术上讲不是必需的（参见[https://angular.io/guide/lifecycle-hooks#interfaces-are-optional-technically](https://angular.io/guide/lifecycle-hooks#interfaces-are-optional-technically)）。'
- en: 'You can now make the `AppComponent` class implement this interface:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以让`AppComponent`类实现此接口：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are trying to simulate an asynchronous behavior, where values are resolved
    in the future. This kind of operation is best done when the application is initialized
    and that's why we are handling this in the `ngOnInit` method. Once the component
    is ready, Angular calls this hook, which will set the item array after three seconds.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在尝试模拟异步行为，其中值将在未来解决。这种操作最好在应用程序初始化时进行，这就是为什么我们在`ngOnInit`方法中处理它。一旦组件准备就绪，Angular将调用此钩子，这将设置项目数组在3秒后。
- en: 'We can bind the values to the view even before they come in. Angular will always
    update the view when the values are available:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在值到来之前将它们绑定到视图上。Angular将在值可用时始终更新视图：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To iterate over a list in Angular templates, we use the `*ngFor` **structural
    directive**, as shown in the preceding example. The `*ngIf` structural directive
    is like `*ngFor` but is used to display DOM elements based on a Boolean property
    on the component.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Angular模板中遍历列表，我们使用`*ngFor`结构指令，如前例所示。`*ngIf`结构指令类似于`*ngFor`，但它用于根据组件上的布尔属性显示DOM元素。
- en: 'As usual, run the app with `ng serve`, and you will see the following first:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，使用`ng serve`运行应用程序，你将首先看到以下内容：
- en: '![](img/bb26d10d-0b15-4ab2-8574-b58bb9fa3fb3.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb26d10d-0b15-4ab2-8574-b58bb9fa3fb3.png)'
- en: 'After three seconds, the Please wait... text will disappear, and you will see
    your list of items:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 三秒后，请等待...文本将消失，你将看到你的项目列表：
- en: '![](img/2957cb42-5956-494d-80e4-428ed2e7fbb8.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2957cb42-5956-494d-80e4-428ed2e7fbb8.png)'
- en: DOM manipulation
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM操作
- en: In Angular 1.x, touching the DOM seemed mysterious; not like you couldn't, but
    somehow it comes back to bite you. This is ironic because what we do as web designers/developers
    is paint the DOM, and that cannot be possible without manipulating it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 1.x中，触摸DOM似乎很神秘；不是说你不能，但不知为何它总会回来咬你。这很讽刺，因为我们作为网页设计师/开发者所做的就是绘制DOM，而这不可能不通过操作它来实现。
- en: With Angular 2+, it became quite easy to do this. Angular abstracts the DOM
    and gives you the shallow copy to mess around with. It's then responsible for
    putting it back without hurting anyone. It becomes even more interesting with
    TypeScript because your editor can hint most of the DOM property methods for you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular 2+中，这样做变得相当容易。Angular抽象了DOM，并给你一个浅拷贝来操作。然后它负责将其放回原处而不伤害任何人。当与TypeScript结合使用时，这变得更加有趣，因为你的编辑器可以为你提示大多数DOM属性方法。
- en: ElementRef
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ElementRef
- en: The API to achieve Dom manipulation is `ElementRef`. Let's build a tab component
    that uses this API based on the basic demo on [https://www.w3schools.com/howto/howto_js_tabs.asp](https://www.w3schools.com/howto/howto_js_tabs.asp).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实现DOM操作的API是`ElementRef`。让我们基于[https://www.w3schools.com/howto/howto_js_tabs.asp](https://www.w3schools.com/howto/howto_js_tabs.asp)上的基本示例构建一个使用此API的选项卡组件。
- en: 'Start by generating a new component using the CLI generate command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先使用CLI generate命令生成一个新的组件：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the template as a child to our app component right after the `*ngFor` directive:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将模板作为子元素添加到我们的应用程序组件中，紧随`*ngFor`指令之后：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, replace the component''s template with the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用以下内容替换组件的模板：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see the result on the browser, as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在浏览器中看到以下结果，如以下截图所示：
- en: '![](img/efe4ce64-861d-47e5-8ea6-4df5f97d0c2a.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/efe4ce64-861d-47e5-8ea6-4df5f97d0c2a.png)'
- en: 'Let''s add some styles to create a tabbed look:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些样式来创建一个选项卡外观：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the styles, you should have the result shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用样式，你应该得到以下截图所示的结果：
- en: '![](img/d1840279-66f0-47b0-a50b-d394bb9db2f7.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d1840279-66f0-47b0-a50b-d394bb9db2f7.png)'
- en: 'Now is the time to start manipulating the DOM. We first need to hide all the
    tab contents with CSS by default; then, they can be activated in TypeScript:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是开始操作DOM的时候了。我们首先需要通过CSS默认隐藏所有选项卡内容；然后，它们可以在TypeScript中激活：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Hooking into content initialization
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 钩入内容初始化
- en: 'To be assured of gaining access to the DOM, we need to hook into the `ngAfterContentInit` lifecycle
    method. It''s in this method that we can use `ElementRef` to query the DOM and
    manipulate it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保能够访问 DOM，我们需要挂钩到 `ngAfterContentInit` 生命周期方法。正是在这个方法中，我们可以使用 `ElementRef`
    来查询 DOM 并对其进行操作：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The class implements `AfterContentInit` as well as `OnInint`, showing how you
    can implement multiple interfaces. Then, we declare the buttons as an array of
    `HTMLElement` links. This also applies to the tab contents.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该类实现了 `AfterContentInit` 以及 `OnInint` 接口，展示了如何实现多个接口。然后，我们将按钮声明为一个 `HTMLElement`
    链接数组。这也适用于标签页内容。
- en: Right in the constructor, we create an instance of `ElementRef` as `el`, which
    we can use to interact with the DOM. The `ngAfterContentInit` function is called
    after the DOM contents are ready, which makes it the perfect candidate to handle
    DOM manipulations on startup. Hence, we grab a reference to the DOM there.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正在构造函数中，我们创建了一个 `ElementRef` 实例作为 `el`，我们可以用它来与 DOM 交互。`ngAfterContentInit`
    函数在 DOM 内容准备好后被调用，这使得它成为处理启动时 DOM 操作的完美候选者。因此，我们在那里获取 DOM 的引用。
- en: 'We need to show the first tab and make the first tab link active on load. Let''s
    extend `ngAfterContentInit` to achieve this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在加载时显示第一个标签页并使第一个标签页链接处于活动状态。让我们扩展 `ngAfterContentInit` 来实现这一点：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will display the first tab, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示第一个标签页，如下面的截图所示：
- en: '![](img/3a5d38ec-7351-49ee-9953-c6d757d60159.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a5d38ec-7351-49ee-9953-c6d757d60159.png)'
- en: Handling DOM events
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 DOM 事件
- en: 'The final thing to do is add event listeners to the click events and start
    switching tabs. In the preceding template, we have click events attached to each
    button:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要做的事情是为点击事件添加事件监听器并开始切换标签。在前面的模板中，我们为每个按钮附加了点击事件：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `openTab` method is the event handler. Let''s implement it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`openTab` 方法是事件处理器。让我们来实现它：'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When the method is called, we iterate over all the tabs and hide them. We also
    iterate over the buttons and disable them by replacing the active class with an
    empty string. Then, we can display the tab we want to open and activate the button
    that was clicked.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法被调用时，我们遍历所有标签并将它们隐藏。我们还遍历按钮，通过将活动类替换为空字符串来禁用它们。然后，我们可以显示我们想要打开的标签页并激活被点击的按钮。
- en: 'Now when you click tab buttons, each tab content is shown:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你点击标签按钮时，每个标签内容都会显示：
- en: '![](img/a12abe97-05b9-4f8e-b94b-1872e0b45de8.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a12abe97-05b9-4f8e-b94b-1872e0b45de8.png)'
- en: There are different ways to solve this, and some of them are more advanced.
    The example we just showed intentionally performs DOM querying to show you how
    possible and simple it is to do DOM manipulation in Angular.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法可以解决这个问题，其中一些更为高级。我们刚刚展示的例子故意执行 DOM 查询，以展示在 Angular 中进行 DOM 操作的可能性和简单性。
- en: View encapsulation
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图封装
- en: Components can be configured to apply styles differently. This concept is called
    encapsulation, and that's what we are going to discuss now.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以被配置为以不同的方式应用样式。这个概念被称为封装，这正是我们现在要讨论的。
- en: 'Create another project with the CLI and add an extra component with the following
    command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CLI 创建另一个项目，并使用以下命令添加一个额外的组件：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, add this new component to the view via the app component:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过应用程序组件添加这个新组件到视图中：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The child component''s template is as simple as this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 子组件的模板就像这样：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That's just the minimum setup we need in order to understand view encapsulation
    strategies. Let's explore them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我们理解视图封装策略所需的最小设置。让我们来探索它们。
- en: Emulated
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟
- en: This is the default strategy. Any style applied globally via HTML (not the parent
    component) as well as all the styles applied to a component will be reflected.
    In our case, if we target `h3` and apply styles to `style.css`, `app.component.css`,
    and `child.component.css`, only `style.css` and `child.component.css` will be
    reflected.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认策略。通过 HTML（不是父组件）全局应用的所有样式以及应用到组件的所有样式都会反映出来。在我们的例子中，如果我们针对 `h3` 并将样式应用到
    `style.css`、`app.component.css` 和 `child.component.css`，只有 `style.css` 和 `child.component.css`
    会反映出来。
- en: 'The following CSS is the child component:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 CSS 是子组件：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On running the preceding code, the result on the child component''s view is
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码后，子组件视图的结果如下：
- en: '![](img/abbb916d-1ae6-4aee-9cda-0f950dd9478c.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abbb916d-1ae6-4aee-9cda-0f950dd9478c.png)'
- en: 'In cases where the same styles are applied to the same element on both the
    global styles and the component itself, the component styles supersede the global
    style. For example, consider that the `style.css` file is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局样式和组件本身都应用于相同元素的情况下，组件样式会覆盖全局样式。例如，假设`style.css`文件如下：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now consider that the `child.component.css` file is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑`child.component.css`文件如下：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The color of `h3` will be `blueviolet`, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`h3`的颜色将是`blueviolet`，如下截图所示：'
- en: '![](img/126071d5-858e-4373-b2e1-6fc6eb4833ef.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/126071d5-858e-4373-b2e1-6fc6eb4833ef.png)'
- en: 'You can set this in the component decorator, though it is not necessary because
    `Emulated` is the default value:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在组件装饰器中设置此选项，尽管这不是必需的，因为`Emulated`是默认值：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Native
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地
- en: 'This strategy is like Emulated, but it disables global styles from entering
    the component. Leaving the style in the global style as it was, set the encapsulation
    to native:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略类似于Emulated，但它禁用了全局样式进入组件。保留全局样式中的样式不变，将封装设置为本地：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Even though the global style sets the `h3` color to `pinkvioletred`, the text
    color remains black because it couldn''t penetrate the template:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管全局样式将`h3`的颜色设置为`pinkvioletred`，但文本颜色仍然是黑色，因为它无法穿透模板：
- en: '![](img/be23604f-c652-4997-8932-b8c986da9821.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be23604f-c652-4997-8932-b8c986da9821.png)'
- en: None
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无
- en: 'This is the freest strategy. No matter where the style is set--child or parent--the
    styles are leaked to the other components:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是自由度最高的策略。无论样式是在子组件还是父组件中设置，样式都会泄露到其他组件中：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'With this setting, you can style the `h1` tag in the parent tag via the child
    component''s styles:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此设置，你可以通过子组件的样式来设置父标签中的`h1`标签：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This reflects in the view, as shown in the following image:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这在视图中体现出来，如下所示：
- en: '![](img/8908367d-7c8c-4bed-ac17-821dbd48db1b.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8908367d-7c8c-4bed-ac17-821dbd48db1b.png)'
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Hopefully, the advanced topics discussed were not so complex or difficult to
    comprehend. You learned how to implement lifecycle hooks, control the behavior
    of component-scoped styles, and manipulate the DOM content after it has been rendered.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 希望所讨论的高级主题并不复杂或难以理解。你学习了如何实现生命周期钩子、控制组件作用域样式的行为，以及如何在渲染后操作DOM内容。
- en: If you take only one thing from this chapter, let it be how to implement the
    lifecycle interfaces with TypeScript and using TypeScript decorators to configure
    a component. In the next chapter, you will learn about component communication
    and how components interact with each other via properties, events, view children,
    and content children.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从这个章节中只学到了一件事，那就是如何使用TypeScript实现生命周期接口，以及如何使用TypeScript装饰器来配置组件。在下一章中，你将学习组件通信以及组件如何通过属性、事件、视图子组件和内容子组件相互交互。
