- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Complete Pinterest Clone with GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored GraphQL, GraphQL Apollo Server 2, queries,
    mutations, and how to integrate these technologies into your Vue.js 3 application.
    In addition, we learned how to utilize GraphQL to deliver scalable and high-performing
    applications. This chapter will demonstrate how to build a complete Pinterest
    clone with Vue 3 and GraphQL. You will utilize your knowledge of GraphQL to develop
    and deliver an enterprise application such as Pinterest using Vue 3 and GraphQL.
    Furthermore, you will learn how to create and manage your backend APIs using a
    popular headless **content management system** (**CMS**) called Strapi.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Strapi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaffolding a Strapi project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Vue 3 Pinterest app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting the frontend and backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to create a scalable and
    high-performing Pinterest clone application with GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start with this chapter, I recommend you read through [*Chapter 5*](B17237_05.xhtml#_idTextAnchor151),
    *An Introduction to GraphQL, Queries, Mutations, and RESTful APIs*, where we explored
    GraphQL, GraphQL Apollo Server 2, queries, mutations, and how to integrate these
    technologies into your Vue.js 3 application.
  prefs: []
  type: TYPE_NORMAL
- en: All the code files required for this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6).
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Strapi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Strapi is an open-source headless CMS based on Node.js that is used to create
    and manage different forms of content using a RESTful API and GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Strapi makes developing, deploying, and maintaining APIs faster
    and can be configured to consume content via APIs using any HTTP client or GraphQL-enabled
    frontend.
  prefs: []
  type: TYPE_NORMAL
- en: These benefits are the reason we will use Strapi to create the backend of our
    Pinterest clone application, so we can focus more on the frontend without having
    to pay much attention to scaling the backend.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will work through scaffolding a Strapi project, building
    out all the collections we need in our project, and seeding out the Strapi account
    with dummy data.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding a Strapi project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting a new Strapi backend project is very easy and works precisely like
    installing a new framework using the CLI tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will scaffold a full-blown backend application by running any of these simple
    commands and testing it in our default browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]bash'
  prefs: []
  type: TYPE_NORMAL
- en: npx create-Strapi-app strapi-pinterest-api --quickstart
  prefs: []
  type: TYPE_NORMAL
- en: '# OR'
  prefs: []
  type: TYPE_NORMAL
- en: yarn create straps-app strapi-pinterest-api --quickstart
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command scaffolds a new Strapi API into the specified folder.
    Next, run the following command to build and deploy your newly created backend
    API with Strapi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]bash'
  prefs: []
  type: TYPE_NORMAL
- en: npm run build
  prefs: []
  type: TYPE_NORMAL
- en: npm run deploy
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These preceding two commands should build your app and deploy it so you can
    easily test it out by typing the following URL (`localhost:`) in your default
    browser if it doesn’t open automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, the last command will also open a new tab with a page to register
    your new admin user of the system. Go ahead and fill out the form and click on
    the **LET’S START** button to create a new admin user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the page looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The Strapi registration page](img/Figure_6.01_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – The Strapi registration page
  prefs: []
  type: TYPE_NORMAL
- en: After signing up as the admin of the platform, you will have admin access to
    create different collections and set up different users and permission levels
    for your API.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how to create different collections that
    will correspond to our Pinterest API resources. We will also set up different
    permission levels to limit what each user in our Pinterest application can access.
  prefs: []
  type: TYPE_NORMAL
- en: Building the collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Strapi uses collections to denote resources; for example, if your application
    is a news application and you want to create a backend that will process posts,
    comments, and so on, you will create it as a Posts, Comments collection in Strapi.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since we are building a Pinterest clone, we will create the following
    collections: **Photo**(**Pin**), **Board**, and **User**, and each of these collections
    will contain their respective fields, as demonstrated in the following steps.'
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate, we will create a simple Photo(Pin) collection that will store
    the details of a specific photo in our app. In Pinterest, it is called **PIN**,
    but we will prefer to call it as **PHOTO** since we started with that in the previous
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Now to store the details of our photo, we will create a new `photos` in the
    Strapi dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `photos` collection will have the following fields: **title**, **url**,
    **user_id**, and **description**. These fields are imaginative and can change
    as we process them into the book:'
  prefs: []
  type: TYPE_NORMAL
- en: To create our first `photos` as the display name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The Strapi collection dashboard](img/Figure_6.02_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – The Strapi collection dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, choose the data type for your field, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – The Strapi Photos collection](img/Figure_6.03_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – The Strapi Photos collection
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the name of the field for your **Photos** collection and click
    on **+ Add another field** to enter another field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Strapi | Add new Text field](img/Figure_6.04_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Strapi | Add new Text field
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the process until you exhaust the list of fields for your collection
    and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – The Strapi Photos dashboard](img/Figure_6.05_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – The Strapi Photos dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, click on **Save** and repeat the process for **Users**, **Boards**,
    and other collections you might want to add. You should have all the collections
    listed, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Strapi | User fields](img/Figure_6.06_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Strapi | User fields
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about Strapi collections here – [https://docs.strapi.io/user-docs/latest/content-types-builder/introduction-to-content-types-builder.html](https://docs.strapi.io/user-docs/latest/content-types-builder/introduction-to-content-types-builder.html)
    – or watch this video – [https://www.youtube.com/watch?v=bStlyMB0NEw](https://www.youtube.com/watch?v=bStlyMB0NEw)
    – to see how we created all the collections we will use in the project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how to seed fake data into the Strapi collection
    to enable us to display some photos before we start adding new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Seeding data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After successfully creating the collections, we will seed some data so that
    we have plenty of photos, boards, and users to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following steps to seed some data into the collections we have created.
    First, we will seed some photo information, including the photos, and create a
    board that will house some of these photos and a user who is taking these actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To seed dummy data for our Pinterest project, we will click on each of the
    collections we have created and click **+ Add New Users**, as shown in this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Strapi | Add New Users](img/Figure_6.07_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Strapi | Add New Users
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, fill in the information needed to create a single user of our Pinterest
    application and click on **Save**, as shown in this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Strapi | Create an entry](img/Figure_6.08_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Strapi | Create an entry
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Publish**, and you should have your new user added to the **Users**
    collection, as seen here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – List all users](img/Figure_6.09_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – List all users
  prefs: []
  type: TYPE_NORMAL
- en: Create more fake data by repeating the process for all other collections, such
    as **Photos** and **Users**, for testing. Later in the next section, we will learn
    how to programmatically create data in the Strapi collection and build our Pinterest
    clone using Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Vue 3 Pinterest app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we explored creating the backend of our Pinterest application
    using Strapi. In this section, we will create the frontend using Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is important to note that since this is a demo, we will only abstract
    the slightest part of Pinterest to represent the application. Developing the full
    Pinterest application will require effort, teams, and resources.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue by using the official project we created for this book. In
    the previous chapters, we added internationalization, structured the project,
    and built out the login form, and we will continue by including other necessary
    files to make up a full-blown Pinterest clone application.
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, I will be using Tailwind CSS as my CSS framework for this
    project, and since it’s beyond the scope of this book, you can visit the official
    documentation to set it up with Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: You can clone the project from this repository – [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications)
    – to jump right in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a demo of what we are building:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Pinterest preview](img/Figure_6.10_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Pinterest preview
  prefs: []
  type: TYPE_NORMAL
- en: 'We have everything separated properly and structured in a scalable format for
    our application. The following shows how we structure the `HomeOverview` component
    that represents the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It contains the `Header` and `Cards` components. We could use `alias` to import
    these components making the import URL shorter, but I preferred to show you the
    relative path.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will start building out the frontend project by creating
    the `Cards` component and implementing the logic to display all the photos we
    have created previously.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the Cards component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us take a look at the `Cards` component first to explore the content in
    it. The `Cards` component houses the logic behind displaying the photo we have
    created and stored in our Strapi instance, and you can see this in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `Cards` component is where the magic happens, as it represents the collections
    of each Photo (Pin) in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a preview of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Cards preview](img/Figure_6.11_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Cards preview
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we display the cards based on their sizes (smaller, small, medium,
    and large). This helps us to get the same previews as Pinterest.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can clone the full frontend code and the Strapi backend from the `chapter
    6` branch in the repository here: [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6).'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we demonstrated how to build a simple Pinterest clone
    by creating different `Card` components to represent the Pin information. In the
    next section, we will learn how to connect our Strapi backend to the Pinterest
    frontend we have created using Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the frontend and backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most interesting part is how we structure our API requests to accommodate
    maintainability and easy adaptability, following the best practices we have learned
    from the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our folder structure containing the GraphQL
    endpoints according to the features we currently have in our application and in
    the Strapi backend we developed for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – A screenshot of the new folder structure with GraphQL and Strapi](img/Figure_6.12_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – A screenshot of the new folder structure with GraphQL and Strapi
  prefs: []
  type: TYPE_NORMAL
- en: In the `graphql` folder, we have defined three folders, namely `auth`, `photos`,
    and `users`, which represent the features our current project will have. Let’s
    look at what these folders contain.
  prefs: []
  type: TYPE_NORMAL
- en: The auth folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `auth` folder contains only a single mutation which will handle all the
    authentication and authorization functionalities. It will contain mutations, such
    as `register`, `login`, `forgotPassword`, `sendForgotPasswordEmail`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The photos folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `photos` folder is the most complex because it contains all the functionalities
    of the Pinterest application demo. It contains both mutations and queries, which
    is why we have created different files for it.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the mutations are `createPin`, `createBoard`, `updatePin`, `updateBoard`,
    `deletePin`, and so on. These mutations send different actions to our Strapi backend
    server to perform different actions.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we have the `queries.js` file, which contains all the queries
    to retrieve the different types of data from our Strapi backend server.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the queries found in this file include `getPin`, `getBoard`, `getBoards`,
    `getPins`, `getUserPins`, `getUserBoards`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The users folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `users` folder contains all the user-related functionalities of the Pinterest
    application demo. It contains both mutations and queries.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the mutations are `createUser`, `updateUser`, `deleteUser`, and so on.
    These mutations send different actions to our Strapi backend server to perform
    different user-related actions.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we have the `queries.js` file, which contains all the queries
    to retrieve the different types of user-related information from our Strapi backend
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the queries found in this file include `getUser`, `getUsers`, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a login example with GraphQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code snippet for each of the methods inside each of the mutations and queries
    can be found on the official GitHub repository for the respective chapter.
  prefs: []
  type: TYPE_NORMAL
- en: However, the following is an example of how to log in to our application using
    the GraphQL mutation we have defined inside the `auth` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the respective mutation we want to use inside any component
    or page, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]js'
  prefs: []
  type: TYPE_NORMAL
- en: import { LOGIN_USER } from '../../graphql';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: const login = () => {
  prefs: []
  type: TYPE_NORMAL
- en: const user = loginUser();
  prefs: []
  type: TYPE_NORMAL
- en: if (user) {
  prefs: []
  type: TYPE_NORMAL
- en: // Save State and Redirect to Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: logged.value = true;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: import { useMutation } from '@vue/apollo-composable';
  prefs: []
  type: TYPE_NORMAL
- en: 'const { mutate: loginUser } = useMutation(LOGIN_USER, () => ({'
  prefs: []
  type: TYPE_NORMAL
- en: 'variables: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'email: email,'
  prefs: []
  type: TYPE_NORMAL
- en: 'password: password,'
  prefs: []
  type: TYPE_NORMAL
- en: remember,
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}));'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'variables: {'
  prefs: []
  type: TYPE_NORMAL
- en: 'email: email,'
  prefs: []
  type: TYPE_NORMAL
- en: 'password: password,'
  prefs: []
  type: TYPE_NORMAL
- en: remember,
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: export const GET_PINS = gql`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mutation getPins($size: Int, $skip: Int, $filters:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: PinFiltersInput) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'getPins(size: $size, skip: $skip,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'filters: $filters) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: id
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: title
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: url
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <script setup>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import { useQuery } from '@vue/apollo-composable';
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import { GET_PINS } from '../../graphql/photos/queries';
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: const getBoardPins = () => {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return getPins();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '};'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'const { query: getPins } = useQuery(GET_PINS, () => ({'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'variables: {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'size: 20,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'skip: 0,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'filters: {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'boardId: board.id,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}));'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is a typical example of how we can implement GraphQL queries throughout
    the code base for our Pinterest demo application.
  prefs: []
  type: TYPE_NORMAL
- en: If you followed along from each chapter, you will have cloned the repository
    from the URL provided in the previous section, set it up locally, and seeded some
    data into the Strapi backend server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be presented with a Pinterest-like demo application, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Final Pinterest preview](img/Figure_6.13_B17237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Final Pinterest preview
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The images might differ based on the data you seed into your Strapi backend
    database. However, the repository contains instructions on getting the dummy data
    and seeding them into your Strapi backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the complete implement[ation in the official GitHub repository
    here: https://github.com/PacktPublishing/Architecting-Vue.js-3-Ent](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-6)erprise-Ready-Web-Applications/tree/chapter-6\.
    Additionally, you can learn how to implement the same API pattern with a RESTful
    API using the repository pattern here: [https://medium.com/backenders-club/consuming-apis-using-the-repository-pattern-in-vue-js-e64671b27b09](https://medium.com/backenders-club/consuming-apis-using-the-repository-pattern-in-vue-js-e64671b27b09).'
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, we created the frontend of our Pinterest clone using Vue 3 and
    the Composition API; we also created the backend using a very popular headless
    CMS called Strapi to store our data. Lastly, we integrated this into a single
    enterprise application using GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter dived deeper into how to utilize GraphQL to deliver scalable and
    high-performing applications and how to build a complete Pinterest clone with
    Vue 3 and GraphQL. In addition, we utilized the knowledge of GraphQL to develop
    and deliver enterprise applications such as Pinterest using Vue 3 and GraphQL.
  prefs: []
  type: TYPE_NORMAL
- en: We explored Strapi – the headless CMS that manages our backend APIs and data,
    and we also scaffolded a new Strapi project, learned how to create Strapi collections,
    and also seeded some dummy data to ease the development time.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered in detail how to integrate the Strapi CMS and easily spin up
    a backend server for our Pinterest demo application using GraphQL into Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the nitty-gritty involved in dockerizing
    your Vue 3 project. In addition, you will learn about the best practices and industry
    standards for dockerizing and deploying an enterprise Vue.js 3 web application.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will also go more practical by dockerizing a full-stack web application
    and deploying the container to a cloud platform using Docker Compose. Finally,
    you will learn how to handle larger projects with Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Vue.js 3 Enterprise Tools'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will learn about DevOps and Docker. You will containerize
    your web app and deploy a container to Google Cloud Run using CLI tools. Then,
    you will leverage advanced CI techniques to build a container-based CI environment,
    leveraging a multi-stage Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: This part will also explore GraphQL and how it can be implemented and integrated
    with Vue.js 3 to deliver an enterprise-ready web application. In addition, we
    will build an enterprise Pinterest clone to demonstrate our knowledge of GraphQL
    at an enterprise level.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B17237_05.xhtml#_idTextAnchor151), *An* [*Introduction to GraphQL,
    Queries, Mutations, and RESTful API*](https://epic.packtpub.services/index.php?module=oss_Chapters&action=DetailView&record=77e2136f-e753-5cdf-9030-61d6c9075a4b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B17237_06.xhtml#_idTextAnchor192), *Building a Complete Pinterest
    Clone with GraphQL*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B17237_07.xhtml#_idTextAnchor230), *Dockerizing a Vue 3 App*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
