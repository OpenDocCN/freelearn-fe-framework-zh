- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Creating Your First Web Application in Angular
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Angular 中创建您的第一个 Web 应用程序
- en: '**Angular** is a popular and modern **JavaScript** framework that can run on
    different platforms, including the web, desktop, and mobile. Angular applications
    are written in **TypeScript**, a superset of JavaScript that provides syntactic
    sugar, such as strong typing and object-oriented techniques.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Angular** 是一个流行的现代 **JavaScript** 框架，可以在不同的平台上运行，包括网络、桌面和移动。Angular 应用程序是用
    **TypeScript** 编写的，它是 JavaScript 的超集，提供了诸如强类型和面向对象技术之类的语法糖。'
- en: Angular applications are created and developed using a command-line tool made
    by the Angular team called the **Angular CLI**. It automates many development
    tasks, such as scaffolding, testing, and deploying Angular applications, which
    would take much time to configure manually.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 应用程序是使用 Angular 团队制作的命令行工具 **Angular CLI** 创建和开发的。它自动化了许多开发任务，如脚手架、测试和部署
    Angular 应用程序，这些任务手动配置将花费大量时间。
- en: The popularity of the Angular framework is considerably reflected in its broad
    tooling support. The **Visual Studio Code (VS Code)** editor contains various
    extensions that enhance the development experience when working with Angular.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 框架的流行度在很大程度上反映了其广泛的工具支持。**Visual Studio Code (VS Code**) 编辑器包含各种扩展，这些扩展在处理
    Angular 时可以增强开发体验。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An introduction to the Angular CLI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI 简介
- en: Exploring the rich ecosystem of Angular tooling in VS Code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 VS Code 中丰富的 Angular 工具生态系统
- en: Creating our first Angular application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Angular 应用程序
- en: Interacting with the Angular framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Angular 框架交互
- en: Using **Nx Console** to automate Angular CLI commands
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Nx Console** 自动化 Angular CLI 命令
- en: Essential background theory and context
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景理论和上下文
- en: 'The Angular framework is a cross-platform JavaScript framework that can run
    on various environments, including the web, server, mobile, and desktop. It consists
    of a collection of JavaScript libraries that we can use to build highly performant
    and scalable web applications. The architecture of an Angular application is based
    on a hierarchical representation of components. Components are the fundamental
    building blocks of an Angular application. They represent and control a particular
    portion of a web page called the **view**. Some examples of components are as
    follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 框架是一个跨平台 JavaScript 框架，可以在各种环境中运行，包括网络、服务器、移动和桌面。它由一系列 JavaScript 库组成，我们可以使用这些库来构建高性能和可扩展的
    Web 应用程序。Angular 应用程序的架构基于组件的分层表示。组件是 Angular 应用程序的基本构建块。它们代表并控制网页的特定部分，称为 **视图**。以下是一些组件的示例：
- en: A list of blog posts
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列博客文章
- en: An issue reporting form
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个问题报告表单
- en: A weather display widget
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个天气显示小部件
- en: 'Components of an Angular application can be logically organized as a tree:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 应用程序组件可以按逻辑组织成树状结构：
- en: '![Figure 1.1 – Component tree](img/B18465_01_01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 组件树](img/B18465_01_01.png)'
- en: Figure 1.1 – Component tree
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 组件树
- en: An Angular application typically has one main component by convention, called
    `AppComponent`. Each component in the tree can communicate and interact with its
    siblings using an application programming interface, defined by each component.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，Angular 应用程序通常有一个主组件，称为 `AppComponent`。树中的每个组件都可以通过应用程序编程接口与其兄弟组件进行通信和交互，该接口由每个组件定义。
- en: 'An Angular application can have many features that are called **modules**.
    Each module serves a block of single functionality corresponding to a particular
    application domain or workflow. Angular modules are used to group Angular components
    that share similar functionality:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 应用程序可以有许多被称为 **模块** 的功能。每个模块对应于特定应用程序领域或工作流程的单个功能块。Angular 模块用于将具有相似功能的
    Angular 组件分组：
- en: '![Figure 1.2 – Module hierarchy](img/B18465_01_02.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 模块层次结构](img/B18465_01_02.png)'
- en: Figure 1.2 – Module hierarchy
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 模块层次结构
- en: In the previous diagram, the dashed line circles represent Angular modules.
    An Angular application typically has one main module by convention, called `AppModule`.
    Each module can import other modules in an Angular application if they wish to
    use part of their functionality.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，虚线圆圈代表 Angular 模块。按照惯例，Angular 应用程序通常有一个主模块，称为 `AppModule`。如果模块希望使用其功能的一部分，它们可以导入
    Angular 应用程序中的其他模块。
- en: The functionality of a module can be further analyzed in the presentational
    and business logic of a feature. Angular components should only handle the presentational
    logic and delegate business logic tasks to services. The Angular framework provides
    Angular services to components using a built-in **dependency injection (DI)**
    mechanism.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的功能可以进一步分析为特性的展示逻辑和业务逻辑。Angular 组件应仅处理展示逻辑，并将业务逻辑任务委托给服务。Angular 框架通过内置的**依赖注入（DI）**机制为组件提供
    Angular 服务。
- en: The Angular DI framework uses special-purpose objects, called **injectors**,
    to hide much of the complexity of providing dependencies to an Angular application.
    Components are not required to know the actual implementation of an Angular service.
    They only need to ask for it from an injector.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Angular DI 框架使用特殊用途的对象，称为**注入器**，来隐藏向 Angular 应用程序提供依赖项的大部分复杂性。组件不需要知道 Angular
    服务的实际实现。它们只需要从注入器请求即可。
- en: 'An Angular service should follow the **single responsibility principle** and
    not cross boundaries between different modules. Some examples of services are
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Angular 服务应遵循**单一职责原则**，并且不要跨越不同模块之间的边界。以下是一些服务的示例：
- en: Accessing data from a backend API using the HTTP protocol
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTP 协议从后端 API 访问数据
- en: Interacting with the local storage of the browser
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与浏览器本地存储的交互
- en: Error logging
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误日志记录
- en: Data transformations
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据转换
- en: An Angular developer does not need to remember how to create components, modules,
    and services by heart while building an Angular application. Luckily, the Angular
    CLI can assist us by providing a command-line interface to accomplish these tasks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 Angular 应用程序时，Angular 开发者不需要记住如何创建组件、模块和服务。幸运的是，Angular CLI 可以通过提供命令行界面来帮助我们完成这些任务。
- en: Introduction to the Angular CLI
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular CLI 简介
- en: 'The Angular CLI is a tool created by the Angular team that improves the developer
    experience while building Angular applications. It hides the complexity of scaffolding
    and configuring an Angular application while allowing developers to concentrate
    on what they do best – coding! Before we can start using the Angular CLI, we need
    to set up the following prerequisites in our system:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 是 Angular 团队创建的一个工具，它改善了构建 Angular 应用程序的开发者体验。它隐藏了搭建和配置 Angular
    应用程序的复杂性，同时允许开发者专注于他们最擅长的事情——编码！在我们开始使用 Angular CLI 之前，我们需要在我们的系统中设置以下先决条件：
- en: '**Node.js**: A JavaScript runtime that is built on the v8 engine of Chrome.
    You can download any **Long-Term Support (LTS)** version from [https://nodejs.org](https://nodejs.org).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**：建立在 Chrome v8 引擎之上的 JavaScript 运行时。您可以从 [https://nodejs.org](https://nodejs.org)
    下载任何**长期支持（LTS）**版本。'
- en: '**npm**: A package manager for the Node.js runtime.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**npm**：Node.js 运行的包管理器。'
- en: 'We can then install the Angular CLI using `npm` from the command line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用命令行中的 `npm` 安装 Angular CLI：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We use the `-g` option to install the Angular CLI globally, since we want to
    create Angular applications from any operating system path.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `-g` 选项全局安装 Angular CLI，因为我们希望从任何操作系统路径创建 Angular 应用程序。
- en: Installing the Angular CLI may require administrative privileges in some operating
    systems.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些操作系统中安装 Angular CLI 可能需要管理员权限。
- en: 'To verify that the Angular CLI has been installed correctly, we can run the
    following from the command line:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证 Angular CLI 是否已正确安装，我们可以在命令行中运行以下命令：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous command will report the version of the Angular CLI installed in
    our system. The Angular CLI provides a command-line interface through the `ng`
    command, which is the binary executable of the Angular CLI. It can accept various
    options, including the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将报告我们系统中安装的 Angular CLI 版本。Angular CLI 通过 `ng` 命令提供命令行界面，这是 Angular CLI
    的二进制可执行文件。它可以接受各种选项，包括以下内容：
- en: '`serve`: Build and serve an Angular application.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serve`：构建并服务 Angular 应用程序。'
- en: '`build`: Build an Angular application.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：构建 Angular 应用程序。'
- en: '`test`: Run the unit tests of an Angular application.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：运行 Angular 应用程序的单元测试。'
- en: '`generate`: Generate a new Angular artifact, such as a component or module.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate`：生成新的 Angular 实体，例如组件或模块。'
- en: '`add`: Install a third-party library compatible with the Angular framework.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add`：安装与 Angular 框架兼容的第三方库。'
- en: '`new`: Create a new Angular application.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new`：创建新的 Angular 应用程序。'
- en: 'The previous options are the most common ones. If you want to view all the
    available commands, execute the following in the command line:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的选项是最常见的。如果您想查看所有可用的命令，请在命令行中执行以下命令：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous command will display a list of all the supported commands from
    the Angular CLI.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将显示Angular CLI支持的所有命令列表。
- en: The Angular tooling ecosystem is full of extensions and utilities that can help
    us when developing Angular applications. In the next section, we will learn some
    of those that work with VS Code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Angular工具生态系统充满了扩展和实用工具，可以在我们开发Angular应用程序时帮助我们。在下一节中，我们将了解其中一些与VS Code一起工作的扩展。
- en: Exploring the rich ecosystem of Angular tooling in VS Code
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索VS Code中Angular工具的丰富生态系统
- en: 'There are many extensions available in the **VS Code Marketplace** that enhance
    the Angular tooling ecosystem. In this section, we will learn about the most popular
    ones that can significantly help us in Angular development:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在**VS Code Marketplace**中有许多扩展可用，可以增强Angular工具生态系统。在本节中，我们将了解其中最受欢迎的扩展，这些扩展可以显著帮助我们进行Angular开发：
- en: Nx Console
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nx Console
- en: Angular Language Service
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular语言服务
- en: Angular Snippets
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Snippets
- en: Angular Evergreen
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Evergreen
- en: Material Icon Theme
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material Icon Theme
- en: The preceding list is not exhaustive; some extensions are already included in
    the **Angular Essentials** extension pack. However, you can browse more Angular
    extensions for VS Code at [https://marketplace.visualstudio.com/search?term=angular&target=VSCode](https://marketplace.visualstudio.com/search?term=angular&target=VSCode).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的列表并不全面；一些扩展已经包含在**Angular Essentials**扩展包中。然而，您可以在[https://marketplace.visualstudio.com/search?term=angular&target=VSCode](https://marketplace.visualstudio.com/search?term=angular&target=VSCode)上浏览更多VS
    Code的Angular扩展。
- en: Nx Console
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nx Console
- en: '**Nx Console** is a VS Code extension developed by the Nrwl team that provides
    a graphical user interface over the Angular CLI. It contains most of the Angular
    CLI commands and uses the Angular CLI internally to execute each one. We will
    learn more about this extension in the *Building our application with Nx Console*
    section.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nx Console** 是由Nrwl团队开发的一个VS Code扩展，它提供了一个图形用户界面，用于覆盖Angular CLI。它包含大多数Angular
    CLI命令，并使用Angular CLI内部执行每个命令。我们将在“使用Nx Console构建我们的应用程序”部分了解更多关于这个扩展的信息。'
- en: Angular Language Service
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular Language Service
- en: 'The **Angular Language Service** extension provides various enhancements while
    editing HTML templates in an Angular application, including the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Angular语言服务**扩展在编辑Angular应用程序中的HTML模板时提供了各种增强功能，包括以下内容：'
- en: Code autocompletion
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码自动补全
- en: Compile error messages
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译错误信息
- en: Go-to definition techniques
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳转到定义技术
- en: 'Code autocompletion is a feature that helps us find the right property or method
    to use while typing. It works by displaying a list of suggestions while we start
    typing in HTML content:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 代码自动补全是帮助我们找到在输入HTML内容时使用正确属性或方法的功能。它通过在我们开始输入时显示建议列表来实现：
- en: '![](img/B18465_01_03.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_01_03.png)'
- en: Figure 1.3 – Code completion
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 代码补全
- en: In the previous screenshot, the Angular Language Service suggests the **description**
    component property when we start typing the word `descr`. Notice that code completion
    only works for the public properties and methods in a component.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，当我们开始输入单词“descr”时，Angular语言服务建议使用**description**组件属性。请注意，代码补全仅适用于组件中的公共属性和方法。
- en: 'One of the most common issues when developing web applications is detecting
    errors before the application reaches production. This problem can be solved partially
    by the Angular compiler, which is bootstrapped upon building an Angular application
    for production. Moreover, the Angular Language Service can take this further by
    displaying compilation error messages long before our application reaches the
    compilation process:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Web应用程序时，最常见的问题之一是在应用程序达到生产状态之前检测到错误。这个问题可以通过Angular编译器部分解决，该编译器在构建用于生产的Angular应用程序时启动。此外，Angular语言服务可以通过在应用程序达到编译过程之前显示编译错误信息来进一步解决这个问题：
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_04.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像 自动生成的描述](img/B18465_01_04.png)'
- en: Figure 1.4 – Compile error message
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 编译错误信息
- en: For example, if we accidentally misspell the name of a property or method of
    the component, the Angular Language Service will display an appropriate error
    message.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们不小心拼错了组件的属性或方法名称，Angular语言服务将显示适当的错误信息。
- en: Angular Snippets
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular Snippets
- en: 'The **Angular Snippets** extension contains a collection of Angular code snippets
    for TypeScript and HTML. In TypeScript, we can use it to create components, modules,
    or services in a blank TypeScript file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Angular Snippets**扩展包含了一组Angular代码片段，用于TypeScript和HTML。在TypeScript中，我们可以使用它在一个空白TypeScript文件中创建组件、模块或服务：'
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_05.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像 自动生成的描述](img/B18465_01_05.png)'
- en: Figure 1.5 – New Angular component snippet
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 新 Angular 组件片段
- en: 'In an HTML template, we can use the extension to create useful Angular artifacts,
    such as the ***ngFor** directive, to loop through a list in HTML:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 模板中，我们可以使用此扩展来创建有用的 Angular 元素，例如 ***ngFor** 指令，以在 HTML 中循环列表：
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_06.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像 自动生成的描述](img/B18465_01_06.png)'
- en: Figure 1.6 – *ngFor snippet
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – *ngFor 碎片
- en: Due to the widespread popularity and capabilities of the Angular CLI, it looks
    more convenient to use it to generate Angular artifacts in TypeScript. However,
    Angular Snippets does a great job with the HTML part, where there are more things
    to remember by heart.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Angular CLI 的广泛流行和功能，使用它来在 TypeScript 中生成 Angular 元素看起来更方便。然而，Angular Snippets
    在 HTML 部分做得很好，那里有更多需要记住的内容。
- en: Angular Evergreen
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular Evergreen
- en: A primary factor that makes the Angular framework so stable is that it follows
    a regular release cycle based on semantic versioning. If we want our Angular applications
    to be packed with the latest features and fixes, we must update them regularly.
    But how can we stay up to date most efficiently? We can use the **Angular Evergreen**
    extension!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使 Angular 框架如此稳定的一个主要因素是它遵循基于语义版本控制的定期发布周期。如果我们希望我们的 Angular 应用程序充满最新功能和修复，我们必须定期更新它们。但如何最有效地保持更新呢？我们可以使用
    **Angular Evergreen** 扩展！
- en: 'It compares the Angular and Angular CLI versions of an Angular CLI project
    with the latest ones and alerts you about whether you need to update it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 它比较 Angular CLI 项目的 Angular 和 Angular CLI 版本与最新版本，并提醒您是否需要更新：
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_07.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像 自动生成的描述](img/B18465_01_07.png)'
- en: Figure 1.7 – Angular Evergreen
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – Angular Evergreen
- en: 'It provides an easy-to-use user interface to execute the following commands:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个易于使用的用户界面来执行以下命令：
- en: Upgrading Angular dependencies to the *latest* version
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Angular 依赖项升级到 *最新* 版本
- en: Upgrading Angular dependencies to the *next* version
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Angular 依赖项升级到 *下一个* 版本
- en: Upgrading all npm dependencies
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级所有 npm 依赖项
- en: Angular Evergreen is the perfect extension to always stay updated with your
    Angular projects.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Angular Evergreen 是始终与您的 Angular 项目保持更新的完美扩展。
- en: Material Icon Theme
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料图标主题
- en: The last extension in the list adds little value regarding the productivity
    of the developer. Instead, it focuses on the discoverability and aesthetic point
    of view by modifying the icon theme of VS Code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中最后一个扩展在提高开发者生产力方面添加的价值很小。相反，它通过修改 VS Code 的图标主题来关注可发现性和美学观点。
- en: The **Material Icon Theme** contains a ton of icons that are based on **Google
    Material Design**. It can understand each file type in your project and display
    the related icon automatically. For example, Angular modules are indicated with
    a red Angular icon, whereas components are shown with a blue Angular icon.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**材料图标主题**包含大量基于 **Google 材料设计**的图标。它可以理解项目中每种文件类型并自动显示相关图标。例如，Angular 模块用红色
    Angular 图标表示，而组件则用蓝色 Angular 图标表示。'
- en: 'VS Code has a default file icon theme called **Seti**. Once you’ve installed
    Material Icon Theme, it will prompt you to select which one you would like to
    activate:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 有一个默认的文件图标主题，称为 **Seti**。一旦您安装了材料图标主题，它将提示您选择您想要激活的主题：
- en: '![Figure 1.8 – Selecting a file icon theme](img/B18465_01_08.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 选择文件图标主题](img/B18465_01_08.png)'
- en: Figure 1.8 – Selecting a file icon theme
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 选择文件图标主题
- en: Selecting **Material Icon Theme** will automatically update the icons of your
    current Angular project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **材料图标主题**将自动更新当前 Angular 项目的图标。
- en: Material Icon Theme is installed and applied globally to VS Code, so you do
    not need to activate it separately for each Angular CLI project.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 材料图标主题已安装并全局应用于 VS Code，因此您无需为每个 Angular CLI 项目单独激活它。
- en: Now, when you open your Angular project, you will understand the type of each
    file at a glance, even if its name is not displayed wholly on the screen.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您打开您的 Angular 项目时，您将一眼就能理解每个文件的类型，即使其名称没有完全显示在屏幕上。
- en: Project overview
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this project, we will use Angular CLI to create a new Angular application
    from scratch. Then, we will interact with the core functionality of the Angular
    framework to make a simple change to our application. Finally, we will learn how
    to use the Nx Console extension to build and serve our application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用 Angular CLI 从头开始创建一个新的 Angular 应用程序。然后，我们将与 Angular 框架的核心功能交互，对我们的应用程序进行简单的更改。最后，我们将学习如何使用
    Nx Console 扩展来构建和托管我们的应用程序。
- en: 'Build time: 15 minutes.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：15 分钟。
- en: Getting started
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The following software tools are required to complete this project:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目所需的软件工具如下：
- en: '**Git**: A free and open-source distributed version control system. You can
    download it from [https://git-scm.com](https://git-scm.com).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**：一个免费且开源的分布式版本控制系统。您可以从 [https://git-scm.com](https://git-scm.com) 下载它。'
- en: '**VS Code**: A code editor that you can download from [https://code.visualstudio.com](https://code.visualstudio.com).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VS Code**：一个您可以从 [https://code.visualstudio.com](https://code.visualstudio.com)
    下载的代码编辑器。'
- en: '**Angular CLI**: We introduced the command-line interface for Angular in the
    *Essential background theory and context* section.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular CLI**：我们在 *必要背景理论及环境* 部分介绍了 Angular 的命令行界面。'
- en: '**GitHub material**: The code for this chapter, which you can find in the `Chapter01`
    folder at [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition).'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub 资源**：本章的代码，您可以在 [https://github.com/PacktPublishing/Angular-Projects-Third-Edition](https://github.com/PacktPublishing/Angular-Projects-Third-Edition)
    的 `Chapter01` 文件夹中找到。'
- en: Creating our first Angular application
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Angular 应用程序
- en: 'To create a fresh new Angular application, we must execute the `ng new` command
    of the Angular CLI, passing the name of the application as an option:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个全新的 Angular 应用程序，我们必须执行 Angular CLI 的 `ng new` 命令，并将应用程序名称作为选项传递：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `ng new` command is used to create a new Angular application or a new Angular
    workspace. An Angular workspace is an Angular CLI project containing one or more
    Angular applications, some of which can be Angular libraries. So, when we execute
    the `ng new` command, we create an Angular workspace with an Angular application
    by default.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng new` 命令用于创建新的 Angular 应用程序或新的 Angular 工作空间。Angular 工作空间是一个包含一个或多个 Angular
    应用程序的 Angular CLI 项目，其中一些可以是 Angular 库。因此，当我们执行 `ng new` 命令时，我们默认创建一个包含 Angular
    应用程序的 Angular 工作空间。'
- en: 'In the previous command, the name of our Angular application is `my-app`. Upon
    executing the command, the Angular CLI will ask some questions to collect as much
    information as possible regarding the nature of the application we want to create:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们的 Angular 应用程序名称是 `my-app`。执行命令后，Angular CLI 将提出一些问题，尽可能收集有关我们想要创建的应用程序性质的信息：
- en: 'Initially, it will ask if we want to enable Angular analytics:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始时，它会询问我们是否想启用 Angular 分析：
- en: '[PRE4]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Angular CLI will only ask the previous question once, when we create our
    first Angular project, and apply it globally in your system. However, we can change
    the setting later in a specific Angular workspace.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Angular CLI 只会在我们创建第一个 Angular 项目时询问一次前面的问题，并将其全局应用于系统。然而，我们可以在特定的 Angular 工作空间中稍后更改设置。
- en: 'Next, it will ask whether we want to enable routing in our Angular application:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它将询问我们是否想在 Angular 应用程序中启用路由：
- en: '[PRE5]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Routing in Angular is all about navigating between the components of an Angular
    application using a URL. We are not concerned with routing in this project, so
    press *Enter* to accept the default value.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Angular 中的路由全部关于使用 URL 在 Angular 应用程序组件之间导航。我们在这个项目中不关心路由，所以按 *Enter* 接受默认值。
- en: 'Then, the Angular CLI prompts us to select the style format that we want to
    use throughout the Angular application:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，Angular CLI 会提示我们选择我们想要在 Angular 应用程序中使用的样式格式：
- en: '[PRE6]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Select a format from the list of available stylesheets and press *Enter*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从可用的样式表列表中选择一个格式并按 *Enter*。
- en: 'The Angular CLI initiates the creation process of your Angular application,
    which consists of the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 启动您的 Angular 应用程序的创建过程，该过程包括以下步骤：
- en: Scaffolding the necessary folder structure of a typical Angular CLI project
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为典型的 Angular CLI 项目搭建必要的文件夹结构
- en: Installing the required npm dependencies and Angular packages
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需的 npm 依赖项和 Angular 包
- en: Initializing Git in the Angular CLI project
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Angular CLI 项目中初始化 Git
- en: This process may take some time, depending on the speed of your network. Once
    it has finished, you should have a new folder named `my-app` in the path where
    you ran the `ng new` Angular CLI command.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能需要一些时间，具体取决于您的网络速度。一旦完成，您应该在运行`ng new` Angular CLI命令的路径中看到一个名为`my-app`的新文件夹。
- en: 'Now, the time has finally come to run our Angular application and see it in
    action:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行我们的Angular应用程序并看到它实际运行的时刻终于到来了：
- en: Open a terminal window and navigate to the `my-app` folder.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并导航到`my-app`文件夹。
- en: 'Run the following Angular CLI command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Angular CLI命令：
- en: '[PRE7]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command will build the Angular application and start a built-in
    web server that we can use to preview it. The web server is started in watch mode;
    it automatically rebuilds the Angular application whenever we change the code.
    The first time an Angular application is built, it takes considerable time to
    complete, so we must be patient. We will know when the process has finished with
    no errors when we see the following message in the terminal window:'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将构建Angular应用程序并启动一个内置的Web服务器，我们可以使用它来预览应用程序。Web服务器以监视模式启动；每当我们的代码发生变化时，它会自动重新构建Angular应用程序。第一次构建Angular应用程序时，完成需要相当长的时间，因此我们必须有耐心。当我们在终端窗口中看到以下消息时，我们知道过程已经完成且没有错误：
- en: '![Figure 1.11 – Angular build output](img/B18465_01_09.png)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图1.11 – Angular构建输出](img/B18465_01_09.png)'
- en: Figure 1.9 – Angular build output
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.9 – Angular构建输出
- en: 'Fire up your favorite browser and navigate to `http://localhost:4200` to get
    a preview of your brand-new Angular application:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您喜欢的浏览器并导航到`http://localhost:4200`以预览您全新的Angular应用程序：
- en: '![](img/B18465_01_10.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_01_10.png)'
- en: Figure 1.10 – Minimal Angular application
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – 最小Angular应用程序
- en: The Angular CLI creates a minimal Angular application by default to provide
    us with a starting point for our Angular project. It contains some ready-made
    CSS styles and HTML content, which we will learn how to change according to our
    specifications in the following section.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI默认创建一个最小的Angular应用程序，为我们提供Angular项目的起点。它包含一些现成的CSS样式和HTML内容，我们将在下一节中学习如何根据我们的规格进行更改。
- en: Interacting with the Angular framework
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Angular框架交互
- en: When working with Angular, the real fun starts when we get our hands dirty with
    the framework itself. After all, understanding how Angular works and writing the
    application code is what matters.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Angular时，真正的乐趣在于我们开始与框架本身打交道。毕竟，理解Angular的工作原理和编写应用程序代码才是最重要的。
- en: 'The application source code resides inside the `src\app` folder at the root
    of our Angular CLI project. It contains all the files needed to build and test
    our Angular application, including a component and a module. The component is
    the main component of the Angular application:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序源代码位于Angular CLI项目的根目录下的`src\app`文件夹中。它包含构建和测试我们的Angular应用程序所需的所有文件，包括一个组件和一个模块。组件是Angular应用程序的主要组件：
- en: '`app.component.ts`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.component.ts`'
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following properties characterize an Angular component:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性描述了Angular组件：
- en: '`selector`: A unique name used to identify and declare the component inside
    HTML content. It is an HTML tag, just like any native HTML element, such as `<app-root></app-root>`.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selector`：用于在HTML内容中标识和声明组件的唯一名称。它是一个HTML标签，就像任何原生HTML元素一样，例如`<app-root></app-root>`。'
- en: The Angular CLI provides the `app-` prefix by default in component selectors.
    We can use a custom one using the `--prefix` option when creating a new Angular
    CLI application from scratch. A custom prefix can be based on the name of an organization
    or a particular product, and it helps avoid collisions with other libraries or
    modules.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Angular CLI默认在组件选择器中提供`app-`前缀。在从头创建新的Angular CLI应用程序时，我们可以使用`--prefix`选项来使用自定义前缀。自定义前缀可以基于组织名称或特定产品的名称，这有助于避免与其他库或模块冲突。
- en: '`templateUrl`: The path pointing to an HTML file that contains the HTML content
    of the component, which is called the component template.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templateUrl`：指向包含组件HTML内容的HTML文件的路径，称为组件模板。'
- en: '`styleUrls`: A list of paths where each one points to a stylesheet file containing
    the CSS styles of the component.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleUrls`：指向包含组件CSS样式的样式表文件的路径列表。'
- en: The preceding properties are defined using the `@Component` decorator. It is
    a function that decorates the TypeScript class of the component and recognizes
    it as an Angular component. The `title` property of the `AppComponent` class is
    a public property that contains a string value and can be used in the component
    template.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的属性使用 `@Component` 装饰器定义。它是一个装饰 TypeScript 类的函数，并识别它为 Angular 组件。`AppComponent`
    类的 `title` 属性是一个包含字符串值的公共属性，可以在组件模板中使用。
- en: 'The main module of our Angular application uses a similar decorator called
    `@NgModule` to define its properties:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Angular 应用程序的主模块使用一个类似的装饰器 `@NgModule` 来定义其属性：
- en: '`app.module.ts`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.module.ts`'
- en: '[PRE9]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The decorator of an Angular module defines a set of properties that can be
    used to configure the module. The most common ones are as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 模块的装饰器定义了一组可以用于配置模块的属性。最常见的一些如下：
- en: '`declarations`: Defines Angular components that are part of the Angular module.
    Every component that exists in the Angular module *must* be added to the `declarations`
    array.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`declarations`：定义属于 Angular 模块的 Angular 组件。Angular 模块中存在的每个组件*必须*添加到 `declarations`
    数组中。'
- en: '`imports`: Defines other Angular modules that contain the functionality the
    Angular module needs.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imports`：定义包含 Angular 模块所需功能的其他 Angular 模块。'
- en: 'Let’s get our feet wet now by modifying the code of our Angular application.
    We will change the following greeting message, which is displayed at application
    startup, to something more meaningful:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过修改我们的 Angular 应用程序的代码来试试水。我们将更改以下在应用程序启动时显示的问候信息，使其更有意义：
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_11.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图像  自动生成的描述](img/B18465_01_11.png)'
- en: Figure 1.11 – Greeting message
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – 欢迎信息
- en: First, we need to find where the message in the previous screenshot is declared.
    The main component of an Angular application is the component that is loaded at
    application startup by default.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要找到上一张截图中的消息声明位置。Angular 应用程序的主组件是默认在应用程序启动时加载的组件。
- en: The `bootstrap` property of the main module of the application indicates the
    component that is displayed when an Angular application is bootstrapped. We rarely
    need to change this property. The selector of that component is used in the `index.html`
    file by default.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序主模块的 `bootstrap` 属性指示在 Angular 应用程序启动时显示的组件。我们很少需要更改此属性。该组件的选择器默认在 `index.html`
    文件中使用。
- en: 'So, the message should be declared inside the `app.component.ts` file. Let’s
    take a look:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，消息应该在 `app.component.ts` 文件中声明。让我们看一下：
- en: Open the VS Code editor and select **File | Open folder…** from the main menu.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VS Code 编辑器并从主菜单中选择 **文件 | 打开文件夹…**。
- en: Find the `my-app` folder of the Angular application that we created and select
    it.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到我们创建的 Angular 应用程序的 `my-app` 文件夹并选择它。
- en: Navigate to the `src\app` folder from the **EXPLORER** pane and select the `app.component.ts`
    file.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **资源管理器** 窗格导航到 `src\app` 文件夹并选择 `app.component.ts` 文件。
- en: 'Locate the `title` property in the `AppComponent` class and change its value
    to `Angular Projects`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AppComponent` 类中找到 `title` 属性并将其值更改为 `Angular Projects`：
- en: '[PRE10]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run `ng serve` from the terminal window if the application is not running,
    and navigate to `http://localhost:4200` using your browser. Our Angular application
    should now display the following greeting message:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果应用程序没有运行，请在终端窗口中运行 `ng serve`，然后使用浏览器导航到 `http://localhost:4200`。我们的 Angular
    应用程序现在应该显示以下问候信息：
- en: '![Figure 1.14 – Greeting message](img/B18465_01_12.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14 – 欢迎信息](img/B18465_01_12.png)'
- en: Figure 1.12 – Greeting message
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 欢迎信息
- en: 'The `title` property is bound to the template of the main component. If we
    open the `app.component.html` file and go to line 344, we will see the following
    HTML code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`title` 属性绑定到主组件的模板。如果我们打开 `app.component.html` 文件并转到第 344 行，我们将看到以下 HTML 代码：'
- en: '[PRE11]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `{{}}` syntax surrounding the `title` property is called **interpolation**.
    During interpolation, the Angular framework reads the enclosed component property
    value, converts it into text, and prints it on the screen.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 围绕 `title` 属性的 `{{}}` 语法称为**插值**。在插值过程中，Angular 框架读取包含的组件属性值，将其转换为文本，并在屏幕上打印出来。
- en: The Angular CLI provides a rich collection of commands to assist us during our
    daily development routine. However, many developers struggle to use the command
    line and prefer a more graphical approach. In the next section, we will learn
    how to use the Nx Console, a graphical user interface for the Angular CLI.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 提供了丰富的命令集合，以协助我们在日常开发过程中。然而，许多开发者发现使用命令行很困难，更倾向于图形化方法。在下一节中，我们将学习如何使用
    Nx 控制台，它是 Angular CLI 的图形用户界面。
- en: Using Nx Console for automating Angular CLI commands
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nx Console 自动化 Angular CLI 命令
- en: 'The Angular CLI is a command-line tool with a variety of commands. Each command
    can accept a wide range of options and parameters according to the task we want
    to accomplish. Remembering these commands and their options by heart is daunting
    and time-consuming. In such cases, the ecosystem of Angular tooling can come in
    handy. VS Code Marketplace contains many useful extensions that we can install
    to help us during Angular development. One of these extensions is the Nx Console,
    which provides a user interface over the Angular CLI. To install the Nx Console
    in your environment, follow these steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI 是一个具有各种命令的命令行工具。每个命令可以根据我们想要完成的任务接受广泛的各种选项和参数。记住这些命令及其选项是一项艰巨且耗时的工作。在这种情况下，Angular
    工具生态系统可以派上用场。VS Code 市场包含许多有用的扩展，我们可以安装它们来帮助我们进行 Angular 开发。其中之一就是 Nx 控制台，它提供了一个
    Angular CLI 的用户界面。要在您的环境中安装 Nx 控制台，请按照以下步骤操作：
- en: 'Open VS Code and click on the **Extensions** menu in the sidebar:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VS Code 并在侧边栏中点击 **扩展** 菜单：
- en: '![Figure 1.15 – VSCode Extensions](img/B18465_01_13.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – VSCode 扩展](img/B18465_01_13.png)'
- en: Figure 1.13 – VS Code Extensions
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – VS Code 扩展
- en: In the **EXTENSIONS** pane that appears, type `Nx Console`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的 **扩展** 面板中，键入 `Nx Console`。
- en: Click the **Install** button on the first item to install the Nx Console extension.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个项目上点击 **安装** 按钮来安装 Nx Console 扩展。
- en: 'The Nx Console extension is now installed globally in our environment, so we
    can use it in any Angular project. It is a graphical representation of the most
    common Angular CLI commands. Currently, it supports the following commands (the
    related Angular CLI command is shown in parentheses):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Nx Console 扩展现在已在全球环境中安装，因此我们可以在任何 Angular 项目中使用它。它是最常见的 Angular CLI 命令的图形表示。目前，它支持以下命令（括号中显示的是相关的
    Angular CLI 命令）：
- en: '**generate**: Generate new Angular artifacts, such as components and modules
    (`ng generate`).'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成**：生成新的 Angular 艺术品，如组件和模块（`ng generate`）。'
- en: '**run**: Run an architect target, as defined in the `angular.json` configuration
    file of the Angular CLI workspace (`ng run`).'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：运行在 Angular CLI 工作区的 `angular.json` 配置文件中定义的架构目标（`ng run`）。'
- en: '**build**: Build an Angular application (`ng build`).'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：构建 Angular 应用程序（`ng build`）。'
- en: '**serve**: Build and serve an Angular application (`ng serve`).'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：构建并运行 Angular 应用程序（`ng serve`）。'
- en: '**test**: Run the unit tests of an Angular application (`ng test`).'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：运行 Angular 应用程序的单元测试（`ng test`）。'
- en: 'The Nx Console can almost achieve whatever we can do with the Angular CLI.
    The real benefit is that the developer does not need to remember all the Angular
    CLI command options, as they are all represented in a graphical interface. Let’s
    see how:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Nx 控制台几乎可以实现我们使用 Angular CLI 可以做到的所有事情。真正的好处是开发者不需要记住所有 Angular CLI 命令选项，因为它们都在图形界面中得到了表示。让我们看看它是如何做到的：
- en: 'Open the `my-app` folder using VS Code and click on the **Nx Console** menu
    in the sidebar:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 VS Code 打开 `my-app` 文件夹，并在侧边栏中点击 **Nx 控制台** 菜单：
- en: '![Figure 1.16 – Nx Console](img/B18465_01_14.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – Nx 控制台](img/B18465_01_14.png)'
- en: Figure 1.14 – Nx Console
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – Nx 控制台
- en: 'Select the **serve** command from the **PROJECTS** pane and click the **play**
    button to execute it:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目** 面板中选择 **运行** 命令，然后点击 **播放** 按钮来执行它：
- en: '![](img/B18465_01_15.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18465_01_15.png)'
- en: Figure 1.15 – The serve command
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – serve 命令
- en: 'VS Code opens an integrated terminal at the bottom of the editor and executes
    the **ng serve** command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VS Code 在编辑器底部打开一个集成终端并执行 **ng serve** 命令：
- en: '![Εικόνα που περιέχει κείμενο  Περιγραφή που δημιουργήθηκε αυτόματα](img/B18465_01_16.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图片  自动生成的描述](img/B18465_01_16.png)'
- en: Figure 1.16 – VS Code integrated terminal
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – VS Code 集成终端
- en: It is the same command we run when using the Angular CLI from a terminal window.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们从终端窗口使用 Angular CLI 时运行的相同命令。
- en: The Nx Console uses **tasks** internally to run Angular CLI commands. Tasks
    are a built-in mechanism of VS Code that allow us to run scripts or start external
    processes without interacting directly with the command line.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Nx 控制台内部使用 **任务** 来运行 Angular CLI 命令。任务是 VS Code 的内置机制，允许我们运行脚本或启动外部进程，而无需直接与命令行交互。
- en: The Nx Console extension does a fantastic job of removing the burden of remembering
    Angular CLI commands by heart. The VS Code Marketplace contains many more extensions
    for Angular developers that supplement the job of the Nx Console.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Nx 控制台扩展出色地减轻了记住 Angular CLI 命令的负担。VS Code 市场上有许多针对 Angular 开发者的扩展，这些扩展补充了 Nx
    控制台的工作。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the basic principles of the Angular framework
    and provided a brief overview of the Angular architecture. We saw some popular
    extensions for VS Code that we can use to enhance our development experience while
    working with Angular.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Angular 框架的基本原则，并简要概述了 Angular 架构。我们看到了一些流行的 VS Code 扩展，我们可以使用这些扩展来增强我们在使用
    Angular 进行开发时的体验。
- en: Then, we learned how to use the Angular CLI, a powerful tool of the Angular
    ecosystem, to scaffold and build a new Angular application from scratch. We also
    made our first interaction with Angular code by modifying the Angular component
    of a typical Angular CLI application. Finally, we installed the Nx Console extension
    and learned how to build our application.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了如何使用 Angular CLI，这是 Angular 生态系统中的一个强大工具，可以从头开始构建新的 Angular 应用程序。我们还通过修改典型
    Angular CLI 应用程序的 Angular 组件，首次与 Angular 代码进行了交互。最后，我们安装了 Nx 控制台扩展，并学习了如何构建我们的应用程序。
- en: In the next chapter, we will look at the Angular Router and learn how to use
    it to create a personal blog, using the Scully static website generator.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Angular 路由，并学习如何使用它来创建个人博客，使用 Scully 静态网站生成器。
- en: Practice questions
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践问题
- en: 'Let’s take a look at a few practice questions:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看几个实践问题：
- en: What is the basic building block of an Angular application?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Angular 应用程序的基本构建块是什么？
- en: How do we group components of similar functionality?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何将功能相似的组件分组？
- en: Who handles business logic tasks in an Angular application?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Angular 应用程序中谁处理业务逻辑任务？
- en: Which Angular CLI command can we use to create a new Angular application?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个 Angular CLI 命令来创建新的 Angular 应用程序？
- en: Which Angular CLI command can we use to serve an Angular application?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个 Angular CLI 命令来提供 Angular 应用程序？
- en: How do we declare an Angular component in HTML?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 HTML 中声明 Angular 组件？
- en: How do we declare Angular components in a module?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在模块中声明 Angular 组件？
- en: What syntax do we use to bind text on HTML templates?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 HTML 模板上绑定文本时使用什么语法？
- en: What is the benefit of using the Nx Console?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Nx 控制台有什么好处？
- en: Which extension do we use to perform static analysis in our Angular code?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Angular 代码中用哪个扩展来执行静态分析？
- en: Further reading
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are some links to build upon what we learned in the chapter:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些链接，可以帮助我们巩固本章所学的内容：
- en: 'Introduction to Basic Angular Concepts: [https://angular.io/guide/architecture](https://angular.io/guide/architecture)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本 Angular 概念简介：[https://angular.io/guide/architecture](https://angular.io/guide/architecture)
- en: 'Interpolation: [https://angular.io/guide/interpolation](https://angular.io/guide/interpolation)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值：[https://angular.io/guide/interpolation](https://angular.io/guide/interpolation)
- en: 'Nx Console: [https://nx.dev/core-features/integrate-with-editors#vscode-plugin:-nx-console](https://nx.dev/core-features/integrate-with-editors#vscode-plugin:-nx-console)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nx 控制台：[https://nx.dev/core-features/integrate-with-editors#vscode-plugin:-nx-console](https://nx.dev/core-features/integrate-with-editors#vscode-plugin:-nx-console)
- en: 'Angular Essentials: [https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 精要：[https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials)
- en: 'Angular Evergreen: [https://expertlysimple.io/get-evergreen](https://expertlysimple.io/get-evergreen)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular Evergreen：[https://expertlysimple.io/get-evergreen](https://expertlysimple.io/get-evergreen)
