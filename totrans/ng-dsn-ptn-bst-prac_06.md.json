["```js\nng g c diary/new-entry-form-template\n```", "```js\n. . .\nimport { RouterModule } from '@angular/router';\n@NgModule({\n declarations: [\n   DiaryComponent,\n   EntryItemComponent,\n   ListEntriesComponent,\n   NewItemButtonComponent,\n   NewEntryFormTemplateComponent,\n ],\n imports: [CommonModule, DiaryRoutingModule, RouterModule],\n})\nexport class DiaryModule {}\n```", "```js\n. . .\nimport { NewEntryFormTemplateComponent } from './new-entry-form-template/new-entry-form-template.component';\nconst routes: Routes = [\n  {\n    path: '',\n    component: DiaryComponent,\n  },\n  {\n    path: 'new-template',\n    component: NewEntryFormTemplateComponent,\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DiaryRoutingModule {}\n```", "```js\n. . .\nimport { Router } from '@angular/router';\n@Component({\n  templateUrl: './diary.component.html',\n  styleUrls: ['./diary.component.css'],\n})\nexport class DiaryComponent implements OnInit {\n  private exerciseSetsService = inject(ExerciseSetsService);\n  private router = inject(Router)\n. . .\n  addExercise(newSet: ExerciseSet) {\n    this.router.navigate(['/home/new-template'])\n  }\n. . .\n}\n```", "```js\n<div class=\"flex h-screen items-center justify-center bg-gray-200\">\n  <form class=\"mx-auto max-w-sm rounded bg-gray-200 p-4\">\n      . . .\n      <input\n        type=\"date\"\n        id=\"date\"\n         name=\"date\"\n     />\n. . .\n      <input\n        type=\"text\"\n        id=\"exercise\"\n        name=\"exercise\"\n      />\n. . .\n      <input\n        type=\"number\"\n        id=\"sets\"\n        name=\"sets\"\n      />\n  </div>\n  <input\n    type=\"number\"\n    id=\"reps\"\n    name=\"reps\"\n  />\n   </div>\n   <div class=\"flex items-center justify-center\">\n     <button\n       type=\"submit\"\n     >\n     Add Entry\n     </button>\n...\n```", "```js\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [\n    DiaryComponent,\n    EntryItemComponent,\n    ListEntriesComponent,\n    NewItemButtonComponent,\n    NewEntryFormTemplateComponent,\n  ],\n  imports: [CommonModule, DiaryRoutingModule, RouterModule, FormsModule],\n})\nexport class DiaryModule {}\n```", "```js\n. . .\n<form\n  (ngSubmit)=\"newEntry()\"\n  class=\"mx-auto max-w-sm rounded bg-gray-200 p-4\">\n    <div class=\"mb-4\">\n      . . .\n      <input type=\"date\" id=\"date\" name=\"date\"\n      . . .\n        [(ngModel)]=\"entry.date\"\n      />\n    </div>\n    <div class=\"mb-4\">\n      . . .\n      <input type=\"text\" id=\"exercise\" name=\"exercise\"\n[(ngModel)]=\"entry.exercise\"\n      . . . />\n    </div>\n    <div class=\"mb-4\">\n. . .\n      <input type=\"number\" id=\"sets\" name=\"sets\"  [(ngModel)]=\"entry.sets\"\n. . ./>\n    </div>\n    <div class=\"mb-4\">\n. . .\n      <input type=\"number\" id=\"reps\" name=\"reps\" [(ngModel)]=\"entry.reps\"\n . . ./>\n. . .\n</form>\n</div>\nngSubmit parameter to state which method will be called by Angular when the user submits the form. Then, we link the HTML input elements with the data model that will represent the form. We do this through the [(ngModel)] directive.\n`ngModel` is an object managed by the `FormModule` module that represents the form’s data model. The use of square brackets and parentheses signals to Angular that we are performing a two-way data binding on the property.\nThis means that the `ngModel` property will both receive the `form` property and emit events. Finally, for development and debugging purposes, we are placing the content of the entry object in the footer and formatting it with the JSON pipe.\nLet’s finish the form by changing the component’s TypeScript file:\n\n```", "```js\n\n First, we inject the `ExerciseSetsService` service for the backend communication and the router service because we want to return to the diary as soon as the user creates a new entry.\nSoon after we create the entry object that represents the form’s data model, it is important that we start it with an empty object because Angular makes the binding as soon as the form is loaded. Finally, we create the `newEntry` method, which will send the form data to the backend through the `ExerciseSetsService` service.\nFor more details about Angular services, see [*Chapter 5*](B19562_05.xhtml#_idTextAnchor163), *Angular Services and the Singleton Pattern*. If we run our project and fill in the data, we can see that we are back to the diary screen with the new entry in it.\nNotice that at no point did we need to interact with the entry object, as Angular’s form template engine took care of that for us! This type of form can be used for simpler situations, but now we will see the way recommended by the Angular team to create all types of forms: reactive forms!\nReactive forms\nReactive forms use a declarative and explicit approach to creating and manipulating form data. Let’s put this concept into practice by creating a new form for our project.\nFirst, on the command line, let’s use the Angular CLI to generate the new component:\n\n```", "```js\n\n In the same way as we did with the template-driven form, let’s add this new component to the `DiaryRoutingModule` routing module:\n\n```", "```js\n\n In the `DiaryModule` module, we need to add the `ReactiveFormsModule` module responsible for all the functionality that Angular makes available to us for this type of form:\n\n```", "```js\n\n To finalize the component’s route, let’s change the main screen of our application, replacing the route that the **New Entry** button will call:\n\n```", "```js\n\n We will now start creating the reactive form. First, let’s configure the component elements in the `new-entry-form-reactive.component.ts` TypeScript file:\n\n```", "```js\n\n Note that the first attribute is `entryForm` of type `FormGroup`. It will represent our form—not just the data model, but the whole form—as validations, field structure, and so on.\nThen, we inject the `FormBuilder` service responsible for assembling the `entryForm` object. Note the name of the service that Angular uses from the `Builder` design pattern, which has the objective of creating complex objects, such as a reactive form.\nTo initialize the `entryForm` attribute, we’ll use the `onInit` component lifecycle hook. Here, we’ll use the `group` method to define the form’s data model. This method receives the object, and each attribute receives an array that contains the characteristics of that attribute in the form. The first element of the array is the initial value of the attribute.\nIn the component’s template, we will create the structure of the form, which, in relation to the template-driven form example, is very similar:\n\n```", "```js\nexport class NewEntryFormReactiveComponent implements OnInit {\n  . . .\n  private exerciseSetsService = inject(ExerciseSetsService);\n  private router = inject(Router);\n  . . .\n  newEntry() {\n    const newEntry = { ...this.entryForm.value };\n    this.exerciseSetsService\n      .addNewItem(newEntry)\n      .subscribe((entry) => this.router.navigate(['/home']));\n  }\n}\n```", "```js\n. . .\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n. . .\nexport class NewEntryFormReactiveComponent implements OnInit {\n. . .\n ngOnInit() {\n   this.entryForm = this.formBuilder.group({\n     date: ['', Validators.required],\n     exercise: ['', Validators.required],\n     sets: ['', [Validators.required, Validators.min(0)]],\n     reps: ['', [Validators.required, Validators.min(0)]],\n   });\n }\nnewEntry() {\n   if (this.entryForm.valid) {\n     const newEntry = { ...this.entryForm.value };\n     this.exerciseSetsService\n       .addNewItem(newEntry)\n       .subscribe((entry) => this.router.navigate(['/home']));\n   }\n }\n}\n```", "```js\n  <div\n    *ngIf=\"entryForm.get('date')?.invalid && entryForm.get('date')?.touched\"\n    class=\"mt-1 text-red-500\"\n  >\n    Date is required.\n  </div>\n  <div\n    *ngIf=\"\n      entryForm.get('exercise')?.invalid &&\n      entryForm.get('exercise')?.touched\n      \"\n    class=\"mt-1 text-red-500\"\n  >\n    Exercise is required.\n  </div>\n   . . .\n  <div\n    *ngIf=\"entryForm.get('sets')?.invalid && entryForm.get('sets')?.touched\"\n    class=\"mt-1 text-red-500\"\n  >\n    Sets is required and must be a positive number.\n  </div>\n  <div\n    *ngIf=\"entryForm.get('reps')?.invalid && entryForm.get('reps')?.touched\"\n    class=\"mt-1 text-red-500\"\n  >\n    Reps is required and must be a positive number.\n  </div>\n  <button\n    type=\"submit\"\n    [disabled]=\"entryForm.invalid\"\n    [class.opacity-50]=\"entryForm.invalid\"\n  >\n    Add Entry\n  </button>\n```", "```js\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nexport function multipleValidator(multiple: number): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const isNotMultiple = control.value % multiple !== 0;\n    return isNotMultiple ? { isNotMultiple: { value: control.value } } : null;\n  };\n}\n```", "```js\n. . .\nngOnInit() {\n  this.entryForm = this.formBuilder.group({\n    date: ['', Validators.required],\n    exercise: ['', Validators.required],\n    sets: [\n      '',\n      [Validators.required, Validators.min(0), multipleValidator(2)],\n    ],\n    reps: [\n      '',\n      [Validators.required, Validators.min(0), multipleValidator(3)],\n    ],\n  });\n}\n. . .\n```", "```js\n. . .\n    <div\n      *ngIf=\"\n        entryForm.get('sets')?.errors?.['isNotMultiple'] &&\n        entryForm.get('sets')?.touched\n      \"\n      class=\"mt-1 text-red-500\"\n    >\n      sets is required and must be multiple of 2.\n    </div>\n. . .\n    <div\n      *ngIf=\"\n        entryForm.get('reps')?.errors?.['isNotMultiple'] &&\n        entryForm.get('reps')?.touched\n      \"\n      class=\"mt-1 text-red-500\"\n    >\n      Reps is required and must be multiple of 3.\n    </div>\n. . .\n```", "```js\nexport class NewEntryFormReactiveComponent {\n  private formBuilder = inject(FormBuilder);\n  private exerciseSetsService = inject(ExerciseSetsService);\n  private router = inject(Router);\n  public entryForm = this.formBuilder.group({\n    date: [new Date(), Validators.required],\n    exercise: ['', Validators.required],\n    sets: [0, [Validators.required, Validators.min(0), multipleValidator(2)]],\n    reps: [0, [Validators.required, Validators.min(0), multipleValidator(3)]],\n  });\n  newEntry() {\n    if (this.entryForm.valid) {\n      const newEntry = { ...this.entryForm.value };\n      this.exerciseSetsService\n        .addNewItem(newEntry)\n        .subscribe((entry) => this.router.navigate(['/home']));\n    }\n  }\n}\n```", "```js\naddNewItem(item: Partial<ExerciseSet>): Observable<ExerciseSet> {\n  return this.httpClient.post<ExerciseSet>(this.url, item);\n}\n```", "```js\nexport class NewEntryFormReactiveComponent {\n. . .\n  private formBuilder = inject(NonNullableFormBuilder);\n. . .\n}\n```", "```js\n\n```"]