- en: Chapter 9. React Router and Data Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took a look at the React performance tools that
    can improve performance of our React apps. We explored using the PERF add-on,
    PureRenderMixin, and so on and took a look at some of the gotchas related to the
    performance tools provided by React.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a closer look at react-router and perform routing
    at different levels. We will take a look at nested routing and passing around
    parameters, as well as see how react-router maintains history when performing
    routing tasks. We will also take a look at passing and using context to render
    React Components. Finally, we will explore data-models and mix and match them
    with other frameworks to use as data models in React, Backbone in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: React in your apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing with react-router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different routing mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up routing and passing around the routing context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React and data stores/models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Backbone models/collections as data stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of chapter, we will be able to start using the react-router and different
    routing patterns and start passing around context data in routing. We will also
    be able to replace parts of plain data models with the likes of Backbone.js.
  prefs: []
  type: TYPE_NORMAL
- en: A new adventure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Hi Shawn and Mike!" exclaimed Carla.'
  prefs: []
  type: TYPE_NORMAL
- en: Shawn and Mike were startled. They had just got in and were about to start their
    day. The past few days had been a lot of React exploration for them.
  prefs: []
  type: TYPE_NORMAL
- en: '"I have some good news for you guys. We got a new project, where we need to
    build a cat-based interest site. Something like say – Pinterest? Users can like
    images and profiles of cats. They can then see and like related articles for sale,
    as well," continued Carla.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, nice," replied Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: Shawn and Mike regrouped and started a conversation about the new project that
    they just heard from Carla.
  prefs: []
  type: TYPE_NORMAL
- en: '"This is nice. So, I guess, we want to display a small Pinterest-style gallery
    of images in panel shapes?" inquired Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct," continued Mike. "We also want to display the images in large scale,
    maybe in a modal after a user clicks on the image. Carla said she wants random
    cats to be featured in the footer, which should take us to a full-fledged cat
    display page."'
  prefs: []
  type: TYPE_NORMAL
- en: '"You know what, I know the perfect thing that we are going use. Let''s take
    a look at react-router today! I also know the perfect example to start with. We
    are going to look at the Pinterest example from react-router at [https://github.com/rackt/react-router/tree/master/examples/pinterest](https://github.com/rackt/react-router/tree/master/examples/pinterest).
    We will then build our app on top of it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice," said Shawn. "I can see the existing example has some of the things
    that we discussed, such as the modal display. Let me see how the example looks."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Shawn looked at the example, which was as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"Looks interesting," said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, let''s go through the components that we need to create one by one.
    To begin with, let''s see how we are going to store our data and display the cat
    data across the system. Currently, the images are stored in the `PICTURES` constant.
    We would like to store more than that."'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Backbone models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"So, Shawn, let''s go ahead and build out our cats'' collection that we want
    to display. For the purpose of development, we are going to use cat images from
    lorempixel service, for example, [http://lorempixel.com/600/600/cats/](http://lorempixel.com/600/600/cats/).
    This will give us a random cat image of 600 x 600 pixels."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, we are going to create a store of data using different-than-normal objects.
    We want to explore how to embed different model flows with our React app here.
    In our case, let''s make use of Backbone models, instead of the PICTURES constant.
    I know that you have already used Backbone."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup, I have used it in my previous projects."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Alright then, let''s define our `Cat` model."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"Here we store the `src` for the image of a cat, its name, and some details
    about it. As you can see, we have provided some default values for these attributes."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, let''s define our `Cats` collection to all the `Cat` records."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we making use of the `Faker` module to create random names for the cats
    using `Faker.Name.findName()`, adding random description using `Faker.Lorem.paragraph()`
    and passing the source as needed."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool," said Shawn. "Let me see how this looks now."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Incorporating defined Backbone models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Next, let''s define our index with how we need the routing to be and what
    paths should the routing respond to. From there, we will go ahead with building
    our components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"So, the first thing I see is that we are creating a session history?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct, we are creating a session history over here. We will use it for our
    router."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Here, we are using the history module''s `useBasename` method, which provides
    support for running an app under a `base` URL, which in our case is `/pinterest`."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, we are laying out how we actually want the routing to be. We wrap our
    router into the `<Router/>` component and specify different `<Route/>` as paths."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is called the **Route Configuration**, which is basically a set of rules
    or instructions on how to match the URLs to some React Component in order to be
    displayed."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, can we discuss more about this configuration, it looks intriguing."'
  prefs: []
  type: TYPE_NORMAL
- en: '"It sure is. First, let''s see what `<IndexRoute component={Home}/>` does.
    When we land on the `/` page for the application, which in our case would be `/pinterest`,
    the component defined by `IndexRoute` gets rendered. As you might have guessed,
    the component to be rendered is passed in the component argument of the route.
    Note that this is displayed in the `App` component that is the base component
    for all."'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the `IndexRoute`, we have different `<Route/>` definitions. In our
    example, if you see `<Route path="/pictures/:id" component={Picture}/>`, it shows
    how route is getting used, and how we are passing attributes for the same. "Here,
    the path attribute is a matcher expression and component attribute specifies the
    component that is to be displayed after the route is matched."
  prefs: []
  type: TYPE_NORMAL
- en: '"Notice how the path is defined over here, it is specified as an expression."'
  prefs: []
  type: TYPE_NORMAL
- en: 'The matching for a route based on a URL is done on the basis of three components:'
  prefs: []
  type: TYPE_NORMAL
- en: Nesting of route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precedence of the route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shawn began, "I got the nesting part. I see that we have arranged our routes
    in a nested fashion, like a tree. The route matching and building is being done
    on the basis of this tree-like matching structure."
  prefs: []
  type: TYPE_NORMAL
- en: '"Right. Secondly, we have the path attribute. We can see examples for these:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"The path value is a string that acts as a regex, which can consist of the
    following parts:"'
  prefs: []
  type: TYPE_NORMAL
- en: '`:paramName`: For example, ID, which is the param passed in the URL such as
    `/pictures/12`. `12` gets parsed as `param id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`()`: This can be used to specify an optional path, such as `/pictures(/:id)`,
    this will match `/pictures` as well as `/pictures/12`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*`: As in case of regular expressions, `*` can be used to match any part of
    the expression, until the next `/`, `?`, or `#` occurs. For example, to match
    all the JPEG images, we can use `/pictures/*.jpg`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**`: Greedy matching, similar to *, but it matches greedily. For example,
    `/**/*.jpg` will match `/pictures/8.jpg` as well as `/photos/10.jpg`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Got it. Finally, what remains is the precedence? Most probably, it should
    use the first route that is defined in the file and satisfy the condition used
    to match the path?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Exactly," Mike exclaimed.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, before I forget, we also have a `<Redirect>` route. This can be used to
    match some routes to other route actions. For example, we want `/photos/12` to
    match `/pictures/12` instead, we can define it as code."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Awesome."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, let''s take a look at all the things that we are importing and using,
    which we will define as components."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s define our `App` component first, which is going to act as the container:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '"We aren''t going to change much here, this is from the example that we have
    already seen."'
  prefs: []
  type: TYPE_NORMAL
- en: '"I see the use of location here. Is this from react-router?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"As we saw, our `App` is wrapped into the router. The router passes in the
    location object from the props. The location object is actually similar to `window.location`
    and it is something the history module that we use defines. The `Location` object
    has various special attributes defined on top of it, which we are going to make
    use of, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '`pathname`: The actual pathname of the URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search`: The query string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: A state passed on from the react-router and tied as an object to the
    location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action`: One of the `PUSH`, `REPLACE`, or `POP` operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key`: The unique identifier for the location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Got it. I can see that we are making use of `props.children` we had seen before."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"We are storing the children and the previous screen onto the `App` object
    when the Modal is displayed, I guess," queried Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. We are first checking whether we are displaying a different Component
    by matching the key attribute of location. We then check whether the state attribute
    was passed on the location and whether the modal was set to true on state. We
    will be doing that in case of Modal display. Here''s how we will pass the state
    onto a link:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '" We will take a look at the `Link` object when we use it for the images."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it," said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Then I see that we are passing around the children props or rendering the
    previous layout, and then, displaying `Modal` on top of it if modal is clicked:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"Exactly! You are getting pretty good at this," Mike exclaimed.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, let''s see our main index page component, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"So Shawn, we are first importing all the data that we generate in the `Cats`
    collection. We are going to loop over them and display the images with links to
    Modals. You can see this happening here:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"Yup, I see that we are setting the key using `cat` object''s `cid` from the
    backbone object. We had to attribute for the link, which is path to where it should
    be linked, I guess?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s right. For every cat displayed, we have a unique dynamic route generated,
    such as `/pictures/121` and so on. Now, as we want to display the enlarged cat
    when we click on it, we are passing `modal: true` to state on `<Link/>`."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We are also passing a `returnTo` attribute that is related to the current
    path that we obtain from the current `location.pathname`. We will be using this
    `returnTo` attribute from state to set up back links on components. We will display
    one on the Modal so that we can get back to the home page when it''s clicked and
    the Modal will be closed."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. I see we are also defining a link for the sample cat display page
    here:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"Yup, we are going to randomly feature a cat here. We will display the details
    about the cat on the sample page. Now, I want to show you how we are creating
    the link here:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are creating a nested random route, for example, this can match a
    URL, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"The `123` and `456` act as params for the location."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice," followed Shawn. "Let me define the Modal? Let me reuse the one from
    the example."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"That''s simple and straightforward, Shawn. We also need to define how we display
    the pictures. Let''s define that."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"To display the cat and fetch details about it, we are using the ID that we
    receive from params. These are sent to us on the params prop. We are then fetching
    the ID from the `Cats` collection."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"Using the `id` prop, recall how we were sending the ID on the cat link that
    we defined as follows"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, let''s take a look at how the sample component is used to display
    the cat information from the example:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '"With this, it looks like we are done! Let''s see how it looks, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"The index page looks neat."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating defined Backbone models](img/4730_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Next, let''s see how the Modal and the links look with the URL."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The cat sure looks nice," chuckled Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating defined Backbone models](img/4730_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Haha, yes."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the URL. On clicking, the modal link changed to the one on the anchor
    tag. We are on the same page and the modal is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '"Finally, we have the sample page, where we display details of the cat. Let''s
    see how it looks:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Incorporating defined Backbone models](img/4730_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Awesome!"'
  prefs: []
  type: TYPE_NORMAL
- en: Data models and Backbone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, I wanted to discuss how we used Backbone models here or how we are
    storing the data. We moved from the following code to make use of Backbone collections.
    This helped us to define our data in a better way:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '"However, if you notice, we ended up defining a static collection of objects.
    Along with that, this collection was global and required to be passed around."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That is true. I also noticed that we had a fixed `state` in a global fashion
    for the data. I believe, we could have not done much there. If we updated, the
    `Views` would still remain the same?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Exactly! What''s happening in our case is that we are sending and using/modifying
    the data in a fixed fashion, globally. Any updates to this data in a different
    part of the application would not affect how our views were displayed or even
    the data that was already being accessed in different components would not change.
    For example, consider that the `Home` component changed the `Cats` constant. First
    of all, it would not sync the changes with Sample, Modal, or other components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Secondly, the change in the `Home` component to the `Cats` collection would
    not even change the `Home` component''s display!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ah, this is pretty tricky. I guess, we would end up storing all of this collection
    state in a global component state, such as the `App` component, which is rendered
    only once," followed Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes, we could do that. The problem in that case would be that we would need
    to manually maintain the state and update the state from the children components
    to the `App` components, and so forth. Imagine having to change the state for
    a cat on click, for example, someone faves an image of a cat. The event would
    take place on the `Picture` component and we would need to manually propagate
    the event to `Home` or `Modal` first and then to `App` in order to actually update
    the global collection."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That would not be good. I believe this would be hard to track and debug as
    well."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s right. In our next refactoring, we will try to change this approach
    and limit it to, say, the `App`. In the longer run, we would try out Flux."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, right, I have heard about it. It''s for passing around or accessing data
    and managing changes in data via events or something?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Umm, not exactly, it helps us to streamline the data flow in a unidirectional
    flow. The state maintained is propagated to the components and they update as
    required. Events, such as having a cat, may change the data store, which in turn
    changes the components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Anyway, I just wanted to give you an idea about this and why we will explore
    Flux later. For now, our solution works as expected."'
  prefs: []
  type: TYPE_NORMAL
- en: The day was coming to an end. It has been another interesting day at Adequate
    LLC. Shawn and Mike had collaborated and build a simple app using react-router
    and mixing Backbone models with it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a simple Pinterest-like app, making use of react-router
    and taking a closer look at it while performing routing at different levels. We
    also took a look at nested routing, passing around parameters, how the react-router
    maintains history, and so on, when performing the routing tasks. We took a look
    at how to pass and use the context to render the React components and mix Backbone
    models to maintain the Cats display data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore adding animation to content and some other
    display goodies on top of the existing app.
  prefs: []
  type: TYPE_NORMAL
