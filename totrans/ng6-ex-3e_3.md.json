["```js\n\"@angular/platform-browser-dynamic\": \"6.0.0\", \"@angular/router\": \"6.0.0\",\n```", "```js\n<title>Trainer</title>\n<base href=\"/\">\n```", "```js\nng generate component start -is\nng generate component finish -is\n```", "```js\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { WorkoutRunnerComponent } from './workout-runner/workout-runner.component';\nimport { StartComponent } from './start/start.component';\nimport { FinishComponent } from './finish/finish.component';\n\nconst routes: Routes = [\n    { path: 'start', component: StartComponent },\n    { path: 'workout', component: WorkoutRunnerComponent },\n    { path: 'finish', component: FinishComponent },\n    { path: '**', redirectTo: '/start' }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { enableTracing: true })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n```", "```js\nimport { FinishComponent } from './finish/finish.component';\nimport { AppRoutingModule } from './app-routing.module';\n @NgModule({ \n  imports: [..., StartModule, FinishModule, AppRoutingModule], \n```", "```js\n<abe-workout-runner></abe-workout-runner>\n```", "```js\n<router-outlet></router-outlet>\n```", "```js\n<a routerLink=\"/workout\">\n```", "```js\n<a ... href=\"/workout\">\n```", "```js\n@RouteConfig([ \n { path: '/users/:id', component: UserDetail }, \n  { path: '/users', component: UserList}, \n])\n```", "```js\n<a [routerLink]=\"['/users', 2]  // generates /users/2\n```", "```js\n['routePath', param1, param2, {prop1:val1, prop2:val2} ....] \n```", "```js\n<a [routerLink]=\"['/users', {id:2}]  // generates /users;id=2\n```", "```js\nimport {Router} from '@angular/router'; \n...\nconstructor(private router: Router) {\n```", "```js\nthis.router.navigate( ['/finish'] );\n```", "```js\n{ path: '/users/:id', component: UserDetailComponent },\n```", "```js\nexport class UserDetailComponent { \n  constructor( private route: ActivatedRoute ... \n```", "```js\nngOnInit() {\n    let id = +this.route.paramMap.get('id'); // (+) converts string 'id' to a number\n    var currentUser=this.getUser(id) \n}  \n```", "```js\nclass Tracker() { \n  logger:Logger; \n  constructor() { \n    this.logger = new Logger();    \n  } \n}\n```", "```js\nclass Tracker { \n  logger:Logger; \n  constructor(logger:Logger) { \n    this.logger = logger;    \n  } \n}\n```", "```js\n        var trackerWithDBLog=new Tracker(new DBLogger()); \n        var trackerWithMemoryLog=new Tracker(new MemoryLogger()); \n```", "```js\nconstructor(private router: Router) { \n```", "```js\nimports: [..., AppRoutingModule];\n```", "```js\nng generate module core --module app\n```", "```js\nng generate service workout-history-tracker\n```", "```js\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkoutHistoryTrackerService {\n    ...\n}\n```", "```js\n@Injectable({\n  providedIn: CoreModule\n})\nexport class WorkoutHistoryTrackerService {\n```", "```js\n@NgModule({\n  providers: [WorkoutHistoryTrackerService],\n})\nexport class CoreModule { }\n```", "```js\nimport { ExercisePlan } from '../workout-runner/model';\nimport { CoreModule } from './core.module';\nimport { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: CoreModule\n})\nexport class WorkoutHistoryTrackerService { \n  private maxHistoryItems = 20;   //Tracking last 20 exercises \n  private currentWorkoutLog: WorkoutLogEntry = null; \n  private workoutHistory: Array<WorkoutLogEntry> = []; \n  private  workoutTracked: boolean;\n```", "```js\n  constructor() { } \n\n  get tracking(): boolean { \n    return this. workoutTracked; \n  } \n}\n\nexport class WorkoutLogEntry { \n  constructor( \n    public startedOn: Date, \n    public completed: boolean = false, \n    public exercisesDone: number = 0, \n    public lastExercise?: string, \n    public endedOn?: Date) { } \n}\n```", "```js\nstartTracking() { \n  this.workoutTracked = true; \n  this.currentWorkoutLog = new WorkoutLogEntry(new Date()); \n  if (this.workoutHistory.length >= this.maxHistoryItems) { \n    this.workoutHistory.shift(); \n  } \n    this.workoutHistory.push(this.currentWorkoutLog); \n} \n\nexerciseComplete(exercise: ExercisePlan) { \n  this.currentWorkoutLog.lastExercise = exercise.exercise.title; \n  ++this.currentWorkoutLog.exercisesDone; \n} \n\nendTracking(completed: boolean) { \n  this.currentWorkoutLog.completed = completed; \n  this.currentWorkoutLog.endedOn = new Date(); \n  this.currentWorkoutLog = null; \n  this.workoutTracked = false; \n}\n```", "```js\ngetHistory(): Array<WorkoutLogEntry> { \n  return this.workoutHistory; \n}\n```", "```js\nimport { WorkoutHistoryTrackerService } from '../core/workout-history-tracker.service';\n... \nconstructor(private router: Router,\n    private tracker: WorkoutHistoryTrackerService   \n) {\n```", "```js\nthis.tracker.startTracking();\n```", "```js\nclearInterval(this.exerciseTrackingInterval); \nif (this.currentExercise !== this.restExercise) { this.tracker.exerciseComplete(this.workoutPlan.exercises[this.currentExerciseIndex]); }\n```", "```js\nthis.tracker.endTracking(true); \nthis.router.navigate(['/finish']); \n```", "```js\nexport class WorkoutRunnerComponent implements OnInit, OnDestroy {\n...\nngOnDestroy() { \n  this.tracker.endTracking(false); \n} \n```", "```js\n@Injectable({\n  providedIn: CoreModule\n})\nexport class WorkoutHistoryTrackerService {\n```", "```js\n@NgModule({...providers: [WorkoutHistoryTrackerService],})\n```", "```js\nproviders: [WorkoutHistoryTrackerService],\n```", "```js\nproviders:({ provide: WorkoutHistoryTrackerService, useClass: WorkoutHistoryTrackerService })\n```", "```js\n{provide: WorkoutHistoryTrackerService, useValue: new WorkoutHistoryTrackerService()};\n```", "```js\n{provide: WorkoutHistoryTrackerService, useValue: new WorkoutHistoryTrackerService(new LocalStorage())});\n```", "```js\n{provide: AppConfig, {useValue: {name:'Test App', gridSetting: {...} ...}}\n```", "```js\n{provide:WorkoutHistoryTrackerService, {useValue: new MockWorkoutHistoryTracker()}\n```", "```js\n{provide: AppConfig, useFactory: () => { \n  if(PRODUCTION) { \n    return {name:'Production App', gridSetting: {...} ...} \n  } \n  else { \n    return {name:'Test App', gridSetting: {...} ...} \n  }\n}\n```", "```js\n{provide: WorkoutHistoryTrackerService, useFactory: (environment:Environment) => { \n  if(Environment.isTest) { \n    return new MockWorkoutHistoryTracker(); \n  } \n  else { \n    return new WorkoutHistoryTrackerService(); \n  }, \n    deps:[Environment]\n}\n```", "```js\nconstructor(private router: Router, private injector:Injector) {\n  this.tracker=injector.get(WorkoutHistoryTrackerService);\n```", "```js\n{ provide: WorkoutHistoryTrackerService, useClass: WorkoutHistoryTrackerService }\n```", "```js\nconstructor(tracker: WorkoutHistoryTrackerService)\n```", "```js\nexport const APP_CONFIG = new InjectionToken('Application Configuration');\n```", "```js\n{ provide: APP_CONFIG, useValue: {name:'Test App', gridSetting: {...} ...});\n```", "```js\nconstructor(@Inject(APP_CONFIG) config) { }\n```", "```js\n{ provide: 'appconfig', useValue: {name:'Test App', gridSetting: {...} ...});\n...\nconstructor(@Inject('appconfig') config) { }\n```", "```js\nimport { WorkoutHistoryComponent } from './workout-history/workout-history.component'; \n... \nexport const routes: Routes = [ \n  ..., \n { path: 'history', component: WorkoutHistoryComponent } ,\n  { path: '**', redirectTo: '/start' } \n]) \n```", "```js\n<div id=\"header\">\n    <abe-header></abe-header>\n</div> \n```", "```js\nng generate component header -is\n```", "```js\nimports: [ CommonModule, RouterModule],\ndeclarations: [HeaderComponent],    \nexports: [HeaderComponent]\n```", "```js\n<a class=\"nav-link\" routerLink=\"/history\" title=\"Workout History\">History</a>\n```", "```js\nng generate component workout-history -is\n```", "```js\nngOnInit() { \n  this.history = this.tracker.getHistory(); \n}\n```", "```js\ngoBack() { \n  this.location.back(); \n}\n```", "```js\n*ngFor=\"let item of items| orderBy:fieldName\"\n```", "```js\n*ngFor=\"let item of items| orderBy:-fieldName\"\n```", "```js\nng generate module shared --module app\n```", "```js\nng generate pipe order-by\n```", "```js\n@Pipe({ name: 'orderBy' }) \nexport class OrderByPipe {\n  transform(value: Array<any>, field:string): any { \n   ... \n  } \n}\n```", "```js\n<tr *ngFor=\"let historyItem of history|orderBy:'-startedOn'; let i = index\"> \n```", "```js\ndeclarations:[...],\nexports:[OrderByPipe]\n```", "```js\nng generate pipe search\n```", "```js\n<label><input type=\"radio\" name=\"searchFilter\" value=\"\"  \n    (change)=\"completed = null\" checked=\"\">All </label> \n<label><input type=\"radio\" name=\"searchFilter\" value=\"true\"  \n    (change)=\"completed = $event.target.value=='true'\"> Completed </label> \n<label><input type=\"radio\" name=\"searchFilter\" value=\"false\"  \n    (change)=\"completed = $event.target.value=='true'\"> Incomplete </label> \n```", "```js\n<tr *ngFor=\"let historyItem of history |search:'completed':completed |orderBy:'-startedOn';  \n    let i = index\">\n```", "```js\nif (searchTerm == null) return [...value];\n```", "```js\nif (searchTerm == null) return [value];\n```", "```js\n<button (click)=\"addLog()\">Add Log</button>\n```", "```js\naddLog() { \n  this.history.push(Object.assign({}, this.history[this.history.length-1])); \n}\n```", "```js\nthis.history = [...this.history,  Object.assign({}, this.history[0])];\n```", "```js\n@Pipe({ \n  name: 'search', \n pure:false \n}) \n```", "```js\nif (searchTerm == null) return value;\n```", "```js\nif (searchTerm == null) return [...value];\n```", "```js\n@Component({ \n  selector: 'abe-workout-runner', \n  providers: [WorkoutHistoryTrackerService] \n  ...\n})\n```", "```js\nconsole.log(\"WorkoutHistoryTrackerService instance created.\")\n```", "```js\nproviders: [WorkoutHistoryTrackerService]\n```", "```js\n@Component({ \n  selector: 'abe-root', \n providers:[WorkoutHistoryTrackerService] \n} \nexport class AppComponent { \n```", "```js\nng generate service local-storage\n```", "```js\ngetItem<T>(key: string): T {\n    if (localStorage[key]) {\n      return <T>JSON.parse(localStorage[key]);\n    }\n    return null;\n}\n\nsetItem(key: string, item: any) {\n    localStorage[key] = JSON.stringify(item);\n}\n```", "```js\nimport {LocalStorage} from './local-storage'; \n... \nconstructor(private storage: LocalStorageService) {\n```", "```js\nconstructor(private storage: LocalStorage) { \n   this.workoutHistory = (storage.getItem<Array<WorkoutLogEntry>>(this.storageKey) || [])\n      .map((item: WorkoutLogEntry) => {\n        item.startedOn = new Date(item.startedOn.toString());\n        item.endedOn = item.endedOn == null ? null : new Date(item.endedOn.toString());\n        return item;\n      }); \n} \n```", "```js\nprivate storageKey = 'workouts';\n```", "```js\nthis.storage.setItem(this.storageKey, this.workoutHistory);\n```", "```js\nimport { Router, NavigationEnd } from '@angular/router';\nimport 'rxjs/add/operator/filter'; ... \nexport class HeaderComponent { \n  private showHistoryLink= true; \n  constructor(private router: Router) { \n    this.router.events.pipe( \n filter(e => e instanceof NavigationEnd))\n .subscribe((e: NavigationEnd) => {\n this.showHistoryLink = !e.url.startsWith('/workout');\n }); \n  } \n```", "```js\n<li *ngIf=\"showHistoryLink\"><a routerLink=\"/history\" ...>...</a></li>\n```", "```js\n<div *ngFor=\"let video of videos\" class=\"row\">\n      <div class=\"col-sm-12 p-2\">\n        <img class=\"video-image\" [src]=\"'//i.ytimg.com/vi/'+video+'/hqdefault.jpg'\" />\n      </div>\n</div> \n```", "```js\nnpm i ngx-modialog@5.0.0 --save\n```", "```js\nimport { RouterModule } from '@angular/router';\nimport { ModalModule } from 'ngx-modialog';\nimport { BootstrapModalModule } from 'ngx-modialog/plugins/bootstrap';\n...\nimports: [\n   ...\n ModalModule.forRoot(),\n BootstrapModalModule\n  ],\n```", "```js\nng generate component video-dialog -is\n```", "```js\n...\ndeclarations: [..., VideoDialogComponent], \nentryComponents:[VideoDialogComponent] \n```", "```js\n<div *ngFor=\"let video of videos\" (click)=\"playVideo(video)\"     ...> \n```", "```js\nimport { Modal } from 'ngx-modialog/plugins/bootstrap';\nimport { VideoDialogComponent, VideoDialogContext } from './video-dialog/video-dialog.component';\nimport { overlayConfigFactory } from 'ngx-modialog';\n... \nexport class VideoPlayerComponent { \n      @Input() videos: Array<string>;\n```", "```js\n\nconstructor(private modal: Modal) { } playVideo(videoId: string) { this.modal.open(VideoDialogComponent, \n                            overlayConfigFactory(new VideoDialogContext(videoId))); }\n}\n```", "```js\nng generate directive my-audio\n```", "```js\n    import {Directive, ElementRef} from '@angular/core'; \n\n    @Directive({ \n      selector: 'audio', \n      exportAs: 'MyAudio' \n    }) \n    export class MyAudioDirective { \n      private audioPlayer: HTMLAudioElement; \n      constructor(element: ElementRef) { \n        this.audioPlayer = element.nativeElement; \n      } \n    } \n```", "```js\n    stop() { \n      this.audioPlayer.pause(); \n    }\n\n    start() { \n      this.audioPlayer.play();\n    }\n    get currentTime(): number { \n      return this.audioPlayer.currentTime; \n    }\n\n    get duration(): number { \n      return this.audioPlayer.duration; \n    }\n\n    get playbackComplete() { \n      return this.duration == this.currentTime; \n    }\n```", "```js\n<audio #ticks=\"MyAudio\" loop src=\"img/tick10s.mp3\"></audio>\n<audio #nextUp=\"MyAudio\" src=\"img/nextup.mp3\"></audio>\n<audio #nextUpExercise=\"MyAudio\" [src]=\"'/assets/audio/' + nextupSound\"></audio>\n<audio #halfway=\"MyAudio\" src=\"img/15seconds.wav\"></audio>\n<audio #aboutToComplete=\"MyAudio\" src=\"img/321.wav\"></audio> \n```", "```js\n#ticks=\"MyAudio\"\n```", "```js\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MyAudioDirective } from '../../shared/my-audio.directive';\n\n@Component({\n ...\n})\nexport class WorkoutAudioComponent implements OnInit {\n @ViewChild('ticks') private ticks: MyAudioDirective;\n @ViewChild('nextUp') private nextUp: MyAudioDirective;\n @ViewChild('nextUpExercise') private nextUpExercise: MyAudioDirective;\n @ViewChild('halfway') private halfway: MyAudioDirective;\n @ViewChild('aboutToComplete') private aboutToComplete: MyAudioDirective;\n private nextupSound: string;\n\n  constructor() { } \n  ...\n}\n```", "```js\nstop() {\n    this.ticks.stop();\n    this.nextUp.stop();\n    this.halfway.stop();\n    this.aboutToComplete.stop();\n    this.nextUpExercise.stop();\n  }\n  resume() {\n    this.ticks.start();\n    if (this.nextUp.currentTime > 0 && !this.nextUp.playbackComplete) \n        { this.nextUp.start(); }\n    else if (this.nextUpExercise.currentTime > 0 && !this.nextUpExercise.playbackComplete)\n         { this.nextUpExercise.start(); }\n    else if (this.halfway.currentTime > 0 && !this.halfway.playbackComplete) \n        { this.halfway.start(); }\n    else if (this.aboutToComplete.currentTime > 0 && !this.aboutToComplete.playbackComplete) \n        { this.aboutToComplete.start(); }\n  }\n\n  onExerciseProgress(progress: ExerciseProgressEvent) {\n    if (progress.runningFor === Math.floor(progress.exercise.duration / 2)\n      && progress.exercise.exercise.name != 'rest') {\n      this.halfway.start();\n    }\n    else if (progress.timeRemaining === 3) {\n      this.aboutToComplete.start();\n    }\n  }\n\n  onExerciseChanged(state: ExerciseChangedEvent) {\n    if (state.current.exercise.name === 'rest') {\n      this.nextupSound = state.next.exercise.nameSound;\n      setTimeout(() => this.nextUp.start(), 2000);\n      setTimeout(() => this.nextUpExercise.start(), 3000);\n    }\n  } \n```", "```js\nexport class ExerciseProgressEvent {\n    constructor(\n        public exercise: ExercisePlan,\n        public runningFor: number,\n        public timeRemaining: number,\n        public workoutTimeRemaining: number) { }\n}\n\nexport class ExerciseChangedEvent {\n    constructor(\n        public current: ExercisePlan,\n        public next: ExercisePlan) { }\n} \n```", "```js\n    <input #emailId type=\"email\">Email to {{emailId.value}} \n    <button (click)= \"MailUser(emaild.value)\">Send</button> \nemailId, and then references it in the interpolation and the button click expression.\n```", "```js\n    <trainer-app> \n     <workout-runner #runner></workout-runner> \n     <button (click)= \"runner.start()\">Start Workout</button> \n    </trainer-app> \n```", "```js\n<audio #ticks=\"MyAudio\" loop src=\"img/tick10s.mp3\"></audio> \n\n<input #emailId type=\"email\">Email to {{emailId.value}}\n\n<workout-runner #runner></workout-runner> \n```", "```js\n    <audio #ticks=\"MyAudio\" loop src=\"img/tick10s.mp3\"></audio> \n```", "```js\n @ViewChild('ticks') private ticks: MyAudioDirective;\n```", "```js\n@ViewChild(MyAudioDirective) private ticks: MyAudioDirective; \n```", "```js\n@ViewChildren(MyAudioDirective) allAudios: QueryList<MyAudioDirective>; \n```", "```js\n<audio *ngFor=\"let clip of clips\" src=\"img/ \"+{{clip}}></audio> \n```", "```js\n<div class=\"row pt-4\">...</div>\n<abe-workout-audio></abe-workout-audio>\n```", "```js\n@ViewChild(WorkoutAudioComponent) workoutAudioPlayer: WorkoutAudioComponent; \n```", "```js\n    pause() { \n      clearInterval(this.exerciseTrackingInterval); \n      this.workoutPaused = true; \n this.workoutAudioPlayer.stop(); \n    }\n```", "```js\nthis.startExercise(next); \nthis.workoutAudioPlayer.onExerciseChanged(new ExerciseChangedEvent(next, this.getNextExercise()));\n```", "```js\nworkoutPaused: boolean; \n@Output() exercisePaused: EventEmitter<number> = \n    new EventEmitter<number>(); @Output() exerciseResumed: EventEmitter<number> = \n    new EventEmitter<number>() @Output() exerciseProgress:EventEmitter<ExerciseProgressEvent> = \n    new EventEmitter<ExerciseProgressEvent>(); @Output() exerciseChanged: EventEmitter<ExerciseChangedEvent> = \n    new EventEmitter<ExerciseChangedEvent>(); @Output() workoutStarted: EventEmitter<WorkoutPlan> = \n    new EventEmitter<WorkoutPlan>(); @Output() workoutComplete: EventEmitter<WorkoutPlan> = \n    new EventEmitter<WorkoutPlan>();\n```", "```js\n@Output() exercisePaused: EventEmitter<number> = new EventEmitter<number>(); \n```", "```js\n<abe-workout-runner (exercisePaused)=\"onExercisePaused($event)\"></abe-workout-runner>\n```", "```js\n<div id=\"pause-overlay\" (click)=\"pauseResumeToggle()\" (window:keyup)=\"onKeyPressed($event)\"> \n```", "```js\nthis.workoutStarted.emit(this.workoutPlan);\n```", "```js\nthis.exercisePaused.emit(this.currentExerciseIndex); \n```", "```js\nthis.exerciseResumed.emit(this.currentExerciseIndex); \n```", "```js\nthis.startExercise(next); \nthis.exerciseChanged.emit(new ExerciseChangedEvent(next, this.getNextExercise()));\n```", "```js\nthis.tracker.endTracking(true); \nthis.workoutComplete.emit(this.workoutPlan); \nthis.router.navigate(['finish']); \n```", "```js\n--this.workoutTimeRemaining; \nthis.exerciseProgress.emit(new ExerciseProgressEvent( this.currentExercise, this.exerciseRunningDuration, this.currentExercise.duration -this.exerciseRunningDuration, this.workoutTimeRemaining));\n```", "```js\n        <workout-audio [stopped]=\"workoutPaused\"></workout-audio>\n```", "```js\n <abe-workout-audio></abe-workout-audio> \n```", "```js\nprivate subscriptions: Array<any>; \n\nconstructor( @Inject(forwardRef(() => WorkoutRunnerComponent)) \n    private runner: WorkoutRunnerComponent) { \n    this.subscriptions = [ \n      this.runner.exercisePaused.subscribe((exercise: ExercisePlan) => \n          this.stop()), \n      this.runner.workoutComplete.subscribe((exercise: ExercisePlan) => \n          this.stop()), \n      this.runner.exerciseResumed.subscribe((exercise: ExercisePlan) => \n          this.resume()), \n      this.runner.exerciseProgress.subscribe((progress: ExerciseProgressEvent) => \n          this.onExerciseProgress(progress)),\n```", "```js\n\n      this.runner.exerciseChanged.subscribe((state: ExerciseChangedEvent) =>  \n          this.onExerciseChanged(state))]; \n    } \n```", "```js\n    import {Component, ViewChild, Inject, forwardRef} from '@angular/core'; \n    import {WorkoutRunnerComponent} from '../workout-runner.component'  \n```", "```js\n    subscribe(generatorOrNext?: any, error?: any, complete?: any) : any \n```", "```js\n<audio #ticks=\"MyAudio\" loop src=\"img/tick10s.mp3\"></audio>\n<audio #nextUp=\"MyAudio\" src=\"img/nextup.mp3\"></audio>\n...\n```", "```js\nimport {..., AfterViewInit} from '@angular/core'; \n... \nexport class WorkoutAudioComponent implements OnInit, AfterViewInit { \n    ngAfterViewInit() { \n          this.ticks.start(); \n    }\n```", "```js\n    ngOnDestroy() { \n      this.subscriptions.forEach((s) => s.unsubscribe()); \n    }\n```", "```js\n    <workout-runner></workout-runner> \n    <workout-audio></workout-audio> \n```", "```js\n<abe-workout-runner (exercisePaused)=\"wa.stop()\" \n    (exerciseResumed)=\"wa.resume()\" \n    (exerciseProgress)= \"wa.onExerciseProgress($event)\" \n    (exerciseChanged)= \"wa.onExerciseChanged($event)\" \n    (workoutComplete)=\"wa.stop()\" \n    (workoutStarted)=\"wa.resume()\"> \n</abe-workout-runner> \n<abe-workout-audio #wa></abe-workout-audio> \n```", "```js\n    <workout-runner></workout-runner> \n```", "```js\nng generate component workout-container -is\n```", "```js\nimport {WorkoutContainerComponent} \n from './workout-runner/workout-container/workout-container.component'; \n..\n{ path: '/workout', component: WorkoutContainerComponent },\n```"]