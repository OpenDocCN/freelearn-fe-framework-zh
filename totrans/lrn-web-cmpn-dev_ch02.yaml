- en: Chapter 2. Introducing Polymer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to the Polymer library. You will learn
    how to install the Polymer library to an application, which will be followed by
    a section on core element and paper elements. In the later section of this chapter,
    you will explore the Polymer designer tool.
  prefs: []
  type: TYPE_NORMAL
- en: What is Polymer?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polymer is a library developed by Google developers to support web component
    development. Basically, it is built on the guidelines by W3C web component specification.
    Before it is implemented by all browsers, it also adds some syntactic sugar on
    top of the web component standards. The goal of Polymer is an attempt at getting
    a test of web component specification completely implemented by a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Polymer follows the element-based application development where we can build
    our own elements similar to an HTML element. Element-based application development
    increases reusability of the developed code across different applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Polymer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Polymer library can be obtained in the following three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading ZIP file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using GIT clone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading ZIP file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Polymer library can be downloaded as a zipped file using the link at [https://www.polymer-project.org/0.5/docs/start/getting-the-code.html#using-zip](https://www.polymer-project.org/0.5/docs/start/getting-the-code.html#using-zip)
    .The directory can be unzipped and the Polymer library can be extracted from it.
    The following screenshot shows the unzipped directory containing the Polymer library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading ZIP file](img/image00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Polymer library is present inside the `polymer` directory. The HTML file
    `polymer.html` is present inside the `polymer` directory. This `polymer.html`
    file can be included to application by using *HTML Import*. The following code
    shows the syntax of the Polymer file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using GIT clone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Polymer can also be cloned using the GIT tool. The command for cloning GIT
    in the project is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the GIT cloning of the Polymer library inside
    the Window''s command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using GIT clone](img/image00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the above GIT clone is completed, it creates a directory structure inside
    the current directory, as shown in the following screenshot. We can find the `polymer`
    directory that contains `polymer.html` and some other files inside the `components`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using GIT clone](img/image00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using Bower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bower is a package manager for web application development. A package manager
    is a collection of software tools that automate the process of installing, upgrading,
    configuring, and removing software packages for a computer's operating system
    in a consistent manner. To install Bower in the system, **node package manager**
    (**npm**) is required. More details about Bower installation are available at
    [http://bower.io/#install-bower](http://bower.io/#install-bower).
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that Bower is installed in the system, we will go ahead and install
    the Polymer library. For the first time, Bower can be initialized to a web application
    project using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding command is executed, it asks a set of questions regarding
    the web application configuration properties. The following screenshot shows the
    command prompt with the above command in effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bower](img/image00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the execution of the preceding command, it creates a `bower.json` file
    inside the application directory. The following code shows the content of the
    `bower.json` file containing all the default settings of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `bower.json` file is created, now we can install the Polymer library.
    Use the following command to install the Polymer library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt installing the Polymer library
    inside an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bower](img/image00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Polymer library is installed, the `bower.json` file gets updated with
    the dependencies property. The following code shows the updated content of the
    `bower.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Architecture of PolymerJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Polymer library is built upon multiple layers of technology, with each
    layer serving a specific purpose. The following diagram shows the technology stack
    of the Polymer library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Architecture of PolymerJS](img/image00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following list shows four important layers of Polymer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Native layer**: This layer represents the current state of browser support
    and implementation for the web component specification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foundation layer**: This layer contains the polyfill libraries for the web
    component specification. A polyfill is a piece of code that simulates behavior
    when it is not available natively in a browser. To find out more about polyfill,
    refer to [http://en.wikipedia.org/wiki/Polyfill](http://en.wikipedia.org/wiki/Polyfill).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core layer**: This layer contains the Polymer library code. The Polymer library
    can be found in the `polymer.html` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elements layer**: This layer contains the core and paper elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the top of the Polymer architecture, another layer of applications are present.
    This layer represents the applications developed using the Polymer library. So,
    we can conclude that the Polymer technology is built on the following three different
    building blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: Web components with polyfill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Polymer library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web components with polyfill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web component specification is new to browsers. It is not completely implemented
    by browsers, so to bridge this gap, Polymer comes with a polyfill in a `webcomponent.js`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the early release of the Polymer library, polyfill was named as `platform.js`.
    The `webcomponent.js` script provides the polyfill for the following technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shadow DOM**: This provides a private scope to separate the content from
    presentation. You can refer to [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1
    "Chapter 1. Introducing Web Components"), *Introducing Web Components* to revise
    the Shadow DOM concept.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML Imports**: This includes the external HTML document in the current page.
    You can refer to [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "Chapter 1. Introducing
    Web Components"), *Introducing Web Components* to revise the HTML Import concept.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom elements**: A new element can be created using custom element. You
    can refer to [Chapter 1](lrn-web-cmpn-dev_ch01.html#aid-DB7S1 "Chapter 1. Introducing
    Web Components"), *Introducing Web Components* to revise the custom element concept.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WeakMap**: The WeakMap object is a collection of key/value pairs in which
    the keys are used for getting the associated value. To find out more about WeakMap
    objects, refer to [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/WeakMap](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/WeakMap).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mutation observer**: This provides a way to execute a callback method by
    listening to the DOM changes. To find out more about mutation observer, refer
    to [https://developer.mozilla.org/en/docs/Web/API/MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During the installation of Polymer using Bower, the web component polyfill
    gets downloaded automatically to the project directory. To install the web component
    polyfill as an independent download, use the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also install the web component polyfill using npm. To install the web
    component polyfill using npm, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the above command is executed successfully, a `webcomponentsjs` directory
    is added to the project component directory. This directory contains the following
    polyfill files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ShadowDOM.js`: This JavaScript file contains the polyfill code for Shadow
    DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ShadowDOM.min.js`: This file is a minified version of `shadowDOM.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTMLImports.js`: This JavaScript file contains the polyfill code for HTML
    Imports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTMLImports.min.js`: This file is a minified version of `HTMLImports.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CustomElements.js`: This JavaScript file contains the polyfill code for custom
    elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CustomElements.min.js`: This file is a minified version of `CustomElements.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webcomponents.js`: This JavaScript file contains the polyfill code for the
    entire web component specification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webcomponents.min.js`: This file is a minified version of `webcomponents.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webcomponents-lite.js`: This is a lighter version of `webcomponent.js` containing
    polyfill code for HTML imports and custom elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webcomponents-lite.min.js`: This file is a minified version of `webcomponents-lite.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To find out more about the web component polyfill, refer to [http://webcomponents.org/polyfills](http://webcomponents.org/polyfills).
  prefs: []
  type: TYPE_NORMAL
- en: The Polymer library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Polymer library is the core file of this framework and is built upon the
    web component polyfill. When installing the Polymer library using the Bower tool,
    a `polymer` directory gets installed to the project folder. This `polymer` directory
    mainly contains the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`polymer.js`: This is the core JavaScript file, which has the code for all
    the ''magical features'' provided by the Polymer library. We will explore these
    magical features in the coming section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polymer-min.js`: This is a minified version of the `polymer.js` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout.html`: This file contains CSS attributes for creating layout positions
    for the elements present inside the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polymer.html`: This file contains combined code by including links to `polymer.js`
    and `layout.html` files, and can be included to a current page using HTML Import.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Polymer world, everything is an element. The Polymer team come with
    a set of elements to build web application. These elements can be divided into
    the following two categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Core elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paper elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Polymer core elements are a set of general purpose UI and non-UI elements for
    building web pages. They include icons, layouts, toolbars, AJAX, signaling, and
    storage elements. There are many core elements present inside the Polymer library.
    We can directly download the entire set of core elements as a single ZIP from
    [https://bowerarchiver.appspot.com/archive?core-elements=Polymer/core-elements](https://bowerarchiver.appspot.com/archive?core-elements=Polymer/core-elements).
    Also, we can include the entire core element set using the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the installation of core elements in the command
    prompt using Bower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Core elements](img/image00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the preceding command is successfully executed, we can include the set
    of core elements to our web page by HTML Imports. The following code shows the
    HTML Import of core elements inside the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We can find the complete list of core elements at [https://www.polymer-project.org/docs/elements/core-elements.html](https://www.polymer-project.org/docs/elements/core-elements.html).
    However, we will explore few of them.
  prefs: []
  type: TYPE_NORMAL
- en: The core-input element
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `core-input` element is a single line input field, which extends the native
    HTML input element. To install the `core-input` field as a standalone component,
    we can use the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the `core-input` field
    installation in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The core-input element](img/image00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation of the `core-input` element, it can be imported using
    HTML Import. The code for including `core-input` to the current page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A normal input element can be converted to a core input by using the `is` attribute.
    The code for the `core-input` element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `core-input` element has the following properties and methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: This attribute is inherited from the `<input>` element and represents
    the current value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`committedValue`: This attribute contains the final value when the user hits
    the *Enter* key or blurs the input after changing the value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit`: This method is used to transfer the existing content inside the `value`
    attribute to the `committedValue` attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preventInvalidInput`: This is a Boolean property and takes true value to prevent
    the invalid input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s check out an example of using the `core-input` value and the preceding
    properties/methods. The following code shows the use of `core-input` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A `core-input` element with the `coreInput1` ID is included in the code. The
    `coreInput1` element is of type number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This `coreInput1` element has the `preventInvalidInput` attribute set to `true`,
    which helps in preventing any invalid input from the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `changeHandler` method is attached to the change event of the `coreInput1`
    element and gets called when any change is detected in the core element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's enter a valid number `1` into the core element and then click on the body
    of the page. This user action will trigger the `changeHandler` method to be executed.
    The following screenshot shows the output of the preceding code, where the **1**
    is entered to the core input element:![The core-input element](img/image00235.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's enter another number `2`, which again triggers the `changeHandler` method
    to be executed. The following screenshot shows the output of the preceding code,
    where **2** is entered to the core input element:![The core-input element](img/image00236.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To find out more about the Polymer core-input element, refer to [https://www.polymer-project.org/docs/elements/core-elements.html#core-input](https://www.polymer-project.org/docs/elements/core-elements.html#core-input).
  prefs: []
  type: TYPE_NORMAL
- en: The core-label element
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `core-label` element provides a feature of the `<label>` element to target
    a specific element. To install `core-label` as a standalone component, we can
    use the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the `core-label` element
    installation in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The core-label element](img/image00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation of the `core-label` element, it can be imported using
    the HTML Import. The code for including the core input to the current page is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the `core-label` element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `core-label` element has the `for` property. The `for` attribute works like
    a query selector for targeting elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s check out an example of using the `core-label` element. The following
    code shows the different usages of the `core-label` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `core-label` element has been used to target core
    input elements. This targeting has been done in two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using for attribute**: The **Student Name** text is used as a label to target
    the `coreInput1` element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wrapping target element**: The **Student Subject** text is used as a label
    to the `core-input` element by wrapping it up inside a `core-label` element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the preceding code, giving two
    different usages of the `core-label` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The core-label element](img/image00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The core-tooltip element
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `core-tooltip` element provides the feature of showing supportive information
    in a tooltip by targeting a specific element. To install `core-tooltip` as a standalone
    component, we can use the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the `core-tooltip` element
    installation in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The core-tooltip element](img/image00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation of the `core-tooltip` element, it can be imported using
    the HTML Import. The code for including the `core-tooltip` to the current page
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the `core-tooltip` element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `core-tooltip` element has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Label`: This attribute takes a string to display as a tooltip for the current
    target element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Position`: This attribute takes the `right`, `left`, `top`, and `bottom` as
    values to align the tooltip around the target element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Show`: This attribute takes the Boolean value and for the `true` value makes
    the tooltip appear by default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tip/tipAttribute`: The `tip` attribute specifies the HTML content for a rich
    tooltip and customizes this attribute with the `tipAttribute` attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noArrow`: This attribute takes the Boolean value, and for `true` input, the
    arrow of the tooltip will not be shown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s check out an example of using the `core-tooltip` element. The following
    code shows the different usages of the `core-tooltip` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding code, demonstrating
    the use of the `core-tooltip` element and its different properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The core-tooltip element](img/image00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Paper elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Paper elements are built on top of the Polymer core element. These elements
    are more rich in UI compared to the core elements. Basically, paper elements are
    built on the guidelines of *Google Material Design*. The following diagram shows
    a graphical representation of the relationship between these elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Paper elements](img/image00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To find out more about *Google Material Design*, refer to [http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many paper elements present inside the Polymer library. We can directly
    download the entire set of paper element as a single ZIP file from [https://bowerarchiver.appspot.com/archive?paper-elements=Polymer/paper-elements](https://bowerarchiver.appspot.com/archive?paper-elements=Polymer/paper-elements).
    Also, we can include the entire paper element set using the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the installation of paper elements in the command
    prompt using Bower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Paper elements](img/image00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the preceding command is successfully executed, we can include the paper
    elements set to our web page by HTML Imports. The following code shows the HTML
    Import of the paper element inside the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We can find a complete list of the paper elements at [https://www.polymer-project.org/docs/elements/paper-elements.html](https://www.polymer-project.org/docs/elements/paper-elements.html).
    However, we will explore a few of them here.
  prefs: []
  type: TYPE_NORMAL
- en: Material design
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is a common design guideline for developing user interfaces across different
    devices. These guidelines are influenced with real-world material, such as paper
    and ink. The following diagram shows three building blocks—**Visual**, **Motion**,
    and **Interaction**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Material design](img/image00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To find out more about *Material Design* specification, refer to [http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: The paper-checkbox element
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `paper-checkbox` element provides the feature of a normal checkbox element,
    but with better visualization through animation. To install `paper-checkbox` as
    a standalone component, we can use the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the `paper-checkbox`
    element installation in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The paper-checkbox element](img/image00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation of the `paper-checkbox` element, it can be imported
    using the HTML Import. The code for including `paper-checkbox` to the current
    page is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the `paper-checkbox` element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `paper-checkbox` element has the following events that can be attached
    to a callback method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`change`: This event is fired when the checked state changes due to user interaction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core-change`: This event is fired when the checked state changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s check out an example of using the `paper-checkbox` element. The
    following code shows the different usages of the `paper-checkbox` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding code, demonstrating
    the use of `paper-checkbox`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The paper-checkbox element](img/image00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The paper-slider element
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `paper-slider` element provides the feature of a range element, but with
    better visualization with animation. To install `paper-slider` as a standalone
    component, we can use the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the `paper-slider` element
    installation in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The paper-slider element](img/image00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation of the `paper-slider` element, it can be included using
    the HTML Import. The code for including the paper slider to the current page is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the `paper-slider` element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `paper-slider` element has the following properties that can be used to
    customize the paper element:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Min, Max, and Value**: These are the properties inherited from the core range
    element and represent the lowest, highest, and current value of the slider respectively.
    To find out about core range element properties, refer to [https://www.polymer-project.org/docs/elements/core-elements.html#core-range](https://www.polymer-project.org/docs/elements/core-elements.html#core-range).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Snaps**: This is based on the step value, where the slider arranges tick
    marks evenly with the slider''s thumb snap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pin**: This property shows a visual pin, with a numeric value label shown
    when the slider thumb is pressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a few more properties present inside the `paper-slider` element that
    can be found at [https://www.polymer-project.org/docs/elements/paper-elements.html#paper-slider](https://www.polymer-project.org/docs/elements/paper-elements.html#paper-slider).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s check out an example of using the `paper-slider` element. The following
    code shows the different usages of the `paper-slider` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding code, demonstrating
    the use of `paper-slider` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The paper-slider element](img/image00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The paper-button element
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `paper-button` element provides the feature of a range element, but with
    better visualization through animation. To install `paper-button` as a standalone
    component, we can use the following Bower command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the `paper-button` element
    installation in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The paper-button element](img/image00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation of the `paper-button` element, it can be included using
    the HTML Import. The code for including `paper-button` to the current page is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for the `paper-button` element is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `paper-button` element has the following properties that can be used to
    customize the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`raised`: This attribute creates a shadow effect for the paper button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recenteringTouch`: The ripple effect produced by the button press can be customized
    using this attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fill`: This constrains the ripple effect produced by the button press to a
    circle within the button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s check out an example of using the `paper-button` element. The following
    code shows the different usages of the `paper-button` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding code, demonstrating
    the use of `paper-button` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The paper-button element](img/image00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Polymer designer tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Polymer designer tool is an online tool for creating Polymer elements visually.
    It provides a drag and drop environment for a developer to create web application
    pages. You can find this tool at [https://www.polymer-project.org/tools/designer/](https://www.polymer-project.org/tools/designer/).
    The source code for the designer tool can be found at [https://github.com/polymer/designer](https://github.com/polymer/designer).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the home page of the designer tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polymer designer tool](img/image00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The designer tool has the following three different main sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header menu toolbar**: This toolbar is present at the top of the designer
    tool. It contains the following seven different options for developers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle code/design**—Using this option, we can toggle the view between design
    and code.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save**—Using this option, we can save the progress of the development.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Share Gist**—Using this option, we can share the code with GitHub gist.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Launch preview**—Using this option, we can preview the developed page in
    a new window.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Undo**—Using this option, we can restore the last changed state.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redo**—Using this option, we can restore the next changed state.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle full width**—Using this option, we can make the design area to full
    width window.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main design area**: This is the drop target of the element. In this area,
    we can drop any element that needs to be present in the page. The design area
    is filled with horizontal and vertical grid lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right menu bar**: This bar is used to show the details of the currently selected
    element in the design. It is again divided into two subsections:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Properties and styles**: This subsection shows all the properties and style
    attributes of the currently selected element in the design area. We can change
    the value of any attribute or style for the selected element.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Palette and trees**: The palette view contains the entire set of draggable
    elements that can be dropped into the designer area. The tree section shows the
    current document tree of the page in parent–child relationship.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing with the designer tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will develop an e-mail subscription form using the Polymer
    designer tool. We have to follow these steps to work with the designer tool:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a GitHub token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing the e-mail subscription form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previewing the design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a GitHub token
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to get a GitHub token to save the work of the designer tool as a gist.
    When you click on the **Save** option, it asks for a GitHub token. You can get
    a new GitHub token from [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new).
    The following screenshot shows the form for creating a GitHub token:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting a GitHub token](img/image00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The GitHub token created for this example is `designerapp`. Now we can use
    this token in the designer tool. The following screenshot shows the popup window
    asking for a GitHub token when the **Save** option is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting a GitHub token](img/image00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the popup window, we can input the created GitHub token and we are ready
    for the next step—developing an e-mail subscription form.
  prefs: []
  type: TYPE_NORMAL
- en: Developing an e-mail subscription form
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To develop an e-mail subscription form, we have dragged the following items
    from the **PALETTE** section to the designer drop area:'
  prefs: []
  type: TYPE_NORMAL
- en: The core-card element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core-item element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The paper-input element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The paper-button element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After dropping and aligning these elements inside the card, we have made some
    changes to the styles and attribute of these elements. The following screenshot
    shows the style and attribute section for paper-button only. Similarly, we can
    change other elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing an e-mail subscription form](img/image00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the changes are made to styles and attributes, we can see the generated
    code by using the **Toggle Code/Design** option. The generated code is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing an e-mail subscription form](img/image00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preview of the design can be seen by using the **Launch Preview** option.
    The following screenshot shows the live preview of the developed design in a new
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing an e-mail subscription form](img/image00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Yeoman Polymer generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Yeoman tool provides the generator ecosystem for web developers in order
    to reduce the configuration work and get focused on web application logic. Yeoman
    helps in increasing productivity of a developer by getting a quick kick start
    to the project and implementing best practices and required boilerplate code to
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yeoman can be installed using npm. The following code shows the command for
    installing Yeoman in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the Yeoman installation
    in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Yeoman Polymer generator](img/image00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yeoman provides different generators for different types of applications. Each
    generator has a specific work flow for accomplishing a part or complete configuration
    of an application. These generators run with the `yo` command. Once Yeoman is
    installed in the system, the Polymer generator can be installed using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the polymer-generator
    installation in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Yeoman Polymer generator](img/image00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The polymer-generator commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The polymer-generator provides the following utilities to support the Polymer-based
    application development:'
  prefs: []
  type: TYPE_NORMAL
- en: Polymer application generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polymer element generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polymer seed generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polymer GitHub page generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Polymer application generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A new Polymer application can be created using the Polymer application generator.
    The steps for creating a new Polymer application are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a new project directory .The following command can be used
    to create a new project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directory to `PolymerAppDemo` using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After changing the directory, we can run the command to generate a Polymer
    application setup. The setup process asks a set of questions, which need to be
    answered by the developer. Once these questions are answered, it creates a Polymer
    application with all the required library and dependencies installed. The command
    for generating the Polymer application is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the command prompt with the Polymer application-generator
    in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Polymer application generator](img/image00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Polymer element generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Polymer element generator can be used to create a boilerplate for developing
    a custom element. We will learn about this generator for creating custom elements
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about the Polymer element generator, refer to [https://github.com/yeoman/generator-polymer#element-alias-el](https://github.com/yeoman/generator-polymer#element-alias-el).
  prefs: []
  type: TYPE_NORMAL
- en: The Polymer seed generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This generator can be used for creating a custom standalone element, which is
    intended to be shared with others using Bower. You will learn more about this
    generator in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about the Polymer seed generator at this point,
    refer to [https://github.com/yeoman/generator-polymer#seedc](https://github.com/yeoman/generator-polymer#seedc).
  prefs: []
  type: TYPE_NORMAL
- en: The Polymer GitHub page generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This generator can be used for creating a GitHub page for the standalone seed
    element, to share its details with the developer community. We will learn about
    this GitHub page generator in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about Polymer GitHub page generator at this point,
    refer to [https://github.com/yeoman/generator-polymer#gh](https://github.com/yeoman/generator-polymer#gh).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the installation of the Polymer library.
    We have explored the architecture of Polymer library followed by a section on
    core and paper elements. In the final section of this chapter, you were introduced
    to the Polymer designer tool. In the next chapter, you will learn to develop a
    custom element using the Polymer library.
  prefs: []
  type: TYPE_NORMAL
