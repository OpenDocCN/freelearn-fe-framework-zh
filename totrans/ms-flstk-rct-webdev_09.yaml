- en: Continuous Integration with Unit and Behavioral Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与单元测试和行为测试的持续集成
- en: We made it; congratulations! We have created a full-stack app that runs under
    a certain domain name (in this book its *reactjs.space*). The missing parts in
    the whole setup are the deployments processes. Deployments should be zero downtime.
    We need to have a redundant server of our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做到了；恭喜！我们已经创建了一个全栈应用程序，它运行在特定的域名下（在这本书中是*reactjs.space*）。整个设置中缺少的部分是部署流程。部署应该是零停机时间。我们需要有一个冗余的服务器来运行我们的应用程序。
- en: We are also missing some steps in our app to make it professionally work as
    minification, unit, and behavioral tests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序中缺少一些步骤，使其能够专业地工作，包括压缩、单元测试和行为测试。
- en: In this chapter, we will introduce you to some additional concepts that are
    required in order to master the full-stack development. The remaining missing
    pieces are left for you as homework.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向你介绍一些需要掌握全栈开发所需的一些额外概念。剩余的缺失部分留给你作为作业。
- en: When to write unit and behavioral tests
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时编写单元测试和行为测试
- en: Generally, there are some advices about when to write unit and/or behavioral
    tests.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，有一些关于何时编写单元测试和/或行为测试的建议。
- en: 'We in ReactPoland often have clients who run startups. As a general governance
    for them, we suggest the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在ReactPoland，我们经常有客户运营初创公司。作为对他们的一般治理，我们建议以下内容：
- en: If your startup is looking for traction and you need your product in order to
    make it, then don't worry about tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的初创公司正在寻找增长动力，你需要你的产品来实现它，那么不要担心测试
- en: After you have created your **Minimum Viable Product** (**MVP**), you *must*
    have those tests when expanding your application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你创建了你的**最小可行产品**（**MVP**）之后，在扩展你的应用程序时，你**必须**有这些测试
- en: If you are a well-established company, which is building an app for your clients
    and you know their needs very well, then you must have tests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是一家已经建立起来的公司，正在为你的客户开发应用程序，并且你对他们的需求非常了解，那么你肯定需要进行测试
- en: The preceding first two points are related to startups and young companies.
    The third point is related mostly to well-established companies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前两点与初创公司和年轻公司相关。第三点主要与已经建立起来的公司相关。
- en: Depending on where you and your product are, then you need to decide on your
    own, if it is worth to write the tests.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你和你产品的位置，你需要自己决定是否值得编写测试。
- en: React conventions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React约定
- en: There is a project that shows fully how the full-stack development setup should
    be looking like at [http://React JS.co](http://reactjs.co/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个项目展示了全栈开发设置应该如何看起来，请访问[http://React JS.co](http://reactjs.co/)。
- en: Visit this website and learn how to integrate your app with unit and behavioral
    tests and learn up-to-date best conventions about how to make React Redux applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 访问这个网站，了解如何将你的应用程序与单元测试和行为测试集成，并了解最新的最佳实践，以制作React Redux应用程序。
- en: Karma for testing
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Karma 测试
- en: We won't guide you in setting up the tests in this chapter because it's not
    in the scope of this book. The aim of this chapter is intended to present you
    with online resources that will help you to understand the bigger picture.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在本章中指导你设置测试，因为这超出了本书的范围。本章的目的是向你提供在线资源，帮助你理解更大的图景。
- en: Karma is the one of most popular tools for unit and behavioral tests. The main
    goal is to bring a productive testing environment while working on any application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Karma 是最受欢迎的单元测试和行为测试工具之一。主要目标是提供一个高效测试环境，以便在开发任何应用程序时使用。
- en: There are many features that you are provided with by using this test runner.
    There is a nice video that explains the big picture about Karma at [https://karma-runner.github.io](https://karma-runner.github.io).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个测试运行器，你将获得许多功能。有一个很好的视频解释了Karma的整体情况，请访问[https://karma-runner.github.io](https://karma-runner.github.io)。
- en: 'Some of the main features are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些主要功能如下：
- en: '**Tests on real devices**: You can use real browsers and real devices such
    as phones, tablets, or PhantomJS to run the tests (PhantomJS is a headless WebKit
    scriptable with a JavaScript API; it has fast and native support for various web
    standards: DOM handling, CSS selector, JSON, Canvas, and SVG.) There are different
    environments, but one tool that runs on them all.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在真实设备上的测试**：你可以使用真实的浏览器和真实设备，如手机、平板电脑或PhantomJS来运行测试（PhantomJS是一个可以通过JavaScript
    API脚本化的无头WebKit，它对各种网络标准有快速和本地的支持：DOM处理、CSS选择器、JSON、Canvas和SVG）。有不同环境，但有一个在所有这些环境中运行的工具。'
- en: '**Remote control**: You can run the tests remotely, for example, on each save
    from your IDE, so that you don''t have to do it manually.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程控制**：你可以远程运行测试，例如，在 IDE 中每次保存时，这样你就不必手动操作。'
- en: '**Testing framework agnostic**: You can write your tests in Jasmine, Mocha,
    QUnit, and other frameworks. It''s totally up to you.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试框架无关**：你可以使用 Jasmine、Mocha、QUnit 和其他框架编写测试。这完全取决于你。'
- en: '**Continuous integration**: Karma works great with CI tools such as Jenkins,
    Travis, or CircleCI.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：Karma 与 CI 工具（如 Jenkins、Travis 或 CircleCI）配合得很好。'
- en: How to write unit and behavioral tests
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写单元和行为测试
- en: Let's provide an example of how to set up properly a project in order to have
    an ability to write tests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提供一个示例，说明如何正确设置项目以便能够编写测试。
- en: Visit the GitHub repo of the very popular Redux starter kit at [https://github.com/davezuko/react-redux-starter-kit](https://github.com/davezuko/react-redux-starter-kit).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 访问非常受欢迎的 Redux 入门套件的 GitHub 仓库 [https://github.com/davezuko/react-redux-starter-kit](https://github.com/davezuko/react-redux-starter-kit)。
- en: 'Then visit the `package.json` file of this repository. We can find out there
    what the possible commands/scripts are:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后访问这个仓库的 `package.json` 文件。我们可以从中找到可能的命令/脚本：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can find, after the NPM test that it runs the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在 NPM 测试之后，它运行以下命令：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can find the configuration file of Karma located at `build/karma.conf` from
    [https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `build/karma.conf` 中找到 Karma 的配置文件，位于 [https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/build/karma.conf.js)。
- en: 'And the content (July 2016) is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 内容（2016年7月）如下：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in `karma.conf.js` they are using Mocha (check the line with
    `"frameworks: [''mocha'']"`). The rest of the options used in the config files
    are described in the documentation that is available at [http://karma-runner.github.io/1.0/config/configuration-file.html](http://karma-runner.github.io/1.0/config/configuration-file.html).
    If you are interested in learning the Karma configuration, then `karma.conf.js` should
    be your starting file.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '如你在 `karma.conf.js` 中所见，他们使用 Mocha（检查带有 `"frameworks: [''mocha'']"` 的行）。配置文件中使用的其余选项在可用的文档中有描述，文档位于
    [http://karma-runner.github.io/1.0/config/configuration-file.html](http://karma-runner.github.io/1.0/config/configuration-file.html)。如果你对学习
    Karma 配置感兴趣，那么 `karma.conf.js` 应该是你的起点文件。'
- en: What is Mocha and why do you need it?
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mocha 是什么，为什么你需要它？
- en: In the Karma config file, we have found that it uses Mocha as the JS testing
    framework ([https://mochajs.org/](https://mochajs.org/)). Let's analyze the codebase.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Karma 配置文件中，我们发现它使用 Mocha 作为 JS 测试框架 ([https://mochajs.org/](https://mochajs.org/))。让我们分析代码库。
- en: 'We can find `dir_test : ''tests''` in the `config/index.js` file, so based
    on that variable, Karma''s `config` knows that the Mocha''s tests are located
    in the `tests/test-bundler.js` file.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以在 `config/index.js` 文件中找到 `dir_test : ''tests''`，因此基于这个变量，Karma 的 `config`
    知道 Mocha 的测试位于 `tests/test-bundler.js` 文件中。'
- en: 'Let''s see what is in the `tests` directory at https://github.com/davezuko/react-redux-starter-kit/tree/master/tests.
    As you can see in the `test-bundler.js` file, there are plenty of dependencies:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在 https://github.com/davezuko/react-redux-starter-kit/tree/master/tests
    的 `tests` 目录里有什么。正如你在 `test-bundler.js` 文件中看到的，这里有很多依赖项：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s roughly describe what is used there:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们大致描述一下在那里使用的内容：
- en: Babel-polyfill emulates a full ES6 environment
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Babel-polyfill 模拟完整的 ES6 环境
- en: Sinon is a standalone and test framework agnostic JavaScript test for spies,
    stubs, and mocks
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sinon 是一个独立的、与测试框架无关的 JavaScript 测试库，用于间谍、模拟和存根。
- en: Spies are useful if in a tested piece of code, you call for an other external's
    services. You can check if it was called, what parameters it had, if it returned
    something, or even how many times it was called!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍在测试代码中调用其他外部服务时很有用。你可以检查它是否被调用，它有哪些参数，它是否返回了某些内容，甚至它被调用了多少次！
- en: The stubs concept is very similar to the spies concept. The biggest difference
    is that stubs replace the target function. They also replace the called code with
    custom behavior (replacing it) such as throwing exceptions or returning a value.
    They are also able to call a callback function that has been provided as a parameter.
    Stubs code returns a specified result.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟概念与间谍概念非常相似。最大的区别是模拟会替换目标函数。它们也会用自定义行为（如抛出异常或返回值）替换被调用的代码。它们还能调用作为参数提供的回调函数。模拟代码返回指定结果。
- en: Mocks are kind of *smarter stubs*. Mocks are used for asserting data and should
    never return data, when a stub is used simply for returning data and should never
    assert. Mocks can file your tests (when asserting), while stubs can't.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器是一种更智能的存根。模拟器用于断言数据，并且当使用存根仅用于返回数据且不应断言时，不应返回数据。模拟器可以在断言时填充您的测试，而存根则不能。
- en: Chai is the BDD/TDD assertion framework for Node.js and the browser. In the
    previous example, it has been paired with the Mocha testing framework.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Chai 是 Node.js 和浏览器的 BDD/TDD 断言框架。在上一个示例中，它已经与 Mocha 测试框架配对。
- en: Testing CoreLayout step-by-step
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逐步测试 CoreLayout
- en: Let's analyze the `CoreLayout.spec.js` tests. This component has a role similar
    to the CoreLayout in the publishing app, and so it's a good way to describe how
    you can start writing tests for your application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析 `CoreLayout.spec.js` 测试。此组件在发布应用中的角色类似于 CoreLayout，因此它是描述您如何开始编写应用程序测试的好方法。
- en: The CoreLayout tests file location (July 2016) is available at [https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 核心布局测试文件位置（2016年7月）可在[https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js](https://github.com/davezuko/react-redux-starter-kit/blob/master/tests/layouts/CoreLayout.spec.js)找到。
- en: 'The content is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 内容如下：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `react-addons-test-utils` library makes it easy to test React components
    with Mocha. The method that we used in the preceding example is **shallow rendering,**
    which is available at [https://facebook.github.io/react/docs/test-utils.html#shallow-rendering](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`react-addons-test-utils` 库使得使用 Mocha 测试 React 组件变得容易。我们之前示例中使用的方法是 **浅渲染**，它可在[https://facebook.github.io/react/docs/test-utils.html#shallow-rendering](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering)找到。'
- en: 'This feature helps us test the `render` function and is the result of rendering
    a one level deep in our components. Then we can assert facts about what its `render`
    method returns, as shown in the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能帮助我们测试 `render` 函数，并且是我们组件中渲染一层深度的结果。然后我们可以断言关于其 `render` 方法返回的内容的事实，如下所示：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, we provide a component in the `shallowRender` method (in this example,
    it will be CoreLayout). Later, we use `method.render` and then we return the output
    with the use of `renderer.getRenderOutput`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `shallowRender` 方法中提供一个组件（在这个例子中，它将是 CoreLayout）。然后，我们使用 `method.render`，然后使用
    `renderer.getRenderOutput` 返回输出。
- en: 'In our case, that function is called here (note that the semicolons are missing
    in the following example, because the starter that we are describing has different
    linting options than ours):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，该函数在这里被调用（注意以下示例中缺少分号，因为我们描述的入门项目与我们的 linting 选项不同）：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can find that the `_component` variable contains the result of the `renderer.getRenderOutput`.
    This value is asserted as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现 `_component` 变量包含 `renderer.getRenderOutput` 的结果。此值如下断言：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In that test, we test our code if it returns `div`. But if you visit the documentation,
    then you can find the code example as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个测试中，我们测试我们的代码是否返回`div`。但如果您访问文档，您会发现如下代码示例：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also find the assertion example as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以找到如下断言示例：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see in the preceding two examples, you can expect a type as `div`
    or you can expect more specific information about the CoreLayout return (depending
    on your needs).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如前两个示例所示，您可以期望类型为 `div`，或者根据您的需求，可以期望更多关于 CoreLayout 返回的具体信息。
- en: 'The first test asserts the type of a component (if it is `div`), and the second
    example test asserts if a CoreLayout returns correct components that are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试断言组件的类型（如果它是 `div`），第二个示例测试断言 CoreLayout 是否返回正确的组件，如下所示：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first one is a unit test because this isn't testing exactly if users see
    a correct thing. The second one is a behavioral test.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是单元测试，因为这并不是测试用户是否看到了正确的东西。第二个是行为测试。
- en: Generally, Packt has many books on **Behavior-Driven Development** (**BDD**)
    and **Test-Driven Development** (**TDD**).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Packt 有许多关于 **行为驱动开发**（**BDD**）和 **测试驱动开发**（**TDD**）的书籍。
- en: Continuous integration with Travis
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Travis 的持续集成
- en: In the given example, you can find a `.yml` file at [https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml](https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的示例中，你可以在[https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml](https://github.com/davezuko/react-redux-starter-kit/blob/master/.travis.yml)找到`.yml`文件。
- en: This is a configuration file for Travis. What is this? It's a hosted CI service
    used to build and test software. Generally, it's a tool that is free for open
    source projects to use. If you want a hosted Travis CI for private projects, then
    their fees apply.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Travis的配置文件。这是什么？这是一个用于构建和测试软件的托管CI服务。通常，它是开源项目可以免费使用的工具。如果你想为私有项目使用托管的Travis
    CI，那么将适用他们的费用。
- en: Configuration for Travis is made by adding the `.travis.yml` file, as mentioned
    earlier. The YAML form is a text file that is placed to the root directory of
    your project. This file's content describes all the steps that have to be done
    to test, install, and build a project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，通过添加`.travis.yml`文件来配置Travis。YAML格式是一个放置在你项目根目录的文本文件。该文件的内容描述了必须执行的所有步骤以测试、安装和构建项目。
- en: The Travis CI goal is to make every commit to your GitHub account and to run
    the tests, and when the tests are passing, you can deploy the app to a staging
    server on an Amazon AWS. The continuous integration is not in the scope of this
    book, so if you are interested in adding this step to the whole publishing app
    project, there are books related to this as well.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI的目标是使你GitHub账户的每个提交都运行测试，当测试通过时，你可以将应用部署到Amazon AWS上的一个预发布服务器。持续集成不在此书的范围之内，所以如果你有兴趣将此步骤添加到整个发布应用项目中，也有相关的书籍。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Our publishing app is working. As with any digital project, there are still
    plenty of stuff that we can improve in order to have a better end product. For
    example, the following homework is for you:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的发布应用正在运行。就像任何数字项目一样，我们还有很多可以改进的地方，以便得到更好的最终产品。例如，以下作业是给你的：
- en: Add a minifaction on the frontend side so that it will be lighter when loading
    over the Internet.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前端添加一个minifaction，这样在通过互联网加载时会更轻量。
- en: As mentioned earlier, you need to start using Karma and Mocha for unit and behavioral
    tests. An example setup was described in detail in this chapter.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，你需要开始使用Karma和Mocha进行单元和行为测试。本章详细描述了一个示例设置。
- en: You need to choose a CI tool such as Travis, create your YML file, and prepare
    the environment on AWS.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要选择一个CI工具，如Travis，创建你的YML文件，并在AWS上准备环境。
- en: That is all you can additionally do besides all that has been covered in the 350+
    pages of this book, where you built a full-stack React + Redux + Falcor + Node
    + Express + Mongo application. I hope to keep in touch with you; follow me on
    Twitter/GitHub in order to keep in touch or send me an e-mail if you have any
    additional questions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是除了书中350多页内容所涵盖的所有内容外，你还可以额外做的事情，其中你构建了一个全栈React + Redux + Falcor + Node +
    Express + Mongo应用。我希望与你保持联系；在Twitter/GitHub上关注我，以便保持联系，或者如果你有任何额外的问题，请发送电子邮件给我。
- en: Good luck in getting your hands dirty with the next commercial full-stack applications
    and see you again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你在下一个商业全栈应用中动手实践时好运，再次见到你。
