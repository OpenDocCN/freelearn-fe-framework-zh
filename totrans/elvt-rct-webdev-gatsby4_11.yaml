- en: '*Chapter 9*: Deployment and Hosting'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will finally take the project we have been working on and
    deploy it for the world to see! We will delve into the different types of builds
    that Gatsby creates and gain an understanding of how to debug common build errors.
    Following this, we will continue to learn how we can deploy them using a variety
    of different platforms. Additionally, we will discover how we can lock down access
    to our site by serving it up as part of an Express server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding build types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common build errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your pre-deployment checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platforms for deploying hybrid builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platforms for deploying static builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving a Gatsby site with reduced user access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To navigate this chapter, you will need to have completed [*Chapter 8*](B15983_08_ePub_RK.xhtml#_idTextAnchor116),
    *Web Analytics and Performance Monitoring*.
  prefs: []
  type: TYPE_NORMAL
- en: The code that is presented in this chapter can be found at [https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter09](https://github.com/PacktPublishing/Elevating-React-Web-Development-with-Gatsby-4/tree/main/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding build types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Gatsby version 4 introduced the ability for your website to be built in two
    different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a **static build**: This creates all your pages at build time using Node.js.
    The resulting files are all static HTML, JavaScript, and CSS, which can be served
    entirely statically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a **hybrid build**: This is a mixture of a static build combined with pages
    that are server-side rendered or have been created via deferred static generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When running `gatsby build`, Gatsby will inspect your site's content, and if
    possible, create a static build. However, if your site contains pages that are
    server-side rendered or have been created via deferred static generation, it will
    create a build that requires server-side code that runs on a Node.js server or
    via serverless functions. Builds of both types can be tested locally using the
    `gatsby serve` command.
  prefs: []
  type: TYPE_NORMAL
- en: Before deploying your build, it's worth ensuring that everything is working
    as it should locally. Now, let's take a moment to look at common build errors
    and learn how you can avoid them.
  prefs: []
  type: TYPE_NORMAL
- en: Common build errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While working on our project, we mostly run the project in development mode.
    This is a great idea to ensure that the site also works with a production build
    by running the `gatsby build` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you might find that errors occur during the build process. So, let''s
    talk about the most common issues and how we can fix them:'
  prefs: []
  type: TYPE_NORMAL
- en: The most common error that you'll come across is `window` and `document` variables
    found in the browser. Therefore, while your site is being built, it is unable
    to access them. You can get around this issue in a couple of ways. You can perform
    a check to confirm that the variable is defined (for example, `typeof window !==
    undefined && yourFunction()`), or if appropriate, you can move the code into a
    `useEffect` hook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that all your components, your pages, and your `gatsby-browser.js` and
    `gatsby-ssr.js` files do not mix **ES5** and **ES6** syntax, as this can lead
    to builds crashing out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take special care to ensure that all JavaScript files found within your `pages`
    directory are React components with a default export. Gatsby treats all JavaScript
    files as pages within this folder. If you have components or other utility functions
    within this directory, you will get an error that says **A page component must
    export a React component for it to be valid**. If you see this error, just move
    the files in question outside of the folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we can build our site without issues, let's examine a practical checklist
    that we should run through before deploying our site.
  prefs: []
  type: TYPE_NORMAL
- en: Your pre-deployment checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Regardless of how you intend to deploy your site, there are a few steps you
    should follow on your local machine to ensure that your first deployment will
    run smoothly:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ensure any deployment platform plugins that are required have been installed.*
    A couple of the platforms we will look at have Gatsby plugins specifically for
    use with their product. By adding them to your Gatsby site, the platform is better
    able to understand your project and, as a result, build your site faster.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Make sure your Gatsby site builds without an error.* Once the build has passed
    successfully, try running `gatsby serve` to ensure that you can use the site without
    issue.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ensure all your tests are passing.* Make sure that you have run your unit
    tests that we set up in [*Chapter 7*](B15983_07_ePub_RK.xhtml#_idTextAnchor105),
    *Testing and Auditing Your Site*, using `npm run test`, and ensure that they are
    all passing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Take note of your Node.js version.* As of Gatsby version 4, your Node.js version
    should be 14 or higher. You''ll want to ensure that the Node.js version matches
    your deployment platform so that you don''t have compatibility issues. You can
    check this by running `node -v` in your terminal.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have completed our checklist, let's look at the various platforms
    we can deploy our site with, starting with those that support hybrid sites.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you only deploy your site on one deployment platform
    and not multiple platforms. Managing multiple platforms when you can do the job
    with one is far easier for you to maintain. Try experimenting with all the options
    to find the best fit for your project.
  prefs: []
  type: TYPE_NORMAL
- en: Platforms for deploying hybrid builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As hybrid sites require a Node.js server, we need to use platforms that can
    provision them. Hybrid sites are also very new to the Gatsby ecosystem. At the
    time of writing, the only stable option for hosting a hybrid build is Gatsby Cloud
    Hosting, so let's look at the platform next.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Gatsby Cloud Hosting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gatsby Cloud** is a cloud platform that has been specifically designed and
    built for the Gatsby framework by the Gatsby organization. Because they focus
    on this framework, they excel at building technology that makes your builds run
    as fast as possible. This includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Incremental builds**: Gatsby Cloud observes the GraphQL data layer and identifies
    page dependencies. When you push changes to your code, it identifies the data
    layer changes and only rebuilds the pages that are dependent on that data. This
    can drastically speed up repeat builds â€“ Gatsby says that incremental builds can
    be as much as 1,000 times faster than traditional builds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intelligent caching**: Special caching headers are sent to the browser when
    requesting your site. These are used to ensure that the browser does not re-download
    any content that has not changed between builds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be noted that incremental builds are not available on the free tier
    of the platform. If you want to benefit from them, you'll need to upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the benefits of using the platform, let's look at how
    we can deploy our site to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Note
  prefs: []
  type: TYPE_NORMAL
- en: The process for deploying a hybrid site and a static site is the same on the
    Gatsby platform, so these instructions will work in both cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to deploy your site to the Gatsby Cloud platform:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Gatsby Cloud plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are installing the Gatsby Cloud plugin. This adds basic security headers
    during the build for the Gatsby Cloud platform.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the `gatsby-plugin-gatsby-cloud` plugin in your `gatsby-config.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit and push all changes to your chosen Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a browser and navigate to [https://www.gatsbyjs.com/products/cloud](https://www.gatsbyjs.com/products/cloud).
    Click on **Get Started**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign up to the platform by populating the form with your name, email, and country
    of residence:![Figure 9.1 â€“ Signing up to Gatsby Cloud
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.1 â€“ Signing up to Gatsby Cloud
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select your **VCS** (**version control system**) provider, log in, and approve
    the requested permissions that the Gatsby Cloud platform requires in order to
    integrate with it:![Figure 9.2 â€“ The Gatsby Cloud VCS Provider authorization step
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.2 â€“ The Gatsby Cloud VCS Provider authorization step
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon being redirected to Gatsby Cloud, you will be asked whether you would like
    to trial a 14-day upgrade. This is up to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, you will be navigated to your dashboard, which will be empty, as we have
    not set up any sites yet. Let's add our site now by clicking on **Add Site**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Import from a Git Repository**, and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your Git provider from the list, followed by the organization and repository
    name. If, for some reason, this list has not been populated, ensure that you have
    given Gatsby the relevant permissions to read from your Git repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following this, you will need to provide your site details, including a base
    branch and base directory. Your base directory should point to the root of the
    Gatsby project within the repository â€“ this is most likely the root directory
    or `/`. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be presented with optional integrations for your site. These integrations
    can help your CMS communicate with Gatsby Cloud. When you make a change to your
    CMS, you can see a preview of how that content will look via Gatsby Cloud. If
    you desire to do this, you can click on **Connect** next to the CMS platform you
    are using and follow the steps; otherwise, you can click on **Skip this Step**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you will be asked to add any environment variables that your site needs
    to build. Gatsby scans your site's integrations and plugins to help fill in the
    environment variables it thinks you need. Be sure to cross-check this with your
    local `.env` file to ensure you have everything that is required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Create site**. This will prompt Gatsby to start building your site
    for the very first time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 â€“ The Gatsby Cloud site dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 â€“ The Gatsby Cloud site dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Once the build has been completed, you can see the deployed site live by following
    the purple hyperlink underneath the **HOSTED ON GATSBY CLOUD** heading in the
    preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: With every subsequent push to the base branch, Gatsby Cloud will build and deploy
    the change automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to deploy a hybrid build, let's look at the options
    we have for deploying static builds.
  prefs: []
  type: TYPE_NORMAL
- en: Platforms for deploying static builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As static builds are a far more common and predictable format, there are plenty
    more options for where you can host them. We have already looked at Gatsby Cloud,
    which can deploy static sites in the same way as it does hybrid. Now, let's look
    at three other platforms â€“ Netlify, Render, and Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Netlify
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Netlify is the deployment platform used for over 500,000 websites. It is popular
    among developers for its ease of use. It also provides a free **Secure Sockets
    Layer** (**SSL**). Let''s learn how we can deploy our site with Netlify:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Netlify plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are installing the Netlify plugin, which adds basic security headers
    during the build for the Netlify platform.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Include the `gatsby-plugin-netlify` plugin in your `gatsby-config.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit and push all changes to a Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to [https://app.netlify.com/signup](https://app.netlify.com/signup)
    in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign up by logging in with the third-party login details provided by your VCS,
    and approve the requested permissions that the Netlify platform requires to integrate
    with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create New Site** from your dashboard:![Figure 9.4 â€“ The Netlify
    new site page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.4 â€“ The Netlify new site page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the Git provider where your repository is stored. Then, pick the repository
    that you would like to build.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can leave the **Owner** option in its default setting. However, make sure
    that the deploy branch matches your site's main production branch:![Figure 9.5
    â€“ The Netlify site creation settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.5 â€“ The Netlify site creation settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, provide the `npm run build` and `public`, respectively:![Figure 9.6
    â€“ The Netlify site creation build settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.06_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.6 â€“ The Netlify site creation build settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on **Deploy site** will start the build process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While your site is building, take note of the URL, in blue, at the top of the
    dashboard. This is where your site will be deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.7 â€“ The Netlify site dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 â€“ The Netlify site dashboard
  prefs: []
  type: TYPE_NORMAL
- en: If everything goes well, your site should be deployed after a few minutes. With
    every subsequent push to the base branch, Netlify will build and deploy the change
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to deploy with Netlify, let's look at another alternative
    â€“ Render.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Render
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Render is a cloud platform that can build and run Gatsby websites with free
    SSL and a global CDN. Let''s learn how we can deploy our site with Render:'
  prefs: []
  type: TYPE_NORMAL
- en: Commit and push all changes to a Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to [https://dashboard.render.com/register](https://dashboard.render.com/register),
    and then create an account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dashboard, click on **New**:![Figure 9.8 â€“ The Render site dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.8 â€“ The Render site dashboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Static Site**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you will be asked to present a repository. However, as you have
    not connected Render to your VCS, the list will be empty. Click on the hyperlink
    for your VCS and proceed to connect Render to that system by following the UI
    journey from that third party. In the case of GitHub, it will look something like
    this:![Figure 9.9 â€“ GitHub's third-party installation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.09_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.9 â€“ GitHub's third-party installation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The list should now be populated with your repositories. Select the one containing
    your Gatsby site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, configure your site settings:![Figure 9.10 â€“ The Render site settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.10 â€“ The Render site settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `npm run build`, and `./public`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Create Static Site**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While your site is building, take note of the URL, in blue, at the top of the
    dashboard. This is where your site will be deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.11 â€“ The Render site dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 â€“ The Render site dashboard
  prefs: []
  type: TYPE_NORMAL
- en: If everything goes well, your site should be deployed after a few minutes. Check
    the URL to be sure. With every subsequent push to the base branch, Render will
    build and deploy the change automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to deploy with Render, let's look at another alternative
    â€“ Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to Firebase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firebase is Google''s mobile development application. It allows you to focus
    on the frontend of your application by allowing you to manage your backend infrastructure
    through a no-code/low-code development UI. Firebase has a large number of features,
    including real-time databases, machine learning, Cloud Functions authentication,
    and â€“ the feature we will be focusing on â€“ hosting. Let''s learn how we can deploy
    our site with Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://console.firebase.google.com](https://console.firebase.google.com),
    and sign in with a Google account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, you will be directed to the Firebase console. From there, click
    on **Add Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to give your project a name. Once entered, take note of
    your project ID, and click on **Continue**:![Figure 9.12 â€“ Firebase project naming
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.12 â€“ Firebase project naming
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, you can optionally set up Google Analytics for your project.
    If you added Google Analytics to your site as part of [*Chapter 8*](B15983_08_ePub_RK.xhtml#_idTextAnchor116),
    *Web Analytics and Performance Monitoring*, then do not set this up again here:![Figure
    9.13 â€“ Setting up Firebase project analytics
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.13 â€“ Setting up Firebase project analytics
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Create project** â€“ this will provision the Google Cloud services
    that are required for your project. Now we have set up everything we need within
    the Firebase platform and can return to the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the Firebase CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This package allows us to integrate local projects with the Firebase platform.
    We can use the `-g` command to install it globally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the `firebase login` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will open a browser window prompting you to log in with a Google account.
    Log in with the Google account that you signed up to Firebase with.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once complete, return to your Gatsby project''s root directory and run the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will trigger the Firebase initialization UI within our Gatsby project
    and present you with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.14 â€“ Firebase CLI project initialization'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.14 â€“ Firebase CLI project initialization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Within this project, we are only using hosting, so press the down arrow key
    until **Hosting** is selected. Then, hit the spacebar to select it followed by
    *Enter* to confirm your choice.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Firebase will then ask you which Firebase project to associate with this directory:![Figure
    9.15 â€“ Setting up the Firebase CLI project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.15 â€“ Setting up the Firebase CLI project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have already created a Firebase project, so ensure **Use an existing project**
    is selected and hit *Enter*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the up and down arrow keys to select the project ID that we created in *Step
    3* (the project name should be visible in brackets next to the ID). Then, hit
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tell Firebase where to find the static build during the hosting setup:![Figure
    9.16 â€“ Setting up Firebase CLI hosting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.16 â€“ Setting up Firebase CLI hosting
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, Firebase uses the `public` directory, so we can hit *Enter* without
    changing this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, it will ask you whether you would like it to configure your application
    as a single-page app. Type in `n` and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, it will ask whether you want to set up automatic deploys with GitHub.
    Type in `n` and hit *Enter*. You can change this in the future if needed, but
    for now, we will focus on manual deployments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have everything in place ready to deploy to Firebase. Run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As we already know, `gatsby build` will create a production-ready build of
    our site. Then, the `firebase deploy` command will take our build and upload it
    to the Firebase platform, ready to be served to site visitors:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.17 â€“ Deploying the Firebase CLI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B15983.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 â€“ Deploying the Firebase CLI
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the Firebase deployment, it will log a **Hosting URL** to the
    terminal. Navigate to this link in a browser to see your deployed application.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Tip
  prefs: []
  type: TYPE_NORMAL
- en: As you might have noticed from these instructions, Firebase is the only platform
    in this list that does not require you to push your code to a VCS. If you have
    a project where you do not wish to use a VCS, this is a great choice. It's important
    to note that, unlike the other platforms, Firebase will not automatically deploy
    your project unless it has been set up as part of a deployment pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: We have now looked at a multitude of different ways to deploy our site onto
    the internet. If you have completed any of the implementations discussed in the
    previous sections, you should be able to send a friend the site URL, and they
    should be able to see it. However, what if you don't want your site to be visible
    to everyone but only a selected few? Next, let's look at how we can reduce the
    level of access to our site for when the situation requires it.
  prefs: []
  type: TYPE_NORMAL
- en: Serving a Gatsby site with reduced user access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might be asking yourself why you would ever want to reduce the access to
    your site. One word â€“ security. In all the examples we have seen so far, our site
    is public and out there on the internet for all to see, but what if you are building
    an application that is only for a selected group of people? Perhaps it's portfolio
    work that you want to have locked behind a password or an onboarding application
    that should only be available to colleagues at a specific company. We can achieve
    functionalities such as these using most backend web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: This type of authentication is not to be confused with that of [*Chapter 11*](B15983_11_ePub_RK.xhtml#_idTextAnchor152),
    *Creating Authenticated Experiences*. Here, we are restricting access to the entirety
    of the site unless you have been approved. In [*Chapter 11*](B15983_11_ePub_RK.xhtml#_idTextAnchor152),
    *Creating Authenticated Experiences*, access is only partially restricted, as
    we allow users to visit parts of the application without logging in.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s explore how we can use Express to introduce a password
    login to our site:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will be using Express as our backend and `express-basic-auth` to implement
    HTTP basic authorization as middleware.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At the root of your Gatsby project, create a `server.js` file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, we create an `express` app. Then, we instruct it to use the `express-basic-auth`
    middleware. You will see that we are passing an object that instructs the middleware
    to challenge the user. When a user navigates to the site, before seeing any content,
    they will be prompted with the following dialog box:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.18 â€“ Basic auth challenge dialog box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B15983.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.18 â€“ Basic auth challenge dialog box
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: They will only be allowed onto the site if the credentials they provide match
    those in the `users` object provided to `basicAuth`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Assuming they successfully pass this middleware check, we then allow them to
    view the static content of our site using the `express.static()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify your scripts in `package.json` to include a `start:server` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script will run our `server.js` file using Node.js.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now have everything in place to try our server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will build your Gatsby project and then run your server code, which will
    serve up your Gatsby build content. If all has gone well, you should be able to
    visit `localhost:3000` and see this implementation working. Upon entering the
    username and password that has been specified on the server, you should be able
    to see your Gatsby application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All the other static deployment methods we have looked at within this chapter
    have assumed that the Gatsby project is being hosted on its own dedicated server,
    but sometimes, you don't always have the luxury of multiple servers. This example
    is also a great demonstration of how you can combine backend and frontend code
    on a single server. You could use a similar approach to lock down your site to
    certain IP ranges. For instance, we could expand upon this Express server to serve
    API endpoints alongside our Gatsby project within the same repository.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Tip
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering how to deploy a site using this functionality â€“ deploying
    Express servers is beyond the remit of this book, but platforms that support this
    include Heroku, Render, and Google Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a moment to summarize what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we investigated the builds that a Gatsby project can create
    and the differences between them. We looked at common errors that crop up during
    build time and how we can debug them. We learned how we can deploy hybrid builds
    using Gatsby Cloud and how we can deploy static builds with Netlify, Render, and
    Firebase. Additionally, we discovered how we can lock down access to our site
    by serving it up as part of an Express server. You should now feel comfortable
    with the process of taking your site live.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start looking at more advanced concepts. We will
    begin by learning about Gatsby's plugin creation.
  prefs: []
  type: TYPE_NORMAL
