- en: Growing Our Application Using Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at how Firebase provides cloud messaging
    to engage our users. We will add a Firebase cloud messaging feature to our application.
    We will cover Google analytics, which provides a good dashboard to analyze our
    application and take action accordingly, as this helps to improve our application
    further. Finally, we will discuss Google ads, which helps to monetize our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Firebase cloud messaging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding FCM to our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google data analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about Google Ads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Firebase cloud messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Firebase cloud messaging** (**FCM**) is a cross-platform service used to
    deliver messages reliably across different platforms. It uses the push methodology
    to send messages, and we can send up to 4 KB of data to the client. It supports
    many use cases, such as to engage users with promotional messages and send a message
    when the user is in the background.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following two main modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trusted server**: This server is used to send messages to clients and can
    be a Firebase console or a server SDK implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client application**: This includes client applications in the web, Android,
    or iOS. This receives messages from the trusted server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding FCM to our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will configure FCM in our application. We will perform
    the following steps to configure FCM:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a** **manifest.json** **file**: Our first step will be to create
    a `manifest.json` file within the `src` folder. This file contains `gcm_sender_id`,
    which authorizes a client to a trusted FCM server and enables FCM to send messages
    to our application. For a desktop browser, the client ID—`103953800507`—remains
    fixed for a web application, so you don''t need to change it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web manifest file is a simple JSON file, in which we can specify the configuration
    for our application, such as its name, display, and orientation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code for `manifest.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Configuring** **manifest.json** **in** **index.html**: Once we create the
    manifest file, we include the file reference in `index.html`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we include the modified `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating a service worker**: After we create a manifest file, we create a
    Firebase service worker to process incoming push messages from the trusted server
    and to register our Firebase app with a messaging sender `ID`, which we can get
    from the Firebase portal by navigating to Project Overview > Project settings
    > CLOUD MESSAGING.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A service worker is a type of web worker that runs in the background and helps
    in push in notifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the `firebase-messaging-sw.js` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Referring to the manifest and service worker in** **angular-cli.json**: Next,
    we mention the service worker and manifest file''s reference in `angular-cli.json`;
    the following is the modified `angular-cli.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating FCM Service**: This service class is used to receive the client
    token and insert the token to the Firebase database. It is also used to register
    for token refresh when a token expires. The method steps for creating this service
    class are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first method step is to get user permission for notifications by an alert
    dialog, and once the user clicks on the Allow button,  we call `getToken()` from
    the Firebase messaging object to get the token. We send this token to the Firebase
    database so that we can use this token in the future to send promotional messages
    to all of our users. We also create an `onTokenRefresh()` method to refresh our
    token once it expires.
  prefs: []
  type: TYPE_NORMAL
- en: The second method step is to register for push notification messages by calling `onMessage()` when
    the application is in the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the `fcm-messaging.service.ts` file as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Registering Firebase messaging for update in app component**: Once we create
    service methods, we call user permission, token, and register for a message update
    in our app component as shown in the following `app.component.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Finally, our application is now ready to send push notification messages. You
    can send messages either by a curl command or Postman request.
  prefs: []
  type: TYPE_NORMAL
- en: 'To send a push notification from Postman, we require the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL**: This is an FCM endpoint registered with our trusted server. Its unique
    URL is [https://fcm.googleapis.com/fcm/send](https://fcm.googleapis.com/fcm/send).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content type**: This is a type of content sent to the server and in our case
    is JSON type as `application/json`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization**: This key is the server key for our Firebase project. You
    can find this key in our Firebase portal by navigating to Project Overview|Project
    settings|CLOUD MESSAGING|Server Key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: This contains the title, body, action, and the target sender `ID`.
    The sender token ID is saved in our Firebase database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example of a Postman request for a Headers tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The Postman for the Body tab will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The notification that appears on the bottom-right corner of your screen should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Google data analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google analytics is a free service offered by Google that provides statistics
    about the visitors and traffic to our website. It provides a more valuable input
    about the visitors and geographies. It also provides input about the behavior
    of the visitor when they use our website. The following are the steps for registering
    Google analytics to your application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a Google analytics account**: We can create a Google analytics account
    with an existing Gmail account or a new Gmail account by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the browser and paste in the analytics URL ([https://analytics.google.com/analytics](https://analytics.google.com/analytics))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the SIGNUP button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out your live application URL and form information
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Get Tracking ID button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integrating tracking code into our application**: After a successful signup,
    we can integrate the generated global site tag into our application. Take a look
    at the following sample global site code in `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful signup, our Google analytics dashboard should look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Learning about Google adsense
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google adsense provides a platform to monetize our web application. Firebase
    ads are not supported for this web application, so we will work with Google ads
    to monetize our application. In this section, we will take a look at how to add
    ads to our application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating an adsense account**: We can create an adsense account with the
    existing Gmail account or create a new Gmail account by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the browser and paste in the adsense URL ([https://www.google.com/adsense](http://adsense) )
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the SIGNUP button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out your live application URL and address details
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the SUBMIT button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Adding the adsense script to our application**: When you click on the Submit
    button, Google ads will provide steps to register your site with ads. It gives
    code to paste into the `index.html` of our application. Take a look at the following
    sample script to paste into the `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful signup, our Google adsense dashboard look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered Firebase cloud messaging. We integrated FCM into
    our application, which helps to engage our users. We also covered Google analytics
    and saw how to enable analytics in our application. This gives a good perspective
    about the application's usage. Finally, we discussed Google adsense, which helps
    to monetize our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the **Progressive Web App** (**PWA**) and
    add a few features to make our application PWA-compliant.
  prefs: []
  type: TYPE_NORMAL
