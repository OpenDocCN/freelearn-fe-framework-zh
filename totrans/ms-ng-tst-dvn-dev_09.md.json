["```js\n # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https: //docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs\nname: Angular TDD CI/CD\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [18.x]\n        # See supported Node.js release schedule at https: //nodejs.org/en/about/releases/\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: '**/package-lock.json'\n    - run: npm ci\n    - run: npm run build --if-present\n```", "```js\n defaults:\n      run:\n        working-directory: \"./Chapter 9/getting-started-angular-tdd\"\n```", "```js\n # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https: //docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs\nname: Angular TDD CI/CD\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: \"./Chapter 9/getting-started-angular-tdd\"\n    strategy:\n      matrix:\n        node-version: [18.x]\n        # See supported Node.js release schedule at https: //nodejs.org/en/about/releases/\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n   cache-dependency-path: '**/package-lock.json'\n    - run: npm ci\n    - run: npm run build --if-present\n```", "```js\n test:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: './Chapter 9/getting-started-angular-tdd/'\n    strategy:\n      matrix:\n        node-version: [18.x]\n        # See supported Node.js release schedule at https: //nodejs.org/en/about/releases/\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: '**/package-lock.json'\n    - run: npm ci\n    - run: npm run test\n```", "```js\n name: Angular TDD CI/CD\non:\npush:\n    branches: [ \"main\" ]\npull_request:\n    branches: [ \"main\" ]\njobs:\ntest:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: './Chapter 9/getting-started-angular-tdd/'\n    strategy:\n      matrix:\n        node-version: [18.x]\n        # See supported Node.js release schedule at https: //nodejs.org/en/about/releases/\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: '**/package-lock.json'\n    - run: npm ci\n    - run: npm run test\nbuild:\n    needs: test\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: './Chapter 9/getting-started-angular-tdd/'\n    strategy:\n      matrix:\n        node-version: [18.x]\n        # See supported Node.js release schedule at https : //nodejs.org/en/about/releases/\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: '**/package-lock.json'\n    - run: npm ci\n    - run: npm run build --if-present\n```", "```js\n # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https: //docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs\nname: Angular TDD CI/CD\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\njobs:\n  test-and-build:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: './Chapter 9/getting-started-angular-tdd/'\n    strategy:\n      matrix:\n        node-version: [18.x]\n        # See supported Node.js release schedule at https: //nodejs.org/en/about/releases/\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: '**/package-lock.json'\n    - run: npm ci\n    - run: npm run test --if-present\n    - run: npm run build --if-present\n```", "```js\n \"configurations\": {\n          \"ci\": {\n              \"watch\": false,\n              \"progress\": false,\n              \"browsers\": \"ChromeHeadlessCI\"\n        }\n}\n```", "```js\n \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\n              \"zone.js\",\n              \"zone.js/testing\"\n            ],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"inlineStyleLanguage\": \"scss\",\n            \"assets\": [\n              \"src/favicon.ico\",\n              \"src/assets\"\n            ],\n            \"styles\": [\n              \"src/styles.scss\"\n            ],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"ci\": {\n              \"watch\": false,\n              \"progress\": false,\n              \"browsers\": \"ChromeHeadlessCI\"\n            }\n          }\n        }\n```", "```js\n // Karma configuration file, see link for more information\n// https: //karma-runner.github.io/1.0/config/configuration-file.html\nprocess.env.CHROME_BIN = require(\"puppeteer\").executablePath();\nmodule.exports = function (config) {\n  config.set({\n    basePath: \"\",\n    frameworks: [\"jasmine\", \"@angular-devkit/build-angular\"],\n    plugins: [\n      require(\"karma-jasmine\"),\n      require(\"karma-chrome-launcher\"),\n      require(\"karma-jasmine-html-reporter\"),\n      require(\"karma-coverage-istanbul-reporter\"),\n      require(\"@angular-devkit/build-angular/plugins/karma\"),\n    ],\n    client: {\n      clearContext: false, // leave Jasmine Spec Runner output visible in browser\n    },\n    coverageIstanbulReporter: {\n      dir: require(\"path\").join(__dirname, \"../coverage\"),\n      reports: [\"html\", \"lcovonly\"],\n      fixWebpackSourcePaths: true,\n    },\n    reporters: [\"progress\", \"kjhtml\"],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: true,\n    browsers: [\"Chrome\"],\n    customLaunchers: {\n      ChromeHeadlessCI: {\n        base: \"ChromeHeadless\",\n        flags: [\"--no-sandbox\", \"--disable-gpu\"],\n      },\n    },\n    singleRun: false,\n  });\n};\n```", "```js\n $ npm i --save-dev puppeteer karma-coverage-istanbul-reporter\n```", "```js\n # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https: //docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs\nname: Angular TDD CI/CD\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\njobs:\n  test-and-build:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: './Chapter 9/getting-started-angular-tdd/'\n    strategy:\n      matrix:\n        node-version: [18.x]\n        # See supported Node.js release schedule at https: //nodejs.org/en/about/releases/\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: '**/package-lock.json'\n    - run: npm ci\n    - run: npm run test -- --configuration=ci\n    - run: npm run build --if-present\n```", "```js\n - name: Upload build files to remote server\n        uses: appleboy/scp-action@master\n        with:\n          host: ${{ secrets.SI_HOST }}\n          username: ${{ secrets.SI_USERNAME }}\n          password: ${{ secrets.SI_PASSWORD }}\n          port: ${{ secrets.SI_PORT }}\n          source: \"[SORUCE_FOLDER]\"\n          target: \"[DESTINATION_TARGET_ON_YOUR_SERVER]\"\n```"]