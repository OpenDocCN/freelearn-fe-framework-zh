- en: Deploying Angular Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Angular应用程序
- en: 'Once you have completed building your application, it then has to be deployed
    to your test environment for the testing team to test it before deploying the
    application to your production environment for your users to use it. Although
    you can host your application virtually anywhere you like, there are three main
    ways in which you can package and deploy your Angular application. We''ll explore
    these methods in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了构建应用程序，它就必须部署到测试环境，供测试团队在将应用程序部署到生产环境供用户使用之前进行测试。虽然您可以在几乎任何地方托管您的应用程序，但有三种主要方式可以打包和部署您的Angular应用程序。我们将在本章中探讨这些方法：
- en: Deploying Angular applications
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Angular应用程序
- en: Deploying composite Angular applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署复合Angular应用程序
- en: Deploying to GitHub Pages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到GitHub页面
- en: Deploying Angular applications
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Angular应用程序
- en: Deploying our app is just as important as building the app itself. After all,
    our users need to access it; otherwise, it's not worth building, right?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 部署我们的应用程序和构建应用程序本身一样重要。毕竟，我们的用户需要访问它；否则，构建它就没有意义，对吧？
- en: Before we learn and explore how to deploy apps in detail, it's a prerequisite
    to have a server up and running. The server can be hosted on any operating system,
    be it Windows or Linux, and can be run on any application server, such as Apache
    Tomcat or IIS. Alternatively, we can opt to choose any reliable cloud provider,
    such as AWS, Azure, or Bluehost, which offer hosting capabilities.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们详细学习和探索如何部署应用程序之前，有一个运行的服务器是前提条件。服务器可以托管在任何操作系统上，无论是Windows还是Linux，并且可以在任何应用程序服务器上运行，比如Apache
    Tomcat或IIS。或者，我们可以选择任何可靠的云提供商，比如AWS、Azure或Bluehost，它们提供托管能力。
- en: Technology stacks can vary from project to project; some clients prefer Java-based
    microservices, some may prefer .NET, and others may prefer Ruby on Rails. We will
    need to integrate our Angular applications with the backend APIs. The client-side
    code will mostly be Angular, which essentially means that Angular apps can be
    deployed and run on any server with any backend API services.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 技术栈可以因项目而异；一些客户更喜欢基于Java的微服务，一些可能更喜欢.NET，其他人可能更喜欢Ruby on Rails。我们需要将我们的Angular应用程序与后端API集成。客户端代码大部分将是Angular，这基本上意味着Angular应用程序可以部署和运行在任何带有任何后端API服务的服务器上。
- en: In this chapter, we are going to use the XAMPP server. XAMPP is a free distribution
    of Apache, MySQL, which makes it easy to set up our local server instantly and
    easily. You can download it at [https://www.apachefriends.org/download.html](https://www.apachefriends.org/download.html).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用XAMPP服务器。XAMPP是Apache、MySQL的免费分发版，可以轻松快速地设置我们的本地服务器。您可以在[https://www.apachefriends.org/download.html](https://www.apachefriends.org/download.html)下载它。
- en: Compilation options for Angular applications
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular应用程序的编译选项
- en: I am sure by now you are aware that all the code we write for Angular is in
    TypeScript and that we will need to compile and generate deployable files using
    the `ng` command: `ng build`. This command will generate the corresponding equivalent
    JavaScript code that can just be copied into the environment we are trying to
    deploy.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您现在已经意识到，我们为Angular编写的所有代码都是TypeScript，并且我们需要使用`ng`命令进行编译和生成可部署文件：`ng build`。这个命令将生成相应的等效JavaScript代码，可以直接复制到我们要部署的环境中。
- en: Deploying Angular applications is very simple and easy. In real-time scenarios,
    the build and deploy commands are integrated into the build pipelines. A common
    practice is to have a single Angular project running in one repository. However,
    we can also run multiple projects in a single repository.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 部署Angular应用程序非常简单和容易。在实时场景中，构建和部署命令已经集成到构建管道中。一个常见的做法是在一个存储库中运行一个单一的Angular项目。然而，我们也可以在一个存储库中运行多个项目。
- en: In this section, we will first learn about various compilation options we can
    consider for the deployment of our Angular applications. In the sections to follow,
    we will learn how to deploy a standalone application and also how to deploy composite
    Angular applications. Before we learn how to deploy our app, it's important to
    understand what happens when we build the application source code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先了解我们可以考虑用于部署Angular应用程序的各种编译选项。在接下来的章节中，我们将学习如何部署独立应用程序，以及如何部署复合Angular应用程序。在学习如何部署我们的应用程序之前，了解构建应用程序源代码时会发生什么是很重要的。
- en: 'Angular has two compilation options, which are applied based on the commands
    and meta flags we use:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Angular有两种编译选项，根据我们使用的命令和元标志来应用：
- en: Just-in-time compilation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即时编译
- en: Ahead-of-time compilation
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前编译
- en: What is just-in-time compilation?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是即时编译？
- en: 'The Angular **just-in-time** (**JIT**) compilation refers to compiling the
    code in the browser at runtime. This is the default behavior whenever we run the `ng
    build` command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的**即时**（**JIT**）编译是指在运行时在浏览器中编译代码。这是每当我们运行`ng build`命令时的默认行为：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This mechanism will add overhead to the request and Bootstrap time. The changes
    are reflected during runtime in our browser, which is great when developing an
    application. This option allows developers to quickly test changes while developing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种机制会增加请求和引导时间。更改会在我们的浏览器中反映出来，这在开发应用程序时非常好。这个选项允许开发人员在开发过程中快速测试更改。
- en: What is ahead-of-time compilation?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是提前编译？
- en: Angular's **ahead-of-time** (**AOT**) compilation means compiling the source
    TypeScript code, components, Angular HTML, libraries, and modules into the native
    JavaScript so that it can run on any browser smoothly. In other words, Angular
    will covert the code *before* it's downloaded by the browser.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的**提前**（**AOT**）编译意味着将源TypeScript代码、组件、Angular HTML、库和模块编译成本机JavaScript，以便它可以在任何浏览器上平稳运行。换句话说，Angular会在代码被浏览器下载之前进行转换。
- en: 'Let''s take a look at some of the benefits of AOT:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看AOT的一些好处：
- en: Better security
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的安全性
- en: Faster rendering
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的渲染
- en: Smaller framework and application size
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更小的框架和应用程序大小
- en: Finds errors well in advance
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前发现错误
- en: 'Ahead Of Time or just AOT compilation is applied by default when we run the `ng
    build --prod` meta flag:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提前编译或只是AOT编译在运行`ng build --prod`元标志时会默认应用：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we have understood the different types of compilations offered by Angular,
    it's finally time to actually deploy an Angular app. In the next section, we will
    learn how to deploy the Angular application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Angular提供的不同类型的编译，现在终于是时候实际部署Angular应用程序了。在下一节中，我们将学习如何部署Angular应用程序。
- en: Deploying a standalone Angular application
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署独立的Angular应用程序
- en: Armed with knowledge about deployment and compilation strategies, it's time
    to deploy our Angular application. When we run the `ng build` and `ng build --prod`
    commands, the native JavaScript files are generated, which we can deploy to our
    server. This is good if we are trying to deploy a single project application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了部署和编译策略的知识，现在是时候部署我们的Angular应用程序了。当我们运行`ng build`和`ng build --prod`命令时，会生成本机JavaScript文件，我们可以部署到我们的服务器上。如果我们要部署单个项目应用程序，这是很好的。
- en: In this section, we will learn how to deploy more complex use cases, such as
    when we have multiple projects in our Angular application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何部署更复杂的用例，比如当我们的Angular应用程序中有多个项目时。
- en: 'We are going to keep our applications simple in order for our readers to be
    able to follow along with these steps easily. However, you can practice the deployment
    commands by deploying the Angular projects you have developed so far. Let''s get
    started by creating a new Angular app:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的读者能够轻松跟随这些步骤，我们将保持我们的应用程序简单。但是，您可以通过部署到目前为止开发的 Angular 项目来练习部署命令。让我们开始创建一个新的
    Angular 应用程序：
- en: 'To install Angular CLI, let''s quickly use the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Angular CLI，让我们快速使用以下命令：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding run command. We
    have just installed the Angular CLI, which we will use to generate our application:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述运行命令的输出如下所示。我们刚刚安装了 Angular CLI，我们将使用它来生成我们的应用程序：
- en: '![](assets/26260c53-818c-4588-9ab3-c23b88d3d986.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26260c53-818c-4588-9ab3-c23b88d3d986.png)'
- en: 'Now that we have successfully installed the Angular CLI, it''s time to create
    an Angular app and call it `prod-ready`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们已经成功安装了 Angular CLI，现在是时候创建一个名为 `prod-ready` 的 Angular 应用程序了：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using the preceding command, we have generated a new project. The following screenshot
    shows the output that is generated:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令，我们已经生成了一个新项目。以下截图显示了生成的输出：
- en: '![](assets/f8bdba94-acfc-4d32-92bf-b6cb8bb01094.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8bdba94-acfc-4d32-92bf-b6cb8bb01094.png)'
- en: Beautiful! We have our newly generated application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们有了新生成的应用程序。
- en: 'Now, let''s navigate to the `prod-ready` application folder, as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们转到 `prod-ready` 应用程序文件夹，如下所示：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'All done. We are not going to change or add any new components. For now, I
    want you to understand the simplest way to deploy an app. Now, fire up the app
    using the `ng serve` command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全部完成。我们现在不打算更改或添加任何新组件。现在，我希望您了解部署应用程序的最简单方法。现在，使用 `ng serve` 命令启动应用程序：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding command will get the application started, and we should see the
    output displayed in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将启动应用程序，我们应该看到以下截图中显示的输出：
- en: '![](assets/b0be2df4-0265-4fb1-a33e-6d322eec6bd4.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0be2df4-0265-4fb1-a33e-6d322eec6bd4.png)'
- en: 'Launch the browser and then type `http://localhost:4200`. The default vanilla
    application should be displayed as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动浏览器，然后输入 `http://localhost:4200`。默认的原始应用程序应该显示如下：
- en: '![](assets/4e0a92d8-d649-4218-8a1a-ef756e4161dd.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4e0a92d8-d649-4218-8a1a-ef756e4161dd.png)'
- en: Awesome. So far, so good. We got our app working on our local environment and
    now it's time to deploy it to our application—that's right!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。到目前为止一切顺利。我们在本地环境中让我们的应用程序正常工作，现在是时候将其部署到我们的应用程序中了！
- en: To make you comfortable with the whole deployment process, we will deploy the
    vanilla application as it is, without making any changes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您对整个部署过程感到舒适，我们将部署原始应用程序，而不进行任何更改。
- en: 'To deploy, run the following `ng` command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要部署，请运行以下 `ng` 命令：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the command runs successfully, you should see that the following folders
    and files have been created. Let''s take a look at some of the important things
    to note:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功运行，您应该看到以下文件夹和文件已被创建。让我们看一下一些重要的注意事项：
- en: You should notice a new folder called `dist/<defaultProject>`.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该注意到一个名为 `dist/<defaultProject>` 的新文件夹。
- en: 'You should also notice the following files created inside the `dist` folder:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还应该注意到 `dist` 文件夹中创建的以下文件：
- en: '`runtime`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`运行时`'
- en: '`main`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`主要`'
- en: '`polyfills`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`填充`'
- en: '`styles`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`样式`'
- en: 'The output of the preceding `build` command is given as follows. The output
    will be under the `dist` folder with the same application name:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `build` 命令的输出如下。输出将位于 `dist` 文件夹中，与应用程序名称相同：
- en: '![](assets/eda1b30e-3db1-434d-a42b-ae752c1291e5.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eda1b30e-3db1-434d-a42b-ae752c1291e5.png)'
- en: 'We don''t have to necessarily use the default folder name; that is, we can
    provide the output path and folder name as an argument and Angular will generate
    the code in that folder. It''s easy to customize the output directory where we
    would want our files to be generated:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不一定要使用默认的文件夹名称；也就是说，我们可以将输出路径和文件夹名称作为参数提供，Angular将在该文件夹中生成代码。很容易定制我们希望生成文件的输出目录：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the preceding command and we should see our custom folder and files generated
    in our folder. In the preceding command, we specified that we want our files to
    be generated in the folder named `compiled`, and we provided the path. The following
    is a screenshot after the command has run successfully:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令，我们应该看到我们的自定义文件夹和文件在我们的文件夹中生成。在上述命令中，我们指定了我们希望我们的文件生成在名为`compiled`的文件夹中，并提供了路径。以下是命令成功运行后的屏幕截图：
- en: '![](assets/e754293e-e766-45f6-9696-c1bc715893b6.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e754293e-e766-45f6-9696-c1bc715893b6.png)'
- en: That's all we need to do to generate and deploy our Angular application. Just
    copy all the files to the root directory on your server and that's it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要做的来生成和部署我们的Angular应用程序。只需将所有文件复制到服务器的根目录，就完成了。
- en: In the next section, we will learn how to deploy a more complex architecture
    of an Angular application, and we will then go on to deploy the composite application
    in multiple ways.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何部署一个更复杂的Angular应用程序架构，然后我们将以多种方式部署复合应用程序。
- en: Deploying composite Angular applications
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署复合Angular应用程序
- en: In the previous section, we learned how to deploy a standalone Angular application,
    which is fairly straightforward. However, we can be in situations where we may
    have to build and deploy multiple applications all running in a single repository.
    Is it possible? Certainly. In this section, we will create an Angular repository
    with multiple projects and learn how to deploy a composite application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何部署一个独立的Angular应用程序，这是相当简单的。然而，我们可能会遇到需要构建和部署多个应用程序并运行在单个存储库中的情况。这是可能的吗？当然可以。在本节中，我们将创建一个具有多个项目的Angular存储库，并学习如何部署一个复合应用程序。
- en: Creating and deploying multiple Angular applications
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和部署多个Angular应用程序
- en: 'In a more realistic real-world application, we will need to run multiple Angular
    applications, which will be composed of multiple projects, libraries, modules,
    and microservices, as shown in the following diagram:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在更现实的实际应用程序中，我们将需要运行多个Angular应用程序，这些应用程序将由多个项目、库、模块和微服务组成，如下图所示：
- en: '![](assets/b5cbe12d-1f1d-44e7-935e-b085fe9f80c1.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5cbe12d-1f1d-44e7-935e-b085fe9f80c1.png)'
- en: 'In the preceding diagram, some of the important things to note are detailed
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，一些重要的事项如下所述：
- en: There are multiple Angular projects and applications.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多个Angular项目和应用程序。
- en: '**Library #1** and **Library #2** can be reused in multiple projects simply
    by importing the libraries.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库 #1** 和 **库 #2** 可以通过导入库在多个项目中重复使用。'
- en: During the development phase, we will create multiple modules that can also
    be reused in multiple projects.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发阶段，我们将创建多个模块，这些模块也可以在多个项目中重复使用。
- en: 'So, let''s jump right into it and create multiple projects, libraries, and
    modules. Finally, we''ll package the app in different ways. So, let''s begin by
    getting our Angular application up and running:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们立即开始创建多个项目、库和模块。最后，我们将以不同的方式打包应用程序。所以，让我们开始让我们的Angular应用程序运行起来：
- en: 'First things first. We will need to generate an application, and we are going
    to use Angular CLI to generate the application. We will first need to install
    the Angular CLI using the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要做的是，我们需要生成一个应用程序，我们将使用Angular CLI来生成应用程序。我们首先需要使用以下命令安装Angular CLI：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Upon successful execution of the preceding command, we should see the following
    output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行上述命令后，我们应该看到以下输出：
- en: '![](assets/33b7aa6f-e3b6-4bbb-b683-e71fe4c0a277.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/33b7aa6f-e3b6-4bbb-b683-e71fe4c0a277.png)'
- en: 'Now that we have installed Angular CLI, let''s create the app using the following
    command. We are calling it `shopping-cart`. Now, run the following `ng` command
    to generate the new project:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Angular CLI，让我们使用以下命令创建应用程序。我们将其称为`shopping-cart`。现在，运行以下`ng`命令生成新项目：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using the preceding command, we are generating a new application called `shopping-cart`.
    The output of the preceding command is given as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令，我们生成了一个名为`shopping-cart`的新应用程序。上述命令的输出如下：
- en: '![](assets/2e7313e6-f27c-4f81-8203-530d35277916.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2e7313e6-f27c-4f81-8203-530d35277916.png)'
- en: 'We have now created our new app called `shopping cart`. Let''s modify `app.component.html`
    and add two `routerLink` hyperlinks named `list-jackets` and `list-vendors`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在创建了一个名为`shopping cart`的新应用程序。让我们修改`app.component.html`并添加两个名为`list-jackets`和`list-vendors`的`routerLink`超链接：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding code, we have created two links in the `app.component.html`
    file. The result is displayed as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们在`app.component.html`文件中创建了两个链接。结果显示如下：
- en: '![](assets/7302b26d-2c27-43fd-8054-6e28bd855495.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7302b26d-2c27-43fd-8054-6e28bd855495.png)'
- en: 'So far, so good. Essentially, we have an Angular application up and running. Now,
    we are going to learn how to run and deploy multiple Angular projects inside the
    same repository. In order to do so, we will follow these steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好。基本上，我们已经有了一个正在运行的Angular应用程序。现在，我们将学习如何在同一个存储库中运行和部署多个Angular项目。为了做到这一点，我们将按照以下步骤进行：
- en: 'Let''s create a new application in the same repository using the following
    command. We are generating a new application called `jackets`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令在同一个存储库中创建一个新应用程序。我们正在生成一个名为`jackets`的新应用程序：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We are creating a new application using the `ng` command, which we''ll name `jackets`.
    We should see the following output:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ng`命令创建一个名为`jackets`的新应用程序。我们应该看到以下输出：
- en: '![](assets/46adbd0d-be87-4f54-b76e-f828d3d8bdcb.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46adbd0d-be87-4f54-b76e-f828d3d8bdcb.png)'
- en: 'Woohoo! With the Angular CLI schematics, it''s really simple to create multiple
    projects inside the same app. Take a look at the files that have been autogenerated
    and some of the files that have been updated by the Angular CLI for us:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哇哦！使用Angular CLI的schematics，很容易在同一个应用程序中创建多个项目。看一下自动生成的文件以及Angular CLI为我们更新的一些文件：
- en: '![](assets/9c8081a0-95e5-4fb2-acfc-16005feecb3d.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c8081a0-95e5-4fb2-acfc-16005feecb3d.png)'
- en: 'If you look carefully, you''ll notice that the following are some of the important
    things that have happened to our application structure and files:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察，您会注意到以下是我们应用程序结构和文件发生的一些重要变化：
- en: A new folder called `Projects` is auto-created and its corresponding entry is
    generated in the `angular.json` file.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`Projects`的新文件夹被自动生成，并且在`angular.json`文件中生成了相应的条目。
- en: In the `Projects` folder, we will see the new `Jackets` project with the same
    default vanilla application files that have been generated.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Projects`文件夹中，我们将看到具有相同默认vanilla应用程序文件的新`Jackets`项目已生成。
- en: 'Now, to verify whether the new `Jackets` project was added, let''s check out
    the `Angular.json` file:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了验证是否已添加新的`Jackets`项目，请查看`Angular.json`文件：
- en: '![](assets/0af62078-7b76-407b-9c2e-53c0bd5970c0.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0af62078-7b76-407b-9c2e-53c0bd5970c0.png)'
- en: You will notice inside the `Angular.json` file that we have project-specific
    entries for shopping-cart, shopping-cart-e2e, jackets, and jackets-e2e. Beautiful.
    Technically speaking, we are now running two apps inside the same repository.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到在`Angular.json`文件中，我们有针对shopping-cart、shopping-cart-e2e、jackets和jackets-e2e的项目特定条目。很棒。从技术上讲，我们现在在同一个存储库中运行两个应用程序。
- en: 'It''s now time to extend our application by adding a few components, libraries,
    and modules. First, we will need to create a component inside our `jackets` project.
    Run the following `ng` command to generate the component:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候通过添加一些组件、库和模块来扩展我们的应用程序了。首先，我们需要在我们的`jackets`项目中创建一个组件。运行以下`ng`命令来生成组件：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the preceding command and we should see the component and respective files
    generated. We should see the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令，我们应该看到生成的组件和相应文件。我们应该看到以下输出：
- en: '![](assets/e2d27a15-4972-43dd-9abf-43997a02d5da.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e2d27a15-4972-43dd-9abf-43997a02d5da.png)'
- en: Now that we have created a new component inside the `Jackets` project, it's
    time to add it to `app-routing.module.ts` so that it's available to use across
    the `Jackets` project.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经在`Jackets`项目中创建了一个新的组件，是时候将其添加到`app-routing.module.ts`中，以便在`Jackets`项目中可以使用。
- en: 'In the following code snippet, we are importing the newly created component
    inside the `app-routing.module.ts` file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们在`app-routing.module.ts`文件中导入了新创建的组件：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After importing the component, it''s time to create a route for our component:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入组件后，是时候为我们的组件创建一个路由了：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding code snippet, we are creating `list-jackets` and `list-vendors`
    routes that are mapped to the respective `JacketListComponent` and `VendorsComponent` components. Here
    are two important things to note in the preceding code snippet:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们创建了`list-jackets`和`list-vendors`路由，它们分别映射到相应的`JacketListComponent`和`VendorsComponent`组件。在上述代码片段中有两个重要的事项需要注意：
- en: We are running multiple Angular projects.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在运行多个Angular项目。
- en: We are linking components from various projects inside each other.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在在各个项目中相互链接组件。
- en: 'We have already added the router links to `app.component.html`. Now, let''s
    fire up our application by running the `ng serve` command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经将路由链接添加到`app.component.html`。现在，让我们通过运行`ng serve`命令启动我们的应用程序：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Launch the `http://localhost:4200` browser and we should see the following
    output displayed:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中输入`http://localhost:4200`，我们应该看到以下输出显示：
- en: '![](assets/bb14f0e5-8b0a-4f73-a4a4-5be53a9d7115.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb14f0e5-8b0a-4f73-a4a4-5be53a9d7115.png)'
- en: So, now we have two apps running and we have components that are shared across
    different projects.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们有两个运行的应用程序，并且我们有跨不同项目共享的组件。
- en: 'Great. Now, why don''t we add a few libraries that we can share between multiple
    projects? Let''s begin:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。现在，为什么我们不添加一些可以在多个项目之间共享的库呢？让我们开始吧：
- en: 'We will create a new Angular library called `vendors`. We will use the `ng`
    command and call the library `vendors`. Let''s run the following command to generate
    the library:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`vendors`的新的Angular库。我们将使用`ng`命令并将库命名为`vendors`。让我们运行以下命令来生成库：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'On running the preceding command successfully, we should see the following output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 成功运行上述命令后，我们应该看到以下输出：
- en: '![](assets/dad9e045-56b4-4d82-95ec-25436dffeb3d.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dad9e045-56b4-4d82-95ec-25436dffeb3d.png)'
- en: 'Once the library is generated, Angular CLI will create the following folders
    and files:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦库被生成，Angular CLI将创建以下文件夹和文件：
- en: '![](assets/e23bad0f-b730-478d-b4c2-a8bc80896fcd.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e23bad0f-b730-478d-b4c2-a8bc80896fcd.png)'
- en: 'Here are some important things to note once the command runs successfully:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些重要的事项，一旦命令成功运行：
- en: Under `Projects`, a new `Vendors` library project is created.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Projects`下创建一个新的`Vendors`库项目。
- en: Angular will also make the necessary changes and entries in the `Angular.json`
    file.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular还将在`Angular.json`文件中进行必要的更改和条目。
- en: Note that `projecType` is of the `library` type.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，`projecType`是`library`类型。
- en: 'The following screenshot shows the data displayed for the newly created library
    project:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了新创建的库项目的显示数据：
- en: '![](assets/c5ac8cc0-8829-42da-8b72-21d2683133fe.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c5ac8cc0-8829-42da-8b72-21d2683133fe.png)'
- en: 'Now, open the `vendors` folder and, under `src/lib`, edit the `vendors.component.ts`
    file and add some fancy text:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`vendors`文件夹，在`src/lib`下编辑`vendors.component.ts`文件并添加一些花哨的文本：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Remember, we have created the router link for the `vendor` component earlier,
    so we should see the changes reflected in the application:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记住，我们之前为`vendor`组件创建了路由链接，所以我们应该在应用程序中看到反映出的更改：
- en: '![](assets/52f3334a-4932-4d76-9722-1a9843029070.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52f3334a-4932-4d76-9722-1a9843029070.png)'
- en: Now that we have built an Angular app that has multiple projects, libraries,
    and routing systems to share different components, it's time to deploy the app.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了一个具有多个项目、库和路由系统以共享不同组件的Angular应用程序，是时候部署应用程序了。
- en: 'Deployment is simple and is just like what we did for a standalone app:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 部署很简单，就像我们为独立应用程序所做的一样：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once you run the command, here are some important things that will happen:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，将发生一些重要的事情：
- en: To generate the final deployment files, we are running the `ng build` command.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了生成最终部署文件，我们正在运行`ng build`命令。
- en: We are using the `--prod` meta flag, to which we will apply AOT compilation
    while compiling.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用`--prod`元标志，编译时将应用AOT编译。
- en: Most importantly, we need to pass the `--base-href` meta flag, which will point
    to the server's root folder/path.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的是，我们需要传递`--base-href`元标志，它将指向服务器的根文件夹/路径。
- en: Without a proper `--base-href` value, Angular applications will not work properly
    and will give you errors to link the generated files.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 没有适当的`--base-href`值，Angular应用程序将无法正常工作，并会给您链接生成的文件的错误。
- en: '![](assets/60bfd6d8-0aca-4b76-9b55-37b1b7920132.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60bfd6d8-0aca-4b76-9b55-37b1b7920132.png)'
- en: 'From the previous section, we already know that after we run the `build` command,
    Angular will generate the compiled folders and files, as shown in the following
    screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的部分，我们已经知道运行`build`命令后，Angular将生成编译后的文件夹和文件，如下截图所示：
- en: '![](assets/48fce323-8215-47f6-bbe9-22e40339499d.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/48fce323-8215-47f6-bbe9-22e40339499d.png)'
- en: 'Here are some important points to note from the preceding screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的截图中需要注意的一些重要点：
- en: The command will generate the output of compiled files that have multiple projects,
    libraries, and components.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该命令将生成编译文件的输出，其中包含多个项目、库和组件。
- en: Carefully consider the `--base-href` value we have set. We are running XAMPP
    locally, hence the path is pointing to the localhost.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细考虑我们设置的`--base-href`值。我们在本地运行XAMPP，因此路径指向`localhost`。
- en: Now, let's copy all the code from the `dist` folder and paste it into our `XAMPP`
    folder.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将所有代码从`dist`文件夹复制并粘贴到我们的`XAMPP`文件夹中。
- en: 'Launch the Angular application using the local server and you should see the
    output displayed as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地服务器启动Angular应用程序，您应该看到以下显示的输出：
- en: '![](assets/f42705cd-a426-464f-aea1-13c4ba5f2909.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f42705cd-a426-464f-aea1-13c4ba5f2909.png)'
- en: That's really cool! Even so, we can improve this a lot. In a more realistic
    setup, any large Angular implementations will have feature teams, and the library
    or module developed by one team should be easily shareable with other teams as
    a module. That's where writing reusable modules comes into the picture. We are
    going to learn how to distribute Angular modules as `npm` modules.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很酷！即便如此，我们还可以大大改进。在更现实的设置中，任何大型的Angular实现都将拥有特性团队，由一个团队开发的库或模块应该很容易地与其他团队共享作为一个模块。这就是可重用模块的编写方式。我们将学习如何将Angular模块分发为`npm`模块。
- en: Packing the Angular project as an npm package
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Angular项目打包为npm包
- en: 'Now, let''s learn how to export our Angular project as an `npm` module. We
    will continue to use the same `vendors` library that we created in the previous
    example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何将我们的Angular项目导出为`npm`模块。我们将继续使用在上一个示例中创建的`vendors`库：
- en: 'Note that we do *not* wish to deploy the entire application, rather, we only
    want to deploy the `vendors` library. We will use the same `ng build` command
    to build the `vendors` Angular project:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们*不*希望部署整个应用程序，而是只想部署`vendors`库。我们将使用相同的`ng build`命令来构建`vendors`Angular项目：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once the command is successfully executed, we will see that Angular will generate
    the compiled files for our `vendors` project under the `dist` folder, as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦命令成功执行，我们将看到Angular将在`dist`文件夹下为我们的`vendors`项目生成编译文件，如下所示：
- en: '![](assets/9123103f-b243-4a45-a860-9d877123ab17.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9123103f-b243-4a45-a860-9d877123ab17.png)'
- en: 'Navigate to the `dist/vendors` folder and run the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`dist/vendors`文件夹并运行以下命令：
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We are using the `npm pack` command to generate a package out of the current
    folder, which is compiled of files from the `vendors` project. We should see the
    following output:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`npm pack`命令从当前文件夹生成一个包，其中包含来自`vendors`项目的文件。我们应该看到以下输出：
- en: '![](assets/4deb7785-1692-41da-9b44-c5a110484281.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4deb7785-1692-41da-9b44-c5a110484281.png)'
- en: 'Upon successful execution, we will see the `vendors-0.01.tgz` file created
    in the folder. We can now distribute this file as an `npm` package, which can
    be reused across any projects:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功执行后，我们将在文件夹中看到创建的`vendors-0.01.tgz`文件。现在我们可以将此文件作为`npm`包进行分发，可以在任何项目中重复使用：
- en: '![](assets/0d01783b-9eec-4ce6-a355-1264b7c5680c.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d01783b-9eec-4ce6-a355-1264b7c5680c.png)'
- en: 'Let''s now give it a test drive, by installing the newly generated `npm` module
    into our application. To install the package, run the `npm install` command by
    pointing to `vendors-0.0.1.tgz`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们进行测试，通过将新生成的`npm`模块安装到我们的应用程序中来进行测试。要安装该包，请运行`npm install`命令，指向`vendors-0.0.1.tgz`：
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Upon completion, we should see the following output informing us that the package
    has been added:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们应该看到以下输出，通知我们已添加了该包：
- en: '![](assets/45a011d9-bb4e-4712-9b1c-ede73fd07d4e.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45a011d9-bb4e-4712-9b1c-ede73fd07d4e.png)'
- en: 'We can also verify whether the package was added successfully to the `package.json`
    file. We should see an entry in `package.json` displayed as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以验证包是否成功添加到`package.json`文件中。我们应该看到`package.json`中显示如下条目：
- en: '![](assets/cb95d351-8480-446a-a1e7-74eff6da775e.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb95d351-8480-446a-a1e7-74eff6da775e.png)'
- en: Awesome! In this section, we learned how to deploy the Angular application as
    a standalone app and also as a composite app.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！在本节中，我们学习了如何将Angular应用程序部署为独立应用程序，也学习了如何将其部署为复合应用程序。
- en: We also learned how to create a package of the Angular project that can be distributed
    and used in multiple Angular projects.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何创建一个Angular项目的包，可以在多个Angular项目中进行分发和使用。
- en: Deploying Angular apps to GitHub Pages
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Angular应用程序部署到GitHub Pages
- en: In previous sections, we learned about deploying our standalone app and deploying
    the composite app to any server by exporting the compiled source files for the
    application.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的部分中，我们学习了如何部署我们的独立应用程序，以及通过导出应用程序的编译源文件将复合应用程序部署到任何服务器。
- en: In this section, we will learn how to deploy our Angular app to GitHub Pages.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将我们的Angular应用程序部署到GitHub Pages。
- en: Throughout the book, we have created many Angular projects and now it's time
    to host them, for free!
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们创建了许多Angular项目，现在是时候免费托管它们了！
- en: Creating and deploying applications in GitHub Pages
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub Pages中创建和部署应用程序
- en: GitHub Pages are websites for your projects hosted on GitHub. Did we say free?
    Of course, the GitHub Pages are free! Just edit, push, and view the changes live
    on your free website.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Pages是托管在GitHub上的项目的网站。我们说了免费吗？当然，GitHub Pages是免费的！只需编辑、推送，就可以在您的免费网站上实时查看更改。
- en: 'Let''s take a look at how to create and host our application on GitHub Pages step
    by step:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步看看如何在GitHub Pages上创建和托管我们的应用程序：
- en: 'Let''s get started by installing Angular CLI using the `npm install` command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过使用`npm install`命令来安装Angular CLI：
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Upon completion of the command, it''s time to create a new Angular project.
    Let''s call it `deploying-angular`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令完成后，是时候创建一个新的Angular项目了。让我们称之为`deploying-angular`：
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once the command is executed successfully, we should see the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行命令后，我们应该看到以下截图：
- en: '![](assets/355fa5a9-71f9-4309-afac-afccbb1fbd3c.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/355fa5a9-71f9-4309-afac-afccbb1fbd3c.png)'
- en: 'Now it''s time to initiate a Git repository. We can do that by executing the
    following command:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候初始化一个Git仓库了。我们可以通过执行以下命令来做到这一点：
- en: '[PRE24]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Upon successful execution, you will see the repository initialized or, in the
    following case, if a repository already exists, then it will be reinitialized as
    follows:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功执行后，您将看到仓库已初始化，或者在以下情况下，如果仓库已存在，则将重新初始化如下：
- en: '![](assets/e2570861-f457-4a8d-9943-60d61df9822e.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e2570861-f457-4a8d-9943-60d61df9822e.png)'
- en: 'Feel free to make any changes to `app.component.html` or any files that you
    would want to modify. Then, once you are ready to deploy, first commit the code/changes
    by executing the `commit` Git command. We can also pass the `-m` meta flag and
    add a message to the commit:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随意对`app.component.html`或任何要修改的文件进行任何更改。然后，一旦准备部署，通过执行`commit` Git命令来首先提交代码/更改。我们还可以传递`-m`元标志并向提交添加消息：
- en: '[PRE25]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we need to set the `origin` to the repository. The following command
    sets the remote `origin` to the repository:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将`origin`设置为仓库。以下命令将远程`origin`设置为仓库：
- en: '[PRE26]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: All right. All set.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。一切准备就绪。
- en: 'Now, the superpowers come in. To deploy your Angular app to GitHub directly,
    we will need to install a package called `angular-cli-ghpages`. This is an official
    distribution to deploy Angular apps to GitHub Pages directly:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，超级能力来了。要直接将您的Angular应用程序部署到GitHub，我们需要安装一个名为`angular-cli-ghpages`的软件包。这是一个官方分发，可直接将Angular应用程序部署到GitHub
    Pages：
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This is the output we will get up on running the preceding code:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在运行上述代码后将得到的输出：
- en: '![](assets/2a6a2d80-20cd-4530-854d-a6fefd2b3cf3.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a6a2d80-20cd-4530-854d-a6fefd2b3cf3.png)'
- en: Now that we have `angular-cli-ghpages` installed, it's time to build our application
    and get the compiled source files.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了`angular-cli-ghpages`，是时候构建我们的应用程序并获取编译后的源文件了。
- en: 'Let''s run the `ng build` command with the `--prod` meta flag and also set
    `--base-href`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`--prod`元标志运行`ng build`命令，并设置`--base-href`：
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `--base-href` flag is pointing to the source repository on GitHub. You will
    need to register with GitHub and get your authorization token in order to host
    your application.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`--base-href`标志指向GitHub上的源仓库。您需要在GitHub上注册并获取授权令牌，以便托管您的应用程序。'
- en: 'Here is the `base href` URL, which is the author''s GitHub home page, and the
    corresponding `deploying-angular` repository:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是`base href` URL，作者的GitHub主页，以及相应的`deploying-angular`仓库：
- en: '[PRE29]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once we build the Angular application, we will see that the compiled source
    code is generated under `dist/<defaultProject> -defaultProject`. The compiled
    source is usually the folder name that we specify as the application name:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Angular应用程序后，我们将看到编译后的源代码生成在`dist/<defaultProject> -defaultProject`下。编译后的源代码通常是我们指定的应用程序名称作为文件夹名称：
- en: '![](assets/2aeb323b-e9e9-4a82-90ee-16fb32d3a1d2.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2aeb323b-e9e9-4a82-90ee-16fb32d3a1d2.png)'
- en: 'Now that we have our compiled files generated, it''s time to deploy the application
    to GitHub Pages. We do this by running the `npx ngh --no-silent` command:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经生成了编译文件，是时候将应用程序部署到GitHub Pages了。我们通过运行`npx ngh --no-silent`命令来实现这一点：
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Remember that, optionally, we will need to mention the corresponding `dist`
    folder that we want to deploy:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，可选地，我们需要提到我们想要部署的相应`dist`文件夹：
- en: '![](assets/39352a35-0863-49d5-9031-fcfcea921cf2.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39352a35-0863-49d5-9031-fcfcea921cf2.png)'
- en: 'Upon successful execution of the command, the package we installed for deploying
    the Angular application to GitHub Pages will run the required jobs, such as cleaning,
    fetching the origin, checking out the code, and, finally, pushing the latest code
    to the repository, and will then be ready to host in GitHub Pages:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功执行命令后，我们安装的用于将Angular应用程序部署到GitHub Pages的包将运行所需的作业，例如清理、获取原始代码、检出代码，最后将最新代码推送到存储库，并准备在GitHub
    Pages上托管：
- en: '![](assets/e17ec2fe-544d-4efd-ae53-509728514649.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e17ec2fe-544d-4efd-ae53-509728514649.png)'
- en: 'Once the commands are executed, navigate to your GitHub account and click on
    Settings under the repository. You will see the site published to the URL:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦命令执行完毕，请转到您的GitHub帐户，并在存储库下点击“设置”。您将看到网站发布到以下网址：
- en: '![](assets/73cda76d-6f29-4a9f-8286-5007b7ede63b.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73cda76d-6f29-4a9f-8286-5007b7ede63b.png)'
- en: Click on the link displayed under the repository and we should see that our
    app is up and running!
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击存储库下显示的链接，我们应该看到我们的应用程序正在运行！
- en: 'Congratulations! We just published our first Angular application to GitHub
    Pages:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们刚刚将我们的第一个Angular应用程序发布到了GitHub Pages：
- en: '![](assets/cadc6b54-9240-4f47-a095-39aaf69c829b.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cadc6b54-9240-4f47-a095-39aaf69c829b.png)'
- en: In the preceding series of steps, we learned how to deploy our Angular application
    to GitHub Pages. In more realistic scenarios, we will also need to deploy the
    APIs or backend services to our server. We can do that by deploying our APIs to
    either Firebase or self-hosted servers.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的一系列步骤中，我们学会了如何将我们的Angular应用程序部署到GitHub Pages。在更现实的情况下，我们还需要将API或后端服务部署到我们的服务器上。我们可以通过将API部署到Firebase或自托管服务器来实现。
- en: Now, go ahead and just repeat the same for all the projects and applications
    created so far.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续为到目前为止创建的所有项目和应用程序重复相同的步骤。
- en: Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Deploying an application holds extreme importance: all our hard work of developing will
    show up once the site is alive.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序非常重要：我们的所有辛勤工作将在网站上线后展现出来。
- en: Deploying Angular applications is pretty straightforward if you generate the
    required compiled source code, and, with latest versions of Angular, the AOT compilation
    defaults to any build generated with the `--prod meta` flag. We learned about
    the importance of AOT and how critical it is to have it for overall application
    performance and security. We learned to deploy a standalone Angular application
    and also composite Angular applications with multiple projects, libraries, and
    components.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 部署Angular应用程序非常简单，只需生成所需的编译源代码，而且在最新版本的Angular中，AOT编译默认为使用`--prod meta`标志生成的任何构建。我们了解了AOT的重要性以及对整体应用程序性能和安全性的关键性。我们学会了部署独立的Angular应用程序，以及由多个项目、库和组件组成的复合Angular应用程序。
- en: Finally, we learned about deploying our Angular application to GitHub Pages
    using the official `angular-cli-ghpages` package.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学会了如何使用官方的`angular-cli-ghpages`包将我们的Angular应用程序部署到GitHub Pages。
- en: That brings us to the conclusion of our last chapter in this book. We have come
    a long way in our learning journey, from understanding the basics of the TypeScript
    language to learning how to build our Angular applications by implementing the
    Angular framework's components, routing systems, directives, pipes, forms, backend
    services, and much more.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在本书的最后一章的结论。在学习过程中，我们从理解TypeScript语言的基础知识到学习如何通过实现Angular框架的组件、路由系统、指令、管道、表单、后端服务等来构建我们的Angular应用程序，我们走了很长一段路。
- en: We also learned about implementing various CSS frameworks, such as Bootstrap,
    Angular Material, and Flex layout with our Angular applications. Additionally,
    we learned how to design and make our application's UI much more appealing and
    interactive.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何在我们的Angular应用中实现各种CSS框架，比如Bootstrap、Angular Material和Flex布局。此外，我们还学会了如何设计和使我们应用的用户界面更具吸引力和互动性。
- en: We explored unit testing using the Jasmine and Karma frameworks, which ensures
    that our applications are well-tested and are rock-solid implementations.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了使用Jasmine和Karma框架进行单元测试，这确保我们的应用经过了充分测试，并且实现非常稳固。
- en: We have also implemented the user authentication mechanism using Auth0 and Firebase
    as part of learning Angular Advanced topics. Finally, we covered the deployment
    of Angular applications.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 作为学习Angular高级主题的一部分，我们还实现了使用Auth0和Firebase的用户认证机制。最后，我们讨论了Angular应用的部署。
- en: That is a 360-degree overview of all aspects of application development using
    the Angular framework. We hope you now feel empowered to build world-class products
    using the Angular framework.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用Angular框架开发应用的所有方面的360度概述。我们希望你现在有能力使用Angular框架构建世界一流的产品。
- en: We wish you all the best and look forward to hearing about your success stories
    soon.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你一切顺利，并期待很快听到你的成功故事。
- en: Good luck! Onward and upward.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你好运！继续向前，不断进步。
