- en: Deploying Your Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers publish their apps to different marketplaces in order to distribute
    them to end users. For iOS, it's the Apple App Store. On Android, the primary
    choice is the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: If you're new to mobile development thanks to the power of React Native, this
    will seem like a new world for you. Having a background in the Web, I personally
    felt lost at first when it came time to publish my first mobile app-after all,
    we're used to deploying our apps to a server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''re going to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover the requirements for submitting an app to both the Apple App Store
    and Google Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the importance of app logos and screenshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a description for our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For iOS, verify our app with Xcode and bundle it for submission to iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submit the iOS app for review with Apple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use TestFlight to create internal and external beta tests for users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Developer Console to add and submit our Android application to Google
    Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to send alpha and beta versions of our Android apps to test users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At a base level, to submit your apps to either the App Store or Google Play,
    you will need a developer membership for the platform(s) of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: For iOS, you will need an Apple Developer membership. This annual, paid membership
    gives you the ability to publish on all of Apple's platforms-iOS, macOS, and tvOS.
    It also grants you the option of sending preproduction versions of your applications
    to beta testers first.
  prefs: []
  type: TYPE_NORMAL
- en: With distribution to an Android device, the most popular channel is the Google
    Play Store. It reaches every official, Google-supported Android device and requires
    a Publisher Account.
  prefs: []
  type: TYPE_NORMAL
- en: For both apps, we also need to provide app icons so that our users don't install
    a blank icon to their devices, and screenshots so that they have a better idea
    of what they are downloading in advance.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go any further, it should be stated that the app we've built, with
    the included screenshots, may not be accepted by an editorial board for sale on
    either App Store. We're using this project as a means to have a working app for
    going through the motions of actually submitting an application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating developer memberships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process for signing up for a developer membership in either store is different.
    Since the prerequisites and steps to do so may change at any given time, I will
    spare you the step-by-step details.
  prefs: []
  type: TYPE_NORMAL
- en: Enrolling in the Apple Developer Program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To sign up for an Apple Developer account, point your browser to [https://developer.apple.com](https://developer.apple.com).
  prefs: []
  type: TYPE_NORMAL
- en: Joining the Apple Developer Program requires an Apple ID. As of the publishing
    of this book, members pay a $99 annual fee for the program.
  prefs: []
  type: TYPE_NORMAL
- en: Signing up for a Google Play Publisher account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with your Publisher account, point your browser to [https://play.google.com/apps/publish](https://play.google.com/apps/publish).
  prefs: []
  type: TYPE_NORMAL
- en: To sign up for a Google Play Publisher Account, you will need a Google Account-usually,
    this is your Gmail address. As of the publishing of this book, the program requires
    a $25 one-time fee to join.
  prefs: []
  type: TYPE_NORMAL
- en: Making your app look great
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to having membership in the appropriate platforms' developer programs,
    submitting your application to either store requires that you provide it with
    an app logo, screenshots of the app, and a description.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an icon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Icons are the gateway to your application. It's what your users will interact
    with to access your app. To submit an application to the appropriate marketplace
    of your choice, it has to have an icon.
  prefs: []
  type: TYPE_NORMAL
- en: Because an icon is your app's brand, it's increasingly not enough to simply
    create a solid color shade and slap some text on it-users expect more.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I like using Sketch ([https://www.sketchapp.com/](https://www.sketchapp.com/))
    to design my app icons. While my design skills are not the greatest, I find it
    simple and intuitive to use.
  prefs: []
  type: TYPE_NORMAL
- en: There are so many ways you can procure an icon for your application. You could
    hire someone (either locally or online) to design one, or create one yourself
    using a plethora of applications.
  prefs: []
  type: TYPE_NORMAL
- en: When I need to generate different-sized app icons for submission to the App
    Store and Google Play, my go-to service is MakeAppIcon ([https://makeappicon.com](https://makeappicon.com)),
    which is available on the Web as a drag and drop service, as well as a standalone
    Mac app.
  prefs: []
  type: TYPE_NORMAL
- en: Taking app screenshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Screenshots give your potential app customers a glimpse into how your application
    looks.
  prefs: []
  type: TYPE_NORMAL
- en: One quick way to create screenshots is simply to take them on your device or
    simulator with the application running, and then upload those to the App Store
    or Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: You can add additional aesthetics to your screenshots using a variety of services.
    There happens to be one that imposes your screenshot within the photo of an iOS
    device, giving your potential customers a look at how the app appears on a physical
    device.
  prefs: []
  type: TYPE_NORMAL
- en: To add things such as a device/background to my screenshots, LaunchKit has a
    great Sketch-to-App-Store plugin ([http://sketchtoappstore.com/](http://sketchtoappstore.com/))
    that can help make this happen, though the devices available to impose your screenshots
    on are a bit dated-the most recent iOS device is an iPhone 6 Plus, and the only
    available Android device is a Nexus 5.
  prefs: []
  type: TYPE_NORMAL
- en: There are also services that help strip out the status bar in case you don't
    want it shown in your screenshot--especially important if you're taking that screenshot
    on a device with a heavily populated status bar or if your screenshots have varying
    times showing on the bar and you want to present them with a level of consistency.
  prefs: []
  type: TYPE_NORMAL
- en: I like using Status Barred from the Mac App Store ([https://itunes.apple.com/us/app/status-barred/id413853485?mt=12](https://itunes.apple.com/us/app/status-barred/id413853485?mt=12))
    to crop the status bar from my screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without a proper description, your potential customers won't know what your
    application does or have the relevant information to decide whether to install
    your app or not. Regardless of whether your app is free or paid, the lack of a
    proper description will be a negative strike against your application.
  prefs: []
  type: TYPE_NORMAL
- en: A simple one-liner won't do it either--you want to convey to your potential
    customers exactly why they want to download your app. What does it do? What features
    does it have that will make your users interested in it?
  prefs: []
  type: TYPE_NORMAL
- en: Always take the opportunity to write a detailed description for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Combining it all
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like it or not, a good description alongside a nice app icon and screenshots
    does make or break your app when a potential customer decides whether to download
    it or not.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a developer membership, an icon, screenshots for your app, and
    a description, you're ready to start the process of submitting your application
    for the world to enjoy.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to go through the steps taken to submit `Friends`, our Facebook
    client, over to both the App Store and Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Apple App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do is give our app an iOS App ID. In the Apple Developer
    portal at [https://developer.apple.com](https://developer.apple.com), select Certificates,
    Identifiers & Profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are in the portal to manage your Certificates, Identifiers, & Profiles,
    select the option for App IDs, then press the add button in the upper-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-2.png)'
  prefs: []
  type: TYPE_IMG
- en: This will take you to a page that allows you to register an App ID. Give it
    a name (without special characters) and then decide whether you'll give the app
    an Explicit App ID or Wildcard App ID, followed by announcing any services that
    you intend to enable in your app.
  prefs: []
  type: TYPE_NORMAL
- en: An Explicit App ID is required if you implement app-specific services such as
    push notifications, in-app purchases, and Apple Pay.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t plan on using any app-specific services, Apple recommends that
    you use a Wildcard App ID instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once configured, you''ll be asked to confirm your App ID. If everything looks
    right, hit the Register button to complete registration of your App ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-4.png)'
  prefs: []
  type: TYPE_IMG
- en: With an App ID for Friends created, our next step is to open the project in
    Xcode and make some changes to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Bundle ID in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the folder where your repo for `Friends` is located, and go into the `ios`
    folder. Open `Friends.xcodeproj`, which will automatically launch in Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, go to the General tab for your project and select the Team drop-down
    menu under Signing. Sign in with your Apple ID and password. Once you do so, a
    Signing Certificate should be automatically generated for you.
  prefs: []
  type: TYPE_NORMAL
- en: Then, under Identity, set your Bundle Identifier to the App ID you previously
    added in the Apple Developer Portal. After this, we'll add an icon for the app.
    I've added icons that you can use for this reason in the repository belonging
    to this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding app icons in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While still in the General tab, select the arrow to the immediate right of
    the App Icons Source drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Screen_Shot_2016-12-27_at_10_02_00_PM.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Afterwards, you will be taken to a screen that will let you drag and drop image
    assets to their corresponding logos. Xcode will provide warnings if you end up
    adding an incorrectly sized icon to the wrong drop zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Screen-Shot-2016-12-27-at-10.03.18-PM.png)'
  prefs: []
  type: TYPE_IMG
- en: The text underneath each drop zone's section shows the target resolution for
    each icon.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have your app icons set up, it's time to create an archive of your
    application for submission to iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First up, let''s make sure that our project''s scheme settings are properly
    archiving the release version of our app and not the debugging one by going into
    the Mac Toolbar when Xcode is open and selecting Product | Scheme | Edit Scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_007-2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this pane has opened, select the Archive option on the left-hand column
    and confirm that the Build Configuration is set to Release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, close this and go over to this drop-down menu, which lets you select the
    device to build and run your app for in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_009-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Xcode will not allow you to create an archive of an app whose target is an iOS
    Simulator device. If you attempt to do so, the option will simply be grayed out
    under the Product menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on this drop-down menu and select Generic iOS Device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_010-2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, go back to the Product menu in Xcode and select Archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Xcode will now build and archive your app to get it ready for distribution
    to iTunes Connect. If everything works great, you''ll see the following list of
    archives with some options on the right-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-5.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep this screen open, since we will need it in a moment. For now, let's go
    into iTunes Connect to add the app to our account.
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iTunes Connect is the portal Apple developers use to submit their applications.
    To get there, point your browser to [https://itunesconnect.apple.com](https://itunesconnect.apple.com)
    and sign in if needed. You'll land on the iTunes Connect dashboard. On it, select
    My Apps, which is the first app on the left in the top row.
  prefs: []
  type: TYPE_NORMAL
- en: Once selected, you'll arrive at a list of apps you have submitted to iTunes
    Connect, and their statuses.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To submit a new app, choose the add symbol in the top-left corner and select
    New App:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll be asked to fill out some details about your app in the modal that
    appears. Select your platform (iOS), give the app a name, primary language, Bundle
    ID (mapped to the App ID in the Developer Portal you created, which is also your
    application''s Bundle ID in Xcode), and a unique SKU:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_015.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you complete this step, you'll be taken to a summary page about your app.
    Let's skip back to Xcode for now and finish the process of validating and submitting
    our app to iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Validating our app in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go ahead and select Validate in the last screen you were in with Xcode, which
    should result in this Summary screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_016.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Validate button. Let it do its work in communicating with iTunes
    Connect and, if everything checks out, you'll receive a Validation Successful
    prompt. If this is the case, hit Done and let's begin uploading our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pressing the Upload to App Store button, you will be prompted with a similar
    request to choose your Development Team and then press Upload:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_017.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, the archive of your project will begin the process of uploading
    and verifying its assets with the App Store. Give it some time and, once it's
    finished, you will see an Upload Successful prompt. Once you do, let's go right
    back to iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting our app for review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a few final steps before we can submit our app for review. First, we
    need to add screenshots to it. In the folder for this chapter, I have added screenshots
    that you can play around with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll select our app under the label 1.0 Prepare for Submission in the left-hand
    column, then drag our screenshots to the drop zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, give the app a Description, some Keywords, and Support, and Marketing
    URLs. After you''ve done so, scroll down and select a build to submit--this will
    be the one we just uploaded to the App Store through Xcode, in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-9.png)'
  prefs: []
  type: TYPE_IMG
- en: iTunes Connect automatically scales down images made for a 5.5" display so that
    smaller display types don't need their own unique images unless you wish to assign
    them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll find that the builds you''ve uploaded through Xcode are automatically
    populated in the modal that appears, with its corresponding version and build
    numbers that you''ve assigned in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once selected, the Build section in iTunes Connect will update with your app''s
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to include an app icon of 1024 × 1024 under General App Information
    and to populate it with a copyright and your contact information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_023.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, provide your contact information, along with any notes you'd like the
    App Store reviewers to read, as well as a Demo Account if one is necessary to
    use all the features of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, decide whether you''d like your app to be released immediately or
    not once approved by the App Store reviewers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_024.png)'
  prefs: []
  type: TYPE_IMG
- en: When you've filled out all these details, press the Submit for Review button
    at the top. That's it, you're done! Pat yourself on the back and wait for Apple's
    review team to get back to you with either an approval or rejection.
  prefs: []
  type: TYPE_NORMAL
- en: Beta testing iOS apps with TestFlight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TestFlight is a service Apple acquired a few years ago that is fully integrated
    with iTunes Connect. It lets you test your iOS apps before you release them on
    the App Store, with a select group of beta testers.
  prefs: []
  type: TYPE_NORMAL
- en: Beta testing is important because it gives developers the ability to gather
    feedback on their app as it is being used in real-life situations, and discover
    bugs they might not have caught otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two kinds of tests you can run with TestFlight: **Internal** and
    **External** tests.'
  prefs: []
  type: TYPE_NORMAL
- en: In an Internal test, users within your team who have been assigned a Developer
    or Admin role in iTunes Connect can privately test the app, allowing you to gain
    feedback from them quickly. Up to 25 users can be part of an Internal test.
  prefs: []
  type: TYPE_NORMAL
- en: For External tests, you can invite any users from outside your organization
    to test your app. Apps made available to an External test can accept up to 2,000
    users, and the app must be reviewed by Apple before you can begin testing.
  prefs: []
  type: TYPE_NORMAL
- en: From my experience, the Beta App Review process takes a significantly shorter
    period of time than the formal App Review process for publicly releasing your
    app to all users.
  prefs: []
  type: TYPE_NORMAL
- en: Entering test information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step in making your app available via TestFlight is to log in to
    iTunes Connect, select one of your apps, and then choose the TestFlight tab. Then,
    fill out the Test Information form to provide some details about your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-10.png)'
  prefs: []
  type: TYPE_IMG
- en: Once those details have been saved, you can begin setting up either an Internal
    or External test.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Internal beta test with TestFlight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an Internal test, select the Internal Test option in the sidebar
    and click on Select Version to Test, which will make the following modal visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-11.png)'
  prefs: []
  type: TYPE_IMG
- en: If you have uploaded multiple builds of your app, you should see them appear
    here. Select the one you wish to send out to your beta testers and press the Next
    button. If your app has not been previously configured to declare its Export Compliance,
    you will be brought to a second question on the modal asking if your app is designed
    to use, contain, or incorporate cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can click on the Internal Testers box to add at least one tester.
    This list is populated with any users you have added via iTunes Connect. If you
    have not added anyone to your team so far, you will only see yourself as a listed
    beta tester.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change this, go back to the main iTunes Connect portal and select Users
    and Roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_027-2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the + icon to add a user, and fill out the multi-page form to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_028.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have added the users you wish to send an Internal test to, you can
    select them in the Internal Testing section of the TestFlight tab in the app you
    wish to beta test. When you have selected everyone, click the Start Testing button
    and your users will receive an e-mail notification to join the test!
  prefs: []
  type: TYPE_NORMAL
- en: Creating an External beta test with TestFlight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process for creating an External test has a couple of things that differ
    from the Internal one. First, you will have to submit your app for review to Apple
    before it is approved for the External beta. When you click on the Add Build to
    Test button for an External test, you will see the following prompt to fill out
    more details about the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_029.png)'
  prefs: []
  type: TYPE_IMG
- en: This is for specifying to your users exactly what parts of the app they should
    be testing, along with a description for them to read. You will also need to provide
    an e-mail they can send feedback to, along with a marketing URL for your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then be taken to two more parts of this modal, where you are asked
    to provide details for the Beta App Review team. The first part will consist of
    your Contact Information in the event Apple would like to get in touch with you
    regarding your app, along with the ability to add a test account for the Beta
    App Review team to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_030.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Afterwards, you will be asked to provide a description of the app and what
    the team should be aware of as they perform a review of your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_031.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will not be able to begin an External test until your app has cleared Beta
    App Review:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_032.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the meantime, you can add users to the test with one of three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_033.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first is to add new testers by entering their name and e-mail address,
    which will bring up a modal allowing you to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_034-2.png)'
  prefs: []
  type: TYPE_IMG
- en: The next option lets you add existing External test users that have beta tested
    any apps of yours in the past. That option will give you a list along with checkboxes
    for you to select users to add.
  prefs: []
  type: TYPE_NORMAL
- en: The final option is to import a CSV file of your External test users.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have added at least one user and your build has been approved by Beta
    App Review, you can submit the app and begin the beta test!
  prefs: []
  type: TYPE_NORMAL
- en: That's everything we are going to cover regarding the iOS App Store and iTunes
    Connect. In the next section, we will look at what we would do to upload Friends
    for Android to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To submit an app to the Google Play Store, we''ll have to take the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add an App Icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give our app a unique package identifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate a signed APK file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload that APK file to the Google Play developer portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add screenshots and a description for our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an app icon for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to give your Android app an icon, we''re going to navigate to the
    following folder in our repo: `android/app/src/main/res`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add an icon image renamed `ic_launcher.png` to each of the four folders
    with the corresponding dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mipmap-hdpi: 72 × 72`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mipmap-mdpi: 48 × 48`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mipmap-xhdpi: 96 × 96`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mipmap-xxhdpi: 144 × 144`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you've added these images, run the `react-native run-android` command to
    build your app, and you should see the icons updated on the home screen of your
    Android Virtual Device.
  prefs: []
  type: TYPE_NORMAL
- en: For your convenience, app icons for the Android version of Friends have been
    made available in the repo pertaining to this chapter's code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a unique package identifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your APK won't be uploaded to the Google Play Developer Console if its package
    name is the same as another app that already exists in the Google Play Store.
    To give it a unique name, we'll first open Android Studio and import the `Android`
    folder of our app to it.
  prefs: []
  type: TYPE_NORMAL
- en: Select Import Project (Eclipse ADT, Gradle, etc.) from the Android Studio welcome
    screen. Then navigate to the repository for your project and import just the `Android`
    folder within.
  prefs: []
  type: TYPE_NORMAL
- en: Afterwards, open `AndroidManifest.xml` and change the package name on the second
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, right-click on your `app` folder that contains the package identifier,
    and select Refactor | Rename. Then, give your package a new name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_035.png)'
  prefs: []
  type: TYPE_IMG
- en: Now open up `build.gradle` within the `android/app` folder, and replace any
    instances of your old package identifier with your new one. The changes you've
    made will be applied automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Signed APK file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, in your terminal, we''ll generate a private signing key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You'll set a password for your keystore and key. Your release key will be labeled
    `friends-release-key`, unless you choose otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The `validity` flag in this command sets the validity of the key for `x` number
    of days. In this case, it's `10000`, due to our command.
  prefs: []
  type: TYPE_NORMAL
- en: This `keystore` file will be located at the directory in which your terminal
    prompt was when you ran the command. Move it over to `android/app` in your Friends
    app repo.
  prefs: []
  type: TYPE_NORMAL
- en: Important! It's not a good idea to commit your `keystore` file to Git or any
    other version control system. Make sure to add this file to `.gitignore`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, open up your `gradle.properties` file and add the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Replace `YOURPASSWORDHERE` with the password you created for your release store
    and release key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we''re going to add the signing configuration to your app''s `build.gradle`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterwards, let''s generate the APK. Back in terminal, change to the `Android`
    directory and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The build process can take a few minutes. Once it's finished, you'll find your
    generated signed APK under `android/app/build/outputs/apk/app-release.apk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''d like to test it out on an Android Virtual Device, simply change your
    directory back to the root of the project and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If everything looks right, then let's go and submit the app to the Google Play
    Store!
  prefs: []
  type: TYPE_NORMAL
- en: Submitting to Google Play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Head over to the Google Play Developer Console at [https://play.google.com/apps/publish](https://play.google.com/apps/publish).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re signed in with your Google account, select the Publish an Android
    App on Google Play option, which is the top-left in the quadrant of cards made
    visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll be prompted to give your app a Default language and Title:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_037.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you create the app, you'll be taken to a page that allows you to edit the
    details of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To submit an app, you''re going to need to fill out the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: A high-resolution 512 × 512 icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A feature graphic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two screenshots that are not for Android TV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Category and content rating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Short and full description of the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the APK we created earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target at least one country for distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A URL that points to the app's privacy policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pricing information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaration of whether or not the app contains advertising
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the menu on the left-hand side to navigate between the four required tabs:
    Uploading your APK, the listing on the Play Store, Content rating, and Pricing
    information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When all of the details have been filled out, let''s navigate to the Manage
    releases section in the sidebar to begin the process of rolling out your app to
    the Google Play Store:'
  prefs: []
  type: TYPE_NORMAL
- en: As of March 2017, Google is planning on deprecating the APK page in the sidebar
    and encourages everyone to start migrating over to the Manage releases page instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Production and you will be taken to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-14.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Google Play Developer Console, if you select your app and go into the
    Manage releases option in the sidebar, you will be asked to either upload a new
    APK or add an existing APK from the library. In this scenario, I chose Add APK
    from library, since I had already uploaded the `Friends APK` file previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then I was asked to select from my list of existing APKs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_08_040.png)'
  prefs: []
  type: TYPE_IMG
- en: Afterwards, give the app a Release Name and a Description regarding what is
    new with this release, before pressing the Review button in the bottom-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, you will be asked to review the details of your release before
    you roll it out to the public. Once you have confirmed the details are correct,
    press the Start rollout to production button in the bottom-right corner. You will
    be prompted for confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have confirmed, the app will begin rolling out to the Google Play Store!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image-15.png)'
  prefs: []
  type: TYPE_IMG
- en: Alpha and beta testing Android apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Manage releases page, you may have noticed there are buttons to manage
    alpha and beta releases of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Functionality-wise, there are currently no differences between an alpha and
    beta test. However, you can test two different versions of your app at the same
    time by running an alpha test for one version and a beta test for the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each test can be run against one of three different testing methods, available
    to each track:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open: This lets anyone with an opt-in link subscribe to it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Closed: This is where you have to specifically invite people to the test with
    their e-mail address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Testing using Google Groups or Google+ Communities: This is where only users
    in the groups or communities you specify will be allowed to join the test'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also need to create an app release for each test track, which goes
    through the same workflow as rolling out an app to production.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created a release for your test, a link will be generated for
    you to distribute among your testers, so they can install the app on their devices.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's it for this chapter! You've just taken your first step into publishing
    the apps you build with React Native for both iOS and Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned about the requirements and costs of signing up for
    developer accounts to publish our apps to the Apple App Store and Google Play
    Store. Then we looked at the requirements for submitting an app to those marketplaces,
    including app icons and screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: We also built and uploaded app files for both platforms, generated a signed
    APK for our Android app, and then submitted the apps for distribution. Finally,
    we discovered how to make our apps available for prerelease testing with TestFlight
    for iOS and the Google Developer Console for Android.
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter, we're going to look at parts of the React Native SDK that
    we couldn't fit into our three existing projects, and discover how to use them.
  prefs: []
  type: TYPE_NORMAL
