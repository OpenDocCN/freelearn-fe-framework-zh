["```js\nfunction paintRed(vehicle){\n     vehicle.color = '￼red￼›;\n}\nconst bus = {\n     color: 'blue'\n}\npaintRed(bus);\nconsole.log(bus.color); // red\n```", "```js\nfunction paintRed(vehicle){\nconst _vehicle = { ...vehicle }\n     _vehicle.color = 'red'\nreturn _vehicle;\n}\nlet bus = {\n     color: 'blue'\n}\nbus = paintRed(bus); \nconsole.log(bus.color); // red\n```", "```js\nconst car = {\ncolor: 'red',\n       extras: {\n            radio: \"premium\",\n            ac: false\n       },\n       sellingDate: new Date(),\n         writeColor: function() {\n           console.log('This car is ' + this.color);\n}\n};\nconst _car = {...car};\nconst _car2 = Object.assign({}, car);\nconst _car3 = JSON.parse(JSON.stringify(car));\ncar.extras.ac = true;\nconsole.log(_car);\nconsole.log(_car2); \nconsole.log(_car3);\n```", "```js\nlet name = [\"John\", \"Doe\"];\nlet [firstName, lastName] = name;\nconsole.log(firstName); // John\nconsole.log(lastName); // Doe\n```", "```js\nlet person = {\n     firstName: \"John\", \n     lastName: \"Doe\",\n     age: 33\n}\nlet {firstName, age} = person;\nconsole.log(firstName); // John\nconsole.log(age); // 33\n```", "```js\nconst person = {\n     firstName: '￼￼￼n', \n     lastName: 'Doe',\n     age: 33,\n     height: 176\n}\nconst {firstName, age, ...rest} = person;\nconsole.log(firstName); // John\nconsole.log(age); // 33\nconsole.log(Object.keys(rest).length); // 2\n```", "```js\nclass MyClass extends Component{\n       constructor( props ){\n              this.handlePress = \n                  this.handlePress.bind(this);\n       }\nhandlePress(event){\n              console.log(this);\n       }\nrender(){\n              return (\n                <Pressable type=\"button\" \n                     onPress={this.handlePress}>\n                     <Text>Button</Text>\n                </Pressable >\n              );\n       }\n}\n```", "```js\nclass MyClass extends Component{\nhandlePress = (event) => {\n              console.log(this);\n       }\nrender(){\n              return (\n                <Pressable type=\"button\" \n                     onPress={this.handlePress}>\n                     <Text>Button</Text>\n                </Pressable >\n              );\n       }\n}\n```", "```js\nconst A = (callback) => {\n     console.log(\"function A called\");\n     callback();\n} \nconst B = () => {\n     console.log(\"function B called\");\n}\nA(B);\n// function A called\n// function B called\n```", "```js\nconst myPromise = () => new Promise((resolve) => {\n     setTimeout(() => {\n          resolve();\n          }, 500);\n});\nconsole.log('start promise');\nmyPromise()\n.then(() => {\n     console.log('promise resolved');\n});\n// start promise\n// -- 500ms delay\n// promise resolved\n```", "```js\nfetch(\"https://fakerapi.it/api/v1/texts?_quantity=1\")\n     .then(response => response.json())\n     .then(data => {\n          console.log(data);\n     })\n     .catch(error => {\n          console.log(error); // handle or report the error\n     })\n```", "```js\nconst fetchData = async () => {\ntry {     \nconst response = await fetch(\n\"https://fakerapi.it/api/v1/texts?_quantity=1\");\nconst data = await response.json();\nconsole.log(data);\n} catch (error) {\n     console.log(error);\n     }\n}\nfetchData();\n```", "```js\n// libraryFunction(successCallback, errorCallback);\nconst libraryFunctionPromise = new Promise((resolve, reject) => {\n     libraryFunction(resolve, reject);\n}\n```", "```js\ntype Person = {\n     name: string,\n     height: number, \n     age: number\n}\nlet john: Person = {\n     name: \"John\",\n     height: 180, \n     age: 35\n}\n```"]