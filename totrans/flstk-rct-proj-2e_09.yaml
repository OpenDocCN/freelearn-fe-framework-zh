- en: Building a Web-Based Classroom Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the world is moving to the internet, so are our tools for learning and acquiring
    knowledge in different disciplines. Right now on the web, there is a plethora
    of online platforms that offer both educators and students options to teach and
    learn different topics remotely, without the necessity to be physically co-located
    in a classroom.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will build a simple online classroom application, by extending
    the MERN stack skeleton application. This classroom application will support multiple
    user roles, the addition of course content and lessons, student enrollments, progress
    tracking, and course enrollment statistics. While building out this application,
    we will uncover more capabilities of this stack, such as how to implement role-based
    access to resources and actions, how to combine multiple schemas, and how to run
    different query operations in order to gather stats. By the end of this chapter,
    you will be familiar with the techniques that are needed to easily integrate new
    full-stack features in any MERN-based application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build out the online classroom application by covering the following
    topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MERN Classroom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an educator role to users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding courses to the classroom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating courses with lessons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing courses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrolling in courses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking progress and enrollment stats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing MERN Classroom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MERN Classroom is a simple online classroom application, which allows educators
    to add courses that are made up of various lessons, while students can enroll
    on these courses. Additionally, the application will allow students to track their
    progress throughout the course, whereas instructors can monitor how many students
    have enrolled in/on a course, and how many have completed each course. The completed
    application, with all these features, will end up with a home page as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a0f61eb-7fe0-494b-ab32-f1a3e10736e0.png)'
  prefs: []
  type: TYPE_IMG
- en: The code for the complete MERN Classroom application is available on GitHub
    in the repository at [https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter06/mern-classroom](https://github.com/PacktPublishing/Full-Stack-React-Projects-Second-Edition/tree/master/Chapter06/mern-classroom).
    You can clone this code and run the application as you go through the code explanations
    for the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The views needed for the MERN Classroom application will be developed by extending
    and modifying the existing React components in the MERN skeleton application.
    The component tree in the following diagram lays out all the custom React components
    that make up the MERN Classroom frontend, and also exposes the composition structure
    that we will use to build out the views in the rest of the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fdd3351a-8071-4d24-9dcd-9613f12b396a.png)'
  prefs: []
  type: TYPE_IMG
- en: We will add new React components that are related to courses, lessons, and enrollments;
    and we will also modify existing components such as the EditProfile, Menu, and
    Home components as we build out the different features of the MERN Classroom application
    in the rest of the chapter. Most of these features in the Classroom application
    will depend on the user's ability to become an educator. In the next section,
    we will begin implementing the MERN Classroom application by updating the user
    in order to give them the option to choose an educator role.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user with an educator role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Users who sign up to the MERN Classroom application will have the choice to
    become an educator on the platform by selecting this option in the `EditProfile`
    form component. This option in the form will look as follows—showing when the
    user isn''t an educator, versus when they choose to be an educator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffc9060b-799a-4479-bfe3-57365f5da18d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When a user chooses to be an educator, in contrast to being a regular user,
    they will be allowed to create and manage their own courses. As pictured in the
    following screenshot, MERN Classroom will display a TEACH option in the navigation
    menu for educators only, that is, it won''t be shown to regular users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81570225-e6d1-4cbd-9a56-459173144b09.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following sections, we will add this educator feature, by first updating
    the user model, then the EditProfile view, and finally by adding a TEACH link
    to the menu that will only be visible to educators.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a role to the user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The existing user model in the MERN skeleton application will need an educator
    value that will be set to `false` by default in order to represent regular users,
    but that can be set to `true` to represent the users who are also educators. To
    add this new field to the user schema, we will add the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This `educator` value must be sent to the frontend, with the user details received
    once the user has successfully signed in, so that the view can be rendered accordingly
    to show information that is relevant to the educator. To make this change, we
    need to update the response that was sent back in the `signin` controller method
    as highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/auth.controller.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By sending this `educator` field value back in the response, we can render the
    frontend views with role-specific authorization considerations.
  prefs: []
  type: TYPE_NORMAL
- en: But before getting to these conditionally rendered views, we first need to implement
    the option to select an educator role in the `EditProfile` view, as discussed
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the EditProfile view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to become an educator in the MERN Classroom application, a signed-in
    user will need to update their profile. They will see a toggle in the EditProfile
    view, which will either activate or deactivate the educator feature. To implement
    this, first, we will update the `EditProfile` component in order to add a Material-UI `Switch` component
    in `FormControlLabel`, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Any changes to the switch will be set to the value of the `educator` variable in
    the state by calling the `handleCheck` method, as defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `handleCheck` method receives the `checked` Boolean value to indicate whether
    the switch has been selected or not, and this value is set to `educator`.
  prefs: []
  type: TYPE_NORMAL
- en: On form submit, the `educator` value is added to the details that were sent
    in the update to the server, as highlighted in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once the EditProfile view has been successfully updated, the user details that
    are stored in `sessionStorage` for auth purposes should also be updated. The `auth.updateUser` method
    is called to do this `sessionStorage` update. It is defined with the other `auth-helper.js` methods,
    and the parameters that are passed are the updated user data and a callback function
    that updates the view. This `updateUser` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/auth/auth-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once the updated educator role is available in the frontend, we can use it to
    render the frontend accordingly. In the next section, we will see how to render
    the menu differently, based on whether an educator or a regular user is viewing
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering an option to teach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the frontend of the classroom application, we can render different options
    based on whether an educator is currently browsing the application. In this section,
    we will add the code to conditionally display a link to *TEACH* on the navigation
    bar, which will only be visible to the signed-in users who are also educators.
  prefs: []
  type: TYPE_NORMAL
- en: We will update the `Menu` component, as follows, within the previous code that
    only renders when a user is signed in.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This link, which is only visible to educators, will take them to the educator
    dashboard view, where they can manage the courses that they are instructing.
  prefs: []
  type: TYPE_NORMAL
- en: This section has taught us how to update a user role to an educator role in
    the application, and we can now begin incorporating features that will allow an
    educator to add courses to the classroom.
  prefs: []
  type: TYPE_NORMAL
- en: Adding courses to the classroom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Educators in the MERN Classroom can create courses and add lessons to each course.
    In this section, we will walk through the implementations of the course-related
    features, such as adding new courses, listing courses by a specific instructor,
    and displaying the details of a single course. To store the course data and enable
    course management, we will start by implementing a Mongoose schema for courses,
    then backend APIs to create and list the courses, along with frontend views for
    both authorized educators and for regular users interacting with courses in the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Course model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Course schema—defined in `server/models/course.model.js`—will have simple
    fields to store course details, along with with an image, a category, whether
    the course is published or not, and a reference to the user who created the course.
    The code defining the course fields are given in the following list with explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Course name and description**: `name` and `description` fields will have
    string types, with `name` as a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Course image**: The `image` field will store the course image file to be
    uploaded by the user as binary data in the MongoDB database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Course category**: The `category` field will store the category value of
    the course as a string, and it will be a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Course published state**: The `published` field will be a Boolean value,
    indicating whether the course is published or not:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Course instructor**: The `instructor` field will reference the user who created
    the course:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Created and updated at times**: The `created` and `updated` fields will be `Date` types,
    with `created` generated when a new course is added, and `updated` changed when
    any course details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The fields in this schema definition will enable us to implement the course-related
    features in MERN Classroom. To start off these features, in the next section,
    we will implement the full-stack slice that will allow educators to create new
    courses.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Classroom, a user who is signed in—and who is also an educator—will
    be able to create new courses. To implement this feature, in the following sections
    we will add a create course API in the backend, along with a way to fetch this
    API in the frontend, and a create new course form view that takes user input for
    course fields.
  prefs: []
  type: TYPE_NORMAL
- en: The create course API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to start the implementation of the create course API in the backend,
    we will add a `POST` route that verifies that the current user is an educator,
    and then creates a new course with the course data passed in the request body.
    The route is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `course.routes.js` file will be very similar to the `user.routes` file,
    and to load these new routes in the Express app, we need to mount the course routes
    in `express.js`, in the same way that we did for the auth and user routes, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will update the user controller to add the `isEducator` method—which
    will ensure that the current user is actually an educator—before creating the
    new course. The `isEducator` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `create` method, in the course controller, uses the `formidable` Node module
    to parse the multipart request that may contain an image file that has been uploaded
    by the user for the course image. If there is a file, `formidable` will store
    it temporarily in the filesystem, and we will read it using the `fs` module to
    retrieve the file type and data, and then it will be stored to the `image` field
    in the course document. The `create` controller method will look as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The image file for the course, if uploaded by the user, is stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate `GET` API route. The `GET` API is set up as an
    Express route at `/api/courses/photo/:courseId`, which gets the image data from
    MongoDB and sends it as a file in the response. The implementation steps for file
    upload, storage, and retrieval are outlined in detail in the *Upload profile photo* section
    in Chapter 5, *Starting with a Simple Social Media Application*.
  prefs: []
  type: TYPE_NORMAL
- en: With the create course API endpoint ready on the server, next, we can add a
    `fetch` method in the frontend in order to utilize it.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the create API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use the create API in the frontend, we will set up a `fetch` method
    on the client- side to make a `POST` request to the create API, by passing the
    multipart form data, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/api-course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This method will be used in the new course form view to submit the user-entered
    course details to the backend to create a new course in the database. In the next
    section, we will implement this new course form view in a React component.
  prefs: []
  type: TYPE_NORMAL
- en: The NewCourse component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to allow educators to create new courses, we will add a React component
    that contains a form to the frontend of the application. This form view will look
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc891e11-0c2b-4764-bf1d-cd1f167a3ef1.png)'
  prefs: []
  type: TYPE_IMG
- en: The form will contain an option to upload the course image, input fields for
    entering the course Name, Description, and Category; and the SUBMIT button, which
    will save the details that have been entered into the database.
  prefs: []
  type: TYPE_NORMAL
- en: We will define the `NewCourse` React component in order to implement this form.
    As shown next, we first initialize the state by using the `useState` hook; with
    empty input field values, an empty error message, and a `redirect` variable that
    is initialized to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewCourse.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the form view, we first give the user an option to upload a course image
    file. To render this option, we will add the file upload elements using a Material-UI button
    and an HTML5 file input element in the return function for `NewCourse`, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewCourse.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Then, we add the `name`, `description`, and `category` form fields using the
    `TextField` components from Material-UI.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewCourse.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We will define a handler function in `NewCourse` so that we can track changes
    to these fields in the form view.  The `handleChange` function will be defined
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This `handleChange` function takes the new value that has been entered into
    the input field and sets it to state, including the name of the file if one is
    uploaded by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the view, you can add the Submit button, which, when clicked, should
    call a click-handling function. We will define a function for this purpose in
    `NewCourse` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewCourse.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This `clickSubmit` function will be called when the form is submitted. It first
    takes the input values from the state and sets it to a `FormData` object. This
    ensures that the data is stored in the correct format that is needed for the `multipart/form-data` encoding
    type that is necessary for sending requests containing file uploads. Then, the `create` fetch
    method is called to create a new course in the backend. Finally, depending on
    the response from the server, either an error message is shown, or the user is
    redirected to the `MyCourses` view with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewCourse.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `NewCourse` component can only be viewed by a signed-in user who is also
    an educator. So, we will add a `PrivateRoute` to the `MainRouter` component, which
    will render this form only for authorized users at `/teach/course/new`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This link can be added to any of the view components that may be accessed by
    the educator, such as the `MyCourses` view, which will be implemented in the next
    section in order to list the courses that have been created by an educator.
  prefs: []
  type: TYPE_NORMAL
- en: Listing courses by educator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorized educators will be able to see a list of the courses that they have
    created on the platform. In order to implement this feature, in the following
    sections we will add a backend API that retrieves the list of courses for a specific
    instructor, and then we will call this API in the frontend to render this data
    in a React component.
  prefs: []
  type: TYPE_NORMAL
- en: The list course API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to implement the API to return the list of courses that have been created
    by a specific instructor, first, we will add a route in the backend to retrieve
    all the courses that have been created by a given user when the server receives
    a `GET` request at `/api/courses/by/:userId`. This route will be declared as shown
    next.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: To process the `:userId` param in the route and retrieve the associated user
    from the database, we will utilize the `userByID` method in our user controller.
    We will add the following code to the Course routes in `course.routes.js`, so
    that the user is available in the `request` object as `profile`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `listByInstructor` controller method in `course.controller.js` will query
    the `Course` collection in the database in order to get the matching courses,
    as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the query to the Course collection, we find all the courses that have an
    `instructor` field that matches the user specified with the `userId` param. Then,
    the resulting courses are sent back in the response to the client. In the next
    section, we will see how to call this API from the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the list API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use the list API in the frontend, we will define a `fetch` method
    that can be used by the React components to load this list of courses. The `fetch`
    method that is needed in order to retrieve a list of courses by a specific instructor
    will be defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/api-course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This `listByInstructor` method will take the `userId` value in order to generate
    the API route to be called, and will receive the list of courses that were created
    by the user associated with the provided `userId` value. In the classroom application,
    we will utilize this method in the `MyCourses` component, which is discussed in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The MyCourses component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `MyCourses` component, we will render the list of courses in a Material-UI
    `List`, after fetching the data from the server using the `listByInstructor` API.
    This component, as pictured in the following image, will function as the educator''s
    dashboard, where their courses are listed and they have an option to add new courses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c44b751-0834-4c07-8dd9-41679c40d520.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to implement this component, we first need to fetch and render the
    list of courses. We will make the fetch API call in the `useEffect` hook, and
    set the received courses array in the state, as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/MyCourses.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: When the `listByInstructor` API is fetched, we pass the currently signed-in
    user's auth token to check for authorization on the server- side. Users should
    only be able to see their own courses, and if the current user is not authorized
    to make this fetch call, the view will be redirected to the sign-in page. Otherwise,
    the list of courses will be returned and displayed in the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this `MyCourses` component''s view, we will render the retrieved courses
    array by iterating over it using `map`, with each course data rendered in the
    view in a Material-UI `ListItem`. Each `ListItem` will also be linked to the individual
    course view, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/MyCourses.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `MyCourses` component can only be viewed by a signed-in user who is also
    an educator. So, we will add a `PrivateRoute` in the `MainRouter` component, which
    will render this component only for authorized users, at `/seller/courses`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We use this frontend route in the <q>TEACH</q> link on the menu, which directs
    a signed-in educator to this `MyCourses` view. In this view, users can click on
    each course in the list, and go to the page that shows the details of a specific
    course. In the next section, we will implement the feature to render an individual
    course.
  prefs: []
  type: TYPE_NORMAL
- en: Display a course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users on the MERN Classroom application, including visitors, signed-in students,
    and educators alike, will all be able to browse through course pages, with interactions
    that are specific to their authorization level. In the following sections, we
    will start implementing the individual course view feature by adding a read course
    API to the backend, a way to call this API from the frontend, and the React component
    that will house the course detail view.
  prefs: []
  type: TYPE_NORMAL
- en: A read course API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to implement a read course API in the backend, we will start by declaring
    the `GET` route and the parameter-handling trigger, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We are adding this `GET` route to query the `Course` collection with an ID and
    return the corresponding course in the response. The `:courseId` param in the
    route URL will call the `courseByID` controller method, which is similar to the `userByID` controller
    method. It retrieves the course from the database, and attaches it to the request
    object that is to be used in the `next` method, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The course object that is queried from the database will also contain the name
    and ID details of the instructor, as we specified in the `populate()` method.
    The call to `next()` after this course object is attached to the request object
    invokes the `read` controller method. The `read` controller method then returns
    this `course` object in the response to the client, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We are removing the image field before sending the response, since images will
    be retrieved as files in separate routes. With this API ready in the backend,
    you can now add the implementation in order to call it in the frontend, by adding
    a `fetch` method in `api-course.js`, which is similar to other `fetch` methods
    that have already been added. We will use the `fetch` method to call the read
    course API in the React component that will render the course details, as discussed
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Course component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Course` component will render the individual course-specific details and
    user interactions, as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fffdec46-3596-46b0-b702-846913f132cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed `Course` component will contain the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A section showing course details, which is visible to all visitors to this page.
    We will implement this part in this section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A <q>Lessons</q> section, which contains a list of lessons and is visible to
    all visitors, and the option to add a new lesson, which will be visible only to
    the instructor of this course. We will implement the lessons part in the next
    section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit, delete, and publish options, which are visible only to the instructor.
    This will be discussed later in the chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An <q>Enroll</q> option, not pictured in the previous image,  which will only
    be visible after the course has been published by the instructor. This will be
    implemented later in the chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start off the implementation of this `Course` component, we will first retrieve
    the course details with a fetch call to the read API in a `useEffect` hook, and
    then we will set the received values to state, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`useEffect` will only run when `courseId` changes in the route params.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the view, we will render the received details, such as course name, description,
    category, image, and a link to the instructor''s user profile in a Material-UI
    `Card` component, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`imageUrl` consists of the route that will retrieve the course image as a file
    response, and it is constructed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'When the course instructor is signed in and views the course page, we will
    render the edit and other course data-modifying options in the Course component.
    For now, we will only look at how the `edit` option is added conditionally to
    the view code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If the current user is signed in, and their ID matches with the course instructor's
    ID, only then will the <q>Edit</q> option be rendered. This part will be edited
    further in upcoming sections, in order to show the publish and delete options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to load this Course component in the frontend, we will add a route
    to `MainRouter` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This route URL (`/course/:courseId`) can now be added into any component to
    link to a specific course, with the `:courseId` param replaced with the course's
    ID value. Clicking on the link will take the user to the corresponding Course
    view.
  prefs: []
  type: TYPE_NORMAL
- en: We now have the relevant backend model and API endpoints integrated with the
    frontend views, meaning that we have a functioning implementation of the new course
    creation, a course listing by the instructor, and single-course display features.
    We can now move on to extending these implementations further, giving instructors
    the ability to add lessons to each course and update the course as desired, before
    publishing it.
  prefs: []
  type: TYPE_NORMAL
- en: Updating courses with lessons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each course in the MERN Classroom will contain a list of lessons that make up
    the course content and what the students need to cover when they enroll. We will
    keep the lesson structure simple for this application, putting more emphasis on
    the implementation of managing lessons and allowing students to go through lessons
    in order to complete a course. In the following sections, we will focus on the
    implementation of managing lessons for a course, and we will also look at how
    to update an existing course—either to edit details or to delete the course. First,
    we will look into how to store lesson details, then we will implement the full-stack
    features to allow instructors to add lessons, update lessons, update details of
    the course, and delete a course.
  prefs: []
  type: TYPE_NORMAL
- en: Storing lessons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to define the lesson data structure and associate it with the course
    data structure before we can store and retrieve lesson details for each course.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by defining the Lesson model, with a schema containing the title,
    the content, and the resource URL fields of the string type, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/models/course.model.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'These schemas will let educators create and store basic lessons for their courses.
    To integrate lessons with the course structure, we will add a field called `lessons`
    in the Course model, which will store an array of lesson documents, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/models/course.model.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: With this updated Course schema and model, we can now proceed with the implementations
    that will allow educators to add lessons to their course, as discussed in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new lessons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Educators on the MERN Classroom application will be able to add new lessons
    to the courses that they are still building and have not yet published. In the
    following sections, we will make this feature possible, first by implementing
    a backend API that adds lessons to an existing course, then by creating a frontend
    form view for entering and sending the new lesson details, and finally, by displaying
    the newly added lessons on the Course page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a lesson API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to implement a backend API that will allow us to add and store new
    lessons for a given course, we first need to declare a `PUT` route as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When this route gets a `PUT` request with the course ID in the URL, we will
    first use the `isInstructor` method to check whether the current user is the instructor
    for the course, and then we will save the lesson in the database with the `newLesson`
    method. The `isInstructor` controller method will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `isInstructor` method, we first check whether the signed-in user has
    the same user ID as the instructor of the given course. If the user is not authorized,
    an error is returned in the response, otherwise the `next()` middleware is invoked
    in order to execute the `newLesson` method. This `newLesson` controller method
    is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In this `newLesson` controller method, we use `findByIdAndUpdate` (from MongoDB)
    to find the corresponding course document, and we update its `lessons` array field
    by pushing the new lesson object that was received in the request body.
  prefs: []
  type: TYPE_NORMAL
- en: In order to access this API to add a new lesson in the frontend, you will also
    need to add a corresponding fetch method, as we did for other API implementations.
  prefs: []
  type: TYPE_NORMAL
- en: This API will be used in a form-based component that will take input from the
    user for each new lesson and then send it to the backend. We will implement this
    form-based component in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The NewLesson component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In each course, while it is still unpublished, the instructor will be able
    to add a lesson by filling out a form. In order to implement this form view to
    add new lessons, we will create a React component called `NewLesson`, which will
    be added to the `Course` component. This component will render the following form
    in a dialog box in the Course page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e088ba9-d2de-4436-8286-8d24dd7d0cc0.png)'
  prefs: []
  type: TYPE_IMG
- en: While defining the `NewLesson` component, we will first initialize the form
    values in the state with the `useState` hook. This component will also receive
    `props` from the Course component, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewLesson.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `NewLesson` component will receive the `courseId` value and an `addLesson`
    function as `props` from the parent component to which it will be added; in this
    case from the `Course` component. We make these required props by adding `PropTypes`
    validation to `NewLesson`. These `props` will be needed in this component when
    the form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add the button to toggle the dialog that will contain the form,
    as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewLesson.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The Material-UI `Dialog` component stays open or closed, depending on the state
    of the `open` variable. We update the `open` value in the following functions,
    which are called on dialog open and close actions.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewLesson.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The form fields for entering the new lesson''s title, content, and resource
    URL values are added inside the `Dialog` component using `TextFields` in `DialogContent`,
    as shown with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewLesson.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Values that are entered in the input fields are captured with the `handleChange`
    function, which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewLesson.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Finally, when the form is submitted, we will send the new lesson details to
    the server in the `clickSubmit` function, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/NewLesson.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The lesson details are sent in the request to the add lesson API with the course
    ID received as a prop from the Course component.  On a successful update response
    from the server, besides emptying the form fields, the `addLesson` update function,
    which was passed as a prop, is executed to render the latest lessons in the Course
    component. The `addLesson` function to be passed in from the `Course` component
    is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NewLesson` component that is added to the Course component should only
    render if the current user is the instructor of the course, and if the course
    is still unpublished. To do this check and conditionally render the `NewLesson`
    component, we can add the following code to the Course component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This will allow educators on the application to add lessons to their courses.
    Next, we will add the code to render these lessons on the Course page.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying lessons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The lessons for a specific course will be rendered in a list—along with a tally
    of the total number of lessons—on the Course page below the other course details,
    as pictured in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08138368-6b29-470f-906c-6496f7bee367.png)'
  prefs: []
  type: TYPE_IMG
- en: To render this list of lessons, we will update the `Course` component to iterate
    over the array of lessons with a `map` function, and each lesson will be displayed
    in a Material-UI `ListItem` component, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The number beside each list item is calculated using the current index value
    of the array. The total number of lessons can also be displayed by accessing `course.lessons.length`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that instructors can add and view lessons for each course, in the next section we
    will implement the ability to update these added lessons, besides modifying other
    course details.
  prefs: []
  type: TYPE_NORMAL
- en: Editing a course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a course has been added by an educator and there are more updates to be
    incorporated, the educator will be able to edit the details of the course as its
    instructor. Editing a course includes the ability to update its lessons, as well.
    To implement this capability in the application, first, we will have to create
    a backend API that allows the update operation on a given course.
  prefs: []
  type: TYPE_NORMAL
- en: Then, this updated API needs to be accessed in frontend with the changed details
    of the course and its lessons. In the following sections, we will build this backend
    API and the `EditCourse` React component, which will allow instructors to change
    the course details and lessons.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the course API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the backend, we will need an API that allows an existing course to be updated
    if the user who is making the request is the authorized instructor of the given
    course. We will first declare the PUT route that accepts the update request from
    the client, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: A `PUT` request that is received at the `/api/courses/:courseId` route first
    checks if the signed-in user is the instructor of the course that is associated
    with the `courseId` provided in the URL. If the user is found to be authorized,
    the `update` controller is invoked. The `update` method in the course controller
    is defined as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: As the request body may contain a file upload, we are using `formidable` here
    to parse the multipart data. The lessons array is an array of nested objects,
    and we need to specifically parse and assign the lessons array to the course before
    saving it. As we will see in the next section, the lessons array that is sent
    from the frontend will be stringified before sending, so in this controller, we
    need to additionally check whether the lessons field was received, and assign
    it separately after parsing it.
  prefs: []
  type: TYPE_NORMAL
- en: To use this API in the frontend, you will need to define a fetch method that
    takes the course ID, user auth credentials, and the updated course details, in
    order to make the fetch call to this update course API—as we have done for other
    API implementations.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a course update API that can be used in the frontend to update details
    of a course. We will use this in the `EditCourse` component, which is discussed
    next.
  prefs: []
  type: TYPE_NORMAL
- en: The EditCourse component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the frontend, we will add a view for editing a course and it will have two
    sections. The first part will let the user change the course details, including
    the name, category, description, and image; and the second part will allow the
    modification of the lessons for the course. The first part of this course is pictured
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e38bfc81-5f6a-4667-a47b-3c28cbb33443.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement this view, we will define a React component named `EditCourse`.
    This component will first load the course details by calling the `read` fetch
    method in the `useEffect` hook, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: After successfully receiving the course data in the response, it will be set
    to the `course` variable in the state by calling `setCourse`, and it will be used
    to populate the view. The first part of this view will render the course details
    similar to the Course view but using `TextFields` instead, with an option to upload
    a new image and a Save button to make the update call, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The changes to the input fields will be handled in order to capture the newly
    entered values with the `handleChange` method, which is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'When the Save button is clicked, we will get all the course details and set
    it to `FormData`, which will be sent in the multipart format to the backend using
    the course update API. The `clickSubmit` function that is called on saving will
    be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The course lessons are also sent in this `FormData`, but as lessons are stored
    as an array of nested objects and `FormData` only accepts simple key-value pairs,
    we stringify the `lessons` value before assigning it.
  prefs: []
  type: TYPE_NORMAL
- en: In order to load `EditCourse` in the frontend of the application, we need to
    declare a frontend route for it. This component can only be viewed by a signed-in
    user who is also the instructor of the course. So, we will add a `PrivateRoute` in
    the `MainRouter` component, which will render this view only for authorized users
    at `/teach/course/edit/:courseId`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: This link is added in the Course view in order to allow access to the `EditCourse`
    page.
  prefs: []
  type: TYPE_NORMAL
- en: We have looked at how to update and send the course details, along with all
    the lessons to the backend on saving, but we are left with the interface for editing
    the course lessons. In the following section, we will finish up the `EditCourse`
    component by looking into the implementation for updating course lessons.
  prefs: []
  type: TYPE_NORMAL
- en: Updating lessons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to allow instructors to update the lessons that they have added to
    a course, we will add the following section in the `EditCourse` component, which
    will allow the user to edit the lesson details, rearrange the order of the lessons,
    and delete a lesson:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba607512-7c5f-4c46-a33c-602a1c8e0601.png)'
  prefs: []
  type: TYPE_IMG
- en: The implementation of these lesson update features will mostly rely on array
    manipulation techniques. In the following sections, we will add the interface
    for an individual lesson in the list, and discuss how the edit, move, and delete
    functionalities are implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Editing lesson details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users will be able to edit the details of each field in a lesson in the `EditCourse`
    component. In the view, each item in the list of lessons will contain three `TextFields` for
    each of the fields in a lesson. These will be prepopulated with the existing values
    of the fields as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to handle the changes made to the values in each field, we will define
    a `handleLessonChange` method, which will take the field name and the corresponding
    lesson''s index in the array. The `handleLessonChange` method will be defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The lessons array in the course is updated in the state, after setting the value
    in the specified field of the lesson at the provided index. This updated course
    with the modified lesson will get saved to the database when the user clicks Save
    in the `EditCourse` view. Next, we will look at how we can allow the user to rearrange
    the order of the lessons.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the lessons to rearrange the order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While updating lessons, the user will also be able to reorder each lesson on
    the list. There will be an up arrow button for each lesson, except for the very
    first lesson. This button will be added to each lesson item in the view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks this button, the lesson in the current index will be moved
    up, and the lesson above it will be moved to its place in the array. The `moveUp`
    function will implement this behavior as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The rearranged lessons array is then updated in the state, and will be saved
    to the database when the user saves the changes in the `EditCourse` page. Next,
    we will implement the option to delete a lesson from the list.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a lesson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `EditCourse` page, each item rendered in the lessons list will have
    a delete option. The Delete button will be added in the view to each list item
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'When the Delete button is clicked, we will take the index of the lesson that
    is being deleted and remove it from the `lessons` array. The `deleteLesson` function,
    which is called when the button is clicked, is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/EditCourse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we are splicing the array to remove the lesson from the given
    index, then adding the updated array in the course in the state. This new lesson
    array will be sent to the database with the course object when the user clicks
    the Save button in the `EditCourse` page.
  prefs: []
  type: TYPE_NORMAL
- en: This wraps up the three different ways an instructor can change the lessons
    for their course. With these implementations using array manipulation techniques
    integrated with the React component's features, the users can now edit the details,
    rearrange the order, and delete a lesson. In the next section, we will discuss
    the only remaining feature for modifying a course, which is the ability to delete
    it from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the MERN Classroom application, instructors will be able to permanently delete
    courses if the course has not been published already. In order to allow an instructor
    to delete a course, first, we will define a backend API for course deletion from
    the database, and then implement a React component that makes use of this API
    when the user interacts with the frontend to perform this deletion.
  prefs: []
  type: TYPE_NORMAL
- en: The delete course API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to implement a backend API that takes a request to delete a specified
    course from the database, we will first define a DELETE route as shown in the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This DELETE route takes the course ID as a URL parameter and checks if the current
    user is signed in and authorized to perform this delete, before proceeding to
    the `remove` controller method, which is defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The `remove` method simply deletes the course document that corresponds to the
    provided ID from the Courses collection in the database. To access this backend
    API in the frontend, you will also need a fetch method with this route; similar
    to other API implementations. The fetch method will need to take the course ID
    and current user's auth credentials, then call the delete API with these values.
  prefs: []
  type: TYPE_NORMAL
- en: The fetch method will be used when the user performs the delete operation by
    clicking a button on the interface. In the next section, we will discuss a React
    component called `DeleteCourse`, which is where this interaction will take place.
  prefs: []
  type: TYPE_NORMAL
- en: The DeleteCourse component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The instructor for a course will see a delete option on the Course page when
    they are logged in and they are viewing an unpublished course. This delete option
    will be implemented in its own React component called `DeleteCourse`, and this
    component will be added to the `Course` component. The `DeleteCourse` component
    is basically a button, which, when clicked, opens a `Dialog` component asking
    the user to confirm the `delete` action, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68180458-7c68-41a3-b3c3-36ddb3099636.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The implementation of the `DeleteCourse` component is similar to the `DeleteUser`
    component, as discussed in [Chapter 4](6f2ca10a-8079-4e3a-9d42-a3db8e85b9d9.xhtml),
    *Adding a React Frontend to Complete MERN*. Instead of a user ID, the `DeleteCourse`
    component will take the course ID and the `onRemove` function definition from
    the `Course` component as props, when it is added to `Course`, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: With this implementation, course instructors will be able to remove a course
    from the platform.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we added the ability to add lessons to a course by extending
    the Course model and implementing a Lesson model. Then, we added the necessary
    backend APIs and user interface updates to be able to add lessons, modify course
    details and lessons, and delete lessons and courses. The course module is now
    ready for us to implement the ability to publish a course and make it available
    on the application for enrollment. We will discuss this publishing feature in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing courses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the MERN Classroom, only courses that are published will be available to
    other users on the platform for enrollment. Once an instructor has created the
    course and updated it with lessons, they will have the option to publish it. Published
    courses will be listed on the home page, and all visitors will be able to view
    them. In the rest of this section, we will look into the implementation of allowing
    instructors to publish a course and listing these published courses in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the publish option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instructors for each course will be given the option to publish their course
    after they have added at least one lesson to the course. Publishing a course will
    also mean that the course can no longer be deleted, new lessons cannot be added,
    and existing lessons cannot be deleted. So, when the instructors choose to publish,
    they will be asked to confirm the action. In this section, we will look at how
    to use and extend the existing course module in order to integrate this publishing
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Publish button states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the course view, when the instructor is logged in, they will see the PUBLISH
    button in three states, depending on whether the course can be published or not,
    and whether it is already published, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69f3873d-af19-467c-8b4c-b4fbf2bba923.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The states of this button will primarily depend on whether the `published`
    attribute of the course document is set to `true` or `false`, and on the length
    of the `lessons` array. The button will be added to the `Course` component, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The delete option will only be rendered if the course is not already published.
    When the PUBLISH button is clicked, we will open a dialog asking the user for
    confirmation. The `clickPublish` function will be called when the button is clicked,
    and is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The `clickPublish` function will only open the dialog box if the length of the
    lessons array is more than zero; preventing the instructor from publishing a course
    without any lessons. Next, we will add the dialog box, which will let the instructor
    publish the course after confirmation.
  prefs: []
  type: TYPE_NORMAL
- en: Confirm to publish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the instructor clicks on the PUBLISH button, they will see a dialog box
    informing them of the consequences of this action, and giving them the options
    to PUBLISH the course or CANCEL the action. The dialog box will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b3f4aba-d4f8-4ed4-bb24-f3b8fa232b18.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement this dialog box, we will use the Material-UI `Dialog` component
    with the title and content text, and the PUBLISH and CANCEL buttons, as shown
    in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'When the PUBLISH button on the dialog is clicked by the user as confirmation
    to publish the course, we will make an update API call to the backend, with the
    `published` attribute of the course set to `true`. The `publish` function to make
    this update will be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we are using the same update API that has already been defined
    and used for saving modifications to other course details from the `EditCourse`
    view. Once the backend is successfully updated with the `published` value, it
    is also updated in the state of the `Course` component.
  prefs: []
  type: TYPE_NORMAL
- en: This `published` attribute in the course can be used to conditionally hide the
    options to add a new lesson, delete a course, and delete a lesson in both the
    `Course` and `EditCourse` components, in order to prevent the instructor from
    performing these actions after the course is already published. As courses are
    published by instructors, these courses will be listed in a view for all users
    on the platform, as discussed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Listing published courses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All visitors to the MERN Classroom application will be able to access the published
    courses. In order to present these published courses, we will add the feature
    to retrieve all the published courses from the database, and display the courses
    in a list on the home page. In the following sections, we will implement this
    feature by first defining the backend API, which will take a request and return
    the list of published courses. Then, we will implement the frontend component
    that will fetch this API and render the courses.
  prefs: []
  type: TYPE_NORMAL
- en: The published courses API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to retrieve the list of published courses from the database, we will
    implement an API in the backend, by first declaring the route that will take a
    GET request at `''/api/courses/published''`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/course.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'A GET request to this route will invoke the `listPublished` controller method,
    which initiates a query to the Course collection for courses that have the `published`
    attribute''s value as `true`. Then, the resulting courses are returned in the
    response. The `listPublished` controller method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/course.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: To use this list API in the frontend, we also need to define a fetch method
    on the client- side, as we did for all the other API calls. Then, the fetch method
    will be used in the component, which will retrieve and display the published courses. In
    the next section, we will look into the implementation of rendering the retrieved
    course list in a React component.
  prefs: []
  type: TYPE_NORMAL
- en: The Courses component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For displaying the list of published courses, we will design a component that
    takes the array of courses as props from the parent component that it is added
    to. In the MERN Classroom application, we will render the published courses on
    the home page, as pictured in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c58f4d6c-3188-4561-82f7-7f7a7e54e7cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `Home` component, we will retrieve the list of published courses from
    the backend in a `useEffect` hook, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/core/Home.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the list of courses is received, it is set to the `courses` variable in
    the state. We will pass this `courses` array to the `Courses` component as props
    when it is added to the `Home` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/core/Home.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'This `Courses` component will take these props and iterate through the array
    to render each course in a `GridList` component from Material-UI. The `Courses`
    component is defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Courses.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Each course in the list will display its name, category, and image, and will
    be linked to the individual course page. The Enroll option, which will be implemented
    in its own component, will also be shown for each course, but only to the users
    who are signed in, and are browsing through the home page.
  prefs: []
  type: TYPE_NORMAL
- en: With courses now publishable by instructors and viewable by all visitors to
    the application, we can now start the implementation for enrollment on courses.
  prefs: []
  type: TYPE_NORMAL
- en: Enrolling on courses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All visitors to the MERN Classroom application will have the option to sign
    in and then enroll on any of the published courses. Enrolling on a course would
    give them access to the lesson details and would allow them to go through the
    lessons systematically to complete the course. In order to implement this feature,
    in this section, we will first define an Enrollment model to store enrollment
    details in the database. Then, we will add the backend API to create new enrollments
    when end users interact with the `Enroll` component that will be added to the
    frontend. Finally, we will implement the view that enables a student to see and
    interact with the content from the course on which they are enrolled.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an Enrollment model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will define an Enrollment schema and model in order to store the details
    of each enrollment in the application. It will have fields to store the reference
    to the course being enrolled in and the user who is enrolling as a student. It
    will also store an array corresponding to the lessons in the associated course,
    which will store the completion status of each of the lessons for this student.
    Additionally, we will store three timestamp values; the first value will signify
    when the student enrolled, the second value will indicate the last time that they
    completed a lesson or updated the enrollment, and finally, when they completed
    the course. This enrollment model will be defined in `server/models/enrollment.model.js`,
    and the code defining the enrollment fields are given in the following list with
    explanations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Course reference**: The `course` field will store the reference to the course
    document with which this enrollment is associated:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '**Student reference**: The `student` field will store the reference to the
    user who created this enrollment by choosing to enroll on a course:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '**Lesson status**: The `lessonStatus` field will store an array with references
    to each lesson that is stored in the associated course in the `lessons` array.
    For each object in this `lessonStatus` array, we will add a `complete` field that
    will store a Boolean value that indicates whether the corresponding lesson has
    been completed or not:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '**Enrolled at**: The `enrolled` field will be a `Date` value indicating the
    time that the enrollment was created; in other words, when the student enrolled
    on the course:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '**Updated at**: The `updated` field will be another `Date` value, which will
    be updated every time a lesson is completed, indicating when was the last time
    that the user worked on the course lessons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '**Completed at**: The `completed` field will also be a `Date` type, which will
    only be set when all the lessons in the course have been completed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The fields in this schema definition will enable us to implement all the enrollment-related
    features in MERN Classroom. In the next section, we will implement the user's
    ability to enroll on a course, and store details of the enrollment using this
    Enrollment model.
  prefs: []
  type: TYPE_NORMAL
- en: The create Enrollment API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a user chooses to enroll in a course, we will create a new enrollment
    and store it in the backend. To implement this feature, we need to define a create
    enrollment API on the server, by first declaring a route that accepts a `POST`
    request at `''/api/enrollment/new/:courseId''`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/enrollment.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This route takes the course ID as a parameter in the URL. Hence, we also add
    the `courseByID` controller method from the course controllers in order to process
    this parameter and retrieve the corresponding course from the database. The user
    who initiates the request from the client- side is identified from the user auth
    credentials sent in the request. A `POST` request received at this route will
    first check whether the user is authenticated, and then check whether they are
    already enrolled on this course, before creating a new enrollment for this user
    in this course.
  prefs: []
  type: TYPE_NORMAL
- en: The `findEnrollment` controller method will query the `Enrollments` collection
    in the database in order to check whether there is already an enrollment with
    the given course ID and user ID. The `findEnrollment` method is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: If a matching result is returned from the query, then the resulting enrollment
    will be sent back in the response, otherwise, the `create` controller method will
    be invoked to create a new enrollment.
  prefs: []
  type: TYPE_NORMAL
- en: The `create` controller method generates a new enrollment object to be saved
    into the database from the course reference, user reference, and the lessons array
    in the given course. The `create` method is defined as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The `lessons` array in `course` is iterated over to generate the `lessonStatus`
    array of objects for the new enrollment document. Each object in the `lessonStatus`
    array has the `complete` value initialized to `false`. On successful saving of
    the new enrollment document based on these values, the new document is sent back
    in the response.
  prefs: []
  type: TYPE_NORMAL
- en: All the routes that are defined for enrollment APIs, such as this create API,
    are declared in the `enrollment.routes.js` file, and it will be similar to the
    other route files that have already been created in our application. As with the
    other routes, we need to load these new routes in the Express app by mounting
    the enrollment routes in `express.js`. The enrollment-related routes are mounted
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: To access the create API in the frontend, you will also need to define a fetch
    method similar to other fetch methods that have been defined in the application.
    Using this fetch method, the `Enroll` component that is discussed in the next
    section will be able to call this create enrollment API.
  prefs: []
  type: TYPE_NORMAL
- en: The Enroll component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Enroll` component will simply contain a button that initiates the enrollment
    call to the backend, and redirects the user if the server returns successfully
    with the new enrollment document's ID. This component takes the ID of the associated
    course as a prop from the parent component from where it is added. This prop will
    be used while making the create enrollment API call. The `Enroll` component is
    defined as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enroll.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'When the ENROLL button is clicked, the create enrollment API will be fetched
    with the provided course ID to either retrieve an existing enrollment, or to create
    a new enrollment and receive it in the response. The `clickEnroll` function to
    be invoked when the button is clicked is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enroll.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: When the server sends back an enrollment successfully, the user will be redirected
    to the view that will display the details of the specific enrollment.
  prefs: []
  type: TYPE_NORMAL
- en: Since the `Enroll` component receives the course ID as a prop from the parent
    component, we also add `PropType` validation (as shown in the following code)
    for the component, as its functionality and implementation relies on this prop
    being passed.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enroll.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: When a server responds successfully on the API call, the user is redirected
    to the enrolled course view, where they can go through the lesson content. We
    will work on implementing this view in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Enrolled Course view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For each course on which the user is enrolled, they will see a view that lists
    the details of the course, and each lesson in the course; with the option to complete
    each lesson. In the following sections we will implement this view, by first adding
    a backend API that returns a given enrollment's details, and then using this API
    in the frontend to build the enrolled course view.
  prefs: []
  type: TYPE_NORMAL
- en: The read enrollment API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The backend API which will return the enrollment details from the database
    will be defined as a GET route that accepts the request at `''/api/enrollment/:enrollmentId''`,
    and will be declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'A GET request at this route will first invoke the `enrollmentByID` method,
    since it contains the `enrollmentId` param in the URL declaration. The `enrolmentByID`
    method will query the `Enrollments` collection by the provided ID, and if a matching
    enrollment document is found, we ensure that the referenced course, the nested
    course instructor, and the referenced student details are also populated using
    the `populate` method from Mongoose. The `enrollmentByID` controller method is
    defined as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The resulting enrollment object is attached to the request object and passed
    on to the next controller method. Before returning this enrollment object in the
    response to the client, we will check whether the currently signed-in user is
    the student who is associated with this specific enrollment in the `isStudent`
    method, as defined in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'The `isStudent` method checks whether the user who is identified by the auth
    credentials that were sent in the request matches the student who is referenced
    in the enrollment. If the two users don''t match, a 403 status is returned with
    an error message, otherwise, the next controller method is invoked in order to
    return the enrollment object. The next controller method is the `read` method,
    and it is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: To use this read enrollment API in the frontend, you will also need to define
    a corresponding fetch method, as implemented for all other APIs in this application.
    Then, this fetch method will be used to retrieve the enrollment details to be
    rendered in a React component that the student will interact with. We will implement
    this `Enrollment` component in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Enrollment component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Enrollment` component will load the details of the course and the lessons
    that were received from the read enrollment API. In this view, students will be
    able to go through each lesson in the course and mark each as complete. The lesson
    titles will be listed in a drawer, giving the student an overall idea of what
    the course contains, and how far they have progressed. Each item in the drawer
    will extend to reveal the details of the lesson, as pictured in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c917496f-4f45-4ee3-b968-6592b78183a5.png)'
  prefs: []
  type: TYPE_IMG
- en: To implement this view, first, we need to make a fetch call to the read enrollment
    API in the `useEffect` hook in order to retrieve the details of the enrollment
    and set it to state, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: We will implement the drawer layout using Material-UI's `Drawer` component.
    In the drawer, we keep the first item as the Course Overview, which will give
    the user an overview of the course details, similar to the single course page.
    When the user enters this enrollment view, they will see the Course Overview first.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, after adding this first drawer item, we create a separate
    section for the lessons, where the `lessonStatus` array is iterated over to list
    the lesson titles in the drawer.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Each of the items in the Lessons section of the drawer will also give the user
    a visual indication of whether the lesson has been completed, or is still incomplete.
    These check or uncheck icons will be rendered based on the Boolean value of the
    `complete` field in each item in the `lessonStatus` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine which drawer is currently selected, we will utilize the initialized
    `drawer` value to state with a -1\. The -1 value will be associated with the Course
    Overview drawer item and view, whereas the index of each `lessonStatus` item will
    determine which lesson is displayed when selected from the drawer. When a drawer
    item is clicked, we will call the `selectDrawer` method, giving it either -1 or
    the index of the lesson clicked as its argument. The `selectDrawer` method is
    defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'This `selectDrawer` method sets the `drawer` value in the state according to
    the item clicked on the drawer. The actual content view will also render conditionally,
    depending on this `drawer` value, according to the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The course overview section can be designed and implemented according to the
    Course page. In order to render the individual lesson details, we can use a `Card`
    component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: This will render the details of the lesson that has been selected, which are
    the title, content, and resource URL values. With this implementation, we now
    have a way to let users enroll on courses and view the details of their enrollment.
    This enrollment data is initially created from the course details, but will also
    store details that are specific to the student who enrolled, and their progress
    in the lessons and the course overall. In order to be able to record and track
    this progress, and then display the related statistical information to both students
    and instructors, we will update this implementation further in the following section
    in order to add these capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking progress and enrollment stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a classroom application such as MERN Classroom, it can be valuable to let
    students visualize their progress in enrolled courses, and let instructors see
    how many students enrolled and completed their courses.
  prefs: []
  type: TYPE_NORMAL
- en: In this application, once a student is enrolled on a course, they will be able
    to go through each lesson in it, and mark it complete until all the lessons are
    done, and the whole course is complete. The application will leave visual cues
    to let a student know the state of their enrollments in courses. For instructors,
    once they publish a course, we will show the total number of students who enrolled
    on the course, and the total number of students who completed the course.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will implement these capabilities, starting with
    letting users complete lessons and track their progress in a course, then listing
    their enrollments with indicators for which ones are complete and which are in
    progress, and finally, showing the enrollment stats for each published course.
  prefs: []
  type: TYPE_NORMAL
- en: Completing lessons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will have to extend both the enrollment APIs and the enrollment view implementation
    to allow students first to complete lessons, and then the whole course. We will
    add a lesson complete API in the backend and use this API in the frontend to mark
    a lesson as complete when the user performs this action. In the following sections,
    we will add this API, then modify the `Enrollment` component to use this API,
    and visually indicate which lessons are complete.
  prefs: []
  type: TYPE_NORMAL
- en: Lessons completed API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will add a `complete` API endpoint in the backend for enrollments, which
    will mark specified lessons as complete, and will also mark the enrolled course
    as completed when all the lessons are done. To implement this API, we will start
    by declaring a PUT route, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'When a PUT request is received at the `''/api/enrollment/complete/:enrollmentId''`
    URL, we will first make sure that the signed-in user is the student who is associated
    with this enrollment record, and then we will call the `complete` enrollment controller
    method. The `complete` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: In this `complete` method, we use the `updateOne` action from MongoDB to update
    the enrollment document, which contains the `lessonStatus` object with the corresponding `lessonStatusId` value
    provided in the request.
  prefs: []
  type: TYPE_NORMAL
- en: In the resulting enrollment document, we update the `complete` field of the
    specific object in the `lessonStatus` array, and the `updated` field of the enrollment
    document. If a `courseCompleted` value is sent in the request, we also update
    the `completed` field in the enrollment document. Once the enrollment document
    is updated successfully, it is sent back in the response.
  prefs: []
  type: TYPE_NORMAL
- en: To use this `complete` API endpoint in the frontend, you also need to define
    a corresponding fetch method like we did for other API implementations. This fetch
    method should make a PUT request to the complete enrollment route with related
    values sent in the request. As discussed in the next section, we will use this
    implemented API in the `Enrollment` component in order to allow students to complete
    lessons.
  prefs: []
  type: TYPE_NORMAL
- en: Completed lessons from the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Enrollment` component, in which we are rendering each lesson''s details
    in the drawer view, we will give the student the option to mark the lesson as
    completed. This option will render conditionally, depending on whether the given
    lesson is already completed or not. This option will be added to the `action`
    property in `CardHeader`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'If the given `lessonStatus` object has the `complete` attribute set to `true`,
    then we render a filled-out button with the text Completed, otherwise an outlined
    button is rendered with the text Mark as complete. Clicking on this button makes
    a call to the `markComplete` function, which will make the API call to update
    the enrollment in the database. This `markComplete` function is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: In this function, before making the API call to the backend, we prepare the
    values to be sent with the request in the `updatedData` object. We send the `lessonStatus`
    details, including the ID value and `complete` value set to `true` for the lesson
    that was completed by the user. We also calculate if the total number of completed
    lessons is equal to the total number of lessons, so that we can set and send the `courseCompleted`
    value in the request, as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The total number of completed lessons is calculated using the `totalCompleted`
    function, which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollment.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the array `reduce` function to find and tally the count for the completed
    lessons in the `lessonStatus` array. This count value is also stored in the state,
    so that it can be rendered in the view at the bottom of the drawer, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/444a45f8-bc19-4b3a-88c2-ff62cbf78852.png)'
  prefs: []
  type: TYPE_IMG
- en: The student's lessons will have a check icon next to them, as an indication
    of which lessons are either complete or incomplete. We also give the student a
    number tally of how many were completed out of the total. The course is considered
    completed when all the lessons are done. This gives the student an idea of their
    progress in the course. Next, we will add a feature that will allow users to see
    the state of all the courses on which they are enrolled.
  prefs: []
  type: TYPE_NORMAL
- en: Listing all enrollments for a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once they are signed in to MERN Classroom, students will be able to view a list
    of all their enrollments on the home page. In order to implement this feature,
    we will first define a backend API, which returns the list of enrollments for
    a given user, and then use it in the frontend to render the list of enrollments
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The list of enrollments API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The list of enrollments API will take a GET request and query the `Enrollments`
    collection in order to find enrollments that have a student reference that matches
    with the user who is currently signed in. To implement this API, we will first
    declare the GET route for `''/api/enrollment/enrolled''`, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'A GET request to this route will invoke the `listEnrolled` controller method,
    which will query the database and return the results in the response to the client.
    The `listEnrolled` method is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: The query to the `Enrollments` collection finds all enrollments with the student
    reference that matches the user ID that was received in the auth credentials of
    the currently signed-in user. The resulting enrollments will be populated with
    the referenced course's name and category values, and the list will be sorted
    so that the completed enrollments are placed after the incomplete enrollments.
  prefs: []
  type: TYPE_NORMAL
- en: By defining a corresponding fetch method for this API on the client- side, we
    can call it in the React component that will render these enrollments. We will
    look at the implementation of this component in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The Enrollments component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Enrollments` component will be rendered on the Home page, and it will
    take the list of enrollments as props from the `Home` component. The received
    list of enrollments will be rendered in this component in order to show the user
    the courses on which they are enrolled. We will also indicate if an enrolled course
    in the list has been completed, or is in progress, using representative icons
    for each state, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9467437-d39f-4b02-ade4-9e4d5dc8bc5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This view for listing enrollments will be very similar to the `Courses` component,
    which lists the published courses. In `Enrollments`, instead of courses, the enrollments
    received from the `Home` component will be iterated over to render each enrollment,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/enrollment/Enrollments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Based on whether the individual enrollment already has a `complete` date value
    or not, we will render the icons conditionally. This will give the users an idea
    of which enrolled courses they have completed, and which they are yet to finish.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have implemented the features to allow students in this application
    to enroll on courses, complete lessons, and also track their progress, we can
    also provide enrollment stats about courses by extending on these implementations,
    as we will see next.
  prefs: []
  type: TYPE_NORMAL
- en: Enrollment stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the instructor publishes a course, and other users in the application start
    enrolling and completing lessons in the course, we will show the total number
    of enrollments and course completions as simple enrollment statistics for the
    course. To implement this feature, in the following sections we will first implement
    an API that returns the enrollment stats, and then show these stats in the view.
  prefs: []
  type: TYPE_NORMAL
- en: The enrollment stats API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to implement a backend API that will query the `Enrollments` collection
    in the database to calculate the stats for a specific course, we first need to
    declare a GET route at `'/api/enrollment/stats/:courseId'`, as shown in the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/routes/enrollment.routes.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: A GET request at this URL will return a `stats` object containing the total
    enrollments and total completions for the course, as identified by the `courseId` provided
    in the URL parameter. This implementation is defined in the `enrollmentStats`
    controller method, as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/server/controllers/enrollment.controller.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: In this `enrollmentStats` method, we run two queries against the `Enrollments`
    collection using the course ID that is provided in the request. In the first query,
    we simply find all the enrollments for the given course, and count these results
    using MongoDB's `countDocuments()`. In the second query, we find all the enrollments
    for the given course, and also check whether the `completed` field exists in these
    enrollments. Then we finally get the count of these results. These numbers are
    sent back in the response to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to other API implementations, you will also need to define a corresponding
    fetch method on the client that will make the GET request to this route. Using
    this fetch method, we will retrieve and display these stats for each published
    course, as discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying enrollment stats for a published course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The enrollment stats can be retrieved from the backend and rendered in the
    Course view, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed43fbdb-ca66-4cc9-8a4b-ec1e5238dd9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve these enrollment stats, we will add a second `useEffect` hook in
    the `Course` component in order to make a fetch call to the enrollment stats API,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'This will receive the enrollment stats for the given course and set it to the
    `stats` variable in state, and we can render it in the view, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-classroom/client/course/Course.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'With this feature added to the Course component, to any visitor who is browsing
    through courses in the MERN Classroom application, a published course in the application
    will look as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6f50642-a427-407d-82d7-7ebd783295af.png)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot of the Course page with the course details, enroll option, and
    enrollment stats, manages to capture all the features that we have implemented
    in this chapter in order to make this view possible. A user who signed up to the
    classroom application became an educator to create and publish this course with
    lessons. Then, other users enrolled in the course and completed the course lessons
    to generate the enrollment stats. We simply extended the MERN skeleton application
    to add more models, APIs, and React frontend components, which retrieved and then
    rendered the data received in order to build a complete classroom application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we developed a simple online classroom application called MERN
    Classroom, by extending the skeleton application. We incorporated functionality
    that allowed users to have multiple roles, including educator and student; to
    add and publish courses with lessons as an instructor; to enroll on courses and
    complete lessons as a student; and to keep track of course completion progress
    and enrollment statistics.
  prefs: []
  type: TYPE_NORMAL
- en: While implementing these features, we practiced how to extend the full-stack
    component slices that make up the frontend–backend-synced application. We added
    new features by simply implementing data schemas and models, adding new backend
    APIs, and integrating these with new React components in the frontend to complete
    the full-stack slice. By building this application up gradually from smaller units
    of implementation to complex and combined features, you should now have a better
    grasp of how to combine the different parts of a MERN-based full-stack application.
  prefs: []
  type: TYPE_NORMAL
- en: In order to learn how to integrate even more complex features, and find solutions
    to the tricky problems that you may face when developing advanced real-world applications
    with this stack, we will start building a MERN-based, feature-rich online marketplace
    application in the next chapter.
  prefs: []
  type: TYPE_NORMAL
