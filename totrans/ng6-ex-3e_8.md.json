["```js\nlet zone = new NgZone({ enableLongStackTrace: false });     \nlet doWork = function () { \n  console.log('Working'); \n}; \n\nzone.onMicrotaskEmpty.subscribe((data:any) => { \n  console.log(\"Done!\"); \n}); \n\nzone.run(() => { \n  doWork(); \n    setTimeout(() => { \n        console.log('Hard'); \n        doWork(); \n    }, 200); \n    doWork(); \n}); \n```", "```js\nWorking  // sync call \nWorking  // sync call \nDone!   // main execution complete  \nHard     // timeout callback \nWorking  // async call \nDone!   // async execution complete\n```", "```js\nclass ApplicationRef { \n\n  constructor(private zone: NgZone) { \n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }}); \n  } \n\n  tick() { \n    this._views.forEach((view) => view.detectChanges());\n  } \n} \n```", "```js\n        doWork() { \n           this.firstName=\"David\"; \n           this.lastName=\"Ruiz\"; \n        } \n```", "```js\n            <div class=\"col-sm-3\"> \n            Change detection done {{changeDetectionDone()}}\n            </div> \n```", "```js\n            times: number = 0; \n            changeDetectionDone(): number { \n                this.times++; \n                return this.times; \n            } \n```", "```js\n        EXCEPTION: Expression has changed after it was checked.\n        Previous value: 'Change \n        detection done 1'. Current value: 'Change detection done 2' ... \n```", "```js\n<Employee> \n    <summary [model]=\"employee\"></employee> \n    <personal [model]=\"employee.personal\"></personal> \n    <professional [model]=\"employee.professional\"></professional> \n    <address [model]=\"employee.home\"></address> \n    <address [model]=\"employee.work\"></address> \n</Employee> \n```", "```js\npersonalInfo = Immutable.Map({ name: 'David', 'age': '40' }); \n```", "```js\nnewPersonalInfo = personalInfo.set('name', 'Dan'); \n```", "```js\n @Component({ \n  selector:'personal', \n  template: ` \n    <h2>{{model.name}}</h2> \n    <span>{{model.age}}</span>`, \n changeDetection: ChangeDetectionStrategy.OnPush \n}) \nclass PersonalInfo { \n  @Input() model; \n} \n```", "```js\nconstructor(private ref: ChangeDetectorRef) { \n    ref.detach(); \n} \n```", "```js\nthis.httpService.get(url,{withCredentials:true}); \n```", "```js\nclass SessionContext { \n  currentUser():User { ... }; \n  isUserInRole(roles:Array<string>):boolean { ...}; \n  isAuthenticated:boolean; \n} \n```", "```js\nexport class AuthGuard implements CanActivate { \n  constructor(private session:SessionContext) { } \n  canActivate() { \n    return this.session.isAuthenticated &amp;&amp;  \n      session.isUserInRole(['Contributor', 'Admin']); \n  } \n} \n```", "```js\n<div id='header'> \n    <div> Welcome, {{userName}}</div> \n    <div><a href='#/setting/my'>Settings</a></div> \n    <div *a2beRolesAllowed='[\"admin\"])'> \n        <a href='#/setting/site'>Site Settings</a> \n    </div> \n</div> \n```", "```js\n@Directive({ selector: '[a2beRolesAllowed]' }) \nexport class RolesAllowedDirective { \n  private _prevCondition: boolean = null; \n  constructor(private _viewContainer: ViewContainerRef, \n    private _templateRef: TemplateRef, private SessionContext _session) { } \n\n  @Input() set a2beRolesAllowed(roles: Array<string>) { \n    if (this._session.isUserInRole(roles)) { \n      this._viewContainer \n        .createEmbeddedView(this._templateRef); \n    } \n    else { \n      this._viewContainer.clear(); \n    } \n  } \n} \n```", "```js\nangular.module('7minWorkout') \n  .controller('WorkoutController',[...]) \n\nangular.module('app') \n.directive('remoteValidator', [...]) \n\nangular.module('7minWorkout') \n.filter('secondsToTime', function () { ... } \n\nangular.module('7minWorkout') \n.factory('workoutHistoryTracker', [...]) \n```", "```js\nfunction WorkoutController($scope, ...) { ... } \nWorkoutController.$inject = ['$scope', ...]; \n\nfunction remoteValidator($parse) {...} \nremoteValidator.$inject=[$parse]; \n\nfunction secondsToTime() {...} \n\nfunction workoutHistoryTracker($rootScope, ...) { ...} \nworkoutHistoryTracker.$inject = ['$rootScope',...]; \n```", "```js\n(function() { \n    function WorkoutController($scope, ...) { ... } \n    WorkoutController.$inject = ['$scope', ...]; \n\n    angular \n        .module('7minWorkout') \n        .controller('WorkoutController', WorkoutController); \n\n})(); \n```", "```js\n<div ng-controller=\"WorkoutListController as workoutList\"> \n   <a ng-repeat=\"workout in workoutList.workouts\"  href=\"#/workout/{{workout.name}}\"> \n</div> \n```", "```js\nfunction WorkoutListController($scope, ...) { \n  this.workouts=[]; \n} \n```", "```js\n$routeProvider.when('/builder/workouts', { \n... \n   controller: 'WorkoutListController', \n controllerAs: 'workoutList' \n }); \n```", "```js\n<div id=\"exercise-pane\" class=\"col-sm-7\"> \n... \n  <span ng-controller=\"WorkoutAudioController\"> \n    <audio media-player=\"ticksAudio\" loop autoplay src=\"img/tick10s.mp3\"></audio> \n    <audio media-player=\"nextUpAudio\"  src=\"img/nextup.mp3\"></audio> \n    ... \n  </span>\n```", "```js\n<div id=\"exercise-pane\" class=\"col-sm-7\"> \n... \n<workout-audio-component></workout-audio-component> \n```", "```js\nbindToController: { \n   name: '=', \n   title: '&amp;' \n} \n```", "```js\n    git clone https://github.com/chandermani/angularjsbyexample.git\n```", "```js\n    cd angularjsbyexample\n    git checkout ng6-base\n```", "```js\n   ApiKeyAppenderInterceptorProvider.setApiKey(\"<yourapikey>\"); \n```", "```js\n    cd trainer/app\n    npm install\n```", "```js\nnpm i http-server -g\n```", "```js\n    http-server -c-1\n```", "```js\nnpm i systemjs --save\n```", "```js\n<script src=\"img/angular-local-storage.js\"</script> \n<script src=\"img/system.src.js\">\n</script>\n<script>\n System.config({ packages: {'js': {defaultExtension: 'js'}}});\n System.import('js/app.js');\n</script>\n```", "```js\n<body ng-controller=\"RootController\">\n```", "```js\nimport  './app.module.js'; \nimport  './config.js'; \nimport  './root.js'; \nimport './shared/directives.js'; \nimport './shared/model.js'; \nimport './shared/services.js'; \nimport './7MinWorkout/services.js'; \nimport './7MinWorkout/directives.js'; \nimport './7MinWorkout/filters.js'; \nimport './7MinWorkout/workout.js'; \nimport './7MinWorkout/workoutvideos.js'; \nimport './WorkoutBuilder/services.js'; \nimport './WorkoutBuilder/directives.js'; \nimport './WorkoutBuilder/exercise.js'; \nimport './WorkoutBuilder/workout.js'; \n\nimport * as angular from \"angular\";\n\nangular.element(document).ready(function() { \n  angular.bootstrap(document.body, ['app'],  \n{ strictDi: true }); \n});\n```", "```js\nnpm i typescript -g\n```", "```js\n\"scripts\": { \n    \"test\": \"echo \"Error: no test specified\" &amp;&amp; exit 1\" \n \"tsc\": \"tsc -p . -w\"\n  } \n```", "```js\nnpm install @types/angular @types/angular-route @types/angular-resource @types/angular-mocks  --save-dev\n```", "```js\nnpm run tsc\n```", "```js\n  angular.bootstrap(document.body, ['app'],  { strictDi: true });\n```", "```js\nnpm install\n```", "```js\n<script src=\"img/shim.min.js\"></script> <script src=\"img/zone.js\"></script><script src=\"img/system.src.js\"></script> \n```", "```js\n<script src=\"img/systemjs.config.js\"></script> \n```", "```js\n<script>System.import('app');</script> \n```", "```js\n  \"removeComments\": false, \n \"moduleResolution\": \"node\"\n```", "```js\nimport  './app-ng1.module.js'; \n```", "```js\nconstructor(private upgrade: UpgradeModule) { }\nngDoBootstrap() {\n    this.upgrade.bootstrap(document.documentElement, ['app']);\n}\n```", "```js\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\nimport './app';\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```js\ntemplate: `<div id=\"left-nav-exercises\"> \n           <h4>Exercises</h4> \n           <div *ngFor=\"let exercise of exercises\" class=\"row\"> \n           ... \n\n           </div>` \n```", "```js\nconstructor(  \n@Inject('WorkoutService') private workoutService: any,  \n@Inject('WorkoutBuilderService') private workoutBuilderService: any) \n```", "```js\nexport function workoutServiceFactory(injector: any) {\n return injector.get('WorkoutService');\n}\n\nexport const workoutServiceProvider = {\n provide: 'WorkoutService',\n useFactory: workoutServiceFactory,\n deps: ['$injector']\n};\n```", "```js\nproviders:[workoutServiceProvider]\n```", "```js\nUpgradeHelperService.upgradeService('WorkoutService')\n```", "```js\nproviders: [\n        UpgradeHelperService.upgradeService('ExercisePlan'),\n        UpgradeHelperService.upgradeService('WorkoutPlan'),\n        UpgradeHelperService.upgradeService('WorkoutService'),\n        UpgradeHelperService.upgradeService('WorkoutBuilderService'),\n        UpgradeHelperService.upgradeService('ExerciseBuilderService'),\n        UpgradeHelperService.upgradeService('ApiKeyAppenderInterceptor'),\n        UpgradeHelperService.upgradeService('appEvents'),\n        UpgradeHelperService.upgradeService('workoutHistoryTracker'),\n    ]\n```", "```js\nimport {ExercisesNavComponent} from './WorkoutBuilder/exercise-nav-component' \nimport { downgradeComponent } from '@angular/upgrade/static';\n...\nangular.module('WorkoutBuilder')\n    .directive('exerciseNav', downgradeComponent({ component: ExercisesNavComponent }) as angular.IDirectiveFactory);\n```", "```js\n<exercise-nav></exercise-nav>\n```", "```js\n<exercise-nav [exercises]='vm.exercises'></exercise-nav> \n```", "```js\n<exercise-nav (onExerciseClicked)='vm.add(exercise)'></exercise-nav> \n```", "```js\n<exercise-nav></exercise-nav> \n```", "```js\n<exercise-nav ng-if='showNav'></exercise-nav> \n<exercise-nav ng-repeat='item in items'></exercise-nav> \n```", "```js\nUpgradeHelperService.upgradeService('WorkoutService') \n```", "```js\nconstructor(@Inject('WorkoutService') private workoutService: any...\n```", "```js\nangular.module('app').factory('MyService',  \n  downgradeInjectable(MyService)) \n```", "```js\n$routeProvider.when('/finish', { template: '<finish></finish>' }); \n```", "```js\nnpm install @ngx-translate/core --save\nnpm install @ngx-translate/http-loader --save \n```", "```js\nvar map = {... \n    '@ngx-translate/core':'npm:@ngx-translate/core/bundles/core.umd.js',\n    '@ngx-translate/http-loader':'npm:@ngx-translate/http-loader/bundles/http-loader.umd.js'\n}\n```", "```js\nexport function HttpLoaderFactory(http: HttpClient) {\n return new TranslateHttpLoader(http,'/i18n/');\n}\n\n@NgModule({\n    imports: [...\n        HttpClientModule,\n FormsModule,\n TranslateModule.forRoot({\n loader: {\n provide: TranslateLoader,\n useFactory: HttpLoaderFactory,\n deps: [HttpClient]\n }\n })\n    ],...\n```", "```js\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n```", "```js\nngDoBootstrap() {\n        this.upgrade.bootstrap(document.documentElement, ['app']);\n\n var translateService = this.upgrade.injector.get(TranslateService);\n // determine the current locale.\n var userLang = navigator.language.split('-')[0];\n userLang = /(fr|en)/gi.test(userLang) ? userLang : 'en';\n\n translateService.setDefaultLang('en');\n translateService.use(userLang);  }); \n```", "```js\nimport {StartComponent} from './start/start-component'; \nangular.module('start').directive('start', upgradeAdapter.downgradeng6Component(StartComponent) as angular.IDirectiveFactory); \n```", "```js\n<a *ngFor=\"let workout of workouts|search:'name':searchContent|orderBy:'name'\" ...>\n...\n{{workout.totalWorkoutDuration()|secondsToTime}}\n```", "```js\n$routeProvider.when('/start',  { template: '<start></start>' }); \n$routeProvider.when('/finish',  { template: '<finish></finish>' });\n```", "```js\nimport { TranslateService } from '@ngx-translate/core'; \n\nexport function ngxTranslate(ngxTranslateService: TranslateService) { \n   function translate(input) { \n    if (input &amp;&amp; ngxTranslateService.currentLang) { \n      return ngxTranslateService.instant(input); \n    } \n  } \n  translate['$stateful'] = true; \n  return translate; \n} \n\nngxTranslate.$inject = ['TranslateService']; \nangular.module('app').filter(\"ngxTranslate\", ngxTranslate); \n```", "```js\nimport './shared/ngx-translate.filter';\n...\nimport { downgradeComponent, downgradeInjectable } from '@angular/upgrade/static';\n...\nimport { TranslateService } from '@ngx-translate/core';\n...\nangular.module('app')\n .factory('TranslateService', downgradeInjectable(TranslateService)); \n```", "```js\n<h3 class=\"panel-title\" translate>RUNNER.STEPS</h3> \n```", "```js\n<h3 class=\"panel-title\">{{'RUNNER.STEPS'|ngxTranslate}}</h3> \n```"]