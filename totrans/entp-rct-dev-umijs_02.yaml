- en: 'Chapter 1: Environment Setup and Introduction to UmiJS'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：环境搭建和UmiJS简介
- en: '**UmiJS** is Ant Financial''s underlying frontend framework and an open source
    project for developing enterprise-class frontend applications. It''s a robust
    framework you can combine with Ant Design to provide everything you need to build
    a modern user experience.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**UmiJS** 是蚂蚁金服的底层前端框架，也是一个用于开发企业级前端应用的开源项目。它是一个强大的框架，你可以将其与Ant Design结合使用，提供构建现代用户体验所需的一切。'
- en: In this chapter, you will learn how to install and configure a project using
    UmiJS and **Visual Studio Code** (**VSCode**). You'll also understand the folder
    structure and main files of UmiJS. Then, you'll learn how to set fast navigation
    between pages using **u****mi history** and finally discover **Umi UI**, a visual
    option to interact with UmiJS and add components to your project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用UmiJS和**Visual Studio Code**（**VSCode**）安装和配置项目。你还将了解UmiJS的文件夹结构和主要文件。然后，你将学习如何使用**u****mi
    history**进行快速页面导航，最后发现**Umi UI**，这是一个与UmiJS交互并添加组件到项目的可视化选项。
- en: 'We''ll cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主要主题：
- en: Setting up our environment and configuring UmiJS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的环境和配置UmiJS
- en: Understanding the UmiJS folder structure and its main files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解UmiJS的文件夹结构和其主要文件
- en: Exploring the Umi CLI and adding pages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Umi CLI和添加页面
- en: Understanding routing and navigation in UmiJS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解UmiJS中的路由和导航
- en: Using Umi UI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Umi UI
- en: By the end of this chapter, you'll have learned everything you need to get started
    with developing your project and you will also know about the fundamental behavior
    of an UmiJS project and its configurations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会所有开始开发项目所需的知识，你还将了解UmiJS项目及其配置的基本行为。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter's exercises, you just need a computer with any OS (I
    recommend Ubuntu 20.04 or higher).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你只需要一台安装了任何操作系统的电脑（我推荐使用 Ubuntu 20.04 或更高版本）。
- en: 'You can find the complete project in the `Chapter01` folder in the GitHub repository
    available at the following link:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接提供的GitHub仓库的`Chapter01`文件夹中找到完整的项目：
- en: '[https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)'
- en: Setting up our environment and configuring UmiJS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的环境和配置UmiJS
- en: In this section, we'll install and configure VSCode, the EditorConfig extension,
    and the Prettier extension, and create our first UmiJS project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装和配置VSCode、EditorConfig扩展和Prettier扩展，并创建我们的第一个UmiJS项目。
- en: Let's begin by installing a source code editor. You can use any editor that
    supports JavaScript and TypeScript, but I will use VSCode extensively in this
    book. It's a free editor with an integrated terminal and internal Git control
    that natively supports JavaScript, TypeScript, Node.js, and many extensions for
    other languages.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装一个源代码编辑器开始。你可以使用任何支持JavaScript和TypeScript的编辑器，但在这本书中，我将广泛使用VSCode。它是一个免费的编辑器，具有集成的终端和内置的Git控制，原生支持JavaScript、TypeScript、Node.js以及许多其他语言的扩展。
- en: 'VSCode is available as a Snap package, and you can install it on Ubuntu by
    running the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: VSCode可以作为Snap包提供，你可以在Ubuntu上通过运行以下命令来安装它：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Mac users, you can install it using Homebrew on macOS by running the following
    command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac用户，你可以在macOS上使用Homebrew安装它，通过运行以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are using Chocolatey on Windows, you can run the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在Windows上使用Chocolatey，你可以运行以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Alternatively, you can download the installer available at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以下载位于[https://code.visualstudio.com/](https://code.visualstudio.com/)的安装程序。
- en: Important Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can find instructions on installing **Homebrew** on macOS at [https://brew.sh/](https://brew.sh/)
    and installing **Chocolatey** on Windows at [https://chocolatey.org/install](https://chocolatey.org/install).
    If you are a Windows user, you can install Ubuntu in **Windows Subsystem for Linux**
    (**WSL**) and set up your project using common Linux commands. You can read more
    about WSL at [https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://brew.sh/](https://brew.sh/) 上找到有关在 macOS 上安装 **Homebrew** 的说明，以及在
    [https://chocolatey.org/install](https://chocolatey.org/install) 上安装 **Chocolatey**
    的说明。如果您是 Windows 用户，您可以在 **Windows Subsystem for Linux** （**WSL**） 中安装 Ubuntu，并使用常见的
    Linux 命令设置您的项目。您可以在 [https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install)
    上了解更多关于 WSL 的信息。
- en: 'Next, we need to install the dependencies required to develop with UmiJS. First,
    let''s install Node.js by typing and running the following commands in the terminal:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装使用 UmiJS 进行开发所需的依赖。首先，让我们在终端中输入并运行以下命令来安装 Node.js：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first command updates the mirrors, and the second command installs Node.js
    with the `-y` flag, which skips user confirmation to install.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令更新了镜像，第二个命令使用 `-y` 标志安装 Node.js，这会跳过用户确认步骤来安装。
- en: 'You can install Node.js using Homebrew on macOS by running the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Homebrew 在 macOS 上运行以下命令来安装 Node.js：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you are using Chocolatey on Windows, you can run the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Windows 上使用 Chocolatey，您可以运行以下命令：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Alternatively, you can download the installer available at [https://nodejs.org/en/](https://nodejs.org/en/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以从 [https://nodejs.org/en/](https://nodejs.org/en/) 下载可用的安装程序。
- en: 'Node.js has a default package manager named npm, but we will extensively use
    **Yarn** instead of npm in this book, so I recommend installing it. You can do
    that by running the following command in the terminal:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 有一个名为 npm 的默认包管理器，但在这本书中，我们将广泛使用 **Yarn** 而不是 npm，所以我建议您安装它。您可以在终端中运行以下命令来完成此操作：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command will install Yarn globally in your system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在您的系统中全局安装 Yarn。
- en: With that, we are ready to get started with UmiJS. But first, let's understand
    UmiJS a bit more and what kinds of problems it can solve.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就准备好开始使用 UmiJS 了。但首先，让我们更深入地了解 UmiJS 以及它可以解决哪些问题。
- en: Introduction to UmiJS and creating your first project
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UmiJS 简介及创建您的第一个项目
- en: UmiJS is a framework for developing enterprise-class frontend applications.
    This means Umi provides a set of tools for solving everyday problems faced when
    building large business applications that need to deliver a modern user experience
    and must be easy to maintain and modify.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: UmiJS 是一个用于开发企业级前端应用的框架。这意味着 Umi 提供了一套工具，用于解决在构建需要提供现代用户体验且易于维护和修改的大型商业应用时遇到的日常问题。
- en: With Umi, you can quickly develop an application with internationalization,
    permissions, and beautiful interfaces taking advantage of Umi's deep integration
    with Ant Design.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Umi，您可以利用 Umi 与 Ant Design 的深度集成，快速开发具有国际化、权限和美观界面的应用程序。
- en: Another significant advantage of Umi is that there are a variety of published
    plugins you can add to your project as you need. You can also extend it by developing
    your own plugins to meet specific solutions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Umi 的另一个显著优势是，您可以根据需要添加各种已发布的插件到您的项目中。您还可以通过开发自己的插件来扩展它，以满足特定的解决方案。
- en: 'Now that you know more about Umi, let''s create your first project by following
    these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对 Umi 了解更多了，让我们按照以下步骤创建您的第一个项目：
- en: 'Create a new folder for the project and open it in the terminal:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目创建一个新的文件夹并在终端中打开它：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a new project using the `umi-app` template:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `umi-app` 模板创建一个新的项目：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install the project dependencies by running the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装项目依赖：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start the project by running the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令启动项目：
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We now have a project set up! You can open it by typing `http://localhost:8000`
    in the browser and see the result.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了项目！您可以在浏览器中输入 `http://localhost:8000` 来打开它并查看结果。
- en: Let's do the final configurations to simplify our work by adding code formatting.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加代码格式化来简化我们的工作，进行最后的配置。
- en: Installing the EditorConfig and Prettier extensions
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 EditorConfig 和 Prettier 扩展
- en: 'One of the tools UmiJS provides by default in the `umi-app` template is **EditorConfig**,
    a file format that editors read to define the code style across IDEs and text
    editors. You''ll learn more about code style in [*Chapter 5*](B18503_05_Final_JM_ePub.xhtml#_idTextAnchor066),
    *Code Style and Formatting Tools*. Some editors and IDEs offer native support
    to EditorConfig, while in other cases, such as VSCode, you need to install a plugin,
    so let''s install it by following these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: UmiJS 在 `umi-app` 模板中默认提供的一个工具是 **EditorConfig**，这是一个编辑器读取以定义跨 IDE 和文本编辑器的代码格式的文件格式。你将在
    [*第 5 章*](B18503_05_Final_JM_ePub.xhtml#_idTextAnchor066) 中了解更多关于代码风格的信息，*代码风格和格式化工具*。一些编辑器和
    IDE 提供了对 EditorConfig 的原生支持，而在其他情况下，例如 VSCode，你需要安装一个插件，所以让我们按照以下步骤安装它：
- en: 'Open VSCode and press *Ctrl* + *P*. This shortcut will open the following field
    at the top:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VSCode 并按 *Ctrl* + *P*。此快捷键将在顶部打开以下字段：
- en: '![Figure 1.1 – VSCode quick open'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – VSCode 快速打开'
- en: '](img/Figure_1.01_B18503.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 1.01](img/Figure_1.01_B18503.jpg)'
- en: Figure 1.1 – VSCode quick open
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – VSCode 快速打开
- en: 'Type the following command and press *Enter* to install the official extension
    for EditorConfig support:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令并按 *Enter* 安装对 EditorConfig 的官方扩展：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `umi-app` template comes preinstalled with Prettier, which is preconfigured
    for formatting the code. You can use it by running the `yarn prettier` command.
    Still, a better option is to let VSCode format it for you when you save changes
    or paste code blocks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`umi-app` 模板预装了 Prettier，并已预配置用于格式化代码。你可以通过运行 `yarn prettier` 命令来使用它。然而，更好的选择是在保存更改或粘贴代码块时让
    VSCode 为你格式化。'
- en: 'For that, we need to install the Prettier extension and configure it as the
    default code formatter. To install and configure the Prettier extension, follow
    these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要安装 Prettier 扩展并将其配置为默认的代码格式化程序。要安装和配置 Prettier 扩展，请按照以下步骤操作：
- en: 'Press *Ctrl* + *P* and type the following command, then press *Enter* to install
    the official extension for Prettier support:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *P* 并输入以下命令，然后按 *Enter* 安装 Prettier 的官方扩展：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, press *Ctrl* + *,* to open the VSCode preferences, and in the search field,
    type `formatter` and press *Enter*.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按 *Ctrl* + *,* 打开 VSCode 预设，并在搜索字段中输入 `formatter` 并按 *Enter*。
- en: 'Under **Editor: Default Formatter**, select **Prettier - Code formatter**.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **编辑器：默认格式化程序** 下，选择 **Prettier - 代码格式化程序**。
- en: 'Check the **Editor: Format On Paste** and **Editor: Format On Save** options,
    as shown in the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 **编辑器：粘贴时格式化** 和 **编辑器：保存时格式化** 选项，如下面的截图所示：
- en: '![Figure 1.2 – VSCode editor configuration'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – VSCode 编辑器配置'
- en: '](img/Figure_1.02_B18503.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 1.02](img/Figure_1.02_B18503.jpg)'
- en: Figure 1.2 – VSCode editor configuration
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – VSCode 编辑器配置
- en: In this section, we learned how to configure our environment, learned more about
    UmiJS, and created our first project. Now, let's take a closer look at the project
    structure.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何配置我们的环境，更深入地了解了 UmiJS，并创建了我们的第一个项目。现在，让我们更仔细地看看项目结构。
- en: Understanding the UmiJS folder structure and its main files
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 UmiJS 文件夹结构和其主要文件
- en: In this section, you will understand the UmiJS folder structure, and you will
    add some essential configurations to files and folders.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解 UmiJS 的文件夹结构，并将添加一些必要的配置到文件和文件夹中。
- en: 'The project we create based on the `umi-app` template generates a set of folders
    with responsibilities for different parts of the project. Let''s see what each
    one does:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 基于的 `umi-app` 模板创建的项目生成了一系列文件夹，分别负责项目的不同部分。让我们看看每个文件夹的作用：
- en: '`mock`: In this folder, we store our simulated endpoints definitions to generate
    a mock API that we can interact with while developing the frontend.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mock`: 在这个文件夹中，我们存储我们的模拟端点定义以生成我们可以与之交互的模拟 API。'
- en: '`src`: This is the source folder where all our components are located.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`: 这是我们的所有组件所在的源文件夹。'
- en: '`src/.umi`: This folder is automatically generated by UmiJS every time the
    project is compiled and contains its internal configurations.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/.umi`: 这个文件夹是由 UmiJS 在每次项目编译时自动生成的，其中包含其内部配置。'
- en: '`src/pages`: The React components responsible for rendering the pages in response
    to configured routes are located in this folder.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/pages`: 负责根据配置的路由渲染页面的 React 组件位于此文件夹中。'
- en: These are the folders included with the `umi-app` template, but there are other
    essential folders in a UmiJS project, so let's add them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `umi-app` 模板中包含的文件夹，但在 UmiJS 项目中还有其他一些重要的文件夹，所以让我们添加它们。
- en: The first folder we'll add is `config`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先添加的文件夹是 `config`。
- en: Adding config and locales folders
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加配置和地区文件夹
- en: 'In the root folder of our project, we have a file named `.umirc.ts`. This file
    contains the configuration for Umi and its plugins. When your project is compact,
    it''s a good choice, but as it grows and becomes complex, the configuration file
    can become hard to maintain. To avoid that, we can break down our configuration
    into different parts located in the `config` folder. Let''s do this now by opening
    your project in VSCode and following these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的根文件夹中，有一个名为 `.umirc.ts` 的文件。此文件包含 Umi 及其插件的配置。当您的项目紧凑时，这是一个不错的选择，但随着项目的增长和复杂化，配置文件可能变得难以维护。为了避免这种情况，我们可以将配置拆分为位于
    `config` 文件夹中的不同部分。现在，让我们通过在 VSCode 中打开您的项目并按照以下步骤进行操作来完成此操作：
- en: In the root directory of your project, create a new folder named `config`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您项目的根目录中，创建一个名为 `config` 的新文件夹。
- en: You can do that by clicking on the icon in the upper-right corner above the
    folders list.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击文件夹列表上方的右上角图标来完成此操作。
- en: '![Figure 1.3 – VSCode new folder icon'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – VSCode 新文件夹图标'
- en: '](img/Figure_1.03_B18503.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.03_B18503.jpg)'
- en: Figure 1.3 – VSCode new folder icon
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – VSCode 新文件夹图标
- en: Move the `.umirc.ts` file to the `config` folder and rename it `config.ts`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `.umirc.ts` 文件移动到 `config` 文件夹，并将其重命名为 `config.ts`。
- en: You can rename a file by selecting it and pressing *F2*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过选择文件并按 *F2* 键来重命名文件。
- en: In the `config` folder, create a new file named `routes.ts`. In this file, we'll
    configure the application's routes.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `config` 文件夹中，创建一个名为 `routes.ts` 的新文件。在此文件中，我们将配置应用程序的路由。
- en: You can do that by clicking on the icon in the top-right corner, above the folders
    list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击文件夹列表右上角的图标来完成此操作。
- en: '![Figure 1.4 – VSCode new file icon'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – VSCode 新文件图标'
- en: '](img/Figure_1.04_B18503.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.04_B18503.jpg)'
- en: Figure 1.4 – VSCode new file icon
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – VSCode 新文件图标
- en: 'Paste this code into the `routes.ts` file and save:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此代码粘贴到 `routes.ts` 文件中并保存：
- en: '[PRE13]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code defines the root path (`'/'`) to render the component index located
    in the `pages` folder.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码定义了渲染位于 `pages` 文件夹中的组件索引的根路径（`'/'`）。
- en: 'Now we can import the `routes.ts` file into `config.ts` and add this line to
    the `config.ts` file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将 `routes.ts` 文件导入到 `config.ts` 中，并在 `config.ts` 文件中添加以下行：
- en: '[PRE14]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can then rewrite the route section to use it as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以重写路由部分，如下所示：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Umi also supports `locales` in the `src` folder and add the following configuration
    to the `config.ts` file under the `config` folder:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Umi 还支持在 `src` 文件夹中的 `locales`，并在 `config` 文件夹下的 `config.ts` 文件中添加以下配置：
- en: config.ts
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: config.ts
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `locale` configuration properties are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`locale` 配置属性如下：'
- en: '`default`: The default application language.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`：默认应用程序语言。'
- en: '`antd`: Enable Ant Design components internationalization.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`antd`：启用 Ant Design 组件国际化。'
- en: '`baseNavigator`: Enable browser language detection.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`baseNavigator`：启用浏览器语言检测。'
- en: '`baseSeparator`: The separator used in multi-language files localized under
    the `src/locales` folder.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`baseSeparator`：在 `src/locales` 文件夹下本地化的多语言文件中使用的分隔符。'
- en: Now we can support internationalization by adding multi-language files in the
    `locales` folder. For example, to support the English language, we need to add
    a file named `en-US.js`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在 `locales` 文件夹中添加多语言文件来支持国际化。例如，要支持英语，我们需要添加一个名为 `en-US.js` 的文件。
- en: Now, we'll add the `app.tsx` file to set configurations at runtime.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加 `app.tsx` 文件来设置运行时配置。
- en: Runtime configuration
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时配置
- en: Umi uses a file named `app.tsx` to expand your application's configurations
    at runtime. This file is useful to configure the initial state using the `app.tsx`
    file needs to be located in the `src` folder.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Umi 使用名为 `app.tsx` 的文件在运行时扩展您的应用程序配置。此文件非常有用，可以使用 `app.tsx` 文件配置初始状态，该文件需要位于
    `src` 文件夹中。
- en: Add a file named `app.tsx` to the `src` folder following the steps demonstrated
    previously.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前演示的步骤，在 `src` 文件夹中添加一个名为 `app.tsx` 的文件。
- en: 'At this point, our project structure should look like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的项目结构应该看起来像这样：
- en: '![Figure 1.5 – Project structure after last modifications'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – 最后修改后的项目结构'
- en: '](img/Figure_1.05_B18503.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.05_B18503.jpg)'
- en: Figure 1.5 – Project structure after last modifications
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 最后修改后的项目结构
- en: You'll better understand all these features following the exercises in the upcoming
    chapters.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过即将到来的章节中的练习，您将更好地理解所有这些功能。
- en: Now that you understand the Umi project structure and have added the missing
    folders and files, let's learn about some useful commands in the Umi **command-line
    interface** (**CLI**).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了 Umi 项目结构并添加了缺失的文件夹和文件，让我们来学习一些 Umi **命令行界面**（**CLI**）中的有用命令。
- en: Exploring the Umi CLI and adding pages
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Umi CLI 和添加页面
- en: In this section, we'll explore the Umi CLI for automating tasks and use the
    `generate` command to add some pages to your project.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索 Umi CLI 以自动化任务，并使用 `generate` 命令向您的项目添加一些页面。
- en: 'Umi provides a CLI with commands to build, debug, list configurations, and
    so on. You can use them to automate tasks. Some of these commands are already
    configured in the `umi-app` template as scripts in the `package.json` file: `yarn
    start` will execute `umi dev`, `yarn build` will execute `umi build`, and so on.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Umi 提供了一个 CLI，包含构建、调试、列出配置等命令。您可以使用它们来自动化任务。其中一些命令已经在 `umi-app` 模板中配置为 `package.json`
    文件中的脚本：`yarn start` 将执行 `umi dev`，`yarn build` 将执行 `umi build`，等等。
- en: 'These are the main commands available:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可用的主要命令：
- en: '`umi dev`: Compiles the application and starts a development server for debugging.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umi dev`：编译应用程序并启动开发服务器以进行调试。'
- en: '`umi build`: Compiles the application bundle in the `dist` folder.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umi build`：在 `dist` 文件夹中编译应用程序包。'
- en: '`umi webpack`: This shows the webpack configuration file generated by Umi.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umi webpack`：这显示了 Umi 生成的 webpack 配置文件。'
- en: '`umi plugin list`: Lists all Umi plugins in use.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umi plugin list`：列出所有正在使用的 Umi 插件。'
- en: '`umi generate page`: Creates a new page template.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umi generate page`：创建一个新的页面模板。'
- en: Important Note
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more commands, refer to the documentation available at [https://umijs.org/docs/cli](https://umijs.org/docs/cli).
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于更多命令，请参阅在 [https://umijs.org/docs/cli](https://umijs.org/docs/cli) 可用的文档。
- en: 'Let''s add some pages using the `generate page` Umi CLI command. Follow these
    steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `generate page` Umi CLI 命令添加一些页面。按照以下步骤操作：
- en: 'First, delete the files under the `src/pages` folder, then add two pages by
    running these commands:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，删除 `src/pages` 文件夹下的文件，然后运行以下命令添加两个页面：
- en: '[PRE17]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These commands generate two components under the `pages` folder, `Login` and
    `Home`, with TypeScript and Less support.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令在 `pages` 文件夹下生成两个组件，`Login` 和 `Home`，支持 TypeScript 和 Less。
- en: 'To access these pages, we need to define routes, so modify your `routes.ts`
    file to define the created components for new routes:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问这些页面，我们需要定义路由，因此修改您的 `routes.ts` 文件以定义为新路由创建的组件：
- en: routes.ts
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: routes.ts
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To check the result, start the project by running `yarn start`, then navigate
    to `http://localhost:8000/`; you should see the login page.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查结果，通过运行 `yarn start` 启动项目，然后导航到 `http://localhost:8000/`；您应该看到登录页面。
- en: Navigate to `http://localhost:8000/home`; you should now see the home page.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `http://localhost:8000/home`；您现在应该看到主页。
- en: Now that we have pages set up, we can learn more about Umi routing and navigation
    using umi history.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了页面，我们可以通过使用 umi history 来了解更多关于 Umi 路由和导航的信息。
- en: Understanding routing and navigation in UmiJS
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 UmiJS 中的路由和导航
- en: In this section, you'll understand the Umi routing system and options for configuring
    routes. You will also learn how to access route parameters and query strings and
    about navigating between pages.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解 Umi 路由系统和配置路由的选项。您还将学习如何访问路由参数和查询字符串，以及如何在页面之间导航。
- en: 'A Umi project is a `index.html`), and all other pages we see when accessing
    different addresses are components rendered on this same page. Umi does the job
    of parsing the route and rendering the correct component; we just need to define
    which component to render when the route matches a specific path. As you may have
    noticed, we already did that. But there are other configuration options. For example,
    we can set subroutes to define a standard layout for various pages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Umi 项目是一个 `index.html`），当我们访问不同地址时看到的所有其他页面都是在这个相同页面上渲染的组件。Umi 执行解析路由和渲染正确组件的工作；我们只需要定义当路由匹配特定路径时，需要渲染哪个组件。如您所注意到的，我们已经那样做了。但还有其他配置选项。例如，我们可以设置子路由来定义各种页面的标准布局：
- en: routes.ts
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: routes.ts
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding example defines that all routes under `'/'` will have a default
    header, which is a component located in the `src/layouts` folder.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例定义了所有位于 `'/'` 下的路由都将有一个默认的头部，这是一个位于 `src/layouts` 文件夹中的组件。
- en: 'The header component should look like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 头部组件应如下所示：
- en: '[PRE20]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`props.children` will receive the components when you access a defined route.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问定义的路由时，`props.children` 将接收组件。
- en: 'Another option we have is to redirect routes. Consider the following example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有另一个选项，即重定向路由。考虑以下示例：
- en: routes.ts
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: routes.ts
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this configuration, when you access `http://localhost:8000/`, Umi will
    immediately redirect the page to `http://localhost:8000/app/login`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置，当您访问 `http://localhost:8000/` 时，Umi 将立即将页面重定向到 `http://localhost:8000/app/login`。
- en: 'We can also define whether a path should be exact or not:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义路径是否应该是精确的：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This configuration defines that you can access this page in any path under `/app/login`,
    such as `http://localhost:8000/app/login/user`. By default, all paths are exact.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置定义了您可以在`/app/login`下的任何路径访问此页面，例如`http://localhost:8000/app/login/user`。默认情况下，所有路径都是精确的。
- en: You now understand how the routing system works and the different configuration
    options we have for routing. Now, you will learn how to access path and query
    string parameters and about conventional routing and navigating between pages.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经了解了路由系统的工作原理以及我们为路由提供的不同配置选项。现在，您将学习如何访问路径和查询字符串参数，以及关于传统路由和页面之间的导航。
- en: Understanding path parameters and query strings
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解路径参数和查询字符串
- en: 'Sometimes we need to identify a resource in the route path. Imagine we have
    a page in our project that only displays product information. When accessing this
    page, we need to specify what product to get information from. We can do that
    by identifying the product ID in the route path:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们需要在路由路径中识别一个资源。想象一下，在我们的项目中有一个只显示产品信息的页面。当访问这个页面时，我们需要指定要获取哪个产品信息。我们可以通过在路由路径中识别产品ID来实现这一点：
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If the parameter is not mandatory to access the page, you must add the `?`
    character, like this: `/product/:id?`.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数不是访问页面的必需项，您必须添加`?`字符，如下所示：`/product/:id?`。
- en: 'To access the product ID, we can use the `useParams` hook provided by Umi:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问产品ID，我们可以使用Umi提供的`useParams`钩子：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also receive query string parameters after the route. Query string
    parameters are key-value pairs in the `?` character sequence in a URL, such as
    this example: `/app/home?code=eyJhbGci`. Here, `code` contains the value `eyJhbGci`.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在路由后接收查询字符串参数。查询字符串参数是URL中`?`字符序列中的键值对，例如以下示例：`/app/home?code=eyJhbGci`。在这里，`code`包含值`eyJhbGci`。
- en: 'We don''t have a specific hook to access query string parameter values, but
    we can easily do that using umi history:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有特定的钩子来访问查询字符串参数值，但我们可以通过umi历史记录轻松做到这一点：
- en: '[PRE25]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, let's see how you can define parameters when working with conventional
    routing.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在传统路由中定义参数。
- en: Conventional routing
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统路由
- en: UmiJS offers an automatic route configuration based on your project structure
    under the `pages` folder. UmiJS will rely on that if it can't find route definitions
    in the `config.ts` or `.umirc.ts` files.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: UmiJS在`pages`文件夹下根据您的项目结构提供自动路由配置。如果UmiJS在`config.ts`或`.umirc.ts`文件中找不到路由定义，它将依赖这个配置。
- en: 'If you want to configure a route parameter, you can name the file enclosed
    in `[]`, like this: `[id].tsx`. If this parameter is not mandatory to access the
    page, you must add the `$` character, like this: `[id$].tsx`.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想配置路由参数，可以在`[]`中命名包含的文件，如下所示：`[id].tsx`。如果此参数不是访问页面的必需项，您必须添加`$`字符，如下所示：`[id$].tsx`。
- en: '![Figure 1.6 – Optional route parameter in conventional routing'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.6 – Optional route parameter in conventional routing](img/Figure_1.06_B18503.jpg)'
- en: '](img/Figure_1.06_B18503.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.06_B18503.jpg](img/Figure_1.06_B18503.jpg)'
- en: Figure 1.6 – Optional route parameter in conventional routing
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – 传统路由中的可选路由参数
- en: Next, you will see how to navigate between pages.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到如何在不同页面之间导航。
- en: Navigating between pages
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面之间的导航
- en: 'When we need to set navigation between pages, usually, we use the DOM history
    object and anchor tag. In UmiJS, we have similar options to navigate: `Link` component.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要设置页面之间的导航时，通常我们会使用DOM历史对象和锚点标签。在UmiJS中，我们有类似的选项进行导航：`Link`组件。
- en: 'You can create hyperlinks between pages using the `Link` component, as in the
    following example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`Link`组件在页面之间创建超链接，如下例所示：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can also set navigation between pages using the `push()` umi history command,
    as in the following example:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`push()` umi历史命令设置页面之间的导航，如下例所示：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In addition to the `push()` command, umi history has the `goBack()` command
    to revert one page in the history stack and `goForward()` to advance one page.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`push()`命令外，umi历史记录还有`goBack()`命令可以回退历史堆栈中的一页，以及`goForward()`命令可以前进一页。
- en: We have covered all the essential aspects of the Umi routing system, the different
    options to configure routes, access path and query string parameters, and navigation
    between pages.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了Umi路由系统的所有基本方面，包括配置路由的不同选项、访问路径和查询字符串参数以及页面之间的导航。
- en: Before finishing this chapter, I will introduce an exciting feature Umi provides
    if you prefer to interact with the project visually.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这一章之前，我将介绍Umi提供的一个令人兴奋的功能，如果您更喜欢以可视化的方式与项目交互。
- en: Using Umi UI
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Umi UI
- en: Umi UI is a visual extension of Umi to interact with the project. You can run
    commands to install dependencies, verify and test code, build the project, and
    add components through a graphical user interface.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Umi UI是Umi的视觉扩展，用于与项目交互。您可以通过图形用户界面运行命令来安装依赖项、验证和测试代码、构建项目以及添加组件。
- en: 'Before using Umi UI, we need to add the `@umijs/preset-ui` package. You can
    do that by running the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Umi UI之前，我们需要添加`@umijs/preset-ui`包。您可以通过运行以下命令来完成此操作：
- en: '[PRE28]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, when you start the project, you should see the following console log:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您启动项目时，您应该看到以下控制台日志：
- en: '![Figure 1.7 – Umi UI starting log'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.7 – Umi UI启动日志]'
- en: '](img/Figure_1.07_B18503.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_1.07_B18503.jpg]'
- en: Figure 1.7 – Umi UI starting log
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.7 – Umi UI启动日志
- en: Navigate to `http://localhost:8000`, and you will notice that the UmiJS logo
    appears in a bubble in the bottom-right corner. Clicking on this bubble will open
    Umi UI (you can also access Umi UI at `http://localhost:3000`).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:8000`，您会注意到UmiJS标志在右下角出现一个气泡。点击此气泡将打开Umi UI（您也可以通过`http://localhost:3000`访问Umi
    UI）。
- en: '![Figure 1.8 – Umi UI bubble in the bottom-right corner'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.8 – Umi UI右下角气泡]'
- en: '](img/Figure_1.08_B18503.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_1.08_B18503.jpg]'
- en: Figure 1.8 – Umi UI bubble in the bottom-right corner
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.8 – Umi UI右下角气泡
- en: 'Let''s see what we can do using Umi UI, beginning with **tasks**:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用Umi UI能做什么，从**任务**开始：
- en: '`dist` folder. You can also click on **ENVS** to select compilation options,
    such as CSS compression.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dist`文件夹。您也可以点击**ENVS**来选择编译选项，例如CSS压缩。'
- en: '`lint` script to use this option.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`lint`脚本来使用此选项。
- en: '**TEST**: This option will test the project. You need to write tests first.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：此选项将测试项目。您需要先编写测试。'
- en: '**INSTALL**: This option will install all project dependencies.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：此选项将安装所有项目依赖项。'
- en: 'The following screenshot shows the Umi UI Task tab:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Umi UI任务标签页：
- en: '![Figure 1.9 – Umi UI Task tab'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.9 – Umi UI Task tab]'
- en: '](img/Figure_1.09_B18503.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_1.09_B18503.jpg]'
- en: Figure 1.9 – Umi UI Task tab
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.9 – Umi UI Task tab
- en: Next, let's add Ant Design components to our project.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将Ant Design组件添加到我们的项目中。
- en: Adding Ant Design components
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Ant Design组件
- en: '**Ant Design** is a design system created by Ant Financial''s user experience
    design team to meet the high demands of enterprise application development and
    fast changes in these applications. They also created a React UI library of components
    for building interfaces.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ant Design**是由蚂蚁金服用户体验设计团队创建的设计系统，以满足企业级应用开发的高要求以及这些应用中的快速变化。他们还创建了一个用于构建界面的React
    UI组件库。'
- en: 'In the **Assets** tab, we can add Ant Design components to our pages as blocks:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在**资产**标签页中，我们可以将Ant Design组件作为块添加到我们的页面中：
- en: '![Figure 1.10 – Umi UI Preview Demo button'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.10 – Umi UI预览演示按钮]'
- en: '](img/Figure_1.10_B18503.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_1.10_B18503.jpg]'
- en: Figure 1.10 – Umi UI Preview Demo button
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.10 – Umi UI预览演示按钮
- en: Tip
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Umi UI **Assets** tab is almost entirely in Chinese at the moment. Still,
    you can always refer to the Ant Design documentation by clicking on **Preview
    Demo** and changing the website language to English.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 目前Umi UI的**资产**标签页几乎全部是中文。尽管如此，您仍然可以通过点击**预览演示**并更改网站语言为英文来参考Ant Design文档。
- en: 'Let''s add a login form to experiment with this feature:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个登录表单来实验这个功能：
- en: Navigate to `http://localhost:8000` and open the Umi UI **Assets** tab.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:8000`并打开Umi UI的**资产**标签页。
- en: Click on **Add** in the **form-login box** component.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**表单登录框**组件中点击**添加**。
- en: '![Figure 1.11 – form-login box component Add button'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.11 – 表单登录框组件添加按钮]'
- en: '](img/Figure_1.11_B18503.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_1.11_B18503.jpg]'
- en: Figure 1.11 – form-login box component Add button
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.11 – 表单登录框组件添加按钮
- en: Select the second area by clicking on **+ Add to here**.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**+ 添加到此处**选择第二个区域。
- en: '![Figure 1.12 – Selecting where to add the component'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.12 – 选择添加组件的位置]'
- en: '](img/Figure_1.12_B18503.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_1.12_B18503.jpg]'
- en: Figure 1.12 – Selecting where to add the component
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.12 – 选择添加组件的位置
- en: Now, in the `LoginForm`, make sure the package manager client selected is **yarn**,
    and click on **OK**.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`LoginForm`中，确保选中的包管理器客户端是**yarn**，然后点击**确定**。
- en: '![Figure 1.13 – Add Block options'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.13 – Add Block options]'
- en: '](img/Figure_1.13_B18503.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_1.13_B18503.jpg]'
- en: Figure 1.13 – Add Block options
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.13 – Add Block options
- en: Wait until the block is added and we are done. Umi UI will reload the page,
    and the component is already there!
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 等待块添加完成。Umi UI将重新加载页面，组件已经在那里了！
- en: 'If you want, you can add some styles to the login page, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想，您可以为登录页面添加一些样式，如下所示：
- en: 'Add this code to the `index.less` file:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此代码添加到 `index.less` 文件中：
- en: '[PRE29]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the `container` CSS class to the login component:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `container` CSS 类添加到登录组件中：
- en: '[PRE30]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result should look like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该看起来像这样：
- en: '![Figure 1.14 – Login page with login form block'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14 – 带有登录表单块的登录页面'
- en: '](img/Figure_1.14_B18503.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14 – 带有登录表单块的登录页面](img/Figure_1.14_B18503.jpg)'
- en: Figure 1.14 – Login page with login form block
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 带有登录表单块的登录页面
- en: And that's it! Now you know how to use Umi UI to interact with your project.
    If you like this option, I recommend experimenting with it by adding more components
    and styling them to get you used to it.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你知道了如何使用 Umi UI 与你的项目进行交互。如果你喜欢这个选项，我建议你通过添加更多组件并对其进行样式化来尝试它，以便熟悉它。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to configure VSCode to work with UmiJS. You
    learned how to set up a project and organize the UmiJS folder structure. You also
    learned how to use the Umi CLI to automate tasks and quickly add pages and templates
    to your project.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何配置 VSCode 以与 UmiJS 一起工作。你学习了如何设置项目和整理 UmiJS 文件夹结构。你还学习了如何使用 Umi CLI
    自动化任务并快速将页面和模板添加到你的项目中。
- en: You learned that an UmiJS project is a single-page application and about various
    configurations to define routes in your project. You learned how to access path
    parameters and query string parameters. You also learned how UmiJS could automatically
    configure routes based on the folder convention. You learned about navigation
    using umi history and the link component.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你了解到 UmiJS 项目是一个单页应用程序，以及如何在项目中定义各种配置来定义路由。你学习了如何访问路径参数和查询字符串参数。你还学习了 UmiJS
    如何根据文件夹约定自动配置路由。你学习了使用 umi history 和链接组件进行导航。
- en: Finally, you learned how to install and use Umi UI to interact with your project.
    You then learned how to execute tasks using Umi UI and add Ant Design components
    as blocks in your project.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了如何安装和使用 Umi UI 与你的项目进行交互。然后你学习了如何使用 Umi UI 执行任务，并在你的项目中添加 Ant Design
    组件作为块。
- en: In the next chapter, you will learn more about Ant Design in a Umi project and
    how to use it to develop interfaces.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习更多关于 Umi 项目中的 Ant Design 以及如何使用它来开发界面。
