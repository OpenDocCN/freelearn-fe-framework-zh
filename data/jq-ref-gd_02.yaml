- en: Chapter 2. Selector Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。选择器表达式
- en: You got me lookin' up high
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你让我仰望高处
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You got me searchin' down low
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你让我搜索到最低处
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Devo,
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —Devo，
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '"Jerkin'' Back ''n'' Forth"'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"Jerkin'' Back ''n'' Forth"'
- en: Borrowing from CSS 1-3 and basic XPath, and then adding its own, jQuery offers
    a powerful set of selector expressions for matching a set of elements in a document.
    In this chapter, we'll examine every selector expression that jQuery makes available
    in turn.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 借鉴了 CSS 1-3 和基本 XPath，然后添加了自己的内容，jQuery 提供了一组强大的选择器表达式，用于在文档中匹配一组元素。在本章中，我们将依次检查
    jQuery 提供的每个选择器表达式。
- en: CSS Selectors
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 选择器
- en: The following selectors are based on the CSS 1-3, as outlined by the W3C. For
    more information about the specifications, visit [http://www.w3.org/Style/CSS/#specs](http://www.w3.org/Style/CSS/#specs).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选择器基于 W3C 制定的 CSS 1-3。有关规范的更多信息，请访问[http://www.w3.org/Style/CSS/#specs](http://www.w3.org/Style/CSS/#specs)。
- en: 'Element: T'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素：T
- en: All elements that have a tag name of `T`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有标签名为`T`的元素。
- en: Example
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''div'')`: selects all elements with a tag name of `div` in the document'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''div'')`: 选择文档中所有标签名为 `div` 的元素'
- en: '`$(''em'')`: selects all elements with a tag name of `em` in the document'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''em'')`: 选择文档中所有标签名为 `em` 的元素'
- en: Description
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: jQuery uses JavaScript's `getElementsByTagName()` function for tag-name selectors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 使用 JavaScript 的 `getElementsByTagName()` 函数进行标签名选择器。
- en: 'ID: #myid'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ID：#myid
- en: The unique element with an ID equal to `myid`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 具有 ID 等于 `myid` 的唯一元素。
- en: Examples
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''#myid'')`: selects the unique element with `id=''myid''`, regardless of
    its tag name'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#myid'')`: 选择具有 `id=''myid''` 的唯一元素，无论其标签名是什么'
- en: '`$(''p#myid'')`: selects a single paragraph with an `id` of `''myid''`; in
    other words, the unique element `<p id=''myid''>`'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p#myid'')`: 选择具有 `''myid''` `id` 的单个段落；换句话说，选择唯一的元素 `<p id=''myid''>`'
- en: Description
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Each `id` value must be used only once within a document. If more than one element
    has been assigned the same `id`, queries that use that `id` will only select the
    first matched element in the DOM.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `id` 值在文档中只能使用一次。如果有多个元素被分配了相同的 `id`，那些使用该 `id` 的查询将只选择 DOM 中匹配的第一个元素。
- en: It might not be immediately clear why someone might want to specify a tag name
    associated with a particular `id`, since that `id` needs to be unique anyway.
    However, some situations in which parts of the DOM are user-generated may require
    a more specific expression to avoid false positives. Furthermore, when the same
    script is run on more than one page, it might be necessary to identify the `id's`
    element, since the pages could be associating the same `id` with different elements.
    For example, Page A might have `<h1 id='title'>` while Page B has `<h2 id='title'>`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可能不会立即清楚为什么有人想要指定与特定 `id` 关联的标签名，因为该 `id` 本身必须是唯一的。然而，在某些用户生成 DOM 的情况下，可能需要更具体的表达式以避免误报。此外，当相同的脚本在多个页面上运行时，可能需要识别
    `id` 的元素，因为页面可能将相同的 `id` 与不同的元素关联起来。例如，页面 A 可能具有 `<h1 id='title'>` 而页面 B 具有 `<h2
    id='title'>`。
- en: For a plain `id` selector such as example 2 above, jQuery uses the JavaScript
    function `getElementById()`. If the script's execution speed is paramount, the
    plain `id` selector should be used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的 `id` 选择器，例如上面的示例 2，jQuery 使用 JavaScript 函数 `getElementById()`。如果脚本的执行速度至关重要，则应使用简单的
    `id` 选择器。
- en: 'Class: .myclass'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类：.myclass
- en: All elements that have a class of `myclass`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有类名为 `myclass` 的元素。
- en: Examples
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''.myclass'')`: selects all elements that have a class of `myclass`'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''.myclass'')`: 选择所有具有类名为 `myclass` 的元素'
- en: '`$(''p.myclass'')`: selects all paragraphs that have a class of `myclass`'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p.myclass'')`: 选择所有具有类名为 `myclass` 的段落'
- en: '`$(''.myclass.otherclass'')`: selects all elements that have a class of `myclass`
    and `otherclass`'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''.myclass.otherclass'')`: 选择所有具有类名为 `myclass` 和 `otherclass` 的元素'
- en: Description
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: In terms of speed, example 2 is generally preferable to example 1 (if we can
    limit the query to a given tag name) because it first uses the native JavaScript
    function `getElementsByTagName()` to filter its search, and then looks for the
    class within the matched subset of DOM elements. Conversely, there is currently
    no native `getElementsByClassName()` for jQuery to use, so using a bare class
    name forces jQuery to match it against every element in the DOM. The difference
    in speed varies, however, with the complexity of the page and the number of DOM
    elements.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就速度而言，示例 2 通常比示例 1 更可取（如果我们可以限制查询到给定的标签名称），因为它首先使用本机 JavaScript 函数 `getElementsByTagName()`
    来过滤其搜索，然后在匹配的 DOM 元素子集中查找类。相反，目前没有本机的 `getElementsByClassName()` 供 jQuery 使用，因此使用裸类名会迫使
    jQuery 将其与 DOM 中的每个元素匹配。然而，速度上的差异取决于页面的复杂性和 DOM 元素的数量。
- en: As always, remember that development time is typically the most valuable resource.
    Do not focus on optimization of selector speed unless it is clear that performance
    needs to be improved.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，请记住开发时间通常是最宝贵的资源。除非明确需要改善性能，否则不要专注于选择器速度的优化。
- en: As a CSS selector, the multiple-class syntax of example 3 is supported by all
    modern web browsers, but *not* by Internet Explorer versions 6 and below, which
    makes the syntax especially handy for applying styles cross-browser through jQuery.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 CSS 选择器，现代所有网络浏览器都支持示例 3 的多类语法，但不包括 Internet Explorer 6 及以下版本，这使得该语法特别适用于通过
    jQuery 跨浏览器应用样式。
- en: 'Descendant: E F'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后代：E F
- en: All elements matched by `F` that are descendants of an element matched by `E`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由 `F` 匹配的元素，这些元素是由 `E` 匹配的元素的后代。
- en: Examples
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''#container p'')`: selects all elements matched by `<p>` that are descendants
    of an element that has an id of `container`'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#container p'')`: 选择所有由`<p>`匹配的元素，这些元素是具有`container` id 的元素的后代。'
- en: '`$(''a img'')`: selects all elements matched by `<img>` that are descendants
    of an element matched by `<a>`'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a img'')`: 选择所有由 `<a>` 匹配的元素的后代 `<img>` 元素。'
- en: Description
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'A descendant of an element could be a child, grandchild, great-grandchild,
    and so on, of that element. For example, in the following HTML, the `<img>` element
    is a descendant of the `<span>, <p>, <div id="inner">`, and `<div id="container">`
    elements:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的后代可以是该元素的子元素、孙子元素、曾孙元素等等。例如，在以下 HTML 中，`<img>` 元素是 `<span>、<p>、<div id="inner">`
    和 `<div id="container">` 元素的后代：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Child: E > F'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子级：E > F
- en: All elements matched by `F` that are children of an element matched by `E`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由 `F` 匹配的元素，这些元素是由 `E` 匹配的元素的子级。
- en: Examples
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''li > ul'')`: selects all elements matched by `<ul>` that are children
    of an element matched by `<li>`'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li > ul'')`: 选择所有由`<li>`匹配的元素的子元素`<ul>`。'
- en: '`$(''p > code'')`: selects all elements matched by `<code>` that are children
    of an element matched by `<p>`'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p > code'')`: 选择所有由`<p>`匹配的元素的子元素`<code>`。'
- en: Description
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: As a CSS selector, the child combinator is supported by all modern web browsers
    including Safari, Mozilla/Firefox, and Internet Explorer 7, but notably not by
    Internet Explorer versions 6 and below. Example 1 is a handy way to select all
    nested unordered lists (i.e. excepting the top level).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 CSS 选择器，子级组合器被所有现代网络浏览器支持，包括 Safari、Mozilla/Firefox 和 Internet Explorer 7，但显然不包括
    Internet Explorer 6 及以下版本。示例 1 是选择所有嵌套无序列表（即除了顶层之外）的方便方法。
- en: The child combinator can be thought of as a more specific form of the (single-space)
    descendant combinator in that it selects only first-level descendants. Therefore,
    in the following HTML, the `<img>` element is a child only of the `<span>` element.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 子级组合器可以被视为（单空格）后代组合器的更具体形式，因为它只选择第一级后代。因此，在以下 HTML 中，`<img>` 元素只是 `<span>` 元素的子元素。
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Adjacent Sibling: E + F'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相邻兄弟：E + F
- en: All elements matched by `F` that *immediately* follow, and have the same parent
    as, an element matched by `E`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由`F`匹配且*紧接着*跟在与`E`匹配的元素相同父级的元素。
- en: Examples
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''ul + p'')`: selects all elements by `<p>` (paragraph) that immediately
    follow a sibling element matched by `<ul>` (unordered list)'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''ul + p'')`: 选择所有由 `<ul>`（无序列表）匹配的兄弟元素后立即跟随的元素`<p>`（段落）。'
- en: '`$(''strong + em'')`: selects all elements matched by `<em>` that immediately
    follow a sibling element matched by `<strong>`'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''strong + em'')`: 选择所有由 `<strong>` 匹配的兄弟元素后立即跟随的元素`<em>`。'
- en: Description
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'One important point to consider with both the `+` combinator and the `~` combinator
    (covered next) is that they only select siblings. Consider the following HTML:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要考虑的一个重要点是`+`组合器和`~`组合器（下面介绍）只选择兄弟元素。 考虑以下 HTML：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`$(''ul + p'')` selects `<p>` because it immediately follows `<ul>` and the
    two elements share the same parent, `<div id="container">`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''ul + p'')`选择`<p>`，因为它紧接在`<ul>`后面，并且这两个元素共享相同的父级，即`<div id="container">`。'
- en: '`$(''ul + img'')` selects nothing because (among other reasons)`<ul>` is one
    level higher in the DOM tree than `<img>`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''ul + img'')`不选择任何东西，因为（除其他原因外）`<ul>`在 DOM 树中比`<img>`高一个级别。'
- en: '`$(''li + img'')` selects nothing because, even though `<li>` and `<img>` are
    on the same level in the DOM tree, they do not share the same parent.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''li + img'')`不选择任何内容，因为即使`<li>`和`<img>`在 DOM 树中处于同一级别，它们也不共享相同的父级。'
- en: 'General Sibling: E ~ F'
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般兄弟：E ~ F
- en: All elements matched by `F` that follow, and have the same parent as, an element
    matched by `E`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由`E`匹配的元素，其后跟一个由`E`匹配的元素，并且具有相同的父级。
- en: Examples
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '`$(''p ~ ul'')`: selects all elements matched by `<ul>` that follow a sibling
    element matched by `<p>`'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p ~ ul'')`：选择所有由`<p>`匹配的元素，后跟由`<ul>`匹配的兄弟元素'
- en: '`$(''code ~ code'')`: selects all elements matched by `<code>` that follow
    a sibling element matched by `<code>`'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''code ~ code'')`：选择所有由`<code>`匹配的元素，后跟由`<code>`匹配的兄弟元素'
- en: Description
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: One important point to consider with both the `+` combinator and the `~` combinator
    is that they only select *siblings*. The notable difference between the two is
    their respective reach. While the `+` combinator reaches only to the *immediately*
    following sibling element, the `~` combinator extends that reach to *all* following
    sibling elements.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要考虑的一个重要点是`+`组合器和`~`组合器只选择*兄弟元素*。 两者之间的显着区别在于它们各自的范围。 虽然`+`组合器仅达到*紧接着*的下一个兄弟元素，但`~`组合器将该范围扩展到*所有*后续兄弟元素。
- en: 'Consider the following HTML:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`$(''li.first ~ li'')` selects `<li class="second">` and `<li class="third">`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''li.first ~ li'')`选择`<li class="second">`和`<li class="third">`。'
- en: '`$(''li.first + li'')` selects `<li class="second">`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''li.first + li'')`选择`<li class="second">`。'
- en: 'Multiple Elements: E,F,G'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个元素：E,F,G
- en: Selects all elements matched by selector expressions `E, F`, or `G`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所有由选择器表达式`E, F`或`G`匹配的元素。
- en: Examples
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '`$(''code, em, strong'')`: selects all elements matched by `<code>` or `<em>`
    or `<strong>`'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''code, em, strong'')`：选择所有由`<code>`或`<em>`或`<strong>`匹配的元素'
- en: '`$(''p strong, .myclass'')`: selects all elements matched by `<strong>` that
    are descendants of an element matched by `<p>` as well as all elements that have
    a class of `myclass`'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p strong, .myclass'')`：选择所有由`<p>`匹配的元素的后代 `<strong>` 以及具有 `myclass` 类的所有元素'
- en: Description
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This comma (,) combinator is an efficient way to select disparate elements.
    An alternative to this combinator is the `.add()` method described in [Chapter
    3](ch03.html "Chapter 3. DOM Traversal Methods").
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逗号（,）组合器是选择不同元素的有效方式。 这个组合器的另一个选择是在[第三章](ch03.html "第三章. DOM 遍历方法")中描述的`.add()`方法。
- en: Nth Child (:nth-child(n))
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nth Child（:nth-child(n)）
- en: All elements that are the `nth` child of their parent.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 所有是其父级的第`n`个子元素的元素。
- en: Examples
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '`$(''li:nth-child(2)'')`: selects all elements matched by `<li>` that are the
    second child of their parent'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:nth-child(2)'')`：选择所有由`<li>`匹配的元素，它们是其父级的第二个子元素'
- en: '`$(''p:nth-child(5)'')`: selects all elements matched by `<p>` that are the
    fifth child of their parent'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p:nth-child(5)'')`：选择所有由`<p>`匹配的元素，它们是其父级的第五个子元素'
- en: Description
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Because jQuery's implementation of `:nth-child(n)` is strictly derived from
    the CSS specification, the value of `n` is *1-based*, meaning that the counting
    starts at 1\. For all other selector expressions, however, jQuery follows JavaScript's
    "0-based" counting. Therefore, given a single `<ul>` containing two `<li>s, $('li:nth-child(1)')`
    selects the first `<li>` while `$('li:nth(1)')` selects the second.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 jQuery 对 `:nth-child(n)` 的实现严格来自 CSS 规范，因此 `n` 的值是*基于 1 的*，这意味着计数从 1 开始。
    但是，对于所有其他选择器表达式，jQuery 遵循 JavaScript 的“基于 0 的”计数。 因此，鉴于一个包含两个 `<li>` 的单个 `<ul>`，`$('li:nth-child(1)')`选择第一个
    `<li>`，而`$('li:nth(1)')`选择第二个。
- en: 'Because the two look so similar, the `:nth-child(n)` pseudo-class is easily
    confused with `:nth(n)`, even though, as we have just seen, the two can result
    in dramatically different matched elements. With `:nth-child(n)`, all children
    are counted, regardless of what they are, and the specified element is selected
    only if it matches the selector attached to the pseudo-class. With `:nth(n)` only
    the selector attached to the pseudo-class is counted, not limited to children
    of any other element, and the nth one is selected. To demonstrate this distinction,
    let''s examine the results of a few selector expressions given the following HTML:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于两者看起来非常相似，`:nth-child(n)` 伪类很容易与 `:nth(n)` 混淆，尽管正如我们刚刚看到的，它们可能会导致截然不同的匹配元素。
    使用 `:nth-child(n)`，所有子元素都被计数，无论它们是什么，只有当它们与附加到伪类的选择器匹配时才会选择指定的元素。 使用 `:nth(n)`
    仅计数附加到伪类的选择器，不限于任何其他元素的子元素，并选择第 n 个元素。 为了证明这一区别，让我们来看看以下 HTML 给出的几个选择器表达式的结果：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`$(''p:nth(1)'')` selects the second `<p>`, because numbering for `:nth(n)`
    starts with `0`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''p:nth(1)'')` 选择第二个 `<p>`，因为 `:nth(n)` 的编号从 `0` 开始。'
- en: '`$(''p:nth-child(1)'')` selects nothing, because there is no `<p>` element
    that is the first child of its parent.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''p:nth-child(1)'')` 选择不到任何内容，因为没有 `<p>` 元素是其父元素的第一个子元素。'
- en: '`$(''p:nth(2)'')` selects the third `<p>`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''p:nth(2)'')` 选择第三个 `<p>`。'
- en: '`$(''p:nth-child(2)'')` selects the first `<p>`, because it is the second child
    of its parent.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''p:nth-child(2)'')` 选择第一个 `<p>`，因为它是其父元素的第二个子元素。'
- en: 'In addition to taking an integer, `:nth-child(n)` can take `even` or `odd`.
    This makes it especially useful for table-row striping solutions when more than
    one table appears in a document. Again, given the HTML snippet above:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 除了接受整数外，`:nth-child(n)` 还可以接受 `even` 或 `odd`。 当文档中出现多个表格时，这使得它特别适用于表行条纹解决方案。
    再次考虑上面的 HTML 片段：
- en: '`$(''p:nth-child(even)'')` selects the first and third `<p>`, because they
    are children 2 and 4 (both even numbers) of their parent.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''p:nth-child(even)'')` 选择第一个和第三个 `<p>`，因为它们是其父元素的第二个和第四个子元素（都是偶数）。'
- en: First Child (:first-child)
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一个子元素 (:first-child)
- en: 'All elements that are the first child of their parent:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所有是其父元素的第一个子元素的元素：
- en: Examples
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''li:first-child'')`: selects all elements matched by `<li>` that are the
    first child of their parent'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:first-child'')`: 选择所有与 `<li>` 匹配的元素，它们是其父元素的第一个子元素。'
- en: '`$(strong:first-child'')`: selects all elements matched by `<strong>` that
    are the first child of their parent'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(strong:first-child'')`: 选择所有与 `<strong>` 匹配的元素，它们是其父元素的第一个子元素。'
- en: Description
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `:first-child` pseudo-class is shorthand for `:nth-child(1)`. For more information
    on `:X-child` pseudo-classes, see the discussion for `:nth-child(n)`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`:first-child` 伪类是 `:nth-child(1)` 的简写。 关于 `:X-child` 伪类的更多信息，请参阅 `:nth-child(n)`
    的讨论。'
- en: Last Child (:last-child)
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后一个子元素 (:last-child)
- en: All elements that are the last child of their parent.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所有是其父元素的最后一个子元素的元素。
- en: Examples
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''li:last-child'')`: selects all elements matched by `<li>` that are the
    last child of their parent'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:last-child'')`: 选择所有与 `<li>` 匹配的元素，它们是其父元素的最后一个子元素。'
- en: '`$(''code:last-child'')`: selects all elements matched by `<code>` that are
    the last child of their parent'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''code:last-child'')`: 选择所有与 `<code>` 匹配的元素，它们是其父元素的最后一个子元素。'
- en: Description
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: For more information on `:X-child` pseudo-classes, see the discussion for `:nth-child(n)`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `:X-child` 伪类的更多信息，请参阅 `:nth-child(n)` 的讨论。
- en: Only Child :only-child
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只有一个子元素 :only-child
- en: All elements that are the only child of their parent.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所有只有一个子元素的元素。
- en: Examples
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$('':only-child'')`: selects all elements that are the only child of their
    parent'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$('':only-child'')`: 选择所有只有一个子元素的元素。'
- en: '`$(''code:only-child'')`: selects all elements matched by `<code>` that are
    the only child of their parent'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''code:only-child'')`: 选择所有只有一个子元素的 `<code>` 元素。'
- en: Not :not(s)
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不是 :not(s)
- en: All elements that do not match selector `s`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 所有不匹配选择器 `s` 的元素。
- en: Examples
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''li:not(.myclass)'')`: selects all elements matched by `<li>` that do not
    have `class="myclass"`'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:not(.myclass)'')`: 选择所有与 `<li>` 匹配的元素，它们没有 `class="myclass"`。'
- en: '`$(''li:not(:last-child)'')`: selects all elements matched by `<li>` that are
    not the last child of their parent element'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:not(:last-child)'')`: 选择所有与 `<li>` 匹配的元素，它们不是其父元素的最后一个子元素。'
- en: Empty :empty
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空 :empty
- en: All elements that have no children (including text nodes).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所有没有子元素（包括文本节点）的元素。
- en: Examples
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$('':empty'')`: selects all elements that have no children'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$('':empty'')`: 选择所有没有子元素的元素。'
- en: '`$(''p:empty'')`: selects all elements matched by `<p>` that have no children'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p:empty'')`: 选择所有与 `<p>` 匹配的元素，它们没有子元素。'
- en: Description
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The W3C recommends that the `<p>` element have at least one child node, even
    if that child is merely text (see [http://www.w3.org/TR/html401/struct/text.html#edef-P](http://www.w3.org/TR/html401/struct/text.html#edef-P)).
    Some other elements, on the other hand, are empty (i.e. have no children) by definition:`<input>,
    <img>, <br>`, and `<hr>`, for example.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: W3C建议`<p>`元素至少有一个子节点，即使该子节点只是文本（请参阅[http://www.w3.org/TR/html401/struct/text.html#edef-P](http://www.w3.org/TR/html401/struct/text.html#edef-P)）。另一方面，一些其他元素是空的（即没有子元素）：例如`<input>,
    <img>, <br>`和`<hr>`。
- en: One important thing to note with `:empty` (and `:parent`) is that *child elements
    include text nodes*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`:empty`（和`:parent`）时的一件重要事情是*子元素包括文本节点*。
- en: 'Universal: *'
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用：*
- en: All elements.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所有元素。
- en: Examples
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '`$(''*'')`: selects all elements in the document'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''*'')`：选择文档中的所有元素'
- en: '`$(''p > *'')`: selects all elements that are children of a paragraph element'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p > *'')`：选择所有作为段落元素的子元素的元素'
- en: Description
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The `*` selector is especially useful when combined with other elements to form
    a more specific selector expression.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当与其他元素结合形成更具体的选择器表达式时，`*`选择器尤其有用。
- en: XPath Selectors
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XPath选择器
- en: Modeled after a file system's directory-tree navigation, XPath selector expressions
    provide an alternative way to access DOM elements. Although XPath was developed
    as a selector language for XML documents, jQuery makes a basic subset of its selectors
    available for use in XML and HTML documents alike.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 仿照文件系统的目录树导航，XPath选择器表达式提供了一种替代方式来访问DOM元素。尽管XPath是为XML文档开发的选择器语言，但jQuery提供了一组基本的选择器，可用于XML和HTML文档。
- en: 'For more information about XPath 1.0, visit the specification at the W3C: [http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有关XPath 1.0的更多信息，请访问W3C的规范：[http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath)。
- en: 'Descendant: E//F'
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后代：E//F
- en: All elements matched by `F` that are descendants of an element matched by `E`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由`E`匹配的元素的后代，这些元素是由`F`匹配的元素的后代。
- en: Examples
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '`$(''div//code'')`: selects all elements matched by `<code>` that are descendants
    of an element matched by `<div>`'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''div//code'')`：选择所有由`<div>`匹配的元素的后代 `<code>`'
- en: '`$(''//p//a'')`: selects all elements matched by `<a>` that are descendants
    of an element matched by `<p>`'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''//p//a'')`：选择所有由`<p>`匹配的元素的后代 `<a>`'
- en: Description
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This XPath descendant selector works the same as the corresponding CSS descendant
    selector `($('E F'))` except that the XPath version can specify that it is to
    start at the document root, which could be useful when querying an XML document.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此XPath后代选择器与相应的CSS后代选择器`($('E F'))`的工作方式相同，只是XPath版本可以指定从文档根开始，这在查询XML文档时可能很有用。
- en: In example 2, the initial `//p` tells jQuery to start at the document root and
    match all `<p>` elements that are descendants of it. Keep in mind that if this
    selector expression follows a DOM traversal method such as `.find()`, this syntax
    will not select anything because the document root cannot be a child of anything
    else. Since jQuery allows free mixing of CSS and XPath selectors, the initial
    `//` is redundant and, therefore, can be omitted.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例2中，初始的`//p`告诉jQuery从文档根开始匹配所有`<p>`元素及其后代。请注意，如果此选择器表达式跟随DOM遍历方法（如`.find()`），则此语法将不会选择任何内容，因为文档根不能是任何其他元素的子元素。由于jQuery允许自由混合CSS和XPath选择器，因此初始的`//`是多余的，因此可以省略。
- en: 'Child: E/F'
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子元素：E/F
- en: All elements matched by `F` that are children of an element matched by `E`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由`E`匹配的元素的子元素，这些元素是由`F`匹配的元素的子元素。
- en: Examples
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '`$(''div/p'')`: selects all elements matched by `<p>` that are children of
    an element matched by `<div>`'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''div/p'')`：选择所有由`<div>`匹配的元素的子元素 `<p>`'
- en: '`$(''p/a'')`: selects all elements matched by `<a>` that are children of an
    element matched by `<p>`'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p/a'')`：选择所有由`<p>`匹配的元素的子元素 `<a>`'
- en: '`$(''/docroot/el'')`: selects all elements matched by `<el>` that are children
    of an element matched by `<docroot>`, as long as `<docroot>` is actually at the
    document root'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''/docroot/el'')`：选择所有由`<docroot>`匹配的元素的子元素 `<el>`，只要`<docroot>`实际上位于文档根'
- en: Description
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The XPath child selector, `$('E/F')`, is an alternative to the CSS child selector,
    `$('E > F')`. If the selector expression begins with a single slash, as is the
    case in example 3, the selector immediately following the slash must be at the
    document root. Beginning with a single slash is not recommended in HTML documents,
    since it always must be followed with `body` for the expression to match any elements
    on the page. For XML documents, however, it might be useful to identify a particular
    element or attribute at the document root.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 子选择器 `$('E/F')` 是 CSS 子选择器 `$('E > F')` 的替代方案。如果选择器表达式以单斜杠开头，例如示例 3 中的情况，则紧随斜杠之后的选择器必须位于文档根目录。在
    HTML 文档中不推荐以单斜杠开头，因为它始终必须跟随 `body` 才能匹配页面上的任何元素。然而，在 XML 文档中，识别文档根中的特定元素或属性可能是有用的。
- en: 'Parent: E/..'
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 父元素：E/..
- en: All elements that are parents of an element matched by `E`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与 `E` 匹配的元素的父元素。
- en: Examples
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''.myclass/..'')`: selects the parent element of all elements that have
    a class of `myclass`'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''.myclass/..'')`: 选择所有具有类名为 `myclass` 的元素的父元素。'
- en: '`$(''.myclass/../'')`: selects all elements that are children of the parent
    of an element that has a class of `myclass`. In other words, it selects all elements
    that have a class of `myclass`, along with their sibling elements'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''.myclass/../'')`: 选择所有是具有类名为 `myclass` 的元素的父元素的子元素。换句话说，它选择所有具有类名为 `myclass`
    的元素，以及它们的兄弟元素。'
- en: '`$(''.myclass/../p'')`: selects all elements matched by `<p>` that are children
    of the element that has a class of `myclass`'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''.myclass/../p'')`: 选择所有匹配 `<p>` 的元素，这些元素是具有类名为 `myclass` 的元素的父元素的子元素。'
- en: Description
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Let''s look at some sample HTML to help understand this one:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些示例 HTML 来帮助理解这个选择器：
- en: '[PRE5]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`$(''span.myclass/..'')` selects `<p id="secondp">`, because it is the parent
    of `<span class="myclass">`.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''span.myclass/..'')` 选择 `<p id="secondp">`，因为它是 `<span class="myclass">`
    的父元素。'
- en: '`$(''#firstp/../'')` selects `<p id="firstp">, <div id="subdiv">`, and `<p
    id="secondp">`, because the selector (a) starts with `<p id="firstp">`, (b) traverses
    up one level in the DOM tree (to the first top-level `<div>` element), and (c)
    selects all children of that `<div>`.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''#firstp/../'')` 选择 `<p id="firstp">, <div id="subdiv">` 和 `<p id="secondp">`，因为选择器
    (a) 以 `<p id="firstp">` 开头， (b) 在 DOM 树中向上遍历一级（到第一个顶级 `<div>` 元素），以及 (c) 选择该 `<div>`
    的所有子元素。'
- en: '`$(''.myclass/../../p'')` selects `<p id="firstp">` and `<p id="secondp">`,
    because the selector (a) starts with `<span class="myclass">`, (b) traverses up
    two levels in the DOM tree (to the first top-level `<div>` element), and (c) selects
    all `<p>` elements that are children of that `<div>`.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''.myclass/../../p'')` 选择 `<p id="firstp">` 和 `<p id="secondp">`，因为选择器 (a)
    以 `<span class="myclass">` 开头， (b) 在 DOM 树中向上遍历两级（到第一个顶级 `<div>` 元素），以及 (c) 选择所有
    `<p>` 元素，这些元素是该 `<div>` 的子元素。'
- en: 'Contains: [F]'
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '包含: [F]'
- en: All elements that contain an element matched by `F`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 包含由 `F` 匹配的所有元素。
- en: Examples
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''div[p]'')`: selects all elements matched by `<div>` that contain an element
    matched by `<p>`'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''div[p]'')`: 选择所有匹配 `<div>` 的元素，这些元素包含匹配 `<p>` 的元素。'
- en: '`$(''p[.myclass]'')`: selects all elements matched by `<p>` that contain an
    element with a class of `myclass`'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p[.myclass]'')`: 选择所有匹配 `<p>` 的元素，其中包含类名为 `myclass` 的元素。'
- en: Description
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This selector is like the reverse of the descendant selector (either `E//F`
    or `E F`), in that it selects all elements that have a descendant element matched
    by `F` instead of all elements matched by `F` that are descendants of some other
    element.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器类似于后代选择器的反向（`E//F` 或 `E F`），它选择所有具有匹配 `F` 的后代元素，而不是所有由其他元素的后代匹配 `F` 的元素。
- en: The XPath *contains* selector is not to be confused with the CSS *attribute*
    selector, which shares this syntax. jQuery uses the XPath-style expression for
    attribute selectors too, as discussed in the *Attribute Selectors* section below.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 的 *包含* 选择器不应与 CSS 的 *属性* 选择器混淆，后者共享此语法。jQuery 也使用 XPath 风格的表达式来表示属性选择器，如下文
    *属性选择器* 部分所述。
- en: Attribute Selectors
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性选择器
- en: Because jQuery supports both CSS and XPath-style expressions and the two conflict
    in their use of square brackets, jQuery adopts the XPath notation for attribute
    selectors, beginning them with the `@` symbol.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 jQuery 支持 CSS 和 XPath 样式的表达式，并且两者在使用方括号时冲突，jQuery 采用 XPath 符号来表示属性选择器，以 `@`
    符号开头。
- en: When using any of the following attribute selectors, we should account for attributes
    that have multiple, space-separated values. Since these selectors see attribute
    values as a single string, this selector, for example, `$('[a@rel=nofollow]')`,
    will select `<a rel="nofollow" href="example.html">Some text</a>` but *not* `<a
    rel="nofollow self" href="example.html">Some text</a>`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下任何属性选择器时，我们应考虑具有多个、以空格分隔的值的属性。由于这些选择器将属性值视为单个字符串，因此，例如此选择器 `$('[a@rel=nofollow]')`
    将选择 `<a rel="nofollow" href="example.html">Some text</a>`，但 *不会* 选择 `<a rel="nofollow
    self" href="example.html">Some text</a>`。
- en: 'Attribute values in selector expressions can be written as bare words or surrounded
    by quotation marks. Therefore, the following variations are equally correct:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器表达式中的属性值可以写成裸字或用引号括起来。因此，以下变体同样正确：
- en: 'bare words: `$(''[a@rel=nofollow self]'')`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 裸字：`$('[a@rel=nofollow self]')`
- en: 'double quotes inside single quotes: `$(''[a@rel="nofollow self"]'')`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单引号内部的双引号：`$('[a@rel="nofollow self"]')`
- en: 'single quotes inside double quotes: `$("[a@rel=''nofollow self'']")`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双引号内部的单引号：`$("[a@rel='nofollow self']")`
- en: 'escaped single quotes inside single quotes: `$(''[a@rel=\''nofollow self\'']'')`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单引号内部转义单引号：`$('[a@rel=\'nofollow self\']')`
- en: 'escaped double quotes inside double quotes: `$("[a@rel=\"nofollow self\"]")`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在双引号内部转义双引号：`$("[a@rel=\"nofollow self\"]")`
- en: The variation we choose is generally a matter of style or convenience.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的变体通常是风格或便利性的问题。
- en: 'Has Attribute: [@foo]'
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有属性：[@foo]
- en: All elements that have the `foo` attribute.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有 `foo` 属性的元素。
- en: Examples
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''a[@rel]'')`: selects all elements matched by `<a>` that have a `rel` attribute'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a[@rel]'')`：选择所有具有 `rel` 属性的 `<a>` 元素'
- en: '`$(''p[@class]'')`: selects all elements matched by `<p>` that have a `class`
    attribute'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p[@class]'')`：选择所有具有 `class` 属性的 `<p>` 元素'
- en: Description
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: For more information on this attribute selector, see the introduction to *Attribute
    Selectors* above.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此属性选择器的更多信息，请参见上面的 *属性选择器* 介绍。
- en: 'Attribute Value Equals: [@foo=bar]'
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性值等于：[@foo=bar]
- en: Elements that have the `foo` attribute with a value exactly equal to `bar`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 具有值完全等于 `bar` 的 `foo` 属性的元素。
- en: Examples
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''a[@rel=nofollow]'')`: selects all elements matched by `<a>` that have
    a `rel` value exactly equal to `nofollow`'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a[@rel=nofollow]'')`：选择所有具有 `rel` 值完全等于 `nofollow` 的 `<a>` 元素'
- en: '`$(''input[@name=myname]'')`: selects all elements matched by `<input>` that
    have a `name` value exactly equal to `myname`'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''input[@name=myname]'')`：选择所有具有 `name` 值完全等于 `myname` 的 `<input>` 元素'
- en: Description
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: For more information on this attribute selector, see the introduction to *Attribute
    Selectors* above.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此属性选择器的更多信息，请参见上面的 *属性选择器* 介绍。
- en: 'Attribute Value Does Not Equal: [@foo!=bar]'
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性值不等于：[@foo!=bar]
- en: All elements that do *not* have the `foo` attribute with a value exactly equal
    to `bar`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 所有不具有值完全等于 `bar` 的 `foo` 属性的元素。
- en: Examples
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''a[@rel!=nofollow]'')`: selects all elements matched by `<a>` that do not
    have a `rel` attribute with a value exactly equal to `nofollow`'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a[@rel!=nofollow]'')`：选择所有没有 `rel` 属性值完全等于 `nofollow` 的 `<a>` 元素'
- en: '`$(''input[@name!=myname]'')`: selects all elements matched by `<input>` that
    do not have a `name` attribute with a value exactly equal to `myname`'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''input[@name!=myname]'')`：选择所有不具有 `name` 值完全等于 `myname` 的 `<input>` 元素'
- en: Description
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Since these selectors see attribute values as a single string, `$('[a@rel!=nofollow]')`
    we *will* select `<a rel="nofollow self" href="example.htm">Some text</a>`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些选择器将属性值视为单个字符串，因此 `$('[a@rel!=nofollow]')` 我们 *将* 选择 `<a rel="nofollow self"
    href="example.htm">Some text</a>`。
- en: 'If we need to select only `<a>` elements that do not have `nofollow` anywhere
    within their `rel` attribute, we can use the following selector expression instead:
    `$(''a:not([@rel*=nofollow])'')`.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要仅选择 `<a>` 元素，并且它们的 `rel` 属性中没有任何地方包含 `nofollow`，我们可以使用以下选择器表达式代替：`$('a:not([@rel*=nofollow])')`。
- en: 'Attribute Value Begins: [@foo^=bar]'
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性值开头：[@foo^=bar]
- en: All elements that have the `foo` attribute with a value *beginning* exactly
    with the string `bar`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有值 *以* 字符串 `bar` 开头的 `foo` 属性的元素。
- en: Examples
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''a[@rel^=no]'')`: selects all elements matched by `<a>` that have a `rel`
    attribute value beginning with `no`'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a[@rel^=no]'')`：选择所有具有 `rel` 属性值以 `no` 开头的 `<a>` 元素'
- en: '`$(''input[@name^=my]'')`: selects all elements matched by `<input>` that have
    a `name` value beginning with `my`'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''input[@name^=my]'')`：选择所有具有 `name` 值以 `my` 开头的 `<input>` 元素'
- en: Description
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Since these selectors see attribute values as a single string, `$('[a@rel^=no]')`
    will select `<a rel="nofollow self" href="example.htm">Some text</a>` but *not*
    `<a rel="self nofollow" href="example.htm">Some text</a>`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些选择器将属性值视为单个字符串，`$('[a@rel^=no]')` 将选择 `<a rel="nofollow self" href="example.htm">Some
    text</a>`，但不选择 `<a rel="self nofollow" href="example.htm">Some text</a>`。
- en: 'Attribute Value Ends: [@foo$=bar]'
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '属性值结尾: [@foo$=bar]'
- en: All elements that have the `foo` attribute with a value ending exactly with
    the string `bar`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有以字符串 `bar` 结尾的值的 `foo` 属性的元素。
- en: Examples
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''a[@href$=index.htm]'')`: selects all elements matched by `<a>` that have
    an `href` value ending with `index.htm`'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a[@href$=index.htm]'')`：选择所有 `href` 值以 `index.htm` 结尾的 `<a>` 元素'
- en: '`$(''a[@rel$=self]'')`: selects all elements matched by `<p>` that have a `class`
    value ending with `bar`'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a[@rel$=self]'')`：选择所有 `class` 值以 `bar` 结尾的 `<p>` 元素'
- en: Description
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Since these selectors see attribute values as a single string, `$('[a@rel$=self]')`
    will select `<a rel="nofollow self" href="example.htm">Some text</a>` but *not*
    `<a rel="self nofollow" href="example.htm">Some text</a>`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些选择器将属性值视为单个字符串，`$('[a@rel$=self]')` 将选择 `<a rel="nofollow self" href="example.htm">Some
    text</a>`，但不选择 `<a rel="self nofollow" href="example.htm">Some text</a>`。
- en: 'Attribute Value Contains: [@foo*=bar]'
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '属性值包含: [@foo*=bar]'
- en: All elements that have the `foo` attribute with a value *containing* the substring
    `bar`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有包含子字符串 `bar` 的 `foo` 属性的元素。
- en: Examples
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''p[@class*=bar]'')`: selects all elements matched by `<p>` that have a
    `class` value containing `bar`'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p[@class*=bar]'')`：选择所有 `class` 值包含 `bar` 的 `<p>` 元素'
- en: '`$(''a[@href*=example.com]'')`: selects all elements matched by `<a>` that
    have an `href` value containing `example.com`'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a[@href*=example.com]'')`：选择所有 `href` 值包含 `example.com` 的 `<a>` 元素'
- en: Description
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This is the most generous selector of the jQuery attribute selectors that match
    against a value. It will select an element if the selector's string appears anywhere
    within the element's attribute value. Therefore, `$('p[@class*=my]')` will select
    `<p class="yourclass myclass">Some text</p>, <p class="myclass yourclass">Some
    text</p>`, *and* `<p class="thisismyclass">Some text</p>`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 jQuery 属性选择器中最宽松的选择器。如果选择器的字符串出现在元素的属性值的任何位置，它都将选择该元素。因此，`$('p[@class*=my]')`
    将选择 `<p class="yourclass myclass">Some text</p>, <p class="myclass yourclass">Some
    text</p>` 和 `<p class="thisismyclass">Some text</p>`。
- en: Form Selectors
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单选择器
- en: The following selectors can be used to access form elements in a variety of
    states. When using any of the form selectors other than `:input`, providing a
    tag name as well is recommended (for example, `input:text`, rather than `:text`).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选择器可用于访问各种状态下的表单元素。在使用除 `:input` 外的任何表单选择器时，建议同时提供标签名（例如，使用 `input:text` 而不是
    `:text`）。
- en: All form elements (`<input>` (all types), `<select>, <textarea>, <button>`)
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有表单元素（`<input>`（所有类型），`<select>, <textarea>, <button>`）
- en: All text fields (`<input type="text">`)
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有文本字段（`<input type="text">`)
- en: All password fields (`<input type="password">`)
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有密码字段（`<input type="password">`)
- en: All radio fields (`<input type="radio">`)
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有单选按钮字段（`<input type="radio">`)
- en: All checkbox fields (`<input type="checkbox">`)
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有复选框字段（`<input type="checkbox">`)
- en: All submit inputs and button elements (`<input type="submit">, <button>`)
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有提交输入和按钮元素（`<input type="submit">, <button>`）
- en: All image inputs (`<input type="image">`)
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有图像输入（`<input type="image">）
- en: All reset buttons (`<input type="reset">`)
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有重置按钮（`<input type="reset">`)
- en: All button elements and input elements with a type of `button` (`<button>,<input
    type="button">`)
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有按钮元素和类型为 `button` 的输入元素（`<button>,<input type="button">`）
- en: All user interface elements that are enabled
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有已启用的用户界面元素
- en: All user interface elements that are disabled
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有已禁用的用户界面元素
- en: All user interface element—checkboxes and radio buttons—that are checked
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有已选中的用户界面元素—复选框和单选按钮
- en: All elements, including `<input type="hidden" />`, that are hidden
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有元素，包括 `<input type="hidden" />`，都处于隐藏状态
- en: For more information, see the discussion on `:hidden` in the *Custom Selectors*
    section below.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅下文的 *自定义选择器* 部分中关于 `:hidden` 的讨论。
- en: Custom Selectors
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义选择器
- en: The following selectors were added to the jQuery library as an attempt to address
    common DOM traversal needs not met by either CSS or basic XPath.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选择器被添加到 jQuery 库中，以满足 CSS 或基本 XPath 无法满足的常见 DOM 遍历需求。
- en: Even Element (:even) Odd Element (:odd)
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 偶数元素 (:even) 奇数元素 (:odd)
- en: 'All elements with an even index:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有偶数索引的元素：
- en: '`:even`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`:even`'
- en: 'All elements with an odd index:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有奇数索引的元素：
- en: '`:odd`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`:odd`'
- en: Examples
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''li:even'')`: selects all elements matched by `<li>` that have an even
    `index` value'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:even'')`: 选择所有 `<li>` 元素匹配的元素，其 `index` 值为偶数'
- en: '`$(''tr:odd'')`: selects all elements matched by `<tr>` that have an odd `index`
    value'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''tr:odd'')`: 选择所有被 `<tr>` 匹配的元素，其 `index` 值为奇数'
- en: Description
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Because the custom `:even` and `:odd` pseudo-classes match elements based on
    their `index`, they use JavaScript's native zero-based numbering.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 因为自定义的 `:even` 和 `:odd` 伪类基于它们的 `index` 匹配元素，它们使用 JavaScript 的本机基于零的编号。
- en: Somewhat counter-intuitively, therefore, `:even` selects the first, third, fifth
    (and so on) elements while `:odd` selects the second, fourth, sixth (and so on)
    elements.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有些令人感到反直觉，因此，`:even` 选择第一、第三、第五（等等）个元素，而 `:odd` 选择第二、第四、第六（等等）个元素。
- en: The one exception to this rule is the `:nth-child(n)` selector, which is one-based.
    So, `:nth-child(even)` selects the second, fourth, sixth (and so on) child element
    of its parent. Also worth noting is the lack of a colon preceding `even` or `odd`
    when used with `:nth-child()`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这条规则的唯一例外是 `:nth-child(n)` 选择器，它是基于一的。所以，`:nth-child(even)` 选择其父级的第二、第四、第六（等等）个子元素。还值得注意的是，在与
    `:nth-child()` 一起使用 `even` 或 `odd` 时，没有冒号前缀。
- en: Nth Element (:eq(n), :nth(n))
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 N 个元素（:eq(n)，:nth(n)）
- en: The element with index value equal to n.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 具有索引值等于 n 的元素。
- en: Examples
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''li:eq(2)'')`: selects the third `<li>` element'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:eq(2)'')`: 选择第三个 `<li>` 元素'
- en: '`$(''p:nth(1)'')`: selects the second `<p>` element'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p:nth(1)'')`: 选择第二个 `<p>` 元素'
- en: Description
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Because the JavaScript `index` is zero-based, `:eq(0)` and `:nth(0)` select
    the first matched element, `:eq(1)` and `:nth(1)` select the second, and so on.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 的 `index` 是基于零的，`:eq(0)` 和 `:nth(0)` 选择第一个匹配的元素，`:eq(1)` 和 `:nth(1)`
    选择第二个，依此类推。
- en: Greater Than :gt(n)
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大于 :gt(n)
- en: All elements with index greater than N.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 所有索引大于 N 的元素。
- en: Examples
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''li:gt(1)'')`: selects all elements matched by `<li>` after the second
    one'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:gt(1)'')`: 选择所有被 `<li>` 元素匹配的元素，第二个之后的'
- en: '`$(''a:gt(2)'')`: selects all elements matched by `<a>` after the third one'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a:gt(2)'')`: 选择所有被 `<a>` 匹配的元素，第三个之后的'
- en: Description
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'Because the JavaScript `index` is zero-based, `:gt(1)` selects all matched
    elements beginning with the third one, `:gt(2)` selects all matched elements beginning
    with the fourth, and so on. Consider the following HTML:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 的 `index` 是基于零的，`:gt(1)` 选择从第三个开始的所有匹配的元素，`:gt(2)` 选择从第四个开始的所有匹配的元素，依此类推。考虑以下
    HTML：
- en: '[PRE6]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`$(''li:gt(1)'')` selects `<li id="third">` and `<li id="fourth">`, because
    their `indexes` are greater than `1`.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''li:gt(1)'')` 选择 `<li id="third">` 和 `<li id="fourth">`，因为它们的 `indexes`
    大于 `1`。'
- en: '`$(li:gt(2)'')` selects `<li id="fourth">`, because its `index` is greater
    than `2`.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(li:gt(2)'')` 选择 `<li id="fourth">`，因为它的 `index` 大于 `2`。'
- en: 'Less Than : lt(n)'
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '小于 : lt(n)'
- en: All elements with index less than `N`.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 所有索引小于 `N` 的元素。
- en: Examples
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''li:lt(2)'')`: selects all elements matched by `<li>` element before the
    third one; in other words, the first two `<li>` elements'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:lt(2)'')`: 选择所有被 `<li>` 元素匹配的元素，第三个之前的；换句话说，前两个 `<li>` 元素'
- en: '`$(''p:lt(3)'')`: selects all elements matched by `<p>` elements before the
    fourth one; in other words the first three `<p>` elements'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p:lt(3)'')`: 选择所有被 `<p>` 元素匹配的元素，第四个之前的；换句话说，前三个 `<p>` 元素'
- en: Description
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: Because the JavaScript `index` is zero-based, `:lt(2)` selects the first two
    matched elements, or all matched element before the third one; `:lt(3)` selects
    the first three matched elements, or all matched elements before the fourth; and
    so on.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 的 `index` 是基于零的，`:lt(2)` 选择前两个匹配的元素，或者选择第三个之前的所有匹配的元素；`:lt(3)`
    选择前三个匹配的元素，或者选择第四个之前的所有匹配的元素；依此类推。
- en: First :first
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一个 :first
- en: The first instance of an element.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的第一个实例。
- en: Examples
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''li:first'')`: selects the first `<li>` element'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:first'')`: 选择第一个 `<li>` 元素'
- en: '`$(''a:first'')`: selects the first `<a>` element'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''a:first'')`: 选择第一个 `<a>` 元素'
- en: Discussion
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: The `:first` pseudo-class is shorthand for `:eq(0)`. It could also be written
    as `:lt(1)`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`:first` 伪类是 `:eq(0)` 的简写。它也可以写为 `:lt(1)`。'
- en: Last :last
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后 :last
- en: The last instance of an element.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的最后一个实例。
- en: Examples
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 举例
- en: '`$(''li:last)`: selects the last `<li>` element'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:last)`: 选择最后一个 `<li>` 元素'
- en: '`$(''#container .myclass:last)`: selects the last element that has a `class`
    of `myclass` and is a descendant of the element with an `id` of `container`'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#container .myclass:last)`: 选择具有 `class` 为 `myclass` 的最后一个元素，并且是具有 `id`
    为 `container` 的元素的后代'
- en: Description
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: While `:first` has equivalent selectors (nth(0) and `eq(0))` the `:last` pseudo-class
    is unique in its ability to select only the last element in the set of matched
    elements.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`:first`具有等效选择器（`nth（0）和eq（0）`），但`:last`伪类在仅选择匹配元素集中的最后一个元素方面是独特的。
- en: Parent :parent
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 父元素：:parent
- en: All elements that are the parent of another element, including text.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 所有是另一个元素的父元素的元素，包括文本。
- en: Examples
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$('':parent'')`: selects all elements that are the parent of another element,
    including text'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$('':parent'')`: 选择所有是另一个元素的父元素的元素，包括文本'
- en: '`$(td:parent'')`: selects all elements matched by `<td>` that are the parent
    of another element, including text'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(td:parent'')`: 选择所有是另一个元素的父元素的`<td>`匹配的元素，包括文本'
- en: Description
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: The W3C recommends that the `<p>` element have at least one child node, even
    if that child is merely text (see [http://www.w3.org/TR/html401/struct/text.html#edef
    P](http://www.w3.org/TR/html401/struct/text.html#edef)). For example, some elements,
    on the other hand, are empty (i.e. have no children) by definition:`<input>, <img>,
    <br>`, and `<hr>`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: W3C建议`<p>`元素至少有一个子节点，即使该子节点只是文本（参见[http://www.w3.org/TR/html401/struct/text.html#edef
    P](http://www.w3.org/TR/html401/struct/text.html#edef)）。例如，另一方面，某些元素是空的（即没有子元素）：`<input>,
    <img>, <br>`和`<hr>`。
- en: One important thing to note with `:parent` (and `:empty)` is that child elements
    include text nodes.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`:parent`（和`:empty`），一个重要的要注意的是子元素包括文本节点。
- en: Contains :contains(text)
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含：:contains(text)
- en: All elements that contain the specified text.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 所有包含指定文本的元素。
- en: Examples
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''p:contains(nothing special)'')`: selects all elements matched by `<p>`
    that contain the text `nothing special`'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''p:contains(nothing special)'')`: 选择所有包含文本`nothing special`的`<p>`匹配的元素'
- en: '`$(''li:contains(second)'')`: selects all elements matched by `<li>` that contain
    the text `second`'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:contains(second)'')`: 选择所有包含文本`second`的`<li>`匹配的元素'
- en: Description
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'The matching text can appear in the selector element or in any of that element''s
    descendants. Therefore, example 1 would still select the following paragraph:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配的文本可以出现在选择器元素中或该元素的任何后裔中。因此，示例1仍将选择以下段落：
- en: '[PRE7]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As with attribute value selectors, text inside the parentheses of `:contains()`
    can be written as bare words or surrounded by quotation marks. Also, the text
    must have matching case to be selected.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 与属性值选择器一样，`:contains()`括号内的文本可以写为裸体词或用引号括起来。另外，要被选择，文本必须匹配大小写。
- en: Visible :visible
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可见：:visible
- en: All elements that are visible.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可见的元素。
- en: Examples
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''li:visible'')`: selects all elements matched by `<li>` that are visible'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:visible'')`: 选择所有匹配`<li>`的可见元素'
- en: '`$(''input:visible'')`: selects all elements matched by `<input>` that are
    visible'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''input:visible'')`: 选择所有匹配`<input>`的可见元素'
- en: Discussion
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论
- en: The `:visible` selector includes items that have a display of `block` or `inline`
    (or any other value other than `none)` and a visibility of `visible`. Form elements
    that have `type="hidden"` are excluded.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`:visible`选择器包括具有`block`或`inline`（或任何其他值而不是`none`）的显示和`visible`的可见性的元素。排除具有`type="hidden"`的表单元素。'
- en: It's important to note that elements will be selected by the `:visible` pseudo-class
    even if their parent (or other ancestor) element has a display of `none`, as long
    as they themselves have a display of `block` or `inline` (or any other value other
    than `none)`. Therefore, it's possible for an element to be hidden from view but
    still be selected by `:visible`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，即使元素的父元素（或其他祖先）的显示是`none`，只要它们自身的显示是`block`或`inline`（或任何其他值而不是`none`），它们将被`:visible`伪类选择。因此，元素可能被隐藏但仍然被`:visible`选择。
- en: 'Consider the following HTML:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下HTML：
- en: '[PRE8]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Although `<div id="child">` is not visible on the web page because of its parent
    `<div>'s` display property, it is still selected by `$('div:visible')`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管由于其父元素的显示属性，`<div id="child">`在网页上看不见，但它仍然被`$('div:visible')`选择。
- en: Hidden :hidden
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐藏：:hidden
- en: All elements that are hidden
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 所有隐藏的元素
- en: Examples
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '`$(''li:hidden)`: selects all elements matched by `<li>` that are hidden'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''li:hidden)`: 选择所有匹配`<li>`的隐藏元素'
- en: '`$(''input:hidden)`: selects all elements matched by `<input>` that are hidden'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''input:hidden)`: 选择所有匹配`<input>`的隐藏元素'
- en: Description
  id: totrans-330
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 描述
- en: The `:hidden` selector includes elements that have a CSS declaration of `display:none`
    or `visibility:hidden`, as well as form elements with `type="hidden"`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`:hidden`选择器包括具有`display:none`或`visibility:hidden`的CSS声明的元素，以及带有`type="hidden"`的表单元素。'
- en: If an element is hidden from view only because its parent (or other ancestor)
    element has a display of `none` or visibility of `hidden`, it will not be selected
    by `:hidden` when its own `display` property isn't `none` and its `visibility`
    property isn't `hidden`.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个元素之所以从视图中隐藏，是因为其父级（或其他祖先）元素具有 `none` 的显示或 `hidden` 的可见性，当其自身的 `display`
    属性不是 `none` 且其 `visibility` 属性不是 `hidden` 时，它将不会被 `:hidden` 选择。
- en: 'Consider the following HTML:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 HTML：
- en: '[PRE9]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Although the child `<div>` is not visible on the web page because of its parent
    `<div>`'s display property, `$('div:hidden')` only selects `<div id="parent">`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管子级 `<div>` 在网页上不可见是因为其父级 `<div>` 的显示属性，`$('div:hidden')` 只选择 `<div id="parent">`。
