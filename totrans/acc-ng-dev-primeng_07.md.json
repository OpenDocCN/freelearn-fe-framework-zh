["```js\nng update @angular/cli @angular/core\n```", "```js\nng update @angular/cli^9 @angular/core^9\n```", "```js\nng update @angular/cli^9 @angular/core^9 --create-commits\n```", "```js\nng update <package-name>[@<package-version>] --migrate-only <migration-name>\n```", "```js\nng update @angular/cli@^12 --migrate-only production-by-default\n```", "```js\n{\n  path: 'dashboard',\n  loadChildren: './dashboard.module#DashboardModule',\n},\n```", "```js\n{\n  path: 'dashboard',\n  loadChildren: () => import('./dashboard.module')\n    .then(m => m.DashboardModule),\n},\n```", "```js\nimport { Component, ElementRef, ViewChild } from '@angular/core';\n@Component({\n  selector: 'app-hello',\n  template: '\n    <h1 #greeting>\n      Hello, World!\n    </h1>\n    <div #error *ngIf=\"hasError\">\n      An error occurred\n    </div>\n  ',\n})\nexport class HelloComponent {\n  @ViewChild('error')\n  errorElement?: ElementRef<HTMLElement>;\n  @ViewChild('greeting', { static: true })\n  greetingElement?: ElementRef<HTMLElement>;\n}\n```", "```js\n@ViewChild('error')\nerrorElement?: ElementRef<HTMLElement>;\n@ViewChild('greeting')\ngreetingElement?: ElementRef<HTMLElement>;\n```", "```js\n@ViewChild('error', { static: false })\nerrorElement?: ElementRef<HTMLElement>;\n@ViewChild('greeting', { static: true })\ngreetingElement?: ElementRef<HTMLElement>;\n```", "```js\n@ViewChild('error')\nerrorElement?: ElementRef<HTMLElement>;\n@ViewChild('greeting', { static: true })\ngreetingElement?: ElementRef<HTMLElement>;\n```", "```js\n@NgModule({\n  providers: [\n    DashboardService,\n    {\n      provide: weatherServiceToken,\n      useClass: HttpWeatherService,\n    },\n  ],\n})\nexport class DashboardServiceModule { }\n```", "```js\n@NgModule({\n  providers: [\n    { provide: MusicPlayerService },\n  ],\n})\nexport class MusicServiceModule { }\n```", "```js\n{ provide: MusicPlayerService, useValue: undefined }\n```", "```js\n{ provide: MusicPlayerService, useClass: MusicPlayerService }\n```", "```js\n@NgModule({\n  providers: [\n    MusicPlayerService,\n  ],\n})\nexport class MusicServiceModule { }\n```", "```js\nit('displays dashboard tiles', () => {\n  const dashboardService: DashboardService =\n    TestBed.get(DashboardService);\n  // (...)\n});\n```", "```js\nit('displays dashboard tiles', () => {\n  const dashboardService = \n   TestBed.inject(DashboardService);\n  // (...)\n});\n```", "```js\nit('displays dashboard tiles', () => {\n  TestBed.configureTestingModule({\n    providers: [\n      {\n        provide: DashboardService,\n        useClass: DashboardServiceStub\n      },\n    ],\n  });\n  const dashboardServiceStub =\n    TestBed.inject(DashboardService)\n      as unknown as DashboardServiceStub;\n  // (...)\n});\n```"]