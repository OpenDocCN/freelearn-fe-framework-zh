["```js\nfunction myFunc() {\n  var x = 0;\n} \n```", "```js\nvar x = 20;\nfor (var x = 0; x < 10; x++) {\n} \n```", "```js\nfunction myFunc() {\n  let x = 0;\n  x = 10;\n} \n```", "```js\nconst price = 100;\nprice = 50; \n```", "```js\nTypeError: Assignment to constant variable. \n```", "```js\nconst product = { price: 100 };\nproduct.price = 50; \n```", "```js\nconst product = { price: 100 };\n**product = { price: 50 };** \n```", "```js\nconst category = 'Computing';\nconst categories = ['Gaming', 'Multimedia'];\nconst productCategories = [...categories, category]; \n```", "```js\nconst product = {\n  name: 'Keyboard',\n  price: 75\n};\nconst newProduct = {\n  ...product,\n  price: 100,\n  category: 'Computing'\n}; \n```", "```js\n{\n  name: 'Keyboard',\n  price: 100,\n  category: 'Computing'\n} \n```", "```js\nfunction addtoCart(productId, quantity = 1) {\n  const product = {\n    id: productId,\n    qty: quantity\n  };\n} \n```", "```js\nfunction addProduct(name, ...categories) {\n  const product = {\n    name,\n    categories: categories.join(',')\n  };\n} \n```", "```js\naddProduct('Keyboard', 'Computing', 'Peripherals'); \n```", "```js\nfunction addProduct(name, ...categories) {\n  const product = {\n    name`:` **name**,\n    categories: categories.join(',')\n  };\n} \n```", "```js\nconst discount = (price) => {\n  return (price / 100) * 10 ; \n}; \n```", "```js\nconst discount = price => (price / 100) * 10; \n```", "```js\nfunction createProduct(name) {\n  this.name = name;\n  this.getName = function() {\n    setTimeout(function() {\n      console.log('Product name is:', this.name);\n    });\n  }\n} \n```", "```js\nconst product = new createProduct('Monitor');\nproduct.getName(); \n```", "```js\nsetTimeout(() => {\n  console.log('Product name is:', this.name);\n}); \n```", "```js\nconst getOrder = () => {\n  return {\n    product: {\n      name: 'Keyboard'\n    }\n  };\n}; \n```", "```js\nconst order = getOrder();\nif (order !== undefined) {\n  const product = order.product;\n} \n```", "```js\nconst order = getOrder();\n**const product = order?.product;** \n```", "```js\nconst name = order?.product?.name; \n```", "```js\nconst quantity = qty ? qty : 1; \n```", "```js\nconst quantity = qty ?? 1; \n```", "```js\nclass User {\n  firstName = '';\n  lastName = '';\n  #isActive = false;\n  constructor(firstName, lastName, isActive = true) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.#isActive = isActive;\n  }\n  getFullname() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  get active() {\n    return this.#isActive;\n  }\n} \n```", "```js\nclass Customer extends User {\n  taxNumber = '';\n\n  constructor(firstName, lastName) {\n    super(firstName, lastName);\n  }\n} \n```", "```js\n    import { User } from './user'; \n    ```", "```js\nimport { User, UserPreferences } from './user'; \n```", "```js\nnpm install -g typescript \n```", "```js\n    const title = 'Hello TypeScript!'; \n    ```", "```js\n    tsc app.ts \n    ```", "```js\n    var title = 'Hello TypeScript!'; \n    ```", "```js\n    tsc app.ts --target es2022 \n    ```", "```js\n    {\n      \"compilerOptions\": {\n        \"target\": \"ES2022\"\n      }\n    } \n    ```", "```js\nconst product: string = 'Keyboard'; \n```", "```js\nconst isActive: boolean = true; \n```", "```js\nconst price: number = 100; \n```", "```js\nconst categories: string[] = ['Computing', 'Multimedia'];\nconst categories: Array<string> = ['Computing', 'Multimedia']; \n```", "```js\nlet order: any;\nfunction setOrderNo() {\n  order = '0001';\n} \n```", "```js\ntype Categories = 'computing' | 'multimedia'; \n```", "```js\nconst category: Categories = 'computing'; \n```", "```js\ntype Category = {\n  computing: string;\n  multimedia: string;\n};\ntype CategoryType = keyof Category; \n```", "```js\nfunction getProduct(): string {\n  return 'Keyboard';\n} \n```", "```js\nfunction getFullname(firstName: string, lastName: string): string {\n  return `${this.firstName} ${this.lastName}`;\n} \n```", "```js\nfunction printFullname(firstName: string, lastName: string): void {\n  console.log(`${this.firstName} ${this.lastName}`);\n} \n```", "```js\nfunction addtoCart(productId: number, quantity?: number) {\n  const product = {\n    id: productId,\n    qty: quantity ?? 1\n  };\n} \n```", "```js\nexport class User {\n  firstName = '';\n  lastName = '';\n  #isActive = false;\n  constructor(firstName, lastName, isActive = true) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.#isActive = isActive;\n  }\n  getFullname() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  get active() {\n    return this.#isActive;\n  }\n} \n```", "```js\n    firstName: **string** = '';\n    lastName: **string** = '';\n    **private isActive: boolean** = false; \n    ```", "```js\n    constructor(firstName`:` **string**, lastName`:` **string**, isActive`:` **boolean** = true) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this**.isActive** = isActive;\n    } \n    ```", "```js\n    getFullname()**: string** {\n      return `${this.firstName} ${this.lastName}`;\n    }\n    get active()**: boolean** {\n      return this**.isActive****;**\n    } \n    ```", "```js\n    class Customer extends User {\n      taxNumber**: number;**\n      constructor(firstName**: string**, lastName**: string**) {\n        super(firstName, lastName);\n      }\n    } \n    ```", "```js\n    const account: User | Customer = undefined; \n    ```", "```js\n    if (account instanceof Customer) {\n      const taxNo = account.taxNumber;\n    } else {\n      const name = account.getFullname();\n    } \n    ```", "```js\ninterface Product {\n  name: string;\n  price: number;\n  getCategories: () => string[];\n} \n```", "```js\nclass Keyboard implements Product {\n  name: string = 'Keyboard';\n  price: number = 20;\n  getCategories(): string[] {\n    return ['Computing', 'Peripherals'];\n  }\n} \n```", "```js\ninterface Product {\n  name: string;\n  price: number;\n  getCategories: () => string[];\n  **description?: string;**\n} \n```", "```js\nconst product = {\n  name: 'Keyboard',\n  price: 20\n} as Product; \n```", "```js\nfunction save(data: Product) {\n  localStorage.setItem('Product', JSON.stringify(data));\n} \n```", "```js\nfunction save(data: Product **| Keyboard**) {\n  localStorage.setItem('Product', JSON.stringify(data));\n} \n```", "```js\nfunction save<T>(data: T) {\n  localStorage.setItem('Product', JSON.stringify(data));\n} \n```", "```js\nsave<Product>({\n  name: 'Microphone',\n  price: 45,\n  getCategories: () => ['Peripherals', 'Multimedia']\n}); \n```", "```js\nsave<Product>('Microphone'); \n```", "```js\nfunction save<T, **P**>(data: T, **obj: P**) {\n  localStorage.setItem('Product', JSON.stringify(data));\n} \n```", "```js\nconst mic: Partial<Product> = {\n  name: 'Microphone',\n  price: 67\n}; \n```", "```js\ntype Microphone = Pick<Product, 'name' | 'price'>;\nconst microphone: Microphone = {\n  name: 'Microphone',\n  price: 67\n}; \n```", "```js\ninterface Order {\n  products: Record<string, number>;\n} \n```"]