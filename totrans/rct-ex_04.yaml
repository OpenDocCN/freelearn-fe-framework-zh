- en: Chapter 4. Composite Dynamic Components and Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw the various life cycle methods of a React component,
    how the data flows between React components, and how to manage state and props
    in our React application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on multiple dynamic components and building forms
    using React.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple dynamic components with interactivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlled and uncontrolled components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form events and handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of this chapter, we will be able to create applications containing
    complex forms using React with an understanding of the dynamic components.
  prefs: []
  type: TYPE_NORMAL
- en: Mike and Shawn are getting ready for their next project. The application is
    a prototype for an online bookstore where people can buy different books. Shawn
    is excited to work with Mike again and learn more about React. This project is
    based on React too.
  prefs: []
  type: TYPE_NORMAL
- en: Forms in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, in this project there will be many things related to placing an order,
    taking user''s shipping and billing information, and so on. We are going to deal
    with a lot of forms now." started Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Forms using React, right?" Shawn asked excitedly.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. That is why today we will only focus on forms. Let''s go through the
    intrinsic details of using forms using React." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, we were using JSBin up to this point. But now we will create the app
    locally. We will use the following directory structure for our code:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `src` directory will contain all of the React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `webpack.config.js` and `server.js` file will be used for setting up local
    development server using webpack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `package.json` file will be used to contain information about all of the
    npm packages used by us
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `index.html` file will be the starting point of the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Let''s see our `index.html` file."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"We are using bootstrap CSS to beautify our app. Other than this, we are including
    the bundled JavaScript as `static/bundle.js`. Webpack will bundle the JavaScript
    code from our app and place it in `static/bundle.js`."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Webpack is a module bundler that takes our JavaScript code and generates static
    assets representing these modules. It also has other features such as hot module
    replacement, which we will be using in this book. We will be covering webpack
    and it's configuration in more depth in [Chapter 11](ch11.html "Chapter 11. React
    Tools"), *React Tools*.
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s see our `index.js` file, which will be the entry point of the JavaScript
    code."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"It will render our `BookStore` component in the root container present in
    `index.html`. Now, the only thing left to do is actually writing the code for
    our `BookStore` component. Let''s get started."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Mike, in JSBin, our ES6 code was getting converted to normal JavaScript automatically.
    How will it be converted now?" asked Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Excellent question. I forgot to mention about using Babel. Babel is a JavaScript
    transpiler that will convert our ES6 and JSX code to normal JavaScript. I have
    already configured this app to use Babel. You can check `package.json` and `webpack.config.js`
    to see how we configured Babel to convert the ES6 code to ES5 code. But let''s
    not worry too much about it for now. We will come back to it and see how the whole
    setup works later."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will be covering how we have used Babel and Webpack in [Chapter 11](ch11.html
    "Chapter 11. React Tools"), *React Tools*. Right now, the reader is expected to
    not worry about it and directly set up the application using the instructions
    given in source code of this chapter. You can also check [Chapter 11](ch11.html
    "Chapter 11. React Tools"), *React Tools* for more details before completing this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Forms behave slightly differently in the React world than in the normal HTML
    world. They are a bit special than the other DOM components in the React world.
    The `<input>`, `<textarea>`, and `<option>` tags are some of the common input
    components provided by React." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"These form components are mutated when the user interacts with them, adds
    some text in the input, or selects an option. Therefore, we need to take care
    that we are managing those user interactions properly." Mike explained further.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s start with a simple input tag to understand the user interaction."
    informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"Mike, what is the meaning of import here?" asked Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Good catch. This is one of the ES6 features that we are going to use in this
    project. It is used to import functions defined in other modules or external scripts."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on import can be found at [https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import).
  prefs: []
  type: TYPE_NORMAL
- en: '"We are also using a new way of defining functions in ES6."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"Using this new syntax, we don''t have to write word `function` every time
    we define the function."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Shawn, start our app by running `npm start`."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"Awesome, it works because we have configured the `package.json` scripts section
    for starting the app."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s get back to our input box. We see a normal HTML text input with a predefined
    value, `Shawn`. All good." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with forms](img/4730_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Mike, I can''t edit it. Seems like the field is read-only. Also, I am seeing
    a warning in the console." informed Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with forms](img/4730_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Interactive props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Right. It also says that value is a prop. Similar to value, there are some
    other props supported by the input fields." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defaultValue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: onChange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"As React has warned us that we need to either provide the `defaultValue` or
    `onChange` prop to make this field mutable, let''s take care of this and add a
    `onChange` handler. The field is read-only because by setting the value `prop`,
    we have rendered a controlled component." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: Controlled components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"What is a controlled component, Mike?" asked Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"It''s an input component whose value is controlled by React. By providing
    the value prop, we are informing React that the value of this field is "Shawn".
    Once React has declared it to be "Shawn", any user input won''t have an effect
    as the value is already set in the ." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I think that we have to resort to `state` instead of `props`?" Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Exactly. As an user is interacting with the input field, we need to update
    the value `prop` using `state` and `onChange` event handler. Can you give it a
    try?" suggested Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"Awesome. This pattern of making the value of an input based on state and updating
    the state based on the user interaction makes it very easy to respond to user
    interactions. We can also do some housekeeping things such as validating the input."
    Mike explained further.'
  prefs: []
  type: TYPE_NORMAL
- en: '"For example, you can change the case of all the text to uppercase." Mike added.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Uncontrolled components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"React also has uncontrolled components where the `value` prop is not passed
    to the input".'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"In this case, the value entered by the user will be immediately reflected
    in the input. For setting some default initial value, we can pass the default
    `value` prop, which will act as the initial value for an uncontrolled component."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"Awesome. This does it."'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with form wizard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, our task today is to build a form wizard, modeling all the steps that
    the user will take while using the online bookstore."'
  prefs: []
  type: TYPE_NORMAL
- en: We will start with a form, where the user selects the book that they want to
    buy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next step, the user will enter the information related to the billing
    and shipping address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After this, the user needs to choose a delivery mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the end, the user will confirm the transaction and place the order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Will we design four different forms then?" asked Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes. But all of them will be controlled by a single parent. The parent component
    will keep a track of the state that the user is in and will render a form for
    this step." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"How will we control the step?" asked Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will discuss this point later. Let''s fill in some details before that.
    Let''s add the placeholders for all of our forms." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"Great. Now, let''s make sure that we always start from the first step." explained
    Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"Now that we have made sure that the user will always be on the first step
    at the start, let''s go ahead and finish the book store." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"This is our static form. It doesn''t do anything on user interaction. The
    next step will be to make it respond to the events." Mike added.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool, I am interested in how we move to the next step." said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will reach there soon. Let''s finish other things first." informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"OK. Before that, what''s happening here?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"This is called as a **fat arrow syntax** to define functions. It is another
    ES6 feature. It''s a shorthand for writing functions."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about fat arrow functions can be found at [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions).
  prefs: []
  type: TYPE_NORMAL
- en: Form events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Let''s handle submitting the form now. React provides the `onSubmit` event
    for this purpose." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"Now, the next task is to get hold of all the books selected by the user. We
    can use `state` to achieve this." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"We added an `onChange` handler for the checkboxes. We also provided the `value`
    prop to the checkboxes which will be name of the book. Initially, the `selectedBooks`
    state will be an empty array set through the `getInitialState` function. The `handleSelectedBooks`
    method will check whether the checkbox is checked or not. We are using the checked
    prop provided by React for checkbox inputs. Similar to value, it also gets updated
    with user interaction.'
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we are updating the state with the new value of `selectedBooks`.
    Therefore, at any point of time, we will have hold of selected books in `this.state.selectedBooks`."
    explained Mike.
  prefs: []
  type: TYPE_NORMAL
- en: '"Perfect!" said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: Parent Child relationship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Now after this, the next step is communicating with the parent component.
    Currently, there is no way that our child component can communicate with props.
    We want to communicate with the parent component as we want to send the selected
    books by the user to the parent component. The easiest way for a child to communicate
    with the parent is via props." Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '"But props are generally the attributes or properties that are sent to a child,
    right? How can a child communicate with the parent using them?" Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Remember the `{}` syntax. We can pass any valid expression as prop. We can
    pass a function callback as prop to a child component. A child can call it to
    update the state of the parent. Let''s update our `BookStore` component now."
    Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"We pass the `updateFormData` function as a prop to all the child components.
    This function will take care of updating the form data. We will also need to update
    `BookList` in order to use it."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"The `BookList` component now calls the `updateFormData` function and passes
    the currently selected books to it, whenever a user submits the first form," explained
    Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Therefore, every form will send its data to the parent component and we will
    use the complete data for final submission, right?" Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Exactly. We will need a way to store the incoming data in the parent component
    though."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '"We added state to store `formValues`. Whenever the user submits the form,
    the child form will call the parent''s `updateFormData` function. This function
    will merge the current data stored in the parent''s `formValues` with incoming
    `formData` and reset the state to the new `formValues`. In this case, we will
    get `selectedBooks` in the `formValues` object, as follows:" said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '"Note that, we are making use of another ES6 method—`Object.assign`. The `Object.assign()`
    method is used to copy the values of all the enumerable properties from one or
    more source objects to a target object."'
  prefs: []
  type: TYPE_NORMAL
- en: '"In our case, the use of `Object.assign` will merge the current state of form
    values with the new form values that are changed after some user interaction.
    We will then use this updated data to update the state of the component. We are
    using `Object.assign` instead of directly mutating the state of the component.
    We will cover why this is better than directly mutating the state of the component
    in the following chapters."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '"Makes sense. This takes care of updating the form data. Now, how will we go
    to the next step?" Shawn asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s simple. Whenever we update the form data, we also need to update the
    `currentStep` method of the `BookStore` component. Can you give it a try?" Mike
    asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '"Perfect. You have updated the step by `1` in the `updateFormData` callback.
    This will take the user to the next step." Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: Form validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, I think we should also add basic validation to the `BookList` component
    so that the user can''t go to the next step without selecting a book," said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Agree. Let me give it a try." answered Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '"I added the state to manage the validation error. Initially, it will be set
    to `false`. After the user submits the form, we will check whether the user has
    not selected anything and set an appropriate error message. State will be updated
    and it will display the error message accordingly. If the user has selected at
    least one book, then the error state will be set to `false` and the error message
    won''t be displayed. We get a nice error message with some help from the Bootstrap
    classes." said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Form validation](img/4730_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Awesome. Let''s move to the second form now. We want to accept the user''s
    shipping details such as the address and contact information." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: Shipping details step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, in this step, we want to get the user''s shipping preferences. It will
    contain the shipping address and name of the customer." explained Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We should also add a phone number." Shawn added.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sure thing. Here is how our shipping details form look like." informed Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '"This component is using almost same code as our first form. We are showing
    textboxes for the shipping details to the user. There is validation and all the
    fields are required fields. We are syncing the data entered by the user using
    a `onChange` handler in the state of the component and passing this state to the
    `updateFormData` function of the parent component in the end." Mike explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, at the end of second step, we have gathered a list of books chosen by
    the user and the shipping information." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '"I can see how we are assigning the `value` prop of the input fields to it''s
    corresponding state." Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '"Yes. As we discussed earlier about the controlled and uncontrolled components,
    we are making sure that the UI reflects the latest state, based on the user interaction."
    said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: Delivery details step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Shawn, the next step is about providing various delivery options. For now,
    let''s assume that the user can choose between `Primary` delivery, meaning a next-day
    delivery, and `Normal` delivery, meaning 3 - 4 days delivery. By default, the
    `Primary` option must be selected. A user can choose the `Normal` delivery option
    too. Can you try building this last step?" Mike asked.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '"Mike, as needed, I added `Primary` as the default option through state. I
    used radio buttons and their checked prop in order to make sure that only one
    radio button is selected at any point of time. Also, the state is updated using
    the `onChange` callback to reflect the selected by option. Finally, the `updateFormData`
    function is called to update the parent''s form data." Shawn explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Great, Shawn. This looks good. I think we will also have to make some changes
    to our `BookStore` component as now we want to show a confirmation page after
    the user has completed choosing delivery options."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '"We added the `Confirmation` component as the last step and also added the
    default form to be the `BookList` form, where the user can choose the books. Now,
    we just need to show all the information captured up to the last step on the **Confirmation**
    page and actually submit everything to the backend." said Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let me update the **Confirmation** page to show the data entered by the user."
    Shawn said.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '"Mike, I listed all the data selected by the user and provided a button to
    place the order. It looks like this." Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Delivery details step](img/4730_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Perfect. I have the success page ready. Let''s try that." Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '"We will also need to update `BookStore` to show the success page," added Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '"Now, the success page will be shown as the last page after the user has confirmed
    and placed the order. Our first version of the form wizard is complete." Mike
    informed.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Delivery details step](img/4730_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to develop forms in React. We saw how to use
    different input types and event handlers to respond to the user interaction for
    these inputs. We used state and props to manage the flow of form data from one
    step to another. We also saw how to use dynamic components to display particular
    form to the user based on the current step that the user is present on.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue with the form wizard and see how mixins
    can help us in organizing the code better.
  prefs: []
  type: TYPE_NORMAL
