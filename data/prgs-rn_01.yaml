- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: What Is React Native?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是React Native？
- en: Building high-quality apps for multiple platforms is the holy grail of app development.
    Since React Native was published, it has been challenged in very competitive environments
    because it seemed to be this holy grail for a long time. Its performance was much
    better than the performance of any of the competitors (Ionic, Cordova) back when
    it was released by Facebook in 2015 and its development speed is much faster than
    creating separate Android and iOS apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为多个平台构建高质量的应用程序是应用程序开发的圣杯。自从React Native发布以来，它一直在非常竞争激烈的环境中受到挑战，因为它似乎一直是这个圣杯。它在2015年由Facebook发布时的性能比任何竞争对手（Ionic、Cordova）都要好得多，其开发速度也比创建独立的Android和iOS应用程序要快得多。
- en: Since 2015, a lot has happened regarding React Native. Facebook open sourced
    the framework, a lot of contributors and even big companies such as Microsoft,
    Discord, and Shopify invested heavily in React Native, and new competitors such
    as Flutter of Kotlin Multiplatform Mobile evolved.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自2015年以来，关于React Native发生了许多事情。Facebook开源了这个框架，许多贡献者甚至像微软、Discord和Shopify这样的大公司也大力投资React
    Native，同时新的竞争对手如Flutter和Kotlin Multiplatform Mobile也发展起来。
- en: In 7 years, a lot of companies migrated their apps to React Native successfully,
    while others failed in doing so, migrated back to native development, or finally
    chose other multiplatform technologies.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在7年的时间里，许多公司成功地将他们的应用程序迁移到了React Native，而其他一些公司则失败了，转而回到原生开发，或者最终选择了其他多平台技术。
- en: In 2022, React Native is used in more products than ever and it has become a
    lot more developer friendly than in the early days. It is not only available for
    iOS and Android but also for macOS, Windows, web, VR, and other platforms. Most
    importantly, and despite many rumours claiming otherwise, Facebook is still betting
    heavily on React Native.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到2022年，React Native被用于比以往更多的产品中，并且它比早期变得更加开发者友好。它不仅适用于iOS和Android，还适用于macOS、Windows、Web、VR和其他平台。最重要的是，尽管有许多谣言称并非如此，Facebook仍然在大力押注React
    Native。
- en: The React Native core team at Facebook just completed a rewrite of more than
    1,000 React Native screens in its main application, including Dating, Jobs, and
    Marketplace, which is visited by more than 1 billion users each month. This means
    React Native powers important and business-critical parts of the biggest and most
    used app in the world, which is the ultimate proof of it being a stable and supported
    framework.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook的React Native核心团队刚刚完成了对其主要应用程序中超过1,000个React Native屏幕的重写，包括约会、工作和市场，这些应用程序每月有超过10亿用户访问。这意味着React
    Native为世界上最大和最常用的应用程序的重要和业务关键部分提供了动力，这是它作为一个稳定且受支持的框架的最终证明。
- en: 'As you can see, React Native has become very powerful and is widely used. But
    you have to know how to leverage its strengths and how to deal with its weaknesses
    to create a high-quality app and a well-run software product. This book contains
    learnings, best practices, and basic architectural and processual concepts you
    need to know about to be able to decide on the following things:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，React Native已经变得非常强大并且被广泛使用。但你必须知道如何利用其优势以及如何处理其劣势，以创建高质量的应用程序和良好的软件产品。本书包含了你需要了解的学习成果、最佳实践以及基本架构和流程概念，以便能够决定以下事情：
- en: When to use React Native for your project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时在你的项目中使用React Native
- en: How to set up your React Native project to work on a bigger scale
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置你的React Native项目以支持更大规模的工作
- en: How to use React Native to create a world-class product
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用React Native创建世界级的产品
- en: How to organize your team in a software project with React Native
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在React Native项目中组织团队
- en: How to support your development team with useful tools and processes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过有用的工具和流程支持你的开发团队
- en: This chapter contains a very brief introduction to the main concepts of React
    as the foundation on which React Native was built, of React Native itself, and
    of the Expo framework, which is a set of tools and libraries built on top of React
    Native. We will focus on the key concepts that are relevant for understanding
    the content that will be covered later in this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了React的主要概念，这是React Native构建的基础，以及React Native本身和Expo框架，这是一个建立在React Native之上的工具和库集合。我们将关注与理解本书后面将要涵盖的内容相关的关键概念。
- en: If you already have a very good understanding of how React, React Native, and
    Expo work, feel free to skip this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经对React、React Native和Expo的工作原理有非常好的理解，你可以自由地跳过本章。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring React
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索React
- en: Understanding React basics
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 React 基础
- en: Introducing React Native
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 React Native
- en: Introducing Expo
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Expo
- en: Technical requirements
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To try out the code examples in this chapter, you need to set up a small React
    app for the *Exploring React* and *Understanding React basics* sections, and a
    React Native app for the *Introducing React Native* section. This requires you
    to install various libraries, depending on what OS you are working with. Both
    [https://reactjs.org/](https://reactjs.org/) and [https://reactnative.dev/](https://reactnative.dev/)
    provide step-by-step guides for setting up the development environment correctly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试本章中的代码示例，你需要为 *探索 React* 和 *理解 React 基础* 部分设置一个小型 React 应用，并为 *介绍 React Native*
    部分设置一个 React Native 应用。这需要你根据你使用的操作系统安装各种库。[https://reactjs.org/](https://reactjs.org/)
    和 [https://reactnative.dev/](https://reactnative.dev/) 都提供了设置正确开发环境的逐步指南。
- en: 'You can find the code in the book’s GitHub repository:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在书的 GitHub 仓库中找到代码：
- en: Exploring React
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 React
- en: On [https://reactjs.org/](https://reactjs.org/), React is defined as a *JavaScript
    library for building user interfaces*. The main catchphrases used on the home
    page are declarative, component-based, and learn once, write anywhere.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [https://reactjs.org/](https://reactjs.org/) 上，React 被定义为 *用于构建用户界面的 JavaScript
    库*。主页上使用的口号是声明式、组件化、一次学习，到处编写。
- en: When React was first introduced at the JSConf US conference in May 2013 by Jordan
    Walke of Facebook, the audience was so skeptical that Facebook decided to start
    a *React tour* to convince people of the benefits of this new library. Today,
    React is one of the most popular frameworks for creating web applications, and
    it’s used not only by Facebook itself, but also by many other big players such
    as Instagram, Netflix, Microsoft, and Dropbox.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当 React 首次在 2013 年 5 月的 JSConf US 大会上由 Facebook 的 Jordan Walke 介绍时，观众非常怀疑，Facebook
    决定开始一次 *React 巡回* 来说服人们这个新库的好处。如今，React 是最受欢迎的用于创建网络应用的框架之一，它不仅被 Facebook 本身使用，还被
    Instagram、Netflix、Microsoft 和 Dropbox 等许多其他大公司使用。
- en: In the next section, I will show you how React works, what makes it so special
    compared to other similar frameworks and approaches, and how it is related to
    React Native.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将向你展示 React 的工作原理，它与其他类似框架和方法的独特之处，以及它与 React Native 的关系。
- en: Tip
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you already have Node and Node Package Manager installed, you can set up
    a new app by using the following command in the terminal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 Node 和 Node 包管理器，你可以在终端中使用以下命令设置一个新的应用：
- en: '**npx create-react-app name-of-your-app**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**npx create-react-app name-of-your-app**'
- en: Understanding React basics
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 React 基础
- en: 'To get started, open a project in your IDE so that we can explore a simple
    example. This is what a React app returning a simple `Hello World` message looks
    like:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请在你的 IDE 中打开一个项目，这样我们就可以探索一个简单的例子。这是一个返回简单 `Hello World` 消息的 React 应用看起来像：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first thing that comes to mind when seeing these code lines is probably
    that this looks just like XML/HTML! Indeed, it does, but these tags get converted
    into JavaScript by a preprocessor, so it’s JavaScript code that looks like XML/HTML
    tags. Hence the name **JSX**, which is short for **JavaScript XML**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当看到这些代码行时，你首先想到的可能就是这看起来就像 XML/HTML！确实如此，但这些标签会被一个预处理器转换成 JavaScript，所以这是看起来像
    XML/HTML 标签的 JavaScript 代码。因此得名 **JSX**，它是 **JavaScript XML** 的缩写。
- en: The JSX tags can be used much like XML/HTML tags; you can structure your code
    using the different types of tags, and you can style them using CSS files and
    the `className` attribute, which is the React equivalent of HTML’s `class` attribute.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 标签可以像 XML/HTML 标签一样使用；你可以使用不同类型的标签来结构化你的代码，并且可以使用 CSS 文件和 `className` 属性来样式化它们，这是
    React 对 HTML 的 `class` 属性的等效。
- en: 'On the other hand, you can insert JavaScript code anywhere in the JSX, either
    as a value for an attribute or inside a tag. You just have to put curly brackets
    around it. Please have a look at the following code, which uses a JavaScript variable
    inside JSX:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，你可以在 JSX 中的任何地方插入 JavaScript 代码，无论是作为属性的值还是标签内部。你只需要将它放在大括号中。请看以下代码，它使用了
    JSX 中的 JavaScript 变量：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we are greeting a user whose name we have previously stored
    in a `userName` variable by inserting this `userName` variable into our example
    code’s JSX.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们通过将 `userName` 变量插入到我们的示例代码的 JSX 中，向一个我们之前存储在 `userName` 变量中的用户打招呼。
- en: These JSX tags are really handy, but what if I have some part of the code that
    I want to reuse throughout the code, such as a special kind of button or a sidebar
    element? This is where the *component-based* catchphrase from the ReactJS home
    page comes into play.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些JSX标签非常实用，但如果我想在整个代码中重用代码的一部分，比如一种特殊的按钮或侧边栏元素呢？这就是ReactJS主页上“基于组件”的口号发挥作用的地方。
- en: Understanding React components
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解React组件
- en: Our example includes one component called `App`. In this case, it’s a functional
    component. It’s also possible to use class components in React but most of the
    following examples will use the more common functional components. React allows
    you to write custom components and use them exactly like a normal JSX tag in another
    part of the code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的例子包括一个名为`App`的组件。在这种情况下，它是一个函数式组件。在React中也可以使用类组件，但接下来的大多数示例将使用更常见的函数式组件。React允许你编写自定义组件，并在代码的其他部分像正常JSX标签一样使用它们。
- en: 'Let’s say we want to have a button that opens an external link to the ReactJS
    home page upon being clicked. We could define a custom `ReactButton` component
    like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要一个按钮，当点击时可以打开指向ReactJS主页的外部链接。我们可以定义一个自定义的`ReactButton`组件，如下所示：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we can use the button in the main component, using the empty tag notation
    as it doesn’t have any child components:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在主组件中使用该按钮，使用空标签表示法，因为它没有子组件：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, every component in React has to implement the `return` function
    to render a view in the app. The JSX code can only be executed when it is called
    by the `return` function, and there has to be one JSX tag that wraps all the other
    tags and components. There is no need to explicitly implement how the view should
    behave when the content changes – React automatically handles this. This is what
    we mean when we describe React as being declarative.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，React中的每个组件都必须实现`return`函数以在应用中渲染视图。JSX代码只能在由`return`函数调用时执行，并且必须有一个JSX标签包裹所有其他标签和组件。没有必要明确实现当内容变化时视图应该如何行为——React会自动处理这一点。这就是我们描述React为声明式时所意味着的。
- en: 'So far, we have seen why React is defined as a declarative, component-based
    JavaScript library for building user interfaces. But we haven’t talked about one
    of the main advantages of React yet: how it efficiently rerenders views. To understand
    this, we need to have a look at props and state.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了为什么React被定义为用于构建用户界面的声明式、基于组件的JavaScript库。但我们还没有谈到React的主要优势之一：它如何高效地重新渲染视图。为了理解这一点，我们需要看看props和state。
- en: Understanding React props and state
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解React的props和state
- en: A `WelcomeMessage` component that shows a welcoming text, including the username
    from the `App` component.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`WelcomeMessage`组件，用于显示欢迎文本，包括来自`App`组件的用户名。
- en: 'This component could look like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件可能看起来是这样的：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we can include it in the `App` component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将其包含在`App`组件中：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The name of the prop is used like an attribute on the JSX tag of the child component.
    By using `props` as a parameter for the child component, all those attributes
    are automatically accessible in the child component, such as `username` in our
    example.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: prop的名称被用作JSX标签的属性。通过将`props`作为子组件的参数，所有这些属性都会自动在子组件中可用，例如我们例子中的`username`。
- en: What makes React so efficient is the fact that any time the value of a prop
    changes, only those components that are affected by that change are rerendered.
    This massively reduces the rerendering costs, especially for large applications
    with many layers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: React之所以高效，是因为每当prop的值发生变化时，只有那些受该变化影响的组件才会重新渲染。这大大减少了重新渲染的成本，尤其是在具有多层的大型应用中。
- en: 'The same goes for state changes. React provides the possibility to turn any
    component into a stateful component by implementing the `state` variable in class
    components or the `useState` Hook (more on Hooks in [*Chapter 3*](B16694_03.xhtml#_idTextAnchor061),
    *Hello React Native*) in functional components. The classical example of a stateful
    component is a `Counter`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于状态变化也是如此。React提供了将任何组件转换为有状态组件的可能性，通过在类组件中实现`state`变量或在函数组件中使用`useState`钩子（更多关于Hooks的内容请见[*第3章*](B16694_03.xhtml#_idTextAnchor061)，*Hello
    React Native*)。有状态组件的经典例子是一个`Counter`：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `numClicks` state variable is initialized with a value of `0`. Any time
    the user clicks on the button and the internal state of the `Counter` component
    changes, only the content of the `<p>` tag is rerendered.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`numClicks`状态变量初始化为`0`。每当用户点击按钮并且`Counter`组件的内部状态发生变化时，只有`<p>`标签的内容会重新渲染。'
- en: ReactDOM is responsible for comparing all the elements in the UI tree with the
    previous ones and updating only the nodes whose content has changed. This package
    also makes it possible to easily integrate React code into existing web apps,
    regardless of what language they are written in.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ReactDOM负责比较UI树中的所有元素与之前的元素，并仅更新内容已更改的节点。此包还使得将React代码轻松集成到现有Web应用程序中成为可能，无论它们是用什么语言编写的。
- en: When Facebook decided to become a mobile-first company in 2012, this *learn
    once, write anywhere* approach of React was applied to the development of mobile
    applications, which led to the emergence of React Native in 2013, where it is
    possible to write apps for iOS or Android using only JavaScript or TypeScript.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当Facebook在2012年决定成为一家以移动优先的公司时，React的这种*一次学习，到处编写*的方法被应用于移动应用程序的开发，这导致了2013年React
    Native的出现，其中可以使用JavaScript或TypeScript仅编写iOS或Android应用程序。
- en: Now that we have learned what React is and how it works in general, let’s learn
    more about React Native.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了React是什么以及它的一般工作原理，让我们进一步了解React Native。
- en: Introducing React Native
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍React Native
- en: React Native is a framework that makes it possible to write React code and deploy
    it to multiple platforms. The most well known are iOS and Android, but you can
    use React Native to create apps for Windows, macOS, Oculus, Linux, tvOS, and much
    more. With React Native for Web, you can even deploy a mobile application as a
    web app using the same code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: React Native是一个框架，它使得将React代码编写并部署到多个平台成为可能。最著名的是iOS和Android，但您可以使用React Native创建Windows、macOS、Oculus、Linux、tvOS以及更多应用程序。使用React
    Native for Web，您甚至可以使用相同的代码将移动应用程序作为Web应用程序部署。
- en: Tip
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you don’t want to spend an hour setting up the development environment for
    creating a new React Native app and trying out the code examples, you could install
    the Expo CLI using `npm` or `yarn`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想花一个小时设置创建新React Native应用程序的开发环境并尝试代码示例，您可以使用`npm`或`yarn`安装Expo CLI：
- en: '**npm install -g expo-cli** OR **yarn global add expo-cli**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**npm install -g expo-cli** 或 **yarn global add expo-cli**'
- en: 'After that, setting up a new React Native app just takes running one command
    in the terminal:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，只需在终端中运行一个命令即可设置新的React Native应用程序：
- en: '**expo init NameOfYourApp**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**expo init YourAppName**'
- en: '`expo init` is yarn. If you want to use `npm` instead, add `--npm` to the `expo
    init` command.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`expo init`是yarn。如果您想使用`npm`，请将`--npm`添加到`expo init`命令中。'
- en: In the next section, you will learn how cross-platform development is made possible
    in the React Native framework.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何在React Native框架中实现跨平台开发。
- en: React Native basics
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React Native基础知识
- en: As React Native is heavily based on React, the code looks much the same; you
    use components to structure the code, props to hand over parameters from one component
    to another, and JSX in a return statement to render the view. One of the main
    differences is the type of basic JSX components you can use.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于React Native在React的基础上构建，代码看起来非常相似；您使用组件来结构化代码，使用props将参数从一个组件传递到另一个组件，并在返回语句中使用JSX来渲染视图。主要区别之一是您可以使用的基本JSX组件类型。
- en: 'In React, they look a lot like XML/HTML tags, as we have seen in the previous
    section. In React Native, the so-called core components are imported from the
    `react-native` library and look different:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，它们看起来与我们在上一节中看到的XML/HTML标签非常相似。在React Native中，所谓的核心组件是从`react-native`库导入的，并且看起来不同：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: React Native does not use web views to render the JavaScript code on the device
    like some other cross-platform solutions; instead, it converts the UI written
    in JavaScript into native UI elements. The React Native `View` component, for
    example, gets converted into a `ViewGroup` component for Android, and into a `UIView`
    component for iOS. This conversion is done via the Yoga engine ([https://yogalayout.com](https://yogalayout.com)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: React Native不像某些其他跨平台解决方案那样使用Web视图在设备上渲染JavaScript代码；相反，它将用JavaScript编写的UI转换为本地UI元素。例如，React
    Native的`View`组件被转换为Android的`ViewGroup`组件，以及iOS的`UIView`组件。这种转换是通过Yoga引擎（[https://yogalayout.com](https://yogalayout.com)）完成的。
- en: React Native is powered by two threads – the JavaScript thread, where the JavaScript
    code is executed, and the native thread (or UI thread), where all device interaction
    such as user input and drawing screens happens.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: React Native由两个线程驱动 - JavaScript线程，其中执行JavaScript代码，以及本地线程（或UI线程），其中发生所有设备交互，如用户输入和屏幕绘制。
- en: 'The communication between these two threads takes place over the so-called
    **Bridge**, which is a kind of interface between the JavaScript code and the native
    part of the app. Information such as native events or instructions is sent in
    serialized batches from the native UI thread over the Bridge to the JavaScript
    thread and back. This process is shown in the following diagram:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个线程之间的通信是通过所谓的**Bridge**进行的，它是JavaScript代码和应用程序原生部分之间的一种接口。例如，原生事件或指令等信息以序列化批量的形式从原生UI线程通过Bridge发送到JavaScript线程，然后再返回。这个过程在下面的图中展示：
- en: '![Figure 1.1 – React Native Bridge'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 – React Native Bridge'
- en: '](img/B16694_01_01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片B16694_01_01.jpg]'
- en: Figure 1.1 – React Native Bridge
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – React Native Bridge
- en: As you can see, events are collected in the native thread. The information is
    then serialized and passed to the JavaScript thread via the Bridge. In the JavaScript
    thread, information is deserialized and processed. This also works the other way
    round, as you can see in *Steps 5* to *8* of the preceding diagram. You can call
    methods, which are provided by native components, or React Native can update the
    UI when necessary. This is also done by serializing the information and passing
    it to the native thread via the Bridge. This Bridge makes it possible to communicate
    between native and JavaScript in an asynchronous way, which is great to create
    real native apps with JavaScript.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，事件在原生线程中收集。然后信息被序列化并通过Bridge传递到JavaScript线程。在JavaScript线程中，信息被反序列化并处理。这也同样适用于相反的方向，如前图中*步骤5*到*8*所示。您可以调用由原生组件提供的方法，或者React
    Native在必要时可以更新UI。这也是通过序列化信息并通过Bridge将其传递到原生线程来完成的。这个Bridge使得原生和JavaScript之间的异步通信成为可能，这对于使用JavaScript创建真正的原生应用程序来说是非常好的。
- en: But it also has some downsides. The serialization and deserialization of information,
    as well as being the only central point of communication between native and JS,
    makes the bridge a bottleneck that can cause performance issues in some situations.
    This is why React Native was completely rewritten between 2018 and 2022.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但它也有一些缺点。信息的序列化和反序列化，以及作为原生和JS之间唯一的中心通信点，使得Bridge成为了一个瓶颈，在某些情况下可能导致性能问题。这就是为什么React
    Native在2018年至2022年之间被完全重写。
- en: The new React Native (2022)
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的React Native（2022）
- en: Because of the architectural problems mentioned previously, the React Native
    core was rearchitectured and rewritten completely. The main goal was to get rid
    of the Bridge and the performance issues tied to it. This was done by introducing
    JSI, the JavaScript interface, which allows direct communication between native
    and JavaScript code without the need for serialization/deserialization.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前提到的架构问题，React Native的核心被完全重构并重写。主要目标是消除Bridge及其相关的性能问题。这是通过引入JSI（JavaScript接口）来实现的，它允许原生代码和JavaScript代码之间直接通信，无需进行序列化和反序列化。
- en: The JS part is truly aware of the native objects, which means you can directly
    call methods synchronously. Also, a new renderer was introduced during the rearchitecture,
    which is called Fabric. More details on the React Native rearchitecture will be
    provided in [*Chapter 3*](B16694_03.xhtml#_idTextAnchor061), *Hello React Native*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: JS部分真正了解原生对象，这意味着您可以直接同步调用方法。此外，在重构过程中引入了一个新的渲染器，称为Fabric。关于React Native重构的更多细节将在[*第3章*](B16694_03.xhtml#_idTextAnchor061)，*Hello
    React Native*中提供。
- en: The rearchitecture made the awesome React Native framework even more awesome
    by improving its out-of-the-box performance significantly. At the time of writing,
    more and more packages are being adapted to the new React Native architecture.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重构使得原本出色的React Native框架更加出色，显著提高了其即插即用的性能。在撰写本文时，越来越多的包正在适应新的React Native架构。
- en: More React Native advantages
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多React Native优势
- en: Ever since it was open-sourced in 2015, there has been a huge and ever-growing
    community that develops and provides a lot of add-on packages for a multitude
    of different problems and use cases. This is one of the main advantages that React
    Native has over other, similar cross-platform approaches.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 自从2015年开源以来，已经形成了一个庞大且不断增长的社区，该社区为各种不同的问题和用例开发并提供了大量的附加包。这是React Native相对于其他类似跨平台方法的主要优势之一。
- en: These packages are mostly well maintained and provide nearly all native functionality
    that currently exists, so you only have to work with JavaScript to write your
    apps.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包大多数都得到了良好的维护，并提供了目前存在的几乎所有原生功能，因此你只需使用JavaScript来编写你的应用程序。
- en: This means using React Native for mobile app development makes it possible to
    reduce the size of the developer team greatly, as you no longer need both Android
    and iOS specialists, or you can at least reduce the team size of native specialists
    significantly.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着使用React Native进行移动应用开发可以大大减少开发团队的大小，因为你不再需要Android和iOS专家，或者至少可以显著减少原生专家的团队规模。
- en: And the best thing about working with these well-maintained packages is that
    things such as the React Native core rewrites come to your app automatically when
    the packages are updated.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些维护良好的包一起工作的最好之处在于，当包更新时，React Native核心重写等事物会自动应用到你的应用中。
- en: Additionally, the hot reload feature speeds up the development process by making
    it possible to see the effect of code changes in a matter of seconds. Several
    other tools make the life of a React Native developer even more comfortable, which
    we will look at in more detail in [*Chapter 9*](B16694_09.xhtml#_idTextAnchor282),
    *Essential Tools for Improving React Native Development*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，热重载功能通过使代码更改的效果在几秒钟内可见，从而加快了开发过程。还有其他几个工具使React Native开发者的生活更加舒适，我们将在[*第9章*](B16694_09.xhtml#_idTextAnchor282)《提高React
    Native开发的基本工具》中更详细地探讨。
- en: Now that we understand what React and React Native are, and how they are related
    to each other, let’s have a look at a tool that makes the whole development process
    much easier – Expo.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了React和React Native是什么，以及它们是如何相互关联的，让我们看看一个使整个开发过程变得更加容易的工具——Expo。
- en: Introducing Expo
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Expo
- en: There are several ways to set up a new React Native app. For the example project
    in this book, we will use Expo. It’s a powerful framework built on top of React
    Native that includes many different tools and libraries. Expo uses plain React
    Native and enhances it with a lot of functionality.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 设置新的React Native应用有几种方法。对于本书中的示例项目，我们将使用Expo。它是一个基于React Native构建的强大框架，包括许多不同的工具和库。Expo使用纯React
    Native，并增强了大量功能。
- en: While React Native is a very lean framework when it comes to core components
    and native functionality, Expo provides nearly every functionality that you can
    think of using in your app. It provides components and APIs for nearly all native
    device functions, such as video playback, sensors, location, security, device
    information, and a lot more.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到核心组件和原生功能时，React Native是一个非常精简的框架，而Expo提供了几乎你能在应用中使用到的所有功能。它为几乎所有原生设备功能提供了组件和API，例如视频播放、传感器、位置、安全、设备信息以及更多。
- en: Think of Expo as a full-service package that makes your life as a React Native
    developer a lot easier. Since everything comes with a downside, Expo adds some
    size to your final app bundle, because you add all the libraries to your app whether
    you use them or not.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将Expo视为一个全服务包，它可以让你的React Native开发者生活变得更加轻松。由于任何事物都有其缺点，Expo会增加你最终应用包的大小，因为无论你是否使用，你都会将所有库添加到你的应用中。
- en: It also uses a somehow modified version of React Native, which is normally one
    or two versions behind the latest React Native version. So, when working with
    Expo, you have to wait for the latest React Native features a couple of months
    after they are released.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它还使用了一种某种修改过的React Native版本，这通常比最新的React Native版本落后一到两个版本。因此，当使用Expo时，你必须在它们发布后等待几个月才能使用最新的React
    Native功能。
- en: I would recommend using Expo if you want to achieve results at maximum speed
    and don’t have to optimize your bundle size.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要以最大速度达到结果且不需要优化你的包大小，我会推荐使用Expo。
- en: When setting up a new project with Expo, you can choose between two different
    types of workflows – a bare workflow and a managed workflow. In both workflows,
    the framework provides you with easy-to-use libraries for including native elements
    such as the camera, the filesystem, and others. Additionally, services such as
    push notification handling, over-the-air feature updates, and a special Expo build
    service for iOS and Android builds are available.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Expo设置新项目时，你可以选择两种不同的工作流程——裸工作流程和管理工作流程。在这两种工作流程中，框架为你提供了易于使用的库，用于包含相机、文件系统等原生元素。此外，还有推送通知处理、空中功能更新以及针对iOS和Android构建的特殊Expo构建服务等服务。
- en: If you choose the bare workflow, you have a plain React Native app and can add
    the Expo libraries you need. You can also add other third-party libraries, which
    is not possible in the managed workflow. There, you only write JavaScript or TypeScript
    code in the IDE of your choice; everything else is handled by the framework.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择裸工作流，你将拥有一个普通的 React Native 应用程序，并且可以添加你需要的 Expo 库。你还可以添加其他第三方库，这在托管工作流中是不可能的。在那里，你只需在你选择的
    IDE 中编写 JavaScript 或 TypeScript 代码；其他所有事情都由框架处理。
- en: On their home page ([https://docs.expo.dev/](https://docs.expo.dev/)), Expo
    suggests that you start with a managed workflow for a new app because it is always
    possible to switch over to a bare workflow, if necessary, by using the `expo eject`
    command in the CLI. This necessity can arise if you need to integrate a third-party
    package or library that is not supported by Expo, or if you want to add or change
    native code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的主页 ([https://docs.expo.dev/](https://docs.expo.dev/)) 上，Expo 建议你从一个新的应用开始使用托管工作流，因为如果需要，你总是可以通过在
    CLI 中使用 `expo eject` 命令切换到裸工作流。这种必要性可能出现在你需要集成一个由 Expo 不支持的第三方包或库，或者你想添加或更改原生代码的情况下。
- en: 'After initializing the app, you can run it by using the `expo start` command.
    This will start up the Metro bundler, which compiles the JavaScript code of the
    app using Babel. Additionally, it opens the Expo Developer CLI interface, where
    you can choose which simulator you want to open the app in, as shown in the following
    screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化应用程序后，你可以使用 `expo start` 命令来运行它。这将启动 Metro 打包器，使用 Babel 编译应用程序的 JavaScript
    代码。此外，它打开 Expo 开发者 CLI 界面，在那里你可以选择你想要在哪个模拟器中打开应用程序，如下面的截图所示：
- en: '![Figure 1.2 – Expo CLI Interface'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – Expo CLI 界面'
- en: '](img/B16694_01_02.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16694_01_02.jpg]'
- en: Figure 1.2 – Expo CLI Interface
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – Expo CLI 界面
- en: Expo Developer Tools provides access to the Metro bundler logs. It also creates
    key bindings for multiple options regarding how to run the app, such as iOS or
    Android simulators. Finally it creates a QR code that can be scanned with the
    Expo Go app. Expo even supports creating web applications from React Native code
    for most use cases.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Expo 开发者工具提供了访问 Metro 打包器日志的功能。它还创建了关于如何运行应用程序的多个选项的关键绑定，例如 iOS 或 Android 模拟器。最后，它创建了一个可以用
    Expo Go 应用扫描的二维码。对于大多数用例，Expo 还支持从 React Native 代码创建 Web 应用程序。
- en: With Expo, it’s very easy to run your app on a hard device – just install the
    Expo app on your smartphone or tablet and scan the QR code, as described previously.
    It’s also possible to run the app on several devices or simulators at the same
    time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Expo，在硬设备上运行你的应用程序非常简单——只需在你的智能手机或平板电脑上安装 Expo 应用，并扫描之前描述的二维码。同时运行在多个设备或模拟器上也是可能的。
- en: All these features make Expo a very handy and easy-to-use framework for mobile
    app development with React Native.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些特性使 Expo 成为使用 React Native 进行移动应用开发的非常方便且易于使用的框架。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the main concepts of the JavaScript library React.
    We have shown that React is declarative, component-based, and follows a *learn
    once, write everywhere* approach. These concepts are the base for the cross-platform
    mobile development framework React Native.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 JavaScript 库 React 的主要概念。我们已经展示了 React 是声明式的、基于组件的，并遵循“一次学习，到处编写”的方法。这些概念是跨平台移动开发框架
    React Native 的基础。
- en: You saw the main advantages of this framework, namely the huge community that
    provides additional packages and libraries, the fact that a lot of operating systems
    besides iOS and Android are available, and the usage of native elements via the
    Bridge or JSI. Last but not least, you discovered Expo as one way of setting up
    a React Native app, and you know when to use which Expo workflow.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了这个框架的主要优势，即庞大的社区提供了额外的包和库，许多操作系统（除了 iOS 和 Android）都可用，以及通过 Bridge 或 JSI
    使用原生元素。最后但同样重要的是，你发现了 Expo 作为设置 React Native 应用的一种方式，并且你知道何时使用哪种 Expo 工作流。
- en: In the next chapter, we will briefly talk about the most important facts and
    features of JavaScript and TypeScript.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将简要介绍 JavaScript 和 TypeScript 的最重要的事实和特性。
