- en: Chapter 4. Adding Attractive Visuals with jQuery Effects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。用 jQuery 效果添加引人入胜的视觉效果
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Sliding page elements
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑动页面元素
- en: Hiding and showing elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏和显示元素
- en: Fading elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 淡入淡出元素
- en: Toggling effects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换效果
- en: Stopping effects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止效果
- en: Chaining effects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接效果
- en: Creating a basic photo gallery
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基本的相册
- en: Creating a blinking button
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个闪烁的按钮
- en: Removing elements with effects
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用效果删除元素
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter will show you how to add simple effects to your interfaces to increase
    the overall aesthetics and user experience of your website. Adding basic effects
    to elements can have a huge impact on user's impressions. jQuery provides functions
    that allow the developer to quickly add effects such as slide, fade, hide, and
    more.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您展示如何向您的界面添加简单的效果，以增强网站的整体美观度和用户体验。向元素添加基本效果可以对用户的印象产生巨大影响。jQuery 提供了让开发人员快速添加效果（如滑动、淡入淡出、隐藏等）的功能。
- en: Sliding page elements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滑动页面元素
- en: The ability to slide page elements allows the developer to create an array of
    interfaces such as the accordion. This recipe will show you how to apply the slide
    effect to a range of elements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动页面元素的能力使开发人员能够创建一系列接口，如手风琴。这个食谱将向您展示如何将滑动效果应用于一系列元素。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using your favorite text editor or IDE, create a blank HTML page in an easily
    accessible location and save this file as `recipe-1.html`. Ensure that you have
    the latest version of jQuery downloaded at the same location as this HTML file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器或 IDE，在一个易于访问的位置创建一个空白的 HTML 页面，并将此文件保存为`recipe-1.html`。确保你已经在与此
    HTML 文件相同的位置下载了最新版本的 jQuery。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Learn how to use jQuery to slide page elements by performing the following
    steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤学习如何使用 jQuery 滑动页面元素：
- en: Add the following HTML code to `recipe-1.html`. Be sure to change the source
    location of the jQuery library, pointing it to where the latest version of jQuery
    is downloaded and placed on your computer.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-1.html`中。确保将 jQuery 库的源位置更改为下载并放置在您计算机上的最新版本 jQuery 的位置。
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You may have noticed that, in addition to the jQuery library file, we also
    included a second JavaScript file named `recipe-1.js`. Create this JavaScript
    file and save it in the same directory as the HTML file. Add the following JavaScript
    code to the `recipe-1.js` file:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了 jQuery 库文件之外，您可能还注意到我们还包含了一个名为`recipe-1.js`的第二个 JavaScript 文件。创建此 JavaScript
    文件并将其保存在与 HTML 文件相同的目录中。将以下 JavaScript 代码添加到`recipe-1.js`文件中：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Along with these two JavaScript files, we have also included a CSS file to
    add some style to our HTML elements. Create `recipe-1.css` within the same directory
    and add the following code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了这两个 JavaScript 文件，我们还包含了一个 CSS 文件，为我们的 HTML 元素添加了一些样式。在同一目录中创建`recipe-1.css`文件，并添加以下代码：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open `recipe-1.html` in a web browser and you should see a web page similar
    to the following screenshot:![How to do it…](img/0896OS_04_01.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络浏览器中打开`recipe-1.html`，您应该看到一个类似以下截图的网页：![如何做…](img/0896OS_04_01.jpg)
- en: Click on the **Slide Up** button to see the slide up effect applied to each
    of the colored box elements at different speeds; then click on **Slide Down**
    to see the reverse.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**向上滑动**按钮，以看到应用于每个彩色框元素的向上滑动效果，速度各异；然后单击**向下滑动**以查看相反效果。
- en: How it works…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Now, let's understand the steps performed previously in detail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解以前执行的步骤。
- en: HTML
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: The HTML file that we created for this recipe simply creates four boxes using
    div elements and then provides two buttons that can be used in conjunction with
    jQuery to trigger the element effects.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为此食谱创建的 HTML 文件简单地使用 div 元素创建了四个框，然后提供了两个按钮，可与 jQuery 结合使用来触发元素效果。
- en: jQuery
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery
- en: 'We wrap all our JavaScript code within `$(function(){});`. This will ensure
    our code is executed on page load. Inside the function, we attach a click event
    to each of the buttons as demonstrated in the following code snippet:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有 JavaScript 代码都包裹在`$(function(){});`中。这将确保我们的代码在页面加载时执行。在函数内部，我们按照以下代码片段所示，将点击事件附加到每个按钮：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `.click()` function allows us to provide a set of code to be executed when
    the corresponding button has been clicked by the user. Inside the callback function
    for each of the `.click()` methods, we select the div element of each box and
    use the jQuery `.slideUp()` and `.slideDown()` functions, depending on which button
    has been clicked.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`.click()` 函数允许我们在用户点击相应按钮后执行一组代码。在每个 `.click()` 方法的回调函数中，我们选择每个框的 div 元素，并使用
    jQuery 的 `.slideUp()` 和 `.slideDown()` 函数，具体取决于用户单击了哪个按钮。'
- en: The jQuery slide functions allow you to specify a range of parameters. In the
    preceding example, we have specified the effect duration in milliseconds. This
    allows us to control the time taken for each of the box elements to slide up or
    down, providing a waterfall effect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的幻灯片函数允许您指定一系列参数。在上面的例子中，我们已经指定了效果持续时间（以毫秒为单位）。这使我们能够控制每个框元素向上或向下滑动所花费的时间，从而提供瀑布效果。
- en: CSS
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS
- en: The CSS file we created adds style and positions each of the HTML elements,
    allowing us to best showcase the jQuery slide functionality. It allows us to change
    the background color of each of the boxes and allows us to center-align the interface.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的 CSS 文件添加了样式并定位了每个 HTML 元素，使我们能够最好地展示 jQuery 的幻灯片功能。它允许我们更改每个框的背景颜色，并允许我们将界面居中对齐。
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the previous example, if you click on both the **Slide Up** and **Slide Down**
    buttons multiple times, you may notice some flicker between the different box
    elements. This flicker occurs because when the slide up effect is complete, the
    CSS `display` property of the box element is set to `none`. This means that not
    only will the element be invisible but it also will not affect any neighboring
    elements in terms of position.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，如果您多次单击 **向上滑动** 和 **向下滑动** 按钮，您可能会注意到不同框元素之间的一些闪烁。这种闪烁是因为当向上滑动效果完成时，框元素的
    CSS `display` 属性被设置为 `none`。这意味着该元素不仅将不可见，而且还不会影响任何相邻元素的位置。
- en: 'Therefore, the element that is set to float left will have room to move further
    left as the box element that has completed its slide up effect is no longer in
    the way. This is shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将设置为左浮动的元素会有更多空间向左移动，因为完成其向上滑动效果的框元素不再妨碍。如下截图所示：
- en: '![There''s more...](img/0896OS_04_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/0896OS_04_02.jpg)'
- en: Here you can see the second, green box element has its display value set to
    `none`, causing the other box elements to float further to the left. The display
    may flicker more when the slide animations have been triggered multiple times
    and elements have to shift to the left as additional elements become invisible.
    Issues such as this can be prevented by not allowing the trigger to trigger the
    effects multiple times. A simple solution to this has been explained in the *Creating
    a basic photo gallery* recipe later on in this chapter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到第二个绿色框元素的显示值设置为 `none`，导致其他框元素进一步向左浮动。当幻灯片动画已经多次触发并且元素必须向左移动以使其他元素变得不可见时，显示可能会闪烁更多。可以通过不允许触发多次触发效果来防止此类问题。在本章后面的
    *创建基本相册* 配方中已经解释了这个问题的一个简单解决方案。
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Fading elements*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*淡入淡出元素*'
- en: '*Hiding and showing elements*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*隐藏和显示元素*'
- en: '*Creating a basic photo gallery*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建基本的相册*'
- en: Hiding and showing elements
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏和显示元素
- en: jQuery includes functions that will allow you to simply hide and show elements,
    although you can use these functions in conjunction with other effects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 包含一些函数，可以让您简单地隐藏和显示元素，尽管您可以将这些函数与其他效果结合使用。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a new HTML file named `recipe-2.html` and save it to the same folder
    as your jQuery library.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `recipe-2.html` 的新 HTML 文件，并将其保存到与您的 jQuery 库相同的文件夹中。
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Understand how you can use jQuery to easily hide and show elements in the DOM
    by performing the following steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤，了解如何使用 jQuery 轻松隐藏和显示 DOM 中的元素：
- en: In `recipe-2.html`, add the following HTML code. Ensure that the reference to
    the jQuery library is pointing to the correct location and filename of your downloaded
    version.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `recipe-2.html` 中，添加以下 HTML 代码。确保对 jQuery 库的引用指向您下载版本的正确位置和文件名。
- en: '[PRE4]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a JavaScript file named `recipe-2.js` and save it within the same directory
    as the HTML file you have just created. Add the following JavaScript code to this
    file:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `recipe-2.js` 的 JavaScript 文件，并将其保存在与您刚刚创建的 HTML 文件相同的目录中。将以下 JavaScript
    代码添加到此文件中：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Opening `recipe-2.html` in a web browser will present you with a very basic
    web page that has two buttons and some text. Clicking on the **Show** and **Hide**
    buttons will perform the associated effect on the text, demonstrating how simple
    it is to show and hide elements with jQuery.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中打开`recipe-2.html`将呈现出一个非常基本的网页，其中包含两个按钮和一些文本。单击**显示**和**隐藏**按钮将在文本上执行相关效果，演示如何使用
    jQuery 显示和隐藏元素是多么简单。
- en: How it works…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Now, let's understand the steps performed previously in detail.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解之前执行的步骤。
- en: HTML
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: The HTML code used in this recipe is very basic and needs little explanation.
    The HTML code creates a web page with two buttons. Each has its own ID—`show`
    and `hide`. There is also a single paragraph element with a `text` class. The
    IDs will be used by jQuery to listen a click event and perform effects on the
    paragraph element.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中使用的 HTML 代码非常基础，需要很少的解释。HTML 代码创建了一个带有两个按钮的网页。每个按钮都有自己的 ID——`show`和`hide`。还有一个具有`text`类的单个段落元素。jQuery
    将使用这些 ID 来监听点击事件并在段落元素上执行效果。
- en: jQuery
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery
- en: 'Similar to the previous recipe, we attach a click event handler to each of
    the buttons. This allows us to perform the effects based on which button has been
    clicked. To do this, we use the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一篇配方类似，我们为每个按钮附加了一个点击事件处理程序。这使我们能够根据点击了哪个按钮来执行效果。为此，我们使用以下代码：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To perform the show and hide effects, we use the corresponding jQuery functions,
    `show()` and `hide()`. These jQuery functions simply toggle the display property
    of the selected element (in this case, the paragraph element is of the `text`
    class). The `display` property is set to `none` to hide the element; it is set
    to block to show the element.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行显示和隐藏效果，我们使用相应的 jQuery 函数`show()`和`hide()`。这些 jQuery 函数简单地切换所选元素的显示属性（在本例中，段落元素具有`text`类）。将`display`属性设置为`none`可隐藏元素；将其设置为`block`可显示元素。
- en: There's more…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There are additional benefits to using jQuery's `show()` and `hide()` functions.
    Using jQuery, you can show and hide elements based on their inner HTML code. You
    can also use the `show()` and `hide()` functions in conjunction with other jQuery
    effects or animations.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 的`show()`和`hide()`函数有额外的好处。使用 jQuery，您可以根据它们的内部 HTML 代码显示和隐藏元素。您还可以将`show()`和`hide()`函数与其他
    jQuery 效果或动画一起使用。
- en: See also
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Fading elements*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*淡入淡出元素*'
- en: '*Sliding page elements*'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*滑动页面元素*'
- en: Fading elements
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 淡入淡出元素
- en: If showing or hiding elements is not enough, jQuery provides the ability to
    fade HTML elements in and out. This recipe utilizes the jQuery's fade-in and fade-out
    functionalities to add more effect when choosing to display or hide elements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仅仅显示或隐藏元素还不够，jQuery 提供了淡入淡出 HTML 元素的功能。此配方利用了 jQuery 的淡入和淡出功能，在选择显示或隐藏元素时添加了更多效果。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML file named `recipe-3.html` and save it in the same directory
    as the latest version of jQuery.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-3.html`的空白 HTML 文件，并将其保存在与最新版本的 jQuery 相同的目录中。
- en: How to do it…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Use jQuery to fade DOM elements in and out by performing the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 执行以下步骤来淡入淡出 DOM 元素：
- en: 'Add the following HTML code to `recipe-3.html`, ensuring the reference to the
    jQuery library is correct:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-3.html`，确保对 jQuery 库的引用正确：
- en: '[PRE7]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a CSS file in the same directory. Save it as `recipe-3.css` and add
    the following code to style the HTML page:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同目录中创建一个 CSS 文件。将其保存为`recipe-3.css`，并添加以下代码来为 HTML 页面设置样式：
- en: '[PRE8]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a JavaScript file named `recipe-3.js` and add the following jQuery code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-3.js`的 JavaScript 文件，并添加以下 jQuery 代码：
- en: '[PRE9]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Open `recipe-3.html` in a web browser and you will be presented with a web page
    similar to the following screenshot:![How to do it…](img/0896OS_04_03.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中打开`recipe-3.html`，你将看到一个类似以下截图的网页:![如何做…](img/0896OS_04_03.jpg)
- en: Entering some text into the **Add Item** textbox and clicking on the **Add**
    button will append the inputted text to a list using the jQuery fade effect.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加项目**文本框中输入一些文本，然后单击**添加**按钮将使用 jQuery 淡入效果将输入的文本追加到列表中。
- en: How it works…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Now, let's understand the steps performed previously in detail.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解之前执行的步骤。
- en: HTML
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: The HTML code creates a simple interface that includes the text input with a
    button and an empty ordered list element, which can then be populated with jQuery.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 代码创建了一个包含文本输入和按钮以及一个空有序列表元素的简单界面，然后可以使用 jQuery 填充它。
- en: CSS
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS
- en: A CSS file was added to position and style the simple user interface so we could
    better demonstrate the fade effect with jQuery.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个CSS文件以定位和样式化简单的用户界面，这样我们就可以更好地用jQuery展示淡入效果。
- en: jQuery
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery
- en: 'First of all, the jQuery code attaches a click event to the **Add** button
    using the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，jQuery代码使用以下代码将一个点击事件附加到**添加**按钮：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We add the following code to this callback function to provide the desired
    effect of adding the input text to the list using the `fadeIn()` function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此回调函数中添加了以下代码，以提供所需的效果，使用`fadeIn()`函数将输入文本添加到列表中：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code creates the `item` variable and assigns the value of the input box
    to it using `$('#new-item').val()`. We then check to see if the length of this
    value is greater than zero, as we do not want to add blank items to the list.
    We are able to check the length of a string with JavaScript by simply using `variablename.length`
    (in this example, `item.length`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建了`item`变量，并使用`$('#new-item').val()`将输入框的值赋给它。然后我们检查这个值的长度是否大于零，因为我们不想向列表中添加空白项。我们可以使用JavaScript简单地使用`variablename.length`（在本例中为`item.length`）来检查字符串的长度。
- en: Within this `if` statement, we create another variable named `newItem`. We assign
    to it a newly created HTML list item element with the value from the input box
    using the `item` variable. We wrap the list item within jQuery's selector (`$()`),
    allowing us to use the `fadeIn()` function on this DOM element.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`if`语句内部，我们创建另一个名为`newItem`的变量。我们将一个新创建的HTML列表项元素赋值给它，值是来自输入框的`item`变量。我们使用jQuery的选择器（`$()`）将列表项封装起来，这使我们能够对此DOM元素使用`fadeIn()`函数。
- en: Now that we have a list item, we can append it to the ordered list element with
    the class name `list` by using the jQuery-provided `append()` function. This will
    add the newly created DOM element as the last child of the ordered list. Because
    we used the `fadeIn()` function on this DOM element, it will firstly appear hidden
    and then fade in, giving us our desired effect.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个列表项，我们可以使用jQuery提供的`append()`函数将其追加到具有类名`list`的有序列表元素中。这将把新创建的DOM元素添加为有序列表的最后一个子元素。因为我们在这个DOM元素上使用了`fadeIn()`函数，它首先会隐藏，然后淡入，从而得到我们想要的效果。
- en: There's more…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Within this recipe, we used the `fadeIn()` function, which allows us to take
    an element from invisible to visible with the fade effect. jQuery also provides
    us with a `fadeOut()` function that offers the reverse functionality. Both of
    these functions take a range of parameters, allowing the developer to adjust the
    behavior. The primary parameter is duration, which allows us to specify how long
    it takes the element to fade in or out in milliseconds. Read about the available
    options for these functions at [http://api.jquery.com/fadeIn/](http://api.jquery.com/fadeIn/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们使用了`fadeIn()`函数，它允许我们使用淡入效果将一个不可见的元素变为可见。jQuery还为我们提供了一个`fadeOut()`函数，它提供了相反的功能。这两个函数都接受一系列参数，允许开发人员调整行为。主要参数是持续时间，它允许我们以毫秒为单位指定元素淡入或淡出的时间。阅读有关这些函数的可用选项的更多信息，请访问[http://api.jquery.com/fadeIn/](http://api.jquery.com/fadeIn/)。
- en: Additionally, jQuery provides a `fadeTo()` function, allowing you to adjust
    the opacity of an element if you do not want to completely hide or show it once
    the effect has completed. Read more about this functionality at [http://api.jquery.com/fadeTo/](http://api.jquery.com/fadeTo/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，jQuery提供了一个`fadeTo()`函数，允许您在效果完成后不完全隐藏或显示元素，调整元素的不透明度。了解更多功能，请访问[http://api.jquery.com/fadeTo/](http://api.jquery.com/fadeTo/)。
- en: See also
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Removing elements with effects*'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用效果删除元素*'
- en: '*Creating a basic photo gallery*'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个基本的照片库*'
- en: '*Creating a blinking button*'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个闪烁的按钮*'
- en: Toggling effects
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换效果
- en: Many of the jQuery effects have opposing functions, such as `hide()` and `show()`
    and `fadeIn()` and `fadeOut()`. So far, the recipes in this chapter have handled
    each of these functions separately; for example, one button to show and another
    to hide. For some of these functions, jQuery provides us with the ability to be
    able to toggle these opposing effects. This is beneficial because we do not need
    to deal with each case separately or decide which of the two we need to use. This
    recipe will look at the toggle functions and show you how they can be used.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 许多jQuery效果都有相反的功能，例如`hide()`和`show()`以及`fadeIn()`和`fadeOut()`。到目前为止，本章中的代码示例已经分别处理了每一个函数；例如，一个按钮用于显示，另一个按钮用于隐藏。对于其中一些函数，jQuery提供了能够切换这些相反效果的能力。这是有益的，因为我们不需要单独处理每种情况，或者决定我们需要使用其中的哪一个。本文将查看切换功能，并向您展示如何使用它们。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In your favorite text editor or IDE, create a blank HTML file named `recipe-4.html`
    and save it in the same directory as your jQuery library.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在您喜欢的文本编辑器或 IDE 中，创建一个名为`recipe-4.html`的空白 HTML 文件，并将其保存在与您的 jQuery 库相同的目录中。
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Add the following HTML code to `recipe-4.html` to create a basic web page:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到`recipe-4.html`以创建一个基本的网页：
- en: '[PRE12]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You may have noticed that we are including a JavaScript file in this HTML page.
    Create this JavaScript file in the same directory as `recipe-4.html` and save
    it as `recipe-4.js`. Add the following jQuery code to this file to attach click
    event handlers to the button elements within the HTML:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们在此 HTML 页面中包含了一个 JavaScript 文件。在与`recipe-4.html`相同的目录中创建此 JavaScript
    文件，并将其保存为`recipe-4.js`。将以下 jQuery 代码添加到此文件中，以将点击事件处理程序附加到 HTML 中的按钮元素：
- en: '[PRE13]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Open `recipe-4.html` in a web browser and you should see a web page similar
    to the following screenshot:![How to do it…](img/0896OS_04_04.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 web 浏览器中打开`recipe-4.html`，您应该看到一个类似于以下截图的网页：![操作步骤…](img/0896OS_04_04.jpg)
- en: Clicking on one of the buttons will toggle the associated effect and apply it
    to the paragraph element.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击其中一个按钮将切换相关效果并将其应用于段落元素。
- en: How it works…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Now, let's understand the steps performed previously in detail.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解先前执行的步骤。
- en: HTML
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: The HTML code in this recipe creates a paragraph element with some text. This
    element has the class name of `text`, which allows us to select this element and
    perform a range of effects. In addition to this paragraph element, the HTML provides
    three different buttons. Each button has a different class name, allowing us to
    detect each individual click with jQuery and perform different effects based on
    the clicked button.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中的 HTML 代码创建了一个带有一些文本的段落元素。该元素具有`text`类名，允许我们选择此元素并执行一系列效果。除了这个段落元素之外，HTML
    还提供了三个不同的按钮。每个按钮都有不同的类名，允许我们使用 jQuery 检测每个单独的点击并根据点击的按钮执行不同的效果。
- en: jQuery
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery
- en: The jQuery code in this recipe is very basic. On page load, we attach a click
    event handler to each of the buttons. Each click event handler has a different
    toggle function inside its callback function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中的 jQuery 代码非常基础。在页面加载时，我们为每个按钮附加一个点击事件处理程序。每个点击事件处理程序在其回调函数内部有一个不同的切换功能。
- en: jQuery's toggle functions determine the state of the selected element and then
    perform the opposing effect. This means that we do not need to program this logic
    into our application and can offload it to jQuery. By using the `toggleFade()`
    function, we can use one line of code to fade the paragraph element in or out
    without having to code for each scenario, as we have done in previous recipes.
    The same goes for the `slideToggle()` method, which performs the slide animation.
    Finally, we can use the `toggle` method, which simply hides or shows the selected
    element.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 的切换函数确定了所选元素的状态，然后执行相反的效果。这意味着我们不需要将此逻辑编程到我们的应用程序中，而可以将其卸载到 jQuery。通过使用`toggleFade()`函数，我们可以使用一行代码来淡入或淡出段落元素，而无需针对每种情况编码，就像我们在先前的示例中所做的那样。对于执行滑动动画的`slideToggle()`方法也是如此。最后，我们可以使用`toggle`方法，它简单地隐藏或显示所选元素。
- en: There's more…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容……
- en: 'Like other jQuery effect functions, the toggle functions take a set of optional
    parameters. The main parameter is the effect duration. The following code will
    force the slide effect to last for 1000 milliseconds:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 jQuery 效果函数一样，切换函数还可以接受一组可选参数。主要参数是效果持续时间。以下代码将强制幻灯片效果持续 1000 毫秒：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can read about the other available options as part of the jQuery API documentation,
    which can be found at [http://api.jquery.com/slideToggle/](http://api.jquery.com/slideToggle/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 jQuery API 文档中阅读有关其他可用选项的信息，该文档位于[http://api.jquery.com/slideToggle/](http://api.jquery.com/slideToggle/)。
- en: Stopping effects
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止效果
- en: As your application grows and you begin to have more complex effects, you may
    want to be able to stop these effects and transitions. This could be due to a
    user action that negates the requirement for a current effect or some other form
    of event.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的应用程序的增长以及开始使用更复杂的效果，您可能希望能够停止这些效果和转换。这可能是由于用户动作导致不再需要当前效果或某种其他形式的事件。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML document named `recipe-5.html` and save it to the same directory
    as the latest version of the jQuery library.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-5.html`的空白 HTML 文档，并将其保存到最新版本的 jQuery 库所在的相同目录中。
- en: How to do it…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Learn to stop jQuery effects by performing the following steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 学习通过执行以下步骤停止 jQuery 效果：
- en: 'Add the following HTML code to `recipe-5.html` to create a basic web page that
    will allow us to demonstrate how to stop effects:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到`recipe-5.html`中，以创建一个基本的网页，用于演示如何停止效果：
- en: '[PRE15]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To allow us to better demonstrate the jQuery effects, we need to add some CSS
    code to style and position the HTML elements in `recipe-5.html`. Create a CSS
    file named `recipe-5.css` in the same directory and add the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了更好地演示jQuery效果，我们需要添加一些CSS代码来样式化和定位`recipe-5.html`中的HTML元素。在同一目录中创建一个名为`recipe-5.css`的CSS文件，并添加以下代码：
- en: '[PRE16]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To start and stop the jQuery effects, create a JavaScript file named `recipe-5.js`
    and save it in the same directory as the HTML and CSS files. Add the following
    jQuery code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动和停止jQuery效果，请创建一个名为`recipe-5.js`的JavaScript文件，并将其保存在与HTML和CSS文件相同的目录中。添加以下jQuery代码：
- en: '[PRE17]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Open `recipe-5.html` in a web browser and you will be presented with a web page
    similar to the following screenshot:![How to do it…](img/0896OS_04_05.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`recipe-5.html`，您将看到一个类似以下屏幕截图的网页：![操作步骤…](img/0896OS_04_05.jpg)
- en: Clicking on the **Slide** button will begin the effect, and the green box division
    element will start to slide upward for 1000 milliseconds. Clicking on the **Stop**
    button will stop the effect at the point that you clicked it, and the **Finish**
    button will instantly complete the effect.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Slide**按钮将开始该效果，绿色框division元素将开始向上滑动1000毫秒。单击**Stop**按钮将在您单击它的点停止效果，**Finish**按钮将立即完成效果。
- en: How it works…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Now, let's understand the steps performed previously in detail.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解之前执行的步骤。
- en: HTML
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: Our simple HTML for this recipe provides us with a division element to which
    jQuery can apply effects, some buttons that can be used to trigger jQuery code,
    and a list that we can use to output some information about the executed jQuery
    code.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这个教程的简单HTML为我们提供了一个可以应用效果的division元素，一些可以用于触发jQuery代码的按钮，以及我们可以用来输出有关执行的jQuery代码的一些信息的列表。
- en: CSS
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS
- en: The CSS code that was included into the HTML page allows us to position each
    of the HTML elements in a way that allows us to easily demonstrate the effects
    in this recipe.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在HTML页面中的CSS代码使我们能够以一种能够轻松演示本教程中效果的方式定位每个HTML元素。
- en: jQuery
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery
- en: 'We attach three different click event handlers to the three buttons in our
    HTML page, selecting them by using their IDs: `slide`, `stop`, and `finish`. Within
    the callback functions to these event handlers, we start the slide effect using
    the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在HTML页面中为三个按钮附加了三个不同的点击事件处理程序，通过使用它们的ID进行选择：`slide`、`stop`和`finish`。在这些事件处理程序的回调函数中，我们使用以下代码启动幻灯片效果：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We have used the `slideToggle()` function to start either the slide down or
    slide up effect based on whether the `slideMe` division element is currently visible
    or not. We provide the `slideToggle()` function with two parameters. The first
    parameter is the duration in which we wish the slide effect to take effect. The
    second parameter is a callback function, which will be executed once the animation
    has been finished.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`slideToggle()`函数来启动滑下或滑上效果，这取决于`slideMe`division元素当前是否可见。我们向`slideToggle()`函数提供了两个参数。第一个参数是我们希望滑动效果生效的持续时间。第二个参数是一个回调函数，一旦动画完成，将执行该函数。
- en: Inside this callback function, we append a list item to the unordered list element
    with the class name `output`. This means that when the slide effect has fully
    completed, a new list item will be visible within the `output` list. We have done
    this to demonstrate the difference between stopping an effect and finishing one,
    which is described later in this section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个回调函数中，我们向具有类名`output`的无序列表元素追加了一个列表项。这意味着当幻灯片效果完全完成时，将在`output`列表中可见一个新的列表项。我们这样做是为了演示停止效果和完成效果之间的区别，后面的部分将对此进行描述。
- en: 'The other two event handlers, described in the following code snippet, select
    the `slideMe` division element the same way as the previously mentioned event
    handler does, except these do not start an effect but stop the current one:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个事件处理程序，如下面的代码片段所述，以与先前提到的事件处理程序相同的方式选择`slideMe`division元素，除了这些不会启动一个效果，而是停止当前的效果：
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `stop()` function will halt any currently running effects on the selected
    element. If the slide-up effect was half-way through completion and you clicked
    on **Stop**, you will see half of the green `slideMe` division element. The `stop()`
    function does not complete the slide effect, and therefore the `slideToggle()`
    callback function will not be executed and a list item will not be added to the
    output list. On the contrary, the `finish()` function instantly completes any
    effects being executed on the selected element. This means that if the slide-up
    effect was half-way through completion and you clicked on **Finish**, the `slideMe`
    division element will instantly become invisible and then a new item added to
    the output list, reading **Slide effect completed**. If there is code inside an
    effects callback function that is vital to your application, you can use `finish()`
    to ensure it is executed. Alternatively, you may not want to execute this code
    and/or want to visibly stop the effect; in this case, you would use `stop()`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`stop()`函数将停止在所选元素上当前正在运行的任何效果。如果滑动向上效果已经完成一半，您单击了**Stop**，您将看到一半绿色的`slideMe`分区元素。`stop()`函数不会完成滑动效果，因此`slideToggle()`回调函数不会被执行，并且不会向输出列表添加列表项。相反，`finish()`函数会立即完成在所选元素上正在执行的任何效果。这意味着如果滑动向上效果已经完成一半，您单击了**Finish**，`slideMe`分区元素将立即变为不可见，然后向输出列表添加一个新项，上面写着**滑动效果已完成**。如果在效果回调函数中存在对您的应用程序至关重要的代码，您可以使用`finish()`来确保它被执行。或者，您可能不想执行此代码和/或想要明显地停止效果；在这种情况下，您将使用`stop()`。'
- en: Chaining effects
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 串联效果
- en: jQuery allows us to chain the different effect functions onto a single selected
    element. This allows us to easily perform multiple effects in a sequential order.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 允许我们将不同的效果函数链到单个选定元素上。这使我们能够轻松地按顺序执行多个效果。
- en: How to do it…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Learn to use a powerful feature of jQuery to write better code by performing
    the following steps:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤，学习使用 jQuery 的强大功能来编写更好的代码：
- en: 'Create a blank HTML file named `recipe-6.html` and save it to an easily accessible
    location on your computer. Add the following HTML code to this file, ensuring
    to update the reference to the jQuery library:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-6.html`的空白 HTML 文件，并将其保存在计算机上易于访问的位置。将以下 HTML 代码添加到此文件中，并确保更新对
    jQuery 库的引用：
- en: '[PRE20]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a CSS file named `recipe-6.css` and add the following code:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-6.css`的 CSS 文件，并添加以下代码：
- en: '[PRE21]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Open the `recipe-6.html` file in a web page and click on the **Start** button.
    The red-colored box will perform a range of effects.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页中打开`recipe-6.html`文件，然后单击**Start**按钮。红色框将执行一系列效果。
- en: How it works…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'This recipe provides a very simple example as to how you can chain the different
    effect functions that jQuery provides. In this example, we perform `fadeOut()`,
    `fadeIn`, `slideUp()`, `slideDown()`, and two `fadeTo()` effects on the box div
    element. Each of these effects will be executed in turn due to the following code,
    which is placed within the click event handler callback function for the `start`
    button:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例提供了一个非常简单的例子，说明了如何串联 jQuery 提供的不同效果函数。在此示例中，我们对盒子 div 元素执行`fadeOut()`、`fadeIn`、`slideUp()`、`slideDown()`和两个`fadeTo()`效果。由于以下代码位于`start`按钮的单击事件处理程序回调函数中，因此这些效果将依次执行：
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `fadeTo()` functions, which animate and alter the selected elements' opacity,
    have been provided with two parameters. The first parameter is the duration of
    the effect in milliseconds and the second is the opacity the effect should finish
    on.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`fadeTo()`函数会为选定的元素动画并改变其不透明度，它们都被提供了两个参数。第一个参数是效果持续的毫秒数，第二个是效果应该完成的不透明度。'
- en: See also
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Creating a basic photo gallery*'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建基本的图库*'
- en: Creating a basic photo gallery
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基本的图库
- en: Most people are aware that there are many jQuery photo gallery implementations
    available on the Web; many as jQuery plugins, which allow for quick implementation.
    There are benefits to taking the time to learn how to create your own. You will
    gain a deep understanding of how some of these plugins work, making it easier
    for you to customize them to better suit your needs. You will also learn more
    great features of jQuery and how to implement some of the skills you have learned
    earlier in this book.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人都知道网络上有许多 jQuery 图库实现可供使用；其中许多是 jQuery 插件，可以快速实现。学习如何创建自己的图库也有好处。您将深入了解其中一些插件的工作原理，从而更轻松地定制它们以更好地满足您的需求。您还将了解更多关于
    jQuery 的强大功能以及如何在本书中前面学到的技能。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will first need a blank HTML file named `recipe-7.html` saved in the same
    directory as the latest version of jQuery. To create an image gallery, we are
    also going to need some images. Find a variety of images freely available on the
    Internet for use in this recipe. Save at least eight images within a folder named
    `images` in the same directory as the `recipe-7.html` file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要一个名为`recipe-7.html`的空白HTML文件，保存在与最新版本的jQuery相同的目录中。要创建一个图像画廊，我们还需要一些图像。在与`recipe-7.html`文件相同的目录中创建一个名为`images`的文件夹，并保存至少八张在Internet上免费可用的图像。
- en: How to do it…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Learn how to create an attractive photo gallery from scratch with jQuery by
    performing the following steps:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤学习如何从头开始使用jQuery创建一个吸引人的相册：
- en: 'Add the following HTML code to `recipe-7.html` to create our web page and image
    gallery HTML template:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下HTML代码添加到`recipe-7.html`以创建我们的网页和图像画廊HTML模板：
- en: '[PRE23]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Update the source (`src="img/code>) for each image inside the frame division
    element to point to the images you have just added.`
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新frame division元素内每个图像的源（`src="img/code>`），使其指向您刚刚添加的图像。
- en: '`Create a CSS file in the same directory as `recipe-7.html` named `recipe-7.css`
    and add the following CSS code to style our gallery:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`recipe-7.html`相同的目录中创建一个名为`recipe-7.css`的CSS文件，并添加以下CSS代码来样式化我们的画廊：
- en: '[PRE24]`'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE24]`'
- en: '`Create a JavaScript file named `recipe-7.js` and add the following JavaScript
    code to ignite our gallery into action:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-7.js`的JavaScript文件，并添加以下JavaScript代码来启动我们的画廊：
- en: '[PRE25]`'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE25]`'
- en: '`Open `recipe-7.html` in a web browser and you will be presented with a jQuery
    image gallery similar to the following screenshot:![How to do it…](img/0896OS_04_06.jpg)`'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中打开`recipe-7.html`，您将看到一个类似以下截图的jQuery图像画廊：![How to do it…](img/0896OS_04_06.jpg)`
- en: '`Selecting the left and right arrows will allow you to scroll through the photos,
    and clicking on a photo will show the larger version in the main frame.`'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择左右箭头将允许您滚动照片，单击照片将在主框架中显示较大版本。
- en: '`How it works…`'
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: '`Now, let us understand the steps performed previously in detail.`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们详细了解之前执行的步骤。
- en: '`HTML`'
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML
- en: '`Thanks to jQuery, we are able to create an attractive and functional gallery
    with a minimal amount of HTML code. In addition to the basic HTML document structure,
    we define a division element with the class `gallery`. The following is the division
    element code that the jQuery will use to base most of its DOM interactions:`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 由于jQuery的帮助，我们能够用极少的HTML代码创建一个吸引人且功能齐全的画廊。除了基本的HTML文档结构之外，我们还定义了一个类为`gallery`的division元素。以下是jQuery将用来基于大多数DOM交互的division元素代码：
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`Additionally, we also use the HTML5 data attribute to define the thumbnail
    width. Our jQuery code will use this value to size the thumbnails.`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们还使用HTML5数据属性来定义缩略图的宽度。我们的jQuery代码将使用此值来调整缩略图的大小。
- en: '`Using the following HTML code, we also create a division element with the
    class name of `frame` whose siblings are the images that we want to display within
    our gallery:`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下HTML代码，我们还创建了一个类名为`frame`的division元素，其兄弟元素是我们想要在画廊中显示的图像：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`Finally, in our HTML, we create a left and right arrow, which will be used
    in conjunction with jQuery to scroll through the image thumbnails. We also create
    a div element with the class `thumbs`, which will be populated with the thumbnail
    images using the following jQuery code:`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的HTML中，我们创建一个左右箭头，它将与jQuery一起使用来滚动图像缩略图。我们还创建了一个类为`thumbs`的div元素，将使用以下jQuery代码填充缩略图图像：
- en: '[PRE28]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`CSS`'
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS
- en: '`Most of the CSS code used in this recipe is very basic and simply places elements
    in the appropriate place on the page. The main gallery division element is set
    to 600 pixels in width and to be centered on the screen. To allow us to place
    the left and right arrows outside the gallery frame, we set their position to
    absolute and use negative margins to push them further left and right.`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中使用的大部分CSS代码都非常基础，只是将元素放置在页面的适当位置。主画廊division元素设置为600像素宽，并居中显示在屏幕上。为了使我们能够将左右箭头放在画廊框架外部，我们将它们的位置设置为绝对，并使用负边距将它们推到更左和更右。
- en: '`The main thumbnail scrolling section has its `overflow` value set to `hidden`,
    preventing the bulk of the thumbnails from being displayed. This allows us to
    scroll these elements into view using jQuery. The thumbnails themselves have their
    `display` value set to `inline-block`, allowing them to stack next to each other
    in a single line, left to right.`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 主缩略图滚动部分的 `overflow` 值设置为 `hidden`，防止大部分缩略图被显示。 这使我们可以使用 jQuery 将这些元素滚动到视图中。
    缩略图本身的 `display` 值设置为 `inline-block`，允许它们在单行中左到右堆叠在一起。
- en: '`For additional effect, we have also used some basic CSS animations. The thumbnails
    have their opacity set to `0.5` so that they do not become the prominent focus
    of the application. CSS transitions are used to create a fade in effect when the
    user hovers over the thumbnails, as follows:`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了产生附加效果，我们还使用了一些基本的 CSS 动画。 缩略图的不透明度设置为 `0.5`，以便它们不会成为应用程序的主要焦点。 当用户悬停在缩略图上时，使用
    CSS 过渡创建淡入效果，如下所示：
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`In addition to the official CSS3 `transition` property, we are also using
    the browser-specific alternatives to ensure the CSS animations work in all of
    the most popular browsers.`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 除了官方的 CSS3 `transition` 属性之外，我们还使用了浏览器特定的替代方案，以确保 CSS 动画在所有最流行的浏览器中都能正常工作。
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`jQuery`'
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery
- en: '`Two variables are declared at the beginning of the JavaScript file so their
    values can be used throughout the application; these are known as global variables.
    The bulk of the application code is placed within the jQuery on-load function
    so that the code is executed once the page has been loaded, as follows:`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`JavaScript` 文件开头声明了两个变量，以便它们的值可以在整个应用程序中使用；这些变量称为全局变量。 应用程序代码的大部分被放置在 jQuery
    的加载函数中，这样一旦页面加载完成，代码就会执行，如下所示：'
- en: '[PRE31]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`The jQuery `data()` function is used to extract the thumbnail width from the
    HTML code that we created earlier. This value is then stored within the `imageWidth`
    variable for use later in the application. The `$(''.gallery'').find(''img'')`
    function is used to search for all the `img` elements within the `gallery` div
    element and store them as an array in the `images` variable. jQuery''s `$.each()`
    function is used to iterate through each of the `img` elements in the images array.
    Inside the callback function of `$.each()`, we first use the `addClass()` function
    to add a class to the main image element based on the array index (that is, `img0`,
    `img1`, and so on). Then, an anchor element is created with an image inside and
    the width set using the `imageWidth` variable declared earlier. Using the `append()`
    function, the anchor element is then inserted into the DOM inside the `thumbs`
    div element. Additionally, the `data-index` property value of this anchor is set
    to match the class name of the larger image.`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 的 `data()` 函数从我们之前创建的 HTML 代码中提取缩略图宽度。 然后将该值存储在 `imageWidth` 变量中，供以后在应用程序中使用。
    使用 `$('.gallery').find('img')` 函数搜索 `gallery` div 元素中的所有 `img` 元素并将它们存储为 `images`
    变量中的数组。 使用 jQuery `$.each()` 函数来迭代 images 数组中的每个 `img` 元素。 在 `$.each()` 的回调函数中，我们首先使用
    `addClass()` 函数基于数组索引为主图像元素添加一个类（即 `img0`、`img1` 等等）。 然后，创建一个带有图像的锚元素，并使用先前声明的
    `imageWidth` 变量来设置宽度。 使用 `append()` 函数，然后将锚元素插入到 DOM 中 `thumbs` div 元素中。 此外，该锚元素的
    `data-index` 属性值设置为与较大图像的类名相匹配。
- en: '`In the `$.each()` function, we call a custom function named `updateScrollButtons`,
    which is declared at the end of the JavaScript file. This function is used to
    determine whether the arrow buttons should be enabled based on the current position
    of the thumbnails. This prevents the user from scrolling the thumbnails out of
    the bottom section of the image gallery. Once the user has scrolled right to the
    last thumbnail, the right arrow button is disabled. Once the user has scrolled
    left to the first thumbnail, the left arrow button is disabled.`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `$.each()` 函数中，我们调用一个名为 `updateScrollButtons` 的自定义函数，该函数在 JavaScript 文件的末尾声明。
    该函数用于根据当前缩略图的位置确定是否应该启用箭头按钮。 这可以防止用户将缩略图滚动到图像库的底部部分。 一旦用户向右滚动到最后的缩略图，右箭头按钮就会被禁用。
    一旦用户向左滚动到第一个缩略图，左箭头按钮就会被禁用。
- en: '`Next, using the following code we attach a click event handler to each of
    the arrow buttons so we can detect when the user wants to scroll through the thumbnail
    images.`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下代码为每个箭头按钮附加了一个点击事件处理程序，以便我们可以检测用户何时想要浏览缩略图图像。
- en: '[PRE32]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`In the callback function of the click event handler, we first declare a variable
    and store the click element within it referring to `$(this)`, meaning the clicked
    element. Using this variable, we can use the jQuery function `hasClass` to determine
    if the clicked element has the class `disabled`. We wrap all the code within this
    function inside an `if` statement so that none of this code will be executed if
    the clicked element has the `disabled` class. In the `if` statement, we use `addClass`
    to add the `disabled` class to the clicked element. This is to prevent the user
    from being able to spam-click on the scroll arrows and cause undesired animations.`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击事件处理程序的回调函数中，我们首先声明一个变量，并将点击的元素存储在其中，引用为 `$(this)`，意思是点击的元素。使用此变量，我们可以使用
    jQuery 函数 `hasClass` 来确定点击的元素是否具有类 `disabled`。我们将此函数中的所有代码包装在 `if` 语句中，以便如果点击的元素具有
    `disabled` 类，则不执行此代码。在 `if` 语句中，我们使用 `addClass` 将 `disabled` 类添加到点击的元素中。这是为了防止用户能够频繁点击滚动箭头并导致不希望的动画效果。
- en: '`We also have a variable declared named `scrollString` that has the default
    value of `-=`. This value will be used within the jQuery `animate()` function
    that will provide the scrolling animation to our thumbnails. Depending on the
    `data-direction` property value of the arrow that is clicked, this value will
    either stay as `-=`, meaning that the left margin of the `thumbs` div will be
    taken away from (that is, scrolled right), or the value will change to `+=`, meaning
    that the left margin will be added to (that is, scrolled left).`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还声明了一个名为 `scrollString` 的变量，其默认值为 `-=`。该值将在 jQuery 的 `animate()` 函数中使用，该函数将为我们的缩略图提供滚动动画。根据所点击的箭头的
    `data-direction` 属性值，此值将保持为 `-=`，这意味着 `thumbs` div 的左边距将被减去（即向右滚动），或者该值将更改为 `+=`，这意味着左边距将被添加（即向左滚动）。
- en: '`Finally, within this event handler callback function, the jQuery `animate()`
    function is used to modify the left margin of the `thumbs` div element, which
    provides the scrolling effect. The `imageWidth` variable is used once more to
    set the scroll position to match the width of the thumbnails as follows:`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在此事件处理程序回调函数中，使用 jQuery 的 `animate()` 函数修改 `thumbs` div 元素的左边距，从而提供滚动效果。再次使用
    `imageWidth` 变量来设置滚动位置以匹配缩略图的宽度，如下所示：
- en: '[PRE33]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`The next section of code attaches a click event handler to the `gallery` div
    element. The click event handler listens for clicks on any element with the class
    `thumb`. This allows us to specify code to be executed once a thumbnail has been
    clicked. In the callback function, we select the clicked thumbnail and store the
    element reference in the `thumb` variable. We also use the clicked elements''
    `data-index` property value to select the larger image, storing its reference
    within `image`.`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下一段代码的下一步是将点击事件处理程序附加到 `gallery` div 元素上。点击事件处理程序监听任何具有 `thumb` 类的元素上的点击。这使我们能够指定在单击缩略图后要执行的代码。在回调函数中，我们选择被点击的缩略图并将元素引用存储在
    `thumb` 变量中。我们还使用点击的元素的 `data-index` 属性值来选择较大的图像，并将其引用存储在 `image` 中。
- en: '`Once again, we use the `$.each()` function to iterate through all of the images.
    We hide each image that does not match the image in the clicked thumbnail. This
    is so that only the selected image appears in the main viewing panel. We also
    use the `css()` function to check the `display` property of the larger image to
    determine if the image is currently visible. If not, we use the jQuery fade in
    effect to show it, completing the image gallery functionality.`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用 `$.each()` 函数来迭代所有图像。我们隐藏与点击的缩略图中的图像不匹配的每个图像。这样只有所选图像才会出现在主查看面板中。我们还使用
    `css()` 函数来检查较大图像的 `display` 属性，以确定图像当前是否可见。如果不可见，我们使用 jQuery 的淡入效果来显示它，完成图像库功能。
- en: '`# Creating a blinking button'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建一个闪烁的按钮'
- en: Using jQuery's effect functions, we can create a blinking button that can be
    used in a web application or website to draw the user's attention.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jQuery 的效果函数，我们可以创建一个闪烁的按钮，可以在 Web 应用程序或网站中使用，以吸引用户的注意力。
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a blank HTML document named `recipe-8.html` and ensure you have the latest
    version of jQuery downloaded and ready to be included in this HTML file.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `recipe-8.html` 的空白 HTML 文档，并确保您已下载并准备好将其包含在此 HTML 文件中的最新版本的 jQuery。
- en: How to do it…
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Learn how jQuery can be used to create a simple blinking button effect by performing
    the following steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下步骤了解如何使用 jQuery 创建一个简单的闪烁按钮效果：
- en: Add the following code to `recipe-8.html`, which you have just created, remembering
    to update the reference to the jQuery library.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到刚刚创建的`recipe-8.html`中，记得更新对 jQuery 库的引用。
- en: '[PRE34]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a CSS file named `recipe-8.css` and add the following CSS code to add
    style to the newsletter form created in the HTML:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe-8.css`的 CSS 文件，并添加以下 CSS 代码以为 HTML 中创建的通讯表单添加样式：
- en: '[PRE35]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a JavaScript file in the same directory as the CSS and HTML files. Save
    this file as `recipe-8.js` and add the following jQuery code:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与 CSS 和 HTML 文件相同的目录中创建一个 JavaScript 文件。将此文件保存为`recipe-8.js`并添加以下 jQuery 代码：
- en: '[PRE36]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Open `recipe-8.html` in a web browser and you will be presented with a web page
    similar to the following screenshot:![How to do it…](img/0896OS_04_07.jpg)
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 浏览器中打开`recipe-8.html`，你会看到一个类似下面截图的网页：![如何操作…](img/0896OS_04_07.jpg)
- en: Clicking inside the textbox will cause the **Sign-up Now!** button to blink
    to draw the user's attention.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击文本框内部将使“**立即注册！**”按钮闪烁以吸引用户的注意。
- en: How it works…
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理是…
- en: The HTML and CSS code used in this recipe creates a page that allows a user
    to sign up for a newsletter subscription. There are no complex elements in the
    HTML or CSS code, so no further explanation is necessary.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中使用的 HTML 和 CSS 代码创建了一个页面，允许用户订阅通讯。HTML 或 CSS 代码中没有复杂的元素，因此不需要进一步解释。
- en: This recipe provides a simple example that demonstrates how we can use jQuery
    to give the appearance of a blinking button. The idea is that when the user clicks
    inside the textbox to input an e-mail address, the **Sign-up Now!** button will
    blink to draw their attention.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方提供了一个简单的示例，演示了我们如何使用 jQuery 来实现按钮闪烁的外观。其思想是，当用户点击文本框输入电子邮件地址时，“**立即注册！**”按钮会闪烁以吸引他们的注意。
- en: In our jQuery code, we first attach an event handler to the text input for focus.
    The `focus` event is triggered when an element on the page receives the attention
    of the user, either by tabbing to the form element or by clicking on it. In the
    callback function to this event handler, we use the `fadeTo()` jQuery effect function
    to sequentially fade out and fade in the button, creating the blinking effect.
    The `fadeTo()` function, in this example, takes two arguments, effect duration
    and element opacity. We specify the opacity of the element to be `0.1` within
    the first `fadeTo()` function to fade out the button. Then we specify `1.0` to
    fade the button back in. We can control the speed of the effect by altering the
    specified duration, which is set to `300` milliseconds.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 jQuery 代码中，我们首先将事件处理程序附加到文本输入以获得焦点。当页面上的元素受到用户的关注时，即通过点击它或通过标签切换到表单元素时，将触发“焦点”事件。在此事件处理程序的回调函数中，我们使用`fadeTo()`jQuery
    效果函数来顺序淡出并淡入按钮，创建闪烁效果。在本示例中，`fadeTo()`函数接受两个参数，效果持续时间和元素不透明度。我们在第一个`fadeTo()`函数中指定元素的不透明度为`0.1`，以淡出按钮。然后我们指定`1.0`以淡入按钮。我们可以通过改变指定的持续时间来控制效果的速度，该持续时间设置为`300`毫秒。
- en: There's more…
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: There are many ways to create the blinking effect with jQuery. In [Chapter 6](ch06.html
    "Chapter 6. User Interface"), *User Interface*, you will learn to alter the CSS
    attributes of elements, which will allow you to add drop-shadows and colored borders
    to greatly enhance the blinking effect. The `fadeTo()` function provides the easiest
    way to create this effect, but be aware that there are alternatives that can provide
    a greater impact that may be more suitable to your needs.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以使用 jQuery 创建闪烁效果。在 [第 6 章](ch06.html "第 6 章. 用户界面") *用户界面* 中，您将学习如何更改元素的
    CSS 属性，从而可以添加阴影和彩色边框，以大大增强闪烁效果。`fadeTo()`函数提供了创建此效果的最简单方法，但请注意，有一些替代方法可以提供更大的影响，可能更适合您的需求。
- en: When forcing elements to blink, move, or flash to draw the user's attention,
    you must be very careful not to cause annoyance, as this may have the reverse
    effect of turning them away. Effects such as these should only be used as subtle
    hints to prompt the user's interaction with your user interface.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当强制元素闪烁、移动或闪烁以吸引用户的注意时，必须非常小心，以免引起烦恼，因为这可能会产生相反的效果，使他们远离。这些效果只应用作微妙的提示，以促使用户与您的用户界面进行交互。
- en: See also
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '*Fading elements*'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*淡出元素*'
- en: '*Creating a basic photo gallery*'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建一个基本的照片库*'
- en: Removing elements with effects
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有效果的删除元素
- en: You will often create interfaces such as lists or tables that will be representing
    data from a database. If the interface is for management purposes, you will typically
    be able to add, edit, and remove these items. We can use jQuery effects to add
    to the user experience when these items are added, as described in the *Fading
    elements* recipe. We can also provide effects when removing an item from the DOM.
    Thanks to jQuery, it is very easy to do.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会创建诸如列表或表格之类的界面，用于表示来自数据库的数据。如果界面是用于管理目的，通常可以添加、编辑和删除这些项目。当添加这些项目时，我们可以使用
    jQuery 效果来增强用户体验，如*淡出元素*示例中所述。当从 DOM 中删除项目时，我们也可以提供效果。由于 jQuery，这非常容易做到。
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: As with the other recipes in this chapter, you are going to need a blank HTML
    document. Save this document as `recipe-9.html` and ensure it is within the same
    directory as the latest version of jQuery.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中的其他示例一样，您需要一个空白的 HTML 文档。将此文档保存为`recipe-9.html`，并确保它与最新版本的 jQuery 在同一个目录中。
- en: How to do it…
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Understand how you can remove DOM elements with effects by performing the following
    steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何通过执行以下步骤以带有效果的方式移除 DOM 元素：
- en: 'Add the following HTML code to the HTML document you have just created:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 HTML 代码添加到您刚刚创建的 HTML 文档中：
- en: '[PRE37]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You may have noticed the CSS file included in the header of the previous HTML
    code. Create `recipe-9.css` and add the following CSS code:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能已经注意到了前一个 HTML 代码的标题中包含的 CSS 文件。创建`recipe-9.css`并添加以下 CSS 代码：
- en: '[PRE38]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In addition to the CSS file, a JavaScript file is also included in the HTML
    page. Create a JavaScript file named `recipe-9.js` and save it in the same directory
    as the HTML and CSS files. Add the following jQuery code to this file:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了 CSS 文件外，HTML 页面还包含了一个 JavaScript 文件。创建一个名为`recipe-9.js`的 JavaScript 文件，并将其保存在与
    HTML 和 CSS 文件相同的目录中。将以下 jQuery 代码添加到此文件中：
- en: '[PRE39]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Open `recipe-9.html` in a web browser and you will be presented with a simple
    user management UI. Clicking on the **Delete** button next to any entry will prompt
    you to confirm that you would like to delete. When the user clicks on **OK**,
    the entry for that particular user will fade out and be removed from the DOM.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中打开`recipe-9.html`，你将看到一个简单的用户管理界面。点击任何条目旁边的**删除**按钮将提示你确认是否要删除。当用户点击**确定**时，该特定用户的条目将淡出并从
    DOM 中移除。
- en: How it works…
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe too has basic HTML and CSS code that needs no explanation. Instead,
    let's concentrate on the jQuery code.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例也有一些基本的 HTML 和 CSS 代码，不需要解释。相反，让我们专注于 jQuery 代码。
- en: All of our jQuery code is wrapped in `$(function(){});`, which is the jQuery
    on-load function, allowing us to execute on page load. We attach a click event
    handler to the user table and listen for clicks on any elements with the `delete`
    class as follows. From the HTML code, you will know these elements are the `delete`
    buttons.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的 jQuery 代码都包装在`$(function(){});`中，这是 jQuery 的加载函数，允许我们在页面加载时执行。我们将点击事件处理程序附加到用户表，并监听任何具有`delete`类的元素的点击，如下所示。从
    HTML 代码中，您将知道这些元素是`delete`按钮。
- en: '[PRE40]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Inside the callback function to this event handler, we use the native JavaScript
    function `confirm()` and assign its output to the `response` variable. This will
    display a pop-up window to the user that has the message **Are you sure you want
    to delete this user?**. If the user clicks on **OK**, the `response` variable
    will equal `true`. If they click on **Cancel**, it will be `false`. By using this
    `response` variable, we can determine whether they want to go ahead and delete
    the user. If they do, we can remove the table row from the DOM.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在此事件处理程序的回调函数内部，我们使用原生 JavaScript 函数`confirm()`并将其输出分配给`response`变量。这将向用户显示一个弹出窗口，其中包含消息**确定要删除此用户吗？**。如果用户点击**确定**，则`response`变量将等于`true`。如果他们点击**取消**，它将是`false`。通过使用这个`response`变量，我们可以确定他们是否想要继续删除用户。如果是，我们可以从
    DOM 中移除表格行。
- en: 'To remove the table row, we first need to select it. We can refer to `$(this)`,
    which is the clicked item (in this case, the button), then select its parents''
    parent, which is the `tr` table. This is done using the following code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除表格行，我们首先需要选择它。我们可以引用`$(this)`，它是被点击的项目（在本例中是按钮），然后选择其父级的父级，即`tr`表。这是使用以下代码完成的：
- en: '[PRE41]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We then use the `fadeOut()` function to apply the effect and use the `remove()`
    function to remove the element from the DOM.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`fadeOut()`函数应用效果，并使用`remove()`函数从 DOM 中删除元素。
- en: There's more…
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This simple user interface would typically be coupled with server-side calls,
    which would also remove the user entry from the database. Take a look back at
    [Chapter 3](ch03.html "Chapter 3. Loading and Manipulating Dynamic Content with
    AJAX and JSON"), *Loading and Manipulating Dynamic Content with AJAX and JSON*,
    to see how this can be done using jQuery and AJAX.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的用户界面通常会与服务器端调用结合使用，这些调用还会从数据库中删除用户输入。回顾一下[第 3 章](ch03.html "第 3 章。使用 jQuery
    和 AJAX 加载和操作动态内容")，*使用 jQuery 和 AJAX 加载和操作动态内容*，看看如何使用 jQuery 和 AJAX 完成这项任务。
- en: See also
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Fading elements*`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*淡入淡出元素*'
