- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding Features Guided by Cucumber Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we studied the basic elements of writing Cucumber tests
    and how to use Puppeteer to manipulate our UI. But we haven’t yet explored how
    these techniques fit into the wider development process. In this chapter, we’ll
    implement a new application feature, but starting the process with Cucumber tests.
    These will act as acceptance tests that our (imaginary) product owner can use
    to determine whether the software works as required.
  prefs: []
  type: TYPE_NORMAL
- en: Acceptance testing
  prefs: []
  type: TYPE_NORMAL
- en: An **acceptance test** is a test that a product owner or customer can use to
    decide whether they accept the delivered software. If it passes, they accept the
    software. If it fails, the developers must go back and adjust their work.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the term **Acceptance-Test-Driven Development (ATDD)** to refer to
    a testing workflow that the whole team can participate in. Think of it as like
    TDD but it is done at the wider team level, with the product owner and customer
    involved in the cycle. Writing BDD tests using Cucumber is one way—but not the
    only way—that you can bring ATDD to your team.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll use our BDD-style Cucumber tests to act as our acceptance
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that our product owner has seen the great work that we’ve done building
    **Spec Logo**. They have noted that the share screen functionality is good, but
    it could do with an addition: it should give the presenter the option of resetting
    their state before sharing begins, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.1 – The new sharing dialog ](img/Figure_18.01_B18423.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.1 – The new sharing dialog
  prefs: []
  type: TYPE_NORMAL
- en: The product owner has provided us with some Cucumber tests that are currently
    red for implementation—both the step definitions and the production code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Cucumber tests for a dialog box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing Cucumber tests by test-driving production code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding timeouts in test code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll have seen more examples of Cucumber tests
    and how they can be used as part of your team’s workflow. You’ll also have seen
    how to avoid using specific timeouts within your code.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-React-Test-Driven-Development-Second-Edition/tree/main/Chapter18](https://github.com/PacktPublishing/Mastering-React-Test-Driven-Development-Second-Edition/tree/main/Chapter18)'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Cucumber tests for a dialog box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll add a new Cucumber test that won’t yet pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by taking a look at the new feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `features/sharing.feature` file and take a look at the first feature
    that you’ve been given. Read through the steps and try to understand what our
    product owner is describing. The test covers quite a lot of behavior—unlike our
    unit tests. It tells a complete story:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first `the presenter navigated to the application page`, already works,
    and you can verify this if you run `npx cucumber-js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step, `the presenter entered the following instructions at the prompt`,
    is very similar to a step from the last chapter. We could choose to extract the
    commonality here, just as we did with the `browseToPageFor` function; however,
    we’ll wait until our test and implementation are complete before refactoring.
    For now, we’ll just duplicate the code. Open `features/support/sharing.steps.js`
    and add the following step definition at the bottom of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next up is a `the presenter clicked the button ''startSharing''`. The line
    that appears after this is the first `npx cucumber-js` and you’ll be given template
    code for this function. Copy and paste the template code into your step definition
    file, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Two When phrases
  prefs: []
  type: TYPE_NORMAL
- en: This scenario has *two* `When` phrases, which is unusual. Just as with your
    unit tests in the **Act** phase, you generally want just one **When** phrase.
    However, since there are two users working together at this point, it makes sense
    to have a single action for both of them, so we’ll let our product owner off the
    hook on this occasion.
  prefs: []
  type: TYPE_NORMAL
- en: 'This step definition is very similar to the ones we’ve written before. Fill
    out the function as shown in the following code block. There is a new call to
    `waitForSelector`. This waits for the button to appear on the page before we continue,
    which gives the dialog time to render:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The second `Then` clauses. The first is `the observer should see no lines`;
    run `npx cucumber-js` and copy and paste the template function that Cucumber provides,
    as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For this step, we want to assert that there are no line elements on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running `npx cucumber-js`, you should see that this step passes, and the next
    one is very similar. Copy the step definition you just wrote and modify it to
    work for the presenter, as shown in the following code block. Again, we can clean
    up the duplication later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Cucumber now, and you’ll see that this step fails; this is the first failure
    that we’ve got. It points to the specific change that we’ll need to make in the
    code base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we have hit a red step, we could now go back and start working on our
    code to make this green. However, because we just have two almost identical clauses
    to complete, I’m going to choose to complete these definitions before continuing.
    Cucumber tells us the template function that we should use, so add that now, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to define a couple of helpers that can tell us the current *x*, *y*,
    and angle values of the turtle. We need this because all we have is the SVG `polygon`
    element, which uses a `points` string and a `transform` string to position the
    turtle. Our helpers will take these strings and convert them back to numbers for
    us. As a reminder, here’s how the turtle is initially positioned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use the first `points` coordinate to calculate *x* and *y*, by adding
    `5` to the first number and subtracting `5` from the second. The angle can be
    calculated by taking the first parameter to rotate and subtracting `90`. Create
    a new file named `features/support/turtle.js`, and then add the following two
    definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In `feature/sharing.steps.js`, update the step definition, as shown in the
    following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, repeat this step definition for the presenter, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That’s the first test; now, let’s move on to the second scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nearly all of the step definitions for our second scenario are already implemented;
    there are only two that aren’t:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We already have a step definition that is very similar to these two in `features/support/drawing.steps.js`.
    Let’s extract that logic into its own module so that we can reuse it. Create a
    new file named `features/support/svg.js` and then duplicate the following code
    from the drawing step definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In `features/support/drawing.steps.js`, modify the `these lines should have
    been drawn` step definition so that it now uses this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The two new step definitions for our latest sharing scenario are now straightforward.
    In `features/support/sharing.steps.js`, add the following `import` statement and
    step definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve now seen how to write longer step definitions and how to extract common
    functionality into support functions.
  prefs: []
  type: TYPE_NORMAL
- en: With the step definitions complete, it’s time to make both these scenarios pass.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing Cucumber tests by test-driving production code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll start by doing a little up-front design, then we’ll write
    unit tests that cover the same functionality as the Cucumber tests, and then use
    those to build out the new implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do a little up-front design:'
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on **Start sharing**, a dialog should appear with a **Reset**
    button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the user chooses to reset, the Redux store is sent a `START_SHARING` action
    with a new `reset` property that is set to `true`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the user chooses to share their existing commands, then the `START_SHARING`
    action is sent with `reset` set to `false`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the user clicks on `RESET` action should be sent to the Redux store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing should not be initiated until *after* the `RESET` action has occurred.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That’s all the up-front design we need. Let’s move on to integrating the `Dialog`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a dialog box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we know what we’re building, let’s go for it! To do so, perform these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `test/MenuButtons.test.js` and skip the test that is titled `dispatches
    an action of START_SHARING when start sharing is clicked`. We’re going to sever
    this connection for the moment. But we’ll come back to fix this later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, add a new `import` statement for the `Dialog` component,
    and mock it out using `jest.mock`. The `Dialog` component already exists in the
    code base but has remained unused until now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this new test just below the one you’ve skipped. Very simply, it checks
    that we display the dialog when the appropriate button is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/MenuButtons.js`, add a new `Dialog` element to the JSX, including the
    `import` statement at the top of the file. The new component should be placed
    at the very bottom of the returned JSX. The test should then pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let’s set the `message` prop to something useful for the user. Add this
    to your test suite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, add the `message` prop to your implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to make sure the dialog isn’t shown until the sharing button is
    clicked; add the following test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make this pass by adding a new state variable, `isSharingDialogOpen`. The sharing
    button will set this to `true` when it’s clicked. You’ll need to add the `import`
    statement for `useState` at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s add a test for adding buttons to the dialog. This is done by specifying
    the `buttons` prop on the `Dialog` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make this pass by adding a `buttons` prop to the `Dialog` component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the next test, we’ll test that the dialog closes. Start by defining a new
    `closeDialog` helper in your test suite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the next test, which checks that the `Dialog` component disappears once
    the dialog has had its `onClose` prop invoked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make that pass by adding the following line to the `Dialog` JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now go back to the test that you skipped and modify it so that it reads the
    same as the following code block. We’re going to modify the `START_SHARING` Redux
    action to take a new `reset` Boolean variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make this pass, move to `src/MenuButtons.js` and modify the `startSharing`
    function to add a `reset` property to the created Redux action. Notice how we
    hardcode the value to `true` for now—we’ll need to **triangulate** in the upcoming
    test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Triangulation within tests
  prefs: []
  type: TYPE_NORMAL
- en: See [*Chapter 1*](B18423_01.xhtml#_idTextAnchor017)*, First Steps with Test-Driven
    Development*, for a reminder on triangulation and why we do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MenuButtons` component, set the `onChoose` prop on the `Dialog` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to add a new test for sending a value of `false` through for
    the `reset` action property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, modify `startSharing` to take a `button` parameter and then
    use that to set the `reset` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, finally, in the `MenuButtons` component JSX, set the `onChoose` prop
    on the `Dialog` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve now completed the first new piece of functionality specified in the Cucumber
    test. There’s a dialog box being displayed and a `reset` Boolean flag being sent
    through to the Redux store. We are inching toward a working solution.
  prefs: []
  type: TYPE_NORMAL
- en: Updating sagas to a reset or replay state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we need to update the sharing saga to handle the new reset flag:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `test/middleware/sharingSagas.test.js` and add the following test to the
    end of the `START_SHARING` nested `describe` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/middleware/sharingSagas.js`, modify `startSharing` so that it reads
    the same as the following code block. Don’t forget to add the new `action` parameter
    to the top line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now for the tricky second test. If `reset` is `false`, we want to replay all
    the current actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make this pass, we can use the `toInstructions` function from the `export`
    namespace. We also need to make use of two new `redux-saga` functions: `select`
    and `all`. The `select` function is used to retrieve the state and the `all` function
    is used with `yield` to ensure that we wait for all the passed calls to complete
    before continuing. Add those `import` statements now to `src/middleware/sharingSagas.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, modify the `startSharing` function by tacking on an `else` block to the
    conditional:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run the tests now, you’ll notice that there are a couple of unrelated
    failures. We can fix these by adding a default value for the `reset` property
    to the `startSharing` helper method in our tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the feature; both the unit tests and the Cucumber tests should
    be passing. Now would be a great time to try things out manually, too.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll focus on reworking our Cucumber tests to make them
    run much faster.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding timeouts in test code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll improve the speed at which our Cucumber tests run by
    replacing `waitForTimeout` calls with `waitForSelector` calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of our step definitions contain waits that pause our test script interaction
    with the browser while we wait for the animations to finish. Here’s an example
    from our tests, which waits for a period of 3 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Not only will this timeout slow down the test suite, but this kind of wait is
    also brittle as there are likely to be occasions when the timeout is slightly
    too short and the animation hasn’t finished. In this case, the test will intermittently
    fail. Conversely, the wait period is actually quite long. As more tests are added,
    the timeouts add up and the test runs suddenly take forever to run.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding timeouts
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the type of automated test, it is a good idea to avoid timeouts
    in your test code. Timeouts will substantially increase the time it takes to run
    your test suite. There are almost always methods you can use to avoid using them,
    such as the one highlighted in this section.
  prefs: []
  type: TYPE_NORMAL
- en: What we can do instead is modify our production code to notify us when it is
    animating, by setting an `isAnimating` class when the element is animating. We
    then use the Puppeteer `waitForSelector` function to check for a change in the
    value of this class, replacing `waitForTimeout` entirely.
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTML classes to mark animation status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We do this by adding an `isAnimating` class to the viewport `div` element when
    an animation is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by adding the `isAnimating` class when the `Drawing` element is
    ready to animate a new Logo command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `test/Drawing.test.js`, add a new nested `describe` block within the main
    `Display` context, just below the context for resetting. Then, add the following
    test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/Drawing.js`, update the JSX to include this class name on the `viewport`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s triangulate in order to get this state variable in place. To do this,
    add the following test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make this pass, update `className` to only set `isAnimating` if `commandToAnimate`
    is not null:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a final flourish, we’ll add an arguably unnecessary test. We want to be
    careful about removing the `isAnimating` class once the animation is finished.
    However, our implementation already takes care of this as `commandToAnimate` will
    be set to `undefined` when that happens. In other words, we don’t need an explicit
    test for this, and we’re done with this addition. However, for completeness’ sake,
    you can add the test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes adding the `isAnimating` class functionality. Now we can use
    this class as a means of replacing the `waitForTimeout` calls.
  prefs: []
  type: TYPE_NORMAL
- en: Updating step definitions to use waitForSelector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re ready to use this new behavior in our step definitions, bringing in a
    new call to `waitForSelector` that waits until the `isAnimating` class appears
    (or disappears) on an element:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `features/support/world.js`, add the following two methods to the `World`
    class. The first waits for the `isAnimating` selector to appear within the DOM
    and the second waits for it to disappear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `features/support/drawing.steps.js`, search for the single `waitForTimeout`
    invocation in this file and replace it with the code in the following block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Being careful about class transitions
  prefs: []
  type: TYPE_NORMAL
- en: We’re waiting for animation after *each* instruction is entered. This is important
    as it mirrors how the `isAnimating` class will be added and removed from the application.
    If we only had one `waitForAnimationToEnd` function as the last instruction on
    the page, we may end up exiting the step definition early if the wait catches
    the removal of an `isAnimating` class in the *middle* of a sequence of instructions,
    rather than catching the *last* one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `features/support/sharing.steps.js`; this file has a similar step
    in it as the previous one, so update that one now, in the same way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Toward the bottom of the file, update the two step definitions that check the
    turtle position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `features/support/svg.js` and update the function within it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run `npx cucumber-js` now, you’ll see that we have one test failure,
    which is related to the output on the observer’s screen. It indicates that we
    need to wait for the animations when we load the observer’s page. In this case,
    we need to wait for the animation to start before we can wait for it to finish.
    We can fix this by adding a new step to the feature. Open `features/sharing.feature`
    and modify the last test to include a *third* entry in the **When** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Encapsulating multiple When clauses
  prefs: []
  type: TYPE_NORMAL
- en: If you aren’t happy with having three **When** clauses, then you can always
    combine them into a single step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in `features/support/sharing.steps.js`, add this new step definition just
    underneath the other **When** step definitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your tests should now be passing, and they should be much faster. On my machine,
    they now only take a quarter of the time than they did before.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how you can integrate Cucumber into your team’s
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: You saw some more ways that Cucumber tests differ from unit tests. You also
    learned how to avoid using timeouts to keep your test suites speedy.
  prefs: []
  type: TYPE_NORMAL
- en: We’re now finished with our exploration of the **Spec Logo** world.
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter of the book, we’ll look at how TDD compares to other developer
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remove as much duplication as possible from your step definitions.
  prefs: []
  type: TYPE_NORMAL
