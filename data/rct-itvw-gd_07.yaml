- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Different Approaches to Apply CSS in ReactJS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在ReactJS中应用CSS的不同方法
- en: Creating aesthetically beautiful and user-friendly interfaces is critical in
    modern web development for establishing engaging and effective applications. ReactJS
    is a popular frontend framework for creating user interfaces and has a number
    of methods for implementing **Cascading Style Sheets** (**CSS**), the language
    responsible for styling online content. This chapter attempts to answer many important
    questions on the topic of CSS that an interviewee might have. By explaining the
    various approaches for incorporating CSS in ReactJS, we will be able to benefit
    from an expanded knowledge set that puts us in a much better position when tackling
    interview questions on this subject.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代Web开发中，创建美观且用户友好的界面对于建立引人入胜和有效的应用程序至关重要。ReactJS是一个流行的前端框架，用于创建用户界面，并且有几种实现**层叠样式表**（**CSS**）的方法，这是负责在线内容样式的语言。本章试图回答面试者可能对CSS主题提出的一些重要问题。通过解释将CSS纳入ReactJS的各种方法，我们将能够从更广泛的知识体系中受益，这将使我们更好地应对有关此主题的面试问题。
- en: 'We will look at five different methods for implementing CSS: `CSS Modules`,
    `styled-components`, and **Atomic CSS** (with the Tailwind CSS framework). Each
    of these solutions has advantages and disadvantages, depending on the project
    objectives and preferences. By investigating these options, you will get the knowledge
    and confidence to navigate these questions in an interview environment, which
    will be particularly useful when the time comes for you to create a ReactJS application.
    By learning about the principles of writing and maintaining clean, manageable,
    and scalable code, you will find it much simpler to come up with good-quality
    answers in your interviews.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨实现CSS的五种不同方法：`CSS Modules`、`styled-components`和**原子CSS**（使用Tailwind CSS框架）。这些解决方案各有优缺点，具体取决于项目目标和偏好。通过研究这些选项，您将获得在面试环境中应对这些问题的知识和信心，这在您需要创建ReactJS应用程序时尤其有用。通过了解编写和维持干净、可管理和可扩展代码的原则，您会发现面试中提出高质量答案要简单得多。
- en: Preprocessors such as Sass and Less will also get an introduction in this chapter,
    as we aim to cover all of the relevant use cases for implementing CSS into our
    React projects and have the right answers to any interview questions in these
    areas.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Sass和Less等预处理器也将在本章中介绍，因为我们旨在涵盖将CSS实现到我们的React项目中所有相关的用例，并准备好回答这些领域的任何面试问题。
- en: 'In this chapter, we will learn about and go into detail on these important
    CSS-related topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细探讨这些重要的CSS相关主题：
- en: Different ways to apply CSS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用CSS的不同方式
- en: Exploring processors and CSS Modules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索处理器和CSS Modules
- en: CSS-in-JS approach and `styled-components` and its usage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS-in-JS方法以及`styled-components`及其用法
- en: How to use styled components in React applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在React应用程序中使用styled components
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Make sure that you have `Node` and `npm` installed on your computer and that
    the JavaScript Node packages for Create React App and Next.js are installed and
    working. Use your favorite IDE and **command-line interface** (**CLI**) to work
    on these projects.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的计算机上已安装`Node`和`npm`，并且已安装并正常工作用于Create React App和Next.js的JavaScript Node包。使用您喜欢的IDE和**命令行界面**（**CLI**）来处理这些项目。
- en: 'The package for Create React App can be found here: [https://create-react-app.dev/](https://create-react-app.dev/).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App的包可以在以下位置找到：[https://create-react-app.dev/](https://create-react-app.dev/)。
- en: 'The package for Next.js can be found here: [https://nextjs.org/](https://nextjs.org/).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js的包可以在以下位置找到：[https://nextjs.org/](https://nextjs.org/)。
- en: Different ways to apply CSS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用CSS的不同方式
- en: In this section, we will be exploring different ways to apply CSS inside React
    projects. The knowledge gained will provide us with crucial interview-ready answers
    to these common questions, and the examples can aid us in explaining in detail
    the differences and how they work. Let’s continue with our learning and take a
    closer look at these CSS solutions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在React项目中应用CSS的不同方式。获得的知识将为我们提供应对这些常见问题的关键面试答案，并且示例可以帮助我们详细解释它们之间的差异以及它们是如何工作的。让我们继续学习，更深入地了解这些CSS解决方案。
- en: While ReactJS is a JavaScript library for creating user interfaces, CSS is a
    style sheet language used to describe the appearance and formatting of an HTML
    or XML document. Incorporating CSS with ReactJS helps developers to efficiently
    style their components, resulting in aesthetically pleasing and consistent interfaces.
    There are a few ways to use CSS with ReactJS, which we are going to learn about
    in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ReactJS 是一个用于创建用户界面的 JavaScript 库，CSS 是一种用于描述 HTML 或 XML 文档外观和格式的样式表语言。将
    CSS 与 ReactJS 结合使用可以帮助开发者高效地设置组件样式，从而实现美观且一致的界面。使用 CSS 与 ReactJS 有几种方法，我们将在本章中学习。
- en: In the upcoming sections, we will learn about importing CSS, CSS Modules, CSS
    preprocessors, Atomic CSS, and inline styling. The latter involves adding styles
    directly to React components using JavaScript objects. While inline styles are
    useful for small components or dynamic styles, they can cause code duplication
    and maintainability problems in bigger applications, which we will talk about.
    First, let us begin with importing style sheets.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习导入 CSS、CSS Modules、CSS 预处理器、Atomic CSS 和内联样式。后者涉及使用 JavaScript
    对象直接将样式添加到 React 组件中。虽然内联样式对于小型组件或动态样式很有用，但它们可能导致代码重复和维护性问题，我们将在后面讨论。首先，让我们从导入样式表开始。
- en: How do we import external style sheets?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何导入外部样式表？
- en: 'The standard technique of utilizing CSS in React involves creating separate
    CSS files and styling components with class names. This solution keeps style and
    logic concerns separate, making the code more structured and manageable. The official
    React documentation recommends that developers use production-grade React frameworks
    when starting new React projects. This includes Next.js, Remix, Gatsby, and Expo
    (for native apps). This is now considered the most modern way of developing React
    applications, which you can read about here: [https://react.dev/learn/start-a-new-react-project](https://react.dev/learn/start-a-new-react-project).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中利用 CSS 的标准技术涉及创建单独的 CSS 文件，并使用类名来设置组件样式。这种解决方案将样式和逻辑关注点分开，使代码更加结构化和易于管理。官方
    React 文档建议开发者在开始新的 React 项目时使用生产级别的 React 框架。这包括 Next.js、Remix、Gatsby 和 Expo（用于原生应用）。现在，这被认为是开发
    React 应用程序最现代的方式，你可以在这里了解更多：[https://react.dev/learn/start-a-new-react-project](https://react.dev/learn/start-a-new-react-project)。
- en: We will take a look at two code examples, one with Next.js and another with
    Create React App, to show the contrast between the two (old versus new) processes
    of building React apps. Next.js is considered to be the most modern recommended
    way for building ReactJS applications, whereas Create React App is now seen as
    a legacy tool. This is because Next.js is seen as a more production-grade ready
    ReactJS framework.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看两个代码示例，一个使用 Next.js，另一个使用 Create React App，以展示两种（旧与新的）构建 React 应用程序的过程之间的对比。Next.js
    被认为是构建 ReactJS 应用程序最现代的推荐方式，而 Create React App 现在被视为一个遗留工具。这是因为 Next.js 被视为一个更适用于生产级别的
    ReactJS 框架。
- en: How do we use Create React App to build React apps?
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何使用 Create React App 构建 React 应用程序？
- en: Here’s how to implement the traditional method in a React application using
    Create React App.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何在 Create React App 中实现传统方法的示例。
- en: 'Firstly, create a React project and then create a CSS file. Use CSS rules and
    class names to specify your styles in a separate CSS file called `App.css`, as
    follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 React 项目，然后创建一个 CSS 文件。使用 CSS 规则和类名，在名为 `App.css` 的单独 CSS 文件中指定你的样式，如下所示：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, import the created CSS file into your React component file, which should
    be `App.js`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将创建的 CSS 文件导入到你的 React 组件文件中，该文件应该是 `App.js`：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `className` attribute is used in JSX elements to apply the corresponding
    CSS classes from the imported style sheet. We are using the `className` attribute
    instead of `class` because a class is a reserved word in JavaScript. This is not
    a problem when writing CSS in CSS files, but it is in JavaScript files. Also,
    JSX is a nomenclature, which means that it requires element properties such as
    class names to use the camelCase naming convention.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`className` 属性用于 JSX 元素中应用导入样式表中的相应 CSS 类。我们使用 `className` 属性而不是 `class`，因为
    `class` 是 JavaScript 中的一个保留字。在编写 CSS 文件时这并不是问题，但在 JavaScript 文件中就是了。此外，JSX 是一种命名约定，这意味着它需要使用
    camelCase 命名约定来使用元素属性，如类名。'
- en: Initiate the `npm run start` command in your console, and your application should
    be up and running.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的控制台中启动 `npm run start` 命令，你的应用程序应该已经启动并运行。
- en: How do we use Next.js to build React apps?
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何使用 Next.js 构建 React 应用程序？
- en: Next.js is a well-known open source web development framework built on ReactJS.
    It is intended to make it easier for developers to create server-rendered React
    apps, allowing them to create high-performance web applications that are optimized
    for **search engine optimization** (**SEO**) and give a fantastic user experience.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js 是一个基于 ReactJS 的知名开源 Web 开发框架。它的目的是让开发者更容易创建服务器端渲染的 React 应用程序，使他们能够创建针对搜索引擎优化（SEO）和提供卓越用户体验的高性能
    Web 应用程序。
- en: Next.js has a slightly different project structure, although importing CSS style
    sheets still works the same way. Fortunately, the process is actually quite similar
    when using the latest App Router feature in Next.js. This is how we would import
    a CSS style sheet in Next.js.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js 的项目结构略有不同，尽管导入 CSS 样式表的方式仍然相同。幸运的是，当使用 Next.js 中最新的 App Router 功能时，这个过程实际上非常相似。这就是我们在
    Next.js 中导入 CSS 样式表的方法。
- en: 'Firstly, use Next.js to create a React project and then create a `Home.css`
    file inside of the `app` folder. Use the CSS shown here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 Next.js 创建一个 React 项目，然后在 `app` 文件夹内创建一个 `Home.css` 文件。使用以下所示的 CSS：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, just replace all of the code inside of the `page.js` file in the `app`
    folder with this code here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需将 `app` 文件夹中的 `page.js` 文件内的所有代码替换为这里提供的代码即可：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run your application using the `npm run dev` command, and it should work just
    as before.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `npm run dev` 命令运行您的应用程序，它应该和之前一样工作。
- en: This has been the default method for importing our style sheets since the days
    of Create React App. It does not, however, enable component-level isolation, and
    global class names might cause naming conflicts and unwanted style overrides.
    CSS Modules and CSS-in-JS frameworks, for example, solve these concerns and provide
    more extensive tools for decorating React components. Some popular CSS frameworks
    include Tailwind CSS, MUI, Chakra UI, Semantic UI, NextUI, React Bootstrap, Ant
    Design, and Emotion. Tailwind CSS is actually an option that you can select when
    configuring your Next.js application for the first time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们从 Create React App 时代起就使用的默认导入样式表的方法。然而，它并不能实现组件级别的隔离，全局类名可能会导致命名冲突和不需要的样式覆盖。例如，CSS
    Modules 和 CSS-in-JS 框架解决了这些问题，并为装饰 React 组件提供了更广泛的功能。一些流行的 CSS 框架包括 Tailwind CSS、MUI、Chakra
    UI、Semantic UI、NextUI、React Bootstrap、Ant Design 和 Emotion。实际上，Tailwind CSS 是在您第一次配置
    Next.js 应用程序时可以选择的一个选项。
- en: It’s also worth mentioning that in the CSS web layout model, the two most popular
    ways to build the structure of a website are by using either Flexbox or CSS Grid.
    Flexbox is by far more popular, although it is common to use either one or both
    together depending on the website design and complexity. We can use these web
    layout models on their own or with a CSS framework. Another area that we might
    want to look into at some point is animation. Aside from using the usual CSS libraries
    for creating animations, we can utilize various third-party libraries as well.
    Some popular libraries are React Spring, Green Sock, Framer Motion, React Move,
    and many others.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得一提的是，在 CSS 网页布局模型中，构建网站结构最流行的两种方式是使用 Flexbox 或 CSS Grid。Flexbox 无疑更受欢迎，尽管根据网站设计和复杂度，通常会选择使用其中一种或两种。我们可以单独使用这些网页布局模型，或者与
    CSS 框架一起使用。我们可能还希望研究的一个领域是动画。除了使用常规的 CSS 库创建动画外，我们还可以利用各种第三方库。一些流行的库包括 React Spring、Green
    Sock、Framer Motion、React Move 以及许多其他库。
- en: We will now talk about another method of styling our ReactJS apps, called inline
    styling, which is a common way to do styling in normal HTML and ReactJS applications.
    It has been one of the default ways of styling HTML for quite some time and is
    possible in React using JSX, too.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将讨论另一种为我们的 ReactJS 应用程序添加样式的的方法，称为内联样式，这是在常规 HTML 和 ReactJS 应用程序中做样式的一种常见方式。它已经是一段时间内
    HTML 的默认样式方法，并且使用 JSX 在 React 中也是可行的。
- en: Inline styling provides many advantages too, which makes it a very appealing
    option for styling our React applications. We are able to use dynamic styling
    according to component state or props, and there is component isolation, which
    lowers the possibility of unintended style overrides or incompatibilities with
    other components. The faster development, ease of use, and the fact that we don’t
    even need CSS class names all increase the benefits of using this method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 内联样式也提供了许多优势，这使得它成为为我们的 React 应用程序添加样式的一个非常有吸引力的选项。我们能够根据组件状态或属性使用动态样式，并且有组件隔离，这降低了意外样式覆盖或其他组件不兼容的可能性。更快的开发速度、易用性，以及我们甚至不需要
    CSS 类名的事实，都增加了使用这种方法的好处。
- en: How do we use inline styles?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用内联样式？
- en: 'Inline styles in ReactJS applications allow developers to apply styling to
    specific elements or components directly using JavaScript objects, rather than
    specifying CSS styles in separate style sheets or classes. They are specified
    as object literals that include key-value pairs. Basically, they are objects inside
    JSX curly brackets that look like this `{{ backgroundColor: blue }}`. Inside the
    JSX curlies is where we would then use CSS properties and their values. The object’s
    keys are the CSS property names, and the values are the associated property values.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '在ReactJS应用程序中，内联样式允许开发者使用JavaScript对象直接对特定元素或组件应用样式，而不是在单独的样式表或类中指定CSS样式。它们被指定为包含键值对的字面量对象。基本上，它们是位于JSX花括号内的对象，看起来像这样`{{
    backgroundColor: blue }}`。在JSX花括号内，我们将使用CSS属性及其值。对象的键是CSS属性名称，值是相关的属性值。'
- en: 'Let’s take a look at an example so that we can see what this looks like in
    real code. Just replace all of the code in the `page.js` file to convert it to
    an application that now uses inline styles instead of external style sheets:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子，以便我们可以看到在实际代码中它看起来是什么样子。只需将`page.js`文件中的所有代码替换，将其转换为一个现在使用内联样式而不是外部样式的应用程序：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When we need to apply dynamic styles based on the state or properties of a component,
    React inline styles might be helpful. For example, based on user interactions
    or other events, we might declare a style object as a property of the component’s
    state and change it dynamically.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要根据组件的状态或属性应用动态样式时，React内联样式可能会有所帮助。例如，基于用户交互或其他事件，我们可能将样式对象声明为组件状态的属性，并动态地更改它。
- en: 'It’s possible to use a variable with our inline styles as well by assigning
    it to state, and this is what it would look like:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过将其分配给状态来在内联样式中使用变量，这看起来是这样的：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Nevertheless, inline styles have certain drawbacks, including the inability
    to reuse styles across components, the fact that they are less effective than
    external style sheets for large-scale systems, and the possibility of affecting
    readability if not utilized carefully.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，内联样式有一些缺点，包括无法在组件之间重用样式，对于大型系统来说，它们不如外部样式表有效，并且如果不小心使用，可能会影响可读性。
- en: One way to address these problems is by using CSS Modules. CSS Modules is an
    approach for writing modular, scoped CSS for your components. It aids in the resolution
    of typical CSS difficulties such as global scope and name conflicts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些问题的方法之一是使用CSS模块。CSS模块是一种为组件编写模块化、作用域化的CSS的方法。它有助于解决典型的CSS问题，如全局作用域和名称冲突。
- en: Another good strategy for implementing CSS in React is using `styled-components`.
    `styled-components` is a well-known CSS-in-JS package used to style React components.
    It enables you to use tagged template literals to write CSS right in your JavaScript
    code. `styled-components` produces unique class names and injects styles into
    the DOM, scoping them to the individual components. This method improves the developer
    experience and component separation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中实现CSS的另一个好策略是使用`styled-components`。`styled-components`是一个知名的CSS-in-JS包，用于为React组件添加样式。它允许你使用标签模板字面量直接在你的JavaScript代码中编写CSS。`styled-components`生成唯一的类名并将样式注入DOM中，将它们限制为单个组件。这种方法提高了开发者的体验和组件分离。
- en: Another way we can use CSS in our projects is by using Atomic CSS. Atomic CSS,
    also known as functional CSS, is a style technique that focuses on developing
    tiny, single-purpose CSS classes that are combined to create sophisticated user
    interface components. Each class provides one type of rule or a group of rules
    that are closely linked, and they are generally labeled in a format that defines
    their purpose or the attributes that they apply.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在项目中使用CSS的另一种方法是使用原子CSS。原子CSS，也称为函数式CSS，是一种关注开发小型、单一用途CSS类的样式技术。每个类提供一种类型的规则或一组紧密相关的规则，并且它们通常以定义其目的或它们应用的属性的方式标记。 '
- en: The advantage here is that development is fast because by simply mixing existing
    atomic classes, you can quickly prototype and construct components. A general
    theme or template is followed so that every developer uses the same documentation
    and set of classes. This makes for very simple debugging, and the onboarding process
    is fast because everyone is using the same process.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的优势是开发速度快，因为通过简单地混合现有的原子类，你可以快速原型化和构建组件。遵循一个通用主题或模板，以确保每个开发者都使用相同的文档和类集。这使得调试非常简单，并且入职过程很快，因为每个人都使用相同的过程。
- en: How do we use Atomic CSS?
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用原子 CSS？
- en: Atomic CSS is a strategy for structuring and developing CSS code that emphasizes
    the usage of brief, specialized classes that could be combined to produce sophisticated
    styling. The goal is to deconstruct designs into manageable, reusable parts capable
    of being merged in a variety of ways to produce the desired design.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 原子 CSS 是一种构建 CSS 代码的策略，强调使用简短、专业的类，这些类可以组合起来产生复杂的样式。目标是把设计分解成可管理的、可重用的部分，能够以多种方式合并以产生所需的设计。
- en: The Atomic CSS technique is implemented by a number of well-known CSS libraries,
    including Tailwind CSS, Bootstrap CSS, and Bulma, among many others. These libraries
    offer pre-defined collections of atomic classes that can be used to quickly generate
    complicated styling. We will now use the Tailwind CSS library to do some basic
    styling in our Next.js app because of its popularity in the community and the
    fact that Tailwind CSS is integrated into Create Next App, which is the official
    framework for building Next.js applications. It’s possible to use any CSS library
    when you understand the fundamentals.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 原子 CSS 技术由许多知名的 CSS 库实现，包括 Tailwind CSS、Bootstrap CSS 和 Bulma 等。这些库提供了预定义的原子类集合，可以快速生成复杂的样式。我们现在将使用
    Tailwind CSS 库在我们的 Next.js 应用中进行一些基本的样式设计，因为其在社区中的流行度以及 Tailwind CSS 集成到 Create
    Next App 的事实，而 Create Next App 是构建 Next.js 应用的官方框架。当你理解了基础知识时，你可以使用任何 CSS 库。
- en: 'Installing Tailwind CSS is fairly easy; all you have to do is follow the setup
    guide here: [https://tailwindcss.com/docs/guides/nextjs](https://tailwindcss.com/docs/guides/nextjs).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Tailwind CSS 相对简单；你只需遵循这里的设置指南：[https://tailwindcss.com/docs/guides/nextjs](https://tailwindcss.com/docs/guides/nextjs)。
- en: 'With that completed, we can see what the syntax looks like in this example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们可以看到这个例子中的语法是什么样的：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, let us learn about preprocessors and CSS Modules. A CSS preprocessor is
    a program that allows us to build CSS using the preprocessor’s own syntax. In
    a CSS module, every single class name and animation name is now, by definition,
    assigned locally. For greater efficiency and security, CSS Modules allow you to
    create styles in CSS files; however, you need to utilize the styles as JavaScript
    objects.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解预处理器和 CSS 模块。CSS 预处理器是一个程序，允许我们使用预处理器的语法来构建 CSS。在 CSS 模块中，每个类名和动画名现在，根据定义，都是本地分配的。为了提高效率和安全性，CSS
    模块允许你在 CSS 文件中创建样式；然而，你需要将样式作为 JavaScript 对象来使用。
- en: Exploring processors and CSS Modules
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索处理器和 CSS 模块
- en: We can build websites with CSS in two distinct ways—by using CSS processors
    and CSS Modules. CSS processors have been around for quite a long time and were
    designed to be an improvement over traditional CSS. They gave us access to nesting
    our CSS code and the code compiled to regular CSS. CSS Modules, on the other hand,
    give us scoped CSS code in our files, which is better for avoiding name conflicts.
    Let’s now learn about them both, starting with CSS processors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用两种不同的方式用 CSS 构建网站——通过使用 CSS 处理器和 CSS 模块。CSS 处理器已经存在很长时间了，并且被设计成是传统 CSS
    的改进。它们让我们能够嵌套 CSS 代码，并将代码编译成常规 CSS。另一方面，CSS 模块为我们提供了文件中的作用域 CSS 代码，这有助于避免名称冲突。现在让我们了解它们，从
    CSS 处理器开始。
- en: What are CSS processors?
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS 处理器是什么？
- en: CSS processors, commonly referred to as CSS preprocessors, are tools that add
    extra features to CSS, such as variables, mixins, and nesting rules. They enable
    you to write in less repetitive and modular ways that are easier to maintain.
    Sass, also known as SCSS, Less, and Stylus are the three CSS preprocessors that
    are most widely used. To translate the improved CSS syntax into conventional CSS
    that web browsers can understand, these preprocessors need a build step. When
    using build tools such as Webpack, you can incorporate this build phase into your
    development routine.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 处理器，通常被称为 CSS 预处理器，是添加额外功能到 CSS 的工具，例如变量、混合和嵌套规则。它们使你能够以更少重复和模块化的方式编写，更容易维护。Sass（也称为
    SCSS）、Less 和 Stylus 是最广泛使用的三种 CSS 预处理器。为了将改进的 CSS 语法转换为网络浏览器可以理解的常规 CSS，这些预处理器需要一个构建步骤。当使用
    Webpack 等构建工具时，你可以将这个构建阶段纳入你的开发流程中。
- en: How do we use CSS processors?
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用 CSS 处理器？
- en: 'Sass is supported in Next.js natively, utilizing both the `.scss` and `.sass`
    extensions. Through CSS Modules and the `.module.scss` or `.module.sass` extension,
    you can apply component-level Sass. Firstly, install Sass using the `npm install
    –save-dev sass` command. Then, write your styles in Sass syntax in a new `.scss`
    file. Import the generated CSS by referencing the `.scss` file in your React component
    file, as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Next.js 原生支持 Sass，利用 `.scss` 和 `.sass` 扩展名。通过 CSS 模块和 `.module.scss` 或 `.module.sass`
    扩展名，你可以应用组件级别的 Sass。首先，使用 `npm install –save-dev sass` 命令安装 Sass。然后，在一个新的 `.scss`
    文件中用 Sass 语法编写你的样式。通过在 React 组件文件中引用 `.scss` 文件来导入生成的 CSS，如下所示：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Importing a `.scss` file is exactly the same as importing a normal `.``css`
    file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 `.scss` 文件与导入正常的 `.css` 文件完全相同。
- en: What are CSS Modules?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS 模块是什么？
- en: A method for locally scoping CSS in a modular approach is CSS Modules. By automatically
    creating distinct names of classes for each component, it helps prevent conflicts
    between global styles by making sure that styles don’t spread to other areas of
    your program. Writing your CSS styles in distinct files, often with the `module.css`
    extension, and importing them into your JavaScript files is how CSS Modules work.
    The imported styles are handled as an object, having the produced unique class
    names serving as value pairs and the keys serving as the primary class names.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块化方法中局部作用域 CSS 的方法是 CSS 模块。通过为每个组件自动创建独特的类名，它通过确保样式不会扩散到程序的其他区域来帮助防止全局样式之间的冲突。将
    CSS 样式写入单独的文件，通常带有 `module.css` 扩展名，并将它们导入到 JavaScript 文件中是 CSS 模块的工作方式。导入的样式被处理为一个对象，其中产生的唯一类名作为值对，键作为主要类名。
- en: How do we use CSS Modules?
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用 CSS 模块？
- en: We can utilize locally scoped CSS in our components by using CSS Modules. Class
    names are by default locally scoped using CSS Modules, preventing any naming conflicts.
    This is also the default styling method used in Next.js applications. We can see
    what this looks like in the following code snippets.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 CSS 模块在我们的组件中利用局部作用域的 CSS。使用 CSS 模块时，类名默认是局部作用域的，这可以防止任何命名冲突。这也是 Next.js
    应用程序中使用的默认样式方法。我们可以在下面的代码片段中看到它的样子。
- en: 'This is the CSS for the `Home.module.css` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Home.module.css` 文件的 CSS：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And this is the JavaScript for the `page.js` file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `page.js` 文件的 JavaScript：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, it is similar to using inline styles; however, we still have
    an external style sheet, so it is the best of both worlds. There is another approach
    to implementing CSS, which is by using `styled-components` and a CSS-in-JS approach.
    This gives us another way to set up our project and can offer many advantages
    when compared with other approaches. Let’s learn more about this implementation
    now.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它类似于使用内联样式；然而，我们仍然有一个外部样式表，所以这是两者的最佳结合。还有另一种实现 CSS 的方法，即使用 `styled-components`
    和 CSS-in-JS 方法。这为我们提供了另一种设置项目的方式，并且与其他方法相比可以提供许多优势。现在让我们更深入地了解这种实现方式。
- en: CSS-in-JS approach and styled-components and its usage
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS-in-JS 方法、样式组件及其用法
- en: This is a fundamental learning area for us as the CSS-in-JS methodology applies
    throughout the React framework. We will learn about the approach and how it’s
    possible for us to use a third-party library such as `styled-components` as an
    alternative to the other CSS techniques we learned earlier.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们学习的一个基本领域，因为 CSS-in-JS 方法在整个 React 框架中适用。我们将了解这种方法，以及我们如何使用第三方库，如 `styled-components`，作为我们之前学到的其他
    CSS 技术的替代方案。
- en: What is CSS-in-JS?
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS-in-JS 是什么？
- en: CSS-in-JS is an innovative web development style solution that incorporates
    CSS into JavaScript code. Instead of having separate CSS files, this method allows
    developers to define and oversee styles for their components right inside their
    JavaScript or TypeScript scripts. CSS-in-JS allows for improved component encapsulation,
    scoped styles, and simpler dynamic styling. It also enables you to use the entirety
    of JavaScript in your styles, which includes dynamically applying styles according
    to the state of the component or computing style values using JavaScript variables.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: CSS-in-JS 是一种创新的 Web 开发样式解决方案，它将 CSS 集成到 JavaScript 代码中。这种方法不是使用单独的 CSS 文件，而是允许开发者在他们的
    JavaScript 或 TypeScript 脚本中直接定义和监督组件的样式。CSS-in-JS 允许改进组件封装、作用域样式和更简单的动态样式。它还允许你在样式中使用
    JavaScript 的全部功能，包括根据组件的状态动态应用样式或使用 JavaScript 变量计算样式值。
- en: What are styled-components and how are they used in React projects?
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式组件是什么，以及它们如何在 React 项目中使用？
- en: With the help of a popular third-party tool for React, called `styled-components`,
    programmers can specify component styles in JavaScript rather than external CSS
    files. It offers a method for crafting CSS code that is focused on a particular
    component, simplifying the management and reusing styles throughout an application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 的一个流行第三方工具 `styled-components` 的帮助下，程序员可以在 JavaScript 中指定组件样式，而不是外部
    CSS 文件。它提供了一种针对特定组件的 CSS 代码的编写方法，简化了在整个应用程序中管理样式和重用样式的过程。
- en: Styled components adopt a CSS-in-JS methodology, which implies that JavaScript
    functions and variables are used to define CSS styles for component styles. This
    enables programmers to create dynamic styles by utilizing all of JavaScript’s
    capabilities, such as functions, variables, and other language constructs. When
    using `styled-components`, we have **server-side rendering** (**SSR**), which
    guarantees that our styles are rendered appropriately on the server. In comparison
    to other CSS such as inline styles, it has an advantage because it does not need
    extra effort to ensure good SSR support. The developer experience is additionally
    improved since styled components include syntax highlighting, linting, and auto-completion
    support in most code editors.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 样式组件采用 CSS-in-JS 方法，这意味着 JavaScript 函数和变量被用来定义组件的 CSS 样式。这使得程序员能够通过利用 JavaScript
    的所有功能，如函数、变量和其他语言结构，来创建动态样式。当使用 `styled-components` 时，我们有 **服务器端渲染**（**SSR**），这保证了我们的样式在服务器上得到适当的渲染。与内联样式等其他
    CSS 相比，它有一个优势，因为它不需要额外的努力来确保良好的 SSR 支持。由于样式组件在大多数代码编辑器中包含语法高亮、代码检查和自动完成支持，开发者的体验也得到了进一步的提升。
- en: This results in a more positive development experience and increased productivity
    because they also enable you to segregate styles from the JSX of the component,
    resulting in cleaner and more maintainable code. We can also use styled components
    to produce unique class names for each component, ensuring that styles are scoped
    to the appropriate components and avoiding inadvertent style leaks or conflicts.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得开发体验更加积极，并提高了生产力，因为它们还允许你将样式从组件的 JSX 中分离出来，从而产生更干净、更易于维护的代码。我们还可以使用样式组件为每个组件生成唯一的类名，确保样式被限制在适当的组件中，避免意外的样式泄漏或冲突。
- en: Another bonus we get access to is built-in theming support via React’s context
    API when we use `styled-components`. This makes it simple to build and manage
    uniform themes across our application, which is not possible with other CSS techniques.
    It’s a great plus to have support for all CSS features, such as pseudo-selectors,
    media queries, and keyframes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获得的一个额外好处是通过使用 `styled-components` 的 React 上下文 API 来内置主题支持。这使得我们在整个应用程序中构建和管理统一主题变得简单，这是其他
    CSS 技术所无法实现的。支持所有 CSS 功能，如伪选择器、媒体查询和关键帧，是一个巨大的优势。
- en: How to use styled components in React applications
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 React 应用程序中使用样式组件
- en: To reinforce this learning, let us go through an example to see what the syntax
    looks like. We will take a quick look at a simple, easy-to-understand, basic setup
    that should make this very clear.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加强这一学习，让我们通过一个示例来看看语法是什么样的。我们将快速查看一个简单、易于理解的简单设置，应该会使这一点非常清楚。
- en: How do we use styled components?
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用样式组件？
- en: 'Basically, a styled component can be created in four easy steps. Firstly, we
    have to install the package for the `styled-components` library, which can be
    found here: [https://styled-components.com/](https://styled-components.com/).
    Next, we import the package into the top of our file. Following that, we create
    a JavaScript-type object for our HTML, which has CSS styling. We use the `styled`
    method followed by the HTML element we want to use, such as a `div`, `section`,
    or `p` tag, and so on.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，创建样式组件可以通过四个简单的步骤完成。首先，我们必须安装 `styled-components` 库的包，该包可以在以下链接找到：[https://styled-components.com/](https://styled-components.com/)。接下来，我们将包导入到文件的顶部。然后，我们为我们的
    HTML 创建一个具有 CSS 样式的 JavaScript 类型的对象。我们使用 `styled` 方法后跟我们要使用的 HTML 元素，例如 `div`、`section`
    或 `p` 标签等。
- en: 'And lastly, we render the object on the screen by returning it in our code.
    The following code snippet shows a working example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在代码中返回对象以在屏幕上渲染它。以下代码片段展示了工作示例：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We successfully concluded this section and learned about many different CSS-related
    interview questions, which is going to put us in a great position to do well in
    interviews when it comes to this subject area.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地完成了这一部分，并学习了关于许多不同的 CSS 相关面试问题，这将使我们在这个主题领域在面试中处于有利位置。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We looked at several ways to utilize CSS in ReactJS apps, emphasizing the significance
    of design and styling in creating aesthetically appealing user interfaces. Importing
    external style sheets, inline CSS styles, CSS Modules, `styled-components`, and
    Atomic CSS frameworks such as Tailwind CSS were the five primary options explored.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了在 ReactJS 应用程序中利用 CSS 的几种方法，强调了设计和样式在创建美观用户界面中的重要性。导入外部样式表、内联 CSS 样式、CSS
    模块、`styled-components` 和像 Tailwind CSS 这样的原子 CSS 框架是探索的五种主要选项。
- en: We discussed how to connect and import external CSS files into a React component,
    allowing for centralized administration and separation of stylistic and component
    logic concerns. This method is perfect for using classic CSS in React apps.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何将外部 CSS 文件连接和导入到 React 组件中，从而实现集中管理和分离样式逻辑与组件逻辑的关注点。这种方法非常适合在 React 应用程序中使用经典
    CSS。
- en: We also looked into Atomic CSS and its utility-first approach, focusing specifically
    on the popular Tailwind CSS framework. By offering a broad collection of utility
    classes that can be used to build bespoke designs, this technique reduces the
    requirement for custom CSS.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了原子 CSS 和其以实用工具为首要的方法，特别关注了流行的 Tailwind CSS 框架。通过提供一大套可用于构建定制设计的实用类，这种技术减少了自定义
    CSS 的需求。
- en: On the subject of CSS Modules, we looked at how CSS Modules can help handle
    component-specific styles in a modular fashion. CSS Modules eliminate global style
    conflicts and encourage component reusability by utilizing locally scoped class
    names. We also discussed the popular `styled-components` package, which allows
    you to create styled components using tagged template literals. This method encourages
    component encapsulation, theming support, and a prop-based dynamic style.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 模块的主题上，我们探讨了 CSS 模块如何以模块化的方式处理特定组件的样式。CSS 模块通过使用本地作用域的类名来消除全局样式冲突，并鼓励组件的可重用性。我们还讨论了流行的
    `styled-components` 包，它允许你使用标签模板字面量创建样式化组件。这种方法鼓励组件封装、主题支持和基于属性的动态样式。
- en: You will easily design and style your application components while keeping clean,
    manageable, and scalable code bases by knowing and utilizing these various CSS
    methods in your ReactJS applications.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解并利用这些不同的 CSS 方法在你的 ReactJS 应用程序中，你可以轻松地设计和样式化你的应用程序组件，同时保持代码库的整洁、可管理和可扩展。
- en: In the next chapter, we will learn how to test and debug our ReactJS applications.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何测试和调试我们的 ReactJS 应用程序。
