- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Deploying to Production
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到生产环境
- en: Now that you have completed your first React application, it is time to learn
    how to deploy it to the world. For this purpose, we will use the cloud service
    called **DigitalOcean**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了你的第一个React应用程序，是时候学习如何将其部署到世界上了。为此，我们将使用名为**DigitalOcean**的云服务。
- en: 'In this chapter, you will learn how to deploy your React application using
    Node.js and `nginx` on an Ubuntu server from DigitalOcean. In a nutshell, we will
    cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用Node.js和`nginx`在DigitalOcean的Ubuntu服务器上部署你的React应用程序。简而言之，我们将涵盖以下主题：
- en: Creating a DigitalOcean Droplet and configuring it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建DigitalOcean Droplet并配置它
- en: Configuring nginx, PM2, and a domain
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置nginx、PM2和域名
- en: Implementing CircleCI for continuous integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施CircleCI进行持续集成
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章，你需要以下内容：
- en: Node.js 19+
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 19+
- en: Visual Studio Code
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: Creating our first DigitalOcean Droplet
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个DigitalOcean Droplet
- en: I have used DigitalOcean for the last seven years, and I can say that it is
    one of the best cloud services I have tried, not just because of the affordable
    costs but also because it is super easy and fast to configure, and the community
    has a lot of updated documentation to fix most of the common issues related to
    server configuration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用了DigitalOcean七年了，我可以这么说，它是我在尝试过的最好的云服务之一，不仅因为成本合理，而且因为它配置超级简单快捷，社区有大量的更新文档来修复大多数与服务器配置相关的问题。
- en: At this point, you will need to invest some money to get this service. I will
    show you the cheapest way to do this, and if in the future you want to increase
    the power of your Droplets, you will be able to increase the capacity without
    redoing the configuration.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，你需要投资一些钱来获取这项服务。我会向你展示最便宜的方法来做这件事，如果你将来想要增加Droplet的功率，你将能够增加容量而无需重新配置。
- en: The lowest price for a very basic Droplet is $6.00 per month ($0.009 per hour).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 非常基础的Droplet的最低价格为每月6.00美元（每小时0.009美元）。
- en: We are going to use Ubuntu 20.04 (but feel free to use the latest version, 21.04);
    you will need to know some basic Linux commands to be able to configure your Droplet.
    If you’re a beginner using Linux, don’t worry—I’ll try to show you each step in
    a very easy way.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Ubuntu 20.04（但请随意使用最新版本，21.04）；你需要了解一些基本的Linux命令才能配置你的Droplet。如果你是使用Linux的初学者，不要担心——我会尽量用非常简单的方式展示每个步骤。
- en: Signing up to DigitalOcean
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在DigitalOcean上注册
- en: If you don’t have a DigitalOcean account, you can sign up at [https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有DigitalOcean账户，你可以在[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)注册。
- en: 'You can sign up with your Google account or by registering manually. Once you
    register with Google, you will see the **Billing Info** view, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用你的Google账户注册，或者手动注册。一旦你用Google注册，你将看到**账单信息**视图，如下所示：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_01.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件自动生成描述](img/B18414_17_01.png)'
- en: 'Figure 17.1: Billing Info'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1：账单信息
- en: You can pay with your credit card or by using PayPal. Once you have configured
    your payment information, DigitalOcean will ask you for some information about
    your project so that it can configure your Droplet faster.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用信用卡或通过PayPal支付。一旦你配置了你的支付信息，DigitalOcean将要求你提供一些关于你的项目的信息，以便它可以更快地配置你的Droplet。
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_02.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序自动生成描述](img/B18414_17_02.png)'
- en: 'Figure 17.2: First application'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2：第一个应用程序
- en: Let’s go on to create our first Droplet.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建我们的第一个Droplet。
- en: Creating our first Droplet
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的第一个Droplet
- en: 'We will create a new Droplet from scratch. Follow these steps to do so:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从头开始创建一个新的Droplet。按照以下步骤操作：
- en: 'Select the **New Droplet** option, as shown in the following screenshot:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**新Droplet**选项，如下面的截图所示：
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_03.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序自动生成描述](img/B18414_17_03.png)'
- en: 'Figure 17.3: New Droplet'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3：新Droplet
- en: 'Choose **Ubuntu 20.04 (LTS) x64**, as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Ubuntu 20.04 (LTS) x64**，如下所示：
- en: '![Graphical user interface, application, Word  Description automatically generated](img/B18414_17_04.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，Word自动生成描述](img/B18414_17_04.png)'
- en: 'Figure 17.4: Choose an image'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4：选择镜像
- en: 'Then, choose the **Basic** plan, as shown here:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**基础**计划，如图所示：
- en: '![Table  Description automatically generated with medium confidence](img/B18414_17_05.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![表描述自动生成，置信度中等](img/B18414_17_05.png)'
- en: 'Figure 17.5: Choose a plan'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5：选择一个计划
- en: 'You can then choose **$6/mo** from the payment plan options:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以从支付计划选项中选择**$6/月**：
- en: '![](img/B18414_17_06.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18414_17_06.png)'
- en: 'Figure 17.6: CPU options'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6：CPU选项
- en: 'Select a region. In this case, we will select the **San Francisco** region:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个区域。在这种情况下，我们将选择**旧金山**区域：
- en: '![](img/B18414_17_07.png)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18414_17_07.png)'
- en: 'Figure 17.7: Choose Region'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.7：选择区域
- en: 'Create a root password, add the name of your Droplet, and then click on the
    **Create Droplet** button, as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个根密码，添加你的Droplet名称，然后点击**创建Droplet**按钮，如下所示：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_08.png)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件描述自动生成](img/B18414_17_08.png)'
- en: 'Figure 17.8: Authentication'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.8：身份验证
- en: 'It will take around 30 seconds to create your Droplet. Once it has been created,
    you will be able to see it:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你的Droplet大约需要30秒。一旦创建完成，你将能够看到它：
- en: '![](img/B18414_17_09.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18414_17_09.png)'
- en: 'Figure 17.9: My first Droplet'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.9：我的第一个Droplet
- en: 'Now, in your Terminal, you can access the Droplet by using the following command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在你的终端中，你可以使用以下命令访问Droplet：
- en: '[PRE0]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first time you access it, you will be asked for a fingerprint. You just
    need to type *Yes*, and then it will require your password (the one you defined
    when you created your Droplet).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次访问时，你会被要求输入指纹。你只需输入*是*，然后它会要求你输入密码（你在创建Droplet时定义的密码）。
- en: This serves as a security feature specifically designed to prevent *man-in-the-middle*
    attacks. The server’s “fingerprint” acts as a distinctive digital signature that
    is unique to the server itself. When you observe a fingerprint that matches the
    expected one, you can proceed by typing `yes` and pressing *Enter* to continue.
    Subsequently, the server will prompt you to enter your password. Provide the password
    you defined when you created your Droplet, and press *Enter*. Please note that,
    for security purposes, no characters will be displayed on the screen as you enter
    your password. Upon successful authentication, you will be logged in to your server,
    ready to initiate commands.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种专门设计用于防止*中间人攻击*的安全功能。服务器的“指纹”充当一个独特的数字签名，该签名仅属于服务器本身。当你观察到与预期匹配的指纹时，你可以通过输入`yes`并按*Enter*键继续。随后，服务器将提示你输入密码。请提供你在创建Droplet时定义的密码，并按*Enter*键。请注意，出于安全原因，在输入密码时屏幕上不会显示任何字符。认证成功后，你将登录到你的服务器，准备开始执行命令。
- en: '![Text  Description automatically generated](img/B18414_17_10.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B18414_17_10.png)'
- en: 'Figure 17.10: Connecting to Droplet'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10：连接到Droplet
- en: Now we are all set to install Node.js, which we will cover in the next section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好安装Node.js，我们将在下一节中介绍。
- en: Installing Node.js
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: 'Now that you’re connected to your Droplet, let’s configure it. First, we need
    to install the latest version of Node.js using a Personal Package Archive. The
    current version of Node at the time of writing this book is 19.9.x. Follow these
    steps to install Node.js:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经连接到你的Droplet，让我们来配置它。首先，我们需要使用个人软件包存档安装Node.js的最新版本。本书撰写时Node.js的当前版本是19.9.x。按照以下步骤安装Node.js：
- en: 'If, when you are reading this paragraph, Node has a new version, change the
    version in the `setup_19.x` command:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你阅读这个段落时Node.js有新版本，请更改`setup_19.x`命令中的版本：
- en: '[PRE1]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you get the `nodesource_setup.sh` file, run the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你获取到`nodesource_setup.sh`文件，运行以下命令：
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, install Node by running the following command:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过运行以下命令安装Node：
- en: '[PRE3]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If everything works fine, verify the installed version of Node and `npm` with
    the following commands:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，请使用以下命令验证安装的Node和`npm`版本：
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you need a newer version of Node.js, you can always upgrade it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要Node.js的新版本，你可以随时升级它。
- en: Configuring Git and GitHub
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Git和GitHub
- en: I created a special repository to help you to deploy your first React application
    to production ([https://github.com/FoggDev/production](https://github.com/FoggDev/production)).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个特殊的仓库，帮助你将第一个React应用程序部署到生产环境（[https://github.com/FoggDev/production](https://github.com/FoggDev/production)）。
- en: In your Droplet, you need to clone this Git repository (or your own repository
    if you have your React application ready to be deployed). The production repository
    is public, but normally you will use a private repository; in this case, you need
    to add the SSH key of your Droplet to your GitHub account.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Droplet 上，你需要克隆这个 Git 仓库（或者如果你已经准备好了要部署的 React 应用程序，克隆你自己的仓库）。生产仓库是公开的，但通常你会使用私有仓库；在这种情况下，你需要将你的
    Droplet 的 SSH 密钥添加到你的 GitHub 账户中。
- en: 'To create this key, follow these steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这个密钥，请按照以下步骤操作：
- en: Run the `ssh-keygen` command and then press *Enter* three times without entering
    any passphrase:![Text  Description automatically generated](img/B18414_17_11.png)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ssh-keygen` 命令，然后按三次 *Enter* 键，不输入任何密码短语：![文本 自动生成的描述](img/B18414_17_11.png)
- en: 'Figure 17.11: ssh-keygen'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.11：ssh-keygen
- en: If you leave your Terminal inactive for more than five minutes, your Droplet
    connection will probably be closed, and you will need to connect again.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你让你的终端闲置超过五分钟，你的 Droplet 连接可能会被关闭，你需要再次连接。
- en: 'Once you have created your Droplet SSH key, you can see it by running the following
    command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你创建了你的 Droplet SSH 密钥，你可以通过运行以下命令来查看它：
- en: '[PRE5]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will see something like this:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到类似以下的内容：
- en: '![Text  Description automatically generated](img/B18414_17_12.png)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![文本 自动生成的描述](img/B18414_17_12.png)'
- en: 'Figure 17.12: ssh-rsa'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.12：ssh-rsa
- en: 'Copy your SSH key and then visit your GitHub account. Go to **Settings** |
    **SSH and GPG Keys** ([https://github.com/settings/ssh/new](https://github.com/settings/ssh/new)).
    Then, paste your key in to the text area and add your title to the key:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制你的 SSH 密钥，然后访问你的 GitHub 账户。转到 **设置** | **SSH 和 GPG 密钥**（[https://github.com/settings/ssh/new](https://github.com/settings/ssh/new)）。然后，将你的密钥粘贴到文本区域，并为密钥添加标题：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_13.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序 自动生成的描述](img/B18414_17_13.png)'
- en: 'Figure 17.13: Adding a new SSH key to GitHub'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.13：向 GitHub 添加新的 SSH 密钥
- en: 'Once you click on the **Add SSH key** button, you will see your SSH key, like
    so:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击 **添加 SSH 密钥** 按钮，你会看到你的 SSH 密钥，如下所示：
- en: '![Text  Description automatically generated](img/B18414_17_14.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![文本 自动生成的描述](img/B18414_17_14.png)'
- en: 'Figure 17.14: SSH'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.14：SSH
- en: 'Now you can clone our repository (or yours) using the following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用以下命令克隆我们的仓库（或你的）：
- en: '[PRE6]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you clone it for the first time, you will get a message asking you to
    allow the RSA key fingerprint:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你第一次克隆时，你会收到一条消息，要求你允许 RSA 密钥指纹：
- en: '![Text  Description automatically generated](img/B18414_17_15.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![文本 自动生成的描述](img/B18414_17_15.png)'
- en: 'Figure 17.15: Cloning repository'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.15：克隆仓库
- en: 'You have to type `Yes` and then hit *Enter* to be able to clone it:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须输入 `Yes` 并按 *Enter* 键才能克隆它：
- en: '![Text  Description automatically generated](img/B18414_17_16.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![文本 自动生成的描述](img/B18414_17_16.png)'
- en: 'Figure 17.16: Known hosts'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.16：已知主机
- en: 'Then, you have to go to the production directory and install the `npm` packages:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你必须转到生产目录并安装 `npm` 包：
- en: '[PRE7]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want to test the application, just run the `start` script:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要测试应用程序，只需运行 `start` 脚本：
- en: '[PRE8]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then open your browser and go to your Droplet IP and add the port number. In
    my case, it is `http://144.126.222.17:3000`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后打开你的浏览器，转到你的 Droplet IP 并添加端口号。在我的例子中，它是 `http://144.126.222.17:3000`：
- en: '![A picture containing logo  Description automatically generated](img/B18414_17_17.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![包含标志的图片 自动生成的描述](img/B18414_17_17.png)'
- en: 'Figure 17.17: Project running in development mode'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.17：开发模式下的项目运行
- en: 'This will run the project in development mode. If you want to run it in production
    mode, use the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在开发模式下运行项目。如果你想以生产模式运行它，请使用以下命令：
- en: '[PRE9]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see **Production Process Manager** (**PM2**) running, as shown in
    the following screenshot:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会看到 **生产进程管理器**（**PM2**）正在运行，如下面的截图所示：
- en: '![Text  Description automatically generated](img/B18414_17_18.png)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![文本 自动生成的描述](img/B18414_17_18.png)'
- en: 'Figure 17.18: PM2'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.18：PM2
- en: 'If you run it and view the **Network** tab in your Chrome DevTools, you will
    see the bundles being loaded:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你运行它并在你的 Chrome DevTools 中的 **网络** 选项卡下查看，你会看到正在加载的包：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B18414_17_19.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图 中度置信度自动生成的描述](img/B18414_17_19.png)'
- en: 'Figure 17.19: The Network tab'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.19：网络选项卡
- en: We now have our React application working in production, but let’s see what
    else we can do with DigitalOcean in the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 React 应用程序已经在生产环境中运行，但在下一节中，让我们看看我们还能用 DigitalOcean 做些什么。
- en: Turning off our Droplet
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭我们的 Droplet
- en: 'To turn off the Droplet, follow these steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭 Droplet，请按照以下步骤操作：
- en: 'If you want to turn off your Droplet, you can go to the **Power** section,
    or you can use the **ON/OFF** switch:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要关闭你的 Droplet，你可以转到 **电源** 部分，或者你可以使用 **开启/关闭** 开关：
- en: '![Text  Description automatically generated](img/B18414_17_20.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![文本  自动生成的描述](img/B18414_17_20.png)'
- en: 'Figure 17.20: Turning off the Droplet'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.20：关闭 Droplet
- en: 'DigitalOcean will charge you only when your Droplet is **ON**. If you click
    on the **ON** switch to turn it off, then you will get the following confirmation
    message:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DigitalOcean 只在你开启 Droplet 时才会收费。如果你点击 **开启** 开关来关闭它，那么你会收到以下确认消息：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_21.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18414_17_21.png)'
- en: 'Figure 17.21: Turn off Droplet'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.21：关闭 Droplet
- en: In this way, you can control your Droplet and avoid paying unnecessarily when
    you’re not using your Droplet.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你可以控制你的 Droplet，并在不使用 Droplet 时避免不必要的付费。
- en: Configuring nginx, PM2, and a domain
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 nginx、PM2 和域名
- en: Our Droplet is ready to be used for production, but as you can see, we are still
    using port `3000`. We need to configure nginx and implement a proxy to redirect
    the traffic from port `80` to `3000`; this means we won’t need to specify the
    port directly anymore.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Droplet 已准备好用于生产，但正如你所见，我们仍在使用端口 `3000`。我们需要配置 nginx 并实现代理以将流量从端口 `80` 重定向到
    `3000`；这意味着我们不再需要直接指定端口。
- en: '**Node PM2** will help us run the Node server in production securely. Generally,
    if we run Node directly with the `node` or `babel-node` commands, and there is
    an error in the app, then it will crash and will stop working. PM2 restarts the
    node server if an error occurs.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node PM2** 将帮助我们安全地运行 Node 服务器。通常，如果我们直接使用 `node` 或 `babel-node` 命令运行 Node，并且应用程序中发生错误，那么它将崩溃并停止工作。PM2
    在发生错误时重新启动 Node 服务器。'
- en: 'First, in your Droplet, you need to install PM2 globally:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的 Droplet 中，你需要全局安装 PM2：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: PM2 will help us to run our React app in a very easy way.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: PM2 将帮助我们以非常简单的方式运行我们的 React 应用程序。
- en: Installing and configuring nginx
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 nginx
- en: 'To install nginx, you need to execute the following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 nginx，你需要执行以下命令：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After you have installed nginx, you can start the configuration:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在你安装 nginx 之后，你可以开始配置：
- en: 'We need to adjust the firewall to allow the traffic for port `80`. To list
    the available application configurations, you need to run the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要调整防火墙以允许端口 `80` 的流量。要列出可用的应用程序配置，你需要运行以下命令：
- en: '[PRE12]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Nginx Full` means that it will allow the traffic from port `80` (HTTP) and
    port `443` (HTTPS). We haven’t configured any domain with SSL, so, for now, we
    should restrict the traffic to be sent just through port `80` (HTTP):'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Nginx Full` 表示它将允许来自端口 `80`（HTTP）和端口 `443`（HTTPS）的流量。我们尚未配置任何带有 SSL 的域名，因此，目前我们应该限制流量仅通过端口
    `80`（HTTP）发送：'
- en: '[PRE13]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you try to access the Droplet IP, you should see nginx working:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你尝试访问 Droplet IP，你应该看到 nginx 正在运行：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_22.png)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18414_17_22.png)'
- en: 'Figure 17.22: Welcome to nginx'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.22：欢迎使用 nginx
- en: 'You can manage the nginx process with these commands:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用以下命令管理 nginx 进程：
- en: '[PRE14]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Nginx is an amazing web server that is getting very popular nowadays.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 是一个非常出色的网站服务器，现在越来越受欢迎。
- en: Setting up a reverse proxy server
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置反向代理服务器
- en: 'As I mentioned previously, we need to set up a reverse proxy server to send
    the traffic from port `80` (HTTP) to port `3000` (the React app). To do this,
    you need to open the following file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所述，我们需要设置一个反向代理服务器，将端口 `80`（HTTP）的流量发送到端口 `3000`（React 应用程序）。为此，你需要打开以下文件：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The steps to set up the reverse proxy server are as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 设置反向代理服务器的步骤如下：
- en: 'In the `location /` block, you need to replace the code in the file with the
    following:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `location /` 块中，你需要用以下代码替换文件中的代码：
- en: '[PRE16]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you have saved the file, you can verify whether there is a syntax error
    in the nginx configuration with the following command:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，你可以使用以下命令验证 nginx 配置中是否存在语法错误：
- en: '[PRE17]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If everything is fine, then you should see this:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该看到这个：
- en: '![Text  Description automatically generated](img/B18414_17_23.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![文本  自动生成的描述](img/B18414_17_23.png)'
- en: 'Figure 17.23: sudo ngnix-t'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.23：sudo ngnix-t
- en: 'Finally, you need to restart the nginx server:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你需要重新启动 nginx 服务器：
- en: '[PRE18]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, you should be able to access the React application without the port, as
    shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够访问不带端口的React应用程序，如下面的截图所示：
- en: '![A picture containing text  Description automatically generated](img/B18414_17_24.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图片  自动生成的描述](img/B18414_17_24.png)'
- en: 'Figure 17.24: The React application without the port'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.24：不带端口的React应用程序
- en: We are almost done! In the next section, we are going to add a domain to our
    Droplet.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了！在下一节中，我们将向我们的Droplet添加一个域名。
- en: Adding a domain to our Droplet
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将域名添加到我们的Droplet
- en: Using an IP to access a website is not nice; we always need to use a domain
    to help users find our website more easily. If you want to use a domain with your
    Droplet, you need to change the nameservers of your domain to point to the DigitalOcean
    DNS. I normally use GoDaddy to register my domains.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IP地址访问网站并不方便；我们总是需要使用域名来帮助用户更容易地找到我们的网站。如果您想使用与您的Droplet关联的域名，您需要更改域名的名称服务器，使其指向DigitalOcean
    DNS。我通常使用GoDaddy来注册我的域名。
- en: 'To do so using GoDaddy, follow these steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用GoDaddy完成此操作，请按照以下步骤进行：
- en: 'Go to [https://dcc.godaddy.com/manage/YOURDOMAIN.COM/dns](https://dcc.godaddy.com/manage/YOURDOMAIN.COM/dns),
    and then go to the **Nameservers** section:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://dcc.godaddy.com/manage/YOURDOMAIN.COM/dns](https://dcc.godaddy.com/manage/YOURDOMAIN.COM/dns)，然后进入**名称服务器**部分：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_25.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18414_17_25.png)'
- en: 'Figure 17.25: Nameservers'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.25：名称服务器
- en: 'Click on the **Change** button, select **Custom**, and then specify the DigitalOcean
    DNS:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**更改**按钮，选择**自定义**，然后指定DigitalOcean DNS：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_26.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18414_17_26.png)'
- en: 'Figure 17.26: DigitalOcean Nameservers'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.26：DigitalOcean名称服务器
- en: 'Normally, it takes between 15 and 30 minutes for the DNS changes to be reflected;
    for now, after you have updated your nameservers, go to your **Droplet** dashboard
    and then choose the **Add a domain** option:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，DNS更改需要15到30分钟才能生效；现在，在您更新了名称服务器后，前往您的**Droplet**仪表板，然后选择**添加域名**选项：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_27.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18414_17_27.png)'
- en: 'Figure 17.27: Add a domain'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.27：添加域名
- en: 'Then, write your domain name, select your Droplet, and click on the **Add Domain**
    button:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入您的域名，选择您的Droplet，并点击**添加域名**按钮：
- en: '![Chart, radar chart  Description automatically generated](img/B18414_17_28.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图表，雷达图  自动生成的描述](img/B18414_17_28.png)'
- en: 'Figure 17.28: Networking'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.28：网络
- en: 'Now, you must create a new record for **CNAME**. Select the **CNAME** tab,
    and in **HOSTNAME**, type `www`; in the alias field, write `@;` by default, the
    TTL is `43200`. All of this is to enable access to your domain using the `www`
    prefix:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您必须为**CNAME**创建一个新的记录。选择**CNAME**选项卡，在**主机名**中输入`www`；在别名字段中，默认写入`@`；默认情况下，TTL为`43200`。所有这些都是为了通过`www`前缀访问您的域名：
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_29.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  自动生成的描述](img/B18414_17_29.png)'
- en: 'Figure 17.29: Create new record'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.29：创建新记录
- en: 'If you did everything correctly, you should be able to access your domain and
    see the React application working. As I said before, this process can take up
    to 30 minutes, but in some cases, it can take up to 24 hours, depending on the
    DNS propagation speed:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一切操作正确，您应该能够访问您的域名并看到React应用程序正在运行。正如我之前所说，这个过程可能需要长达30分钟，但在某些情况下，可能需要长达24小时，具体取决于DNS传播速度。
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_30.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18414_17_30.png)'
- en: 'Figure 17.30: React application running on domain'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.30：运行在域名上的React应用程序
- en: Amazing. Now you have officially deployed your first React application to production!
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。现在您已经正式部署了您的第一个React应用程序到生产环境！
- en: Implementing CircleCI for continuous integration
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施CircleCI进行持续集成
- en: 'I’ve been using CircleCI for a while, and I can tell you that it is one of
    the best CI solutions: it is free for personal use, giving you unlimited repositories
    and users; you have 1,000 build minutes per month, one container, and one concurrent
    job; if you need more, you can upgrade the plan with an initial price of $50 per
    month.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用 CircleCI 一段时间了，我可以告诉你，它是最好的 CI 解决方案之一：对个人用户免费，提供无限数量的仓库和用户；你每月有 1,000
    构建分钟，一个容器和一个并发作业；如果你需要更多，你可以以每月 50 美元的初始价格升级计划。
- en: The first thing you need to do is sign up on the site using your GitHub account
    (or Bitbucket, if you prefer).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是使用你的 GitHub 账户（或者如果你更喜欢，使用 Bitbucket）在该网站上注册。
- en: 'If you choose to use GitHub, you need to authorize CircleCI in your account,
    as shown in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择使用 GitHub，你需要在你的账户中授权 CircleCI，如下面的截图所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_31.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18414_17_31.png)'
- en: 'Figure 17.31: Authorize CircleCI'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.31：授权 CircleCI
- en: In the next section, we are going to add our SSH key to CircleCI.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把我们的 SSH 密钥添加到 CircleCI。
- en: Adding an SSH key to CircleCI
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 CircleCI 中添加 SSH 密钥
- en: 'Now that you have created your account, CircleCI needs a way to log in to your
    DigitalOcean Droplet to run the deploy script. Follow these steps to complete
    this task:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了账户，CircleCI 需要一种方式来登录你的 DigitalOcean Droplet 以运行部署脚本。按照以下步骤完成此任务：
- en: 'Create a new SSH key inside your Droplet using the following command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Droplet 中使用以下命令创建一个新的 SSH 密钥：
- en: '[PRE19]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After that, let’s add the key to our `authorized_keys`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们将密钥添加到我们的 `authorized_keys`：
- en: '[PRE20]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, you need to download the private key. To verify that you can log in with
    the new key, you need to copy it to your local machine, as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要下载私钥。为了验证你可以使用新密钥登录，你需要按照以下方式将其复制到你的本地机器：
- en: '[PRE21]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you did everything correctly, you should be able to log in to your Droplet
    without a password, and that means CircleCI can access our Droplet too.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你一切操作正确，你应该能够无密码登录你的 Droplet，这意味着 CircleCI 也可以访问我们的 Droplet。
- en: 'Copy the content of your `id_rsa_droplet.pub` key and then go to your repository
    settings ([https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY](https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY)):'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制你的 `id_rsa_droplet.pub` 密钥的内容，然后转到你的仓库设置（[https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY](https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY)）：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18414_17_32.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18414_17_32.png)'
- en: 'Figure 17.32: Project Settings'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.32：项目设置
- en: 'Go to **SSH Keys**, as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **SSH 密钥**，如下所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_33.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18414_17_33.png)'
- en: 'Figure 17.33: SSH Keys'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.33：SSH 密钥
- en: 'You can also access the URL [https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY/ssh](https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY/ssh),
    and then click on the **Add SSH Key** button at the bottom:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以访问 URL [https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY/ssh](https://app.circleci.com/settings/project/github/YOUR_GITHUB_USER/YOUR_REPOSITORY/ssh)，然后点击底部的
    **添加 SSH 密钥** 按钮：
- en: '![Graphical user interface, application, email  Description automatically generated](img/B18414_17_34.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，电子邮件  自动生成的描述](img/B18414_17_34.png)'
- en: 'Figure 17.34: Add an SSH key'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.34：添加 SSH 密钥
- en: Paste your private key, and then provide a name for the **Hostname** field;
    we will name it `DigitalOcean`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粘贴你的私钥，然后为 **主机名** 字段提供一个名称；我们将命名为 `DigitalOcean`。
- en: Now let’s configure our CircleCI instance in the next section.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在下一节中配置我们的 CircleCI 实例。
- en: Configuring CircleCI
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 CircleCI
- en: Now that you have configured access for CircleCI to your Droplet, you need to
    add a `config` file to your project to specify the jobs you want to execute for
    the deployment process.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经为你的 Droplet 配置了 CircleCI 的访问权限，你需要向你的项目中添加一个 `config` 文件来指定部署过程中要执行的作业。
- en: 'This process is shown in the following steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程在以下步骤中展示：
- en: 'For this, you need to create the `.circleci` directory and add the following
    inside the `config.yml` file:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了这个，你需要创建 `.circleci` 目录并在 `config.yml` 文件中添加以下内容：
- en: '[PRE22]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When you have a `.yml` file, you need to be careful with the indentation; it
    is similar to Python in that if you don’t use indents correctly, you will get
    an error. Let’s see how this file is structured.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你有一个 `.yml` 文件时，你需要注意缩进；它与 Python 类似，如果你没有正确使用缩进，你会得到一个错误。让我们看看这个文件是如何结构的。
- en: 'Specify the CircleCI version we will use. In this instance, you are using version
    `2.1` (the latest one at the time of writing this book):'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定我们将使用的 CircleCI 版本。在这个例子中，你正在使用版本 `2.1`（撰写本书时的最新版本）：
- en: '[PRE23]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Inside `jobs`, we will specify that it needs to configure the container; we
    will create it using Docker and also outline the steps to follow for the deployment
    process.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `jobs` 中，我们将指定需要配置容器；我们将使用 Docker 创建它，并概述部署过程的步骤。
- en: '`working_directory` will be the temporal directory we will use to install the
    npm packages and run our deploy scripts. In this case, I decided to use the `tmp`
    directory, as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`working_directory` 将是我们将用于安装 npm 包和运行部署脚本的临时目录。在这种情况下，我决定使用 `tmp` 目录，如下所示：'
- en: '[PRE24]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As I said before, we will create a Docker container, and in this instance,
    I selected an existing image that includes `node: 18.12.1`. If you want to know
    about all the available images, you can visit [https://circleci.com/docs/2.0/circleci-images](https://circleci.com/docs/2.0/circleci-images):'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如我之前所说，我们将创建一个 Docker 容器，在这个例子中，我选择了一个包含 `node: 18.12.1` 的现有镜像。如果你想了解所有可用的镜像，你可以访问
    [https://circleci.com/docs/2.0/circleci-images](https://circleci.com/docs/2.0/circleci-images)：'
- en: '[PRE25]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For the code case, first do a `git checkout` to `master`, then in each `run`
    sentence, you need to specify the scripts you want to run:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于代码案例，首先使用 `git checkout` 命令切换到 `master` 分支，然后在每个 `run` 语句中，你需要指定你想要运行的脚本：
- en: '[PRE26]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here is an explanation of the previous steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对之前步骤的解释：
- en: First, you need to install the npm packages using `npm install` to be able to
    perform the next tasks.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要使用 `npm install` 命令安装 npm 包，以便能够执行后续任务。
- en: Execute the ESLint validation using `npm run lint`. If it fails, it will break
    the deployment process; otherwise, it continues with the next run.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run lint` 执行 ESLint 验证。如果失败，它将中断部署过程；否则，它将继续下一个运行。
- en: Execute the Jest validations using `npm run test`; if it fails, it will break
    the deployment process. Otherwise, it continues with the next run.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run test` 执行 Jest 验证；如果失败，它将中断部署过程。否则，它将继续下一个运行。
- en: In the last step, we connect to our DigitalOcean Droplet, passing the `StrictHostKeyChecking=no`
    flag to disable the strict host key checking. We then use the `$DROPLET_USER`
    and `$DROPLET_IP` `ENV` variables to connect to it (we will create those in the
    next step), and finally, we will specify all the commands we will perform inside
    our Droplet using single quotes.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步，我们连接到我们的 DigitalOcean Droplet，通过传递 `StrictHostKeyChecking=no` 标志来禁用严格的主机密钥检查。然后，我们使用
    `$DROPLET_USER` 和 `$DROPLET_IP` `ENV` 变量来连接到它（我们将在下一步创建这些变量），最后，我们将使用单引号指定我们将在
    Droplet 内执行的命令。
- en: 'These commands are listed as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令如下列出：
- en: '**cd production:** Grants access to the production (or your Git repository
    name).'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cd production:** 授予对生产环境（或你的 Git 仓库名称）的访问权限。'
- en: '**git checkout master:** This will check out the master branch.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git checkout master:** 这将检出主分支。'
- en: '**git pull:** Pulls the latest changes from our repository.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git pull:** 从我们的仓库拉取最新更改。'
- en: '**npm run start:production:** This is the final step, which runs our project
    in production mode.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**npm run start:production:** 这是最后一步，它以生产模式运行我们的项目。'
- en: Finally, let’s add some environment variables to our CircleCI.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们向我们的 CircleCI 添加一些环境变量。
- en: Creating environment variables variables in CircleCI
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 CircleCI 中创建环境变量
- en: 'As you saw previously, we are using the **$DROPLET_USER** and **$DROPLET_IP**
    variables, but how do we define those? Follow these steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你之前看到的，我们正在使用 **$DROPLET_USER** 和 **$DROPLET_IP** 变量，但我们如何定义这些变量呢？请按照以下步骤操作：
- en: 'You need to go to your project settings again and select the **Environment
    Variables** option. Then, you need to create the `DROPLET_USER` variable:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要再次进入项目设置，并选择 **环境变量** 选项。然后，你需要创建 `DROPLET_USER` 变量：
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_35.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18414_17_35.png)'
- en: 'Figure 17.35: Add Environment Variable'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.35：添加环境变量
- en: 'Then, you need to create the **DROPLET_IP** variable using your Droplet IP:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要使用你的 Droplet IP 创建 **DROPLET_IP** 变量：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_36.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序描述自动生成](img/B18414_17_36.png)'
- en: 'Figure 17.36: DROPLET_IP'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.36：DROPLET_IP
- en: Now, you need to push the config file to your repository, and you will be ready
    for the magic. Now that CircleCI is connected to your repository, every time you
    push changes to master, it will fire a build.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要将配置文件推送到你的仓库，然后你就可以准备魔法时刻了。现在，由于CircleCI已经连接到你的仓库，每次你将更改推送到master分支时，它都会触发一个构建。
- en: 'Normally, the first two or three builds can fail due to syntax errors, indent
    errors in our config, or maybe because we have linter errors or unit test errors.
    If you have a failure, you will see something like this:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，前两个或三个构建可能会因为语法错误、配置中的缩进错误，或者可能是因为我们有代码检查错误或单元测试错误而失败。如果你有失败，你会看到类似以下的内容：
- en: '![Text  Description automatically generated with medium confidence](img/B18414_17_37.png)'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![文本描述自动生成，中等置信度](img/B18414_17_37.png)'
- en: 'Figure 17.37: Build error'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.37：构建错误
- en: As you can see from the preceding screenshot, the first build failures at the
    bottom say **Build Error**, and the second one says `build-deploy` under WORKFLOW,
    as shown in *Figure 17.38*. This basically means that in the first build, I had
    a syntax error in the `config.yml` file.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，底部的第一个构建失败说**构建错误**，第二个在WORKFLOW下说`build-deploy`，如*图17.38*所示。这基本上意味着在第一次构建中，我在`config.yml`文件中有语法错误。
- en: 'After you fix all the syntax errors in the `config.yml` file and all the issues
    with the linter or the unit tests, you should see a **Success** build like this:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你修复了`config.yml`文件中的所有语法错误以及所有与代码检查或单元测试相关的问题后，你应该会看到一个**成功**构建，如下所示：
- en: '![](img/B18414_17_38.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18414_17_38.png)'
- en: 'Figure 17.38: SUCCESS build'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.38：成功构建
- en: 'If you click on the build number, you can see all the steps that CircleCI executed
    before publishing the new changes in your Droplet:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击构建号，你可以看到CircleCI在发布你Droplet中的新更改之前执行的所有步骤：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18414_17_39.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序描述自动生成](img/B18414_17_39.png)'
- en: 'Figure 17.39: Steps executed by CircleCI'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.39：CircleCI执行的步骤
- en: 'As you can see, the order of the steps is the same as we specified in our `config.yml`
    file; you can even see the output of each step by clicking on it:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，步骤的顺序与我们指定的`config.yml`文件中的顺序相同；你甚至可以通过点击它来查看每个步骤的输出：
- en: '![Graphical user interface, text  Description automatically generated](img/B18414_17_40.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本描述自动生成](img/B18414_17_40.png)'
- en: 'Figure 17.40: Lint and test steps'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.40：代码检查和测试步骤
- en: 'Now, let’s suppose you have an error on your linter validation or in some unit
    tests. Let’s see what happens in that case, as follows:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，假设你在你的代码检查验证或某些单元测试中遇到了错误。让我们看看在这种情况下会发生什么，如下所示：
- en: '![Text  Description automatically generated](img/B18414_17_41.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B18414_17_41.png)'
- en: 'Figure 17.41: Linter error'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.41：代码检查错误
- en: As you can see, once an error is detected, it will exit with code `1`. This
    means it will abort the deployment and mark it as a failure. Notice that none
    of the steps after `npm run lint` are executed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一旦检测到错误，它将以代码`1`退出。这意味着它将终止部署并将其标记为失败。请注意，在`npm run lint`之后的步骤都没有被执行。
- en: 'Another cool thing is that if you now go to your GitHub repository and check
    your commits, you will see all the commits that had a successful build and all
    the commits that had a failed build:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件很酷的事情是，如果你现在去你的GitHub仓库检查你的提交，你会看到所有成功构建的提交和所有失败构建的提交：
- en: '![Graphical user interface, application  Description automatically generated](img/B18414_17_42.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18414_17_42.png)'
- en: 'Figure 17.42: GitHub successful build'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.42：GitHub成功构建
- en: 'This is amazing: now you have your project configured to do deployments automatically,
    and it is connected to your GitHub repository.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是太棒了：现在你的项目已经配置好了自动部署，并且它与你的GitHub仓库相连。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! We’ve reached the end of our journey through the deployment
    process, and you now have the knowledge and skills needed to deploy your React
    application to the world (production). You’ve also learned how to implement CircleCI
    for continuous integration, streamlining your development process and ensuring
    that your application remains performant and reliable.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经完成了部署过程的旅程，你现在拥有了将你的React应用程序部署到世界（生产环境）所需的知识和技能。你还学会了如何实现CircleCI进行持续集成，简化你的开发流程，并确保你的应用程序保持高性能和可靠性。
- en: By leveraging the strategies and best practices outlined in this chapter, you
    can confidently launch your application to a global audience, secure in the knowledge
    that it has been optimized for speed, scalability, and resilience. Thank you for
    joining me on this journey. I hope you’ve enjoyed reading my book.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用本章中概述的策略和最佳实践，您可以自信地将您的应用程序推向全球受众，安心地知道它已经针对速度、可扩展性和弹性进行了优化。感谢您与我一同踏上这段旅程。我希望您喜欢阅读我的书籍。
