["```js\n    npm run serve cc-inputs-outputs \n    ```", "```js\n    export class AppComponent {\n      **notificationsCount =** **0****;**\n    } \n    ```", "```js\n    import { Component, OnInit, **Input** } from '@angular/core';\n    @Component({\n      selector: 'app-notifications-manager',\n      templateUrl: './notifications-manager.component.html',\n      styleUrls: ['./notifications-manager.component.scss']\n    })\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n      @Input() **count** = 0\n    constructor() { }\n      ngOnInit(): void {\n      }\n      addNotification() {\n        this.**count**++;\n      }\n      removeNotification() {\n        if (this.**count** == 0) {\n          return;\n        }\n        this.**count**--;\n      }\n      resetCount() {\n        this.**count** = 0;\n      }\n    } \n    ```", "```js\n    <div class=\"notif-manager\">\n    <div class=\"notif-manager__count\">\n        Notifications Count: {{**count**}}\n      </div>\n      ...\n    </div> \n    ```", "```js\n    <div class=\"content\" role=\"main\">\n    <app-notifications-manager\n     **[****count****]=****\"notificationsCount\"**>\n    </app-notifications-manager>\n    </div> \n    ```", "```js\n    export class AppComponent {\n      notificationsCount = **10**;\n    } \n    ```", "```js\n    import { Component, OnInit, **Input** } from '@angular/core';\n    ...\n    export class NotificationsButtonComponent implements OnInit {\n      @**Input****() count =** **0****;**\n      ...\n    } \n    ```", "```js\n    <!-- Toolbar -->\n    <div class=\"toolbar\" role=\"banner\">\n      ...\n      <span>@Component Inputs and Outputs</span>\n    <div class=\"spacer\"></div>\n    <div class=\"notif-bell\">\n    <app-notifications-button\n     **[****count****]=****\"notificationsCount\"**>\n    </app-notifications-button>\n    </div>\n    </div>\n    ... \n    ```", "```js\n    <div class=\"bell\">\n    <i class=\"material-icons\">notifications</i>\n    <div class=\"bell__count\">\n    <div class=\"bell__count__digits\">\n          {{**count**}}\n        </div>\n    </div>\n    </div> \n    ```", "```js\n    import { Component, OnInit, Input, **Output****,** **EventEmitter**} from '@angular/core';\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n      @Input() count = 0\n    **@Output****() countChanged =** **new****EventEmitter****<****number****>();**\n    ...\n      addNotification() {\n        this.count++;\n        **this****.****countChanged****.****emit****(****this****.****count****);**\n      }\n      removeNotification() {\n        ...\n        this.count--;\n        **this****.****countChanged****.****emit****(****this****.****count****);**\n      }\n      resetCount() {\n        this.count = 0;\n        **this****.****countChanged****.****emit****(****this****.****count****)**;\n      }\n    } \n    ```", "```js\n    <div class=\"content\" role=\"main\">\n    <app-notifications-manager\n     **(****countChanged****)=****\"updateNotificationsCount($event)**\"\n     [count]=\"notificationsCount\">\n     </app-notifications- manager>\n    </div> \n    ```", "```js\n    export class AppComponent {\n      notificationsCount = 10;\n      **updateNotificationsCount****(****count:** **number****) {**\n    **this****.****notificationsCount** **= count;**\n    **}**\n    } \n    ```", "```js\n    npm run serve cc-services \n    ```", "```js\n    cd start && nx g s services/Notifications --project cc-services \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    **import** **{** **BehaviorSubject** **}** **from****'rxjs'****;**\n    @Injectable({\n      providedIn: 'root'\n    })\n    export class NotificationsService {\n      **count$ =** **new****BehaviorSubject****(****0****);**\n    setCount(value: number) {\n        this.count$.next(value);\n      }\n    } \n    ```", "```js\n    import { Component, **inject** } from '@angular/core';\n    **import** **{** **NotificationsService** **}** **from****'../services/notifications.service'****;**\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n      **notificationService =** **inject****(****NotificationsService****);**\n    **notificationsCount$ =** **this****.****notificationService****.****count$****;**\n    ...\n    } \n    ```", "```js\n    ...\n    export class NotificationsManagerComponent implements OnInit {\n      ...\n      addNotification() {\n        **const** **currentValue =**\n    **this****.****notificationsCount$****.****getValue****();**\n    **this****.****notificationService****.****setCount****(currentValue +** **1****);**\n      }\n      removeNotification() {\n        **const** **currentValue =**\n    **this****.****notificationsCount$****.****getValue****();**\n    **if** **(currentValue ===** **0****) {**\n    **return****;**\n    **}**\n    **this****.****notificationService****.****setCount****(currentValue -** **1****);**\n      }\n      resetCount() {\n        **this****.****notificationService****.****setCount****(****0****);**\n      }\n    } \n    ```", "```js\n    <div class=\"notif-manager\">\n    <div class=\"notif-manager__count\">\n        Notifications Count: {{**notificationsCount$ | async**}}\n      </div>\n      ...\n    </div> \n    ```", "```js\n    import { Component**, inject** } from '@angular/core';\n    **import** **{** **NotificationsService** **}** **from****'../services/notifications.service'****;**\n    ...\n    export class NotificationsButtonComponent {\n      **notificationsCount$ =** **inject****(****NotificationsService****).****count$****;**\n    } \n    ```", "```js\n    <div class=\"bell\">\n    <i class=\"material-icons\">notifications</i>\n    <div class=\"bell__count\">\n    <div class=\"bell__count__digits\">\n          {{**notificationsCount$ | async**}}\n        </div>\n    </div>\n    </div> \n    ```", "```js\n    ...\n    export class NotificationsService {\n      private count: BehaviorSubject<number> = new\n    BehaviorSubject<number>(**10**);\n      ...\n    } \n    ```", "```js\n    npm run serve cc-setters \n    ```", "```js\n    export class VcLogsComponent implements OnInit {\n      @Input() vName;\n      **logs****:** **string****[] = [];**\n    } \n    ```", "```js\n    <h5>Latest Version = {{vName}}</h5>\n    **<****div****class****=****\"logs\"****>**\n    **<****div****class****=****\"logs__item\"** *******ngFor****=****\"let log of logs\"****>**\n    **{{log}}**\n    **</****div****>**\n    **</****div****>** \n    ```", "```js\n    import { Component, **Input** } from '@angular/core'\n    ...\n    export class VcLogsComponent implements OnInit {\n      **@Input****()**\n    **get****vName****() {**\n    **return****this****.****_vName****;**\n    **}**\n    **set****vName****(****name:** **string****) {**\n    **this****.****_vName** **= name;**\n    **}**\n    logs: string[] = [];\n      **_vName!:** **string****;**\n    ...\n    } \n    ```", "```js\n    export class VcLogsComponent implements OnInit {\n      ...\n      set vName(name: string) {\n        **if** **(!****this****.****_vName****) {**\n    **this****.****logs****.****push****(****`initial version is** **${name.trim()}****`****)**\n    **}**\n    this._vName = name;\n      }\n    ...\n    } \n    ```", "```js\n    export class VcLogsComponent implements OnInit {\n      ...\n      set vName(name: string) {\n        if (!name) return;\n        if (!this._vName) {\n          this.logs.push(`initial version is ${name.trim()}`)\n        }**else** **{**\n    **this****.****logs****.****push****(****`version changed to** **${name.trim()}****`****)**\n    **}**\n    this._vName = name;\n      } \n    ```", "```js\n    npm run serve cc-ng-on-changes \n    ```", "```js\n    export class VcLogsComponent implements OnInit {\n      @Input() vName;\n      **logs****:** **string****[] = [];**\n    ...\n    } \n    ```", "```js\n    <h5>Latest Version = {{vName}}</h5>\n    **<****div****class****=****\"logs\"****>**\n    **<****div****class****=****\"logs__item\"** *******ngFor****=****\"let log of logs\"****>**\n    **{{log}}**\n    **</****div****>**\n    **</****div****>** \n    ```", "```js\n    import { Component, Input, **OnChanges****,** **SimpleChanges** } from '@angular/core';\n    ...\n    export class VcLogsComponent **implements****OnChanges** {\n      @Input() vName;\n      logs: string[] = [];\n      **ngOnChanges****(****changes: SimpleChanges****) {**\n    **}**\n    } \n    ```", "```js\n    ...\n    export class VcLogsComponent implements OnChanges {\n      ...\n      ngOnChanges(changes: SimpleChanges) {\n        **const** **{ currentValue } = changes[****'vName'****];**\n    **if** **(changes[****'vName'****].****isFirstChange****()) {**\n    **this****.****logs****.****push****(****`initial version is** **${currentValue.trim()}****`****);**\n    **}**\n      }\n    } \n    ```", "```js\n    ...\n    export class VcLogsComponent implements OnInit, OnChanges {\n      ...\n      ngOnChanges(changes: SimpleChanges) {\n        const { currentValue } = changes['vName'];\n        if (changes['vName'].isFirstChange()) {\n          this.logs.push(`initial version is ${currentValue.trim()}`);\n        } **else** **{**\n    **this****.****logs****.****push****(****`version changed to** **${currentValue.trim()}****`****)**\n    **}**\n      }\n    } \n    ```", "```js\n    npm run serve cc-template-vars \n    ```", "```js\n    ...\n    <div class=\"content\" role=\"main\">\n      ...\n      <app-gallery **#****gallery**></app-gallery>\n    </div> \n    ```", "```js\n    import { Component } from '@angular/core';\n    **import** **{** **GalleryComponent** **}** **from****'./components/gallery/gallery.component'**;\n    ...\n    export class AppComponent {\n      ...\n      addNewPicture(**gallery: GalleryComponent**) {\n        console.log('added new picture'**, gallery**);\n      }\n      removeFirstPicture(**gallery: GalleryComponent**) {\n        console.log('removed first picture'**, gallery**);\n      }\n    } \n    ```", "```js\n    ...\n    <div class=\"content\" role=\"main\">\n    <div class=\"gallery-actions\">\n    <button class=\"btn btn-primary\"\n          (click)=\"addNewPicture(**gallery**)\">Add Picture</button>\n    <button class=\"btn btn-danger\"\n          (click)=\"removeFirstPicture(**gallery**)\">Remove First</button>\n    </div>\n      ...\n    </div> \n    ```", "```js\n    ...\n    export class AppComponent {\n      ...\n      addNewPicture(gallery: GalleryComponent) {\n        **gallery.****pictures****.****unshift****(gallery.****generateImage****());**\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    export class AppComponent {\n       ...\n      removeFirstPicture(gallery: GalleryComponent) {\n        **gallery.****pictures****.****shift****();**\n      }\n    } \n    ```", "```js\n    npm run serve cc-view-child to serve the project. \n    ```", "```js\n    import { Component**,** **ViewChild** } from '@angular/core';\n    **import** **{** **GalleryComponent** **}** **from****'****./components/gallery/gallery.component'****;**\n    ...\n    export class AppComponent {\n      **@ViewChild****(****GalleryComponent****) gallery!:** **GalleryComponent****;**\n     **...**\n    } \n    ```", "```js\n    ...\n    export class AppComponent {\n      @ViewChild(GalleryComponent) gallery!: GalleryComponent;\n      addNewPicture() {    console.log('added new picture');\n        **this****.****gallery****.****pictures****.****unshift****(**\n    **this****.****gallery****.****generateImage****()**\n    **);**\n      }\n      ...\n    } \n    ```", "```js\n    ...\n    export class AppComponent {\n    ...\n      removeFirstPicture() {\n        **this****.****gallery****.****pictures****.****shift****();**\n      }\n    } \n    ```", "```js\n    npm run serve cc-standalone-components \n    ```", "```js\n    cd start && nx g c user-details --standalone --directory apps/chapter01/cc-standalone-components/src/app/user-details \n    ```", "```js\n    ...\n    export const appRoutes: Route[] = [\n      {...},\n      **{**\n    **path****:** **':uuid'****,**\n    **loadComponent****:** **() =>**\n    **import****(****'****./user-details/user-details.component'****)**\n    **.****then****(****(****m****) =>** **m.****UserDetailsComponent**\n    **),**\n    **},**\n    ]; \n    ```", "```js\n    ...\n    import { RouterModule } from '@angular/router';\n    @Component({\n      ...\n      imports: [CommonModule, RouterModule],\n      ...\n    })\n    export class UsersComponent{} \n    ```", "```js\n    <ul>\n      @for (user of users; track user.uuid) {\n        <li **routerLink****=****\"/{{ user.uuid }}\"****>**\n          ...\n        </li>\n      }\n    </ul> \n    ```", "```js\n    ...\n    import { RouterModule } from '@angular/router';\n    @Component({\n      ...\n      imports: [CommonModule, RouterModule],\n      ...\n    })\n    export class UserDetailsComponent {} \n    ```", "```js\n    import { Component, **inject** } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    import { **ActivatedRoute****,** RouterModule } from '@angular/router';\n    **import** **{** **Observable** **}** **from****'rxjs'****;**\n    **import** **{** **User** **}** **from****'../data'****;**\n    @Component({...})\n    export class UserDetailsComponent {\n      **route =** **inject****(****ActivatedRoute****);**\n    **user$!:** **Observable****<****User** **|** **undefined****>;**\n    } \n    ```", "```js\n    ...\n    import { filter, map, Observable } from 'rxjs';\n    import { User, USERS } from '../data';\n    @Component({...})\n    export class UserDetailsComponent {\n      ...\n      constructor() {\n        this.user$ = this.route.paramMap.pipe(\n          filter((params) => !!params.get('uuid')),\n          map((params) => {\n            const uuid = params.get('uuid');\n            return USERS.find((user) => user.uuid === uuid);\n          })\n        );\n      }\n    } \n    ```", "```js\n    <ng-container *ngIf=\"user$ | async as user\">\n    <div class=\"flex gap-4 items-center\">\n    <a routerLink=\"/\" class=\"hover:text-slate-500\">\n    <span class=\"material-symbols-outlined\"> arrow_back\n          </span>\n    </a>\n    <article routerLink=\"/{{ user.uuid }}\">\n    <img src=\"img/{{ user.picture.thumbnail }}\" />\n    <h4>{{ user.name.first }} {{ user.name.last }}</h4>\n    </article>\n    </div>\n    </ng-container> \n    ```", "```js\n    npm run serve ng-cc-signals \n    ```", "```js\n    ...\n    **export****type****Task** **= {**\n    **completed****:** **boolean****;**\n    **title****:** **string****;**\n    **}**\n    **export****enum****TasksFilter** **{**\n    **All****,**\n    **Active****,**\n    **Completed**\n    **}** \n    ```", "```js\n    import { CommonModule } from '@angular/common';\n    import { Component, **signal** } from '@angular/core';\n    import { RouterModule } from '@angular/router';\n    **import** **{** **Task** **}** **from****'./task.model'****;**\n    ...\n    export class AppComponent {\n      tasks = **signal<****Task****[]>(**[\n        { title: 'Buy milk', completed: false },\n        { title: 'Read a book', completed: true },\n      ]**)**;\n    } \n    ```", "```js\n    <!-- Task List -->\n    <ul>\n          @for (task of **tasks()**; track $index) {\n            <li class=\"mb-2 flex gap-4 items-center cursor\n    -pointer hover:opacity-70\">\n    <input type=\"checkbox\" [checked]=\n     \"task.completed\" />\n    <span [ngClass]=\"{'line-through': task.completed}\" >{{ task.title }}</span>\n    </li>\n          }\n        </ul> \n    ```", "```js\n    ...\n    export class AppComponent {\n      tasks = signal<Task[]>([...]);\n\n      **toggleTask****(****task: Task****) {**\n    **const** **updatedTasks =** **this****.****tasks****().****map****(****taskItem** **=>**\n    **taskItem.****title** **=== task.****title** **? {...taskItem,**\n    **completed****: !taskItem.****completed****} : taskItem**\n    **);**\n    **this****.****tasks****.****set****(updatedTasks);**\n    **}**\n    } \n    ```", "```js\n    <!-- Task List -->\n    <ul>\n          @for (task of tasks(); track $index) {\n            <li **(****click****)=****\"toggleTask(task)\"** class=\"mb-2 flex\n    gap-4 items-center cursor-pointer\n    hover:opacity-70\">\n    <input type=\"checkbox\" [checked]=\n     \"task.completed\" />\n    <span [ngClass]=\"{'line-through':\n    task.completed}\">{{ task.title }}</span>\n    </li>\n          }\n        </ul> \n    ```", "```js\n    ...\n    import { Component, **computed,** signal } from '@angular/core';\n    ...\n    export class AppComponent {\n      tasks = signal<Task[]>([...]);\n\n      **finishedTasksCount =** **computed****(****() =>** **{**\n    **return****this****.****tasks****().****filter****(****task** **=>**\n    **task.****completed****).****length****;**\n    **})**\n    toggleTask(task: Task) {...}\n    } \n    ```", "```js\n    <main class=\"content\" role=\"main\">\n    <div class=\"mx-auto p-4\">\n    <div class=\"flex items-center justify-between mb-4\">\n    <h1 class=\"text-2xl\">Task Manager</h1>\n    <span>\n            (**{{finishedTasksCount()}}** / **{{tasks().length}}**)\n          </span>\n    </div>\n        ...\n      </div>\n    </main> \n    ```", "```js\n    ...\n    export class AppComponent {\n      ...\n      finishedTasksCount = computed(() => {...})\n\n      **addTask****(****titleInput: HTMLInputElement****) {**\n    **if** **(titleInput.****value****) {**\n    **const** **newTask = {** \n    **title****: titleInput.****value****,** \n    **completed****:** **false**\n    **};**\n    **this****.****tasks****.****set****([...****this****.****tasks****(), newTask]);**\n    **}**\n    **titleInput.****value** **=** **''****;**\n    **}**\n    toggleTask(task: Task) {...}\n    } \n    ```", "```js\n    <!-- Task Input -->\n    <div class=\"mb-4\">\n    <input **#****titleInput** **(****keydown.enter****)=**\n    **\"addTask(titleInput)\"** class=\"p-2 border rounded\n    mr-2\" placeholder=\"New task...\" />\n    <button **(****click****)=****\"addTask(titleInput)\"**>Add</button>\n    </div> \n    ```", "```js\n    ...\n    import { Task**,** **TasksFilter** } from './task.model';\n\n    ...\n    export class AppComponent {\n      tasks = signal<Task[]>([...]);\n      **filter =** **signal****(****TasksFilter****.****All****);**\n    **filters =** **TasksFilter****;**\n    **filteredTasks =** **computed****(****() =>** **{**\n    **switch****(****this****.****filter****()) {**\n    **case****TasksFilter****.****All****:**\n    **return****this****.****tasks****();**\n    **case****TasksFilter****.****Active****:**\n    **return****this****.****tasks****().****filter****(****taskItem** **=>** **{**\n    **return** **!taskItem.****completed****;**\n    **});**\n    **case****TasksFilter****.****Completed****:**\n    **return****this****.****tasks****().****filter****(****taskItem** **=>** **{**\n    **return** **taskItem.****completed****;**\n    **});**\n    **}**\n    **})**\n    **changeFilter****(****filter: TasksFilter****) {**\n    **this****.****filter****.****set****(filter);**\n    **}**\n      ...\n    } \n    ```", "```js\n    <!-- Task List -->\n    <ul>\n          @for (task of **filteredTasks()**; track $index) {\n            <li (click)=\"toggleTask(task)\" class=\"mb-2 flex gap-\n    4 items-center cursor-pointer hover:opacity-70\">\n    <input type=\"checkbox\" [checked]=\n     \"task.completed\" />\n    <span [ngClass]=\"{'line-through':\n    task.completed}\">{{ task.title }}</span>\n    </li>\n          }\n        </ul>\n    <!-- Filters -->\n    <div class=\"mt-4\">\n    <button **(****click****)=****\"changeFilter(filters.All)\"**\n    **[****ngClass****]=****\"{'!bg-purple-500 text-white': filter()**\n    **=== filters.All}\"** class=\"p-2 rounded mr-2\">\n            All</button>\n    <button **(****click****)=****\"changeFilter(filters.Active)\"**\n    **[****ngClass****]=****\"{'!bg-purple-500 text-white': filter()**\n    **=== filters.Active}\"** class=\"p-2 rounded mr-2\">\n            Active</button>\n    <button **(****click****)=****\"changeFilter(filters.Completed)\"**\n    **[****ngClass****]=****\"{'!bg-purple-500 text-white': filter()**\n    **=== filters.Completed}\"** class=\"p-2 rounded\">\n            Completed</button>\n    </div> \n    ```", "```js\n    ...\n    import { Component, computed, signal, effect, ViewChild } from '@angular/core';\n    ...\n    import { SnackbarComponent } from './components/snackbar/snackbar.component';\n\n    @Component({\n      ...,\n      imports: [CommonModule, RouterModule, SnackbarComponent],\n    })\n    export class AppComponent {\n      @ViewChild(SnackbarComponent) snackbar!: SnackbarComponent;\n      ...\n      completedEffectRef = effect(() => {\n        const tasks = this.tasks();\n        if (this.finishedTasksCount() === tasks.length && tasks.length > 0) {\n          this.snackbar.show();\n        }\n      })\n\n      ...\n    } \n    ```", "```js\n    <main>\n      ...\n    </main>\n    **<****app-snackbar****>**\n    **Congratulations! You completed all tasks.**\n    **</****app-snackbar****>** \n    ```", "```js\nfilter = signal(TasksFilter.All); \n...\nchangeFilter(filter: TasksFilter) {\n  this.filter.set(filter);\n} \n```", "```js\n(property) AppComponent.finishedTasksCount: Signal<number> \n```"]