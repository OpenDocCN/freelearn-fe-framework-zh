- en: Chapter 6. Creating ASP.NET Core Web API Services for Angular
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 章 创建 ASP.NET Core Web API 服务用于 Angular
- en: This chapter takes you through the process of creating ASP.NET Web API services
    for Angular applications that we created in the last chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指引您创建 ASP.NET Web API 服务用于上一章中创建的 Angular 应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: RESTful Web Services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful Web Services
- en: ASP.NET Web API overview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Web API 概述
- en: Creating ASP.NET Web API services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 ASP.NET Web API 服务
- en: Integrating the ASP.NET Web API with Angular applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 ASP.NET Web API 与 Angular 应用程序集成
- en: RESTful Web Services
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful Web Services
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*** '
- en: '**Representational State Transfer** (**REST**) is an architectural style or
    design principle that can be applied to implement RESTful services. REST ensures
    that the communication between clients and services is improved by having a limited
    number of operations. REST helps you organize these communications between independent
    systems in a simple way.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**表征状态转移** (**REST**) 是一种可以应用于实现 RESTful 服务的架构风格或设计原则。REST 确保了客户端和服务之间的通信通过拥有有限数量的操作而改善。REST
    帮助您以一种简单的方式组织这些独立系统之间的通信。'
- en: In REST, each resource is identified by its own **Universal Resource Identifier**
    (**URI**). It uses HTTP under the hood and utilizes HTTP verbs, such as `GET`,
    `POST`, `PUT`, and `DELETE`, to control or access the resources.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 REST 中，每个资源都由自己的 **通用资源标识符** (**URI**) 标识。它在 HTTP 的基础上使用，并利用 HTTP 动词，如 `GET`、`POST`、`PUT`
    和 `DELETE`，来控制或访问资源。
- en: 'RESTful web services are stateless in nature and are easy to scale. They work
    under the HTTP protocol and can be accessed from any device that supports HTTP.
    A client need not worry about anything other than the data format:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**表征状态转移** (**REST**)是一种无状态的 Web 服务，易于扩展，工作在 HTTP 协议下，可以从任何支持 HTTP 的设备上访问。客户端不需要担心除数据格式之外的任何内容：'
- en: '![](img/image_06_001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_06_001.png)'
- en: A RESTful service
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 RESTful 服务
- en: ASP.NET Web API Overview
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Web API 概述
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*** '
- en: The ASP.NET Web API is a framework that can be used to build RESTful services
    on the .NET framework. The ASP.NET Web API is based on the HTTP protocol, and
    it exposes the HTTP verbs/actions in the form of a URI, allowing client applications
    to interact with data using HTTP verbs. Any client application or device that
    supports HTTP communications can easily access Web API services.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Web API 是一个可以在 .NET 框架上构建 RESTful 服务的框架。ASP.NET Web API 基于 HTTP 协议，以
    URI 形式公开 HTTP 动词/操作，允许客户端应用程序使用 HTTP 动词与数据交互。任何支持 HTTP 通信的客户端应用程序或设备都可以轻松访问 Web
    API 服务。
- en: As discussed in the preceding section, the RESTful service will identify resources
    through a URI. For example, we have [http://www.programmerguide.net/api/todos/101](http://www.programmerguide.net/api/todos/101),
    and an Angular application applies a GET request. The C# method that responds
    to this GET request will be on a web API controller class. The routing technique
    will take care of mapping the request URI with the respective controller and methods
    based on the route configured or annotated in the respective classes and methods.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一节所讨论的，RESTful 服务通过 URI 标识资源。例如，我们有 [http://www.programmerguide.net/api/todos/101](http://www.programmerguide.net/api/todos/101)，并且
    Angular 应用程序应用一个 GET 请求。响应这个 GET 请求的 C# 方法将在 Web API 控制器类中。路由技术将根据配置或在相应的类和方法中注释的路由来映射请求
    URI 与相应的控制器和方法。
- en: Here, the request will be handled by a `Get` method in `TodosController` according
    to the default configurations. The `Get` method will retrieve the `Todo` item
    based on the ID value 101 from the database and return it as a `Todo` object.
    The returned `Todo` object will be serialized to JSON or XML.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，按照默认配置，请求将由 `TodosController` 中的 `Get` 方法处理。`Get` 方法将根据 ID 值 101 从数据库中检索
    `Todo` 项，并将其作为 `Todo` 对象返回。返回的 `Todo` 对象将被序列化为 JSON 或 XML。
- en: In case of the `Post` method, a newly posted `Todo` object will be received
    from the request body in the form of JSON and will be deserialized into the `Todo`
    object in order to use it inside the `Post` method of `TodosController`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `Post` 方法，新发布的 `Todo` 对象将以 JSON 形式从请求体中接收，并且将被反序列化成 `Todo` 对象以在 `TodosController`
    的 `Post` 方法中使用。
- en: We can create HTTP-based services through the powerful ASP.NET **Model-View-Controller**
    (**MVC**) programming model in the ASP.NET Web API. Features such as routing,
    model binding, and validation provide greater flexibility in developing RESTful
    web services using the ASP.NET Web API.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过强大的 ASP.NET **Model-View-Controller** (**MVC**) 编程模型在 ASP.NET Web API
    中创建基于 HTTP 的服务。路由、模型绑定和验证等功能提供了在使用 ASP.NET Web API 开发 RESTful Web 服务时更大的灵活性。
- en: Why the ASP.NET Web API is a great fit for Angular
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么 ASP.NET Web API 很适合 Angular
- en: The ASP.NET Web API is a framework that can be used to build HTTP services.
    It is built with very lightweight architecture, and it can be accessed asynchronously
    using an HTTP service in Angular in a RESTful way. Using the ASP.NET Web API,
    we can easily synchronize data in Angular applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Web API 是一个用于构建 HTTP 服务的框架。它采用非常轻量级的架构，可以通过 RESTful 方式在 Angular 中以异步方式访问
    HTTP 服务。使用 ASP.NET Web API，我们可以轻松地在 Angular 应用程序中同步数据。
- en: Creating ASP.NET Web API services
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 ASP.NET Web API 服务
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Let's create or add ASP.NET Web API services to our My Todo application that
    we created in the last chapter. Our My Todo application was created using the
    Empty ASP.NET 5 template in Visual Studio 2015\. When an empty project is created,
    it creates a lean web application. It does not include assemblies related to MVC
    or the Web API. So, we need to explicitly add the required assemblies or modules
    to implement the Web API in our application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为上一章创建的我的待办应用添加 ASP.NET Web API 服务。我们的我的待办应用是在 Visual Studio 2015 中使用空的 ASP.NET
    5 模板创建的。创建空项目时，会生成一个精简的 Web 应用程序。它不包括与 MVC 或 Web API 相关的程序集。因此，我们需要明确添加所需的程序集或模块来实现应用程序中的
    Web API。
- en: Adding and configuring an MVC service to the ASP.NET project
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 ASP.NET 项目添加和配置 MVC 服务
- en: 'Since ASP.NET Core, the Web API, was merged with MVC, we need to add an MVC
    service to implement a Web API in our application:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 ASP.NET Core 将 Web API 与 MVC 合并，我们需要添加一个 MVC 服务来实现应用程序中的 Web API：
- en: Install theÂ `NuGet` package `Microsoft.AspNetCore.MVC`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `NuGet` 包 `Microsoft.AspNetCore.MVC`。
- en: Open the `Startup.cs` file from the root folder of the project in Visual Studio.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中从项目的根文件夹中打开 `Startup.cs` 文件。
- en: Add the following statement under the `ConfigureServices` method to add the
    MVC service to our project
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ConfigureServices` 方法下添加以下语句以向项目添加 MVC 服务
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We just enabled MVC in our project. Next, we will wire up MVC with our request
    pipeline by adding the following statement in the `Configure` method:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚在项目中启用了 MVC。接下来，我们将通过在 `Configure` 方法中添加以下语句来将 MVC 与我们的请求管道连接起来：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding Web API Controller to an ASP.NET application
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 ASP.NET 应用程序添加 Web API 控制器
- en: 'We just enabled and wired up the MVC service to our application. Now, let''s
    add a Web API controller by following these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚启用并连接了 MVC 服务到我们的应用程序。现在，让我们按照以下步骤添加一个 Web API 控制器：
- en: 'Right-click on the `My Todo` project, navigate to `Add` | `New Folder`, and
    name the folder `Controllers`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `我的待办` 项目上右键单击，导航到 `Add` | `New Folder`，并命名文件夹为 `Controllers`：
- en: '![](img/image_06_002.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_002.png)'
- en: Create a new folder for controllers under the My Todo project
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的待办项目下创建一个用于控制器的新文件夹
- en: 'Now, right-click on the `Controllers` folder that we just created and go to
    `Add` | `New Item`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击我们刚刚创建的 `Controllers` 文件夹，转到 `Add` | `New Item`：
- en: '![](img/image_06_003.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_003.png)'
- en: Add the Web API controller to the Controllers folder
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Web API 控制器添加到控制器文件夹中
- en: 'Select **`Minimal Dependencies`** and click onÂ **`Add`** if you get an Add
    MVC Dependencies popup:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **`Minimal Dependencies`** 并单击 **`Add`** 如果您收到一个添加 MVC 依赖项的弹出窗口：
- en: '![](img/image_06_004.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_004.png)'
- en: Add minimal MVC dependencies
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 添加最小的 MVC 依赖项
- en: Visual Studio 2017 has added a `ScaffoldingReadMe.txt` readme file with the
    following instructions to enable scaffolding in our application; follow and update
    your project code accordingly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2017 添加了一个 `ScaffoldingReadMe.txt` 自述文件，其中包含以下启用脚手架的说明;遵循并相应地更新您的项目代码。
- en: 'ASP.NET MVC core dependencies have been added to the project. However, you
    may still need to make these changes to your project:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET MVC 核心依赖项已添加到项目中。但是，您可能仍然需要对项目进行以下更改：
- en: 'Add `Scaffolding``CLI` tool to the project:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向项目添加 `Scaffolding``CLI` 工具：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are the suggested changes to the `Startup` class:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面是对 `Startup` 类的建议更改：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Again, right-click on the `Controllers` folder, go to **`Add`** | **`Controllers`**,
    select **`API Controller with read/write actions`**, and name it as `TodosController`:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次右键单击 `Controllers` 文件夹，转到 **`Add`** | **`Controllers`**，选择 **`API Controller
    with read/write actions`**，并将其命名为 `TodosController`：
- en: '![](img/image_06_005.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_005.png)'
- en: Name the controller TodosController
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将控制器命名为TodosController
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you get the error in the following screenshot, you need to add the given
    XML tag by editing your `csproj` file and then, add the controller again.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在下面的截图中看到了错误，你需要通过编辑你的`csproj`文件添加给定的XML标签，然后再次添加控制器。
- en: 'This is the error:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是错误：
- en: '![](img/image_06_006.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_006.png)'
- en: 'The following is the code for the XML tag:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是XML标签的代码：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will create the `TodosController`Â Web API controller with the following
    template code for us to modify according to our needs:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们创建`TodosController` Web API控制器，并提供以下模板代码，供我们根据需求进行修改：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Press *F5* to run the application and navigate to `http://localhost:2524/api/todos`
    from the browser.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F5*运行应用程序，并从浏览器导航到`http://localhost:2524/api/todos`。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may have a different port in your system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你的系统可能有不同的端口。
- en: 'You will see the following output from `TodosController` as per the default
    code in the `Get` method. As you can see in the following screenshot, it just
    returned an array of string:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会在`TodosController`中看到以下输出，默认代码中的`Get`方法。如您在下面的截图中所见，它只返回了一个字符串数组：
- en: '![](img/image_06_007.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_007.png)'
- en: The output of the default Get action in TodoController
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在TodoController中默认的Get操作的输出
- en: Adding models to an ASP.NET application
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加模型到ASP.NET应用程序
- en: 'We configured our application to use MVC services and added the Web API controller.
    Now, let''s add the models needed for our My Todo application. Follow these steps
    to add a model named `Todo`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置了我们的应用程序以使用MVC服务，并添加了Web API控制器。现在，让我们为我们的My Todo应用程序添加所需的模型。按照这些步骤添加一个名为`Todo`的模型：
- en: 'Right-click on the `My``Todo` project, navigate to **`Add`** | **`New Folder`**,
    and name the folder `Models`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`My``Todo`项目上右键点击，转到**`Add`** | **`New Folder`**，并将文件夹命名为`Models`：
- en: '![](img/image_06_008.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_008.png)'
- en: Add a new folder for Models under the My Todo project
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在My Todo项目下为Models添加一个新文件夹
- en: 'Now, right-click on the `Models` folder that we just created and go to **`Add`**
    | **`Class`**....:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键点击刚刚创建的`Models`文件夹，然后转到**`Add`** | **`Class`**....：
- en: '![](img/image_06_009.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_009.png)'
- en: Add a class for the Todo object under the Models folder
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Models文件夹下为Todo对象添加一个类
- en: 'Name the class `Todo` and add the following code snippet to it:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类命名为`Todo`，并将以下代码片段添加到其中：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Todo` is a C# POCO class that represents a `Todo` item. It has properties
    such as an `Id` that holds the primary key value of the `Todo` item, the `Title`
    property that holds the title of the `Todo` item, and the `Completed` property
    that holds the Boolean flag to indicate whether the item is completed.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Todo`是一个C# POCO类，代表一个`Todo`项目。它具有属性，例如`Id`保存着`Todo`项目的主键值，`Title`属性保存着`Todo`项目的标题，`Completed`属性保存着布尔标志，指示该项目是否已完成。'
- en: Adding DBContext to an ASP.NET application
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将DBContext添加到ASP.NET应用程序
- en: 'We just added the `Todo` model. Now, let''s add `DBContext` to manage and persist
    `Todo` in the database. `DBContext` acts as a bridge between your classes and
    database. To add it, follow these steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了`Todo`模型。现在，让我们添加`DBContext`来管理和持久化数据库中的`Todo`。`DBContext`充当您的类和数据库之间的桥梁。要添加它，请按照以下步骤操作：
- en: 'Right-click on the `Models` folder and navigate to **`Add`** | **`Class`**:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Models`文件夹，转到**`Add`** | **`Class`**：
- en: '![](img/image_06_010.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_010.png)'
- en: Add a class for DBContext under the Models folder
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Models文件夹下添加一个DBContext类
- en: 'Name the class asÂ `TodoContext` and add the following code snippet to it:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类命名为`TodoContext`，并将以下代码片段添加到其中：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`TodoContext` helps you interact with the database and commits the changes
    as a single unit of work. `TodoContext` is configured to use the SQL Server, and
    the connection string is read from the `config.json` file that we will add in
    the next step.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`TodoContext`帮助你与数据库交互，并将更改提交为一个单独的工作单元。`TodoContext`被配置为使用SQL Server，并且连接字符串是从我们将在下一步添加的`config.json`文件中读取的。'
- en: Add using statement to import `Microsoft.EntityFrameworkCore` in `Startup.cs`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Startup.cs`中添加使用语句以导入`Microsoft.EntityFrameworkCore`。
- en: 'Configure the SQL service by adding the following code snippet to theÂ `ConfigureServices`
    method:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下代码片段添加到`ConfigureServices`方法中来配置SQL服务：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add an `appsettings.json` file to hold the value of the connection string and
    update it with this content:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`appsettings.json`文件来保存连接字符串的值，并更新它的内容如下：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this `JSON` file, we added the connect string under the `data` item.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`JSON`文件中，我们在`data`项下添加了连接字符串。
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the `Startup.cs` constructor, we built the configuration to read from the
    `config.json` file. In the `ConfigureServices` method, we added Entity Framework
    and hooked the SQL Server and `TodoContext` to it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Startup.cs`构造函数中，我们创建了用于从`config.json`文件中读取的配置。在`ConfigureServices`方法中，我们添加了Entity
    Framework并将SQL Server和`TodoContext`连接到了它。
- en: Using DB Migration
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据库迁移
- en: '* * *'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'DB migration in Entity Framework helps you create a database or update a database
    schema during the application''s development phase. We now have the required model
    and database context in place. We need to create the database now. Let''s create
    the database in SQL Server Compact using the feature called database migration
    in Entity Framework. Follow these steps to do so:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework中的数据库迁移帮助您在应用程序开发阶段创建数据库或更新数据库模式。现在我们已经准备好了所需的模型和数据库上下文。现在需要创建数据库。让我们使用Entity
    Framework中的数据库迁移功能在SQL Server Compact中创建数据库。按照以下步骤操作：
- en: 'First, add the following XML tags to the `csproj` file by editing it:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先通过编辑将以下XML标签添加到`csproj`文件中：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open Command Prompt and navigate to the project folder.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并导航到项目文件夹。
- en: 'Execute the following command to initialize the database for migration:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以初始化迁移的数据库：
- en: '![](img/image_06_011.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_011.png)'
- en: Execute the command to add migration
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令以添加迁移
- en: This command creates the `Migration` folder under the **`My`****`Todo`** project
    and adds two classes to create tables and update the schema.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在**`My`****`Todo`**项目下创建`Migration`文件夹，并添加两个类以创建表和更新模式。
- en: '![](img/image_06_012.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_012.png)'
- en: Files related to database migration
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据库迁移相关的文件
- en: 'Execute the following command to update the database:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以更新数据库：
- en: '![](img/image_06_013.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_013.png)'
- en: Execute the command to update database
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令以更新数据库
- en: This command creates the `database` for our application as per the context and
    model.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令根据上下文和模型为我们的应用程序创建`database`。
- en: Using Database Context in a Web API controller
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Web API控制器中使用数据库上下文
- en: 'Now that we have the database context in place and the migration is also set
    up, let''s update the `TodosController` Web API controller to use `TodoContext`
    that we created earlier. Follow these steps to do so:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备就绪，迁移也已设置好，让我们更新`TodosController` Web API控制器以使用之前创建的`TodoContext`。按照以下步骤进行：
- en: Open `TodosController.cs`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`TodosController.cs`。
- en: 'Declare the `_db` private variable of the `TodoContext` type:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`_db`私有变量类型为`TodoContext`：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Define `constructor` that takes a `context` argument of the `TodoContext` type
    and assign the `context` value to `_db`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义接受`TodoContext`类型的`context`参数并将`context`值赋给`_db`的`constructor`：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Introduce a `GET` action method that returns the collection of all `Todo` items
    from the database using the `_db` database context:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入一个`GET`动作方法，该方法使用`_db`数据库上下文从数据库中返回所有`Todo`项的集合：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Introduce another `GET` action method that removes the completed `Todo` items
    from the database and returns all the pending `Todo` items using the `_db` database
    context:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入另一个`GET`动作方法，该方法从数据库中移除已完成的`Todo`项，并使用`_db`数据库上下文返回所有待处理的`Todo`项：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Introduce a `POST` action method that inserts a new `Todo` item in the `TodoContext``_db`
    database:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入一个`POST`动作方法，该方法在`TodoContext``_db`数据库中插入新的`Todo`项：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Introduce a `PUT` action method that updates the existing `Todo` item that
    has the matching ID using `TodoContext``_db`:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入`PUT`动作方法，使用`TodoContext``_db`更新具有匹配ID的现有`Todo`项：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Introduce a `DELETE` action method that deletes an existing `Todo` item that
    has the matching ID using `TodoContext``_db`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入一个`DELETE`动作方法，使用`TodoContext``_db`删除具有匹配ID的现有`Todo`项：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Integrating ASP.NET Core Web API with Angular application
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将ASP.NET Core Web API集成到Angular应用程序中
- en: '* * *'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In the preceding section, we added and modified the Web API controller and introduced
    methods for HTTP verbs to deal with the `Todo` items. Now, let's modify our Angular
    code to consume all the Web API methods to manage the `Todo` items.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们添加和修改了Web API控制器，并介绍了处理`Todo`项的HTTP动词方法。现在，让我们修改我们的Angular代码，以调用所有Web
    API方法来管理`Todo`项。
- en: Updating a model in an Angular app
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Angular应用程序中更新模型
- en: 'First, we need to add the `id` property to `Todo.ts` in an Angular app to hold
    the IDÂ of the `Todo` item received from the API. So, the updated `Todo.ts` will
    look as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在Angular应用程序中的`Todo.ts`中添加`id`属性来保存从API接收的`Todo`项的ID。因此，更新后的`Todo.ts`如下所示：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `constructor` takes three arguments: `id`, `title`, and `completed`, and
    assigns them to the `id`, `title`, and `completed`Â properties respectively, accessing
    them using theÂ `this` keyword. The `Todo` class also sets an accessor for the
    `completed` property.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor`接受三个参数：`id`、`title`和`completed`，并将它们分配给`id`、`title`和`completed`属性，分别使用`this`关键字访问它们。`Todo`类还为`completed`属性设置了访问器。'
- en: Preparing Angular application
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备Angular应用程序
- en: 'The following are the steps for preparing Angular application:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 准备Angular应用程序的步骤如下：
- en: 'Add theÂ `@angular/http` module to dependencies in `package.json`. The HTTP
    module is required to consume Web API services. The updated `package.json` is
    given here:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`中将`@angular/http`模块添加到依赖项中。需要使用HTTP模块来消费Web API服务。更新后的`package.json`如下所示：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Update `systemjs.config.js` with the mapping for `@angular/http`. The updated
    `systemjs.config.js` is as shown:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@angular/http`在`systemjs.config.js`中进行映射更新。更新后的`systemjs.config.js`如下所示：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Import theÂ `HttpModule` in `AppModule`, as illustrated:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AppModule`中导入`HttpModule`，如下所示：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Update model `Todo`, as shown:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下所示更新模型`Todo`：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Consuming Web API GET Action in TodoService
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在TodoService中消耗Web API GET操作
- en: 'First, let''s update the `TodoService` that consumes Web API service to fetch
    a list of `Todo` items. We will use the `Http` service to communicate with Web
    API service:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更新`TodoService`，以使用`Http`服务与Web API服务通信，从而获取`Todo`项目列表：
- en: Open the `todoService.ts` file in an app folder.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开app文件夹中的`todoService.ts`文件。
- en: 'Add the following `import` statements to import modules such as `Injectable`,
    `Http`, `headers`, `Response`, `Observable`, `map`, and `Todo`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`import`语句以导入模块，例如`Injectable`、`Http`、`headers`、`Response`、`Observable`、`map`和`Todo`：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Modify `constructor` to inject the `Http` service by adding the parameter for
    the `Http` service:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`constructor`以注入`Http`服务，添加`Http`服务的参数：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the `getTodos` method to consume the Web API service to get the list of
    `Todo` items using the `Http`Â tag:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`getTodos`方法以使用`Http`标签消费Web API服务以获取`Todo`项目列表：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, the `toPromise` method converts the `Observable` sequence returned by
    theÂ `Get` method of `http`. Then, we call the `then` method or theÂ `catch` method
    on the returned promise. We convert theÂ `JSON` received in response into an array
    of `Todo`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`toPromise`方法将`http`的`Get`方法返回的`Observable`序列转换为Promise。然后，我们在返回的promise上调用`then`方法或`catch`方法。我们将响应中收到的`JSON`转换为`Todo`数组。
- en: 'We just added the `getTodos` method. Next, let''s add the `getPendingTodos`
    method to consume the `GET` method that is configured with the `pending-only`
    route in the Web API that removes the completed `Todo` items from the database
    and returns only the pending `Todo` items. The code snippet of `GetPendingTodos`
    is as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚添加了`getTodos`方法。接下来，让我们添加`getPendingTodos`方法来调用配置了Web API中`pending-only`路由的`GET`方法，从数据库中删除已完成的`Todo`项目，并只返回待办的`Todo`项目。`GetPendingTodos`的代码片段如下所示：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The updated `todo.service.ts` with the code that consumes both the `GET` methods
    of the Web API is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的`todo.service.ts`用于调用Web API的`GET`方法的代码如下：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Posting to the Web API from TodoService
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从TodoService向Web API发布
- en: 'We just updated `todo.Services.ts` to call the Web API''s `GET` action and
    fetch `Todo` items. Now, let''s add code to post a new `Todo` item to the Web
    API. Follow the given steps to do so:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚更新了`todo.Services.ts`以调用Web API的`GET`操作并获取`Todo`项目。现在，让我们添加代码来将新的`Todo`项目发布到Web
    API。按照给定的步骤进行操作：
- en: Open `todo.service.ts`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`todo.service.ts`。
- en: 'Add the `postTodo` function that posts a new `Todo` item to the Web API controller:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`postTodo`函数以将新的`Todo`项目发布到Web API控制器：
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This function accepts a `Todo` item as an argument. It defines the `header`
    section with the `JSON` content type and posts the `Todo` item using the `http`
    service to a Web API asynchronously. The response is converted to `Promise` and
    the `then` method returns a `Promise<Todo>`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受`Todo`项目作为参数。它定义了带有`JSON`内容类型的`header`部分，并使用`http`服务将`Todo`项目异步发布到Web API。响应被转换为`Promise`，`then`方法返回`Promise<Todo>`。
- en: Calling the PUT action of the Web API to update a Todo item
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用Web API的PUT操作以更新Todo项目
- en: 'We just added code to consume the Web API GET action and also added code to
    `POST` a new `Todo` item to the Web API. Now, let''s consume the `PUT` action
    in the Web API to update an existing Todo item. Follow these steps to do so:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了消费Web API GET操作的代码，并添加了代码将新的`Todo`项目发布到Web API的POST。现在，让我们使用Web API的PUT操作来更新现有的Todo项目。按照以下步骤进行操作：
- en: Open `todo.service.ts`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`todo.service.ts`。
- en: 'Add the `putTodo` function with the following code snippet to update the existing
    `Todo` item by calling the `PUT` action in the Web API:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码段添加 `putTodo` 函数来调用 Web API 中的 `PUT` 操作来更新现有的 `Todo` 项目：
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This code defines the header with the `JSON` content type and calls the `PUT`
    action method along with the `JSON` stringified `Todo` item and theÂ `id` of that
    `Todo` item. The Web API's `PUT` action method will update the matching `Todo`
    item in the database.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码定义了具有 `JSON` 内容类型的标头，并调用了 `PUT` 操作方法以及 `JSON` 字符串化的 `Todo` 项目和该 `Todo` 项目的
    `id`。 Web API 中的 `PUT` 操作方法将更新数据库中的匹配 `Todo` 项目。
- en: Calling the DELETE action of the Web API to delete a Todo item
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用 Web API 的 DELETE 操作来删除一个 Todo 项目
- en: 'We added code to get, add, and edit a `Todo` item by calling various Web API
    actions, such as `GET`, `POST`, and `PUT`, respectively. Now, let''s consume the
    `DELETE` action in the Web API to delete a matching `Todo` item. Follow the given
    steps to do so:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一些代码，通过调用各种 Web API 操作，如`GET`，`POST` 和 `PUT`，来获取、添加和编辑 `Todo` 项目。现在，让我们使用
    Web API 中的 `DELETE` 操作来删除匹配的 `Todo` 项目。请按照以下步骤进行：
- en: Open `todo.service.ts`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `todo.service.ts`。
- en: 'Add the `deleteTodo` function with the following code snippet to delete a matching
    `Todo` item by calling the `DELETE` action in the Web API:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码段添加 `deleteTodo` 函数，通过调用 `Web API` 中的 `DELETE` 操作来删除匹配的 `Todo` 项目：
- en: '[PRE34]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This code calls the `DELETE` action along with the `id` of the `Todo` item being
    deleted. The Web API's `DELETE` action method will retrieve the matching `Todo`
    item from the database and delete it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码调用 `DELETE` 操作，以及被删除的 `Todo` 项目的 `id`。 Web API 中的 `DELETE` 操作方法将从数据库中检索匹配的
    `Todo` 项目并删除它。
- en: Updating the wrapper functions in TodoService
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新 TodoService 中的包装函数
- en: 'We have functions such as `getTodos`, `getPendingTodos`, `postTodos`, `putTodo`,
    and `deleteTodo` that interact with the `GET`, `POST`, `PUT`, and `DELETE`Â Web
    API actions respectively. Now, let''s update or replace the code of the `remove`,
    `add`, `toggleCompletion`, and `removeCompleted` functions that serve as wrappers
    that will be consumed from `app.component.ts`. Update or replace the code of the
    functions, as shown in the following code snippet:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一些函数，如 `getTodos`，`getPendingTodos`，`postTodos`，`putTodo` 和 `deleteTodo`，这些函数与
    `GET`，`POST`，`PUT` 和 `DELETE` Web API 操作交互。 现在，让我们更新或替换作为从 `app.component.ts`
    中使用的包装器的 `remove`，`add`，`toggleCompletion` 和 `removeCompleted` 函数的代码。 更新或替换函数的代码，如下所示：
- en: '[PRE35]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Updating AppComponent
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新 AppComponent
- en: '[PRE37]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Updating the AppComponent template
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新 AppComponent 模板
- en: 'The updated content of `app.component.html` is as illustrated in the following
    code snippet:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.component.html` 的更新内容如下所示：'
- en: '[PRE39]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `TexBox` input is applied with two-way binding using `ngModel` to bind the
    new `Todo` item, `title`. The `Add` button-click event is wired up with the `addTodo`
    method in `AppComponent`. The available `Todo` items will be listed in the `<li>`
    tag using `ngFor` that iterates each `Todo` item in `TodoService`. The checkbox
    rendered for each `Todo` item has its `click` event and the `checked` property
    mapped with the `toggleCompletion` method and a `completed` property of the `Todo`
    item, respectively. Next, the remove button has its `click` event mapped with
    the `remove` method in `AppComponent`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`TexBox` 输入应用了双向绑定，使用 `ngModel` 来绑定新的 `Todo` 项目 `title`。 `Add` 按钮的点击事件与 `AppComponent`
    中的 `addTodo` 方法绑定。可用的 `Todo` 项目将在 `<li>` 标签中列出，使用 `ngFor` 迭代 `TodoService` 中的每个
    `Todo` 项目。 渲染每个 `Todo` 项目的复选框分别具有 `click` 事件和 `checked` 属性，与 `toggleCompletion`
    方法和 `Todo` 项目的 `completed` 属性映射。 接下来，移除按钮的 `click` 事件与 `AppComponent` 中的 `remove`
    方法映射。'
- en: The `footer` tag has a span that displays the pending `Todo` items' count and
    a button to remove the completed `Todo` items from the list. This button has a
    `click` event mapped with the `removeCompleted` method in `AppComponent`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`footer` 标签中有一个 span，显示待办 `Todo` 项目的计数以及一个按钮，用于从列表中移除已完成的 `Todo` 项目。这个按钮有一个点击事件，映射到
    `AppComponent` 中的 `removeCompleted` 方法。'
- en: Updating the index page
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新索引页面
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that the `body` tag has a special `<my-app/>` tag, which is the metadata
    in `AppComponent`. This is where `AppComponent` will be instantiated and rendered
    using the template.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `body` 标签中有一个特殊的 `<my-app/>` 标签, 这是 `AppComponent` 中的元数据。这是 `AppComponent`
    将被实例化并使用模板渲染的地方。
- en: Running the application
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: '* * *'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Let''s run the application by pressing *F5*, and after this, you will be able
    to perform operations such as adding, editing, removing, and listing `Todo` items:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按下 *F5* 运行应用程序，之后，您将能够执行添加、编辑、删除和列出 `Todo` 项目等操作：
- en: '![](img/image_06_014.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_06_014.png)'
- en: My Todo App with all the operations
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 Todo 应用程序具有所有操作
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We started this chapter with an introduction to RESTful services and gave you
    an overview of the ASP.NET Web API. We also discussed why the ASP.NET Web API
    is the best fit for Angular applications.Â Then, you learned about adding and
    configuring Entity Framework in an ASP.NET 5 project and the steps required to
    create a database using databaseÂ migration.Â Next, we walked through the process
    of creating a Web API service and managing data using Entity Framework.Â Finally,
    you learned about consuming the Web API from Angular applications.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从介绍 RESTful 服务开始本章，并为您概述了 ASP.NET Web API。我们还讨论了为什么 ASP.NET Web API 是 Angular
    应用程序的最佳选择。然后，您了解了如何在 ASP.NET 5 项目中添加和配置 Entity Framework 以及使用数据库迁移来创建数据库所需的步骤。接下来，我们讲解了创建
    Web API 服务和使用 Entity Framework 管理数据的过程。最后，您学会了如何从 Angular 应用程序中调用 Web API。
- en: In this chapter, we discussed how to consume a Web API service from an Angular
    application to add, update, delete, and retrieve the Todo items from a database
    using Entity Framework.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何从 Angular 应用程序中使用 Web API 服务来添加、更新、删除和检索数据库中的 Todo 项目，使用 Entity
    Framework。
- en: In the next chapter, we will discuss how to integrate an Angular application
    with the ASP.NET MVC and Web API.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何将 Angular 应用程序与 ASP.NET MVC 和 Web API 集成。
