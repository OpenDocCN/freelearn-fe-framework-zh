["```js\n@Directive({ selector: '[tooltip]' })\nexport class Tooltip { \n  @Input() tooltip: string; \n  private overlay: Overlay;\n\n  constructor(private el: ElementRef, manager: OverlayManager) { \n    this.overlay = manager.get(); \n  }\n\n  @HostListener('mouseenter') onMouseEnter() { \n    this.overlay.open(this.el.nativeElement, this.tooltip); \n  }\n\n  @HostListener('mouseleave') onMouseLeave() { \n    this.overlay.close(); \n  } \n} \n```", "```js\n<div tooltip=\"42\">Tell me the answer!</div> \n```", "```js\nComposite c1 = new Composite(); \nComposite c2 = new Composite(); \nComposite c3 = new Composite(); \n\nc1.components.push(c2); \nc1.components.push(c3); \n\nLeaf l1 = new Leaf(); \nLeaf l2 = new Leaf(); \nLeaf l3 = new Leaf(); \n\nc2.components.push(l1); \nc2.components.push(l2);  \nc3.components.push(l3); \n```", "```js\n@Component({ \n  selector: 'hello-world', \n  template: '<h1>Hello, {{target}}!</h1>' \n}) \nclass HelloWorld { \n  target: string; \n  constructor() { \n    this.target = 'world'; \n  } \n} \n```", "```js\n<hello-world></hello-world> \n```", "```js\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TabComponent} from './tab.component';\nimport {TabItemComponent} from './tab-item.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TabComponent, TabItemComponent],\n  exports: [TabComponent]\n})\nclass TabModule { }\n```", "```js\nimport {NgModule} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppComponent} from './app.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  bootstrap: [AppComponent],\n  declarations: [AppComponent],\n})\nexport class AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```js\n{{expression | decimal | currency}} \n```", "```js\n@Pipe({ name: 'lowercase1' }) \nclass LowerCasePipe1 implements PipeTransform { \n  transform(value: string): string { \n    if (!value) return value; \n    if (typeof value !== 'string') { \n      throw new Error('Invalid pipe value', value); \n    } \n    return value.toLowerCase(); \n  } \n} \n```", "```js\n@Component({ \n  selector: 'app', \n  template: '<h1>{{\"SAMPLE\" | lowercase1}}</h1>' \n}) \nclass App {} \n\n@NgModule({\n  declarations: [App, LowerCasePipe1],\n  bootstrap: [App],\n  imports: [BrowserModule]\n})\nclass AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```", "```js\n<app></app> \n```", "```js\nclass User extends EventEmitter { \n  private name: string;\n\n  setName(name: string) { \n    this.name = name; \n    this.emit('change');\n  }\n\n  getName(): string { \n    return this.name;\n  } \n} \n```", "```js\nclass View { \n  constructor(user: User, el: Element /* a DOM element */) { \n    el.innerHTML = user.getName();\n  } \n} \n```", "```js\nlet user = new User(); \nuser.setName('foo'); \nlet view = new View(user, document.getElementById('label')); \n```", "```js\nclass View { \n  constructor(user:User, el:any /* a DOM element */) { \n    el.innerHTML = user.getName(); \n    user.on('change', () => { \n      el.innerHTML = user.getName();\n    }); \n  } \n} \n```", "```js\nfunction MainCtrl($scope) { \n  $scope.label = 'Hello world!'; \n}\n<body ng-app ng-controller=\"MainCtrl\"> \n  {{label}} \n</body> \n```", "```js\n<body ng-controller=\"MainCtrl\"> \n  <input ng-model=\"label\"> \n  {{label}} \n</body> \n```", "```js\n// The Factory method \nmodule.factory('ServiceName', function (dep1, dep2, ...) { \n  return { \n    // public API \n  }; \n}); \n\n// The Service method \nmodule.service('ServiceName', function (dep1, dep2, ...) { \n  // public API \n  this.publicProp = val; \n}); \n\n// The Provider method \nmodule.provider('ServiceName', function () { \n  return { \n    $get: function (dep1, dep2, ...) { \n      return { \n        // public API \n      }; \n    } \n  }; \n}); \n```", "```js\nfunction UserTransactions(id) { \n  this.userId = id; \n}\n\nUserTransactions.prototype.makeTransaction = function (amount) { \n  // method logic \n}; \n\nmodule.controller('MainCtrl', function () { \n  this.submitClick = function () { \n    new UserTransactions(this.userId).makeTransaction(this.amount); \n  }; \n}); \n```", "```js\nimport {Injectable} from '@angular/core'; \n\n@Injectable() \nclass HttpService { \n  constructor() { /* ... */ } \n} \n\n@Injectable() \nclass User { \n  constructor(private service: HttpService) {}\n\n  save() { \n    return this.service.post('/users') \n      .then(res => { \n        this.id = res.id; \n        return this; \n      }); \n  } \n} \n```", "```js\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {HomeComponent} from './home/home.component';\nimport {AboutComponent} from './about/about.component';\nimport {AppComponent} from './app.component';\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent }\n];\n\n@NgModule({ \n  imports: [BrowserModule, RouterModule.forRoot(routes)],\n  declarations: [AppComponent, HomeComponent, AboutComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {} \n```"]