- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Why React Native?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择React Native？
- en: Meta (formerly Facebook) created React Native to build its mobile applications.
    It was started as a hackathon project in the summer of 2013 inside Facebook and
    open sourced for everyone in 2015\. The motivation to do so originated from the
    fact that React for the web was so successful. So, if React is such a good tool
    for UI development, and you need a native application, then why fight it? Just
    make React work with native mobile OS UI elements! Therefore, in the same year,
    Facebook divided React into two independent libraries, `React` and `ReactDOM`,
    and since then, React had to work only with interfaces and not care about where
    these elements will be rendered.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Meta（原名Facebook）创建了React Native来构建其移动应用程序。它始于2013年夏天的Facebook内部黑客马拉松项目，并于2015年开源。这样做的原因源于React在Web上的成功。因此，如果React是UI开发的优秀工具，而你需要一个原生应用程序，那么为什么要与之抗争呢？只需让React与原生移动操作系统UI元素协同工作！因此，同年，Facebook将React分为两个独立的库，`React`和`ReactDOM`，从那时起，React必须只与接口工作，而不关心这些元素将在哪里渲染。
- en: 'In this chapter, you’ll learn about the motivations for using React Native
    to build native mobile web applications. Here are the topics that we’ll cover
    in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解使用React Native构建原生移动Web应用程序的动机。以下是本章我们将涵盖的主题：
- en: What is React Native?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是React Native？
- en: React and JSX are familiar
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React和JSX熟悉
- en: The mobile browser experiences
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动浏览器体验
- en: 'Android and iOS: different yet the same'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android和iOS：不同却相同
- en: The case for mobile web apps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动Web应用程序的案例
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There aren’t any technical requirements for this chapter since it is a brief
    conceptual introduction to React Native.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求，因为它是对React Native的简要概念介绍。
- en: What is React Native?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是React Native？
- en: Earlier in this book, I introduced the notion of a render target, the thing
    that React components render to. The render target is abstract as far as the React
    programmer is concerned. For example, in React, the render target can be a string,
    or it could be the **Document Object Model** (**DOM**). Therefore, your components
    never directly interface with the render target because you can never make assumptions
    about where the rendering is taking place.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期部分，我介绍了渲染目标的概念，即React组件渲染到的对象。对于React程序员来说，渲染目标是抽象的。例如，在React中，渲染目标可以是字符串，也可以是**文档对象模型**（**DOM**）。因此，你的组件永远不会直接与渲染目标接口，因为你永远无法确定渲染发生在哪里。
- en: A mobile platform has **UI widget libraries** that developers can leverage to
    build apps for that platform. On Android, developers implement apps using **Java**
    or **Kotlin**, while, on iOS, developers implement **Objective-C** or **Swift**
    apps. If you want a functional mobile app, you’re going to have to pick one. However,
    you’ll need to learn both languages, as supporting only one of two major platforms
    isn’t realistic for success.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平台有**UI小部件库**，开发者可以利用这些库为该平台构建应用程序。在Android上，开发者使用**Java**或**Kotlin**实现应用程序，而在iOS上，开发者实现**Objective-C**或**Swift**应用程序。如果你想有一个功能性的移动应用程序，你必须选择一个。然而，你需要学习这两种语言，因为只支持两个主要平台中的一个对于成功来说并不现实。
- en: 'For React developers, this isn’t a problem. The same React components that
    you build work all over the place, even on mobile browsers! Having to learn two
    more programming languages to build and ship a mobile application is cost- and
    time-intensive. The solution to this is to introduce a new React platform that
    supports a new render target: native mobile UI widgets.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于React开发者来说，这不是问题。你构建的相同React组件可以在任何地方工作，甚至在移动浏览器上！需要学习两种额外的编程语言来构建和发布移动应用程序既费时又费力。解决方案是引入一个新的React平台，该平台支持新的渲染目标：原生移动UI小部件。
- en: 'React Native uses a technique that makes asynchronous calls to the underlying
    mobile OS, which calls the native widget APIs. There’s a JavaScript engine, and
    the React API is mostly the same as React for the web. The difference is with
    the target; instead of a DOM, there are asynchronous API calls. The concept is
    visualized here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: React Native使用一种技术，对底层移动操作系统进行异步调用，该系统调用原生小部件API。有一个JavaScript引擎，React API与Web上的React大致相同。区别在于目标；不是DOM，而是异步API调用。这个概念在这里得到了可视化：
- en: '![](img/B19636_15_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19636_15_01.png)'
- en: 'Figure 15.1: React Native workflow'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：React Native工作流程
- en: 'This oversimplifies everything that’s happening under the hood but the basic
    ideas are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这过于简化了底层发生的一切，但基本思想如下：
- en: The same React library that’s used on the web is used by **React Native** and
    runs in **JavaScriptCore**.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Web上使用的相同React库也被**React Native**使用，并在**JavaScriptCore**上运行。
- en: Messages that are sent to native platform APIs are asynchronous and batched
    for performance purposes.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送到原生平台API的消息是异步的，并且为了性能目的而批量处理。
- en: React Native ships with components implemented for mobile platforms, instead
    of components that are HTML elements.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native附带适用于移动平台的组件，而不是HTML元素。
- en: 'React Native is just a way to render components via iOS and Android APIs. It
    can be replaced using the same concept with tvOS, Android TV, Windows, macOS,
    and even Web again. This is reachable by **forks** and add-ons for React Native.
    In this part of the book, we will learn how to write mobile apps for iOS and Android.
    More information about other possible platforms can be found here: [https://reactnative.dev/docs/out-of-tree-platforms](https://reactnative.dev/docs/out-of-tree-platforms).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React Native仅仅是通过iOS和Android API渲染组件的一种方式。它可以使用相同的概念替换为tvOS、Android TV、Windows、macOS，甚至再次用于Web。这可以通过React
    Native的**分支**和附加组件来实现。在本书的这一部分，我们将学习如何为iOS和Android编写移动应用。有关其他可能平台的更多信息，请在此处查看：[https://reactnative.dev/docs/out-of-tree-platforms](https://reactnative.dev/docs/out-of-tree-platforms)。
- en: Much more on the history and mechanics of React Native can be found at [https://engineering.fb.com/2015/03/26/android/react-native-bringing-modern-web-techniques-to-mobile/](https://engineering.fb.com/2015/03/26/android/react-native-bringing-modern-web-techniques-to-mobile/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于React Native的历史和机制，更多信息可以在[https://engineering.fb.com/2015/03/26/android/react-native-bringing-modern-web-techniques-to-mobile/](https://engineering.fb.com/2015/03/26/android/react-native-bringing-modern-web-techniques-to-mobile/)找到。
- en: React and JSX are familiar
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React和JSX都很熟悉
- en: Implementing a new render target for React is not straightforward. It’s essentially
    the same thing as inventing a new DOM that runs on iOS and Android. So, why go
    through all the trouble?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为React实现一个新的渲染目标并不简单。这本质上与在iOS和Android上运行的新DOM的发明是一样的。那么，为什么要费这么大的劲呢？
- en: First, there’s a huge demand for mobile apps. The reason is that the mobile
    web browser user experience isn’t as good as the native app experience. Second,
    JSX is a fantastic tool for building UIs. Rather than having to learn new technology,
    it’s much easier to use what you know.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对移动应用的需求量很大。原因是移动Web浏览器的用户体验不如原生应用。其次，JSX是构建UI的绝佳工具。你不必学习新技术，使用你已知的工具就足够了。
- en: It’s the latter point that’s the most relevant to you. If you’re reading this
    book, you’re probably interested in using React for both web applications and
    native mobile applications. I can’t put into words how valuable React is from
    a development-resource perspective. Instead of having a team that does web UIs,
    a team that does iOS, a team that does Android, and so on, there’s just the UI
    team that understands React.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点对你来说最为相关。如果你正在阅读这本书，你很可能对使用React来开发Web应用和原生移动应用感兴趣。我无法用言语表达React在开发资源方面的价值。你不需要一个专门负责Web
    UI的团队、一个专门负责iOS的团队、一个专门负责Android的团队等等，只需要一个理解React的UI团队。
- en: In the following section, you’ll learn about the challenges of delivering good
    user experiences on mobile web browsers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，你将了解在移动Web浏览器上提供良好用户体验的挑战。
- en: The mobile browser experiences
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动浏览器的体验
- en: Mobile browsers lack many capabilities of mobile applications. This is because
    browsers cannot replicate the same native platform widgets as HTML elements. You
    can try to do this, but it’s often better to just use the native widget rather
    than try to replicate it. This is partly because this requires less maintenance
    effort on your part, and partly because using widgets that are native to the platform
    means that they’re consistent with the rest of the platform. For example, if a
    date picker in your application looks different from all the date pickers the
    user interacts with on their phone, this isn’t a good thing. Familiarity is key
    and using native platform widgets makes familiarity possible.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 移动浏览器缺乏许多移动应用的功能。这是因为浏览器无法像HTML元素那样复制相同的原生平台小部件。你可以尝试这样做，但通常最好是直接使用原生小部件而不是尝试复制它。这部分的理由是这需要你更少的维护工作，部分是因为使用平台原生的小部件意味着它们与平台的其他部分保持一致。例如，如果你的应用程序中的日期选择器与用户在手机上交互的所有日期选择器都不同，这并不是一个好现象。熟悉度是关键，使用原生平台小部件使得熟悉度成为可能。
- en: User interactions on mobile devices are fundamentally different from the interactions
    that you typically design for the web. Web applications assume the presence of
    a mouse, for example, and that the click event on a button is just one phase.
    However, things become more complicated when the user uses their fingers to interact
    with the screen. Mobile platforms have what’s called a **gesture system** to deal
    with this. React Native is a much better candidate for handling gestures than
    React for the web because it handles these types of things that you don’t have
    to think about much in a web app.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备上的用户交互与你在Web上通常设计的交互在本质上是有区别的。例如，Web应用假设存在鼠标，并且按钮上的点击事件只是一个阶段。然而，当用户用手指与屏幕交互时，事情变得更加复杂。移动平台有一个所谓的
    **手势系统** 来处理这种情况。React Native在处理这些类型的事情上比Web上的React更合适，因为这些事情在Web应用中你不必过多考虑。
- en: As the mobile platform is updated, you want the components of your app to stay
    updated, too. This isn’t a problem with React Native because the app uses actual
    components from the platform. Once again, consistency and familiarity are important
    for a good user experience. So, when the buttons in your app look and behave in
    the same way as the buttons in every other app on the device, your app feels like
    part of the device.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随着移动平台的更新，你希望你的应用组件也保持更新。在React Native中这不是问题，因为应用使用的是平台实际组件。再次强调，一致性和熟悉性对于良好的用户体验至关重要。因此，当你的应用中的按钮看起来和表现方式与设备上其他应用中的按钮相同，你的应用就会感觉像是设备的一部分。
- en: Now that you understand what makes developing UIs for mobile browsers difficult,
    it’s time to look at how React Native can bridge the gap between the different
    native platforms.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了为什么为移动浏览器开发UI比较困难，是时候看看React Native如何弥合不同原生平台之间的差距了。
- en: 'Android and iOS: different yet the same'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android和iOS：不同却相同
- en: When I first heard about React Native, I automatically thought that it would
    be some cross-platform solution that lets you write a single React application
    that will run natively on any device. However, the reality is more nuanced. While
    React Native allows for a significant amount of code sharing between platforms,
    it’s essential to understand that iOS and Android are different on many fundamental
    levels, and their user experience philosophies are different as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次听说React Native时，我自然而然地认为它将是一种跨平台解决方案，让你能够编写一个可以在任何设备上本地运行的单一React应用。然而，现实更加复杂。虽然React
    Native允许在平台之间共享大量代码，但重要的是要理解iOS和Android在许多基本层面上是不同的，它们的用户体验哲学也不同。
- en: React Native’s goal is to “learn once, write anywhere” rather than “write once,
    run anywhere.” This means that, in some cases, you’ll want your app to take advantage
    of platform-specific widgets to provide a better user experience.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: React Native的目标是“一次学习，到处编写”而不是“一次编写，到处运行”。这意味着在某些情况下，你可能希望你的应用利用平台特定的控件来提供更好的用户体验。
- en: That being said, there have been advancements in the React Native ecosystem
    that enable more seamless cross-platform development.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，React Native生态系统已经取得了进步，使得跨平台开发更加无缝。
- en: For instance, **Expo** now supports web development, allowing you to run your
    app on the web using **React Native for Web**. This means that you can develop
    apps that work on Android, iOS, and the web using a single code base. Additionally,
    the **Tamagui UI kit** offers 100% support for both web and mobile platforms,
    making it easier to create apps that run on multiple platforms without sacrificing
    user experience.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**Expo** 现在支持Web开发，允许你使用 **React Native for Web** 在Web上运行你的应用。这意味着你可以使用单一代码库开发在Android、iOS和Web上运行的应用。此外，**Tamagui
    UI套件** 对Web和移动平台都提供100%的支持，这使得创建在多个平台上运行且不牺牲用户体验的应用变得更加容易。
- en: In light of these developments, it’s important to recognize that while React
    Native may not provide a perfect “write once, run anywhere” solution, it has come
    a long way in enabling more efficient cross-platform development. With tools like
    Expo and Tamagui, developers can create apps that work across different platforms
    while still taking advantage of platform-specific features when necessary.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些发展，重要的是要认识到，虽然React Native可能不会提供一个完美的“一次编写，到处运行”的解决方案，但它已经在实现更高效的跨平台开发方面取得了长足的进步。有了像Expo和Tamagui这样的工具，开发者可以创建在不同平台上运行的应用，同时在必要时利用平台特定的功能。
- en: In the next section, we’ll look at the case where mobile web apps that run in
    the browser might be a better fit for your users.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨移动Web应用在浏览器中运行可能更适合你的用户的情况。
- en: The case for mobile web apps
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动Web应用的优势
- en: 'Not every one of your users is going to be willing to install an app, especially
    if you don’t yet have a high download count and rating. The barrier to entry is
    much lower with web applications: the user only needs a browser.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 并非你的每一位用户都愿意安装应用，尤其是如果你还没有高下载量和评分。Web应用进入门槛要低得多：用户只需要一个浏览器。
- en: Despite not being able to replicate everything that native platform UIs have
    to offer, you can still implement awesome things in a mobile web UI. Maybe having
    a good web UI is the first step toward getting those download counts and ratings
    up for your mobile app.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管无法复制原生平台UI所能提供的一切，你仍然可以在移动Web UI中实现很棒的事情。也许拥有一个好的Web UI是提高你的移动应用下载量和评分的第一步。
- en: 'Ideally, what you should aim for is the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你应该追求以下目标：
- en: Standard web (laptop/desktop browsers)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准Web（笔记本电脑/台式机浏览器）
- en: Mobile web (phone/tablet browsers)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动Web（手机/平板浏览器）
- en: Mobile apps (phone-/tablet-native platform)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用（手机/平板原生平台）
- en: Putting an equal amount of effort into all three of these spaces probably doesn’t
    make much sense, as your users probably favor one area over another. Once you
    know, for example, that there’s a high demand for your mobile app compared to
    the web versions, that’s when you allocate more effort there.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三个空间中投入相同数量的努力可能没有太多意义，因为你的用户可能更倾向于其中一个领域而不是另一个。例如，一旦你知道你的移动应用的需求比网络版本高，那么你就可以在那里分配更多的努力。
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned that React Native is an effort by Facebook to reuse
    React to create native mobile applications. React and JSX are good at declaring
    UI components, and since there’s now a huge demand for mobile applications, it
    makes sense to use what you already know for the web.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解到React Native是Facebook为了重用React来创建原生移动应用的努力。React和JSX擅长声明UI组件，鉴于现在对移动应用的需求巨大，使用你所知道的Web知识是有意义的。
- en: The reason there’s such a demand for mobile applications over mobile browsers
    is that they just feel better. Web applications lack the ability to handle mobile
    gestures the same way apps can, and they generally don’t feel like part of the
    mobile experience from a look-and-feel perspective.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于移动应用的需求超过移动浏览器的原因是它们感觉更好。Web应用缺乏像应用那样处理移动手势的能力，并且从外观和感觉的角度来看，它们通常不像移动体验的一部分。
- en: React Native has evolved significantly over the years, enabling developers to
    create more efficient cross-platform applications. While it’s true that iOS and
    Android have fundamental differences, React Native has made strides in providing
    a more seamless development experience across platforms. However, it’s important
    to remember that React Native’s goal is to “learn once, write anywhere” rather
    than “write once, run anywhere.” This means that developers can still take advantage
    of platform-specific features to provide a better user experience.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: React Native在过去的几年里发展迅速，使开发者能够创建更高效的跨平台应用。虽然iOS和Android确实存在根本性的差异，但React Native在提供更无缝的开发体验方面取得了进展。然而，重要的是要记住，React
    Native的目标是“一次学习，到处编写”而不是“一次编写，到处运行”。这意味着开发者仍然可以利用平台特定的功能来提供更好的用户体验。
- en: Now that you know what React Native is and what its strengths are, you’ll learn
    how to get started with new React Native projects in the following chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了React Native是什么以及它的优势，你将在下一章学习如何开始新的React Native项目。
