- en: Chapter 8. Releasing the Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first version of our application is complete, which means that we are ready
    to go through the process of creating the production builds. In this chapter,
    we will start by showing you how to generate and run the application off of a
    static JavaScript bundle. Then, in preparation for the App Store, we will use
    Xcode to build our iOS release. Lastly, for Android we will walk through the set
    of command-line tools and scripts provided by React Native to build the final
    APK.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating the static bundle for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `static bundle` in place of `react-native start`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a release in Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing and building the Android release APK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating the static bundle in iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been serving the application's static bundle (where all of our
    JavaScript code lives) from a node server started by either Xcode or a terminal
    using `react-native start`. Before we create releases for iOS and Android, we
    need to generate the static JS bundle that our application will load. We will
    begin by creating the release in iOS; for Android, skip to the `generating the
    Android APK` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, we are going to use the `react-native-cli` and execute the `bundle`
    command. The `bundle` command requires three flags: `c`, `platform`, and `bundle-output`.
    The `entry-file` specifies the path to the root component, the platform is either
    iOS or Android, and `bundle-output` is the path to place the generated bundle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the terminal in the root directory, run `react-native bundle` with an
    `entry-file` of `index.ios.js`, platform `iOS`, and point the path of the `bundle-output`
    to `ios/main.jsbundle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Assets destination folder is not set, skipping...
  prefs: []
  type: TYPE_NORMAL
- en: More details about `react-native bundle` for iOS can be found in the React Native
    documentation at [https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle](https://facebook.github.io/react-native/docs/running-on-device-ios.html#using-offline-bundle).
  prefs: []
  type: TYPE_NORMAL
- en: Testing the static bundle in iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to test that the static bundle can be loaded by our iOS application
    in the simulator. Open `AppDelegate.m` in Xcode and take a look at the following
    code and comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The various methods of loading the JavaScript bundle are outlined here. We
    are interested in `OPTION 2`, loading a pre-bundled file from the disk. Comment
    out the `jsCodeLocation` statement from `OPTION 1` and uncomment the second in
    `OPTION 2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that no `react-native start` terminal sessions are running, then
    build and run the application from Xcode (*Cmd* + *R*). You should be at the top
    of the simulator to indicate that it is loading from a pre-bundled file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the static bundle in iOS](img/B05162_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating an iOS release in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to submit to the AppStore, we need to build our application for distribution.
    Luckily, the Xcode project we initially created with `react-native init` has some
    of this preconfigured for us. First, we want to change our **Build Configuration**
    to **disable** features, such as the developer menu that we get while we are debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s configure the iOS release:'
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, navigate to **Product** | **Scheme** | **Edit Scheme…** and select
    **Run**, and under the **Info** tab change **Build Configuration** from **Debug**
    to **Release**:![Creating an iOS release in Xcode](img/B05162_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Target the **iOS Device** instead of the simulator:![Creating an iOS release
    in Xcode](img/B05162_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, run the build from **Product** | **Archive**. The **Organizer** window
    will open a list of archives for your project. You can return to this screen later
    by selecting **Window** | **Organizer** from the top menu:![Creating an iOS release
    in Xcode](img/B05162_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the future, when you create multiple releases, you should increase the version
    number found in **Targets** | **ReactNotes** | **General**. For the purposes of
    our first release, this can be disregarded:![Creating an iOS release in Xcode](img/B05162_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your build has been archived, it is ready to be submitted to the Apple
    App Store. This book doesn't cover the application to the App Store but the next
    steps will be available on the Apple developer website at [https://developer.apple.com](https://developer.apple.com).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Generating the Android APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building the **Android Application Package** (**APK**) is a bit more cryptic
    than releasing for iOS. There are a few steps that we need to follow before we
    generate the static bundle, like we did in iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to generate a key that we can use to sign our application using
    `keytool`. Navigate to the `android/app` folder in a terminal and run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this is a private file and should never be shared with anyone. Keep
    it somewhere safe!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next we have a few configuration files to update. Up a level in the `android/
    directory` open `gradle.properties` and add these four lines, replacing `YOUR_KEY_PASSWORD`
    with the password you used for `keytool`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following in `android/app/build.gradle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can generate the static bundle for Android. Create a new directory
    `android/app/src/main/assets/` and run this modified form of the `react-native
    bundle` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the final APK in the `android/ directory` using the `gradle` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have set up the key signing correctly, you can test your release in
    the simulator or on a device with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this, we have our final release APK (that can be found in `android/app/build/outputs/apk/app-release.apk`).
    Check out the launch checklist on Android developers for more information on the
    Play Store submission process at [https://developer.android.com/distribute/tools/launch-checklist.html](https://developer.android.com/distribute/tools/launch-checklist.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build a release of our application in preparation
    for submitting it to the App Store or Google Play Store. iOS had a pre-configuration
    scheme in Xcode to disable the developer features. We then created an archive
    by targeting the iOS device. On Android, we created a private release key with
    **keytool** and built the release APK using the command line and `gradle`. It
    is important to follow up and test that both of these release builds work before
    submission, to decrease the likelihood of rejection.
  prefs: []
  type: TYPE_NORMAL
- en: We hope that this book gave you the fundamentals you need to start creating
    mobile apps with React Native. Although React and React Native are still very
    early in terms of development, you can expect the core concepts discussed in this
    book to stay relevant for some time to come. When Android finally reaches feature
    parity with iOS, the doors will open for a lot more rapid development between
    the two platforms. Good luck, and we can't wait to see your apps out there on
    the App and Google Play Stores!
  prefs: []
  type: TYPE_NORMAL
