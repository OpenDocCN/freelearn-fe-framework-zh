- en: Setting Up a Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: 'In addition to being a new syntax for OCaml, Reason is a toolchain that makes
    it easy to get started. In this chapter, we''ll do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了是 OCaml 的新语法之外，Reason 还是一个易于开始的工具链。在本章中，我们将做以下几件事：
- en: Learn about the Reason toolchain
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Reason 工具链
- en: Configure our editor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置我们的编辑器
- en: Use `bsb` to start a pure Reason project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `bsb` 启动一个纯 Reason 项目
- en: Learn about `bsconfig.json`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 `bsconfig.json`
- en: Write an example pure Reason application that manipulates the DOM
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个示例纯 Reason 应用程序，该程序操作 DOM
- en: Use `bsb` to start a ReasonReact project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `bsb` 启动一个 ReasonReact 项目
- en: Get comfortable using `webpack` within a Reason project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Reason 项目中熟悉使用 `webpack`
- en: 'To follow along, clone this book''s GitHub repository and start from this chapter''s
    directory. You''re also welcome to start from a blank project:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随，请克隆本书的 GitHub 仓库并从本章的目录开始。您也可以从空白项目开始：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This chapter is meant to get you comfortable with the Reason toolchain. We'll
    have separate development environments for the pure Reason project and the ReasonReact
    one. After following along, you'll be comfortable enough to tweak the development
    environment to your liking. Don't worry about messing anything up, since we'll
    start fresh in [Chapter 3](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml), *Creating
    ReasonReact Components*, from another directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在让您熟悉 Reason 工具链。我们将为纯 Reason 项目和 ReasonReact 项目分别设置开发环境。在跟随之后，您将足够熟悉，可以调整开发环境以满足您的喜好。不用担心弄乱任何东西，因为我们将在[第
    3 章](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml)，*创建 ReasonReact 组件*，从另一个目录开始。
- en: The Reason toolchain
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Reason 工具链
- en: At the time of writing, the Reason toolchain is essentially BuckleScript—Reason's
    partner project—and the familiar JavaScript toolchain, namely `npm` and `webpack`
    (or another JavaScript module bundler).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Reason 工具链基本上是 BuckleScript（Reason 的合作伙伴项目）和熟悉的 JavaScript 工具链，即 `npm`
    和 `webpack`（或另一个 JavaScript 模块打包器）。
- en: There's no longer a need for `babel`, since BuckleScript compiles to the ES5
    version of JavaScript. The compiled output can be configured to use either the
    CommonJS, AMD, or ES module formats. Reason's powerful static-type system replaces
    the need for Flow and ESlint. Additionally, Reason's editor plugins all come with
    `refmt`, which is essentially `prettier` for Reason.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 BuckleScript 编译到 JavaScript 的 ES5 版本，因此不再需要 `babel`。编译输出可以配置为使用 CommonJS、AMD
    或 ES 模块格式。Reason 强大的静态类型系统取代了 Flow 和 ESlint 的需求。此外，Reason 的编辑器插件都包含 `refmt`，这实际上是
    Reason 的 `prettier`。
- en: Installing BuckleScript
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 BuckleScript
- en: 'BuckleScript is a compiler that takes the OCaml AST and emits clean, readable,
    and performant JavaScript. It can be installed via `npm`, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: BuckleScript 是一个编译器，它接受 OCaml AST 并生成干净、可读和高效的 JavaScript。它可以通过 `npm` 安装，如下所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing `bs-platform` provides a binary called `bsb`, which is BuckleScript's
    build system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 `bs-platform` 提供了一个名为 `bsb` 的二进制文件，它是 BuckleScript 的构建系统。
- en: In the future, the Reason toolchain will make it much easier to target native
    platforms as well as JavaScript. Currently, Reason compiles to native by using
    a fork of `bsb`, called `bsb-native`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，Reason 工具链将使针对原生平台以及 JavaScript 的目标变得更加容易。目前，Reason 通过使用名为 `bsb-native`
    的 `bsb` 分支来编译成原生代码。
- en: Editor configuration
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器配置
- en: Reason supports a variety of editors, including VSCode, Sublime Text, Atom,
    Vim, and Emacs. VSCode is the recommended editor. To configure VSCode, simply
    install the `reason-vscode` extension. That's it!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Reason 支持各种编辑器，包括 VSCode、Sublime Text、Atom、Vim 和 Emacs。VSCode 是推荐的编辑器。要配置 VSCode，只需安装
    `reason-vscode` 扩展即可。就是这样！
- en: See the documentation for editor-specific instructions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 查看编辑器特定的说明文档。
- en: The Reason editor support documentation can be found at [https://reasonml.github.io/docs/editor-plugins.](https://reasonml.github.io/docs/editor-plugins)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Reason 编辑器支持文档可以在[https://reasonml.github.io/docs/editor-plugins.](https://reasonml.github.io/docs/editor-plugins)找到
- en: Setting up a pure Reason project
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置纯 Reason 项目
- en: 'The `bsb` binary includes a project generator. We''ll use it to create a pure
    Reason project using the `basic-reason` theme. Run `bsb -themes` to see all available
    project templates:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`bsb` 二进制文件包括一个项目生成器。我们将使用它通过 `basic-reason` 主题创建一个纯 Reason 项目。运行 `bsb -themes`
    以查看所有可用的项目模板：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since BuckleScript works with both OCaml and Reason, some themes are only for
    OCaml projects. That being said, feel free to mix OCaml's `.ml` files with Reason's
    `.re` files within any BuckleScript project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 BuckleScript 与 OCaml 和 Reason 都兼容，因此某些主题仅适用于 OCaml 项目。话虽如此，您可以在任何 BuckleScript
    项目中自由地将 OCaml 的 `.ml` 文件与 Reason 的 `.re` 文件混合。
- en: In this chapter, we'll focus on using the `basic-reason` and `react` templates.
    If you're curious, the `react-lite` theme is like the `react` one, except `webpack`
    is replaced with a simpler, faster, and more reliable module bundler that is intended
    only for development purposes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于使用 `basic-reason` 和 `react` 模板。如果您好奇，`react-lite` 主题类似于 `react`，只是将
    `webpack` 替换为更简单、更快、更可靠的模块打包器，该打包器仅用于开发目的。
- en: 'Let''s first create a pure Reason project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个纯 Reason 项目：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we open the project in our editor, we see the following project structure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在编辑器中打开项目时，我们看到以下项目结构：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Overall, there isn''t much here, which is kind of refreshing coming from JavaScript.
    In `node_modules`, we see `bs-platform` along with some binaries:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这里的内容并不多，这对于从 JavaScript 转过来的人来说是一种令人耳目一新的感觉。在 `node_modules` 中，我们看到 `bs-platform`
    以及一些二进制文件：
- en: '`bsb`: The build system'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bsb`：构建系统'
- en: '`bsc`: The compiler'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bsc`：编译器'
- en: '`bsrefmt`: This is essentially JavaScript''s `prettier`, but for Reason'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bsrefmt`：这实际上是 Reason 的 `prettier`，但针对 Reason'
- en: As we'll soon see, the `bsb` binary is used within `npm` scripts. This `bsc` binary
    is rarely used directly. The `bsrefmt` binary is used by editor plugins.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们很快就会看到的，`bsb` 二进制文件在 `npm` 脚本中使用。这个 `bsc` 二进制文件很少直接使用。`bsrefmt` 二进制文件由编辑器插件使用。
- en: 'In `Demo.re`, we see a simple log message:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Demo.re` 中，我们看到一条简单的日志消息：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`package.json` looks somewhat familiar. The `scripts` field shows our currently
    available `npm` scripts:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 看起来有些熟悉。`scripts` 字段显示了当前可用的 `npm` 脚本：'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run `npm run build` to compile `Demo.re` to JavaScript. By default, the compiled
    output appears right beside the source file as `Demo.bs.js`. How does it know
    which files to compile, and where to output them? That's where `bsconfig.json`
    comes in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `npm run build` 将 `Demo.re` 编译成 JavaScript。默认情况下，编译后的输出文件会出现在源文件旁边，作为 `Demo.bs.js`。它是如何知道编译哪些文件以及输出到哪里的呢？这就是
    `bsconfig.json` 发挥作用的地方。
- en: The bsconfig.json file
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: bsconfig.json 文件
- en: 'The `bsconfig.json` file is a required file for all BuckleScript projects.
    Let''s explore it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`bsconfig.json` 文件是所有 BuckleScript 项目的必需文件。让我们来探索它：'
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We''ll soon be changing some of these defaults to get more comfortable with
    BuckleScript''s configuration file. Let''s first add the following code to `Demo.re`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快就会更改一些默认设置，以便更熟悉 BuckleScript 的配置文件。首先，让我们将以下代码添加到 `Demo.re` 中：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, the `switch` expression isn''t handling all possible cases
    of `decision`. Running `npm run build` results in the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`switch` 表达式并没有处理 `decision` 的所有可能情况。运行 `npm run build` 会导致以下输出：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The warnings field
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警告字段
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To turn all warnings into errors, use the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有警告转换为错误，请使用以下代码：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For a complete list of warning numbers, check out [https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281](https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281) (scroll
    down a bit).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看警告编号的完整列表，请查看 [https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281](https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281)（向下滚动一点）。
- en: The package-specs field
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: package-specs 字段
- en: The `package-specs` field contains two fields: `module` and `in-source`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`package-specs` 字段包含两个字段：`module` 和 `in-source`。'
- en: The `module` field controls the JavaScript module format. The default is `commonjs`, and
    other available options include `amdjs`, `amdjs-global`, `es6`, and `es6-global`.
    The `-global` part tells BuckleScript to resolve `node_modules` to relative paths
    for browsers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`module` 字段控制 JavaScript 模块格式。默认是 `commonjs`，其他可用选项包括 `amdjs`、`amdjs-global`、`es6`
    和 `es6-global`。`-global` 部分告诉 BuckleScript 将 `node_modules` 解析为浏览器中的相对路径。'
- en: The `in-source` field controls the destination of the generated JavaScript files; `true` results
    in the generated files being placed along side source files, and `false` results
    in the generated files being placed in `lib/js`. Setting `in-source` to `false` is
    useful when using Reason within an existing JavaScript project so that the existing
    build pipeline can be used without having to change.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`in-source` 字段控制生成的 JavaScript 文件的输出位置；`true` 将导致生成的文件放置在源文件旁边，而 `false` 将导致生成的文件放置在
    `lib/js` 中。将 `in-source` 设置为 `false` 在使用 Reason 在现有的 JavaScript 项目中非常有用，这样就可以使用现有的构建管道，而无需进行更改。'
- en: 'Let''s use the `"es6"` module format for now, and place our compiled assets
    in `lib/js`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `"es6"` 模块格式，并将我们的编译资产放置在 `lib/js` 中：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The suffix field
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后缀字段
- en: The `suffix` field configures the extension of the generated JavaScript files.
    It's generally best to keep the `".bs.js"` suffix since this helps `bsb` better
    track the generated artifacts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`suffix` 字段配置生成的 JavaScript 文件的扩展名。通常最好保持 `".bs.js"` 后缀，因为这有助于 `bsb` 更好地跟踪生成的工件。'
- en: The sources field
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源字段
- en: 'BuckleScript knew to look in the `src` directory because of the following configuration:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: BuckleScript 知道要查看 `src` 目录，是因为以下配置：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If `subdirs` were `false`, any `.re` and `.ml` files located in subdirectories
    of `src` wouldn't be compiled.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `subdirs` 是 `false`，则位于 `src` 子目录中的任何 `.re` 和 `.ml` 文件都不会被编译。
- en: For more information regarding `bsconfig.json`, see the following section of
    the BuckleScript documentation: [https://bucklescript.github.io/docs/build-configuration](https://bucklescript.github.io/docs/build-configuration).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `bsconfig.json` 的更多信息，请参阅 BuckleScript 文档的以下部分：[https://bucklescript.github.io/docs/build-configuration](https://bucklescript.github.io/docs/build-configuration)。
- en: Working with DOM
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 DOM 交互
- en: 'Let''s try working with the DOM in pure Reason before jumping into ReasonReact.
    We''ll write a module that does the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在跳入 ReasonReact 之前，让我们先尝试使用纯 Reason 与 DOM 进行交互。我们将编写一个模块来完成以下工作：
- en: Creates a DOM element
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 DOM 元素
- en: Sets the `innerText` of that element
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置该元素的 `innerText`
- en: Appends that element to the body of the document
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将该元素追加到文档的 body 中
- en: 'Create an `index.html` file in the project''s root with the following content:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的根目录中创建一个 `index.html` 文件，内容如下：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice the `type="module"` attribute on the `script` tag. If all module dependencies
    are **ES Module** (**ESM**) compliant, and they are all available from within
    the browser, you don't need a module bundler to get started (assuming you're using
    a browser that supports ES modules).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `script` 标签上的 `type="module"` 属性。如果所有模块依赖项都符合 **ES 模块**（**ESM**）规范，并且它们都可以从浏览器内部访问，那么你不需要模块打包器就可以开始（假设你使用的是支持
    ES 模块的浏览器）。
- en: 'In `Greeting.re`, add the following greeting function:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Greeting.re` 中添加以下问候函数：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And in `Demo.re`, add the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Demo.re` 中添加以下代码：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using BuckleScript's powerful interoperability features (which we will dive
    into in [Chapter 4](201d7348-8175-4caf-b4f3-285b669b9cf1.xhtml), *BuckleScript,
    Belt and Interoperability*) the preceding code binds to existing browser APIs,
    namely `document.createElement`, `innerText`, and `document.body.appendChild`,
    and then uses those bindings to create a `div` with some text that is appended
    to the body of the document.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 BuckleScript 强大的互操作性功能（我们将在第 4 章 [BuckleScript, Belt 和互操作性](201d7348-8175-4caf-b4f3-285b669b9cf1.xhtml)
    中详细介绍）将前面的代码绑定到现有的浏览器 API，即 `document.createElement`、`innerText` 和 `document.body.appendChild`，然后使用这些绑定创建一个包含一些文本的
    `div`，并将其追加到文档的 body 中。
- en: 'Run `npm run build`, start a server (perhaps with `php -S localhost:3000` in
    a new console tab) at the root of the project, and then navigate to `http://localhost:3000` to
    see our newly-created DOM element:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `npm run build`，在项目根目录启动一个服务器（可能在新的控制台标签中运行 `php -S localhost:3000`），然后导航到
    `http://localhost:3000` 来查看我们新创建的 DOM 元素：
- en: '![](img/7b54adea-c4aa-49c7-8222-63c1556608c3.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b54adea-c4aa-49c7-8222-63c1556608c3.png)'
- en: 'The takeaway is that having to work with the DOM in this way is really tedious.
    It''s hard to type DOM APIs due to JavaScript''s dynamic nature. For example,
    `Element.innerText` is used both to get and set an element''s `innerText`, depending
    on how it''s used, which therefore would result in two different type signatures:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，以这种方式与 DOM 交互真的很繁琐。由于 JavaScript 的动态特性，很难输入 DOM API。例如，`Element.innerText`
    既可以用来获取也可以用来设置元素的 `innerText`，具体取决于它的使用方式，因此会产生两种不同的类型签名：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Luckily, we have React, which largely abstracts the DOM for us. Using React,
    we don't need to worry about typing the DOM APIs. It's nice to know that when
    we want to interact with various browser APIs, BuckleScript has the tools we need
    to get the job done. While it's certainly possible to write frontend web applications
    in pure Reason, it's a much more pleasant experience when using ReasonReact, especially
    when first getting started with Reason.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们已经有 React 了，它很大程度上抽象了 DOM。使用 React，我们不需要担心输入 DOM API。知道当我们想要与各种浏览器 API
    交互时，BuckleScript 有我们完成任务所需的工具，这真是太好了。虽然用纯 Reason 编写前端 Web 应用程序是可能的，但使用 ReasonReact
    会更加愉快，尤其是在刚开始使用 Reason 时。
- en: Setting up a ReasonReact project
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 ReasonReact 项目
- en: 'To create a new ReasonReact project, run the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的 ReasonReact 项目，运行以下命令：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After opening our text editor, we see that a couple of things have changed.
    The `package.json` file lists the relevant React and webpack dependencies. Let''s
    install them:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们的文本编辑器后，我们会看到一些变化。`package.json` 文件列出了相关的 React 和 webpack 依赖项。让我们来安装它们：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We also have the following webpack-related npm scripts:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有以下与 webpack 相关的 npm 脚本：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `bsconfig.json`, we have a new field that turns on JSX for ReasonReact:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `bsconfig.json` 中，我们有一个新字段，它为 ReasonReact 启用 JSX：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We have a simple `webpack.config.js` file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个简单的 `webpack.config.js` 文件：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note how the configured entry point is `"./src/Index.bs.js"`, which makes sense
    since, by default, `"in-source"` is set to `true` in `bsconfig.json`. The rest
    is just normal webpack stuff.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意配置的入口点为 `"./src/Index.bs.js"`，这在 `bsconfig.json` 中默认将 `"in-source"` 设置为 `true`
    的情况下是有意义的。其余的都是正常的 webpack 东西。
- en: 'To run this project, we need to run both `bsb` and `webpack`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此项目，我们需要同时运行 `bsb` 和 `webpack`：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Since the `index.html` file is located within the `src` directory, we visit
    `http://localhost:3000/src` to see the default application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `index.html` 文件位于 `src` 目录中，我们访问 `http://localhost:3000/src` 来查看默认的应用程序。
- en: Improving the developer experience
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升开发者体验
- en: 'Now that we''ve seen how the toolchain works at a basic level, let''s improve
    our developer experience so that we can start our project with just one command.
    We''ll need to install a couple of dependencies, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了工具链在基本层面的工作方式，让我们提升我们的开发者体验，以便我们可以通过一个命令开始我们的项目。我们需要安装几个依赖项，如下所示：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we can update our npm scripts:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更新我们的 npm 脚本：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, to get `webpack-dev-server` to serve the `index.html` file on `http://localhost:3000`
    instead of `http://localhost:3000/src`, we need to install and configure `HtmlWebpackPlugin`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了让 `webpack-dev-server` 在 `http://localhost:3000` 而不是 `http://localhost:3000/src`
    上提供 `index.html` 文件，我们需要安装和配置 `HtmlWebpackPlugin`：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We can remove the default `<script src="img/Index.js"></script>` tag in `src/index.html`,
    since `HTMLWebpackPlugin` will insert the script tag automatically.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以移除 `src/index.html` 中的默认 `<script src="img/Index.js"></script>` 标签，因为 `HTMLWebpackPlugin`
    会自动插入脚本标签。
- en: 'We also remove the `publicPath` setting so that the default path of `"/"` will
    be used:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还移除了 `publicPath` 设置，以便使用默认路径 `"/"`：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, we run `npm start` and visit `http://localhost:3000` to see the same ReasonReact
    application running.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们运行 `npm start` 并访问 `http://localhost:3000` 来查看相同的 ReasonReact 应用程序正在运行。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw just how easy it is to get started with Reason. In [Chapter
    3](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml), *Creating ReasonReact Components*,
    we'll start to build a ReasonReact application that we'll use throughout this
    book. This application will help to provide context as we learn more about Reason
    semantics, BuckleScript interoperability, and ReasonReact specifics.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何轻松地开始使用 Reason。在[第 3 章](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml)，*创建
    ReasonReact 组件*中，我们将开始构建一个将在整本书中使用的 ReasonReact 应用程序。这个应用程序将帮助我们更好地理解 Reason 语义、BuckleScript
    互操作性和 ReasonReact 的具体细节。
- en: Don't worry if you don't yet understand everything within these generated projects.
    By the end of [Chapter 3](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml), *Creating
    ReasonReact Components*, you'll be a lot more comfortable. However, if you have
    questions along the way, please don't hesitate to reach out on Reason's Discord
    channel for real-time assistance: [https://discord.gg/reasonml](https://discord.gg/reasonml).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您目前还不理解这些生成项目中的所有内容，请不要担心。到[第 3 章](21586d11-fa31-446f-99f1-dae3beecdb9b.xhtml)，*创建
    ReasonReact 组件*结束时，您会感到更加自在。然而，如果您在途中有任何问题，请不要犹豫，在 Reason 的 Discord 频道寻求实时帮助：[https://discord.gg/reasonml](https://discord.gg/reasonml)。
- en: I hope you'll find the Reason community as welcoming and helpful as I have.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您会发现 Reason 社区像我所经历的那样欢迎和有帮助。
