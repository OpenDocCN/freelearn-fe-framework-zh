- en: Deployment Preparation with webpack Bundling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用webpack进行部署准备
- en: We want to deploy our app to the two leading mobile app stores, Apple App Store
    and Google Play; however, there are several things that we need to do to prepare
    our app for distribution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将我们的应用程序部署到两个主要的移动应用商店，苹果应用商店和谷歌Play商店；然而，有一些事情我们需要做来准备我们的应用程序进行分发。
- en: To ensure that you use the smallest JavaScript size in addition to Angular's
    AoT compiler to help our app execute as fast as possible, we will use webpack
    to bundle everything. It's worth noting that webpack is not a requirement to create
    a distributable NativeScript app. However, it provides very nice benefits that
    should make it an important step for anyone when distributing their apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你使用最小的JavaScript大小，以及Angular的AoT编译器来帮助我们的应用尽可能快地执行，我们将使用webpack来捆绑所有内容。值得注意的是，webpack并不是创建可分发的NativeScript应用程序的必需条件。然而，它提供了非常好的好处，应该使它成为任何人在分发他们的应用程序时的重要步骤。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing webpack for a NativeScript for Angular project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为NativeScript for Angular项目安装webpack
- en: Preparing a project to be bundled with webpack
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备项目以使用webpack进行捆绑
- en: Solving various webpack bundling issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决各种webpack捆绑问题
- en: A primer on writing your own custom webpack plugin to solve specific cases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自己的自定义webpack插件以解决特定情况的入门指南
- en: Using webpack to bundle the app
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用webpack来捆绑应用程序
- en: If it weren't for Sean Larkin, you might have never heard of webpack. His contributions
    and involvement in the bundler community have helped bring webpack into the Angular
    CLI and also make it a primary *go-to* bundler for many things. We greatly appreciate
    his efforts and kindness in the community.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是Sean Larkin，你可能永远不会听说过webpack。他在捆绑器社区的贡献和参与帮助将webpack引入了Angular CLI，并使其成为许多事情的主要*首选*捆绑器。我们非常感谢他在社区中的努力和善意。
- en: Preparing to use webpack
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备使用webpack
- en: Let's take a look at how webpack can be utilized to reduce the packaged size
    of our NativeScript for Angular app in addition to ensuring that it executes optimally
    on a user's mobile device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何利用webpack来减少我们的NativeScript for Angular应用程序的打包大小，以确保它在用户的移动设备上执行得尽可能优化。
- en: 'Let''s first install the plugin:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装插件：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This automatically creates a `webpack.config.js` file (at root of project)
    preconfigured with a basic setup that will get you reasonably further with most
    apps. Additionally, it creates a `tsconfig.aot.json` file (also at root of project)
    since NativeScript''s webpack usage will use Angular''s AoT compiler while bundling.
    It also adds some nifty npm scripts to our `package.json` to help handle all the
    various bundling options we will want; consider the following example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动创建一个`webpack.config.js`文件（在项目的根目录），预先配置了一个基本设置，可以让你在大多数应用中进一步使用。此外，它还创建了一个`tsconfig.aot.json`文件（同样在项目的根目录），因为NativeScript的webpack使用将使用Angular的AoT编译器进行捆绑。它还在我们的`package.json`中添加了一些巧妙的npm脚本，以帮助处理我们想要的各种捆绑选项；请考虑以下示例：
- en: '`npm run build-android-bundle` to build for Android'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build-android-bundle` 用于构建Android'
- en: '`npm run build-ios-bundle` to build for iOS'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run build-ios-bundle` 用于构建iOS'
- en: '`npm run start-android-bundle` to run on Android'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run start-android-bundle` 用于在Android上运行'
- en: '`npm run start-ios-bundle` to run on iOS'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run start-ios-bundle` 用于在iOS上运行'
- en: However, before we attempt those new commands, we will need to audit our app
    for a couple of things.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在我们尝试这些新命令之前，我们需要审查我们的应用程序的一些内容。
- en: 'We should start by ensuring that all NativeScript import paths are preceded
    with `tns-core-modules/[module]`; consider the following example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该首先确保所有NativeScript导入路径都以`tns-core-modules/[module]`开头；请考虑以下示例：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We'll go through our app and do this now. This works fine for development and
    production builds.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将浏览我们的应用程序并执行此操作。这对开发和生产构建都有效。
- en: You might wonder, *Hey! Why did you even use the other form if we needed to
    go through the entire codebase and change the imports after the fact?*
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，*嘿！如果我们需要在事后遍历整个代码库并更改导入，为什么你还要使用另一种形式？*
- en: Great concern! There's actually a ton of examples out there that show the convenient
    shortform import path, so we chose to build the app using that throughout in this
    chapter to demonstrate that it works just fine for development to help avoid confusion,
    in case you come across examples such as these in the future. Besides, it doesn't
    take too much to edit that after the fact to prepare for webpack but now you know.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 非常关注！实际上有很多示例显示了方便的简写导入路径，所以我们选择在本章中始终使用它来构建应用程序，以证明它对开发非常有效，以帮助避免混淆，以防将来遇到这样的示例。此外，事后编辑以准备webpack并不需要太多时间，现在你知道了。
- en: 'Run the following command right now:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 立即运行以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can see the following errors—which I have enumerated—and we will present
    solutions for it sequentially in the next section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到以下错误——我已经列举出来——我们将在下一节中按顺序提出解决方案：
- en: ERROR in Unexpected value `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts
    declared by the module PlayerModule in /path/to/TNSStudio/app/modules/player/player.module.ts`.
    Please add a `@Pipe/@Directive/@Component` annotation.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 意外值`SlimSliderDirective`在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts`中的模块PlayerModule中声明。请添加`@Pipe/@Directive/@Component`注释。
- en: ERROR in Cannot determine the module for class `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.android.ts`!
    Add `SlimSliderDirective` to the `NgModule` to fix it. Cannot determine the module
    for class `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.ios.ts`!
    Add `SlimSliderDirective` to the `NgModule` to fix it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法确定`SlimSliderDirective`类在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.android.ts`中的模块！将`SlimSliderDirective`添加到`NgModule`中以修复它。无法确定`SlimSliderDirective`类在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.ios.ts`中的模块！将`SlimSliderDirective`添加到`NgModule`中以修复它。
- en: ERROR in Error encountered resolving symbol values statically. Calling function
    `ModalDialogParams`, function calls are not supported. Consider replacing the
    function or lambda with a reference to an exported function, resolving symbol
    `RecorderModule` in `/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`,
    resolving symbol `RecorderModule` in `/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误在静态解析符号值时遇到错误。调用函数`ModalDialogParams`，不支持函数调用。考虑用对导出函数的引用替换函数或lambda，解析符号`RecorderModule`在`/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`中，解析符号`RecorderModule`在`/path/to/TNSStudio/app/modules/recorder/recorder.module.ts`中。
- en: 'ERROR in Entry module not found: Error: Can''t resolve `./app.css` in `/path/to/TNSStudio/app`.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 入口模块未找到：错误：无法解析`/path/to/TNSStudio/app`中的`./app.css`。
- en: ERROR in [copy-webpack-plugin] unable to locate `app.css` at `/path/to/TNSStudio/app/app.css`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误在[copy-webpack-plugin]无法在`/path/to/TNSStudio/app/app.css`中找到`app.css`。
- en: The first three errors are purely Angular **Ahead of Time** (**AoT**) compilation
    related. The last two are purely related to webpack configuration. Let's look
    at each error and how to properly resolve it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个错误纯粹与Angular **Ahead of Time** (**AoT**)编译相关。最后两个纯粹与webpack配置相关。让我们看看每个错误以及如何正确解决它。
- en: 'Solution #1: Unexpected value ''SlimSliderDirective...'''
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃1：意外值'SlimSliderDirective...'
- en: 'Consider the first complete error mentioned in the preceding section:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑前一节中提到的第一个完整错误：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The solution to the preceding error is to install an additional webpack plugin:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 解决前面的错误是安装额外的webpack插件：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, open `webpack.config.js` and configure the plugin as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`webpack.config.js`并配置插件如下：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will find the `slider.directive` import in `app/modules/players/directives/index.ts`
    and append the correct target platform suffix, so the AoT compiler will pick up
    the right target platform implementation file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`app/modules/players/directives/index.ts`中找到`slider.directive`的导入，并附加正确的目标平台后缀，这样AoT编译器就会选择正确的目标平台实现文件。
- en: At the time of writing this book, a solution did not exist for that error, so
    we developed the `nativescript-webpack-import-replace` plugin to solve. Since
    you might encounter situations with webpack bundling that may require some additional
    webpack help via a plugin, we will share an overview of how we developed the plugin
    to solve that error in the event that you encounter other obscure errors that
    might require you to create a plugin.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，对于该错误尚不存在解决方案，因此我们开发了`nativescript-webpack-import-replace`插件来解决。由于您可能会遇到需要通过插件提供一些额外webpack帮助的webpack捆绑情况，我们将分享我们如何开发插件来解决该错误的概述，以防您遇到其他可能需要您创建插件的模糊错误。
- en: Let's look at solutions for the initial remaining errors first, and then we'll
    highlight webpack plugin development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看看如何解决最初剩下的错误，然后我们将重点介绍webpack插件开发。
- en: 'Solution #2: Cannot determine the module for class SlimSliderDirective...'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃2：无法确定SlimSliderDirective类的模块...
- en: 'Consider the second complete error mentioned in the *Preparing to use webpack*
    section:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑*准备使用webpack*部分提到的第二个完整错误：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The solution to the preceding error is to open `tsconfig.aot.json`, and make
    the following change:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 解决上述错误的方法是打开`tsconfig.aot.json`，并进行以下更改：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since AoT compilation uses the `tsconfig.aot.json` configuration, we want to
    be more specific with the files that are targeted for compilation. Since `./app/main.ts`
    is our entry point to bootstrap the app, we will target that file and remove the
    `exclude` block.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于AoT编译使用`tsconfig.aot.json`配置，我们希望更具体地指定要编译的文件。由于`./app/main.ts`是引导应用程序的入口点，我们将针对该文件并删除`exclude`块。
- en: 'If we were to try bundling now at this point, we would have solved the error
    we saw; however, we would see the following *new* errors:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在尝试进行捆绑，我们将解决我们看到的错误；然而，我们将看到以下*新*错误：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is because we are targeting our `./app/main.ts`, which branches out to
    all other imports to our app's files, except to those modules that are lazy loaded.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们的目标是`./app/main.ts`，它会分支到我们应用程序文件的所有其他导入，除了那些懒加载的模块。
- en: 'The solution to the preceding error is to add lazy-loaded module paths in the
    `files` section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 解决上述错误的方法是在`files`部分中添加懒加载模块路径：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Okay, we solved the `lazy` error; however, now this reveals several *new* errors,
    as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们解决了`lazy`错误；然而，现在这揭示了几个*新*错误，如下所示：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Right about now...
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 就在此时...
- en: The funk soul brother.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 放克灵魂兄弟。
- en: Yes, you might be singing Fatboy Slim or about to lose your mind, and we understand.
    Bundling with webpack can be quite an adventure at times. The best advice that
    we can provide is to maintain patience and diligence to handle one error at a
    time; we're almost there.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可能正在唱Fatboy Slim或即将失去理智，我们理解。使用webpack进行捆绑有时可能会是一次非常冒险的经历。我们能提供的最好建议是保持耐心和勤奋，逐个解决错误；我们几乎到了。
- en: 'The solution to the preceding error is to include the iOS and Android platform
    declarations since we are using native APIs in our app:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 解决上述错误的方法是包含iOS和Android平台声明，因为我们在应用程序中使用原生API：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Hooray, we have now fully resolved the second issue. Let's move on to the next
    one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁，我们现在已完全解决了第二个问题。让我们继续下一个。
- en: 'Solution #3: Error encountered resolving symbol values statically'
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃3：遇到静态解析符号值的错误
- en: 'Consider the third complete error mentioned in the *Preparing to use webpack* section:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑*准备使用webpack*部分提到的第三个完整错误：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The solution to the preceding error is to open `app/modules/recorder/recorder.module.ts`
    and make the following change:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面错误的解决方案是打开`app/modules/recorder/recorder.module.ts`并进行以下更改：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will satisfy the Angular AoT compiler's need to resolve symbols statically.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将满足Angular AoT编译器静态解析符号的需求。
- en: 'Solution #4 and #5: Can''t resolve ''./app.css'''
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃4和＃5：无法解析'./app.css'
- en: 'Consider the 4th and 5th errors mentioned in the *Preparing to use webpack* section:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑在*准备使用webpack*部分中提到的第4和第5个错误：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The solution to the preceding error is actually related to the fact that we
    are using platform-specific `.ios.css` and `.android.css`, which is compiled via
    SASS. We need to update our webpack config so that it knows this. Open `webpack.config.js`,
    which the plugin added for us automatically, and make the following changes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面错误的解决方案实际上与我们使用特定于平台的`.ios.css`和`.android.css`有关，这是通过SASS编译的。我们需要更新我们的webpack配置，以便它知道这一点。打开`webpack.config.js`，插件已自动为我们添加，并进行以下更改：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Okay, we now have the bundling issues all cleared, or wait....**do we?!**
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们现在已经解决了所有捆绑问题，或者等一下....**我们吗？！**
- en: 'We haven''t tried to run the app yet in a simulator or on a device. If we were
    to try and do this now using `npm run start-ios-bundle` or via XCode or `npm run
    start-android-bundle`, you might get an app crash right when it tries to boot
    with an error like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有尝试在模拟器或设备上运行应用程序。如果我们现在尝试使用`npm run start-ios-bundle`或通过XCode或`npm run
    start-android-bundle`进行此操作，当它尝试启动时，您可能会遇到应用程序崩溃的错误，如下所示：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The solution to the preceding error is to ensure that your app contains an `./app/main.aot.ts`
    file with the following contents:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面错误的解决方案是确保您的应用程序包含一个`./app/main.aot.ts`文件，其中包含以下内容：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you recall we have a demo composition setup which loads it''s track files
    from an `audio` folder. We also utilize font-awesome icons with the help of a
    font-awesome.css file loaded from an `assets` folder. We need to make sure these
    folders also get copied into our production webpack build. Open `webpack.config.js`
    and make the following change:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得，我们有一个演示组合设置，它从`audio`文件夹加载其轨道文件。我们还利用了font-awesome图标，借助于从`assets`文件夹加载的font-awesome.css文件。我们需要确保这些文件夹也被复制到我们的生产webpack构建中。打开`webpack.config.js`并进行以下更改：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: SUCCESS!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: 'We can now run our bundled app with no errors using the following commands:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下命令运行我们捆绑的应用程序，而不会出现错误：
- en: '`npm run start-ios-bundle`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run start-ios-bundle`'
- en: Opening the XCode project and running `npm run start-android-bundle`
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开XCode项目并运行`npm run start-android-bundle`
- en: It's worth noting that all the changes we made to enable webpack bundling for
    release of our app also work perfectly well in development, so rest assured that
    you have only improved your app's setup at this point.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们为发布应用启用webpack捆绑所做的所有更改在开发中也完全有效，因此请放心，您目前只是改进了应用的设置。
- en: Detour – Overview of developing a webpack plugin
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绕道-开发webpack插件概述
- en: 'We now want to return to the first error we encountered when bundling our app
    which was:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要回到我们在捆绑应用程序时遇到的第一个错误，即：
- en: ERROR in Unexpected value `SlimSliderDirective` in `/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts`
    declared by the module `PlayerModule` in `/path/to/TNSStudio/app/modules/player/player.module.ts`.
    Please add a `@Pipe/@Directive/@Component` annotation.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ERROR in 意外值`SlimSliderDirective`在`/path/to/TNSStudio/app/modules/player/directives/slider.directive.d.ts`中由`PlayerModule`模块声明在`/path/to/TNSStudio/app/modules/player/player.module.ts`中。请添加`@Pipe/@Directive/@Component`注释。
- en: A solution for this error did not exist at the time of writing this book, so
    we created the `nativescript-webpack-import-replace` ([https://github.com/NathanWalker/nativescript-webpack-import-replace](https://github.com/NathanWalker/nativescript-webpack-import-replace))
    plugin to solve the problem.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，尚不存在此错误的解决方案，因此我们创建了`nativescript-webpack-import-replace`（[https://github.com/NathanWalker/nativescript-webpack-import-replace](https://github.com/NathanWalker/nativescript-webpack-import-replace)）插件来解决这个问题。
- en: Developing a webpack plugin in detail is out of the scope of this book, but
    we wanted to give you some highlights to the process in case you end up needing
    to create one to solve a particular case for your app.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 详细开发webpack插件超出了本书的范围，但我们希望为您提供一些过程的亮点，以防您最终需要创建一个来解决应用程序的特定情况。
- en: 'We started by creating a separate project with a `package.json` file so we
    could install our webpack plugin like any other npm plugin:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个单独的项目，其中包含一个`package.json`文件，以便像安装其他npm插件一样安装我们的webpack插件：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `nativescript` key actually helps categorize this plugin on the various
    NativeScript plugin listing sites.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`nativescript`关键字实际上有助于在各种NativeScript插件列表网站上对此插件进行分类。'
- en: 'We then created `lib/ImportReplacePlugin.js` to represent the actual plugin
    class we would be able to import and use in our webpack config. We created this
    file inside a `lib` folder for good measure in case we need to add extra supporting
    files to aid our plugin for a nice clean separation of concerns with our plugin
    organization. In this file, we set up an export by defining a closure containing
    a constructor for our plugin:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了`lib/ImportReplacePlugin.js`来表示我们可以导入并在webpack配置中使用的实际插件类。我们将此文件创建在`lib`文件夹中，以防需要添加额外的支持文件来帮助我们的插件进行良好的分离。在这个文件中，我们通过定义一个包含我们插件构造函数的闭包来设置导出：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will take the target `platform` defined in our webpack config and pass
    it through as options along with a `files` collection, which will contain all
    the filenames of the imports we need to replace.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取我们webpack配置中定义的目标`platform`，并将其作为选项传递，同时还有一个`files`集合，其中包含我们需要替换的所有导入文件的文件名。
- en: 'We then want to wire into webpack''s `make` lifecycle hook to grab hold of
    the source files being processed in order to parse them:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们希望在webpack的`make`生命周期钩子中插入，以便抓住正在处理的源文件以进行解析：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This grabs hold of all the AoT source files. Then we setup a loop to process
    them one by one and add processing methods for what we need:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这抓住了所有的AoT源文件。然后我们设置一个循环，逐个处理它们，并为我们需要的内容添加处理方法：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'An interesting part to building webpack plugins (*and arguably the most challenging*)
    is working with **Abstract Syntax Trees** (**ASTs**) of your source code. A critical
    aspect of our plugin is getting the "source file" node from the AST as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 构建webpack插件的一个有趣部分（*可能是最具挑战性的*）是处理源代码的**抽象语法树**（**ASTs**）。我们插件的一个关键方面是从AST中获取“源文件”节点，方法如下：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This effectively weeds out any other nodes that are not source files since that
    is all our plugin needs to deal with.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这有效地清除了除源文件之外的任何其他节点，因为这是我们的插件需要处理的所有内容。
- en: 'Lastly, we create an `index.js` file in the root to simply export the plugin
    file for use:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在根目录创建了一个`index.js`文件，只需导出插件文件供使用：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With the aid of this webpack plugin, we are able to completely solve all the
    webpack bundling errors we encountered in our app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这个webpack插件，我们能够完全解决我们应用程序中遇到的所有webpack捆绑错误。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we prepared our app for distribution by adding webpack into
    our build chain to help ensure that we have the smallest JavaScript size and the
    optimal execution performance of our code. This also enabled Angular's AoT compilation
    on our app, which helps to provide an optimal performance of our code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过将webpack添加到构建链中，为应用程序的分发做好了准备，以帮助确保我们的JavaScript大小最小，代码执行性能最佳。这也使得Angular的AoT编译在我们的应用程序上可用，有助于提供我们代码的最佳性能。
- en: Along the way, we provided a cookbook of solutions to various webpack bundling
    errors that you might run into during the course of your app's development. In
    addition, we took a high-level look at developing a custom webpack plugin to help
    solve a particular error condition in our app to achieve a successful bundle.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们提供了一些解决各种webpack捆绑错误的解决方案，这些错误可能在应用程序开发过程中遇到。此外，我们还从高层次上看了一下开发自定义webpack插件，以帮助解决应用程序中特定的错误条件，从而实现成功的捆绑。
- en: Now that we have an optimal bundle of our app code, we are now ready to finish
    our distribution steps to finally deploy our app in the next chapter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了应用程序代码的最佳捆绑，我们现在准备完成我们的分发步骤，最终在下一章部署我们的应用程序。
