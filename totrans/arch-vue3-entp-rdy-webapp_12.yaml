- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Deploying Enterprise-Ready Vue.js 3
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署企业级 Vue.js 3
- en: In the previous chapter, we explored everything related to **end-to-end** (**e2e**)
    testing. We learned in depth how to perform e2e testing on a Vue.js 3 component
    and pages. In addition, we also learned about end-to-end testing tools such as
    Cypress and Puppeteer, and how to use them to test an enterprise project effectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了与**端到端**（**e2e**）测试相关的所有内容。我们深入学习了如何在 Vue.js 3 组件和页面上执行 e2e 测试。此外，我们还了解了端到端测试工具，如
    Cypress 和 Puppeteer，以及如何有效地使用它们来测试企业级项目。
- en: In this chapter, we will learn how to deploy Vue.js 3 projects to the AWS cloud.
    We will learn the best practices for deploying to AWS. In addition, we will learn
    how enterprise companies deploy their enterprise Vue.js 3 applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，我们将学习如何将 Vue.js 3 项目部署到 AWS 云。我们将学习部署到 AWS 的最佳实践。此外，我们还将了解企业公司如何部署他们的企业级
    Vue.js 3 应用程序。
- en: Additionally, we will learn about and explore different deployment options and
    best practices to deploy your Vue.js 3 project to various cloud providers. We
    will learn how to deploy the app to AWS and Azure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将了解并探索不同的部署选项和最佳实践，以便将您的 Vue.js 3 项目部署到各种云服务提供商。我们将学习如何将应用程序部署到 AWS 和
    Azure。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下关键主题：
- en: Introduction to CI/CD
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 简介
- en: Overview of CI/CD
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 概述
- en: What is a deployment pipeline?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是部署管道？
- en: Overview of GitHub Actions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Actions 概述
- en: Deploying to AWS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到 AWS
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, I recommend reading through [*Chapter 11*](B17237_11.xhtml#_idTextAnchor420),
    *Industry Standard End-to-End Testing*, where we explored the concept of e2e testing
    and what to test from an array of components and methods available. We will rely
    heavily on the knowledge of that chapter in this chapter to learn about Vue.js
    3 enterprise unit testing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我建议阅读第 11 章，*行业标准端到端测试*，其中我们探讨了 e2e 测试的概念以及从一系列组件和方法中选择要测试的内容。我们将在这个章节中大量依赖该章节的知识来学习
    Vue.js 3 企业级单元测试。
- en: All the code files of this chapter can be found at [https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-12](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-12).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码文件都可以在[https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-12](https://github.com/PacktPublishing/Architecting-Vue.js-3-Enterprise-Ready-Web-Applications/tree/chapter-12)找到。
- en: Introduction to CI/CD
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 简介
- en: Developing an enterprise-level application is easy, but constantly deploying
    newly developed changes, bug fixes, or features to your users is a daunting process,
    especially if done frequently, and especially for enterprise-ready applications.
    In addition, as your application, teams, and deployment infrastructure grows in
    complexity, continuously releasing and deploying new changes, features, and products
    to customers can be a complicated process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 开发一个企业级应用程序很容易，但不断地将新开发的更改、错误修复或功能部署给用户是一个令人畏惧的过程，尤其是如果频繁进行，特别是对于企业级应用程序。此外，随着您的应用程序、团队和部署基础设施的复杂性增加，持续发布和部署新更改、功能和产品给客户可能是一个复杂的过程。
- en: To solve the complicated process of developing, testing, and releasing software
    quickly and consistently, three related but distinct strategies have been created
    by developers and organizations to manage and automate these processes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速且一致地解决开发、测试和发布软件的复杂过程，开发者和组织已经创建了三个相关但不同的策略来管理和自动化这些流程。
- en: In the next section, we will explore these three pillars, called CI/CD, and
    explain each of these strategies and how they relate to each other. Most importantly,
    we will explore how to build and incorporate these strategies into our enterprise
    application life cycle so that it can transform our software development and release
    practices.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨这三个被称为 CI/CD 的支柱，并解释这些策略以及它们是如何相互关联的。最重要的是，我们将探讨如何构建并将这些策略纳入我们的企业应用程序生命周期，以便它能够改变我们的软件开发和发布实践。
- en: Overview of CI/CD
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 概述
- en: '**CI**/**CD** stands for **continuous integration**/**continuous delivery**.
    It is a strategy that allows enterprise teams to ship software faster and more
    efficiently. It enables a streamlined approach for getting products to the market
    more quickly than ever before, allowing for a steady stream of code to be released
    into production and providing a steady stream of new features and bug fixes through
    the most efficient means of delivery.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI**/**CD**代表**持续集成**/**持续交付**。这是一种策略，允许企业团队更快、更高效地发布软件。它使产品能够以前所未有的速度进入市场，允许代码持续流入生产环境，并通过最有效的交付方式提供持续的新功能和错误修复。'
- en: A CI/CD pipeline is written to automate the software delivery process from the
    development stage to the production environment. It builds, tests, and safely
    deploys a new version of an application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD管道被编写用于自动化从开发阶段到生产环境的软件交付过程。它构建、测试并安全地部署应用程序的新版本。
- en: The main advantage of automated pipelines is that it removes the manual errors
    that can be detected during deployment and provides standardized feedback loops
    to developers for faster product iterations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化管道的主要优势在于它消除了在部署过程中可能检测到的手动错误，并为开发者提供标准化的反馈循环，以加快产品迭代。
- en: CI/CD is a combination of different strategies and pillars that come together
    to create a strong pipeline for delivering enterprise software; we will explore
    these strategies in detail in this section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD是不同策略和支柱的组合，共同构成了强大的企业软件交付管道；我们将在本节中详细探讨这些策略。
- en: "![Figure 12.1 – CI/CD\uFEFF](img/Figure_12.01_B17237.jpg)"
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – CI/CD](img/Figure_12.01_B17237.jpg)'
- en: Figure 12.1 – CI/CD
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – CI/CD
- en: Continuous integration
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成
- en: CI is a process that allows developers in a team to frequently integrate their
    code into a shared repository. These developers can write their code in isolation
    and integrate it using a continuous integration process. This practice encourages
    each developer to build in isolation and integrate code with the shared repository
    multiple times throughout the day.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CI是一种过程，允许团队中的开发者频繁地将他们的代码集成到一个共享的仓库中。这些开发者可以在隔离的环境中编写代码，并使用持续集成过程进行集成。这种做法鼓励每个开发者独立构建，并在一天中多次将代码与共享仓库集成。
- en: When code is integrated early in the development cycle, developers can discover
    conflicts at the boundaries between new and existing code early. This process
    minimizes the cost of integration by making it an early consideration.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码在开发周期的早期阶段集成时，开发者可以及早发现新旧代码之间的冲突。这个过程通过使其成为早期考虑的事项来最小化集成成本。
- en: By implementing a proper continuous integration strategy, development teams
    can reduce integration costs and respond to defects early.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施适当的持续集成策略，开发团队能够降低集成成本并及早应对缺陷。
- en: For an enterprise team to succeed in robust, automated, and fast integration,
    deployment, and delivery of enterprise software, the culture of frequent iteration
    and responsiveness to build issues must be cultivated.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使企业团队能够在稳健、自动化和快速的企业软件集成、部署和交付中取得成功，必须培养频繁迭代和对构建问题的快速响应的文化。
- en: Continuous delivery
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续交付
- en: CD is an extension of continuous integration that is aimed at streamlining the
    software delivery process and allowing teams to deploy their code to production
    with ease and assurance. It seeks to reduce the difficulty of the deployment or
    release process by automating the steps necessary to deploy a build, thus enabling
    code to be released securely at any time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: CD（持续交付）是持续集成的扩展，旨在简化软件交付流程，并使团队能够轻松且放心地将代码部署到生产环境中。它通过自动化部署构建所需的步骤来降低部署或发布过程的难度，从而使得代码能够在任何时候安全地发布。
- en: Additionally, continuous delivery is a process that allows for the automated
    transfer of finished code to various settings, such as testing and development.
    It provides a reliable and automated method for the code to be sent to these areas.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，持续交付是一个允许将完成的代码自动传输到各种设置的过程，例如测试和开发。它为代码被发送到这些区域提供了一个可靠和自动的方法。
- en: In addition, continuous delivery encompasses the provisioning and deployment
    of infrastructure, which can be done manually and involve multiple steps. This
    type of delivery usually automates these processes with the involvement of the
    entire team.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，持续交付还包括基础设施的配置和部署，这可以手动完成并涉及多个步骤。这种类型的交付通常涉及整个团队的参与，并自动化这些流程。
- en: Continuous delivery relies on a deployment pipeline to automate the process
    of running increasingly comprehensive test suites against a build, with each stage
    being a sequential step. If the build fails the test, the team is notified, but
    if it passes, it is automatically advanced to the next stage.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付依赖于部署管道来自动化对构建运行越来越全面的测试套件的过程，每个阶段都是一个连续的步骤。如果构建未通过测试，团队会收到通知，但如果通过，它将自动进入下一阶段。
- en: It is essential for enterprise software teams to implement continuous delivery,
    as it automates the process between committing code to the repository and determining
    whether to deploy well-tested, functional builds to the production environment.
    This step helps ensure that the quality and accuracy of the code are automated,
    while the ultimate decision of what to release is left up to the engineering team.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于企业软件团队来说，实施持续交付是至关重要的，因为它自动化了从提交代码到确定是否将经过良好测试、功能完善的建设部署到生产环境之间的过程。这一步骤有助于确保代码的质量和准确性自动化，而最终发布什么由工程团队决定。
- en: Continuous deployment
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous deployment is an extension of continuous delivery that deploys each
    build that passes the full test cycle without manual intervention. This is beneficial,
    as manual deployment can cause delays and irregular deployment. A continuous deployment
    system will deploy any build that has gone through the deployment pipeline that
    was set up during the continuous delivery stage.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是持续交付的扩展，它将每个通过完整测试周期的构建部署出去，而不需要人工干预。这是有益的，因为手动部署可能导致延迟和不规则的部署。持续部署系统将部署在持续交付阶段设置的部署管道中通过的任何构建。
- en: In addition, deploying your code automatically doesn’t mean that new features
    cannot be activated or deactivated conditionally. In fact, continuous deployment
    can be configured to only deploy a specific feature to a subset of users or be
    activated conditionally at a later time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，自动部署代码并不意味着新功能不能有条件地激活或停用。事实上，持续部署可以配置为仅将特定功能部署到用户子集，或在稍后时间有条件地激活。
- en: The debate surrounding continuous deployment is often focused on the safety
    of automated deployment and whether the risk it poses is worth the reward. Nevertheless,
    it can also be advantageous for organizations, as they can receive constant feedback
    on new features and quickly detect any errors before too much time and energy
    is wasted.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 围绕持续部署的辩论通常集中在自动化部署的安全性以及它所承担的风险是否值得回报。然而，对于组织来说，这也有利可图，因为它们可以持续收到关于新功能的反馈，并在浪费过多时间和精力之前快速检测到任何错误。
- en: We have explored the concept of CI/CD and how to automate deploying and releasing
    enterprise projects. In the next section, we will explore the deployment pipeline
    and how to create an enterprise-ready deployment pipeline for the enterprise Vue.js
    3 application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了CI/CD的概念以及如何自动化部署和发布企业项目。在下一节中，我们将探讨部署管道以及如何为企业Vue.js 3应用程序创建一个企业级部署管道。
- en: What is a deployment pipeline?
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是部署管道？
- en: The deployment pipeline streamlines the deployment and delivery of your enterprise
    application. It compiles the code, executes all the tests, and securely deploys
    a new version of the application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 部署管道简化了企业应用程序的部署和交付。它编译代码，执行所有测试，并安全地部署应用程序的新版本。
- en: Automating your deployment and delivery processes using deployment pipelines
    removes manual errors, provides standardized feedback loops to developers, and
    enables fast product iterations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用部署管道自动化部署和交付流程可以消除手动错误，为开发者提供标准化的反馈循环，并使产品迭代更快。
- en: Furthermore, when building enterprise products, your organizational structure
    and development team and pattern will determine the strategies used to create
    your deployment pipeline, as it can differ from project to project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在构建企业产品时，你的组织结构、开发团队和模式将决定创建部署管道所使用的策略，因为它们可能因项目而异。
- en: However, there are different strategies already used in enterprise projects
    that can be adopted and modified if necessary.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，企业项目中已经采用的不同策略可以根据需要采纳和修改。
- en: In deployment pipelines, there are required stages (or elements) that make up
    a CI/CD pipeline. In the next section, we are going to explore these elements
    and learn how to set up our deployment pipeline for our demo enterprise project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署管道中，有一些必需的阶段（或元素）构成了CI/CD管道。在下一节中，我们将探讨这些元素，并学习如何为我们的演示企业项目设置部署管道。
- en: Elements of a deployment pipeline
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署管道的元素
- en: A deployment pipeline is composed of executable instructions that any developer
    must follow in order to release a new version of a software product.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 部署管道由任何开发者在发布软件产品的新版本时必须遵循的可执行指令组成。
- en: The beauty of an automated deployment pipeline is that it replaces the manual
    process of carrying out the exact specification laid out for the deployment and
    delivery of enterprise software by automating the process.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 自动部署管道的美丽之处在于，它通过自动化流程来取代企业软件部署和交付的精确规范的手动过程。
- en: 'The following figure shows the typical software release stages in most enterprise
    software:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了大多数企业软件中典型的软件发布阶段：
- en: '![Figure 12.2 – Elements of a deployment pipeline](img/Figure_12.02_B17237.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – 部署管道的元素](img/Figure_12.02_B17237.jpg)'
- en: Figure 12.2 – Elements of a deployment pipeline
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – 部署管道的元素
- en: 'These stages can be performed manually, provided each step is followed accordingly.
    However, the downside is enormous, as you can see here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些阶段可以手动执行，前提是每个步骤都按照相应的方式进行。然而，缺点是巨大的，正如你所看到的：
- en: '**Time-consuming**: Manual deployment can take a long time to complete, especially
    if there are multiple components that need to be deployed'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**耗时**：手动部署可能需要很长时间才能完成，尤其是当有多个组件需要部署时'
- en: '**Error-prone**: Manual deployment is prone to human errors, which can lead
    to costly mistakes and downtime'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易出错**：手动部署容易出错，这可能导致代价高昂的错误和停机时间'
- en: '**Lack of scalability**: Manual deployment is not easily scalable, as it requires
    manual intervention for each component that needs to be deployed'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏可扩展性**：手动部署不易扩展，因为它需要对每个需要部署的组件进行手动干预'
- en: To avoid this, an automated deployment pipeline has been created to carry out
    the stages and alert the responsible developer of any errors, or to send notifications
    through email, Slack, and so on. Additionally, the pipeline can also notify the
    whole team when a successful deployment to production has been completed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，已经创建了一个自动部署管道来执行各个阶段，并在出现任何错误时通知负责的开发者，或者通过电子邮件、Slack 等发送通知。此外，当成功完成生产部署时，管道还可以通知整个团队。
- en: Now, let’s examine each of the stages to understand what goes in. This will
    aid us in understanding how to develop a good deployment pipeline for our enterprise
    Vue.js 3 application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们逐一检查每个阶段，以了解其中包含的内容。这将帮助我们了解如何为我们的企业 Vue.js 3 应用程序开发一个良好的部署管道。
- en: Source stage
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源阶段
- en: At the source stage, a pipeline is typically initiated by a source code repository.
    Whenever there is a change in the code, it notifies the CI/CD process to execute
    the related pipeline. Additionally, other common triggers include user-initiated
    workflows and automated scheduled workflows.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在源阶段，管道通常由源代码仓库启动。每当代码发生变化时，它会通知 CI/CD 流程执行相关的管道。此外，其他常见的触发器包括用户触发的流程和自动计划的流程。
- en: Build stage
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建阶段
- en: In the build stage, we combine the source code and all its dependencies to build
    a runnable instance of the project that is intended to ship to the users. At this
    stage, the software is compiled or bundled together with its dependencies.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建阶段，我们将源代码及其所有依赖项组合在一起，构建一个可运行的实例，该实例打算发送给用户。在这个阶段，软件被编译或与其依赖项捆绑在一起。
- en: The build phase attempts to package the project to make it deployable. If the
    build stage encounters any problems, this is a sign of an underlying issue with
    the project’s setup or configuration and should be taken care of right away.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 构建阶段试图打包项目以使其可部署。如果构建阶段遇到任何问题，这表明项目设置或配置存在潜在问题，应立即处理。
- en: Test stage
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试阶段
- en: Once the build stage is finished successfully, the next step is to conduct the
    test stage. This stage involves running automated tests to make sure the code
    is accurate and the project is functioning correctly. This stage serves as a safeguard
    to ensure that any bugs that can be easily reproduced are not sent to the end
    users or passed through the pipeline.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建阶段成功完成，下一步就是进行测试阶段。这个阶段涉及运行自动化测试，以确保代码准确无误，项目运行正常。这个阶段作为保障措施，确保任何可以轻松复制的错误不会发送给最终用户或通过管道传递。
- en: At this stage, all the test cases written by developers (including, but not
    limited to, unit tests, integration tests, e2e testing, etc.) are all tested and
    checked to make sure they all pass before allowing the current build to proceed
    to the deployment stage.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，所有由开发者编写的测试用例（包括但不限于单元测试、集成测试、端到端测试等）都将被测试和检查，以确保它们全部通过，然后才允许当前构建进入部署阶段。
- en: The testing stage is critical for identifying any issues with the code that
    the developer may have overlooked. This feedback is important to the developer
    as it is provided while the problem is still fresh in their mind. If any failures
    occur during the test stage, they can reveal problems in the code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 测试阶段对于识别开发者可能忽略的代码问题至关重要。这种反馈对开发者来说很重要，因为它是在问题仍然在他们脑海中新鲜时提供的。如果在测试阶段发生任何失败，它们可以揭示代码中的问题。
- en: Deploy stage
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署阶段
- en: Prior to this stage, the pipeline has created a functioning version of the new
    code or modifications that have passed all the predetermined tests and is now
    ready to deploy it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段之前，管道已创建了一个新的代码或修改的功能版本，它已经通过了所有预定的测试，现在准备部署。
- en: Generally, there are multiple deployment environments that have been established
    for the development team, such as a “staging” environment for the product team,
    a “development” environment for the development team, and a “production” environment
    for the end users.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，为开发团队建立了多个部署环境，例如产品团队的“预发布”环境、开发团队的“开发”环境以及最终用户的“生产”环境。
- en: Depending on the team, organization, and model chosen, various deployment environments
    can be established. Teams that have adopted the Agile model of development, which
    is based on tests and real-time observation, often deploy to the staging environment
    for further manual testing and examination before pushing out accepted modifications
    to production for the end users.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据团队、组织选择的模型，可以建立各种部署环境。采用基于测试和实时观察的敏捷开发模型的团队，通常在将接受修改推送到最终用户的生产环境之前，将代码部署到预发布环境进行进一步的手动测试和审查。
- en: Overview of a deployment pipeline
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署管道概述
- en: In this section, we are going to explore a practical example of a deployment
    pipeline. Pipelines are the reflection of the complexity of a project. Therefore,
    configuring a pipeline that runs on every code change will save a team many pains
    and repetitive tasks in the future.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨一个部署管道的实际示例。管道是项目复杂性的反映。因此，为每次代码更改配置一个管道将节省团队未来的许多痛苦和重复性任务。
- en: The following figure shows a clear example of a deployment pipeline and the
    different jobs that need to be performed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下图清晰地展示了部署管道的示例以及需要执行的不同作业。
- en: The `source` stage is triggered when changes are pushed to a specific branch
    that the CI/CD is activated on and it moves to the build stage where it compiles
    that code using a compiler, if any, or uses a `docker build` process to build
    the project’s image.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当更改推送到CI/CD激活的特定分支时，`source`阶段被触发，然后它进入构建阶段，使用编译器（如果有）编译代码，或者使用`docker build`过程构建项目的镜像。
- en: Next, the testing stage runs all the necessary and activated test cycles, such
    as unit tests, integration tests, and end-to-end tests.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，测试阶段运行所有必要的和激活的测试周期，例如单元测试、集成测试和端到端测试。
- en: After successful testing, the pipeline moves to the deploy stage, where the
    code is deployed to a live staging environment for further testing before finally
    deploying to the production environment.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 测试成功后，管道进入部署阶段，将代码部署到实时预发布环境进行进一步测试，最终部署到生产环境。
- en: '![Figure 12.3 – Example of a deployment pipeline](img/Figure_12.03_B17237.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 部署管道示例](img/Figure_12.03_B17237.jpg)'
- en: Figure 12.3 – Example of a deployment pipeline
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 部署管道示例
- en: In the preceding figure, we have explored the overview of a deployment pipeline,
    the different stages, and what goes under the hood of each different stage. In
    this section, we have explored deployment pipelines and the different stages that
    are involved in them. Next, we will discuss how to deploy our Pinterest demo to
    the AWS cloud using GitHub Actions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们探讨了部署管道的概述、不同阶段以及每个不同阶段内部的情况。在本节中，我们探讨了部署管道及其涉及的不同阶段。接下来，我们将讨论如何使用GitHub
    Actions将我们的Pinterest演示部署到AWS云。
- en: Overview of GitHub Actions
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions概述
- en: In the world of CI/CD, there are numerous tools have been created to automate
    the process of building, testing, and deploying projects. GitHub Actions happens
    to be one of those tools and has greatly gained popularity.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI/CD的世界中，已经创建了众多工具来自动化构建、测试和部署项目的流程。GitHub Actions恰好是这些工具之一，并且已经获得了极大的普及。
- en: GitHub Actions is a CI/CD platform that allows developers to automate the process
    of building, testing, and running deployment pipelines.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions是一个CI/CD平台，允许开发者自动化构建、测试和运行部署管道的过程。
- en: GitHub Actions became popular because it is directly integrated into GitHub
    and can be configured to create workflows that build and test every pull request
    to your repository or deploy merged pull requests to production.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions之所以受欢迎，是因为它直接集成到GitHub中，可以配置以创建工作流程，构建和测试您存储库中的每个拉取请求，或将合并的拉取请求部署到生产环境。
- en: 'There are tons of concepts to learn about GitHub Actions: the different terminologies,
    concepts, benefits, and advantages of using GitHub Actions over other CI/CD platforms.
    You can learn all this from the official documentation at [https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 关于GitHub Actions，有许多概念需要学习：不同的术语、概念、使用GitHub Actions相较于其他CI/CD平台的益处和优势。您可以从官方文档中学习所有这些内容，文档链接为[https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions)。
- en: Nevertheless, we will show you how to create a deployment pipeline for the Pinterest
    demo project we developed in previous chapters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们仍将向您展示如何为我们在前几章中开发的Pinterest演示项目创建部署管道。
- en: Deploying an enterprise project is tedious and requires lots of checks to make
    sure that frequent bugs do not surface in production.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 部署企业级项目是繁琐的，需要大量检查以确保频繁的bug不会在生产环境中出现。
- en: There are many factors to check before deploying an enterprise project, from
    linting, formatting, and styling, to testing. The list is endless and sometimes
    depends on your team and how the development workflow is set up.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署企业级项目之前，有许多因素需要检查，从linting、格式化和风格到测试。清单无穷无尽，有时还取决于您的团队以及开发工作流程的设置。
- en: In the next section, we are going to explore the different stages or checks
    the project needs to pass before deploying to production.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨项目在部署到生产之前需要通过的不同阶段或检查。
- en: Jobs in the deployment pipeline
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署管道中的作业
- en: The jobs in the deployment pipeline vary from project to project and from team
    to team. In the following subsection, we look at some of the important jobs you
    can build into your deployment pipeline to completely check your project before
    deploying to production.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 部署管道中的作业因项目而异，也因团队而异。在以下子节中，我们将探讨一些您可以在部署管道中构建的重要作业，以确保在部署到生产之前完全检查您的项目。
- en: Linting (Eslint, Stylelint, Prettier)
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linting（Eslint、Stylelint、Prettier）
- en: Linting is a process in which a linter program reviews the source code of a
    particular programming language or code base to detect any potential issues such
    as errors, bugs, stylistic errors, and suspicious constructs. This is beneficial
    in recognizing both common and uncommon mistakes that can be made when coding.
    Furthermore, linting will go through your source code to identify any formatting
    discrepancies, check for compliance with coding standards and conventions, and
    pinpoint potential logical errors in your program.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Linting是一个过程，其中linting程序会审查特定编程语言或代码库的源代码，以检测任何潜在问题，如错误、bug、风格错误和可疑结构。这有助于识别在编码过程中可能犯下的常见和罕见错误。此外，linting会遍历您的源代码，以识别任何格式差异，检查是否符合编码标准和约定，并指出程序中可能存在的潜在逻辑错误。
- en: Also, linting helps with developer experience in a team by creating a consistent
    code base throughout the development team.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，linting通过在整个开发团队中创建一致的代码库，有助于提高团队的开发者体验。
- en: 'We are going to set up linting in our pipeline to enforce consistency between
    the style guide, formatting, and naming conventions in our deployment pipeline,
    like so:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的管道中设置linting，以确保在部署管道中的风格指南、格式和命名约定之间的一致性，如下所示：
- en: '[PRE0]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Lighthouse budget checks
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Lighthouse预算检查
- en: Lighthouse is an open source, automated tool for improving the quality of web
    pages. This tool allows you to run tests against web pages (public or requiring
    authentication). It helps developers audit web pages for performance, accessibility,
    SEO, and more.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse是一个开源的自动化工具，用于提高网页质量。此工具允许您对网页（公开或需要认证）运行测试。它帮助开发者审计网页的性能、可访问性、SEO等方面。
- en: In addition, you can automate this process by adding it to your deployment pipeline
    to test for performance of your web page before deploying it to the users. This
    process allows enterprise-ready application developers to automate the process
    of testing the performance of the application in real time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过将其添加到您的部署管道中来自动化此过程，在将网页部署给用户之前测试网页的性能。这个过程允许企业级应用程序开发者自动化在实时测试应用程序性能的过程。
- en: 'The action allows us to set numerous options, including the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该操作允许我们设置多个选项，包括以下内容：
- en: Testing against multiple paths
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对多个路径进行测试
- en: Providing a budget path
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供预算路径
- en: The number of runs (how many times the CI should audit an URL)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行次数（CI应该审计URL的次数）
- en: We are going to set up the Lighthouse bot ([https://github.com/ebidel/lighthousebot](https://github.com/ebidel/lighthousebot))
    with GitHub Actions to audit our deployment and User Experience (UX) integrity.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置Lighthouse机器人（[https://github.com/ebidel/lighthousebot](https://github.com/ebidel/lighthousebot)）与GitHub
    Actions一起，以审计我们的部署和用户体验（UX）完整性。
- en: 'Here is a snippet of the job setup for Lighthouse:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Lighthouse作业设置的片段：
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code is used to add the Lighthouse plugin to the deployment pipeline,
    and the plugin uses the `actions/checkout` plugin to access the repository workspace
    in other to access the `budget.json` file, which contains the task that Lighthouse
    should perform. This Lighthouse GitHub Action is extremely beneficial for websites
    that depend on Google search traffic. If not addressed early on, it is very common
    for the bundle sizes to become larger as a website is developed, resulting in
    a lower Lighthouse score. This action allows us to monitor any discrepancies with
    each commit.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码用于将Lighthouse插件添加到部署管道中，该插件使用`actions/checkout`插件来访问仓库工作区，以便访问包含Lighthouse应执行的任务的`budget.json`文件。这个Lighthouse
    GitHub Action对于依赖于谷歌搜索流量的网站来说非常有用。如果不尽早解决，随着网站的发展，捆绑包的大小通常会变得更大，从而导致Lighthouse评分降低。此操作允许我们监控每次提交中的任何差异。
- en: Automated software testing
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动化软件测试
- en: Software testing is a vital factor for determining the status of your enterprise
    application and making sure it conforms to the project requirements. As explored
    in the previous chapters, we have developed three major types of software testing
    and have practiced how to create better testing suites for our Pinterest application
    demo.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试是确定您的企业应用程序状态并确保其符合项目要求的一个关键因素。正如前几章所探讨的，我们已经开发了三种主要的软件测试类型，并实践了如何为我们的Pinterest应用程序演示创建更好的测试套件。
- en: 'Therefore, we are going to set up three jobs to run the entire software testing
    suites for our demo application. In our demo, the software testing suite comprises
    the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将设置三个任务来运行我们演示应用程序的整个软件测试套件。在我们的演示中，软件测试套件包括以下内容：
- en: Unit testing
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Integration (component) testing
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成（组件）测试
- en: E2e testing
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端测试（E2e testing）
- en: The job will run each of these tests and respond accordingly. If the test fails,
    it will pause the deployment and report the problem to the development team via
    Slack notifications or emails. Otherwise, if the test passes, it will continue
    to the next stages.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 作业将运行这些测试中的每一个，并相应地做出反应。如果测试失败，它将暂停部署并通过Slack通知或电子邮件向开发团队报告问题。否则，如果测试通过，它将继续到下一阶段。
- en: 'Here is the snippet of all the test setups:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是所有测试设置的片段：
- en: '[PRE2]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The script sets up the testing stage, which contains scripts to run different
    testing cycles such as unit testing, integration testing, and e2e testing. In
    each of the pipeline jobs, we use `actions/checkout` to check out the workspace
    repository, and next, we run the `yarn` command to install all the packages before
    proceeding to run the `test` command.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本设置了测试阶段，其中包含运行不同测试周期（如单元测试、集成测试和端到端测试）的脚本。在每个管道任务中，我们使用`actions/checkout`来检出工作区仓库，然后运行`yarn`命令安装所有包，然后再运行`test`命令。
- en: Netlify deployment for staging
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 净土部署（Netlify deployment for staging）
- en: Netlify is a comprehensive platform that enables you to integrate your preferred
    tools and APIs to construct the fastest websites, stores, and applications for
    the composable web. It allows you to utilize any frontend framework to construct,
    preview, and deploy to the worldwide network from Git.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Netlify 是一个综合平台，它使您能够集成您首选的工具和 API，以构建最快的网站、商店和适用于可组合网络的 应用程序。它允许您使用任何前端框架构建、预览并将内容部署到全球网络，从
    Git 开始。
- en: You can deploy your enterprise application to several environments, such as
    development, staging, and production, depending on your team’s setup.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将企业应用程序部署到多个环境，例如开发、预发布和生产，具体取决于您的团队设置。
- en: GitHub Actions allows you to create several workflows for deploying to these
    different environments. Within each environment, you can set up different jobs
    to be performed. For instance, you might not want to check for Lighthouse performance
    again since it was already tested when deploying to staging environments.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 允许您为这些不同的环境创建多个工作流程。在每个环境中，您可以设置不同的作业来执行。例如，您可能不想再次检查 Lighthouse
    性能，因为当部署到预发布环境时已经测试过了。
- en: 'Here is a snippet to set up the job to deploy to Netlify:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个设置作业以部署到 Netlify 的代码片段：
- en: '[PRE3]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding script uses the Netlify GitHub Action plugin to deploy the Vue.js
    3 application to Netlify. It requires a Netlify token and secrets (which are added
    in the Secrets section of our GitHub repository) and finally, it provides the
    preview URL after deployment.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的脚本使用 Netlify GitHub Action 插件将 Vue.js 3 应用程序部署到 Netlify。它需要一个 Netlify 令牌和密钥（这些在
    GitHub 仓库的“密钥”部分添加），最后，在部署后提供预览 URL。
- en: In the next section, we are going to create a complete deployment pipeline with
    GitHub Actions to set up a staging application for more manual testing before
    pushing it to the master branch, which will trigger the production deployment
    pipeline.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 GitHub Actions 创建一个完整的部署管道，以在将应用程序推送到主分支之前进行更多手动测试，这将触发生产部署管道。
- en: Creating the deployment pipeline with GitHub Actions
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 创建部署管道
- en: To create a deployment pipeline with GitHub Actions, we need to create configuration
    files for each pipeline configuration environment.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 GitHub Actions 创建部署管道，我们需要为每个管道配置环境创建配置文件。
- en: Follow the steps mentioned next to create your first deployment pipeline for
    your staging environment using GitHub Actions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建您的第一个使用 GitHub Actions 的预发布环境部署管道。
- en: Open the Pinterest demo application or clone it from the official repository
    for this chapter to see a complete setup of the GitHub Actions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Pinterest 示例应用程序或从本章的官方仓库克隆它，以查看 GitHub Actions 的完整设置。
- en: If you’re following along, create a new file called `staging.yml` inside the
    `.``github/workflows` folder.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在跟随，请创建一个名为 `staging.yml` 的新文件，位于 `.github/workflows` 文件夹内。
- en: It’s important to note that the name of the folders must be exactly the same
    for GitHub Actions to pick the configuration up when pushing to your repository.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的一点是，文件夹的名称必须完全相同，GitHub Actions 才能在您向仓库推送时选择配置。
- en: Pipeline for the staging environment
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预发布环境的管道
- en: 'Open the `staging.yml` file and add the following scripts to create a deployment
    pipeline for the staging environment:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `staging.yml` 文件，并添加以下脚本以创建预发布环境的部署管道：
- en: '[PRE4]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this section, we discussed in detail how to automate the process of deploying
    your enterprise applications. We learned about deployment pipelines and how to
    create one with GitHub Actions. In the next section, we will learn how to deploy
    our app to **AWS** (**Amazon Web Services**) production by automating the process
    using deployment pipelines.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了如何自动化部署企业应用程序的过程。我们学习了部署管道以及如何使用 GitHub Actions 创建一个。在下一节中，我们将学习如何通过自动化部署管道的过程将我们的应用程序部署到
    **AWS**（**亚马逊网络服务**）生产环境。
- en: Deploying to AWS
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到 AWS
- en: In this section, we are going to implement continuous deployment for the Vue.js
    3 application with GitHub Actions and AWS App Runner.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 GitHub Actions 和 AWS App Runner 实现对 Vue.js 3 应用程序的持续部署。
- en: This process can be triggered manually after thoroughly checking the staging
    application to make sure it satisfies all requirements before pushing it to production.
    However, it can also be automated to happen immediately after the staging is completed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序推送到生产之前，经过彻底检查预发布应用程序以确保其满足所有要求后，此过程可以手动触发。然而，它也可以自动化，以便在预发布完成后立即发生。
- en: In this demo, we are going to create the deployment pipeline for deploying to
    the AWS production server using AWS App Runner and also automate the process at
    once.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本演示中，我们将创建部署管道以使用 AWS App Runner 将应用程序部署到 AWS 生产服务器，并立即自动化该过程。
- en: Important note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It’s advisable to trigger the deployment process manually, which gives room
    to manually check all the requirements on the staging environment before deploying
    a new release to production.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 建议手动触发部署过程，这样在将新版本部署到生产环境之前，可以手动检查所有在预发布环境中的要求。
- en: To deploy to AWS, you will need an AWS account and an AWS IAM account with proper
    permissions. In this section, we explored how to create pipelines and deploy our
    project to AWS. In the next section, we will continue deploying our project using
    Docker and the Dockerfile we created in the previous chapters.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署到 AWS，您需要一个 AWS 账户和一个具有适当权限的 AWS IAM 账户。在本节中，我们探讨了如何创建管道并将我们的项目部署到 AWS。在下一节中，我们将继续使用
    Docker 和上一章中创建的 Dockerfile 部署我们的项目。
- en: Using Docker
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Docker
- en: In [*Chapter 7*](B17237_07.xhtml#_idTextAnchor230)*, Dockerizing a Vue 3 App*
    we discussed the nitty-gritty involved in Dockerizing your Vue.js 3 project. In
    addition, we learned about the best practices and industry standards to Dockerize
    and deploy an enterprise Vue.js 3 web application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 7 章*](B17237_07.xhtml#_idTextAnchor230)*，Docker 化 Vue 3 应用程序* 中，我们讨论了
    Docker 化 Vue.js 3 项目时涉及的细节。此外，我们还学习了 Docker 化和部署企业级 Vue.js 3 网络应用程序的最佳实践和行业标准。
- en: We will use the Dockerfile we created for this project so that we can run it
    on AWS infrastructure as a containerized application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用为该项目创建的 Dockerfile，这样我们就可以将其作为容器化应用程序在 AWS 基础设施上运行。
- en: 'Update the Dockerfile we created before with the following code snippet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 更新我们之前创建的 Dockerfile，使用以下代码片段：
- en: '[PRE5]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is the same Dockerfile we used in the previous chapter to Dockerize our
    project. You can refer back to the chapter to learn more about Dockerizing your
    Vue.js 3 application.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们上一章中用来将我们的项目 Docker 化的相同 Dockerfile。您可以参考该章节了解如何将 Vue.js 3 应用程序 Docker 化的更多信息。
- en: The base image will be `nginx:stable-alpine` and the application will be listening
    on port `80`. For step-by-step Dockerizing guidelines, please refer to the official
    documentation from Vue.js at [https://v2.vuejs.org/v2/cookbook/dockerize-vuejs-app.html?redirect=true](https://v2.vuejs.org/v2/cookbook/dockerize-vuejs-app.html?redirect=true).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 基础镜像将是 `nginx:stable-alpine`，应用程序将监听端口 `80`。有关逐步 Docker 化指南，请参阅 Vue.js 的官方文档，链接为
    [https://v2.vuejs.org/v2/cookbook/dockerize-vuejs-app.html?redirect=true](https://v2.vuejs.org/v2/cookbook/dockerize-vuejs-app.html?redirect=true)。
- en: 'You can test the application container using the following Docker Compose command
    since we have already defined the `docker-compose.yml` file in [*Chapter 7*](B17237_07.xhtml#_idTextAnchor230)*,
    Dockerizing a Vue* *3 App*:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经定义了 `docker-compose.yml` 文件，您可以使用以下 Docker Compose 命令测试应用程序容器（[*第 7 章*](B17237_07.xhtml#_idTextAnchor230)*，Docker
    化 Vue 3 应用程序）：
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After running the application container successfully, you should be able to
    access the dashboard via the same address as the `npm run dev` command. Next,
    let’s provision AWS resources.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 成功运行应用程序容器后，您应该能够通过与 `npm run dev` 命令相同的地址访问仪表板。接下来，让我们配置 AWS 资源。
- en: Provisioning AWS resources
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 AWS 资源
- en: We will use GitHub Actions to deploy our Vue.js 3 application to AWS continuously,
    so we need to create an IAM account and a user-managed role on AWS, which will
    be used in the next steps.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 GitHub Actions 将我们的 Vue.js 3 应用程序持续部署到 AWS，因此我们需要在 AWS 上创建一个 IAM 账户和一个用户管理的角色，这些将在下一步中使用。
- en: Creating an IAM account
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 IAM 账户
- en: This IAM account will be used by GitHub Actions agents. Access the console at
    [https://us-east-1.console.aws.amazon.com/iamv2/home#/home](https://us-east-1.console.aws.amazon.com/iamv2/home#/home)
    and create an IAM account and a user-managed role on AWS.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此 IAM 账户将由 GitHub Actions 代理使用。访问控制台 [https://us-east-1.console.aws.amazon.com/iamv2/home#/home](https://us-east-1.console.aws.amazon.com/iamv2/home#/home)
    并在 AWS 上创建一个 IAM 账户和一个用户管理的角色。
- en: '![Figure 12.4 – Creating a new user in IAM for GitHub Actions](img/Figure_12.04_B17237.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4 – 在 IAM 中为 GitHub Actions 创建新用户](img/Figure_12.04_B17237.jpg)'
- en: Figure 12.4 – Creating a new user in IAM for GitHub Actions
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – 在 IAM 中为 GitHub Actions 创建新用户
- en: 'Click on the **Next: Permissions** option and click the **Create User** button.
    Lastly, click on **Download.csv** to download the credential for the new user
    and save it somewhere—we will need to use it soon.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **下一步：权限** 选项，然后点击 **创建用户** 按钮。最后，点击 **下载.csv** 下载新用户的凭证并将其保存在某处——我们很快就会用到它。
- en: Creating a role for the IAM user
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 IAM 用户创建角色
- en: In this demonstration, we will be making a new role called `app-runner-service-role`
    and attaching the `AWSAppRunnerServicePolicyForECRAccess` policy. This role will
    be used by AWS App Runner services to give them access to Elastic Container Register
    (ECR) in order to manage our Docker image.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本演示中，我们将创建一个名为 `app-runner-service-role` 的新角色，并附加 `AWSAppRunnerServicePolicyForECRAccess`
    策略。此角色将由 AWS App Runner 服务使用，以便它们能够访问弹性容器注册（ECR）以管理我们的 Docker 镜像。
- en: 'To create a service role, follow these steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建服务角色，请按照以下步骤操作：
- en: Click on the **Role** menu.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **角色** 菜单。
- en: 'Click on the **Create Role** button, select the **Custom Trusted Policy** option,
    and enter the following JSON:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建角色** 按钮，选择 **自定义可信策略** 选项，并输入以下 JSON：
- en: '[PRE7]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code snippet is a JSON file that is used to create a custom trusted policy
    for deploying to Amazon **Elastic Container** **Service** (**ECS**).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段是一个 JSON 文件，用于创建用于部署到亚马逊 **弹性容器服务**（**ECS**）的自定义可信策略。
- en: After successfully creating `app-runner-service-role`, as shown in the following
    figure, make sure to copy and note the Amazon Resourse Name (ARN), as it will
    be used later.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功创建 `app-runner-service-role` 后，如图所示，请确保复制并记录亚马逊资源名称（ARN），因为它将在以后使用。
- en: '![Figure 12.5 – Creating app-runner-service-role](img/Figure_12.05_B17237.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 创建 app-runner-service-role](img/Figure_12.05_B17237.jpg)'
- en: Figure 12.5 – Creating app-runner-service-role
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 创建 app-runner-service-role
- en: In this section, we worked through the step-by-step process of creating `app-runner-service-role`
    and the Amazon IAM permission for ECS deployment. In the next section, we will
    be creating a policy for the IAM user.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们逐步完成了创建 `app-runner-service-role` 和亚马逊 IAM 为 ECS 部署的权限的过程。在下一节中，我们将创建
    IAM 用户的策略。
- en: Creating a policy for the IAM user
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 IAM 用户创建策略
- en: 'Navigate to the `github-vue-pinterest-demo` IAM permission and attach the following
    inline policy, which will grant permission to GitHub Actions (via the IAM role)
    to work with ECR and App Runner:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 `github-vue-pinterest-demo` IAM 权限，并附加以下内联策略，这将授予 GitHub Actions（通过 IAM
    角色）与 ECR 和 App Runner 一起工作的权限：
- en: '[PRE8]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By updating the IAM policy to be more specific (i.e., ARN-specific instead of
    wildcard), the security concerns associated with the preceding JSON can be addressed
    by creating a policy and attaching it to the IAM user.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新 IAM 策略使其更具体（即，ARN 特定而不是通配符），可以通过创建策略并将其附加到 IAM 用户来解决与前面 JSON 相关的安全问题。
- en: Creating an ECR private repository
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 ECR 私有仓库
- en: We’re almost there; one final step is to create a private repository on ECR
    to manage our Docker images. Add a repository name of your choice into the box
    provided, and click on the **Create** button, leaving the remaining options as
    their defaults.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了；最后一步是在 ECR 上创建一个私有仓库来管理我们的 Docker 镜像。在提供的框中添加您选择的仓库名称，然后点击 **创建** 按钮，保留其余选项为默认值。
- en: '![Figure 12.6 – Creating a private repository named vue-pinterest-demo](img/Figure_12.06_B17237.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 创建名为 vue-pinterest-demo 的私有仓库](img/Figure_12.06_B17237.jpg)'
- en: Figure 12.6 – Creating a private repository named vue-pinterest-demo
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 创建名为 vue-pinterest-demo 的私有仓库
- en: After creating your ECR instance, head over to your GitHub repository and add
    all the secrets and environment variables needed to deploy your application.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建您的 ECR 实例后，前往您的 GitHub 仓库并添加部署应用程序所需的所有密钥和环境变量。
- en: In this section, we created the ECR instance and added our secrets to our GitHub
    repository, along with all the environment variables needed. In the next section,
    we will look at how to work with GitHub Actions to automate the deployment process.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了 ECR 实例并将我们的密钥添加到我们的 GitHub 仓库，以及所有所需的环境变量。在下一节中，我们将探讨如何使用 GitHub
    Actions 自动化部署过程。
- en: Working with GitHub Actions
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions
- en: 'In this section, we will be working with GitHub Actions and automating the
    process of deploying your application to Amazon ECR. We will start by adding the
    Amazon secrets to our GitHub repository. Follow these steps to add your secrets:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 GitHub Actions 自动化将应用程序部署到亚马逊 ECR 的过程。我们首先将添加亚马逊密钥到我们的 GitHub 仓库。按照以下步骤添加您的密钥：
- en: Go to **Settings** | **Secrets** | **Actions** in your GitHub repository and
    add all the necessary secret variables.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 GitHub 仓库中，转到 **设置** | **密钥** | **操作** 并添加所有必要的密钥变量。
- en: Open the `new_user_credentials.csv` file you downloaded when you created the
    IAM user.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您在创建 IAM 用户时下载的 `new_user_credentials.csv` 文件。
- en: Copy the values for **AWS_ACCESS_KEY_ID** and **AWS_SECRET_ACCESS_KEY** and
    paste them into your GitHub Secrets as your environment variable.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**AWS_ACCESS_KEY_ID**和**AWS_SECRET_ACCESS_KEY**的值，并将它们粘贴到你的GitHub Secrets中作为环境变量。
- en: Additionally, you can use `us-east-1 for AWS_REGION` and your ARN of `app-runner-service-role`
    for `ROLE_ARN`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，你可以使用`us-east-1 for AWS_REGION`和你的`app-runner-service-role`的ARN作为`ROLE_ARN`。
- en: After adding your credentials successfully, in the next section, we will create
    a pipeline for deploying the enterprise project to AWS App Runner using ECR to
    manage our Docker images.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功添加你的凭证后，在下一节中，我们将创建一个流水线，用于将企业项目部署到AWS App Runner，并使用ECR来管理我们的Docker镜像。
- en: Pipeline for the production environment
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产环境流水线
- en: 'Open the `production.yml` file and add the following scripts to create a deployment
    pipeline for the production environment:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`production.yml`文件，并添加以下脚本以创建生产环境的部署流水线：
- en: '[PRE9]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If everything is successful, navigate to the App Runner service console; there
    will be a service with the name you specified. You can click on the default domain
    name to preview your application or set up a custom domain name.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，导航到App Runner服务控制台；将会有一个名为你指定的服务。你可以点击默认域名来预览你的应用或设置自定义域名。
- en: "![Figure 12.\uFEFF7 – Preview of the Pinterest demo application](img/Figure_12.07_B17237.jpg)"
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – Pinterest演示应用的预览](img/Figure_12.07_B17237.jpg)'
- en: Figure 12.7 – Preview of the Pinterest demo application
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – Pinterest演示应用的预览
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to deploy Vue.js 3 projects to the AWS cloud
    and some of the best practices for deploying to AWS. We explored continuous integration
    and continuous delivery by exploring deployment pipelines, showing the different
    deployment staging, and how to configure each of them to perform specific jobs.
    We also examined how each stage performs and how to deploy to a staging environment.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将Vue.js 3项目部署到AWS云，以及部署到AWS的一些最佳实践。我们通过探索部署流水线、展示不同的部署阶段以及如何配置每个阶段以执行特定任务，探讨了持续集成和持续交付。我们还检查了每个阶段的表现以及如何部署到预发布环境。
- en: Additionally, we explored different deployment options and how to deploy using
    Docker with Amazon ECR. We learned practically how to create an account and set
    up Amazon ECR with Docker and finally, we implemented automated deployment using
    CI/CD, Docker, Amazon ECR, and GitHub Actions.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还探讨了不同的部署选项以及如何使用Amazon ECR和Docker进行部署。我们通过实际操作学习了如何创建账户并设置Amazon ECR与Docker，最后，我们实现了使用CI/CD、Docker、Amazon
    ECR和GitHub Actions的自动化部署。
- en: In the next chapter, we will explore the definitive guide to Nuxt.js. You will
    learn the nitty-gritty of Nuxt.js and how to build and deliver enterprise SSR
    projects with Vue.js 3\. We will explore the definitive guide to Gridsome, and
    you will learn the nitty-gritty of Gridsome and how to build and deliver enterprise
    CSR projects with Vue.js 3.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Nuxt.js的 definitive guide。你将学习Nuxt.js的细节以及如何使用Vue.js 3构建和交付企业级SSR项目。我们还将探讨Gridsome的
    definitive guide，你将学习Gridsome的细节以及如何使用Vue.js 3构建和交付企业级CSR项目。
