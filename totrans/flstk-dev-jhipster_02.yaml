- en: Getting Started with JHipster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JHipster is a development platform that helps you go from zero to hero! JHipster
    can help you to create beautiful web applications and complex microservice architectures
    in a jiffy. JHipster also offers various tools to develop the application further
    using business entities, and deploy it to various cloud services and platforms.
    At its core, JHipster is a Yeoman generator that creates Spring Boot and Angular/React
    based applications. It can create monolithic architecture as well as microservice
    architecture with every feature working out-of-the-box.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why use JHipster and how it helps compared to traditional development approaches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the goal of JHipster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The various server-side and client-side technology options available in JHipster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparation of a development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of JHipster and required dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yeoman ([http://yeoman.io](http://yeoman.io)) is a scaffolding tool that helps
    you to create code generators. You can use it to create any kind of application
    generator with the help of the built-in template engine and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Why JHipster?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are wondering why you should be using JHipster, then just imagine the
    following scenario. You are tasked to build a web application, let us say a blog
    with an Angular frontend and a Java backend, with features for users to create
    blog posts and be able to display blog posts based on user permissions. You are
    also asked to build administrative modules such as user management, monitoring,
    and so on. Finally, you have to test and deploy the application to a cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are approaching this challenge the traditional way you will most probably
    be doing the following steps. Let''s skip the details for simplicity. So, the
    steps would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Design an architecture stack and decide on various libraries to use (let's say
    you choose Spring Framework for the backend, with Spring Security and Spring MVC)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an application base with all the technologies wired together (for example,
    you will have to make sure the authentication flow between the Angular client
    side and Spring Security is wired properly)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a build system for the application (let's say you used webpack to build
    the Angular client side and Gradle to build the server side)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write integration tests and unit tests for the base
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create administrative modules
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design business entities and create them with the Angular client side and Java
    server side with test coverage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write all the business logic, test the application, and deploy it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While this approach definitely works, for this simple application you would
    have spent anywhere between four to six weeks depending on the team size. Now,
    more than 70% of the effort would have been spent on writing boilerplate code
    and making sure all the libraries work well together. Now, would you believe me
    if I say that you could develop, test, and deploy this application in less than
    30 minutes using JHipster? Yes, you can, while still getting high-quality production
    grade code with lots of extra bells and whistles. We will see this in action in
    our next chapter where we will build a real-world application using JHipster.
  prefs: []
  type: TYPE_NORMAL
- en: Goal and adoption of JHipster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The goal of JHipster is to provide developers a platform where you can focus
    on your business logic rather than worrying about wiring different technologies
    together, and also that provides a great developer experience. Of course, you
    can use available boilerplate within your organization or from the internet and
    try to wire them up together, but then you will be wasting a lot of time re-inventing
    the wheel. With JHipster, you will create a modern web application or microservice
    architecture with all the required technologies wired together and working out-of-the-box,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A robust and high-performance Spring Framework-based Java stack on the backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rich mobile-first frontend with Angular or React supported by Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A battle-tested microservice architecture unifying Netflix OSS, Elastic stack,
    and Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A great tooling and development workflow using Maven/Gradle, webpack, and Yarn/NPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out-of-the-box continuous integration using Jenkins, Travis, or GitLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excellent Docker support and support for orchestration tools such as Kubernetes,
    Rancher, and Openshift out-of-the-box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out-of-the-box support for various cloud deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Above all, great code with lots of best practices and industry standards at
    your fingertips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netflix OSS ([https://netflix.github.io](https://netflix.github.io)) is a collection
    of open source tools and software produced by the NETFLIX, INC team geared toward
    microservice architecture. Elastic stack ([https://www.elastic.co/products](https://www.elastic.co/products))(formerly
    known as ELK stack) is a collection of software tools, which help in monitoring
    and analytics of microservices developed by the Elasticsearch ([https://www.elastic.co](https://www.elastic.co))
    team.
  prefs: []
  type: TYPE_NORMAL
- en: JHipster has been steadily increasing in popularity as Spring Boot and Angular
    gained momentum, and lots of developers have started to adopt them as the de facto
    frameworks for web development. As per official statistics at the time of writing
    (beginning of 2018), there are more than 5,000 applications generated per month
    and JHipster was installed around  1 million times. It has more than 400 contributors
    with official contributions from Google, RedHat, Heroku, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to technologies available
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JHipster supports an incredible number of modern web application technologies
    out of the box. Some of them are used as the base or core of the generated application
    while some technologies are opt-in via choices made during application generation.
    Let us see the different technologies supported mainly for monolithic applications
    in brief:'
  prefs: []
  type: TYPE_NORMAL
- en: Client-side technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many more technologies supported and we will look at them in later
    chapters when we touch upon microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The role of client-side technologies in full-stack development has grown from
    just using JavaScript for client-side validations, to writing full-blown, single
    page applications using client-side MVVM frameworks. The frameworks and toolchains
    used have become complex and overwhelming for developers who are new to the client-side
    landscape. Fortunately for us, JHipster provides support for most of the following,
    widely used, client-side technologies. Let us take a brief look and get familiar
    with the important tools and technologies that we will use. No need to worry if
    it is overwhelming, we will take a deeper look at some of the more important ones
    during the course of the book.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 and CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web technologies, especially HTML and CSS, have undergone major updates and
    are becoming better day by day due to excellent support in modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 ([https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5))
    is the latest of the **HTML** (**HyperText Markup Language**) standard, which introduces
    new elements, attributes, and behaviors. The term is used to collectively refer
    to all the HTML technologies used to build modern web applications. This iteration
    introduced support for features such as offline storage, WebSockets, web workers,
    WebGL, and more. JHipster also uses best practices from the HTML5 Boilerplate
    ([https://html5boilerplate.com](https://html5boilerplate.com)).
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML5 Boilerplate** is a collection of modern technologies, default settings,
    and best practices that kick-start modern web development faster.'
  prefs: []
  type: TYPE_NORMAL
- en: CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 ([https://developer.mozilla.org/en-US/docs/Web/CSS/CSS3](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS3))
    is the latest of the **Cascading Style Sheets** (CSS) specification. It adds support
    for media query, animations, flexbox, round corners, and a lot more. CSS3 makes
    it possible to natively animate elements, apply special effects, apply filters,
    and so on to get rid of the many JavaScript hacks that were used earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Flexible Box, or flexbox, is a layout mode ([https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_mode](https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_mode)) that
    can be used instead of the box model used traditionally. This allows having a
    flexible box model making responsive layouts easier to handle without floats and
    margin collapse issues.
  prefs: []
  type: TYPE_NORMAL
- en: Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Syntactically awesome style sheets** (**Sass**) ([http://sass-lang.com](http://sass-lang.com))
    is a CSS extension language. It is preprocessed and converted to CSS during compile
    time. It has similar semantics to CSS and is 100% compatible with all versions
    of CSS. It additionally supports advanced features such as nested syntax, variables,
    mixins, inheritance, partials, and so on. Sass makes it possible to reuse CSS
    and to write maintainable style sheets.'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap ([https://getbootstrap.com](https://getbootstrap.com)) is a responsive
    UI framework for modern web development. It offers a mobile-first approach for
    web development with utilities and UI components that are fully responsive. Bootstrap
    4 is the latest version, uses flexbox for layout, and is completely written in
    Sass, which makes it easier to customize. Bootstrap supports a 12-column grid
    framework, which lets you build responsive web pages with ease. JHipster uses
    ng-bootstrap ([https://ng-bootstrap.github.io](https://ng-bootstrap.github.io))
    so that pure Angular components are used instead of the ones provided by Bootstrap,
    which are built using JQuery, and Bootstrap is used only for styling.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile first web development is an approach where the UX/UI is designed for
    smaller screen sizes first thus forcing you to focus on the most important data/elements
    to be presented. This design is then gradually enhanced for bigger screen sizes
    making the end result responsive and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: MVVM framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Model-View-View-Model** (**MVVM**) is an architectural pattern originally
    developed by Microsoft. It helps to abstract or separate the client side (GUI)
    development from the server side (data model). The view model is an abstraction
    of the View and represents the state of data in the Model. With JHipster, you
    can choose between Angular and React as the client-side framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AngularJS ([https://angularjs.org](https://angularjs.org))(version 1.x) is a
    client-side MVVM framework, maintained by Google, which helps to develop **Single
    Page Applications **(**SPA**). It is based on a declarative programming model
    and it extends standard HTML with the ability to add additional behavior, elements,
    and attributes through directives.
  prefs: []
  type: TYPE_NORMAL
- en: Angular ([https://angular.io](https://angular.io))(version 2 and above) is a
    complete rewrite of the framework and hence is not backward compatible with AngularJS.
    Angular is written in TypeScript and recommends the use of TypeScript to write
    Angular applications as well. Angular removed some of the concepts that were used
    in AngularJS such as scope, controller, factory, and so on. It also has a different
    syntax for binding attributes and events. Another major difference is that the
    Angular library is modular and hence you can choose the modules that you need,
    to reduce bundle size. Angular also introduced advanced concepts such as **AOT **(**Ahead
    of Time Compilation**), lazy loading, reactive programming, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript is a superset of ECMAScript 6 (ES6 - version 6 of JavaScript) and
    is backward compatible with ES5\. It has additional features such as static typing,
    generics, class attribute visibility modifiers, and so on. Since TypeScript is
    a superset of ES6, we can also use ES6 features ([http://es6-features.org](http://es6-features.org))
    such as modules, lambdas (arrow functions), generators, iterators, string templates,
    reflection, spread operators, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React ([https://reactjs.org](https://reactjs.org)) is not a full-fledged MVVM
    framework. It is a JavaScript library for building client-side views or user interfaces.
    It is developed and backed by Facebook and has a vibrant community and ecosystem
    behind it. React follows an HTML in JS approach and has a special format called
    **JSX** to help us write React components. Unlike Angular, React doesn't have
    too many concepts or APIs to learn and hence is easier to start with, but React
    only cares about rendering the UI and hence to get similar functionality offered
    by Angular, we would have to pair React with other libraries like React Router
    ([https://reacttraining.com/react-router](https://reacttraining.com/react-router)),
    Redux ([https://redux.js.org](https://redux.js.org)), MobX ([https://mobx.js.org](https://mobx.js.org)),
    and so on. JHipster uses React along with Redux and React Router and similar to
    Angular, JHipster uses TypeScript for React as well. But this is optional as React
    can be written using JavaScript as well, preferably ES6 ([http://es6-features.org](http://es6-features.org)).
    React is fast to render due to its use of a virtual DOM ([https://reactjs.org/docs/faq-internals.html](https://reactjs.org/docs/faq-internals.html))
    to manipulate a view instead of using the actual browser DOM.
  prefs: []
  type: TYPE_NORMAL
- en: If you are starting a new project, it is best to choose either Angular or React as
    they are well maintained. However, with older versions of JHipster, AngularJS
    1.x was also offered as an option but it is becoming legacy and will soon be discontinued
    in JHipster 5.x. JHipster will provide an official blueprint for those who are
    still interested in using AngularJS 1.x. Just run the command `jhipster --blueprint
    generator-jhipster-angularjs` to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Build tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The client side has evolved a lot and become as complex as the server side,
    hence it requires a lot more tools in your toolbelt to produce optimized results.
    You would need a build tool to transpile, minimize, and optimize your HTML, JavaScript,
    and CSS code. One of the most popular is Webpack. JHipster uses Webpack for Angular
    and React.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack ([https://webpack.js.org](https://webpack.js.org)) is a module bundler
    with a very flexible loader/plugin system. Webpack walks through the dependency
    graph and passes it through the configured loaders and plugins. With Webpack,
    you can transpile TypeScript to JavaScript, minimize, and optimize CSS and JS,
    compile Sass, revision, hash your assets, and so on. Webpack can remove dead code
    in a process called **tree shaking**, thus reducing bundle size. Webpack is configured
    using a configuration file and can be run from the command line or via NPM/YARN
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: BrowserSync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BrowserSync ([https://browsersync.io](https://browsersync.io))is a NodeJS tool
    that helps in browser testing by synchronizing file changes and interactions of
    the web page across multiple browsers and devices. It provides features such as
    auto-reload on file changes, synchronized UI interactions, scrolling, and so on.
    It integrates with Webpack/GulpJS to provide a productive development setup. It
    makes testing a web page on multiple browsers and devices super easy.
  prefs: []
  type: TYPE_NORMAL
- en: Testing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gone are the days when the client-side code didn't require unit testing. With
    the evolution of client-side frameworks, the testing possibilities also improved.
    There are many frameworks and tools available for unit testing, end-to-end testing,
    and so on. JHipster creates unit tests for client-side code using Karma and Jasmine
    out-of-the-box and also supports creating end-to-end tests using Protractor.
  prefs: []
  type: TYPE_NORMAL
- en: Karma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Karma ([https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html))
    is a test runner that can execute JavaScript code in real browsers. It creates
    a web server and executes the test code against the source code. Karma supports
    multiple testing frameworks such as Jasmine, Mocha, and Qunit, and integrates
    well with continuous integration tools.
  prefs: []
  type: TYPE_NORMAL
- en: Protractor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protractor ([http://www.protractortest.org](http://www.protractortest.org))
    is an end-to-end testing framework developed by the Angular team. It was originally
    intended for Angular and AngularJS applications but it is flexible enough to be
    used with any framework, such as React, JQuery, VueJS, and so on. Protractor runs
    e2e tests against real browsers using the Selenium web driver API.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internationalization (i18n) is a very important feature these days and JHipster
    supports this out-of-the-box. Multiple languages can be chosen during application
    creation. On the client side, this is achieved by storing GUI text in JSON files
    per language and using an Angular/React library to dynamically load this based
    on the language selected at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Do you know why internationalization is abbreviated as i18n? Because there are
    18 characters between I and N. There are other similarly named abbreviations in
    web technology, for example, Accessibility(a11y), Localization (l10n), Globalization
    (g11n), and Localizability (l12y).
  prefs: []
  type: TYPE_NORMAL
- en: Server-side technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-side technologies in web development have evolved a lot, and with the
    rise of frameworks such as Spring and Play, the need for Java EE has reduced and
    opened doors for more feature-rich alternatives, such as Spring Boot, for example.
    Some of the core technologies such as Hibernate are here to stay, while newer
    concepts such as JWT, Liquibase, Swagger, Kafka, and WebSockets bring a lot of
    additional opportunities. Let us take a quick look at some of the important technologies
    supported by JHipster; we will encounter these later on in the book and will take
    a deeper look at some of these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Framework ([https://spring.io](https://spring.io)) might be the best
    thing since sliced bread in the Java world. It changed the Java web application
    landscape for the good. The landscape was monopolized by JavaEE vendors before
    the rise of Spring and soon after Spring, it became the number one choice for
    Java web developers, giving JavaEE a run for its money. At its core, Spring is
    an **Inversion of Control** (**IoC**) ([https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans))
    container providing dependency injection and application context. The main features
    of Spring or the Spring triangle, combine IoC, **Aspect-Oriented Programming **(**AOP**) ([https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop)),
    and technology abstractions together in a consistent way. The framework has numerous
    modules aimed at different tasks, such as data management, security, REST, web
    services, and so on. Spring Framework and its modules are free and open source.
    Let us see some of the important modules in a bit more detail.
  prefs: []
  type: TYPE_NORMAL
- en: IoC is a software design pattern where custom or task-specific code is invoked
    by a library, rather than the traditional procedural programming approach where
    custom code calls libraries when required. IoC helps to make the code more modular
    and extendable. AOP provides another way of thinking about program structure.
    The unit of modularity is the aspect that enables the modularization of concerns
    such as transaction management that cut across multiple types and objects.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot ([https://projects.spring.io/spring-boot](https://projects.spring.io/spring-boot))
    is a widely used solution these days for Java web application development. It
    has an opinionated convention over configuration approach. It is completely configuration
    driven and makes using Spring Framework and many other third-party libraries a
    pleasure. Spring Boot applications are production grade and can just *run* in
    any environment that has a JVM installed. It uses an embedded servlet container
    such as Tomcat, Jetty, or Undertow to run the application. It auto-configures
    Spring wherever possible and has starter POM for many modules and third-party
    libraries. It does not require any XML configuration and lets you customize autoconfigured
    beans using Java configuration.
  prefs: []
  type: TYPE_NORMAL
- en: JHipster by default uses Undertow as the embedded server in the applications
    generated. Undertow is very lightweight and faster to start, and is ideal for
    the development and production of lightweight applications.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Security ([https://projects.spring.io/spring-security](https://projects.spring.io/spring-security))
    is the de facto solution for security in a Spring Framework-based application.
    It provides API and utilities to manage all aspects of security, such as authentication
    and authorization. It supports a wide range of authentication mechanism such as
    OAuth2, JWT, Session (Web form), LDAP, **SSO** (**Single Sign-On**) servers, **JAAS**
    (**Java Authentication and Authorization Service**), Kerberos, and so on. It also
    has features such as remember me, concurrent session, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Spring MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring MVC ([https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html))
    is the default solution to work with the Servlet API within Spring applications.
    It is a request-based system and abstracts the Servlet API to make it easier to
    design controllers to serve HTTP requests. REST is the de facto standard for designing
    API endpoints these days and Spring MVC REST is a specific subset that makes it
    easier to design and implement RESTful services.
  prefs: []
  type: TYPE_NORMAL
- en: Spring data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring data ([http://projects.spring.io/spring-data](http://projects.spring.io/spring-data))
    is a module that abstracts data access operations for many different data access
    technologies and databases. It provides a consistent API to work seamlessly with
    different underlying implementations. This frees us from worrying about the underlying
    database and data access technology. It has powerful features such as dynamic
    query generation from method names, custom object mapping abstractions, and so
    on. Spring data supports working with JPA, MongoDB, Redis, and Elasticsearch to
    name a few. It also lets you export Spring data repositories as RESTful resources.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In modern web applications, there are multiple ways to implement authentication
    and authorization. Spring security supports a wide range of mechanisms, as we
    saw earlier, and JHipster provides support for the following standards.
  prefs: []
  type: TYPE_NORMAL
- en: JWT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JSON Web Token** (JWT) ([https://jwt.io](https://jwt.io)) is an open industry
    standard for security tokens. JWT authentication works by a server and client
    passing and verifying claims. A server generates a JWT token and passes it back
    to the client when user credentials are successfully validated. The client will
    store this token locally and use it to request protect resources from the server
    later by passing the token in the request header. This is a stateless authentication
    mechanism. This is explained in detail in [Chapter 9](49b2ec94-463c-415c-a2f5-0d4e6c2943b7.xhtml),
    *Building Microservices with JHipster*.'
  prefs: []
  type: TYPE_NORMAL
- en: Session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Session-based authentication is the traditional web form-based authentication
    mechanism where the server creates and maintains a session for the validated user
    credentials. This is stateful and normally is not very scalable unless you use
    a distributed HTTP session, which is possible using a distributed cache such as
    Hazelcast or using the session replication features of a dedicated web server
    or load balancer. JHipster adds a lot of features on top of the standard mechanism,
    such as secured tokens that are stored in DB, and can be invalidated, used in
    remember me mechanisms, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth2 ([https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth](https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth))
    is a protocol for stateless authentication and authorization. The protocol allows
    applications to obtain limited access to user accounts on services. User authentication
    is delegated to a service, typically an OAuth2 server. OAuth2 is more complicated
    to set up when compared to the previously mentioned mechanisms. JHipster supports
    setting up OAuth with **OpenID Connect** (OIDC) and can use Keycloak ([https://keycloak.org](https://keycloak.org))
    or Okta ([https://developer.okta.com/blog/2017/10/20/oidc-with-jhipster](https://developer.okta.com/blog/2017/10/20/oidc-with-jhipster))
    out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Build tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JHipster supports using either Maven or Gradle as the build tool for the server-side
    code. Both are free and open source.
  prefs: []
  type: TYPE_NORMAL
- en: Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven ([https://maven.apache.org](https://maven.apache.org)) is a build automation
    tool that uses an XML document called `pom.xml` to specify how an application
    is built and its dependencies. Plugins and dependencies are downloaded from a
    central server and cached locally. The Maven build file is called a **Project
    Object Model** (POM) and it describes the build process itself. Maven has a long
    history and is much more stable and reliable compared to Gradle. It also has a
    huge ecosystem of plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradle ([https://gradle.org](https://gradle.org)) is a build automation tool
    which uses a Groovy DSL to specify the build plan and dependencies. It is a strong
    contender rapidly gaining popularity and adoption. Gradle is much more flexible
    and feature-rich than Maven, making it an ideal choice for very complex build
    setups. The latest version of Gradle easily surpasses Maven in terms of speed
    and features. Another unique advantage of Gradle is the ability to write standard
    Groovy code in the build script, making it possible to do pretty much everything
    programmatically. It has great plugin support as well.
  prefs: []
  type: TYPE_NORMAL
- en: Hibernate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hibernate ([http://hibernate.org](http://hibernate.org)) is the most popular
    **ORM **(**Object Relational Mapping**) tool for Java. It helps to map an object-oriented
    domain model to a relational database scheme using Java annotations. It implements
    **JPA **(**Java Persistence API**) and is the go-to provider for a JPA implementation.
    Hibernate also offers many additional features such as entity auditing, bean validation,
    and so on. Hibernate automatically generates SQL queries depending on the underlying
    database semantics and makes it possible to switch the databases of an application
    very easily. It also makes the application database independent without any vendor
    lock-in. Hibernate is free and open source software.
  prefs: []
  type: TYPE_NORMAL
- en: Liquibase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Liquibase ([http://www.liquibase.org](http://www.liquibase.org)) is a free and
    open source version control tool for the database. It lets you track, manage,
    and apply database schema changes using configuration files without having to
    fiddle with SQL. It is database independent and goes well with JPA, making the
    application database independent. Liquibase can be run from within the application,
    making database setup and management seamless, and eliminate the need for a DBA
    for most DB management. Liquibase can also add/remove data to/from a database,
    making it good for migrations as well.
  prefs: []
  type: TYPE_NORMAL
- en: Caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caching is a good practice in software development and it improves the performance
    of read operations considerably. Caching can be enabled for Hibernate 2nd level
    cache, and also with Spring Cache abstraction to enable caching at the method
    level. JHipster supports JCache-compatible Hibernate 2nd level cache provided
    by EhCache, Hazelcast, and Infinispan.
  prefs: []
  type: TYPE_NORMAL
- en: Ehcache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ehcache ([http://www.ehcache.org](http://www.ehcache.org)) is an open source
    JCache provider and is one of the most widely used Java caching solutions. It
    is JCache compatible and is a good choice for applications that are not clustered.
    For clustered environments, additional Terracotta servers are required. It is
    stable, fast, and simple to set up.
  prefs: []
  type: TYPE_NORMAL
- en: Hazelcast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hazelcast ([https://hazelcast.org](https://hazelcast.org)) is an open source distributed in-memory
    data grid solution. It has excellent support for clustered applications and distributed
    environments and hence becomes a good choice for caching. While Hazelcast has
    numerous other features and use-cases, caching remains one of the important ones.
    It is highly scalable and a good option for microservices due to its distributed
    nature.
  prefs: []
  type: TYPE_NORMAL
- en: Infinispan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Infinispan ([http://infinispan.org](http://infinispan.org)) is a distributed
    cache and key-value store from Red Hat. It is free and open source. It supports
    clustered environments and is hence a good choice for microservices. It has more
    features such as in-memory data grids, MapReduce support, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Swagger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenAPI specification (previously known as **Swagger specification**) is an
    open standard for designing and consuming RESTful web services and API. The OpenAPI specification
    is a standard founded by a variety of companies including Google, Microsoft, and
    IBM. The Swagger ([https://swagger.io](https://swagger.io)) name is now used for
    the associated tooling. JHipster supports API-first development model with Swagger
    code-gen and also supports API visualization with Swagger UI.
  prefs: []
  type: TYPE_NORMAL
- en: Thymeleaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thymeleaf ([http://www.thymeleaf.org](http://www.thymeleaf.org)) is an open
    source Java server-side templating engine with very good integration with Spring.
    Thymeleaf can be used to generated web pages on the server side, for templating
    email messages and so on. Although server-side web page templates are slowly losing
    out to client-side MVVM frameworks, it is still a useful tool if one wants to
    have something more than a single page application using Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Dropwizard metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dropwizard metrics ([http://metrics.dropwizard.io/4.0.0/](http://metrics.dropwizard.io/4.0.0/))
    is an excellent open source library for measuring the performance of your Java
    web application. Paired with Spring Boot, this can bring a lot of value by measuring
    the performance of the REST API, measuring the performance of cache layer and
    database, and so on. Dropwizard provides handy annotations to mark methods to
    be monitored. It supports counters, timers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebSocket ([https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API))
    is a communication protocol that works on top of TCP. It provides a full-duplex
    communication channel over a single TCP connection. It was standardized by W3C
    ([https://www.w3.org](https://www.w3.org)). It is lightweight and enables real-time
    communication between a client and server. In terms of web applications, this
    enables the server to communicate with the client app in the browser without a
    request from the client. This opens the door to pushing data from server to client
    in real-time and for implementations such as real time chat, notifications, and
    so on. On the server side, JHipster relies on Spring, which provides the necessary
    support ([https://spring.io/guides/gs/messaging-stomp-websocket/](https://spring.io/guides/gs/messaging-stomp-websocket/))
    to work with WebSocket.
  prefs: []
  type: TYPE_NORMAL
- en: Kafka
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kafka ([https://kafka.apache.org](https://kafka.apache.org)) is an open source
    stream processing system. It has a distributed pub/sub-based message queue for
    storage. Its fault tolerance and scale has helped it to replace JMS and AMQP as
    the preferred messaging queue. Spring provides an abstraction on top of Kafka
    to make it easier to configure and work with Kafka.
  prefs: []
  type: TYPE_NORMAL
- en: JMS (Java Message Service) ([https://en.wikipedia.org/wiki/Java_Message_Service](https://en.wikipedia.org/wiki/Java_Message_Service))
    is a messaging standard developed for Java EE and enables sending and receiving
    asynchronous messages between components using topics and queues. AMQP(Advanced
    Message Queuing Protocol) ([https://www.amqp.org/](https://www.amqp.org/)) is
    an open standard protocol for message-oriented middleware, providing features
    such as queuing, routing, and publish-subscribe mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Testing frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-side testing can be mainly categorized into unit testing, integration
    testing, performance testing, and behavior testing. JHipster supports all of these
    with the following tools out of which JUnit comes out-of-the-box, and others are
    opt-in.
  prefs: []
  type: TYPE_NORMAL
- en: JUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JUnit ([https://junit.org/junit5/](https://junit.org/junit5/)) is the most widely
    used Java testing framework. It is a free and open source software. It was originally
    intended for unit testing but combined with Spring Test Framework ([https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-introduction](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing-introduction))
    it can also be used for Integration testing. JHipster creates unit tests and REST
    API integration tests using JUnit and Spring Test Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Gatling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gatling ([https://gatling.io/](https://gatling.io/)) is a free and open source
    performance and load testing tool. It is based on Scala and uses a Scala DSL to
    write test spec. It creates detailed reports of the load testing and it can be
    used to simulate all kinds of load on a system. It is a required tool for performance
    critical applications.
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cucumber ([https://cucumber.io/](https://cucumber.io/)) is a **Behavior-Driven
    Development** (**BDD**) testing framework used mainly for acceptance testing.
    It uses a language parser called **Gherkin**, which is very human readable as
    looks similar to plain English.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to database options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today, there are a wide variety of database options out there. These can be
    broadly classified into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: SQL databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can visit; [https://db-engines.com/en/ranking](https://db-engines.com/en/ranking)
    to see the popularity of different databases.
  prefs: []
  type: TYPE_NORMAL
- en: JHipster supports some of the most widely used databases, as detailed here.
  prefs: []
  type: TYPE_NORMAL
- en: SQL databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL databases or **Relational Database Management Systems** (**RDBMS**) are
    those that support a relational table-oriented data model. They support table
    schema defined by the fixed name and number of columns/attributes with a fixed
    data type. Each row in a table contains a value for every column. Tables can be
    related to each other.
  prefs: []
  type: TYPE_NORMAL
- en: H2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: H2 ([http://www.h2database.com/html/main.html](http://www.h2database.com/html/main.html))
    is a free embedded RDBMS commonly used for development and testing. It normally
    can run in file system mode for persistence or in-memory mode. It has a very small
    footprint and is extremely easy to configure and use. It doesn't have many of
    the enterprise features offered by other mainstream database engines and hence
    normally is not preferred for production usage.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL ([https://www.mysql.com/](https://www.mysql.com/)) is one of the most
    popular database engines and is free and open source software. It is from Oracle
    but also has a very vibrant community. It has enterprise-ready features such as
    sharding, replication, partitioning, and so on. It is one of the most preferred
    SQL databases these days.
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MariaDB ([https://mariadb.org/](https://mariadb.org/)) is a MySQL compliant
    database engine with an additional focus on security, performance, and high availability.
    It is gaining popularity and is sought as a good alternative for MySQL. It is
    free and open source software.
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PostgreSQL ([https://www.postgresql.org/](https://www.postgresql.org/)) is another
    free and open source database system that is very much in demand. It is actively maintained
    by a community. One of the unique features of PostgreSQL is the advanced JSON
    object storage with the capability to index and query within the JSON. This makes
    it possible to use it as a NoSQL database or in Hybrid mode. It also has enterprise-ready
    features such as replication, high availability, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: MS SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MS SQL server ([https://www.microsoft.com/nl-nl/sql-server/sql-server-2017](https://www.microsoft.com/nl-nl/sql-server/sql-server-2017))
    is an enterprise database system developed and supported by Microsoft. It is commercial
    software and requires a paid license to use. It has enterprise-ready features
    and premium support from Microsoft. It is one of the popular choices for mission-critical
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Oracle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle ([https://www.oracle.com/database/index.html](https://www.oracle.com/database/index.html))
    is the most used database due to its legacy and enterprise features. It is commercial
    software and requires a paid license to use. It has enterprise-ready features
    such as sharding, replication, high availability, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a wide umbrella that encompasses any database that is not an RDBMS.
    This includes document stores, wide column stores, search engines, key-value stores,
    graph DBMS, content stores, and so on. A general trait of such databases is that
    they can be schema-less and do not rely on relational data.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB ([https://www.mongodb.com/](https://www.mongodb.com/)) is a cross-platform
    document store and is one of the most popular choices for NoSQL databases. It
    has a proprietary JSON-based API and query language. It supports MapReduce and
    enterprise features such as sharding, replication, and so on. It is free and open
    source software.
  prefs: []
  type: TYPE_NORMAL
- en: MapReduceis a data processing paradigm where a job is split into multiple parallel
    map tasks, with the produced output sorted and reduced into the result. This makes
    processing large datasets efficient and faster.
  prefs: []
  type: TYPE_NORMAL
- en: Cassandra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Cassandra ([http://cassandra.apache.org/](http://cassandra.apache.org/))
    is distributed column store with a focus on high availability, scalability, and
    performance. Due to its distributed nature, it doesn't have a single point of
    failure making it is the most popular choice for critical high availability systems.
    It was originally developed and open sourced by Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Did you know that Cassandra can have up to 2 billion columns per row?
  prefs: []
  type: TYPE_NORMAL
- en: Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elasticsearch ([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch))
    is a search and analytics engine based on Apache Lucene ([http://lucene.apache.org/](http://lucene.apache.org/)). It
    is technically a NoSQL database but it is primarily used as a search engine due
    to its indexing capability and high performance. It can be distributed and multi-tenant
    with full-text search capability. It has a web interface and JSON documents. It
    is one of the most used search engines.
  prefs: []
  type: TYPE_NORMAL
- en: Installation and setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with JHipster, you will have to install the JHipster CLI tool.
    The JHipster CLI comes with commands required to use all of the features offered
    by the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'JHipster Online: If you would like to create an application without installing
    anything, you can do so by visiting [https://start.jhipster.tech](https://start.jhipster.tech).
    You can authorize the application to generate a project directly in your GitHub
    account or you can download the source as a ZIP file.'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we install the JHipster CLI, let's take a look at the prerequisites.
    We will need to install some dependencies and configure our favorite IDE to work
    best with generated code. You can visit [http://www.jhipster.tech/installation/](http://www.jhipster.tech/installation/) to
    get up to date information about this.
  prefs: []
  type: TYPE_NORMAL
- en: Tools required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following are the tools required to install JHipster and to work with the
    generated applications. If you do not have them installed already follow, these
    steps and install them.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to use a command-line interface (Command Prompt or Terminal application)
    throughout this section and hence it is better to have one open. Since the installation
    of some of the following tools will alter the environment variables, you might
    have to close and reopen the Terminal after the installation of a tool:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, use the default **Command Prompt** (**CMD**) or Powershell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux, use Bash or your favorite Terminal emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On macOS, use iTerm or your favorite Terminal application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation procedure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us see the installation procedure for each of the tools.
  prefs: []
  type: TYPE_NORMAL
- en: Java 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 9 is the latest Java release introducing features like modules, reactive
    streams and so on. While JHipster applications will work with Java 9 it is recommended
    to stick to the more stable Java 8 until Java 9 support is stable in all the dependencies
    used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The generated applications use Java 8 and hence it is required to compile the applications:'
  prefs: []
  type: TYPE_NORMAL
- en: Check for your installed Java version by running the command `java -version` in
    the Terminal. It should display `java version "1.8.x"` where x could be any patch
    version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you do not have the correct version installed, you can visit the Oracle website
    ([http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html))
    and follow the instructions to install the JDK for Java 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, check the command in step 1 again to make sure. As the JDK alters
    the environment variable to set `JAVA_HOME` you would have to open a new Terminal
    here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is the most used version control system for source code management. It promotes
    distributed revision control and is an integral part of development these days.
  prefs: []
  type: TYPE_NORMAL
- en: 'JHipster uses Git for upgrading applications and Git is also recommended for
    the smooth working of NodeJS and NPM ecosystems:'
  prefs: []
  type: TYPE_NORMAL
- en: Check for Git by running `git --version` in the Terminal. It should display `git
    version x.x.x`; the version number can be anything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the command is not found, you can visit git-scm ([https://git-scm.com/downloads](https://git-scm.com/downloads))
    and follow the instructions to install Git on your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, check the command in step 1 again to make sure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is a JavaScript runtime environment. It revolutionized the JavaScript
    world and made JavaScript the most popular development language among developers
    today (according to [https://insights.stackoverflow.com/survey/2017#technology-programming-languages](https://insights.stackoverflow.com/survey/2017#technology-programming-languages)).
    The Node ecosystem is the largest in the world with over 600,000 packages and
    is managed by NPM, the default package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JHipster CLI is a NodeJS application and hence requires NodeJS, to run,
    and many of the tools used in the generated application will also require NodeJS:'
  prefs: []
  type: TYPE_NORMAL
- en: Check for NodeJS by typing `node -v` in the Terminal. It should display a version
    number. Make sure that the version number is greater than 8.9 and corresponds
    to the latest LTS version of NodeJS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the command is not found or if you have a lower version of NodeJS then you
    can visit the Node.js website ([https://nodejs.org/en/download/](https://nodejs.org/en/download/)) and
    follow the instructions to install the latest LTS version available. Please note
    that non-LTS versions (current) might not be stable and it is advised not to use
    them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, check the command in step 1 again to make sure. As NodeJS alters
    the environment variables, you would have to open a new Terminal here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NPM is automatically installed when you install NodeJS. You can check this by
    running `npm -v` in the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can install multiple NPM packages by running the command `npm -g install
    bower gulp-cli` CLI or using Yarn, `yarn global add bower gulp-cli`.
  prefs: []
  type: TYPE_NORMAL
- en: Yarn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yarn is a package manager for NodeJS. It is API and feature compatible with
    NPM and provides better performance and a flat package tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'JHipster, by default, uses Yarn instead of NPM as Yarn is much faster at the
    time of writing. If you prefer to use NPM, then you can skip this step:'
  prefs: []
  type: TYPE_NORMAL
- en: You can visit the Yarn website ([https://yarnpkg.com/en/docs/install](https://yarnpkg.com/en/docs/install))
    and follow the instructions to install Yarn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, check by running `yarn --version` to make sure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is the defacto standard for container management and it made using containers
    a breeze. It provides tools to create, share and deploy containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need Docker and `docker-compose` to run the generated database images
    and for the development of microservices:'
  prefs: []
  type: TYPE_NORMAL
- en: Check for Docker by running `docker -v` in a terminal. It should display a version
    number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check for `docker-compose` by running `docker-compose -v` in a Terminal. It
    should display a version number. If you are on Mac or Linux you could just run `docker
    -v && docker-compose -v` together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the command is not found, you can visit the Docker website ([https://docs.docker.com/install/](https://docs.docker.com/install/))
    and follow the instructions to install it. Also, install Docker Compose ([https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/))
    by following the instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, check the command in step 1 again to make sure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally Install a Java build tool: Normally JHipster will automatically install
    the Maven Wrapper ([https://github.com/takari/maven-wrapper](https://github.com/takari/maven-wrapper)) or
    the Gradle Wrapper ([https://docs.gradle.org/current/userguide/gradle_wrapper.html](https://docs.gradle.org/current/userguide/gradle_wrapper.html)) for
    you, based on your choice of build tool. If you don't want to use those wrappers,
    go to the official Maven website ([http://maven.apache.org/](http://maven.apache.org/)) or Gradle website
    ([https://gradle.org/](https://gradle.org/)) to do your own installation.
  prefs: []
  type: TYPE_NORMAL
- en: IDE configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JHipster applications can be created by using a command-line interface and
    JHipster CLI. Technically speaking, an IDE is not a requirement but when you continue
    development of a generated application it is highly recommended that you use a
    proper Java IDE such as IntelliJ, Eclipse, or Netbeans. Sometimes you could also
    use advanced text editors such as Visual Studio Code or Atom with appropriate
    plugins to get the work done. Depending on the IDE/text editor you choose, it
    is recommended to use the following plugins to make development more productive:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular/React: Tslint, TypeScript, editor config'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java: Spring, Gradle/Maven, Java Language support (VS Code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regardless of IDE/text Editor, always exclude the folders `node_modules`, `git`,
    `build`, and `target` to speed up indexing. Some IDEs will do this automatically
    based on the `.gitignore` file.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://www.jhipster.tech/configuring-ide/](http://www.jhipster.tech/configuring-ide/)
    in your favorite browser to read more about this.
  prefs: []
  type: TYPE_NORMAL
- en: System setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before installing and diving into JHipster, here are a few pointers to prepare
    you for some of the common issues that one might encounter:'
  prefs: []
  type: TYPE_NORMAL
- en: When using Yarn on macOS or Linux, you need to have `$HOME/.config/yarn/global/node_modules/.bin` in
    the path. This will normally be automatically done when you install Yarn but if
    not, you can run the command ``export PATH="$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin"`` in
    a Terminal to do this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are behind a corporate proxy, you will have to bypass it for NPM, Bower,
    and Maven/Gradle to work properly. Visit [http://www.jhipster.tech/configuring-a-corporate-proxy/](http://www.jhipster.tech/configuring-a-corporate-proxy/)
    to see what proxy options can be set for different tools used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are on Mac or Linux and if you are using Oh-My-Zsh or the Fisherman shell
    then you could use the specific plugins from JHipster for that. Visit [http://www.jhipster.tech/shell-plugins/](http://www.jhipster.tech/shell-plugins/)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of JHipster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OK, now let's get started for real. JHipster can be used from a local installation
    with NPM or Yarn, from a Vagrant image provided by the team, or using a Docker
    image. Alternatively, there is also the JHipster online application we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among all the options, the best way to utilize the full power of JHipster would
    be by installing the JHipster CLI using Yarn or NPM. Open a Terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would prefer NPM, then just run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for the installation to finish and in the Terminal run `jhipster --version`.
    You should see the version info as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed5d567c-fccc-4564-b9d8-c115205405d6.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it; we are ready to roll.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are someone who cannot wait for new versions to arrive, you can always
    use the current development code by following these steps after installing the
    JHipster CLI following the preceding steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In a Terminal, navigate to a directory you would like to use. For example, if
    you have a folder called `project` in your home directory, run `cd ~/projects/` and
    for Windows run `cd c:\Users\<username>\Desktop\projects`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run, `git clone https://github.com/jhipster/generator-jhipster.git`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, navigate to the folder by running `cd generator-jhipster`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `npm link` to create a symbolic link from this folder into the globally
    installed application in `global node_modules`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now when you run the JHipster commands you will be using the version you cloned
    instead of the version you installed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that you should be doing this only if you are absolutely sure of
    what you are doing. Also please note that development versions of the software
    will always be unstable and might contain bugs.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer to isolate the installation in a virtual environment, then you
    can use the Vagrant development box or the Docker image from the JHipster team.
    Visit [https://github.com/jhipster/jhipster-devbox](https://github.com/jhipster/jhipster-devbox)
    for instructions to use the Vagrant box or visit [http://www.jhipster.tech/installation](http://www.jhipster.tech/installation) and
    scroll down to the Docker installation (for advanced users only) section for instructions
    to use a Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discovered JHipster and the different technology options
    provided by it. We had a brief introduction of the important pieces of the client-side
    and server-side stack. We had a quick overview of Spring technologies, Angular,
    Bootstrap, and so on. We also had an overview of different database options supported
    by JHipster. We learned about the tools required to work with JHipster and we have
    successfully set up our environment to work with JHipster and installed JHipster
    CLI. In the next chapter, we will see how JHipster can be used to build a production-grade
    monolithic web application.
  prefs: []
  type: TYPE_NORMAL
