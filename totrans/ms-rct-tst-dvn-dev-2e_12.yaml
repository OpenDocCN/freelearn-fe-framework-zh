- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test-Driving Redux
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Redux** is a **predictable state container**. To the uninitiated, these words
    mean very little. Thankfully, TDD can help us understand how to think about and
    implement our Redux application architecture. The tests in the chapter will help
    you see how Redux can be integrated into any application.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The headline benefit of Redux is the ability to share state between components
    in a way that provides data consistency when operating in an asynchronous browser
    environment. The big drawback is that you must introduce a whole bunch of plumbing
    and complexity into your application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Here be dragons
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: For many applications, the complexity of Redux outweighs the benefits. Just
    because this chapter exists in this book does not mean you should be rushing out
    to use Redux. In fact, I hope that the code samples contained herein serve as
    warning enough for the complexity you will be introducing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll build a reducer and a saga to manage the submission of
    our `CustomerForm` component.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use a testing library named `expect-redux` to test Redux interactions.
    This library allows us to write tests that are not tied to the `redux-saga` library.
    Being independent of libraries is a great way of ensuring that your tests are
    not brittle and are resilient to change: you could replace `redux-saga` with `redux-thunk`
    and your tests would still work.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Up-front design for a reducer and a saga
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test-driving a reducer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test-driving a saga
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching component state for Redux state
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll have seen all the techniques you need for
    testing Redux.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-React-Test-Driven-Development-Second-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Mastering-React-Test-Driven-Development-Second-Edition/tree/main/Chapter12)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Up-front design for a reducer and a saga
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll do the usual thing of mapping out a rough plan of what
    we’re going to build.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by looking at what the actual technical change is going to be and
    discuss why we’re going to do it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to move the logic for submitting a customer—the `doSave` function
    in `CustomerForm`—out of the React component and into Redux. We’ll use a Redux
    reducer to manage the status of the operation: whether it’s currently submitting,
    finished, or had a validation error. We’ll use a Redux saga to perform the asynchronous
    operation.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Why Redux?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Given the current feature set of the application, there’s really no reason
    to use Redux. However, imagine that in the future, we’d like to support these
    features:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: After adding a new customer, the `AppointmentForm` component shows the customer
    information just before submitting it, without having to re-fetch the data from
    the server
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After finding a customer from the `CustomerSearch` component and choosing to
    create an appointment, the same customer information is shown on the appointment
    screen, without having to re-fetch the data
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在从`CustomerSearch`组件中找到客户并选择创建预约后，相同的客户信息将显示在预约屏幕上，无需重新获取数据
- en: In this future scenario, it *might* make sense to have some shared Redux state
    for the customer data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个未来的场景中，可能有必要有一个共享的Redux状态来存储客户数据。
- en: 'I say “might” because there are other, potentially simpler solutions: component
    context, or perhaps some kind of HTTP response caching. Who knows what the solution
    would look like? It’s too hard to say without a concrete requirement.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我说“可能”，因为还有其他可能更简单的解决方案：组件上下文，或者可能某种类型的HTTP响应缓存。谁知道解决方案会是什么样子？没有具体要求很难说。
- en: 'To sum up: in this chapter, we’ll use Redux to store customer data. It has
    no real benefit over our current approach, and in fact, has the drawback of all
    the additional plumbing. However, let’s press on, given that the purpose of this
    book is educational.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下：在本章中，我们将使用Redux来存储客户数据。它没有比我们当前方法更多的实际好处，实际上，它有所有额外管道的缺点。然而，鉴于本书的教育目的，让我们继续前进。
- en: Designing the store state and actions
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计存储状态和动作
- en: 'A Redux store is simply an object of data with some restrictions on how it
    is accessed. Here’s how we want ours to look. The object encodes all the information
    that `CustomerForm` already uses about a `fetch` request to save customer data:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Redux存储只是一个具有一些访问限制的数据对象。这是我们希望它看起来的样子。该对象编码了`CustomerForm`已经使用关于保存客户数据的`fetch`请求的所有信息：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Redux changes this state by means of named actions. We will have the following
    actions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Redux通过命名动作来改变这个状态。我们将有以下动作：
- en: '`ADD_CUSTOMER_REQUEST`, called when the user presses the button to submit a
    customer. This triggers the saga, which then fires off the remaining actions'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD_CUSTOMER_REQUEST`, 当用户按下提交客户按钮时调用。这触发了saga，然后触发剩余的操作'
- en: '`ADD_CUSTOMER_SUBMITTING`, when the saga begins its work'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD_CUSTOMER_SUBMITTING`，当saga开始其工作时'
- en: '`ADD_CUSTOMER_SUCCESSFUL`, when the server saves the customer and returns a
    new customer ID. With this action, we’ll also save the new customer information
    in the reducer, ready for later use'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD_CUSTOMER_SUCCESSFUL`，当服务器保存客户并返回一个新的客户ID。使用这个动作，我们还将保存新的客户信息到reducer中，以便以后使用'
- en: '`ADD_CUSTOMER_VALIDATION_FAILED`, if the provided customer data is invalid'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD_CUSTOMER_VALIDATION_FAILED`，如果提供的客户数据无效'
- en: '`ADD_CUSTOMER_FAILED`, if there is some other reason the server fails to save
    data'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD_CUSTOMER_FAILED`，如果服务器由于其他原因无法保存数据'
- en: 'For reference, here’s the existing code that we’ll be extracting from `CustomerForm`.
    It’s all helpfully in one function, `doSave`, even though it is quite long:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，以下是现有代码，我们将从`CustomerForm`中提取这些代码。它都在一个名为`doSave`的函数中，尽管它相当长：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We’ll replace all this code with a combination of a saga and reducer. We’ll
    start with the reducer, in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用saga和reducer的组合替换所有这些代码。我们将在下一节中开始从reducer开始。
- en: Test-driving a reducer
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动reducer
- en: In this section, we’ll test-drive a new reducer function, and then pull out
    some repeated code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将测试驱动一个新的reducer函数，然后提取一些重复的代码。
- en: 'A reducer is a simple function that takes an action and the current store state
    as input and returns a new state object as output. Let’s build that now, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个reducer是一个简单的函数，它接受一个动作和当前存储状态作为输入，并返回一个新的状态对象作为输出。现在让我们按照以下方式构建它：
- en: 'Create a new file (in a new directory) named `test/reducers/customer.test.js`.
    Add the following first test, which checks that if the reducer is invoked with
    an unknown action, our reducer should return a default state for our object. This
    is standard behavior for Redux reducers, so you should always start with a test
    like this:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`test/reducers/customer.test.js`的新文件（在新的目录中）。添加以下第一个测试，该测试检查如果reducer被一个未知动作调用，我们的reducer应该返回一个默认状态给我们的对象。这是Redux
    reducer的标准行为，所以你应该始终从一个这样的测试开始：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a `src/reducers/customer.js` file, as follows, and let’s make that test
    pass:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`src/reducers/customer.js`文件，如下所示，并让这个测试通过：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For the next test, add in support for the `ADD_CUSTOMER_SUBMITTING` action,
    as follows. This test checks that when this action is received, the status value
    is updated to `SUBMITTING`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于下一个测试，添加对`ADD_CUSTOMER_SUBMITTING`动作的支持，如下所示。这个测试检查当接收到这个动作时，状态值更新为`SUBMITTING`：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Make that pass by replacing the body of the reducer with the following code.
    We can jump directly to using a `switch` statement here (rather than using an
    `if` statement) because we know for certain that we’ll be filling out other action
    types:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用以下代码替换reducer的主体来实现这个过渡。我们可以直接使用`switch`语句（而不是使用`if`语句），因为我们确定我们将填充其他动作类型：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a second test to the `ADD_CUSTOMER_SUBMITTING` `describe` block, as follows.
    This test specifies behavior that’s expected for reducer actions: any state that
    we don’t care about (which is `status` in this case) is maintained:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ADD_CUSTOMER_SUBMITTING` `describe`块中添加第二个测试，如下所示。这个测试指定了reducer动作的预期行为：我们不关心的任何状态（在这个例子中是`status`）保持不变：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Make that pass by modifying the reducers, as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改reducer来实现这个过渡，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We need to handle the `ADD_CUSTOMER_SUCCESSFUL` action. Start with the two
    tests shown next. I’m cheating by writing two tests at once, but that’s fine because
    I know they are a close replica of the `ADD_CUSTOMER_SUBMITTING` tests:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要处理`ADD_CUSTOMER_SUCCESSFUL`动作。从下面显示的两个测试开始。我通过一次编写两个测试来作弊，但这没关系，因为我知道它们是`ADD_CUSTOMER_SUBMITTING`测试的近似复制品：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To make that pass, add a final `case` statement to your reducer, like so:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现这个过渡，请向您的reducer添加一个最后的`case`语句，如下所示：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a third test, shown next. The action provides a new `customer` object with
    its assigned ID, which we should save in the reducer for later use:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加下一个测试，如下所示。动作提供了一个带有分配ID的新`customer`对象，我们应该将其保存在reducer中以供以后使用：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Make that pass by adding in the `customer` property, as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加`customer`属性来实现这个过渡，如下所示：
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the next `describe` block, for `ADD_CUSTOMER_FAILED`, as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加下一个`describe`块，用于`ADD_CUSTOMER_FAILED`，如下所示：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Make those both pass by adding a new `case` statement to the `switch` reducer,
    like so:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向`switch` reducer添加一个新的`case`语句来实现这两个测试的通过，如下所示：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We aren’t quite done with `ADD_CUSTOMER_FAILED`. In this case, we also want
    to set `error` to `true`. Recall that we used an `error` state variable in the
    `CustomerForm` component to mark when an unexplained error had occurred. We need
    to replicate that here. Add this third test to the `describe` block, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还没有完成`ADD_CUSTOMER_FAILED`。在这种情况下，我们还想将`error`设置为`true`。回想一下，我们在`CustomerForm`组件中使用了`error`状态变量来标记何时发生了未解释的错误。我们需要在这里复制它。向`describe`块添加以下第三个测试：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Make that pass by modifying the `case` statement, as shown here:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过修改`case`语句来实现这个过渡，如下所示：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add tests for the `ADD_CUSTOMER_VALIDATION_FAILED` action, which occurs if
    field validation failed. The code is illustrated here:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`ADD_CUSTOMER_VALIDATION_FAILED`动作添加测试，该动作发生在字段验证失败的情况下。代码如下所示：
- en: '[PRE16]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Make these tests pass with another `case` statement in the reducer, as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在reducer中添加另一个`case`语句来实现这些测试的通过，如下所示：
- en: '[PRE17]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This action also needs a third test. This time, the action can include error
    information on what the validation errors were, as shown in the following code
    snippet:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个动作也需要第三个测试。这次，动作可以包含有关验证错误的错误信息，如下面的代码片段所示：
- en: '[PRE18]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make that pass with the change shown here:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下面的更改实现这个过渡：
- en: '[PRE19]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That completes the reducer, but before we use it from within a saga, how about
    we dry these tests up a little?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了reducer，但在我们将其用于saga之前，我们不妨稍微简化一下这些测试？
- en: Pulling out generator functions for reducer actions
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取reducer动作的生成函数
- en: 'Most reducers will follow the same pattern: each action will set some new data
    to ensure that the existing state is not lost.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数reducer将遵循相同的模式：每个动作都将设置一些新数据以确保现有状态不会丢失。
- en: 'Let’s write a couple of test-generator functions to do that for us, to help
    us dry up our tests. Proceed as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写几个测试生成函数来帮我们完成这个任务，以帮助我们简化测试。按照以下步骤进行：
- en: 'Create a new file, `test/reducerGenerators.js`, and add the following function
    to it:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件，`test/reducerGenerators.js`，并向其中添加以下函数：
- en: '[PRE20]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following `import` statement to the top of `src/reducers/customer.test.js`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`import`语句添加到`src/reducers/customer.test.js`的顶部：
- en: '[PRE21]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Modify your tests to use this function, deleting the test in each `describe`
    block and replacing it with the following single line:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的测试以使用此函数，删除每个`describe`块中的测试，并用以下单行替换它：
- en: '[PRE22]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Back in `test/reducerGenerators.js`, define the following function:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test/reducerGenerators.js`中，定义以下函数：
- en: '[PRE23]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Modify the existing `import` statement to pull in the new function, like so:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改现有的`import`语句以引入新函数，如下所示：
- en: '[PRE24]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Modify your tests to use this function, just as you did before. Make sure you
    run your tests to prove they work! Your tests should now be much shorter. Here’s
    an example of the `describe` block for `ADD_CUSTOMER_SUCCESSFUL`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改你的测试以使用此函数，就像你之前做的那样。确保运行你的测试以证明它们可以工作！你的测试现在应该会短得多。以下是一个 `describe` 块的示例，用于
    `ADD_CUSTOMER_SUCCESSFUL`：
- en: '[PRE25]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That concludes the reducer. Before we move on to the saga, let’s tie it into
    the application. We won’t make use of it at all, but it’s good to get the plumbing
    in now.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 reducer。在我们继续 saga 之前，让我们将其与应用程序连接起来。我们根本不会使用它，但现在建立基础设施是好的。
- en: Setting up a store and an entry point
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置存储和入口点
- en: 'In addition to the reducer we’ve written, we need to define a function named
    `configureStore` that we’ll then call when our application starts. Proceed as
    follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们编写的 reducer 之外，我们还需要定义一个名为 `configureStore` 的函数，然后在我们应用程序启动时调用它。按照以下步骤进行：
- en: 'Create a new file named `src/store.js` with the following content. There’s
    no need to test this just yet, as it’s a bit like `src/index.js`: plumbing that
    connects everything together. However, we will utilize it in the next section
    when we test the saga:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `src/store.js` 的新文件，并包含以下内容。目前不需要测试这个文件，因为它有点像 `src/index.js`：连接一切的基础设施。然而，我们将在下一节测试
    saga 时使用它：
- en: '[PRE26]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In `src/index.js`, add the following two `import` statements to the top of
    the file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/index.js` 中，在文件顶部添加以下两个 `import` 语句：
- en: '[PRE27]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, wrap the existing JSX in a `Provider` component, as shown here. This
    is how all our components will gain access to the Redux store:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，像下面这样将现有的 JSX 包装在 `Provider` 组件中。这就是我们的所有组件如何获得访问 Redux 存储的权限：
- en: '[PRE28]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With that in place, we’re ready to write the tricky part: the saga.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，我们就准备好编写复杂的部分了：saga。
- en: Test-driving a saga
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动 saga
- en: A saga is a special bit of code that uses JavaScript generator functions to
    manage asynchronous operations to the Redux store. Because it’s super complex,
    we won’t actually test the saga itself; instead, we’ll dispatch an action to the
    store and observe the results.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Saga 是一段特殊的代码，它使用 JavaScript 生成器函数来管理对 Redux 存储的异步操作。因为它非常复杂，我们实际上不会测试 saga
    本身；相反，我们将向存储派发一个动作并观察结果。
- en: Before we get started on the saga tests, we need a new test helper function
    named `renderWithStore`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始 saga 测试之前，我们需要一个名为 `renderWithStore` 的新测试辅助函数。
- en: Adding the renderWithStore test extension
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 renderWithStore 测试扩展
- en: 'Proceed as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: 'At the top of `test/reactTestExtensions.js`, add the following new `import`
    statements:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `test/reactTestExtensions.js` 的顶部，添加以下新的 `import` 语句：
- en: '[PRE29]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The expect-redux package
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: expect-redux 包
- en: For that, we’ll use the `expect-redux` package from NPM, which has already been
    included in the `package.json` file for you—make sure to run `npm install` before
    you begin.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将使用 NPM 中的 `expect-redux` 包，它已经包含在 `package.json` 文件中供你使用——确保在开始之前运行
    `npm install`。
- en: 'Add a new variable, `store`, and initialize it in `initializeReactContainer`,
    as illustrated in the following code snippet. This makes use of `storeSpy` from
    `expect-redux`, which we’ll use in our tests to check calls to the store:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的变量 `store`，并在 `initializeReactContainer` 中初始化它，如下代码片段所示。这使用了来自 `expect-redux`
    的 `storeSpy`，我们将在测试中用它来检查对存储的调用：
- en: '[PRE30]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add your new render function below the `renderWithRouter` function, as illustrated
    in the following code snippet:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `renderWithRouter` 函数下方添加你的新渲染函数，如下代码片段所示：
- en: '[PRE31]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, add `dispatchStore`, which we’ll need when we start dispatching actions
    in our component, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加 `dispatchStore`，当我们在组件中开始派发动作时将需要它，如下所示：
- en: '[PRE32]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You’ve now got all the helpers you need to begin testing both sagas and components
    that are connected to a Redux store. With all that in place, let’s get started
    on the saga tests.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了开始测试连接到 Redux 存储的 sagas 和组件所需的所有辅助工具。所有这些都已就绪，让我们开始 saga 测试。
- en: Using expect-redux to write expectations
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 expect-redux 编写期望
- en: The saga we’re writing will respond to an `ADD_CUSTOMER_REQUEST` action that’s
    dispatched from the `CustomerForm` component when the user submits the form. The
    functionality of the saga is just the same as the `doSave` function listed in
    the *Designing the store state and actions* section at the beginning of this chapter.
    The difference is we’ll need to use the saga’s function calls of `put`, `call`,
    and so forth.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的 saga 将响应从 `CustomerForm` 组件派发的 `ADD_CUSTOMER_REQUEST` 动作。saga 的功能与本章开头
    *设计存储状态和动作* 部分中列出的 `doSave` 函数相同。区别在于我们需要使用 saga 的 `put`、`call` 等函数调用。
- en: 'Let’s begin by writing a generator function named `addCustomer`. Proceed as
    follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写一个名为 `addCustomer` 的生成器函数开始。按照以下步骤进行：
- en: 'Create a new file (in a new directory) named `test/sagas/customer.test.js`
    and add the following code to set up our `describe` block. We initialize a `store`
    variable that both our sagas and our test expectations will make use of. This
    is a repeat of the code we had previously in our `initializeReactContainer` test
    helper—which we can’t use here because we’re not writing a component:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件（在新的目录中），命名为 `test/sagas/customer.test.js`，并添加以下代码来设置我们的 `describe` 块。我们初始化一个
    `store` 变量，我们的 sagas 和测试期望都将使用它。这是我们在 `initializeReactContainer` 测试辅助程序中之前使用的代码的重复——我们在这里不能使用它，因为我们不是在编写组件：
- en: '[PRE33]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Just below the `beforeEach` block, add the following helper function, which
    gives us a slightly more elegant way of constructing the action—you’ll see that
    in the first test, coming up next:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `beforeEach` 块下面，添加以下辅助函数，它为我们提供了一种构建动作的更优雅的方式——你将在下一个测试中看到：
- en: '[PRE34]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now for the first test. What is the first thing our saga should do? It must
    update our store state to reflect that the form is submitting. That way, the `CustomerForm`
    component can immediately show a submitting indicator to the user. We use an expectation
    from `expect-redux` to ensure that we dispatch the right action, as shown here:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是第一个测试。我们的 saga 应该首先做什么？它必须更新我们的存储状态，以反映表单正在提交。这样，`CustomerForm` 组件就可以立即向用户显示提交指示器。我们使用
    `expect-redux` 的期望来确保我们派发了正确的动作，如下所示：
- en: '[PRE35]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Returning promises from tests
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从测试中返回承诺
- en: This test returns a promise. This is a shortcut we can use instead of marking
    our test function as `async` and the expectation with `await`. Jest knows to wait
    if the test function returns a promise.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试返回一个承诺。这是一个我们可以使用的快捷方式，而不是将我们的测试函数标记为 `async` 并使用 `await` 来设置期望。Jest 知道如果测试函数返回一个承诺，就需要等待。
- en: 'Let’s start with the saga implementation. Create a new file named `src/sagas/customer.js`
    with the following content. Notice the `function*` syntax, which signifies a generator
    function, and the use of `put` to fire off another action to the store:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从 saga 实现开始。创建一个名为 `src/sagas/customer.js` 的新文件，并添加以下内容。注意 `function*` 语法，它表示一个生成器函数，以及使用
    `put` 向存储发射另一个动作：
- en: '[PRE36]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Generator-function syntax
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器函数语法
- en: The arrow-function syntax that we’ve been using throughout the book does not
    work for generator functions, so we need to fall back to using the `function`
    keyword.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在整个书中一直在使用的箭头函数语法不适用于生成器函数，因此我们需要回退到使用 `function` 关键字。
- en: 'Before that test will pass, we need to update the store with a `addCustomer`
    saga. Starting with the imports statements, update `src/store.js` to read as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个测试通过之前，我们需要使用 `addCustomer` saga 更新存储。从导入语句开始，将 `src/store.js` 更改为以下内容：
- en: '[PRE37]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Just below those imports, add this definition of `rootSaga`:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那些导入下面，添加以下 `rootSaga` 定义：
- en: '[PRE38]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, update `configureStore` to include the saga middleware and “run” `rootSaga`,
    like so. After this change, your test should pass:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，更新 `configureStore` 以包括 saga 中间件和“运行” `rootSaga`，如下所示。在此更改之后，你的测试应该可以通过：
- en: '[PRE39]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: That completes the first test for the saga, and gets all the necessary plumbing
    into place. You’ve also seen how to use `put`. Next up, let’s introduce `call`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 saga 的第一个测试，并放置了所有必要的管道。你还看到了如何使用 `put`。接下来，让我们介绍 `call`。
- en: Making asynchronous requests with sagas
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 sagas 进行异步请求
- en: 'Within a saga, `call` allows us to perform an asynchronous request. Let’s introduce
    that now. Follow these steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 saga 中，`call` 允许我们执行异步请求。现在让我们介绍这一点。按照以下步骤进行：
- en: 'Add the following test, to check the call to `fetch`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下测试，以检查对 `fetch` 的调用：
- en: '[PRE40]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We’ll need to define a spy on `global.fetch` for this to work. Change the `beforeEach`
    block as follows, including the new customer constant:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个功能正常工作，我们需要在 `global.fetch` 上定义一个间谍。将 `beforeEach` 块更改为如下，包括新的客户常量：
- en: '[PRE41]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In `src/sagas/customer.js`, update the saga import to include the `call` function,
    like so:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/sagas/customer.js` 中，更新 saga 导入以包括 `call` 函数，如下所示：
- en: '[PRE42]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, create a `fetch` function and invoke it in the saga with `call`, as follows.
    After this, your test should be passing:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `fetch` 的函数，并在 saga 中使用 `call` 来调用它，如下所示。之后，你的测试应该可以通过：
- en: '[PRE43]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Alright—now, let’s add a test to add in the configuration for our `fetch` request,
    as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好吧——现在，让我们添加一个测试来添加我们的 `fetch` 请求的配置，如下所示：
- en: '[PRE44]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To make that pass, add the following lines to the `fetch` definition:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让它通过，请将以下行添加到 `fetch` 定义中：
- en: '[PRE45]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, let’s test that we’re sending the right customer data across. Here’s how
    we can do that:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们测试一下我们是否正在发送正确的客户数据。以下是我们可以这样做的方法：
- en: '[PRE46]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To make that pass, complete the `fetch` definition, as shown here:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了实现这一点，完成 `fetch` 定义，如下所示：
- en: '[PRE47]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'For the next test, we want to dispatch an `ADD_CUSTOMER_SUCCESSFUL` event when
    the `fetch` call returns successfully. It uses a constant named `customer` that
    we’ll define in the next step. Here’s the code we need to execute:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于下一个测试，我们希望在 `fetch` 调用成功返回时分派一个 `ADD_CUSTOMER_SUCCESSFUL` 事件。它使用一个名为 `customer`
    的常量，我们将在下一步定义。以下是我们需要执行的代码：
- en: '[PRE48]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'When we set up our `fetch` spy before, we didn’t set a return value. So, now,
    create a `customer` constant and set up the `fetch` spy to return it, like so:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前设置 `fetch` 间谍之前，我们没有设置返回值。因此，现在创建一个 `customer` 常量，并设置 `fetch` 间谍以返回它，如下所示：
- en: '[PRE49]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Import `fetchResponseOk`, like so. After this, you’ll be able to run your test:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照如下方式导入 `fetchResponseOk`。在此之后，你将能够运行你的测试：
- en: '[PRE50]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Make the test pass by processing the result from the `call` function, like
    so:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过处理 `call` 函数的结果，使测试通过，如下所示：
- en: '[PRE51]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'What about if the `fetch` call isn’t successful, perhaps because of a network
    failure? Add a test for that, as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `fetch` 调用不成功，可能是由于网络故障，该怎么办？添加一个测试，如下所示：
- en: '[PRE52]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'That test makes use of `fetchResponseError`; import it now, like so:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该测试使用了 `fetchResponseError`；现在像这样导入它：
- en: '[PRE53]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Make the test pass by wrapping the existing code in an `if` statement with
    an `else` clause, as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将现有代码包裹在一个带有 `else` 子句的 `if` 语句中，使测试通过，如下所示：
- en: '[PRE54]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Finally, add a test for a more specific type of failure—a validation failure,
    as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个针对更具体类型的失败的测试——验证失败，如下所示：
- en: '[PRE55]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Make that pass with the following code:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码使测试通过：
- en: '[PRE56]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The saga is now complete. Compare this function to the function in `CustomerForm`
    that we’re replacing: `doSave`. The structure is identical. That’s a good indicator
    that we’re ready to work on removing `doSave` from `CustomerForm`.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在saga已经完成。将此函数与我们要替换的 `CustomerForm` 中的函数进行比较：`doSave`。结构是相同的。这是一个好的迹象，表明我们准备好从
    `CustomerForm` 中移除 `doSave`。
- en: In the next section, we’ll update `CustomerForm` to make use of our new Redux
    store.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更新 `CustomerForm` 以使用我们新的 Redux 存储。
- en: Switching component state for Redux state
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将组件状态切换为 Redux 状态
- en: The saga and reducer are now complete and ready to be used in the `CustomerForm`
    React component. In this section, we’ll replace the use of `doSave`, and then
    as a final flourish, we’ll push our React Router navigation into the saga, removing
    the `onSave` callback from `App`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在saga和reducer已经完成并准备好在 `CustomerForm` React 组件中使用。在本节中，我们将替换 `doSave` 的使用，然后作为最后的润色，我们将把我们的
    React Router 导航推入saga，从 `App` 中移除 `onSave` 回调。
- en: Submitting a React form by dispatching a Redux action
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过分派 Redux 动作提交 React 表单
- en: At the start of the chapter, we looked at how the purpose of this change was
    essentially a transplant of `CustomerForm`’s `doSave` function into a Redux action.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们探讨了这次更改的目的基本上是将 `CustomerForm` 的 `doSave` 函数移植到 Redux 动作中。
- en: With our new Redux setup, we used component state to display a submitting indicator
    and show any validation errors. That information is now stored within the Redux
    store, not component state. So, in addition to dispatching an action to replace
    `doSave`, the component also needs to read state from the store. The component
    state variables can be deleted.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们新的 Redux 设置，我们使用组件状态来显示提交指示器并显示任何验证错误。这些信息现在存储在 Redux 存储中，而不是组件状态中。因此，除了分派一个替换
    `doSave` 的动作外，组件还需要从存储中读取状态。组件状态变量可以被删除。
- en: This has a knock-on effect on our tests. Since the saga tests the failure modes,
    our component tests for `CustomerForm` simply need to handle various states of
    the Redux store, which we’ll manipulate using our `dispatchToStore` extension.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们的测试也有影响。由于saga测试失败模式，我们的 `CustomerForm` 组件测试只需要处理 Redux 存储的各种状态，我们将使用我们的
    `dispatchToStore` 扩展来操作这些状态。
- en: 'We’ll start by making our component Redux-aware, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使我们的组件具有 Redux 意识，如下所示：
- en: 'Add the following `import` statement to the top of `test/CustomerForm.test.js`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `import` 语句添加到 `test/CustomerForm.test.js` 的顶部：
- en: '[PRE57]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Update the test extensions `import` statement, replacing `render` with `renderWithStore`,
    and adding the two new imports, as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新测试扩展的 `import` 语句，将 `render` 替换为 `renderWithStore`，并添加两个新的导入，如下所示：
- en: '[PRE58]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Replace all calls to `render` with `renderWithStore`. Be careful if you’re
    doing a search and replace operation: the word *render* appears in some of the
    test descriptions, and you should keep those as they are.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有对`render`的调用替换为`renderWithStore`。如果你正在进行搜索和替换操作，请注意：单词*render*出现在一些测试描述中，你应该保持它们不变。
- en: 'Let’s rework a single test: the one with the `sends HTTP request to POST /customers
    when submitting data` description. Change that test to the following:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们重写一个单独的测试：描述为`sends HTTP request to POST /customers when submitting data`的那个测试。将该测试更改为以下内容：
- en: '[PRE59]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'To make this pass, we’ll use a side-by-side implementation to ensure our other
    tests continue to pass. In `handleSubmit`, add the line highlighted in the following
    code snippet. This calls a new `addCustomerRequest` prop that we’ll define soon:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个通过，我们将使用并排实现来确保我们的其他测试继续通过。在`handleSubmit`中添加以下代码片段中突出显示的行。这调用了一个我们很快就会定义的新`addCustomerRequest`属性：
- en: '[PRE60]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'That makes use of the `useDispatch` hook. Import that now, as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使用了`useDispatch`钩子。现在按照以下方式导入它：
- en: '[PRE61]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then, add this line to the top of the `CustomerForm` component:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将此行添加到`CustomerForm`组件的顶部：
- en: '[PRE62]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'To make the test pass, all that’s left is the definition of `addCustomerRequest`,
    which you can add just below the `import` statements and above the `CustomerForm`
    component definition, like so:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使测试通过，剩下的只是`addCustomerRequest`的定义，你可以在`import`语句和`CustomerForm`组件定义之间添加它，如下所示：
- en: '[PRE63]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: At this point, your component is now Redux-aware, and it’s dispatching the right
    action to Redux. The remaining work is to modify the component to deal with validation
    errors coming from Redux rather than the component state.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你的组件现在是Redux感知的，并且正在向Redux派遣正确的动作。剩余的工作是修改组件以处理来自Redux的验证错误，而不是组件状态。
- en: Making use of store state within a component
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在组件中使用存储状态
- en: 'Now, it’s time to introduce the `useSelector` hook to pull out state from the
    store. We’ll kick things off with the `ADD_CUSTOMER_FAILED` generic error action.
    Recall that when the reducer receives this, it updates the `error` store state
    value to `true`. Follow these steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候引入`useSelector`钩子来从存储中提取状态了。我们将从`ADD_CUSTOMER_FAILED`通用错误动作开始。回想一下，当reducer接收到这个动作时，它会将`error`存储状态值更新为`true`。按照以下步骤操作：
- en: 'Find the test named `renders error message when fetch call fails`. Replace
    it with the implementation shown here. It simulates an `ADD_CUSTOMER_FAILED` action
    so that we make sure all the Redux wiring is correct. Don’t forget to remove the
    `async` keyword from the test function:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到名为`renders error message when fetch call fails`的测试，并用下面的实现替换它。它模拟了一个`ADD_CUSTOMER_FAILED`动作，以确保所有Redux连接都是正确的。别忘了从测试函数中移除`async`关键字：
- en: '[PRE64]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Add an `import` statement for the `useSelector` hook at the top of `src/CustomerForm.js`,
    as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/CustomerForm.js`的顶部添加一个`useSelector`钩子的`import`语句，如下所示：
- en: '[PRE65]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Call the `useSelector` hook at the top of the `CustomerForm` component, as
    shown in the following code snippet. It pulls out the `error` state value from
    the `customer` section of the Redux store:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CustomerForm`组件的顶部调用`useSelector`钩子，如下面的代码片段所示。它从Redux存储的`customer`部分提取出`error`状态值：
- en: '[PRE66]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Delete any line where `setError` is called. There are two occurrences, both
    in `doSave`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除任何调用`setError`的行。在`doSave`中有两个出现。
- en: Now, you can delete the `error`/`setError` pair of variables that are defined
    with the `useState` hook at the top of `CustomerForm`. Your tests won’t run until
    you do this, due to `error` being declared twice. Your tests should be passing
    at this stage.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以删除在`CustomerForm`组件顶部使用`useState`钩子定义的`error`/`setError`变量对。由于`error`被声明了两次，你的测试将无法运行，直到你这样做。在这个阶段，你的测试应该通过。
- en: The next test, `clears error message when fetch call succeeds`, can be deleted.
    The reducer, as it stands, doesn’t actually do this; completing it is one of the
    exercises in the *Exercise* section.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个测试，`clears error message when fetch call succeeds`，可以被删除。根据现状，reducer实际上并没有做这件事；完成它是*练习*部分的一个练习。
- en: 'Find the `does not submit the form when there are validation errors` test and
    update it as follows. It should pass already:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`does not submit the form when there are validation errors`测试，并按以下方式更新它。它应该已经通过：
- en: '[PRE67]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The toNotDispatchAnAction matcher
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`toNotDispatchAnAction`匹配器'
- en: This matcher should always be used with a timeout, such as 100 milliseconds
    in this case. That’s because, in an asynchronous environment, events may just
    be slow to occur, rather than not occurring at all.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个匹配器应该始终与超时一起使用，例如在这种情况下使用100毫秒。这是因为，在异步环境中，事件可能只是发生得较慢，而不是根本不发生。
- en: 'Find the next test, `renders field validation errors from server`. Replace
    it with the following code, remembering to remove the `async` keyword from the
    function definition:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到下一个测试，`renders field validation errors from server`。用以下代码替换它，记得从函数定义中删除`async`关键字：
- en: '[PRE68]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'To make this pass, we need to pull out `validationErrors` from the Redux customer
    store. There’s a bit of complexity here: the component already has a `validationErrors`
    state variable that covers *both* server and client validation errors. We can’t
    replace that entirely, because it handles client errors in addition to server
    errors.'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使这个通过，我们需要从Redux客户存储中提取`validationErrors`。这里有一些复杂性：组件已经有一个`validationErrors`状态变量，它涵盖了服务器和客户端验证错误。我们无法完全替换它，因为它除了处理服务器错误外，还处理客户端错误。
- en: 'So, let’s *rename* the prop we get back from the server, like so:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们将服务器返回的属性*重命名*，如下所示：
- en: '[PRE69]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: A design issue
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 设计问题
- en: This highlights a design issue in our original code. The `validationErrors`
    state variable had *two* uses, which were mixed up. Our change here will separate
    those uses.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这突显了我们原始代码中的设计问题。`validationErrors`状态变量有两个用途，它们被混淆了。我们在这里的更改将分离这些用途。
- en: 'We’re not done with this test just yet. Update the `renderError` function to
    render errors for both `validationErrors` (client-side validation) and `serverValidationErrors`
    (server-side validation), as follows:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还没有完成这个测试。更新`renderError`函数以渲染`validationErrors`（客户端验证）和`serverValidationErrors`（服务器端验证）的错误，如下所示：
- en: '[PRE70]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The next tests we need to look at are for the submitting indicator. We’ll update
    these tests to respond to store actions rather than a form submission. Here’s
    the first one:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来需要查看的测试是提交指示器的测试。我们将更新这些测试以响应存储操作而不是表单提交。这是第一个：
- en: '[PRE71]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'To make this pass, add `status` to the `useSelector` call, like so:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使这个通过，需要在`useSelector`调用中添加`status`，如下所示：
- en: '[PRE72]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Delete anywhere that `setSubmitting` is called within this component.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除在此组件内部任何调用`setSubmitting`的地方。
- en: 'Delete the state variable for `submitting`, and replace it with the following
    line of code. The test should now pass:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`submitting`状态变量，并用以下代码行替换它。现在测试应该通过了：
- en: '[PRE73]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Then, update the test named `hides indicator when form has submitted`, as follows.
    This test won’t need any change to the production code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新名为`hides indicator when form has submitted`的测试，如下所示。这个测试不需要对生产代码进行任何更改：
- en: '[PRE74]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Finally, find the `disable the submit button when submitting` test and modify
    it in the same way as *Step 12*.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，找到`disable the submit button when submitting`测试，并以与*步骤12*相同的方式进行修改。
- en: That’s it for test changes, and `doSave` is almost fully redundant. However,
    the call to `onSave` still needs to be migrated across into the Redux saga, which
    we’ll do in the next section.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 测试更改到此结束，`doSave`几乎完全冗余。然而，对`onSave`的调用仍然需要迁移到Redux saga中，我们将在下一节中这样做。
- en: Navigating router history in a Redux saga
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Redux saga中导航路由历史
- en: Recall that it is the `App` component that renders `CustomerForm`, and `App`
    passes a function to the `CustomerForm`’s `onSave` prop that causes page navigation.
    When the customer information has been submitted, the user is moved onto the `/addAppointment`
    route.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，是`App`组件渲染`CustomerForm`，并且`App`通过将一个函数传递给`CustomerForm`的`onSave`属性来导致页面导航。当客户信息已提交时，用户将被移动到`/addAppointment`路由。
- en: But now that the form submission happens within a Redux saga, how do we call
    the `onSave` prop? The answer is that we can’t. Instead, we can move page navigation
    into the saga itself and delete the `onSave` prop entirely.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，现在表单提交发生在Redux saga中，我们如何调用`onSave`属性？答案是，我们不能。相反，我们可以将页面导航移动到saga本身，并完全删除`onSave`属性。
- en: 'To do this, we must update `src/index.js` to use `HistoryRouter` rather than
    `BrowserRouter`. That allows you to pass in your own history singleton object,
    which you can then explicitly construct yourself and then access via the saga.
    Proceed as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们必须更新`src/index.js`以使用`HistoryRouter`而不是`BrowserRouter`。这允许你传递自己的历史单例对象，然后你可以显式地构造它并通过saga访问它。按照以下步骤进行：
- en: 'Create a new file named `src/history.js` and add the following content to it.
    This is very similar to what we already did in `test/reactTestExtensions.js`:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`src/history.js`的新文件，并将以下内容添加到其中。这与我们在`test/reactTestExtensions.js`中已经做过的非常相似：
- en: '[PRE75]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Update `src/index.js`, as shown here:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`src/index.js`，如下所示：
- en: '[PRE76]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now, we can use `appHistory` in our saga. Open `test/sagas/customer.js` and
    add the following `import` statement to the top of the file:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在saga中使用`appHistory`。打开`test/sagas/customer.js`，并将以下`import`语句添加到文件顶部：
- en: '[PRE77]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Then, add the following two tests to define how the navigation should occur:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'To make these pass, start by opening `src/sagas/customer.js` and adding the
    following `import` statement:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Then, update the `addCustomer` generator function to navigate after a customer
    has been added successfully, like so:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Now, all that’s left is to delete the existing `onSave` plumbing from `App`
    and `CustomerForm`. Open `test/App.test.js` and delete the following three tests:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`calls fetch with correct configuration`'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`navigates to /addAppointment after the CustomerForm is submitted`'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passes saved customer to AppointmentFormLoader after the CustomerForm is submitted`'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also delete the `beforeEach` block that sets up `global.fetch` in the
    nested `describe` block labeled `when POST request returns an error`.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `src/App.js`, delete the definition of `transitionToAddAppointment` and
    change the `/addCustomer` route to have no `onSave` prop, as shown in the following
    code snippet. Your `App` tests should be passing at this point:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Now, we can delete the `onSave` prop from `CustomerForm`. Start by deleting
    the following tests from the `CustomerForm` test suite that are no longer necessary:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`notifies onSave when form is submitted`'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`does not notify onSave if the POST request returns an error`'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete the `onSave` prop from the `CustomerForm` component.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, remove the invocation of `doSave` from `handleSubmit`. This function
    no longer awaits anything, so you can safely remove `async` from the function
    definition. At this point, all your tests should be passing.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ve now seen how you can integrate a Redux store into your React components,
    and how you can control React Router navigation from within a Redux saga.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: All being well, your application should now be running with Redux managing the
    workflow.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This has been a whirlwind tour of Redux and how to refactor your application
    to it, using TDD.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: As warned in the introduction of this chapter, Redux is a complex library that
    introduces a lot of extra plumbing into your application. Thankfully, the testing
    approach is straightforward.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we’ll add yet another library: Relay, the GraphQL client.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modify the customer reducer to ensure that `error` is reset to `false` when
    the `ADD_CUSTOMER_SUCCESSFUL` action occurs.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information, have a look at the following sources:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'MDN documentation on generator functions:'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'Home page for the `expect-redux` package:'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/rradczewski/expect-redux](https://github.com/rradczewski/expect-redux)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
