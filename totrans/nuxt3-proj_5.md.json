["```js\npnpm dlx nuxi init my-space\ncd my-space\npnpm i -D @nuxtjs/supabase\n```", "```js\nSUPABASE_URL=\"YOUR_SUPABASE_URL\"\nSUPABASE_KEY=\"YOUR_SUPABASE_ANON_KEY\"\n```", "```js\nsupabase: {\n  redirectOptions: {\n    login: 'auth/login',\n    callback: '',\n    exclude: ['/auth/*']\n  }\n}\n```", "```js\npnpm i @nuxtjs/google-fonts -D\npnpm i @nuxt/ui\n```", "```js\nmodules: ['@nuxtjs/supabase', '@nuxtjs/google-fonts',\n  '@nuxt/ui'],\ngoogleFonts: {\n  families: {\n    Poppins: [400, 500, 700]\n  }\n},\napp: {\n  head: {\n    title: 'My Space'\n  }\n}\n```", "```js\nexport default defineAppConfig({\n  ui: {\n    primary: 'teal',\n    container: {\n      padding: 'py-6'\n    }\n  }\n});\n```", "```js\n<template>\n  <slot></slot>\n</template>\n```", "```js\n<template>\n  <div class=\"grid md:grid-cols-2 min-h-screen\n  bg-gray-100\">\n    <!-- Image Column -->\n    <div class=\"hidden md:flex md:col-span-1 items-center\n    justify-center bg-white\">\n      <img src=\"img/auth.svg\" class=\"max-w-md\"\n      />\n    </div>\n    <!-- Form Column -->\n    <div class=\"col-span-1 flex justify-center\n    items-center\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n```", "```js\n<template>\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```", "```js\n<u-card class=\"md:min-w-96\">\n  <!-- Form Content -->\n  <div class=\"text-2xl text-center font-bold mb-1\">\n    Login\n  </div>\n  <div class=\"text-slate-500 text-sm text-center mb-4\">\n    Don't have an account?\n    <UButton variant=\"link\" to=\"/auth/signup\">\n    Create one!</UButton>\n  </div>\n  <!-- the form -->\n</u-card>\n```", "```js\n<!-- the form -->\n<UForm>\n  <UFormGroup label=\"Email\" name=\"email\" class=\"mb-4\">\n    <UInput v-model=\"user.email\" icon=\"i-heroicons-at-\n    symbol\" />\n  </UFormGroup>\n  <UFormGroup label=\"Password\" name=\"password\"\n  class=\"mb-4\">\n    <UInput\n      v-model=\"user.password\"\n      type=\"password\"\n      icon=\"i-heroicons-lock-closed\"\n    />\n  </UFormGroup>\n  <!-- Submit Button -->\n  <UButton type=\"submit\" block class=\"mt-8\">\n    Login\n  </UButton>\n</UForm>\n```", "```js\n<script setup>\ndefinePageMeta({ layout: 'auth' })\nconst user = ref({\n  email: '',\n  password: ''\n})\n</script>\n```", "```js\n<UFormGroup\n  label=\"Password Confirmation\"\n  name=\"passwordConfirm\"\n  class=\"mb-4\"\n>\n<UInput\n  v-model=\"user.passwordConfirm\"\n  type=\"password\"\n  icon=\"i-heroicons-lock-closed\"\n/>\n</UFormGroup>\n```", "```js\nconst user = ref({\n  email: '',\n  password: '',\n  passwordConfirm: ''\n})\n```", "```js\npnpm i joi\n```", "```js\nconst schema = Joi.object({\n  email: Joi.string().email({ tlds: false }).required(),\n  password: Joi.string().min(6).required()\n});\n```", "```js\n<UForm :schema=\"schema\" :state=\"user\">\n  <!-- Form content -->\n</UForm>\n```", "```js\nconst schema = Joi.object({\n  email: Joi.string().required(),\n  password: Joi.string().min(6).required().label(\n    'Password'),\n  passwordConfirm: Joi.valid(Joi.ref('password'))\n    .label('Confirm Password')\n    .messages({\n      'any.only': `passwords don't match`\n    })\n});\n```", "```js\nconst supabase = useSupabaseClient()\n```", "```js\nconst loading = ref(false)\nconst onSubmit = async () => {\n  loading.value = true\n  try {\n    const { error } = await supabase.auth.signUp({\n      email: user.value.email,\n      password: user.value.password\n    })\n    if (error) throw error\n  } catch (error) {\n    const message = error.message\n    console.log(message);\n  }\n  loading.value = false\n}\n```", "```js\n  <NuxtLayout>\n    <NuxtPage />\n    <UNotifications />\n  </NuxtLayout>\n</template>\n```", "```js\nconst toast = useToast()\n```", "```js\ncatch (error) {\n  toast.add({ title: error.message, color: 'red' });\n}\n```", "```js\nconst onSubmit = async () => {\n  loading.value = true\n  try {\n    const { error } = await supabase.auth.signUp({\n      email: user.value.email,\n      password: user.value.password\n    })\n    if (error) throw error\n    toast.add({ title: 'Welcome!' })\n    navigateTo('/')\n  } catch (error) {\n    toast.add({ title: error.message, color: 'red' })\n  }\n  loading.value = false\n}\n```", "```js\n<template>\n  <div class=\"bg-gray-100 min-h-screen\">\n    <UContainer>\n      <h1 class=\"text-3xl font-semibold text-center\n      text-gray-800 mb-6\">\n        My Posts\n      </h1>\n    </UContainer>\n  </div>\n</template>\n```", "```js\nconst onSubmit = async () => {\n  loading.value = true;\n  try {\n    const { error } =\n    await supabase.auth.signInWithPassword({\n      email: user.value.email,\n      password: user.value.password\n    });\n    if (error) throw error;\n    toast.add({ title: 'Logged in successfully!' });\n    navigateTo('/');\n  } catch (error) {\n    toast.add({ title: error.message, color: 'red' });\n  } finally {\n    loading.value = false;\n  }\n};\n```", "```js\n<UForm :schema=\"schema\" :state=\"user\" @submit=\"onSubmit\">\n  <!-- Form fields -->\n</UForm>\n```", "```js\nsupabase.from('posts').select()\n```", "```js\nsupabase.from('posts').upsert(/* your post data */)\n```", "```js\nsupabase.from('posts').delete().eq('id', postId)\n```", "```js\n<div class=\"min-h-screen bg-gray-100\">\n  <UContainer>\n    <h2 class=\"mt-6 text-center text-3xl font-extrabold\n    text-gray-900 mb-8\">\n      Post Information\n    </h2>\n    <UCard class=\"max-w-md mx-auto\">\n  <!-- the form -->\n    </UCard>\n  </UContainer>\n</div>\n```", "```js\n<UForm\n  class=\"space-y-6\"\n  :schema=\"schema\"\n  :state=\"post\"\n  @submit=\"onSubmit\"\n>\n  <UFormGroup label=\"Title\" name=\"title\">\n    <UInput type=\"text\" v-model=\"post.title\" />\n  </UFormGroup>\n  <UFormGroup label=\"Content\" name=\"content\">\n    <UTextarea type=\"text\" v-model=\"post.content\" :rows=\"8\"\n    />\n  </UFormGroup>\n  <UButton type=\"submit\" block primary :loading=\"pending\">\n    Save Changes\n  </UButton>\n</UForm>\n```", "```js\n<div class=\"flex justify-center mt-12\">\n  <UButton\n    color=\"red\"\n    variant=\"outline\"\n    :loading=\"deleteLoading\"\n    @click=\"deletePost\"\n  >\n    Delete\n  </UButton>\n</div>\n```", "```js\n<script setup>\nimport Joi from 'joi'\nconst user = useSupabaseUser()\nconst post = ref({\n  title: '',\n  content: undefined,\n  author_id: user.value.id\n})\nconst schema = Joi.object({\n  author_id: Joi.string().required(),\n  title: Joi.string().required(),\n  content: Joi.string().allow('', null)\n}).unknown(true) // to allow additional fields like id, created_at\n</script>\n```", "```js\nconst route = useRoute()\nconst postId = computed(() => route.params.id)\nconst editMode = computed(() => route.params.id !== 'create')\nconst toast = useToast()\n```", "```js\nSo to fetch the data we'll add:\nconst { pending } = useLazyAsyncData(async () => {\n  if (!editMode.value) return;\n  const { data } = await supabase\n    .from('posts')\n    .select()\n    .eq('id', postId.value)\n    .single();\n  if (data) post.value = data;\n});\n```", "```js\nconst toast = useToast()\nconst onSubmit = async () => {\n  pending.value = true\n  try {\n    const { error } =\n      await supabase.from('posts').upsert(post.value)\n    if (error) throw error\n    if (!editMode.value) toast.add({ title: 'Post Created\n      Successfully' })\n    else toast.add({ title: 'Post Updated Successfully' })\n    navigateTo('/')\n  } catch (error) {\n    toast.add({ title: error.message, color: 'red' })\n  }\n  pending.value = false\n}\n```", "```js\nconst { error } = await supabase\n  .from('posts')\n  .delete()\n  .eq('id', postId.value)\n```", "```js\n<nav class=\"bg-gray-800 text-white py-4\">\n  <div class=\"container flex justify-between items-center\">\n    <div class=\"text-xl font-bold uppercase\">\n      <nuxt-link to=\"/\">My space</nuxt-link>\n    </div>\n    <div class=\"flex gap-x-4\">\n      <UButton to=\"/posts/create\">New Post</UButton>\n    </div>\n  </div>\n</nav>\n```", "```js\n<script setup lang=\"ts\">\nconst supabase = useSupabaseClient()\nconst { data: posts } = await useLazyAsyncData(async () => {\n  let { data } =\n    await supabase.from('posts').select().returns<Post[]>()\n  return data\n})\n</script>\n```", "```js\n<template>\n  <div class=\"bg-gray-100 min-h-screen\">\n    <UContainer>\n      <h1 class=\"text-3xl font-semibold text-center\n      text-gray-800 mb-6\">\n        My Posts\n      </h1>\n      <post-card v-for=\"post in posts\" :post=\"post\" />\n    </UContainer>\n  </div>\n</template>\n```", "```js\n<template>\n  <UCard class=\"mb-4 max-w-lg mx-auto\">\n    <nuxt-link :to=\"`/posts/${post.id}/`\">\n      <div class=\"uppercase text-primary font-semibold\">\n        {{ post.title }}\n      </div>\n      <p class=\"mt-2 text-gray-500\">\n        {{ post.content || 'no content' }}\n      </p>\n      <div class=\"mt-4 text-gray-400 text-xs\n      font-semibold\">\n        Created at: {{ dayjs(post.created_at).format(\n          'MMMM D, YYYY') }}\n      </div>\n    </nuxt-link>\n  </UCard>\n</template>\n<script setup lang=\"ts\">\nimport dayjs from 'dayjs'\ndefineProps<{ post: Post }>()\n</script>\n```"]