["```js\nlet backend = {\n    getAll() {\n        // ...return pages\n    }\n};\nclass SitemapFormatter {\n    format(items) {\n        // ...generate xml from items\n    }\n}\nfunction createSitemap() {\n    const pages = backend.getAll();\n    const formatter = new SitemapFormatter();\n\n    return formatter.format(\n        pages.filter(page => page.isPublic)\n    );\n}\n\nlet sitemap = createSitemap();\n```", "```js\nfunction createSitemap(backend, formatter) {\n    const pages = backend.getAll();\n\n    return formatter.format(\n        pages.filter(page => page.isPublic)\n    );\n}\n\nlet formatter = new SitemapFormatter();\nlet sitemap = createSitemap(backend, formatter);\n```", "```js\nclass SitemapGenerator {\n    constructor(formatter) {\n        this._formatter = formatter;\n    }\n\n    set formatter(formatter) {\n        this._formatter = formatter;\n    }\n}\n\nlet generator = new SitemapGenerator(new SitemapFormatter());\n\ngenerator.formatter = new AlternativeSitemapFormatter();\n\n```", "```js\nclass Factory {\n    createNewFormatter() {\n        // ...create new formatter instance\n    }\n\n    getSharedBackend() {\n        // ...get shared backend instance\n    }\n}\n\nconst factory = new Factory();\n\nconst formatter = factory.createNewFormatter();\nconst backend = factory.getSharedBackend();\n\n```", "```js\nlet locator = new ServiceLocator();\nlocator.set(\"formatter\", new Formatter());\nlocator.set(\"backend\", new Backend());\n```", "```js\nclass SitemapGenerator {\n    constructor(locator) {\n        this.formatter = locator.get(\"formatter\");\n        this.backend = locator.get(\"backend\");\n    }\n}\n\nlet generator = new SitemapGenerator(locator);\n```", "```js\n$ npm install --save adonis-fold\n\n```", "```js\nimport { Ioc } from \"adonis-fold\";\n\nIoc.bind(\"App/Authenticator\", function() {\n    // ...return a new authenticator object\n});\n\nlet authenticator = Ioc.use(\"App/Authenticator\");\n```", "```js\nIoc.bind(\"App/Authenticator\", function() {\n    const repository = Ioc.use(\"App/UserRepository\");\n    const crypto = Ioc.use(\"App/Crypto\");\n\n    return new Authenticator(repository, crypto);\n});\n```", "```js\nclass Authenticator {\n    // ...do some authentication!\n}\n\nmodule.exports = Authenticator;\n```", "```js\nIoc.autoload(\"App\", __dirname + \"/src\");\n\nconst Authenticator = Ioc.use(\"App/Authenticator\");\n\nlet authenticator = new Authenticator();\n```", "```js\nIoc.singleton(\"App/Backend\", function() {\n    // ...this will only be run once!\n return new Backend();\n});\n\n```", "```js\nclass Authenticator {\n    static get inject() {\n        return [\"App/Repository\", \"App/Crypto\"];\n    }\n\n    constructor(repository, crypto) {\n        this.repository = repository;\n        this.crypto = crypto;\n    }\n}\n\nmodule.exports = Authenticator;\n```", "```js\nclass Repository {\n    // ...probably fetches users from a data source\n}\n\nmodule.exports = Repository;\n```", "```js\nclass Crypto {\n    // ...probably performs cryptographic comparisons\n}\n\nmodule.exports = Crypto;\n```", "```js\nIoc.autoload(\"App\", __dirname + \"/src\");\n\nlet authenticator = Ioc.make(\"App/Authenticator\");\n```", "```js\nclass Authenticator {\n    static get inject() {\n        return [\"App/Repository\", \"App/Crypto\"];\n    }\n\n    constructor(repository, crypto) {\n        this.repository = repository;\n        this.crypto = crypto;\n    }\n\n    authenticate(email, password) {\n        // ...authenticate the user details\n    }\n}\n```", "```js\nclass AuthenticatorLogger {\n    static get inject() {\n        return [\"App/Authenticator\"];\n    }\n\n    constructor(authenticator) {\n        this.authenticator = authenticator;\n    }\n\n    authenticate(email, password) {\n        this.log(\"authentication attempted\");\n        return this.authenticator.authenticate(email, password);\n    }\n\n    log(message) {\n        // ...store the log message\n    }\n}\n\nmodule.exports = AuthenticatorLogger;\n```", "```js\nconst Authenticator = Ioc.use(\"App/Authenticator\");\nconst AuthenticatorLogger = Ioc.use(\"App/AuthenticatorLogger\");\n\nIoc.bind(\"App/Authenticator\", function() {\n    return new AuthenticatorLogger(Ioc.make(Authenticator));\n});\n\nlet authenticator = Ioc.make(\"App/Authenticator\");\n```", "```js\nimport React from \"react\";\n\nclass PagesComponent extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        // ...get context.store state\n    }\n    componentDidMount() {\n        // ...add context.store change listener\n    }\n    componentWillUnmount() {\n        // ...remove context.store change listener\n    }\n    render() {\n        // ...return a list of pages\n        return <div>pages</div>;\n    }\n}\n\nmodule.exports = PagesComponent;\n```", "```js\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\n\nconst PagesComponent = Ioc.use(\"App/PagesComponent\");\n\nlet rendered = ReactDOMServer.renderToString(\n    <PagesComponent />\n);\n```", "```js\nconst PagesComponent = Ioc.use(\"App/PagesComponent\");\n\nIoc.bind(\"App/PagesComponent{}\", function() {\n    return (\n        <PagesComponent />\n    );\n});\n\n// ...then, when we want to decorate the component\n\nclass PagesComponentChrome extends React.Component {\n    render() {\n        return (\n            <div className=\"chrome\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nIoc.bind(\"App/PagesComponent{}\", function() {\n    return (\n        <PagesComponentChrome>\n            <PagesComponent />\n        </PagesComponentChrome>\n    );\n});\n\n// ...some time later\n\nlet rendered = ReactDOMServer.renderToString(\n    Ioc.use(\"App/PagesComponent{}\")\n);\n```", "```js\n// ...some time later\n\nconst NewPagesComponent = Ioc.use(\"App/PagesComponent{}\");\n\nlet rendered = ReactDOMServer.renderToString(\n    <div>{NewPagesComponent}</div>\n);\n```", "```js\nimport React from \"react\";\n\nclass PageEditorComponent extends React.Component {\n    onSave(e, refs) {\n        this.props.onSave(e, refs);\n    }\n    onCancel(e, refs) {\n        this.props.onCancel(e, refs);\n    }\n    render() {\n        let refs = {};\n\n        return (\n            <div>\n                <input type=\"text\"\n                    ref={ref => refs.title = ref} />\n                <input type=\"text\"\n                    ref={ref => refs.body = ref} />\n                <button onClick={e => this.onSave(e, refs)}>\n                    save\n                </button>\n                <button onClick={e => this.onCancel(e, refs)}>\n                    cancel\n                </button>\n            </div>\n        );\n    }\n}\n\nPageEditorComponent.propTypes = {\n    \"onSave\": React.PropTypes.func.isRequired,\n    \"onCancel\": React.PropTypes.func.isRequired\n};\n\nmodule.exports = PageEditorComponent;\n```", "```js\nclass PageEditorComponent extends React.Component {\n    onSave(e, refs) {\n        if (this.props.onBeforeSave) {\n            if (!this.props.onBeforeSave(e, refs)) {\n                return;\n            }\n        }\n\n        this.props.onSave(e, refs);\n\n        if (this.props.onAfterSave) {\n            this.props.onAfterSave(e, refs);\n        }\n    }\n    onCancel(e, refs) {\n        this.props.onCancel(e, refs);\n    }\n    render() {\n        let refs = {};\n\n        return (\n            <div>\n                <input type=\"text\"\n                    ref={ref => refs.title = ref} />\n                <input type=\"text\"\n                    ref={ref => refs.body = ref} />\n                <button onClick={e => this.onSave(e, refs)}>\n                    save\n                </button>\n                <button onClick={e => this.onCancel(e, refs)}>\n                    cancel\n                </button>\n            </div>\n        );\n    }\n}\n\nPageEditorComponent.propTypes = {\n    \"onSave\": React.PropTypes.func.isRequired,\n    \"onCancel\": React.PropTypes.func.isRequired,\n    \"onBeforeSave\": React.PropTypes.func,\n    \"onAfterSave\": React.PropTypes.func,\n};\n```", "```js\nconst onSave = (e, refs) => {\n    // ...save the data\n    console.log(\"saved\");\n};\n\nconst onCancel = (e, refs) => {\n    // ...cancel the edit\n    console.log(\"cancelled\");\n};\n\nconst onBeforeSave = (e, refs) => {\n    if (refs.title.value == \"a bad title\") {\n        console.log(\"validation failed\");\n        return false;\n    }\n\n    return true;\n};\n\nReactDOM.render(\n    <PageEditorComponent\n        onBeforeSave={onBeforeSave}\n        onSave={onSave}\n        onCancel={onCancel} />,\n    document.querySelector(\".react\")\n);\n```", "```js\nimport React from \"react\";\n\nclass PageComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = props.store.getState();\n    }\n    componentDidMount() {\n        this.remove = this.props.store.register(\n            this.onChange\n        );\n    }\n    componentWillUnmount() {\n        this.remove();\n    }\n    onChange() {\n        this.setState(this.props.store.getState());\n    }\n    render() {\n        const DummyPageViewComponent = use(\n            \"App/DummyPageViewComponent\"\n        );\n\n        const DummyPageEditorComponent = use(\n            \"App/DummyPageEditorComponent\"\n        );\n\n        const DummyPageActionsComponent = use(\n            \"App/DummyPageActionsComponent\"\n        );\n\n        return (\n            <div>\n                <DummyPageViewComponent />\n                <DummyPageEditorComponent />\n                <DummyPageActionsComponent />\n            </div>\n        );\n    }\n}\n\nmodule.exports = PageComponent;\n```", "```js\nimport { combineReducers, createStore } from \"redux\";\n\nIoc.bind(\"App/Reducers\", function() {\n    return [\n        (state = {}, action) => {\n            let pages = state.pages || [];\n\n            if (action.type == \"UPDATE_TITLE\") {\n                pages = pages.map(page => {\n                    if (page.id = payload.id) {\n                        page.title = payload.title;\n                    }\n\n                    return page;\n                });\n            }\n\n            return {\n                pages\n            };\n        }\n    ];\n});\n\nIoc.bind(\"App/Store\", function() {\n    const reducers = combineReducers(\n        Ioc.use(\"App/Reducers\")\n    );\n\n    return createStore(reducers);\n});\n\nconst Store = Ioc.use(\"App/Store\");\nconst PageComponent = Ioc.use(\"App/PageComponent\");\n\nlet rendered = ReactDOMServer.renderToString(\n    <PageComponent store={Store} />\n)\n```", "```js\nrender() {\n    const components = [\n        use(\"App/DummyPageViewComponent\"),\n        use(\"App/DummyPageEditorComponent\"),\n        use(\"App/DummyPageActionsComponent\"),\n    ];\n\n    return (\n        <div>\n            {components.map((Component, i) => {\n                return <Component key={i} />;\n            })}\n        </div>\n    );\n}\n```", "```js\nIoc.bind(\"App/PageComponentChildren\", function() {\n    return [\n        use(\"App/DummyPageViewComponent\"),\n        use(\"App/DummyPageEditorComponent\"),\n        use(\"App/DummyPageActionsComponent\"),\n    ];\n});\n```", "```js\nrender() {\n    const components = use(\"App/PageComponentChildren\");\n\n    return (\n        <div>\n            {components.map((Component, i) => {\n                return <Component key={i} />;\n            })}\n        </div>\n    );\n}\n```", "```js\nconst PageComponentChildren = use(\"App/PageComponentChildren\");\n\nIoc.bind(\"App/PageComponentChildren\", function() {\n    return [\n        ...PageComponentChildren,\n        use(\"App/DummyPageEmailPluginComponent\"),\n    ];\n});\n\nlet extended = ReactDOMServer.renderToString(\n    <PageComponent store={Store} />\n);\n```", "```js\nconst Reducers = use(\"App/Reducers\");\n\nIoc.bind(\"App/Reducers\", function() {\n    return [\n        ...Reducers,\n        (state, action) => {\n            if (action.type == \"EMAIL_PAGE\") {\n                // ...email the page\n            }\n\n            return state;\n        }\n    ]\n});\n```"]