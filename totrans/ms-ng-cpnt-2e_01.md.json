["```js\n// This class implements data and logic to represent a color \n// which establishes clean encapsulation. \nclass Color { \n  constructor(private red: number, private green: number, private blue: number) {} \n\n  // Using this function we can convert the internal color values \n  // to a hex color string like #ff0000 (red). \n  getHex(): string { \n    return '#' + Color.getHexValue(this.red) + Color.getHexValue(this.green) + \n      Color.getHexValue(this.blue); \n  } \n\n  // Static function on Color class to convert a number from \n  // 0 to 255 to a hexadecimal representation 00 to ff \n  static getHexValue(number): string { \n    const hex = number.toString(16); \n    return hex.length === 2 ? hex : '0' + hex; \n  } \n} \n\n// Our TShirt class expects two colors to be passed during \n// construction that will be used to render some HTML \nclass TShirt { \n  constructor(private backgroundColor: Color, private foregroundColor: Color) {} \n\n  // Function that returns some markup which represents our T-Shirts \n  getHtml(): string { \n    return ` \n      <t-shirt style=\"background-color: ${this.backgroundColor.getHex()}\"> \n        <t-shirt-text style=\"color: ${this.foregroundColor.getHex()}\"> \n          Awesome Shirt! \n        </t-shirt-text> \n      </t-shirt> \n    `; \n  } \n} \n\n// Instantiate a blue colour \nconst blue: Color = new Color(0, 0, 255); \n// Instantiate a red color \nconst red: Color = new Color(255, 0, 0); \n// Create a new shirt using the above colours \nconst awesomeShirt: TShirt = new TShirt(blue, red); \n// Adding the generated markup of our shirt to our document \ndocument.body.innerHTML = awesomeShirt.getHtml(); \n```", "```js\ninterface IDeveloper {\n  code(): void;\n}\n\ninterface IFisher {\n  fish(): void;\n}\n\nclass Developer implements IDeveloper { \n constructor(private name: string) {}\n\n code(): void { \n   console.log(`${this.name} writes some code!`); \n } \n} \n\nclass Fisher implements IFisher {\n constructor(private name: string) {}\n\n fish(): void { \n   console.log(`${this.name} catches a big fish!`); \n } \n} \n\nclass FishingDeveloper implements IFisher, IDeveloper { \n constructor(private name: string) { \n   this.name = name; \n   this.developerStuff = new Developer(name); \n   this.fisherStuff = new Fisher(name); \n } \n\n code(): void { \n   this.developerStuff.code(); \n } \n\n fish(): void { \n   this.fisherStuff.fish(); \n } \n} \n\nvar bob: FishingDeveloper = new FishingDeveloper('Bob'); \nbob.code(); \nbob.fish(); \n```", "```js\n<body> \n<template id=\"template\"> \n  <h1>This is a template!</h1> \n</template> \n</body> \n```", "```js\nvar template = document.querySelector('#template'); \nvar instance = document.importNode(template.content, true); \ndocument.body.appendChild(instance); \n```", "```js\nimport {Component} from '@angular/core';\n\n@Component({ \n  selector: 'hello-world', \n  template: '<div>Hello {{name}}</div>' \n}) \nclass HelloWorldComponent {\n  name: string = 'World';\n}\n```", "```js\nimport {Component} from '@angular/core';\n\n@Component({ \n  selector: 'shout-out', \n  template: '<strong>{{words}}</strong>' \n}) \nclass ShoutOutComponent { \n  @Input() words: string; \n} \n\n@Component({ \n  selector: 'hello-world' \n  template: '<shout-out words=\"Hello, {{name}}!\"></shout-out>'\n}) \nclass HelloWorldComponent { \n  name: string = 'World';\n}\n```", "```js\nimport {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {HelloWorldComponent} from './hello-world.component';\nimport {ShoutOutComponent} from './shout-out.component';\n\n@NgModule({\n  declarations: [HelloWorldComponent, ShoutOutComponent],\n  imports: [BrowserModule],\n  bootstrap: [HelloWorldComponent]\n})\nexport class HelloWorldAppModule { }\n\n```", "```js\nclass Fruit { \n  constructor(name) { this.name = name; } \n} \nconst apple = new Fruit('Apple'); \n```", "```js\nfunction Fruit(name) { this.name = name; } \nvar apple = new Fruit('Apple'); \n```", "```js\nimport SomeModule from './some-module.js'; \nvar something = SomeModule.doSomething(); \nexport default something; \n```", "```js\nconst header = '<header>\\n' + \n  '  <h1>' + title + '</h1>\\n' + \n  '</header>'; \n```", "```js\nconst header = ` \n  <header> \n    <h1>${title}</h1> \n  </header> \n`; \n```", "```js\n@Component({ \n  selector: 'hello-world', \n  template: '<div>Hello World</div>' \n}) \nclass HelloWorld {}\n```", "```js\nfunction logAccess(obj, prop, descriptor) { \n  const delegate = descriptor.value; \n  descriptor.value = function() { \n    console.log(`${prop} was called!`); \n    return delegate.apply(this, arguments); \n  }; \n} \n\nclass MoneySafe { \n  @logAccess \n  openSafe() { \n    this.open = true; \n  } \n} \n\nconst safe = new MoneySafe(); \nsafe.openSafe(); // openSafe was called! \n```", "```js\nfunction delay(time) { \n  return function(obj, prop, descriptor) { \n    const delegate = descriptor.value; \n    descriptor.value = function() { \n      const context = this; \n      const args = arguments; \n      return new Promise(function(success) { \n        setTimeout(function() { \n          success(delegate.apply(context, arguments)); \n        }, time); \n      }); \n    }; \n  }; \n} \n\nclass Doer { \n  @delay(1000) \n  doItLater() { \n    console.log('I did it!'); \n  } \n} \n\nconst doer = new Doer(); \ndoer.doItLater(); // I did it! (after 1 second) \n```", "```js\nclass TypeScriptClass { \n  constructor(@ParameterDecorator() param) {} \n}  \n```", "```js\nnode -e \"console.log('Hello World');\"\n```", "```js\nnpm install -g @angular/cli@6.0.8\n```", "```js\nng new my-first-app --prefix mac\n```", "```js\ncd my-first-app\nng serve\n```"]