["```js\ngit clone https://github.com/PacktPublishing/React-Application-Architecture-for-Production.git\n```", "```js\nnpm install\n```", "```js\ncp .env.example .env\n```", "```js\nnpm run stage:switch\n```", "```js\n? What stage do you want to switch to? (Use arrow\n keys)\n❯ chapter-02\n  chapter-03\n  chapter-03-start\n  chapter-04\n  chapter-04-start\n  chapter-05\n  chapter-05-start\n(Move up and down to reveal more choices)\n```", "```js\nimport {\n  notificationsStore,\n  Notification,\n} from '../notifications';\nconst notification = {\n  id: '123',\n  title: 'Hello World',\n  type: 'info',\n  message: 'This is a notification',\n} as Notification;\ndescribe('notifications store', () => {\n  it('should show and dismiss notifications', () => {\n    // 1\n    expect(\n      notificationsStore.getState().notifications.length\n    ).toBe(0);\n    // 2\n    notificationsStore\n      .getState()\n      .showNotification(notification);\n    expect(\n      notificationsStore.getState().notifications\n    ).toContainEqual(notification);\n    // 3\n    notificationsStore\n      .getState()\n      .dismissNotification(notification.id);\n    expect(\n      notificationsStore.getState().notifications\n    ).not.toContainEqual(notification);\n  });\n});\n```", "```js\nnpm run test\n```", "```js\nimport DashboardJobsPage from '@/pages/dashboard/jobs';\nimport { getUser } from '@/testing/mocks/utils';\nimport { testData } from '@/testing/test-data';\nimport {\n  appRender,\n  checkTableValues,\n  screen,\n  waitForLoadingToFinish,\n} from '@/testing/test-utils';\n// 1\njest.mock('@/features/auth', () => ({\n  useUser: () => ({ data: getUser() }),\n}));\ndescribe('Dashboard Jobs Page', () => {\n  it('should render the jobs list', async () => {\n    // 2\n    await appRender(<DashboardJobsPage />);\n    // 3\n    expect(screen.getByText(/jobs/i)).toBeInTheDocument();\n    // 4\n    await waitForLoadingToFinish();\n    // 5\n    checkTableValues({\n      container: screen.getByTestId('jobs-list'),\n      data: testData.jobs,\n      columns: ['position', 'department', 'location'],\n    });\n  });\n});\n```", "```js\nimport DashboardJobPage from '@/pages/dashboard/jobs/\n  [jobId]';\nimport { testData } from '@/testing/test-data';\nimport {\n  appRender,\n  screen,\n  waitForLoadingToFinish,\n} from '@/testing/test-utils';\nconst job = testData.jobs[0];\nconst router = {\n  query: {\n    jobId: job.id,\n  },\n};\n// 1\njest.mock('next/router', () => ({\n  useRouter: () => router,\n}));\ndescribe('Dashboard Job Page', () => {\n  it('should render all the job details', async () => {\n    // 2\n    await appRender(<DashboardJobPage />);\n    await waitForLoadingToFinish();\n    const jobPosition = screen.getByRole('heading', {\n      name: job.position,\n    });\n    const info = screen.getByText(job.info);\n    // 3\n    expect(jobPosition).toBeInTheDocument();\n    expect(info).toBeInTheDocument();\n  });\n});\n```", "```js\nimport DashboardCreateJobPage from '@/pages/dashboard/jobs/\n  create';\nimport {\n  appRender,\n  screen,\n  userEvent,\n  waitFor,\n} from '@/testing/test-utils';\nconst router = {\n  push: jest.fn(),\n};\n// 1\njest.mock('next/router', () => ({\n  useRouter: () => router,\n}));\nconst jobData = {\n  position: 'Software Engineer',\n  location: 'London',\n  department: 'Engineering',\n  info: 'Lorem Ipsum',\n};\ndescribe('Dashboard Create Job Page', () => {\n  it('should create a new job', async () => {\n    // 2\n    appRender(<DashboardCreateJobPage />);\n    const positionInput = screen.getByRole('textbox', {\n      name: /position/i,\n    });\n    const locationInput = screen.getByRole('textbox', {\n      name: /location/i,\n    });\n    const departmentInput = screen.getByRole('textbox', {\n      name: /department/i,\n    });\n    const infoInput = screen.getByRole('textbox', {\n      name: /info/i,\n    });\n    const submitButton = screen.getByRole('button', {\n      name: /create/i,\n    });\n    // 3\n    userEvent.type(positionInput, jobData.position);\n    userEvent.type(locationInput, jobData.location);\n    userEvent.type(departmentInput, jobData.department);\n    userEvent.type(infoInput, jobData.info);\n    // 4\n    userEvent.click(submitButton);\n    // 5\n    await waitFor(() =>\n      expect(\n        screen.getByText(/job created!/i)\n      ).toBeInTheDocument()\n    );\n  });\n});\n```", "```js\nimport PublicOrganizationPage, {\n  getServerSideProps,\n} from '@/pages/organizations/[organizationId]';\nimport { testData } from '@/testing/test-data';\nimport {\n  appRender,\n  checkTableValues,\n  screen,\n} from '@/testing/test-utils';\nconst organization = testData.organizations[0];\nconst jobs = testData.jobs;\ndescribe('Public Organization Page', () => {\n  it('should use getServerSideProps that fetches and\n    returns the proper data', async () => {\n  });\n  it('should render the organization details', async () => {\n  });\n  it('should render the not found message if the\n    organization is not found', async () => {\n  });\n});\n```", "```js\nit('should use getServerSideProps that fetches and returns\n  the proper data', async () => {\n  const { props } = await getServerSideProps({\n    params: {\n      organizationId: organization.id,\n    },\n  } as any);\n  expect(props.organization).toEqual(organization);\n  expect(props.jobs).toEqual(jobs);\n});\n```", "```js\nit('should render the organization details', async () => {\n  appRender(\n    <PublicOrganizationPage\n      organization={organization}\n      jobs={jobs}\n    />\n  );\n  expect(\n    screen.getByRole('heading', {\n      name: organization.name,\n    })\n  ).toBeInTheDocument();\n  expect(\n    screen.getByRole('heading', {\n      name: organization.email,\n    })\n  ).toBeInTheDocument();\n  expect(\n    screen.getByRole('heading', {\n      name: organization.phone,\n    })\n  ).toBeInTheDocument();\n  checkTableValues({\n    container: screen.getByTestId('jobs-list'),\n    data: jobs,\n    columns: ['position', 'department', 'location'],\n  });\n});\n```", "```js\nit('should render the not found message if the organization is not found', async () => {\n  appRender(\n    <PublicOrganizationPage\n      organization={null}\n      jobs={[]}\n    />\n  );\n  const notFoundMessage = screen.getByRole('heading', {\n    name: /not found/i,\n  });\n  expect(notFoundMessage).toBeInTheDocument();\n});\n```", "```js\nimport PublicJobPage, {\n  getServerSideProps,\n} from '@/pages/organizations/[organizationId]/jobs/[jobId]';\nimport { testData } from '@/testing/test-data';\nimport { appRender, screen } from '@/testing/test-utils';\nconst job = testData.jobs[0];\nconst organization = testData.organizations[0];\ndescribe('Public Job Page', () => {\n  it('should use getServerSideProps that fetches and\n    returns the proper data', async () => {\n  });\n  it('should render the job details', async () => {\n  });\n  it('should render the not found message if the data does\n    not exist', async () => {\n  });\n});\n```", "```js\nit('should use getServerSideProps that fetches and returns\n  the proper data', async () => {\n  const { props } = await getServerSideProps({\n    params: {\n      jobId: job.id,\n      organizationId: organization.id,\n    },\n  } as any);\n  expect(props.job).toEqual(job);\n  expect(props.organization).toEqual(organization);\n});\n```", "```js\nit('should render the job details', async () => {\n  appRender(\n    <PublicJobPage\n      organization={organization}\n      job={job}\n    />\n  );\n  const jobPosition = screen.getByRole('heading', {\n    name: job.position,\n  });\n  const info = screen.getByText(job.info);\n  expect(jobPosition).toBeInTheDocument();\n  expect(info).toBeInTheDocument();\n});\n```", "```js\nit('should render the not found message if the data does not exist', async () => {\n  const { rerender } = appRender(\n    <PublicJobPage organization={null} job={null} />\n  );\n  const notFoundMessage = screen.getByRole('heading', {\n    name: /not found/i,\n  });\n  expect(notFoundMessage).toBeInTheDocument();\n  rerender(\n    <PublicJobPage\n      organization={organization}\n      job={null}\n    />\n  );\n  expect(notFoundMessage).toBeInTheDocument();\n  rerender(\n    <PublicJobPage organization={null} job={job} />\n  );\n  expect(notFoundMessage).toBeInTheDocument();\n  rerender(\n    <PublicJobPage\n      organization={organization}\n      job={{ ...job, organizationId: '123' }}\n    />\n  );\n  expect(notFoundMessage).toBeInTheDocument();\n});\n```", "```js\nimport LoginPage from '@/pages/auth/login';\nimport {\n  appRender,\n  screen,\n  userEvent,\n  waitFor,\n} from '@/testing/test-utils';\n// 1\nconst router = {\n  replace: jest.fn(),\n  query: {},\n};\njest.mock('next/router', () => ({\n  useRouter: () => router,\n}));\ndescribe('Login Page', () => {\n  it('should login the user into the dashboard', async () => {\n    // 2\n    await appRender(<LoginPage />);\n    const emailInput = screen.getByRole('textbox', {\n      name: /email/i,\n    });\n    const passwordInput =\n      screen.getByLabelText(/password/i);\n    const submitButton = screen.getByRole('button', {\n      name: /log in/i,\n    });\n    const credentials = {\n      email: 'user1@test.com',\n      password: 'password',\n    };\n    // 3\n    userEvent.type(emailInput, credentials.email);\n    userEvent.type(passwordInput, credentials.password);\n    userEvent.click(submitButton);\n    // 4\n    await waitFor(() =>\n      expect(router.replace).toHaveBeenCalledWith(\n        '/dashboard/jobs'\n      )\n    );\n  });\n});\n```", "```js\nnpm run test\n```", "```js\nnpm run test:watch\n```", "```js\nimport { testData } from '../../src/testing/test-data';\nconst user = testData.users[0];\nconst job = testData.jobs[0];\ndescribe('dashboard', () => {\n  it('should authenticate into the dashboard', () => {\n  });\n  it('should navigate to and visit the job details page', () => {\n  });\n  it('should create a new job', () => {\n  });\n  it('should log out from the dashboard', () => {\n  });\n});\n```", "```js\nit('should authenticate into the dashboard', () => {\n  cy.clearCookies();\n  cy.clearLocalStorage();\n  cy.visit('http://localhost:3000/dashboard/jobs');\n  cy.wait(500);\n  cy.url().should(\n    'equal',\n    'http://localhost:3000/auth/login?redirect=/dashboard/\n      jobs'\n  );\n  cy.findByRole('textbox', {\n    name: /email/i,\n  }).type(user.email);\n  cy.findByLabelText(/password/i).type(\n    user.password.toLowerCase()\n  );\n  cy.findByRole('button', {\n    name: /log in/i,\n  }).click();\n  cy.findByRole('heading', {\n    name: /jobs/i,\n  }).should('exist');\n});\n```", "```js\nit('should navigate to and visit the job details page', () => {\n  cy.findByRole('row', {\n    name: new RegExp(\n      `${job.position} ${job.department} ${job.location}\n        View`,\n      'i'\n    ),\n  }).within(() => {\n    cy.findByRole('link', {\n      name: /view/i,\n    }).click();\n  });\n  cy.findByRole('heading', {\n    name: job.position,\n  }).should('exist');\n  cy.findByText(new RegExp(job.info, 'i')).should(\n    'exist'\n  );\n});\n```", "```js\nit('should create a new job', () => {\n  cy.go('back');\n  cy.findByRole('link', {\n    name: /create job/i,\n  }).click();\n  const jobData = {\n    position: 'Software Engineer',\n    location: 'London',\n    department: 'Engineering',\n    info: 'Lorem Ipsum',\n  };\n  cy.findByRole('textbox', {\n    name: /position/i,\n  }).type(jobData.position);\n  cy.findByRole('textbox', {\n    name: /department/i,\n  }).type(jobData.department);\n  cy.findByRole('textbox', {\n    name: /location/i,\n  }).type(jobData.location);\n  cy.findByRole('textbox', {\n    name: /info/i,\n  }).type(jobData.info);\n  cy.findByRole('button', {\n    name: /create/i,\n  }).click();\n  cy.findByText(/job created!/i).should('exist');\n});\n```", "```js\nit('should log out from the dashboard', () => {\n  cy.findByRole('button', {\n    name: /log out/i,\n  }).click();\n  cy.wait(500);\n  cy.url().should(\n    'equal',\n    'http://localhost:3000/auth/login'\n  );\n});\n```", "```js\nimport { testData } from '../../src/testing/test-data';\nconst organization = testData.organizations[0];\nconst job = testData.jobs[0];\ndescribe('public application flow', () => {\n  it('should display the organization public page', () => {\n  });\n  it('should navigate to and display the public job details\n    page', () => {\n  });\n});\n```", "```js\nit('should display the organization public page', () => {\n  cy.visit(\n    `http://localhost:3000/organizations/${organization.id}`\n  );\n  cy.findByRole('heading', {\n    name: organization.name,\n  }).should('exist');\n  cy.findByRole('heading', {\n    name: organization.email,\n  }).should('exist');\n  cy.findByRole('heading', {\n    name: organization.phone,\n  }).should('exist');\n  cy.findByText(\n    new RegExp(organization.info, 'i')\n  ).should('exist');\n});\n```", "```js\nit('should navigate to and display the public job details\n  page', () => {\n  cy.findByTestId('jobs-list').should('exist');\n  cy.findByRole('row', {\n    name: new RegExp(\n      `${job.position} ${job.department} ${job.location}\n        View`,\n      'i'\n    ),\n  }).within(() => {\n    cy.findByRole('link', {\n      name: /view/i,\n    }).click();\n  });\n  cy.url().should(\n    'equal',\n    `http://localhost:3000/organizations/$\n      {organization.id}/jobs/${job.id}`\n  );\n  cy.findByRole('heading', {\n    name: job.position,\n  }).should('exist');\n  cy.findByText(new RegExp(job.info, 'i')).should(\n    'exist'\n  );\n});\n```", "```js\nnpm run build\n```", "```js\nnpm run e2e\n```", "```js\nnpm run e2e:headless\n```"]