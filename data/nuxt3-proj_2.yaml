- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Building a Simple Portfolio Using Tailwind CSS and a Dive into Nuxt 3’s Project
    Structure
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tailwind CSS 和 Nuxt 3 项目结构深入探究构建简单投资组合
- en: In this second chapter, we will intertwine the robustness of Nuxt 3 with the
    stylistic efficiency of Tailwind CSS to construct a portfolio that gracefully
    showcases your projects and technical prowess. Tailwind CSS, renowned for its
    utility-first approach, enables us to create intricate designs with minimal custom
    CSS, facilitating a streamlined development process. When combined with Nuxt 3,
    a framework lauded for its developer-friendly abstractions and powerful Vue.js
    functionalities, we equip ourselves with a potent toolkit to build a portfolio
    that is not only functionally stellar but also visually captivating.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将结合 Nuxt 3 的强大功能和 Tailwind CSS 的风格效率，构建一个优雅展示您的项目和技能的投資組合。Tailwind CSS
    以其以实用工具为主的理念而闻名，使我们能够用最少的自定义 CSS 创建复杂的设计，从而简化开发过程。当与以开发者友好的抽象和强大的 Vue.js 功能著称的
    Nuxt 3 结合使用时，我们装备了一个强大的工具集，以构建不仅功能卓越而且视觉上吸引人的投资组合。
- en: In this chapter, we will meticulously create a portfolio, ensuring each component
    and style is crafted with precision and intentionality. We aim to ensure your
    projects are not only showcased but also narrated in a manner that resonates with
    every visitor, providing them with not just a visual experience but also a journey
    through your technical endeavors and achievements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将精心创建一个投资组合，确保每个组件和样式都是精心制作且具有目的性的。我们的目标是确保您的项目不仅得到展示，而且以一种与每位访客产生共鸣的方式讲述，为他们提供不仅仅是视觉体验，而且是一次通过您的技术努力和成就的旅程。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Setting up and integrating with **TailwindCSS 3**
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和集成 **TailwindCSS 3**
- en: Creating a website layout and customizing the font
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建网站布局并自定义字体
- en: Managing images in the `assets` folder
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理位于 `assets` 文件夹中的图片
- en: Creating the `ProjectShowcase` and `SkillChip` components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `ProjectShowcase` 和 `SkillChip` 组件
- en: Styling directly within the component’s scope
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组件的作用域内直接进行样式化
- en: Creating a `useScrollTo` composable
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `useScrollTo` 可组合组件
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter02](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter02).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 [https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter02](https://github.com/PacktPublishing/Nuxt-3-Projects/tree/main/chapter02)
    找到。
- en: The CiA video for this chapter can be found on [https://packt.link/kCqMV](https://packt.link/kCqMV)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CiA 视频可以在 [https://packt.link/kCqMV](https://packt.link/kCqMV) 找到
- en: Essential background – what is Tailwind CSS?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的背景知识 - 什么是 Tailwind CSS？
- en: Before we commence our coding journey, let’s equip ourselves with some pivotal
    knowledge about Tailwind CSS, which is a utility-first CSS framework that provides
    low-level utility classes to build designs directly in your markup. Unlike other
    CSS frameworks that offer predefined components, Tailwind allows for more flexibility
    and customization in your design implementation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编码之旅之前，让我们装备一些关于 Tailwind CSS 的关键知识，Tailwind CSS 是一个以实用工具为主的 CSS 框架，它提供了低级别的实用类，可以直接在您的标记中构建设计。与其他提供预定义组件的
    CSS 框架不同，Tailwind 允许在您的设计实现中拥有更多的灵活性和定制性。
- en: 'For a more in-depth look at Tailwind CSS and its features, you can visit Tailwind
    CSS’s official website: [https://tailwindcss.com/](https://tailwindcss.com/).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 想要更深入地了解 Tailwind CSS 及其功能，您可以访问 Tailwind CSS 的官方网站：[https://tailwindcss.com/](https://tailwindcss.com/).
- en: Next, let’s go through the process of setting up and integrating Tailwind CSS
    into your project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解如何设置和集成 Tailwind CSS 到您的项目中。
- en: Setting up and integrating with Tailwind CSS
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和集成 Tailwind CSS
- en: We’ll initiate our portfolio journey by crafting a new Nuxt 3 project from scratch.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过从头开始创建一个新的 Nuxt 3 项目来开始我们的投资组合之旅。
- en: Create a new project
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: As we learned in the previous chapter, let’s create a new Nuxt 3 project named
    `my-portfolio` and open it in VS Code to proceed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在上一章所学，让我们创建一个名为 `my-portfolio` 的新 Nuxt 3 项目，并在 VS Code 中打开它以继续操作。
- en: 'Before we navigate further, it’s prudent to ensure that our setup was successful.
    Let’s spin up our development server and take a glimpse at the initial state of
    our project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步导航之前，确保我们的设置成功是明智的。让我们启动我们的开发服务器，并查看我们项目的初始状态：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Executing `pnpm dev` will ignite the development server, and you should be greeted
    with the default `NuxtWelcome` component when you visit [http://localhost:3000](http://localhost:3000)
    in your web browser. This veritable component signifies that our project has been
    set up successfully and we’re primed to weave in Tailwind CSS in the next steps.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `pnpm dev` 将启动开发服务器，当你使用网络浏览器访问 [http://localhost:3000](http://localhost:3000)
    时，你应该会看到默认的 `NuxtWelcome` 组件。这个组件实际上标志着我们的项目已成功设置，我们准备在下一步中整合 Tailwind CSS。
- en: Installing Tailwind CSS
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Tailwind CSS
- en: Before we start, let’s equip our development environment with a tool that’ll
    enhance our coding experience – **Tailwind CSS IntelliSense**. If you’re utilizing
    **Visual Studio Code** (**VS Code**) as your code editor, consider installing
    the Tailwind CSS IntelliSense extension. This extension amplifies your development
    efficiency by providing autocompletions for Tailwind CSS classes, syntax highlighting,
    and much more, making it easier to apply styles without needing to memorize or
    frequently refer to the documentation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们为我们的开发环境配备一个将增强我们的编码体验的工具——**Tailwind CSS IntelliSense**。如果你使用 **Visual
    Studio Code**（**VS Code**）作为代码编辑器，请考虑安装 Tailwind CSS IntelliSense 扩展。此扩展通过提供 Tailwind
    CSS 类的自动补全、语法高亮等功能，提高了你的开发效率，使你更容易应用样式，无需记住或频繁查阅文档。
- en: To install, simply navigate to the Extensions view by clicking on the Extensions
    icon in the Activity Bar on the left side of the window, search for `Tailwind
    CSS IntelliSense`, and click on **Install**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装，只需点击窗口左侧活动栏中的扩展图标，导航到扩展视图，搜索 `Tailwind CSS IntelliSense`，然后点击 **安装**。
- en: '![Figure 2.1: The Tailwind VS Code extension](img/B19760_02_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1：Tailwind VS Code 扩展](img/B19760_02_01.jpg)'
- en: 'Figure 2.1: The Tailwind VS Code extension'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：Tailwind VS Code 扩展
- en: Now, your VS Code is supercharged with Tailwind CSS capabilities, streamlining
    your development with intelligent code completion and error-checking. Let’s proceed,
    ensuring that our coding journey is as smooth as possible!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的 VS Code 已经通过 Tailwind CSS 功能得到了增强，智能代码补全和错误检查将简化你的开发过程。让我们继续前进，确保我们的编码之旅尽可能顺利！
- en: 'Firstly, we shall incorporate Tailwind CSS into our project. Execute the following
    command to install the Tailwind CSS module for Nuxt 3:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将 Tailwind CSS 集成到我们的项目中。执行以下命令以安装 Nuxt 3 的 Tailwind CSS 模块：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Post-installation, we direct our Nuxt 3 project to utilize Tailwind CSS. This
    involves a slight modification to the `nuxt.config.ts` file. Navigate to the modules
    array and introduce the Tailwind CSS package as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，我们将 Nuxt 3 项目指向使用 Tailwind CSS。这需要对 `nuxt.config.ts` 文件进行轻微修改。导航到模块数组，并按以下方式引入
    Tailwind CSS 包：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Appending `'@nuxtjs/tailwindcss` to the modules array ensures that Tailwind
    CSS is recognized and utilized by our Nuxt 3 project, enabling the use of its
    utility classes within our components.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `'@nuxtjs/tailwindcss'` 添加到模块数组中确保 Tailwind CSS 被我们的 Nuxt 3 项目识别并使用，使我们能够在组件中使用其实用类。
- en: To tailor Tailwind CSS to meet our project’s aesthetic and functional needs,
    we will craft a configuration file, named `tailwind.config.js`. This file will
    serve as our control center for any adjustments or customizations to the default
    setup of Tailwind CSS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Tailwind CSS 符合我们项目的美学和功能需求，我们将创建一个名为 `tailwind.config.js` 的配置文件。此文件将作为我们调整或自定义
    Tailwind CSS 默认设置的指挥中心。
- en: 'Let’s generate `tailwind.config.js` at the root of our project:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目的根目录下生成 `tailwind.config.js`：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also run the following command to generate the same file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以运行以下命令来生成相同的文件：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `tailwind.config.js` file will act as our vessel for custom styling, component
    definition, and theme adjustments, ensuring that our utility classes are optimized
    and maintain a consistent design language throughout our project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`tailwind.config.js` 文件将作为我们自定义样式、组件定义和主题调整的载体，确保我们的实用类优化，并在整个项目中保持一致的设计语言。'
- en: 'Navigating from our generalized setup into something more specific, here’s
    my preferred startup configuration in Tailwind CSS:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的通用设置到更具体的设置，以下是我首选的 Tailwind CSS 启动配置：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Diving deeper, let’s explore how each part of my chosen configuration ensures
    a smooth, consistent, and Vue-themed aesthetic across our portfolio.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 深入探讨，让我们看看我选择的配置的每个部分是如何确保我们的项目在视觉和功能上保持平滑、一致和 Vue 主题风格的。
- en: Color customization
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色自定义
- en: Tailwind CSS allows us to customize its default colors, offering the flexibility
    to infuse our own brand or thematic colors in a project. By specifying our colors
    in the configuration, such as green shades that echo the Vue.js color scheme,
    we ensure that our design is both aesthetically pleasing and subtly communicates
    our technological focus to the viewer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind CSS 允许我们自定义其默认颜色，为我们提供了在项目中注入自己的品牌或主题颜色的灵活性。通过在配置中指定我们的颜色，例如与 Vue.js
    颜色方案相呼应的绿色阴影，我们确保我们的设计既美观又巧妙地向观众传达我们的技术焦点。
- en: Container customization
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器自定义
- en: The container section ensures that our content is neatly centered and provides
    horizontal padding to prevent content from abutting the edge of the viewport.
    By default, we have a `1.5rem` horizontal padding, which extends to `4rem` for
    larger `(lg, xl, and 2xl)` screens, ensuring our content remains readable and
    aesthetically placed across all screen sizes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 容器部分确保我们的内容整齐居中，并为内容提供水平填充，以防止内容紧贴视口边缘。默认情况下，我们有 `1.5rem` 的水平填充，对于更大的 `(lg,
    xl 和 2xl)` 屏幕，填充扩展到 `4rem`，确保我们的内容在所有屏幕尺寸上都是可读的和美观的。
- en: Screen breakpoints
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 屏幕断点
- en: The screens section in Tailwind CSS configuration utilizes itsresponsive design
    by defining breakpoints. Breakpoints are viewport widths where the layout of the
    page will change, aiming to provide an optimal user experience across various
    screen sizes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tailwind CSS 配置中的屏幕部分，通过定义断点来利用其响应式设计。断点是视口宽度，页面布局将在这些宽度处发生变化，旨在为各种屏幕尺寸提供最佳的用户体验。
- en: In our custom configuration, we opted for these particular breakpoints to align
    more closely with the widely used Bootstrap framework’s breakpoints.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的自定义配置中，我们选择了这些特定的断点，以便与广泛使用的 Bootstrap 框架的断点更紧密地对齐。
- en: 'Wrapping up the configuration setup, let’s put our adjustments to the test
    by crafting a simple layout. Create a `div` element and apply our custom primary
    color to ensure that our color configuration has been applied correctly. Navigate
    to your `app.vue` file and clear the existing template content. Now, let’s infuse
    our custom primary color in a welcoming header:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成配置设置后，让我们通过制作一个简单的布局来测试我们的调整。创建一个 `div` 元素，并应用我们的自定义主色调，以确保我们的颜色配置已正确应用。导航到你的
    `app.vue` 文件，清除现有的模板内容。现在，让我们在欢迎标题中注入我们的自定义主色调：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This simple test allows us to visually validate that our Tailwind CSS customizations
    have been successfully integrated into the Nuxt 3 project. Following the implementation,
    you should see a screen similar to the following depiction:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的测试使我们能够直观地验证我们的 Tailwind CSS 自定义是否已成功集成到 Nuxt 3 项目中。在实施之后，你应该会看到一个类似于以下描述的屏幕：
- en: '![Figure 2.2: Tailwind CSS configured](img/B19760_02_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2：配置好的 Tailwind CSS](img/B19760_02_02.jpg)'
- en: 'Figure 2.2: Tailwind CSS configured'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：配置好的 Tailwind CSS
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Sometimes, changes in the Tailwind CSS configuration might not reflect immediately
    in your development environment. If the color doesn’t apply as expected, halt
    your development server and restart it to ensure all configurations are properly
    loaded.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Tailwind CSS 配置中的更改可能不会立即反映在你的开发环境中。如果颜色没有按预期应用，请停止你的开发服务器并重新启动它，以确保所有配置都已正确加载。
- en: In our initial journey, we’ve successfully set up and integrated Tailwind CSS
    into our Nuxt 3 project. We tested the waters by applying our custom primary color
    to a header in our app, ensuring our foundational setup is robust and ready for
    the next steps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的初始旅程中，我们已经成功设置并集成了 Tailwind CSS 到我们的 Nuxt 3 项目中。我们通过在我们的应用中应用自定义主色调到标题来测试水，确保我们的基础设置稳固且为下一步做好准备。
- en: As we transition into the next segment, we’ll start creating the layout for
    our portfolio, ensuring our custom styles seamlessly permeate through every component
    and view.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们过渡到下一个部分时，我们将开始创建我们投资组合的布局，确保我们的自定义样式能够无缝地渗透到每个组件和视图中。
- en: Creating the website layout and customizing the font
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网站布局和自定义字体
- en: Stepping into the next section of our development saga, our focus shifts toward
    establishing the visual groundwork of our portfolio. In this crucial phase, every
    design decision, from layout constructs to typographic selections, converges to
    narrate our professional story through a seamless user journey. Let’s delve into
    crafting this visual journey, commencing with a fundamental element – typography.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 进入我们开发传奇的下一部分，我们的重点转向建立我们作品集的视觉基础。在这个关键阶段，从布局结构到字体选择，每一个设计决策都汇聚在一起，通过无缝的用户旅程讲述我们的专业故事。让我们深入探讨如何打造这个视觉之旅，从基本元素——字体开始。
- en: Embedding the Lato font (or any Google font)
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入 Lato 字体（或任何 Google 字体）
- en: In the structural development of our layout, typographic choices play a crucial
    role, serving not only the aesthetic but also enhancing the readability and user
    experience of our portfolio. Our chosen font, Lato, is known for its clean, sans-serif
    character, offering a professional yet approachable vibe to our portfolio’s textual
    content.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们布局的结构发展中，字体选择起着至关重要的作用，它不仅服务于美观，还增强了我们作品集的可读性和用户体验。我们选择的字体 Lato 以其干净的无衬线字符而闻名，为我们的作品集文本内容提供了专业而亲切的感觉。
- en: To integrate Lato into our Nuxt project, we have a couple of viable options.
    Let’s dissect both.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Lato 集成到我们的 Nuxt 项目中，我们有几种可行的选择。让我们来分析一下这两种。
- en: Option 1 – manually adding a font to nuxt.config.ts
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 1 – 手动将字体添加到 nuxt.config.ts
- en: The first option involves fetching and utilizing a direct link from Google Fonts.
    When you select Lato on the `<``head>` section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法涉及从 Google Fonts 获取并使用直接链接。当你在 `<head>` 部分选择 Lato 时。
- en: 'In Nuxt 3, to insert links, meta tags, scripts, or other elements within the
    `<head>` of your HTML, we must configure them within the app object in the `nuxt.config.ts`
    file. The subsequent configuration illustrates how to integrate external links:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nuxt 3 中，要在 HTML 的 `<head>` 中插入链接、元标签、脚本或其他元素，我们必须在 `nuxt.config.ts` 文件中的
    app 对象内进行配置。下面的配置说明了如何集成外部链接：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s a breakdown of the preceding code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对前面代码的分解：
- en: '`preconnect`: This directive establishes early connections to the domain, optimizing
    resource fetching and, thereby, improving loading performance'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preconnect`：此指令建立了到域的早期连接，优化了资源获取，从而提高了加载性能'
- en: The `stylesheet` link is where we specify the Lato font and its weights (100,
    300, 400, 700, and 900), which we intend to use throughout our project
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stylesheet` 链接是我们指定 Lato 字体及其权重（100、300、400、700 和 900），这是我们打算在整个项目中使用的。'
- en: Option 2 – using the `@nuxtjs/google-fonts` package
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 2 – 使用 `@nuxtjs/google-fonts` 包
- en: A seamless, alternative method to introduce Google Fonts into our Nuxt 3 project
    is by utilizing the `@nuxtjs/google-fonts` module. This Plug and Play module embeds
    Google fonts on our website.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Google 字体无缝引入我们的 Nuxt 3 项目的另一种替代方法是利用 `@nuxtjs/google-fonts` 模块。此模块可以轻松地将
    Google 字体嵌入到我们的网站上。
- en: Let’s walk through the integration process and then delve into configuring Lato
    for our portfolio.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步走过集成过程，然后深入配置 Lato 以适应我们的作品集。
- en: 'Start by installing the `@``nuxtjs/google-fonts` dependency:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装 `@nuxtjs/google-fonts` 依赖项：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we’ll register this module within the `nuxt.config.ts` file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `nuxt.config.ts` 文件中注册此模块：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To specify the Google font(s) and their respective weights, utilize the `googleFonts`
    property in `nuxt.config.ts`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定 Google 字体及其相应的权重，请使用 `nuxt.config.ts` 中的 `googleFonts` 属性：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here’s a breakdown:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个分解：
- en: '`families`: This property is an object where you specify the Google Font family
    (or families) you wish to include in your project. Each font family is an object
    key.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`families`：此属性是一个对象，您在其中指定要包含在项目中的 Google 字体家族（或家族）。每个字体家族都是一个对象键。'
- en: 'The `key` reflects the name of the google font. , and the `value` determines
    the font weights to be loaded. In our context, `Lato: [100, 300, 400, 700, 900]`
    implies that we are instructing the module to load the Lato font family with the
    specified font weights (100, 300, 400, 700, and 900) for our project.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` 反映了谷歌字体的名称，而 `value` 决定了要加载的字体权重。在我们的上下文中，`Lato: [100, 300, 400, 700,
    900]` 意味着我们指示该模块为我们的项目加载具有指定字重（100、300、400、700 和 900）的 Lato 字体家族。'
- en: With two viable options at your disposal – directly embedding font links into
    your `nuxt.config.ts` or utilizing the `@nuxtjs/google-fonts` module – you’re
    empowered to choose the method that aligns best with your project needs. Having
    configured our chosen font, let’s move toward tailoring our `tailwind.config.js`
    to recognize and utilize Lato throughout our design.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有两个可行的选项可供选择——直接将字体链接嵌入到你的 `nuxt.config.ts` 中，或者使用 `@nuxtjs/google-fonts`
    模块——你可以选择最适合你项目需求的方法。配置好我们选择的字体后，让我们转向定制我们的 `tailwind.config.js`，以便在整个设计中识别和使用
    Lato。
- en: 'To make Lato easily accessible throughout our project using Tailwind CSS’s
    utility classes, we modify our `tailwind.config.js` to recognize Lato as the default
    sans-serif font:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Lato 通过 Tailwind CSS 的实用类在整个项目中易于访问，我们修改 `tailwind.config.js`，使其识别 Lato
    作为默认的无衬线字体：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This adjustment ensures that whenever we apply Tailwind CSS’s `font-sans` utility
    (which is applied by default), Lato is utilized, facilitating a coherent typography
    across our portfolio.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调整确保了每次我们应用 Tailwind CSS 的 `font-sans` 实用类（默认应用）时，都会使用 Lato，从而在我们的投资组合中实现一致的排版。
- en: Now that we’ve sorted out our font options, let’s move on to laying out the
    foundation of our website in the next step.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经整理好了字体选项，让我们继续下一步，为我们的网站布局基础。
- en: Creating the layout
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建布局
- en: 'First, we lay out the main `<div>` in the `app.vue` file with a background
    color that sets the overall tone for our portfolio:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `app.vue` 文件中布局主要的 `<div>`，设置一个背景颜色，为我们的投资组合设定整体基调：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, `bg-neutral` is a Tailwind CSS class that applies the neutral color we
    defined earlier in our `tailwind.config.js`. This serves as the backdrop for our
    entire portfolio.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`bg-neutral` 是一个 Tailwind CSS 类，它应用了我们之前在 `tailwind.config.js` 中定义的中性颜色。这作为我们整个投资组合的背景。
- en: 'Next, let’s construct the header. Here’s how we’ll do that:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们构建标题。这是我们将如何做到的：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that the `hidden md:block` Tailwind CSS class hides `<nav>` by default
    and displays it as a block on medium (`md:`) screens and up, catering to responsive
    design.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`hidden md:block` Tailwind CSS 类默认隐藏 `<nav>`，并在中等 (`md:`) 屏幕及更高版本上显示为块状，以适应响应式设计。
- en: But how about the header navigation links? Shall we add them manually and repeat
    them for each one? But what if we want to add more header links in the future?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但关于标题导航链接呢？我们是否要手动添加并重复每个链接？但如果我们将来想要添加更多的标题链接怎么办？
- en: 'There’s no need to manually update the template each time. Instead, let’s harness
    Vue’s dynamic rendering capabilities. In your script, define an array named `headerLinks`,
    as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要每次都手动更新模板。相反，让我们利用 Vue 的动态渲染能力。在你的脚本中，定义一个名为 `headerLinks` 的数组，如下所示：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, modify the `<li>` elements in your header to loop through this array,
    like so:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，修改你的标题中的 `<li>` 元素，使其循环遍历这个数组，如下所示：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By combining Tailwind CSS and Vue.js, especially the Composition API, we craft
    a layout that’s as functional as it is visually cohesive. This also paves the
    way for future-proof, scalable code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合 Tailwind CSS 和 Vue.js，特别是组合 API，我们构建了一个既功能性强又视觉上统一的布局。这也为未来证明和可扩展的代码铺平了道路。
- en: '![Figure 2.3: The header section](img/B19760_02_03.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3：标题部分](img/B19760_02_03.jpg)'
- en: 'Figure 2.3: The header section'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：标题部分
- en: With our layout finely tuned and our font seamlessly integrated, let’s shift
    our focus to managing images in the `assets` folder in the next section.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的布局经过精心调整并且字体无缝集成之后，让我们将注意力转向下一节中管理 `assets` 文件夹中的图片。
- en: Managing images in the assets folder
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理资产文件夹中的图片
- en: In Nuxt 3, managing assets such as style sheets, fonts, or images is a straightforward
    process. The framework offers two primary directories for this purpose – `public/`
    and `assets/`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nuxt 3 中，管理样式表、字体或图像等资产是一个简单的过程。该框架为此目的提供了两个主要目录——`public/` 和 `assets/`。
- en: The `public/` directory serves as a public server for static assets that are
    publicly available at the root URL of your application. Files in this directory
    are served as-is without any processing from build tools such as Vite or webpack.
    For example, an image in the `public/img/` directory can be accessed at the `/img/nuxt.png`
    static URL.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`public/` 目录作为公共服务器，为在应用程序根 URL 公开提供的静态资产提供服务。此目录中的文件以原样提供，无需通过 Vite 或 webpack
    等构建工具进行处理。例如，`public/img/` 目录中的图像可以通过 `/img/nuxt.png` 静态 URL 访问。'
- en: Conversely, the `assets/` directory is used to store files that you want to
    be processed by build tools such as `public/` directory, files in the `assets/`
    directory are not served at a static URL.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`assets/`目录用于存储你希望由构建工具（如`public/`目录）处理的文件。`assets/`目录中的文件不会以静态URL提供服务。
- en: Now, let’s apply this by creating a hero section with a large Vue image.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过创建一个包含大型Vue图片的英雄部分来应用这个方法。
- en: Firstly, to include images in our project, we create a new folder within the
    `assets/` directory and call it `images`. Inside this folder, we’ve placed an
    image file named `vue-logo.webp`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了在我们的项目中包含图片，我们在`assets/`目录中创建了一个新文件夹，并将其命名为`images`。在这个文件夹中，我们放置了一个名为`vue-logo.webp`的图片文件。
- en: 'Here is the implementation of the hero section:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是英雄部分的实现：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the hero section, you’ll see this line:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在英雄部分，你会看到这一行：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, the `~` symbol represents the project root, and Nuxt automatically understands
    to look in the `assets/images` directory for `vue-logo.webp`. During the build
    process, Nuxt will optimize this image, giving it a new path that aids in efficient
    caching.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`~`符号代表项目根目录，Nuxt会自动理解在`assets/images`目录中查找`vue-logo.webp`。在构建过程中，Nuxt将优化此图片，给它一个新的路径，有助于高效的缓存。
- en: '![Figure 2.4: The hero section](img/B19760_02_04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4：英雄部分](img/B19760_02_04.jpg)'
- en: 'Figure 2.4: The hero section'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：英雄部分
- en: 'For the `avatar.jpeg`, in the `assets/images` folder. The image is displayed
    as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`avatar.jpeg`，位于`assets/images`文件夹中。图片显示如下：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is the final hero section that contains an avatar image, bio, and skills:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是包含头像图片、简介和技能的最终英雄部分：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code contains three main elements:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码包含三个主要元素：
- en: '**An avatar image**: This displays our profile picture, styled to be circular
    with a unique dashed border'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头像图片**：这显示我们的个人资料图片，以圆形样式呈现，并带有独特的虚线边框'
- en: '**A bio**: A brief introduction about us, highlighting our role as frontend
    developers and our expertise in Vue.js, Nuxt.js, and other technologies'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简介**：关于我们的简要介绍，突出我们作为前端开发者的角色以及我们在Vue.js、Nuxt.js和其他技术方面的专长'
- en: '**Skills**: Presented as stylized tags, these showcase our primary technical
    proficiencies'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技能**：以风格化的标签形式展示，这些标签展示了我们的主要技术专长'
- en: 'The following figure shows a screenshot of this section:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了此部分的截图：
- en: '![Figure 2.5: The About Me section](img/B19760_02_05.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5：关于我部分](img/B19760_02_05.jpg)'
- en: 'Figure 2.5: The About Me section'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：关于我部分
- en: Now, have you noticed the skills we’ve listed in the `span` element with almost
    identical classes. To make our code more maintainable and cleaner, how about we
    convert these into a reusable Vue component? Let’s delve into that in the next
    section.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你是否注意到了我们在`span`元素中列出的技能，几乎具有相同的类。为了使我们的代码更易于维护和更简洁，我们为什么不将这些转换为可重用的Vue组件呢？让我们在下一节中深入探讨。
- en: Creating the ProjectShowcase and SkillChip components
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ProjectShowcase和SkillChip组件
- en: If you’ve been closely following along, you might have noticed redundancy in
    our code, particularly in the `span` element. This approach is not only verbose
    but also makes future changes cumbersome.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直紧跟我们的步骤，你可能会注意到代码中的冗余，尤其是在`span`元素中。这种方法不仅冗长，而且使未来的更改变得困难。
- en: In Nuxt, the `components/` directory serves as the hub for all your Vue components.
    These components can be readily imported into your pages or even into other components.
    Nuxt automatically recognizes any components in this directory, sparing you from
    manual import statements.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt中，`components/`目录充当所有Vue组件的中心。这些组件可以轻松导入到你的页面中，甚至可以导入到其他组件中。Nuxt自动识别此目录中的任何组件，从而让你免于手动导入语句。
- en: Creating the SkillChip component
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SkillChip组件
- en: 'In the `components/` directory of your Nuxt project, create a new file named
    `SkillChip.vue`. Open `SkillChip.vue` and copy the provided code into this file.
    This code defines the template for your new SkillChip component:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Nuxt项目中的`components/`目录下，创建一个名为`SkillChip.vue`的新文件。打开`SkillChip.vue`并将提供的代码复制到这个文件中。此代码定义了你的新SkillChip组件的模板：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the `<slot></slot>` tag acts as a placeholder for any content you’ll place
    between the opening and closing `<skill-chip>` tags. This makes the component
    reusable and customizable.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<slot></slot>`标签充当你将在`<skill-chip>`标签之间放置的任何内容的占位符。这使得组件可重用和可定制。
- en: 'Alternatively, you can use the `nuxtr` extension, which we installed in a previous
    chapter:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用我们在前一章中安装的`nuxtr`扩展：
- en: In VS Code, press *Ctrl* + *Shift* + *P* (or *Cmd* + *Shift* + *P* on a Mac)
    to open the command palette.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中，按 *Ctrl* + *Shift* + *P*（或在 Mac 上按 *Cmd* + *Shift* + *P*）打开命令面板。
- en: 'Type `nuxtr: Create new Component` and select the first option that occur in
    the menu (it should have the same name that you typed”.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '输入 `nuxtr: 创建新组件` 并选择菜单中出现的第一个选项（它应该与你输入的名称相同）。'
- en: Enter `SkillChip` as the name of the component when prompted.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提示时，将组件名称输入为 `SkillChip`。
- en: Choose to create the component at the root level.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择在根级别创建组件。
- en: 'Now, let’s swap out the repetitive `span` elements in the `SkillChip` component.
    Update your code like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们替换 `SkillChip` 组件中的重复 `span` 元素。更新你的代码如下：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this simple change, our code becomes more maintainable, and adding or modifying
    a skill in the future becomes a breeze.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个简单的更改，我们的代码变得更加易于维护，未来添加或修改技能变得轻而易举。
- en: Now that we’ve optimized our skill listing, let’s turn our attention to showcasing
    your projects.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经优化了技能列表，让我们将注意力转向展示你的项目。
- en: Creating the ProjectShowcase component
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 ProjectShowcase 组件
- en: Our goal is to streamline the process of displaying multiple projects on the
    website. Instead of duplicating HTML code for each project, we can make this process
    more efficient by creating a reusable `ProjectShowcase` component.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目的是简化在网站上展示多个项目的流程。而不是为每个项目复制 HTML 代码，我们可以通过创建可重用的 `ProjectShowcase` 组件来使这个过程更高效。
- en: First, let’s set up our data. We’ll use an array of objects, where each object
    represents a project with various properties, such as a name, description, and
    link.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置我们的数据。我们将使用一个对象数组，其中每个对象代表一个具有各种属性的项目，例如名称、描述和链接。
- en: 'Let’s add this array to our `app.vue` script:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将此数组添加到 `app.vue` 脚本中：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A note on image paths
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 关于图像路径的说明
- en: In Nuxt 3, dynamic imports for image paths aren’t supported out of the box.
    Therefore, we’ll take a simpler route by placing our project images in the public
    folder. This way, they can be accessed directly via their static URLs, such as
    `/images/projects/1.jpeg`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Nuxt 3 中，默认不支持图像路径的动态导入。因此，我们将采取更简单的路线，将我们的项目图片放在公共文件夹中。这样，它们可以通过它们的静态 URL
    直接访问，例如 `/images/projects/1.jpeg`。
- en: 'Next, go ahead and create a new file named `ProjectShowcase.vue` in your `components/`
    directory. Initially, let’s keep the template empty. In the component’s `<script>`
    block, we use `defineProps` to specify what properties this component expects.
    It’s an essential part of using the `defineProps` specifies that the component
    will receive a project object containing specific fields such as `name`, `description`,
    `image`, and `link`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `ProjectShowcase.vue` 的新文件在你的 `components/` 目录中。最初，让我们保持模板为空。在组件的
    `<script>` 块中，我们使用 `defineProps` 来指定此组件期望的属性。这是使用 `defineProps` 的一个重要部分，它指定组件将接收一个包含特定字段的项目对象，例如
    `name`、`description`、`image` 和 `link`：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, let’s flesh out the component’s template. The idea is to display each project
    in a card-like format, containing the project’s image, name, description, and
    a link to it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们完善组件的模板。想法是以卡片格式显示每个项目，包含项目的图片、名称、描述以及一个链接到它的链接。
- en: 'Here’s the template code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是模板代码：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Our component’s template is designed to showcase each project elegantly. The
    main elements are as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们组件的模板旨在优雅地展示每个项目。主要元素如下：
- en: '**The project image**: Displays the project’s visual aspect, set to cover the
    top portion of the card'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目图片**：显示项目的视觉方面，设置为覆盖卡片的上部'
- en: '**The project details**: This includes the project’s name, a brief description,
    and a clickable link to access it'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目详情**：这包括项目的名称、简短描述以及一个可点击的链接来访问它'
- en: 'Finally, let’s bind this component to our projects array using the `v-for`
    directive in our main section:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们使用主部分中的 `v-for` 指令将此组件绑定到我们的项目数组中：
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To enhance the project showcase section you’re working on, you should expand
    the `projects` object to include more than one project. Here’s how you can proceed:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强你正在工作的项目展示部分，你应该将 `projects` 对象扩展到包含多个项目。以下是你可以采取的步骤：
- en: In your existing `projects` object, add two more projects. Each project entry
    should include details such as the project title and a description.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你现有的 `projects` 对象中，添加两个更多项目。每个项目条目应包括项目标题和描述等详细信息。
- en: For each project in your `projects` object, include an image. Save these images
    in the `public` folder of your Nuxt project. This placement ensures that the images
    are statically served in your application.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于你`projects`对象中的每个项目，包含一张图片。将这些图片保存在Nuxt项目的`public`文件夹中。这种放置方式确保了图片在你的应用中以静态方式提供服务。
- en: In your project entries, reference the image paths relative to the `public`
    folder. For example, if you have an image named `project1.jpg` in the public folder,
    reference it in your project object as `/project1.jpg`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目条目中，引用相对于`public`文件夹的图片路径。例如，如果你在公共文件夹中有一个名为`project1.jpg`的图片，在你的项目对象中引用它为`/project1.jpg`。
- en: 'The following figure shows a screenshot of the project showcase section:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了项目展示区域的截图：
- en: '![Figure 2.6: The project showcase section](img/B19760_02_06.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图2.6：项目展示区域](img/B19760_02_06.jpg)'
- en: 'Figure 2.6: The project showcase section'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：项目展示区域
- en: With this, you’ve successfully modularized your project showcase, making it
    easier to manage and scale in the future.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你已经成功地将项目展示模块化，使其在未来更容易管理和扩展。
- en: Styling within the component itself
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在组件内部进行样式设置
- en: When building a UI, the components often have specific styles that shouldn’t
    affect other parts of the application. One way to achieve this isolation is by
    using scoped styles in Vue components.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建UI时，组件通常具有特定的样式，这些样式不应影响应用的其他部分。在Vue组件中使用作用域样式是实现这种隔离的一种方法。
- en: 'Let’s create a new Vue component named `CurvedDivider` that we can use as a
    visual separator between the “About Me” and project showcase sections:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Vue组件，命名为`CurvedDivider`，我们可以在“关于我”和项目展示区域之间使用它作为视觉分隔符：
- en: '[PRE26]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The component’s structure is simple:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的结构很简单：
- en: '[PRE27]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, let’s add some custom styles to this component. We want to set its height
    and background color, as well as add a curved section at the bottom.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们给这个组件添加一些自定义样式。我们想要设置它的高度和背景颜色，以及添加一个底部的曲线部分。
- en: 'Here’s how to do it:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何做到这一点的：
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note the `scoped` attribute in the `<style>` tag. When a `<style>` tag has the
    `scoped` attribute, its CSS will apply only to elements of the current component.
    This ensures that the component’s styles won’t leak into other parts of your application.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`<style>`标签中的`scoped`属性。当一个`<style>`标签有`scoped`属性时，它的CSS只会应用于当前组件的元素。这确保了组件的样式不会泄漏到应用的其他部分。
- en: '![Figure 2.7: Inspect the representation of <style scoped> in devtools](img/B19760_02_07.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7：在devtools中检查<style scoped>的表示](img/B19760_02_07.jpg)'
- en: 'Figure 2.7: Inspect the representation of <style scoped> in devtools'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：在devtools中检查<style scoped>的表示
- en: Note that the styles are applied to `.divider[data-v-a9cd7541]` (the `divider`
    class with a unique identifier).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，样式应用于`.divider[data-v-a9cd7541]`（具有唯一标识符的`divider`类）。
- en: Vue also supports style preprocessors such as `SCSS`, `SASS`, `PostCSS`, and
    `LESS`. You can use any of these preprocessors with the `scoped` attribute as
    well. For example, for `SCSS`, you’d write `<style` `lang="scss" scoped>`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Vue还支持`SCSS`、`SASS`、`PostCSS`和`LESS`等样式预处理器。你可以使用这些预处理器中的任何一个，并结合`scoped`属性。例如，对于`SCSS`，你会写成`<style
    lang="scss" scoped>`。
- en: 'The divider should be displayed as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 分隔符应该显示如下：
- en: '![Figure 2.8: The CurvedDivider component](img/B19760_02_08.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8：CurvedDivider组件](img/B19760_02_08.jpg)'
- en: 'Figure 2.8: The CurvedDivider component'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：CurvedDivider组件
- en: We’ve just explored how to implement scoped styling within components, making
    our code both maintainable and modular. Next, we’ll take a dive into the world
    of Vue composables by creating a `useScrollTo` composable for smoother navigation.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探讨了如何在组件内实现作用域样式，这使得我们的代码既可维护又模块化。接下来，我们将深入Vue组合式组件的世界，通过创建一个`useScrollTo`组合式来实现更平滑的导航。
- en: Creating a useScrollTo composable
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`useScrollTo`组合式
- en: Managing reusable stateful logic is crucial in any Vue application. Composables
    serve this exact purpose. They let you wrap complex stateful logic into a function
    that can be easily reused across your application. Our `useScrollTo` example demonstrates
    this by encapsulating the scroll-to-section logic.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何Vue应用中，管理可重用状态逻辑至关重要。组合式正是为此目的而设计的。它们允许你将复杂的状态逻辑封装到一个函数中，这个函数可以在你的应用中轻松重用。我们的`useScrollTo`示例通过封装滚动到部分逻辑来展示这一点。
- en: Nuxt 3 enhances this experience with an auto-import feature for composables.
    Just place your composable in the `composables/` directory and Nuxt handles the
    rest, making manual imports a thing of the past.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt 3通过为组合式提供自动导入功能来增强这一体验。只需将你的组合式放在`composables/`目录下，Nuxt就会处理其余部分，使手动导入成为过去式。
- en: Before we create our composable, let’s start by moving our header into a new
    component. Create a file called `BaseHeader.vue` inside the `components/` folder
    and move the header section with `headerLinks` from the script into it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的可组合组件之前，让我们先将标题移动到一个新的组件中。在 `components/` 文件夹内创建一个名为 `BaseHeader.vue`
    的文件，并将带有 `headerLinks` 的标题部分从脚本中移动到它里面。
- en: 'Your `App.vue` should now start like this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `App.vue` 应该现在看起来像这样：
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Meanwhile, your `BaseHeader.vue` should contain the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，你的 `BaseHeader.vue` 应该包含以下内容：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, create a `composables` directory and add to it a `useScrollTo.ts` file
    with the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个 `composables` 目录，并向其中添加一个 `useScrollTo.ts` 文件，包含以下代码：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, `useScrollTo` takes an element ID, finds it, and smoothly scrolls to it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`useScrollTo` 接收一个元素 ID，找到它，并平滑地滚动到它。
- en: Because of Nuxt’s auto-import capability, using this composable in different
    components is effortless. It ensures your code follows the **Don’t-Repeat-Yourself**
    (**DRY**) principle and remains maintainable.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Nuxt 的自动导入功能，在不同的组件中使用这个可组合组件非常容易。它确保你的代码遵循 **不要重复自己**（**DRY**）原则，并保持可维护性。
- en: 'For example, in the `BaseHeader` component, we can use `useScrollTo` like so:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 `BaseHeader` 组件中，我们可以这样使用 `useScrollTo`：
- en: '[PRE32]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We can also apply the same reusable logic in the hero section of our application.
    For instance, we can attach it to a button to scroll smoothly to the portfolio
    section when clicked.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在我们的应用程序的英雄部分应用相同的可重用逻辑。例如，我们可以将其附加到按钮上，以便在点击时平滑地滚动到投资组合部分。
- en: 'Here’s how to implement it:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何实现它的方法：
- en: '[PRE33]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'With this setup, the button in the hero section will also smoothly scroll down
    to the portfolio section when clicked. All of this is achieved without duplicating
    code, thanks to our composable and Nuxt’s auto-import feature. To wrap up this
    chapter and give you a complete visualization, you’ll find a final screenshot
    of our project in the following figure:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种设置，当点击时，英雄部分中的按钮也会平滑地滚动到投资组合部分。所有这些都是在不重复代码的情况下实现的，归功于我们的可组合性和 Nuxt 的自动导入功能。为了总结本章内容并给你一个完整的可视化，你将在下面的图中找到我们项目的最终截图：
- en: '![Figure 2.9: A screenshot of the final project](img/B19760_02_09.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9：最终项目的截图](img/B19760_02_09.jpg)'
- en: 'Figure 2.9: A screenshot of the final project'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：最终项目的截图
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In [*Chapter 2*](B19760_02.xhtml#_idTextAnchor036), we’ve taken a deep dive
    into building a simple but effective portfolio using Tailwind CSS and Nuxt 3\.
    We kicked off by integrating Tailwind CSS into our Nuxt project, followed by laying
    out our website and customizing its fonts. We then explored how to manage images
    in Nuxt, opting for the public folder for ease of use. From there, we moved on
    to creating reusable Vue components such as `ProjectShowcase` and `SkillChip`,
    which helped declutter our main layout. We also learned about scoped styling within
    components, ensuring that our styles are applied only where they’re needed. Lastly,
    we ventured into the powerful world of composable, crafting a `useScrollTo` function
    that we were able to use in multiple components, thanks to Nuxt’s auto-import
    feature.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 2 章*](B19760_02.xhtml#_idTextAnchor036) 中，我们深入探讨了使用 Tailwind CSS 和 Nuxt
    3 构建一个简单但有效的投资组合。我们首先将 Tailwind CSS 集成到我们的 Nuxt 项目中，然后布局我们的网站并自定义其字体。然后，我们探讨了如何在
    Nuxt 中管理图像，选择公共文件夹以方便使用。从那里，我们转向创建可重用的 Vue 组件，如 `ProjectShowcase` 和 `SkillChip`，这有助于清理我们的主布局。我们还了解了组件内的作用域样式，确保我们的样式只应用于需要的地方。最后，我们进入了强大的可组合世界，制作了一个
    `useScrollTo` 函数，我们能够利用 Nuxt 的自动导入功能在多个组件中使用它。
- en: In the upcoming chapter, we’re going to up the ante by constructing a real estate
    listing project. Prepare to dive deep into the essentials of routing, views, and
    layouts to create a multi-page application that mimics a real-world project. Additionally,
    we’ll explore the powerful capabilities of Nuxt plugins to further extend the
    functionality of our application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，我们将通过构建一个房地产列表项目来提高难度。准备好深入探讨路由、视图和布局的基本要素，以创建一个模仿真实项目的多页面应用程序。此外，我们还将探索
    Nuxt 插件的强大功能，以进一步扩展我们应用程序的功能。
- en: Practice questions
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习题
- en: How do you integrate Tailwind CSS into a Nuxt 3 project?
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何将 Tailwind CSS 集成到 Nuxt 3 项目中？
- en: Explain the difference between the `public/` and `assets/` directories in Nuxt
    3.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释 Nuxt 3 中 `public/` 和 `assets/` 目录之间的区别。
- en: How do you create a custom color scheme in Tailwind CSS?
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何在 Tailwind CSS 中创建自定义颜色方案？
- en: What is the purpose of the scoped attribute in a component’s `<``style>` tag?
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的 `<style>` 标签中 scoped 属性的目的是什么？
- en: How do you import and use a custom font in Nuxt 3?
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何在 Nuxt 3 中导入和使用自定义字体？
- en: What is the benefit of using Vue’s `<slot>` element in a component?
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vue 的 `<slot>` 元素在组件中的好处是什么？
- en: How do you loop through an array of objects in Vue to create multiple instances
    of a component?
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何在 Vue 中遍历对象数组以创建组件的多个实例？
- en: Describe the `defineProps` function and its use case in a Nuxt 3 component.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 `defineProps` 函数及其在 Nuxt 3 组件中的用例。
- en: How do you create and use a composable in Nuxt 3?
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你如何在 Nuxt 3 中创建和使用可组合？
- en: What is the purpose of the `useScrollTo` composable, and how is it implemented?
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useScrollTo` 可组合的作用是什么，以及它是如何实现的？'
- en: How does Nuxt 3’s auto-import feature work with components and composables?
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 3 的自动导入功能是如何与组件和可组合使用？
- en: Further reading
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Tailwind CSS official documentation: [https://tailwindcss.com/docs/installation](https://tailwindcss.com/docs/installation)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tailwind CSS 官方文档：[https://tailwindcss.com/docs/installation](https://tailwindcss.com/docs/installation)
- en: 'Vue composables: [https://vuejs.org/guide/reusability/composables.html](https://vuejs.org/guide/reusability/composables.html)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue 可组合：[https://vuejs.org/guide/reusability/composables.html](https://vuejs.org/guide/reusability/composables.html)
- en: 'Nuxt composables directory: [https://nuxt.com/docs/guide/directory-structure/composables](https://nuxt.com/docs/guide/directory-structure/composables)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 可组合目录：[https://nuxt.com/docs/guide/directory-structure/composables](https://nuxt.com/docs/guide/directory-structure/composables)
- en: 'Nuxt assets directory: [https://nuxt.com/docs/getting-started/assets](https://nuxt.com/docs/getting-started/assets)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 资产目录：[https://nuxt.com/docs/getting-started/assets](https://nuxt.com/docs/getting-started/assets)
- en: 'Nuxt components directory: [https://nuxt.com/docs/guide/directory-structure/components](https://nuxt.com/docs/guide/directory-structure/components)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt 组件目录：[https://nuxt.com/docs/guide/directory-structure/components](https://nuxt.com/docs/guide/directory-structure/components)
