["```js\n$ cd angular-member-search\n$ npm install \n$ npm start\n\n```", "```js\n$ npm run e2e\n\n```", "```js\nbeforeEach(() => { \n    comp = new AppComponent(); \n    comp.add('a sample comment'); \n    comp.like(comp.comments[0]); \n}); \n\n    it('First item in the item should match', () => { \n        expect(comp.comments[0].title).toBe('a sample \n        comment'); \n    }); \n\n    it('Number of likes should increase on like', () => { \n        expect(comp.comments[0].likes).toEqual(1); \n    }); \n\n```", "```js\nbeforeEach(async(() => { \n    TestBed.configureTestingModule({ \n        declarations: [ AppComponent ]\n    }) \n    .compileComponents(); \n})); \n\nbeforeEach(() => { \n    fixture = TestBed.createComponent(AppComponent); \n    comp = fixture.componentInstance; \n    de = fixture.debugElement.query(By.css('h1')); \n}); \n\nit('should create and initiate the App component', () => { \n    expect(comp).toBeDefined(); \n}); \n\nit('should have expected test in <h1> element', () => { \n    fixture.detectChanges(); \n    const h1 = de.nativeElement; \n    expect(h1.innerText).toMatch(/My First Angular 2 App/i, \n    '<h1> should say something about \"Angular App\"'); \n}); \n\n```", "```js\nautoWatch: true, \n\n```", "```js\nfiles : [ 'dir1/**/*.js'] \n\n```", "```js\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing'; \nimport { By }           from '@angular/platform-browser'; \nimport { DebugElement } from '@angular/core'; \n\nimport { AppComponent } from '../../app/app.component'; \nimport { NavbarComponent } from '../../app/nav/navbar.component';\nimport { RouterOutlet } from '@angular/router';\n\ndescribe('AppComponent test suite', function () { \n  let comp: AppComponent; \n  let fixture: ComponentFixture<AppComponent>; \n  let de: DebugElement; \n\n  beforeEach(async(() => { \n   TestBed.configureTestingModule({ \n      declarations: [ AppComponent ] \n    }) \n    .compileComponents(); \n  })); \n\n  beforeEach(() => { \n    fixture = TestBed.createComponent(AppComponent); \n    comp = fixture.componentInstance; \n    de = fixture.debugElement.query(By.css('h1')); \n  }); \n\n  it('should create and initiate the App component', () => { \n    expect(comp).toBeDefined(); \n  }); \n\n  it('should have expected test in <h1> element', () => { \n    fixture.detectChanges(); \n    const h1 = de.nativeElement; \n    expect(h1.innerText).toMatch(/My First Angular 2 App/i, \n      '<h1> should say something about \"Angular App\"'); \n  }); \n}); \n\n```", "```js\n   Chrome 54.0.2840 (Mac OS X 10.10.5): Executed 2 of 2 SUCCESS\n   (0 secs / 0.522 secs)\n\n```", "```js\nexport  {Router, NavigationExtras, RouterLink, RouterOutlet} from '@angular/router'; \n\nimport { Component, Directive, Injectable, Input } from '@angular/core'; \n\n@Directive({ \n  selector: '[routerLink]', \n  host: { \n    '(click)': 'onClick()' \n  } \n}) \nexport class RouterLinkStubDirective { \n  @Input('routerLink') linkParams: any; \n  navigatedTo: any = null; \n\n  onClick() { \n    this.navigatedTo = this.linkParams; \n  } \n} \n\n```", "```js\n@Component({selector: 'router-outlet', template: ''}) \nexport class RouterOutletStubComponent { } \n\n@Injectable() \nexport class RouterStub { \n  navigate(commands: any[], extras?: NavigationExtras) { } \n} \n\n```", "```js\nimport { NavbarComponent } from '../../app/nav/navbar.component'; \nimport { AppComponent } from '../../app/app.component';\nimport { RouterOutletStubComponent, RouterLinkStubDirective } from './stub/router-stubs.js'; \n\ndescribe('AppComponent test suite', function () { \n  let navDestination:any; \n  let navLinks:any; \n  let fixture: ComponentFixture<AppComponent>; \n  let de: DebugElement;  \n\n  beforeEach(async(() => { \n   TestBed.configureTestingModule({ \n      declarations: [ AppComponent, NavbarComponent, \n                     RouterLinkStubDirective, \n                     RouterOutletStubComponent ] \n    }) \n    .compileComponents(); \n  })); \n\n  beforeEach(() => { \n    fixture.detectChanges(); \n\n    navDestination = fixture.debugElement \n      .queryAll(By.directive(RouterLinkStubDirective)); \n\n    navLinks = navDestination \n      .map(de => de.injector.get(RouterLinkStubDirective) as \n      RouterLinkStubDirective); \n  });\n\n```", "```js\n  it('can get RouterLinks from template', () => { \n    expect(navLinks.length).toBe(3, 'should have 3 links'); \n    expect(navLinks[0].linkParams).toBe('/view1', '1st link should\n    go to View1'); \n    expect(navLinks[1].linkParams).toBe('/view2', '1st link should\n    go to View2'); \n    expect(navLinks[2].linkParams).toBe('/members', '1st link should\n    go to members search page'); \n  }); \n\n  it('can click nav items link in template and navigate \n  accordingly', () => { \n    navDestination[0].triggerEventHandler('click', null); \n    fixture.detectChanges(); \n    expect(navLinks[0].navigatedTo).toBe('/view1'); \n\n    navDestination[1].triggerEventHandler('click', null); \n    fixture.detectChanges(); \n    expect(navLinks[1].navigatedTo).toBe('/view2'); \n\n    navDestination[2].triggerEventHandler('click', null); \n    fixture.detectChanges(); \n    expect(navLinks[2].navigatedTo).toBe('/members'); \n  }); \n\n```", "```js\nnpm test \n\n```", "```js\n   Chrome 54.0.2840 (Mac OS X 10.10.5): Executed 4 of 4 SUCCESS\n   (0 secs / 1.022 secs) \n\n```", "```js\nngOnInit() { \n    this.getMembers(); \n  } \n\n  getMembers() { \n    this.getData() \n    .then(data => { \n      data.map(item => { \n        this.memberList.push(item); \n      }); \n    }) \n    return this.memberList; \n  } \n\nsearch() { \n    // Do Search \n  } \n\n```", "```js\ngetData() { \n    return this.http.get('app/data/people.json') \n      .toPromise() \n      .then(response => response.json()); \n  } \n\n```", "```js\nimport { Http, Response } from '@angular/http'; \n\nexport class MembersService { \n  constructor(private http:Http) { \n\n  } \n\n  getAPIData() { \n    return this.http.get('app/data/people.json'); \n  } \n\n  getData() { \n    return this.getAPIData() \n      .toPromise() \n      .then(response => response.json()); \n  } \n\n} \n\n```", "```js\nimport {MembersService} from './services/members.service'; \n\n@NgModule({ \n  declarations: [AppComponent, NavbarComponent, ....], \n  imports     : [BrowserModule, FormsModule, ......], \n  providers   : [MembersService], \n  bootstrap   : [AppComponent] \n}) \n\n```", "```js\nimport { MembersService } from '../services/members.service'; \n@Component({ \n   ............ \n}) \nexport class MembersComponent implements OnInit { \n constructor(public membersService: MembersService, private router:Router) { \n\n  } \n\n  getMembers() { \n    this.membersService.getData() \n    .then(data => { \n      data.map(item => { \n        this.memberList.push(item); \n      }); \n    }) \n    return this.memberList; \n  } \n\n```", "```js\nError: (SystemJS) Can't resolve all parameters for MembersService: (?) \n\n```", "```js\nimport { Injectable } from '@angular/core'; \nimport { Http, Response } from '@angular/http'; \n\n@Injectable() \nexport class MembersService { \n  constructor(private http:Http) { \n\n  } \n\n  getData() { \n    return this.http.get('app/data/people.json') \n      .toPromise() \n      .then(response => response.json()); \n  } \n} \n\n```", "```js\nimport { MembersService } from '../../services/members.service'; \n\n@Component({ \n  ........... \n}) \nexport class PersonComponent implements OnInit { \n  constructor(public membersService: MembersService, private route: ActivatedRoute, private router: Router) { \n\n  } \n\n.................... \n\n  getPerson(id:number) { \n    return this.membersService.getData() \n          .then(data => data.find(member => member.id === id)); \n  } \n} \n\n```", "```js\n$ npm run e2e\n\n```", "```js\n@Injectable() \nexport class MembersService { \n  constructor(private http:Http) { \n\n  } \n\n  ............ \n\n  searchQuery(q:string) { \n    if (!q || q === '*') { \n      q = ''; \n    } else { \n      q = q.toLowerCase(); \n    } \n    return this.getData() \n      .then(data => { \n      let results:any = []; \n      data.map(item => { \n        if (JSON.stringify(item).toLowerCase().includes(q)) { \n          results.push(item); \n        } \n      }); \n      return results; \n    }); \n  } \n\n  getPerson(id:number) { \n    return this.getData() \n   .then(data => data.find(member => member.id === id)); \n  } \n} \n\n```", "```js\nimport { inject, TestBed } from '@angular/core/testing'; \nimport { MembersService } from '../../app/services/members.service'; \n\ndescribe('Given service should be defined', () => { \n\n  beforeEach(() => { \n    TestBed.configureTestingModule({ \n      providers: [ \n        MembersService, \n      ],  \n    }); \n  }); \n\n it('should initiate the member service', inject([MembersService], (membersService) => { \n    expect(membersService).toBeDefined(); \n  })); \n\n}); \n\n```", "```js\nimport { fakeAsync, inject, TestBed } from '@angular/core/testing'; \n\nimport { Http, BaseRequestOptions, Response, ResponseOptions } from '@angular/http'; \nimport { MockBackend, MockConnection } from '@angular/http/testing'; \n\nimport { MembersService } from '../../app/services/members.service'; \n\nconst mockData = { \n  \"id\": 2, \n  \"name\": \"Demaryius Thomas\", \n  \"phone\": \"(720) 213-9876\", \n  \"address\": { \n    \"street\": \"5555 Marion Street\", \n    \"city\": \"Denver\", \n    \"state\": \"CO\", \n    \"zip\": \"80202\" \n  } \n}; \n\ndescribe('Given service should be defined and response HTTP request', () => { \n\n  beforeEach(() => { \n    TestBed.configureTestingModule({ \n      providers: [ \n        MembersService, \n        BaseRequestOptions, \n        MockBackend, \n        { \n          provide: Http, \n          useFactory: (backend, defaultOptions) => { \n            return new Http(backend, defaultOptions); \n          }, \n          deps: [MockBackend, BaseRequestOptions], \n        }, \n      ], \n    }); \n  });\n}); \n\n```", "```js\n  it('should return response when subscribed to getUsers', fakeAsync( \n    inject([MockBackend, MembersService], (backend, membersService) => { \n      backend.connections.subscribe( \n        (c: MockConnection) => { \n          c.mockRespond( \n            new Response( \n              new ResponseOptions({ body: mockData }) \n            )); \n          }); \n\n        membersService.getAPIData().subscribe(res => { \n          expect(res.json()).toEqual(mockData); \n        }); \n  }))); \n\n}); \n\n```", "```js\nimport { Component, Directive, Injectable, Input } from '@angular/core'; \n\nexport class MembersServiceSpy { \n  members = { \n    \"id\": 2, \n    \"name\": \"Demaryius Thomas\", \n    \"phone\": \"(720) 213-9876\", \n    \"address\": { \n      \"street\": \"5555 Marion Street\", \n      \"city\": \"Denver\", \n      \"state\": \"CO\", \n      \"zip\": \"80202\" \n    } \n  }; \n\n  getData = jasmine.createSpy('getData').and.callFake( \n    () => Promise \n      .resolve(true) \n      .then(() => Object.assign({}, this.members)) \n  ); \n\n  getPerson = jasmine.createSpy('getPerson').and.callFake( \n    () => Promise \n      .resolve(true) \n      .then(() => Object.assign({}, this.members)) \n  ); \n\n  searchQuery = jasmine.createSpy('searchQuery').and.callFake( \n    () => Promise \n      .resolve(true) \n      .then(() => Object.assign({}, this.members)) \n  ); \n\n} \n\n```", "```js\nimport { MembersServiceSpy } from './stub/members.service.stub.js'; \nimport { MembersService } from '../../app/services/members.service'; \n\nconst mockData = { \n  \"id\": 2, \n  \"name\": \"Demaryius Thomas\", \n  \"phone\": \"(720) 213-9876\", \n  \"address\": { \n    \"street\": \"5555 Marion Street\", \n    \"city\": \"Denver\", \n    \"state\": \"CO\", \n    \"zip\": \"80202\" \n  } \n}; \n\ndescribe('Given service will response for every method', () => { \n\n  beforeEach(() => { \n    TestBed.configureTestingModule({ \n      providers: [{ provide: MembersService, useClass: MembersServiceSpy }] \n    }); \n  }); \n\n  it('should return data', fakeAsync(inject( \n    [MembersService], (service) => { \n      service.getData(); \n      expect(service.members).toEqual(mockData); \n    }))); \n\n    it('should return data', fakeAsync(inject( \n      [MembersService], (service) => { \n        service.searchQuery('Thomas'); \n        expect(service.members.name).toBe('Demaryius Thomas'); \n    }))); \n\n    it('should return data', fakeAsync(inject( \n      [MembersService], (service) => { \n        service.getPerson(2); \n        expect(service.members.id).toBe(2); \n    }))); \n\n}); \n\n```", "```js\nimport { fakeAsync, inject, TestBed } from '@angular/core/testing'; \n\nimport { Http, BaseRequestOptions, Response, ResponseOptions } from '@angular/http'; \nimport { MockBackend, MockConnection } from '@angular/http/testing'; \n\nimport { MembersServiceSpy } from './stub/members.service.stub.js'; \nimport { MembersService } from '../../app/services/members.service'; \n\nconst mockData = { \n  \"id\": 2, \n  \"name\": \"Demaryius Thomas\", \n  \"phone\": \"(720) 213-9876\", \n  \"address\": { \n    \"street\": \"5555 Marion Street\", \n    \"city\": \"Denver\", \n    \"state\": \"CO\", \n    \"zip\": \"80202\" \n  } \n}; \n\ndescribe('Given service should be defined and response HTTP request', () => { \n\n  beforeEach(() => { \n    TestBed.configureTestingModule({ \n      providers: [ \n        MembersService, \n        BaseRequestOptions, \n        MockBackend, \n        { \n          provide: Http, \n          useFactory: (backend, defaultOptions) => { \n            return new Http(backend, defaultOptions); \n          }, \n          deps: [MockBackend, BaseRequestOptions], \n        }, \n      ], \n    }); \n  }); \n\n  it('should initiate the member service', inject([MembersService], (membersService) => { \n    expect(membersService).toBeDefined(); \n  })); \n\n  it('should return response when send HTTP request', fakeAsync( \n    inject([MockBackend, MembersService], (backend, membersService) => { \n      backend.connections.subscribe( \n        (c: MockConnection) => { \n          c.mockRespond( \n            new Response( \n              new ResponseOptions({ body: mockData }) \n            )); \n          }); \n\n        membersService.getAPIData().subscribe(res => { \n          expect(res.json()).toEqual(mockData); \n        }); \n  }))); \n\n}); \n\ndescribe('Given service will response for every method', () => { \n\n  beforeEach(() => { \n    TestBed.configureTestingModule({ \n      providers: [{ provide: MembersService, useClass: MembersServiceSpy }] \n    }); \n  }); \n\n  it('should return data', fakeAsync(inject( \n    [MembersService], (service) => { \n      service.getData(); \n      expect(service.members).toEqual(mockData); \n    }))); \n\n    it('should return data', fakeAsync(inject( \n      [MembersService], (service) => { \n        service.searchQuery('Thomas'); \n        expect(service.members.name).toBe('Demaryius Thomas'); \n    }))); \n\n    it('should return data', fakeAsync(inject( \n      [MembersService], (service) => { \n        service.getPerson(2); \n        expect(service.members.id).toBe(2); \n    }))); \n\n}); \n\n```", "```js\nnpm test \n\n```", "```js\n   Chrome 54.0.2840 (Mac OS X 10.10.5): Executed 9 of 9 SUCCESS \n   (0 secs / 4.542 secs) \n\n```", "```js\n<button type=\"button\" (click)=\"search()\">Search</button>\n\n```", "```js\n  @Output() someCustomEvent: EventEmitter<any> = new EventEmitter(); \n\n    this.someCustomEvent.emit(value);\n\n```", "```js\n<custom-component (someCustomEvent)=\"doSomething($event)\"></custom-component> \n\n```", "```js\ndoSomething(someValue) { \n    this.value = someValue; \n} \n\n```", "```js\nexport class SearchComponent { \n  @Output() someCustomEvent: EventEmitter<any> = new EventEmitter(); \n}\n\n```", "```js\nimport { Component } from '@angular/core'; \n\nimport { MembersService, Person } from '../services/members.service'; \n\n@Component({ \n  selector: 'app-search', \n  moduleId: module.id, \n  templateUrl: 'search.component.html' \n}) \nexport class SearchComponent { \n  query: string; \n  memberList: Array<Person> = []; \n\n  constructor(public membersService: MembersService) { \n\n  } \n\n  search() { \n    this.doSearch(); \n  } \n\n  doSearch(): void { \n    this.membersService.searchQuery(this.query) \n    .then(results => { \n      this.memberList = results; \n    }); \n  } \n\n} \n\n```", "```js\n<form> \n  <input type=\"search\" [(ngModel)]=\"query\" name=\"query\" (keyup.enter)=\"search()\"> \n  <button type=\"button\" (click)=\"search()\">Search</button> \n</form> \n\n```", "```js\n<h2>Members</h2> \n<app-search></app-search> \n<table *ngIf=\"memberList\" id=\"searchList\"> \n  ...... \n</table> \n\n```", "```js\nimport { Component, Output, EventEmitter } from '@angular/core'; \n\n@Component({ \n  ................... \n}) \nexport class SearchComponent { \n  ............. \n  @Output() searchResult: EventEmitter<any> = new EventEmitter(); \n\n  doSearch(): void { \n    this.membersService.searchQuery(this.query) \n    .then(results => { \n      this.memberList = results; \n      this.searchResult.emit(this.memberList)); \n    }); \n  } \n\n} \n\n```", "```js\nexport class MembersComponent implements OnInit { \n\n  ngOnInit() { \n    this.getMembers(); \n  } \n\n  onSearch(searchResult) { \n    this.memberList = searchResult; \n  } \n\n  getMembers() { \n    this.membersService.getData() \n    .then(data => { \n      data.map(item => { \n        this.memberList.push(item); \n      }); \n    }) \n    return this.memberList; \n  } \n\n} \n\n```", "```js\n<h2>Members</h2> \n<app-search (searchResult)=\"onSearch($event)\" ></app-search> \n<table *ngIf=\"memberList\" id=\"searchList\"> \n  ...... \n</table> \n\n```", "```js\n $ npm run e2e\n\n```"]