["```js\n  it('should be able to read default header background \n   color theme setting', async () => {\n   const headerBackground: MatInputHarness = await \n    loader.getHarness(\n      MatInputHarness.with({ selector: '#headerBackground' \n      })\n    );\n    expect(await headerBackground.getValue()\n     ).toBe('#00aa00');\n  });\n```", "```js\n  it('should be able to change the header background color \n   theme setting', async () => {\n    const headerBackground: MatInputHarness = await \n     loader.getHarness(\n      MatInputHarness.with({ selector: '#headerBackground' \n       })\n    );\n    headerBackground.setValue('#ffbbcc').then(() => {\n      expect(themeService.getSetting(\n       'headerBackground')).toBe('#ffbbcc');\n    });\n  });\n```", "```js\n  it('should be able to check default text and video slider \n   settings', async () => {\n    const videoSizeSetting = \n     Number(themeService.getSetting('videoSize'));\n    expect(videoSizeSetting).toBe(7);\n    const videoSizeSlider: MatSliderHarness = await \n     loader.getHarness(\n      MatSliderHarness.with({ selector: '#videoSizeSlider' \n       })\n    );\n    expect(await videoSizeSlider.getId()\n     ).toBe('videoSizeSlider');\n    expect(await videoSizeSlider.getValue()\n     ).toBe(Number(videoSizeSetting));\n```", "```js\nexport class VideoHarness extends ComponentHarness {\n  static hostSelector = 'workspace-video';\n  protected getTextElement = this.locatorFor('.text');\n  async getText(): Promise<string|null> {\n    const textElement = await this.getTextElement();\n    return textElement.text()\n  }\n  textEquals(video: IVideo, text: string): boolean {\n    return\n      text?.toLowerCase().trim().includes(\n         video.title.trim().toLowerCase()\n      );\n  }\n}\n```", "```js\n it('should render the video title in text when displaying it', async () => {\n  const renderedVideos =\n    await loader.getAllHarnesses(VideoHarness);\n  courseService.getCourse('1').subscribe((course) => {\n      renderedVideos.forEach(async (video: VideoHarness) => {\n        const text = await video.getText()|| \"\";\n        expect(course.videos.find((v) => \n         video.textEquals(v, text))).toBeTruthy();\n      });\n    });\n });\n```", "```js\nclass YoutubePlayerHarness extends ComponentHarness {\n  static hostSelector = 'youtube-player';\n  async getVideoId(): Promise<string|null> {\n    const host = await this.host();\n    return await host.getAttribute('ng-reflect-video-id');\n  }\n}\n```", "```js\n  it('should have the videoId available when rendering the \n   video', async() => {\n    const renderedVideos = await \n     loader.getAllHarnesses(VideoHarness);\n    renderedVideos.forEach( async(video: VideoHarness) => {\n      const videoId = await video.getVideoId();\n      expect(videoId).toBeTruthy();\n    })\n  })\n```", "```js\nexport class VideoHarness extends ComponentHarness {\n  static hostSelector = 'workspace-video';\n  protected getTextElement = this.locatorFor('.text');\n  protected getVideoElement = \n   this.locatorFor(YoutubePlayerHarness);\n  async getText(): Promise<string | null> {\n    const textElement = await this.getTextElement();\n    return textElement.text();\n  }\n  async getVideoId(): Promise<string | null> {\n    const videoElement = await this.getVideoElement();\n    return videoElement.getVideoId();\n  }\n  textEquals(video: IVideo, text: string): boolean {\n     return  text?.toLowerCase().trim().includes(\n      video.title.trim().toLowerCase());\n  }\n}\n```"]