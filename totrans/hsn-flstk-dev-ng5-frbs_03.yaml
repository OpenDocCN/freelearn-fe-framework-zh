- en: Creating a Login Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build our second component. We will create a login
    page, which will be similar to the signup page. We will also add more functionalities
    to services. We will use Email/Password authentication to log in the user in.
    User details are already added to the Firebase database during the signup process.
    We will retrieve the user details from Firebase and pass them to the user profile
    page. We will also handle common error scenarios, as this will reinforce the concept.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding login functionalities to existing services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusing the domain model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a login template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling for login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating login components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resetting password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding login functionalities to existing services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding chapter, we used Email/Password authentication and also added
    our user to the Firebase database. We acquired basic knowledge about pushing data
    to Firebase. In this section, we will log the user and retrieve the user details
    from Firebase. We will add login functionalities in the authentication and user
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During signup, the user is registered to Firebase. `AngularFireAuth` has the `signInWithEmailAndPassword`
    method to login the user. This method returns `firebase.Promise<any>`. This class
    has `then` and `catch` methods to handle success and failure scenarios. On success,
    we redirect the user to the user-profile case, and we show the error message on
    failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login**: This method validates the user and passes user information on successful
    login, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Reset**: `AngularFireAuth` provides an API to reset the password. Firebase
    provides the infrastructure for password resets, such as password email notification.
    We just need to call the `resetPassword` API in the authentication service, as
    follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the complete `authentication.service.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: User service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we cover how to retrieve value from the Firebase by performing a read
    operation. `AngularFire2` has the `AngularFireDatabase` class, which provides
    the following two methods to read the data from Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object`: This retrieves the JSON object. It returns `AngularFireObject<T>`,
    which provides the `valueChanges` method to return the Observable. For example,
    if we want to get a user object from Firebase, then we use this method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`: This retrieves an array of JSON objects. It returns `AngularFireList<T>`,
    which provides the `valueChanges` method to return the Observable with an array
    of objects. For example, if we want to get all the users registered in our application,
    then this method is handful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the user types their correct credentials, then we retrieve the user details
    using the `object` method of `AngularFireDatabase`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of methods in the `AngularFireDatabase` class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Mostly in our application we use the `list` and `object` methods of `AngularFireDatabase`.
    These methods accept the `pathOrRef` parameters. The `list` method accepts an
    additional `QueryFn` as a parameter. The objective of these parameters is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pathOrRef`: This parameter accepts the path of data in the Firebase database.
    As shown in the following example, to access user data we provide the path till
    the user `uid`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, suppose we want to retrieve user information for user id `qu3bXn9tTJR7j4PBp9LzBGKxHAe2`,
    then the path in this case is `/users/qu3bXn9tTJR7j4PBp9LzBGKxHAe2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`QueryFn`: This optional parameter in the `list` method, filters the list based
    on the filter criteria. For example, suppose we want the first three registered
    users, then we use `limitToFirst` query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the complete `user.service.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Reusing the domain model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the user is successfully logged in, we will retrieve the user object from
    our Firebase database. On successful log in, we get the string `uid` of the user
    and use this `uid` to retrieve the user details from the user''s node in the Firebase
    database. As discussed in the preceding section, we get the data in the JSON format
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This JSON object needs to be mapped to the user object. When we retrieve the
    JSON object from Firebase using `AngularFireDatabase`, we provide the type object
    in angle brackets, `<User>` and this maps the JSON to the user object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The constructor accepts all the parameters assigned to its member variable
    as shown in the following code; here''s the complete `user.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating a login template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A login template is the view and this part is similar to the signup template.
    We have reused the email and password elements of signup. It has the following
    three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input form**: This is a textbox and takes a user-typed value'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Submit action**: It triggers the `onLogin()` method with login form data
    as its parameter to the component'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Navigation**: This will be covered in detail in [Chapter 4](part0071.html#23MNU0-bb7c6bfbc452460584038b7864f000f7),
    *Routing and Navigation between Components*, so I will not touch on this part
    here'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the complete `login.component.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Error handling for login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in the preceding chapter, we will handle user input and server
    errors. In the login component, the user input error remains the same as with
    the signup component. In this component, we used the same in-built Angular error.
    This error message helps the user enter correct information.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Login Firebase APIs throw an error when a user logs in to a friend''s application.
    We use the `signInWithEmailAndPassword()` method of `AngularFireAuth` to sign
    up the user. This API throws the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`auth/invalid-email`: As the name implies, this error occurs when a user provides
    an invalid email address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth/user-disabled`: This error occurs when the registered user account is
    disabled in Firebase. This feature is required when the registered user is not
    complying with the terms and conditions of the application. Then, we can show
    a meaningful message to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can disable the user account in the following three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Firebase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to DEVELOP|Authentication on the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Highlight the user on the right panel. Click on the overflow icon and then on
    the Disable account option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following Disable account option in Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`auth/user-not-found`: This error occurs when the user has not signed up in
    our application. In this case, we can direct the user to the signup page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth/wrong-password`: This error occurs when the password is not correct.
    In this case, the user has two options: either provide the correct password or
    reset the password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The login method in the authentication service returns `Promise<any>`. We handle
    the error in the `catch` block.
  prefs: []
  type: TYPE_NORMAL
- en: A promise is a result of any asynchronous operation. After a success or fail
    operation, we use the promise object to retrieve the stored data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then reuse the error alert created in [Chapter 2](part0040.html#164MG0-bb7c6bfbc452460584038b7864f000f7),
    *Creating a Signup Component* and show the error :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user provides a wrong password, the customized error message will be
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a login component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The login component handles the user interaction with the UI. It is injected
    with three services to perform various actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication service**: It provides the login API for signing in following
    the registered user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User service**: It provides a method to retrieve the user details from the
    Firebase database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Router**: This service is required to route to different pages in the application.
    In the login component, we will use this service to route the user to the signup
    page. This will be covered in more detail in the next chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Services are injected in the `constructor` of the login component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The login component also handles user click events. When the user clicks on
    the LOGIN button, the `onLogin` method is called. This method accepts login form
    data as a parameter, that has user-typed data. We retrieve the email and password
    as `loginFormData.value.email` and `loginFormData.value.password`. This data is
    passed to the authentication service for login. On successful log in, we get the
    `uid` of the user and then use this `uid` to retrieve the user details from our
    Firebase database. We also cache these user details in User Service for future
    reference in other pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we saw how to log in as a registered user. Now, the only part missing
    is password recovery, which we will cover in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the complete `login.component.ts` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally we register `LoginComponent` in authentication routing modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'So paste the URL, `http://localhost:4200/app-friends-login` in the browser
    and our login component looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Resetting the password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is good to provide a password recovery option in our application and this
    process increases the usability of our application. The excellent thing is that
    Firebase provides all the infrastructure required to perform this action. We will
    add this feature in our application step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Adding modal template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in the password a reset action is to take a user email address,
    and we will use a modal in this scenario. A modal is a popup/dialog that appears
    on top of the current page view. We will use a modal to display the popup to take
    the user email address.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding the modal template in the login html**: We have modified the `login.component.html` file
    to add the Reset password button, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on Reset Password, the following modal appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the complete `login.component.html` as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding the onReset() functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to add reset method in the login component. The `onReset()`
    method in the login component resets the password and sends the reset instruction
    to the registered email. This email contains the reset link; when we click on
    the link, it opens another browser tab with an alert dialog to provide the new
    password.
  prefs: []
  type: TYPE_NORMAL
- en: 'We add  the `onReset()` method in the login component as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Editing the password-reset template in Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase provides the option to change the template for the email. We can customize
    the email body. In this application, we are using the default template, even though
    you can change it through this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Firebase authentication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right panel, click on the TEMPLATES tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Password reset option on the left panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the pencil icon to edit it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consider the following password reset template in Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we implemented the login component and enhanced the authentication
    and user services. The login template and component look similar to the sign-in
    template and component. We then implemented password reset features in our application. Firebase
    provides the ingredient to implement reset password functionality. We also implemented
    our first modal in our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be covering navigation flow between different components.
    We will also add Angular guard to restrict or enable navigation to a component
    based on a guard condition.
  prefs: []
  type: TYPE_NORMAL
