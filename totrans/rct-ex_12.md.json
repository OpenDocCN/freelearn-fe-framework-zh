["```js\nmodule.exports ={\n  twitter_consumer_key: 'xxxx',\n  twitter_consumer_secret: 'xxxx',\n  twitter_access_token_key: 'xxxx',\n  twitter_access_token_secret: 'xxxx'\n}\n```", "```js\nvar Twitter = require('twitter');\nvar config = require('./config');\n\nvar client = new Twitter({\n  consumer_key: config.twitter_consumer_key,\n  consumer_secret: config.twitter_consumer_secret,\n  access_token_key: config.twitter_access_token_key,\n  access_token_secret: config.twitter_access_token_secret\n});\n```", "```js\nvar express= require('express');\nvar app = new (require('express'))();\nvar port = 3000\n\napp.get('/tweets.json', function (req, res) {\n  var params = {screen_name: req.query.username};\n  client.get('statuses/user_timeline', params, function (error, tweets, response) {\n    if (!error) {\n      res.json(tweets);\n    } else {\n      res.json({error: error});\n    }\n  });\n});\n```", "```js\n// AppDispatcher.js\nvar Dispatcher = require('flux').Dispatcher;\n\nmodule.exports = new Dispatcher();\n```", "```js\n//SocialConstants.js\nvar keyMirror = require('keymirror');\n\nmodule.exports = keyMirror({\n  FILTER_BY_TWEETS: null,\n  FILTER_BY_REDDITS: null,\n  SYNC_TWEETS: null,\n  SYNC_REDDITS: null\n\n});\n```", "```js\n{\nFILTER_BY_TWEETS: 'FILTER_BY_TWEETS', \n…\n}\n```", "```js\n// file: SocialActions.js\nvar AppDispatcher = require('../dispatcher/AppDispatcher');\nvar SocialConstants = require('../constants/SocialConstants');\nvar assign = require('object-assign');\nvar JSONUtil = require('../utils/jsonutil');\n\nvar SocialActions = {\n\n  filterTweets: function (event) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.FILTER_BY_TWEETS,\n      showTweets: event.target.checked\n    });\n  },\n\n  filterReddits: function (event) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.FILTER_BY_REDDITS,\n      showReddits: event.target.checked\n    });\n  },\n\n  syncTweets: function (json) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.SYNC_TWEETS,\n      tweets: json.map((tweet) => {\n        return assign(tweet, {type: 'tweet'})\n      }),\n      receivedAt: Date.now()\n    });\n  },\n\n  syncReddits: function (json) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.SYNC_REDDITS,\n      reddits: json.data.children.map((child) => {\n        return assign(child.data, {type: 'reddit'})\n      }),\n      receivedAt: Date.now()\n    });\n  },\n\n  fetchTweets: function (username) {\n    fetch(`/tweets.json?username=${username}`)\n        .then(JSONUtil.parseJSON)\n        .then(json => SocialActions.syncTweets(json)).catch(JSONUtil.handleParseException)\n  },\n\n  fetchReddits: function (topic) {\n    fetch(`https://www.reddit.com/r/${topic}.json`)\n        .then(JSONUtil.parseJSON)\n        .then(json => SocialActions.syncReddits(json)).catch(JSONUtil.handleParseException)\n  }\n};\n\nmodule.exports = SocialActions;\n```", "```js\n  fetchTweets: function (username) {\n    fetch(`/tweets.json?username=${username}`)\n        .then(JSONUtil.parseJSON)\n        .then(json => SocialActions.syncTweets(json)).catch(JSONUtil.handleParseException)\n  }\n```", "```js\nvar JSONUtil = (function () {\n  function parseJSON(response){\n    return response.json()\n  }\n  function handleParseException(ex) {\n    console.log('parsing failed', ex)\n  }\n  return {'parseJSON': parseJSON, 'handleParseException': handleParseException}\n}());\n\nmodule.exports = JSONUtil;\n```", "```js\n  syncTweets: function (json) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.SYNC_TWEETS,\n      tweets: json.map((tweet) => {\n        return assign(tweet, {type: 'tweet'})\n      }),\n      receivedAt: Date.now()\n    });\n  }\n```", "```js\nassign(tweet, {type: 'tweet'})\n```", "```js\nAppDispatcher.dispatch({ payload…});\n```", "```js\n  fetchReddits: function (topic) {\n    fetch(`https://www.reddit.com/r/${topic}.json`)\n        .then(JSONUtil.parseJSON)\n        .then(json => SocialActions.syncReddits(json)).catch(JSONUtil.handleParseException)\n  }\n```", "```js\n  syncReddits: function (json) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.SYNC_REDDITS,\n      reddits: json.data.children.map((child) => {\n        return assign(child.data, {type: 'reddit'})\n      }),\n      receivedAt: Date.now()\n    });\n  }\n```", "```js\n  filterTweets: function (event) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.FILTER_BY_TWEETS,\n      showTweets: event.target.checked\n    });\n  },\n\n  filterReddits: function (event) {\n    AppDispatcher.dispatch({\n      type: SocialConstants.FILTER_BY_REDDITS,\n      showReddits: event.target.checked\n    });\n  },\n```", "```js\nvar AppDispatcher = require('../dispatcher/AppDispatcher');\nvar EventEmitter = require('events').EventEmitter;\nvar SocialConstants = require('../constants/SocialConstants');\nvar assign = require('object-assign');\nvar _ = require('underscore');\n\nvar CHANGE_EVENT = 'change';\n\nvar _state = {\n  tweets: [],\n  reddits: [],\n  feed: [],\n  showTweets: true,\n  showReddits: true\n};\n```", "```js\nfunction updateState(state) {\n  _state = assign({}, _state, state);\n}\n```", "```js\nvar SocialStore = assign({}, EventEmitter.prototype, {\n\n  getState: function () {\n    return _state;\n  },\n\n  emitChange: function () {\n    this.emit(CHANGE_EVENT);\n  },\n\n  addChangeListener: function (callback) {\n    this.on(CHANGE_EVENT, callback);\n  },\n\n  removeChangeListener: function (callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n});\n```", "```js\nthis.emit(CHANGE_EVENT);\n```", "```js\ngetState: function () {\n    return _state;\n  }\n```", "```js\nAppDispatcher.register(function (action) {\n\n  switch (action.type) {\n\n    case SocialConstants.FILTER_BY_TWEETS:\n      updateState({\n        showTweets: action.showTweets,\n        feed: mergeFeed(_state.tweets, _state.reddits, action.showTweets, _state.showReddits)\n      });\n      SocialStore.emitChange();\n      break;\n\n    case SocialConstants.FILTER_BY_REDDITS:\n      updateState({\n        showReddits: action.showReddits,\n        feed: mergeFeed(_state.tweets, _state.reddits, _state.showTweets, action.showReddits)\n      });\n      SocialStore.emitChange();\n      break;\n    case SocialConstants.SYNC_TWEETS:\n      updateState({\n        tweets: action.tweets,\n        feed: mergeFeed(action.tweets, _state.reddits, _state.showTweets, _state.showReddits)\n      });\n      SocialStore.emitChange();\n      break;\n\n    case SocialConstants.SYNC_REDDITS:\n      updateState({\n        reddits: action.reddits,\n        feed: mergeFeed(_state.tweets, action.reddits, _state.showTweets, _state.showReddits)\n      });\n      SocialStore.emitChange();\n      break;\n    default:\n    // no op\n  }\n});\n```", "```js\n    case SocialConstants.SYNC_TWEETS:\n      updateState({\n        tweets: action.tweets,\n        feed: mergeFeed(action.tweets, _state.reddits, _state.showTweets, _state.showReddits)\n      });\n      SocialStore.emitChange();\n      break;\n```", "```js\nfunction mergeFeed(tweets, reddits, showTweets, showReddits) {\n  let mergedFeed = [];\n  mergedFeed = showTweets ? mergedFeed.concat(tweets) : mergedFeed;\n  mergedFeed = showReddits ? mergedFeed.concat(reddits) : mergedFeed;\n\n  mergedFeed = _.sortBy(mergedFeed, (feedItem) => {\n    if (feedItem.type == 'tweet') {\n      let date = new Date(feedItem.created_at);\n      return date.getTime();\n    } else if ((feedItem.type == 'reddit')) {\n      return feedItem.created_utc * 1000;\n    }\n  })\n  return mergedFeed;\n};\n```", "```js\n      SocialStore.emitChange();\n```", "```js\nvar React = require('react');\nvar ReactBootstrap =  require('react-bootstrap');\nvar Row =  ReactBootstrap.Row, Jumbotron =  ReactBootstrap.Jumbotron;\n\nvar Header = React.createClass({\n\n  render: function () {\n    return (\n        <Row>\n          <Jumbotron className=\"center-text\">\n            <h1>Social Media Tracker</h1>\n          </Jumbotron>\n        </Row>\n    );\n  }\n\n});\n\nmodule.exports = Header;\n```", "```js\nvar React = require('react');\n…\nvar SocialActions = require('../actions/SocialActions');\nvar SocialStore = require('../stores/SocialStore');\nvar MainSection = React.createClass({\n\n  getInitialState: function () {\n    return assign({twitter: 'twitter', reddit: 'twitter'}, SocialStore.getState());\n  },\n\n  componentDidMount: function () {\n    SocialStore.addChangeListener(this._onChange);\n    this.syncFeed();\n  },\n\n  componentWillUnmount: function () {\n    SocialStore.removeChangeListener(this._onChange);\n  },\n\n  render: function () {\n\n    return (\n        <Row>\n          <Col xs={8} md={8} mdOffset={2}>\n            <Table striped hover>\n              <thead>\n              <tr>\n                <th width='200'>Feed Type</th>\n                <th>Feed Source</th>\n              </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <td><Input id='test' type=\"checkbox\" label=\"Twitter\" onChange={SocialActions.filterTweets}\n                           checked={this.state.showTweets}/></td>\n                <td><Input onChange={this.changeTwitterSource} type=\"text\" addonBefore=\"@\" value={this.state.twitter}/>\n                </td>\n              </tr>\n              <tr>\n                <th><Input type=\"checkbox\" label=\"Reddit\" onChange={SocialActions.filterReddits}\n                           checked={this.state.showReddits}/></th>\n                <td><Input onChange={this.changeRedditSource} type=\"text\" addonBefore=\"@\"\n                           value={this.state.reddit}/></td>\n              </tr>\n              <tr>\n                <th></th>\n                <td><Button bsStyle=\"primary\" bsSize=\"large\" onClick={this.syncFeed}>Sync Feed</Button>\n                </td>\n              </tr>\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n    );\n  },\n\n  changeTwitterSource: function (event) {\n    this.setState({twitter: event.target.value});\n  },\n\n  changeRedditSource: function (event) {\n    this.setState({reddit: event.target.value});\n  },\n\n  syncFeed: function () {\n    SocialActions.fetchReddits(this.state.reddit);\n    SocialActions.fetchTweets(this.state.twitter);\n  },\n\n  _onChange: function () {\n    this.setState(SocialStore.getState());\n  }\n\n});\n\nmodule.exports = MainSection;\n```", "```js\n  getInitialState: function () {\n    return assign({twitter: 'twitter', reddit: 'twitter'}, SocialStore.getState());\n  },\n```", "```js\n  changeTwitterSource: function (event) {\n    this.setState({twitter: event.target.value});\n  },\n\n  changeRedditSource: function (event) {\n    this.setState({reddit: event.target.value});\n  },\n```", "```js\n<Input onChange={this.changeTwitterSource} type=\"text\" addonBefore=\"@\" value={this.state.twitter}/>\n```", "```js\n  componentDidMount: function () {\n    SocialStore.addChangeListener(this._onChange);\n    this.syncFeed();\n  },\n\n  componentWillUnmount: function () {\n    SocialStore.removeChangeListener(this._onChange);\n  },\n```", "```js\n    this.setState(SocialStore.getState());\n```", "```js\n  syncFeed: function () {\n    SocialActions.fetchReddits(this.state.reddit);\n    SocialActions.fetchTweets(this.state.twitter);\n  },\n```", "```js\nvar ArrayUtil = require('../utils/array');\nvar assign = require('object-assign');\nvar Header = require('./Header.react');\nvar MainSection = require('./MainSection.react');\nvar React = require('react');\nvar SocialStore = require('../stores/SocialStore');\nvar SocialActions = require('../actions/SocialActions');\nvar ReactBootstrap =  require('react-bootstrap');\nvar Col =  ReactBootstrap.Col, Grid =  ReactBootstrap.Grid, Row =  ReactBootstrap.Row;\n\nvar SocialTracker = React.createClass({\n  getInitialState: function() {\n    return assign({}, SocialStore.getState());\n  },\n  componentDidMount: function() {\n    SocialStore.addChangeListener(this._onChange);\n  },\n  componentWillUnmount: function() {\n    SocialStore.removeChangeListener(this._onChange);\n  },\n  render: function() {\n    return (\n        <Grid className=\"grid\">\n          <Header/>\n          <MainSection/>\n          {this.renderFeed()}\n        </Grid>\n    )\n  },\n\n  renderFeed: function() {\n    var feed = this.state.feed;\n    var feedCollection = ArrayUtil.in_groups_of(feed, 3);\n    if (feed.length > 0) {\n      return feedCollection.map((feedGroup, index) => {\n        console.log(feedGroup);\n        return <Row key={`${feedGroup[0].id}${index}`}>\n          {feedGroup.map((feed) => {\n            if (feed.type == 'tweet') {\n              return <Col md={4} key={feed.id}><div className=\"well twitter\"><p>{feed.text}</p></div></Col>;\n            } else {\n              var display = feed.selftext == \"\" ? `${feed.title}: ${feed.url}` : feed.selftext;\n              return <Col md={4} key={feed.id}><div className=\"well reddit\"><p>{display}</p></div></Col>;\n            }\n          })}\n        </Row>\n      });\n    } else {\n      return <div></div>\n    }\n  },\n\n  _onChange: function() {\n    this.setState(SocialStore.getState());\n  }\n\n});\n\nmodule.exports = SocialTracker;\n```", "```js\nvar ArrayUtil = (function () {\n  function in_groups_of(arr, n) {\n    var ret = [];\n    var group = [];\n    var len = arr.length;\n    for (var i = 0; i < len; ++i) {\n      group.push(arr[i]);\n      if ((i + 1) % n == 0) {\n        ret.push(group);\n        group = [];\n      }\n    }\n    if (group.length) ret.push(group);\n    return ret;\n  };\n\n  return {'in_groups_of': in_groups_of}\n}());\n\nmodule.exports = ArrayUtil;\n```", "```js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar SocialTracker = require('./components/SocialTracker.react');\n\nReactDOM.render(\n  <SocialTracker />,\n  document.getElementById('container')\n);\n```"]