- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Creating Reusable and Extendable Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可重用和可扩展组件
- en: In modern web development, the essence of maintainability and efficiency lies
    in the ability to craft components that can be effortlessly reused and extended.
    This not only streamlines the development process but also ensures consistency
    and maintainability across your applications. So, in this chapter, we will get
    into the concept of creating reusable and extendable components in Angular applications
    utilizing PrimeNG building blocks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代网络开发中，可维护性和效率的本质在于能够制作出可以轻松重用和扩展的组件。这不仅简化了开发过程，还确保了应用程序的一致性和可维护性。因此，在本章中，我们将探讨利用
    PrimeNG 构建块在 Angular 应用程序中创建可重用和可扩展组件的概念。
- en: While PrimeNG does offer a vast selection of prebuilt reusable components, there
    are instances where creating custom Angular components becomes necessary. Custom
    components provide tailored functionality, allowing you to implement specific
    application requirements and integrate with existing code. They also enable UI
    customization, ensuring a unique visual design and user interface. Additionally,
    custom components allow for performance optimization and cater to domain-specific
    needs that may not be covered by the prebuilt components. By weighing the trade-offs
    between customization and development effort, you can leverage both PrimeNG’s
    offerings and custom components to build highly adaptable and efficient Angular
    applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 PrimeNG 提供了大量的预构建可重用组件，但在某些情况下，创建自定义 Angular 组件变得必要。自定义组件提供定制功能，允许您实现特定的应用程序需求并与现有代码集成。它们还支持
    UI 定制，确保独特的视觉设计和用户界面。此外，自定义组件允许进行性能优化，并满足可能未由预构建组件覆盖的特定领域需求。通过权衡定制与开发工作之间的权衡，您可以利用
    PrimeNG 的提供和自定义组件来构建高度适应性和高效的 Angular 应用程序。
- en: Throughout this chapter, we aim to equip you with the skills necessary to design
    components that can be effortlessly integrated into various projects, adapted
    as per requirements, and extended with new functionalities. This knowledge is
    pivotal, as it allows for rapid development without compromising on code quality.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的目标是让您掌握设计能够轻松集成到各种项目、根据需求进行适应并扩展新功能的组件所需的技能。这种知识至关重要，因为它允许快速开发而不牺牲代码质量。
- en: 'The chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing reusable and extendable components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍可重用和可扩展组件
- en: Getting to know StyleClass
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 StyleClass
- en: Utilizing PrimeBlocks for creating UI blocks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 PrimeBlocks 创建 UI 块
- en: Creating reusable and extendable components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用和可扩展组件
- en: Crafting your own components
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计您自己的组件
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter contains various working code samples on how to create reusable
    and extendable components. You can find the related source code in the `chapter-11`
    folder of the following GitHub repository: [https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-11](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-11).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种工作代码示例，说明如何创建可重用和可扩展的组件。您可以在以下 GitHub 仓库的 `chapter-11` 文件夹中找到相关源代码：[https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-11](https://github.com/PacktPublishing/Next-Level-UI-Development-with-PrimeNG/tree/main/apps/chapter-11)。
- en: Introducing reusable and extendable components
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍可重用和可扩展组件
- en: At its core, the foundation of reusable and extendable components in Angular
    is built upon Angular components themselves. The only difference is that we build
    them in a way that allows us to encapsulate functionality and user interface elements
    that can be easily reused and extended in different parts of our application.
    By combining reusability and extensibility, we can create components that promote
    code reuse, maintainability, and flexibility.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Angular 中，可重用和可扩展组件的核心是建立在 Angular 组件本身的基础之上。唯一的区别是我们以允许我们在应用程序的不同部分轻松重用和扩展功能的方式构建它们。通过结合可重用性和可扩展性，我们可以创建促进代码重用、可维护性和灵活性的组件。
- en: In this section, we will explore why they are important and the best practices
    for building Angular components.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨它们的重要性以及构建 Angular 组件的最佳实践。
- en: Why are reusable and extendable components important?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么可重用和可扩展组件很重要？
- en: 'Reusable and extendable components offer several benefits in the development
    process:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可重用和可扩展组件在开发过程中提供了几个好处：
- en: Firstly, they promote *code organization and modularity* by breaking down complex
    functionality into smaller, reusable units. This improves code maintainability
    and makes it easier to debug and test individual components.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，它们通过将复杂功能分解成更小、更可重用的单元来促进代码组织和模块化。这提高了代码的可维护性，并使得调试和测试单个组件更容易。
- en: Secondly, reusable and extendable components *enhance development efficiency*
    by allowing developers to build upon existing solutions rather than starting from
    scratch. This saves time and effort, especially in large-scale applications where
    similar functionality is required in multiple places.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，可重用和可扩展的组件通过允许开发者基于现有解决方案进行构建而不是从头开始，从而提高开发效率。这在需要在大规模应用程序中在多个地方实现类似功能时，可以节省时间和精力。
- en: Lastly, reusable and extendable components contribute to a *consistent user
    experience* by ensuring that common UI elements and functionalities are used consistently
    throughout the application. This fosters familiarity and usability for users interacting
    with different parts of the system.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，可重用和可扩展的组件通过确保在整个应用程序中一致地使用常见的UI元素和功能，从而有助于提供一致的用户体验。这促进了用户与系统不同部分交互时的熟悉度和可用性。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Optimizing for re-usability can be an anti-pattern—sometimes it is easier to
    maintain two visually identical components that are used in different contexts.
    As requirements continue to evolve, components can increase in complexity to cover
    various cases for each of the contexts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 优化重用性可能是一种反模式——有时维护两个在不同上下文中使用的视觉上完全相同的组件更容易。随着需求的持续演变，组件可能会增加复杂性以覆盖每个上下文的各个情况。
- en: Steps to create reusable and extendable components
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建可重用和可扩展组件的步骤
- en: 'Creating reusable and extendable components in Angular involves several steps.
    Here is a general outline of the process:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中创建可重用和可扩展的组件涉及几个步骤。以下是这个过程的一般概述：
- en: '**Identify common patterns**: Before diving into code, thoroughly analyze your
    application to identify recurring UI patterns and functionalities that appear
    across multiple components or pages.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别常见模式**：在深入代码之前，彻底分析您的应用程序以识别在多个组件或页面中出现的重复UI模式和功能。'
- en: '**Design with inputs and outputs**: Plan and implement your component to be
    flexible and adaptable, define input properties that allow data to be passed into
    the component from its parent, and specify output properties to emit events back
    to the parent when certain actions or changes occur within the component.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计时考虑输入和输出**：计划和实现您的组件以使其灵活和适应性强，定义允许数据从父组件传递到组件的输入属性，并指定当组件内部发生某些操作或变化时，向父组件发出事件的输出属性。'
- en: '**Keep styling consistent but customizable**: Utilize Angular’s encapsulated
    styles to ensure component styles don’t affect other parts of the application.
    However, also consider providing customization options, such as CSS custom properties,
    to enable users of the component to easily override or modify its styling when
    needed.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保持样式一致但可定制**：利用Angular的封装样式确保组件样式不影响应用程序的其他部分。然而，还应考虑提供定制选项，例如CSS自定义属性，以便组件的用户在需要时可以轻松覆盖或修改其样式。'
- en: '**Write comprehensive tests**: Develop a comprehensive suite of tests to validate
    the functionality and behavior of your component. Include unit tests to assess
    individual parts of the component’s logic, integration tests to verify it works
    correctly with other components or services, and end-to-end tests to simulate
    real user interactions.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写全面的测试**：开发一套全面的测试套件以验证组件的功能和行为。包括单元测试来评估组件逻辑的各个部分，集成测试来验证其与其他组件或服务正确工作的能力，以及端到端测试来模拟真实用户交互。'
- en: '**Document thoroughly**: Create clear and comprehensive documentation for your
    component. Explain its purpose, provide step-by-step instructions on how to use
    it, and offer guidance on extending or customizing the component if necessary.
    Include examples, code snippets, and any relevant API references to assist users
    in effectively utilizing the component in their projects.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**彻底文档化**：为您的组件创建清晰和全面的文档。解释其目的，提供如何使用的分步说明，并在必要时提供有关扩展或定制组件的指导。包括示例、代码片段和任何相关的API引用，以帮助用户在项目中有效地使用组件。'
- en: Angular component best practices
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular组件最佳实践
- en: 'When building components in Angular, it is important to follow best practices
    to maximize their effectiveness. Here are some key practices to consider:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中构建组件时，遵循最佳实践以最大化其有效性非常重要。以下是一些需要考虑的关键实践：
- en: '**Smart components and presentation components**: Angular promotes the separation
    of concerns through the use of smart components and presentation components. Smart
    components handle logic and data management, while presentation components focus
    on rendering the user interface and receiving input. This separation allows for
    better code organization and facilitates the reusability of presentation components
    across different smart components.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能组件和展示组件**：Angular通过使用智能组件和展示组件来促进关注点的分离。智能组件处理逻辑和数据管理，而展示组件则专注于渲染用户界面并接收输入。这种分离使得代码组织更加合理，并促进了展示组件在不同智能组件之间的重用。'
- en: '**Component composition**: Component composition involves creating components
    by combining smaller, reusable components. This approach encourages the building
    of components with a single responsibility, making them easier to understand,
    test, and reuse. By composing components, you can leverage the strengths of each
    component and create more complex functionality by combining them.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件组合**：组件组合涉及通过组合较小的、可重用的组件来创建组件。这种方法鼓励构建具有单一职责的组件，使其更容易理解、测试和重用。通过组合组件，您可以利用每个组件的优势，并通过组合它们来创建更复杂的功能。'
- en: '**Inputs and outputs**: Using inputs and outputs in components allows for easy
    communication between parent and child components. Inputs enable the passing of
    data from a parent component to a child component, while outputs facilitate the
    emission of events from a child component to a parent component. This interaction
    enables components to be more flexible and adaptable to different contexts and
    requirements.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入和输出**：在组件中使用输入和输出允许父组件和子组件之间进行轻松通信。输入使数据从父组件传递到子组件成为可能，而输出则便于子组件向父组件发射事件。这种交互使得组件更加灵活和适应不同的环境和需求。'
- en: '**Template and style encapsulation**: Angular provides mechanisms for encapsulating
    component templates and styles to prevent unintended styling conflicts and maintain
    component isolation. Encapsulating templates and styles within components ensure
    that they are self-contained and can be easily reused without affecting other
    parts of the application.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板和样式封装**：Angular提供了封装组件模板和样式的机制，以防止意外的样式冲突并保持组件的隔离。在组件内封装模板和样式确保它们是自包含的，并且可以轻松重用，而不会影响应用的其他部分。'
- en: By creating components that encapsulate specific functionality and can be easily
    reused across different parts of the application, we promote code reusability
    and maintainability.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建封装特定功能且可轻松在不同应用部分复用的组件，我们促进了代码的可重用性和可维护性。
- en: Now, let’s transition to exploring the `StyleClass` feature, which allows us
    to further customize and style our components in a flexible and dynamic manner.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向探索`StyleClass`功能，它允许我们以灵活和动态的方式进一步自定义和样式化我们的组件。
- en: Getting to know StyleClass
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解StyleClass
- en: PrimeNG **StyleClass** is a powerful feature provided by the PrimeNG library
    for Angular applications. It allows you to manage CSS classes declaratively, making
    it easier to apply dynamic styles, handle animations, and toggle classes on elements.
    This feature enhances the flexibility and customizability of Angular components,
    enabling you to create visually appealing and interactive user interfaces.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG **StyleClass**是PrimeNG库为Angular应用提供的一个强大功能。它允许您声明式地管理CSS类，这使得应用动态样式、处理动画和切换元素上的类变得更容易。此功能增强了Angular组件的灵活性和可定制性，使您能够创建视觉上吸引人且交互性强的用户界面。
- en: Why use PrimeNG StyleClass?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用PrimeNG StyleClass？
- en: PrimeNG StyleClass is particularly useful when working with custom components
    in Angular. It provides a straightforward and efficient way to apply styles and
    manipulate classes based on various conditions or events. Using PrimeNG StyleClass,
    you can dynamically change the appearance and behavior of components, enhancing
    the user experience and adding interactivity to their applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG StyleClass在处理Angular中的自定义组件时特别有用。它提供了一种简单高效的方法来根据各种条件或事件应用样式和操作类。使用PrimeNG
    StyleClass，您可以动态更改组件的外观和行为，从而提升用户体验并增加应用的交互性。
- en: One of the key advantages of PrimeNG StyleClass is its ability to handle animations
    during component transitions. By defining enter and leave classes, you can create
    smooth and visually pleasing animations when components are displayed or hidden.
    This can greatly enhance the overall user experience and make the application
    feel more polished and professional.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG StyleClass 的一个关键优点是它能够在组件转换期间处理动画。通过定义进入和离开类，您可以在组件显示或隐藏时创建平滑且视觉上令人愉悦的动画。这可以极大地提升整体用户体验，并使应用程序感觉更加精致和专业。
- en: Another benefit of PrimeNG StyleClass is its simplicity and ease of use. You
    can define the target element using selector properties, which make it easier
    to toggle classes or add animation without creating your own custom functions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG StyleClass 的另一个优点是其简单性和易用性。您可以使用选择器属性定义目标元素，这使得切换类或添加动画而无需创建自己的自定义函数变得更容易。
- en: For further reference, you can explore a comprehensive list of StyleClass properties
    and keywords at [https://primeng.org/styleclass](https://primeng.org/styleclass).
    Now, let’s dive into some practical examples that demonstrate how to effectively
    utilize StyleClass in your projects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步参考，您可以在 [https://primeng.org/styleclass](https://primeng.org/styleclass)
    上探索 StyleClass 属性和关键词的完整列表。现在，让我们深入研究一些实际示例，展示如何有效地在项目中使用 StyleClass。
- en: 'Example: toggle classes'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：切换类
- en: 'Let’s consider an example where we want to create a custom Angular component
    that toggles dark mode based on user interaction. We can use PrimeNG StyleClass
    to achieve this functionality in a clean and maintainable way. Let’s see the code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个示例，其中我们想要创建一个基于用户交互切换暗黑模式的自定义 Angular 组件。我们可以使用 PrimeNG StyleClass 以干净和可维护的方式实现此功能。让我们看看代码：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s break down each element and its purpose:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解每个元素及其用途：
- en: '`pStyleClass="@next"`: The `pStyleClass` directive with the value `@next` indicates
    that the style class should be applied to the next sibling element.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pStyleClass="@next"`：具有值 `@next` 的 `pStyleClass` 指令表示应将样式类应用于下一个兄弟元素。'
- en: '`toggleClass="dark-mode"`: This attribute specifies the class that should be
    toggled when the button is clicked. In this case, the class name is `dark-mode`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toggleClass="dark-mode"`：此属性指定当按钮被点击时应该切换的类。在这种情况下，类名为 `dark-mode`。'
- en: Overall, the code snippet demonstrates the usage of PrimeNG’s `<p-button>` component
    with the `pStyleClass`, `toggleClass`, and `label` attributes. It suggests that
    the button is used to toggle the dark mode by applying or removing the `dark-mode`
    class to the next element.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，代码片段展示了 PrimeNG 的 `<p-button>` 组件使用 `pStyleClass`、`toggleClass` 和 `label`
    属性的用法。它表明按钮用于通过应用或移除 `dark-mode` 类到下一个元素来切换暗黑模式。
- en: 'Here is the result:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是结果：
- en: '![Figure 11.1 – Toggling dark mode with StyleClass](img/B18805_11_01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 使用 StyleClass 切换暗黑模式](img/B18805_11_01.jpg)'
- en: Figure 11.1 – Toggling dark mode with StyleClass
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 使用 StyleClass 切换暗黑模式
- en: After clicking on the `dark-mode` class added, which renders the element in
    dark mode.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 点击添加 `dark-mode` 类后，元素将以暗黑模式渲染。
- en: 'Example: animation'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：动画
- en: In addition to applying classes and styles, PrimeNG StyleClass also supports
    animations during component transitions. This can be achieved by specifying `enter`
    and `leave` classes along with their corresponding `active` and `completion` classes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了应用类和样式外，PrimeNG StyleClass 还支持在组件转换期间进行动画。这可以通过指定 `enter` 和 `leave` 类及其对应的
    `active` 和 `completion` 类来实现。
- en: 'Let’s consider an example where we want to create a fade-in and fade-out animation
    for a custom Angular component:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个示例，其中我们想要为自定义 Angular 组件创建淡入和淡出动画：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s break the code down:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码：
- en: '`<button pButton ...>`: This is the PrimeNG button component that will trigger
    the animation action after it is clicked.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button pButton ...>`：这是 PrimeNG 按钮组件，在点击后会触发动画动作。'
- en: '`pStyleClass=".box"`: This directive targets the element that has `box` in
    the class name.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pStyleClass=".box"`：此指令针对具有 `box` 在类名中的元素。'
- en: '`enterClass="hidden"`: This defines the class `hidden` to be targeted when
    the button is clicked and the box content begins to appear on the screen.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enterClass="hidden"`：这定义了当按钮被点击且框内容开始在屏幕上出现时，应针对的类 `hidden`。'
- en: '`enterActiveClass="fadein"`: This specifies the class `fadein` to be added
    during the `enter` animation of the associated element.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enterActiveClass="fadein"`：这指定了在相关元素的 `enter` 动画期间应添加的类 `fadein`。'
- en: '`leaveActiveClass="fadeout"`: This defines the class `fadeout` to be added
    during the `leave` animation when the button is clicked; after that, the associated
    element starts to become hidden.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leaveActiveClass="fadeout"`：这定义了在按钮点击时添加到`leave`动画期间的`fadeout`类；之后，相关元素开始变得隐藏。'
- en: '`leaveToClass="hidden"`: This specifies the class `hidden` to be added when
    the `leave` animation of the box content disappears.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leaveToClass="hidden"`：这指定了在盒内容`leave`动画消失时添加的`hidden`类。'
- en: With a deeper understanding of `StyleClass`, we’ve unlocked the potential to
    craft visually cohesive and appealing components in our applications. Now, let’s
    transition into utilizing PrimeBlocks for creating UI blocks, where we’ll harness
    pre-designed blocks to further expedite our UI development process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 深入理解`StyleClass`后，我们解锁了在应用中创建视觉上统一且吸引人的组件的潜力。现在，让我们过渡到使用PrimeBlocks来创建UI块，我们将利用预先设计的块来进一步加速我们的UI开发过程。
- en: Utilizing PrimeBlocks for creating UI clocks
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用PrimeBlocks创建UI时钟
- en: '`PrimeFlex` developed by PrimeNG. These blocks are designed to simplify the
    development process by providing ready-to-use UI elements that are commonly used
    in web applications. PrimeBlocks offers a variety of UI blocks, including **Navbar**,
    **Breadcrumbs**, **Tabs**, **Footer**, **Notification**, **Dialog**, and more.
    These UI blocks are highly customizable and can be easily integrated into your
    Angular projects:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由PrimeNG开发的`PrimeFlex`。这些块旨在通过提供在Web应用中常用的一套预定义UI元素来简化开发过程。PrimeBlocks提供各种UI块，包括**导航栏**、**面包屑**、**标签页**、**页脚**、**通知**、**对话框**等。这些UI块高度可定制，并且可以轻松集成到您的Angular项目中：
- en: '![Figure 11.2 – PrimeBlocks options](img/B18805_11_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – PrimeBlocks选项](img/B18805_11_02.jpg)'
- en: Figure 11.2 – PrimeBlocks options
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – PrimeBlocks选项
- en: PrimeBlocks offers both a free version and paid versions with distinct features.
    The free version provides a limited selection of options to choose from, while
    the paid versions offer an extensive collection of over 400 ready-to-use UI blocks.
    In addition to the UI blocks’ codes, the paid versions also include valuable extras
    such as Figma files, lifetime support, and unlimited updates.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeBlocks提供免费版和付费版，具有不同的功能。免费版提供有限的选项供选择，而付费版则提供超过400个预定义UI块的广泛选择。除了UI块的代码外，付费版还包括如Figma文件、终身支持和无限更新等有价值的额外功能。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It’s important to keep in mind that the paid version has licensing restrictions,
    prohibiting the use of these blocks in open source projects where the code is
    publicly accessible.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，付费版有许可限制，禁止在代码公开可访问的开源项目中使用这些块。
- en: In the next section, we’ll explore the pros and cons of utilizing PrimeBlocks
    to provide a comprehensive overview of its benefits and considerations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨利用PrimeBlocks的优缺点，以提供一个全面的概述，包括其优势和考虑因素。
- en: Advantages and Disadvantages of using PrimeBlocks
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PrimeBlocks的优缺点
- en: 'When compared to custom Angular components, PrimeBlocks offers several advantages:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与自定义Angular组件相比，PrimeBlocks提供了几个优点：
- en: '**Rapid prototyping**: PrimeBlocks is an excellent choice for prototyping or
    creating proof-of-concept applications. The library offers a wide variety of components
    that can be easily assembled to create a functional UI. By leveraging PrimeBlocks,
    you can quickly create interactive prototypes to gather feedback from stakeholders
    or validate design concepts. This allows for faster iteration and refinement of
    the application’s user interface.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速原型设计**：PrimeBlocks是原型设计或创建概念验证应用的绝佳选择。该库提供多种组件，可以轻松组合以创建功能性的UI。通过利用PrimeBlocks，您可以快速创建交互式原型，以收集利益相关者的反馈或验证设计概念。这允许更快地迭代和改进应用的用户界面。'
- en: '**Consistent user experience**: PrimeBlocks provides a consistent and professional
    user experience throughout your application. The components follow the PrimeNG
    design language, which ensures a cohesive look and feel across different screens
    and sections of your application. This consistency enhances the user experience
    by reducing cognitive load and improving usability. By using PrimeBlocks, you
    can create a visually appealing and intuitive interface that aligns with industry
    best practices.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致的用户体验**：PrimeBlocks在整个应用中提供一致且专业的用户体验。组件遵循PrimeNG设计语言，确保在不同屏幕和应用的各个部分中保持统一的视觉和感觉。这种一致性通过减少认知负荷和提高可用性来增强用户体验。通过使用PrimeBlocks，您可以创建一个视觉上吸引人且直观的界面，符合行业最佳实践。'
- en: '**Customization and extensibility**: Despite being prebuilt UI blocks, PrimeBlocks
    offers a high level of customization and extensibility. Each block comes with
    a set of configurable options and styling classes that allow you to tailor the
    components to meet your specific requirements. You can easily customize colors,
    sizes, layouts, and behavior to match your application’s branding and design guidelines.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制和可扩展性**：尽管是预构建的 UI 块，但 PrimeBlocks 提供了高水平的定制和可扩展性。每个块都附带一组可配置选项和样式类，允许你根据特定要求调整组件。你可以轻松地自定义颜色、大小、布局和行为，以匹配你的应用程序的品牌和设计指南。'
- en: While PrimeBlocks offers numerous benefits, there are a few potential downsides
    to consider. These include limited customization options, as the UI blocks are
    pre-designed and there’s a dependency on external libraries or frameworks, licensing
    restrictions that prohibit usage in open source projects, and a potential learning
    curve in implementing the blocks effectively. Evaluating these considerations
    against your project requirements will help determine if PrimeBlocks is the right
    fit for your needs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 PrimeBlocks 提供了许多好处，但还有一些潜在的缺点需要考虑。这包括有限的定制选项，因为 UI 块是预先设计的，并且依赖于外部库或框架，许可限制禁止在开源项目中使用，以及实施块可能存在的学习曲线。将考虑这些因素与你的项目需求相对比，将有助于确定
    PrimeBlocks 是否适合你的需求。
- en: How to use PrimeBlocks
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 PrimeBlocks
- en: 'Since PrimeBlocks offers UI blocks that contain HTML elements, you can just
    copy and paste them into your Angular components. In this section, I will showcase
    examples utilizing the PrimeBlocks Free version. Here are just some of the blocks
    available:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 PrimeBlocks 提供包含 HTML 元素的 UI 块，你只需将它们复制并粘贴到你的 Angular 组件中。在本节中，我将展示使用 PrimeBlocks
    免费版本的示例。以下是一些可用的块：
- en: '**Hero block**: A Hero block is a prominent section at the top of a webpage,
    typically featuring a captivating image or video along with a concise headline
    and call-to-action. It serves to grab the visitors’ attention and create a visually
    impactful introduction to the content.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**英雄块**：英雄块是网页顶部的突出区域，通常包含引人注目的图像或视频，以及简洁的标题和行动号召。它旨在吸引访客的注意力，并为内容创造一个视觉上有影响力的介绍。'
- en: '**Feature block**: The Feature block highlights the key features or functionalities
    of a product, service, or website. It typically presents these features in a visually
    appealing manner, making it easier for users to understand and evaluate the offering.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能块**：功能块突出显示产品、服务或网站的关键功能或功能。它通常以视觉吸引人的方式展示这些功能，使用户更容易理解和评估所提供的方案。'
- en: '**Pricing block**: The Pricing block is commonly used on websites offering
    products or services with different pricing tiers or plans. It displays the various
    pricing options, including features and benefits associated with each plan, allowing
    users to compare and select the most suitable option.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定价块**：定价块通常用于提供不同定价层级或计划的网站。它显示了各种定价选项，包括与每个计划相关的功能和好处，使用户能够比较和选择最合适的选项。'
- en: '**Call to Action block**: The **Call to Action** (**CTA**) block is designed
    to prompt users to take a specific action, such as signing up, making a purchase,
    or subscribing to a newsletter. It usually includes a persuasive message along
    with a prominent button or link to encourage user engagement.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动号召块**：**行动号召**（**CTA**）块旨在提示用户采取特定行动，例如注册、购买或订阅通讯。它通常包括一个有说服力的信息，以及一个突出的按钮或链接来鼓励用户参与。'
- en: '**Banner block**: A Banner block is a horizontal section typically placed at
    the top or bottom of a webpage. It often contains important announcements or promotional
    content to capture users’ attention and convey essential information.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**横幅块**：横幅块通常放置在网页的顶部或底部，是一个水平的区域。它通常包含重要的公告或促销内容，以吸引用户的注意力并传达关键信息。'
- en: Let’s see how to use them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用它们。
- en: Getting started
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始使用
- en: 'Before getting started, make sure that you have the correct version of PrimeNG
    (v11.4.4+) and PrimeFlex (v3.2.0+). If you haven’t installed PrimeFlex yet, you
    can type this command to install it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保你已经安装了正确的 PrimeNG 版本（v11.4.4+）和 PrimeFlex 版本（v3.2.0+）。如果你还没有安装 PrimeFlex，你可以输入以下命令来安装它：
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, you can add the `primeflex.scss` to `styles.scss` file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以将 `primeflex.scss` 添加到 `styles.scss` 文件中：
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Picking your blocks
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择你的块
- en: 'After the preparation is done, you can implement blocks:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 准备工作完成后，你可以实现块：
- en: 'On the PrimeBlocks website, navigate to the **Free Blocks** section ([https://blocks.primeng.org/#/free](https://blocks.primeng.org/#/free))
    and choose a block that you would like to implement. For this example, I will
    pick **Call to Action** block, which you can see here:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PrimeBlocks网站上，导航到**免费块**部分（[https://blocks.primeng.org/#/free](https://blocks.primeng.org/#/free)）并选择你想要实现的块。在这个例子中，我将选择**行动号召**块，你可以在这里看到：
- en: '![Figure 11.3 – PrimeBlocks Call to Action](img/B18805_11_03.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – PrimeBlocks行动号召](img/B18805_11_03.jpg)'
- en: Figure 11.3 – PrimeBlocks Call to Action
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – PrimeBlocks行动号召
- en: 'Click on the **Code** button and you will see the code ready to use:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**代码**按钮，你将看到准备使用的代码：
- en: '![Figure 11.4 – PrimeBlocks Call to Action code](img/B18805_11_04.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4 – PrimeBlocks行动号召代码](img/B18805_11_04.jpg)'
- en: Figure 11.4 – PrimeBlocks Call to Action code
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – PrimeBlocks行动号召代码
- en: 'All we need to do is copy and paste the code into our application and it will
    work like a charm:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的只是将代码复制粘贴到我们的应用程序中，它就会像魔法一样工作：
- en: '![Figure 11.5 – Implement Call to Action code](img/B18805_11_05.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – 实现行动号召代码](img/B18805_11_05.jpg)'
- en: Figure 11.5 – Implement Call to Action code
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – 实现行动号召代码
- en: Having delved into the capabilities of PrimeBlocks, we’ve seen how these building
    blocks can streamline our UI development, ensuring consistency and saving time.
    They offer a solid foundation for rapidly creating visually appealing and functional
    user interfaces. However, sometimes, our projects demand a more tailored approach.
    As we move on to the next section, we’ll explore how to craft components that
    fit our unique requirements while maintaining reusability and extensibility.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究PrimeBlocks的功能后，我们看到了这些构建块如何简化我们的UI开发，确保一致性并节省时间。它们为快速创建视觉吸引力和功能性的用户界面提供了一个坚实的基础。然而，有时我们的项目需要更定制化的方法。在下一节中，我们将探讨如何创建符合我们独特需求的组件，同时保持可重用性和可扩展性。
- en: Creating reusable and extendable components
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可重用和可扩展的组件
- en: As a developer, one of our key goals is to write clean, maintainable, and reusable
    code. In this section, we will explore the concept of creating reusable and extendable
    components. We’ll take an example of a block from PrimeBlocks and discuss how
    we can make it more flexible and adaptable for different use cases.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，我们的一个关键目标是编写干净、可维护和可重用的代码。在本节中，我们将探讨创建可重用和可扩展组件的概念。我们将以PrimeBlocks中的一个块为例，讨论我们如何使其更加灵活和适应不同的用例。
- en: 'Here is the **Stats** block from PrimeBlocks with four different stats:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是PrimeBlocks中的**统计数据**块，包含四个不同的统计数据：
- en: '![Figure 11.6 – PrimeBlocks Stats](img/B18805_11_06.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6 – PrimeBlocks统计数据](img/B18805_11_06.jpg)'
- en: Figure 11.6 – PrimeBlocks Stats
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – PrimeBlocks统计数据
- en: 'After clicking the **Code** button, we can see that there are four different
    elements for four stats, which can be reduced and reused:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击**代码**按钮后，我们可以看到四个不同的元素对应四个统计数据，这些可以减少并重用：
- en: '![Figure 11.7 – PrimeBlocks Stats code](img/B18805_11_07.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – PrimeBlocks统计数据代码](img/B18805_11_07.jpg)'
- en: Figure 11.7 – PrimeBlocks Stats code
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – PrimeBlocks统计数据代码
- en: The provided image showcases four stats in the UI (labeled from *1* to *4*),
    each created using nearly identical HTML blocks. This approach results in repetition
    and makes maintenance challenging. For instance, if you need to make styling changes,
    you would have to modify the code in four different places. This redundancy can
    lead to increased effort and potential inconsistencies when updating or refining
    the UI.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的图像展示了UI中的四个统计数据（从*1*到*4*进行标记），每个都是使用几乎相同的HTML块创建的。这种方法导致了重复，使得维护变得具有挑战性。例如，如果你需要做出样式更改，你将不得不在四个不同的地方修改代码。这种冗余可能导致更新或改进UI时增加工作量并可能产生不一致性。
- en: 'When examining the design and the code labeled *1*, we can look into the similarity
    between the elements and identify a pattern for all labels:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查标记为*1*的设计和代码时，我们可以查看元素之间的相似性并确定所有标签的模式：
- en: '![Figure 11.8 – PrimeBlocks Stats pattern](img/B18805_11_08.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – PrimeBlocks统计数据模式](img/B18805_11_08.jpg)'
- en: Figure 11.8 – PrimeBlocks Stats pattern
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – PrimeBlocks统计数据模式
- en: 'Here, we have extracted the template into reusable and customizable properties,
    allowing for easy modification and flexibility:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将模板提取为可重用和可定制的属性，允许轻松修改和灵活性：
- en: '`Orders`: `title`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Orders`: `title`'
- en: '`152`: `count`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`152`: `count`'
- en: '`pi` `pi-shopping-cart`: `icon`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pi` `pi-shopping-cart`: `icon`'
- en: '`bg-blue-100`: `iconBackground`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bg-blue-100`: `iconBackground`'
- en: '`24` `new`: `newCount`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`24` `new`: `newCount`'
- en: '`since last` `visit`: `newCountMessage`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`since last` `visit`: `newCountMessage`'
- en: 'Once this information is gathered, the pattern is extracted. We can then create
    a reusable presentation component like in the following example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收集到这些信息，就会提取模式。然后我们可以创建一个如以下示例所示的可重用展示组件：
- en: '[PRE4]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The provided code is an Angular standalone component called `StatComponent`.
    Let’s break down its different parts and understand their purpose:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码是一个名为 `StatComponent` 的 Angular 独立组件。让我们分解其不同部分并了解它们的作用：
- en: '`selector: ''primengbook-stat''`: This property specifies the HTML selector
    that will be used to represent this component in the template. In this case, the
    selector is `primengbook-stat`, meaning that this component can be used in the
    template as `<``primengbook-stat />`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selector: ''primengbook-stat''`: 这个属性指定了将用于在模板中表示此组件的 HTML 选择器。在这种情况下，选择器是
    `primengbook-stat`，这意味着此组件可以在模板中作为 `<primengbook-stat />` 使用。'
- en: '`changeDetection: ChangeDetectionStrategy.OnPush`: This change detection strategy
    tells Angular to only check for changes in the component’s input properties and
    not perform a full change detection cycle unless triggered externally.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`changeDetection: ChangeDetectionStrategy.OnPush`: 这种变更检测策略告诉 Angular 只检查组件输入属性的变化，除非外部触发，否则不执行完整的变更检测周期。'
- en: '`@Input()...`: This decorator is used to mark certain properties as inputs
    to the component. These inputs can receive values from the component’s parent
    or from the template where the component is used. In this case, the component
    has several input properties: `title`, `count`, `icon`, `iconBackground`, `newCount`,
    and `newCountMessage`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Input()...`: 这个装饰器用于标记某些属性作为组件的输入。这些输入可以从组件的父组件或使用组件的模板中接收值。在这种情况下，组件有几个输入属性：`title`、`count`、`icon`、`iconBackground`、`newCount`
    和 `newCountMessage`。'
- en: 'After our reusable component is ready, we can use it anywhere in our application
    by putting it into the `imports` array:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的可重用组件准备就绪后，我们可以通过将其放入 `imports` 数组中在任何地方使用它：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The provided code is an Angular standalone component called `ReusableComponent`.
    Let’s break down its different parts and understand their purpose:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码是一个名为 `ReusableComponent` 的 Angular 独立组件。让我们分解其不同部分并了解它们的作用：
- en: '`imports: [CommonModule, StatComponent]`: The `imports` property is an array
    that specifies the modules required by this component. In this case, `CommonModule`
    is imported to provide common Angular directives and pipes and `StatComponent`
    is imported as a dependency.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imports: [CommonModule, StatComponent]`: `imports` 属性是一个数组，指定了此组件所需的模块。在这种情况下，`CommonModule`
    被导入以提供常见的 Angular 指令和管道，而 `StatComponent` 被导入作为依赖项。'
- en: '`stats = [...]`: The `stats` property is an array of objects containing the
    properties `title`, `count`, `icon`, `iconBackground`, `newCount`, and `newCountMessage`.
    These properties hold the values that will be passed to the `StatComponent` for
    rendering.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats = [...]`: `stats` 属性是一个包含 `title`、`count`、`icon`、`iconBackground`、`newCount`
    和 `newCountMessage` 属性的对象数组。这些属性持有将传递给 `StatComponent` 以进行渲染的值。'
- en: '`<primengbook-stat *ngFor="let stat of stats" ... />`: This code will allow
    you to iterate over the `stats` array and render the `primengbook-stat` elements
    together with their property bindings. For example, `[title]="stat.title"` binds
    the `title` property of the `primengbook-stat` component to the `title` property
    of the current `stat` object.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<primengbook-stat *ngFor="let stat of stats" ... />`: 这段代码将允许你遍历 `stats` 数组，并渲染
    `primengbook-stat` 元素及其属性绑定。例如，`[title]="stat.title"` 将 `primengbook-stat` 组件的
    `title` 属性绑定到当前 `stat` 对象的 `title` 属性。'
- en: 'Here is the result:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '![Figure 11.9 – Reusable StatComponent](img/B18805_11_09.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 可重用 StatComponent](img/B18805_11_09.jpg)'
- en: Figure 11.9 – Reusable StatComponent
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 可重用 StatComponent
- en: Instead of having repetitive chunks of code (such as in *Figure 11**.7*), using
    a reusable component such as `primengbook-stat` offers several benefits, including
    code reusability, consistent appearance and behavior, and enhanced maintainability.
    By encapsulating the functionality and appearance, the component can be easily
    reused throughout the application, reducing code duplication and promoting a modular
    codebase. It ensures consistent styling and interactions across different parts
    of the application and simplifies maintenance by allowing updates to be made in
    one place. Overall, it improves development efficiency and provides a better user
    experience.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用重复的代码块（如*图11.7*所示），使用可重用的组件，例如`primengbook-stat`，可以带来几个好处，包括代码可重用性、一致的外观和行为，以及增强的可维护性。通过封装功能和外观，组件可以轻松地在整个应用程序中重用，减少代码重复，并促进模块化代码库。它确保了应用程序不同部分的一致样式和交互，并通过允许在一个地方进行更新来简化维护。总的来说，它提高了开发效率，并提供了更好的用户体验。
- en: Throughout our exploration of creating reusable and extendable components, we’ve
    uncovered the nuances of tailoring components to our specific needs without sacrificing
    their adaptability. This knowledge empowers us to build more efficient and maintainable
    Angular applications. As we transition to the next section, we’ll delve deeper
    into how to create components from scratch, ensuring they align perfectly with
    our project’s unique demands.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索创建可重用和可扩展组件的过程中，我们发现了根据我们的特定需求定制组件的细微差别，同时不牺牲其适应性。这种知识使我们能够构建更高效、更易于维护的Angular应用程序。随着我们过渡到下一部分，我们将深入了解如何从头创建组件，确保它们与项目独特的需求完美匹配。
- en: Crafting your own components with PrimeNG
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PrimeNG制作自己的组件
- en: Creating your own components is a fundamental aspect of modern web development.
    While prebuilt components can be convenient, there are situations where building
    custom components is necessary to meet specific requirements. In this part, we
    will explore the reasons behind creating custom components and learn how to leverage
    PrimeNG to craft your custom components.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自己的组件是现代网络开发的基本方面。虽然预构建组件可能很方便，但在某些情况下，构建自定义组件是满足特定要求所必需的。在本部分中，我们将探讨创建自定义组件的原因，并学习如何利用PrimeNG来制作您的自定义组件。
- en: Note
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Always ensure that your custom components are accessible, responsive, and user
    friendly. Test them across different devices and browsers to ensure a consistent
    experience.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 总是确保您的自定义组件是可访问的、响应式的和用户友好的。在不同的设备和浏览器上测试它们，以确保一致的用户体验。
- en: Why create custom components?
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么创建自定义组件？
- en: 'Pre-built components, such as those offered by PrimeNG, Bootstrap, or Material,
    are fantastic. They save time, ensure consistency, and often come with built-in
    accessibility features. However, there are scenarios where they might not be the
    perfect fit:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 预构建组件，如PrimeNG、Bootstrap或Material提供的，非常出色。它们节省时间，确保一致性，并且通常带有内置的访问性功能。然而，在某些情况下，它们可能不是完美的选择：
- en: '**Unique design requirements**: Your application might have a design that doesn’t
    align with the styles of pre-built components. In such cases, crafting your own
    ensures that the UI remains consistent with your design guidelines.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独特的设计要求**：您的应用程序可能有一个与预构建组件的样式不一致的设计。在这种情况下，自己制作确保UI与您的设计指南保持一致。'
- en: '**Specific functional needs**: Pre-built components offer general functionalities.
    If your application requires a component with very specific behavior, it’s often
    easier to build one from scratch than to modify a pre-built one.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特定的功能需求**：预构建组件提供了一般功能。如果您的应用程序需要具有非常特定行为的组件，通常从头开始构建比修改预构建组件更容易。'
- en: '**Performance**: Custom components can be optimized for your application’s
    specific needs, potentially offering better performance in some scenarios.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：自定义组件可以根据您的应用程序特定需求进行优化，在某些情况下可能提供更好的性能。'
- en: '**Code maintainability and reusability**: By encapsulating specific functionality
    within well-defined components, you can modularize your codebase. This modular
    approach makes it easier to manage and maintain your application’s code, as each
    component can be developed, tested, and updated independently.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码可维护性和可重用性**：通过在定义良好的组件中封装特定的功能，您可以模块化您的代码库。这种模块化方法使得管理和维护应用程序的代码变得更加容易，因为每个组件都可以独立地进行开发、测试和更新。'
- en: 'Example: utilizing PrimeNG to create a sign-in component'
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：利用PrimeNG创建登录组件
- en: 'PrimeNG offers a plethora of UI components and utilities that can aid in crafting
    your custom components. Before proceeding with the creation of the component,
    it is essential to take into account the following considerations:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG 提供了大量的 UI 组件和实用工具，可以帮助您创建自定义组件。在继续创建组件之前，考虑以下因素是至关重要的：
- en: '**Have a design ready**: It is assumed that the design for the component is
    already prepared using design tools such as Figma or Sketch. This ensures a clear
    visual reference to guide the implementation process.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备好设计**：假设组件的设计已经使用设计工具（如 Figma 或 Sketch）准备就绪。这确保了有一个清晰的视觉参考来指导实现过程。'
- en: '**Form and submission logic**: In this example, the focus will be on the component
    structure and functionality rather than the actual form submission. The implementation
    will omit the specific logic related to form submission.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单和提交逻辑**：在此示例中，重点将放在组件结构和功能上，而不是实际的表单提交。实现将省略与表单提交相关的特定逻辑。'
- en: '**Styling with PrimeFlex**: The styling of the component will be achieved using
    PrimeFlex utility classes. These utility classes provide a convenient and consistent
    way to apply styling and layout options, ensuring a cohesive and responsive design.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 PrimeFlex 进行样式设计**：组件的样式将通过 PrimeFlex 实用类来实现。这些实用类提供了一种方便且一致的方式来应用样式和布局选项，确保设计的一致性和响应性。'
- en: '**Account creation and password reset links**: This example will not include
    the implementation of links for creating a new account or resetting a forgotten
    password. The emphasis will be on the core functionality of the component itself.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户创建和密码重置链接**：本示例将不包括创建新账户或重置忘记的密码的链接实现。重点将放在组件本身的核心功能上。'
- en: Taking these points into consideration helps set the context and clarifies the
    scope of the component creation process. It ensures that the focus remains on
    the component’s structure, functionality, and integration while acknowledging
    the design, styling, and specific features that will be excluded from this particular
    example.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这些点有助于设定上下文并明确组件创建过程的范围。这确保了关注点始终集中在组件的结构、功能以及集成上，同时承认将不包括此特定示例的设计、样式和特定功能。
- en: 'Now let’s create a sign-in component using PrimeNG. First, use Angular CLI
    to generate a new component:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 PrimeNG 创建一个登录组件。首先，使用 Angular CLI 生成一个新的组件：
- en: '[PRE6]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, in `sign-in.component.ts`, craft the UI:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `sign-in.component.ts` 文件中，构建用户界面：
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s break down the code and explain its functionality:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码并解释其功能：
- en: '`imports: [..., ButtonModule, InputTextModule, CheckboxModule]`: This line
    specifies the required modules that need to be imported for the components to
    function correctly. In this case, the component requires the `ButtonModule`, `InputTextModule`,
    and `CheckboxModule` modules from PrimeNG.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imports: [..., ButtonModule, InputTextModule, CheckboxModule]`：这一行指定了组件正确运行所需的模块。在这种情况下，组件需要从
    PrimeNG 导入 `ButtonModule`、`InputTextModule` 和 `CheckboxModule` 模块。'
- en: '`template: ''...''`: This is the HTML template that consists of various elements
    and classes that define the visual structure and behavior of the sign-in form,
    such as the username field, password field, remember-me function, password reset,
    and the submit button.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template: ''...''`：这是一个 HTML 模板，由各种元素和类组成，这些元素和类定义了登录表单的视觉结构和行为，例如用户名字段、密码字段、记住我功能、密码重置以及提交按钮。'
- en: 'Now, to use the sign-in component in your application, open any component/template
    in your directory and update its contents with the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要在您的应用程序中使用登录组件，打开目录中的任何组件/模板，并使用以下代码更新其内容：
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the result:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是结果：
- en: '![Figure 11.10 – Sign-in component](img/B18805_11_10.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 登录组件](img/B18805_11_10.jpg)'
- en: Figure 11.10 – Sign-in component
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 登录组件
- en: We have successfully rendered the sign-in component with the help of PrimeNG
    components.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功使用 PrimeNG 组件渲染了登录组件。
- en: In conclusion, crafting your own components empowers you to build tailored solutions
    that perfectly fulfill the requirements of your application. By leveraging Angular’s
    component architecture and PrimeNG’s extensive set of components and features,
    you can create modular, scalable, and customizable elements that enhance the user
    experience. Now, let’s move on to the chapter summary, where we’ll recap the key
    points covered and highlight the important takeaways from this chapter.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，自己动手制作组件赋予你构建定制解决方案的能力，这些解决方案能够完美满足你应用的需求。通过利用Angular的组件架构和PrimeNG丰富的组件和功能集，你可以创建模块化、可扩展和可定制的元素，从而提升用户体验。现在，让我们继续到章节总结部分，我们将回顾本章涵盖的关键点，并强调本章的重要收获。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout our journey, we delved deep into the realm of creating reusable and
    extendable components. The essence of this chapter was to empower you with the
    knowledge and techniques to craft components that can be reused across multiple
    parts of an application or even across different projects, all while maintaining
    the flexibility to extend and customize them as needed.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的旅程中，我们深入研究了创建可重用和可扩展组件的领域。本章的核心是赋予你知识和技巧，以便你可以制作出可以在应用的多个部分或甚至在不同项目中重用的组件，同时保持根据需要扩展和定制的灵活性。
- en: In this chapter, we explored why, despite the plethora of pre-built components
    available, there’s often a need to craft our own. Whether it’s to meet unique
    design requirements, cater to specific functional needs, or optimize performance,
    custom components have their place in our developer toolkit.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了尽管有大量的预构建组件可用，但为何我们仍然需要自己动手制作组件。无论是为了满足独特的设计要求、满足特定的功能需求，还是优化性能，自定义组件在我们的开发者工具箱中都有其位置。
- en: Moreover, using PrimeNG, we saw how to enhance our custom components. From creating
    a custom component to understanding the power of PrimeBlocks and StyleClass, PrimeNG
    proved to be an invaluable asset.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用PrimeNG，我们看到了如何增强我们的自定义组件。从创建自定义组件到理解PrimeBlocks和StyleClass的强大功能，PrimeNG证明是一个无价的资产。
- en: As we transition to our next topic, we’ll be diving into internationalization
    and localization. This will be an exciting exploration into making our applications
    globally friendly, ensuring they cater to various languages and regional preferences.
    It’s all about providing a seamless user experience, no matter where our users
    are from or what language they speak. So, gear up as we embark on this new journey,
    making our applications truly global.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们转向下一个主题，我们将深入探讨国际化与本地化。这将是一次激动人心的探索，旨在使我们的应用成为全球友好的，确保它们能够满足各种语言和区域偏好。这关乎提供无缝的用户体验，无论我们的用户来自何方或他们使用什么语言。所以，随着我们踏上新的旅程，让我们使我们的应用真正成为全球性的。
