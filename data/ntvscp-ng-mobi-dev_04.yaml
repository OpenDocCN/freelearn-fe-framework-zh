- en: A prettier view with CSS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CSS更美观的视图
- en: One of the many key benefits NativeScript brings to native app development is
    the ability to style native view components with standard CSS. You will find great
    support for many common and advanced properties; however, some don't have a direct
    correlation, whereas others are completely unique to native view layouts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: NativeScript带来的众多关键优势之一是能够使用标准CSS来样式化原生视图组件。你会发现对许多常见和高级属性都有很好的支持；然而，有些属性没有直接的关联，而有些则是完全独特的，仅适用于原生视图布局。
- en: Let's take a look at how to turn our first view into something pretty amazing
    with a few CSS classes. You will also learn how to utilize NativeScript's core
    theme to provide a consistent styling framework to build on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用几个CSS类将我们的第一个视图转变为非常棒的东西。你还将学习如何利用NativeScript的核心主题提供一致的样式框架来构建。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using CSS to style views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSS来样式化视图
- en: Understanding some of the differences between typical web styling and native
    styling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解典型网页样式和原生样式之间的一些差异
- en: Unlocking NativeScript powers with platform-specific files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过平台特定文件解锁NativeScript的功能
- en: Learning how to use the nativescript-theme-core styling framework plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用nativescript-theme-core样式框架插件
- en: Adjusting the status bar background color and text color on iOS and Android
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整iOS和Android上的状态栏背景色和文字颜色
- en: It's time to get classy
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候变得优雅了
- en: 'Let''s start by taking a look at our app''s main `app.css` file inside the
    `App` directory:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看`App`目录中的`app.css`文件开始，这是我们的应用程序的主要文件：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Out of the box, the `--ng` template hints at two options you could choose from
    to build out your CSS:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`--ng`模板暗示了你可以选择两种选项来构建你的CSS：
- en: Write your own custom classes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写你自己的自定义类
- en: Utilize the nativescript-theme-core styling framework plugin as your base
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用nativescript-theme-core样式框架插件作为基础
- en: 'Let''s explore the first option for a moment. Add the following after the `.btn`
    class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时探索第一个选项。在`.btn`类之后添加以下内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There''s a number of interesting things you may pick up on right away from
    this simple example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个简单的例子中，你可以立即发现许多有趣的事情：
- en: Padding does not use the `px` suffix you may know well with web styling.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充不使用你熟悉的网页样式的`px`后缀。
- en: Don't worry, using the `px` suffix will not hurt you.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别担心，使用`px`后缀不会伤害你。
- en: Starting with NativeScript 3.0, release units are supported, so you can use
    dp (device independent pixels) or `px` (device pixels).
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从NativeScript 3.0版本开始，支持发布单位，因此你可以使用dp（设备无关像素）或`px`（设备像素）。
- en: If no unit is specified, dp will be used. For width/height and margins, you
    can also use percents in CSS as a unit type.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有指定单位，将使用dp。对于宽度/高度和边距，你还可以在CSS中使用百分比作为单位类型。
- en: 'Various common properties (`padding`, `font size`, `font weight`, `color`,
    `background color`, and more) are supported. Also, shorthand margin/padding works
    as well, that is, padding: 15 5.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '支持各种常见属性（如`padding`、`font size`、`font weight`、`color`、`background color`等）。此外，缩写边距/填充也适用，即`padding:
    15 5`。'
- en: 'You can use standard hex color names, such as yellow, or shorthand codes, such
    as #444.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用标准的十六进制颜色名称，如黄色，或缩写代码，如#444。
- en: CSS scoping works as you would expect, that is, `.row .title { ...`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS作用域的工作方式正如你所期望的那样，即`.row .title { ...}`。
- en: Element/Tag/Component names can be styled globally.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素/标签/组件名称可以全局样式化。
- en: Even though you can style by tag/component name, it is not advisable to do so.
    We will show you a few interesting considerations for native devices you will
    want to be aware of.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以通过标签/组件名称进行样式化，但这样做并不建议。我们将向您展示一些您需要了解的针对原生设备的有趣考虑因素。
- en: 'Now, let''s open `app/modules/player/components/track-list/track-list.component.html`
    and add the `row` and `title` classes to our template:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开`app/modules/player/components/track-list/track-list.component.html`，并将`row`和`title`类添加到我们的模板中：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s quickly preview what happens with `tns run ios --emulator` and you should
    see the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速预览一下使用`tns run ios --emulator`会发生什么，你应该会看到以下内容：
- en: '![](img/00008.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00008.jpeg)'
- en: 'If you take a look in Android with `tns run android --emulator`, you should
    see the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`tns run android --emulator`在Android上查看，你应该会看到以下内容：
- en: '![](img/00009.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00009.jpeg)'
- en: We can see, on both platforms, these styles applied consistently, while, still
    maintaining each platform's unique characteristics. For example, iOS maintains
    the flat design aesthetic across the buttons, and the switches provide that familiar
    iOS feel. In contrast, on Android the buttons preserve their subtle default shadows
    and all caps text, as well as retaining the familiar Android switches.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在两个平台上，这些样式都得到了一致的应用，同时仍然保持了每个平台独特的特性。例如，iOS在按钮上保持了扁平化设计美学，开关提供了熟悉的iOS感觉。相比之下，在Android上，按钮保留了微妙的默认阴影和全大写文本，以及熟悉的Android开关。
- en: 'However, there are some subtle (potentially undesirable) differences that are
    important to understand and remedy. From this example, we may note the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些微妙（可能是不理想的）差异，这些差异需要理解和解决。从这个例子中，我们可能注意到以下几点：
- en: Android's buttons have wider left/right margins than iOS.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android的按钮左右边距比iOS宽。
- en: Row titles are not aligned consistently. On iOS, the Label is vertically centered
    by default; however, on Android it's aligned to the top.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行标题的对齐不一致。在iOS上，标签默认垂直居中；然而，在Android上它对齐到顶部。
- en: 'If you tap on the Record button to view the login dialog, you will also notice
    something quite undesirable:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击记录按钮来查看登录对话框，你也会注意到一些相当不理想的地方：
- en: '![](img/00010.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: 'Item #3 may be the most surprising and unexpected. It exemplifies one of the
    main reasons it is not advisable to style Element/Tag/Component names globally.
    Since the native dialogs use `Buttons` by default, some of the global `Button`
    styles we added are bleeding into the dialog (notably `color: white`). To fix
    this, we can either ensure we properly scope all the component names:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '项目#3可能是最令人惊讶和意外的。它体现了一个主要的原因，即不建议全局样式化Element/Tag/Component名称。由于原生对话框默认使用`Buttons`，我们添加的一些全局`Button`样式正在渗入对话框（特别是`color:
    white`）。为了解决这个问题，我们可以确保我们正确地限制了所有组件名称的作用域：'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or better yet, just use a class name on your Buttons:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更好的是，只需在你的按钮上使用类名：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To fix item #2 (row title alignment), we can introduce a special power of NativeScript:
    the ability to build platform-specific files depend on which platform you are
    running it on. Let''s create a new file, `app/common.css`, and refactor all the
    contents of `app/app.css` into this new file. Then, let''s create two other new
    files, `app/app.ios.css` and `app/app.android.css` (and then delete `app.css`,
    since it will no longer be needed), both with the following contents:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复项目#2（行标题对齐），我们可以引入NativeScript的一个特殊功能：能够根据你运行的平台构建特定平台的文件。让我们创建一个新文件，`app/common.css`，并将`app/app.css`中的所有内容重构到这个新文件中。然后，让我们创建另外两个新文件，`app/app.ios.css`和`app/app.android.css`（然后删除`app.css`，因为它将不再需要），它们的内容如下：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will ensure that our common shared styles are imported into both iOS and
    Android CSS. Now, we have a way to apply platform-specific styling fixes!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保我们的共享样式被导入iOS和Android CSS中。现在，我们有了应用特定平台样式修复的方法！
- en: 'Let''s fix that vertical alignment issue by modifying `app/app.android.css`
    to the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过修改`app/app.android.css`来解决这个问题垂直对齐问题：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This adds the additional styling tweak for Android only to give us this now:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这只为Android添加了额外的样式调整，现在我们有了这样的效果：
- en: '![](img/00011.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: Excellent, much better.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，好多了。
- en: 'To fix #1, we would need to apply more platform-specific tweaking if we want
    our buttons on both platforms to have the same margins.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复#1，如果我们想让两个平台上的按钮具有相同的边距，我们需要应用更多针对特定平台的调整。
- en: At this point, you may be wondering how much tweaking you may need to do yourself
    to address some of these platform-specific concerns. You should be happy to know
    there's not an exhaustive list, but the incredibly high spirited NativeScript
    community worked together to create something even better, a consistent bootstrap-like
    core theme that provides a lot of these subtle tweaks, such as Label vertical
    alignment and many other subtle adjustments.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能想知道你需要自己调整多少来处理一些这些特定平台的问题。你应该很高兴地知道这不是一个详尽的列表，但充满活力的NativeScript社区共同努力创造了一些更好的东西，一个类似于bootstrap的核心主题，它提供了许多这些微妙的调整，例如标签的垂直对齐以及许多其他微妙的调整。
- en: Meet the NativeScript core theme
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎使用NativeScript核心主题
- en: All new NativeScript projects come with a core theme installed and are ready
    to use out of the box. As mentioned previously, you are provided at two options you
    could use to style your app. The preceding section outlined a few of the things
    you may run into while styling your App from scratch.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有新的NativeScript项目都自带核心主题安装，并且可以直接使用。如前所述，你提供了两种你可以用来设计应用程序的选项。前面的部分概述了在从头开始设计应用程序时可能会遇到的一些事情。
- en: 'Let''s take a look at Option #2: using the `nativescript-theme-core` plugin.
    Out of the box, this theme is built to scale and build on top of. It provides
    a wide assortment of utility classes for spacing, coloring, layout, colored skins,
    and much more. Because of the solid foundation and amazing flexibility it provides,
    we will build our app''s styles on top of this theme.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看选项#2：使用`nativescript-theme-core`插件。这个主题是现成的，旨在扩展和构建在它之上。它提供了一系列的实用类，用于间距、着色、布局、着色皮肤等等。由于其坚实的基础和惊人的灵活性，我们将在这个主题之上构建我们的应用程序样式。
- en: It's worth mentioning the `nativescript-theme-` prefix was intentional as a
    standard, as it helps provide a common prefix to search for on `npm` to find all
    the NativeScript themes. It's encouraged to use the same prefix if you design
    and publish your own custom NativeScript theme.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`nativescript-theme-`前缀是有意为之，作为标准，它有助于在`npm`上提供一个共同的搜索前缀，以找到所有NativeScript主题。如果你设计和发布自己的自定义NativeScript主题，建议使用相同的前缀。
- en: 'Let''s remove our custom styling, leaving only the core theme imported. However,
    instead of using the default light skin, we are going to use the dark skin. This
    is what our `app/common.css` file should look like now:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们移除我们的自定义样式，只保留导入的核心主题。然而，我们不会使用默认的浅色皮肤，而是会使用深色皮肤。这就是我们的`app/common.css`文件现在应该看起来像这样：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, we want to start classing our components with some of the classes that
    the core theme provides. You can learn a full list of classes here: [https://docs.nativescript.org/ui/theme](https://docs.nativescript.org/ui/theme).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要开始用核心主题提供的某些类来分类我们的组件。你可以在这里学习类列表的完整列表：[https://docs.nativescript.org/ui/theme](https://docs.nativescript.org/ui/theme)。
- en: 'Starting with `app/app.component.html`, let''s add the following classes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从`app/app.component.html`开始，让我们添加以下类：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `action-bar` class ensures our skin gets applied appropriately to the header
    of the App, as well as providing subtle consistency adjustments for `ActionBar`
    on both iOS and Android.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`action-bar`类确保我们的皮肤适当地应用到应用程序的标题上，同时为iOS和Android上的`ActionBar`提供细微的一致性调整。'
- en: The `page` class ensures our skin applies to the entire page. It's important
    this class is applied to the root layout container on any given component view.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`page`类确保我们的皮肤应用到整个页面上。在任何一个组件视图中，这个类都应应用到根布局容器上。'
- en: 'With these two adjustments, we should now see this on iOS:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这两个调整，我们现在应该在iOS上看到以下内容：
- en: '![](img/00012.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00012.jpeg)'
- en: 'And this is on Android:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Android上的样子：
- en: '![](img/00013.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00013.jpeg)'
- en: 'You''ll notice another iOS/Android difference with `ListView`. iOS has a white
    background by default, whereas Android appears to have a transparent background,
    allowing the skin page color to show through. Let''s continue classing our components
    with more classes from the core theme, which help address these subtleties. Open
    `app/modules/player/components/track-list/track-list.component.html` and add the
    following classes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在`ListView`上iOS和Android之间还有一个差异。iOS默认有一个白色背景，而Android看起来有一个透明的背景，允许皮肤页面的颜色显示出来。让我们继续用核心主题的更多类来分类我们的组件，这些类有助于解决这些细微差别。打开`app/modules/player/components/track-list/track-list.component.html`并添加以下类：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The parent `list-group` class helps scope everything properly down to `list-group-item`.
    Then, we add `c-ruby` to splash some reddish color to our Record buttons. There
    are several skinned colors that provide surnames: `c-sky`, `c-aqua`, `c-charcoal`,
    `c-purple`, and much more. See all of them here: [https://docs.nativescript.org/ui/theme#color-schemes](https://docs.nativescript.org/ui/theme#color-schemes).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 父级`list-group`类有助于将所有内容正确地缩小到`list-group-item`。然后，我们添加`c-ruby`来在我们的记录按钮上洒一些红色。有几个着色颜色提供了姓氏：`c-sky`、`c-aqua`、`c-charcoal`、`c-purple`等等。在这里查看所有这些：[https://docs.nativescript.org/ui/theme#color-schemes](https://docs.nativescript.org/ui/theme#color-schemes)。
- en: We then add `h2` to the Label to bring its font size up a bit. Lastly, the `switch`
    class helps standardize the track solo switch.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`h2`添加到标签中，以稍微增加其字体大小。最后，`switch`类有助于标准化音轨独奏开关。
- en: 'We now have this on iOS:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在iOS上有了这个：
- en: '![](img/00014.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00014.jpeg)'
- en: 'And we have this on Android:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Android上的样子：
- en: '![](img/00015.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00015.jpeg)'
- en: 'Let''s move onward to our last component (for now), `player-controls`. Open
    `app/modules/player/components/player-controls/player-controls.component.html`
    and add the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进到最后一个组件（目前是这样），`player-controls`。打开`app/modules/player/components/player-controls/player-controls.component.html`并添加以下内容：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First, we add the `p-x-10` class to add the `10` padding to only the left/right
    container (`GridLayout`). Then, we add `btn btn-primary w-100` to our play/pause
    button. The `w-100` class sets the button to have a fixed width of `100`. Then,
    we add the `slider` class to our Slider.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们给左/右容器（`GridLayout`）添加`p-x-10`类以添加`10`的内边距。然后，我们将`btn btn-primary w-100`添加到播放/暂停按钮上。`w-100`类将按钮的宽度设置为固定值`100`。然后，我们将`slider`类添加到滑块上。
- en: 'Now, things are starting to shape up on iOS:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，iOS上的事情开始有形了：
- en: '![](img/00016.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: 'It will look as follows on Android:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它在Android上的外观如下：
- en: '![](img/00017.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: Wow, alright now, things are coming together. We will continue to polish things
    more as we go, but this exercise has demonstrated how quickly you can pull your
    styling around with the core theme by using a lot of the classes that come out
    of the box.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，好吧，现在，一切开始成形。我们将继续在前进的过程中进一步完善细节，但这个练习已经展示了你如何快速通过使用大量内置类来调整核心主题的风格。
- en: Adjusting the status bar background color and text color on iOS and Android
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整iOS和Android的状态栏背景色和文本色
- en: You may have noticed earlier that, on iOS, the status bar text is black and
    doesn't look very good with our dark skin. Additionally, we may want to alter
    Android's status bar tint color. NativeScript provides direct access to native
    APIs, so we can easily change these to whatever we would like. Both platforms
    deal with them differently, so we can conditionally alter the status bar for each.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能之前已经注意到，在iOS上，状态栏文本是黑色，与我们的深色皮肤不太搭配。此外，我们可能还想改变Android的状态栏色调颜色。NativeScript提供了对原生API的直接访问，因此我们可以轻松地将这些更改为我们想要的任何颜色。这两个平台处理方式不同，因此我们可以有条件地更改每个平台的状态栏。
- en: 'Open `app/app.component.ts` and let''s add the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app/app.component.ts`并添加以下内容：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will turn the iOS status bar text white:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使iOS状态栏文本变为白色：
- en: '![](img/00018.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: 'The second part of the condition adjusts Android to use dark text in the status
    bar:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句的第二部分调整Android以在状态栏中使用深色文本：
- en: '![](img/00019.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: 'Let''s also adjust the `ActionBar` background color while we''re at it for
    a nice touch. On iOS, the status bar background color takes on the background
    color of `ActionBar`, whereas on Android, the background color of the status bar
    must be adjusted via Android `colors.xml` in `App_Resources`. Starting with iOS,
    let''s open `app/common.css` and add the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们趁热打铁，也调整一下`ActionBar`的背景色，以增添一些美感。在iOS上，状态栏背景色采用`ActionBar`的背景色，而在Android上，状态栏的背景色必须通过`App_Resources`中的Android
    `colors.xml`进行调整。从iOS开始，让我们打开`app/common.css`并添加以下内容：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This colors `ActionBar` as follows for iOS:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这为iOS的`ActionBar`设置了以下颜色：
- en: '![](img/00020.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'For Android, we want our status bar background to present a complimentary hue
    to our `ActionBar` background. To do that, we want to open `app/App_Resources/Android/values/colors.xml`
    and make the following adjustment:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android，我们希望状态栏背景色与`ActionBar`背景色形成互补色。要做到这一点，我们需要打开`app/App_Resources/Android/values/colors.xml`并做出以下调整：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is the final result on Android:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Android上的最终结果：
- en: '![](img/00021.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: It's refreshing and fun to finally put a face on our app; however, we are certainly
    not done styling. We will continue polishing views via CSS and introduce SASS
    soon to refine it even more in the upcoming chapters. However, this chapter has
    introduced you to various considerations you will want to be aware of while styling
    your App via CSS.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，给我们的应用添加一个面孔让人耳目一新且有趣；然而，我们当然还没有完成样式设计。我们将继续通过CSS润色视图，并在接下来的章节中引入SASS以进一步细化。然而，这一章已经向你介绍了你在通过CSS设计应用时需要了解的各种考虑因素。
- en: You've learned that common CSS properties are supported, and we have also looked
    at differences between how iOS and Android handle certain default characteristics.
    The ability to have platform-specific CSS overrides is a nice benefit and special
    power you will want to take advantage of in your cross-platform NativeScript apps.
    Understanding how to control the appearance of the status bar on both platforms
    is essential to achieving the desired look and feel of your app.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解到常见的CSS属性都得到了支持，我们还探讨了iOS和Android在处理某些默认特性方面的差异。能够针对特定平台使用CSS覆盖是一个很好的好处和特殊能力，你将在你的跨平台NativeScript应用中想要充分利用这一点。了解如何控制两个平台上的状态栏外观对于实现你应用所需的外观和感觉至关重要。
- en: In the next chapter, we will take a break from styling and dive into routing
    and navigation via lazy loading to set the stage for rounding out the general
    usability flow of our app. Get ready to dive into some of the more interesting
    Angular bits of our app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从样式设计暂时休息，通过懒加载深入探讨路由和导航，为完善我们应用的整体可用性流程做好准备。准备好深入探索我们应用中一些更有趣的Angular特性。
