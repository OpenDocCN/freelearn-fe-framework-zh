- en: Chapter 11. Authoring Advanced Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。编写高级插件
- en: Throughout this book, a common theme has been to use plugins – it's now time
    to create one!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，一个共同的主题是使用插件——现在是创建一个插件的时候了！
- en: There are literally thousands of plugins available for use, from ones that might
    only be a few lines long, to those running into several hundred lines. I'm a great
    believer in the phrase "where there's a will, there's a way" – it could be argued
    that plugins satisfy that will, and provide a way of resolving a need or a problem
    for a user.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可供使用的插件数量之多简直令人难以置信，从只有几行代码的插件到数百行的插件不等。我非常相信“有志者，事竟成”这句话——可以说插件满足了这种意愿，并为用户提供了解决需求或问题的途径。
- en: 'Over the next few pages, we''ll take a look at developing an advanced plugin
    from start to finish. Rather than concentrating only on the construction (as such),
    we''ll take a look at some of the tips and tricks we can use to help push our
    development skills further when working with plugins. We''ll cover best practices,
    and look at some areas where you can improve your current coding skills. Throughout
    the next few pages, we will cover a number of topics, which will include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将从头到尾看一下如何开发一个高级插件。我们不仅关注构建本身，还将探讨一些技巧和窍门，以帮助我们在使用插件时进一步提高开发技能。我们将涵盖最佳实践，并查看一些可以提高当前编码技能的领域。在接下来的几页中，我们将涵盖以下主题：
- en: Best practices and principles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践和原则
- en: Detecting signs of a poorly developed plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测插件开发不佳的迹象
- en: Creating design patterns for jQuery plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 jQuery 插件创建设计模式
- en: Designing an advanced plugin and making it available for use
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个高级插件并使其可供使用
- en: Ready to start?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？
- en: Detecting signs of a poorly developed plugin
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测插件开发不佳的迹象
- en: Imagine the scenario, if you will – you spend weeks developing a complex plugin,
    which does everything but the kitchen sink, and leaves anyone watching in awe.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下场景，如果你愿意——你花几周时间开发一个复杂的插件，它几乎包含了所有功能，让所有看到的人都惊叹不已。
- en: Sounds like the perfect nirvana, right? You publish it on GitHub, create an
    awesome website, and wait for users to roll in and download your latest creation.
    You wait…and wait…but get a grand total of zero customers. Okay…so what gives?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来像是完美的理想境界，不是吗？你把它发布到 GitHub 上，创建一个很棒的网站，等待用户踊跃下载你的最新作品。你等待着……等待着……但最后一位用户也没有。好吧……怎么回事？
- en: 'Anyone can write code, as I always say. The key to becoming a better jQuery
    plugin developer is understanding what makes a good plugin, and knowing how to
    put that into practice. To help with this, let''s take a moment to look at some
    pointers we can use to spot when a plugin is likely to fail:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我经常说的，任何人都可以编写代码。成为更好的 jQuery 插件开发者的关键是理解什么是好的插件，以及如何将其付诸实践。为了帮助理解，让我们花点时间看一下一些指标，可以用来判断一个插件是否可能失败：
- en: You're not making a plugin! The accepted practice is to use one of a handful
    of plugin patterns. If you're not using one of these patterns (such as the one
    shown next), then there is a good chance that take-up of your plugin is likely
    to be low.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你没有在做一个插件！通行的做法是使用少数几种插件模式之一。如果你没有使用其中一种模式（如下所示的模式），那么你的插件被接受的可能性很低。
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although we've defined the `undefined` in the parameters, we are only using
    `$` and `window` in the self-invoking function. It shields the plugin from being
    passed malicious values to `undefined`, as it will remain as `undefined` within
    the plugin.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然我们在参数中定义了`undefined`，但我们只在自调用函数中使用了 `$` 和 `window`。这可以防止恶意传递`undefined`的值到插件中，因为它在插件内部将保持为`undefined`。
- en: You spend time writing code, but miss one of the key elements – preparing documentation!
    Time and again, I see plugins that have minimal or non-existent documentation.
    It makes it hard to understand the plugin's makeup, and work out how to use it
    to its full potential. There are no hard-and-fast rules with documenting, but
    it is generally accepted that the more the better, and that this should be both
    inline and external (in the form of a readme or wiki).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你花时间编写代码，但忽略了其中一个关键元素——准备文档！我一次又一次地看到插件的文档非常少或根本不存在。这使得理解插件的构成和如何充分利用它变得困难。关于文档编写没有硬性规定，但普遍认为，文档越多越好，而且应该是内联和外部的（以
    readme 或 wiki 的形式）。
- en: Continuing with the theme of a lack of suitable documentation, developers will
    be turned off by plugins that have hardcoded styling, or which are too inflexible.
    It's up to us to consider all possible needs, but to determine if we're going
    to provide a solution for a particular need. Any styling that is applied to the
    plugin should either be made available via plugin options, or as a specific class
    or selector ID within the style sheet – putting it in line is considered bad practice.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在缺乏合适文档主题上继续进行，开发人员会因为插件具有硬编码的样式或者过于不灵活而感到不满。我们应该考虑所有可能的需求，但要确定我们是否会为特定需求提供解决方案。应用于插件的任何样式都应该通过插件选项提供，或者作为样式表中的特定类或选择器
    ID – 将其放在行内被认为是不良实践。
- en: If your plugin requires too much configuration, then this is likely to turn
    people off. While a larger, more complex plugin should clearly have more options
    available to end users, there is a limit to what should be provided. Conversely,
    every plugin should at least have a no-argument default behavior set; users will
    not appreciate having to set multiple values just to get a plugin working!
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的插件需要太多配置，那么这很可能会让人们失去兴趣。虽然一个更大、更复杂的插件应该明确地为最终用户提供更多的选项，但提供的内容也是有限度的。相反，每个插件至少应该设置一个不带参数的默认行为；用户不会喜欢为了使插件工作而设置多个值！
- en: A big turn-off for end users is plugins that don't provide some form of example.
    At an absolute minimum, a basic "hello world" type example, should always be provided,
    with a minimal configuration defined. Those plugins that provide more involved
    examples, or even examples that work with other plugins, are likely to attract
    more people.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对最终用户来说，插件不提供任何形式的示例是很让人失望的。至少应该提供一个基本的“hello world”类型的示例，其中定义了最小配置。提供更多涉及的示例，甚至与其他插件一起工作的示例，可能会吸引更多的人。
- en: 'Some plugins fail for basic reasons. These include: not providing a changelog
    or using version control, not working across multiple browsers, using an outdated
    version of jQuery or including it when it isn''t really needed (dependencies are
    too low), or not providing a minified version of the plugin. With Grunt, there
    is no excuse! We can automate a large part of the basic admin tasks that are expected
    of developers, such as testing, minifying the plugin, or maintaining version control.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些插件失败的原因很基础。这些包括：没有提供变更日志或使用版本控制，不能在多个浏览器中工作，使用过时的 jQuery 版本或在实际上不需要时包含它（依赖性太低），或者没有提供插件的缩小版本。使用
    Grunt 就没有借口了！我们可以自动化大部分开发人员所期望的基本管理任务，如测试、缩小插件或维护版本控制。
- en: 'Finally, plugins can fail for one of two simple reasons: either they are too
    clever and try to achieve too much (making them difficult to debug), or too simple,
    where the dependencies on jQuery as a library are not enough to warrant including
    it.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，插件可能因为两个简单的原因而失败：要么它们太聪明，试图实现太多（使得调试困难），要么太简单，jQuery 作为库的依赖性不足以保证包含它。
- en: Clearly a lot to think about! While we can't predict if a plugin will be successful
    or if take up will be low, we can at least try to minimize the risk of failure
    by incorporating some (or all) of these tips into our code and development workflow.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 很多事情需要考虑！虽然我们无法预测插件是否会成功，或者使用情况会不会低，但我们至少可以尝试通过将这些提示中的一些（或全部）纳入我们的代码和开发工作流程中来最小化失败的风险。
- en: At a more practical level though, we can opt to follow any one of a number of
    design patterns, to help give structure and consistency to our plugin. We touched
    on this back in [Chapter 3](part0031.xhtml#aid-TI1E1 "Chapter 3. Organizing Your
    Code"), *Organizing Your Code*. The beauty is that we are free to use similar
    principles with jQuery plugins too! Let's take a moment to consider some possible
    examples, before using one to develop a simple plugin.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从更实际的角度来看，我们可以选择遵循许多设计模式中的任何一种，以帮助我们的插件给予结构和一致性。我们在[第3章](part0031.xhtml#aid-TI1E1
    "Chapter 3. Organizing Your Code")中提到过这一点，*组织您的代码*。美妙之处在于我们可以自由地在 jQuery 插件中使用类似的原则！让我们在使用其中一个来开发一个简单插件之前，花一点时间考虑一些可能的例子。
- en: Introducing design patterns
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍设计模式
- en: If you've spent any time developing code in jQuery, then it is very likely that
    you've created one or more plugins; these can technically range from just a handful
    of lines to something more substantial.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 jQuery 中开发代码花费了任何时间，那么很可能你创建了一个或多个插件；从技术上讲，这些插件可以只有几行代码，也可以更加实质性。
- en: Over time, there is a risk that amending code in plugins can lead to content
    becoming unwieldy and difficult to debug. One way of dealing with this is to use
    design patterns. We covered this back in [Chapter 3](part0031.xhtml#aid-TI1E1
    "Chapter 3. Organizing Your Code"), *Organizing Your Code*. Many of the same principles
    can equally apply to plugins, although the patterns themselves will of course
    be different. Let's consider a few examples.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，修改插件中的代码可能会导致内容变得笨重且难以调试。解决这个问题的一种方法是使用设计模式。我们在[第三章](part0031.xhtml#aid-TI1E1
    "第三章。组织您的代码")中介绍了这一点，*组织您的代码*。许多相同的原则同样适用于插件，尽管模式本身当然会有所不同。让我们考虑一些例子。
- en: The most basic pattern is **A** **Lightweight Start**, which will suit those
    who have developed plugins before, but are new to the concept of following a specific
    pattern. This particular pattern is based around common best practices, such as
    using a semicolon before invoking the function; it will pass in standard arguments
    such as `window`, `document`, and `undefined`. It contains a basic default object
    which we can extend, and adds a wrapper around the constructor to prevent issues
    with multiple installations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的模式是**轻量级起步**，适合那些以前开发过插件但对遵循特定模式的概念尚不熟悉的人。这种特定模式基于常见的最佳实践，例如在调用函数之前使用分号；它会传递标准参数，如`window`、`document`和`undefined`。它包含一个基本的默认对象，我们可以扩展它，并在构造函数周围添加一个包装器以防止多个安装引起的问题。
- en: At the opposite end, we can always try working with the **Complete Widget Factory.**
    Although it is used as the basis for jQuery UI, it can also be used to create
    standard jQuery plugins. This pattern is perfect for creating complex, state-based
    plugins. It contains comments for all the methods used, to help ensure that logic
    fits into your plugin.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们也可以尝试使用**完整小部件工厂**。尽管它被用作 jQuery UI 的基础，但它也可以用来创建标准的 jQuery 插件。这种模式非常适合创建复杂的、基于状态的插件。它包含了所有使用的方法的注释，以确保逻辑符合你的插件。
- en: We've also covered the concept of namespacing, or adding a specific name to
    avoid collisions with other objects or variables within the global namespace.
    Although we might use namespacing within our code, we can equally apply it to
    plugins too. The great thing about this particular pattern is how we can check
    for its existing instances; if the name doesn't exist then we are free to add
    it, otherwise we can extend an existing plugin with the same namespace.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了命名空间的概念，即添加特定名称以避免与全局命名空间中的其他对象或变量发生冲突。虽然我们可能在代码中使用命名空间，但我们也可以同样将其应用于插件。这种模式的好处在于我们可以检查其现有实例；如果名称不存在，则我们可以自由添加它，否则我们可以使用相同命名空间扩展现有插件。
- en: These are three of the plugin patterns that are available for use; a question
    I am sure will arise, though, is which one to use? As with many things, there
    is no right or wrong answer; it will depend on circumstances.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可供使用的三种插件模式之一；但我确信会有一个问题，那就是使用哪一个？和许多事情一样，没有对错答案；这将取决于具体情况。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A list of the most common plugin design patterns is available at [https://github.com/jquery-boilerplate/jquery-patterns](https://github.com/jquery-boilerplate/jquery-patterns).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的插件设计模式列表可在[https://github.com/jquery-boilerplate/jquery-patterns](https://github.com/jquery-boilerplate/jquery-patterns)找到。
- en: Creating or using patterns
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建或使用模式
- en: 'If you''re new to using plugin design patterns, then A Lightweight Start is
    the best place to begin. There are three key aspects to using any plugin pattern,
    or designing your own:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是第一次使用插件设计模式，那么**轻量级起步**是开始的最佳位置。使用任何插件模式或设计自己的插件模式有三个关键方面：
- en: '**Architecture**: This defines the rules of how your components should interact.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构**：这定义了组件之间应如何交互的规则。'
- en: '**Maintainability**: Any written code should be easily extendable and improvable.
    It should not be locked down from the start.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：任何编写的代码都应易于扩展和改进。它不应从一开始就被锁定。'
- en: '**Reusability**: How often can you reuse your existing code? The more it can
    be reused, the more time it will save, and it will also be easier to maintain.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用性**：你现有的代码可以多频繁地重用？它可以多频繁地重用，节省的时间就越多，维护起来也会更容易。'
- en: The important thing about using patterns is that there isn't a single right
    answer. It all boils down to which pattern most closely fits your needs. The best
    way to gauge which pattern fits best is to try them. Over time, experience will
    give you a clear indication as to which pattern works best for a given scenario.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模式的重要之处在于没有一个单一的正确答案。关键在于哪种模式最符合你的需求。最好的方法是尝试它们。随着时间的推移，经验将为您提供一个明确的指示，哪种模式对于特定情景效果最佳。
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For a good discussion on the pros and cons of using a particular plugin pattern,
    head over to the article by Smashing Magazine at [http://www.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/](http://www.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/).
    It may be a few years old, but many of the points still hold value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用特定插件模式的利弊的讨论，请移步到Smashing Magazine的文章[http://www.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/](http://www.smashingmagazine.com/2011/10/11/essential-jquery-plugin-patterns/)。虽然已经有几年了，但其中许多观点仍然具有价值。
- en: Anyway, let's get back to the present! There is no time better than now to start
    gaining experience, so let's take a look at the jQuery Lightweight Boilerplate
    pattern. This implements the Singleton/Module design pattern. It helps developers
    to write encapsulate code that can be kept away from polluting the global namespace.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，让我们回到现在吧! 没有比现在更好的时间来获得经验了，所以让我们看一看jQuery轻量级样板模式。这实现了Singleton/Module设计模式。它帮助开发人员编写封装代码，可以远离污染全局命名空间。
- en: Over the next few pages, we'll be developing a tooltip plugin. We'll start with
    a typical build that doesn't use any pattern, before modifying it to use the Lightweight
    Boilerplate style. We'll then delve into a few tips and tricks that will help
    us consider the bigger picture, and hopefully make us better developers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将开发一个提示框插件。我们将从一个不使用任何模式的典型构建开始，然后修改它以使用轻量级样板格式。然后我们将深入探讨一些小贴士和技巧，这将帮助我们考虑更大的画面，并希望使我们成为更好的开发者。
- en: Designing an advanced plugin
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计一个高级插件
- en: Right – enough chitchat! Let's get down and dirty with some code! Over the next
    few pages, we're going to spend some time developing a plugin that displays some
    simple tooltips on a page.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好了——不要再闲聊了! 让我们深入研究一些代码吧! 在接下来的几页中，我们将花一些时间开发一个在页面上显示简单提示框的插件。
- en: 'Okay, before you all groan and say "not another tooltip plugin…!", there is
    a good reason for choosing this functionality. All will become clear once we''ve
    developed the first version of our plugin. Let''s make a start - we''ll begin
    with a brief look at creating our plugin:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '好吧，在你们都喊叫说“不要再一个提示框插件了……!”之前，选择这个功能有一个很好的理由。一旦我们开发了插件的第一个版本，一切都会变得清晰。让我们开始吧——我们将从简要介绍创建我们的插件开始:'
- en: For this demo, we'll need the entire code folder for this chapter from the code
    download that accompanies this book. Go ahead and extract it, saving it to our
    project area.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将需要这本书附带的代码下载中这一章的整个代码文件夹。继续并提取它，保存到我们的项目区域。
- en: In the folder, run the `tooltipv1.html` file, which contains a grid of six images,
    along with some dummy text. Hover over the images in turn. If all is well, it
    will show a tooltip:![Designing an advanced plugin](img/image00446.jpeg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件夹中，运行`tooltipv1.html`文件，其中包含一个由六幅图像组成的网格，以及一些虚拟文本。依次将鼠标悬停在图像上。如果一切正常，它会显示一个提示框:![设计一个高级插件](img/image00446.jpeg)
- en: At this point you're probably wondering how all the code hangs together. It's
    a valid question…but we're going to break with tradition, and not examine it.
    Instead, I want to concentrate on redesigning the code to use boilerplate formatting,
    which will help make it easier to read, debug, and extend in the future. Let's
    consider what this means for our plugin.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻你可能在想所有代码是如何串联在一起的。这是一个合理的问题……但我们将打破传统，不去审视它。相反，我想专注于重新设计代码，使用样板格式，这将有助于使其更易于阅读、调试和扩展。让我们考虑一下这对我们的插件意味着什么。
- en: Rebuilding our plugin using boilerplate
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用样板重建我们的插件
- en: Hands up if you've not heard of boilerplating? Chances are that you may or may
    not have come across such examples as Bootstrap ([http://www.getbootstrap.com](http://www.getbootstrap.com)),
    or even HTML5 Boilerplate ([https://html5boilerplate.com/](https://html5boilerplate.com/)).
    To help you get familiar with the term, it is based on a simple idea of using
    a template to help structure code. It doesn't mean that it will write it for us
    (shame – we could earn millions for doing nothing, chuckle!), but it helps to
    save time by reusing a framework to rapidly develop code, such as full websites
    or even jQuery plugins.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对样板编制还不熟悉，请举手？有可能您已经遇到了一些例子，如Bootstrap（[http://www.getbootstrap.com](http://www.getbootstrap.com)），或者甚至HTML5
    Boilerplate（[https://html5boilerplate.com/](https://html5boilerplate.com/)）。为了帮助您熟悉这个术语，它基于一个简单的想法：使用模板来帮助构建代码结构。这并不意味着它会为我们编写代码（可惜——我们可以因此无所作为而赚取数百万，哈哈！），但它通过重用框架来快速开发代码，比如完整的网站或者甚至jQuery插件，有助于节省时间。
- en: For our next demo, we're going to rework our plugin using the jQuery Boilerplate
    templates available from [https://github.com/jquery-boilerplate/jquery-patterns](https://github.com/jquery-boilerplate/jquery-patterns).
    As is often the case with the Internet, some kind soul has already created a good
    example of a tooltip using this technique, so we'll adapt it for our needs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的下一个演示，我们将使用来自[https://github.com/jquery-boilerplate/jquery-patterns](https://github.com/jquery-boilerplate/jquery-patterns)的jQuery
    Boilerplate模板重新设计我们的插件。与互联网一样，某种善良的灵魂已经创建了一个使用这种技术的良好的工具提示示例，因此我们将根据我们的需要进行调整。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are interested in learning more about the jQuery Boilerplate plugin pattern,
    you may like to look at *Instant jQuery Boilerplate for Plugins*, by Jonathan
    Fielding, available from Packt Publishing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对学习更多关于jQuery Boilerplate插件模式的内容感兴趣，您可能会喜欢查看Jonathan Fielding的《*Instant jQuery
    Boilerplate for Plugins*》，该书由Packt Publishing出版。
- en: The plugin example we'll use is by Julien G, a French web developer. The original
    is available via JSFiddle at [http://jsfiddle.net/molokoloco/DzYdE/](http://jsfiddle.net/molokoloco/DzYdE/).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的插件示例是由法国网页开发者Julien G提供的。原始版本可通过JSFiddle在[http://jsfiddle.net/molokoloco/DzYdE/](http://jsfiddle.net/molokoloco/DzYdE/)上找到。
- en: Let's start (as always), by extracting a copy of the code folder for this chapter
    from the code download for this book. If you already have it from the previous
    exercise, then we can use that instead.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始（像往常一样），从代码下载中提取本章的代码文件夹的副本。如果您已经从上一个练习中拥有它，那么我们可以使用它。
- en: Navigate to the `version 2` folder, then preview `tooltipv2.html` in a browser.
    If all is well, we should see the same set of images as in the previous example,
    with the same styling applied for the tooltips.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`version 2`文件夹，然后在浏览器中预览`tooltipv2.html`。如果一切顺利，我们应该看到与前一个示例中相同的一组图像，并且工具提示应用了相同的样式。
- en: 'At face value, it would seem that nothing has changed – this in itself is actually
    a good indicator of success! The real changes though are in `tooltipv2.js`, within
    the `js` subfolder under the `version 2` folder. Let''s go through this step by
    step, beginning with declaring variables:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 乍看之下，似乎什么也没有改变——这本身实际上是成功的一个很好的指标！真正的变化在于`tooltipv2.js`中，在`version 2`文件夹下的`js`子文件夹中。让我们逐步进行，从声明变量开始：
- en: 'We start with declaring properties for the jQuery, `document`, `window`, and
    `undefined`. You might ask why we are passing in `undefined` – it''s an excellent
    question: this property is mutable (meaning it can be changed). Although it was
    made non-writable in ECMAScript 5, not using it in our code means it can remain
    undefined and prevent malicious code attempts. Passing the remaining three properties
    makes it quicker to reference within our code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先声明了jQuery、`document`、`window`和`undefined`的属性。你可能会问为什么我们要传入`undefined`——这是一个很好的问题：这个属性是可变的（意味着它可以被更改）。虽然在ECMAScript
    5中它被设置为不可写，但在我们的代码中不使用它意味着它可以保持未定义并防止恶意代码的尝试。传递剩下的三个属性可以使我们在代码中更快地引用它们：
- en: '[PRE1]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next up, the internal methods. We''re creating them as methods within the `internal`
    object; the first takes care of positioning the tooltip on screen, while `show`
    and `hide` controls the visibility of the tooltip:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是内部方法。我们将它们创建为`internal`对象中的方法；第一个负责将工具提示定位在屏幕上，而`show`和`hide`控制工具提示的可见性：
- en: '[PRE2]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We move on to the external methods. Up first from within the `external` object,
    comes the `init` function, to initialize our plugin and render it on screen. We
    then call the `internal.show` and `internal.hide` internal methods when moving
    over an element with an instance of the `.tooltip` class:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们继续外部方法。首先在`external`对象内部，`init`函数首先出现，用于初始化我们的插件并在屏幕上呈现它。然后在移动到带有`.tooltip`类实例的元素时，我们调用`internal.show`和`internal.hide`内部方法：
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The second external method handles the updating of the tooltip text, using
    the `.data()` method:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个外部方法处理了更新提示文本，使用`.data()`方法：
- en: '[PRE4]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We round up the methods available in our plugin with a `destroy()` handler.
    This stops a selected tooltip from displaying, and removes the element from code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将我们的插件中可用的方法圆满地结束了，包括`destroy()`处理程序。这样可以阻止所选提示显示，并将元素从代码中删除：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Last, but by no means least is our plugin initiator. This function simply maps
    method names to valid functions in our plugin, or degrades gracefully if they
    don''t exist:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是我们的插件启动器。这个函数简单地将方法名映射到我们插件中的有效函数，或者在它们不存在时进行优雅降级：
- en: '[PRE6]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The key takeaway though from this demo is not the specific functions that we
    can use, but the format used to produce our plugin.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，从这个演示中最重要的要点不是我们可以使用的具体功能，而是用于生成我们的插件的格式。
- en: Anyone can write code, but use of a boilerplate pattern such as the one we've
    used here will help improve readability, make it easier to debug, and increase
    opportunities when extending or upgrading functionality at a later date. Remember,
    if you write a plugin and don't revisit it for a period of time (say 6 months);
    then the acid test is how much you can work out from the well-structured code,
    without needing lots of documentation. If you can't do that, then you need to
    revisit your coding!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以写代码，但使用像我们在这里使用的样板模式将有助于提高可读性，使调试更容易，并在以后的扩展或升级功能时增加机会。记住，如果你编写了一个插件，并且在一段时间内没有回顾它（比如说6个月）；那么酸测试是你能从良好结构化的代码中解决多少问题，而不需要大量文档。如果你做不到这一点，那么你需要重新审视你的编码！
- en: Let's move on. Remember when I mentioned there was a good reason for choosing
    to use a tooltip plugin as the basis for our examples? It's time to reveal why…
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。还记得我提到选择使用提示插件作为我们例子基础的一个很好的原因吗？现在是时候揭示为什么了...
- en: Converting animations to use CSS3 automatically
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动将动画转换为使用CSS3
- en: We've built a tooltip plugin which uses a touch of animation to fade in and
    out when hovering over elements marked with the `.tooltip` class. Nothing wrong
    in that – the code works perfectly well, and is an acceptable way of displaying
    content…right? Wrong! As you should know by now, we can definitely do better.
    Here's why I chose the tooltip as our example.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建立了一个提示插件，它在悬停在标记有`.tooltip`类的元素上时使用一点动画淡入淡出。那没错 - 代码完全正常运行，是一种可以接受的显示内容的方式...对吗？错！正如你现在应该知道的，我们绝对可以做得更好。这就是为什么我选择了提示作为我们的例子的原因。
- en: 'Remember how I mentioned back in [Chapter 6](part0056.xhtml#aid-1LCVG1 "Chapter 6. Animating
    in jQuery"), *Animating in jQuery*, that we should consider using CSS3 styling
    to control our animation? Well, here''s a perfect example: we can easily change
    our code to force jQuery to use CSS3 where possible, or fall back to using the
    library for older browsers.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我在[第6章](part0056.xhtml#aid-1LCVG1 "第6章。在jQuery中进行动画")中提到过的，在jQuery中进行动画，我们应该考虑使用CSS3样式来控制我们的动画吗？好吧，这里有一个完美的例子：我们可以轻松地改变我们的代码，强制jQuery尽可能使用CSS3，或者在旧版本的浏览器中回退到使用库。
- en: 'The trick behind it is in one line:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 其中的诀窍在于一行代码：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To see how easy it is, follow the next steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要看看有多简单，请按照以下步骤操作：
- en: 'In a copy of `tooltipv2.html`, add this line as indicated:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tooltipv2.html`的副本中，按照提示添加这行：
- en: '[PRE8]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Preview the results in a browser. If all is well, we should see some slight
    changes in how the tooltip reacts. However, the real change is evident when viewing
    the code for the tooltip itself, from within a DOM Inspector such as Firebug:![Converting
    animations to use CSS3 automatically](img/image00447.jpeg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中预览结果。如果一切顺利，我们应该看到提示反应方式稍有改变。然而，当在像Firebug这样的DOM检查器中查看提示代码时，真正的改变就显而易见了：![自动将动画转换为使用CSS3](img/image00447.jpeg)
- en: 'If we look in the computed styles half of Firebug, we can see the styles being
    assigned to the tooltip element:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在Firebug的计算样式一半查看，我们可以看到样式被分配给提示元素：
- en: '![Converting animations to use CSS3 automatically](img/image00448.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![自动将动画转换为使用CSS3](img/image00448.jpeg)'
- en: A simple change to make, but hopefully one we can see making a significant improvement
    in performance. In this instance, we're using a plugin to force jQuery to use
    CSS3 styling in place of standard jQuery based animations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的变化，但希望我们能看到在性能上有显著改进。在这种情况下，我们使用一个插件来强制 jQuery 使用 CSS3 样式代替标准的 jQuery
    基础动画。
- en: The key message here, though is that we should not, as developers, feel we are
    constricted to using jQuery to provide our animations. While it might be a necessary
    evil for managing complex motions, we should still consider using it for those
    less ornate instances.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这里的关键信息是，作为开发人员，我们不应感到受限于使用 jQuery 来提供我们的动画。尽管对于管理复杂动作可能是一种必要之恶，但我们仍应考虑在那些不太华丽的情况下使用它。
- en: Working with CSS-based animations
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用基于 CSS 的动画
- en: 'Hmm – it''s at this point that a question comes to mind: surely, if we''re
    using modern browsers, why do we need to rely on using jQuery-based animations
    at all?'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯 - 此时脑海中浮现一个问题：如果我们使用现代浏览器，为什么还需要依赖基于 jQuery 的动画呢？
- en: The answer is simple – in short, it depends on the circumstances. The long answer
    though is that for modern browsers, we don't need to rely on using jQuery to provide
    our animations. Only if we're forced to provide support for old browser versions
    (such as IE6), do we need to use jQuery.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 答案很简单 - 简而言之，这取决于具体情况。但长话短说，对于现代浏览器，我们不需要依赖使用 jQuery 来提供我们的动画。只有在我们被迫为旧版浏览器版本（如
    IE6）提供支持时，我们才需要使用 jQuery。
- en: The likelihood though should be low. If we need to, then we should really be
    asking ourselves if we're making the right move, or whether support should be
    degraded gradually using something like Modernizr.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但是可能性应该很低。如果有必要的话，我们真的应该问自己我们是否在做正确的事情，或者是否应该逐渐降低支持，使用类似 Modernizr 这样的工具。
- en: 'That all said – let''s go through the following steps to understand what we
    need to do to use CSS3 in place of jQuery-based animations:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此 - 让我们通过以下步骤来理解我们需要做什么才能使用 CSS3 代替基于 jQuery 的动画：
- en: 'In a copy of `tooltipv2.css`, add the following CSS style at the bottom of
    the file – this will be our transition effect for the tooltip:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `tooltipv2.css` 的副本中，在文件底部添加以下 CSS 样式 - 这将是我们的工具提示的过渡效果：
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open a copy of `jquery.quicktipv2.js`, then first comment out the line:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `jquery.quicktipv2.js` 的副本，然后首先注释掉以下行：
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following line in its place:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在原位添加以下行：
- en: '[PRE11]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Repeat the same process, but this time for the line:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复相同的过程，但这次是针对以下行：
- en: '[PRE12]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add this next line as its replacement:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将下一行作为替换添加：
- en: '[PRE13]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the files. If we preview the results of the change in a browser, we should
    see the tooltip appear to slide in and hover over the selected image.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。如果我们在浏览器中预览变化的结果，应该看到工具提示滑动并悬停在所选图像上。
- en: The effect looks very smooth. While it doesn't fade in or out, it still provides
    an interesting twist to how tooltips would normally appear in a page. It does
    raise an interesting question – what effect should we use? Let's take a timeout
    to consider the implications of making this change.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 效果看起来非常流畅。虽然它不会淡入淡出，但仍然为工具提示的出现方式带来了有趣的变化。这确实引发了一个有趣的问题 - 我们应该使用什么效果？让我们暂停一下，考虑一下进行这种变化的影响。
- en: Considering the impact of the change
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑变化的影响
- en: Using CSS3 styling in our example raises an important question – which effect
    works best? We could always go for a classic linear or swing effect, but these
    have been used to death. We can easily replace it with something a little more
    original. In our example, we've used `cubic-bezier(0.23, 1, 0.32, 1)`, which is
    the CSS3 equivalent of the `easeOutQuint` function.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中使用 CSS3 样式提出了一个重要的问题 - 哪种效果效果最好？我们可以选择经典的线性或摆动效果，但这些已经被用得厌了。我们可以轻松地用更原创的东西替换它。在我们的示例中，我们使用了
    `cubic-bezier(0.23, 1, 0.32, 1)`，这是 `easeOutQuint` 函数的 CSS3 等效函数。
- en: Working out these effects can be time-consuming. Instead, we can use a great
    tool created by Lea Verou, which is available at [http://www.cubic-bezier.com](http://www.cubic-bezier.com).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些效果可能会耗费时间。相反，我们可以使用 Lea Verou 创建的一个很棒的工具，它可以在 [http://www.cubic-bezier.com](http://www.cubic-bezier.com)
    上使用。
- en: '![Considering the impact of the change](img/image00449.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![考虑变化的影响](img/image00449.jpeg)'
- en: To see what our chosen effect looks like in action, head over to [http://cubic-bezier.com/#.23,1,.32,1](http://cubic-bezier.com/#.23,1,.32,1).
    The site has an example we can run to see how the effect will work. The great
    thing about the site is that we can use the graph to fine tune our effect, which
    is automatically converted into the relevant values that we can transfer into
    our code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们选择的效果在实际中的样子，前往 [http://cubic-bezier.com/#.23,1,.32,1](http://cubic-bezier.com/#.23,1,.32,1)。
    该网站有一个我们可以运行的示例，以查看效果如何工作。 该网站的好处在于我们可以使用图表来微调我们的效果，这会自动转换为我们可以转移到我们的代码中的相关值。
- en: This opens up further possibilities – we touched on the use of the Bez plugin
    from [http://github.com/rdallasgray/bez](http://github.com/rdallasgray/bez); this
    could easily be used here in place of the standard `.css()` method, to provide
    our animation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这打开了进一步的可能性——我们提到了来自 [http://github.com/rdallasgray/bez](http://github.com/rdallasgray/bez)
    的 Bez 插件的使用；这很容易在这里代替标准的 `.css()` 方法，来提供我们的动画。
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The CSS equivalents for well-known easing functions (such as `easeInQuint`)
    are all listed at [https://gist.github.com/tzachyrm/cf83adf77246ec938d1b](https://gist.github.com/tzachyrm/cf83adf77246ec938d1b);
    we can see them in action at [http://www.easings.net](http://www.easings.net).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于众所周知的缓动函数（如 `easeInQuint`），其 CSS 等效函数都列在 [https://gist.github.com/tzachyrm/cf83adf77246ec938d1b](https://gist.github.com/tzachyrm/cf83adf77246ec938d1b)
    上；我们可以在 [http://www.easings.net](http://www.easings.net) 上看到它们的效果。
- en: 'The important thing though, is the change we can see when viewing the CSS within
    a DOM Inspector:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，重要的是，当在 DOM Inspector 中查看 CSS 时，我们可以看到的变化是：
- en: '![Considering the impact of the change](img/image00450.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![考虑到变化的影响](img/image00450.jpeg)'
- en: Instead of applying it inline (as shown in the *Converting animations to use
    CSS3 automatically* section), we can maintain the separation of concerns principle,
    by keeping CSS styles in the style sheet, and leaving HTML for organizing our
    web page content.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与其内联应用（如 *自动将动画转换为使用 CSS3* 部分所示），我们可以保持关注点分离原则，将 CSS 样式保留在样式表中，将 HTML 用于组织我们的网页内容。
- en: Falling back on jQuery animations
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回退到 jQuery 动画
- en: Till now, we've used CSS styling to create our animation effect. It raises the
    question of whether we should use this technique for all our animation requirements,
    or if jQuery effects should be used.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用 CSS 样式来创建我们的动画效果。 这引发了一个问题，即我们是否应该将此技术用于我们所有的动画需求，还是应该使用 jQuery 效果。
- en: It all boils down to two key points – how complicated is the animation, and
    do you need to support older browsers? If the answer to either (or both) is yes,
    then jQuery is likely to win. If, however, you only have a simple animation, or
    you don't need to support legacy browsers, then using CSS should be given serious
    consideration.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都归结为两个关键点——动画有多复杂，以及你是否需要支持旧版浏览器？ 如果答案是肯定的（或两者都是肯定的），那么 jQuery 很可能会胜出。 但是，如果你只有一个简单的动画，或者你不需要支持旧版浏览器，那么使用
    CSS 应该值得认真考虑。
- en: 'The great thing about the animations we''ve used so far is that we can provide
    the same effect using both methods – that is, CSS and jQuery. A good source for
    the easing functions in jQuery is [https://github.com/gdsmith/jquery.easing](https://github.com/gdsmith/jquery.easing)
    - this lists all the standard well-known ones available in libraries such as jQuery
    UI. To prove we can achieve the same effect, let''s go ahead and make a quick
    change to our code, to use the jQuery equivalent of the animations already used.
    Go through the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的动画的一个很棒的地方是，我们可以使用两种方法提供相同的效果——即 CSS 和 jQuery。 jQuery 中缓动函数的一个很好的来源是
    [https://github.com/gdsmith/jquery.easing](https://github.com/gdsmith/jquery.easing)
    - 这里列出了所有标准的、在诸如 jQuery UI 等库中可用的众所周知的缓动函数。 为了证明我们可以实现相同的效果，让我们继续对我们的代码进行快速更改，使用已经使用过的动画的
    jQuery 等效方法。 按照以下步骤进行：
- en: 'We start by editing a copy of our `quickTip` plugin file. Go ahead and dig
    out a copy of `jquery.quicktipv2.js`, then add the following block of code, immediately
    after the variable declarations:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先要编辑 `quickTip` 插件文件的副本。 继续找到 `jquery.quicktipv2.js` 的副本，然后在变量声明之后立即添加以下代码块：
- en: '[PRE14]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We now need to adjust our animations to make use of the easing functions, so
    go ahead and modify the `fadeIn` method, as indicated in the following lines of
    code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要调整我们的动画以利用缓动函数，所以继续修改 `fadeIn` 方法，如下所示的代码行：
- en: '[PRE15]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can''t have `fadeIn` without its sister `fadeOut()`, so we need to change
    this call as well, as shown next:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有 `fadeIn` 就不能有其姐妹 `fadeOut()`，因此我们也需要更改这个调用，如下所示：
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the file as `jquery.quicktipv2.easing.js.` Don't forget to alter the original
    plugin reference in `tooltipv2.html`! We also need to remove the transition styling
    for `div.arrow_box` in the `tooltipv2.css` file, so go ahead and comment this
    code out.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`jquery.quicktipv2.easing.js`。不要忘记在`tooltipv2.html`中修改原始插件引用！我们还需要在`tooltipv2.css`文件中取消`div.arrow_box`的过渡样式，因此请继续并注释掉这段代码。
- en: At this point, we have in place a working solution using jQuery. If we preview
    the results in a browser, the tooltip displays as it should. The downside though,
    is that we lose visibility of the styling we've used, and that if (heaven forbid)
    JavaScript is disabled in the browser, then the animation won't play.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经使用jQuery实现了一个可行的解决方案。如果我们在浏览器中预览结果，工具提示将显示为应该显示的样子。不过，缺点是我们失去了所使用的样式的可见性，并且（如果JavaScript在浏览器中被禁用的话）动画就不会播放了。
- en: There is also the important point that jQuery animations are already more resource
    hungry, which we touched on back in [Chapter 6](part0056.xhtml#aid-1LCVG1 "Chapter 6. Animating
    in jQuery"), *Animating in jQuery*. So why would we resort to using jQuery in
    these instances, when CSS will work? Again, it's all part of being that better
    developer – it's too easy to resort to using jQuery; it's right to consider all
    the alternatives first!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个重要的观点是jQuery动画已经消耗了更多资源，我们在[第6章](part0056.xhtml#aid-1LCVG1 "第6章. 在jQuery中进行动画")中也提到过，*在jQuery中进行动画*。那么，在这些情况下，为什么我们要求在这里使用jQuery动画，而不是CSS？再一次，这是成为更好的开发者的一部分
    - 容易诉诸于使用jQuery; 在考虑所有替代方案之前考虑这一点是正确的！
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you design a custom easing, and want to use a CSS equivalent – add the link
    to the jQuery Animate Enhanced plugin we used earlier. This gives the CSS equivalent
    using Bezier curve values. We can then use the Bez plugin from earlier, or even
    bezier-easing from [https://github.com/gre/bezier-easing](https://github.com/gre/bezier-easing)
    to add it to back in as a Bezier curve-based animation instead.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您设计了自定义缓动，并希望使用CSS等效-添加我们之前使用的jQuery动画增强插件的链接。这将使用贝塞尔曲线值提供CSS等效。然后我们可以使用之前的Bez插件，或者甚至使用来自[https://github.com/gre/bezier-easing](https://github.com/gre/bezier-easing)的bezier-easing将其添加回作为基于贝塞尔曲线的动画。
- en: Let's change focus now, and move on. We've provided a limited set of options
    in our plugin so far; what if we wanted to extend it? We could try delving into
    the code and adjusting it; though in some cases, this may be overkill for our
    needs. A better option may be to simply encapsulate it as an instance of a new
    plugin. Let's take a peek and see what is involved.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转移重点并继续前进。到目前为止，我们的插件中提供了有限的选项；如果我们想要扩展它怎么办？我们可以尝试深入代码并进行调整；尽管在某些情况下，这可能对我们的需求来说有些过度。一个更好的选择可能是将其简单地封装为一个新插件的实例。让我们来看看涉及到什么。
- en: Extending our plugin
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展我们的插件
- en: A common problem when using plugins is finding one that meets our requirements
    completely; the likelihood of that happening is probably less than winning the
    lottery!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用插件时常见的问题是找到完全符合我们要求的插件；发生这种情况的可能性可能比中彩票还要小！
- en: 'To get around this, we can always extend our plugin, to incorporate extra functionality
    without affecting existing methods. The benefit of doing this means that we can
    either override existing methods, or merge in additional functionality that helps
    mold the plugin towards being a closer fit for our requirements. To see how this
    would work in action, we''re going to add a method and extra variable to our existing
    plugin. There are lots of ways to achieve this, but the method I''ve used works
    well too. Let''s go through the following steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以扩展我们的插件，以在不影响现有方法的情况下加入额外的功能。这样做的好处是，我们可以覆盖现有的方法或合并额外的功能，帮助使插件更接近我们的需求。要了解这在实际应用中是如何工作的，我们将向我们现有的插件添加一个方法和额外的变量。有许多方法可以实现这一点，但我使用的方法也很有效。让我们按照以下步骤进行：
- en: 'We''ll start by editing a copy of `tooltipv2.js.` Immediately below the `#getValue`
    click handler, go ahead and add the following code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从编辑`tooltipv2.js`的副本开始。在`#getValue`点击处理程序的下面，继续添加以下代码：
- en: '[PRE17]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the file. If we preview `tooltipsv2.html` in a browser, then dig into the
    rendered code via a DOM Inspector, we should see something akin to the following
    screenshot:![Extending our plugin](img/image00451.jpeg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。如果我们在浏览器中预览`tooltipsv2.html`，然后通过DOM检查器深入渲染的代码，我们应该会看到类似于以下截图的内容：![扩展我们的插件](img/image00451.jpeg)
- en: 'In this instance, we''ve added a method that doesn''t really perform much;
    the key here is not so much what it does, but *how we add it in*. Here, we''ve
    made it available as an additional method to the existing object. Add the following
    to the foot of `tooltipsv2.js`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们添加了一个并不真正执行很多功能的方法；关键不是它做了什么，而是*我们如何添加它*。在这里，我们将其作为现有对象的附加方法提供。将以下内容添加到
    `tooltipsv2.js` 的末尾：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we now refresh our browser session, we can see it in action within the **Console**
    area of our browser, as can be seen in the next screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在刷新浏览器会话，我们可以在浏览器的 **控制台** 区域看到它的运行情况，如下一个截图所示：
- en: '![Extending our plugin](img/image00452.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![扩展我们的插件](img/image00452.jpeg)'
- en: There is a lot more that we can do and it's worth spending time researching
    online. The key to extending is to make sure you understand the differences between
    `$.fn.extend` and `$.extend`. They might look identical, but trust me – they act
    differently!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做更多的事情，值得花时间在线研究。扩展的关键是确保您了解 `$.fn.extend` 和 `$.extend` 之间的区别。它们看起来可能相同，但请相信我
    - 它们的作用是不同的！
- en: Packaging our plugin using Bower
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bower 打包我们的插件
- en: Okay – on that note, we now have a working plugin and it's ready for use.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 好了 - 在这个说明下，我们现在有一个可工作的插件，它已准备好使用。
- en: At this point, we could just release it as it is, but the smart alternative
    is to package it for use with managers such as Bower or NPM. This has the advantage
    of downloading and installing all the required packages, without the need to browse
    to individual sites and manually download each version.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以直接发布它，但明智的选择是将其打包以供像 Bower 或 NPM 这样的管理器使用。这样做的优点是下载并安装所有所需的包，而无需浏览到各个站点并手动下载每个版本。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We can even go to the extent of automating our development workflow with build
    tools such as Gulp and Grunt – for an example of how, head over to [https://www.codementor.io/bower/tutorial/beginner-tutorial-getting-started-bower-package-manager](https://www.codementor.io/bower/tutorial/beginner-tutorial-getting-started-bower-package-manager).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以进一步自动化我们的开发工作流程，使用诸如 Gulp 和 Grunt 这样的构建工具 - 有关如何的示例，请访问 [https://www.codementor.io/bower/tutorial/beginner-tutorial-getting-started-bower-package-manager](https://www.codementor.io/bower/tutorial/beginner-tutorial-getting-started-bower-package-manager)。
- en: 'For now, let''s take a quick look at the steps to automate the creation of
    our Bower package:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速看一下自动创建 Bower 包的步骤：
- en: For this demo, we will need to install NodeJS. So head over to [http://nodejs.org/](http://nodejs.org/),
    download the appropriate binary or package and install, accepting all defaults.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进行这个演示，我们需要安装 NodeJS。所以请访问 [http://nodejs.org/](http://nodejs.org/)，下载适当的二进制或包，并安装，接受所有默认设置。
- en: 'Next, we need to install Bower. Fire up the NodeJS command prompt that will
    have been installed, and enter the following at the command line:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装 Bower。启动已安装的 NodeJS 命令提示符，并在命令行输入以下内容：
- en: '[PRE19]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Bower will prompt us for information about the plugin through a series of questions,
    before displaying the `bower.json` file that it will create for us. In this instance,
    I've used the tooltip plugin as a basis for our example. The same questions will
    apply for any plugin you create and want to distribute using Bower, as shown in
    this screenshot:![Packaging our plugin using Bower](img/image00453.jpeg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bower 将通过一系列问题提示我们有关插件的信息，然后显示它将为我们创建的 `bower.json` 文件。在这个例子中，我使用了工具提示插件作为我们示例的基础。对于您创建并想要使用
    Bower 分发的任何插件，相同的问题都将适用，如下图所示：![使用 Bower 打包我们的插件](img/image00453.jpeg)
- en: 'The final step, after confirming that we are OK with the `bower.json` file
    that is created, is to register the plugin in Bower. At the command prompt, run
    the following command:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步，确认我们对所创建的 `bower.json` 文件没有问题，就是在 Bower 中注册插件。在命令提示符下，运行以下命令：
- en: '[PRE20]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Bower will run through a number of stages before finally confirming that the
    plugin is available for use via Bower.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bower 将在最终确认插件可通过 Bower 使用之前经历多个阶段。
- en: At this point, we will have a plugin available for anyone to download. As it
    has to be linked in with a valid GitHub account, we can now upload the plugin
    to such an account, and make it available for anyone to download via Bower. As
    a bonus, we can now take advantage of NodeJS and Grunt to help automate the whole
    process. How about taking a look at grunt-bump ([https://github.com/vojtajina/grunt-bump](https://github.com/vojtajina/grunt-bump)),
    as a starting point?
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将可提供插件供任何人下载。因为它必须链接到有效的GitHub帐户，我们现在可以将插件上传到这样的帐户，并通过Bower使其对任何人都可下载。作为奖励，我们现在可以利用NodeJS和Grunt来帮助自动化整个过程。不妨看看grunt-bump（[https://github.com/vojtajina/grunt-bump](https://github.com/vojtajina/grunt-bump)），作为一个起点？
- en: Tip
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is so much more to Bower than we've been able to cover here. For inspiration,
    it's worth reading the documentation at [http://bower.io/](http://bower.io/).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Bower还有很多我们无法在这里覆盖到的功能。为了获得灵感，不妨阅读[http://bower.io/](http://bower.io/)上的文档。
- en: Automating the provision of documentation
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化文档的提供
- en: The final stage in developing our plugin skills is the provision of documentation.
    Any coder can produce documentation, but the mark of a better developer is to
    produce quality documentation, without the need to have to spend lots of time
    on it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 发展我们的插件技能的最后阶段是提供文档。任何编码人员都可以生成文档，但更好的开发人员的标志是可以产生高质量的文档，而不必花费大量时间。
- en: 'Enter JSDoc! It is available from [https://github.com/jsdoc3/jsdoc](https://github.com/jsdoc3/jsdoc).
    If you''re not already familiar with it, this is a great way to create your documentation
    that not only looks good, but can easily be automated using Node. Let''s take
    a moment to install it, and see it work in action. Following steps need to be
    performed for this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 进入JSDoc！它可从[https://github.com/jsdoc3/jsdoc](https://github.com/jsdoc3/jsdoc)获取。如果您尚未熟悉它，这是创建不仅外观良好而且可以轻松使用Node自动化的文档的好方法。让我们花点时间安装它，并看看它如何工作。需要执行以下步骤：
- en: We'll start this time by installing JSDoc via NodeJS. For this we need to bring
    up a NodeJS command prompt; there will be an icon for this in your **Programs**
    menu, or from the **Start** page if using Windows 8.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次我们将从使用NodeJS安装JSDoc开始。为此，我们需要打开一个NodeJS命令提示符；如果您使用Windows 8，则可以在**程序**菜单中找到其图标，或者从**开始**页面找到。
- en: 'At the command prompt, change the location to your project folder, then enter
    the following command:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符下，将位置更改到您的项目文件夹，然后输入以下命令：
- en: '[PRE21]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Node will run through the installation before confirming that it has completed
    the process.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认完成该过程之前，Node将运行安装过程。
- en: 'To produce documentation, all that needs to happen is for comments to be entered
    into our code, thus:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成文档，需要在我们的代码中输入注释，例如：
- en: '![Automating the provision of documentation](img/image00454.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![自动化文档的提供](img/image00454.jpeg)'
- en: 'Once added, the documentation can be compiled by running the following command
    from within the plugin folder:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 添加后，可以通过在插件文件夹中运行以下命令来编译文档：
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will see a folder called out appear; this contains the documentation that
    we can build up gradually. If we make changes to the comments inline, we need
    to rerun the compilation process again. This can be automated using the `grunt-contrib-watch`
    plugin for Node. If we take a look in the out folder, we can see the documentation
    appear. It will look similar to the following screenshot extract:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会看到一个名为out的文件夹出现；里面包含了我们可以逐步建立的文档。如果我们对内联注释进行了更改，我们需要重新运行编译过程。这可以通过Node的`grunt-contrib-watch`插件来自动化。如果我们在out文件夹中看一下，就会看到文档出现。它会看起来类似于以下截图提取：
- en: '![Automating the provision of documentation](img/image00455.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![自动化文档的提供](img/image00455.jpeg)'
- en: There is a lot more we can cover to get a feel for some of the parameters that
    can be used to dictate how the documentation will appear, it's worth reading through
    the extensive documentation at [http://usejsdoc.org/about-getting-started.html](http://usejsdoc.org/about-getting-started.html).
    There are a lot of possibilities available!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多内容可以进行覆盖，以了解可以用来指导文档如何呈现的某些参数的感觉，不妨阅读[http://usejsdoc.org/about-getting-started.html](http://usejsdoc.org/about-getting-started.html)上的广泛文档。有很多可能性可供选择！
- en: Returning values from our plugin
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从我们的插件返回值
- en: A key part of creating a plugin is – what information can we get back from the
    plugin? Sometimes we can't get information out, but that may just be a limitation
    of what we're trying to achieve with the plugin. In our case, we should be able
    to get the content out. Let's take a look at how we can achieve this with our
    quicktip plugin.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 创建插件的关键部分是 - 我们能从插件中得到什么信息？有时我们无法从中获取信息，但这可能仅是我们试图通过插件实现的目标的局限性。在我们的情况下，我们应该能够获取内容。让我们看看如何使用我们的快速提示插件来实现这一点。
- en: 'Before delving into the code, we''ll take a look at what we''re creating:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，我们先来看一下我们要创建的东西：
- en: '![Returning values from our plugin](img/image00456.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![从我们的插件返回值](img/image00456.jpeg)'
- en: 'We need to start somewhere, and so there is no better place than the markup.
    In a copy of `tooltipv2.html`, go ahead and add the following highlighted code
    before closing the `<div>` tag:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要从某个地方开始，所以最好的地方就是标记。在`tooltipv2.html`的副本中，在关闭`<div>`标签之前添加以下突出显示的代码：
- en: '[PRE23]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In a copy of `tooltipv2.js`, we need to expose the `data-` tags that we''re
    implementing in the markup. Go ahead and add the configuration option for `tiptag`,
    as indicated next:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tooltipv2.js`的副本中，我们需要暴露我们在标记中实现的`data-`标签。继续添加`tiptag`的配置选项，如下所示：
- en: '[PRE24]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The last step for this part is to modify our markup. In place of using the standard
    `title=""` tags, we're going to replace them with the `data-` tags, which allow
    more flexibility. In a copy of `tooltipv2.html`, do a search for all instances
    of `title`, and then replace them with `data-title`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这部分的最后一步是修改我们的标记。我们将使用`data-`标签替换标准的`title=""`标签，以提供更多的灵活性。在`tooltipv2.html`的副本中，搜索所有`title`的实例，然后用`data-title`替换它们。
- en: 'Next, we need to add in a link to the jQuery UI CSS style sheet. This is purely
    for creating a dialog box to display the results of us fetching the text from
    one of the tooltips:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一个链接到jQuery UI CSS样式表中。这纯粹是为了创建一个对话框，显示我们从其中一个工具提示中获取文本的结果：
- en: '[PRE25]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To make the jQuery UI CSS work, we need to add a reference to the jQuery UI
    library. So go ahead and add one in. For convenience, we will use the CDN link,
    but would look to produce a customized minified version for production use:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使jQuery UI CSS起作用，我们需要添加对jQuery UI库的引用。所以继续添加一个。为了方便起见，我们将使用CDN链接，但是在生产环境中，我们将考虑生成一个定制的缩小版本：
- en: '[PRE26]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In a copy of `tooltip.js`, remove all the code within, and replace it with
    the following:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tooltip.js`的副本中，删除其中的所有代码，并用以下代码替换：
- en: '[PRE27]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Save all the files. If we switch to a DOM Inspector such as Firebug, we can
    see the text returned by entering the highlighted line of code in step 6:![Returning
    values from our plugin](img/image00457.jpeg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件。如果我们切换到像Firebug这样的DOM检查器，我们可以看到通过输入第6步中突出显示的代码行返回的文本：![从我们的插件返回值](img/image00457.jpeg)
- en: In the same browser session, click on the **Get text from first tooltip** button.
    If all is well, we should see a gentle overlay effect appear, followed by a dialog
    box with the text displayed, as shown at the start of this exercise.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个浏览器会话中，单击**从第一个工具提示获取文本**按钮。如果一切正常，我们应该看到一个温和的覆盖效果出现，然后是一个对话框，显示在本练习开始时显示的文本。
- en: Granted, our example is a little contrived, and that we should look to not hardcode
    in the reliance on fetching the text from the first tooltip, but by selecting
    text from whichever tooltip we desired. The key though is that we can equally
    customize both the tags used for the text, and also retrieve that content using
    the `.data()` method, with ease.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，我们的示例有点牵强，我们应该尽量不将获取文本的依赖硬编码在内，而是通过选择我们想要的任何工具提示中的文本来实现。关键在于，我们可以同样轻松地自定义用于文本的标签，并使用`.data()`方法检索该内容。
- en: Exploring best practices and principles
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索最佳实践和原则
- en: 'Over the last few pages, we''ve covered a number of concepts and tips that
    we can use to help develop our plugin skills further. There are a few additional
    factors worth considering, which we''ve not covered yet. It''s worth taking a
    few moments to explore these factors:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几页中，我们已经涵盖了一些概念和技巧，可以帮助我们进一步发展插件技能。还有一些值得考虑的额外因素，我们还没有涵盖。值得花几分钟来探索这些因素：
- en: '**Quality and Code Style**: Have you considered linting your plugin code through
    JSHint ([http://www.jshint.com](http://www.jshint.com)), or JSLint ([http://www.jslint.com](http://www.jslint.com))?
    Adhering to best practices when writing jQuery is one way to help ensure success,
    such as following a consistent code style or the guidelines issued at [http://contribute.jquery.org/style-guide/js/](http://contribute.jquery.org/style-guide/js/)?
    If not, how clean and readable is your code?'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量和代码风格**：你有考虑通过 JSHint ([http://www.jshint.com](http://www.jshint.com))
    或 JSLint ([http://www.jslint.com](http://www.jslint.com)) 对插件代码进行 linting 吗？遵循写
    jQuery 最佳实践是确保成功的一种方式，比如遵循一致的代码风格或者在 [http://contribute.jquery.org/style-guide/js/](http://contribute.jquery.org/style-guide/js/)
    上发布的指南？如果没有，那你的代码有多清理和可读？'
- en: '**Compatibility**: Which version of jQuery is your plugin compatible with?
    Significant changes have been made to the library over the years. Are you intending
    to provide support to older browsers (requiring the 1.x branch of jQuery), or
    staying with more modern browsers (using version 2.x of the library)?'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**：你的插件与哪个版本的 jQuery 兼容？这个库多年来已经进行了重大更改。你是打算提供对旧浏览器的支持（需要使用 1.x 分支的 jQuery），还是保持与更现代的浏览器兼容（使用库的
    2.x 版本）？'
- en: '**Reliability**: You should consider providing a set of unit tests. These help
    prove that the plugin works, and are easy to produce. For a guide on how to do
    this with QUnit, you may like to take a look at *Instant Testing with QUnit*,
    by Dmitry Sheiko, available from Packt Publishing.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：你应该考虑提供一组单元测试。这些测试可以帮助证明插件的工作情况，并且很容易产生。如果你想了解如何在 QUnit 中执行这些测试，可以看看
    Dmitry Sheiko 编著的 *Instant Testing with QUnit*，这本书由 Packt Publishing 出版。'
- en: '**Performance**: A plugin that is slow to run will turn potential users away.
    Consider using [JSPerf.com](http://JSPerf.com) ([http://www.jsperf.com](http://www.jsperf.com))
    to test segments as a benchmark for assessing how well the plugin works, and whether
    any section needs further optimization.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：一个运行速度慢的插件会让潜在用户望而却步。考虑使用 [JSPerf.com](http://JSPerf.com) ([http://www.jsperf.com](http://www.jsperf.com))
    作为测试段的基准，评估插件的工作情况以及是否需要进一步优化任何部分。'
- en: '**Documentation**: Documenting your plugin is a must. The level of documentation
    will often determine the plugin''s success or failure. Does the plugin contain
    any quirks that developers need to be aware of? What methods and options does
    it support? It will also help if the code has inline comments, although it helps
    to provide a minified version for production use. If a developer can navigate
    your code base well enough to use it or improve it, then you''ve done a good job.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：给你的插件文档是必须的。文档的程度通常会决定插件的成功与失败。插件是否包含开发者需要了解的任何怪癖？它支持哪些方法和选项？如果代码有内联注释，那也会有帮助，虽然最好为生产使用提供一个压缩版本。如果开发人员可以很好地导航你的代码库来使用或改进它，那么你已经完成了一份不错的工作。'
- en: '**Maintenance**: If we release something into the wild, then thought must be
    given to a support mechanism. How much time do we need to offer maintenance and
    support? It is critical to be clear upfront about what expectations are around
    answering questions, addressing issues, and continuing to improve the code.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护**：如果我们发布一个东西到公众面前，就必须考虑支持机制。我们需要提供多少时间进行维护和支持？提前清楚地说明对问题的回答、解决问题和持续改进代码的期望是至关重要的。'
- en: Phew – there's a lot to consider! Creating a plugin can be a rewarding experience.
    Hopefully, some of these tips will help improve your skills and make you a more
    rounded developer as a whole. Remember, anyone can write code, as I always say.
    The key to becoming a better developer is understanding what makes a good plugin,
    and knowing how to put that into practice.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀 – 需要考虑的事情还真不少！创建一个插件可能会是一次有益的经历。希望这些建议能帮助你提高技能，使你成为更全面的开发者。记住，任何人都可以编写代码，就像我经常说的那样。成为更好的开发者的关键在于理解什么是一个好的插件，并知道如何付诸实践。
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Learn jQuery site has a few extra tips that are worth exploring at [http://learn.jquery.com/plugins/advanced-plugin-concepts/](http://learn.jquery.com/plugins/advanced-plugin-concepts/).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Learn jQuery 网站有一些额外的提示值得探索，地址是 [http://learn.jquery.com/plugins/advanced-plugin-concepts/](http://learn.jquery.com/plugins/advanced-plugin-concepts/)。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: If someone asked you the name of one topic that is key to learning jQuery –
    it's very likely that plugins would feature highly in that answer! To help with
    writing them, we've covered a number of tips and tricks in this chapter. Let's
    take five to recap what we've learnt.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人问你学习 jQuery 的一个关键主题的名称，很可能插件会在答案中占据重要地位！为了帮助写作，我们在本章中涵盖了许多技巧和窍门。让我们花五分钟回顾一下我们学到的内容。
- en: Our starting point was a discussion on detecting the signs of poorly developed
    plugins, as a precursor to learning about how we can improve our development through
    the use of plugin patterns. We then moved on to working through the design and
    construction of an advanced plugin, starting with creating the basic version before
    reordering it to use a boilerplate template.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的起点是讨论如何检测开发不良的插件的迹象，作为学习如何通过使用插件模式来改进我们的开发的先导。然后，我们开始设计和构建一个高级插件，首先创建基本版本，然后重新排序以使用样板模板。
- en: Next came a detailed look at switching to using CSS3 animations, to develop
    some of the arguments we covered earlier in the book, in considering the use of
    CSS3 to better manage animations than resorting to jQuery.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们详细研究了转换到使用 CSS3 动画，在书中早些时候我们讨论的一些论点，考虑到使用 CSS3 来更好地管理动画，而不是诉诸于 jQuery。
- en: We then moved on to looking at how we can extend functionality in our plugin,
    before learning about packaging it with Bower ready for use through GitHub. We
    then covered the automatic provision of documentation, and how we can return values
    from our plugin, before rounding up with a look at some of the best practices
    and principles we can take away for use in our development.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始研究如何在我们的插件中扩展功能，然后学习如何通过 Bower 打包它以便通过 GitHub 使用。然后我们涵盖了自动提供文档的功能，以及如何从我们的插件中返回值，最后总结了一些我们可以在开发中采用的最佳实践和原则。
- en: 'Right – onwards we go! In the next chapter, we''re going to mix jQuery (including
    some plugins), HTML5 markup, and CSS, and produce a site. Okay, nothing outrageous
    with that – that''s perfectly normal. Here comes the twist though: what about
    running the site in its entirety, *offline*? Yes, you heard me right…offline…and
    no, there''s not a USB key or DVD in sight either…'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 好的 - 我们继续前进！在下一章中，我们将混合使用 jQuery（包括一些插件），HTML5 标记和 CSS，并制作一个网站。好的，没有什么特别的 -
    那是非常正常的。但是，这里有一个转折：怎么样在*离线*状态下运行整个网站？是的，你没听错……离线……而且，看不到 USB 键或 DVD……
