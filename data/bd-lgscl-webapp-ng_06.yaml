- en: Functional Reactive Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式响应式编程
- en: 'According to Wikipedia, **Functional Reactive Programming** (**FRP**) is a
    programming paradigm for reactive programming, which uses the building blocks
    of functional programming. OK, that sounds fancy, but what does it mean? To understand
    the whole sentence we need to break it apart a bit. Let''s try to define the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科，**函数式响应式编程** (**FRP**) 是用于响应式编程的一种编程范式，它使用函数式编程的构建模块。好的，这听起来挺高大尚的，但是它是什么意思呢？要理解整个句子，我们需要把它拆开来。让我们试着定义以下内容：
- en: A **programming paradigm** is an overarching theory, or way of working, centered
    around how a program should be organized and structured. Object-oriented programming
    and functional programming are examples of programming paradigms.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程范式** 是围绕程序应该如何组织和结构化的总体理论或工作方式。面向对象编程和函数式编程就是编程范式的例子。'
- en: '**Reactive programming**, in short, is programming with asynchronous data streams.
    Asynchronous data streams are streams of data whose values can arrive at any point
    in time.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式编程** 简单来说是利用异步数据流进行编程。异步数据流是值可以在任何时间到达的数据流。'
- en: '**Functional programming** is a programming paradigm that takes a more mathematical
    approach, in that it sees a functional call as a mathematical computation and
    thereby avoids changing states or dealing with mutable data.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数式编程** 是一种采用更数学化方法的编程范式，它将函数调用视为数学计算，从而避免更改状态或处理可变数据。'
- en: So, in short, our Wikipedia definition means we have a functional programming
    approach to values that might arrive at any point in time. That doesn't really
    mean much, but hopefully things will have been cleared up a bit by the end of
    this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们的维基百科定义意味着我们对可能在任何时间到达的值采取了一种函数式编程方法。这并不意味着太多，但希望在本章结束时事情会有所明朗。
- en: 'In this chapter, we will learn about:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Asynchronous data streams
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步数据流
- en: How these streams can be manipulated
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何操作这些流
- en: Recursion
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归
- en: '"To understand the word recursion see the word recursion."'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: “要理解递归这个词，请参见递归这个词。”
- en: 'This is a standing joke at most engineering schools and it explains what it
    is in a very short way. Recursion is a mathematical concept. Let''s explain it
    a bit more. The official definition says the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这在大多数工程学校都是一个笑话，并且以一种非常简短的方式解释了这是什么。递归是一个数学概念。让我们稍微解释一下。官方定义如下：
- en: Recursion is the process a procedure goes through when one of the steps of the
    procedure involves invoking the procedure itself. A procedure that goes through
    recursion is said to be 'recursive'.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当过程的一个步骤涉及到调用过程本身时，递归是过程通过的过程。进行递归的过程被称为“递归的”。
- en: 'Ok, what does that mean in human speak? It says that at some point in running
    our function, we will call ourselves. This means we have a function that looks
    something like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那用人话怎么说？这意味着在运行我们的函数的某个时刻，我们会调用自己。这意味着我们有一个看起来像这样的函数：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can see that the function `something()` at some point in its body calls
    itself. A recursive function should abide to the following rules:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到函数`something()` 在其体内的某个时刻调用了自身。递归函数应该遵守以下规则：
- en: Should call itself
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该调用自身
- en: Should eventually meet an exit condition
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终应该满足退出条件
- en: 'If a recursive function doesn''t have an exit condition, we will run out of
    memory as the function will call itself for all eternity. There are certain types
    of problems that are more suitable than others to apply recursive programming
    to. Examples of these are:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果递归函数没有退出条件，我们将耗尽内存，因为函数将永远调用自身。有某些类型的问题比其他更适合应用递归编程。这些类型的问题的例子有：
- en: Traversing trees
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历树结构
- en: Compiling code
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译代码
- en: Writing algorithms for compression
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为压缩编写算法
- en: Sort lists
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对列表进行排序
- en: 'There are many more examples, but it''s important to remember that, although
    it''s a great tool, it shouldn''t be used everywhere. Let''s look at an example
    where recursion really shines. Our example is a linked list. A linked list consists
    of nodes that know about the node they are connected to. The code for the `Node`
    structure looks like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他例子，但重要的是要记住，尽管递归是一个很好的工具，但不应该随处使用。让我们看一个递归真正闪耀的例子。我们的例子是一个链接列表。链接列表由了解他们连接到的节点的节点组成。`Node`结构的代码如下：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using such a structure as a `Node`, we can construct a linked list consisting
    of several linked nodes. We can connect a set of node instances in the following
    way:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Node`这样的结构，我们可以构建一个由几个链接节点组成的链表。我们可以以以下方式连接一组节点实例：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A graphical representation of the preceding code would be the following diagram.
    Here, we can clearly see what our nodes consist of and how they are connected:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的图形表示将如下图所示。在这里，我们可以清楚地看到我们的节点由什么组成以及它们如何连接：
- en: '![](img/f652d7d8-c911-4829-89a2-05694b6a39b1.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f652d7d8-c911-4829-89a2-05694b6a39b1.png)'
- en: 'Here, we have a linked list where we have three connected node instances. The
    head node is not connected to the node to the left. The second node however is
    connected to the first node and the first node is connected to the head node.
    The following type of operations on a list might be interesting to do:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个链表，其中有三个相连的节点实例。头节点与左侧节点不相连。然而第二个节点连接到第一个节点，而第一个节点连接到头节点。对列表进行以下类型的操作可能会很有趣：
- en: Find the head node, given any node in the list
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定列表中的任意节点，找到头节点
- en: Insert a node at a given point in the list
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表中的特定位置插入一个节点
- en: Remove a node from a given point in the list
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中的给定位置移除一个节点
- en: 'Let''s have a look at how we can solve the first bullet point. Firstly, we
    will use an imperative approach and thereafter we will use a recursive approach
    to see how they differ. More importantly, let''s discuss why the recursive approach
    might be preferred:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何解决第一个要点。首先，我们将使用命令式方法，然后我们将使用递归方法来看看它们如何不同。更重要的是，让我们讨论为什么递归方法可能更受欢迎：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we can see here, we are using a `while` loop to traverse through the list
    until we find the node instance whose `left` property is null. Now, let''s show
    the recursive approach:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里所见，我们使用`while`循环来遍历列表，直到找到其`left`属性为null的节点实例。现在，让我们展示递归方法：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, we check whether `startNode.left` is null. If that is
    the case, we have reached our exit condition. If we haven't reached the exit condition
    yet, we keep on calling ourselves.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们检查`startNode.left`是否为null。如果是这种情况，我们已经到达了我们的退出条件。如果我们尚未达到退出条件，我们继续调用自己。
- en: 'Ok, so we have an imperative approach and a recursive approach. Why is the
    latter so much better? Well, with the recursive approach, we start off with a
    long list and we make the list shorter every time we call ourselves: a bit of
    a *divide and conquer* approach. One thing that clearly stands out with the recursive
    approach is that we defer execution by saying, no, our exit condition isn''t met
    yet, keep processing. Keep processing means we call ourselves as we do in our `if` clause.
    Is the point of recursive programming that we get fewer lines of code? Well, that
    could be the result, but more importantly: it changes our mindset toward how we
    go about solving problems. In imperative programming, we have a *let''s solve
    the problem from top to bottom mindset*, whereas in recursive programming, our
    mindset is more, define when we are done and slice down the problem to make it
    easier to deal with. In the preceding case, we discarded the part of our linked
    list that wasn''t interesting anymore.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们有一个命令式方法和一个递归方法。为什么后者更好？嗯，使用递归方法，我们从一个长列表开始，每次调用自己的时候都使列表变短：有点*分而治之*的方法。递归方法显著突出的一点是，我们通过说不，我们的退出条件还没有满足，继续处理。继续处理意味着我们像在我们的`if`子句中那样调用自己。递归编程的要点是我们能减少代码行数吗？嗯，这可能是结果，但更重要的是：它改变了我们解决问题的思维方式。在命令式编程中，我们有一种*从上到下解决问题*的思维方式，而在递归编程中，我们的思维方式更多地是定义我们何时完成并将问题分解为更容易处理的部分。在上述情况下，我们舍弃了不再感兴趣的部分链表。
- en: No more loops
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不再使用循环
- en: 'One of the more significant changes when starting to code in a more functional
    way is that we get rid of `for` loops. Now that we know about recursion, we can
    just use that instead. Let''s have look at a simple imperative piece of code that
    prints an array:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当开始以更功能化的方式编码时，其中一个更显著的变化是我们摆脱了`for`循环。现在我们已经了解了递归，我们可以使用它代替。让我们看一个简单的命令式代码片段，用于打印一个数组：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The corresponding code using recursion looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用递归的相应代码如下：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see, our imperative code is still there in spirit. We still start
    at `0`. Moreover, we keep going until we come to the last position of our array.
    Once we hit our break condition, we exit the method.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们的命令式代码仍在那里。我们依然从`0`开始。此外，我们一直持续到我们到达数组的最后位置。一旦我们达到我们的中断条件，我们就退出方法。
- en: Reoccurring pattern
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复模式
- en: 'We haven''t really sold recursion as a concept at this point. We kind of get
    it, but are probably not convinced why good old `while` or `for` loops can''t
    be used in its place. Recursion shines when it solves problems that look like
    a reoccurring pattern. An example of that is a tree. A tree has some similar concepts
    to it such as consisting of nodes. A node without children connected to it is
    called a leaf. A node with children but that has no connection to an upward node
    is called a root node. Let''s illustrate this with a diagram:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有完全说明递归的概念。我们可能有点理解，但可能还不确定为什么不能使用老式的`while`或`for`循环来代替。递归在解决看起来像重复模式的问题时才会显现。一个例子是树。树有一些类似的概念，例如由节点组成。一个没有子节点连接的节点称为叶子。具有子节点但与上游节点没有连接的节点称为根节点。让我们用图示说明这一点：
- en: '![](img/15dea50b-92d5-4552-a346-f62c97b2c3dd.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15dea50b-92d5-4552-a346-f62c97b2c3dd.png)'
- en: 'There are a few interesting operations that we would want to carry out on a
    tree:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些我们想要在树上进行的有趣操作：
- en: Summarise the node values
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结节点值
- en: Count the number of nodes
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算节点数
- en: Calculate the width
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算宽度
- en: Calculate the depth
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算深度
- en: 'To attempt to solve that, we need to think about how to store a tree as a data
    structure. The most common way of modeling it is by creating a representation
    of a node as having a value, and a `left` property and a `right` property, then
    both those properties point to nodes in turn. Therefore, the code for said Node
    class might look like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试解决这个问题，我们需要考虑如何将树以数据结构的形式存储。最常见的建模方式是创建一个表示节点具有值、`left`属性和`right`属性的表示方法，然后这两个属性分别指向节点。因此，上述Node类的代码可能如下：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next step is thinking how to create the tree itself. This code shows how
    we can create a tree with a root node and two children, and how to bind these
    together:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是考虑如何创建树本身。此代码展示了我们如何创建一个具有根节点和两个子节点的树，以及如何将它们绑定在一起：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Worth highlighting is how the instances `left` and `right` do not have children.
    We can see that because we set their values to `null` on creation. Our root node,
    on the other hand, has  the object instances `left` and `right` as children.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 值得强调的是实例`left`和`right`没有子节点。这是因为我们在创建时将它们的值设置为`null`。另一方面，我们的根节点有`left`和`right`对象实例作为子节点。
- en: Summarise
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Thereafter, we need to think about how to summarise the nodes. Just looking
    at it, it looks like we should summarise the top node and its two children. So,
    a code implementation would start off like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要考虑如何总结节点。看着它，似乎我们应该总结顶部节点及其两个子节点。因此，代码实现将开始如下：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'What happens if our tree grows and suddenly looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的树增长并突然变成这样时会发生什么：
- en: '![](img/55827453-fc7c-48d9-adec-c64752c69d31.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/55827453-fc7c-48d9-adec-c64752c69d31.png)'
- en: 'Let''s add to the preceding code so it looks like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加到前面的代码，使其看起来像这样：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is technically working code, but it can be improved. What we should see
    at this point, looking at the tree, are reoccurring patterns in the tree. We have
    the following triangles:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这在技术上是可工作的代码，但还可以改善。在这一点上，从树的角度看，我们应该看到树中的重复模式。我们有以下三角形：
- en: '![](img/2dca4bd2-7346-45d3-9a0f-22b956b7e5b4.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dca4bd2-7346-45d3-9a0f-22b956b7e5b4.png)'
- en: 'One triangle is made up of **2,** **3**, **5**, another one is made up of **3**,
    **1**, **2**, and the last one is made up of **5**, **4**, **2**. Every triangle
    computes its sum by taking the node itself, plus its left child and its right
    child. Recursion is all about this: discovering a reoccurring pattern and codifying
    it. We can now implement our `summarise()` function with recursion, like so:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个三角形由**2**，**3**，**5**组成，另一个由**3**，**1**，**2**组成，最后一个由**5**，**4**，**2**组成。每个三角形通过取节点本身及其左子节点和右子节点来计算其总和。递归就是这样的：发现重复模式并对其进行编码。现在我们可以使用递归来实现我们的`summarise()`函数，如下所示：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'What we are doing here is expressing our reoccurring pattern as *node + left
    node + right node*. When we call `summarise(node.left)` we simply run through `summarise()` again
    for that node. The preceding implementation is short and elegant, and is able
    to traverse the entire tree. Recursion is truly elegant once you find that your
    problem can be seen as a repeating pattern. The full code looks like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是将我们的重复模式表示为*节点 + 左节点 + 右节点*。当我们调用`summarise(node.left)`时，我们简单地再次运行`summarise()`以获得该节点。前面的实现简短而优雅，并能遍历整个树。一旦你发现问题可以看作是一个重复模式时，递归真是优雅。完整的代码看起来像这样：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Count
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计数
- en: 'Implementing a function that counts all the nodes in the trees is quite trivial
    now that we are beginning to grasp the nature of recursion. We can reuse our summary
    function from before and simply count every non-null node as `1` and null as `0`.
    So, we simply take the existing summary function and modify it to this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实现一个用于计算树中所有节点的函数变得非常简单，因为我们开始理解递归的本质。我们可以重新使用以前的总结函数，并将每个非空节点简单地计为`1`，空节点计为`0`。因此，我们可以简单地修改现有的总结函数如下：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code ensures we traverse each and every node successfully. Our
    exit condition happens when we reach null. That is, we are trying to go from a
    node to one of its non-existing children.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码确保我们成功遍历每个节点。我们的退出条件是当我们达到null。也就是说，我们正在从一个节点尝试去到其不存在的子节点之一。
- en: Width
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宽度
- en: 'To create a width function, we first need to define what we mean by width.
    Let''s have a look at our tree again:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个宽度函数，我们首先需要定义宽度是什么意思。让我们再次看看我们的树：
- en: '![](img/037af05f-c033-4f06-b319-13b1ccabd7ba.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/037af05f-c033-4f06-b319-13b1ccabd7ba.png)'
- en: 'This tree has a width of **4**. How is that? For every step down in the tree,
    our nodes expand one step to the left and one step to the right. This means that
    to calculate the width correctly, we need to traverse the edges of our tree. Every
    time we have to traverse a node to the left or to the right, we increment the
    width. What we are interested in doing from a calculation standpoint is to traverse
    the tree like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这棵树的宽度是**4**。为什么呢？对于树中每走一步，我们的节点向左和向右各扩展一步。这意味着为了正确计算宽度，我们需要遍历树的边缘。每当我们需要遍历一个节点向左或向右时，我们就增加宽度。从计算的角度来看，我们感兴趣的是这样遍历这棵树：
- en: '![](img/b6f53eb4-fe4a-4426-bd82-1d109f03ff20.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6f53eb4-fe4a-4426-bd82-1d109f03ff20.png)'
- en: 'The code should therefore reflect this fact. We can implement this like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，代码应反映这一事实。我们可以这样实现：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note especially how, in the `calcWidth()` function, we call `calc()` with `node.left` and `node.right`,
    respectively, as arguments. We also add a `left` and `right` argument which, in
    the method `calc()`, means that we will keep going in that direction. Our exit
    condition is when we eventually hit null.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意，在`calcWidth()`函数中，我们分别用`node.left`和`node.right`作为参数调用`calc()`。我们还添加了`left`和`right`参数，这在`calc()`方法中意味着我们将沿着那个方向继续前进。我们的退出条件是最终碰到null。
- en: Asynchronous data streams
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步数据流
- en: 'An asynchronous data stream is a stream of data where values are emitted, one
    after another, with a delay between them. The word asynchronous means that the
    data emitted can appear anywhere in time, after one second or even after two minutes,
    for example. A way to model asynchronous streams is to place the emitted values
    on a time axis, like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 异步数据流是一种数据流，在延迟后一个接着一个地发出值。异步一词意味着发出的数据可能在任何时候出现，可能在一秒后或甚至在两分钟后出现。对于模拟异步流的一种方法是在时间轴上放置发出的值，就像这样：
- en: '![](img/1a0a21dc-1d98-4f8d-a994-e90bdcf480e2.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a0a21dc-1d98-4f8d-a994-e90bdcf480e2.png)'
- en: 'There are a lot of things that can be considered asynchronous. One such thing
    is fetching data through AJAX. When the data arrives depends on a number of factors,
    such as:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情可能被视为异步。其中一个是通过 AJAX 获取数据。数据到达的时间取决于许多因素，比如：
- en: The speed of your connection
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的连接速度
- en: The responsiveness of the backend API
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端 API 的响应速度
- en: The size of the data, and many more factors.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据的大小，以及更多的因素。
- en: The point is the data isn't arriving right at this very second.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点是数据并非在这一刻就到达。
- en: 'Other things that can be considered asynchronous are user initiated events,
    such as scrolling or mouse clicks. These are events that can happen at any point
    in time, depending on the user''s interaction. As such, we can consider these
    UI events as a continuous stream of data on a time axis. The following diagram
    depicts a stream of data representing a user clicking several times. Each click
    leads to a click event, **c**, which we place on a time axis:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可能被视为异步的事物包括用户发起的事件，比如滚动或鼠标点击。这些是可以在任何时间发生的事件，取决于用户的交互。因此，我们可以将这些用户界面事件视为时间轴上的连续数据流。以下图表描述了代表用户多次点击的数据流。每次点击会触发一个点击事件**c**，其在时间轴上的位置如下所示：
- en: '![](img/834c40dd-9c02-4f1b-85de-68436e9ffe17.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/834c40dd-9c02-4f1b-85de-68436e9ffe17.png)'
- en: 'At first glance, our diagram depicts four click events. Taking a closer look,
    we see that the click events seem grouped. The preceding diagram contains two
    pieces of information:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，我们的图表显示了四次点击事件。仔细观察，我们可以看到这些点击事件似乎被分组了。上面的图表包含了两条信息：
- en: That a number of click events have occurred
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已发生多次点击事件
- en: That the click events have occurred with a certain delay in between events
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击事件之间存在一定的延迟
- en: Here, we can see that the two first clicks seem to happen very close together
    in time; when two events happen very close in time, this will be interpreted as
    a double-click. Therefore, our image above thus tells us about the events that
    occurred; it also tells us when and how often they occurred. Looking at the previous
    diagram, it is quite easy to distinguish between a single-click and a double-click.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到前两次点击事件发生的时间非常接近；当两个事件发生的时间非常接近时，这将被解释为双击。因此，上面的图告诉我们发生的事件；它还告诉我们发生的时间和频率。通过查看前面的图表，很容易区分单击和双击。
- en: We can assign different actions to each click behavior. A double-click might
    mean that we want to zoom-in, whereas a single-click might mean we want to select
    something; exactly what is up to the application you are writing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每种点击行为分配不同的动作。双击可能意味着我们想要放大，而单击可能意味着我们想要选择某些内容；确切的行为取决于您正在编写的应用程序。
- en: 'A third example is that of input. What if we have a situation where the user
    is typing and stops typing after a while? After a certain amount of time has passed,
    the user expects the UI to react. This is the case with a search field. In that
    case, the user might enter something in a search field and press a search button
    when done. Another way to model that situation in a UI is to just provide a search
    field and wait for the user to stop typing as a sign of when to start searching
    for what the user wants. The final example is known as **autocomplete** behavior.
    It can be modeled in the following way:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个例子是输入。如果我们遇到一种情况，用户正在输入并在一段时间后停止了输入呢？在一定时间过去后，用户期望UI有所反应。这就是搜索字段的情况。在这种情况下，用户可能会在搜索字段中输入内容，并且在完成后按下搜索按钮。在UI中模拟这种情况的另一种方法是仅提供一个搜索字段，并等待用户停止输入，作为何时开始搜索用户想要的内容的信号。最后的例子被称为**自动完成**行为。可以以以下方式对其进行模拟：
- en: '![](img/7aa371c4-cb52-409d-8c11-fbc31f79ad3c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7aa371c4-cb52-409d-8c11-fbc31f79ad3c.png)'
- en: The first three characters entered seem to belong to the same search query,
    whereas the fourth character entered occurs a lot later and probably belongs to
    another query.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的前三个字符似乎属于同一个搜索查询，而输入的第四个字符则出现得晚得多，可能属于另一个查询。
- en: The point of this section has been to highlight that different things lend themselves
    to being modeled as streams, and that the time axis and the placement of the emitted
    values on it can come to mean something.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的重点在于突出不同事物适合被建模为流，并且时间轴以及发出值的放置在时间轴上的意义。
- en: Comparing lists to async streams – preparing for RxJS
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将列表与异步流进行比较 - 为使用 RxJS 做准备
- en: We have discussed so far how we can model asynchronous events as a continuous
    stream of data on a time axis, or stream modeling. Events can be AJAX data, mouse
    clicks, or some other type of event. Modeling things this way makes for an interesting
    perspective on things but, looking at a double-click situation for example, doesn't
    mean much unless we are able to dig out the data. There might be another case
    where there is data that we need to filter out. What we are discussing here is
    how to manipulate streams. Without that ability, stream modeling itself has no
    practical value.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了如何将异步事件建模为时间轴上的连续数据流，或者说是流建模。事件可以是 AJAX 数据，鼠标点击，或其他类型的事件。通过这种方式对事物进行建模，会产生一种有趣的视角，但是，例如，仅仅看双击的情况，并不能让我们深入了解这个数据。还有另一种情况，我们需要过滤掉一些数据。我们在这里讨论的是如何操作数据流。如果没有这个能力，流建模本身就没有实际价值。
- en: 'There are different ways to manipulate data: sometimes we want to change the
    data emitted to some other data and sometimes we might want to change how often
    the data is being emitted to a listener. Sometimes, we want our stream of data
    to become a totally different stream. We will try to model the following situations:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方法来操作数据：有时我们想要将发出的数据更改为其他数据，有时我们可能想更改将数据发送给监听器的频率。有时，我们希望我们的数据流变成完全不同的流。我们将尝试模拟以下情况：
- en: '**Projection**: Changing the data of the value being emitted'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投影**：改变正在发出的值的数据'
- en: '**Filtering**: Changing what gets emitted'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤**：改变发出的内容'
- en: Combining the functional programming paradigm with streams
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将函数式编程范式与流相结合
- en: This chapter has covered functional programming and asynchronous data streams.
    Working with RxJS doesn't require a deep understanding of functional programming,
    but you do need to understand what declarative means, in order to focus on the
    right things. Your focus should be on what you want done, not how you want it
    done. RxJS, as a library, will take care of the how.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了函数式编程和异步数据流。使用RxJS并不需要对函数式编程有深入的理解，但是你需要理解声明式的意思，以期聚焦在正确的事情上。你的重点应该是要做什么，而不是如何做。作为一个库，RxJS会负责如何实现需要的功能。
- en: These might seem like two different topics. Combining the two, however, gives
    us the ability to manipulate streams. A stream can be seen as a list of data,
    where the data is available at a certain point in time. If we start treating our
    streams as lists, especially immutable lists, then there are operations that go
    with lists that manipulate lists by applying operators to them. The result of
    the manipulation is a new list, not a mutated list. So let's start applying our
    list philosophy and its operators to the following situations.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个可能看起来像是两个不同的主题。但是，将它们结合起来，我们就能够操纵流了。流可以被看作是一系列数据的列表，其中数据在某个时间点可用。如果我们开始将我们的流视为列表，特别是不可变的列表，那么就会有一些随列表一起的操作来通过对其应用操作符来操纵列表。操纵的结果是一个新的列表，而不是一个变异的列表。因此，让我们开始将我们的列表哲学及其操作符应用到以下情况中。
- en: Projection
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投影
- en: '![](img/fd4ecfc2-02b0-436b-946e-0e42628f3d38.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd4ecfc2-02b0-436b-946e-0e42628f3d38.png)'
- en: 'Here, we can see that our stream is emitting the values **1**, **2**, **3**,
    and **4**, and then a manipulation happens that changes every value by incrementing
    it by one. This is quite a simple situation. If we consider this as a list, we
    can see that what we do here is simply a projection, which we would code like
    this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们的流正在发出值 **1**、**2**、**3** 和 **4**，然后进行了一次变换，将每个值增加了一。这是一个相当简单的情况。如果我们将其视为一个列表，我们可以看到这里所做的只是一个简单的投影，我们会将其编码为：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Filtering
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤
- en: 'There might be some items in a list, as well as in a stream, that you do not
    want. What you do to fix that is to create a filter that filters out the unwanted
    data. Modeling our initial array, the manipulation, and the resulting array, we
    get the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中可能存在一些项，以及流中可能存在一些你不想要的项。为了解决这个问题，你需要创建一个过滤器来过滤掉不想要的数据。模拟我们初始的数组，经过处理和得到的数组，我们得到以下结果：
- en: '![](img/ce0ec1ee-e3f3-4327-879c-80d0a271abd2.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce0ec1ee-e3f3-4327-879c-80d0a271abd2.png)'
- en: 'In JavaScript, we can accomplish this by writing the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们可以通过编写以下代码来实现这一点：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Combining mindsets
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合心态
- en: So, what are we trying to say with this section. Clearly, we have shown examples
    of how to manipulate lists. Well, what we have done is shown how we can display
    items on an axis. In that sense, we can see how it is easy to think of asynchronous
    events and lists of values in the same way, as we are graphically picturing them
    in the same way. The question is, why do we want to do that? The reason is that
    this is the mindset the RxJS library wants you to have when you start manipulating
    and crafting streams.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们在这一节想要表达什么呢。显然，我们已经展示了如何操纵列表的例子。好吧，我们所做的是展示我们如何在轴上显示项。从这个意义上说，我们可以看到，以图形方式将异步事件和值列表想成一样的方式，这样思考起来是很容易的。问题是，为什么我们要这样做呢？原因是这是RxJS库希望你在开始操纵和构建流时拥有的心态。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has established that we can model asynchronous events as values
    on a time axis. We introduced the idea of comparing these streams to lists and
    thereby applying functional methods to them that would not change the lists themselves
    but merely create a new list. The benefit of applying the functional paradigm
    is that we can focus on *what* to achieve rather than *how* to achieve it, thereby
    having a declarative approach. We realize it's not easy to combine async and lists
    and create readable code from it. Fortunately, this is what the RxJS library does
    for us.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已经建立了我们可以将异步事件建模为时间轴上的值。我们介绍了将这些流与列表进行比较的想法，并因此对它们应用不会改变列表本身而只会创建一个新列表的函数方法。应用函数范式的好处是，我们可以专注于想要*实现*的内容，而不是如何实现它，从而采用了一种声明式方法。我们意识到要将异步和列表组合，从中创建可读的代码并不容易。幸运的是，这正是RxJS库为我们做的事情。
- en: It is this realization that prepares us for [Chapter 8](1cd60ce6-607e-40aa-a87b-84370191f92e.xhtml),
    *RxJS Advanced*, which will cover more operators, and some more advanced concepts.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这一认识让我们为[第8章](1cd60ce6-607e-40aa-a87b-84370191f92e.xhtml)做准备，*RxJS高级*，将涵盖更多的操作符和一些更高级的概念。
