- en: Chapter 12. Flux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took a look at the various tools in the React ecosystem
    that are useful in the whole lifetime of an application—development, testing,
    and production. We also saw how React improves the developer experience using
    developer tools. We learned about the various testing tools that can be used with
    React. To summarize it, we saw how to use build tools such as Webpack and Browserify
    and how they can be used with React.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to dive deep in Flux as an architecture. We have
    seen how problems arise during data sharing across components. We will see how
    we can overcome them by having a single point of data store. Next, we will check
    out how to use React to overcome this.
  prefs: []
  type: TYPE_NORMAL
- en: Dispatcher acts as a central hub to manage this data flow and communication
    and how Actions invoke them. Finally, we will we take a look at the complete data
    flow that takes place, while building our Social Media Tracker application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Flux architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dispatcher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flux implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of chapter, we will be able to start replacing parts of our application
    that have tight data coupling, with Flux We will be able to set up the necessary
    groundwork for Flux and easily start using the same in our React views.
  prefs: []
  type: TYPE_NORMAL
- en: Flux architecture and unidirectional flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Hey Mike and Shawn!" entered Carla, on a bright morning.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Hi Carla, how are you today?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Wonderful. The previous app that you build was nice, the clients liked it.
    They will soon add more features to it. Meanwhile, we have got another small app
    to build."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Oh, nice. What are we planning to build?" inquired Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We need to build a kind of social tracker. To start with, we show a user''s
    reddits, tweets, and so on. We will later extend it to display other information."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it," iterated Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Have a good day; I will leave it to you."'
  prefs: []
  type: TYPE_NORMAL
- en: '"So Shawn, what do you think about the new project?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"It should be exciting. Umm… can we explore Flux and use it in the app? We
    had discussed it when we were building the last app."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yeah, we can. This will be the perfect opportunity to see how Flux works.
    Before we start using it, let''s go through what Flux actually is."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Flux is a simple architecture for React to make use of unidirectional flow.
    We have discussed previously how unidirectional flow suits React. React follows
    the render-always model when there are any changes made to data. Data doesn''t
    go other way around, like in the case of two-way bindings."'
  prefs: []
  type: TYPE_NORMAL
- en: '"It''s not exactly the **Model-View-Controller** (**MVC**) way of working.
    It consists of Model (Stores), Actions and Dispatchers, and finally Views (React
    Views)."'
  prefs: []
  type: TYPE_NORMAL
- en: '"There is no module for complete Flux as a framework as it''s not meant to
    be. Facebook provides the Flux module, which consists of the **Dispatcher**. Other
    parts such as **View** and **Stores** can be done without much support. Let''s
    go over them one by one, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sure. I believe we can go over how they correlate and why exactly are they
    useful when an app starts to grow."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup."'
  prefs: []
  type: TYPE_NORMAL
- en: '"As you can see in the following image, the various components are tied together
    and function distinctly. Data flows in a single direction in a cycle."'
  prefs: []
  type: TYPE_NORMAL
- en: '"As I mentioned previously, a **Dispatcher** acts as the central hub. Whenever
    an event takes place from the View, such as a user clicks a button or an Ajax
    call is completed, an action from the Actions is called. The **Action** may also
    get called from the **Dispatcher**."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The Actions are simple constructs that deliver the payload to the **Dispatcher**,
    which identify what the **Action** is and other details from the action and data
    needed to update current state."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flux architecture and unidirectional flow](img/4730_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"The **Dispatcher** then propagates it to the stores. **Dispatcher** acts like
    a callback registry, where all stores register themselves. **Dispatcher** notifies
    and callbacks stores whenever some action takes place. Irrespective of the action,
    it is delivered to all the stores."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The **Dispatcher** is not doing any complex activities, it just forwards the
    payload to registered stores, and it doesn''t process any data."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The responsibility to perform logical and complex decisions and data changes
    is entrusted with the stores. This helps to make the point of data changes at
    a single place and avoid changes all around the application, which are harder
    to track."'
  prefs: []
  type: TYPE_NORMAL
- en: '"On receiving a callback from the **Dispatcher**, the **Store** decides whether
    it needs to perform any action or not, based on the **Action** type. Based on
    the callback, it can update the current store. It can also wait for other stores
    to be updated. After it is done with the changes, it goes ahead and notifies the
    view. This can be achieved in our simple Flux version by making use of an `EventEmitter`
    module which is available from the events module."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Similar to Actions, the Views register themselves to hear changes in stores.
    On some changes, an event is emitted by `EventEmitter`. Based on the event type,
    it will call a `View` method, which has registered to listen to an event."'
  prefs: []
  type: TYPE_NORMAL
- en: '"The **View** receiving the event can then update its own state, based on the
    current state of any stores that are available to it. The state update then triggers
    the **View** update."'
  prefs: []
  type: TYPE_NORMAL
- en: '"This process continues with a **View** event, resulting in calls to the **Actions**
    and **Dispatcher** and so forth."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Hope, this is somewhat clear now?" queried Mike.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Umm… yeah, let me wrap my head around it. We have actions to perform an **Action**,
    based on an event. It then notifies the **Dispatcher**, which then notifies any
    store registered to listen for the changes. The Stores then update themselves,
    based on the action type and notify the React Views to update themselves."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Correct! Let''s dive in the app right away. We will base our app from the
    official Flux example. It will be structured like this."'
  prefs: []
  type: TYPE_NORMAL
- en: '`js/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── actions`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── SocialActions.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── app.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── components`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── SocialTracker.react.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── constants`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── SocialConstants.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── dispatcher`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── AppDispatcher.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── stores`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│ └── SocialStore.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '`└── utils`'
  prefs: []
  type: TYPE_NORMAL
- en: '`└── someutil.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, as Carla mentioned, we need to show the user''s data from Twitter and
    Reddit. For Reddit, it''s available openly via API calls, as we will see shortly."'
  prefs: []
  type: TYPE_NORMAL
- en: '"For Twitter, we are going to need to set up some groundwork and create a Twitter
    app. We can create a new one on [https://apps.twitter.com/](https://apps.twitter.com/).
    I have already created one for our app."'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flux architecture and unidirectional flow](img/4730_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"We are then going to make use of the `twitter` module to access Twitter and
    fetch tweets from users. Let''s set up a `config.js` file to store the preceding
    access tokens that we have created, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '"These correspond to the relative keys and secrets that we created in our app.
    Next, we will create a client to access the data using the preceding credentials."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '"We are going to make use of this client in our express server application.
    As I said, for Reddit, we can hit Reddit API directly to access reddits. For Twitter,
    it will first hit our node `App` and return tweets to our React Components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Would you like to define this, Shawn?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Sure."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '"I defined a JSON endpoint here called `tweets.json`. It will call the `client.get()`
    method, which is a REST API wrapper to call Twitter API. We invoke the `statuses/user_timeline`
    API to fetch the user timeline for a user, which is passed to us from the request.'
  prefs: []
  type: TYPE_NORMAL
- en: On receiving the response, it will send this back to the React component calling
    it."
  prefs: []
  type: TYPE_NORMAL
- en: '"Looks good. Now, let''s start with the App. We will start by defining the
    Dispatcher."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '"We define our dispatcher by requiring it from `flux.Dispatcher`. We will then
    use this at various places."'
  prefs: []
  type: TYPE_NORMAL
- en: Flux actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Now we need to define the actions types that we are going to refer to as constants
    at various places, such as sending the type from Actions to store, and in our
    store, deciding what action type has been passed to store to take appropriate
    actions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are using the [https://github.com/STRML/keyMirror](https://github.com/STRML/keyMirror)
    package to create keys and values for the object based on the keys. This will
    convert into object similar to below."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '"This is handy when adding new keys to not repeat the same contents again."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We can now start using the action constants. They represent four actions that
    we are going to perform, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '`SYNC_TWEETS`: This fetches the tweets for a given user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SYNC_REDDITS`: This fetches the reddits for a give topic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILTER_BY_TWEETS`: This only displays tweets, instead of tweets and reddits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILTER_BY_REDDITS`: This only displays reddits, instead of tweets and reddits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Next, let''s define the actions that will be called from different places
    in our views."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s go through these actions, case-by-case:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are using fetch, which is similar to Ajax that we have used before,
    to fetch tweets from our own `tweets.json` API, where we are passing the username
    for which we need to get the tweets. We are making use of JSON utility methods
    here that we have defined as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '"They help us convert responses to JSON, or in case of failures, logs them:"'
  prefs: []
  type: TYPE_NORMAL
- en: After we receive a successful response from API, we call `SocialActions.syncTweets(json)`
    method, from the same module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '"Next, `syncTweets` accepts the JSON. Then, it wraps the JSON into an object
    payload to be sent to dispatcher. In this object, we are creating a tweets array
    out of the payload. We are also tagging each object to depict its type as tweet
    so that we can mix and match the tweets and reddit in same arrays and identity
    which object it represents: a tweet or reddit."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '"We use `Object.assign`, which merges two objects together. We use it from
    the `object-assign` package here."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Now, we notify the Dispatcher about the payload to be ultimately delivered
    to the stores follows"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '"Similarly, we have the `syncReddits` method, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '"This fetches the reddits from `https://www.reddit.com/r/${topic}.json`, for
    example [https://www.reddit.com/r/twitter.json](https://www.reddit.com/r/twitter.json).'
  prefs: []
  type: TYPE_NORMAL
- en: '"After fetching, it delivers the data to `SocialActions.syncReddits(json))`,
    which creates the payloads for the dispatcher, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"Note, how we are passing the type attribute for the actions here. This is
    to notify the stores what action to take when they receive the payload."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. It would be interesting to see how we proceed on the basis of this
    object."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. Next, we have two simple methods that relay the events to the stores,
    as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '"We are going to use these methods as `onClick` methods. On clicking the checkboxes,
    the value for the checkbox—either reddit or twitter—will be available in `event.target.checked`."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We wrap these in a simple object, tag them with the type of action call, and
    send the same to the Dispatcher. This way, we will know if we are going to display
    the tweets, reddit, or none."'
  prefs: []
  type: TYPE_NORMAL
- en: Flux stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Cool, it looks like now we are all set to create our store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup Shawn. We will start by defining the state object that we will keep on
    updating and using as a store."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '"We have also defined a `CHANGE_EVENT` constant that we use as an identifier
    to *listen* to events of the *change* type from the event emitter in our store."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We then define a method to update the states, creating a new one."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"This merges the new properties that need to be updated and merged into the
    existing state and updated the current state."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Cool, this looks somewhat similar to the `setState` React method," said Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. Now we are going to define our store that will update the current state."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we are defining our `SocialStore` by inheriting from `EventEmitter`.
    This gives it the capability to be used by the components to register to listen
    on events, `CHANGE_EVENT` in our case. The `addChangeListener` and `removeChangeListener`
    methods take in methods that should be called on events and remove the listener,
    as follows:" `this.on(CHANGE_EVENT, callback);` and `this.removeListener(CHANGE_EVENT,
    callback);`'
  prefs: []
  type: TYPE_NORMAL
- en: '"Whenever we want to notify the listeners, we call."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, our views can get the current state from the store using following
    function:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, Shawn, let''s tie this all together with our Single Dispatcher, as
    follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '"Whenever we have `AppDispatcher.dispatch` being called by the payload, the
    preceding method is invoked."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s take a look at one of these actions."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '"What we are doing here is calling `updateState` to update the current state
    by providing it with the updated tweets and update the feed, based on the `mergeFeed`
    method."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Let''s take a look at it."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '"I have combined various operations here to be handled, based on whether `showTweets`,
    `showReddits` are selected."'
  prefs: []
  type: TYPE_NORMAL
- en: '"So, what this method does is that it accepts the tweets and reddit array data,
    as well as checks whether show reddits or show tweets is checked or not. We build
    the final feed based on these checked/unchecked fields into the `mergedFeed` array."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Then, we sort this array of both mixed up tweets and reddits data—`mergedFeed`,
    using `underscorejs` method, `sortBy`, and we sort the array on the basis of time
    fields on the two types of objects. In case of tweets, this field is the `created_at`
    field, and in case of reddit, it''s the `created_utc` field. We normalize the
    time in UTC timestamp for comparison."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Coming back to the sync tweets action, after updating the state, we call the
    emitter method on store:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '"This calls our emitter from the store to eventually deliver updates to the
    components."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Got it. I believe the next step is creating our Views."'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s right. We will split our view into three components—`Header`, `MainSection`,
    and `SocialTracker` container component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We start with the `Header`, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '"It''s a simple display component, containing the header."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ah, Mike. I notice you are using the react-bootstrap module. That looks neat.
    Instead of defining it in plain elements and bootstrap properties, it helps us
    to wrap them in the React Components with properties."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yup. We are using the `Jumbotron` and `Row` here. This Row will get wrapped
    in a bootstrap Grid component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Next, we are going to get our `MainSection` component set up, this will show
    the inputs to get the usernames for Twitter and Reddit topic, as well as check
    for them:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '"Now the component is doing a couple of things here. First, it''s setting the
    state on the basis of the store."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '"It is also tracking two different fields—Twitter and Reddit—username information.
    We bind these values based on inputs from the fields, as we have seen before:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '"And then use this change handler on the input fields, like so."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '"Next, we have our `componentDidMount` and `componentWillUnmount` functions
    register and de-register them to listen to the events emitted from the `SocialStore`:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '"Here, we register the `_onChange` method to be called whenever the changes
    occur in the `SocialStore`. The `_onChange` method, in turn, updates the current
    state of the component, based on state of the store, as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '"Next, we specify the `SocialAction` methods to be called for events such as
    checking/unchecking Twitter/Reddit display and calling to sync the tweets and
    reddits. On calling out the syncing data, `syncFeed` gets called, which calls
    the related sync methods from `SocialActions`, passing in the current Twitter
    name and Reddit topic."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '"Finally, we are going to wrap everything up with the `SocialTracker` component,
    as follows:"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '"We have the same set up that we used previously to listen to the store updates
    and update the current state of the component."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Nice, I see, all that''s left is looping over the feed and displaying them,"
    continued Shawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I see that we are displaying the feed in groups of three in a row and applying
    individual styles, based on whether its a tweet and so on. To divide them in groups,
    we seem to be using `ArrayUtil`."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '"Yup, that''s right. With this, it looks like we are all set. We will finally
    display the component as usual."'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '"Let''s take a look at how it looks, shall we?"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flux stores](img/4730_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Here''s how it looks, without tweets:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flux stores](img/4730_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"Here''s how it looks, when changing the twitter user:"'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flux stores](img/4730_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"This looks awesome, Mike!"'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We did a deep dive in Flux as an architecture. We saw Dispatcher act as a central
    hub to transmit our data and Actions to process them. We saw how the main responsibility
    to manipulate the state and update itself was delegated to the stores themselves.
    Finally, we saw how they were tied up together and made it easy to be used in
    views and share stores across the components.
  prefs: []
  type: TYPE_NORMAL
