["```js\n$ npm install karma -g\n\n```", "```js\n$ karma --version\n\n```", "```js\n$ karma init\n\n```", "```js\n            frameworks: ['jasmine'], \n\n    ```", "```js\n            files: [ \n                'test/unit/**/*.js' \n            ], \n\n    ```", "```js\n            browsers: ['Chrome'], \n\n    ```", "```js\n            $ karma start\n\n    ```", "```js\n            $ INFO [karma]: Karma v0.12.16 server started at \n            http://localhost:9876/\n\n    ```", "```js\n            $ WARN [watcher]: Pattern \"test/unit/**/*.js\" does not\n            match any file.\n\n    ```", "```js\n            $ Chrome 35.0.1916 (Windows 7): Executed 0 of 0 ERROR\n            (0.016 secs / 0 secs)\n\n    ```", "```js\n            $ npm install karma-jasmine -g\n            $ npm install karma-chrome-launcher -g\n\n    ```", "```js\n                        $ npm install karma\n\n        ```", "```js\n                        $ ./node_modules/karma/bin/karma --version\n\n        ```", "```js\n            files: [ \n                   'test/unit/**/*.js' \n               ], \n\n    ```", "```js\n            describe('when testing karma', function (){ \n              it('should report a successful test', function (){ \n                expect(true).toBeTruthy(); \n                  }); \n            }); \n\n    ```", "```js\n$ INFO [watcher]: Added file \"./test/unit/firstTest.js\"\n\n```", "```js\n$ Chrome 35.0.1916 (Windows 7): Executed 1 of 1 SUCCESS (0.02 secs \n    / 0.015 secs)\n\n```", "```js\n$ git clone https://github.com/angular/quickstart.git angular-\n    karma\n\n```", "```js\n$ cd angular-karma\n$ npm install\n\n```", "```js\n$ npm start\n\n```", "```js\n$ karma init\n\n```", "```js\nfiles: [ \n        // System.js for module loading \n      'node_modules/systemjs/dist/system.src.js', \n\n      // Polyfills \n      'node_modules/core-js/client/shim.js', \n      'node_modules/reflect-metadata/Reflect.js', \n\n      // zone.js \n      'node_modules/zone.js/dist/zone.js', \n      'node_modules/zone.js/dist/long-stack-trace-zone.js', \n      'node_modules/zone.js/dist/proxy.js', \n      'node_modules/zone.js/dist/sync-test.js', \n      'node_modules/zone.js/dist/jasmine-patch.js', \n      'node_modules/zone.js/dist/async-test.js', \n      'node_modules/zone.js/dist/fake-async-test.js', \n\n// RxJs \n      { pattern: 'node_modules/rxjs/**/*.js', included: false,\n      watched: false },      { pattern: 'node_modules/rxjs\n      /**/*.js.map', included: false,        watched: false }, \n\n// Angular itself \n      { pattern: 'node_modules/@angular/**/*.js', included: \n      false,        watched: false }, \n\n{ pattern: 'systemjs.config.js', included: false, watched: false }, \n      { pattern: 'systemjs.config.extras.js', included: false,   \n      watched: false }, \n      'karma-test-shim.js', \n\n          {pattern: 'app/**/*.js', included: false, watched: true} \n    ] \n\n```", "```js\n            plugins: [ \n    'karma-jasmine', \n    'karma-chrome-launcher' \n       ] \n\n    ```", "```js\n            frameworks: ['jasmine'], \n\n    ```", "```js\n            browsers: ['Chrome', 'PhantomJS'] \n\n    ```", "```js\nmodule.exports = function(config) { \n\n  config.set({ \n    basePath: '', \n    frameworks: ['jasmine'], \n    plugins: [ \n      require('karma-jasmine'), \n      require('karma-chrome-launcher') \n    ], \n\n    files: [ \n      // System.js for module loading \n      'node_modules/systemjs/dist/system.src.js', \n\n      // Polyfills \n      'node_modules/core-js/client/shim.js', \n      'node_modules/reflect-metadata/Reflect.js', \n\n      // zone.js \n      'node_modules/zone.js/dist/zone.js', \n      'node_modules/zone.js/dist/long-stack-trace-zone.js', \n      'node_modules/zone.js/dist/proxy.js', \n      'node_modules/zone.js/dist/sync-test.js', \n      'node_modules/zone.js/dist/jasmine-patch.js', \n      'node_modules/zone.js/dist/async-test.js', \n      'node_modules/zone.js/dist/fake-async-test.js', \n\n      // RxJs \n      { pattern: 'node_modules/rxjs/**/*.js', included: false,\n      watched: false },     \n      { pattern: 'node_modules/rxjs/**/*.js.map', included: \n      false,        watched: false }, \n\n      // Paths loaded via module imports: \n      // Angular itself \n      { pattern: 'node_modules/@angular/**/*.js', included: \n      false,        watched: false },\n      { pattern: 'node_modules/@angular/**/*.js.map', included: \n      false, watched: false },\n      { pattern: 'systemjs.config.js', included: false, \n      watched:        false },\n      { pattern: 'systemjs.config.extras.js', included: false,\n      watched: false },\n\n      'karma-test-shim.js', \n\n      { pattern: 'app/**/*.js', included: false, watched: true } \n    ], \n\n    port: 9876, \n    colors: true, \n    autoWatch: true, \n    browsers: ['Chrome'], \n    singleRun: false \n  }) \n}\n```", "```js\nError.stackTraceLimit = 0; // \"No stacktrace\"\" is usually best for app testing. \n\njasmine.DEFAULT_TIMEOUT_INTERVAL = 1000; \n\nvar builtPath = '/base/app/'; \n\n__karma__.loaded = function () { }; \n\nfunction isJsFile(path) { \n  return path.slice(-3) == '.js'; \n} \n\nfunction isSpecFile(path) { \n  return /\\.spec\\.(.*\\.)?js$/.test(path); \n} \n\nfunction isBuiltFile(path) { \n  return isJsFile(path) && (path.substr(0, builtPath.length) == \n  builtPath); \n} \n\nvar allSpecFiles = Object.keys(window.__karma__.files) \n  .filter(isSpecFile) \n  .filter(isBuiltFile); \n\nSystem.config({ \n  baseURL: 'base', \n  // Extend usual application package list with test folder \n  packages: { 'testing': { main: 'index.js', defaultExtension: 'js' \n  } }, \n\n  // Assume npm: is set in `paths` in systemjs.config \n  // Map the angular testing umd bundles \n  map: { \n    '@angular/core/testing':      \n'npm:@angular/core/bundles/core-testing.umd.js',    \n'@angular/common/testing':      \n'npm:@angular/common/bundles/common-testing.umd.js',    \n'@angular/compiler/testing':      \n'npm:@angular/compiler/bundles/compiler-testing.umd.js',    \n'@angular/platform-browser/testing':      \n'npm:@angular/platform-browser/bundles/     \nplatform-browser-testing.umd.js',    \n'@angular/platform-browser-dynamic/testing':      'npm:@angular/platform-browser-dynamic/bundles    \n /platform-browser-dynamic-testing.umd.js',    \n'@angular/http/testing':      \n'npm:@angular/http/bundles/http-testing.umd.js',    \n'@angular/router/testing':      \n'npm:@angular/router/bundles/router-testing.umd.js',    \n'@angular/forms/testing':      \n'npm:@angular/forms/bundles/forms-testing.umd.js', \n  }, \n}); \n\nSystem.import('systemjs.config.js') \n  .then(importSystemJsExtras) \n  .then(initTestBed) \n  .then(initTesting); \n\n/** Optional SystemJS configuration extras. Keep going w/o it */ \nfunction importSystemJsExtras(){ \n  return System.import('systemjs.config.extras.js') \n  .catch(function(reason) { \n    console.log( \n      'Warning: System.import could not load the optional        \"systemjs.config.extras.js\". Did you omit it by accident?        Continuing without it.' \n    ); \n    console.log(reason); \n  }); \n} \n\nfunction initTestBed(){ \n  return Promise.all([ \n    System.import('@angular/core/testing'), \n    System.import('@angular/platform-browser-dynamic/testing') \n  ]) \n\n  .then(function (providers) { \n    var coreTesting    = providers[0]; \n    var browserTesting = providers[1]; \n\n    coreTesting.TestBed.initTestEnvironment( \n      browserTesting.BrowserDynamicTestingModule, \n      browserTesting.platformBrowserDynamicTesting()); \n  }) \n} \n\n// Import all spec files and start karma \nfunction initTesting () { \n  return Promise.all( \n    allSpecFiles.map(function (moduleName) { \n      return System.import(moduleName); \n    }) \n  ) \n  .then(__karma__.start, __karma__.error); \n} \n\n```", "```js\n\"scripts\": { \n     \"test\": \"karma start karma.conf.js\" \n  } \n\n```", "```js\n$ npm test\n\n```", "```js\n$ npm install jasmine-core karma karma-chrome-launcher karma-\n    jasmine --save-dev\n\n```", "```js\n$ npm test\n\n```", "```js\n$ Chrome 39.0.2623 (Mac OS X 10.10.5): Executed 0 of 0 ERROR \n    (0.003 secs / 0 secs) \n\n```", "```js\ndescribe('Title of the test suite', () => { \n    beforeEach(() => { \n        // .... \n    }); \n\n    it('Title of the test spec', () => { \n        // .... \n    }); \n}); \n\n```", "```js\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing'; \n\nimport { AppComponent } from './app.component'; \n\nbeforeEach(async(() => { \n   TestBed.configureTestingModule({ \n      declarations: [ AppComponent ] \n    }) \n    .compileComponents(); \n  })); \n\nbeforeEach(() => { \n    fixture = TestBed.createComponent(AppComponent); \n    comp = fixture.componentInstance; \n}); \n... \n\n```", "```js\n// comp will hold the component object  \nlet comp: AppComponent; \nlet fixture: ComponentFixture<AppComponent>; \nbeforeEach(() => { \n    fixture = TestBed.createComponent(AppComponent); \n    comp = fixture.componentInstance; \n}); \n\n```", "```js\nit('Should define a list object', () => { \n        expect(com.items).toBeDefined(); \n    }); \n\n```", "```js\n//Second test \nit('Should have 3 items in list', () => { \n        expect(com.items.length).toBe(3); \n    }); \n\n//Third test \nit('List items should be as expected', () => { \n        expect(com.items).toEqual(['test','execute','refactor']); \n    }); \n\n```", "```js\n    $ npm start\n    $ npm test\n\n    ```", "```js\n            export class AppComponent { };\n    ```", "```js\n                       expect(com.items).toBeDefined();\n        ```", "```js\n                      export class AppComponent { \n                          items:Array<string>; \n                      }; \n\n        ```", "```js\n                    export class AppComponent { \n                        items:Array<string>; \n                        constructor() { \n                            this.items = ['test','execute','refactor']; \n                        } \n                    }; \n\n        ```", "```js\n            import {Component} from '@angular/core'; \n\n            @Component({ \n                // ...  \n            }) \n\n            export class AppComponent { \n                items:Array<string>; \n                constructor() { \n                    this.items = ['test','execute','refactor']; \n                } \n            }; \n\n    ```", "```js\ndescribe('Title of the test suite', () => { \n    let app:AppComponent; \n\n    beforeEach(() => { \n        // .... \n    }); \n\n    it('Title of the test spec', () => { \n        // .... \n    }); \n\n    describe('Testing add method', () => { \n\n    beforeEach(() => { \n        // .... \n    }); \n\n    it('Title of the test spec', () => { \n        // .... \n    }); \n   }); \n}); \n\n```", "```js\n            beforeEach(() => { \n                 com.add('new-item') \n            }); \n\n    ```", "```js\n            it('Should have 4 items in list', () => { \n                 expect(com.items.length).toBe(4); \n            }); \n            it('Should add a new item at the end of list', () => { \n                var lastIndexOfList = com.items.length - 1; \n                expect(com.items[lastIndexOfList]).toEqual('new-item'); \n            }); \n\n    ```", "```js\n    $ npm start\n    $ npm test\n\n    ```", "```js\n            app.add('new-item'); \n\n    ```", "```js\n            add() { \n                    this.items.push('new-item'); \n            }; \n\n    ```", "```js\nimport {Component} from '@angular/core'; \n\n@Component({ \n    selector: 'my-app', \n    template: `<h3>MY Items</h3><ul><li *ngFor=\"let item of items\">{{ \n    item }}</li></ul>` \n}) \n\nexport class AppComponent { \n    items:Array<string>; \n    constructor() { \n        this.items = ['test','execute','refactor']; \n    } \n    add() { \n        this.items.push('new-item'); \n    } \n}; \n\n```", "```js\n        add(item) { \n            this.items.push(item); \n        }; \n\n```", "```js\n$ Chrome 49.0.2623 (Mac OS X 10.10.5): Executed 5 of 5 SUCCESS\n    (0.016 secs / 0.002 secs)\n\n```", "```js\n            language: node_js \n            node_js: \n                -  \"4\" \n\n    ```", "```js\n            before_script: \n                -  git config - -global user.name jquerygeek  \n\n    ```", "```js\n        before_script: \n            -  export DISPLAY=:99.0 \n            - sh -e /etc/init.d/xvfb start  \n\n```", "```js\n            notifications: \n                email: false  \n\n    ```", "```js\n  'devDependencies': { \n      'karma': '~0.12' \n  }, \n\n  'scripts': { \n      'test': 'karma start  - -single-run - -browsers PhantomJS ' \n  } \n\n```", "```js\nkarma start - -browsers Firefox - -single-run \n\n```"]