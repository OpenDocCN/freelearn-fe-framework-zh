- en: Chapter 8. Testing Angular Applications
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第8章。测试 Angular 应用
- en: This chapter discusses testing Angular components and services using the Jasmine
    framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论使用**Jasmine**框架测试 Angular 组件和服务。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Jasmine
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Jasmine
- en: Testing Angular services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 Angular 服务
- en: Testing Angular components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 Angular 组件
- en: Introducing Jasmine
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Jasmine
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Jasmine is an open source framework that is used to test JavaScript code without
    any dependency on DOM. As Angular is loosely coupled, we can use the Jasmine framework
    to test Angular components, services, and so on. Independent of each other, the
    clean syntax of Jasmine enables you to write tests very easily.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine 是一个开源框架，用于在不依赖于 DOM 的情况下测试 JavaScript 代码。由于 Angular 是松散耦合的，我们可以使用 Jasmine
    框架来测试 Angular 组件、服务等。独立于彼此，Jasmine 的清晰语法使您能够轻松编写测试。
- en: 'A global function named describe is the starting point of the Jasmine function.
    This global function takes a function and two parameters of type string. The string
    parameter describes the tests, and the function will have the actual implementation
    of testing:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为describe的全局函数是**Jasmine**函数的起始点。这个全局函数接受一个函数和两个string类型的参数。字符串参数描述了测试，函数将有测试的实际实现：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The actual test methods are defined by a global function called theÂ `it` function,
    which takes two arguments. The first argument is the title of the test or spec,
    and the second argument is the function that tests the expectations by verifying
    the state of the code. Expectations are similar to assert in the Microsoft unit
    test framework. If any one of the defined expectations fails in the spec, it is
    called the failing spec. The following code illustrates the preceding statements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实际测试方法由名为`it`函数的全局函数定义，该函数接受两个参数。第一个参数是测试或规范的标题，第二个参数是通过验证代码状态来测试期望的函数。期望与 Microsoft
    单元测试框架中的断言类似。如果在规范中任何一个定义的期望失败，这被称为失败的规范。以下代码说明了前述声明：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The test or spec method will have one or more expect statements, as illustrated,
    that compare the actual value with the expected value using the matcher functions
    that are chained to the expect function; various default matcher functions are
    available:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法或规范方法将会有一个或多个expect语句，如下所示，通过链式连接到expect函数的匹配器函数来比较实际值和期望值；有各种默认的匹配器函数可供使用：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have only seen the basics of the Jasmine framework, and there are more features
    available. You can learn about them by visiting the official website atÂ [http://jasmine.github.io/](http://jasmine.github.io/).
    This introduction is enough for us to learn to test Angular services and components.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只看到了**Jasmine**框架的基础知识，还有更多的功能可以使用。你可以通过访问官方网站[http://jasmine.github.io/](http://jasmine.github.io/)了解更多信息。这个简介已经足够让我们学会如何测试
    Angular 服务和组件了。
- en: Testing Angular services
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 Angular 服务
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, create aÂ service `todo.service.ts` that constructs the list of `Todo`
    items in the constructor. The complete code of `todo.service.ts` is as shown:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`todo.service.ts`的服务，它在构造函数中构建`Todo`项目列表。`todo.service.ts`的完整代码如下所示：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have the service that interacts with the data source in place. Now, let's
    write tests using the Jasmine framework to test the `TodoService`. We will test
    two methods, namely `getPending()` and `getCompleted()`. Create a file named `todo.service.spec.ts`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经建立了与数据源交互的服务。现在，让我们使用 Jasmine 框架编写测试来测试`TodoService`。我们将测试`getPending()`和`getCompleted()`两种方法。创建一个名为`todo.service.spec.ts`的文件。
- en: 'Import the `TodoService` application-specific service, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`TodoService`应用特定的服务，如下所示：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Define the `describe` method: a global function that is the starting point
    of the Jasmine function that takes two parameters, a string that describes the
    tests and a function that has the actual implementation of testing:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`describe`方法：是 Jasmine 函数的起始点的全局函数，接受两个参数，一个描述测试的字符串和一个具有测试实际实现的函数：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `beforeEach`Â function will be executed before running each test method,
    and it serves an instance of `TodoService` for each test.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeEach`函数将在运行每个测试方法之前执行，并且为每个测试提供一个`TodoService`的实例。'
- en: 'Now, let''s define the `it` test methods, as demonstrated:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义`it`测试方法，示例如下：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we are verifying that the expectations of the length of the returned values
    of `getPending()` and `getCompleted()` match.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们验证`getPending()`和`getCompleted()`返回值的长度期望。
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have the spec or tests ready to run; let''s run them by executing the following
    commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已准备好要运行的测试用例或测试; 通过执行以下命令来运行它们：
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `npm run build:watch`Â command will build your application and transpile
    the TypeScript files into JavaScript. Then, the `karma start karma.config`Â command
    is executed to start the test runner for our application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run build:watch`命令将构建您的应用程序，并将TypeScript文件转译为JavaScript。然后，执行`karma start
    karma.config`命令启动我们应用程序的测试运行器。'
- en: Karma is a test runner that can be used to run tests for any JavaScript application.
    The `karma.config.js` file is a configuration file for karma that provides information
    about our application to karma in order for it to understand and test the application.
    The karma configuration file has details of the path of JavaScript libraries and
    frameworks that the application is consuming, and also, it provides details about
    the plugins used by karma.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Karma是一个测试运行器，可用于对任何JavaScript应用程序运行测试。`karma.config.js`文件是karma的配置文件，提供有关我们应用程序的信息，以便它能够了解并测试应用程序。karma配置文件包含应用程序消耗的JavaScript库和框架的路径详细信息，还提供karma所使用的插件的详细信息。
- en: 'Karma config file has the configuration details for basePath, frameworks, plugins,
    client, and custom launcher in our application. We have configured Jasmine as
    our test framework in karma, we have added the list of required modules under
    plugins to load when running the test. We also configured the client with `buildPaths`
    and `clearContext`. The `buildPaths` will have path details to look for the transpiled
    app JS and map files. The following is the complete karma configuration file for
    your reference:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Karma配置文件包含了应用程序中`basePath`，`frameworks`，`plugins`，`client`和自定义启动器的配置详细信息。我们已在karma中配置了Jasmine作为我们的测试框架，我们在运行测试时加载了所需模块的插件列表。我们还配置了具有`buildPaths`和`clearContext`的客户端。`buildPaths`将包含查找转译后应用程序JS和映射文件的路径详细信息。以下是供您参考的完整karma配置文件：
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The command, `karma start`, takes the karma config file path as argument and
    will start the karma test runner. The `npm run build` command is configured in
    `pretest` so that it will be executed before a test is run. It executes the `tsc
    -p src`Â command, a TypeScript compiler that transpiles the code in theÂ `src`
    folder. The following screenshot illustrates the command window that executes
    these commands as per the configuration in `package.json` under theÂ `scripts`
    item:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`karma start`会以karma配置文件路径为参数，并启动karma测试运行器。`npm run build`命令配置在`pretest`中，这样它将在运行测试之前执行。它执行`tsc
    -p src`命令，这是一个TypeScript编译器，用于转译`src`文件夹中的代码。以下屏幕截图说明了根据`package.json`中`scripts`项中的配置，在命令窗口中执行这些命令：
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Karma launches the application in a browser and runs all the tests in the specs.
    The `http-server` command will start the development server to host the `mytodo`Â Angular
    application. The result of the test execution is as shown:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Karma在浏览器中启动应用程序，并运行specs中的所有测试。`http-server`命令将启动开发服务器，以托管`mytodo` Angular应用程序。测试执行结果如下所示：
- en: '![](img/image_08_001.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_001.png)'
- en: The test results of TodoService
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: TodoService的测试结果
- en: Testing Angular components
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular组件测试
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'We have just seen how to test a service in Angular application. Now, let''s
    discuss testing an Angular component. Perform the following steps to create `AppComponent`
    for the application:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何在Angular应用程序中测试服务。现在，让我们讨论如何测试Angular组件。执行以下步骤来为应用程序创建`AppComponent`：
- en: Create a file named `app.component.ts`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`app.component.ts`的文件。
- en: 'Import modules such as `Component`, `TodoService`, and `Todo`Â that are necessary
    for the `AppComponent`, as shown:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的`Component`、`TodoService`和`Todo`等模块，用于`AppComponent`，如下所示：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define the `AppComponent` class, as demonstrated:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下所示，定义`AppComponent`类：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Decorate the `AppComponent` class by theÂ `@Component` attribute with the `selector`,
    `providers` and `templateUrl`Â metadata:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`@Component`属性装饰`AppComponent`类，具有`selector`，`providers`和`templateUrl`元数据：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Declare the `todos`, `todoService`, `newTodoText`, and `title`Â variables:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`todos`，`todoService`，`newTodoText`和`title`变量：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Define the constructor with `todoService` injected, as follows. Note that the
    constructor updates the `todos` with the `todos` returned from `todoService`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义构造函数，并注入`todoService`，如下所示。请注意，构造函数使用`todoService`返回的`todos`更新`todos`：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Introduce theÂ `addTodo()` function that calls the `add()` method of `TodoService`
    by passing the description of new `todo`, as illustrated:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入`addTodo()`函数，调用`TodoService`的`add()`方法，并传递新`todo`的描述，如下图所示：
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Introduce theÂ `remove()` function that calls the `remove()` method of `TodoService`
    by passing a `todo` object to remove, as shown:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入调用`TodoService`的`remove()`方法通过传递要移除的`todo`对象来移除该对象的`remove()`函数，如下所示：
- en: '[PRE21]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Introduce theÂ `removeCompleted()` function that calls the `removeCompleted()`
    method of `TodoService` to remove all the completed todo items:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入调用`TodoService`的`removeCompleted()`方法来删除所有已完成的待办事项的`removeCompleted()`函数：
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Introduce theÂ `toggleCompletion()` function that calls the `toggleCompletion()`
    method of `TodoService` that toggles the value of the completed status of a `todo`
    item:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入调用`TodoService`的`toggleCompletion()`方法来切换`todo`项的完成状态值的`toggleCompletion()`函数：
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have the `AppComponent` in place now. The template for this `AppComponent`
    is defined in a template file, `app.component.html`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了`AppComponent`。此`AppComponent`的模板定义在一个模板文件`app.component.html`中。
- en: Writing Specs for AppComponent
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写 AppComponent 的规范
- en: 'Let''s write specs using Jasmine to test `AppComponent`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Jasmine 来编写测试 `AppComponent` 的规范：
- en: Create a `app.component.spec.ts` file to write specs or tests for `AppComponent`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`app.component.spec.ts`文件来为`AppComponent`编写规范或测试。
- en: Import modules such as `async`, `ComponentFixture`, `TestBed`, `FormsModule`,
    `By`, `DebugElement`, and `AppComponent` from Angular core.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Angular 核心中导入模块，例如 `async`、`ComponentFixture`、`TestBed`、`FormsModule`、`By`、`DebugElement`
    和 `AppComponent`。
- en: 'Write the followingÂ `describe` global function and declare the necessary variables:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写以下的`describe`全局函数并声明必要的变量：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, create two `beforeEach` functions: one to compile the template and CSS,
    and the other to get the instance of the component. The code snippet is given
    here:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建两个`beforeEach`函数：一个用于编译模板和 CSS，另一个用于获取组件的实例。代码段如下所示：
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: For each test, we may end up repeating the same code to initialize or to clear
    some objects. To ease the work of the developer, Jasmine provides theÂ `beforeEach`
    and `afterEach` global functionalities that run before and after executing each
    test method respectively.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个测试，我们可能会重复相同的代码来初始化或清除一些对象。为了简化开发者的工作，Jasmine 提供了在执行每个测试方法之前和之后运行的Â `beforeEach`
    和 `afterEach` 全局功能。
- en: 'Finally, add the `it` test or specs functions to verify the expectations, as
    shown:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加`it`测试或规范函数来验证期望，如下所示：
- en: '[PRE27]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Running the specs or tests of AppComponent
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行 AppComponent 的规范或测试
- en: 'Execute the `npm test` command in the command-line window, and the application
    will start and the tests will be run for you. The following screenshot shows the
    result of tests or specs that ran against `AppComponent`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行窗口中执行`npm test`命令，应用程序将启动，并为您运行测试。以下截图显示了针对`AppComponent`运行的测试或规范的结果：
- en: '![](img/image_08_002.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_08_002.png)'
- en: Test result of AppComponent
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: AppComponent 的测试结果
- en: Unit testing a mock service
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试一个模拟服务
- en: '* * *'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Keeping the components lean by injecting the services into it enables us to
    write unit tests with a mock service. We can mock the injected service by mimicking
    the service behavior using its interface:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将服务注入到组件中保持组件的精简，使我们能够使用模拟服务编写单元测试。我们可以通过模仿服务行为使用其接口来模拟注入的服务：
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, we created a mock of an existing todo service by extending and overriding
    the `getPending` method to return an empty array.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过扩展和覆盖`getPending`方法创建了一个现有待办服务的模拟，以返回一个空数组。
- en: 'We can test this using `testBed`, instructingÂ how to use the mock service,
    `MockTodoService` instead of the actual service, `TodoService`, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `testBed` 来测试这一点，指示如何使用模拟服务 `MockTodoService` 而不是实际服务 `TodoService`，如下所示：
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, we instructedÂ how to use `MockTodoService` instead of `TodoService`,
    and we can sky the outcome of testing, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指示如何使用 `MockTodoService` 而不是 `TodoService`，并且可以跳过测试的结果，如下所示：
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, it gets the mock service,Â `MockTodoService`, from fixture and adds a
    spyOn override to pretend that there are no pending `todo` items in the list.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，它从 fixture 中获取模拟服务Â `MockTodoService`，并添加一个 spyOn 覆盖，假装列表中没有待办事项。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: '* * *'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Hurray! We learned the basics of writing automated testing for Angular applications.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！我们学会了为 Angular 应用程序编写自动化测试的基础知识。
- en: We started this chapter with an introduction to the Jasmine framework and learned
    how to write effective tests and run them automatically.Â Then, we learned how
    to test components and services using the Jasmine framework and assert the behavior
    of the application. Finally, we discussed mocking a service and testing it using
    spyOn.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从介绍 Jasmine 框架开始这一章，学习如何编写有效的测试并自动运行它们。然后，我们学习了如何使用 Jasmine 框架测试组件和服务，并断言应用程序的行为。最后，我们讨论了模拟服务并使用
    spyOn 进行测试。
- en: In the next chapter, we will discuss some of the new topics in Angular and .NET
    Core.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论一些关于 Angular 和 .NET Core 的新主题。
