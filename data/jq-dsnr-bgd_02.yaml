- en: Chapter 2. Enhancing Links
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 增强链接
- en: We take links for granted these days, but the truth of the matter is that the
    humble link is the thing that revolutionized documents and made the Web as we
    know it today possible. Being able to link a reader directly to another document
    or to another place within a document had never been possible before.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如今我们理所当然地使用链接，但事实上，这个不起眼的链接是改变文档并使今天的网络成为可能的事物。在此之前，将读者直接链接到另一个文档或另一个文档内的另一个位置是不可能的。
- en: Because of this, you could say that hyperlinks are the backbone of the Internet
    — without them search engines wouldn't be possible, nor would most websites. Let's
    take a look at some ways we can make links work even harder for us.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，你可以说超链接是互联网的支柱 —— 没有它们，搜索引擎就不可能存在，也不会有大多数网站。让我们来看看一些方法，我们可以让链接为我们提供更大的帮助。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: How to open links in a new window
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在新窗口打开链接
- en: How to add icons to links to identify what type of document we are linking to
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何向链接添加图标以识别我们正在链接到的文档类型
- en: How to turn a list of links into simple tabs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将链接列表转换为简单的选项卡
- en: Opening links in a new window
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在新窗口打开链接
- en: As common as it is to open links in new windows, the practice itself is a little
    bit controversial. Some argue that the site visitors themselves should decide
    if they want to open a link in a new window, and many browsers make it easy for
    them to do just that. Some argue that opening a link in a new window breaks the
    expected behavior of the **Back** button and should be avoided. Others argue that
    not opening links in a new window is confusing and disorienting for the site visitors
    when they suddenly find themselves on a different website.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在新窗口打开链接是很常见的，但这种做法本身有些争议。有些人认为网站访问者应该自己决定是否要在新窗口打开链接，而且许多浏览器都让他们轻松实现这一点。一些人认为在新窗口打开链接会破坏**返回**按钮的预期行为，应该避免这样做。还有一些人认为，不在新窗口打开链接会让网站访问者感到困惑和失落，当他们突然发现自己在一个不同的网站上时。
- en: Wherever you stand on the issue, it's a common request from clients and the
    practice probably isn't going away any time soon, so it's important to know your
    options for handling this kind of functionality. I'm going to assume that you're
    aware of the issues surrounding opening a link in a new window and have carefully
    weighed all the options and presented an informed argument to your client.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你对这个问题持何种观点，客户通常都会提出这样的要求，而且这种做法可能不会很快消失，所以了解处理这种功能的选择是很重要的。我假设你已经意识到了在新窗口打开链接的问题，并已经认真权衡了所有选项，并向客户提出了一个知情的论点。
- en: Why not just use the target attribute?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不直接使用`target`属性呢？
- en: 'As you may know, HTML makes a `target` attribute available that can be used
    with links to specify where a link should open. For example, the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道，HTML 提供了一个`target`属性，可以与链接一起使用，用于指定链接应该在哪里打开。例如，下面的代码：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: will create a link that will do its best to open in a new window or a new tab,
    depending on the preferences a user has set in their browser.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建一个链接，它将尽力在新窗口或新选项卡中打开，具体取决于用户在其浏览器中设置的偏好。
- en: The W3C the body that develops web standards such as HTML — deprecated the use
    of the `target` attribute for strict document types, but have reintroduced the
    tag to the HTML5 specification. However, the `target` attribute was intended to
    be used with frames to control how new pages were loaded into frames and iframes.
    It was not intended to be used to open a link in a new window for pages that aren't
    using frames, so strictly speaking, using it for that purpose is incorrect.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发网页标准（如 HTML）的机构 W3C 已经废弃了`target`属性的严格文档类型的使用，但已经将该标签重新引入了 HTML5 规范。但是，`target`属性旨在与框架一起使用，以控制如何将新页面加载到框架和
    iframe 中。它并不是用来打开一个不使用框架的页面中的链接的，因此严格来说，为此目的使用它是不正确的。
- en: Instead, we can use a little bit of JavaScript to create the behavior that we
    want without using invalid or deprecated code. Let's take a look at how to do
    that.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以使用一点 JavaScript 来创建我们想要的行为，而不使用无效或已弃用的代码。让我们来看看如何做到这一点。
- en: Time for action — opening a link in a new window
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 在新窗口打开链接
- en: 'We''ll get started with our basic HTML file and associated files and folders
    that we created in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"),
    *Designer, Meet jQuery*. Inside the`<body>` of the HTML document, we''ll add some
    links as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从我们在[第一章](ch01.html "第一章。设计师，见到jQuery")中创建的基本HTML文件和相关文件夹开始。在HTML文档的`<body>`中，我们将添加一些链接，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is just a heading and two simple paragraphs, each with a link — one that
    should open in a new window and one that won't.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这只是一个标题和两个简单的段落，每个段落都有一个链接——一个应该在新窗口中打开，另一个不应该。
- en: We need some way to select the link that should open in a new window. This is
    similar to the situation we would have if we wanted to style one of the links
    differently from the other with CSS.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一种方法来选择应该在新窗口中打开的链接。这与我们如果想要用CSS对其中一个链接进行不同样式处理时的情况类似。
- en: 'If we were using CSS, we could assign the link an `ID` or a class. An `ID`
    would be pretty limiting, as an `ID` must be unique on a page — it would only
    apply to this one particular link. A `class` would let us style any link that
    opens in a new window, so that''s what we''re going to use. Add a `class` to the
    link that should open in a new window as follows:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们使用CSS，我们可以为链接分配一个`ID`或一个类。`ID`会相当受限，因为`ID`必须在页面上是唯一的——它只适用于这个特定的链接。`class`将允许我们样式化任何在新窗口中打开的链接，所以这就是我们要使用的。如下所示，为应该在新窗口中打开的链接添加一个`class`：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can use this class name for both CSS styling and to make the link open
    in a new window with jQuery. It''s a great idea to add an icon to this link you
    can add some padding to the left or right side of the link and then add a background
    image to the link. Open up the empty `styles.css` file inside your `styles` folder
    and add a bit of CSS as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个类名来进行CSS样式设置，并使用jQuery使链接在新窗口中打开。为这个链接添加一个图标是个好主意，你可以在链接的左侧或右侧添加一些填充，然后为链接添加一个背景图像。打开你的`styles`文件夹中的空`styles.css`文件，并添加以下CSS：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next up, we''ll open up the `scripts.js` file inside our `scripts` folder,
    and outside of our document ready statement we''ll start off by writing our function
    to get our `new-window` links and make them open in a new window. Start off by
    declaring a new function:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将打开我们的`scripts`文件夹中的`scripts.js`文件，并在我们的文档准备好声明之外开始编写我们的函数来获取我们的`new-window`链接并使它们在新窗口中打开。首先声明一个新函数：
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we've created a new function and named it `externalLinks` as that's a name
    that makes sense for opening links in new windows. It's always helpful to give
    your JavaScript functions and variables names that will help you remember what
    they do.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里我们创建了一个新函数，并将其命名为`externalLinks`，因为这是一个合理的名称，用于在新窗口中打开链接。为JavaScript函数和变量命名为能帮助你记住它们的功能是非常有帮助的。
- en: Next, we'll use jQuery to select all the links with the class `new-window`.
    We'll take advantage of jQuery's CSS selectors to select those links just like
    we did when we styled them with CSS.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用jQuery选择所有具有`new-window`类的链接。我们将利用jQuery的CSS选择器来选择这些链接，就像我们在用CSS对它们进行样式设置时一样。
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''ve used the `$` shortcut for the jQuery function and passed the CSS selector
    to the function. It''s important to remember to wrap the CSS selector in either
    single quotes or double quotes. We don''t want the link to open a new window until
    the user clicks on the link, so our next step is to tell the link to run a function
    when it''s clicked on. jQuery makes this very easy. We can use the `bind()` method
    provided by jQuery to bind a function to the link that will be called when the
    link is clicked. That will look like this:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了`$`快捷方式调用jQuery函数，并向函数传递了CSS选择器。重要的是要记住将CSS选择器用单引号或双引号括起来。我们不希望链接在用户点击之前就打开新窗口，因此我们的下一步是告诉链接在被点击时运行一个函数。jQuery使这变得非常容易。我们可以使用jQuery提供的`bind()`方法将一个函数绑定到链接上，当链接被点击时将调用该函数。代码如下所示：
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This bit of code binds a function to our link — when our link is clicked, any
    code we write inside this new function will be called. But so far, our function
    is empty and doesn't actually do anything.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码将一个函数绑定到我们的链接上——当我们的链接被点击时，我们在这个新函数内编写的任何代码都将被调用。但到目前为止，我们的函数是空的，实际上什么也没做。
- en: 'What we need to do next is get the location the link is sending us to:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们需要做的是获取链接将我们发送到的位置：
- en: '[PRE7]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's examine this new line of code one bit at a time. First, we've declared
    a new variable named `location`. As you remember, a variable is just a container.
    So we've got a new empty container, so now let's look at what we've put inside
    our container.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们逐一检查这一行新代码。首先，我们声明了一个名为`location`的新变量。你记得吧，变量只是一个容器。所以我们有了一个新的空容器，现在让我们看看我们放了什么进我们的容器。
- en: '`$(this)` is the jQuery way of referring to the jQuery object that we''re currently
    working with. In this case, we''re selecting all links with a class of `new-window`
    and we''ve attached this function to be called whenever a site visitor clicks
    the link. When a site visitor clicks a link, we want to examine the link that
    was clicked to get the location of where the link is going. A simple and quick
    way of referring to the current link is to use `$(this).`'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$(this)`是jQuery引用我们当前正在处理的jQuery对象的方式。在这种情况下，我们选择所有具有`new-window`类的链接，并且我们已经附加了该函数，以便在站点访客点击链接时调用它。当站点访客点击链接时，我们希望检查被点击的链接以获取链接要前往的位置。引用当前链接的一个简单快捷的方式是使用`$(this)`。'
- en: Next we use the `attr()` method to get an attribute of the link. The location
    where a link is heading is contained in the `href` attribute, so we pass `href`
    to the `attr()` method.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来我们使用`attr()`方法来获取链接的属性。链接要前往的位置包含在`href`属性中，因此我们将`href`传递给`attr()`方法。
- en: So our container that we've named `location` now contains the URL where the
    link is pointing, or in this particular case, [http://packtpub.com.](http://packtpub.com)
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，我们命名为`location`的容器现在包含了链接指向的URL，或者在这种特殊情况下，[http://packtpub.com.](http://packtpub.com)
- en: 'Now that we know where we want to go, all we have to do is open that location
    in a new window. Opening a new window in JavaScript is simple and straightforward:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们知道我们想要去哪里了，我们只需要在新窗口中打开那个位置。在JavaScript中打开一个新窗口是简单直接的：
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`window` is a global object in JavaScript that is always available to us. The
    window object has an `open()` method, and we just have to pass a location to that
    method so that the browser knows what location to open in a new window.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`window`是JavaScript中的一个全局对象，始终可供我们使用。window对象有一个`open()`方法，我们只需将位置传递给该方法，以便浏览器知道在新窗口中打开的位置是什么。'
- en: Now, if you open this HTML page in a browser and try clicking the links, you
    might be disappointed to see that our link does not open in a new window. It's
    like our JavaScript isn't even on the page at all. We've written a very nice function,
    but it's not working. That's because functions don't do anything until we tell
    them to. Telling a function to do its thing in JavaScript speak is 'calling the
    function'.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中打开这个HTML页面并尝试点击链接，你可能会失望地发现我们的链接没有在新窗口中打开。就像我们的JavaScript根本就不在页面上一样。我们写了一个非常好的函数，但它不起作用。那是因为函数在我们告诉它们之前不会做任何事情。在JavaScript中告诉一个函数做它的事情的方式是'调用该函数'。
- en: We would like this function to fire up, find all the links with the class `new-window`,
    and bind our new window function to them as soon as the page is loaded in the
    browser window. That way, our links that should open in new windows will be ready
    to fire off a new window as soon as our site visitor clicks on one of them.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们希望这个函数在页面在浏览器窗口加载时立即启动，找到所有具有类`new-window`的链接，并将我们的新窗口函数绑定到它们上。这样，我们的应该在新窗口中打开的链接将在我们的站点访客点击其中一个链接时准备好打开一个新窗口。
- en: 'We just have to add a line inside our document ready statement to call our
    function:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们只需在我们的文档准备好的语句中添加一行来调用我们的函数：
- en: '[PRE9]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This new bit of code will call our `externalLinks` function as soon as the page
    loads up in the browser.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段新代码将在页面在浏览器中加载时立即调用我们的`externalLinks`函数。
- en: There's just one thing left to do. Right now if you load the page in a browser
    and click on a link, you'll find that the link does indeed open in a new window,
    but it also opens in the current window — so we end up with our new page loaded
    into two different windows. Not exactly what we had in mind. What we need to do
    is cancel the default behavior of the link — we've already taken care of opening
    the location in a new window, so now we need to tell the browser that it can take
    a break and it doesn't need to do anything when the site visitor clicks on the
    link. So let's add a parameter to our function and a line of code to cancel the
    default link behavior.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只剩下一件事要做了。现在，如果你在浏览器中加载页面并点击链接，你会发现链接确实会在新窗口中打开，但它也会在当前窗口中打开——所以我们最终会在两个不同的窗口中加载我们的新页面。这不是我们想要的结果。我们需要做的是取消链接的默认行为——我们已经处理了在新窗口中打开位置的事情，所以现在我们需要告诉浏览器，在站点访客点击链接时不需要做任何事情。所以让我们给我们的函数添加一个参数和一行代码来取消默认链接行为。
- en: '[PRE10]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You'll notice that the function we've attached to the click action on the link
    now has an e inside the parentheses. This is a parameter that we're passing to
    this function. In this case e represents the click event of the link.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会注意到我们附加到链接点击动作的函数现在括号里有一个 e。这是我们传递给这个函数的一个参数。在这种情况下，e代表链接的点击事件。
- en: 'The line of code we add to the function is:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在函数中添加的代码行是：
- en: '[PRE11]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This tells the browser to stop the default behavior of the link. If you reload
    the page in your browser and click on the link, you''ll see that it correctly
    opens the destination page in a new window, and it no longer opens the link in
    the current window:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这告诉浏览器停止链接的默认行为。如果你在浏览器中重新加载页面并点击链接，你会发现它会在新窗口中正确地打开目标页面，并且不再在当前窗口中打开链接：
- en: '![Time for action — opening a link in a new window](img/6709OS_02_001.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![执行动作的时间——在新窗口中打开链接](img/6709OS_02_001.jpg)'
- en: 'Now, what do you think will happen if we have a second link on the page that
    should open in a new window? Let''s go back to the`<body>` of the document and
    add a second link that should open in a new window. After the other links, add
    a new paragraph and link to a new page:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果页面上有第二个应该在新窗口打开的链接，你认为会发生什么？让我们回到文档的`<body>`部分，添加一个应该在新窗口打开的第二个链接。在其他链接之后，添加一个新的段落和链接到一个新页面：
- en: '[PRE12]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Be sure to add the `new-window` class to your link.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保将`new-window`类添加到你的链接中。
- en: Now, when you refresh the page in the browser, the new link appears on the page.
    Try clicking it and you'll see that it opens in a new window too, just like the
    other `new-window` link.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你在浏览器中刷新页面时，新链接会出现在页面上。尝试点击它，你会发现它也会像其他`new-window`链接一样在新窗口中打开。
- en: What just happened?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added a CSS class name to the links that we wanted to open in a new window.
    Now, any link we create on our page with the `new-window` class will open in a
    new window but how does JavaScript know which page to open in a new window when
    there are multiple links?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给那些希望在新窗口打开的链接添加了一个 CSS 类名。现在，我们在页面上创建的任何带有`new-window`类的链接都会在新窗口中打开，但是当有多个链接时，JavaScript
    怎么知道要在新窗口中打开哪个页面呢？
- en: The answer lies in our `externalLinks` function. We selected all links with
    the `new-window` class and bound a function to fire when those links were clicked.
    Inside that function, we captured the link's location. This function doesn't run
    until a link is clicked. Until then, it's just sitting on the sidelines, waiting
    to be called into action. When a link with the `new-window` class is clicked,
    our function springs into action, capturing the location of that specific link
    and opening up a new window pointed at that link's location.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 答案就在我们的`externalLinks`函数中。我们选择了所有带有`new-window`类的链接，并绑定了一个函数，当这些链接被点击时触发。在这个函数内部，我们捕获了链接的位置。这个函数只有在链接被点击时才会运行。在那之前，它只是在场边等待行动。当一个带有`new-window`类的链接被点击时，我们的函数开始工作，捕获了那个特定链接的位置，并打开了一个指向该链接位置的新窗口。
- en: Adding icons to links
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为链接添加图标
- en: Adding icons to links is one of the simplest ways to communicate the link type
    to your site visitor. You might have different icons for different sections of
    your site, or you might want to provide some downloadable files to your site visitors
    — for example, a PDF or e-book that you've written, the slides for a presentation
    you gave, or some stock icons or photography that you've created. Adding icons
    to these types of links can help give a visual clue to your site visitors so they
    know what to expect when they click on the link. Let's take a look at how we can
    add appropriate icons to different link types with jQuery.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 向链接添加图标是向您的站点访客传达链接类型的最简单方法之一。您可能对站点的不同部分有不同的图标，或者您可能希望向站点访客提供一些可下载的文件 —— 例如，您编写的
    PDF 或电子书，您进行的演示文稿的幻灯片，或者您创建的一些股票图标或摄影作品。向这些类型的链接添加图标可以帮助向您的站点访客提供视觉线索，以便他们知道单击链接时会发生什么。让我们看看我们如何使用
    jQuery 为不同类型的链接添加适当的图标。
- en: 'Here''s an example of what our page will look like after we''ve added icons
    to our links:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们向链接添加图标后页面的示例：
- en: '![Adding icons to links](img/6709OS_02_002.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![向链接添加图标](img/6709OS_02_002.jpg)'
- en: Time for action — creating a list of links
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 创建链接列表
- en: 'We''ll get started with our basic HTML file and associated folders, like we
    created in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer,
    Meet jQuery*. We''ll add a list of links to a few different types of downloadable
    files to the`<body>` of the HTML document:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从我们创建的基本 HTML 文件和相关文件夹开始，就像我们在[第 1 章](ch01.html "第 1 章。设计师，遇见 jQuery")中创建的那样，*设计师，遇见
    jQuery*。我们将向 HTML 文档的`<body>`添加一系列链接列表，链接到几种不同类型的可下载文件：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When we view this list in a browser, we'll see a bulleted list of links — there's
    no visual indication what type of file lies behind each link — the user has to
    guess based on the text of the link. Let's get all of our links and add an appropriate
    class name to each one based on which file type the link is pointing to. To do
    this, we'll use jQuery's attribute selectors.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们在浏览器中查看此列表时，我们将看到一个链接的项目列表 —— 没有视觉指示告诉用户每个链接背后是什么类型的文件 —— 用户必须根据链接的文本猜测。让我们获取所有链接并根据链接指向的文件类型为每个链接添加适当的类名。为此，我们将使用
    jQuery 的属性选择器。
- en: Next up, we'll get ready to add our JavaScript to our page. Open up the `scripts.js`
    file inside the `scripts` folder.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将准备好将 JavaScript 添加到我们的页面中。打开`scripts`文件夹中的`scripts.js`文件。
- en: 'Let''s figure out how we can distinguish one type of link from another. The
    `<a>` link has an `href` attribute. That `href` attribute tells us the URL of
    the page or file the link is taking us to, but it also gives us the information
    that we need to select links with different values in that attribute. Let''s take
    a look at how jQuery attribute selectors work:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们弄清楚如何区分一种类型的链接与另一种类型的链接。`<a>`链接具有`href`属性。这个`href`属性告诉我们链接将带我们去哪个页面或文件的URL，但它也给了我们选择具有不同属性值的链接所需的信息。让我们看看
    jQuery 属性选择器的工作原理：
- en: '[PRE14]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will select all of the links on the page. If we wanted to get only the
    `<a>` tags with an `href` attribute, we could modify our selector as follows:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将选择页面上的所有链接。如果我们只想获取具有`href`属性的`<a>`标签，我们可以修改我们的选择器如下：
- en: '[PRE15]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We could take that a step further and get only the links where the attribute
    was equal to a certain value:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以再进一步，并仅获取属性等于特定值的链接：
- en: '[PRE16]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This selector is only going to select the link that links to the `video.mp4`
    file. Note the way that single and double quotes are nested here — I can use either
    single or double quotes to wrap my selector, but if I need to quote something
    inside my selector, I have to be careful to choose the other type of quotes.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个选择器只会选择链接到`video.mp4`文件的链接。请注意这里单引号和双引号的嵌套方式 —— 我可以使用单引号或双引号来包装我的选择器，但是如果我需要引用选择器内的内容，我必须小心选择另一种类型的引号。
- en: 'We want to add a class name to each of these links so that we can style them
    with CSS to add our icon as a background image. To do that, we''ll use the `.addClass()`
    method of the jQuery object. Using what we''ve learned so far, we could do something
    like this inside of our document ready statement:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们想要为这些链接中的每一个添加一个类名，以便我们可以使用 CSS 为它们添加我们的图标作为背景图像进行样式设置。为此，我们将使用 jQuery 对象的`.addClass()`方法。根据我们迄今学到的知识，我们可以在我们的文档准备就绪的语句中做类似以下的事情：
- en: '[PRE17]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '...but that''s not very flexible. What if we wanted to add a second video or
    another PDF file? We would have to adjust our jQuery to match. Instead, let''s
    make our links a little more flexible by simply looking at the file extension
    of the link''s `href` attribute. jQuery will allow us to check if an attribute
    begins with certain characters, ends with certain characters, or contains certain
    characters. You can get the full list of possible attribute selectors in the jQuery
    documentation at [http://api.jquery.com/category/selectors/.](http://api.jquery.com/category/selectors/).'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...但这样并不是很灵活。如果我们想要添加第二个视频或另一个 PDF 文件怎么办？我们将不得不调整我们的 jQuery 来匹配。相反，让我们通过简单地查看链接的
    `href` 属性的文件扩展名来使我们的链接更加灵活。jQuery 将允许我们检查属性是否以某些字符开头，以某些字符结尾或包含某些字符。您可以在 jQuery
    文档中获取可能的属性选择器的完整列表 [http://api.jquery.com/category/selectors/.](http://api.jquery.com/category/selectors/)。'
- en: 'To check if an attribute begins with certain characters, use `^=` as follows:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检查属性是否以某些字符开头，请使用 `^=` 如下所示：
- en: '[PRE18]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To check if an attribute contains certain characters anywhere in the name,
    use `*=` as follows:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检查属性是否在名称中任意位置包含某些字符，请使用 `*=` 如下所示：
- en: '[PRE19]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this case, the file extension is always the last part of the link, so we''ll
    use the ends with attribute selector, which uses `$=` as follows:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，文件扩展名始终是链接的最后一部分，因此我们将使用以属性选择器结尾的方式，该方式使用 `$=` 如下所示：
- en: '[PRE20]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, any links we add with a `.pdf` extension, for example, will automatically
    have the `pdf` class given to them. If you refresh the page in a browser at this
    point, you won''t see any difference in the page, but if you inspect the **DOM**
    **(Document Object Model)** using a browser inspection tool such as the ones built
    into Chrome and WebKit or Firebug for Firefox, you''ll see that the links have
    the class names assigned to them. All that''s left to do is to write the CSS to
    include the icons. Open up the `styles.css` file inside the `styles` folder and
    add some lines of code as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，例如，任何我们添加的具有 `.pdf` 扩展名的链接将自动被赋予 `pdf` 类。如果您在浏览器中刷新页面，此时您不会看到页面上的任何区别，但是如果您使用浏览器检查工具（例如内置在
    Chrome 和 WebKit 中的工具或 Firefox 的 Firebug）检查 **DOM** **(Document Object Model)**，您将看到链接已被赋予类名。剩下的就是编写
    CSS 来包含图标了。打开 `styles` 文件夹中的 `styles.css` 文件，并添加一些代码行，如下所示：
- en: '[PRE21]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You'll have to make sure that you place your icon images inside the `images`
    folder. You can use the icon images included with the sample code for this chapter
    or create your own.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您必须确保将图标图像放在 `images` 文件夹内。您可以使用本章示例代码中包含的图标图像，也可以创建您自己的图标。
- en: Now, if you refresh the page in the browser, you'll see each of the links show
    the appropriate icon. If you add new links to these four file types to your page,
    they'll all have the icons as well. We've created a flexible and easy solution
    for adding icons to links.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，如果您在浏览器中刷新页面，您将看到每个链接显示适当的图标。如果您向页面添加了这四种文件类型的新链接，它们也将具有相应的图标。我们为链接添加图标创建了一个灵活且简单的解决方案。
- en: '![Time for action — creating a list of links](img/6709OS_02_002.jpg)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 创建链接列表](img/6709OS_02_002.jpg)'
- en: What just happened?
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We selected all the links on our page according to the file extension in the
    `href` attribute and used that to add appropriate class names with jQuery. We
    then used those class names in our CSS to add icons to each link type with some
    CSS styles. Site visitors without JavaScript enabled will still be able to click
    the links and download the associated files. They'll just miss out on the icons
    that tip them off to the file type behind each link.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据 `href` 属性中的文件扩展名选择了页面上的所有链接，并使用 jQuery 添加了适当的类名。然后，我们在 CSS 中使用这些类名为每个链接类型添加了图标，并应用了一些
    CSS 样式。没有启用 JavaScript 的网站访问者仍然可以单击链接并下载相关文件。他们只会错过指示每个链接后面文件类型的图标。
- en: Now you can see how jQuery and CSS can work together to add new functionality
    to your pages. jQuery can modify elements' class names, and CSS can then be used
    to style those elements according to their class name.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以看到 jQuery 和 CSS 如何共同工作以向您的页面添加新功能。jQuery 可以修改元素的类名，然后可以使用 CSS 根据其类名样式化这些元素。
- en: Simple tabs
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的标签页
- en: If we have a large amount of information to present that might not be relevant
    to all site visitors, we can compress the amount of space the information takes
    by hiding selected bits of information until the site visitor requests it. One
    of the most common ways of making all the information available but hidden until
    requested is tabs. Tabs echo the real-world example of a tabbed notebook or labeled
    folders in a filing cabinet and are easy for site visitors to understand. And
    believe it or not, they're also easy to implement with jQuery.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有大量信息需要呈现，但这些信息可能对所有网站访问者都不相关，我们可以通过隐藏选定的信息位来压缩信息占用的空间，直到网站访问者请求它。制作所有信息可用但隐藏直到请求的最常见方法之一是选项卡。选项卡反映了现实世界中的一个例子，即带标签的笔记本或文件柜中的标记文件夹，并且易于网站访问者理解。信不信由你，它们还可以使用
    jQuery 轻松实现。
- en: 'Here''s an idea of what our page will look like after we''ve created our tabs:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们创建选项卡后页面的大致样子：
- en: '![Simple tabs](img/6709OS_02_003.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![简单选项卡](img/6709OS_02_003.jpg)'
- en: Time for action — creating simple tabs
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 —— 创建简单的选项卡
- en: 'We''ll get started with our basic HTML file and associated folders, like we
    created in [Chapter 1](ch01.html "Chapter 1. Designer, Meet jQuery"), *Designer,
    Meet jQuery*. Inside the`<body>` tag, we''ll start by setting up our simple example
    that will work even for users with JavaScript disabled: we''ll put a list of anchor
    links to different areas of the page at the top, then wrap each of our content
    sections in a `div` with an `id` as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从我们的基本 HTML 文件和相关文件夹开始，就像我们在 [第一章](ch01.html "第一章。设计师，遇见 jQuery")中创建的那样，*设计师，遇见
    jQuery*。在`<body>`标签内，我们将从设置一个简单的示例开始，即使对于禁用 JavaScript 的用户也可以使用：我们将在页面顶部放置一系列指向页面不同区域的锚链接，然后将每个内容部分包装在一个带有`id`的`div`中，如下所示：
- en: '[PRE22]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If we view this HTML in a browser, we'll see a list of links at the top of the
    page that when clicked, jump down the page to the appropriate section so that
    the site visitor can easily find each section without scrolling on their own.
    We've basically created a clickable table of contents for our page.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中查看此 HTML，我们将看到页面顶部有一个链接列表，点击后页面会跳转到相应部分，这样网站访问者就可以轻松找到每个部分，而不需要自己滚动。我们基本上为我们的页面创建了一个可点击的目录。
- en: Now we want to enhance this for our site visitors that have JavaScript enabled.
    We'll start by adding an `id` to the`<ul>` that contains our table of contents
    and we'll add a class name to each of the`<div>s` that contain our sections of
    content — this will make it easier for us to select just the pieces of the page
    we want with jQuery and will also make it easier for us to style our tabs with
    CSS.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们想要为启用 JavaScript 的网站访问者增强此功能。我们将首先为包含我们目录的`<ul>`添加一个`id`，并为包含我们内容部分的每个`<div>`添加一个类名
    —— 这将使我们更容易使用 jQuery 选择我们想要的页面部分，并且也将使我们更容易使用 CSS 样式化我们的选项卡。
- en: '[PRE23]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we''ll use jQuery to hide all of our `tab-sections`. Open up the `scripts.js`
    file inside your `scripts` folder and inside the document `ready` statement, select
    the `tab-sections` and hide them:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 jQuery 隐藏所有我们的`tab-sections`。打开你的`scripts`文件夹中的`scripts.js`文件，在文档`ready`语句内选择`tab-sections`并隐藏它们：
- en: '[PRE24]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now when we load the page, we'll only see our table of contents.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在当我们加载页面时，我们只会看到我们的目录。
- en: 'Next, we need to show the appropriate section when one of our tabs is clicked.
    We''ll start by binding a function to the click event of the links inside our
    table of contents — just like we did when we opened a link in a new window:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当我们的选项卡之一被点击时，我们需要显示相应的部分。我们将从将函数绑定到目录内链接的单击事件开始 —— 就像我们在打开新窗口时所做的那样：
- en: '[PRE25]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With this bit of code, we've selected all of the links inside the `<ul>` with
    the id of `#tabs` and bound a function to the links on click. So far, all this
    function does is cancel the click — if you load the page in a browser at this
    point, you'll see that clicking on the links does nothing — the page no longer
    jumps down to the associated section.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过这一小段代码，我们选择了带有 id 为`#tabs`的`<ul>`内的所有链接，并将一个函数绑定到单击链接上。到目前为止，这个函数所做的一切都是取消点击
    —— 如果你在浏览器中加载页面，你会发现点击链接不会做任何事情 —— 页面不再跳转到相关部分。
- en: Next, we want to select the appropriate section and show it. To do that, we'll
    use the hash — or the part of the `href` attribute that includes the `#` symbol.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想要选择适当的部分并显示它。为此，我们将使用哈希 —— 或包含`#`符号的`href`属性的部分。
- en: '[PRE26]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When I pass `this.hash` to the jQuery function, the `this` I''m dealing with
    is the link that was just clicked and `this.hash` is the value of the href attribute
    starting with the # symbol and continuing to the end. If I were to click on the
    overview tab, for example, passing this.hash to the jQuery function is the same
    as writing the following:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我把`this.hash`传递给jQuery函数时，我正在处理的`this`是刚刚点击的链接，`this.hash`是从#符号开始直到结尾的href属性的值。例如，如果我点击概览标签，把`this.hash`传递给jQuery函数就等同于写下以下内容：
- en: '[PRE27]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: But of course, this is done in a much more flexible way — it will work for any
    tab linked to any section of the page. So, for example, if I wanted to replace
    the customer reviews tab with a shipping information tab, I wouldn't have to update
    my JavaScript, only the HTML markup itself — the JavaScript is flexible enough
    to adjust to changes.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，这是以一种更加灵活的方式完成的 —— 它将适用于页面任何与之链接的标签。例如，如果我想用运输信息标签替换客户评论标签，我就不需要更新我的JavaScript代码，只需要更新HTML标记本身
    —— JavaScript足够灵活，可以适应变化。
- en: 'So now when I click on one of the table of contents links, it will show me
    the associated section, but if I keep clicking on links, the sections just keep
    showing up, and after clicking all the links, all the sections are visible — that''s
    not what we want. We''ll have to hide the visible section and show only the section
    we want. Let''s add a line to our code to select the visible `tab-section` and
    hide it before we show the new section:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当我点击目录链接中的一个时，它将显示给我相应的部分，但如果我不断点击链接，部分就会不断显示，点击所有链接后，所有部分都可见，这不是我们想要的。我们需要隐藏可见的部分，只显示我们想要的部分。让我们在代码中添加一行来选择可见的`tab-section`并在显示新部分之前隐藏它：
- en: '[PRE28]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You're probably familiar with **pseudoclass** selectors in CSS — they're often
    used to select the hover, visited, and active states of links (`a:hover, a:visited`,
    and `a:active`). jQuery makes a few additional `pseudoclass` selectors available
    to us there are pseudoclass selectors for buttons, empty elements, disabled form
    fields, checkboxes, and more. You can check out all the available selectors for
    jQuery in the jQuery documentation at [http://api.jquery.com/category/selectors/](http://api.jquery.com/category/selectors/).
    Here, we're using the `:visible` pseudoclass to select the `.tab-section` that's
    currently visible. Once we've selected the visible .tab-section, we hide it and
    then find the correct `tab-section` and show it.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能熟悉CSS中的**伪类**选择器 —— 它们经常用于选择链接的hover、visited和active状态（`a:hover, a:visited`和`a:active`）。jQuery为我们提供了一些额外的`伪类`选择器，这里有用于按钮、空元素、禁用表单字段、复选框等的伪类选择器。你可以在jQuery文档中查看jQuery的所有可用选择器http://api.jquery.com/category/selectors/。这里，我们使用`:visible`伪类选择器来选择当前可见的`.tab-section`。一旦我们选择了可见的`.tab-section`，我们就把它隐藏起来，然后找到正确的`tab-section`并显示它。
- en: All we need now is some CSS to get our tabs styles to look like a tabbed section
    of content. Open the `styles.css` file that's inside your `styles` folder, and
    add some CSS styles as follows. Feel free to customize them to suit your own taste.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一些CSS来使我们的标签样式看起来像内容的分栏部分。打开你的`styles`文件夹中的`styles.css`文件，添加一些CSS样式如下。随意定制它们以适应你自己的口味。
- en: '[PRE29]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now if you load this up in a browser, you''ll see that there''s a little something
    missing — we should highlight the currently selected tab to make it obvious which
    one is selected. We can do that by adding a CSS class to the current tab. Go back
    to your `scripts.js` file and add a bit of code to add a class to the current
    tab and remove the class from any non-current tabs as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果你在浏览器中加载这个页面，你会发现有一点还不够 —— 我们应该突出显示当前选定的标签，以便明确显示哪一个被选定。我们可以通过为当前标签添加一个CSS类来实现这一点。回到你的`scripts.js`文件，添加一段代码为当前标签添加一个类，并从任何非当前标签中移除类如下：
- en: '[PRE30]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: First, we'll find the tab that has the class `current`, and remove that class.
    Then we'll get the tab that was just clicked and add the `current` class to it.
    That way, we make sure that only one tab will be marked as the current tab at
    any given time.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们会找到具有`current`类的选项卡，并删除那个类。然后我们将获取刚刚点击的选项卡，并在它上面添加`current`类。这样，我们确保每次只有一个选项卡被标记为当前选项卡。
- en: 'Next, we''ll add some styles in our CSS for our new class. Open up `styles.css`
    and add a bit of code to distinguish the currently selected tab. Again, feel free
    to customize this style to suit your own tastes:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在我们的CSS中为我们的新类添加一些样式。打开`styles.css`，添加一些代码以区分当前选定的选项卡。同样，随意定制这种风格以适应你自己的口味：
- en: '[PRE31]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'So now our tabs are working the way we expect, and the only thing left to do
    is to make the first tab active and show the first content section when the page
    is first loaded instead of leaving them all hidden. We''ve already written the
    function to do this, so now all we have to do is call it for our first tab:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的选项卡已经按我们的期望工作了，剩下的唯一事情就是在页面首次加载时使第一个选项卡处于活动状态，并显示第一个内容部分，而不是将它们全部隐藏。我们已经编写了执行此操作的函数，现在我们只需为我们的第一个选项卡调用它：
- en: '[PRE32]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The jQuery object''s `filter()` method will allow us to filter a previously
    selected set of elements — in this case we''re dealing with all of the `<a>` tags
    inside the `<ul>` with the `id #tabs`. We bind a click function to all of those
    links, then we''ll filter out just the first link using the `:first` pseudoclass
    made available to us — in jQuery and tell jQuery to click the first tab for us
    this will run our function, adding the `current` class to the first link, and
    showing the first `.tab-section` — just the way we would expect the page to look
    when we load it.'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'jQuery 对象的 `filter()` 方法将允许我们过滤先前选择的一组元素 —— 在本例中，我们处理的是具有 `id #tabs` 的 `<ul>`
    中的所有 `<a>` 标签。我们将一个点击函数绑定到所有这些链接，然后我们将使用 `:first` 伪类过滤出第一个链接 —— 在 jQuery 中为我们提供了这个功能，并告诉
    jQuery 为我们点击第一个选项卡，这将运行我们的函数，将 `current` 类添加到第一个链接，并显示第一个 `.tab-section` —— 就像我们加载页面时期望的那样。'
- en: '![Time for action — creating simple tabs](img/6709OS_02_003.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 —— 创建简单选项卡](img/6709OS_02_003.jpg)'
- en: What just happened?
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We set up a set of simple tabs with jQuery. For site visitors with JavaScript
    disabled, the tabs will function like a table of contents at the top of the document,
    jumping them down to the various sections of content when they're clicked. For
    site visitors with JavaScript, though, the sections of content will be completely
    hidden until needed. Clicking on each tab reveals the content associated with
    that tab. This is a great way to save space in a UI — making all the content available
    on demand in a small space.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 jQuery 设置了一组简单的选项卡。对于禁用 JavaScript 的网站访问者，选项卡将像文档顶部的目录一样运行，当点击它们时，它们会跳转到各个内容部分。然而，对于启用
    JavaScript 的网站访问者，内容部分将完全隐藏，直到需要。点击每个选项卡会显示与该选项卡相关联的内容。这是在用户界面中节省空间的绝佳方式 —— 在一个小空间中按需提供所有内容。
- en: We hid the tab contents with JavaScript instead of with CSS to be sure that
    users without JavaScript enabled would still be able to access all of our content.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 JavaScript 隐藏选项卡内容，而不是使用 CSS，以确保没有启用 JavaScript 的用户仍然能够访问我们的所有内容。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to take basic links — the backbone of the Internet
    — and enhance them to add some new behaviors and capabilities. You learned how
    to make a link open in a new window, how to add icons to links depending on which
    type of file was linked to and how to set up a basic tabbed interface. These are
    all very common requirements for websites and these will serve as great building
    blocks for you as you learn more about jQuery and JavaScript.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用基本链接 —— 互联网的支柱 —— 并增强它们以添加一些新的行为和功能。您学习了如何使链接在新窗口中打开，根据链接的文件类型添加图标以及如何设置基本的选项卡界面。这些都是网站的非常常见的要求，当您学习更多关于
    jQuery 和 JavaScript 的知识时，这些将作为您的良好基石。
