- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Approaches to Styling React Frontends
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风格化 React 前端的方法
- en: In this chapter, we will style the alert component we worked on in previous
    chapters using four different approaches. First, we will use plain CSS and understand
    the downsides of this approach. Then, we will move on to use **CSS modules**,
    which will resolve plain CSS’s main problem. We will then use a **CSS-in-JS**
    library called Emotion and a library called Tailwind CSS and will understand the
    benefits of each of these libraries.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用四种不同的方法来对我们在前几章中工作的警报组件进行样式设计。首先，我们将使用纯 CSS 并了解这种方法的不利之处。然后，我们将转向使用
    **CSS 模块**，这将解决纯 CSS 的主要问题。接下来，我们将使用一个名为 Emotion 的 **CSS-in-JS** 库和一个名为 Tailwind
    CSS 的库，并了解这些库各自的优点。
- en: We will also learn how to use SVGs in React apps and use them in the alert component
    for the information and warning icons.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习如何在 React 应用中使用 SVG 并在警报组件的信息和警告图标中使用它们。
- en: 'We’ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Using plain CSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用纯 CSS
- en: Using CSS modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CSS 模块
- en: Using CSS-in-JS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CSS-in-JS
- en: Using Tailwind CSS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Tailwind CSS
- en: Using SVGs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SVG
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'We will use the following technologies in this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将使用以下技术：
- en: '**Browser**: A modern browser such as Google Chrome'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器**：一个现代浏览器，如 Google Chrome'
- en: '**Node.js** and **npm**: You can install them from [https://nodejs.org/en/download/](https://nodejs.org/en/download/)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js** 和 **npm**：您可以从 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    安装它们'
- en: '**Visual Studio Code**: You can install it from [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**：您可以从 [https://code.visualstudio.com/](https://code.visualstudio.com/)
    安装它'
- en: All the code snippets used in this chapter can be found online at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码片段都可以在以下网址找到：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5)。
- en: Using plain CSS
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用纯 CSS
- en: We will start this section by setting up a React and TypeScript project with
    the alert component from [*Chapter 3*](B19051_03.xhtml#_idTextAnchor072)*, Setting
    Up React and TypeScript*. Next, we will add the alert component from [*Chapter
    3*](B19051_03.xhtml#_idTextAnchor072) and style it using plain CSS. Finally, we
    will look at one of the challenges with plain CSS and discover how we could mitigate
    it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个部分开始，通过设置一个包含警报组件的 React 和 TypeScript 项目来启动，该组件来自 [*第 3 章*](B19051_03.xhtml#_idTextAnchor072)*，设置
    React 和 TypeScript*。接下来，我们将添加来自 [*第 3 章*](B19051_03.xhtml#_idTextAnchor072) 的警报组件，并使用纯
    CSS 对其进行样式设计。最后，我们将探讨纯 CSS 的一些挑战，并了解我们如何减轻这些问题。
- en: Creating the project
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'The project we will be using is the one we completed at the end of [*Chapter
    3*](B19051_03.xhtml#_idTextAnchor072). This can be found at the following location:
    [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3/Section2-Creating-a-project-with-Create-React-App/myapp](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3/Section2-Creating-a-project-with-Create-React-App/myapp).
    To copy this locally, carry out the following steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的是我们在 [*第 3 章*](B19051_03.xhtml#_idTextAnchor072) 结尾时完成的项目。您可以在以下位置找到它：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3/Section2-Creating-a-project-with-Create-React-App/myapp](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter3/Section2-Creating-a-project-with-Create-React-App/myapp)。要本地复制此项目，请执行以下步骤：
- en: Open Visual Studio Code in a folder of your choice.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择的文件夹中打开 Visual Studio Code。
- en: 'Run the following command in the terminal to clone the GitHub repository for
    the book:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令以克隆本书的 GitHub 仓库：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Reopen Visual Studio Code in the `Learn-React-with-TypeScript-2nd-Edition\Chapter3\Section2-Creating-a-project-with-Create-React-App\myapp`
    subfolder. This contains the project in the form it was in at the end of [*Chapter
    3*](B19051_03.xhtml#_idTextAnchor072).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Learn-React-with-TypeScript-2nd-Edition\Chapter3\Section2-Creating-a-project-with-Create-React-App\myapp`
    子文件夹中重新打开 Visual Studio Code。这包含在 [*第 3 章*](B19051_03.xhtml#_idTextAnchor072)
    结尾时的项目状态。
- en: 'Run the following command to install all the dependencies:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以安装所有依赖项：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The project is now set up. Next, we will take some time to understand how to
    use plain CSS in React components.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 项目现在已设置好。接下来，我们将花一些时间了解如何在 React 组件中使用纯 CSS。
- en: Understanding how to reference CSS
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解如何引用 CSS
- en: 'Create React App has already enabled the use of plain CSS in the project. In
    fact, if you look in `App.tsx`, it already uses plain CSS:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App 已经在项目中启用了纯 CSS 的使用。实际上，如果你查看 `App.tsx` 文件，它已经使用了纯 CSS：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: CSS styles from the `App.css` file are imported, and the `App` CSS class is
    referenced on the outer `div` element.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `App.css` 文件中导入 CSS 样式，并在外部的 `div` 元素上引用 `App` CSS 类。
- en: React uses a `className` attribute rather than `class` because `class` is a
    reserved word in JavaScript. The `className` attribute is converted to a `class`
    attribute during transpilation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: React 使用 `className` 属性而不是 `class`，因为 `class` 是 JavaScript 中的一个保留字。`className`
    属性在转译过程中被转换为 `class` 属性。
- en: The CSS import statement is a webpack feature. As webpack processes all the
    files, it will include all the imported CSS in the bundle.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 导入语句是 webpack 的一个特性。当 webpack 处理所有文件时，它将包含所有导入的 CSS 到包中。
- en: 'Carry out the following steps to explore the CSS bundle that the project produces:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以探索项目生成的 CSS 包：
- en: Start by opening and looking at `App.css`. As we have seen already, `App.css`
    is used within `App.tsx`. However, it contains CSS classes that are no longer
    used, such as `App-header` and `App-logo`. These classes were referenced in the
    `App` component before we removed them when we added the alert component. Leave
    the redundant CSS classes in place.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开并查看 `App.css` 文件。正如我们之前所看到的，`App.css` 在 `App.tsx` 文件中被使用。然而，它包含了一些不再使用的
    CSS 类，例如 `App-header` 和 `App-logo`。在我们添加警报组件时，这些类在 `App` 组件中被引用，然后我们移除了它们。保留这些多余的
    CSS 类。
- en: Open the `index.tsx` file and you’ll notice that `index.css` is imported. However,
    no CSS classes are referenced within this file. If you open `index.css`, you will
    notice that it only contains CSS rules that target element names and no CSS classes.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `index.tsx` 文件，你会注意到导入了 `index.css`。然而，在这个文件中没有引用任何 CSS 类。如果你打开 `index.css`，你会注意到它只包含针对元素名称的
    CSS 规则，而没有 CSS 类。
- en: 'Run the following command in the terminal to produce a production build:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令以生成生产构建：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After a few seconds, the build artifacts will appear in a `build` folder at
    the project’s root.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，构建工件将出现在项目根目录下的 `build` 文件夹中。
- en: Open `index.html` in the `build` folder and notice all the whitespace has been
    removed because it is optimized for production. Next, find the `link` element
    that references the CSS file and note down the path – it will be something similar
    to `/static/css/main.073c9b0a.css`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `build` 文件夹中打开 `index.html` 并注意所有空白都被移除了，因为它已经针对生产进行了优化。接下来，找到引用 CSS 文件的 `link`
    元素，并记下路径 – 它将类似于 `/static/css/main.073c9b0a.css`。
- en: '![Figure 5.1 – The link element in index.html](img/B19051_05__01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – index.html 中的链接元素](img/B19051_05__01.jpg)'
- en: Figure 5.1 – The link element in index.html
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – index.html 中的链接元素
- en: Open up the referenced CSS file. All the whitespace has been removed because
    it is optimized for production. Notice that it contains all the CSS from `index.css`
    and `App.css`, including the redundant `App-header` and `App-logo` CSS classes.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开引用的 CSS 文件。所有空白都被移除了，因为它已经针对生产进行了优化。注意它包含来自 `index.css` 和 `App.css` 的所有 CSS，包括多余的
    `App-header` 和 `App-logo` CSS 类。
- en: '![Figure 5.2 – The bundled CSS file, including redundant App-header CSS class](img/B19051_05__02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 包含多余的 App-header CSS 类的打包 CSS 文件](img/B19051_05__02.jpg)'
- en: Figure 5.2 – The bundled CSS file, including redundant App-header CSS class
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 包含多余的 App-header CSS 类的打包 CSS 文件
- en: The key point here is that webpack doesn’t remove any redundant CSS – it will
    include all the content from all the CSS files that have been imported.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里关键点是 webpack 不会移除任何多余的 CSS – 它将包含所有已导入的 CSS 文件中的所有内容。
- en: Next, we will style the alert component with plain CSS.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用纯 CSS 来样式化警报组件。
- en: Using plain CSS in the alert component
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在警报组件中使用纯 CSS
- en: 'Now that we understand how to use plain CSS within React, let’s style the alert
    component. Carry out the following steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何在 React 中使用纯 CSS，让我们来样式化警报组件。执行以下步骤：
- en: Add a CSS file called `Alert.css` in the `src` folder. This is available in
    GitHub at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section1-Using-plain-CSS/app/src/Alert.css](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section1-Using-plain-CSS/app/src/Alert.css)
    to copy.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 文件夹中添加一个名为 `Alert.css` 的 CSS 文件。这个文件可以在 GitHub 上找到：[https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section1-Using-plain-CSS/app/src/Alert.css](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section1-Using-plain-CSS/app/src/Alert.css)
    以便复制。
- en: 'We will add the CSS classes step by step and understand the styles in each
    class. Start by adding a `container` class into `Alert.css`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将逐步添加 CSS 类，并理解每个类中的样式。首先，在 `Alert.css` 中添加一个 `container` 类：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will be used on the outer `div` element. The style uses an inline flexbox,
    with the items flowing vertically and left-aligned. We’ve also added a nice rounded
    border and a bit of padding between the border and child elements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在外部的 `div` 元素上使用。样式使用内联 flexbox，项目垂直流动并左对齐。我们还添加了一个漂亮的圆角边框以及在边框和子元素之间的少量填充。
- en: 'Add the following additional classes that can be used within `container`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `container` 中添加以下额外的类，这些类可以在其中使用：
- en: '[PRE12]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will use these classes for the different types of alerts to color them appropriately.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些类为不同类型的 alert 添加适当的颜色。
- en: 'Add the following class for the header container element:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为头部容器元素添加以下类：
- en: '[PRE20]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will be applied to the element that contains the icon, heading, and close
    button. It uses a flexbox that flows horizontally with child elements vertically
    centered. It also adds a small gap at the bottom before the alert message.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将应用于包含图标、标题和关闭按钮的元素。它使用一个水平流动的 flexbox，子元素垂直居中。它还在 alert 消息之前添加了一个小的间隙。
- en: 'Now add the following class for the icon to give it a width of 30 px:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为图标添加以下类，使其宽度为 30 像素：
- en: '[PRE25]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, add the following class to apply to the heading to make it bold:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下类以应用于标题，使其加粗：
- en: '[PRE28]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following class to apply to the close button:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下类以应用于关闭按钮：
- en: '[PRE31]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This removes the border and background. It also aligns the button to the right
    of the header and gives it a pointer mouse cursor.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这移除了边框和背景。它还将按钮对齐到标题的右侧，并给它一个指针鼠标光标。
- en: 'Add the following class for the content element:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为内容元素添加以下类：
- en: '[PRE37]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This adds a left margin so the message horizontally aligns with the heading
    and sets the text color to black.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这添加了一个左外边距，使消息水平与标题对齐，并将文本颜色设置为黑色。
- en: That completes all the CSS class definitions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了所有的 CSS 类定义。
- en: 'Open `Alert.tsx` and add an import statement for the CSS file we just created:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Alert.tsx` 并为刚刚创建的 CSS 文件添加一个导入语句：
- en: '[PRE41]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we are going to reference the CSS classes we just created in the elements
    of the alert component. Add the following highlighted CSS class name references
    in the alert JSX to do this:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在 alert 组件的元素中引用我们刚刚创建的 CSS 类。在 alert JSX 中添加以下高亮的 CSS 类名引用来完成此操作：
- en: '[PRE42]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The elements in the alert component are now being styled by the CSS classes
    in the imported CSS file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在alert组件中的元素正在通过导入的 CSS 文件中的 CSS 类进行样式化。
- en: 'Move the close button so that it is located inside the header container, under
    the `header` element:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将关闭按钮移动到位于头部容器内部，在 `header` 元素下方：
- en: '[PRE62]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Start the app in development mode by running `npm start` in the terminal.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `npm start` 启动应用在开发模式下。
- en: 'After a few seconds an improved alert component will appear in the browser:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，改进的 alert 组件将在浏览器中显示：
- en: '![Figure 5.3 – A styled alert component with plain CSS](img/B19051_05__03.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 使用纯 CSS 样式的 alert 组件](img/B19051_05__03.jpg)'
- en: Figure 5.3 – A styled alert component with plain CSS
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 使用纯 CSS 样式的 alert 组件
- en: That completes the alert component’s styling, but let’s continue so that we
    can observe a downside of plain CSS.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 alert 组件的样式，但让我们继续，以便我们可以观察到纯 CSS 的一个缺点。
- en: Experiencing CSS clashes
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经历 CSS 冲突
- en: 'We will now see an example of CSS with different components clashing. Keep
    the app running in development mode and then follow these steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到一个 CSS 与不同组件冲突的例子。保持应用在开发模式下运行，然后按照以下步骤操作：
- en: 'Open `App.tsx` and change the referenced CSS class from `App` to `container`
    on the `div` element:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.tsx` 并将 `div` 元素上引用的 CSS 类从 `App` 更改为 `container`：
- en: '[PRE80]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Open `App.css` and rename the `App` CSS class to `container` and also add `20px`
    of padding to it:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.css` 并将 `App` CSS 类重命名为 `container`，并为其添加 `20px` 的填充：
- en: '[PRE85]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Now, look at the running app and notice that the alert is no longer centered
    horizontally on the page. Inspect the elements using the browser DevTools. If
    you inspect the `div` element from the `App` component, you will see that styles
    from the `container` CSS class in the alert component have been applied to it
    as well as the `container` CSS class we just added. So, the `text-align` CSS property
    is `left` rather than `center`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，查看正在运行的应用程序，并注意警报不再在页面上水平居中。使用浏览器 DevTools 检查元素。如果你检查 `App` 组件中的 `div` 元素，你会看到来自警报组件中
    `container` CSS 类的样式也应用到了它上面，以及我们刚刚添加的 `container` CSS 类。因此，`text-align` CSS 属性是
    `left` 而不是 `center`。
- en: '![Figure 5.4 – Clashing CSS classes](img/B19051_05__04.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – CSS 类冲突](img/B19051_05__04.jpg)'
- en: Figure 5.4 – Clashing CSS classes
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – CSS 类冲突
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，通过按 *Ctrl* + *C* 停止运行的应用程序。
- en: The key point here is that plain CSS classes are scoped to the whole app and
    not just the file it is imported into. This means that CSS classes can clash if
    they have the same name, as we have just experienced
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这里关键点是，纯 CSS 类的作用域是整个应用程序，而不仅仅是导入的文件。这意味着如果 CSS 类有相同的名称，它们可能会发生冲突，正如我们刚才所经历的。
- en: A solution to CSS clashes is to carefully name them using `container` in the
    `App` component could be called `App__container`, and `container` in the `Alert`
    component could be called `Alert__container`. However, this requires discipline
    from all members of a development team.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 解决 CSS 冲突的一个方法是仔细命名，在 `App` 组件中使用 `container` 可以命名为 `App__container`，而在 `Alert`
    组件中的 `container` 可以命名为 `Alert__container`。然而，这需要开发团队所有成员的自律。
- en: Note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**BEM** stands for **Block**, **Element**, **Modifier** and is a popular naming
    convention for CSS class names. More information can be found at the following
    link: [https://css-tricks.com/bem-101/](https://css-tricks.com/bem-101/).'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**BEM** 代表 **Block**（块）、**Element**（元素）、**Modifier**（修饰符），是 CSS 类名的一个流行命名约定。更多信息可以在以下链接中找到：[https://css-tricks.com/bem-101/](https://css-tricks.com/bem-101/)。'
- en: 'Here’s a quick recap of this section:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对本节内容的快速回顾：
- en: Create React App configures webpack to process CSS so that CSS files can be
    imported into React component files
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Create React App 配置 webpack 以处理 CSS，以便 CSS 文件可以导入到 React 组件文件中
- en: All the styles in an imported CSS file are applied to the app – there is no
    scoping or removing redundant styles
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入的 CSS 文件中的所有样式都应用于应用程序 – 没有作用域或删除冗余样式
- en: Next, we will learn about a styling approach that doesn’t suffer from CSS clashes
    across components.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习一种不会在组件间出现 CSS 冲突的样式方法。
- en: Using CSS modules
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CSS 模块
- en: In this section, we will learn about an approach to styling React apps called
    **CSS modules**. We will start by understanding CSS modules and then we will use
    them within the alert component that we have been working on.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一种称为 **CSS 模块** 的 React 应用程序样式方法。我们将首先了解 CSS 模块，然后我们将使用它们在我们的警报组件中。
- en: Understanding CSS modules
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 CSS 模块
- en: CSS modules is an open source library available on GitHub at [https://github.com/css-modules/css-modules](https://github.com/css-modules/css-modules),
    which can be added to the webpack process to facilitate the automatic scoping
    of CSS class names.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: CSS modules 是一个开源库，可在 GitHub 上找到 [https://github.com/css-modules/css-modules](https://github.com/css-modules/css-modules)，它可以添加到
    webpack 处理中，以方便 CSS 类名的自动作用域。
- en: A CSS module is a CSS file, just like in the previous section; however, the
    filename has an extension of `.module.css` rather than `.css`. This special extension
    allows webpack to differentiate a CSS module file from a plain CSS file so that
    it can be processed differently.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 模块是一个 CSS 文件，就像在上一节中一样；然而，文件名有一个 `.module.css` 扩展名而不是 `.css`。这个特殊的扩展名允许
    webpack 区分 CSS 模块文件和纯 CSS 文件，以便可以对其进行不同的处理。
- en: 'A CSS module file is imported into a React component file as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 模块文件可以按照以下方式导入到 React 组件文件中：
- en: '[PRE89]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: This is similar to the syntax of importing plain CSS, but a variable is defined
    to hold CSS class name mapping information. In the preceding code snippet, the
    CSS class name information is imported into a variable called `styles`, but the
    variable name can be anything we choose.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这与导入纯 CSS 的语法类似，但定义了一个变量来保存 CSS 类名映射信息。在前面的代码片段中，CSS 类名信息被导入到一个名为 `styles` 的变量中，但变量名可以是任何我们选择的。
- en: 'The CSS class name mapping information variable is an object containing property
    names corresponding to the CSS class names. Each class name property contains
    a value of a scoped class name to be used on a React component. Here is an example
    of the mapping object that has been imported into a component called `MyComponent`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 类名映射信息变量是一个包含与 CSS 类名对应的属性名的对象。每个类名属性包含一个用于 React 组件的作用域类名值。以下是将导入到名为 `MyComponent`
    的组件中的映射对象的一个示例：
- en: '[PRE90]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The scope CSS class name starts with the component filename, then the original
    CSS class name, followed by a random string. This naming construct prevents class
    names from clashing.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域 CSS 类名以组件文件名开头，然后是原始 CSS 类名，接着是一个随机字符串。这种命名结构防止类名冲突。
- en: 'Styles within a CSS module are referenced in a component’s `className` attribute
    as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 模块中的样式在组件的 `className` 属性中如下引用：
- en: '[PRE91]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The CSS class name on the element would then resolve to the scoped class name.
    In the preceding code snippets, `styles.error` would resolve to `MyComponent_error__
    vj8Oj`. So, the styles in the running app will be the scoped style names and not
    the original class names.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 元素上的 CSS 类名将解析为作用域类名。在上面的代码片段中，`styles.error` 将解析为 `MyComponent_error__ vj8Oj`。因此，运行中的应用中的样式将是作用域样式名称，而不是原始类名。
- en: Projects created using Create React App already have CSS modules installed and
    configured with webpack. This means we don’t have to install CSS modules in order
    to start using them in our project.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Create React App 创建的项目已经安装并配置了 CSS 模块和 webpack。这意味着我们不需要安装 CSS 模块就可以在我们的项目中开始使用它们。
- en: Next, we will use CSS modules in the alert component we have worked on.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们工作的警报组件中使用 CSS 模块。
- en: Using CSS modules in the alert component
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在警报组件中使用 CSS 模块
- en: 'Now that we understand CSS modules, let’s use them in the alert component.
    Carry out the following steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了 CSS 模块，让我们在警报组件中使用它们。执行以下步骤：
- en: Start by renaming `Alert.css` to `Alert.module.css`; this file can now be used
    as a CSS module.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将 `Alert.css` 重命名为 `Alert.module.css`；现在这个文件可以作为 CSS 模块使用。
- en: 'Open `Alert.module.css` and change the CSS class names to camel case rather
    than kebab case. This will allow us to reference the scoped CSS class names more
    easily in the component – for example, `styles.headerText` rather than `styles["header-text"]`.
    The changes are as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Alert.module.css` 并将 CSS 类名更改为驼峰式而不是中划线式。这将使我们能够更容易地在组件中引用作用域 CSS 类名 – 例如，`styles.headerText`
    而不是 `styles["header-text"]`。更改如下：
- en: '[PRE92]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Now, open `Alert.tsx` and change the CSS import statement to import the CSS
    module as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `Alert.tsx` 并将 CSS 导入语句更改为如下导入 CSS 模块：
- en: '[PRE102]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'In the JSX, change the class name references to use the scoped names from the
    CSS module:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中，更改类名引用以使用 CSS 模块的scoped名称：
- en: '[PRE103]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Start the app by running `npm start` in the terminal.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `npm start` 来启动应用。
- en: After a few seconds, the styled alert will appear. This time the alert will
    be horizontally centered, which is a sign that styles are no longer clashing.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，样式化的警报将出现。这次警报将水平居中，这是样式不再冲突的标志。
- en: Inspect the elements in the DOM using the browser’s DevTools. You will see that
    the alert component is now using scoped CSS class names. This means the alert
    container styles no longer clash with the app container styles.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器的 DevTools 检查 DOM 中的元素。你会看到警报组件现在正在使用作用域 CSS 类名。这意味着警报容器样式不再与应用容器样式冲突。
- en: '![Figure 5.5 – The CSS module scoped class names](img/B19051_05__05.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – CSS 模块作用域的类名](img/B19051_05__05.jpg)'
- en: Figure 5.5 – The CSS module scoped class names
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – CSS 模块作用域的类名
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，通过按 *Ctrl* + *C* 停止运行中的应用。
- en: 'To round off our understanding of CSS modules, let’s see what happens to the
    CSS in a production build. However, before we do that, let’s add a redundant CSS
    class at the bottom of `Alert.module.css`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完善我们对 CSS 模块的理解，让我们看看生产构建中的 CSS 会发生什么。然而，在我们这样做之前，让我们在 `Alert.module.css`
    的底部添加一个冗余的 CSS 类：
- en: '[PRE125]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Now create a production build by executing `npm run build` in the terminal.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过在终端中执行 `npm run build` 来创建生产构建。
- en: After a few seconds, the build artifacts are created in the `build` folder.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，在 `build` 文件夹中创建构建工件。
- en: 'Open the bundled CSS file and you will notice the following points:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开捆绑的 CSS 文件，你会注意到以下要点：
- en: It contains all the CSS from `index.css`, `App.css`, and the CSS module we just
    created.
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含来自 `index.css`、`App.css` 和我们刚刚创建的 CSS 模块的所有 CSS。
- en: The class names from the CSS module are scoped. This will ensure that the styles
    in production don’t clash, as they did not in development mode.
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 模块中的类名具有作用域。这将确保生产环境中的样式不会冲突，就像开发模式中那样。
- en: It contains the redundant CSS class name from the CSS module.
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含来自 CSS 模块的冗余 CSS 类名。
- en: '![Figure 5.6 – The redundant CSS class included in CSS bundle](img/B19051_05__06.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 包含在 CSS 包中的冗余 CSS 类](img/B19051_05__06.jpg)'
- en: Figure 5.6 – The redundant CSS class included in CSS bundle
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 包含在 CSS 包中的冗余 CSS 类
- en: That completes the refactoring of the alert component to use CSS modules.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了将警报组件重构为使用 CSS 模块的过程。
- en: Note
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on CSS modules, visit the GitHub repository at [https://github.com/css-modules/css-modules](https://github.com/css-modules/css-modules).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 CSS 模块的信息，请访问 GitHub 仓库 [https://github.com/css-modules/css-modules](https://github.com/css-modules/css-modules)。
- en: 'Here’s a recap of what we have learned about CSS modules:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对我们关于 CSS 模块所学内容的回顾：
- en: CSS modules allow CSS class names to be automatically scoped to a React component.
    This prevents styles for different React components from clashing.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 模块允许 CSS 类名自动作用域到 React 组件上。这防止了不同 React 组件的样式冲突。
- en: CSS modules isn’t a standard browser feature; instead, it is an open source
    library that can be added to the webpack process.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 模块不是浏览器标准功能；相反，它是一个开源库，可以添加到 webpack 流程中。
- en: CSS modules are pre-installed and pre-configured in projects created with Create
    React App.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用 Create React App 创建的项目中，CSS 模块是预安装和预配置的。
- en: Similar to plain CSS, redundant CSS classes are not pruned from the production
    CSS bundle.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与纯 CSS 类似，冗余的 CSS 类不会从生产 CSS 包中删除。
- en: Next, we will learn about another approach to styling React apps.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习另一种为 React 应用程序添加样式的途径。
- en: Using CSS-in-JS
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CSS-in-JS
- en: In this section, we start by understanding CSS-in-JS and its benefits. We will
    then refactor the alert component we have used to implement CSS-in-JS and observe
    how it differs from CSS modules.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们首先理解 CSS-in-JS 及其优点。然后，我们将重构我们使用的警报组件以实现 CSS-in-JS，并观察它与 CSS 模块的不同之处。
- en: Understanding CSS-in-JS
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 CSS-in-JS
- en: CSS-in-JS isn’t a browser feature, and it isn’t even a specific library – instead,
    it is a type of library. Popular examples of CSS-in-JS libraries are **styled-components**
    and **Emotion**. There isn’t a significant difference between styled-components
    and Emotion – they are both popular and have similar APIs. We will use Emotion
    in this chapter.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: CSS-in-JS 不是浏览器功能，甚至不是一个特定的库 – 而是一种库类型。CSS-in-JS 库的流行例子有 **styled-components**
    和 **Emotion**。styled-components 和 Emotion 之间没有显著差异 – 它们都非常流行，并且具有相似的 API。我们将在本章中使用
    Emotion。
- en: 'Emotion generates styles that are scoped, similar to CSS modules. However,
    you write the CSS in JavaScript rather than in a CSS file – hence the name *CSS-in-JS*.
    In fact, you can write the CSS directly on JSX elements as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 情感生成的是具有作用域的样式，类似于 CSS 模块。然而，你是在 JavaScript 中而不是在 CSS 文件中编写 CSS，因此得名 *CSS-in-JS*。实际上，你可以直接在
    JSX 元素上编写 CSS，如下所示：
- en: '[PRE133]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Each CSS-in-JS library’s syntax is slightly different – the preceding example
    is a code snippet from Emotion styling.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 每个CSS-in-JS库的语法略有不同 – 以下示例是来自 Emotion 样式的代码片段。
- en: Having styles directly on the component allows a developer to fully understand
    the component without having to visit another file. This obviously increases the
    file size, which can make the code harder to read. However, child components can
    be identified and extracted out of the file to mitigate large file sizes. Alternatively,
    styles can be extracted from component files into a JavaScript function that is
    imported.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 将样式直接放在组件上允许开发者完全理解组件，而无需访问另一个文件。这显然会增加文件大小，可能会使代码更难阅读。然而，可以通过将子组件识别并从文件中提取出来来减轻大文件大小。或者，可以将样式从组件文件中提取到一个导入的
    JavaScript 函数中。
- en: 'A massive benefit of CSS-in-JS is that you can mix logic into the style, which
    is really useful for highly interactive apps. The following example contains a
    conditional `font-weight` dependent on an `important` prop and a conditional `font-size`
    dependent on a `mobile` prop:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: CSS-in-JS 的一个巨大好处是你可以将逻辑混合到样式之中，这对于高度交互的应用程序非常有用。以下示例包含一个依赖于 `important` 属性的
    `font-weight` 条件和依赖于 `mobile` 属性的 `font-size` 条件：
- en: '[PRE134]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: JavaScript string interpolation is used to define the conditional statement.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 字符串插值来定义条件语句。
- en: 'The equivalent plain CSS would be similar to the following example, with separate
    CSS classes created for the different conditions:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于纯 CSS 的示例可能类似于以下示例，为不同的条件创建单独的 CSS 类：
- en: '[PRE135]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: If a style on an element is highly conditional, then CSS-in-JS is arguably easier
    to read and certainly easier to write.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个元素的样式高度条件化，那么 CSS-in-JS 可能更容易阅读，当然也更容易编写。
- en: Next, we will use Emotion in the alert component we have worked on.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们工作的警报组件中使用 Emotion。
- en: Using Emotion in the alert component
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在警报组件中使用情感
- en: 'Now that we understand CSS-in-JS, let’s use Emotion in the alert component.
    To do so, carry out the following steps. All the code snippets used can be found
    at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section3-Using-CSS-in-JS/app/src/Alert.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section3-Using-CSS-in-JS/app/src/Alert.tsx):'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 CSS-in-JS，让我们在警报组件中使用 Emotion。为此，执行以下步骤。所有使用的代码片段都可以在 [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section3-Using-CSS-in-JS/app/src/Alert.tsx](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/blob/main/Chapter5/Section3-Using-CSS-in-JS/app/src/Alert.tsx)
    找到：
- en: 'Create React App doesn’t install and set up Emotion, so we first need to install
    Emotion. Run the following command in the terminal:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Create React App 没有安装和设置 Emotion，因此我们首先需要安装 Emotion。在终端中运行以下命令：
- en: '[PRE136]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: This will take a few seconds to install.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要几秒钟的时间来安装。
- en: Open `Alert.tsx` and remove the CSS module import.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Alert.tsx` 并删除 CSS 模块导入。
- en: 'Add an import for the `css` prop from Emotion with a special comment at the
    top of the file:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加对 Emotion 的 `css` 属性的导入，并添加一个特殊注释：
- en: '[PRE137]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: This special comment changes JSX elements to be transpiled using Emotion’s `jsx`
    function instead of React’s `createElement` function. Emotion’s `jsx` function
    adds styles to elements containing Emotion’s `css` prop.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特殊注释将 JSX 元素转换为使用 Emotion 的 `jsx` 函数进行转换，而不是使用 React 的 `createElement` 函数。Emotion
    的 `jsx` 函数为包含 Emotion 的 `css` 属性的元素添加样式。
- en: In the JSX, we need to replace all the `className` props with the equivalent
    Emotion `css` attributes. The styles are largely the same as defined in the CSS
    file we created earlier, so the explanations won’t be repeated.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JSX 中，我们需要将所有的 `className` 属性替换为等效的 Emotion `css` 属性。样式基本上与我们之前创建的 CSS 文件中定义的相同，所以解释不会重复。
- en: 'We will style one element at a time, starting with the outer `div` element:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一次样式化一个元素，从外部的 `div` 元素开始：
- en: '[PRE140]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'There are a few important points to explain in this code snippet:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中有几个重要的点需要解释：
- en: The `css` attribute isn’t usually valid on JSX elements. The special comment
    at the top of the file (`/** @jsxImportSource @emotion/react */`) allows this.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css` 属性通常不在 JSX 元素上有效。文件顶部的特殊注释 (`/** @jsxImportSource @emotion/react */`)
    允许这样做。'
- en: The `css` attribute is set to a `css` in this case. For more information on
    tagged template literals, see [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals).
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这种情况下，`css` 属性被设置为 `css`。有关标签模板字面量的更多信息，请参阅 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)。
- en: The tagged template literal converts the style to a CSS class at runtime. We
    will verify this in *step 14*.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签模板字面量在运行时将样式转换为 CSS 类。我们将在 *步骤 14* 中验证这一点。
- en: String interpolation is used to implement the conditional styles for the colors.
    Remember that we had to define three CSS classes using plain CSS or CSS modules.
    This CSS-in-JS version is arguably more readable and certainly more concise.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字符串插值来实现颜色的条件样式。记住，我们不得不使用纯 CSS 或 CSS 模块定义三个 CSS 类。这个 CSS-in-JS 版本可能更易于阅读，当然也更简洁。
- en: 'Next, style the header container:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，设置头部容器的样式：
- en: '[PRE141]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Next, style the icon as follows:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式设置图标样式：
- en: '[PRE152]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Then, style the heading as follows:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照以下方式设置标题样式：
- en: '[PRE161]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Now, style the close button as follows:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式设置关闭按钮样式：
- en: '[PRE168]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Finally, style the message container as follows:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按照以下方式设置消息容器样式：
- en: '[PRE181]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Run the app by running `npm start` in the terminal. The alert component will
    appear like it was before.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行 `npm start` 来启动应用程序。警报组件将像之前一样出现。
- en: 'Inspect the elements in the DOM using the browser’s DevTools. The alert component
    uses scoped CSS class names, similar to CSS modules:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器的开发者工具检查 DOM 中的元素。警报组件使用范围 CSS 类名，类似于 CSS 模块：
- en: '![Figure 5.7 – Emotion’s scoped class names](img/B19051_05__07.jpg)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 情感的范围类名](img/B19051_05__07.jpg)'
- en: Figure 5.7 – Emotion’s scoped class names
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 – Emotion的作用域类名
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，通过按*Ctrl* + *C*停止运行中的应用程序。
- en: To round off our understanding of Emotion, let’s see what happens to the CSS
    in a production build. First, create a production build by executing `npm run
    build` in the terminal.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完善我们对Emotion的理解，让我们看看生产构建中的CSS会发生什么。首先，通过在终端中执行`npm run build`来创建生产构建。
- en: After a few seconds, the build artifacts are created in the `build` folder.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，构建工件将在`build`文件夹中创建。
- en: Open the bundled CSS file from the `build/static/css` folder. Notice that the
    Emotion styles are not there. This is because Emotion generates the styles at
    runtime via JavaScript rather than at build time. If you think about it, the styles
    can’t be generated at build time because they may depend on JavaScript variables
    whose values are only known at runtime.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`build/static/css`文件夹中的捆绑CSS文件。注意，Emotion样式不在其中。这是因为Emotion通过JavaScript在运行时生成样式，而不是在构建时。如果你这么想，样式不能在构建时生成，因为它们可能依赖于仅在运行时才知道值的JavaScript变量。
- en: This completes the refactoring of the alert component to use CSS-in-JS.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了对警报组件的重构，以使用CSS-in-JS。
- en: Note
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on emotion, visit their website at [https://emotion.sh/docs/introduction](https://emotion.sh/docs/introduction).
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于emotion的信息，请访问他们的网站[https://emotion.sh/docs/introduction](https://emotion.sh/docs/introduction)。
- en: 'Here’s a recap of what we learned about Emotion and CSS-in-JS:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于Emotion和CSS-in-JS我们所学的总结：
- en: Styles for a CSS-in-JS library are defined in JavaScript rather than a CSS file.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS-in-JS库的样式是在JavaScript中定义的，而不是在CSS文件中。
- en: Emotion’s styles can be defined directly on a JSX element using a `css` attribute.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emotion的样式可以直接在JSX元素上使用`css`属性定义。
- en: A huge benefit is that conditional logic can be added directly to the styles,
    which helps us style interactive components more quickly.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个巨大的好处是可以在样式上直接添加条件逻辑，这有助于我们更快地设置交互式组件的样式。
- en: Emotion styles are applied at runtime rather than at build time because they
    depend on JavaScript variables. While this allows conditional styling logic to
    be elegantly defined, it does mean a small performance penalty because the styles
    are created and applied at runtime.
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于Emotion的样式依赖于JavaScript变量，它们在运行时而不是在构建时应用，这允许优雅地定义条件样式逻辑，但也意味着会有轻微的性能损失，因为样式是在运行时创建和应用的。
- en: Next, we will learn about another different approach to styling React frontends.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解另一种不同的方法来设置React前端。
- en: Using Tailwind CSS
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Tailwind CSS
- en: In this section, we will start by understanding Tailwind CSS and its benefits.
    We will then refactor the alert component we have been using to use Tailwind and
    observe how it differs from other approaches we have tried.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先理解Tailwind CSS及其优势。然后，我们将重构我们一直在使用的警报组件，以使用Tailwind，并观察它与我们所尝试的其他方法有何不同。
- en: Understanding Tailwind CSS
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Tailwind CSS
- en: Tailwind is a set of prebuilt CSS classes that can be used to style an app.
    It is referred to as a **utility-first CSS framework** because the prebuilt classes
    can be thought of as flexible utilities.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind是一组预构建的CSS类，可用于设置应用程序的样式。它被称为**实用优先CSS框架**，因为预构建的类可以被视为灵活的实用工具。
- en: An example CSS class is `bg-white`, which styles the background of an element
    white – *bg* is short for *background*. Another example is `bg-orange-500`, which
    sets the background color to a 500 shade of orange. Tailwind contains a nice color
    palette that can be customized.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个CSS类的示例：`bg-white`，它将元素的背景设置为白色 – *bg*是*background*的缩写。另一个例子是`bg-orange-500`，它将背景颜色设置为橙色的500号色调。Tailwind包含一个很棒的颜色调色板，可以进行自定义。
- en: 'The utility classes can be used together to style an element. The following
    example styles a button element in JSX:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 可以组合使用实用类来设置元素的样式。以下示例展示了如何在JSX中设置按钮元素的样式：
- en: '[PRE189]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'Here’s an explanation of the classes used in the preceding example:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对前面示例中使用的类的解释：
- en: '`border-none` removes the border of an element.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-none`移除元素的边框。'
- en: '`rounded-md` rounds the corners of an element border. The *md* stands for *medium*.
    Alternatively, `lg` (large) could have been used or even `full`, for more rounded
    borders.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rounded-md`使元素的边框圆角。*md*代表*medium*。也可以使用*lg*（大型）或甚至*full*，以获得更圆的边框。'
- en: '`bg-emerald-700` sets the element background color to a 700 shade of emerald.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bg-emerald-700`将元素的背景颜色设置为翡翠色的700号色调。'
- en: '`text-white` sets the element text color to white.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text-white`将元素的文本颜色设置为白色。'
- en: '`cursor-pointer` sets the element cursor to a pointer.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cursor-pointer`将元素的指针设置为指针。'
- en: The utility classes are low-level and focused on styling a very specific thing.
    This makes the classes flexible, allowing them to be highly reusable.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 实用类是低级别的，专注于样式化非常具体的东西。这使得类具有灵活性，允许它们高度可重用。
- en: 'Tailwind can specify that a class should be applied when the element is in
    a hover state by prefixing it with `hover:`. The following example sets the button
    background to a darker shade of emerald when hovered:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind 可以通过在类名前加上 `hover:` 来指定当元素处于悬停状态时应应用该类。以下示例在悬停时将按钮背景设置为更深的翡翠色：
- en: '[PRE190]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: So, a key point of Tailwind is that we don’t write new CSS classes for each
    element we want to style – instead, we use a large range of well-thought-through
    existing classes. A benefit of this approach is that it helps an app look nice
    and consistent.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Tailwind 的一个关键点是，我们不会为每个想要样式的元素编写新的 CSS 类 - 相反，我们使用大量经过深思熟虑的现有类。这种方法的优点是它有助于使应用程序看起来既美观又一致。
- en: Note
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on Tailwind, refer to their website at the following link:
    [https://tailwindcss.com/](https://tailwindcss.com/). The Tailwind website is
    a crucial resource for searching and understanding all the different utility classes
    that are available.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Tailwind 的更多信息，请参阅以下链接的网站：[https://tailwindcss.com/](https://tailwindcss.com/)。Tailwind
    网站是搜索和理解所有可用实用类的一个关键资源。
- en: Next, we will install and configure Tailwind in the project containing the alert
    component we have been working on.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装和配置 Tailwind，用于包含我们一直在工作的警报组件的项目。
- en: Installing and configuring Tailwind CSS
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 Tailwind CSS
- en: 'Now that we understand Tailwind, let’s install and configure it in the alert
    component project. To do this, carry out the following steps:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Tailwind，让我们在警报组件项目中安装和配置它。为此，执行以下步骤：
- en: 'In the Visual Studio project, start by installing Tailwind by running the following
    command in a terminal:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 项目中，首先通过在终端运行以下命令来安装 Tailwind：
- en: '[PRE191]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: The Tailwind library is installed as a development dependency because it’s not
    required at runtime.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind 库作为开发依赖项安装，因为它在运行时不是必需的。
- en: 'Tailwind integrates into Create React App projects using a library called **PostCSS**.
    PostCSS is a tool that transforms CSS using JavaScript and Tailwind runs as a
    plugin in it. Install PostCSS by running the following command in the terminal:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tailwind 通过使用名为 **PostCSS** 的库集成到 Create React App 项目中。PostCSS 是一个使用 JavaScript
    转换 CSS 的工具，Tailwind 作为插件在其中运行。通过在终端运行以下命令来安装 PostCSS：
- en: '[PRE192]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Tailwind also recommends another PostCSS called **Autoprefixer**, which adds
    vendor prefixes to CSS. Install this by running the following command in the terminal:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tailwind 还推荐另一个名为 **Autoprefixer** 的 PostCSS，它为 CSS 添加供应商前缀。通过在终端运行以下命令来安装它：
- en: '[PRE193]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'Next, run the following command in a terminal to generate configuration files
    for Tailwind and PostCSS:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在终端运行以下命令以生成 Tailwind 和 PostCSS 的配置文件：
- en: '[PRE194]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: After a few seconds, the two configuration files are created. The Tailwind configuration
    file is called `tailwind.config.js`, and the PostCSS configuration file is called
    `postcss.config.js`.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，将创建两个配置文件。Tailwind 配置文件名为 `tailwind.config.js`，PostCSS 配置文件名为 `postcss.config.js`。
- en: 'Open `tailwind.config.js` and specify the path to the React components as follows:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `tailwind.config.js` 并指定 React 组件的路径如下：
- en: '[PRE195]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'Now, open `index.css` in the `src` folder and add the following three lines
    at the top of the file:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `src` 文件夹中的 `index.css` 并在文件顶部添加以下三行：
- en: '[PRE204]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: These are called **directives** and will generate the CSS required by Tailwind
    during the build process.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 这些被称为 **指令**，将在构建过程中生成 Tailwind 所需的 CSS。
- en: Tailwind is now installed and ready to use.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind 已安装并准备好使用。
- en: Next, we will use Tailwind to style the alert component we have been working
    on.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 Tailwind 为我们一直在工作的警报组件进行样式设计。
- en: Using Tailwind CSS
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Tailwind CSS
- en: 'Now, let’s use Tailwind to style the alert component. We will remove emotion’s
    `css` JSX attribute and replace it with Tailwind utility class names in the JSX
    `className` attribute. To do this, carry out the following steps:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Tailwind 为警报组件进行样式设计。我们将删除 emotion 的 `css` JSX 属性，并在 JSX 的 `className`
    属性中使用 Tailwind 实用类名。为此，执行以下步骤：
- en: Open `Alert.tsx` and start by removing the special emotion comment and the `css`
    import statement from the top of the file.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Alert.tsx` 并从删除文件顶部的特殊 emotion 注释和 `css` 导入语句开始。
- en: 'Replace the `css` attribute with a `className` attribute on the outermost `div`
    element as follows:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最外层 `div` 元素的 `css` 属性替换为 `className` 属性，如下所示：
- en: '[PRE207]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Here is an explanation of the utility classes that were just used:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是刚刚使用的工具类的解释：
- en: '`inline-flex` and `flex-col` create an inline flexbox that flows vertically'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inline-flex` 和 `flex-col` 创建一个垂直流动的内联弹性盒子'
- en: '`text-left` aligns items to the left'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text-left` 将项目对齐到左侧'
- en: '`px-4` adds 4 spacing units of left and right padding'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`px-4` 添加了4个间距单位的左右填充'
- en: '`py-3` adds 3 spacing units of top and bottom padding'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py-3` 添加了顶部和底部3个间距单位的填充'
- en: We have encountered `rounded-md` before – this rounds the corners of the `div`
    element
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们之前遇到过 `rounded-md` —— 这会使 `div` 元素的角落变得圆滑
- en: '`border-1` and `border-transparent` add a transparent 1 px border'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`border-1` 和 `border-transparent` 添加了一个透明的1像素边框'
- en: Note
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Spacing units are defined in Tailwind and are a proportional scale. One spacing
    unit is equal to `0.25rem`, which translates roughly to `4px`.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 间距单位在 Tailwind 中定义，是一个比例刻度。一个间距单位等于 `0.25rem`，大约等于 `4px`。
- en: 'Still on the outermost `div` element, add the following conditional styles
    using string interpolation:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在最外层的 `div` 元素上，使用字符串插值添加以下条件样式：
- en: '[PRE212]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: The text color is set to a 900 amber shade for warning alerts and a 900 teal
    shade for information alerts. The background color is set to a 50 amber shade
    for warning alerts and a 50 teal shade for information alerts.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 文本颜色设置为900琥珀色调用于警告警报，900蓝绿色调用于信息警报。背景颜色设置为50琥珀色调用于警告警报，50蓝绿色调用于信息警报。
- en: 'Next, replace the `css` attribute with a `className` attribute on the header
    container as follows:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将标题容器的 `css` 属性替换为 `className` 属性，如下所示：
- en: '[PRE219]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'Here is an explanation of the utility classes that were just used:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是刚刚使用的工具类的解释：
- en: '`flex` and `items-center` create a horizontal flowing flexbox where the items
    are centered vertically'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flex` 和 `items-center` 创建了一个水平流动的弹性盒子，其中项目垂直居中'
- en: '`mb-1` adds a 1 spacing unit margin at the bottom of the element'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mb-1` 在元素的底部添加了1个间距单位边距'
- en: 'Replace the `css` attribute with a `className` attribute on the icon as follows:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图标上的 `css` 属性替换为 `className` 属性，如下所示：
- en: '[PRE224]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '`w-7` sets the element to a width of 7 spacing units.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`w-7` 将元素宽度设置为7个间距单位。'
- en: 'Replace the `css` attribute with a `className` attribute on the heading as
    follows:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题上的 `css` 属性替换为 `className` 属性，如下所示：
- en: '[PRE227]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '`font-bold` sets the font weight to be bold on the element.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`font-bold` 将元素的字体重量设置为粗体。'
- en: 'Replace the `css` attribute with a `className` attribute on the close button
    as follows:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将关闭按钮上的 `css` 属性替换为 `className` 属性，如下所示：
- en: '[PRE228]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Here, `border-none` removes the element border, and `bg-transparent` makes the
    element background transparent. `ml-auto` sets the left margin to automatic, which
    right aligns the element. `cursor-pointer` sets the mouse cursor to a pointer.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`border-none` 移除了元素边框，`bg-transparent` 使元素背景透明。`ml-auto` 将左边距设置为自动，使元素右对齐。`cursor-pointer`
    将鼠标光标设置为指针。
- en: 'Finally, replace the `css` attribute with a `className` attribute on the message
    container as follows:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将消息容器的 `css` 属性替换为 `className` 属性，如下所示：
- en: '[PRE236]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '`ml-7` sets the left margin on the element to 7 spacing units and `text-black`
    sets the text color to black.'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`ml-7` 将元素左边缘设置为7个间距单位，`text-black` 将文本颜色设置为黑色。'
- en: Run the app by running `npm start` in the terminal. After a few seconds, the
    app will appear in the browser.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `npm start` 来运行应用程序。几秒钟后，应用程序将在浏览器中显示。
- en: Notice that the alert component looks a bit nicer because of Tailwind’s default
    color palette and consistent spacing.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于 Tailwind 的默认颜色方案和一致的间距，警报组件看起来更美观。
- en: Inspect the elements in the DOM using the browser’s DevTools. Notice the Tailwind
    utility classes being used and notice the spacing units use CSS rem units.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器的 DevTools 检查 DOM 中的元素。注意使用的 Tailwind 工具类，并注意间距单位使用 CSS rem 单位。
- en: A key point to notice is that no CSS class name scoping occurs. There is no
    need for any scoping because the classes are general and reusable and not specific
    to any element.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的关键点是，没有发生 CSS 类名作用域。不需要任何作用域，因为类是通用的和可重用的，而不是特定于任何元素。
- en: '![Figure 5.8 – A styled alert using Tailwind](img/B19051_05__08.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
  zh: '![图5.8 – 使用 Tailwind 定制的警报](img/B19051_05__08.jpg)'
- en: Figure 5.8 – A styled alert using Tailwind
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 – 使用 Tailwind 定制的警报
- en: Stop the running app before continuing by pressing *Ctrl* + *C*.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，通过按 *Ctrl* + *C* 停止运行应用程序。
- en: To round off our understanding of Tailwind, let’s see what happens to the CSS
    in a production build. First, create a production build by executing `npm run
    build` in the terminal.
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了结束我们对 Tailwind 的理解，让我们看看生产构建中的 CSS 会发生什么。首先，通过在终端中执行 `npm run build` 来创建一个生产构建。
- en: After a few seconds, the build artifacts are created in the `build` folder.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，构建工件将在 `build` 文件夹中创建。
- en: Open the bundled CSS file from the `build/static/css` folder. Notice the base
    Tailwind styles at the start of the file. You will also see that all the Tailwind
    classes that we used are in this file.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `build/static/css` 文件夹打开打包的 CSS 文件。注意文件开头的基 Tailwind 样式。你还会看到我们使用的所有 Tailwind
    类都包含在这个文件中。
- en: '![Figure 5.9 – Tailwind CSS classes in a bundled CSS file](img/B19051_05__09.jpg)'
  id: totrans-482
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 打包的 CSS 文件中的 Tailwind CSS 类](img/B19051_05__09.jpg)'
- en: Figure 5.9 – Tailwind CSS classes in a bundled CSS file
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 打包的 CSS 文件中的 Tailwind CSS 类
- en: Note
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An important point is that Tailwind doesn’t add all its CSS classes – that would
    produce a massive CSS file! Instead, it only adds the CSS classes used in the
    app.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的观点是 Tailwind 不会添加所有它的 CSS 类——那样会产生一个巨大的 CSS 文件！相反，它只添加在应用中使用的 CSS 类。
- en: That completes the process of refactoring the alert component to use Tailwind.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了将警报组件重构为使用 Tailwind 的过程。
- en: 'Here’s a recap of what we learned about Tailwind:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对我们关于 Tailwind 学习的回顾：
- en: Tailwind is a well-thought-through collection of reusable CSS classes that can
    be applied to React elements
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tailwind 是一组经过深思熟虑的可重用 CSS 类集合，可以应用于 React 元素。
- en: Tailwind has a nice default color palette and a 4 px spacing scale, both of
    which can be customized
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tailwind 有一个不错的默认调色板和 4 像素的间距刻度，这两者都可以自定义。
- en: Tailwind is a plugin for PostCSS and executed at build time
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tailwind 是一个 PostCSS 插件，在构建时执行。
- en: Tailwind does not incur a runtime performance penalty like Emotion, because
    the styles aren’t created and applied at runtime
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Emotion 不同，Tailwind 不会产生运行时性能惩罚，因为样式不是在运行时创建和应用的。
- en: Only classes used on React elements are included in the CSS build bundle
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在 React 元素上使用的类才包含在 CSS 构建包中。
- en: Next, we will make the icons in the alert component look a bit nicer.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使警报组件中的图标看起来更美观。
- en: Using SVGs
  id: totrans-494
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SVG
- en: In this section, we will learn how to use SVG files in React and how to use
    them for the icons in the alert component.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在 React 中使用 SVG 文件以及如何将它们用于警报组件的图标。
- en: Understanding how to use SVGs in React
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解如何在 React 中使用 SVG
- en: '**SVG** stands for **Scalable Vector Graphics** and it is made up of points,
    lines, curves, and shapes based on mathematical formulas rather than specific
    pixels. This allows them to scale when resized without distortion. The quality
    of icons is important to get right – if they are distorted, they make the whole
    app feel unprofessional. Using SVGs for icons is common in modern web development.'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '**SVG** 代表 **可缩放矢量图形**，它由基于数学公式的点、线、曲线和形状组成，而不是特定的像素。这使得它们在缩放时不会扭曲。图标的品质对于正确呈现非常重要——如果它们被扭曲，会使整个应用感觉不专业。在现代网络开发中，使用
    SVG 为图标是很常见的。'
- en: 'Create React App configures webpack to use SVG files when a project is created.
    In fact, `logo.svg` is referenced in the template `App` component as follows:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: Create React App 在创建项目时配置 webpack 使用 SVG 文件。实际上，`logo.svg` 在模板 `App` 组件中被引用，如下所示：
- en: '[PRE239]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: In the preceding example, `logo` is imported as a path to the SVG file, which
    is then used on the `src` attribute on the `img` element to display the SVG.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`logo` 被导入为 SVG 文件的路径，然后用于 `img` 元素的 `src` 属性以显示 SVG。
- en: 'An alternate way of referencing SVGs is to reference them as a component as
    follows:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种引用 SVG 的方法是将其作为组件引用，如下所示：
- en: '[PRE240]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: SVG React components are available in a named import called `ReactComponent`.
    In the preceding example, the SVG component is aliased with the name `Logo`, which
    is then used in the JSX.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: SVG React 组件在名为 `ReactComponent` 的命名导入中可用。在前面的示例中，SVG 组件被别名 `Logo`，然后在 JSX 中使用。
- en: Next, we will learn how to use SVGs in the alert component.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何在警报组件中使用 SVG。
- en: Adding SVGs to the alert component
  id: totrans-505
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 SVG 添加到警报组件
- en: 'Carry out the following steps to replace the emoji icons in the alert component
    with SVGs:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以将警报组件中的表情符号图标替换为 SVG：
- en: First, create three files called `cross.svg`, `info.svg`, and `warning.svg`
    in the `src` folder. Then, copy and paste the content of these from the GitHub
    repository at [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5/Section5-Using-SVGs/app/src](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5/Section5-Using-SVGs/app/src).
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `src` 文件夹中创建三个名为 `cross.svg`、`info.svg` 和 `warning.svg` 的文件。然后，从 GitHub
    仓库 [https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5/Section5-Using-SVGs/app/src](https://github.com/PacktPublishing/Learn-React-with-TypeScript-2nd-Edition/tree/main/Chapter5/Section5-Using-SVGs/app/src)
    复制并粘贴这些文件的内容。
- en: 'Open `Alert.tsx` and add the following import statements to import the SVGs
    as React components:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Alert.tsx` 并添加以下导入语句以将 SVG 作为 React 组件导入：
- en: '[PRE241]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: We have given the SVG components appropriately named aliases.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为 SVG 组件赋予了适当的别名。
- en: 'Update the `span` element containing the emoji icons to use SVG icon components
    as follows:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新包含表情符号图标的 `span` 元素，以使用以下 SVG 图标组件：
- en: '[PRE244]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: We have used Tailwind to size and color the icons appropriately.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 Tailwind 适当地调整了图标的大小和颜色。
- en: 'Next, update the emoji close icon to the SVG close icon as follows:'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新表情符号关闭图标为以下 SVG 关闭图标：
- en: '[PRE255]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Run the app by running `npm start` in the terminal. After a few seconds, the
    app will appear in a browser containing the improved alert component:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行 `npm start` 来运行应用程序。几秒钟后，应用程序将以包含改进的警报组件的浏览器形式出现：
- en: '![Figure 5.10 – An alert with an SVG icon](img/B19051_05__10.jpg)'
  id: totrans-535
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 带有 SVG 图标的警报](img/B19051_05__10.jpg)'
- en: Figure 5.10 – An alert with an SVG icon
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 带有 SVG 图标的警报
- en: That completes the alert component – it is looking much better now.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了警报组件——它现在看起来好多了。
- en: 'Here’s a quick recap of what we learned about using SVGs in React apps:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于在 React 应用中使用 SVG 的快速回顾：
- en: Webpack needs to be configured to bundle SVG files and Create React App does
    this configuration for us
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 需要配置以打包 SVG 文件，Create React App 为我们做了这个配置。
- en: The default import for an SVG file is the path to the SVG, which can then be
    used in an `img` element
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG 文件的默认导入是 SVG 的路径，然后可以在 `img` 元素中使用。
- en: A named import called `ReactComponent` can be used to reference the SVG as a
    React component in JSX
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用名为 `ReactComponent` 的命名导入来在 JSX 中将 SVG 引用为 React 组件。
- en: Next, we will summarize what we have learned in this chapter.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将总结本章所学的内容。
- en: Summary
  id: totrans-543
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about four methods of styling.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了四种样式化方法。
- en: First, we learned that plain CSS could be used to style React apps, but all
    the styles in the imported CSS file are bundled regardless of whether a style
    is used. Also, the styles are not scoped to a specific component – we observed
    the `container` CSS class names clashing with the `App` and `Alert` components.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们了解到纯 CSS 可以用来样式化 React 应用，但所有导入的 CSS 文件中的样式都会被打包，无论是否使用了某个样式。此外，样式并不是作用域到特定的组件——我们观察到
    `container` CSS 类名与 `App` 和 `Alert` 组件冲突。
- en: Next, we learned about CSS modules, which allows us to write plain CSS files
    imported in a way that scopes styles to the component. We learned that CSS modules
    is an open source library pre-installed and pre-configured in projects created
    with Create React App. We saw how this resolved the CSS clashing problem but didn’t
    remove redundant styles.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了关于 CSS 模块的内容，它允许我们以作用域到组件的方式导入纯 CSS 文件。我们了解到 CSS 模块是一个开源库，在用 Create
    React App 创建的项目中预先安装和配置。我们看到这解决了 CSS 冲突问题，但没有移除冗余样式。
- en: Then, we discussed CSS-in-JS libraries, which allow styles to be defined directly
    on the React component. We used emotion’s `css` prop to style the alert component
    without an external CSS file. The nice thing about this approach is that conditional-style
    logic can be implemented more quickly. We learned that emotion’s styles are scoped
    like CSS modules, but the scoping happens at runtime rather than at build time.
    We also understood that the small performance cost of this approach is because
    of the styles being created at runtime.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们讨论了 CSS-in-JS 库，它允许在 React 组件上直接定义样式。我们使用 emotion 的 `css` 属性来样式化警报组件，而不需要外部
    CSS 文件。这种方法的优点是，条件样式逻辑可以更快地实现。我们了解到 emotion 的样式作用域类似于 CSS 模块，但作用域是在运行时而不是在构建时发生的。我们还了解到，这种方法的微小性能成本是因为样式是在运行时创建的。
- en: The fourth styling approach we looked at was using Tailwind CSS. We learned
    that Tailwind provides a set of reusable CSS classes that can be applied to React
    elements, including a nice default color palette and a 4 px spacing scale, both
    of which can be customized. We learned that only the used Tailwind classes are
    included in the production build.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨的第四种样式方法是使用 Tailwind CSS。我们了解到 Tailwind 提供了一组可重用的 CSS 类，可以应用于 React 元素，包括一个漂亮的默认调色板和
    4 px 的间距刻度，这两者都可以自定义。我们还了解到，只有使用的 Tailwind 类会被包含在生产构建中。
- en: Finally, we learned that Create React App configures webpack to enable the use
    of SVG files. SVGs can be referenced as a path in an `img` element or as a React
    component using a `ReactComponent` named `import`.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解到 Create React App 配置了 webpack 以启用 SVG 文件的使用。SVG 可以作为 `img` 元素中的路径引用，或者作为名为
    `import` 的 React 组件使用。
- en: In the next chapter, we will look at implementing multiple pages in React apps
    with a popular library called React Router.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用名为React Router的流行库在React应用中实现多页面的方法。
- en: Questions
  id: totrans-551
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to check what you have learned about React styling:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以检查您对React样式的了解：
- en: Why could the following use of plain CSS be problematic?
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么以下使用纯CSS可能会有问题？
- en: '[PRE262]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'We have a component styled using CSS modules as follows:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个使用CSS模块样式化的组件，如下所示：
- en: '[PRE263]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: 'We have another component styled using CSS modules as follows:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个使用CSS模块样式化的组件，如下所示：
- en: '[PRE267]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Will the styles of these `div` elements clash, given that they are using the
    `wrapper` class name?
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们都使用`wrapper`类名，这些`div`元素的样式是否会冲突？
- en: 'We have a component styled using CSS modules as follows:'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有一个使用CSS模块样式化的组件，如下所示：
- en: '[PRE268]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: 'The styles in `styles3.module.css` are as follows:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '`styles3.module.css`中的样式如下：'
- en: '[PRE273]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: The styles aren’t being applied when the app is run. What is the problem?
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用运行时，样式没有被应用。问题是什么？
- en: We are defining a reusable button component with a `kind` prop that can be `"square"`
    or `"rounded"`. The rounded button should have a 04 px border radius, and the
    square button should have no border radius. How could we define this conditional
    style using Emotion’s `css` prop?
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在定义一个具有`kind`属性的可用按钮组件，该属性可以是`"square"`或`"rounded"`。圆形按钮应该有4px的边框半径，而方形按钮应该没有边框半径。我们如何使用Emotion的`css`属性定义这种条件样式？
- en: 'We are styling a button element using Tailwind. It is currently styled as follows:'
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在使用Tailwind对按钮元素进行样式化。它目前被样式化为以下这样：
- en: '[PRE274]'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: How can we enhance the style by making the button background a 700 shade of
    blue when the user hovers over it?
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何通过将按钮背景设置为用户悬停时的700度蓝色来增强样式？
- en: 'A logo SVG is referenced as follows:'
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下引用一个logo SVG：
- en: '[PRE277]'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: However, the logo isn’t rendered. What is the problem?
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，logo没有被渲染。问题是什么？
- en: 'We are styling a button element using Tailwind that has a `color` prop to determine
    its color and is styled as follows:'
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在使用Tailwind对具有`color`属性以确定其颜色的按钮元素进行样式化，该属性如下所示：
- en: '[PRE281]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: However, the button color doesn’t work. What is the problem?
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，按钮颜色不起作用。问题是什么？
- en: Answers
  id: totrans-589
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'The wrapper CSS class could clash with other classes. To reduce this risk,
    the class name can be manually scoped to the component:'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包装器CSS类可能会与其他类冲突。为了降低这种风险，可以将类名手动范围限制到组件中：
- en: '[PRE284]'
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: The CSS won’t clash because CSS modules will scope the class names to each component.
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS不会冲突，因为CSS模块会将类名范围限制在每个组件中。
- en: 'The wrong class name is referenced in the component – it should be `wrap` rather
    than `wrapper`:'
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组件中引用了错误的类名 - 它应该是`wrap`而不是`wrapper`：
- en: '[PRE285]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'The `css` prop on the button could be as follows:'
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮上的`css`属性可以是以下这样：
- en: '[PRE290]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'The style can be adjusted as follows to include the hover style:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 样式可以调整如下以包括悬停样式：
- en: '[PRE297]'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '`Logo` will hold the path to the SVG rather than a component. The import statement
    can be adjusted as follows to import a logo component:'
  id: totrans-611
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Logo`将持有SVG的路径而不是组件。导入语句可以调整如下以导入一个logo组件：'
- en: '[PRE300]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: The `bg-${color}-500` class name is problematic because this can only be resolved
    at runtime because of the `color` variable. The used Tailwind classes are determined
    at build time and added to the bundle, meaning the relevant background color classes
    won’t be bundled. This means that the background color style won’t be applied
    to the button.
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bg-${color}-500`类名有问题，因为这只能在运行时解决，因为存在`color`变量。使用的Tailwind类在构建时确定并添加到包中，这意味着相关的背景颜色类不会打包。这意味着背景颜色样式不会应用到按钮上。'
