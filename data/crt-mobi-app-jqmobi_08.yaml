- en: Chapter 8. Integrating jQuery Mobile into Existing Sites
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章 - 把jQuery Mobile整合到现有网站中
- en: We can't all be so lucky enough to only work on new sites. Maybe the customer
    is unwilling to pay for a mobile-first site or maybe they like their desktop site
    as it is and just want a mobile site. Your mobile implementation could be the
    gateway to future business with the client. We need to be ready with a few techniques
    to wedge jQuery Mobile into their existing site.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并非都有幸只为新网站工作。也许客户不愿意为移动优先的站点付费，或者他们喜欢他们的桌面站点，只想要一个移动站点。你的移动实施可能是未来与客户业务的入口。我们需要准备一些技术手段将jQuery
    Mobile嵌入到他们现有的站点。
- en: 'What we''ll cover is as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖的内容如下：
- en: Detecting mobile – server-side, client-side, and the combination of the two
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端、客户端的移动检测，以及两者的结合
- en: Mobilizing full site pages – the hard way
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动化全站页面 - 比较困难的方式
- en: Mobilizing full site pages – the easy way
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动化全站页面 - 比较简单的方式
- en: Detecting mobile – server-side, client-side, and the combination of the two
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端、客户端的移动检测，以及两者的结合
- en: Not everyone is doing responsive design so there's a pretty good chance you're
    going to need to know how to detect mobile devices. We've approached the topic
    lightly before but now let's get serious.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并非每个人都在做响应式设计，所以你很有可能需要知道如何检测移动设备。我们之前只是轻描淡写地谈到过这个话题，现在让我们认真对待它。
- en: Browser sniffing versus feature detection
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器嗅探与特性检测
- en: This topic has the potential to start a geek war. On one side you have people
    who proclaim the virtues of community-maintained databases that perform mobile
    detection on the server side. WURFL is a prime example. Using it, we can get a
    lot of information about the device that is visiting our sites. Listing it all
    here would just be a waste of space. Check out [http://www.tera-wurfl.com/explore/index.php](http://www.tera-wurfl.com/explore/index.php)
    to see it in action or view the entire list of capabilities at [http://www.scientiamobile.com/wurflCapability/](http://www.scientiamobile.com/wurflCapability/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题有潜力引发一场极客之战。一方面，有人赞美由社区维护的数据库在服务器端执行移动设备检测的优点。WURFL就是一个典型的例子。使用它，我们可以获取访问我们网站的设备的大量信息。在这里列出所有内容只是浪费空间。可以去查看[http://www.tera-wurfl.com/explore/index.php](http://www.tera-wurfl.com/explore/index.php)来看它的运行情况，或者查看所有功能的完整列表在[http://www.scientiamobile.com/wurflCapability/](http://www.scientiamobile.com/wurflCapability/)。
- en: On the other side of the debate, people point out that the server-side detection
    (even when it is database driven) can lead to brand new devices not being recognized
    until they're in the database and the site administrator updates their local copy.
    This is not completely true. All Androids say so. It is the same with iPhone,
    iPad, Blackberry, and Microsoft. Still, a much more future-friendly ([http://futurefriend.ly/](http://futurefriend.ly/))
    approach is to use feature detection. For instance, does the device support canvas
    or perhaps touch events? Almost certainly, if you support such technologies and
    events, you're primed for a mobile experience with jQuery Mobile.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在辩论的另一面，有人指出服务器端的检测（即使是数据库驱动的）可能导致全新的设备在数据库中没有被识别，直到它们进入数据库，站点管理员更新他们的本地副本。这并非完全正确。所有的安卓都是这样。同样的情况也发生在iPhone、iPad、BlackBerry和Microsoft上。但是，一个更具有未来前景的([http://futurefriend.ly/](http://futurefriend.ly/))方法是使用特性检测。例如，设备是否支持画布或触摸事件？几乎可以肯定，如果你支持这些技术和事件，你就有了使用jQuery
    Mobile的移动体验的条件。
- en: Regardless, at this point we're going to assume that we're working with a company
    that already has a website and now wants a mobile site too. Therefore, we'll need
    to be able to detect mobile and route them to the correct site.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，在这一点上，我们要假设我们正在为一家已经拥有网站且现在也想要一个移动站点的公司工作。因此，我们需要能够检测移动设备并将它们路由到正确的站点。
- en: WURFL – server-side database-driven browser sniffing
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WURFL – 服务器端数据库驱动的浏览器嗅探
- en: 'WURFL has APIs for Java, PHP, and .NET. Pick up a copy of the version that
    works for you at [http://wurfl.sourceforge.net/apis.php](http://wurfl.sourceforge.net/apis.php).
    Since virtually every single hosting provider out there supports PHP out of the
    box, we''re going to go with the PHP example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: WURFL拥有Java、PHP和.NET的API。在[http://wurfl.sourceforge.net/apis.php](http://wurfl.sourceforge.net/apis.php)可以下载适合你的版本。由于几乎每个主机提供商都默认支持PHP，我们将以PHP示例为例：
- en: '![WURFL – server-side database-driven browser sniffing](img/0069_08_00.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![WURFL – 服务器端数据库驱动的浏览器嗅探](img/0069_08_00.jpg)'
- en: I simply used the built-in server that comes on Mac OS X but you could also
    use MAMP ([http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html)).
    You can easily run the example on any hosting platform such as 1&1, GoDaddy, Host
    Gator, take your pick. If you want to try the examples on your own Windows computer,
    you can use XAMPP ([http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html))
    or WAMP ([http://www.wampserver.com/en/](http://www.wampserver.com/en/)) as a
    quick shortcut. I'm not going to get into the particulars of server setup and
    environment configuration in this book. That could probably justify a book of
    its own.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是使用了 Mac OS X 自带的服务器，但你也可以使用 MAMP ([http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html))。你可以轻松地在任何托管平台上运行示例，比如
    1&1、GoDaddy、Host Gator，你随便选。如果你想在自己的 Windows 计算机上尝试这些示例，你可以使用 XAMPP ([http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html))
    或 WAMP ([http://www.wampserver.com/en/](http://www.wampserver.com/en/)) 作为快捷方式。我不打算在这本书中详细介绍服务器设置和环境配置。这可能需要一本专门的书来解释。
- en: So, PHP… here we go. Start at [http://wurfl.sourceforge.net/php_index.php](http://wurfl.sourceforge.net/php_index.php).
    From there you can download the latest copy of **WURFL API package** and unzip
    it. Take the entire unzipped folder and dump it anywhere in your site. If all
    is well, you should be able to hit the demo page and see details about your browser
    and device. On my Mac, it was [http://127.0.0.1/~sgliser/wurfl-php/examples/demo/index.php](http://127.0.0.1/~sgliser/wurfl-php/examples/demo/index.php)
    but your path will vary.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，PHP… 这就是我们要做的。从 [http://wurfl.sourceforge.net/php_index.php](http://wurfl.sourceforge.net/php_index.php)
    开始。从那里，你可以下载最新版本的 **WURFL API package** 并解压缩它。把整个解压后的文件夹放在你的网站的任何位置。如果一切正常，你应该能够访问演示页面并查看有关你的浏览器和设备的详细信息。在我的
    Mac 上，是 [http://127.0.0.1/~sgliser/wurfl-php/examples/demo/index.php](http://127.0.0.1/~sgliser/wurfl-php/examples/demo/index.php)，但你的路径可能会有所不同。
- en: 'When you run the default example, you can instantly see how useful it is, but
    let''s make it even better. This version I created puts the most useful at the
    top and lists all other options below:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行默认示例时，你可以立即看到它有多有用，但让我们让它变得更好一些。我创建的这个版本将最有用的功能放在顶部，并在下面列出所有其他选项：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here we create the only real page, in a jQuery Mobile fashion:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们按照 jQuery Mobile 的方式创建了唯一的真实页面：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here we start listing out the entire set of known data from WURFL simply by
    looping through the array of properties:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过循环遍历属性数组来列出 WURFL 中已知数据的整个集合：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note, we've *conditionally* made this a jQuery Mobile page by using the server-side
    detection to see if the user is mobile. Only then do we inject the jQM libraries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们通过使用服务器端检测来查看用户是否是移动用户，*有条件地*将其制作成了 jQuery Mobile 页面。只有在用户是移动用户时，我们才注入
    jQM 库。
- en: 'The attributes under the *Very Useful* section are probably all you really
    need for most day-to-day work but be sure you at least skim over the other options.
    The most useful features are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *非常有用* 部分下的属性可能是你在日常工作中真正需要的所有内容，但请务必至少浏览一下其他选项。最有用的功能如下：
- en: '`is_wireless_device`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_wireless_device`'
- en: '`mobile_browser`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mobile_browser`'
- en: '`is_tablet`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_tablet`'
- en: '`pointing_method`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pointing_method`'
- en: '`resolution_width`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolution_width`'
- en: '`resolution_height`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resolution_height`'
- en: 'Now, granted, this does not tell us everything about the browser/device. For
    instance, an iPhone 4S or 5 will be recognized as an original iPhone. There''s
    also no distinguishing the iPad mini using WURFL. This is because the user agents
    have never been updated as the Apple devices have evolved. WURFL has no way of
    knowing that a device has a high pixel density and should thus be sent higher
    resolution images. Therefore, we''ll still need to use media queries to determine
    pixel ratios and adapt our graphics appropriately. Here is a brief example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，需要说明的是，这并不能告诉我们有关浏览器/设备的所有信息。例如，iPhone 4S 或 5 将被识别为原始 iPhone。WURFL 也无法区分使用
    WURFL 的 iPad mini。这是因为随着 Apple 设备的发展，用户代理从未更新。WURFL 无法知道设备具有高像素密度，因此应该发送更高分辨率的图像。因此，我们仍然需要使用媒体查询来确定像素比率，并相应地调整我们的图形。这里是一个简短的示例：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using media queries is pretty much the only way to detect an iPad mini. It has
    the same resolution as the iPad 2, just in a smaller format. However, as we can
    see from the preceding code, we can qualify a media query using DPI. The iPad
    2 has 132 dpi. The iPad mini has 163\. For more on this, check out [http://www.mobilexweb.com/blog/ipad-mini-detection-for-html5-user-agent](http://www.mobilexweb.com/blog/ipad-mini-detection-for-html5-user-agent).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用媒体查询几乎是检测 iPad mini 的唯一方法。它具有与 iPad 2 相同的分辨率，只是格式较小。但是，正如我们从前面的代码中可以看到的那样，我们可以使用
    DPI 对媒体查询进行限定。iPad 2 的 DPI 为 132。iPad mini 的 DPI 为 163。更多信息，请访问 [http://www.mobilexweb.com/blog/ipad-mini-detection-for-html5-user-agent](http://www.mobilexweb.com/blog/ipad-mini-detection-for-html5-user-agent)。
- en: So far, we've pretty much assumed smartphones but remember that jQuery Mobile
    is a framework that is also perfect for … not-so-smart-phones. You may have customers
    in a market that is not as developed and uses cell connections for nearly everything.
    There may not be as many JavaScript-enabled touchscreen phones there. In a case
    like that, you won't be able to use JavaScript-based feature detection. Very quickly,
    WURFL or some other server-side detection will become your only reasonable option
    for detecting wireless devices and serving them up something useful.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们几乎假定了智能手机，但请记住，jQuery Mobile 是一个同样适用于……不那么智能的手机的框架。您可能有客户在一个不那么发达并且几乎使用手机连接的市场。在那里可能没有那么多启用
    JavaScript 的触摸屏手机。在这种情况下，您将无法使用基于 JavaScript 的功能检测。非常快地，WURFL 或其他服务器端检测将成为检测无线设备并为其提供有用内容的唯一合理选项。
- en: JavaScript-based browser sniffing
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 JavaScript 的浏览器嗅探
- en: 'It is arguable that this may be (academically) the worst possible way to detect
    mobile but it does have its virtues. This pragmatic example is very useful in
    that it gives you a lot of options. Perhaps our budget is limited and so we''ve
    only tested for certain devices. We want to be sure we''re only letting in people
    that we know will have a good experience. Case in point: no BlackBerry device
    below Version 6 will be allowed because we''ve chosen to do some fancy JavaScript
    templating that Version 5 and lower just can''t handle. Perhaps we''ve also not
    taken the time yet to optimize for tablets but in the mean time we can start providing
    a better experience for any smartphones. In any case, this could come in quite
    useful:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，这可能是（学术上）检测移动设备的最糟糕的方法，但它确实有其优点。这个实用的例子非常有用，因为它给了您很多选择。也许我们的预算有限，因此我们只测试了某些设备。我们想确保我们只让我们知道会有良好体验的人进来。有一个例子：不会允许使用
    BlackBerry 版本低于版本 6 的设备，因为我们选择使用了一些版本低于版本 5 的精美 JavaScript 模板。也许我们还没有花时间为平板电脑进行优化，但同时我们可以开始为任何智能手机提供更好的体验。无论如何，这可能会非常有用：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We've done a little work here to future-proof the detection by creating a classification
    for unknown mobile devices as being anything running WebKit that has a small screen.
    Chances are, any new platforms that come out will be using WebKit as its browser.
    Microsoft is the only exception that still seems to think it has something more
    to offer on its own and their platform is easy enough to sniff. This approach,
    while flexible, would require direct intervention if a new platform was launched
    without a WebKit browser. But, that doesn't happen very often. Even if it does,
    it would take a while for that platform to gain a critical mass worth considering.
    If you're going by the 80/20 rule (worry about reaching 80 percent successfully
    and reach the last 20 percent when you can), this gets you well into the upper
    90s.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了一些工作，通过创建一个未知移动设备的分类，将其视为运行 WebKit 并具有小屏幕的任何设备，来未来证明检测的有效性。有可能，任何新推出的平台都将使用
    WebKit 作为其浏览器。微软是唯一一个似乎仍然认为自己有更多东西可以提供的例外，他们的平台足够容易被嗅探到。尽管这种方法灵活，但如果没有一个 WebKit
    浏览器启动一个新平台，就需要直接干预。但是，这种情况并不经常发生。即使发生了，该平台也需要一段时间才能获得值得考虑的关键性质量。如果您按照 80/20 法则（成功达到
    80% 并在能够时达到剩下的 20%），那么这将使您的成功率远远超过 90%。
- en: JavaScript-based feature detection using Modernizr
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Modernizr 进行基于 JavaScript 的功能检测
- en: 'There are several ways that you can perform feature detection. Probably the
    easiest way is to use a tool such as Modernizr ([http://modernizr.com/](http://modernizr.com/)).
    You can customize a download to only detect the features that you care about.
    If you want to do HTML5 audio/video, it might be nice to know if you can:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以进行功能检测。可能最简单的方法是使用像 Modernizr（[http://modernizr.com/](http://modernizr.com/)）这样的工具。您可以定制下载以仅检测您关心的功能。如果您想使用
    HTML5 音频/视频，知道您是否可以可能很好：
- en: '![JavaScript-based feature detection using Modernizr](img/0069_08_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Modernizr 进行基于 JavaScript 的特性检测](img/0069_08_01.jpg)'
- en: The platform is not exactly light. Just the options shown in the preceding screenshot
    led to a 12 K minified JS. But hey, we throw around images of that size like they're
    nothing. At least a JavaScript library is useful. This still won't tell you if
    the user coming to you is mobile but is that even the right question to be asking?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个平台并不是特别轻便。仅在前面的屏幕截图中显示的选项就导致了 12 K 压缩后的 JS。但是嘿，我们可以轻易地处理那样大小的图像。至少 JavaScript
    库是有用的。这仍然不会告诉你访问你的用户是否是移动设备，但这是否是正确的问题？
- en: Perhaps, all we need to know is that the device we're looking at supports touch
    events. The other options are great for knowing what you can and cannot do but
    if the user interface is touch, even if it's a tablet or a full-sized touch based
    monitor, give the user the interface they deserve. Give them jQuery Mobile.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或许，我们只需要知道我们正在查看的设备是否支持触摸事件。其他选项对于知道您可以和不能做什么是很好的，但是如果用户界面是触摸的，即使是平板电脑或全尺寸的触摸型显示器，也应该给用户他们应得的界面。给他们
    jQuery Mobile。
- en: JavaScript-based lean feature detection
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 JavaScript 的精简特征检测
- en: 'This useful little snippet of code is something cobbled together for detecting
    mobile. It is a blending of feature detection and browser sniffing. Most modern
    smartphones will support all the event and APIs we''re looking for here. Microsoft,
    being the special case they always seem to be, has to be browser sniffed. According
    to their Windows Phone developer blog, you can simply check the user agent for
    IEMobile. Fair enough, here''s the result:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个有用的小代码片段是为检测移动设备而凑合在一起的。它是特性检测和浏览器嗅探的混合体。大多数现代智能手机都将支持我们在这里寻找的所有事件和 API。微软，总是显得有些特殊，必须进行浏览器嗅探。根据他们的
    Windows Phone 开发者博客，你可以简单地检查用户代理是否为 IEMobile。好吧，这是结果：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If for some reason we decided that we didn't want to send tablets to our jQM
    masterpieces, we could always throw in some of the other tests from the previous
    section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，我们决定不将平板发送到我们的 jQM 杰作，我们总是可以从上一节中加入一些其他测试。
- en: Server-side plus client-side detection
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端加客户端检测
- en: Here's an idea, when the user first hits your server, send them a page whose
    only job is to run Modernizer and then send the resulting capabilities back to
    the server so all collected knowledge is in one place.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个主意，当用户首次访问您的服务器时，发送一个页面，其唯一任务是运行 Modernizer，然后将结果能力返回给服务器，以便所有收集的知识都在一个地方。
- en: 'This file is `test.html` in the code files package for the chapter:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件在章节的代码文件包中名为 `test.html`：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just to make the circle complete. Here is a version of the WURFL detection
    scripts that will return the values as JSON so we can store it to HTML5 `sessionStorage`.
    This file is found at `/wurfl-php/examples/demo/session_set.php`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使圆圈完整。这里是一些 WURFL 检测脚本的版本，它将返回 JSON 格式的值，以便我们可以将其存储到 HTML5 的 `sessionStorage`
    中。此文件位于 `/wurfl-php/examples/demo/session_set.php`：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: This example has commented out the easy way of JSON encoding an associative
    array. Replacing that is some PHP code that will send back JSON encoding that
    uses real Boolean and numeric values instead of storing everything as a string.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例已经注释掉了 JSON 编码关联数组的简单方式。用一些 PHP 代码替换，将发送回使用真实布尔值和数值的 JSON 编码，而不是将所有内容都存储为字符串。
- en: With these files, you now know everything that can be known about your visitors
    on both the server side and client side.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些文件，你现在可以了解关于你的访问者在服务器端和客户端的一切都是可知的。
- en: Mobilizing full-site pages – the hard way
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动化全站页面 - 走弯路
- en: 'Why would we do it the hard way? Why? Really there''s only one good reason:
    to keep the content on the same page so that the user doesn''t have one page for
    mobile and one page for desktop. When e-mails and tweets and such are flying around,
    the user generally doesn''t care if they''re sending out the mobile view or the
    desktop view and they shouldn''t. As far as they''re concerned, they''re sending
    content to someone. This is one of the prime arguments for responsive design.
    But don''t worry, we''ll take this this into consideration later when we do things
    the easy way too.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要走弯路？为什么？实际上只有一个很好的理由：为了将内容保持在同一页上，这样用户就不会有一个用于移动设备的页面和一个用于桌面的页面。当电子邮件和推特等信息飞来飞去时，用户通常不在乎他们是发送移动视图还是桌面视图，而且他们也不应该在乎。就他们而言，他们正在向某人发送内容。这是响应式设计的主要论点之一。但别担心，当我们也以简单的方式处理事情时，我们将在稍后考虑到这一点。
- en: Generally, it's pretty easy to tell what parts of a site would translate to
    mobile. Almost regardless of the site layout there are data attributes you'll
    be throwing onto existing tags to mobilize them. When jQuery Mobile's libraries
    are not present on the page, these attributes will simply sit there and cause
    no harm. Then you can use one of our many detection techniques to decide when
    to throw the jQM libraries in.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，很容易看出站点的哪些部分会转换为移动站点。几乎不管站点布局如何，您都会在现有标签上添加`data`属性来使其移动化。当页面上没有jQuery
    Mobile的库时，这些属性将保持原样，不会造成任何伤害。然后您可以使用我们的许多检测技术之一来决定何时添加jQM库。
- en: Know your role
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解您的角色
- en: 'Let''s consider some of key data-role attributes that are needed to mobilize
    a page:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一些移动页面所需的关键`data-role`属性：
- en: '`data-role="page"`: This contains everything that will show in the mobile view.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-role="page"`：这包含了移动视图中将显示的所有内容。'
- en: '`data-role="header"`: This wraps `h1`, `h2`, `h(x)`, and up to two links in
    the appearance of a bar and turns the links into buttons. You can put more into
    a header but it''s not advisable. If you''ve got that much to try to squeeze into
    the header, you might be better off having a single "Menu" button. Header bars
    can have their positions fixed. Anything within the header bar will remain fixed
    at the top.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-role="header"`：这会将`h1`、`h2`、`h(x)`和多达两个链接包装成条形外观，并将链接转换为按钮。您可以将更多内容放入页眉中，但这是不建议的。如果您有很多内容尝试挤入页眉中，您可能最好只留一个“菜单”按钮。页眉可以固定其位置。页眉内的任何内容都将固定在顶部。'
- en: '`data-role="content"`: This provides a margin around your content.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-role="content"`：这为你的内容提供了边距。'
- en: '`data-role="button"`: This turns a link into a button.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-role="button"`：这将链接转换为按钮。'
- en: '`data-role="navbar"`: This creates a navbar when wrapped around a list of links.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-role="navbar"`：这在链接列表周围包装时创建一个导航栏。'
- en: '`data-role="footer"`: This wraps anything you want at the bottom. It''s a great
    place for secondary links, next-step navigation, contact us, and all that legal
    stuff that signals the end of all usefulness. This can also be given a fixed position.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-role="footer"`：这会在底部包装任何您想要的内容。这是次要链接、下一步导航、联系我们以及所有标志着所有有用性结束的法律内容的绝佳位置。这也可以设为固定位置。'
- en: '`data-role="none"`: This prevents jQuery Mobile from styling the content.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-role="none"`：这将防止jQuery Mobile对内容进行样式处理。'
- en: From an ideal user experience perspective, pages would contain nothing more
    than what was necessary for the user to accomplish the task for which they came
    to that page. *Let us have a moment of silence for the dream lost…* With that
    in mind, remember that anything inside of `data-role="page"` will show up on the
    mobile view. So, the best thing you can do on most full-site pages is to determine
    which chunk of the page the user actually came for, tag that section with a role
    of `content`, and then immediately wrap that with a tag whose role is `page`.
    In so doing, you will automatically cut out the rest of the cruft that fills the
    rest of most web pages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从理想的用户体验角度来看，页面上的内容不应该超出用户完成他们访问该页面的任务所需的内容。*让我们为失去的梦想默哀一会…* 在此之前，请记住，任何`data-role="page"`中的内容都将显示在移动视图中。因此，在大多数全站页面上，您可以做的最好的事情就是确定用户实际上想要来到该页面的页面部分，然后使用`content`角色标记该部分，并立即用`page`角色包装起来。这样做，您将自动剔除大多数网页其余部分的琐事。
- en: Step 1 of 2 – focus on content, marketing cries foul!
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步中的第1步 – 关注内容，市场抗议！
- en: 'At this point anyone with a marketing background might be crying foul because
    this approach cuts out their messaging and targeted advertising and such. However,
    it is worth noting that people have had the ability to do this very thing on their
    own for a while now. Controversial services such as Pocket (formerly known as
    Read it Later), Instapaper, and even the simple Reader tool on iOS Safari are
    providing the user with exactly what they want. Here is an example of a normal
    desktop site on the left and how the iOS Reader strips away everything but the
    content itself:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，拥有市场营销背景的任何人可能会因为这种方法削减了他们的宣传和定向广告等而哭泣。然而，值得注意的是，人们已经有能力很长时间以来能够自己做这件事。诸如Pocket（前身为Read
    it Later）、Instapaper，甚至iOS Safari上的简单阅读工具等具有争议的服务都能向用户提供他们想要的内容。下面是一个普通桌面站点的例子，左边是iOS
    Reader如何去除除内容本身以外的一切。
- en: '![Step 1 of 2 – focus on content, marketing cries foul!](img/0069_08_02.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![第2步中的第1步 – 关注内容，市场抗议！](img/0069_08_02.jpg)'
- en: We have a choice; provide the user with what they want in the format they want
    or possibly lose the chance to reach them at all as they turn to such tools. This
    will require a more creative approach to marketing activities on mobile. But make
    no mistake, ejecting everything else but the core of the page should be your first
    step.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个选择；提供用户想要的格式和内容，或者可能会失去与他们联系的机会，因为他们会转向这些工具。这将需要在移动端进行更有创意的市场营销活动。但不要误解，除了页面核心以外的所有内容都应该是你的第一步。
- en: After gutting everything but the main content of the page, we'll also need to
    gut the styles and scripts that are currently in the head. If we have access to
    modify the page itself we can easily do this on the server side using WURFL. Otherwise,
    we could always use JavaScript to remove the stylesheets and scripts we don't
    want and then inject ours. We could also simply highjack the first stylesheet
    and then remove the rest and do the same with the scripts to first bring in jQuery
    and then jQuery Mobile. There are a thousand ways to tackle the situation but
    I'd really recommend using WURFL if you're going to mobilize an existing page
    in this fashion. Otherwise, it's just going to get messy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在清除了页面的除主要内容以外的所有内容之后，我们还需要清除当前位于头部的样式和脚本。如果我们可以修改页面本身，我们可以轻松地在服务器端使用WURFL来实现这一点。否则，我们可以始终使用JavaScript来删除我们不想要的样式表和脚本，然后注入我们自己的样式表和脚本。我们还可以简单地劫持第一个样式表，然后删除其余的样式表，并以同样的方式处理脚本，首先引入jQuery，然后是jQuery
    Mobile。有一千种方式可以解决这个情况，但如果您打算以这种方式移动现有页面，我真的建议使用WURFL。否则，事情会变得一团糟。
- en: Step 2 of 2 – choose global navigation style and insert
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步/2 - 选择全局导航样式并插入
- en: So, at this point, we've got the beginnings of the page but there may still
    be some minor things that need removing. Having a mobile stylesheet to take care
    of those few overrides will be quite helpful and quicker than cleaning up with
    JavaScript DOM manipulation. That's pretty simple, the next big question is, how
    do we deal with the global navigation since we just explicitly excluded it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在这一点上，我们已经有了页面的开头，但可能仍然有一些需要移除的小东西。拥有一个移动端样式表来处理那些少数需要覆盖的样式会非常有帮助，而且比使用JavaScript
    DOM操作更快。这很简单，下一个重要的问题是，我们应该如何处理全局导航，因为我们刚刚明确地排除了它。
- en: Global nav as a separate page
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局导航作为单独的页面
- en: 'This is probably the simplest approach and keeps the interface as clean as
    possible (mentioned in the following steps):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是最简单的方法，并尽可能保持界面的清洁（在以下步骤中提到）：
- en: Wrap the global nav in its own separate roles of `page` and `content` and be
    sure they're easily selectable.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将全局导航包装在自己独立的`page`和`content`角色中，并确保它们易于选择。
- en: 'At the bottom of the page (or really anywhere after the global nav and content
    are complete) put in a script that moves the containing page of global nav below
    the content. This is particularly important because we are now in a multipage
    view and the first "page" in the DOM will be shown to the user when jQuery Mobile
    kicks in. We want to do this before jQuery Mobile even knows it should do anything.
    If we don''t, the user who came to the site expecting to read something will first
    be greeted by a global nav. Here is a very simple example based on the pages we
    previously saw:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部（或者在全局导航和内容完成后的任何位置）放置一个脚本，将全局导航所在的页面移动到内容下方。这一点特别重要，因为我们现在处于多页面视图中，而DOM中的第一个“页面”将在jQuery
    Mobile启动时显示给用户。我们希望在jQuery Mobile甚至知道自己应该做些什么之前就完成这个操作。如果我们不这样做，那么来到网站上期望阅读某些内容的用户首先会被全局导航所迎接。以下是基于我们之前看到的页面的一个非常简单的示例：
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Append headers to these internal pages so they can link to each other:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这些内部页面中添加标题，以便它们可以相互链接：
- en: '[PRE9]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Global nav as a separate page](img/0069_08_03.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![全局导航作为单独的页面](img/0069_08_03.jpg)'
- en: Global nav at the bottom
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 底部的全局导航
- en: 'In pages such as articles where the user is likely to read all the way to the
    bottom, it is not uncommon to put the menu at the bottom of the page. It''s an
    approach that fosters continued engagement. They''re already there, right? Perhaps
    you might throw a link to a related article or two and then append the global
    menu to the bottom of the page. This would give the user something more to read
    without having to scroll all the way back to the top:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如文章之类的页面中，用户可能会一直阅读到底部，将菜单放在页面底部并不罕见。这是一种促进持续参与的方法。他们已经在那里了，对吧？也许你可以加上一两篇相关文章的链接，然后将全局菜单附加到页面底部。这样，用户就有了更多内容可供阅读，而不必滚动回页面顶部：
- en: '![Global nav at the bottom](img/0069_08_04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![底部的全局导航](img/0069_08_04.jpg)'
- en: Personally, I think it's best to take this two-pronged approach. The menu at
    the top links to the bottom and the menu at the bottom includes a link to return
    to the top. This is accomplished by the `$.mobile.silentScroll` function.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我认为采取这种两方面的方法是最好的。顶部菜单链接到底部，底部菜单包括返回顶部的链接。这是通过`$.mobile.silentScroll`函数实现的。
- en: Global nav as a panel
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局导航作为面板
- en: 'As of jQuery 1.3 there is now a `Panel` component that can be embedded directly
    into a page and then revealed by button click. It''s exactly like the Facebook
    app:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从 jQuery 1.3 开始，现在有一个`Panel`组件，可以直接嵌入到页面中，然后通过按钮单击来显示。它就像 Facebook 应用程序一样：
- en: '![Global nav as a panel](img/0069_08_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![全局导航作为面板](img/0069_08_06.jpg)'
- en: This is probably the simplest approach to global navigation. It also has the
    benefit of not changing pages or cluttering the interface. For the full API and
    options around the new panel widget, check out [http://view.jquerymobile.com/1.3.0/docs/widgets/panels/](http://view.jquerymobile.com/1.3.0/docs/widgets/panels/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是全局导航的最简单方法。它还有一个好处，即不会更改页面或使界面混乱。有关新面板小部件的完整 API 和选项，请查看 [http://view.jquerymobile.com/1.3.0/docs/widgets/panels/](http://view.jquerymobile.com/1.3.0/docs/widgets/panels/)。
- en: The hard way – final thoughts
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 困难的方式 - 最终想法
- en: All in all, the approach of injecting attributes into a full-site page and invoking
    jQuery Mobile can work pretty well. The biggest problem that you will encounter
    is the sheer amount of cruft that is thrown onto most pages. There's a lot to
    remove and/or CSS-out. This also has the unfortunate effect of being rather brittle.
    If somebody comes along and even slightly modifies the page, it could break your
    implementation. I could really only recommend this approach if the pages are created
    using a template or a **content management system** (**CMS**) so that changes
    to the site structure won't happened often and will be uniform when they do.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，将属性注入到完整网站页面中并调用 jQuery Mobile 的方法可能效果不错。你将遇到的最大问题是大多数页面上堆积的垃圾太多了。需要大量的清理和/或
    CSS 处理。这也有一个不幸的副作用，那就是它相当脆弱。如果有人稍微修改了页面，可能会破坏你的实现。我只能在页面使用模板或**内容管理系统（CMS）**创建，以便网站结构的更改不会经常发生，并且发生更改时是统一的情况下，才会推荐这种方法。
- en: Mobilizing full-site pages – the easy way
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动化完整网站页面 - 简单方式
- en: There is nothing easier and cleaner than just creating a standalone jQuery Mobile
    page. Let's just do that and simply import the page we want with AJAX. We can
    then pull out the parts we want and leave the rest.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 没有比创建一个独立的 jQuery Mobile 页面更容易和更清晰的了。让我们就这样做，简单地使用 AJAX 导入我们想要的页面。然后我们可以取出我们想要的部分，其余的部分就留下来。
- en: The biggest disadvantage to this approach is mostly academic. Progressive enhancement
    is shot. The site completely breaks for anyone who doesn't have JavaScript on
    their device. My contention is that it probably doesn't matter. I can't speak
    for everywhere, but here in the United States, if you're not on a smartphone,
    you're not on the web with your device. Simple as that. There are of course exceptions
    that only prove the rule. However, if your market is different, you would want
    to consider if this option is right for you. So, let's continue.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的最大缺点主要是学术上的。渐进增强被抛弃了。对于设备上没有 JavaScript 的任何人来说，网站完全崩溃。我的观点是这可能并不重要。我不能代表每个地方，但在美国，如果你没有智能手机，你就不能用你的设备上网。就这么简单。当然也有例外只能证明规则。但是，如果你的市场不同，你可能要考虑这个选项是否适合你。因此，让我们继续。
- en: 'On any given page, all we''ll really need is a simple redirect for anyone on
    mobile using one of the many methods we''ve laid out. Then, just use a simple
    `location.replace`. This code sample does a little more than that. It checks to
    see if the user was on a mobile and clicked the full-site link. If so, we''ll
    insert an `iframe` tag to allow the user to switch back to the mobile view manually.
    Otherwise, we''re just going to bounce them to the mobile view:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定的页面上，我们实际上只需要一个简单的重定向，以便使用我们列出的众多方法之一的移动设备上的任何人。然后，只需使用一个简单的`location.replace`。这个代码示例比这个更多。它检查用户是否在移动设备上并单击了完整网站链接。如果是这样，我们将插入一个`iframe`标签，以允许用户手动切换回移动视图。否则，我们将只是将他们弹回到移动视图。
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the code for a page to allow the full site to link back into mobile.
    This file is `gomo.html` within the chapter code files:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个允许完整网站链接到移动端的页面的代码。此文件是章节代码文件中的`gomo.html`：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These two pages are both using scripts that do not require jQuery. It sure would
    be nice if every page had jQuery but there are competing platforms out there and
    we can't count on the base page that we're mobilizing to have it ready for us.
    Native JavaScript is faster anyway. We can put it right at the top of the page
    without having to pull in a library first.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个页面都使用了不需要jQuery的脚本。如果每个页面都有jQuery就好了，但是市场上有其他竞争平台，我们不能指望我们要移动的基本页面已经为我们准备好了。原生JavaScript更快。我们可以直接将其放在页面顶部，而无需先引入库。
- en: '![Mobilizing full-site pages – the easy way](img/0069_08_05.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![移动全站页面-简便方法](img/0069_08_05.jpg)'
- en: Here is the jQuery Mobile page that houses the mobilized content. It also links
    back to the full site view and sets a cookie so the user doesn't just get bounced
    back to mobile if they click on the full-site link.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含移动内容的jQuery Mobile页面。它也链接回全站视图并设置一个cookie，这样用户点击全站链接时就不会直接被弹回移动页面。
- en: As mentioned earlier, we're pulling in the next top 3 articles and placing them
    before the menu at the bottom to keep the user engaged. It's far easier to do
    in this view.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们正在拉取下一个前3篇文章，并将它们放在菜单底部之前，以保持用户的参与度。在这个视图中做起来要容易得多。
- en: The example also takes advantage of `replaceState`. For all browsers that support
    it, when the user comes to the mobile page, the URL in the address bar and history
    will be updated to show the URL of the original article.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例还利用了`replaceState`。对于所有支持它的浏览器，当用户来到移动页面时，地址栏和历史记录中的URL都将被更新，以显示原始文章的URL。
- en: 'Now, without further delay, we will now see the best example of how to easily
    mobilize full-site pages. It is generic enough that you could probably just take
    this to whatever project you''re working on and only have to tweak the code that''s
    doing the pulling and injection:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不再拖延，我们将看到如何轻松地移动全站页面的最佳示例。它足够通用，你可能只需将其应用到你正在工作的任何项目中，并只需调整做拉取和注入的代码即可：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This section is the new panel available in jQuery Mobile 1.3\. It will receive
    the global menu:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分是jQuery Mobile 1.3中可用的新面板。它将接收全局菜单：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What we're doing here to replace the state in the users history is not fully
    supported by all mobile browsers. Just to be on the safe side, I've wrapped that
    line in a try/catch block. This is a good technique for anything that has partial
    support across your customer base.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里为了替换用户历史记录中的状态而采取的措施，并不是所有移动浏览器都完全支持。为了安全起见，我已经将那行代码放在了try/catch块中。对于那些在你的客户群体中部分支持的东西，这是一个不错的技巧。
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This next section takes care of pulling apart the imported page and injecting
    it to the right places. Note at the beginning where I''m selecting objects and
    using a dollar sign at the beginning of the name. We preselect them for the sake
    of performance. Anything you''re going to reference more than once should be stored
    to a variable to reduce DOM traversal to select it again. The reason for the dollar
    sign is that it indicates to the coder that the variable they''re looking at has
    already been jQueried:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分负责拆分导入的页面并将其注入到正确的位置。请注意，我在开始处选择对象并在名称前加上美元符号。我们为了性能而预先选择它们。任何你要引用超过一次的东西都应该存储到一个变量中，以减少DOM遍历来重新选择它。美元符号的原因是它提示编码人员，他们看到的变量已经被jQuery处理过了：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The cookie management that is being used here comes from the jQuery cookie plugin
    at [https://github.com/carhartl/jquery-cookie](https://github.com/carhartl/jquery-cookie).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用的cookie管理来自于jQuery cookie插件，网址为[https://github.com/carhartl/jquery-cookie](https://github.com/carhartl/jquery-cookie)。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Earlier in this book we looked at mobile detection in depth. Now you know all
    there is to know. Before, we were creating mobile sites from scratch with little
    care what their desktop experiences were. Now you know how to unify them. The
    hard part is knowing when to craft mobile experiences from scratch and when to
    simply mobilize the full-site experience. It's a pity there's no simple answer
    to that. But, whether by using JavaScript on page to manipulate it into mobile
    (the hard way) or by AJAXing in the content and picking the pieces you want (the
    easy way) or by leveraging responsive design + server side components (RESS) as
    we mentioned in the previous chapter, you're ready to handle virtually every possible
    situation now. The only thing we haven't really tackled yet is integrating with
    a CMS which we'll do in the next chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本书前面我们深入探讨了移动检测。现在你知道了所有需要知道的内容。之前，我们从零开始创建移动站点，很少关心它们的桌面体验。现在你知道如何统一它们了。困难的部分是要知道何时从零开始设计移动体验，何时简单地将整个站点体验移动化。可惜这并没有简单的答案。但是，无论是通过在页面上使用
    JavaScript 将其转换为移动端（较为困难的方式），还是通过 AJAX 加载内容并选择所需的部分（较为简单的方式），或者是通过响应式设计 + 服务器端组件（RESS），正如我们在前一章中提到的那样，现在你已经准备好处理几乎每种可能的情况了。我们还没有真正解决的唯一问题是与
    CMS 集成，这将在下一章中完成。
