["```js\nng add @angular/youtube-player\n```", "```js\nimport { NgModule } from '@angular/core';\nimport { YouTubePlayerModule } from '@angular/youtube-player';\nimport { VideoComponent } from './video.component';\n@NgModule({\n  declarations: [VideoComponent],\n  exports: [VideoComponent],\n  imports: [YouTubePlayerModule],\n})\nexport class VideoModule {}\n```", "```js\n    import { DOCUMENT } from '@angular/common';\n    import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\n    @Component({\n      selector: 'app-video',\n      templateUrl: './video.component.html',\n    })\n    export class VideoComponent implements OnDestroy, OnInit {\n    ```", "```js\n      #youtubeIframeScript: HTMLScriptElement;\n    ```", "```js\n      constructor(@Inject(DOCUMENT) private document: \n       Document) {\n    ```", "```js\n        this.#youtubeIframeScript = \n         this.document.createElement('script');\n        this.#youtubeIframeScript.src = \n         'https://www.youtube.com/iframe_api';\n        this.#youtubeIframeScript.async = true;\n      }\n    ```", "```js\n      ngOnInit(): void {\n        this.document.body.appendChild(\n         this.#youtubeIframeScript);\n      }\n    ```", "```js\n      ngOnDestroy(): void {\n        this.document.body.removeChild(\n         this.#youtubeIframeScript);\n      }\n    }\n    ```", "```js\n<youtube-player videoId=\"8NQCgmAQEdE\"></youtube-player>\n```", "```js\n    <iframe id=\"ytplayer\" type=\"text/html\" width=\"720\" height=\"405\"\n    src=\"img/8NQCgmAQEdE\"\n    frameborder=\"0\" allowfullscreen></iframe>\n    ```", "```js\nimport { Component, ViewChild } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { GoogleMap }from '@angular/google-maps';\nimport { Observable, of } from 'rxjs';\nimport { catchError, mapTo } from 'rxjs/operators';\nimport { AppConfig } from '../app-config';\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n})\nexport class MapComponent {\n  @ViewChild(GoogleMap, { static: false })\nmap?: GoogleMap;\nisGoogleMapsApiLoaded$: Observable<boolean> = this.http.jsonp('https://maps.googleapis.com/maps/api/js?key=${this.config.googleMapsApiKey}','callback').pipe(\nmapTo(true),\n   catchError(() => of(false)),\n  );\n  constructor(\n    private config: AppConfig,\n    private http: HttpClient,\n  ) {}\n}\n```", "```js\n<google-map *ngIf=\"isGoogleMapsApiLoaded$ | async; else spinner\"></google-map>\n<ng-template #spinner>\n<mat-spinner></mat-spinner>\n</ng-template>\n```", "```js\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HttpClientJsonpModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GoogleMapsModule } from '@angular/google-maps';\nimport { MatProgressSpinnerModule } from'@angular/material/progress-spinner';\nimport { MapComponent } from './map.component';\n@NgModule({\n  declarations: [MapComponent],\n  exports: [MapComponent],\n  imports: [\n    HttpClientModule,\n    HttpClientJsonpModule,\n    GoogleMapsModule,\n    MatProgressSpinnerModule,\n  ],\n})\nexport class MapModule {}\n```", "```js\n<google-map\n  [center]=\"{ lat: 56.783778, lng: 8.228937 }\"\n>\n  <map-marker\n    [options]=\"{ icon: 'https://developers.google.com/\n     maps/documentation/javascript/examples/full/\n     images/beachflag.png' }\"\n    [position]=\"{ lat: 56.783778, lng: 8.228937 }\"\n  ></map-marker>\n</google-map>\n```", "```js\n<script src=\"img/index.min.js\"></script>\n```", "```js\n<button\n  [cdkCopyToClipboard]=\"transactionLog\"\n  [cdkCopyToClipboardAttempts]=\"5\"\n>\n  Copy transaction log\n</button>\n```", "```js\n    import { HarnessLoader } from '@angular/cdk/testing';\n    import { TestbedHarnessEnvironment } from '@angular/cdk/testing/testbed';\n    import { TestBed } from '@angular/core/testing';\n    import { MatButtonModule } from '@angular/material/button';\n    import { MatButtonHarness } from '@angular/material/button/testing';\n    import { MatSelectModule } from '@angular/material/select';\n    import { MatSelectHarness } from '@angular/material/select/testing';\n    ```", "```js\n    import { OrderService } form './order.service';\n    import { OrderSpyService } form './order-spy.service';\n    import { ShirtComponent } from './shirt.component';\n    ```", "```js\n    describe('ShirtComponent', () => {\n    beforeEach(() => {\n        TestBed.configureTestingModule({\n    declarations: [ShirtComponent],\n          imports: [MatButtonModule, MatSelectModule],\n          providers: [\n            { provide: OrderService, useClass:          OrderSpyService },\n          ],\n        });\n        const fixture = TestBed.createComponent(\n         ShirtComponent);\n    ```", "```js\n        loader = TestbedHarnessEnvironment.\n         loader(fixture);\n    ```", "```js\n        orderSpy = TestBed.inject(OrderService) as \n         OrderSpyService;\n    });\n      let loader: HarnessLoader;\n      let orderSpy: OrderSpyService;\n    ```", "```js\n    it('orders a Large shirt', async () => {\n    const shirtSizePicker = await loader.getHarness(MatSelectHarness);\n    ```", "```js\n        constpurchaseButton = awaitloader.getHarness(\n         MatButtonHarness.with({ text: '1-click purchase' });\n    ```", "```js\n    await shirtSizePicker.clickOptions({ text: 'Large' });\n        await purchaseButton.click('center');\n    ```", "```js\n        expect(orderSpy.purchase).\n         toHaveBeenCalledTimes(1);\n      });\n    });\n    ```"]