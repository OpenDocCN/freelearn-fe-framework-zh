- en: Creating Our First Create React App Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](f616eaec-1edb-44b2-bc14-7fec21a70501.xhtml), *Introducing Create
    React App 2,* we started off by taking a good, long look at Create React App and
    some of the options it provides. We even got started with `create-react-app` and
    started learning React at a very basic level. What we need to do now, however,
    is start diving into building an application that will serve as the framework
    for adding more functionality and testing the limits of Create React App.
  prefs: []
  type: TYPE_NORMAL
- en: To make things extra easy, we're going to build a simple **to do list**, since
    that is an application that nearly everyone can understand. It even has a great
    non-digital analog to it, making it a simple thing to reason about!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing a web app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing values to components via props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing functions to children components via props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic component styling with included CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first major project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's now time for us to move forward and start building a real project that
    will function as the baseline project for all of the other features that we want
    to explore in this book! To do that, though, let's take a brief moment to talk
    about how we want to design our application.
  prefs: []
  type: TYPE_NORMAL
- en: Designing our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's very difficult to build a project when you're not sure precisely what you're
    building in the first place, right? When we talk about how to design, build, and
    plan an application, we need to talk about the problem we're ultimately trying
    to solve in the first place. With that in mind, let's talk about the theoretical
    vision for our application.
  prefs: []
  type: TYPE_NORMAL
- en: First off, we're going to build out a mixture between a **pomodoro tracker**
    and a to-do list. This will give us the functionality of a plain old to-do list,
    but also allow us to track time spent on each item as we go through the list.
    We'll keep the overall design of this application pretty simple; there's no reason
    to dive into a giant application. A relatively small and simple application will
    teach you all you need to get started quickly with Create React App.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is also going to be the only chapter that's really only focused
    on the React side of things and less on Create React App. Being able to get started
    with any tool is essentially useless if you don't know how to build something
    after you get up and moving, so that is what this chapter is designed to help
    you solve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our application will have a simple to-do interface with a Mark As Done button
    for each. For each item, you''ll be able to mark the item as complete after you
    add it and it will change the display of that item to let you know it''s done.
    There''s not really anything particularly fancy going on, just a very simple application
    design. Let''s take a look at what the design for this might look like (at a very
    high level):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ea111d6-4175-4de0-a3ab-5102792a830d.png)'
  prefs: []
  type: TYPE_IMG
- en: Building the baseline functionality for our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand the design, we'll want to jump right in to creating the
    project and getting things built. While the application is not particularly tricky,
    there's a decent amount of complexity overall and a pretty good amount of code
    we'll end up having to write. To make things work, we'll separate out our application's
    concerns and make sure what we're building, even in its limited scope, is still
    very similar to what you'd build in a real world application!
  prefs: []
  type: TYPE_NORMAL
- en: Creating our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to the previous project, we''ll start off by creating a new project
    with Create React App, which we''ll call `todoifier`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After the project has been created, we''ll also verify that everything was
    set up correctly and runs by running `start` on the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Initializing our components to build on top off
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever you''re building your project, you should strive to keep the top-level
    component, which is `src/App.js` in our case, as simple as possible and keep as
    little code in it as you possibly can. In our case, we''re just going to remove
    everything (similar to the work we did in the previous chapter, [Chapter 1](f616eaec-1edb-44b2-bc14-7fec21a70501.xhtml),
    *Introducing Create React App 2*) and replace it with a simple replacement header
    and not much else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We'll also want to remove everything from `App.css`, since we're taking a blank-slate
    approach with this project as well!
  prefs: []
  type: TYPE_NORMAL
- en: Building separate components in separate files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the nicest things about Create React App is how simple it makes even
    the process of importing other files as their own separate React components without
    you really having to think about how Webpack is organizing everything. We're going
    to build a new simple component to get started with. Let's create a `Todo` component
    to keep track of each of the `Todo` items we'll need to add as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back over in `src/Todo.js`, we''ll want to duplicate everything from `App.js`
    (except the string in the `className` property and the function name):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s nothing exciting to talk about here, so we''ll keep forging ahead!
    We should also create a `Todo.css` file to make sure our component does not remain
    unstyled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Without doing anything, we won''t see the results of our fancy new `Todo` component
    that we just created, so we''ll need to head back to `src/App.js` and change the
    code. We''ll start by adding an `import` statement at the top for the `Todo` component!
    Remember, we''re loading this file from the local filesystem and not some installed
    dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need to include the `Todo` component somewhere in the source so
    that it shows up when we re-render the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: All we've added here is the `Todo` component, which is getting rendered in the
    main root `div` of the `App` component. When the browser refreshes (assuming you've
    saved), you should see the `Todo` component show up and be ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: The exciting part of this whole process is that we've already introduced better
    code standards and reusability by doing this. The `Todo` component has been fully
    extracted out, so if we wanted to include multiple `Todo` components in our `App`,
    we could do so without having to do anything more complicated than copying and
    pasting a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This sounds pretty great, so let''s try it out ourselves and verify that it
    all works as we expect. Back in the `App` component, add a few more `Todo` components
    as JSX tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When we have our `Todo` declared twice in the root of our `App` component,
    we should see those two show up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a90cdac8-cead-492d-974b-1632fb3e266c.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, we've gotten a nice clean amount of reusability and have had to put
    in almost no effort! The problem that still exists, though, is that there is no
    variation here. The components are just blindly repeated over and over, and we'd
    much rather this do something such as display some different content per each
    `Todo`. We can make that work in React by introducing two new concepts: **state**
    and **props**! We'll get to state in a little bit, so let's start off with props
    to get this all implemented in the simplest way possible.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, what are props? Props are shorthand for *properties*, and as you can guess,
    they define properties inside of our React components. Generally speaking, these
    get passed in from the parent, although they can get passed in from anywhere,
    truth be told.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, we're just using a simple functional component, and that function
    doesn't specify any arguments as part of its signature, so if we want to start
    using props we'll have to change that first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open up our `Todo` component in `src/Todo.js`, and change the function
    declaration to also pass in a `props` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This would roughly be the equivalent of us writing the following in vanilla
    JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll have to change the display text to actually use something from
    our `props` argument, so we''ll add a reference to `{props.description}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, because now we''ll have to head back over to our primary `App`
    component (`src/App.js`) and start passing in the `description` as part of the
    properties passed in to our `Todo` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the file and seeing the browser window refresh, we should expect
    to see the properties we just entered now show up in the browser, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f804268-9afe-4846-98cb-c0735cd3d98e.png)'
  prefs: []
  type: TYPE_IMG
- en: And there we are! Reusable, modifiable components, done with almost no effort
    at all!
  prefs: []
  type: TYPE_NORMAL
- en: The even better part is that any changes to `props` will trigger React to re-render
    that component (depending on what changed and where it changed). This is something
    that is profoundly useful, especially when you factor in that the old world had
    you checking for changes, and then trying to either delete and recreate elements
    on the fly or try to sneak the changes in without having to remove it all away.
  prefs: []
  type: TYPE_NORMAL
- en: Props are great, overall, but if we want to do something a little more permanent
    and something that is better for storing how something changes over time, we need
    to introduce the concept of state. Instead of props, state is meant to be used
    for something that is changing all of the time, generally local to a single component;
    you'll pass the state down to child components that need it via props.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is that we're currently using functional components, which is fine
    for now, but the minute we want to start tracking any sort of internal state,
    we'll need to switch to a different method of creating our React components.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a class-based component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In **ECMAScript 6** (**ES6**), we got our first taste of real object-oriented
    programming in JavaScript with **Classes**. A class is declared in a fundamentally
    different way than our functional components, but most of the core tenets remain
    the same and there's not a huge amount more we need to learn to start using them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we''ll need to do is make a small modification to the `import`
    statement in `src/Todo.js`. We''ll need to `import` not just React itself: we''ll
    also need to `import` a particular named export specified in React, something
    called `Component`**.** Let''s take a look at what the new `import` statement
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We have our `Component` imported as well, so let''s explore the syntax for
    declaring a `class`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells JavaScript that we''re building a new `Todo` class that inherits
    the functionality of `Component` (thus the `extends` keyword). Next, any React
    component we build as an ES6 class needs to have a `render()` function declared.
    To declare a function inside of a class, you just write the name, the arguments,
    and then the body inside of your class definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'React specifically requires us to declare a `render()` function with no arguments,
    as we mentioned earlier. Our `return` statement is identical to what we had in
    our previous functional component, so putting everything together we should end
    up with something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we write out our `render() { … }` function, which is largely unchanged
    except for one small change: `props.description` is now `this.props.description`!'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is that props is not something that is just an argument
    on a function anymore. It's actually part of a class-specific property, so we
    need to tell JavaScript that when we say `props`, we actually mean the *props
    local to this class*. We just shorthand that with `this.props`! With that out
    of the way, we can start diving even further into the world of state!
  prefs: []
  type: TYPE_NORMAL
- en: Bringing state into our component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Part of declaring state to a class component is to start off with an initial
    or default state. We can''t do that without telling JavaScript what to do when
    our class is actually instantiated, so our class will need to have a `constructor`
    to handle that work. In our `Todo` class, we''ll build out our `constructor` function,
    which will take in `props` as its single argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'JavaScript knows to use `constructor()` as our constructor since that is a
    language construct, and we know it needs to take in `props`. Since we''re extending
    off of React''s `Component` class, we need to call `super()` as our first line
    of code in `constructor()`. This tells JavaScript to instead use the code in `constructor()`
    of `Component` to set up whatever it needs to. Next, we set the state by declaring
    a new variable attached to our class called, uninterestingly enough, `this.state`.
    We make it a plain object with a key of `description`, which just stores the passed-in
    description on the `props` argument. It also has a property called `done` that
    starts off with a default value of `false` (since we should not create our tasks
    as already done). This code by itself won''t actually do anything, so let''s also
    change our `render()` function to take advantage of our `state`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Nothing has quite changed yet. Instead, we'll need to add some form of interactivity
    to make the case for using `state` really known!
  prefs: []
  type: TYPE_NORMAL
- en: Adding interactivity via state modifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll add a very simple `button` to our `Todo` component called `Mark as Done`.
    When clicked, this `button` should change our `state` `done` status for that `Todo`
    item to `true`. Now, we''ll want to make sure that anything that does change is
    only changed on this component and not all components, which is a big part of
    using internal state! Let''s first build out our `markAsDone()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'That being done, we can move on to implementing our functionality by including
    our `Mark as Done` button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we just hit save, wait for the refresh, and try to click the `markAsDone`
    button, we''ll end up getting an error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78fdf8b7-7d30-450a-844d-3f08127182f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s explore this error message a little more. We''re getting a TypeError:
    this is undefined message, here, and it''s not the most clear error message in
    the world, certainly. This is one of the drawbacks of using ES6 classes with any
    sort of React component in combination with JavaScript event handlers. So in this
    case, when we have our `onClick` calling out to `this.markAsDone`, and the function
    goes into the body of `markAsDone`, it tries to call `this.setState` but it doesn''t
    actually understand what `this` is trying to reference! This only happens with
    event handlers, so we don''t need to worry about this all of the time. The good
    news is that there is a simple means of fixing this issue. Let''s add one more
    line back to our `constructor`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This tells JavaScript that if it ever sees a reference to `this` inside of the
    `markAsDone` function, it is a specific reference to the `Todo` class. Save the
    file and click the button—it works! Well, you can't tell whether it works yet.
    We'll need to add a little bit of visual indication that it has worked.
  prefs: []
  type: TYPE_NORMAL
- en: Indicating our state with CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re very close to this working perfectly, but we''re missing a little bit
    of code to tell our React component to know when to use certain CSS classes. Let''s
    start by adding a new function, `cssClasses()`, which will return a list of CSS
    classes to include in our component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s nothing particularly special about this other than the use of the
    JavaScript spread operator (the `...classes` bit). This is just a way for us to
    add on to the end of the array in a safe way. Next, we''ll change the logic where
    we declare `className` for our component to use this new function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in `src/Todo.css`, add the new `.Done` CSS class definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, we can see the result when we click on one of the Mark as Done buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/293ea9dd-06cc-4f8a-8da6-70cfa687c5f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Iterating our project further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, we have some state and some props in each component; we have components
    that can be used and reused as needed, we can see a little bit of interactivity,
    and we have great separation of each of our components. This brings us a little
    closer to writing more difficult and complex React components. More importantly,
    we're getting to build a larger, more complex application that will require some
    of the bells and whistles that we get as part of Create React App's toolset.
  prefs: []
  type: TYPE_NORMAL
- en: Building a List component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take things a step further with our `Todo` components and actually create
    a dynamic list of components that we can add to! We’ll need to start by adding
    a new `TodoList` that is in charge of rendering our list of `Todo` components!
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by adding two new files to handle our list of Todos: `src/TodoList.js`
    and `src/TodoList.css`. In our `src/TodoList.js` file, we''ll start off with a
    pretty standard React scaffold (you''ll be writing something similar to this pretty
    often, so this will become second nature very quickly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the body of our class is empty right now. We''ll next need to add
    a `render()` function, so let''s jump right to that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need to modify our style sheet for the `TodoList` so it''s not
    just completely default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Adding the TodoList to our App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right now, we just display a list of `Todo` items through copying and pasting
    the component a bunch of times, but that''s not very interesting, nor is it good
    programming practice! Instead, let''s add our `List` component to our `App` and
    have that be responsible for handling multiple items. We''ll start off by importing
    our new `TodoList` component from the local filesystem into `src/App.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need to change the `render()` function to use the `TodoList` component,
    instead of the two `Todo` components directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Everything should look almost the same, except since we changed the style sheet
    a little bit there should be a clean little blue box around the entire list. This
    helps us see the distinction between each component and the parent components
    surrounding it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding state to TodoList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll need some `state` in `src/TodoList.js` before we can do much else, so
    we''ll just create an initial `state` that''s not too exciting but gets the job
    done. Add a `constructor` to the `TodoList` component and give it the following
    body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Creating and using a helper render() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating and initializing state but not doing anything with it doesn't help
    us very much, so we'll want to make sure that all of the JSX is built with the
    help of our state! We'll have to loop over each `Todo` item that is stored in
    our `state`, which we'll name `this.state.items`, and for each item we'll render
    the `Todo` component and, using props, pass in the `description` of that `Todo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to use the `map` function here specifically since `map` will iterate
    over each item, perform a function, and then store the results as an array. JSX
    is expecting us to return either a single JSX element or an array of JSX elements,
    so this will fit our needs quite nicely. We''ll also delegate this task to a new
    function called `renderItems()` to make sure each of our functions serves a single
    small purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The only new thing here is the addition of the `key` property. This is an important
    part of adding multiple items in React via JSX: React has to know how to reference
    the item in question in some sort of unique way. If React is going to change something,
    delete it, or otherwise affect the DOM, it has to have something to reference
    the specific item by.'
  prefs: []
  type: TYPE_NORMAL
- en: We're not actually guaranteeing much of anything here with the list of names;
    if we end up with any duplicates it will cause us issues, but this is just our
    naive implementation for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return back to the `render()` function and we''ll add a reference to our new `renderItems()`
    function instead of the multiple calls to `Todo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Just to be extra sure, let''s also add a third item back in our `constructor`
    to our initial state. If we can verify this as well, then we know we''ve implemented
    everything correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: There we are! Three items, all working appropriately, and all functioning entirely
    off of the `state`! That's a pretty good measure of progress!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Todo component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a good initial pass at dynamic state affecting our DOM, it''s
    time to create a new component that will allow us to add additional `Todo` items
    to our `TodoList`. We''ll call this, well, `NewTodo`! Create `src/NewTodo.js`
    and `src/NewTodo.css` to start, as per usual. Then, in `src/NewTodo.css`, give
    it some default style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, it''s time for us to build out our `NewTodo` component! We start
    off with our React boilerplate code that we do all the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll build out our `constructor()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We start off with our call to `super()`, same as always. Next, we''ll set up
    an initial state with an `item` property that starts off blank (more on this later).
    We''ll also need to write something to handle updates, so we''ll write a`bind`
    statement on a `handleUpdate()` function (which we''ll write next):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'So, when `handleUpdate()` is called, it is going to take a DOM event, which
    if we wanted to get the value of the input that is changing, we''d grab it via `event.target.value`.
    Finally, let''s hit up our `render()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Most of this code is unremarkable, but note that we have an `input` here, which
    is a `text` type, which reacts to every time the input's value is changed by delegating
    the handler to the `handleUpdate()` function we already wrote!
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to head back to our `TodoList`, import the `NewTodo` component,
    and add it near the top of our call to `render()`. At the top of `src/TodoList.js`,
    add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, add `NewTodo` into the `render()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Passing a function as a prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This introduces a very interesting *chicken and egg* sort of scenario: how
    do we add a component to a parent from the child component? The list of `Todo`
    items lives in `TodoList`, and our component where we need to add new Todos is
    a separate component that lives inside of `TodoList`! There''s no internal state
    for a list of Todos in `NewTodo`, so how do we make this work?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Easy! We''ll create a function in `TodoList`, which can modify its list of
    components, and then pass that function into our `NewTodo` component. So, inside
    of `src/TodoList.js`, we''ll need to add a new function called `addTodo()` and
    we will have to make sure it includes a `bind()` statement so that no matter where
    that function lives, it knows how to handle references to `this`. In the `constructor`,
    add our `bind` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move on to writing our `addTodo()` function. We''ll accept a single
    string, which will be the description that we add. The good news is that this
    function is super easy to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re using some new JavaScript syntax here, an array spread. This allows
    us to essentially take a shortcut with adding new items! Essentially, we want
    to add new items onto the list of items in the `state`, but we want to do so in
    a way that is non-destructive. This will make a modified copy of the item list
    and preserve the original. We set the list of items equal to this newly-modified
    array and that''s it! All we have to do next is just pass this new `addTodo` function
    to `NewTodo` as a prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s hop back over to `src/NewTodo.js`. We''ll need to duplicate our function
    name, so we''ll add an `addTodo` function inside of `NewTodo`. This is going to
    be called via a JavaScript event handler, so we''ll need to add a `bind` statement
    for it inside of our `constructor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And, note the following for our `addTodo()` function body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember the `addTodo()` function that we passed down via props? We''ll need
    to call that function via the props on the object and pass in the `item` property
    inside of our `state`. Remember, `item` is the value that is getting updated all
    of the time via our `onChange` event handlers! Finally, let''s modify `render()`
    to put it all together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We need to add a new value property and set it to the current value of the `item`
    property from our `state`. Without doing this, we won't be able to see what is
    going on when we clear out the state's `item` property. Finally, we added a new
    `onClick` event handler that just calls out to `addTodo`, just like we prepared
    for!
  prefs: []
  type: TYPE_NORMAL
- en: 'Test it out and there we go: interactivity!'
  prefs: []
  type: TYPE_NORMAL
- en: Removing items is important too
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we''re adding items, we should remove them too, so we''ll implement a `removeTodo()`
    function in the `TodoList`, and then that will get passed down into each `Todo`.
    This is very similar to what we did in the `NewTodo` component. We''ll need to
    follow the same steps: add a `bind` statement, write the `removeTodo()`function,
    and implement calling it in the `Todo` component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the `bind` in `src/TodoList.js` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll implement the `removeTodo()` function. We''ll `filter` out any
    Todos that match the item we want to remove and set that as the new list of Todos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The final thing we need to do is change the `renderItems()` call so that it
    passes this new function down to each `Todo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re ready to implement this in the child component. Open up `src/Todo.js`,
    and we''ll implement a duplicate-named `removeTodo()` function inside of the `Todo`
    component. We''ll also need a `bind`, so we''ll start this implementation in the
    `constructor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'And, we''ll write the `removeTodo()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing we need to do is add a call, via a `button` and an `onClick`
    event handler, and call the component''s `removeTodo()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving and the browser refreshing, you should now be able to add and
    remove items on the fly! Full interactivity! Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9c39065-0d21-4a77-b830-7688b927f879.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, you should have a strong grasp on React, how React functions, how to
    write good JSX and React code, and a bunch of the different gotchas and concerns
    you can run into. We covered all of this while still getting work done without
    ever having to go outside of Create React App. Now, we should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A working Create React App project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more complicated application structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An understanding of how to affect parent structures by passing variables and
    functions as properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to bind functions that may be called from inside event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we move on from this chapter, we'll dive more deeply into the other features
    of Create React App and the functionality it supports. It was important for us
    to have our application built and ready to go to give us room to iterate and explore
    the real depths of Create React App, so now that we're ready to go, we can have
    a lot more fun playing around with things!
  prefs: []
  type: TYPE_NORMAL
