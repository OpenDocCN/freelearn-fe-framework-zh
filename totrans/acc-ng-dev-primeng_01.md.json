["```js\n git clone https://github.com/PacktPublishing/Accelerating-Angular-Development-with-Ivy\n```", "```js\ncd Accelerating-Angular-Development-with-Ivy\nnpm install\nng serve demo\n```", "```js\n.mycomponent {\n  background: var(--headerbackground, white);\n}\n```", "```js\n<input name=\"headerBackground\" type=\"color\" />\n```", "```js\n<mat-form-field appearance=\"fill\">\n   <mat-label> Header background </mat-label>\n   <input\n    matInput\n    name=\"headerBackground\"\n    (blur)=\"update($event)\"\n    type=\"color\"\n    [value]=\"headerBackground\"\n    />\n </mat-form-field>\n```", "```js\nexport class AppComponent {\n  @HostBinding('style.--background')\n  background: string;\n\n  @HostBinding('style.--headerbackground')\n  headerBackground: string;\n\n  @HostBinding('style.--tilebackground')\n  tileBackground: string; \n  constructor(themeService: ThemeService) {\n    this.background = themeService.getSetting(\n     'background');\n    this.headerBackground = themeService.getSetting(\n     'headerBackground');\n    this.tileBackground = themeService.getSetting(\n     'tileBackground');\n  }\n}\n```", "```js\n  get headerBackground(): string {\n    return this.themeService.getSetting(\n     'headerBackground');\n  }\n```", "```js\n  update(event: any): void {\n    this.themeService.setSetting(event.target.name, \n     event.target.value);\n  }\n```", "```js\nimport { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  constructor() {} \n  public setSetting(name: string, value: string): void {\n    localStorage.setItem(name, value);\n  } \n  public getSetting(name: string): string {\n    switch (name) {\n      case 'background':\n        return localStorage.getItem(name) || 'yellow';\n      case 'tileBackground':\n        return localStorage.getItem(name) || '#ffcce9';\n      case 'headerBackground':\n        return localStorage.getItem(name) || '#00aa00';\n    }\n    return 'white';\n  }\n}\n```", "```js\n.tile {\n  background: var(--tilebackground, grey);\n  padding: 15px 15px 15px;\n  overflow: hidden;\n  &.video {\n    grid-column: span var(--videosize, 9);\n  }\n  &.text {\n    grid-column: span var(--textsize, 3);\n  }\n}\n```", "```js\n.container {\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-rows: 1fr;\n  grid-auto-flow: dense;\n  padding: 15px 15px 15px;\n  align-content: center;\n}\n```", "```js\n<div class=\"container\">\n  <div class=\"tile video\">\n    <p>\n      <youtube-player videoId=\"{{ videoId }}\"></youtube-\n       player>\n    </p>\n  </div>\n  <div class=\"tile text\">\n    <h3>\n      <i>{{ title }}</i>\n    </h3>\n    <p>\n      <a href=\"https://youtube.com/watch?v={{ videoId }}\"> \n       Open on youtube</a>\n    </p>\n    <p>{{ description }}</p>\n  </div>\n</div>\n```", "```js\n    <mat-label> video size </mat-label>\n    <mat-slider\n      thumbLabel\n      min=\"3\" max=\"7\" step=\"1\"\n      (input)=\"setSize('videoSize', $event)\"\n      [value]=\"videoSize\"\n    >\n    </mat-slider>\n```", "```js\n  setSize(name: string, event: MatSliderChange): void {\n    this.themeService.setSetting(name, \n     event.value?.toString() || '1');\n    location.reload();\n  }\n```", "```js\n.tile {\n  background: var(--tilebackground, grey);\n  padding: 15px 15px 15px;\n  overflow: hidden;\n  @media screen and (min-width: 768px) {\n    &.video {\n      grid-column: span var(--videosize, 9);\n    }\n    &.text {\n      grid-column: span var(--textsize, 3);\n    }\n  }\n  @media only screen and (max-width: 768px) {\n    grid-column: span 12;\n  }\n}\n```"]