- en: Advanced Facebook App Functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have gained access to Facebook's Graph API, it's time to finish
    building our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Continue building `Friends`, our Facebook-connected application, by grabbing
    additional data from the Graph APIs, such as media attachments, comments, and
    number of likes from each existing post in our feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a pull-to-refresh mechanism for our app to allow the user to reload data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the `Image` component, which will allow us to render images in our
    application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover WebView, to open links in a locally available `View` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a log out screen for the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make changes to the app in order to build an Android version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's continue where we left off from the last chapter and work on the extension
    of our `FeedListRow` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PostView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end of [Chapter 5](7c70bcd0-1366-49e8-9022-9c9996073cc6.xhtml), *Third
    Project - The Facebook Client*, we created a `FeedListRow` component with a `TouchableHighlight`
    that fired the following function when pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will build a `PostView` component that our users will navigate to when the
    `TouchableHighlight` component is pressed in `FeedListRow` and replace the current
    login within this `_navigfateToPostView` function to handle that navigation.
  prefs: []
  type: TYPE_NORMAL
- en: This `PostView` component should, upon loading, look in `AsyncStorage` for this
    post's details and load them if it exists. If it does not, then it should make
    a request to the Facebook Graph API for the post's details and save them into
    `AsyncStorage` for future use.
  prefs: []
  type: TYPE_NORMAL
- en: The details that we are interested in, are the post's attachments, comments,
    and likes. Since each post on Facebook is assigned a unique post ID, we can also
    save an object containing the attachments, comments, and likes data under that
    post ID as its key in `AsyncStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will start by creating a new function in `storageMethods.js` that
    performs the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Accepts a post ID and batch callback to execute as arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes three separate `GraphRequest` instances, one for each of the three edges
    we will be obtaining (attachments, comments, and likes), saving its return data
    into an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starts one `GraphRequestManager`, chaining the three `GraphRequest` instances
    and passing in the batch callback, thus passing in the return data object to the
    batch callback function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, create a `PostView` component that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It renders the same created story and message strings that `FeedListRow` created
    so that the user retains the context of what they tapped on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses a storage method to check for the existence of data pertaining to that
    specific post's ID. If it exists, then `PostView` will use it. If not, then it
    should use our new storage method to grab the attachments, comments, and likes
    from that post's ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The batch callback passed into our new storage method should include the saving
    of its results into `AsyncStorage` under the same key as the post ID.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It visually displays the number of comments and likes the post has, into a row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, modify the `FeedListRow` component so that it uses its existing `_navigateToPostView`
    method to navigate to `PostView`, passing any necessary props.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `resultsObject` to store the results of each unique `GraphRequest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For each of the three `GraphRequest` instances in the preceding code, use the
    post ID given to it and call its corresponding `attachments`, `comments`, and
    `likes` edges from the API. Then, save those results into the `resultsObject`
    under their corresponding key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a new `GraphRequestManager` instance, and add all three requests
    to it along with the `batchCallback` given to this function as an argument. Pass
    `resultsObject` into the `batchCallback` to give that callback access to the data
    obtained from the `attachments`, `comments`, and `likes` edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import various different helper methods that will be used in this component,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `loading` Boolean in state to `true` for `ActivityIndicator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'During `componentWillMount`, grab the object in storage under this post''s
    ID key. Check for the existence of data: If no data exists, `getAsyncStorage`
    is configured to return an empty object. Call `_getPostDetails` if this is `true`;
    otherwise, save the details to local state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like `FeedListRow`, render the created date, story, and message if applicable.
    Conditionally, call `_renderActivityIndicator` or `_renderDetails` depending on
    the loading Boolean. At the end, render a separator in anticipation of adding
    comments to this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Call the `getPostDetails` method we just created in `graphMethods` and pass
    it a callback that uses the results object from `getPostDetails` to save its contents
    to state; then save it to `AsyncStorage` under a key equal to this post''s ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Render an `ActivityIndicator` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the number of `Likes` and `Comments` this post has, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `_renderCreatedString`, `_renderMessageString`, and `_renderStoryString`
    methods are unchanged from `FeedListRow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Save data from this post''s `attachments`, `comments`, and `likes` edges into
    state and turn off the spinning `ActivityIndicator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the styling for `PostView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, change the `_navigateToPostView` function in `FeedListRow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will add a `ListView` to populate the comments of that post and render
    it below the separator line in `PostView`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding comments to PostView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this next step, we will edit `PostView` so that it includes a `ListView`
    to render all its comments. Since `PostView` will have the comments data saved
    into its state once the information has been loaded by the `componentWillMount`
    life cycle, we can use that data to render the comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a component to house this `ListView`; let''s call it `CommentList`.
    It should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Contain a list of comments, passed to it by `PostView` as a prop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render a `ListView` using those comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rows should be rendered by a child component, `CommentListRow`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your `CommentListRow` component should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Each row should contain its poster's name and the message they wrote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separate each comment with a `ListView` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, update `PostView` so that it renders `CommentList` directly beneath
    the separator in the `render` method of `PostView`. Instantiate a new `ListView.DataSource`
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `dataSource` constant, passing in the `comments` prop or an empty array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Each row should be a new `CommentListRow` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Render a separator for each comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the styling for the `CommmentList` styles block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s look at `CommentListRow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'A simple stateless functional component returns the comment row with the poster''s
    name and their comment. The following block contains styling for `CommentListRow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s take a look at the change made to `PostView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code imports and renders `CommentList` right below the separator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `commentListContainer` style looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we should continue to flesh out `PostView` with the other features
    we described at the beginning of this chapter. In the next section, we will look
    at how to refresh the existing data we already have in the event that more data
    is added to the user's feed or single post.
  prefs: []
  type: TYPE_NORMAL
- en: Reloading data with RefreshControl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pull-to-refresh interaction was conceived with **Tweetie**, a popular Twitter
    iOS application created in 2008\. This interaction involves the user pulling down
    their screen until it reaches a certain threshold, then releasing it to signify
    their intent to refresh the contents of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: With the React Native SDK, we can use `RefreshControl` to gain that same pull-to-refresh
    interaction and let our users reload data in the app at their will.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the `RefreshControl` props that we will use in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onRefresh`: This is a function that is called when the refresh action is executed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refreshing`: This is a Boolean that indicates whether the view should be animated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tintColor`: This is the color of the refreshing indicator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This is a string that is displayed underneath the refresh indicator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`titleColor`: This is the color of the title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use a `RefreshControl`, render it into a `ListView` or `ScrollView` component
    under its `refreshControl` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our implementation, we want to start by modifying `App.js` so that it does
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Contains a `refreshControlSpinning` Boolean in its state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifies the current `_checkLoginStatus` function to move the logic for getting
    feed data from storage into its own function, `_getFeedData`; the new `_getFeedData`
    function should also switch the `refreshControlSpinning` Boolean to `false` once
    complete
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes a function, `_refreshFeedList`, to refresh the feed that sets `refreshControlSpinning`
    to `true`, then calls the new `_getFeedData` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passes the `refreshControlSpinning` Boolean and the `_refreshFeedList` function
    to the `FeedList` component that it renders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, modify `FeedList` so that it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Renders a `RefreshControl` component into the `refreshControl` prop of its `ListView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Points its spinning prop to the `refreshControlSpinning` Boolean of `App.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Points its `onRefresh` prop to the `_refreshFeedList` function of `App.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are my modifications to the `App` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We added a new `refreshControlSpinning` Boolean to state. The old `spinner`
    Boolean for the `ActivityIndicator` component is renamed as `activityIndicatorSpinning`.
    The last line in `_checkLoginStatus` is broken down to its own method for reusing
    it later in the following snippet. Also, update the `getFeed` prop being pushed
    to `LoginPage` to reflect the new, broken out method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s pass `refreshControlSpinning` and `_refreshFeedList` to `FeedList`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `refreshControlSpinning` Boolean to `true` and call `_getFeed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Set `refreshControlSpinning` to `false` once data has been loaded into state
    and `AsyncStorage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `refreshControl` prop to `ListView`, which points to `_renderRefreshControl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Return the `RefreshControl` component. Its `onRefresh` prop points to the `_refreshFeedList`
    method in `App.js`, and it refreshes Boolean points to the `refreshControlSpinning`
    property from `App.js` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to render any image attachments into `PostView`.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To show an image with React Native, we use the `Image` component. It lets us
    display images from both local and remote sources. Styles can also be added to
    an image, the same way you would stylize any other React component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following props for our `Image` components in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resizeMode`: We will use one of the following strings:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cover`: This scales the image uniformly and maintains its aspect ratio so
    that both the width and height of the image will be equal to or larger than the
    view that encapsulates the `Image` component.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contain`: This string also scales the image uniformly and maintains its aspect
    ratio so that both the width and height of the image will be equal to or less
    than the view that encapsulates the `Image` component.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stretch`: This scales the width and height independently and can change the
    aspect ratio of the source image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat`: This repeats the image to cover the entire frame of the encapsulating
    view. This option also keeps the original size and aspect ratio on iOS, but not
    on Android.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center`: This centers the image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source`: This will be either a remote URL or local path to the image being
    rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style`: This is a styles object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On a basic level, you can load static image resources like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you can do the same for remote ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Every post on the user's feed that has an image attached to it can have that
    very image rendered using the `Image` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way images are structured from the Facebook Graph API is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in mind, let''s start by creating a new utilities file called `imageMethods`.
    This file should do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `Dimensions` API from React Native.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Export the `getHeightRatio` function that takes in the height and width of
    an image and returns the height that the image should have. We can calculate this
    by performing the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grabbing the dimensions of the width of the user's device and subtracting an
    amount from it to accommodate a left and right margin.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using this margin offset and dividing it by the image's original width to get
    a desired ratio.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning the result of multiplying the height by the ratio for the correct
    image height.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Export another function, `getWidthOffset`, which takes the width of the user's
    device and returns it, subtracting an amount to accommodate a left and right margin.
    For code reusability, we should use this as part of the first bullet point for
    `getHeightRatio`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modify `PostView` so that it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The top-level `View` should be replaced by a `ScrollView` component in consideration
    of longer images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It renders the first image in a post's `attachments` array if the post has finished
    loading and if the `attachments` array has any images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Image` component should set its `resizeMode` prop to `contain` so that
    the image does not go off the screen. It should have some sort of left and right
    margin so that it does not meet the edge of the screen, and the width and height
    should be calculated by the `imageMethods` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This rendering should be placed below the details of the post (time, message,
    and story), but above the number of likes and comments it has.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Grab the `gridWidthOffset`, divide it by the image''s `width`, and then divide
    the image''s `height` by this result, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Grab the `width` of the user''s device and then subtract `20` pixels from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `Image`, `ScrollView`, and `imageMethods` into the `PostView` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the top-level view with a `ScrollView` in anticipation of longer posts.
    Add conditional logic to fire `_renderAttachments`, placing it before the call
    to `_renderDetails`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Assign `subattachments` for a very specific fringe case involving certain photos/albums:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Check for the existence of the `media` property, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `media` property exists and it contains an `image` property, then render
    the `Image`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Return an `Image` component with determined props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `container` style for `PostView` has been changed to omit the `marginTop`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `commentListContainer` style accompanies the new `ScrollView` component.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the images have been rendered, we should deal with the other type of
    attachment--links.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering links with WebView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When your users select a link, it's beneficial to render that link within your
    application so that your user doesn't get thrown out of the app and into their
    browser. To accomplish this task with React Native, we will use the `WebView`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `WebView` component renders Web content within a native, app-contained
    view. For this app, we will use just one of its many props:'
  prefs: []
  type: TYPE_NORMAL
- en: '`source`: This loads either a URI with optional headers or static HTML into
    the `WebView`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rendering a `WebView` component is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Not all posts contain links in their attachments. When they do, the hierarchy
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Let's make some changes to accommodate a `WebView`. First, create a new component
    titled `WebViewComponent`; it should be a stateless function that returns a `WebView`
    along with its `source` set to whatever link it receives as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, modify `PostView` so that it does the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Renders a button directly below where an image would be rendered if one was
    included in the post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That button should only be rendered if the first attachment of the post has
    a link associated with it. The button should contain the title of the link and,
    when clicked on, navigate to your `WebViewComponent` to open the link.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unsecured HTTP links are automatically blocked by iOS' App Transport Security
    as of iOS 9\. You can whitelist these on a case-by-case basis within the `Info.plist`
    file of your project in Xcode. Apple does not recommend this and will require
    that all apps submitted adhere to this new policy in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a stateless functional component that just returns a `WebView`
    with a `source` URI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `Button` and `WebViewComponent` dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Conditionally call `_renderLink` if `PostView` has finished loading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Grab the first attached object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Check for `subattachments` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `title` is an empty string or not defined, generically name it `Link`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Render a `Button` that calls `_renderWebView` when pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Navigate the user to the `WebViewComponent`, sending it the URL provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We have one last finishing touch to make on this app, and it involves letting
    the user sign out of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Signing out with TabBarIOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our final step involves adding a sign out page for the user. Using the `TabBarIOS`
    component and the `react-native-vector-icons`, we will create a tabbed view that
    allows the user to sign out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make some modifications for this to happen. We need to first modify
    `App.js` so that it does the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `TabBarIOS` and `react-native-vector-icons` dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns a `TabBarIOS` component in its `_renderView` method if the activity
    indicator is not spinning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `selectedTab` string in the `App` component's state to track which tab
    is currently chosen, defaulting to the `FeedList` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has separate functions to render the `FeedList` and `LoginPage` components without
    navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passes the `LoginPage` a callback that executes the `_checkLoginStatus` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifies its `container` style to no longer justify nor align any items to the
    center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, modify the `LoginPage` component so that its `onLogoutFinished` callback
    will execute `_checkLoginStatus`. Import new dependencies to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Store the `selectedTab` string in state, defaulting it to `feed`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the `FeedList` component using the same logic from earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the `LoginPrompt` component, passing it the `_checkLoginStatus` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This will cause the app to navigate back to the `LoginPage` when the user is
    signed out using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Rendering of the `TabBarIOS` component is where the contents of `_renderFeedList`
    existed earlier within `_renderView`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code sets the `selectedTab` property in state to whichever tab
    is tapped on by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code removed all other stylings from the `container` property
    so that the tab bar''s icons aren''t forced to the center of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The previous alert call in the `onLogoutFinished` prop of `LoginButton` has
    been replaced to fire `checkLoginStatus` instead.
  prefs: []
  type: TYPE_NORMAL
- en: Great job on all your progress in this app! The next step is to make modifications
    for Android development.
  prefs: []
  type: TYPE_NORMAL
- en: Porting to Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android modifications we will make for this app are similar to the changes
    made for `Expenses`, which will be discussed later in [Chapter 9,](c9cb084b-5c75-4683-94c3-9b2124e8ecb0.xhtml)
    *Additional React Native Components*. The modifications we are making for `Friends`
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Swapping out `TabBarIOS` for `DrawerLayoutAndroid` and `ToolbarAndroid`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating `Drawer` and `DrawerRow` components to support `DrawerLayoutAndroid`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `Navigator` in the root-level `index.android.js` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Android-specific version of the `App` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating `FeedList` for Android-specific styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying `FeedListRow` to support Android navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding `BackAndroid` and `Navigator` support to `PostView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-depth explanations for `DrawerLayoutAndroid` and `ToolbarAndroid` can be
    found in [Chapter 9](c9cb084b-5c75-4683-94c3-9b2124e8ecb0.xhtml), *Additional
    React Native Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding DrawerLayoutAndroid and ToolbarAndroid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin by adding Toolbar/Drawer-based navigation for the Android version
    of Friends. We will need to start by creating a component called `Drawer`, which
    performs the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: This accepts an array of routes as a prop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This returns a `ListView` containing each route as a row to render. Each row
    should contain a `TouchableHighlight` component that, when clicked on, will call
    a prop called `navigateTo`, which we will eventually pass into `Drawer`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We should also break the row that is rendered by `Drawer` into its own component
    titled `DrawerRow`. This component should do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Accept the name of the row as a prop and render that name in a `Text` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call `setNativeProps` so that its parent `TouchableHighlight` component will
    render this custom component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instantiate a new `ListView.DataSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Render a `ListView` component, complete with a separator. Delegate the rendering
    of our rows to the `_renderDrawerRow` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Wrap a `TouchableHighlight` around the custom `DrawerRow` component, passing
    it the name of the route. Call the `navigateTo` method from props in the `onPress`
    method of `TouchableHighlight`, passing it the `index` of the `row`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the `DrawerRow` component was created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code calls `setNativeProps` since `DrawerRow` is wrapped around
    `TouchableHighlight`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the name of the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the styling I created for `DrawerRow`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Integrating Drawer with Friends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will modify the root `index.android.js` file so that it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Renders a `DrawerLayoutAndroid` component wrapped around `Icon.ToolbarAndroid`
    and `Navigator`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imports and sets the `renderNavigationView` of `DrawerLayoutAndroid` to the
    `Drawer` component we created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a callback to open `DrawerLayoutAndroid`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writes a callback named `_navigateTo` that navigates to a given index. Pass
    this to `LoginPage` as a prop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Imports and renders the `App`, `LoginPage`, `PostView`, and `WebViewComponent`
    components using the `renderScene` callback in `Navigator`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Let's import all necessary dependencies, including React Native SDK components/APIs,
    each custom component being rendered by the `Navigator`, and the Material Icons
    pack from `react-native-vector-icons`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Establish the array of visible routes to be passed into the `Drawer` component.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Render a `DrawerLayoutAndroid` component, with its `renderNavigationView` prop
    being delegated to `_renderDrawerLayout`; set a `ref` of `drawer` to the component
    so we can refer to it in `_openDrawer`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Render the `Icon.ToolbarAndroid` component to contain the hamburger menu. Its
    `onIconClicked` callback executes `_openDrawer`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Render the `Navigator`, setting its initial route to the `index` for the `App`
    component. Delegate `renderScene` to the `_renderScene` method. Give a `ref` of
    `navigator` so we can reference it in `_navigateTo`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code navigates to the `App` component, which triggers its checking
    of the user's login status.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The `_openDrawer` method calls `openDrawer` on our `DrawerLayoutAndroid` component.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The `_navigateTo` method pushes the given `index` to the `navigator`. Given
    a prop of `checkLoginStatus`, which will be used for the `LoginPage` component.
    It closes the `drawer` at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The `_renderDrawerLayout` method renders the `Drawer` component, passing it
    the `_navigateTo` method as a prop along with the array of routes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The `_renderScene` method is responsible for rendering all four available routes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Creating an Android version of App.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we should create an Android-specific `App` component for `Friends`. Start
    by renaming the existing `App.js` file found at `Friends/app/App.js` as `App.ios.js`
    and create a new file titled `App.android.js`.
  prefs: []
  type: TYPE_NORMAL
- en: This file should contain similar logic to `App.ios.js`, but any references to
    iOS-specific components, such as `TabBarIOS`, should be removed. Additionally,
    any navigation events should be updated to support `Navigator` logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how I did it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The following three items were removed from the import statements: `NavigatorIOS`,
    `TabBarIOS`, and `LoginPage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The `selectedTab` property in state was removed from the `constructor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The `componentWillMount` and `render` methods stayed the same as in the iOS
    version. The navigation method in `_checkLoginStatus` was modified to pass an
    `index` instead of the `LoginPage` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The `_getFeed`, `_renderFeedList`, and `_renderLoginPrompt` methods were not
    modified either. Instead of returning `TabBarIOS` in `_renderView`, I return a
    call to `_renderFeedList` instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Finally, `_refreshFeedList` and `_responseInfoCallback` methods were also left
    unchanged. However, `_setSelectedTab` was removed from `App.android.js` since
    it was a `TabBarIOS`-specific method.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying FeedList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The styling for `FeedList` needs to change conditionally on Android so that
    its `container` style does not contain the `marginTop` property. Modify `FeedList`
    so that it does the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `Platform` API from React Native.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditionally checks for the user's platform and serves them either the container
    style on iOS devices or a new Android-specific style that does not include the
    `marginTop` property.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are my `FeedList` modifications for Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'I imported the `Platform` API and used a ternary operator to run a check for
    the user''s operating system, assigning the top-level `View` component in the
    `render` method of `FeedList` an applicable style depending on that check''s results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: I added the `androidContainer` style to the `StyleSheet` of `FeedList`.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting Navigator in FeedListRow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we have to update FeedListRow to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `Platform` API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the `navigateToPostView` to check for the user's operating system and
    use the appropriate syntax to push the `PostView` for each one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I created the `propsObject` to store the object assigned to `passProps` so
    that I did not have to rewrite it for a second time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we look at conditional logic for iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Since the iOS logic ends the function with the `return` statement, `push` with
    the `Navigator` if on Android.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Adding PostView navigator and BackAndroid support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s modify the `PostView` component with the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `Platform` and `BackAndroid` APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add and remove listeners for `BackAndroid` during `componentWillMount` and `componentWillUnmount`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a callback in the component to handle back button presses on Android,
    calling `pop` on the navigator as a result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create conditional logic similar to `FeedListRow` to push the `WebViewComponent`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I created an event listener for `BackAndroid` in the `componentWillMount` lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, I remove that event listener during `componentWillUnmount`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'This method calls `pop` on the `navigator` and is fired when the back button
    is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'The conditional logic for pushing `WebViewComponent` on an iOS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The conditional logic for the same thing, but on Android is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have successfully built three React Native applications
    throughout the course of this book. In this chapter, you learned to add a pull-to-refresh
    interaction into the application, letting users of your apps quickly refresh their
    data using a well-known gesture. Then, you utilized the `Image` component, rendering
    remote images into your application. Next, you created a `WebView` component for
    the application, allowing users to view Web-related content without shuffling
    them out of the app and into the system browser. Finally, you made the required
    modifications to create an Android version of the application.
  prefs: []
  type: TYPE_NORMAL
