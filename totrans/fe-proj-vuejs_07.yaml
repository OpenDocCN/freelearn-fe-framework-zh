- en: 7\. Animations and Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter deals with creating transition and animation effects in a Vue application.
    Throughout this chapter, you will explore the basics of Vue transitions. We will
    cover single-element transitions, using transition groups to animate a list of
    elements, and creating full-page animations with transition routes. You will also
    learn how to create your transitions and learn how to combine with external libraries
    to do various animations.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the chapter, you will be ready to implement and handle the fundamental
    transition and animation effects for any Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 6*, *Routing*, you learned about routes and how to set up an essential
    routing navigation system using Vue Router. Empowering the transition between
    different routes with smoothness or providing your application with proper animation
    effects when users interact with the application is the next level to achieve.
    While the smooth transition between pages provides a better user experience, animation
    effects such as loading or the way we render content can keep users engaged with
    the application. Hence, our next focus is transitions and animations in Vue and
    what we can do to apply these concepts to our Vue application.
  prefs: []
  type: TYPE_NORMAL
- en: Vue Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike other frameworks, Vue.js provides developers with built-in support for
    animating Vue.js applications, including transitions and animations. Transitioning
    is implemented in such a simple and straightforward manner that developers can
    easily configure and add it to their application. The Vue.js transition mechanism
    supports CSS transitions, programmatic manipulation with JavaScript, and even
    integration with third-party animation libraries such as GSAP or Animate.css.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will discuss the difference between transitions and animations. A
    transition happens when a component (or element) moves from one state to another,
    such as hovering on a button, navigating from one page to another, displaying
    a pop-up modal, and so on. Meanwhile, animations are like transitions but are
    not limited to just two states. Understanding the basics of transitions allows
    you to get started with animations.
  prefs: []
  type: TYPE_NORMAL
- en: Transition Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, to enable transitions for a single component or element, Vue.js
    provides the built-in `transition` component that will wrap around the targeted
    element, as seen in `./src/components/HelloWorld.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `transition` component adds two transition states—`enter` and `leave`—for
    any targeted element or component, including components with conditional rendering
    (`v-if`) and conditional display (`v-show`).
  prefs: []
  type: TYPE_NORMAL
- en: This component receives a prop called `name` that represents the name of the
    transition—in this case, it's `fade-in`—and is also the prefix for the transition
    class names, which will be discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Transition Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vue.js implements a CSS-based and class-based transition effect for `leave`/`enter`,
    hence the transition will be applied to the target component through a set of
    class selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these class selectors has the `v-` prefix in case there is no `name`
    prop given on the `transition` component. And there are some standard classes
    that are grouped into two main groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first group of transition classes is for the `enter` transition, when the
    component is first displayed. Here is a list of `enter` transition classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-enter` (or `<name>-enter`): This is the starting state and is added to the
    component before the component is added or updated. This class will be removed
    once the transition finishes it at the ending state. In the `<style>` section
    of `src/components/HelloWorld.vue`, we will set the `.fade-in-enter` starting
    state as completely hidden with `opacity: 0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`v-enter-active` (or `<name>-enter-active`): This class defines the delay,
    duration, and the easing curve when the component is actively entering the transition.
    It will be added to the component before the component is inserted, applied to
    the component during the entire entering phase, and removed once the effect completes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add `.fade-in-enter-active`, which will do a transition to the opacity
    state within `3` seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`v-enter-to` (or `<name>-enter-to`): This is the last sub-state of entering,
    where the effect frame is added after the component is inserted and removed when
    the effect finishes. In our example, we do not need to define anything since the
    `opacity` value for this state should be `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second group of classes consists of `leave` transitions, which trigger
    when the component is disabled or removed from view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-leave` (or `<name>-leave`): This is the starting state for the leaving transition.
    Similar to `v-enter-to`, we don''t need to define styling effects for this state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-leave-active` (or `<name>-leave-active`): This is applied during the leaving
    phase and acts similarly to `v-enter-active`. And since we want to have a fade-out
    effect, we will use the same styling as with `fade-in-enter-active`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`v-leave-to` (or `<name>-leave-to`): This is the ending state with similar
    behavior to `v-enter-to`. Since the component is going to disappear from view,
    we will reuse the styling defined for the starting phase of `enter` `fade-in-enter`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot is a recap of all the states of `transition` described
    so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: Diagram of transition phases'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.1: Diagram of transition phases'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at three different transition states for entering
    and three transition states for leaving. We also walked through using a transition
    state to slowly fade in some text when the user presses a button.
  prefs: []
  type: TYPE_NORMAL
- en: Animation for a Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since animation is basically an extended form of a transition (with more than
    two states), it is applied in the same way as transitions, with the exception
    that `v-enter` will only be removed on an `animationend` event triggered by Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`animationend` is a DOM event that is fired once the CSS animation finishes
    execution, with the condition that the target element still exists within the
    DOM and the animation is still attached to that element.'
  prefs: []
  type: TYPE_NORMAL
- en: For the next example, in the `<template>` section, we can define a new transition
    called `slide` using an animation CSS effect as a wrapper for the `h1` element
    that displays msg. This transition provides the animation effect of sliding from
    the left to the center on entering and vice versa on leaving.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, generate a `vue` starter project using the CLI with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up the project and go into `src/components/HelloWorld.vue`, and
    then modify the existing `<h1>{{msg}}</h1> code`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In `<style>`, we need to define keyframes for the `slide` animation effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The related transition classes will be assigned the following stylings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This means at the starting phase of entering and at the ending phase of leaving,
    the text position will be `-100px` from the designated position on the page. The
    browser will animate the element using the slide keyframe for a duration of 5
    seconds, and in the active state of leaving, the animation will be exactly the
    opposite of the one in the active stage of entering.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also want to add a show data variable. You can do this by modifying
    the existing export, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And with that, we have implemented our animation. Now comes the next challenge:
    what if we want to combine different animation or transition effects to leave
    and enter states, or use an external CSS library for these states? Let''s take
    a look at custom transition classes.'
  prefs: []
  type: TYPE_NORMAL
- en: Custom Transition Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll again be starting from the default starter project created
    with vue create hello-world. Instead of setting the transition name and letting
    the Vue.js mechanism populate the required class names, there is an option to
    provide custom classes through the following attributes and replace the conventional
    defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'For entering a state, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enter-active-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enter-to-leave`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For leaving a state, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`leave-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leave-active-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leave-to-class`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will start by creating a file based on the previous example, but now we
    will use a `swing` animation effect on the active phase of the entering state,
    and the `tada` effect for the active phase of the leaving state. We will define
    the `enter-active-class` and `leave-active-class` attributes in our `transition`
    component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the `<style>` section, we just need to define `.tada` and `.swing`,
    without any suffix pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add the dedicated keyframes to set up the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll also want to add a show data variable. You can do this by modifying
    the existing `export`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the application using the `yarn serve` command, we will have our
    animations set separately for entering and leaving. The following screenshot displays
    how the screen will now appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: Swing animation effect on action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.2: Swing animation effect on action'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the welcome text shrink while rotating, transitioning from what
    was shown in *Figure 7.2* to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: tada animation effect on action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.3: tada animation effect on action'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at creating custom transition effects. As examples,
    we made `swing` and `tada`. We did this by defining the transition classes in
    our stylesheet and then adding keyframes for each of the effects. This technique
    can be used to create all kinds of custom transition effects. In the next section,
    we'll look at JavaScript hooks and how they can be used for more complex animations.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in the previous section, we can use custom transition classes
    to integrate external third-party CSS animation libraries for styling effects.
    However, there are external libraries that are not CSS-based, but JavaScript-based,
    such as **Velocity.js** or **GreenSock Animation API** (**GSAP**), which require
    hooks to be set using JavaScript events and external animation handlers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use the Velocity.js or GSAP libraries in the Vue app, you need
    to install them separately by using the `npm install` or `yarn add` command, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Velocity.js, use these commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install GSAP, use these commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Being a Vue.js component means the `transition` component supports binding
    custom handlers to a list of events as props. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We bind the animation methods programmatically to the respective events on
    the transition element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`beforeEnter` is the animation state before the component is inserted—similar
    to the v-enter phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enter` for the animation during the entire entering phase—similar to the v-enter-active
    phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leave` for the animation during the entire leaving phase. This is similar
    to the v-leave-active phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to define these event handlers in the `methods` section of the `HelloWorld.vue`
    component''s configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we will create our animation events using the `TweenMax` and
    `TimelineMax` functionalities provided by the GSAP library, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For both `TweenMax` and `TimelineMax`, the syntax of the `to()` animation trigger
    method is pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Most of the effect properties have a similar syntax to CSS so they're not difficult
    to learn and use. In addition, we must pass a `done` callback received from the
    event emitter for events such as `enter` and `leave` to `onComplete` to make sure
    it is triggered, and the hooks will not be called synchronously. Also, note that
    all the event emitters also pass `el`, which is a pointer to the current element
    in transition for use.
  prefs: []
  type: TYPE_NORMAL
- en: Other than these three events, there are other events we can bind, depending
    on the complexity of the animations and transitions, such as `afterEnter`, `enterCancelled`,
    `beforeLeave`, `afterLeave`, and `leaveCancelled`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note, it''s highly recommended to add `v-bind:css="false"` (or `:css="false"`)
    if you are using transitions with JavaScript only. This is to prevent Vue.js from
    detecting and applying any related CSS, therefore avoiding transition interference
    by accident:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at how external JavaScript libraries can be used
    for animations. We implemented a simple tween using the GSAP library, making use
    of its `TweenMax` and `TimelineMax` functions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now learn how to add a new message using an animation effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.01: Adding a New Message with an Animation Effect'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to create a message editor where the user will compose and submit
    a new message. The new message will be displayed instantly with a sliding-from-right
    animation effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the code files for this exercise, refer to [https://packt.live/338ZXJv](https://packt.live/338ZXJv):'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First create a new component called `MessageEditor.vue` located in the `/src/components/`
    folder. In this component, `<template>` will contain two sections, `textarea`,
    for composing a new message with a button to submit it, and `section`, where the
    newly composed message will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, wrap the whole message section with the `transition` element, to prepare
    for our animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll need our `export` component with a method for changing the message text.
    Add that with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will define the `slide-right` animation effect using `@keyframes`
    in our `style` section by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means it will re-position the element that has this effect horizontally
    (on the *X* axis) to the original starting point, (0,0).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we will define the two classes, one for sliding in from left to right (`slide-right`),
    and one for the opposition direction (`slide-left`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `border-top:0` as the starting point for our `slide-right` transition to
    do a bit of an effect on the `border-top` of this section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, using what we learned about custom transition classes, let''s bind `enter-active`
    to the `slide-right` class, and similarly bind `leave-active` to `slide-left`.
    These three properties are added to the `transition` element that was created
    in *Step 2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the application using the `yarn serve` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will generate a component that will display the typed message with a sliding
    animation effect, as shown in *Figure 7.4*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.4: Message Editor text area'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_07_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.4: Message Editor text area'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the message component appears with a slide-from-left-to-right
    animation effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: Message in transition for display'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.5: Message in transition for display'
  prefs: []
  type: TYPE_NORMAL
- en: 'After animating in from the left, the component should stop in the centered
    position, as shown in *Figure 7.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6: Message after the animation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.6: Message after the animation'
  prefs: []
  type: TYPE_NORMAL
- en: This exercise helped you to get used to some of the transform effects in CSS,
    such as `translateX` and `transition`. It also demonstrates how easy it is to
    add animation to an element in the Vue application. What about transitioning for
    multiple elements in the same group, such as a list? We will find out in the next
    topic.
  prefs: []
  type: TYPE_NORMAL
- en: Transition Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have gone through the fundamentals of Vue transition elements for
    simple components and elements, with both custom CSS-only and JavaScript-only
    support for animations. Next, we will explore how to apply a transition on a group
    of components, for instance, a list of items that will be rendered simultaneously,
    by using `v-for`.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js provides another component for this specific purpose, the `transition-group`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now assume that we have a list of messages displayed on a feed, and
    we would like to add a transition to this list to have some effect when each item
    appears on the screen. In the `./src/components/Messages.vue` file, let''s wrap
    the main container with a `transition-group` component, and pass the same props
    we used previously for our `transition` component. They share the same prop types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And we need to set the CSS styling effect for the transition effect passed
    as `fade`, following the same syntax rules for transition classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon running the application using the `yarn serve` command, your list''s item
    will have a fading effect when it appears. The following screenshot displays how
    your screen should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7: Fading of the list item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.7: Fading of the list item'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that unlike the `transition` component, which does not render any wrapper
    container element, `transition-group` will render an actual element and you can
    change the element tag name by using a `tag` prop. By default, the element used
    is `span`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser, the actual HTML output will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8: Transition container element rendered according to the tag attribute'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.8: Transition container element rendered according to the tag attribute'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, all the transition classes will only be applied to the list item
    elements that have the `v-for` attribute and not to the wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you *must* have the `:key` attribute for every list item, in order
    for Vue.js to index and know which item to apply the transition to.
  prefs: []
  type: TYPE_NORMAL
- en: We will now create a moving effect on the list.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Moving Effect While Transitioning a List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides all the classes provided in the `transition` component, `transition-group`
    has another class, `v-move`, which allows us to add additional effects while each
    item is being moved into its position. It can be manually assigned through the
    `move-class` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will look at making animations on the initial rendering of a page or component.
  prefs: []
  type: TYPE_NORMAL
- en: Making an Animation on Initial Render
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, the list of items will be displayed on the first initial page load,
    and our animation won''t work because the element is already in the view. In order
    to trigger the animation, we need to use a different transition attribute, `appear`,
    to force the animation on the initial page render, right after the page has been
    loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also set hooks with `v-on:after-appear`, `v-on:appear`, `v-on:after-appear`,
    and `v-on:appear-cancelled`, or we can create custom classes by using the following
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Animating on render is a commonly used feature that can be used in many situations,
    such as fading in components as we did here. In the next section, we will look
    at sorting a list of messages with an animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.02: Sorting a List of Messages with an Animation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this short exercise, we will add additional functionality to the message
    list: **sorting**. Upon sorting (A-Z or Z-A), there will be a flipping animation
    effect on the list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the code files for this exercise, refer to [https://packt.live/35TFs5l](https://packt.live/35TFs5l):'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the same component code as previously for rendering messages in
    the `Messages.vue` component. The list will be wrapped with a `transition-group`
    component, ready for animation. And do not forget to set `appear="true"`, or simply
    `appear` for short, in order for the element to be animated only after the page
    has finished loading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the `yarn serve` command. This will generate the
    following output:![Figure 7.9: Message list before animation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_07_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.9: Message list before animation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There''s no animation because we haven''t defined the CSS animation styling
    for `flip` yet. Let''s do it. In the `<style>` section of `src/components/Messages.vue`,
    we will add `opacity: 0` and then reposition each element in the list vertically
    (on the *Y* axis) by `20px` from the original position. This should be the initial
    stage when the element enters `flip-enter` or is about to leave the transition
    with `flip-leave-to`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same `<style>` section, add custom CSS styling to each message element
    (the `message—item` class) with `transition: all 2s`. This is to make sure the
    transition effect for the element will be done with all CSS properties within
    `2` seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the `flip-move` is in action, we need to add the transition effect only
    for `transform` (which was defined previously as vertically `20px` away). We can
    see the moving up and down effect for each message flawlessly. In addition, we
    also need to add `position: absolute` for when the transition is in the middle
    of the leaving stage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will next add three buttons—allowing sorting from A to Z, sorting from Z
    to A, and to shuffle randomly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll also need to add our basic component export code as well as our message
    feed data. Feel free to use any content you like for your messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll add the logic for sorting and shuffling. The `methods` section
    should be inside the component `export` created in the last step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output after clicking on one of the buttons will be similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.10: Message list during sorting with animation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15218_07_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.10: Message list during sorting with animation'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we learned how to add a flip animation effect with `transition-group`
    to a list of components dynamically based on a change of the order of its element.
    Next, let's explore how to apply transition effects when navigating between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Transition Routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the combination of the `router-element` component from Vue Router and the
    `transition` component, we can easily set up the transition effects when a user
    navigates from one URL (route) to another.
  prefs: []
  type: TYPE_NORMAL
- en: To give you a more fundamental understanding, we demonstrate in the following
    section an underlying case where a user redirects from the `home` page to the
    `about` page on a website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s wrap `router-element` with `transition` and add the `name="zoom"` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we will use the `mode` attribute to indicate the transition mode. There
    are currently two modes to set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`in-out`: The new element comes in first, and only after that will the current
    element go out of view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out-in`: The current element goes out first, and only then will the new element
    come in. We will use this for our example, and it''s more common than the previous
    one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we just need to set up the transition CSS effect with the transition
    classes as usual and it''s done. Simple as that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at transition routes. Transition effects are animations
    that occur between the rendering of routes, such as navigating from one page to
    another. In the next section, we will look at creating a transition effect for
    each route navigated in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.03: Creating a Transition Effect for Each Route Navigated'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we will adapt what we have learned about transitions with
    the router element from the *Transition Routes* section to create different transition
    effects for different routes. The default effect will be `fade`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the code files for this exercise, visit [https://packt.live/376DoXo](https://packt.live/376DoXo):'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  prefs: []
  type: TYPE_NORMAL
- en: Create a simple application with Vue Router, and add a route for `messages`
    using the `Messages.vue` view, located in the `src/views/` folder. Use the code
    from the previous exercise and add a link to this newly created route in `App.vue`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we wrap the `router-view` element with the `transition` component, in
    `App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `export` section of `App.vue`, make sure the `data` function includes
    values for `transition` and `mode`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the CSS style for fading in and out using the following CSS in `App.vue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, all the pages are loaded with the `fade` effect, even `/messages`.
    But we want to make the messages page load with a different effect—the `zoom`
    effect. Next, add the relevant CSS code for the `zoom` animation inside the same
    `style` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now add some standard CSS stylings for the app''s default layout with
    the help of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to map the `/messages` route with this specific transition effect
    and without affecting other routes. In order to do that, we need to add a field
    called `transition` to the `meta` property of this route configuration, in `src/router/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the code for your `routes` object to confirm it''s the same as the following
    code. Here, we are matching each URL for our application with a view file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This won't show in the browser, since this transition declaration is not yet
    tied to the `data` field of the `App.vue` component, and it needs to be tied before
    the view starts loading. For that, we will take advantage of the `created` life
    cycle hook and the `beforeEach` route hook of the `$router` global mentioned in
    *Chapter 6*, *Routing*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add a hook for before each route change in `App.vue`. We will check
    whether the destination route (`to`) has a custom `transition` effect. If it does,
    we will map the value of `transition` in the `App` instance to it; otherwise,
    we''ll use the fallback default value before continuing the navigation, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now if you open `localhost:8080` in your browser and navigate to `/messages`,
    you should see something similar to *Figure 7.11*:![Figure 7.11: Navigating to
    /messages with a zoom effect in progress'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_07_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.11: Navigating to /messages with a zoom effect in progress'
  prefs: []
  type: TYPE_NORMAL
- en: 'While navigating to other routes, we should see the default transition shown
    in *Figure 7.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12: Navigating to /home with a fade effect in progress'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.12: Navigating to /home with a fade effect in progress'
  prefs: []
  type: TYPE_NORMAL
- en: This exercise demonstrates how we can easily set up different transitions on
    different pages with minimum effort, by combining the right hooks and methods.
    You can experiment a bit further with an external library to make your app animation
    smoother and livelier.
  prefs: []
  type: TYPE_NORMAL
- en: Using the GSAP Library for Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GSAP is an open source scripted library that focuses solely on fast animation
    using JavaScript and provides cross-platform consistency support. It supports
    animation on a wide range of element types, such as Scalar Vector Graphics (SVG),
    React components, canvas, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: GSAP is flexible, easy to install, and will adjust to any configuration given,
    from CSS properties or SVG attributes to a numeric value for rendering an object
    into a canvas.
  prefs: []
  type: TYPE_NORMAL
- en: The core library is a suite of different tools, divided into core and others,
    such as plugins, easing tools, and utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GSAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing GSAP is straightforward using `npm install` or `yarn add`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation, you should see a success output similar to that shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13: Results after successful installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.13: Results after successful installation'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have GSAP installed, we'll look at basic tweens in GSAP.
  prefs: []
  type: TYPE_NORMAL
- en: Basic tweens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Tween** is a concept defined by the GSAP library creator as a high-performance
    setter for performing all desired animation work based on the user''s configuration
    inputs. The inputs can be the targeted objects to animate, a period, or any specific
    CSS properties to animate. Upon performing the animation, the tween figures out
    what the values of CSS properties should be according to the given duration and
    applies them accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: The following are the fundamental methods to create basic tweens.
  prefs: []
  type: TYPE_NORMAL
- en: '**gsap.to()**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most commonly used tween is `gsap.to()`, which is called to create an animation,
    based on the two main parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#myId`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opacity: 0`, `rotation: 90`, or `fontSize: ''20px''`, animation properties
    such as `duration: 1`, `stagger: 0.2`, or `ease: "elastic"`, and event handler
    properties such as `onComplete` or `onUpdate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if we want to animation the logo of Vue in `HelloWorld.vue`, we
    run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the following to move an object with `x` properties (same as `transform:
    translateX()`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '**gsap.from() and gsap.fromTo**'
  prefs: []
  type: TYPE_NORMAL
- en: We don't always want to define the expected animation effect for the element
    in view. Instead, we define the default values where the animation should start
    from for the targeted element. And that's when we use `gsap.from()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, assuming the current `opacity` value of a box is `1`, the `scale`
    value is `1`, and the `x` position is `0`, we want to set up an animation to these
    current values *from* a position `x` of `300`, with an `opacity` value of `0`
    and a `scale` value of `0.5`. In other words, the animation will be done from
    `{x: 300, opacity: 0, scale: 0.5}` to whatever values the element has currently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'But in many cases, we need to set up the starting and ending values for an
    animation since one side is not good enough. For that purpose, GSAP provides `gasp.fromTo()`
    with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s define an animation for a gray box with original values of `{ opacity:
    0, scale: 0.5, x: 300 }` to values of `{ opacity: 1, scale: 1, x: 100, rotation:
    360}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: In order to translate all the CSS-like values to the corresponding CSS values,
    one of the core plugins for GSAP is `CSSPlugin`. This plugin will detect whether
    the target is a DOM element automatically, intercept the passed values, translate
    them into proper CSS values, and then apply them to the element as inline styles
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll walk through an exercise of creating a simple tween
    using GSAP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.04: Tweens with GSAP'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of this exercise is to get you comfortable with working with external
    libraries such as GSAP. We'll make a simple animation, but you can apply this
    same pattern anywhere in your Vue code. We'll be applying the animation during
    mount, but JavaScript animations can be triggered dynamically based on things
    such as timers, random integers, or inputs such as buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the code files for this exercise, visit [https://packt.live/3kVO4gm](https://packt.live/3kVO4gm):'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Vue project by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install GSAP with `yarn` or `npm` using one of the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/App.vue`, import GSAP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the existing `img` tag in `src/App.vue` and add `ref="logo"` to it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a function called `mounted` to the exported object in `src/App.vue` that
    defines the logo as a variable and adds an animation, which is `10` rotations
    over `30` seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, start the application by running `yarn serve` in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your browser to `localhost:8080` and you should see the default Vue starter
    page but with the logo spinning, as shown in the following screenshot:![Figure
    7.14:Simple animation with GSAP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_07_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.14:Simple animation with GSAP
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we implemented a simple spinning animation using GSAP in Vue.
    Next, we will see how we can modify the look and feel of an animation with easing.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Look and Feel with Easing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Easing is important because it determines the movement style between the original
    starting point and the destination point of an animation. It controls the rate
    of change during a tween; hence a user has the time to see the effect, whether
    it be smooth, sudden, bouncing, or some other transition effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, there are additional built-in plugins in GSAP providing extra
    capabilities for configuring the easing effect, such as power, back, elastic,
    and so on. Take a bubble effect, for instance; to make the movement smooth within
    a certain degree, we use `Back.easeOut.config()` and `Elastic.easOut.config()`
    and pass the related settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: With `ease`, we can make the same animation look completely different based
    on the style set. Next, we'll look at `stagger`, another option that affects the
    look and feel of an animation.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Look and Feel with Stagger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have gone through how to animate a list of items using Vue transitions in
    the previous sections. Staggering is one of the animations we should take into
    consideration for a list of objects since it makes animation for this type of
    target easy and with an appropriate delay between each of the item's animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, by assigning a value to the `stagger` property, we can create
    and apply some configuration options besides just the delay duration number (in
    milliseconds):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: You can use `repeat` to define how many times it should repeat the animation.
    A negative number will make it repeat infinitely.
  prefs: []
  type: TYPE_NORMAL
- en: Using Timeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Timeline** is a schedule of tweens under your total control to define overlap
    or gaps between the tweens. It''s useful when you need to control a group of animations
    according to an order, build a sequence of animations, chain the animations for
    a final callback, or modularize your animation code for reusability.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to use Timeline, you can choose to create a timeline instance by using
    the built-in `gsap.timeline()` method, or import `TimelineMax` or `TimelineLite`
    from the core library and set up the instance with a set of configurations, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: We will look briefly into the two main use cases of Timeline, **sequencing**
    and **chaining**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sequencing**'
  prefs: []
  type: TYPE_NORMAL
- en: 'With similar core functionalities to GSAP, Timeline also provides `to()`, `from()`,
    and `fromTo()` methods. All animations by default can be sequenced as one after
    another, with the option to force timing to control where or when things go using
    the `position` attribute, which is an optional argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we looked at using the GSAP Timeline feature to schedule a
    series of animations all running one after the other, some with a gap and others
    with an overlap. In the next section, we'll look further at sequencing animations
    with the concept of chaining.
  prefs: []
  type: TYPE_NORMAL
- en: '**Chaining**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As with sequencing, chaining arranges animation into an order. Instead of calling
    each animation with the instance method each time separately, it will be placed
    in a chain. All the special values that are used between the child tweens can
    be defined, or in the instance created as defaults, or alternatively in the first
    call, get other timelines (list of animations) in the chain to inherit these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also intercept the timing position of each chained timeline using `position`,
    as described earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: GSAP has very detailed documentation, so just visit [https://greensock.com/get-started](https://greensock.com/get-started)
    and start animating.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section we'll build on what we've learned about GSAP to make a message-viewing
    app with animated transitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 7.01: Building a Messages App with Transition and GSAP'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this activity, you will use CSS to write custom transitions, use transition
    groups and routes to do more complex transitions, and use a third-party transition
    library such as GSAP to do animations and transitions in the app. You will be
    creating a simple messages app that makes use of transition effects:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin this exercise, run the `vue create` command to generate a Vue
    starter project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Messages` route (at `src/views/Messages.vue`) that renders two nested
    views: `Messages` (`src/views/MessageList.vue`) displaying list of messages and
    `MessageEditor` (`src/views/MessageEditor.vue`) with one `textarea` and a submit
    button for creating a new message.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Message` route (at `src/views/Message.vue`) that renders a view of
    a single message with a given ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register all the routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a transition to the main `router-view` in the `src/App.vue` file with a
    simple transition name, `fade`, and `out-in` mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the transition to the nested `router-view` in `src/views/Messages.vue` by
    using custom transition classes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write an animation effect for zooming in on entering the route and zooming out
    on leaving the route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write another animation effect for fading in on a leaving event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a transition to the list of messages in `MessageList.vue` with a bounce-in
    effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use GSAP to animate the bounce-in effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a moving effect for an item when it appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When navigating from the list page to the editor page, you should see the feed
    slide away to the left as the editor appears, as shown in *Figure 7.15*:![Figure
    7.15: Fade out when navigating from message list view to editor view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15218_07_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.15: Fade out when navigating from message list view to editor view'
  prefs: []
  type: TYPE_NORMAL
- en: 'When navigating from the message view to the editor view, you should see the
    text input slide out to the left, as shown in *Figure 7.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16: Fade out when navigating from editor view to message list view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.16: Fade out when navigating from editor view to message list view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the message list will appear with the numbers spinning with a bounce
    effect, as shown in *Figure 7.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17: Bounce effect when displaying the message feed in message list
    view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.17: Bounce effect when displaying the message feed in message list
    view'
  prefs: []
  type: TYPE_NORMAL
- en: 'When clicking on a specific message, `0` or `1` in our example, our list will
    slide out to the left and you should see the message content, as shown in *Figure
    7.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18: Single message view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15218_07_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.18: Single message view'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15218_Solution_Final_SZ_ePub.xhtml#_idTextAnchor395).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we explored the built-in support Vue.js has for transitions
    and animations, both on single and multiple components, and we saw how easy it
    is to set it up. At this point, you have created your transition and animation
    effects for routes and components and witnessed all the basic features of Vue.js
    transitions: the custom transition class, group transition, and transition modes.
    Moreover, you also learned about other leading animation third-party libraries
    such as GSAP and saw how to integrate them with your Vue application, in order
    to get better animation effects on the web.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter focuses on another crucial topic for building a production-ready
    Vue application, state management, and how components within an application communicate
    with one another using Vuex, a state management library.
  prefs: []
  type: TYPE_NORMAL
