- en: Appendix B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular Cheat Sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is a quick reference cheat sheet for you to familiarize yourself with common
    Angular syntax and CLI commands. Take some time to review and orient yourself
    with new Angular syntax, major components, CLI scaffolds, and common pipes.
  prefs: []
  type: TYPE_NORMAL
- en: You may find the list especially useful if your background is with AngularJS,
    since you will need to unlearn some old syntax.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to Angular or simply not a fan of CLI commands, check out Nx
    Console at [https://nx.dev/angular/cli/console](https://nx.dev/angular/cli/console),
    an awesome desktop app, and a Visual Studio Code extension, that can write your
    CLI arguments for you. That said, I do recommend that you first gain familiarity
    with the CLI commands and force yourself to use them for a bit, so you have a
    better understanding of how Nx Console works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Binding, or data binding, refers to an automatic one or two-way connection
    between a variable in code and a value displayed or inputted in an HTML template
    or another component:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type** | **Syntax** | **Data direction** |'
  prefs: []
  type: TYPE_TB
- en: '| Interpolation Property Attribute ClassStyle | `{{expression}} [target]="expression"
    bind-target="expression"` | One-way,from data source to view target |'
  prefs: []
  type: TYPE_TB
- en: '| Event | `(target)="statement" on-target="statement"` | One-way,from view
    target to data source |'
  prefs: []
  type: TYPE_TB
- en: '| Two-way | `[(target)]="expression" bindon-target="expression"` | Two-way
    |'
  prefs: []
  type: TYPE_TB
- en: Built-in directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Directives encapsulate coded behaviors that can be applied as attributes to
    HTML elements or other components:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Syntax** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| Structural Directives | `*ngIf``*ngFor``*ngSwitch` | Controls the structural
    layout of the HTML and if elements get added or removed from the DOM |'
  prefs: []
  type: TYPE_TB
- en: '| Attribute Directives | `[class] [style] [(model)]` | Listens to and modifies
    the behavior of other HTML elements, attributes, properties, and components, such
    as CSS classes, HTML styles, and HTML form elements |'
  prefs: []
  type: TYPE_TB
- en: Common pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pipes (known as filters in AngularJS) modify how a data-bound value is displayed
    in an HTML template:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Purpose** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| Async | Manages subscriptions to observables, and provides synchronous access
    to the variable in the template | `someVariable$ &#124; async as someVariable`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Date | Formats a date according to locale rules | `{{date_value &#124; date[:format]}}`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Text Transformation | Transforms text to uppercase, lowercase, or title case
    | `{{value &#124; uppercase}}``{{value &#124; lowercase}}``{{value &#124; titlecase
    }}` |'
  prefs: []
  type: TYPE_TB
- en: '| Decimal | Formats a number according to locale rules | `{{number &#124; number[:digitInfo]}}`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Percent | Formats a number as a percentage according to locale rules | `{{number
    &#124; percent[:digitInfo]}}` |'
  prefs: []
  type: TYPE_TB
- en: '| Currency | Formats a number as currency with a currency code and symbol according
    to locale rules | `{{number &#124; currency [:currencyCode [:symbolDisplay [:digitInfo]]]}}`
    |'
  prefs: []
  type: TYPE_TB
- en: Starter commands, major components, and CLI scaffolds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starter commands help generate new projects or add dependencies. Angular CLI
    commands help create major components by automatically generating boilerplate
    scaffolding code with ease. For the list of the full set of commands, visit [https://github.com/angular/angular-cli/wiki](https://github.com/angular/angular-cli/wiki).
  prefs: []
  type: TYPE_NORMAL
- en: Starter commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the most basic commands, which you will probably memorize over time
    and use the most often. Remember never to install `@angular/cli` globally as covered
    in *Chapter 3*, *Creating a Basic Angular App*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Purpose** | **CLI command** |'
  prefs: []
  type: TYPE_TB
- en: '| New | Creates a new Angular application with an initialized Git repository,
    `package.json`, with routing already configured and Ivy enabled. Run from the
    parent folder. | `npx @angular/cli new project-name --routing` |'
  prefs: []
  type: TYPE_TB
- en: '| Update | Updates Angular, RxJS, and Angular Material dependencies. Rewrites
    code, if necessary, to maintain compatibility. | `npx ng update` |'
  prefs: []
  type: TYPE_TB
- en: '| Add Material | Installs and configures Angular Material dependencies. | `npx
    ng add @angular/material` |'
  prefs: []
  type: TYPE_TB
- en: Major component scaffolds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following commands during your daily workflow to add new components,
    services, and other major components to your Angular application. These commands
    will save you serious time and help you avoid simple configuration mistakes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Purpose** | **CLI command** |'
  prefs: []
  type: TYPE_TB
- en: '| Module | Creates a new `@NgModule` class. Uses `-- routing` to add routing
    for submodules. Optionally, import the new module into a parent module using `--module`.
    | `n g module my-module``ng g m my-module` |'
  prefs: []
  type: TYPE_TB
- en: '| Component | Creates a new `@Component` class. Uses `-- module` to specify
    the parent module. Optionally, use `--flat` to skip directory creation, `-t` for
    an inline template, and `-s` for an inline style. | `ng g component my-component``ng
    g c my-component` |'
  prefs: []
  type: TYPE_TB
- en: '| Directive | Creates a new `@Directive` class. Optionally, uses `--module`
    to scope directives for a given submodule. | `ng g directive my-directive``ng
    g d my-directive` |'
  prefs: []
  type: TYPE_TB
- en: '| Pipe | Creates a new `@Pipe` class. Optionally, use `--module` to scope pipes
    for a given submodule. | `ng g pipe my-pipe``ng g p my-pipe` |'
  prefs: []
  type: TYPE_TB
- en: '| Service | Creates a new `@Injectable` class. Uses `--module` to provide a
    service for a given submodule. Services are not automatically imported to a module.
    Optionally use `--flat false` to create a service under a directory. | `ng g service
    my-service``ng g s my-service` |'
  prefs: []
  type: TYPE_TB
- en: '| Guard | Creates a new `@Injectable` class, which implements the Route lifecycle
    hook `CanActivate`. Uses `--module` to provide a guard for a given submodule.
    Guards are not automatically imported to a module. | `ng g guard my-guard``ng
    g g my-guard` |'
  prefs: []
  type: TYPE_TB
- en: In order to properly scaffold some of the components listed earlier under a
    custom module, such as `my-module`, you can prepend the module name before the
    name of what you intend to generate, for example, `ng g c my-module/my-new-component`.
    The Angular CLI will properly wire up and place the new component under the `my-module`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript scaffolds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are not familiar with the TypeScript syntax, these TypeScript-specific
    scaffolds will help you create classes, interfaces, and enums, so you can leverage
    object-oriented programming principles to reduce the duplication of code and implement
    code behavior like calculated properties in classes rather than components:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Purpose** | **CLI command** |'
  prefs: []
  type: TYPE_TB
- en: '| Class | Creates a barebones class | `ng g class my-class` |'
  prefs: []
  type: TYPE_TB
- en: '| Interface | Creates a barebones interface | `ng g interface my-interface`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Enum | Creates a barebones enum | `ng g enum my-enum` |'
  prefs: []
  type: TYPE_TB
- en: Common RxJS functions/operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to become an effective Angular developer, you need to become an RxJS
    master. Here are some of the most common and useful RxJS operators for quick reference:'
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Name** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| `pipe` | Takes one or more observables as input and generates an observable
    as output, allowing you to build custom data streams. |'
  prefs: []
  type: TYPE_TB
- en: '| `subscribe` | Required to activate an observable. It is an anti-pattern to
    extract the value of an observable data stream from a `subscribe` operation. An
    Async pipe or the `tap` function can be used to inspect or use the current value.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `unsubscribe` | Releases resources and cancels observable executions. Not
    unsubscribing can lead to performance problems and memory leaks. Use the Async
    pipe or the `SubSink` library to manage subscriptions. |'
  prefs: []
  type: TYPE_TB
- en: Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| **Name** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| `of` | Converts the provided value to an observable sequence. Useful for
    integrating synchronous code into an observable data stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `from` | Creates an observable from an array, an iterable object, or a promise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `map` | Allows you to iterate through every value that is emitted by the
    observable. |'
  prefs: []
  type: TYPE_TB
- en: '| `merge` | Creates an output observable that concurrently emits all values
    from every given input observable. Useful for triggering an action based on multiple
    observables. |'
  prefs: []
  type: TYPE_TB
- en: '| `combineLatest` | Combines values from multiple observables with the latest
    value from each observable. Useful when used in tandem with the `merge` operator.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `filter` | Filters values in the data stream. Useful to ignore null values
    or only execute the rest of the pipeline when some condition is met. |'
  prefs: []
  type: TYPE_TB
- en: '| `concat` | Sequentially emits values from multiple observables. Useful for
    synchronizing multiple operations. Variants like `concatMap` can also flatten
    the observable, which is useful for iterating over values of collections. |'
  prefs: []
  type: TYPE_TB
- en: '| `take` | Given a count, automatically completes the observable after consuming
    the prescribed number of times. |'
  prefs: []
  type: TYPE_TB
- en: '| `catchError` | Catches errors on the observable to be handled by returning
    a new observable or throwing an error. |'
  prefs: []
  type: TYPE_TB
- en: '| `scan` | Using an accumulator function, it can process data incrementally.
    That is, getting a running subtotal as numbers are added. Useful for long-running
    operations where you need an update. |'
  prefs: []
  type: TYPE_TB
- en: 'Thanks to Jan-Niklas Wortmann for reviewing this section. Keep up with him
    on Twitter: `@niklas_wortmann`.'
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Bindings*, [https://angular.io/guide/template-syntax#binding-syntax-an-overview](https://angular.io/guide/template-syntax#binding-syntax-an-overview
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Structural Directives*, [https://angular.io/guide/structural-directives](https://angular.io/guide/structural-directives
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Attribute Directives*, [https://angular.io/guide/template-syntax#built-in-attribute-directives](https://angular.io/guide/template-syntax#built-in-attribute-directives
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Pipes*, [https://angular.io/guide/pipes](https://angular.io/guide/pipes )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CLI Commands*, [https://angular.io/cli](https://angular.io/cli )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learn RxJS switchMap, mergeMap, concatMap, and exhaustMap, FOREVER!*, [https://medium.com/@shairez/a-super-ninja-trick-to-learn-rxjss-switchmap-mergemap-concatmap-and-exhaustmap-forever-88e178a75f1b](https://medium.com/@shairez/a-super-ninja-trick-to-learn-rxjss-switchmap-mergemap-concatmap-and-exhaustmap-forever-88e178a75f1b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reactive Extensions Library for JavaScript*, [https://rxjs.dev](https://rxjs.dev
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*This is where we write about RxJS. It''s meant to be a place for everyone
    who is interested in RxJS*, [https://dev.to/rxjs](https://dev.to/rxjs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
