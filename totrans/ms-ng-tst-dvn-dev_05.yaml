- en: <st c="0">5</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Testing Angular Pipes, Forms, and Reactive Programming</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="56">One of the main features of the Angular framework is its ability
    to easily handle data manipulation and form entry through the use of pipes, forms,
    and</st> <st c="209">reactive programming.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="230">Pipes in Angular allow data to be transformed before displaying
    it to the user.</st> <st c="311">Pipes can be used to format dates and currency,
    or even to apply custom logic to manipulate the data in any desired way.</st>
    <st c="432">Testing these pipes ensures that they are functioning correctly and
    producing the</st> <st c="514">expected output.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="530">Forms in Angular are an essential component for collecting and validating
    user input.</st> <st c="617">Testing Angular forms involves verifying that the
    form fields are correctly bound to the model, validating the input, and handling
    form submissions.</st> <st c="766">By testing forms, developers can ensure that
    the form behaves as expected and provides a seamless</st> <st c="864">user experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="880">Reactive programming is a paradigm that handles asynchronous data
    streams and events.</st> <st c="967">In Angular, reactive programming is commonly
    used with the ReactiveForms module, which provides a way to manage form state
    and data flow in a</st> <st c="1109">reactive manner.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1125">In this chapter, we will explore the different approaches and best
    practices for testing Angular pipes, forms, and reactive programming.</st> <st
    c="1263">We will cover the tools and techniques available for writing effective
    tests, as well as common pitfalls and tips for troubleshooting.</st> <st c="1398">By
    the end of this chapter, you will have a solid understanding of how to test these
    crucial aspects of your Angular applications and ensure their reliability</st>
    <st c="1557">and accuracy.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1570">In summary, here are the main topics that will be covered in</st>
    <st c="1632">this chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1645">Testing an Angular pipe as used in</st> <st c="1681">our project</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1692">Applying test-driven development to our</st> <st c="1733">reactive
    form</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1746">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1769">To follow along with the examples and exercises in this chapter,
    you will need to have a basic understanding of Angular and TypeScript, as well
    as access to</st> <st c="1927">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1941">Node.js and npm installed on</st> <st c="1971">your computer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1984">Angular CLI</st> <st c="1997">installed globally</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2015">A code editor, such as Visual Studio Code, installed on</st> <st
    c="2072">your computer</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2085">The code files of this chapter can be found</st> <st c="2130">at</st>
    [<st c="2133">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%205</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%205)<st
    c="2231">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2232">Testing an Angular pipe as used in our project</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2279">Our calculator application is a</st> <st c="2312">simple tool that
    performs basic arithmetic operations, including addition, subtraction, multiplication,
    and division.</st> <st c="2430">Let’s suppose we have a feature that allows us
    to represent a number as a percentage.</st> <st c="2516">To do this, we will be
    using a pipe.</st> <st c="2553">We’ll call our</st> <st c="2568">pipe</st> `<st
    c="2573">percent</st>`<st c="2580">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2581">In our</st> `<st c="2589">core</st>` <st c="2593">folder, we’ll
    create a</st> `<st c="2617">pipes</st>` <st c="2622">folder.</st> <st c="2631">We’ll
    access this folder via our terminal and then run the following command to create
    our</st> `<st c="2722">percent</st>` <st c="2729">pipe:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="2768">After pipe generation, this is the tree structure you</st> <st
    c="2823">should see:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – The pipe folder](img/B21146_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="2886">Figure 5.1 – The pipe folder</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2914">In relation to the contents of</st> `<st c="2946">percent.pipe.spec.ts</st>`<st
    c="2966">, this is what</st> <st c="2981">we have:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3167">Following the principles of</st> **<st c="3196">test-driven development</st>**
    <st c="3219">(</st>**<st c="3221">TDD</st>**<st c="3224">), we will create a test
    suite that includes the</st> <st c="3274">following</st> <st c="3284">tests:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3290">A test that formats a positive number</st> <st c="3328">to a</st>
    <st c="3334">percentage string</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3351">A test that formats a negative number to a</st> <st c="3395">percentage
    string</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3412">A test that formats a decimal number to a</st> <st c="3455">percentage
    string</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3472">A test that formats a non-number to a</st> <st c="3511">percentage
    string</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3528">Let’s</st> <st c="3535">get started.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3547">Positive number to percentage string formatting test</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3600">Our goal here is very simple.</st> <st c="3631">If we</st> <st
    c="3636">have a positive number, such as</st> `<st c="3669">123</st>`<st c="3672">,
    its percentage format must be</st> `<st c="3704">12300%</st>`<st c="3710">. In
    our</st> `<st c="3719">percent.pipe.spec.ts</st>` <st c="3739">file, we will add
    the following</st> <st c="3772">test suit</st><st c="3781">e:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3959">In our terminal, after running the</st> `<st c="3995">ng test</st>`
    <st c="4002">command, we will</st> <st c="4020">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Positive number to percentage string formatting test failed
    in the terminal](img/B21146_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="4477">Figure 5.2 – Positive number to percentage string formatting test
    failed in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4565">In our browser, we will have</st> <st c="4594">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Positive number to percentage string formatting test failed
    in the browser](img/B21146_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5202">Figure 5.3 – Positive number to percentage string formatting test
    failed in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5289">It’s quite normal for our test to fail.</st> <st c="5330">Remember,
    we’re following the principles of TDD.</st> <st c="5379">So, we’ve thought about
    what’s expected when our number is formatted as a percentage, and we’ve written
    the test sequence that should correspond to it.</st> <st c="5531">Now we’re going
    to write the minimum amount of code required for our test</st> <st c="5605">to
    pass.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5613">Now let’s open our</st> `<st c="5633">percent.pipe.ts</st>` <st
    c="5648">file and find out what it contains.</st> <st c="5685">We’ll see</st>
    <st c="5695">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Code in the percent.pipe.ts file](img/B21146_05_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5909">Figure 5.4 – Code in the percent.pipe.ts file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5954">So, let’s add our algorithm.</st> <st c="5984">This will allow
    us to</st> <st c="6006">take our previous test to the green stage with the minimum
    amount of</st> <st c="6075">code required:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6192">All we’ve done here is taken the number to be formatted as a percentage,
    multiplied it by 100, and concatenated it with the</st> `<st c="6317">%</st>`
    <st c="6318">symbol to get the desired rendering.</st> <st c="6356">Now, when
    we go to our test terminal, our test will</st> <st c="6408">turn green:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Positive number to percentage string formatting test succeeded
    in the terminal](img/B21146_05_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7626">Figure 5.5 – Positive number to percentage string formatting test
    succeeded in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7717">And in our browser, we</st> <st c="7740">will have</st> <st c="7751">this
    result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Positive number to percentage string formatting test succeeded
    in the browser](img/B21146_05_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7855">Figure 5.6 – Positive number to percentage string formatting test
    succeeded in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7945">In the next section, we’ll look at the test for formatting a negative
    number as</st> <st c="8026">a percentage.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8039">Negative number to percentage string formatting test</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8092">As we have seen, our objective here is also very</st> <st c="8141">simple.</st>
    <st c="8150">If we have a negative number, such as</st> `<st c="8188">-123</st>`<st
    c="8192">, its percentage format must be</st> `<st c="8224">-12300%</st>`<st c="8231">.
    So, in our</st> `<st c="8244">percent.pipe.spec.ts</st>` <st c="8264">file, we’ll</st>
    <st c="8277">add the following</st> <st c="8295">test suit</st><st c="8304">e:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8484">In our terminal, after running the</st> `<st c="8520">ng test</st>`
    <st c="8527">command, we have</st> <st c="8545">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Negative number to percentage string formatting test succeeded
    in the terminal](img/B21146_05_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9186">Figure 5.7 – Negative number to percentage string formatting test
    succeeded in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9277">In our browser, we</st> <st c="9296">have the</st> <st c="9306">following</st>
    <st c="9315">result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Negative number to percentage string formatting test succeeded
    in the browser](img/B21146_05_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9982">Figure 5.8 – Negative number to percentage string formatting test
    succeeded in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10072">We can conclude that the minimum amount of code written in our</st>
    `<st c="10136">percent.pipe.ts</st>` <st c="10151">to format positive numbers
    as percentages is also valid for negative numbers, as we didn’t need to add any
    code for the test</st> <st c="10277">to pass.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10285">In the next section, we’ll look at the test for formatting a decimal
    number as</st> <st c="10365">a percentage.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10378">Decimal number to percentage string formatting test</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="10430">This time we’ll do the same exercise with a decimal number.</st>
    <st c="10491">If we have a decimal number such as</st> `<st c="10527">123.45</st>`<st
    c="10533">, its percentage</st> <st c="10550">format must be</st> `<st c="10565">12345%</st>`<st
    c="10571">. In our</st> `<st c="10580">percent.pipe.spec.ts</st>` <st c="10600">file,
    we’ll add the</st> <st c="10620">following</st> <st c="10631">test seque</st><st
    c="10641">nce:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="10823">In our terminal, after running the</st> `<st c="10859">ng test</st>`
    <st c="10866">command, we</st> <st c="10879">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Decimal number to a percentage string formatting test succeeded
    in the terminal](img/B21146_05_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11665">Figure 5.9 – Decimal number to a percentage string formatting
    test succeeded in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11757">In our browser, we have</st> <st c="11782">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Decimal number to a percentage string formatting test succeeded
    in the browser](img/B21146_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12528">Figure 5.10 – Decimal number to a percentage string formatting
    test succeeded in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12620">We can conclude that</st> <st c="12641">the minimal amount of
    code written in our</st> `<st c="12684">percent.pipe.ts</st>` <st c="12699">to
    format positive and negative</st> <st c="12732">numbers as percentages is also
    valid for decimal numbers, since we didn’t need to add any code for the test</st>
    <st c="12840">to pass.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12848">In the next section, we’ll look at the test for</st> <st c="12897">formatting
    a non-number expression, such as</st> **<st c="12941">not a number</st>** <st
    c="12953">(</st>**<st c="12955">NaN</st>**<st c="12958">), as</st> <st c="12965">a
    percentage.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12978">Non-number to percentage string formatting test</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="13026">In this case, the aim is to manage an exception.</st> <st c="13076">Let’s</st>
    <st c="13081">assume that the number to be turned into a percentage isn’t a number.</st>
    <st c="13152">Normally, we’d</st> <st c="13166">get an error message, such as</st>
    `<st c="13344">percent.pipe.spec.ts</st>` <st c="13364">file, we will add the
    following</st> <st c="13397">test</st> <st c="13401">suite:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13585">In our terminal, after</st> <st c="13608">running the</st> `<st
    c="13621">ng test</st>` <st c="13628">command, we</st> <st c="13641">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Non-number to percentage string formatting test failed in the
    terminal](img/B21146_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14082">Figure 5.11 – Non-number to percentage string formatting test
    failed in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14166">In our browser, we have</st> <st c="14191">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Non-number to percentage string formatting test succeeded in
    the browser](img/B21146_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14858">Figure 5.12 – Non-number to percentage string formatting test
    succeeded in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14944">As you may have noticed, we have some errors and our test has
    failed.</st> <st c="15015">This is normal, as we haven’t solved this problem using</st>
    <st c="15071">our</st> `<st c="15075">PercentPipe</st>`<st c="15086">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15087">To fix our test, we’ll go to</st> `<st c="15117">percent.pipe.ts</st>`
    <st c="15132">and add the minimum code needed to handle</st> <st c="15175">this
    exception:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="15228">This bit of code needs to be</st> <st c="15257">added to the</st>
    `<st c="15271">transform()</st>` <st c="15282">function.</st> <st c="15293">The
    following is the complete code</st> <st c="15327">for the</st> `<st c="15336">transform()</st>`
    <st c="15347">f</st><st c="15349">unction:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="15497">In our terminal, after</st> <st c="15520">running the</st> `<st
    c="15533">ng test</st>` <st c="15540">command, we will</st> <st c="15558">have
    this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Non-number to percentage string formatting test succeeded in
    the terminal](img/B21146_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15721">Figure 5.13 – Non-number to percentage string formatting test
    succeeded in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15808">In our browser, we will have</st> <st c="15838">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Test cases for PercentPipe succeeded in the browser](img/B21146_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16158">Figure 5.14 – Test cases for PercentPipe succeeded in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16223">The last step is to go to</st> `<st c="16250">CalculatorComponent</st>`
    <st c="16269">to test our</st> `<st c="16282">PercentPipe</st>` <st c="16293">in
    our</st> `<st c="16301">calculator.component.html</st>` <st c="16326">template.</st>
    <st c="16337">To</st> <st c="16340">do this, we’ll declare our</st> `<st c="16367">PercentPipe</st>`
    <st c="16378">in the</st> `<st c="16386">calculator.module.ts</st>` <st c="16406">module
    so that we can use it in our template.</st> <st c="16453">This is what</st> <st
    c="16466">we’ll get:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – PercentPipe implementation in our component](img/B21146_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17141">Figure 5.15 – PercentPipe implementation in our component</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17198">Everything</st> <st c="17210">works perfectly!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17226">In the next section, we’ll set up</st> <st c="17260">our calculator’s
    user interface.</st> <st c="17294">So far, there’s been no user interaction.</st>
    <st c="17336">We’ve just been manipulating our code to play with variable states.</st>
    <st c="17404">To set up the user interface, we’ll use</st> <st c="17443">reactive
    forms and see how we can apply the principles</st> <st c="17499">of TDD.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17506">Implementing TDD for the Reactive Form in our calcul</st><st c="17559">ator
    app</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="17568">A reactive form is a type of form that uses reactive programming
    principles to update the form state in response to user input.</st> <st c="17697">Reactive
    forms are often used in web applications, as they can be used to create dynamic</st>
    <st c="17786">and responsive</st> <st c="17801">user interfaces.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17817">In this section, we will discuss how to implement a reactive form
    user interface for our calculator app.</st> <st c="17923">We will use TDD to ensure
    that our form is valid and that our calculator component works</st> <st c="18012">as
    expected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18024">Here are the benefits of using a reactive form user interface
    for</st> <st c="18091">a calculator:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="18104">Dynamic and responsive</st>**<st c="18127">: Reactive forms
    can be used to create dynamic and responsive user interfaces.</st> <st c="18207">For
    example, you could use a reactive form to create a calculator that updates the
    result as the user enters values into the</st> <st c="18332">input fields.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="18345">Valid</st>**<st c="18351">: Reactive forms provide validation
    features that can be used to ensure that the user input is valid.</st> <st c="18454">For
    example, you could use a reactive form to create a calculator that validates that
    the operands are numbers, and that the operator is a valid</st> <st c="18599">mathematical
    operator.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="18621">Testable</st>**<st c="18630">: Reactive forms are easy to test
    using TDD.</st> <st c="18676">This ensures that your form is valid and that your
    calculator component works</st> <st c="18754">as expected.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="18766">To implement a reactive form</st> <st c="18795">user interface
    for using a calculator with TDD, you will need to</st> <st c="18860">follow the</st>
    <st c="18872">ensuing steps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18886">Writing a test for the calculator form</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="18925">The first step is to write a test for the</st> <st c="18968">calc</st><st
    c="18972">ulator form.</st> <st c="18986">This test will ensure that the form
    is valid when all of the fields are filled in correctly.</st> <st c="19079">In
    our</st> `<st c="19086">calculator.component.spec.ts</st>`<st c="19114">, we will
    add the following</st> <st c="19141">test suite:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="19394">Don’t forget to import</st> `<st c="19418">ReactiveFormModule</st>`
    <st c="19436">as shown in the</st> <st c="19453">following code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <st c="19563">As you can see, we now have a test suite linked to the management
    of our reactive form in the event that it is valid.</st> <st c="19682">When</st>
    <st c="19687">we run the</st> `<st c="19698">ng test</st>` <st c="19705">command,
    this will be</st> <st c="19728">the result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Calculator form test succeeded in the terminal](img/B21146_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19877">Figure 5.16 – Calculator form test succeeded in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19937">In our browser, we will have</st> <st c="19967">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Calculator form test succeeded in the browser](img/B21146_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="20845">Figure 5.17 – Calculator form test succeeded in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20904">Our test suite is on!</st> <st c="20927">No surprise there!</st>
    <st c="20946">In fact, we have created an instance of our form directly within
    our test.</st> <st c="21021">As we haven’t interacted with our calculator component’s
    form, we’ll do that now by modifying our</st> <st c="21118">test suite</st> <st
    c="21129">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <st c="21449">In our terminal, after running the</st> `<st c="21485">ng test</st>`
    <st c="21492">command, we will</st> <st c="21510">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Calculator form build failed in the terminal](img/B21146_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22227">Figure 5.18 – Calculator form build failed in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22285">The result we get is normal because</st> `<st c="22322">calculatorForm</st>`
    <st c="22336">doesn’t exist in our</st> `<st c="22358">CalculatorComponent</st>`<st
    c="22377">. We need to add it as an attribute to our class</st> <st c="22426">as
    follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Declaration of calculatorForm as FormGroup module in our component](img/B21146_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22567">Figure 5.19 – Declaration of calculatorForm as FormGroup module
    in our component</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22647">Now that we have added</st> `<st c="22671">calculatorForm</st>`<st
    c="22685">, we’ll also add the three input fields by initializing our</st> `<st
    c="22745">calculatorForm</st>` <st c="22759">using</st> <st c="22765">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.20 – Initialization of our FormGroup module calculatorForm](img/B21146_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23229">Figure 5.20 – Initialization of our FormGroup module calculatorForm</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23296">In our terminal, after running the</st> `<st c="23332">ng test</st>`
    <st c="23339">command, we will</st> <st c="23357">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.21 – Calculator form test succeeded in the terminal](img/B21146_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23678">Figure 5.21 – Calculator form test succeeded in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23738">In our browser, we will have</st> <st c="23768">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: "![Fig\uFEFFure 5.22 – Calculator form test succeeded in the browser](img/B21146_05_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: <st c="24645">Fig</st><st c="24648">ure 5.22 – Calculator form test succeeded
    in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24705">We’ll do another test to make sure</st> <st c="24740">the opposite
    is true, that is, when the form</st> <st c="24786">is invalid.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24797">Since all fields are mandatory, if a field is not filled in, the
    form must be invalid.</st> <st c="24885">In our</st> `<st c="24892">calculator.component.spec.ts</st>`
    <st c="24920">file, we’ll add the following</st> <st c="24951">test</st> <st c="24956">sequence:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <st c="25221">In our terminal, after running the</st> `<st c="25257">ng test</st>`
    <st c="25264">command, we will</st> <st c="25282">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.23 – Calculator form test succeeded in the terminal](img/B21146_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="25448">Figure 5.23 – Calculator form test succeeded in the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25508">In our browser, we will have</st> <st c="25538">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.24 – Calculator form test succeeded in the browser](img/B21146_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="26478">Figure 5.24 – Calculator form test succeeded in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26537">In the next section, we’ll implement</st> <st c="26574">the user
    interface for our</st> <st c="26602">calculator application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26625">Implementing the user interface</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="26657">Let’s implement our calculator’s user</st> <st c="26695">interface
    in our</st> `<st c="26713">calculator.component.html</st>` <st c="26738">file
    using</st> <st c="26750">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27213">Don’t forget to add</st> `<st c="27234">ReactiveFormsModu</st><st
    c="27251">le</st>` <st c="27254">to the</st> `<st c="27262">imports</st>` <st
    c="27269">arra</st><st c="27274">y and the</st> `<st c="27285">calculate()</st>`
    <st c="27296">method in</st> <st c="27306">the right place.</st> <st c="27324">You
    can check the source code if you have any errors.</st> <st c="27378">This can
    be found</st> <st c="27396">at</st> [<st c="27399">https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%205/getting-started-angular-tdd/src/app/calculator</st>](https://github.com/PacktPublishing/Mastering-Angular-Test-Driven-Development/tree/main/Chapter%205/getting-started-angular-tdd/src/app/calculator)<st
    c="27544">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27545">In our terminal, after running the</st> `<st c="27581">ng serve
    -o</st>` <st c="27592">command, we will have this in</st> <st c="27623">our browser:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.25 – Calculator user interface in the browser](img/B21146_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27651">Figure 5.25 – Calculator user interface in the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27705">In the next section, we will implement the business</st> <st c="27757">log</st><st
    c="27761">ic of our</st> `<st c="27772">calculate()</st>` <st c="27783">button.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27791">Writing tests for the calculator component</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="27834">Based on the principles of TDD, we</st> <st c="27870">will implement
    the busines</st><st c="27896">s lo</st><st c="27901">gic of our</st> `<st c="27913">calculate()</st>`
    <st c="27924">button.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27932">We’ll start by adding functionality related to the addition of
    two numbers entered by the user.</st> <st c="28029">In our</st> `<st c="28036">calculator.component.spec.ts</st>`
    <st c="28064">file, we will add the following</st> <st c="28097">t</st><st c="28098">est
    suite:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: <st c="28440">In our terminal, after</st> <st c="28463">running the</st> `<st
    c="28476">ng test</st>` <st c="28483">command, we will</st> <st c="28501">have
    this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.26 – Calculator operator (+) choice test failed in the terminal](img/B21146_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="29091">Figure 5.26 – Calculator operator (+) choice test failed in the
    terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29163">In our browser, we will have</st> <st c="29193">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.27 – Calculator operator (+) choice test failed in the browser](img/B21146_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="29816">Figure 5.27 – Calculator operator (+) choice test failed in the
    browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29887">As we can see, our test has failed, and that’s perfectly normal
    be</st><st c="29954">cause the</st> `<st c="29965">calculate()</st>` <st c="29976">method
    is currently empty in our</st> `<st c="30010">CalculatorComponent</st>`<st c="30029">.
    We now need to add the minimum code required to make it functional.</st> <st c="30099">We
    need to take into consideration the previous functions contained in the class
    that we had to add in the previous chapters.</st> <st c="30225">Here’s how it</st>
    <st c="30239">looks when we</st> <st c="30253">update the</st> `<st c="30264">calculate()</st>`
    <st c="30275">method in the</st> `<st c="30290">calculator.component.ts</st>`
    <st c="30313">file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28 – Calculator operator (+) choice](img/B21146_05_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="30537">Figure 5.28 – Calculator operator (+) choice</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30581">In our terminal, after running the</st> `<st c="30617">ng test</st>`
    <st c="30624">command, we will</st> <st c="30642">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.29 – Calculator operator (+) choice test succeeded in the terminal](img/B21146_05_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="30808">Figure 5.29 – Calculator operator (+) choice test succeeded in
    the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30883">In our browser, we will have</st> <st c="30913">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.30 – Calculator operator choice (+) test succeeded in the browser](img/B21146_05_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="31887">Figure 5.30 – Calculator operator choice (+) test succeeded in
    the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31961">Now we’ll do the same for</st> <st c="31987">the subtraction functionality.</st>
    <st c="32019">In our</st> `<st c="32026">calculator.component.spec.ts</st>` <st
    c="32054">file, we will add the following</st> <st c="32087">tes</st><st c="32090">t
    suite:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: <st c="32431">In our terminal, after running the</st> `<st c="32467">ng test</st>`
    <st c="32474">command, we will</st> <st c="32492">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.31 – Calculator operator choice (-) test failed in the terminal](img/B21146_05_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33066">Figure 5.31 – Calculator operator choice (-) test failed in the
    terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33138">In our browser, we will have</st> <st c="33168">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.32 – Calculator operator choice (-) test failed in the terminal](img/B21146_05_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33899">Figure 5.32 – Calculator operator choice (-) test failed in the
    terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33971">Our test failed, and that’s perfectly normal because our</st>
    `<st c="34029">calculate()</st>` <st c="34040">method doesn’t currently handle
    subtraction in our</st> `<st c="34092">CalculatorComponent</st>`<st c="34111">.
    We now need to add the minimum code</st> <st c="34148">required to make it functional.</st>
    <st c="34181">We need to take into account the previous functions contained in
    the class that we had to add in the previous chapters.</st> <st c="34301">Here’s
    how it looks when we update the</st> `<st c="34340">calculate()</st>` <st c="34351">method
    in the</st> `<st c="34366">calculator.component.ts</st>` <st c="34389">file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.33 – Calculator operator choice (-)](img/B21146_05_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34604">Figure 5.33 – Calculator operator choice (-)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34648">In our terminal, after running the</st> `<st c="34684">ng test</st>`
    <st c="34691">command, we will</st> <st c="34709">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.34 – Calculator operator choice (-) test succeeded in the terminal](img/B21146_05_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34875">Figure 5.34 – Calculator operator choice (-) test succeeded in
    the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34950">In our browser, we will</st> <st c="34975">have</st> <st c="34980">this
    result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.35 – Calculator operator choice (-) test succeeded in the browser](img/B21146_05_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="36015">Figure 5.35 – Calculator operator choice (-) test succeeded in
    the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36089">Next is the multiplication functionality.</st> <st c="36132">In
    our</st> `<st c="36139">calculator.component.spec.ts</st>` <st c="36167">file,
    we’ll add this</st> <st c="36189">test suite:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: <st c="36531">In our terminal, after</st> <st c="36555">running the</st> `<st
    c="36567">ng test</st>` <st c="36574">command, we will</st> <st c="36592">have
    this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.36 – Calculator operator choice (*) test failed in the terminal](img/B21146_05_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="37142">Figure 5.36 – Calculator operator choice (*) test failed in the
    terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37214">In our browser, we will have</st> <st c="37244">this result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.37 – Calculator operator choice (*) test failed in the browser](img/B21146_05_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="37866">Figure 5.37 – Calculator operator choice (*) test failed in the
    browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37937">Our test failed, and that’s perfectly normal because our</st>
    `<st c="37995">calculate()</st>` <st c="38006">method doesn’t currently handle
    multiplication in our</st> `<st c="38061">CalculatorComponent</st>`<st c="38080">.
    We now need to add the minimum code required to make it functional.</st> <st c="38150">We
    need to take into account the previous functions contained in the class that we
    had to add in the previous chapters.</st> <st c="38270">Here’s how it looks when
    we update the</st> `<st c="38309">calculate()</st>` <st c="38320">method in the</st>
    `<st c="38335">calculator.component.ts</st>` <st c="38358">file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.38 – Calculator operator choice (*)](img/B21146_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="38517">Figure 5.38 – Calculator operator choice (*)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38561">In our terminal, after running the</st> `<st c="38597">ng test</st>`
    <st c="38604">command, we will</st> <st c="38622">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.39 – Calculator operator choice (*) test succeeded in the terminal](img/B21146_05_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="38786">Figure 5.39 – Calculator operator choice (*) test succeeded in
    the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38861">In our browser, we</st> <st c="38881">will have</st> <st c="38891">this
    result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.40 – Calculator operator choice (*) test succeeded in the browser](img/B21146_05_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="39997">Figure 5.40 – Calculator operator choice (*) test succeeded in
    the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40071">Finally, we’ll set up the last operation, that is,</st> `<st c="40123">divide</st>`<st
    c="40129">. In our</st> `<st c="40138">calculator.component.spec.ts</st>` <st
    c="40166">file, we’ll add this</st> <st c="40188">test suite:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: <st c="40533">In our terminal, after running the</st> `<st c="40569">ng test</st>`
    <st c="40576">command, we will</st> <st c="40594">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.41 – Calculator operator choice (/) test failed in the terminal](img/B21146_05_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="41160">Figure 5.41 – Calculator operator choice (/) test failed in the
    terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41232">In our browser, we will</st> <st c="41257">have</st> <st c="41262">this
    result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.42 – Calculator operator choice (/) test failed in the browser](img/B21146_05_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="41950">Figure 5.42 – Calculator operator choice (/) test failed in the
    browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42021">Our test failed, and that’s perfectly normal because our</st>
    `<st c="42079">calculate()</st>` <st c="42090">method doesn’t currently handle
    division in our</st> `<st c="42139">CalculatorComponent</st>`<st c="42158">. We
    now need to add the minimum code required to make it functional.</st> <st c="42228">We
    need to take into account the previous functions contained in the class that we
    had to add in the previous chapters.</st> <st c="42348">Here’s how it looks when
    we update the</st> `<st c="42387">calculate()</st>` <st c="42398">method in the</st>
    `<st c="42413">calculator.component.ts</st>` <st c="42436">file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.43 – Calculator operator choice (/)](img/B21146_05_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42582">Figure 5.43 – Calculator operator choice (/)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42626">In our terminal, after running the</st> `<st c="42662">ng test</st>`
    <st c="42669">command, we will</st> <st c="42687">have this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.44 – Calculator operator choice (/) test succeeded in the terminal](img/B21146_05_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42846">Figure 5.44 – Calculator operator choice (/) test succeeded in
    the terminal</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42921">In our browser, we will</st> <st c="42945">have</st> <st c="42951">this
    result:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.45 – Calculator operator choice (/) test succeeded in the browser](img/B21146_05_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="44198">Figure 5.45 – Calculator operator choice (/) test succeeded in
    the browser</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44272">We can now run the</st> `<st c="44292">ng serve -o</st>` <st c="44303">command
    to see how our</st> <st c="44327">application behaves:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.46 – Calculator user interface test](img/B21146_05_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="44448">Figure 5.46 – Calculator user interface test</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44492">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="44500">In this chapter, we learned how to test Angular pipes and apply
    TDD to reactive forms for</st> <st c="44591">r</st><st c="44592">eactive programming.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44612">We explored the testing of Angular pipes, which are essential
    components used to transform input data for display in the view.</st> <st c="44740">The
    process involved creating test cases that covered different scenarios and edge
    cases to ensure the pipe behaved</st> <st c="44856">as expected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44868">We delved into the application of TDD to reactive forms in Angular.</st>
    <st c="44937">TDD is a software development approach that involves writing tests
    before the code, and these tests drive the development of the code.</st> <st c="45072">This
    approach ensures that the code is robust, reliable, and</st> <st c="45133">well
    tested.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45145">In the next chapter, we will explore end-to-end testing with Protractor,
    Cypress,</st> <st c="45228">and Playwright.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="0">Part 3: End-to-End Testing</st>'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="27">In this part, you’ll get an overview of end-to-end testing with Protractor,
    Cypress, and Playwright.</st> <st c="129">Then, you’ll explore in depth how to
    use Cypress to write</st> <st c="187">end-to-end tests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="204">This part has the</st> <st c="223">following chapters:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="242">Chapter 6</st>*](B21146_06.xhtml#_idTextAnchor251)<st c="252">,</st>
    *<st c="254">Exploring End-to-End Testing with Protractor, Cypress, and Playwright</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="323">Chapter 7</st>*](B21146_07.xhtml#_idTextAnchor273)<st c="333">,</st>
    *<st c="335">Understanding Cypress and its Role in End-to-End Tests for Web Applications</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="410">Chapter 8</st>*](B21146_08.xhtml#_idTextAnchor290)<st c="420">,</st>
    *<st c="422">Writing Effective End-to-End Component Tests with Cypress</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
