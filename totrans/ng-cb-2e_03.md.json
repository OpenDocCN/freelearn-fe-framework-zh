["```js\n    npm run serve ng-di-token \n    ```", "```js\n    import { InjectionToken } from '@angular/core';\n    export const JOKES = new InjectionToken('Jokes', {\n      providedIn: 'root',\n      factory: () => new Jokes(),\n    });\n    class Jokes {...}\n    export default Jokes; \n    ```", "```js\n    import { Component, **inject**, OnInit } from '@angular/core';\n    **import** **{** **JOKES** **}** **from****'./classes/jokes.class'****;**\n    import { IJoke } from './interfaces/joke.interface';\n    @Component({...})\n    export class AppComponent implements OnInit {\n      joke!: IJoke;\n      **jokes =** **inject****(****JOKES****);**\n      ...\n    } \n    ```", "```js\n    npm run serve ng-optional-dependencies \n    ```", "```js\n    import { Injectable } from '@angular/core'; \n    **// <-- remove the above import**\n    import { Logger } from '../interfaces/logger';\n    @Injectable(**{****//<-- remove this object**\n    **providedIn: 'root'**\n    **})**\n    export class LoggerService implements Logger {\n      ...\n    } \n    ```", "```js\n    import { Component, OnInit, Input, OnChanges, SimpleChanges**,** **Optional** } from '@angular/core';\n    ...\n    export class VcLogsComponent implements OnInit {\n      ...\n      **constructor****(****@Optional****()** **private** **logger: LoggerService****) {**\n    **this****.****logs** **=** **this****.****logger****?.****retrieveLogs****() || [];**\n    **}**\n      ...\n    } \n    ```", "```js\n    ...\n    export class VcLogsComponent implements OnInit {\n      ...\n      constructor(@Optional() private loggerService: \n    LoggerService) {\n        this.logs = this.logger?.retrieveLogs() || [];\n      }\n      **get****log****() {**\n    **return****this****.****logger****?.****log****.****bind****(****this****.****logger****) ||**\n    **console****.****log****;**\n    **}**\n      ... \n    ```", "```js\n    ...\n    export class VcLogsComponent implements OnInit {\n      ...\n      constructor(@Optional() private logger: LoggerService) { }\n      get log() {}\n      ngOnChanges(changes: SimpleChanges) {\n        const currValue = changes['vName'].currentValue;\n        let message;\n        if (changes['vName'].isFirstChange()) {\n          message = `initial version is ${currValue.trim()}`;\n          if (!this.logs.length) {\n            **this****.****log****(message);**\n    this.logs.push(message);\n          }\n        } else {\n            message = `version changed to ${currValue.trim()}`;\n            **this****.****log****(message);**\n    this.logs.push(message);\n        }\n      }\n      ... \n    ```", "```js\n    npm run serve ng-singleton-service \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    import { BehaviorSubject, Observable } from 'rxjs';\n    @Injectable(**{**\n    **providedIn****:** **'root'**\n    **}**)\n    export class NotificationsService {\n      ...\n    } \n    ```", "```js\n    ...\n    import { NotificationsButtonComponent } from './components/notifications-button/notifications-button.component';\n    **import** **{** **NotificationsService** **}** **from** './services/notifications.service'**;**\n    // <-- Remove the import above\n    @NgModule({\n      declarations: [... ],\n      imports: [...],\n      providers: [\n        **NotificationsService** **// <-- Remove this**\n      ],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { } \n    ```", "```js\n    ...\n    **import** **{** **NotificationsService** **}** **from****'../services/notifications.service'****;** \n    **// <-- Remove the import above**\n    @NgModule({\n      declarations: [...],\n      imports: [...],\n      providers: [\n        **NotificationsService****// <-- Remove this**\n      ]\n    })\n    export class HomeModule { } \n    ```", "```js\n    ...\n    **import** **{** **NotificationsService** **}** **from****'../services/notifications.service'****;**\n    @NgModule({\n      declarations: [HomeComponent, NotificationsManagerComponent],\n      imports: [CommonModule, HomeRoutingModule],\n      providers: [**NotificationsService**],\n    })\n    export class HomeModule {} \n    ```", "```js\n    import { Injectable, **SkipSelf** } from '@angular/core';\n    import { BehaviorSubject, Observable } from 'rxjs';\n    @Injectable({\n      providedIn: 'root',\n    })\n    export class NotificationsService {\n      ...\n      **constructor****(****@SkipSelf****() existingService:**\n    **NotificationsService****) {**\n    **if** **(existingService) {**\n    **throw****Error****(**\n    **'The service has already been provided in the**\n    **app.**\n    **Avoid providing it again in child  modules'**\n    **);**\n    **}**\n    **}**\n      ...\n    } \n    ```", "```js\n    import { Injectable**,** **Optional**, SkipSelf } from '@angular/core';\n    ...\n    export class NotificationsService {\n      ...\n      constructor(**@Optional****()** @SkipSelf() existingService:\n    NotificationsService) {\n        if (existingService) {\n          throw Error ('The service has already been provided in\n    the app. Avoid providing it again in child\n    modules');\n        }\n      }\n      ...\n    } \n    ```", "```js\n    npm run serve ng-singleton-service-forroot \n    ```", "```js\n    cd start && nx g m services --project ng-singleton-service-forroot \n    ```", "```js\n    import { **ModuleWithProviders****,** NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n    **import** **{** **NotificationsService** **}** **from****'./notifications.service'****;**\n    @NgModule({\n      declarations: [],\n      imports: [CommonModule],\n    })\n    export class ServicesModule {\n      **static****forRoot****():** **ModuleWithProviders****<****ServicesModule****> {**\n    **return** **{**\n    **ngModule****:** **ServicesModule****,**\n    **providers****: [****NotificationsService****],**\n    **};**\n    **}**\n    } \n    ```", "```js\n    ...\n    **import** **{** **NotificationsService** **}** **from** **'./services/notifications.service'****;**\n    **// <-- Remove the import above**\n    **import** **{** **ServicesModule** **}** **from****'./services/services.module'****;**\n    @NgModule({\n      declarations: [...],\n      imports: [\n        ...,\n        **ServicesModule****.****forRoot****()**\n      ],\n      providers: [\n        **NotificationsService**// <-- **Remove this**\n      ],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { } \n    ```", "```js\n    ...\n    **import** **{** **NotificationsService** **}** **from****'../services/notifications.service'****;** \n    **//  <-- Remove the above import**\n    **import** **{** **ServicesModule** **}** **from****'../services/services.module'****;**\n    @NgModule({\n      declarations: [HomeComponent,\n        NotificationsManagerComponent],\n      imports: [CommonModule, HomeRoutingModule,\n        **ServicesModule**],\n      providers: [\n        **NotificationsService****// <-- Remove this**\n      ],\n    })\n    export class HomeModule {} \n    ```", "```js\n@NgModule({\n  ...\n  imports: [..., **ServicesModule**],\n}) \n```", "```js\n@NgModule({\n...\n  imports: [..., **ServicesModule****.****forRoot****()**],\n}) \n```", "```js\n    npm run serve ng-aliased-class-providers \n    ```", "```js\n    cd start && nx g service employee/employee-bucket --project ng-aliased-class-providers \n    ```", "```js\n    import { Injectable } from '@angular/core';\n    **import** **{** **BucketService** **}** **from****'../bucket/bucket.service'****;**\n    ...\n    export class EmployeeBucketService**extends****BucketService** {\n      constructor() {\n        **super****();**\n      }\n    } \n    ```", "```js\n    ...\n    export class EmployeeBucketService extends BucketService {\n      constructor() {...}\n      **override****removeItem****() {**\n    **alert****(****'Employees can not delete items'****);**\n    **}**\n    } \n    ```", "```js\n    ...\n    **import** **{** **BucketService** **}** **from****'../bucket/bucket.service'****;**\n    **import** **{** **EmployeeBucketService** **}** **from****'****./employee-bucket.service'****;**\n    @Component({\n      ...\n      **providers****: [{**\n    **provide****:** **BucketService****,**\n    **useClass****:** **EmployeeBucketService****,**\n    **}],**\n    })\n    export class EmployeeComponent {} \n    ```", "```js\n    npm run serve ng-value-providers \n    ```", "```js\n    import { InjectionToken } from '@angular/core';\n    export interface IAppConfig {\n      canDeleteItems: boolean;\n    }\n    export const APP_CONFIG = new InjectionToken<IAppConfig>('APP_CONFIG');\n    export const AppConfig: IAppConfig = {\n      canDeleteItems: true,\n    }; \n    ```", "```js\n    ...\n    **import** **{** **AppConfig****,** **APP_CONFIG** **}** **from****'./app-config'****;**\n    @NgModule({\n      declarations: [AppComponent],\n      imports: [...],\n      **providers****: [{**\n    **provide****:** **APP_CONFIG****,**\n    **useValue****:** **AppConfig****,**\n    **}],**\n    bootstrap: [AppComponent],\n    })\n    export class AppModule {} \n    ```", "```js\n    import { Component, i**nject,** OnInit } from '@angular/core';\n    ...\n    **import** **{** **APP_CONFIG** **}** **from****'../app-config'****;**\n    ...\n    export class BucketComponent implements OnInit {\n      bucketService = inject(BucketService);\n      **appConfig =** **inject****(****APP_CONFIG****);**\n      ...\n    } \n    ```", "```js\n    ...\n    <div *******ngIf****=****\"appConfig.canDeleteItems\"**\n     class=\"fruites__item__delete-icon\"\n      (click)=\"deleteFromBucket(item)\">\n    <div class=\"material-symbols-outlined\">delete</div>\n    </div>\n    ... \n    ```", "```js\n    import { IAppConfig } from '../app-config';\n    export const EmployeeConfig: IAppConfig = {\n      canDeleteItems: false,\n    }; \n    ```", "```js\n    ...\n    **import** **{** **APP_CONFIG** **}** **from****'../app-config'****;**\n    **import** **{** **EmployeeConfig** **}** **from****'./employee.config'****;**\n    @Component({\n      ...\n      **providers****: [{**\n    **provide****:** **APP_CONFIG****,**\n    **useValue****:** **EmployeeConfig****,**\n    **}],**\n    })\n    export class EmployeeComponent {} \n    ```"]