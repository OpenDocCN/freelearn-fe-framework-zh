["```js\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return <Parent count={count} setCount={setCount} />;\n};\n```", "```js\nconst Parent = ({ count, setCount }) => (\n  <>\n    <Component1 count={count} setCount={setCount} />\n    <Component2 count={count} setCount={setCount} />\n  </>\n);\n```", "```js\nconst Component1 = ({ count, setCount }) => (\n  <div>\n    {count}\n    <button onClick={() => setCount((c) => c + 1)}>\n      +1\n    </button>\n  </div>\n);\nconst Component2 = ({ count, setCount }) => (\n  <div>\n    {count}\n    <button onClick={() => setCount((c) => c + 2)}>\n      +2\n    </button>\n  </div>\n);\n```", "```js\nconst ColorContext = createContext('black');\n```", "```js\nconst Component = () => {\n  const color = useContext(ColorContext);\n  return <div style={{ color }}>Hello {color}</div>;\n};\n```", "```js\nconst App = () => (\n  <>\n    <Component />\n    <ColorContext.Provider value=\"red\">\n      <Component />\n    </ColorContext.Provider>\n    <ColorContext.Provider value=\"green\">\n      <Component />\n    </ColorContext.Provider>\n    <ColorContext.Provider value=\"blue\">\n      <Component />\n      <ColorContext.Provider value=\"skyblue\">\n        <Component />\n      </ColorContext.Provider>\n    </ColorContext.Provider>\n  </>\n);\n```", "```js\nconst CountStateContext = createContext({\n  count: 0,\n  setCount: () => {},\n});\n```", "```js\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <CountStateContext.Provider \n      value={{ count, setCount }}\n    >\n      <Parent />\n    </CountStateContext.Provider>\n  );\n};\n```", "```js\nconst Parent = () => (\n  <>\n    <Component1 />\n    <Component2 />\n  </>\n);\n```", "```js\nconst Component1 = () => {\n  const { count, setCount } = \n    useContext(CountStateContext);\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\nconst Component2 = () => {\n  const { count, setCount } = \n    useContext(CountStateContext);\n  return (\n    <div>\n      {count}\n      <button onClick={() => setCount((c) => c + 2)}>\n        +2\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst ColorContext = createContext('black');\n```", "```js\nconst ColorComponent = () => {\n  const color = useContext(ColorContext);\n  const renderCount = useRef(1);\n  useEffect(() => {\n    renderCount.current += 1;\n  });\n  return (\n    <div style={{ color }}>\n      Hello {color} (renders: {renderCount.current})\n    </div>\n  );\n};\n```", "```js\nconst MemoedColorComponent = memo(ColorComponent);\n```", "```js\nconst DummyComponent = () => {\n  const renderCount = useRef(1);\n  useEffect(() => {\n    renderCount.current += 1;\n  });\n  return <div>Dummy (renders: {renderCount.current})</div>;\n};\n```", "```js\nconst MemoedDummyComponent = memo(DummyComponent);\n```", "```js\nconst Parent = () => (\n  <ul>\n    <li><DummyComponent /></li>\n    <li><MemoedDummyComponent /></li>\n    <li><ColorComponent /></li>\n    <li><MemoedColorComponent /></li>\n  </ul>\n);\n```", "```js\nconst App = () => {\n  const [color, setColor] = useState('red');\n  return (\n    <ColorContext.Provider value={color}>\n      <input\n        value={color}\n        onChange={(e) => setColor(e.target.value)}\n      />\n      <Parent />\n    </ColorContext.Provider>\n  );\n};\n```", "```js\nconst CountContext = createContext({ count1: 0, count2: 0 });\n```", "```js\nconst Counter1 = () => {\n  const { count1 } = useContext(CountContext);\n  const renderCount = useRef(1);\n  useEffect(() => {\n    renderCount.current += 1;\n  });\n  return (\n    <div>\n      Count1: {count1} (renders: {renderCount.current})\n    </div>\n  );\n};\nconst MemoedCounter1 = memo(Counter1);\n```", "```js\nconst Counter2 = () => {\n  const { count2 } = useContext(CountContext);\n  const renderCount = useRef(1);\n  useEffect(() => {\n    renderCount.current += 1;\n  });\n  return (\n    <div>\n      Count2: {count2} (renders: {renderCount.current})\n    </div>\n  );\n};\nconst MemoCounter2 = memo(Counter2);\n```", "```js\nconst Parent = () => (\n  <>\n    <MemoCounter1 />\n    <MemoCounter2 />\n  </>\n);\n```", "```js\nconst App = () => {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n  return (\n    <CountContext.Provider value={{ count1, count2 }}>\n      <button onClick={() => setCount1((c) => c + 1)}>\n        {count1}\n      </button>\n      <button onClick={() => setCount2((c) => c + 1)}>\n        {count2}\n      </button>\n      <Parent />\n    </CountContext.Provider>\n  );\n};\n```", "```js\ntype CountContextType = [\n  number,\n  Dispatch<SetStateAction<number>>\n];\n\nconst Count1Context = createContext<CountContextType>([\n  0,\n  () => {}\n]);\nconst Count2Context = createContext<CountContextType>([\n  0,\n  () => {}\n]);\n```", "```js\nconst Counter1 = () => {\n  const [count1, setCount1] = useContext(Count1Context);\n  return (\n    <div>\n      Count1: {count1}\n      <button onClick={() => setCount1((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Counter2 = () => {\n  const [count2, setCount2] = useContext(Count2Context);\n  return (\n    <div>\n      Count2: {count2}\n      <button onClick={() => setCount2((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Parent = () => (\n  <div>\n    <Counter1 />\n    <Counter1 />\n    <Counter2 />\n    <Counter2 />\n  </div>\n);\n```", "```js\nconst Count1Provider = ({\n  children\n}: {\n  children: ReactNode\n}) => {\n  const [count1, setCount1] = useState(0);\n  return (\n    <Count1Context.Provider value={[count1, setCount1]}>\n      {children}\n    </Count1Context.Provider>\n  );\n};\n```", "```js\nconst Count2Provider = ({\n  children\n}: {\n  children: ReactNode\n}) => {\n  const [count2, setCount2] = useState(0);\n  return (\n    <Count2Context.Provider value={[count2, setCount2]}>\n      {children}\n    </Count2Context.Provider>\n  );\n};\n```", "```js\nconst App = () => (\n  <Count1Provider>\n    <Count2Provider>\n      <Parent />\n    </Count2Provider>\n  </Count1Provider>\n);\n```", "```js\nconst [user, setUser] = useState({\n  firstName: 'react',\n  lastName: 'hooks'\n});\n```", "```js\ntype Action = { type: \"INC1\" } | { type: \"INC2\" };\n\nconst Count1Context = createContext<number>(0);\nconst Count2Context = createContext<number>(0);\nconst DispatchContext = createContext<Dispatch<Action>>(\n  () => {}\n);\n```", "```js\nconst Counter1 = () => {\n  const count1 = useContext(Count1Context);\n  const dispatch = useContext(DispatchContext);\n  return (\n    <div>\n      Count1: {count1}\n      <button onClick={() => dispatch({ type: \"INC1\" })}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Counter2 = () => {\n  const count2 = useContext(Count2Context);\n  const dispatch = useContext(DispatchContext);\n  return (\n    <div>\n      Count2: {count2}\n      <button onClick={() => dispatch({ type: \"INC2\" })}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Parent = () => (\n  <div>\n    <Counter1 />\n    <Counter1 />\n    <Counter2 />\n    <Counter2 />\n  </div>\n);\n```", "```js\nconst Provider = ({ children }: { children: ReactNode }) => {\n  const [state, dispatch] = useReducer(\n    (\n      prev: { count1: number; count2: number },\n      action: Action\n    ) => {\n      if (action.type === \"INC1\") {\n        return { ...prev, count1: prev.count1 + 1 };\n      }\n      if (action.type === \"INC2\") {\n        return { ...prev, count2: prev.count2 + 1 };\n      }\n      throw new Error(\"no matching action\");\n    },\n    {\n      count1: 0,\n      count2: 0,\n    }\n  );\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <Count1Context.Provider value={state.count1}>\n        <Count2Context.Provider value={state.count2}>\n          {children}\n        </Count2Context.Provider>\n      </Count1Context.Provider>\n    </DispatchContext.Provider>\n  );\n};\n```", "```js\nconst App = () => (\n  <Provider>\n    <Parent />\n  </Provider>\n);\n```", "```js\n      if (action.type === \"INC_BOTH\") {\n        return {\n          ...prev,\n          count1: prev.count1 + 1,\n          count2: prev.count2 + 1,\n        };\n      }\n```", "```js\ntype CountContextType = [\n  number,\n  Dispatch<SetStateAction<number>>\n];\n\nconst Count1Context = createContext<\n  CountContextType | null\n>(null);\n```", "```js\nexport const Count1Provider = ({\n  children\n}: {\n  children: ReactNode\n}) => (\n  <Count1Context.Provider value={useState(0)}>\n    {children}\n  </Count1Context.Provider>\n);\n```", "```js\nexport const useCount1 = () => {\n  const value = useContext(Count1Context);\n  if (value === null) throw new Error(\"Provider missing\");\n  return value;\n};\n```", "```js\nconst Count2Context = createContext<\n  CountContextType | null\n>(null);\nexport const Count2Provider = ({\n  children\n}: {\n  children: ReactNode\n}) => (\n  <Count2Context.Provider value={useState(0)}>\n    {children}\n  </Count2Context.Provider>\n);\nexport const useCount2 = () => {\n  const value = useContext(Count2Context);\n  if (value === null) throw new Error(\"Provider missing\");\n  return value;\n};\n```", "```js\nconst Counter1 = () => {\n  const [count1, setCount1] = useCount1();\n  return (\n    <div>\n      Count1: {count1}\n      <button onClick={() => setCount1((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Counter2 = () => {\n  const [count2, setCount2] = useCount2();\n  return (\n    <div>\n      Count2: {count2}\n      <button onClick={() => setCount2((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Parent = () => (\n  <div>\n    <Counter1 />\n    <Counter1 />\n    <Counter2 />\n    <Counter2 />\n  </div>\n);\n```", "```js\nconst App = () => (\n  <Count1Provider>\n    <Count2Provider>\n      <Parent />\n    </Count2Provider>\n  </Count1Provider>\n);\n```", "```js\nconst createStateContext = (\n  useValue: (init) => State,\n) => {\n  const StateContext = createContext(null);\n  const StateProvider = ({\n    initialValue,\n    children,\n  }) => (\n    <StateContext.Provider value={useValue(initialValue)}>\n      {children}\n    </StateContext.Provider>\n  );\n  const useContextState = () => {\n    const value = useContext(StateContext);\n    if (value === null) throw new Error(\"Provider\n      missing\");\n    return value;\n  };\n  return [StateProvider, useContextState] as const;\n};\n```", "```js\nconst useNumberState = (init) => useState(init || 0);\n```", "```js\nconst [Count1Provider, useCount1] =\n  createStateContext(useNumberState);\nconst [Count2Provider, useCount2] =\n  createStateContext(useNumberState);\n```", "```js\nconst Counter1 = () => {\n  const [count1, setCount1] = useCount1();\n  return (\n    <div>\n      Count1: {count1}\n      <button onClick={() => setCount1((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\nconst Counter2 = () => {\n  const [count2, setCount2] = useCount2();\n  return (\n    <div>\n      Count2: {count2}\n      <button onClick={() => setCount2((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n};\n```", "```js\nconst Parent = () => (\n  <div>\n    <Counter1 />\n    <Counter1 />\n    <Counter2 />\n    <Counter2 />\n  </div>\n);\nconst App = () => (\n  <Count1Provider>\n    <Count2Provider>\n      <Parent />\n    </Count2Provider>\n  </Count1Provider>\n);\n```", "```js\nconst useMyState = () => useReducer({}, (prev, action) => {\n  if (action.type === 'SET_FOO') {\n    return { ...prev, foo: action.foo };\n  }\n  // ...\n};\n```", "```js\nconst useMyState = (initialState = { count1: 0, count2: 0 }) => {\n  const [state, setState] = useState(initialState);\n  useEffect(() => {\n    console.log('updated', state);\n  });\n  const inc1 = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      count1: prev.count1 + 1\n    }));\n  }, []);\n  const inc2 = useCallback(() => {\n    setState((prev) => ({\n      ...prev,\n      count2: prev.count2 + 1\n    }));\n  }, []);\n  return [state, { inc1, inc2 }];\n};\n```", "```js\nconst createStateContext = <Value, State>(\n  useValue: (init?: Value) => State\n) => {\n  const StateContext = createContext<State | null>(null);\n  const StateProvider = ({\n    initialValue,\n    children,\n  }: {\n    initialValue?: Value;\n    children?: ReactNode;\n  }) => (\n    <StateContext.Provider value={useValue(initialValue)}>\n      {children}\n    </StateContext.Provider>\n  );\n  const useContextState = () => {\n    const value = useContext(StateContext);\n    if (value === null){ \n     throw new Error(\"Provider missing\");\n    }\n    return value;\n  };\n  return [StateProvider, useContextState] as const;\n};\nconst useNumberState = (init?: number) => useState(init || 0);\n```", "```js\nconst [Count1Provider, useCount1] =\n  createStateContext(useNumberState);\nconst [Count2Provider, useCount2] =\n  createStateContext(useNumberState);\nconst [Count3Provider, useCount3] =\n  createStateContext(useNumberState);\nconst [Count4Provider, useCount4] =\n  createStateContext(useNumberState);\nconst [Count5Provider, useCount5] =\n  createStateContext(useNumberState);\n```", "```js\nconst App = () => (\n  <Count1Provider initialValue={10}>\n    <Count2Provider initialValue={20}>\n      <Count3Provider initialValue={30}>\n        <Count4Provider initialValue={40}>\n          <Count5Provider initialValue={50}>\n            <Parent />\n          </Count5Provider>\n        </Count4Provider>\n      </Count3Provider>\n    </Count2Provider>\n  </Count1Provider>\n);\n```", "```js\nconst App = () => {\n  const providers = [\n    [Count1Provider, { initialValue: 10 }],\n    [Count2Provider, { initialValue: 20 }],\n    [Count3Provider, { initialValue: 30 }],\n    [Count4Provider, { initialValue: 40 }],\n    [Count5Provider, { initialValue: 50 }],\n  ] as const;\n  return providers.reduceRight(\n    (children, [Component, props]) =>\n      createElement(Component, props, children),\n    <Parent />,\n  );\n};\n```"]