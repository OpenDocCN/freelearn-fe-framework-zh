- en: Getting Started with TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TypeScript入门
- en: In the previous chapter, we discussed the challenges we may encounter because
    of the loose-type nature of the JavaScript language. We also saw various attempts
    of mitigating these challenges, none of which felt natural at all. We also introduced
    TypeScript as a tool that could help; how TypeScript can help is what we will
    discuss in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了由于JavaScript语言的松散类型特性可能遇到的挑战。我们还看到了各种减轻这些挑战的尝试，但没有一种感觉自然。我们还介绍了TypeScript作为一种有助于的工具；本章将讨论TypeScript如何帮助我们。
- en: The building blocks of TypeScript and its core concepts are matters of the heart,
    and we need to treat them as such. Therefore, backed with hands-on examples, we
    will discuss these building blocks, how they work together, and how you can integrate
    them into your workflow as a JavaScript developer. But first, we need to learn
    how to set up TypeScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的构建块和核心概念是关乎内心的事情，我们需要将它们视为这样。因此，通过实际示例，我们将讨论这些构建块，它们如何一起工作，以及如何将它们集成到您的工作流程中作为JavaScript开发人员。但首先，我们需要学习如何设置TypeScript。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a TypeScript environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建TypeScript环境
- en: Building working examples with TypeScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TypeScript构建工作示例
- en: Type Annotation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型注解
- en: ES6 and TypeScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ES6和TypeScript
- en: Setting up TypeScript
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置TypeScript
- en: The TypeScript setup depends on the context where it will be used. This is because
    you can integrate it in any JavaScript tools, libraries, and frameworks as long
    as it's properly configured for the environment. For now, we will focus on the
    simplest and the most basic setup.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的设置取决于将要使用的上下文。这是因为只要为环境正确配置，就可以将其集成到任何JavaScript工具、库和框架中。现在，我们将专注于最简单和最基本的设置。
- en: A basic knowledge of Node and its package manager npm is required to get going
    with TypeScript. It's also required that you install both from the Node website
    ([https://nodejs.org/en/](https://nodejs.org/en/)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用TypeScript，需要基本了解Node及其包管理器npm。还需要从Node网站安装两者（[https://nodejs.org/en/](https://nodejs.org/en/)）。
- en: 'With Node and npm installed, you can install TypeScript globally using `npm`
    via the command line tool:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Node和npm后，可以使用命令行工具通过`npm`全局安装TypeScript：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you get a permission warning while trying to install, you can use the `sudo`
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装时出现权限警告，可以使用`sudo`命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see the following output if the installation goes well:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装顺利，将看到以下输出：
- en: '![](assets/b6a24256-5cc2-4a09-802d-3fe013419191.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6a24256-5cc2-4a09-802d-3fe013419191.png)'
- en: 'To confirm whether the TypeScript installation was successful, you can check
    the installed version. If a version is shown, then you have a successful installation:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认TypeScript安装是否成功，可以检查已安装的版本。如果显示版本，则安装成功：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Therefore, a TypeScript instance on your machine will work as shown ahead:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您的计算机上的TypeScript实例将如下所示：
- en: '![](assets/6be1f19f-0633-4e2e-8ba6-65321d3488d9.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6be1f19f-0633-4e2e-8ba6-65321d3488d9.png)'
- en: Hello World
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World
- en: TypeScript files have a `.ts` extension. The extension supports both JavaScript
    and TypeScript. This means that it is correct to write JavaScript code in a `.ts`
    file without TypeScript. Let's see an example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript文件的扩展名为`.ts`。该扩展名支持JavaScript和TypeScript。这意味着可以在`.ts`文件中编写JavaScript代码而不需要TypeScript。让我们看一个例子。
- en: 'First, make an `index.html` file with the following minimal bootstrap markup:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个带有以下最小引导标记的`index.html`文件：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that the JavaScript file added before the closing tag is *not* a `.ts`
    file; rather, it''s a familiar JavaScript file with a `.js` extension. This doesn''t
    mean that our logic will be written in JavaScript; in fact, it''s a TypeScript
    file named `2.1.ts`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在结束标记之前添加的JavaScript文件*不是*一个`.ts`文件；相反，它是一个带有`.js`扩展名的熟悉的JavaScript文件。这并不意味着我们的逻辑将用JavaScript编写；事实上，它是一个名为`2.1.ts`的TypeScript文件：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Does anything look weird? No, I don't think so. We're still talking pure JavaScript
    but just that it lives in a TypeScript file. This shows how TypeScript supports
    pure JavaScript.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么奇怪的地方吗？不，我不这么认为。我们仍然在谈论纯JavaScript，只是它存在于一个TypeScript文件中。这展示了TypeScript如何支持纯JavaScript。
- en: 'Remember that we are importing `2.1.js` in the `index.html` file and not `2.1.ts`.
    Therefore, it''s time to generate an output that the browser can understand. This
    is where the TypeScript compiler that we installed via `npm` comes in handy. To
    compile, enter `cd` into your working directory and run the following command
    in your command line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们在`index.html`文件中导入的是`2.1.js`，而不是`2.1.ts`。因此，现在是时候生成浏览器可以理解的输出了。这就是我们通过`npm`安装的TypeScript编译器派上用场的地方。要编译，进入您的工作目录并在命令行中运行以下命令：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Ignore the warning about the value property. We will fix that soon.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*忽略关于值属性的警告。我们很快就会解决这个问题。*'
- en: 'This will generate a compiled `2.1.js` file. As you may have guessed, looking
    at both shows no syntax difference:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个编译后的`2.1.js`文件。正如您可能已经猜到的那样，查看这两者并没有语法差异：
- en: '![](assets/77a5c5c6-a454-4377-9a43-630acc14f68c.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/77a5c5c6-a454-4377-9a43-630acc14f68c.png)'
- en: 'You can then serve your web page with the generated assets using a web server.
    There are lots of options to help you complete this, but `serve` is quite popular
    and stable ([https://github.com/zeit/serve](https://github.com/zeit/serve)). To
    install `serve`, run the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用Web服务器提供生成的资产来提供您的网页。有很多选项可以帮助您完成这一点，但`serve`非常受欢迎和稳定（[https://github.com/zeit/serve](https://github.com/zeit/serve)）。要安装`serve`，运行以下命令：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you can serve directly hosting your `index` file with the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以直接使用以下内容托管您的`index`文件：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With `npm` scripts, you can run both the commands concurrently. First, initialize
    `package.json`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`npm`脚本，您可以同时运行这两个命令。首先，初始化`package.json`：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add the following scripts to the JSON:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下脚本添加到JSON中：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We passed in the watched option (`-w`), so TypeScript can recompile whenever
    a change is detected in the `.ts` file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传入了`-w`选项，因此TypeScript可以在`.ts`文件中检测到更改时重新编译。
- en: 'This is what our example looks like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的示例的样子：
- en: '![](assets/b6fd864a-d2cc-4cce-8012-66d931cb0814.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6fd864a-d2cc-4cce-8012-66d931cb0814.png)'
- en: Type annotation in TypeScript
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript中的类型注释
- en: It's worth mentioning again that nothing looks different in the `Hello World`
    example we just saw. Let's employ some TypeScript specific features, one of which
    is Types. Types are the reason TypeScript exists, and every other feature apart
    from Types is just syntactic sugar.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 值得再次提到的是，在我们刚刚看到的`Hello World`示例中，没有任何不同之处。让我们使用一些特定于TypeScript的功能，其中之一就是类型。类型是TypeScript存在的原因，除了类型之外的每个功能都只是语法糖。
- en: 'We are not going into details with Types because [Chapter 3](fb2f2b0b-b55a-42c6-b7bc-6c1a275f064a.xhtml),
    *Typescript Native Types and Accessors*, covers that. What we can discuss is Type
    annotation, which is a mechanism that TypeScript uses to apply strict types to
    a member. Annotation is achieved by following the member initialization with a
    colon (`:`) and the type (for example, `string`) as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细讨论类型，因为[第3章](fb2f2b0b-b55a-42c6-b7bc-6c1a275f064a.xhtml)，*Typescript原生类型和访问器*，涵盖了这一点。我们可以讨论的是类型注释，这是TypeScript用来对成员应用严格类型的机制。注释是通过在成员初始化后跟着一个冒号（`:`）和类型（例如，`string`）来实现的，如下所示：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s have a look at some annotated examples:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些带注释的示例：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Not just primitives but objects, arrays, and functions can be typed as well.
    We will see how shortly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅基本类型，对象、数组和函数也可以被类型化。我们很快就会看到。
- en: What we can do is rewrite our previous `Hello World` example in order to annotate
    the variables and functions with types.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重写之前的`Hello World`例子，以便用类型注释来注释变量和函数。
- en: 'Take a look at this image again:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 再看一下这张图片：
- en: '![](assets/ce477b33-7933-4a1b-b184-65e3607fc256.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ce477b33-7933-4a1b-b184-65e3607fc256.png)'
- en: On the TypeScript section (right),  `value`seems not to be identified by the
    editor as a property of the DOM and, hence, the error line. But wait, it is the
    same old JavaScript you have been writing your entire life. What's wrong here?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript部分（右侧），`value`似乎没有被编辑器识别为DOM的属性，因此出现了错误行。但等等，这还是你一直在写的老JavaScript。这里有什么问题吗？
- en: TypeScript comes with defined types for the DOM. This means that it will throw
    an error when we try to access a property that is not defined in the respective
    DOM interface (more on interfaces later). By nature, the DOM query method, `querySelector`,
    alongside the other query methods return an `Element` type (which is inferred
    if not annotated). The `Element` type is basic and is comprised of generic information
    about the DOM, which means that properties and methods specific to what is derived
    from `Element` will not be seen.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript自带了DOM的定义类型。这意味着当我们尝试访问在相应的DOM接口中未定义的属性时，它会抛出错误（接口的更多内容稍后再说）。DOM查询方法`querySelector`以及其他查询方法返回的是`Element`类型（如果没有注释的话会被推断出来）。`Element`类型是基本的，包含有关DOM的通用信息，这意味着从`Element`派生的属性和方法将不会被看到。
- en: 'This makes sense not just in TypeScript but also in other OOP languages:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅在TypeScript中有意义，在其他面向对象的语言中也是如此：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Back to our example, let''s see how we can use annotation and casting to fix
    this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的例子，让我们看看如何使用注释和转换来解决这个问题：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'There are no behavioral changes, just productivity improvements. Let''s discuss
    what''s going on:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 没有行为上的改变，只是提高了生产力。让我们讨论一下发生了什么：
- en: The button element is of type `Element`. Nothing special here because TypeScript
    already infers that internally.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮元素是`Element`类型。这里没有什么特别的，因为TypeScript已经内部推断出来了。
- en: The input element is of the `HTMLInputElement`type. Because TypeScript infers
    the returned value as `Element`, we had to cast to the correct type, that is, `HTMLInputElement`.
    This is done by prefixing the returned value with `<>` and passing the interface
    that we want to cast it to.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入元素是`HTMLInputElement`类型。因为TypeScript将返回值推断为`Element`，所以我们必须将其转换为正确的类型，即`HTMLInputElement`。这是通过在返回值前加上`<>`并传递我们想要转换的接口来完成的。
- en: The messenger element is of the `HTMLElement`type. We still had to cast here
    using the same reason as seen in *Step 2* but with a different supported syntax
    (`as`). `HTMLElement` is a subtype for `Element` and includes more specific DOM
    properties/methods (such as`innerText`).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信使元素是`HTMLElement`类型。我们仍然需要使用相同的原因进行转换，就像在*步骤2*中看到的那样，但使用了不同的支持语法（`as`）。`HTMLElement`是`Element`的子类型，包括更具体的DOM属性/方法（如`innerText`）。
- en: Rather than passing the callback, we wrap it in a function, so we can receive
    parameters.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不是直接传递回调函数，而是将其包装在一个函数中，这样我们就可以接收参数。
- en: 'Let''s take a look at the method passed to `addEventListener`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下传递给`addEventListener`的方法：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We added a lot of validation logic just to make sure that we are getting the
    right type from the parameters. We can simplify this by using TypeScript annotation:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了很多验证逻辑，只是为了确保我们从参数中得到了正确的类型。我们可以通过使用TypeScript注释来简化这个过程：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is much better, right? The unnecessary checks are taken care of with Types.
    In fact, before this gets to the browser, if your editor (for example, VS Code)
    supports TypeScript, you will get syntax errors when the method is called with
    invalid types.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这样好多了，对吧？类型检查已经处理了不必要的检查。事实上，在传递到浏览器之前，如果你的编辑器（例如VS Code）支持TypeScript，当使用无效类型调用方法时，你会得到语法错误。
- en: Type annotation helps us write less verbose, more comprehensible, and bug-free
    applications. TypeScript makes annotation flexible; hence, you do not have to
    strictly provide types for every member in your logic. You're free to annotate
    what you feel is necessary, ranging from nothing to all; just keep in mind that
    the more strict your annotations are, the less debugging you will have to do in
    the browser.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 类型注解帮助我们编写更简洁、更易理解和无bug的应用程序。TypeScript使注解灵活；因此，你不必严格为逻辑中的每个成员提供类型。你可以自由地注解你认为必要的内容，从什么都不注解到全部注解；只需记住，你的注解越严格，你在浏览器中需要做的调试就越少。
- en: ES6 and beyond
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ES6及更高版本
- en: In addition to Type annotation, TypeScript supports EcamaScript 6 (ES6/ES2015)
    alongside other helpful features, such as enums, decorators, accessibility level
    (private, public, and protected), interfaces, generics, and so on
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 除了类型注解，TypeScript还支持EcamaScript 6（ES6/ES2015）以及其他有用的功能，如枚举、装饰器、可访问级别（private、public和protected）、接口、泛型等等
- en: We will take a deep look into a few of the features in the next chapter. Before
    that, let's get our feet wet and our hands a little bit dirty by trying another
    example, which comprises some of these ES6 and TypeScript-specific features. We
    will build a counter app. This is just an attempt to get you excited about these
    features, and you get to see how TypeScript brings the features you always wished
    existed in JavaScript.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章深入了解一些功能。在那之前，让我们先尝试另一个例子，其中包括一些ES6和TypeScript特定的功能。我们将构建一个计数器应用程序。这只是一个让你对这些功能感到兴奋的尝试，你将看到TypeScript如何带来你一直希望存在于JavaScript中的功能。
- en: 'Let''s get started with a basic HTML template:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个基本的HTML模板开始：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: User story
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户故事
- en: '*The user is expected to increment or decrement a counter from the click of
    a button,* basically, a counter that''s initialized to `0`, an increment button
    to increment by `1`, and a decrement button to decrement by `1`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*用户预期从按钮点击中增加或减少计数器*，基本上，一个初始化为`0`的计数器，一个增加按钮以增加`1`，一个减少按钮以减少`1`。'
- en: 'Rather than littering our code with DOM manipulations and event logic, we can
    organize them into classes. After all, that''s why classes exist:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将DOM操作和事件逻辑组织成类，而不是在代码中到处散落。毕竟，这就是类存在的原因：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is JavaScript looking like a structured language. Let''s take some time
    to explain what is going on:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是JavaScript看起来像一个结构化语言。让我们花点时间解释一下正在发生的事情：
- en: First, we create a class and declare some private properties to hold the temporary
    state of the HTML DOM elements. Visibility features such as `private` are specific
    to TypeScript only but classes have been around in ES6.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个类并声明一些私有属性来保存HTML DOM元素的临时状态。像`private`这样的可见性特性只在TypeScript中特有，但类在ES6中已经存在了。
- en: The constructor uses this `_getDOMElement` private utility method to query the
    DOM and initialize the values of the private properties.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数使用了`_getDOMElement`私有实用方法来查询DOM并初始化私有属性的值。
- en: The `incBtn` and `decBtn` getters are used to make the values of these private
    properties public. This is a common pattern in OOP. Getters are categorized under
    accessors and available in ES6.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`incBtn`和`decBtn`的getter用于将这些私有属性的值公开。这是面向对象编程中的常见模式。Getter被归类为访问器，并在ES6中可用。'
- en: The counter accessors are used to set and retrieve the values of the counter
    text by converting them to integer and string, respectively.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计数器访问器用于通过将它们转换为整数和字符串来设置和检索计数器文本的值。
- en: 'Your first attempt to run this should throw an error, as shown in the following
    image:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您第一次尝试运行此应用程序应该会抛出错误，如下图所示：
- en: '![](assets/96f14b4a-7ccc-4e40-a464-f13f7b922968.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/96f14b4a-7ccc-4e40-a464-f13f7b922968.png)'
- en: 'This is expected because TypeScript compiles to ES3 by default, but getters
    and setters (accessors) are not available in ES3\. To get rid of this error, you
    can tell the TypeScript compiler that you prefer ES5 rather than ES3:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为TypeScript默认编译为ES3，但在ES3中不支持getter和setter（访问器）。要消除此错误，您可以告诉TypeScript编译器您更喜欢ES5而不是ES3：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `-t` flag, alias for `--target`, tells TypeScript which version to compile
    to.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`-t`标志，`--target`的别名，告诉TypeScript要编译到哪个版本。'
- en: 'The `DOMEvent` class is a lot simpler--just a single method to register all
    kinds of events when called:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`DOMEvent`类要简单得多--只有一个方法在调用时注册所有类型的事件：'
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The method takes the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受以下内容：
- en: An element to listen for events on
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要监听事件的元素
- en: The type of event (for example, `click`, `mouseover`, and `dblclick`) as string
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件类型（例如`click`，`mouseover`和`dblclick`）作为字符串
- en: A callback method that returns nothing (`void`) but is passed to the event payload
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个回调方法，返回`void`，但被传递给事件负载
- en: The method then uses `addEventListener` to register the event.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后该方法使用`addEventListener`注册事件。
- en: 'Finally, we need an entry point for the example. This will be in the form of
    a class as well and the class will depend on an instance of `DOM` and `DOMEvent`
    classes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个示例的入口点。这也将是一个类的形式，该类将依赖于`DOM`和`DOMEvent`类的实例：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s discuss how the preceding snippet works:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论前面代码片段的工作原理：
- en: The constructor, which is called when the class is initialized, attempts to
    set up events using the `setupEvents` method.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数在类初始化时被调用，尝试使用`setupEvents`方法设置事件。
- en: The `setupEvents`method iterates over the list of buttons that we have on the
    DOM and calls the `DOMEvents register` method on each of them
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setupEvents`方法遍历DOM上的按钮列表，并在每个按钮上调用`DOMEvents register`方法'
- en: The register method is passed to the button as `HTMLElement`, `click`as the
    type of event, and `handleClicks` as the event handler. The handler is bound with
    the right contextual `this`. This is always a confusion in JavaScript; Yehuda
    Katz has explained how it works in a simple manner at [http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/](http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register`方法作为`HTMLElement`传递给按钮，`click`作为事件类型，`handleClicks`作为事件处理程序。处理程序与正确的上下文`this`绑定。这在JavaScript中总是令人困惑；Yehuda
    Katz已经以简单的方式解释了它的工作原理，网址为[http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/](http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/)。'
- en: The callback method invokes `incrementCounter` or `decrementCounter` depending
    on the ID of the button that is clicked. These methods add or subtract `1` from
    the counter, respectively.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调方法根据被点击的按钮的ID调用`incrementCounter`或`decrementCounter`。这些方法分别从计数器中加1或减1。
- en: 'You can initialize the app by creating an instance of `App`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过创建`App`的实例来初始化应用程序：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The image shows our newly built slick counter app:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该图显示了我们新建的时髦计数器应用程序：
- en: '![](assets/e90ced32-94ab-4ba2-885a-f55901e53335.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e90ced32-94ab-4ba2-885a-f55901e53335.png)'
- en: Final notes
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后说明
- en: 'It''s important to point out the cool features we used in these examples once
    more:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是再次指出我们在这些示例中使用的很酷的功能：
- en: Classes
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: Accessors
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问器
- en: Visibility
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可见性
- en: 'Arrow functions (callbacks):'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箭头函数（回调）：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `const` keyword for variable declarations instead of `var`
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const`关键字用于变量声明，而不是`var`'
- en: 'Destructuring :'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解构：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Some of these features are available natively in the JavaScript environment;
    TypeScript builds on them to give you a better experience as a developer. This
    is why it is called a JavaScript superset.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些功能在JavaScript环境中是原生可用的；TypeScript在此基础上进行了扩展，为开发人员提供更好的体验。这就是为什么它被称为JavaScript的超集。
- en: In the next chapter, we will sit back to review and describe these features
    with more examples to make you get used to the workflow.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾和描述这些功能，并举更多例子让你熟悉工作流程。
