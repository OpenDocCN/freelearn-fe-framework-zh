["```js\n<ListView #listview [items]=\"tracks | orderBy: 'order'\" class=\"list-group\" \n  [itemTemplateSelector]=\"templateSelector\">\n  <ng-template let-track=\"item\" nsTemplateKey=\"default\">\n    <GridLayout rows=\"auto\" columns=\"100,*,100\" class=\"list-group-item\" \n      [class.muted]=\"track.mute\">\n      <Button text=\"Record\" (tap)=\"record(track)\" row=\"0\" col=\"0\" class=\"c-ruby\"></Button>\n      <Label [text]=\"track.name\" row=\"0\" col=\"1\" class=\"h2\"></Label>\n      <Switch row=\"0\" col=\"2\" class=\"switch\" [(ngModel)]=\"track.mute\"></Switch>\n    </GridLayout>\n  </ng-template>\n\n  <ng-template let-track=\"item\" nsTemplateKey=\"waveform\">\n    <AbsoluteLayout [class.muted]=\"track.mute\">\n      <Waveform class=\"waveform w-full\" top=\"0\" left=\"0\" height=\"80\"\n        [model]=\"track.model\"\n        type=\"file\"\n        plotColor=\"#888703\"\n        fill=\"true\"\n        mirror=\"true\"\n        plotType=\"buffer\"></Waveform>\n\n      <Label [text]=\"track.name\" row=\"0\" col=\"1\" class=\"h3 track-name-float\"\n        top=\"5\" left=\"20\"></Label>\n      <Slider slim-slider=\"fader.png\" minValue=\"0\" maxValue=\"1\" \n        width=\"94%\" top=\"50\" left=\"0\"\n        [(ngModel)]=\"track.volume\" class=\"slider fader\"></Slider>\n    </AbsoluteLayout>\n  </ng-template>\n</ListView>\n```", "```js\n// angular\nimport { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\n\n// nativescript\nimport { ListView } from 'ui/list-view';\n\n// app\nimport { ITrack } from '../../../shared/models';\nimport { AuthService, DialogService } from '../../../core/services';\nimport { PlayerService } from '../../services/player.service';\n\n@Component({\n moduleId: module.id,\n selector: 'track-list',\n templateUrl: 'track-list.component.html',\n})\nexport class TrackListComponent {\n\n  public templateSelector: Function;\n  @Input() tracks: Array<ITrack>;\n  @ViewChild('listview') _listviewRef: ElementRef;\n private _listview: ListView;\n private _sub: any;\n\n  constructor(\n    private authService: AuthService,\n    private dialogService: DialogService,\n    private router: Router,\n    private playerService: PlayerService\n  ) { \n    this.templateSelector = this._templateSelector.bind(this);\n  }\n\n  ngOnInit() {\n this._sub = this.playerService.trackListViewChange$.subscribe(() => {      // since this involves our templateSelector, ensure ListView knows about it\n      // refresh list\n this._listview.refresh();\n });\n }\n\n ngAfterViewInit() {\n this._listview = <ListView>this._listviewRef.nativeElement;\n }\n\n private _templateSelector(item: ITrack, index: number, items: ITrack[]) {\n return this.playerService.trackListViewType;\n }\n  ...\n```", "```js\n<ActionBar [title]=\"title\" class=\"action-bar\">\n  <ActionItem nsRouterLink=\"/mixer/home\">\n    <Button text=\"List\" class=\"action-item\"></Button>\n  </ActionItem>\n  <ActionItem (tap)=\"toggleList()\" ios.position=\"right\">\n <Button [text]=\"toggleListText\" class=\"action-item\"></Button>\n </ActionItem>\n  <ActionItem (tap)=\"record()\" ios.position=\"right\">\n    <Button text=\"Record\" class=\"action-item\"></Button>\n  </ActionItem>\n</ActionBar>\n```", "```js\n<ActionBar class=\"action-bar\">\n  <GridLayout rows=\"auto\" columns=\"auto,*,auto,auto\" class=\"action-bar\">\n    <Button text=\"List\" nsRouterLink=\"/mixer/home\" \n      class=\"action-item\" row=\"0\" col=\"0\"></Button>\n    <Label [text]=\"title\" class=\"action-bar-title text-center\" row=\"0\" col=\"1\"></Label>\n    <Button [text]=\"toggleListText\" (tap)=\"toggleList()\" \n class=\"action-item\" row=\"0\" col=\"2\"></Button>\n    <Button text=\"Record\" (tap)=\"record()\" \n      class=\"action-item\" row=\"0\" col=\"3\"></Button>\n  </GridLayout>\n</ActionBar>\n```", "```js\n...\nimport { PlayerService } from '../../../player/services/player.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'action-bar',\n  templateUrl: 'action-bar.component.html'\n})\nexport class ActionBarComponent {\n  ...\n  public toggleListText: string = 'Waveform';\n\n  constructor(\n    private router: RouterExtensions,\n    private playerService: PlayerService\n  ) { }\n  ...\n  public toggleList() {\n    // later we can use icons, using labels for now let type = this.playerService.trackListViewType === 'default' ? 'waveform' : 'default';\n    this.playerService.trackListViewType = type;\n    this.toggleListText = type === 'default' ? 'Waveform' : 'Default';\n }\n}\n```", "```js\n...\n@Injectable()\nexport class PlayerService {\n  ...\n  // communicate state changes from ActionBar to anything else\n  public trackListViewChange$: Subject<string> = new Subject(); ... public get trackListViewType() {\n    return this._trackListViewType;\n  }\n\n  public set trackListViewType(value: string) {\n    this._trackListViewType = value;\n    this.trackListViewChange$.next(value);\n  } ...\n```", "```js\n...\nimport { NativeScriptFormsModule } from 'nativescript-angular/forms'; \n...\n@NgModule({\n  imports: [\n    NativeScriptModule, \n    NativeScriptRouterModule,\n    NativeScriptFormsModule\n  ],\n  ...\n  exports: [\n    NativeScriptModule,\n    NativeScriptRouterModule,\n    NativeScriptFormsModule,\n    ...PIPES\n  ]\n})\nexport class SharedModule {}\n```", "```js\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n...\nexport class TrackModel implements ITrack {\n  public id: number;\n  public filepath: string;\n  public name: string;\n  public order: number;\n  public model: any;\n\n  public volume$: BehaviorSubject<number>;\n\n  private _volume: number = 1; // default full volume\n  private _mute: boolean;\n  private _origVolume: number; // return to after unmute\n\n  constructor(model?: ITrack) {\n    this.volume$ = new BehaviorSubject(this._volume);\n    ...\n  }\n\n  public set mute(value: boolean) {\n this._mute = value;\n if (this._mute) {\n this._origVolume = this._volume;\n this.volume = 0;\n } else {\n this.volume = this._origVolume;\n }\n }\n\n public get mute() {\n return this._mute;\n }\n\n public set volume(value: number) {\n this._volume = value;\n this.volume$.next(this._volume);\n if (this._volume > 0 && this._mute) {\n      // if just increasing volume from a muted state\n      // ensure it's unmuted\n this._origVolume = this._volume;\n this._mute = false;\n }\n }\n\n public get volume() {\n return this._volume;\n }\n}\n```", "```js\n...\nimport { Subscription } from 'rxjs/Subscription';\n...\ninterface ITrackPlayer {\n  track: TrackModel; // was trackId only\n  duration: number;\n  readonly player: TNSPlayer;\n}\n...\nexport class TrackPlayerModel implements ITrackPlayer {\n  public track: TrackModel;\n  ...\n  private _sub: Subscription;\n  ...\n  public load(track: TrackModel, complete: Function, error: Function): Promise<number> {\n    return new Promise((resolve, reject) => {\n      this.track = track;\n\n      this._player.initFromFile({\n        ...\n      }).then(() => {\n        ...\n        // if reloading track, clear subscription before subscribing again\n        if (this._sub) this._sub.unsubscribe();\n this._sub = this.track.volume$.subscribe((value) => {\n if (this._player) {\n // react to track model property changes\n this._player.volume = value;\n }\n });\n      }, reject);\n    });\n  }\n  ...\n  public cleanup() {\n    // cleanup and dispose player\n    if (this.player) this.player.dispose();\n    if (this._sub) this._sub.unsubscribe(); \n  }\n  ...\n```", "```js\n// nativescript\nimport { knownFolders, path } from 'file-system';\n...\n@Injectable()\nexport class MixerService {\n\n  public list: Array<IComposition>;\n\n  constructor(\n    private databaseService: DatabaseService,\n    private dialogService: DialogService\n  ) {\n    // restore with saved compositions or demo list\n    this.list = this._hydrateList(this._savedCompositions() || this._demoComposition());\n  }\n  ...\n  private _saveList() {\n    this.databaseService.setItem(DatabaseService.KEYS.compositions, this._serializeList());\n  }\n\n  private _serializeList() {\n let serialized = [];\n for (let comp of this.list) {\n let composition: any = Object.assign({}, comp);\n composition.tracks = [];\n for (let track of comp.tracks) {\n let serializedTrack = {};\n for (let key in track) {\n          // ignore observable, private properties and waveform model (redundant)\n          // properties are restored upon hydration\n if (!key.includes('_') && !key.includes('$') && key != 'model') {\n serializedTrack[key] = track[key];\n }\n }\n composition.tracks.push(serializedTrack);\n }\n      // serialized composition\n serialized.push(composition);\n }\n return serialized;\n }\n\n private _hydrateList(list: Array<IComposition>) {\n for (let c = 0; c < list.length; c++) {\n let comp = new CompositionModel(list[c]);\n for (let i = 0; i < comp.tracks.length; i++) {\n comp.tracks[i] = new TrackModel(comp.tracks[i]);\n        // for waveform\n (<any>comp.tracks[i]).model = {\n          // fix is only for demo tracks since they use files from app folder\n target: fixAppLocal(comp.tracks[i].filepath)\n };\n }\n // ensure list ref is updated to use hydrated model\n list[c] = comp;\n }\n return list;\n }\n  ...\n}\n\nconst fixAppLocal = function (filepath: string) {\n if (filepath.indexOf('~/') === 0) {    // needs to be absolute path and not ~/ app local shorthand\n return path.join(knownFolders.currentApp().path, filepath.replace('~/', ''));\n }\n return filepath;\n}\n```", "```js\nimport { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n  selector: '[slim-slider]'\n})\nexport class SlimSliderDirective {\n  @Input('slim-slider') imageName: string;\n\n  constructor(private el: ElementRef) { } \n\n  ngAfterViewInit() {\n    let uiSlider = <UISlider>this.el.nativeElement.ios;\n    if (this.imageName) {\n uiSlider.setThumbImageForState(\n UIImage.imageNamed(this.imageName), UIControlState.Normal);\n      // assume highlighted state always suffixed with '-down'\n      let imgParts = this.imageName.split('.');\n let downImg = `${imgParts[0]}-down.${imgParts[1]}`;\n uiSlider.setThumbImageForState(\n UIImage.imageNamed(downImg), UIControlState.Highlighted);\n    } else {\n      // used for shuttle control\n      uiSlider.userInteractionEnabled = false;\n      uiSlider.setThumbImageForState(UIImage.new(), UIControlState.Normal);\n    }\n  }\n}\n\n```", "```js\n<Slider slim-slider=\"fader.png\" minValue=\"0\" maxValue=\"1\" \n  width=\"94%\" top=\"50\" left=\"0\"\n  [(ngModel)]=\"track.volume\" class=\"slider fader\"></Slider>\n```", "```js\nimport { Directive, ElementRef, Input } from '@angular/core';\nimport { fromResource } from 'image-source';\nimport { getNativeApplication } from 'application';\n\nlet application: android.app.Application;\nlet resources: android.content.res.Resources;\n\nconst getApplication = function () {\n if (!application) {\n application = (<android.app.Application>getNativeApplication());\n }\n return application;\n}\n\nconst getResources = function () {\n if (!resources) {\n resources = getApplication().getResources();\n }\n return resources;\n}\n\n@Directive({\n selector: '[slim-slider]'\n})\nexport class SlimSliderDirective {\n  @Input('slim-slider') imageName: string;\n private _thumb: android.graphics.drawable.BitmapDrawable;\n\n  constructor(private el: ElementRef) { \n    el.nativeElement[(<any>slider).colorProperty.setNative] = function (v) {\n// ignore the NativeScript default color setter of this slider\n };\n  }\n\n  ngAfterViewInit() {\n    let seekBar = <android.widget.SeekBar>this.el.nativeElement.android;\n    if (this.imageName) {\n if (!seekBar) {\n        // part of view toggle - grab on next tick\n        // this helps ensure the seekBar instance can be accessed properly\n        // since this may fire amidst the view toggle switching on our tracks\n        setTimeout(() => {\n seekBar = <android.widget.SeekBar>this.el.nativeElement.android;\n this._addThumbImg(seekBar);\n });\n } else {\n this._addThumbImg(seekBar);\n }\n    } else {\n      // seekBar.setEnabled(false);\n      seekBar.setOnTouchListener(new android.view.View.OnTouchListener({\n        onTouch(view, event) {\n          return true;\n        }\n      }));\n      seekBar.getThumb().mutate().setAlpha(0);\n    }\n  }\n\n  private _addThumbImg(seekBar: android.widget.SeekBar) {\n if (!this._thumb) {\n let imgParts = this.imageName.split('.');\n let name = imgParts[0];\n const res = getResources();\n if (res) {\n const identifier: number = res.getIdentifier(\n name, 'drawable',  getApplication().getPackageName());\n if (0 < identifier) {\n          // Load BitmapDrawable with getDrawable to make use of Android internal caching\n this._thumb = <android.graphics.drawable.BitmapDrawable>res.getDrawable(identifier);\n }\n }\n }\n    if (this._thumb) {\n seekBar.setThumb(this._thumb);\n seekBar.getThumb().clearColorFilter();\n if (android.os.Build.VERSION.SDK_INT >= 21) {\n (<any>seekBar).setSplitTrack(false);\n }\n }\n }\n}\n```", "```js\nconstructor(private el: ElementRef) { \n  el.nativeElement[(<any>slider).colorProperty.setNative] = function (v) {\n    // ignore the NativeScript color setter of the slider\n  };\n}\n```"]