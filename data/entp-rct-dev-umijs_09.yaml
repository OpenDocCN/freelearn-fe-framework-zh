- en: 'Chapter 7: Single-Page Application Deployment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：单页应用部署
- en: In the previous chapter, we discussed software testing and how to write a test
    and apply it during the development process to prevent errors and improve the
    software quality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了软件测试以及如何在开发过程中编写测试并应用它来防止错误并提高软件质量。
- en: The last step in the software development life cycle is deploying the application
    to online services. In this chapter, we'll create a simple mock server as your
    application's backend using the open source **Mockachino** service. You will learn
    how to build the application and the compiled source code files generated by Umi.
    You'll also learn how to deploy and configure your application on **AWS Amplify**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发生命周期的最后一步是将应用程序部署到在线服务。在本章中，我们将使用开源的 **Mockachino** 服务创建一个简单的模拟服务器作为你的应用程序后端。你将学习如何构建应用程序以及由
    Umi 生成的编译源代码文件。你还将学习如何在 **AWS Amplify** 上部署和配置你的应用程序。
- en: 'In this chapter, we''ll cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，我们将涵盖以下主要主题：
- en: Creating a mock server with Mockachino
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Mockachino 创建模拟服务器
- en: Compiling the application and setting environment variables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译应用程序和设置环境变量
- en: Hosting the application on AWS Amplify
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS Amplify 上托管应用
- en: By the end of this chapter, you'll have learned how to build the application
    and the compiled source code files generated by Umi. You'll also know how to use
    the Mockachino service to create a mock server quickly. You'll also have learned
    how to deploy and configure single-page applications on AWS Amplify.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何构建应用程序以及由 Umi 生成的编译源代码文件。你还将了解如何快速使用 Mockachino 服务创建模拟服务器。你还将学会如何在
    AWS Amplify 上部署和配置单页应用程序。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter's exercises, you only need a computer with any OS (I
    recommend Ubuntu 20.04 or higher) and the software installed in [*Chapter 1*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*,
    Environment Setup and Introduction to UmiJS* (VS Code, Node.js, and Yarn).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，你只需要一台安装了任何操作系统（我推荐 Ubuntu 20.04 或更高版本）的电脑以及 [*第 1 章*](B18503_01_Final_JM_ePub.xhtml#_idTextAnchor014)*，环境设置和
    UmiJS 简介*（VS Code、Node.js 和 Yarn）中安装的软件。
- en: You can find the complete project in the `Chapter07` folder in the GitHub repository
    available at [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中找到完整的项目，该仓库位于 [https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs](https://github.com/PacktPublishing/Enterprise-React-Development-with-UmiJs)
    的 `Chapter07` 文件夹中。
- en: Creating a mock server with Mockachino
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mockachino 创建模拟服务器
- en: In this section, we'll create a mock server using Mockachino to simulate the
    application's backend services.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Mockachino 创建模拟服务器来模拟应用程序的后端服务。
- en: Our application is only the presentation layer of the CRM system, where users
    can visualize and input data. Before deploying it, we need online backend services
    our application can connect with for processing, storing, and receiving data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序只是 CRM 系统的表现层，用户可以可视化并输入数据。在部署之前，我们需要在线后端服务，我们的应用程序可以连接以处理、存储和接收数据。
- en: The backend services are APIs and microservices implemented by backend developers
    to securely and efficiently apply business logic and store information such as
    opportunities, activities, customers, and user information.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 后端服务是由后端开发者实现的 API 和微服务，用于安全高效地应用业务逻辑并存储诸如机会、活动、客户和用户信息等信息。
- en: As the objective of this book is to teach React development with UmiJS, we won't
    build backend services. We'll use **Mockachino** to simulate the backend.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的目的是用 UmiJS 教授 React 开发，我们不会构建后端服务。我们将使用 **Mockachino** 来模拟后端。
- en: Mockachino is a straightforward service for creating a mock server. We only
    need to define an endpoint, and Mockachino will provide a space and a secret link
    to access the space whenever necessary.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Mockachino 是一个创建模拟服务器的简单服务。我们只需要定义一个端点，Mockachino 就会提供空间和秘密链接，以便在需要时访问该空间。
- en: 'Let''s start by creating the route to retrieve user information. Navigate to
    [https://www.mockachino.com/](https://www.mockachino.com/) and follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建获取用户信息的路由开始。导航到 [https://www.mockachino.com/](https://www.mockachino.com/)
    并按照以下步骤操作：
- en: In the `api/currentUser`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `api/currentUser`。
- en: 'Next, in the **HTTP Response Body** field, type the following JSON response:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 **HTTP 响应体** 字段中，输入以下 JSON 响应：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Click on **Create**, and Mockachino will provide a secret link, as shown in
    the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**，Mockachino将提供一个秘密链接，如图下所示：
- en: '![Figure 7.1 – Mockachino space secret link'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 – Mockachino空间秘密链接'
- en: '](img/Figure_7.01_B18503.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_7.01_B18503.jpg)'
- en: Figure 7.1 – Mockachino space secret link
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Mockachino空间秘密链接
- en: By clicking on the endpoint route (**GET /api/currentUser**), you can edit endpoint
    attributes such as the path, HTTP response headers, and response body.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击端点路由（**GET /api/currentUser**），您可以编辑端点属性，如路径、HTTP响应头和响应体。
- en: To create a new route, click on `mockachino.md` file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的路由，请点击`mockachino.md`文件。
- en: For your convenience, I've created a markdown file named `mockachino.md` in
    the `Chapter07` folder in this book's GitHub repository. In this file, you will
    find all the routes and the responses you must create in Mockachino before going
    through the upcoming sections.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了您的方便，我在本书GitHub仓库的`Chapter07`文件夹中创建了一个名为`mockachino.md`的markdown文件。在这个文件中，您将找到在接下来的章节中必须创建的所有路由和响应。
- en: In this section, we created a mock server using Mockachino to simulate the backend
    services. Next, let's learn how to bundle the application and set environment
    variables.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用Mockachino创建了一个模拟服务器来模拟后端服务。接下来，让我们学习如何打包应用程序并设置环境变量。
- en: Compiling the application and setting environment variables
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译应用程序和设置环境变量
- en: In this section, you'll learn what files Umi will generate and how to compile
    the application. We'll also set an environment variable to configure the URL for
    sending HTTP requests.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解Umi将生成哪些文件以及如何编译应用程序。我们还将设置一个环境变量来配置发送HTTP请求的URL。
- en: We need to transform and compile our components and dependencies into a format
    that web browsers can interpret and render before deploying the application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的组件和依赖项转换和编译成网络浏览器可以解释和渲染的格式，然后再部署应用程序。
- en: Run the `yarn build` command configured in our package scripts. This command
    will compile the application and place the compiled source code files in the `dist`
    folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行配置在我们的package scripts中的`yarn build`命令。此命令将编译应用程序并将编译后的源代码文件放置在`dist`文件夹中。
- en: '![Figure 7.2 – Compiled source code files'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2 – 编译后的源代码文件'
- en: '](img/Figure_7.02_B18503.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_7.02_B18503.jpg)'
- en: Figure 7.2 – Compiled source code files
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 编译后的源代码文件
- en: 'You will find three files in the `dist` folder:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`dist`文件夹中找到三个文件：
- en: '`index.html`: This is the HTML document containing the entry point for our
    application.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：这是包含我们应用程序入口点的HTML文档。'
- en: '`umi.css`: This is the compressed style sheet containing all the application
    styles generated by LESS files present in the project.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umi.css`：这是包含项目中所有由LESS文件生成的应用程序样式的压缩样式表。'
- en: '`umi.js`: This is the compressed file containing all the JavaScript code required
    to execute our application.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`umi.js`：这是包含执行我们应用程序所需的所有JavaScript代码的压缩文件。'
- en: Now, we need to host these files on a static server on the internet. When users
    navigate to the server's public address, the browser will request and receive
    the `index.html` document, the entry point for our application. We'll host our
    application on Amplify in the next section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在互联网上的静态服务器上托管这些文件。当用户导航到服务器的公共地址时，浏览器将请求并接收`index.html`文档，这是我们应用程序的入口点。我们将在下一节中将应用程序托管在Amplify上。
- en: Now, let's adjust your application to send requests to Mockachino.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们调整您的应用程序以向Mockachino发送请求。
- en: Configuring the API URL environment variable
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置API URL环境变量
- en: As mentioned earlier, we don't have a mock server running alongside our application
    in production. We'll send HTTP requests to Mockachino, so we need to change the
    URL argument in all functions in the `services` folder. We'll do that by configuring
    an environment variable.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在生产环境中，我们没有与我们的应用程序一起运行的模拟服务器。我们将向Mockachino发送HTTP请求，因此我们需要更改`services`文件夹中所有函数的URL参数。我们将通过配置环境变量来完成此操作。
- en: Umi can read environment variables during the build process and use their values
    in our application; we only need to set the Umi `define` configuration option.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Umi可以在构建过程中读取环境变量，并在我们的应用程序中使用它们的值；我们只需要设置Umi的`define`配置选项。
- en: 'Let''s create an environment variable to set the API URL by following these
    steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个环境变量来设置API URL：
- en: 'Create a new file named `.env` in the project''s root folder and create a variable
    called `API_URL` as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录下创建一个名为`.env`的新文件，并创建一个名为`API_URL`的变量，如下所示：
- en: '[PRE1]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Replace the value with the URL provided by Mockachino.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将值替换为Mockachino提供的URL。
- en: 'Add the `define` option to the configuration in the `config.ts` file as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`define`选项添加到`config.ts`文件中的配置，如下所示：
- en: '[PRE2]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This configuration defines the `API_URL` variable in the project.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置在项目中定义了`API_URL`变量。
- en: 'Now, let''s create a file to export the variable and prevent TypeScript warnings.
    Create a new file called `env.ts` in the `config` folder and export the variable
    as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个文件来导出变量并防止TypeScript警告。在`config`文件夹中创建一个名为`env.ts`的新文件，并按照以下方式导出变量：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `user.ts` file in the `src/services` folder, import the `env.ts` file
    as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/services`文件夹中的`user.ts`文件中，按照以下方式导入`env.ts`文件：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, add `API_URL` to the first argument of the `request` function as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`API_URL`添加到`request`函数的第一个参数中，如下所示：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Follow the last two steps to change all the `request` functions in all files
    in the `services` folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按照最后两个步骤更改`services`文件夹中所有文件的`request`函数。
- en: In this section, you learned how to compile our application's source code files
    and what files Umi generates during the build process. We also created an environment
    variable and changed the requests to use Mockachino as the backend.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何编译应用程序的源代码文件以及Umi在构建过程中生成的文件。我们还创建了一个环境变量，并将请求更改为使用Mockachino作为后端。
- en: Now, we'll host our application on AWS using the Amplify Console services.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用Amplify控制台服务在AWS上托管我们的应用程序。
- en: Hosting the application on AWS Amplify
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS Amplify上托管应用程序
- en: In this section, you'll learn how to deploy and configure single-page applications
    on **Amazon Web Services** (**AWS**) by hosting our application using Amplify
    Console.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，您将学习如何通过使用Amplify控制台托管我们的应用程序来在**亚马逊网络服务**（**AWS**）上部署和配置单页应用程序。 '
- en: '**AWS Amplify** is a flexible set of tools for web and mobile frontend developers
    to create and deploy applications on AWS using various services. With Amplify,
    you can quickly build and deploy a full stack application without having to research
    and learn individual AWS services.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Amplify**是一套灵活的工具，供网络和移动前端开发者使用，通过AWS的各种服务创建和部署应用程序。使用Amplify，你可以快速构建和部署全栈应用程序，无需研究和学习单个AWS服务。'
- en: We'll use Amplify only to host our application, but you can create backend services
    and add authentication, artificial intelligence, machine learning, and more using
    the Amplify framework and Amplify Studio. If you want to know more, visit the
    framework's documentation page at [https://docs.amplify.aws/](https://docs.amplify.aws/).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅使用Amplify来托管我们的应用程序，但您可以使用Amplify框架和Amplify Studio创建后端服务，添加身份验证、人工智能、机器学习等。如果您想了解更多信息，请访问框架的文档页面[https://docs.amplify.aws/](https://docs.amplify.aws/)。
- en: Before proceeding to the following steps, you need to push the project to a
    new repository in your personal GitHub account.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行以下步骤之前，您需要将项目推送到您个人GitHub账户的新仓库中。
- en: Also, you need to create a free AWS account. Visit [https://aws.amazon.com/free](https://aws.amazon.com/free),
    click on **Create a Free Account**, and fill in the form with the required information
    to create your account.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还需要创建一个免费的AWS账户。访问[https://aws.amazon.com/free](https://aws.amazon.com/free)，点击**创建免费账户**，填写所需信息以创建您的账户。
- en: 'Now, after pushing the code to a new repository and creating your AWS account,
    follow these steps to host our application on Amplify:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在将代码推送到新仓库并创建您的AWS账户后，按照以下步骤在Amplify上托管我们的应用程序：
- en: Navigate to [http://console.aws.amazon.com/amplify/home](http://console.aws.amazon.com/amplify/home)
    and sign in to your AWS account.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[http://console.aws.amazon.com/amplify/home](http://console.aws.amazon.com/amplify/home)并登录您的AWS账户。
- en: 'Click on the menu highlighted in the following screenshot and, after that,
    click on **All apps**:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击以下屏幕截图中的高亮菜单，然后点击**所有应用**：
- en: '![Figure 7.3 – Left-side menu'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.3 – 左侧菜单'
- en: '](img/Figure_7.03_B18503.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.03_B18503.jpg)'
- en: Figure 7.3 – Left-side menu
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 左侧菜单
- en: 'At the top right of the page, click on the **New app** dropdown and select
    **Host web app**:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面右上角，点击**新建应用**下拉菜单并选择**托管网络应用**：
- en: '![Figure 7.4 – Host web app option'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4 – 托管网络应用选项'
- en: '](img/Figure_7.04_B18503.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.04_B18503.jpg)'
- en: Figure 7.4 – Host web app option
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 托管网络应用选项
- en: 'Now, select **GitHub** in the **From your existing code** section, click on
    **Continue**, and sign in to your GitHub account:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**从现有代码**部分选择**GitHub**，点击**继续**，并登录您的GitHub账户：
- en: '![Figure 7.5 – Selecting a source Git provider'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5 – 选择源Git提供者'
- en: '](img/Figure_7.05_B18503.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.05_B18503.jpg)'
- en: Figure 7.5 – Selecting a source Git provider
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 选择源Git提供者
- en: 'Next, select the repository you created for our project and click on **Next**:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择您为我们项目创建的仓库，然后点击 **下一步**：
- en: '![Figure 7.6 – Selecting a GitHub repository'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.6 – 选择 GitHub 仓库'
- en: '](img/Figure_7.06_B18503.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.06_B18503.jpg]'
- en: Figure 7.6 – Selecting a GitHub repository
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 选择 GitHub 仓库
- en: 'In **Step 2 Configure build settings**, in the **Build and test settings**
    section, click on **Edit**, modify line 12 as follows, and click on **Save**:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **步骤 2 配置构建设置** 中，在 **构建和测试设置** 部分中，点击 **编辑**，将第 12 行修改如下，然后点击 **保存**：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This configuration will set where Amplify looks for source code when running
    the automated pipeline.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置将设置 Amplify 在运行自动化管道时查找源代码的位置。
- en: '![Figure 7.7 – Configuring the source code base directory'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.7 – 配置源代码基本目录'
- en: '](img/Figure_7.07_B18503.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.07_B18503.jpg]'
- en: Figure 7.7 – Configuring the source code base directory
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 配置源代码基本目录
- en: 'Click on `API_URL`, and then paste the Mockachino secret link in the **Value**
    field:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `API_URL`，然后在 **值** 字段中粘贴 Mockachino 的密钥链接：
- en: '![Figure 7.8 – Creating environment variables'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.8 – 创建环境变量'
- en: '](img/Figure_7.08_B18503.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.08_B18503.jpg]'
- en: Figure 7.8 – Creating environment variables
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 创建环境变量
- en: 'Now, click on **Next** and, in the next step, review the configurations and
    click on **Save and deploy**:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **下一步**，在下一步中，审查配置并点击 **保存和部署**：
- en: '![Figure 7.9 – Reviewing and deploying the application'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.9 – 审查和部署应用程序'
- en: '](img/Figure_7.09_B18503.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.09_B18503.jpg]'
- en: Figure 7.9 – Reviewing and deploying the application
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 审查和部署应用程序
- en: 'Wait for the pipeline to succeed and click on the public address to access
    the application:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待管道成功，然后点击公共地址以访问应用程序：
- en: '![Figure 7.10 – Application public address'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.10 – 应用程序公共地址'
- en: '](img/Figure_7.10_B18503.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.10_B18503.jpg]'
- en: Figure 7.10 – Application public address
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 应用程序公共地址
- en: Now, let's take a closer look at more Amplify settings.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地看看更多的 Amplify 设置。
- en: Understanding more Amplify settings
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解更多 Amplify 设置
- en: When hosting a single-page application, it is necessary to configure the server
    to only respond to requests with the `index.html` page; otherwise, the server
    will respond with an error as other pages do not exist on the server.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当托管单页应用程序时，有必要配置服务器以仅对带有 `index.html` 页面的请求做出响应；否则，服务器将返回错误，因为其他页面不存在于服务器上。
- en: Amplify provides a default routing rule in the `index.html` file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify 在 `index.html` 文件中提供了一个默认的路由规则。
- en: '![Figure 7.11 – Rewrites and redirects configuration'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.11 – 重写和重定向配置'
- en: '](img/Figure_7.11_B18503.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_7.11_B18503.jpg]'
- en: Figure 7.11 – Rewrites and redirects configuration
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – 重写和重定向配置
- en: Amplify also provides a public address on the `amplifyapp` domain, but you can
    easily add your custom domain by accessing **Domain management** in the left-side
    menu.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Amplify 还在 `amplifyapp` 域上提供公共地址，但您可以通过在左侧菜单中访问 **域名管理** 来轻松添加自定义域名。
- en: The domain can be from a hosted zone on AWS Route 53 or other providers, and
    AWS also provides a free SSL certificate to secure your application's domain.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 域名可以是 AWS Route 53 或其他提供商的托管区域，AWS 还提供免费的 SSL 证书来保护您应用程序的域名。
- en: '![Figure 7.12 – Amplify Domain management](img/Figure_7.12_B18503.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Figure_7.12 – Amplify 域名管理](img/Figure_7.12_B18503.jpg)'
- en: Figure 7.12 – Amplify Domain management
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – Amplify 域名管理
- en: In this section, you created a free AWS account and hosted your application
    on AWS by connecting Amplify with the repository in your GitHub account. You also
    learned how to configure rewrites and redirects and manage your custom domain
    on the Amplify Console.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您创建了一个免费的 AWS 账户，并通过将 Amplify 与您 GitHub 账户中的仓库连接来在 AWS 上托管您的应用程序。您还学习了如何在
    Amplify 控制台中配置重写和重定向以及管理您的自定义域名。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a mock server for our application using Mockachino,
    an open source project for quickly mocking servers. You also learned what files
    Umi generates during the build process for browsers to interpret and render the
    application. You created an environment variable to define the URL our application
    will use to send requests.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 Mockachino（一个用于快速模拟服务器的开源项目）为我们的应用程序创建了一个模拟服务器。您还学习了 Umi 在构建过程中为浏览器解释和渲染应用程序而生成的文件。您创建了一个环境变量来定义我们的应用程序将用于发送请求的
    URL。
- en: You learned how to push your application to a repository in your personal GitHub
    account and created a free AWS account. Next, you hosted your application on AWS
    by connecting AWS Amplify to your GitHub repository. You also learned how to configure
    rewrites and redirects, and manage your custom domains on the Amplify Console.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何将你的应用程序推送到个人GitHub账户的仓库中，并创建了一个免费的AWS账户。接下来，你通过将AWS Amplify连接到你的GitHub仓库，在AWS上托管了你的应用程序。你还学会了如何配置重写和重定向，并在Amplify控制台上管理你的自定义域名。
- en: I hope this book has helped you learn how to use UmiJS combined with Ant Design
    to create robust and professional React applications that provide a great user
    experience. Keep practicing and exploring the techniques you've learned from this
    book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这本书已经帮助你学会了如何使用UmiJS结合Ant Design来创建强大且专业的React应用程序，这些应用程序提供了极佳的用户体验。继续练习和探索这本书中学到的技术。
