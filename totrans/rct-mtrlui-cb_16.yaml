- en: Menus - Display Actions That Pop Out
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单 - 显示弹出动作
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Composing menus with state
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态组合菜单
- en: Menu scrolling options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单滚动选项
- en: Using menu transitions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用菜单过渡
- en: Customizing menu items
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义菜单项
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Menus are used to organize a set of commands that can be executed by the user.
    Typically, a menu has some context, such as a details screen for some resource
    in the application. Material-UI comes with a `Menu` component that enables you
    to organize commands for a given screen.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单用于组织用户可以执行的一组命令。通常，菜单有一些上下文，比如应用程序中某个资源的详细信息屏幕。Material-UI提供了一个`Menu`组件，它允许你为给定的屏幕组织命令。
- en: Composing menus with state
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态组合菜单
- en: The `Menu` components are used to perform some actions. Think of menus as a
    combination of lists and buttons. Menus are best suited for scenarios when you
    only want to show the menu items temporarily. The visibility of the menu and the
    menu items can be controlled via the component state.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Menu`组件用于执行某些操作。将菜单视为列表和按钮的组合。菜单最适合在只想临时显示菜单项的场景中使用。菜单和菜单项的可见性可以通过组件状态来控制。'
- en: How to do it...
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s say that a component in your application has a menu button that, when
    clicked, displays a menu with several options in it. The options could change
    based on other pieces of state in the application, such as permissions, or the
    state of another resource. Here''s the source to build this component:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用程序中有一个组件有一个菜单按钮，点击后会显示一个包含几个选项的菜单。这些选项可以根据应用程序中的其他状态变化，比如权限或另一个资源的状态。以下是构建此组件的源代码：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what you''ll see when the screen first loads:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，你会看到以下内容：
- en: '![](img/aa8cf55e-2588-4753-a818-086a34dfa812.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aa8cf55e-2588-4753-a818-086a34dfa812.png)'
- en: 'When you click on the MENU button, the menu is displayed as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击菜单按钮时，菜单会按以下方式显示：
- en: '![](img/d9c68268-cb1f-4e70-8664-b069123f4325.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d9c68268-cb1f-4e70-8664-b069123f4325.png)'
- en: How it works...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start by looking at the state of the `ComposingMenusWithState` component:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看`ComposingMenusWithState`组件的状态：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `anchorEl` state references the element that the menu is anchored to when
    the menu is open. When it''s null, the menu are closed. The `items` array contains
    the menu items. The `name` property is rendered as the menu item text. The `onClick`
    function is called when the menu item is selected. The `disabled` property disables
    the item when `true`. Next, let''s look at the `onOpen()` and `onClose()` handlers:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchorEl`状态引用了当菜单打开时菜单所锚定的元素。当它是null时，菜单是关闭的。`items`数组包含菜单项。`name`属性被渲染为菜单项文本。当菜单项被选中时，会调用`onClick`函数。当`disabled`属性为`true`时，会禁用该项。接下来，让我们看看`onOpen()`和`onClose()`处理程序：'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the user clicks on the menu button, the `anchorEl` state is set to `e.currentTarget`—this
    is the button that was clicked and is how the menu knows where to render itself.
    When the menu is closed, this is set to `null` and results in the menu being hidden.
    Finally, let''s look at the `Menu` markup:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击菜单按钮时，`anchorEl`状态被设置为`e.currentTarget`——这是被点击的按钮，也是菜单知道如何渲染自己的方式。当菜单关闭时，这被设置为`null`，导致菜单被隐藏。最后，让我们看看`Menu`标记：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `open` property expects a Boolean, which is why changing the `anchorEl`
    state results in `Boolean(anchorEL)` either opening or closing the menu as the
    user interacts with it. The `items` state is then mapped to the `MenuItem` components.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`open`属性期望一个布尔值，这就是为什么改变`anchorEl`状态会导致`Boolean(anchorEL)`根据用户与它的交互打开或关闭菜单。然后`items`状态被映射到`MenuItem`组件。'
- en: There's more...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If your application has several screens you could make your own `Menu` component
    that takes care of mapping items to the `MenuItem` components. Let''s modify this
    example to build a menu abstraction and to further illustrate how menu items can
    change state as the application data changes over time. Here''s the modified example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序有多个屏幕，你可以创建自己的`Menu`组件，该组件负责将项目映射到`MenuItem`组件。让我们修改这个示例来构建菜单抽象，并进一步说明菜单项如何随着应用程序数据随时间变化而改变状态。以下是修改后的示例：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `MyMenu` component takes the `onClose` handler, the `anchorEl` state, and
    the `items` array as properties. To show how you can update the menu item state
    and have them render (even while the menu is open), there''s a new `toggleFourth()`
    handler that''s applied to the `onClick` property of the first menu item. It''s
    applied inside of `useEffect()`, because this is the only way for `toggleFourth()`
    to get the new `items` value; when it changes, we have to redefine the function
    and then reassign it to `onClick`. This will toggle the text of the first menu
    item and the disabled state of the `Fourth` item. Here''s what the menu looks
    when it''s first opened:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyMenu` 组件接受 `onClose` 处理程序、`anchorEl` 状态和 `items` 数组作为属性。为了展示您如何更新菜单项状态并使它们渲染（即使在菜单打开时），有一个新的
    `toggleFourth()` 处理程序应用于第一个菜单项的 `onClick` 属性。它是在 `useEffect()` 内部应用的，因为这是 `toggleFourth()`
    获取新 `items` 值的唯一方式；当它改变时，我们必须重新定义函数并将其重新分配给 `onClick`。这将切换第一菜单项的文本和 `Fourth` 项的禁用状态。以下是菜单首次打开时的样子：'
- en: '![](img/5b023b87-d175-44ca-a276-4d7c2582c957.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b023b87-d175-44ca-a276-4d7c2582c957.png)'
- en: 'Here''s what the menu looks like after clicking on the first menu item:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 点击第一个菜单项后，菜单看起来是这样的：
- en: '![](img/93b0018a-c01f-4c41-af7b-590d79afd72b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93b0018a-c01f-4c41-af7b-590d79afd72b.png)'
- en: The text of the first item has been toggled, and the fourth item is now enabled.
    You can keep clicking on the first item to keep toggling the states of these two
    items.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项的文本已被切换，第四项现在处于启用状态。您可以继续点击第一项以切换这两个项目的状态。
- en: See also
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Menu` 演示：[https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Menu` API 文档：[https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: Menu scrolling options
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单滚动选项
- en: Sometimes menus have lots of options. This can pose a problem with regard to
    the height of the menu. Instead of having really long menus displayed, you can
    place a maximum height on the menu and have it scroll vertically.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时菜单有很多选项。这可能会对菜单的高度造成问题。您不必显示非常长的菜单，可以为菜单设置最大高度，并使其垂直滚动。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s say that you need to render a menu with more options than can reasonably
    be rendered at once on the screen. Also, one of the menu items can be in a selected
    state. Here''s some code that shows how to deal with this situation:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要渲染一个菜单，其中包含的选项比一次合理显示在屏幕上的多。此外，菜单中的一个选项可能处于选中状态。以下是一些代码示例，展示了如何处理这种情况：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Initially, no item is selected. Here''s what the menu looks like when it''s
    opened for the first time:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，没有项目被选中。以下是菜单首次打开时的样子：
- en: '![](img/c481fcdb-f151-49ff-89b6-c5f2c509076f.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c481fcdb-f151-49ff-89b6-c5f2c509076f.png)'
- en: 'You can scroll through the menu items. Here''s what the bottom of the menu
    looks like:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以滚动菜单项。以下是菜单底部的样子：
- en: '![](img/cd946b31-2f0f-4837-ab82-726c7e06fb68.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd946b31-2f0f-4837-ab82-726c7e06fb68.png)'
- en: 'You can make a selection that closes the menu. The selection is preserved,
    so that the next time you open the menu, you''ll see the selected item:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择一个选项来关闭菜单。选择将被保留，因此下次您打开菜单时，您将看到所选的项目：
- en: '![](img/37fd8098-e122-4c46-995b-f6f9de59e7eb.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37fd8098-e122-4c46-995b-f6f9de59e7eb.png)'
- en: When the menu has a selected item, the `Menu` component will scroll to the selected
    item automatically. You can test this by scrolling the selected item out of view
    before closing the menu then reopening it. You'll see the selected item in the
    middle of the menu.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当菜单有一个选中项时，`Menu` 组件会自动滚动到选中项。您可以通过在关闭菜单后再重新打开它，将选中项滚动出视图来测试这一点。您将在菜单中间看到选中项。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start by looking at the `menuPaper` style used in this example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看这个例子中使用的 `menuPaper` 样式：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `ITEM_HEIGHT` value is an approximation of the height of each menu item.
    The multiplier (`4.5`) is an approximation of how many menu items should fit on
    the screen. Now, let''s jump into the `Menu` component markup:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`ITEM_HEIGHT` 值是每个菜单项高度的近似值。乘数（`4.5`）是屏幕上应适合多少菜单项的近似值。现在，让我们跳入 `Menu` 组件的标记：'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `selected` property of each `MenuItem` component is set to `true` if the
    `selected` state matches the `index` of the current item. The `menuPaper` class
    is applied via the `PaperProps` property, but there's an `elevation8` property
    inside where the class is actually applied. This is because if you just assign
    the class via `className`, the `Menu` component will just override the `maxHeight`
    style. To get around this, you have to use a more specific CSS API. The `Paper`
    component has several elevation points—the higher the number, the more shadow
    that is applied (giving the element the appearance of being higher).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `MenuItem` 组件的 `selected` 属性在 `selected` 状态与当前项的 `index` 匹配时设置为 `true`。`menuPaper`
    类通过 `PaperProps` 属性应用，但其中有一个 `elevation8` 属性，实际上应用了该类。这是因为如果您只是通过 `className`
    分配类，`Menu` 组件将覆盖 `maxHeight` 样式。为了解决这个问题，您必须使用更具体的 CSS API。`Paper` 组件有几个高度级别——数字越高，应用的阴影就越多（使元素看起来更高）。
- en: The default elevation of `Paper` is `2`. But the `Menu` component uses a `Popover`
    component to render `Paper` that changes the elevation to `8`. Long story short,
    the `elevation8` CSS API enabled you to apply styles from a class that override
    the defaults. This is how you get a scrollable menu.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Paper` 的默认高度为 `2`。但 `Menu` 组件使用 `Popover` 组件来渲染 `Paper`，将高度更改为 `8`。简而言之，`elevation8`
    CSS API 允许您应用覆盖默认值的类样式。这就是如何得到可滚动的菜单。'
- en: See also
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Menu` 示例：[https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Menu` API 文档：[https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: Using menu transitions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用菜单过渡
- en: You can change the transition that's used by the `Menu` component. By default,
    `Menu` uses the `Grow` transition component.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改 `Menu` 组件使用的过渡效果。默认情况下，`Menu` 使用 `Grow` 过渡组件。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'To demonstrate how to apply different transitions to the `Menu` component,
    we''ll add some transition options to Storybook for this example. You can change
    the transition component that''s used, as well as the duration of the transition
    using the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何将不同的过渡效果应用到 `Menu` 组件，我们将为这个示例添加一些过渡选项到 Storybook。您可以使用以下代码更改使用的过渡组件，以及过渡效果的持续时间：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You'll see the different transition options in the Storybook Knobs panel. When
    you change the transition, you'll notice the difference when you open and close
    the menu. Unfortunately, I can't capture a screenshot of these transitions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在 Storybook Knobs 面板中看到不同的过渡选项。当您更改过渡效果时，您将在打开和关闭菜单时注意到差异。不幸的是，我无法捕获这些过渡效果的截图。
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `transition` property passed to the `UsingMenuTransitions` component comes
    from Storybook and is used to determine the transition used. Let''s take a closer
    look at the `TransitionComponent` property that''s used by `Menu` to determine
    which transition to use:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `UsingMenuTransitions` 组件的 `transition` 属性来自 Storybook，并用于确定使用的过渡效果。让我们更详细地看看
    `Menu` 使用的 `TransitionComponent` 属性，以确定使用哪种过渡效果：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `transition` string maps to a Material-UI transition component that you
    can pass to `Menu`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`transition` 字符串映射到 Material-UI 过渡组件，您可以将其传递给 `Menu`。'
- en: See also
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Menu` 示例：[https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`菜单` API 文档：[https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`菜单项` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
- en: '`Collapse` API documentation: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collapse` API 文档：[https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
- en: '`Fade` API documentation: [https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fade` API 文档：[https://material-ui.com/api/collapse/](https://material-ui.com/api/collapse/)'
- en: '`Grow` API documentation: [https://material-ui.com/api/grow/](https://material-ui.com/api/grow/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Grow` API 文档：[https://material-ui.com/api/grow/](https://material-ui.com/api/grow/)'
- en: '`Slide` API documentation: [https://material-ui.com/api/slide/](https://material-ui.com/api/slide/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Slide` API 文档：[https://material-ui.com/api/slide/](https://material-ui.com/api/slide/)'
- en: Customizing menu items
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义菜单项
- en: You can change regular menu items that have `onClick` handlers into something
    more elaborate. For example, you might want a menu with links to other screens
    in your app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将具有 `onClick` 处理器的常规菜单项改为更复杂的形式。例如，你可能希望菜单中包含指向你应用中其他屏幕的链接。
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s say that you''re using `react-router` in your application to control
    the navigation from one screen to another, and you would like to use a `Menu`
    component to `render` links. Here''s an example that shows how to do this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在你的应用程序中使用 `react-router` 来控制从一个屏幕到另一个屏幕的导航，并且你希望使用 `Menu` 组件来 `渲染` 链接。以下是一个示例，展示了如何实现这一点：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s what you''ll see when the screen first loads:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当屏幕首次加载时，你会看到以下内容：
- en: '![](img/f07e1710-fdfb-47c3-ab7b-f32f9fa091a0.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f07e1710-fdfb-47c3-ab7b-f32f9fa091a0.png)'
- en: 'Here''s what the MENU looks like when it''s opened:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当菜单打开时，菜单看起来是这样的：
- en: '![](img/9f3436c8-fb11-4926-bd67-23dc7a1e7655.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9f3436c8-fb11-4926-bd67-23dc7a1e7655.png)'
- en: 'Try clicking on Page 1\. This should close the MENU and change the content
    rendered below the MENU, because you just navigated to another screen, as shown
    in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试点击第1页。这应该会关闭菜单并更改菜单下方显示的内容，因为你已经导航到了另一个屏幕，如下面的截图所示：
- en: '![](img/25a82401-f003-4949-9ed0-7e67db9b4881.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/25a82401-f003-4949-9ed0-7e67db9b4881.png)'
- en: 'The active link is reflected in the menu. Here''s what the menu looks like
    if you open it from Page 1:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃链接会在菜单中反映出来。如果你从第1页打开菜单，菜单看起来是这样的：
- en: '![](img/b88c3780-f3f1-417c-9aa3-1db217741c2c.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b88c3780-f3f1-417c-9aa3-1db217741c2c.png)'
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start by looking at the `NavMenuItem` component:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看 `NavMenuItem` 组件开始：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will render a `MenuItem` component based on the current route. If the
    `to` property value matches the current route, then the `selected` property will
    be `true`—this is how the menu item appears to be selected when you open the menu.
    Next, let''s look at the `Menu` markup:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将基于当前路由渲染一个 `MenuItem` 组件。如果 `to` 属性的值与当前路由匹配，则 `selected` 属性将为 `true`——这就是当你打开菜单时菜单项看起来被选中时的原因。接下来，让我们看看
    `Menu` 的标记：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Instead of rendering the `MenuItem` components, you can render the `NavMenuItem`
    components. These result in links being rendered with the selected property set
    to `true` for the current route. Note that the `to` property is required here
    in order to link to another page, and the `onClick` handler is necessary in order
    to close the menu as the page transition happens.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以渲染 `NavMenuItem` 组件而不是渲染 `MenuItem` 组件。这些组件将渲染带有 `selected` 属性设置为 `true`
    的当前路由的链接。请注意，这里需要 `to` 属性来链接到另一个页面，并且需要 `onClick` 处理器来在页面过渡时关闭菜单。
- en: See also
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '`Menu` demos: [https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`菜单`演示：[https://material-ui.com/demos/menus/](https://material-ui.com/demos/menus/)'
- en: '`Menu` API documentation: [https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Menu` API 文档：[https://material-ui.com/api/menu/](https://material-ui.com/api/menu/)'
- en: '`MenuItem` API documentation: [https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MenuItem` API 文档：[https://material-ui.com/api/menu-item/](https://material-ui.com/api/menu-item/)'
