["```js\npost {\n  id\n  text\n  user {\n    user_id\n    name\n  } \n}\n```", "```js\n    curl -fsSL https://deb.nodesource.com/setup_14.x | sudo bash -\n    ```", "```js\n    apt-get install -y nodejs build-essential\n    ```", "```js\n    node --version\n    ```", "```js\nmkdir ~/graphbook\ncd ~/graphbook\n```", "```js\nnpm init\n```", "```js\nnpm install --save react react-dom\n```", "```js\n    mkdir public\n    cd public\n    touch index.html\n    ```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, \n           initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>Graphbook</title>\n      </head>\n      <body>\n        <div id=\"root\"></div>\n      </body>\n    </html>\n    ```", "```js\nnpm install --save-dev @babel/core babel-loader @babel/preset-env @babel/preset-react clean-webpack-plugin css-loader file-loader html-webpack-plugin style-loader url-loader webpack webpack-cli webpack-dev-server\n```", "```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst buildDirectory = 'dist';\nconst outputDirectory = buildDirectory + '/client';\nmodule.exports = {\n  mode: 'development',\n  entry: './src/client/index.js',\n  output: {\n    path: path.join(__dirname, outputDirectory),\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader'\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }, \n  devServer: {\n    port: 3000,\n    open: true\n  },\n  plugins: [\n    new CleanWebpackPlugin({\n      cleanOnceBeforeBuildPatterns: [path.join(__dirname, \n      buildDirectory)]\n    }),\n    new HtmlWebpackPlugin({\n      template: './public/index.html'\n    })\n  ]\n};\n```", "```js\nmkdir -p src/client\ncd src/client\ntouch index.js\n```", "```js\n\"client\": \"webpack serve --devtool inline-source-map --hot --config webpack.client.config.js\"\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App/>, document.getElementById('root'));\n```", "```js\nimport React from 'react';\nconst App = () => {\n    return (\n        <div>Hello World!</div>\n    )\n}\nexport default App\n```", "```js\n{\n  \"presets\": [\"@babel/env\",\"@babel/react\"]\n}\n```", "```js\nconst initialPosts = [\n    {\n        id: 2,\n        text: 'Lorem ipsum',\n        user: {\n        avatar: '/uploads/avatar1.png',\n        username: 'Test User'\n        }\n    },\n    {\n        id: 1,\n        text: 'Lorem ipsum',\n        user: {\n        avatar: '/uploads/avatar2.png',\n        username: 'Test User 2'\n        }\n    }\n];\n```", "```js\nimport React, { useState } from 'react';\n```", "```js\nconst [posts, setPosts] = useState(initialPosts);\nreturn (\n  <div className=\"container\">\n    <div className=\"feed\">\n      { initialPosts.map((post, i) => \n        <div key={post.id} className=\"post\">\n          <div className=\"header\">\n            <img src={post.user.avatar} />\n            <h2>{post.user.username}</h2>\n          </div>\n          <p className=\"content\">\n            {post.text}\n          </p>\n        </div>\n      )}\n    </div>\n  </div>\n)\n```", "```js\n{\n  test: /\\.css$/,\n  use: ['style-loader', 'css-loader'],\n},\n```", "```js\nbody {\n  background-color: #f6f7f9;\n  margin: 0;\n  font-family: 'Courier New', Courier, monospace\n}\np {\n  margin-bottom: 0;\n}\n.container {\n  max-width: 500px;\n  margin: 70px auto 0 auto;\n}\n.feed {\n  background-color: #bbb;\n  padding: 3px;\n  margin-top: 20px;\n}\n.post {\n  background-color: #fff;\n  margin: 5px;\n}\n.post .header {\n  height: 60px;\n}\n.post .header > * {\n  display: inline-block;\n  vertical-align: middle;\n}\n.post .header img {\n  width: 50px;\n  height: 50px;\n  margin: 5px;\n}\n.post .header h2 {\n  color: #333;\n  font-size: 24px;\n  margin: 0 0 0 5px;\n}\n.post p.content {\n  margin: 5px;\n  padding: 5px;\n  min-height: 50px;\n}\n```", "```js\nimport '../../assets/css/style.css';\n```", "```js\n<div className=\"postForm\">\n  <form onSubmit={handleSubmit}>                      \n    <textarea value={postContent} onChange={(e) => \n      setPostContent(e.target.value)}\n      placeholder=\"Write your custom post!\"/>\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n</div>\n```", "```js\nconst [postContent, setPostContent] = useState('');\n```", "```js\nform {\n  padding-bottom: 20px;\n}\nform textarea {\n  width: calc(100% - 20px);\n  padding: 10px;\n  border-color: #bbb;\n}\nform [type=submit] {\n  border: none;\n  background-color: #6ca6fd;\n  color: #fff;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 14px;\n  float: right;\n}\n```", "```js\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    const newPost = {\n        id: posts.length + 1,\n        text: postContent,\n        user: {\n            avatar: '/uploads/avatar1.png',\n            username: 'Fake User'\n        }\n    };\n    setPosts([newPost, ...posts]);\n    setPostContent('');\n};\n```", "```js\n    head tags inside your template. This has the advantage that, before React has been rendered, there is always the default document head. For our case, you can directly apply a title and description in App.js.\n    ```", "```js\n    import { Helmet } from 'react-helmet';\n    ```", "```js\n    <Helmet>\n      <title>Graphbook - Feed</title>\n      <meta name=\"description\" content=\"Newsfeed of all\n        your friends on Graphbook\" />\n    </Helmet>\n    ```", "```js\nnpm install --save-dev mini-css-extract-plugin\n```", "```js\n\"client:build\": \"webpack --config webpack.client.build.config.js\"\n```", "```js\n    const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n    ```", "```js\n    {\n      test: /\\.css$/,\n      use: [{ loader: MiniCssExtractPlugin.loader,\n        options: {\n          publicPath: '../'\n        }\n     }, 'css-loader'],\n    },\n    ```", "```js\n    new MiniCssExtractPlugin({\n      filename: 'bundle.css',\n    })\n    ```"]